{
    "sindresorhus": "You're of course right. Can't remember reading that in the spec, but it's a while since I've looked at it.\nI removed the check in my code and added a notice of Chrome not following the spec in the readme.\nThanks for letting me know :)\n. The spec says nothing about how to handle keyboard input, so no wonder there are some inconsistencies.\n. I agree, didn't think of that. I've changed it now. Will fix it on my other repos with other changes. You should consider adding that recommendation to the EditorConfig site.\n. Programmatic fullscreen mode is only single page. It's just Chrome that doesn't follow the spec.\nSee Known inconsistencies in the readme.\n. Strange. It exits in Firefox when using this document.documentElement.mozRequestFullScreen() and navigating to another site.\n. Yes, of course. But they have completely different usecases.\n. Ya, there is a reason it isn't spec'd like that.\n. Fixed. Thanks for the report :)\n. Fixed this an hour ago. Thanks anyway :)\n. You have to add the allowfullscreen attribute (+ attributes with vendor prefixes) to the iframe\nhttps://github.com/sindresorhus/screenfull.js#request\n. Thanks for the report. Fixed in 1.0.2\n. It does, you need to wrap your expression in parens:\njs\nscreenfull.onchange = function(){\n    console.log('Am I fullscreen? ' + (screenfull.isFullscreen ? 'Yes' : 'No') );\n};\n. Thanks man. I've modified the PR a little bit.\nCan you confirm it works on Safari 5.1? And I'll tag a release.\n. IE doesn't support the Fullscreen API, not even IE10, maybe in IE20. That's why you check screenfull.enabled and have the ability to implement a fallback if it's not true.\n. Tried the latest build out, but couldn't get fullscreen to trigger.\n. Just tried it in IE10 and it returned false\n\nCan you reproduce it on another machine?\n. I already had a list of supported browsers, but it's probably easier to let caniuse keep it up to date.\n. .toggle() calls .request(), so it shouldn't be any different.\n. That's not possible. From docs:\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n. It's different and you can't. By design by the browser vendors.\n. onchange was a mistake.\n\nYou can already do that with document.addEventListener(screenfull.raw.fullscreenchange, function () {});\nI should probably document that.\n. Thanks so much :D Really appreciate you doing the work.\nhttps://github.com/sindresorhus/screenfull.js/commit/928c2c9a6fb83dcd958b375830505fc10921ba8f\n. https://github.com/sindresorhus/screenfull.js#support\n. The fullscreen api is meant to be used on a single page. However there are ways to work around this by either making your page a single-page app or using this iframe trick https://github.com/sindresorhus/screenfull.js/blob/gh-pages/index.html#L202-L219\nThis is an issue tracker and not a support forum. Keep questions on StackOverflow ;)\n. Unfortunately that wouldn't work as it can be only be brought into fullscreen by a real user even on an element on the page (bookmarklet button doesn't count).\n. I also don't see the point. Browsers have built-in functionality in its GUI for toggling fullscreen.\n. http://chrome.google.com\n. No thanks. You can easily use the RJS shim config.\n. MSFullscreenerror too then I assume?\n. Thanks :)\n. That's strange, but as you said; it's happening with the native events, which I can't really do anything about.\n. https://github.com/sindresorhus/negative-array/issues/2\n. You don't need screenfull for the video element API, just use it directly. I'm not going to complicate the code for an outdated edge case like this.\n. I don't know, but I would ask on StackOverflow as this is more a general question about the JS Fullscreen API.\n. https://github.com/sindresorhus/screenfull.js#request\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\nThis is a security measure in the browser itself. Nothing can be done about it.\n. lgtm. thanks!\n. Questions => StackOverflow\n. slaps @sindresorhus\n. Thanks :)\n. 0.2.1\n. Definitely not an issue with screenfull.js as it's just a sugar upon the native API. Sounds like a Chrome bug.\n. Why? It doesn't work server-side anyways.\n. Browser libs assumes a browser environment. Just exclude this lib and any others you don't need there.\n. Thanks, but I don't want to disable zooming.\n. no thanks\n. > RequireJS something you have no interest in supporting?\nyes\n. No, but feel free to do it if you want to ;)\n. That's how the fullscreen API works in Chrome. This lib doesn't implement the actual fullscreening, but rather wraps it in a nicer and cross-browser API.\n. iOS doesn't support the Fullscreen API.\n. The fullscreen on the iPad is completely different from what's used here. Once upon a time Apple invented their own way to do fullscreening for videos, and only videos. That's what the iPad uses. I'm not adding support for it as it's legacy, properitary and only supports fullscreening videos.\n. Already mentioned in the readme: https://github.com/sindresorhus/screenfull.js#support ;)\n. fixed https://github.com/sindresorhus/screenfull.js/commit/1ad2c970569da1b0317cb74bdb41d683b6b1993d\n. Not really. Only way I can think of is browser-sniffing and not super interested in adding that.\n. Not that I'm aware of. At least in Chrome the \"native\" fullscreen is also different from the programmatic fullscreen, where the former shows the tabs. So you would still want to enter the programmatic fullscreen even if the user is already in the former one.\n. This module is just a wrapper around the native APIs. Any behaviour bug is a bug in the browser itself.\n. For CommonJS it's using module.exports, not window: https://github.com/sindresorhus/screenfull.js/blob/46c1db251b1fece41a7097eece969a74100788b1/src/screenfull.js#L145-L146\n. iOS8 doesn't support the fullscreen API: http://caniuse.com/#feat=fullscreen\n. Duplicate of #56 \n. > tell me when I am wrong.\nPretty much here.\n\nUse StackOverflow for support questions.\n. :+1: \n. > On github, https://github.com/sindresorhus/screenfull.js/releases it says latest is 1.10\nNot correct. You have to expand to see it as it's only a tag. I guess I can add a message, but you can just as easily look at the commit history. Nothing interesting anyways. Just removed a couple of deprecated methods.\n\nAnd sadly, on https://cdnjs.com/libraries/screenfull.js it's only 1.0.4\n\nYeah. No idea how to update that. And don't really care tbh. Feel free to do it though.\n. A feature. Bower packages shouldn't contain minified files.\nNothing new in this release other than removal of a couple of deprecated methods though. So just don't upgrade.\n. https://github.com/sindresorhus/screenfull.js/issues/66\n. Oops, thanks for letting me know. Done ;)\n. Sounds like a bug with Chrome. This plugin just wraps the native APIs so not much I can do about it.\nMake sure you're fullscreening the document though, and not an element. You could also try setting the body/html width/height to 100%.\nMight also want to open a Chrome bug ticket (though make sure to include a reproducible test case):\nhttps://code.google.com/p/chromium/issues/list\n. http://stackoverflow.com/questions/ask\n. That's intentional. You absolutely shouldn't directly link that. GitHub has hotlink limits. Rather use the referenced CDN link if you want to directly link to the script ;)\n. No thanks\n. Use StackOverflow for support questions: http://stackoverflow.com/questions/ask\n. Duplicate of #67 \n. I agree, PR welcome ;)\n. Tape or Mocha.\n. I really hope nobody does. No reason to uselessly wrap it in jQuery.\n. That's how the native API works. This is just a small wrapper. Nothing I can do anything about.\n. I would usually agree, but Angular is super popular, so why not. If we get many more I'll just move them to links at the bottom instead.\n. From the readme:\n\nSafari doesn't support use of the keyboard in fullscreen.\n. This module is made for the browser. If you want to do server-side rendering with browser libs it's your responsibility to shim document/window, not the responsibility of every single lib you use.\n. http://stackoverflow.com/questions/ask\n. You need to listen to the fullscreenchange event. Your issue is just JS, though. Nothing specifically to do with this module.\n. That is intentional. See closed issues.\n. Both. I wrote that Bower guideline.\n. No thanks.\n\nhttps://github.com/sindresorhus/screenfull.js/releases/tag/v3.0.0\n. No thanks\n. Thanks :)\n. I appreciate the PR, but this module is feature complete, so not interested in adding those properties. You can access them at screenfull.raw.fullscreenchange and screenfull.raw.fullscreenerror.. The methods also needs to be documented in the readme.. Thanks, but I don't want to add more bloat to the readme. It already documents way more than I would have liked.. We already define document at the top of the file, so I don't really see what this is fixing.. Sure. > Additionally, I wanted to cache the regexp and even the result of the .test(), but that's something for a different PR.\n\ud83d\udc4e That seems like a premature optimization. It's not called very often.. Great. Thank you :). Thanks, but this is not meant to be an Angular guide. One example is enough. Angular users should be able to do the rest from that example and their experience.. You're of course right. Can't remember reading that in the spec, but it's a while since I've looked at it.\nI removed the check in my code and added a notice of Chrome not following the spec in the readme.\nThanks for letting me know :)\n. The spec says nothing about how to handle keyboard input, so no wonder there are some inconsistencies.\n. I agree, didn't think of that. I've changed it now. Will fix it on my other repos with other changes. You should consider adding that recommendation to the EditorConfig site.\n. Programmatic fullscreen mode is only single page. It's just Chrome that doesn't follow the spec.\nSee Known inconsistencies in the readme.\n. Strange. It exits in Firefox when using this document.documentElement.mozRequestFullScreen() and navigating to another site.\n. Yes, of course. But they have completely different usecases.\n. Ya, there is a reason it isn't spec'd like that.\n. Fixed. Thanks for the report :)\n. Fixed this an hour ago. Thanks anyway :)\n. You have to add the allowfullscreen attribute (+ attributes with vendor prefixes) to the iframe\nhttps://github.com/sindresorhus/screenfull.js#request\n. Thanks for the report. Fixed in 1.0.2\n. It does, you need to wrap your expression in parens:\njs\nscreenfull.onchange = function(){\n    console.log('Am I fullscreen? ' + (screenfull.isFullscreen ? 'Yes' : 'No') );\n};\n. Thanks man. I've modified the PR a little bit.\nCan you confirm it works on Safari 5.1? And I'll tag a release.\n. IE doesn't support the Fullscreen API, not even IE10, maybe in IE20. That's why you check screenfull.enabled and have the ability to implement a fallback if it's not true.\n. Tried the latest build out, but couldn't get fullscreen to trigger.\n. Just tried it in IE10 and it returned false\n\nCan you reproduce it on another machine?\n. I already had a list of supported browsers, but it's probably easier to let caniuse keep it up to date.\n. .toggle() calls .request(), so it shouldn't be any different.\n. That's not possible. From docs:\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n. It's different and you can't. By design by the browser vendors.\n. onchange was a mistake.\n\nYou can already do that with document.addEventListener(screenfull.raw.fullscreenchange, function () {});\nI should probably document that.\n. Thanks so much :D Really appreciate you doing the work.\nhttps://github.com/sindresorhus/screenfull.js/commit/928c2c9a6fb83dcd958b375830505fc10921ba8f\n. https://github.com/sindresorhus/screenfull.js#support\n. The fullscreen api is meant to be used on a single page. However there are ways to work around this by either making your page a single-page app or using this iframe trick https://github.com/sindresorhus/screenfull.js/blob/gh-pages/index.html#L202-L219\nThis is an issue tracker and not a support forum. Keep questions on StackOverflow ;)\n. Unfortunately that wouldn't work as it can be only be brought into fullscreen by a real user even on an element on the page (bookmarklet button doesn't count).\n. I also don't see the point. Browsers have built-in functionality in its GUI for toggling fullscreen.\n. http://chrome.google.com\n. No thanks. You can easily use the RJS shim config.\n. MSFullscreenerror too then I assume?\n. Thanks :)\n. That's strange, but as you said; it's happening with the native events, which I can't really do anything about.\n. https://github.com/sindresorhus/negative-array/issues/2\n. You don't need screenfull for the video element API, just use it directly. I'm not going to complicate the code for an outdated edge case like this.\n. I don't know, but I would ask on StackOverflow as this is more a general question about the JS Fullscreen API.\n. https://github.com/sindresorhus/screenfull.js#request\n\nKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\nThis is a security measure in the browser itself. Nothing can be done about it.\n. lgtm. thanks!\n. Questions => StackOverflow\n. slaps @sindresorhus\n. Thanks :)\n. 0.2.1\n. Definitely not an issue with screenfull.js as it's just a sugar upon the native API. Sounds like a Chrome bug.\n. Why? It doesn't work server-side anyways.\n. Browser libs assumes a browser environment. Just exclude this lib and any others you don't need there.\n. Thanks, but I don't want to disable zooming.\n. no thanks\n. > RequireJS something you have no interest in supporting?\nyes\n. No, but feel free to do it if you want to ;)\n. That's how the fullscreen API works in Chrome. This lib doesn't implement the actual fullscreening, but rather wraps it in a nicer and cross-browser API.\n. iOS doesn't support the Fullscreen API.\n. The fullscreen on the iPad is completely different from what's used here. Once upon a time Apple invented their own way to do fullscreening for videos, and only videos. That's what the iPad uses. I'm not adding support for it as it's legacy, properitary and only supports fullscreening videos.\n. Already mentioned in the readme: https://github.com/sindresorhus/screenfull.js#support ;)\n. fixed https://github.com/sindresorhus/screenfull.js/commit/1ad2c970569da1b0317cb74bdb41d683b6b1993d\n. Not really. Only way I can think of is browser-sniffing and not super interested in adding that.\n. Not that I'm aware of. At least in Chrome the \"native\" fullscreen is also different from the programmatic fullscreen, where the former shows the tabs. So you would still want to enter the programmatic fullscreen even if the user is already in the former one.\n. This module is just a wrapper around the native APIs. Any behaviour bug is a bug in the browser itself.\n. For CommonJS it's using module.exports, not window: https://github.com/sindresorhus/screenfull.js/blob/46c1db251b1fece41a7097eece969a74100788b1/src/screenfull.js#L145-L146\n. iOS8 doesn't support the fullscreen API: http://caniuse.com/#feat=fullscreen\n. Duplicate of #56 \n. > tell me when I am wrong.\nPretty much here.\n\nUse StackOverflow for support questions.\n. :+1: \n. > On github, https://github.com/sindresorhus/screenfull.js/releases it says latest is 1.10\nNot correct. You have to expand to see it as it's only a tag. I guess I can add a message, but you can just as easily look at the commit history. Nothing interesting anyways. Just removed a couple of deprecated methods.\n\nAnd sadly, on https://cdnjs.com/libraries/screenfull.js it's only 1.0.4\n\nYeah. No idea how to update that. And don't really care tbh. Feel free to do it though.\n. A feature. Bower packages shouldn't contain minified files.\nNothing new in this release other than removal of a couple of deprecated methods though. So just don't upgrade.\n. https://github.com/sindresorhus/screenfull.js/issues/66\n. Oops, thanks for letting me know. Done ;)\n. Sounds like a bug with Chrome. This plugin just wraps the native APIs so not much I can do about it.\nMake sure you're fullscreening the document though, and not an element. You could also try setting the body/html width/height to 100%.\nMight also want to open a Chrome bug ticket (though make sure to include a reproducible test case):\nhttps://code.google.com/p/chromium/issues/list\n. http://stackoverflow.com/questions/ask\n. That's intentional. You absolutely shouldn't directly link that. GitHub has hotlink limits. Rather use the referenced CDN link if you want to directly link to the script ;)\n. No thanks\n. Use StackOverflow for support questions: http://stackoverflow.com/questions/ask\n. Duplicate of #67 \n. I agree, PR welcome ;)\n. Tape or Mocha.\n. I really hope nobody does. No reason to uselessly wrap it in jQuery.\n. That's how the native API works. This is just a small wrapper. Nothing I can do anything about.\n. I would usually agree, but Angular is super popular, so why not. If we get many more I'll just move them to links at the bottom instead.\n. From the readme:\n\nSafari doesn't support use of the keyboard in fullscreen.\n. This module is made for the browser. If you want to do server-side rendering with browser libs it's your responsibility to shim document/window, not the responsibility of every single lib you use.\n. http://stackoverflow.com/questions/ask\n. You need to listen to the fullscreenchange event. Your issue is just JS, though. Nothing specifically to do with this module.\n. That is intentional. See closed issues.\n. Both. I wrote that Bower guideline.\n. No thanks.\n\nhttps://github.com/sindresorhus/screenfull.js/releases/tag/v3.0.0\n. No thanks\n. Thanks :)\n. I appreciate the PR, but this module is feature complete, so not interested in adding those properties. You can access them at screenfull.raw.fullscreenchange and screenfull.raw.fullscreenerror.. The methods also needs to be documented in the readme.. Thanks, but I don't want to add more bloat to the readme. It already documents way more than I would have liked.. We already define document at the top of the file, so I don't really see what this is fixing.. Sure. > Additionally, I wanted to cache the regexp and even the result of the .test(), but that's something for a different PR.\n\ud83d\udc4e That seems like a premature optimization. It's not called very often.. Great. Thank you :). Thanks, but this is not meant to be an Angular guide. One example is enough. Angular users should be able to do the rest from that example and their experience.. ",
    "OscarGodson": "Yeah but they're being overprotective IMO. Not sure what they expect developers to do with this API. Even games use alphanumeric keys. :shrug:\n. Yeah but they're being overprotective IMO. Not sure what they expect developers to do with this API. Even games use alphanumeric keys. :shrug:\n. ",
    "treyhunner": "@sindresorhus Notifying users of this recommendation does seem like a good idea.\nI'm not sure where we should put this advice on the website yet.  I just posted to the mailing list for advice.\n. @sindresorhus Notifying users of this recommendation does seem like a good idea.\nI'm not sure where we should put this advice on the website yet.  I just posted to the mailing list for advice.\n. ",
    "gnrocks": "Never mind ! just seemed to be some memory overload on my computer ! It works fine on another pc !\n. Never mind ! just seemed to be some memory overload on my computer ! It works fine on another pc !\n. ",
    "titomiguelcosta": "But weird enough, this code http://pastebin.com/Jk5X5A4b works fine in Firefox, keeps fullscreen throught out requests, but not in chrome (version 19.0.1084.52). \n. maybe you already know that, but pressing F11, instead of using the api, fullscreen is maintained..\n. true story, understandable different behaviors.. it would be nice to be able to reproduce the F11, but i get the nasty things that could happen with ads and popus..\n. But weird enough, this code http://pastebin.com/Jk5X5A4b works fine in Firefox, keeps fullscreen throught out requests, but not in chrome (version 19.0.1084.52). \n. maybe you already know that, but pressing F11, instead of using the api, fullscreen is maintained..\n. true story, understandable different behaviors.. it would be nice to be able to reproduce the F11, but i get the nasty things that could happen with ads and popus..\n. ",
    "CodersBrothers": "it's a shame that native fullscreen is different... Not allow really integration. This only its a fake integration because you press F11 its imposible trigger events... and disable o enable things... stupid things...\n. Sorry, i missed, thanks\n. it's a shame that native fullscreen is different... Not allow really integration. This only its a fake integration because you press F11 its imposible trigger events... and disable o enable things... stupid things...\n. Sorry, i missed, thanks\n. ",
    "miketaylr": "Actually, just || fn.fullscreenElement probably makes more sense.\n. Actually, just || fn.fullscreenElement probably makes more sense.\n. ",
    "jreyes33": "Yes, it's working on 5.1 :+1: \n. Yes, it's working on 5.1 :+1: \n. ",
    "ImBobby": "IE11 will support Fullscreen API with ms prefix. reference\n. IE11 will support Fullscreen API with ms prefix. reference\n. ",
    "GeorgePhillips": "touch\u00e9, sorry about that.\n. touch\u00e9, sorry about that.\n. ",
    "auchenberg": "Aha, makes sense to use screenfull.raw.fullscreenchange as a enum.\n. Aha, makes sense to use screenfull.raw.fullscreenchange as a enum.\n. ",
    "passy": "Works for me using Chrome Beta on a Nexus 4:\n\nScrolling works just fine, Chrome 31.\n. Works for me using Chrome Beta on a Nexus 4:\n\nScrolling works just fine, Chrome 31.\n. ",
    "liorda": "Scroll is not working on windows 7 latest releases of modern browsers: Firefox 24 and chrome 30.0.1599.101m.\n. Scroll is not working on windows 7 latest releases of modern browsers: Firefox 24 and chrome 30.0.1599.101m.\n. ",
    "hoffin": "It seams it may have been a caching issue as it's operating correctly.\n. It seams it may have been a caching issue as it's operating correctly.\n. ",
    "josephilipraja": "Using Browser: Chrome - Version 30.0.1599.69 m\nJS - \nJQuery - v1.10.2\nBootstrap - v3.0.0\nperfect-scrollbar - v0.4.5\nScreenfull v1.1.0\nConsole throws error.. Not working.. Please help.\n. Using Browser: Chrome - Version 30.0.1599.69 m\nJS - \nJQuery - v1.10.2\nBootstrap - v3.0.0\nperfect-scrollbar - v0.4.5\nScreenfull v1.1.0\nConsole throws error.. Not working.. Please help.\n. ",
    "marianopeck": "Hi Thanks. But I don't get it the trick with the iframe. Sorry I am a noob in JS. I have lost of links/request inside my app and what I want to make fullscreen is my whole app. With the iframe trick I would need to make each button use the iframe? Is there a workaround? Thanks!\n. Hi. Thanks both for your helpful and quick answers. I opened a question here: http://stackoverflow.com/questions/19440234/how-to-make-a-whole-website-run-under-fullscreen-with-screenfull-js\nI would really appreciate if you can help me since I would love to have my app running in fullscreen mode in certain occasions. \n. Hi Dan Pastusek. Is there any chance that you help me implement this solution? \nI have this opened question: http://stackoverflow.com/questions/19440234/how-to-make-a-whole-website-run-under-fullscreen-with-screenfull-js\nThanks a lot in advance!!!\n. Hi Thanks. But I don't get it the trick with the iframe. Sorry I am a noob in JS. I have lost of links/request inside my app and what I want to make fullscreen is my whole app. With the iframe trick I would need to make each button use the iframe? Is there a workaround? Thanks!\n. Hi. Thanks both for your helpful and quick answers. I opened a question here: http://stackoverflow.com/questions/19440234/how-to-make-a-whole-website-run-under-fullscreen-with-screenfull-js\nI would really appreciate if you can help me since I would love to have my app running in fullscreen mode in certain occasions. \n. Hi Dan Pastusek. Is there any chance that you help me implement this solution? \nI have this opened question: http://stackoverflow.com/questions/19440234/how-to-make-a-whole-website-run-under-fullscreen-with-screenfull-js\nThanks a lot in advance!!!\n. ",
    "pastudan": "The idea is that you make another page that only has an iframe with your main site + screenfull.js. Then when you click links inside the iframe the browser will load the next page inside that frame, rather than taking the parent page out of fullscreen and navigating away.\nLike sindresorhus said, this question really belongs on StackOverflow. If you ask your question there I'd be happy to help you implement it further.\n. The idea is that you make another page that only has an iframe with your main site + screenfull.js. Then when you click links inside the iframe the browser will load the next page inside that frame, rather than taking the parent page out of fullscreen and navigating away.\nLike sindresorhus said, this question really belongs on StackOverflow. If you ask your question there I'd be happy to help you implement it further.\n. ",
    "ClashTheBunny": "You're right that it doesn't directly work, but you can add a keyboard shortcut like this:\n\njavascript:(function() {\ndocument.fullscreenEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.documentElement.webkitRequestFullScreen;\nfunction requestFullscreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullScreen) {\n        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n    }\n}\nif (document.fullscreenEnabled) {\n    requestFullscreen(document.body);\n}\nfunction EnableFKey() {\n    console.log(\"WOOOOOOOOOOOOOOOOO\");\n    var elems = document.getElementsByTagName(\"video\");\n    if (elems.length > 0) { //video tag exists?\n            fsElement = \"player-api\";\n            var elem = document.getElementById(fsElement);\n    } else {\n            var elem = document.body;\n    }\n    elem.addEventListener(\"keypress\", function(e) {\n        if (e.which == 102 || e.which == 70) { //f or F key pressed?\n            requestFullscreen(elem);\n        }\n    });\n}\ndocument.addEventListener('DOMContentLoaded', function() { EnableFKey() });\ndocument.addEventListener('DOMNodeInserted', function() { EnableFKey() });\n})();\n\nBut it doesn't totally work, I can't scroll on Firefox and I can't type the letter \"F\".  A better shortcut combined with your expertise may fix the bugs.\n. For example, Firefox on OS X has problems after Lion:\nhttps://support.mozilla.org/en-US/questions/932384\nIt doesn't actually fullscreen.  I would argue that this is a bug, but it isn't being fixed.  So I need a workaround.\n. You're right that it doesn't directly work, but you can add a keyboard shortcut like this:\n\njavascript:(function() {\ndocument.fullscreenEnabled = document.fullscreenEnabled || document.mozFullScreenEnabled || document.documentElement.webkitRequestFullScreen;\nfunction requestFullscreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullScreen) {\n        element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n    }\n}\nif (document.fullscreenEnabled) {\n    requestFullscreen(document.body);\n}\nfunction EnableFKey() {\n    console.log(\"WOOOOOOOOOOOOOOOOO\");\n    var elems = document.getElementsByTagName(\"video\");\n    if (elems.length > 0) { //video tag exists?\n            fsElement = \"player-api\";\n            var elem = document.getElementById(fsElement);\n    } else {\n            var elem = document.body;\n    }\n    elem.addEventListener(\"keypress\", function(e) {\n        if (e.which == 102 || e.which == 70) { //f or F key pressed?\n            requestFullscreen(elem);\n        }\n    });\n}\ndocument.addEventListener('DOMContentLoaded', function() { EnableFKey() });\ndocument.addEventListener('DOMNodeInserted', function() { EnableFKey() });\n})();\n\nBut it doesn't totally work, I can't scroll on Firefox and I can't type the letter \"F\".  A better shortcut combined with your expertise may fix the bugs.\n. For example, Firefox on OS X has problems after Lion:\nhttps://support.mozilla.org/en-US/questions/932384\nIt doesn't actually fullscreen.  I would argue that this is a bug, but it isn't being fixed.  So I need a workaround.\n. ",
    "PlippiePlop": "Can you test below pure js code in a html page and see if this works. if it does not then you are probably using IE10, or it is in a compatible mode:\nvar docEl = document.body;\ndocEl.addEventListener(\"click\",function(e){\nmakeFullScreen(docEl);\n},false);\nfunction makeFullScreen(el) {\n    if (el.requestFullscreen) {\n        console.log('default');\n        el.requestFullscreen();\n    }\n    else if (el.msRequestFullscreen) {\n        console.log('ie11 >');\n        el.msRequestFullscreen();\n    }\n    else if (el.mozRequestFullScreen) {\n        console.log('mozilla');\n        el.mozRequestFullScreen();\n    }\n    else if (el.webkitRequestFullscreen) {\n        console.log('webkit');\n        el.webkitRequestFullscreen();\n    } else {\n        console.log('no support');\n    }\n}\n. No no need to Since it is just a typo in the authors code you fixed yourself.\n. Can you test below pure js code in a html page and see if this works. if it does not then you are probably using IE10, or it is in a compatible mode:\nvar docEl = document.body;\ndocEl.addEventListener(\"click\",function(e){\nmakeFullScreen(docEl);\n},false);\nfunction makeFullScreen(el) {\n    if (el.requestFullscreen) {\n        console.log('default');\n        el.requestFullscreen();\n    }\n    else if (el.msRequestFullscreen) {\n        console.log('ie11 >');\n        el.msRequestFullscreen();\n    }\n    else if (el.mozRequestFullScreen) {\n        console.log('mozilla');\n        el.mozRequestFullScreen();\n    }\n    else if (el.webkitRequestFullscreen) {\n        console.log('webkit');\n        el.webkitRequestFullscreen();\n    } else {\n        console.log('no support');\n    }\n}\n. No no need to Since it is just a typo in the authors code you fixed yourself.\n. ",
    "hengels": "Hi,\nI basically posted the solution in my bug report.\nI changed in the full-screen script file the lines 51 and 52 from:\n'MSFullscreenchange',\n'MSFullscreenerror'\nto:\n'MSFullscreenChange',\n'MSFullscreenError'\nand then it worked on my side. I used this reference:\nhttp://msdn.microsoft.com/en-us/library/ie/dn265028%28v=vs.85%29.aspx\nIs it still required that I am testing your code?\nBest Regards,\nHarald\nOn Mon, Nov 18, 2013 at 2:03 PM, PlippiePlop notifications@github.comwrote:\n\nCan you test below pure js code in a html page and see if this works. if\nit does not then you are probably using IE10, or it is in a compatible mode:\nvar docEl = document.body;\ndocEl.addEventListener(\"click\",function(e){\nmakeFullScreen(docEl);\n},false);\nfunction makeFullScreen(el) {\nif (el.requestFullscreen) {\nconsole.log('default');\nel.requestFullscreen();\n}\nelse if (el.msRequestFullscreen) {\nconsole.log('ie11 >');\nel.msRequestFullscreen();\n}\nelse if (el.mozRequestFullScreen) {\nconsole.log('mozilla');\nel.mozRequestFullScreen();\n}\nelse if (el.webkitRequestFullscreen) {\nconsole.log('webkit');\nel.webkitRequestFullscreen();\n} else {\nconsole.log('no support');\n}\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/sindresorhus/screenfull.js/issues/36#issuecomment-28692910\n.\n. Hi Sindre,\n\nThe change in screenfull.js which I proposed wasn't communicated correctly\nto you by Stuart Homfrey:\nPlease take a look here:\nMemberType Description\nmsRequestFullscreen_http://msdn.microsoft.com/en-us/library/ie/dn254939%28v=vs.85%29.aspx\nMethodRequests full-screen display of an image, video, or other element.\n_msExitFullscreen_http://msdn.microsoft.com/en-us/library/ie/dn254936%28v=vs.85%29.aspx\nMethodReturns an element to its original size from full-screen mode.\n_msFullscreenElement_http://msdn.microsoft.com/en-us/library/ie/dn254937%28v=vs.85%29.aspx\nPropertyReturns the top or current element that's being displayed in\nfull-screen mode. Otherwise it returns undefined.\n_msFullscreenEnabled_http://msdn.microsoft.com/en-us/library/ie/dn254938%28v=vs.85%29.aspx\nPropertyReturns true if a document lets elements be displayed in\nfull-screen mode. Otherwise it returns false.\n_MSFullscreenChange_http://msdn.microsoft.com/en-us/library/ie/dn312066%28v=vs.85%29.aspx\nEventFires when an element is displayed in full-screen mode, or when it\nexits full-screen mode.\n_MSFullscreenError_http://msdn.microsoft.com/en-us/library/ie/dn312067%28v=vs.85%29.aspx\nEventFires when a full-screen display is requested of an element, but this\nrequest can't be fulfilled.\n:-ms-fullscreen_http://msdn.microsoft.com/en-us/library/ie/dn312073%28v=vs.85%29.aspx\nPseudo\nclassEnables you to set specific CSS properties based on whether an element\nis in full-screen mode or not.\n::_-ms-backdrop_http://msdn.microsoft.com/en-us/library/ie/dn312072%28v=vs.85%29.aspx\nPseudo\nelementEnables you to set the background properties when an element is\ndisplayed in full-screen mode.\n_allowfullscreen_http://msdn.microsoft.com/en-us/library/ie/dn312070%28v=vs.85%29.aspx\nAttributeEnables an iframe's content to display in full-screen mode. If\nmissing, only the iframe (and not the content within the frame) can go to\nfull-screen mode.\nIt must be MSFullscreenChange and MSFullScreenError. THis inconsistency of\nusing upper and lower cases is annoying. So far I know as a JavaScript\nidiot JavaScript is here case sensitive.\nI am also not experienced with GIT (I am using Mercurial for my PHP code)\nso I didn't want to mess with the repository and correct the error by\nmyself. Sorry for that.\nBeside that thank you very much for your full-screen wrapper - it is\nworking very well in all major browsers. Your script is a great help for me.\nBest Regards,\nHarald\nOn Wed, Nov 20, 2013 at 11:32 AM, Sindre Sorhus notifications@github.comwrote:\n\nClosed #36 https://github.com/sindresorhus/screenfull.js/issues/36 via\n8a57120https://github.com/sindresorhus/screenfull.js/commit/8a57120c2d340f102f45e968c4b867a0b62eabfd\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/sindresorhus/screenfull.js/issues/36\n.\n. jQuery seems to have no longer a bright future. jQuery was important to allow developers to create JavaScript code without the necessity to care about browser differences of the JavaSript implementation. But modern browsers are getting more and more homogeneous reg. JavaScript (ECMA 5.1 made this happen and the upcoming version 6 might cause difficulties for additional layers like jQuery to utilize all language features. So it is time to dig deeper into native JavaScript soon). \nFor many scenarios vanilla JS (in its modern forms) is perfectly fine:\nhttp://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/\nIf you need bulky stuff then the future will more likely move towards JS frameworks (like AngularJS):\nhttps://www.airpair.com/angularjs/posts/jquery-angularjs-comparison-migration-walkthrough\nSo there is zero need for a jQuery plugin of screenfull.js.\n. Hi,\n\nI basically posted the solution in my bug report.\nI changed in the full-screen script file the lines 51 and 52 from:\n'MSFullscreenchange',\n'MSFullscreenerror'\nto:\n'MSFullscreenChange',\n'MSFullscreenError'\nand then it worked on my side. I used this reference:\nhttp://msdn.microsoft.com/en-us/library/ie/dn265028%28v=vs.85%29.aspx\nIs it still required that I am testing your code?\nBest Regards,\nHarald\nOn Mon, Nov 18, 2013 at 2:03 PM, PlippiePlop notifications@github.comwrote:\n\nCan you test below pure js code in a html page and see if this works. if\nit does not then you are probably using IE10, or it is in a compatible mode:\nvar docEl = document.body;\ndocEl.addEventListener(\"click\",function(e){\nmakeFullScreen(docEl);\n},false);\nfunction makeFullScreen(el) {\nif (el.requestFullscreen) {\nconsole.log('default');\nel.requestFullscreen();\n}\nelse if (el.msRequestFullscreen) {\nconsole.log('ie11 >');\nel.msRequestFullscreen();\n}\nelse if (el.mozRequestFullScreen) {\nconsole.log('mozilla');\nel.mozRequestFullScreen();\n}\nelse if (el.webkitRequestFullscreen) {\nconsole.log('webkit');\nel.webkitRequestFullscreen();\n} else {\nconsole.log('no support');\n}\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/sindresorhus/screenfull.js/issues/36#issuecomment-28692910\n.\n. Hi Sindre,\n\nThe change in screenfull.js which I proposed wasn't communicated correctly\nto you by Stuart Homfrey:\nPlease take a look here:\nMemberType Description\nmsRequestFullscreen_http://msdn.microsoft.com/en-us/library/ie/dn254939%28v=vs.85%29.aspx\nMethodRequests full-screen display of an image, video, or other element.\n_msExitFullscreen_http://msdn.microsoft.com/en-us/library/ie/dn254936%28v=vs.85%29.aspx\nMethodReturns an element to its original size from full-screen mode.\n_msFullscreenElement_http://msdn.microsoft.com/en-us/library/ie/dn254937%28v=vs.85%29.aspx\nPropertyReturns the top or current element that's being displayed in\nfull-screen mode. Otherwise it returns undefined.\n_msFullscreenEnabled_http://msdn.microsoft.com/en-us/library/ie/dn254938%28v=vs.85%29.aspx\nPropertyReturns true if a document lets elements be displayed in\nfull-screen mode. Otherwise it returns false.\n_MSFullscreenChange_http://msdn.microsoft.com/en-us/library/ie/dn312066%28v=vs.85%29.aspx\nEventFires when an element is displayed in full-screen mode, or when it\nexits full-screen mode.\n_MSFullscreenError_http://msdn.microsoft.com/en-us/library/ie/dn312067%28v=vs.85%29.aspx\nEventFires when a full-screen display is requested of an element, but this\nrequest can't be fulfilled.\n:-ms-fullscreen_http://msdn.microsoft.com/en-us/library/ie/dn312073%28v=vs.85%29.aspx\nPseudo\nclassEnables you to set specific CSS properties based on whether an element\nis in full-screen mode or not.\n::_-ms-backdrop_http://msdn.microsoft.com/en-us/library/ie/dn312072%28v=vs.85%29.aspx\nPseudo\nelementEnables you to set the background properties when an element is\ndisplayed in full-screen mode.\n_allowfullscreen_http://msdn.microsoft.com/en-us/library/ie/dn312070%28v=vs.85%29.aspx\nAttributeEnables an iframe's content to display in full-screen mode. If\nmissing, only the iframe (and not the content within the frame) can go to\nfull-screen mode.\nIt must be MSFullscreenChange and MSFullScreenError. THis inconsistency of\nusing upper and lower cases is annoying. So far I know as a JavaScript\nidiot JavaScript is here case sensitive.\nI am also not experienced with GIT (I am using Mercurial for my PHP code)\nso I didn't want to mess with the repository and correct the error by\nmyself. Sorry for that.\nBeside that thank you very much for your full-screen wrapper - it is\nworking very well in all major browsers. Your script is a great help for me.\nBest Regards,\nHarald\nOn Wed, Nov 20, 2013 at 11:32 AM, Sindre Sorhus notifications@github.comwrote:\n\nClosed #36 https://github.com/sindresorhus/screenfull.js/issues/36 via\n8a57120https://github.com/sindresorhus/screenfull.js/commit/8a57120c2d340f102f45e968c4b867a0b62eabfd\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/sindresorhus/screenfull.js/issues/36\n.\n. jQuery seems to have no longer a bright future. jQuery was important to allow developers to create JavaScript code without the necessity to care about browser differences of the JavaSript implementation. But modern browsers are getting more and more homogeneous reg. JavaScript (ECMA 5.1 made this happen and the upcoming version 6 might cause difficulties for additional layers like jQuery to utilize all language features. So it is time to dig deeper into native JavaScript soon). \nFor many scenarios vanilla JS (in its modern forms) is perfectly fine:\nhttp://toddmotto.com/is-it-time-to-drop-jquery-essentials-to-learning-javascript-from-a-jquery-background/\nIf you need bulky stuff then the future will more likely move towards JS frameworks (like AngularJS):\nhttps://www.airpair.com/angularjs/posts/jquery-angularjs-comparison-migration-walkthrough\nSo there is zero need for a jQuery plugin of screenfull.js.\n. \n",
    "jackplug": "Yes, absolutely. I did not check this because I was not dealing with this event right now :)\n. Yes, absolutely. I did not check this because I was not dealing with this event right now :)\n. ",
    "contra": ":cactus: :cake: \n. :cactus: :cake: \n. ",
    "jeroencoumans": "True, but React allows you to render server & clientside with the same code, and this would prevent errors when including fullscreen.js in that environment. \n. True, but React allows you to render server & clientside with the same code, and this would prevent errors when including fullscreen.js in that environment. \n. ",
    "fritx": "Okay ;)\n. Okay ;)\n. ",
    "mjhasbach": "Is RequireJS something you have no interest in supporting?\n. Is RequireJS something you have no interest in supporting?\n. ",
    "coursevector": "This is just an example with bad code, but works fine on iPad:\nhttp://jsfiddle.net/4veeH/\niPhone doesn't matter since it always plays in the native player.\n. It just seems weird to load a framework to make cross-browser fullscreen easier and also have to implement another solution just for 1 browser\n. This is just an example with bad code, but works fine on iPad:\nhttp://jsfiddle.net/4veeH/\niPhone doesn't matter since it always plays in the native player.\n. It just seems weird to load a framework to make cross-browser fullscreen easier and also have to implement another solution just for 1 browser\n. ",
    "Piero87": "there you say this:\nSafari 5.1 doesn't support use of the keyboard in fullscreen.\ni have version 7.1, it's the same?\n. there you say this:\nSafari 5.1 doesn't support use of the keyboard in fullscreen.\ni have version 7.1, it's the same?\n. ",
    "chaenu": "Yes, I fully understand this. Thanks for your fast response.\n. Yes, I fully understand this. Thanks for your fast response.\n. ",
    "vitkarpov": "I think we didn't understand each other. Sorry about that, I'll try to explain one more time.\nThere is some module, let a.js. Inside the module we have a such line of code: var screenfull = require('screenfull');.\nWhen I use a module in a browser \u2014 everything is ok: screenfull works. Now I try to use it in nodejs (certainly, I don't need to use screenfull, but it should be parsed without errors such as it's required inside a).\nWhen I try to require the a module I see such errors:\ndocument is not defined\nor\nwindow is not defined\nIt occurs 'cause of inside screenfull it should be global.document, not just document.\nIs it clear now?\n. I think we didn't understand each other. Sorry about that, I'll try to explain one more time.\nThere is some module, let a.js. Inside the module we have a such line of code: var screenfull = require('screenfull');.\nWhen I use a module in a browser \u2014 everything is ok: screenfull works. Now I try to use it in nodejs (certainly, I don't need to use screenfull, but it should be parsed without errors such as it's required inside a).\nWhen I try to require the a module I see such errors:\ndocument is not defined\nor\nwindow is not defined\nIt occurs 'cause of inside screenfull it should be global.document, not just document.\nIs it clear now?\n. ",
    "ben-eb": "Awesome, thanks! :beers: \n. Awesome, thanks! :beers: \n. ",
    "client9": "ahh ok!.. thanks for your time.\n. ahh ok!.. thanks for your time.\n. ",
    "arthurvr": "\nYeah. No idea how to update that.\n\n@sindresorhus FYI: It can be updated by sending a PR to the cndjs repo.\n. There's no deal with uselessly wrapping this into a jQuery plugin. Also the code you submitted wouldn't even work.\n. Do we really want examples of how to use it with a specific framework? I feel like how to use easy libraries in combination with a specific framework isn't something the library should document - rather something the framework's community should be aware of. \nI feel like if we start doing this we can add examples for every JavaScript framework out there...\n. > Yeah. No idea how to update that.\n@sindresorhus FYI: It can be updated by sending a PR to the cndjs repo.\n. There's no deal with uselessly wrapping this into a jQuery plugin. Also the code you submitted wouldn't even work.\n. Do we really want examples of how to use it with a specific framework? I feel like how to use easy libraries in combination with a specific framework isn't something the library should document - rather something the framework's community should be aware of. \nI feel like if we start doing this we can add examples for every JavaScript framework out there...\n. ",
    "PeterDaveHello": "PS: new version will be on it in less then 15 mins.\n. PS: new version will be on it in less then 15 mins.\n. ",
    "Juburin": "javascript\nif (screenfull.enabled) {\n    screenfull.request(playerElement[0]);\n    return;\n}\nShould do the trick.\n. javascript\nif (screenfull.enabled) {\n    screenfull.request(playerElement[0]);\n    return;\n}\nShould do the trick.\n. ",
    "kevva": "What is it that doesn't work? Make sure you've read the documentation https://github.com/sindresorhus/screenfull.js#documentation.\n. -1, overwriting native methods is bad practice\n. Wouldn't you need to check window too?. What is it that doesn't work? Make sure you've read the documentation https://github.com/sindresorhus/screenfull.js#documentation.\n. -1, overwriting native methods is bad practice\n. Wouldn't you need to check window too?. ",
    "samypr100": "Read your issue #66:\nhttps://github.com/sindresorhus/screenfull.js/issues/66\nFound this stack overflow:\nhttp://stackoverflow.com/questions/16761272/how-to-configure-grunt-to-replace-bower-dependencies-by-its-minified-versions\nPretty good arguments against you (lol) as to why include minified version:\nClaiming that minifying 3rd party artifacts is user's responsibility is not only odd, but would collide with so many corporate practices it's scares me to even write about. You are not supposed to do that. The sheer blame-war if something goes south... \u2013  ZenMaster Oct 10 '13 at 16:16 \n@SindreSorhus From the Angular Team, Best Practices. They specifically recommend using their minified file because they tweaked the settings just right. \u2013  Jacob Eggers Jan 28 '14 at 1:59\n\nMy only request is to not ignore your minified version on your bower.json. Not everyone is familiar with JS, gulp, grunt, uglify, yeoman, etc. Especially if the people come from a Java background and the only build tool for the project is Maven. If we want to setup a simple web project, adding build annotations and whatnot will confuse non familiarized developers of the steps they need to take to run the project locally on their computer. I would say that if three issues have been raised trying to achieve the same thing, it's a clear indicative of the need and usefulness of a minified version of your awesome library.\n. Read your issue #66:\nhttps://github.com/sindresorhus/screenfull.js/issues/66\nFound this stack overflow:\nhttp://stackoverflow.com/questions/16761272/how-to-configure-grunt-to-replace-bower-dependencies-by-its-minified-versions\nPretty good arguments against you (lol) as to why include minified version:\nClaiming that minifying 3rd party artifacts is user's responsibility is not only odd, but would collide with so many corporate practices it's scares me to even write about. You are not supposed to do that. The sheer blame-war if something goes south... \u2013  ZenMaster Oct 10 '13 at 16:16 \n@SindreSorhus From the Angular Team, Best Practices. They specifically recommend using their minified file because they tweaked the settings just right. \u2013  Jacob Eggers Jan 28 '14 at 1:59\n\nMy only request is to not ignore your minified version on your bower.json. Not everyone is familiar with JS, gulp, grunt, uglify, yeoman, etc. Especially if the people come from a Java background and the only build tool for the project is Maven. If we want to setup a simple web project, adding build annotations and whatnot will confuse non familiarized developers of the steps they need to take to run the project locally on their computer. I would say that if three issues have been raised trying to achieve the same thing, it's a clear indicative of the need and usefulness of a minified version of your awesome library.\n. ",
    "ThomasPerraudin": "Thanks, I thought it was the way your wrapper worked.\n. Thanks, I thought it was the way your wrapper worked.\n. ",
    "hrajchert": "PR updated\n. PR updated\n. ",
    "cezarsmpio": "Sorry.\nThanks!\n. Sorry.\nThanks!\n. ",
    "koko236": "See this: http://caniuse.com/#feat=fullscreen -> Issues -> Issue 4. Seems to be an IE11 'feature'. \n. See this: http://caniuse.com/#feat=fullscreen -> Issues -> Issue 4. Seems to be an IE11 'feature'. \n. ",
    "z3ntu": "Thanks!\n. Thanks!\n. ",
    "SamVerschueren": "You're right, added PR for this.\n. Duplicate of #66 \n. I guess the idea behind it is to use gulp, grunt or maybe something else to package your app/website/whatever and to let them minify it for you.\n. Not sure if it is documented... I'm not the one who made the statement ;).\nI actually always use the unminified version and uglify/minify all the libraries myself into one big libraries.min.js file.\n. Although I did the PR, I think this is a good thing! Is it a general guideline by bower or is this your vision?\n. Hahaha, nice! :)\n. You're right, added PR for this.\n. Duplicate of #66 \n. I guess the idea behind it is to use gulp, grunt or maybe something else to package your app/website/whatever and to let them minify it for you.\n. Not sure if it is documented... I'm not the one who made the statement ;).\nI actually always use the unminified version and uglify/minify all the libraries myself into one big libraries.min.js file.\n. Although I did the PR, I think this is a good thing! Is it a general guideline by bower or is this your vision?\n. Hahaha, nice! :)\n. ",
    "szegheo": "\"Bower packages shouldn't contain minified files.\"\nInteresting.. where is it documented? 9 of 10 bower packages has the minified script, like jQuery and Bootstrap.\n. Sure, I'm already using Grunt for merge and minify my custom scripts, but my vendors.js is just a merge from many bower packages and its .min.js files, I don't re-uglify them, because each has the minified file. Except this screenfull.js :) That's why I thought minified files should be included. Who/where says that it shouldn't? Can't find...\n. \"Bower packages shouldn't contain minified files.\"\nInteresting.. where is it documented? 9 of 10 bower packages has the minified script, like jQuery and Bootstrap.\n. Sure, I'm already using Grunt for merge and minify my custom scripts, but my vendors.js is just a merge from many bower packages and its .min.js files, I don't re-uglify them, because each has the minified file. Except this screenfull.js :) That's why I thought minified files should be included. Who/where says that it shouldn't? Can't find...\n. ",
    "oztek22": "not working with angular2\n. @leocaseiro thx for help. actually I declared ToggleFullscreenDirective in wrong module that's why I was getting nothing. ':). not working with angular2\n. @leocaseiro thx for help. actually I declared ToggleFullscreenDirective in wrong module that's why I was getting nothing. ':). ",
    "leocaseiro": "@oztek22 what's the error are you getting?\nIf you are using angular-cli, try:\n```typescript\nimport { Directive, HostListener } from '@angular/core';\nimport * as screenfull from 'screenfull';\n@Directive({\n    selector: '[toggleScreenfull]'\n})\nexport class ToggleScreenfull {\n    @HostListener('click') onClick() {\n        if (screenfull.enabled) {\n            screenfull.toggle();\n        }\n    }\n}\n```\nUsage:\n<button toggleScreenfull></button>. @oztek22 what's the error are you getting?\nIf you are using angular-cli, try:\n```typescript\nimport { Directive, HostListener } from '@angular/core';\nimport * as screenfull from 'screenfull';\n@Directive({\n    selector: '[toggleScreenfull]'\n})\nexport class ToggleScreenfull {\n    @HostListener('click') onClick() {\n        if (screenfull.enabled) {\n            screenfull.toggle();\n        }\n    }\n}\n```\nUsage:\n<button toggleScreenfull></button>. ",
    "bartvanandel": "I totally missed that tiny line of code, sorry about that. Having said that, I don't exactly understand your rationale behind not exposing those two events in a more convenient way like all other functionality though. Its seems a bit off to me that one would need to use raw values (and full names) for the events but have convenience methods (with shorter names) for the rest. Could you explain this choice?. I totally missed that tiny line of code, sorry about that. Having said that, I don't exactly understand your rationale behind not exposing those two events in a more convenient way like all other functionality though. Its seems a bit off to me that one would need to use raw values (and full names) for the events but have convenience methods (with shorter names) for the rest. Could you explain this choice?. ",
    "levy9527": "done!. Alright, I update reamde. But I think my method description is boring,  maybe you should edit it.. done!. Alright, I update reamde. But I think my method description is boring,  maybe you should edit it.. ",
    "oskarrough": "In the case of Ember.js server-side rendering (ember fastboot), window is defined but window.document is not. How about this line instead?\njs\nvar document = typeof window.document !== 'undefined' ? window.document : {};\n. I think you're right.  How about this?\njs\nvar hasDocument = !window || typeof window.document !== 'undefined';\nvar document = hasDocument ? window.document : {};. @EgorLyutov @Tazer can you verify whether this check works for you?\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nChecking typeof window instead of just window should avoid the reference error, I hope.. In the case of Ember.js server-side rendering (ember fastboot), window is defined but window.document is not. How about this line instead?\njs\nvar document = typeof window.document !== 'undefined' ? window.document : {};\n. I think you're right.  How about this?\njs\nvar hasDocument = !window || typeof window.document !== 'undefined';\nvar document = hasDocument ? window.document : {};. @EgorLyutov @Tazer can you verify whether this check works for you?\nvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nChecking typeof window instead of just window should avoid the reference error, I hope.. ",
    "EgorLyutov": "this fix broke server environments\n/frontend/node_modules/screenfull/dist/screenfull.js:9\n    var document = window && typeof window.document !== 'undefined' ? window.document : {};\n                   ^\nReferenceError: window is not defined\n    at /frontend/node_modules/screenfull/dist/screenfull.js:9:17. this fix broke server environments\n/frontend/node_modules/screenfull/dist/screenfull.js:9\n    var document = window && typeof window.document !== 'undefined' ? window.document : {};\n                   ^\nReferenceError: window is not defined\n    at /frontend/node_modules/screenfull/dist/screenfull.js:9:17. ",
    "Tazer": "Same here :( .  @oskarrough yes when changing that it works much better. So it works for me.. Same here :( .  @oskarrough yes when changing that it works much better. So it works for me.. ",
    "timdp": "Fair enough. :-) Thanks!. Fair enough. :-) Thanks!. "
}