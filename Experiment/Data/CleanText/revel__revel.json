{
    "robfig": "play 1.X\nOn Sun, Sep 2, 2012 at 11:34 PM, viney notifications@github.com wrote:\n\nIs based on play1.X or play2.X?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/1.\n. It's a little confusing because \"new\" creates a skeleton app in the named directory, but \"run\" actually takes the import path. \n\nHere's an example\n$ echo $GOPATH\n/Users/robfig/gocode\n$ cd /Users/robfig/gocode\n$ rev new src/testapp\n~\n~ revel! http://robfig.github.com/revel\n~\n~ Your application is ready:\n~    /Users/robfig/code/gocode/src/testapp\n$ rev run testapp\n~\n~ revel! http://robfig.github.com/revel\n~\n2012/09/07 18:38:23 run.go:38: Running app (dev): testapp (/Users/robfig/code/gocode/src/testapp)\n2012/09/07 18:38:23 template.go:120: Refresh\n2012/09/07 18:38:23 watcher.go:92: Watching: /Users/robfig/code/gocode/src/testapp/app\n2012/09/07 18:38:23 watcher.go:92: Watching: /Users/robfig/code/gocode/src/testapp/app/controllers\n2012/09/07 18:38:23 harness.go:113: Listening on :9000\nLet me know if it still doesn't work for you!\nThanks,\nRob\n. How embarrassing.  It is fixed, sorry guys.  The quick start works again. \n. Thanks, fixed!\n. I have not looked into it!  If you give it a shot, please let me know how it turns out. \n(It is definitely something I want to support, but I haven't gotten there yet) \n. Yea, I would love to get that working.  I made some progress on the appengine branch a while ago -- I could successfully run the app on appengine, but I hadn't found a way to run the appengine services in development before shelving it. \nWant to give it a shot? :~) \n. Hey, thanks!\ngorilla/mux looks pretty sweet!  For the reverse routing, I was hoping to achieve something like this:\n``` go\nfunc (c MyController) Action1(username string, token int) rev.Result {\n ...\n}\nfunc (c MyController) Action2() rev.Result {\n  return c.Redirect(router.Action1(myUsername, myToken))\n}\n```\nwhere the reverse router is aware of the parameters and types accepted by actions, and you get some amount of compile time safety about the fact that the action exists, and that you have supplied the parameters it wants.\nAdditionally, I want to provide this functionality in templates. \nRight now I have a functions that half-ass it: \n1. In code, you can call c.Redirect(c.Action1) to get the no-arg URL for that action.\n2. In templates, you can use the \"url\" func, e.g. {{ url \"MyController.Action1\" \"arg1\" \"arg2\" }} \nWhich sucks. \nIf the type-safe version does not pan out, I will see if I can leverage gorilla for that.  \nThanks for the note.\n-Rob\n. Thanks for the link. \nRevel already does code generation to accomplish some of the other magic, so this could be folded into that.  Other magic being \"flashy\" features like:\ngo\nfunc (c MyController) Action1() rev.Result {\n  someVariable := \"someValue\"\n  someVariable2 := 5\n  return c.Render(someVariable, someVariable2) \n}\nThat finds the template views/MyController/Action1.html and makes a map available containing \"someVariable\" bound to \"someValue\", etc.  That is also only possible with code generation (AFAIK!) :)\n. Thanks for pointing that out.  As you say, it was only meant as a toy example.  I think your suggestion is good, however, as long as it doesn't add much to the length.  I will give it a shot.\n. Perfect link, thanks! \n. Implemented and documented!\n. Thanks guys, I think renaming it to \"revel\" makes sense. (Never used the unix \"rev\" command before, so didn't think of it!)\n. This is done -- I haven't changed the go package name, but all references to the command line tool have changed. \nThanks!\n. theclapp: Thanks for finding the steps to install it properly.  Egg on my face for making the sample app have C dependencies that are not easily installable!  I will see if I can find a replacement solution for the sample app. (or make a variation of it).  Most likely, I will just swap out the booking sample with the chat sample on the front page!\nXULRunner: I have not yet started cross platform testing (and if I had, I probably would have missed ARM Debian :).  I have only attempted anything on OSX at this point -- I'm afraid I have no resources / particular knowledge to help you out at the moment.  It does sound like the main issue is just the SQLite driver, so I would suggest trying the other sample app, which doesn't use a DB.  (samples/chat).  (Revel doesn't require SQLite itself, after all.)\n. I added instructions here:\nhttp://robfig.github.com/revel/samples/booking.html\nand replaced it with the chat app for the quick start (since it requires no C libraries) \nThanks!\n. Thanks!\n. Yea, I agree with that.  Thanks.\n. Thanks!\n. Thanks!\n. Hi Pedro,\nThanks! \nAre you sure it's not because you already had those libraries on your machine?  I believe I tested this with a fresh GOPATH, and I found that it did not actually grab SQLite (a booking dependency) when running \"go get ../revel\".  That actually makes sense, since the Revel framework does not depend on SQLite, only the sample app does.  \nAs an aside, it turns out that unless your machine already has the SQLite C library installed, \"go get\"-ing it is not sufficient to install it, which makes the booking app a poor choice for the quick start.  (Because it will not work for all users).  I am planning to use the chat app for the quick start instead. \nLet me know if you have any questions!\nThanks,\nRob\n. I support having the template loader ignore dot-files (and probably not walk into dot-directories either!).  Editors saving backups is a common thing, and it is wacky to think that developers would really want their templates to start with \".\".  \nThanks for contributing! \n. Thanks for the help, and I'm glad it's working for you!\n. Thanks!\n. I agree with you.  It should test only for 0.  Fixed!\n. Hey, it shouldn't be a problem.  There are two options, depending on how you want to manage your Sessions.\n1. You can use a Plugin to set up the connection and provide a function that gets a Session.  You call that func from any action where you want a session.  (See how the booking sample app uses a Plugin to manage its SQLite DB)\n2. You can create a MongoController type with a *Session field.  All of your Controllers extend MongoController instead of rev.Controller.  You register an interceptor to run before every MongoController action that runs mgo.Dial() and sets the field to the session.\nLet me know if you have any questions or would like clarification.  \nThanks for reveling!\n-Rob\n. That looks pretty good -- if all you want to do is run session.Clone() before every request, you can just do it directly instead of putting it into the plugin.  \nFirst, delete the BeforeRequest function.  Then, in your action:\ngo\nfunc (c MyController) Action() {\n  s := session.Clone()\n  ...\n}\n(where \"session\" is the variable you defined in your code snippet, in the plugin)\nIf you would rather get a session within the plugin and transfer it to the action, I see two options.  The first is quick and dirty (you probably don't want to do it for this, just including it for completeness):\n``` go\nfunc (self MongoPlugin) BeforeRequest(c *rev.Controller) {\n  c.Args[\"mgo\"] = session.Clone()\n}\nfunc (c MyController) Action() rev.Result {\n  session := c.Args[\"mgo\"].(*mgo.Session)\n  ...\n}\n```\nor you can use a custom Controller:\n``` go\ntype MongoController struct {\n  rev.Controller\n  session *mgo.Session\n}\nfunc (self MongoPlugin) BeforeRequest(c rev.Controller) {\n  if mc, ok := c.(MongoController); ok {\n    mc.session = session.Clone()\n  }\n}\ntype MyController struct {\n  *MongoController\n}\nfunc (c MyController) Action() {\n  .. uses c.Session ..\n}\n```\n. Thanks for the report.  I'm not sure why it wouldn't work on Ubuntu, I will look into it! \n. I tried it out on an Amazon Ubuntu 12.04 64-bit VM, Go 1.02 and the booking app worked for me! \nIf you would like assistance getting it to run on Ubuntu, please reopen this issue and provide more details -- e.g. your command-line history, version of Go, etc\n. Thanks for the report. \nIt should be fixed by this commit:\nhttps://github.com/robfig/goconfig/commit/31941e03d1457cf3489560f24615efb4a8024e6d\n(The error was actually in the logging)\nFYI, there is some information about configuring logging here:\nhttp://robfig.github.com/revel/manual/logging.html\nThe .flags property is not there yet though.\n. Thanks for the report, but I need more information to help.\n- What environment? \n- What kind of failure do you see / what doesn't work?\n- Can you paste the console output?\n. Ah, I think I might have already fixed the issue you are running into.  Try pulling the latest code.  \nRight now I have an Ubuntu server up on EC2 that seems to be working: \nhttp://ec2-107-20-33-134.compute-1.amazonaws.com:9000/\nPlease reopen if pulling the latest doesn't resolve it.\nThanks!\n. Did you do \"go get\" or \"git pull\"?  Note that \"go get\" does not pull the latest code by default -- you need the '-u' parameter.\n\"git head\" in the revel directory should give you \"48c46d2  (3 days)\" \n. Hey, cool!  \nI don't know if you saw the note on http://robfig.github.com/revel/manual/deployment.html or not, but I was hoping for that buildpack. I'll add a link to it. \nThanks for the contribution -- just a couple small comments.  Agree that it's a little bit hacky, but I think it might be preferable than plumbing another port parameter through and having a check-to-see-if-we-should-fallback situation.\n. Sorry about the delay -- I must have missed the notification when you updated the pull request.  \nLGTM and thanks for contributing!\n. Yes, I plan to make something for authentication.  The one you linked looks like a large project, though -- I would provide more basic support.  Hopefully contributors would provide that :)\n. Hm.. I haven't been noticed any issues yet, and I just went through the tutorial on a fresh Mac Pro.  Did you guys succeed in getting it to fail deterministically?\nkalnado, can you turn your trace logger on (conf/app.conf, set \"log.trace.output = stderr\"), and send me the log that results when you run your server, change something, refresh, and have it not be updated?   Also, please include your $GOPATH.\nThanks for the help! \n. Ah, the mechanism I was using to watch just happened to work for Emacs and Vi because of the way they back up the buffer you're working on.  It does not work when editing with TextEdit (and presumably others). \nWorking on a fix, thanks for the help! \n. Hm, actually it is not the case.  I'm using the howeyc/fsnotify package which claims that watching the directory should be sufficient to get all changes to files within.  I've been testing it tonight and seeing sort of unpredictable behavior, presumably due to the different ways editors handle files.  I'm still not sure what exactly the bug is.\nCan you try pulling the commit I just made to the \"dev\" branch to see if that either solves your problem or provides more information? \n$ cd src/github.com/robfig/revel\n$ git pull \n$ git checkout dev\nThanks!\n. I think I found the issue: \nhttps://github.com/howeyc/fsnotify/issues/21\nI opened a pull request for the relevant part: \nhttps://github.com/howeyc/fsnotify/pull/22\nI pushed a new version to \"dev\" that should have this fix applied -- please try sync'ing and see if all of the reloading issues have been fixed for you.  (I could reproduce reliably with Sublime 2, and this fix successfully got the reloading to work) \nThanks again for your help!\n. Awesome, I pushed the fix to master.  Thanks guys\n. Ah, good point, thanks.\n. Applied\nhttps://github.com/robfig/revel/commit/10787a2cb56345d25d80f74e9e9cdc5fa91e682e\nWill send a note to revel-framework google group.\nLet me know if you guys end up making anything with it! \n. Thanks for the alert.  I just committed a fix. \nhttps://github.com/robfig/revel/commit/c3e0383fe0bd4666be4643e2ffbf19ffa2cb8030\n. Not sure if you figured it out, but if you set \"c.Response.ContentType = ... \", it will respect that in preference to whatever the default content type of each Result is. \nI'll be sure to add that to the Manual article on Results. \n. Thanks!\n. Thanks -- I had been putting the binary and source directory in the same path, which naturally causes this issue.  Should be fixed in head. \n. That's a good point and a fine distinction.  I generally need to retune that section, but I've made this change as a starter.  \nThanks for your help!\n. Thanks for contributing!\n. Excellent point.  I will look at the best way to support this.  Hope to have a solution for you before long. \n. FYI, in the meantime, after Revel generates your app, you can just do:\n1. go build -o bin/myapp import/path/to/myapp/app/tmp\n2. run gdb on the binary bin/myapp.\n3. Pass in flags \"-importPath\", \"-srcPath\", \"-runMode\" \n. importPath is the import path to your base app directory.  For example, for the booking sample app, it would be \"github.com/robfig/revel/samples/booking\".  \nsrcPath should be $GOPATH/src, but you don't actually need to specify it in this case.\n. I have really been putting this one off apparently :)\nImplementing a revel debug command that drops the user into the gdb session in the console is probably the way to go..  I guess there is no equivalent on windows\n. I think so -- at any rate, that seems like the first step.  I could imagine a more gold-plated solution where we add a servlet to the harness so that the developer could go to a special URL, select an action that they want to debug and have Revel place the breakpoint there on their behalf.  That seems like too much work for now though :)\n(I'm a print debugger, so this workflow is alien to me.  It probably won't get implemented without someone's vision and assistance.  I am happy to support however I can, though!)\n. I don't think anyone has worked on this\n. This one looks even better\nhttps://github.com/sirnewton01/godbg\n. Right now I think the only option is to have a script that starts your Revel app and subsequently runs your test suite. \nI'm working on testing infrastructure now, so hopefully we will have something better pretty soon.\n. I just merged it into master.  Please give it a go.  There is only one small example right now, and I'm still working on the docs, but hopefully it is somewhat self-explanatory. \nI'll close this ticket once I publish the docs. \n. Added an article on using the testing framework.\nhttp://robfig.github.com/revel/manual/testing.html\n. Thanks for the input.  I'm actually nearing \"completion\" on the testing module -- feel free to \"git checkout testing\" to check it out.  It's pretty cool because it could almost have been implemented entirely as a third-party package -- the only thing I haven't figured out yet is how to allow third-party code to hook into the source code processing step (which the testing framework uses to get a list of the test suites).  I've been thinking about ORM for a while, and it is my next item after pushing the testing framework to master.\nInternationalization or job running would both be great ones to tackle -- as you point out, I really need an article on contributor guidelines.  The basic guidance is that the basic interface or design should be similar to Play Framework while improving on it if there are any obvious shortcomings.  In particular, developer productivity by convention is valued above queries-per-second or conceptual purity.  You can see a lot of effort went into conveniences for common operations like binding form data to Go objects and rendering templates.\nI don't have any particular thoughts on internationalization.  For Jobs:\n- As in Play! it probably makes sense to have the Jobs run by a Plugin.\n- Right now there is no way to activate a plugin other than by putting it in an init() function somewhere, which is not great.  Play uses a \"play.plugins\" file as a text list to configure them -- we could do that, although there may be a better way. \n- I made a package for parsing Cron expressions to fulfill that dependency of the Jobs Plugin: https://www.github.com/robfig/cron \n- The application can register periodic jobs the same way as interceptors, e.g.\nfunc init() {\n  rev.RegisterJob(\"@daily\", EmailJob{})\n}\n- Ideally new features would be demonstrated in a sample app (new or existing).\n- New features should be documented / added to the manual.\nIf all this sounds good to you, feel free to charge ahead! \nI'll leave this issue open until I publish a real set of Contributor Guidelines. \n. Finally published something at https://github.com/robfig/revel/blob/master/CONTRIBUTING.md\n. Thanks for the early warning.  I'll look into it.\n. Yep, Modules are brand new -- I haven't gotten to documenting them yet.  Generally, there are three sort of similar concepts going on here:\n- Modules are packages of code that can be plugged into an application.\n- Plugins are types that may be registered to hook into application and request lifecycle events.\n- Interceptors are functions that may be registered to hook into request lifecycle events.\nIn order to add a module to your app, you would add a line to your app.conf:\nmodule.mymodulename = go/import/path/to/module\nThe module should have the same layout as a Revel application.  The \"hosting\" application will merge it in as follows:\n- Any templates in module/app/views will be added to the Template Loader search path (after the hosting app)\n- Any controllers in module/app/controllers will be treated as if they were in your application (they can be addressed)\n- The assets are made available, via a route of the form staticDir:modulename:public \nThis is just a start -- eventually other parts of the app will be merged in as well:\n- The routes file will make module routes available to the primary routes file\n- Configuration (app.conf)\nAs you discovered, there is not a good story for initialization -- I am planning to resolve that item by specifying that the app package will always be imported on initialization, and any initialization can go into an myapp/app/init.go file.  For now, the way I've done it everywhere is to put it in the controllers package -- as you pointed out, if you don't have a controller, having a fake one is sort of the only way to get it initialized.  If you wanted to fix that, I would be happy to merge a pull request that imports myapp/app if any code exists in it (I believe it would be a compile error otherwise), as well as provides that file as part of the skeleton app.\nHope this helps and thanks for your interest.  Let me know if you make anything, I would love to post some good examples.\nI'll leave this issue open until I have documented the information described above and completed the app/init.go thing.\n. Having it as a module is a good idea.  I could definitely see that working well.\nAssuming that the targeted interface is something like http://www.playframework.org/documentation/1.2.4/i18n , we could:\n- Make a module with two files: revel/modules/i18n/app/{init.go,plugin.go} (I would probably use \"package i18n\" instead of \"package app\" -- in fact, having it as a convention that code in \"app\" is actually of the package name of its parent directory would be good) \n- Inside init.go you would:\n  - Register your plugin\n  - Get the list of supported languages from the config (app.langs)\n  - Load all of the message files from path.Join(rev.BasePath, \"conf\", \"messages.{lang}\") \n  - Add to rev.TemplateFuncs for a message getter, e.g. {{msg \"messageName\"}} \n- The Plugin would have to do a couple things: \n  - On each request read the Accept-language cookie and set the desired language (could be stored in Controller.Args) \n  - Set a {COOKIE_PREFIX}_LANG language cookie (with value detected from Accept's-language, but also overridable by the app code)\nThe code that actually takes the message name, arguments and returns the formatted message can live in either place, or in a third place (e.g. i18n.go, messages.go).  It should probably support the same format syntax as Play!, which seems to be sophisticated enough to be comprehensive (and challenging to implement :).  e.g. positional args, using messages within a message.\nRegarding easy/short functions to access the messages, I see what you mean.  I think without putting it in core, the best you can do is:\n```\nimport \"github.com/robfig/revel/modules/i18n/app\"\nfunc (c AppController) Action() rev.Result {\n    i18n.Message(c, \"messageName\", \"arg1\", \"arg2\")\n   ...\n```\nand the Message function could look up the request language in c.Args, load the appropriate thing from the global message map, format it, return it. \nThat said, I would actually be comfortable putting it in core as this is supposed to be a batteries-included framework.  Then you could just wrap the function above with a convenience helper on Controller, e.g.\nc.Message(\"messageName\", \"arg1\", \"arg2\")\nSo, slightly more convenient (no import and one fewer argument), and basically none of the other code would change -- you can still use a plugin, but you can be assured that the rev package is initialized so it would not require the additional change we talked about.  That would be completely fine with me! \nI'm not aware of any way to load a package or type, given that type's name (as a string).  How it works right now is harness/reflect.go:ProcessSource scans all of the source under rev.CodePaths (which includes app/.. and the modules app/.. directories).  It (well, probably processPackage) would be in charge of noticing that there is code in a root directory (app/).  (I don't think we even need to require the file to be named init.go, we can just say that app/ is always imported if it has go code.) Then, in the template at the bottom of harness/build.go, it could spit out underscore imports for each of the roots with code, e.g.\nimport _ \"github.com/robfig/revel/modules/i18n/app\"\n. Great, I like your ideas.  Regarding bullet #2, would the multiple files be treated as if they were all in a single file?  In that case, the downside you point out in #3 doesn't really apply since you would be able to break the regions into different files if you want. \nAgain, I would say that it's totally fine to put the code in core instead of a module, which would make the module loading change unnecessary.  (Unless you want to do it anyway for the fun :).\n. Just wanted to alert you that I just refactored mvc.go, so you should pull as soon as possible to avoid merge problems.  Hope you don't already have some..\n. Looks like you're making good progress!  Nice.\nFYI, I did the \"auto-import\" thing I was talking about.  Any package within one of the rev.CodePaths that has an init() function will be imported by Revel on initialization.  \nhttps://github.com/robfig/revel/commit/0dd7324336d66b933b2a6c1c6ed5d6d0201fb337\n. Its own source file seems reasonable to me!  Right now mvc.go has the following responsibilities: \n1. The Revel Request/Response types\n2. Extracting more useful information from the http.Request\n3. Registering controllers.\n4. Instantiating controllers.\n5. Providing canned responses when there is no controller.  (NotFound, RenderError)\nI think extracting 1. and 2. to a new file makes sense.  I don't have any great ideas for the name, maybe http.go or request.go?\nThe name \"mvc.go\" also no longer makes any sense.. maybe a rename to controllerfactory.go or something would be appropriate (woops, now it's my Java background that's showing).\n. SGTM\n. In play the plugin allows the app to set a locale, presumably so the app can allow the user to override their browser setting. The cookie would be necessary to save that. (Just guessing, on my phone). \n. That seems reasonable to me! \n. Cool!  Great work.  I've been busy at work for the past 2 months, so I'm glad you've been keeping the lights on :)\nRegarding your first question, I had to install exactly the version of jekyll, etc that GH uses.  I think the default jekyll is too new, and uses a different tag for the same functionality.  It looks like it may have since been updated, but this is probably the right link: https://help.github.com/articles/using-jekyll-with-pages\nIf I understand your second item, you're saying that the plugin stores the Locale to a property on Controller, but since the i18n plugin relies on the app configuration to require it, apps that do not would end up with the .Language property being empty.  Is that right? \nThis evening or tomorrow I will review things at a high level. \n. I see.  That's certainly an option; the only benefit of making it into a module is being able to activate and de-activate it.  For example, the testing stuff is in a module so that it does not get included or run when running the app in prod mode.  Similarly, it's possible that many apps do not need to be internationalized, so it would reduce the compile-time and run-time costs.  On the other hand, depending on how everything fits together, I imagine people may want to manage strings in a messages file instead of in the code even without translations, and if that requires the i18n module to be activated we might want to just always include it by default.\nAnyway, those are my thoughts; I don't feel strongly one way or the other.\n. Yea, I was thinking that your suggestion to put i18n into core would take the same form as that.  I did those like that as a way to factor the related code together -- previously the various controller control flows had all that stuff mixed in, and this seemed to make things much more maintainable.  That functionality seemed essential enough that they should be in every app, so I did not consider making it possible to disable them (but obviously, that would be easy to add given the structure). \n. Things look good!  Thank you in particular for the great set of tests, comments, and docs.  This is a very professional job.\nOnly a couple of high level comments:\n- Please move the RegisterPlugin call into init.go -- I put all the plugin registration there to control the ordering they are invoked.  Eventually we will probably need to make it possible to set explicit priorities to remove the soft requirement of putting all the register calls in the same place. \n- Please combine i18n.go and i18n_plugin.go -- keeping the related code together is helpful, and neither of them are large files.  (Additionally, it would keep their documentation together on the godoc page.)\n- Do you mind wrapping the docs at 80 or 100 lines?  Very long lines are more difficult to review, and it makes diffs more difficult since a single character change highlights the entire paragraph.\n. I build the documentation into a \"test\" subdirectory like this:\njekyll --auto --pygments --no-lsi --safe test/revel\nThen from in that directory I run a python server:\npython -m SimpleHTTPServer 8000\nNot the most elegant.  Anyway, I successfully built your docs and they look fine!\n. Sounds good.\n. Ah, it turns out that gh-pages actually \"upgraded\" the version of liquid they are using from 2.2.2 to 2.4.1, which removed the {{literal}} tag I use for many of the code snippets, while not supporting the replacement tag {{raw}} which replaced {{literal}} in liquid 2.3.0.  The march of progress :)\n. This appears to be a dupe of #38\nPlease try updating your go installation to the release tag to resolve it for now\n. Removed entirely, didn't seem worth the effort to keep around.\n. Pushed: \nhttps://github.com/robfig/revel/commit/28e6237af10799912a06995ccff6aa1eb2e71e2e\n. Fixed by https://github.com/robfig/revel/pull/45\n. Wow, this is great!\n. Whoops, tried to log in to the booking demo and got a Server Error: \"couldn't find method\".  \nHopefully I didn't break it recently.. \n. Hey thanks for the contribution!  I have three comments: \n1. Everything harness-related should go in the \"harness\" package -- do you mind moving the HarnessPort / HarnessAddr part there?  (It would still use rev.Config to read the values)\n2. Instead of adding HarnessAddr, would it work to use HttpAddr instead of \"localhost\"?  I'm not sure I can think of a case where the host name needs to be different.  (which doesn't mean it doesn't exist!) \n3. The terminology is a little confusing since the harness actually runs on the app port, and it starts the app on the harness port :).  I'm not sure I have any great ideas for clarifying the situation by using better variable names, but perhaps something like HarnessAppPort or HarnessedPort would be a little better.  Any thoughts ?\n. Looks good -- just the one comment.\n. LGTM\nThanks for contributing!\n. Hey, thanks for pointing out the problem.  I think it should be fixed in revel/cmd/run.go, since that's the code trying to override the port.  I just pushed a solution for it: \nhttps://github.com/robfig/revel/commit/e63b5c0446b2c086f7209c954030cd6015dd3fce\nThanks!\n. Thanks, I took your suggestion and forked your repo and updated the docs:\nhttps://github.com/robfig/revel/commit/c93094524d04b4ada6484b5ee9ae4e7c1292cbda\n. Seems like there are a couple options that would do what you want.\n1. Watch specific directories provided by user\n2. Watch all directories under the base path that have go code.\n3. Watch all non-builtin dependencies.\nProbably 1. is unnecessarily complicated.  2. seems like it should be straightforward and reasonable.  3. might be a little more convenient, but it might be overkill and load the system with a bunch of pointless watches. \nDoes that meet the use case?\n. I agree, we should have a configuration variable:\nwatch.deps=true\nthat defaults to \"true\" in dev mode.  It can add watches for all non-builtin dependencies of the application.  It should work fine for small apps and be more convenient. \nImplementation notes: \n- In revel/harness/reflect.go:processPackage, we already collect package imports (addImports). \n- Add a SourceInfo property to aggregate the import paths (no need to keep the import aliases)\n- Add a separate step at the end of ProcessSource to process the dependency packages, adding their dependencies to the set of imports, repeatedly until we run out or complete an iteration without adding anything. \n- In revel/harness/harness.go, add watches for those imported directories (you can convert an import path to a directory using go/build.Import)\n. Looks like this PR is moving forward, which would just watch all GOPATH:\nhttps://github.com/robfig/revel/pull/153\n. Seems like something I should investigate and fix..\n. Blast, I really was hoping to have a 4 letter package name at most.  I didn't realize the difference causes trouble for tools.  I guess there's no alternative to renaming the package to revel.\n. I don't understand.  What is the issue?\n. I believe these commands work to build revel: \ngo get github.com/robfig/revel\ngo build github.com/robfig/revel/cmd\nIf they do not work for you, please paste the console output that you see when you run those commands.\n. I'm having a lot of trouble reproducing. \ngo get worked for me: \n```\n$ go list code.google.com/p/go.net/websocket\ncan't load package: package code.google.com/p/go.net/websocket: import \"code.google.com/p/go.net/websocket\": cannot find package\n$ go get code.google.com/p/go.net/websocket\n$ go list code.google.com/p/go.net/websocket\ncode.google.com/p/go.net/websocket\n```\nWhat if you clone it directly?\n$ hg clone https://code.google.com/p/go.net/\nCan you successfully access the web site?\nhttps://code.google.com/p/go/source/checkout?repo=net\n. This discussion looks related\nhttps://groups.google.com/forum/m/#!topic/golang-nuts/vWewH0Wum90/discussion\nPlease follow up on that list if it continues to not work\n. The revel/cmd sub-package was renamed to revel/revel so that you can \"go get\" it and have it built automatically.\nYou shouldn't have to do anything beyond: \ngo get github.com/robfig/revel\nthat should result in a built command line tool in $GOPATH/bin\n. Excellent question -- I haven't tried that before, but I would have expected that it should work the same way too.  (Also, that's a neat idiom for running in the background while saving the pid!) \nWill take a look, thanks for filing.\n. I intentionally changed it to use import path because:\n- That was the only place in Revel that it used a relative working directory rather than import path.\n- It is necessary for it to be in a place where Go can find it (in your GOPATH source directory).\nIs there a use case that it doesn't handle (or a reason you want to create a new app outside of your GOPATH) ?\n. Ah, makes sense.  That behavior seems like a bug that should be corrected.  Out of curiosity, what is the motivation for installing Revel in a different location from your app? \n. I'm not sure, as I didn't write that.  I would suggest asking in this project: \nhttps://github.com/kless/goconfig\n. That code gets the line of the calling function and looks to see what RenderArgs were passed to it (those variable names are stored in RenderArgNames)\n. Thank you for this report.  It highlights two issues:\n- Revel does not properly discover the variadic type for the argument.\n- This func is probably not an Action that should be invokable, but there is no way to tell Revel that (without making it unexported).  (Play uses the @Util annotation to indicate functions that are utility rather than actions) \nI will resolve the first issue shortly.  I'm not sure I have any great ideas for resolving the second, other than unpleasant ones like requiring the method name to start with \"Util\" -- any ideas? \n. There is generally a catch-all route that makes all actions accessible {controller}.{action}\n. Apologies if I've missed something, but I believe the pull request is still pending your response to the other comments, right?  (I just want to ensure the ball is not in my court) \n. This is a tremendous contribution, thank you.\n. LGTM!\n. Thanks!\n. Good point -- I used zip because it is \"natively\" supported on windows (and I recall the API to write zip files is more pleasant).  Also, doing bash run.sh instead of ./run.sh doesn't seem too bad.  \nOn the other hand, any Windows developers using go probably have some kind of MinGW / Cygwin situation, which would provide them with tar as well. \nSounds like a good change to make.\n. That's a great idea.  Rsync should work just fine.  \"Package\" just compiles and zips the app and templates, along with a helpful run script.\n. Fixed by 784d468216f54e4319e03cae77189f5f3f198175 and 79337ce18fb114d7cf6ee982e926c455844d8e86\n. Heh, humorous.  Seems like an easy solution is to build the zip file in a temp directory and move it at the end.\n. Thanks for contributing!\n. Hm, should have thought of this before, but the Play! pluralize actually has several conveniences that this one doesn't.\n1. It takes the list directly\n2. The singular and plural forms are optional -- the default values of each are \"\" for singular, \"s\" for plural. \nYou can see here: http://www.playframework.org/documentation/1.1.1/javaextensions\nHere's an example:\nThere are {{len comments}} comment{{pluralize comments}}\nThe reason they do that is because the typical case is to have the list itself, not the length of the list in a variable. Almost always the argument would be {{pluralize (len comments)}} -- admittedly not so bad, but less convenient.  (especially since our version could easily do the right thing by telling whether it is a type or a slice. \nThoughts?\n. It could be implemented like this:\ngo\nfunc (array interface{}, pluralOverrides ...string) template.HTML {\n  ...\n  singular, plural := \"\", \"s\"\n  if len(pluralOverrides) >= 1 {\n    singular = pluralOverrides[0]\n    if len(pluralOverrides == 2 {\n      plural = pluralOverrides[1]\n    }\n  }\n}\nI don't feel too strongly about whether that convenience is necessary or not.  I do think the values of \"\", \"s\" are by far the most common.  Mostly I would be tipped to do it since the existing Play! thing does it, and it would be nice to have parity.\n. Cool, thanks. How do you feel about also handling if they pass an int instead of the array? \n. Thanks!\n. Thanks, got it!  \n(The \"edit in web browser\" interface is great for these kinds of edits!) \n. Sorry, was just transferring goconfig repo around.\nFixed by 4d6df7831c51926a9f7806f4c164804e447f11be\n. Hm, I'm not sure why that's happening for you.  I successfully used go get to: \n- Clone the repo into a fresh GOPATH workspace\n- Update an existing revel repo past the goconfig change.  \nYou could try creating a new workspace?\n``\n$ mkdir gocode2\n$ cd gocode2/\n$ export GOPATH=pwd`\n$ go get -v github.com/robfig/revel\ngithub.com/robfig/revel (download)\ncode.google.com/p/go.net (download)\ngithub.com/robfig/config (download)\ngithub.com/robfig/fsnotify (download)\ncode.google.com/p/go.net/websocket\ngithub.com/robfig/config\ngithub.com/robfig/fsnotify\ngithub.com/robfig/revel\n(success)\n```\n. Ok, I think I know what happened.  I think revel is installed into your $GOROOT, otherwise your go get -v should show it being downloaded first.\nLook for $GOROOT/src/pkg/github.com/robfig/revel and delete it, then try to re-run the command.   Alternatively, it should just work if you pass the -u flag -- by default, \"go get\" does not get the latest code.\ngo get -u -v github.com/robfig/revel\nAs for why you have to enter a password, I don't know, but that is a question for \"go get\", not for Revel.\n. That indicates that it couldn't find the Hotel of the given ID.  What URL did you end up at, /hotels/1?  The samples/booking/app/controllers.GorpPlugin.OnAppStart function runs on startup to create the tables and insert 3 hotel records, so perhaps there is an issue there.  It must at least create the tables, or you wouldn't even get that far, so I wonder if there is a difference in the auto-increment primary key id.  \nIf you don't mind, can you add a Println right after the hotels get inserted, in gorp.go?\ngo\n        if err := dbm.Insert(hotel); err != nil {\n            panic(err)\n        }\n        r.INFO.Println(\"Hotel\", hotel.HotelId, \"inserted.\")\nFor me, that prints: \nINFO  2013/02/02 18:14:24 gorp.go:77: Hotel 1 inserted.\nINFO  2013/02/02 18:14:24 gorp.go:77: Hotel 2 inserted.\nINFO  2013/02/02 18:14:24 gorp.go:77: Hotel 3 inserted.\n(among other logging)\nThat should tell you the hotel ids that are available.  If that is working as expected, and the hotel that it was trying to load in fact exists.. well I'm not sure how that could break! \nAlso, I just pushed a change to return a Hotel Not Found page in that scenario.\nThanks for reporting!\n. Any updates?\n. Ah!  The issue is that last select, where it is incorrectly quoting all of the field names.  \nOn my machine, it looks like this instead:\nINFO  2013/02/10 18:18:39 gorp.go:778: [gorp] select HotelId,Name,Address,City,State,Zip,Country,Price from Hotel where HotelId=?; [[1]]\n.. and I just updated to the latest revision of Gorp, and now it's not working for me either. \nPull request filed:\nhttps://github.com/coopernurse/gorp/pull/20\n. Please try running go get -u github.com/coopernurse/gorp and try this again.  Sorry for the inconvenience!\n(And please reopen this ticket if it doesn't work for you)\n. Thanks for reporting -- I added the \"autofocus\" HTML5 attribute, and it now keeps focus for me in Chrome. \n. The Play! design (which I like) has two different ideas:\n- session is the cookie based storage\n- cache is the server side storage (which by default is stored in the heap, but can be easily configured to talk to memcached)\nIt seems like gorilla sessions are analogous to the Play! cache -- I hope the implement that at some point soon, but if you want to contribute it that would be most helpful! \nhttp://playframework.org/documentation/1.2.4/controllers#session\nhttp://playframework.org/documentation/1.2.4/cache\n. I just pushed the cache integration.  Check it out! \nhttp://robfig.github.com/revel/manual/cache.html\n. Hello! \nTo answer your first question, it looks like you could do that with:\ngo\nv.Required(len(people) == 0).Key(\"email\").Message(\"...\")\nAs you've discovered, none of the builtin validation methods have the structure of passing one expression but checking a different one.  If you want to activate the magic to avoid setting the Key as a string, the only current way to do that is to write a custom Validator, as you say.  That could be passed to Check, and it should only be run if all previous validators succeed. \nThe validator interface:\ngo\ntype Validator interface {\n    IsSatisfied(interface{}) bool\n    DefaultMessage() string\n}\nSo you could make: \n``` go\ntype DuplicateEmailValidator struct {}\nfunc (v DuplicateEmailValidator) IsSatisfied(email interface{}) bool {\n  people, err := Txn.Select(Person{}, \"SELECT * FROM person WHERE email = $1\", email.(string))\n  if err != nil {                                                                                                        \n    panic(err)                                                                                                         \n  }\n  return len(people) == 0\n}\nfunc (v DuplicateEmailValidator DefaultMessage() string {\n  return \"Sorry, that email is already in use\"\n}\n```\nand then apply it with\ngo\nc.Validation.Check(email, \n  revel.Required{},\n  DuplicateEmailValidator{},\n)\nThat should do what you want, with the exception of being able to set a custom message for the Required check.  To do that, you would have to do the less magical: \n``` go\nc.Validation.Email(email).Message(\"...\") \nif c.Validation.HasErrors { \n  ...\n}\nc.Validation.Check(email, DuplicateEmailValidator)\nif c.Validation.HasErrors {\n ...\n}\n```\nYou could probably get it a bit more concise than that, but basically have an exit before running the query depending on if there are validation errors at that point or not.\n. Actually, overriding the message in a Check call could be done like this:\n``` go\ntype MessageOverride struct{ revel.Validator, Message string }\nfunc (v MessageOverride) DefaultMessage() string {\n  return v.Message\n}\n```\nThen you could do:\ngo\nc.Validation.Check(email,\n  MessageOverride{revel.Email{}, \"Valid email is required!\"},\n  DuplicateEmailValidator{},\n)\nHow about that!\n. @coocood, thanks for the link.  Looks interesting, I think that is the first Go ORM that loads relations.  \nAs @kdar says, the approach is to make it easy for application developers to integrate their preferred ORM and provide pre-made modules that they can pull in and configure.\n. bossdb is written in Erlang, so I'm not sure how we could use it, unless you meant any particular feature or design it has? \n. Wow, that's embarrassing.  I had thought that path.Join was equivalent to filepath.Join.  I'm surprised it worked this much on Windows. \nThanks for tracking it down, I will try to push a fix today.\nI guess it is probably difficult to use a Revel branch, since the github.com/robfig/revel import path is hardcoded in some places (or maybe only in revel.REVEL_IMPORT_PATH).  If it were possible to automatically figure out the Revel import path so that branches could just work, that would be a big improvement! \n. Well, I made things a little bit better, but it is still not fully working on Windows.  I will get myself a windows workstation, because trying to develop on an EC2 VM is terrible.  I hope to finish this up tomorrow\n. There were many other usages of path.Join and path.IsAbs that use \"/\" as the path separator.  You can see some of the changes: https://github.com/robfig/revel/commit/00a8b8b8a1274b7af61f85c66454639b49bd424b\nI'm not sure why the other usages don't seem to break anything\n. Sorry about that, it should be back if you update to the latest.\n. Ah, I should have noticed earlier.  The output from the \"revel new\" command suggests you are running a very old version.  Please try re-building the command line tool.\n$ cd $GOPATH\n$ go build -o bin/revel github.com/robfig/revel/cmd\nAfter that, I bet it will work for you.\n(It used to be the case that \"revel new\" took a directory instead of an import path)\n. Also, you can not generally move apps around -- if they consist of more than one Go package then the import paths will break.  To run the samples, you should leave them in place and just do revel run github.com/robfig/revel/samples/booking\n. Not at all, thanks for developing, and let me know if you end up building anything with it!\n. You do bring up a good point, which is that non-HTML templates should not be HTML-escaped.  I would like to make it smart, so that Render'ing a template file ending in \".txt\" would not treat it as HTML (and that could be the default if the requested ContentType is text/plain).  I believe Play! does something similar to that.\nI'll leave that open until I have an answer for that.\n. FYI, I just added the \"raw\" template helper, in case that is of interest.\n. Kenny is working on this in issue #99 \nClosing this one. \n. I believe the problem is that the import statement results in a compile error: imported and not used: \"net/url\".  You can see that if you run it in [dev] run mode.\nThere are two things I should fix: \n1. That compilation error is not being printed to the ERROR logger\n2. The default 500 template only shows the detailed stack trace in the [dev] run mode.  Instead, it should either be controllable using a config variable, or there should be some mechanism to allow the harness to just always show the detailed error (since the harness running at all is an indication of development).\n. Well, I fixed 1. in 8fe9547ba9d6a5a99a493ae8a50c88b82c01649a\nI'm still thinking about how to fix 2.  I guess adding an \"app.mode\" property which is either \"prod\" or \"dev\" would work, which is similar to the Play! approach.  That could have a further benefit of setting different defaults for \"dev\" vs \"prod\" while still allowing complete configurability. \n. Yea, I have seen these errors as well -- do they actually prevent your app from working?  \nThose get printed when the harness attempts to compile all templates, without having access to your template Funcs.  However, the harness also has code to fall back to only load the builtin error templates, which compile without a problem -- the harness only ever needs to serve 500 error pages, so these errors should not actually affect your program's functionality.\nThat being said, it is on my list to make the harness only load the error templates.  \nThanks for reporting! \n. Thanks for the contribution!\n. Session cookies expire when you close your web browser.  But, I would like to support an expiration time as well.  If you are interested, please do send a pull request for setting it based on an optional app.conf duration\ne.g. session.expires=7d\n. Thank you for the report, I will investigate this. \nIt is certainly the intention that you can use Before and After for your connection setup / teardown, and that it should persist.\n. You mention you can't use db.spec = :memory: -- I don't think I understand the reason.\nIt seems like if you import github.com/robfig/revel/modules/db/app, you can directly use db.Db which should be the same database connection the app has. \nCould that be a workaround? \n. Yes, you are correct in everything you wrote. \nI meant to suggest that you would not open and close the connection in Before and After, you would just (optionally) populate and delete data from the database.  Using db.Db should give you an open connection to the app's in-memory database -- I'm not sure what you want to test, but it should be possible to do so without opening and closing the connection. \n(Either way, I still need to investigate why your previous attempt didn't work!) \n. The reason for your PathologicalTest is that \ngo\nfunc (t PathologicalTest) Before()\nmakes a copy of the PathologicalTest structure and passes that copy as a parameter. (Pass by value) \nYour example would work as you intend if instead you use a pointer to the struct as the receiver.\ngo\nfunc (t *PathologicalTest) Before()\nI just pushed commit 2d4d0c598f1c5ee155c7c59bcf2ce177f3d17e22 which allows the test methods themselves to accept a pointer to the receiver, and I will also change the example to prevent confusion.\nI am still looking into using in-memory SQLite for this. \n. I made a small change to the booking tests:\n``` go\npackage tests\nimport (\n    \"github.com/robfig/revel\"\n    booking \"github.com/robfig/revel/samples/booking/app/controllers\"\n    \"github.com/robfig/revel/samples/booking/app/models\"\n)\ntype ApplicationTest struct {\n    revel.TestSuite\n}\nfunc (t *ApplicationTest) Before() {\n    println(\"Set up\")\n    booking.Dbm.CreateTables()\n    println(\"Created tables\")\n}\nfunc (t *ApplicationTest) TestThatIndexPageWorks() {\n    results, x := booking.Dbm.Select(models.Hotel{}, \"select * from Hotel\")\n    revel.INFO.Println(results, x)\n    t.Get(\"/\")\n    t.AssertOk()\n    t.AssertContentType(\"text/html\")\n}\nfunc (t *ApplicationTest) After() {\n    println(\"Tear down\")\n    booking.Dbm.DropTables()\n    println(\"Dropped tables\")\n}\n```\n(And in the booking app, I made the gorp.go:Dbm variable exported.)\nThis test worked for me -- the first run showed me 3 hotels (because they were populated at startup by the app), and subsequent runs shows me empty tables.  The only thing I would have to do is to extract the data insertion into a separate function (in gorp.go) and I could run that in Before().\nNote that I do not open or close any connections.  I do not think that is necessary.\n(I believe that the restriction in SQLite is that two transactions can not happen at the same time -- it will block the later one until the previous has finished.  But that is not a problem for writing these tests)\nI moved \"test fixtures\" up the list of suggested projects in CONTRIBUTORS.md -- I think that is out of scope for this issue, although if you would like to attempt to implement something that would be very much appreciated!  \nThanks for playing with Revel!\n. Weird, I can successfully run the example I posted many times in quick succession (just clicking the \"Run\" button as fast as possible).  If you post your code somewhere, I can try to reproduce. \n. Actually, it should be \"hasError\".  Thanks for the bug report, and fixed in bf61f5790b0926aa72a5e70d0b830a4d04708286\n. @tmbrggmn is correct. \nThe practical reason why it didn't work is that GOROOT has a different layout than GOPATH, and Revel makes an assumption about how to find your code.  I am not sure why unsetting GOROOT made things work, but it is probably not desirable. \nFor reference, on my machine I have these values:\nGOROOT=/Users/robfig/go \nGOPATH=/Users/robfig/gocode \nSo your packaged go installation goes under GOROOT, and your own code (and downloaded libraries) go under GOPATH.  (Right now, Revel will quit with a descriptive error if your GOPATH is not set at all, but it does not check that it is set differently from GOROOT.  I will do that. )\n. Yep. \n. This is looking great.. the only thing that is too bad is server_test.  I guess it was an ugly hack to start with.  What are your thoughts? \n. The regex seems like it merits testing :).  IIRC, there are two sets of tests; one set tests the route file parsing, and one tests the routing.  Perhaps only one set was necessary, but I was an eager beaver at that time.\nNot providing directory listings is fine, and 403 makes sense as a return code there.\nI just took a look at http.ServeFile to see what else we are missing out on by not using the Go standard thing.  It looks like ServeFile adds:\n- Serving directory listings, and automatically using index.html if present for them\n- Canonicalizing URLs by dropping a final slash if it's a file, and adding it if it's a directory\nWe don't need either of those, but it does pass the request to http.ServeContent, which does stuff we might want:\n- If-Modified-Since \n- Range \n- HEAD requests\n- Deduce Content-Type\nWe have our own mime type configuration, so we don't want the last, but it doesn't do the deduction if we set a Content-Type header in advance.  It seems like the other stuff is helpful -- what do you think about either having a new Result type FileResult that delegates to ServeContent (or, maybe even ServeFile) to take advantage of this?  Is there flexibility we would be losing by that? \n. I think this is pretty close.  I have just a couple questions/concerns:\n- It might be worth supporting the staticDir: syntax, converting it to the new one, to avoid breaking everyone's apps.  It could print an ERROR message telling them to update their route. \n- The testrunner uses the staticDir:module:dir format, which I don't think we have an answer for yet?\n- My main performance concern would actually be around creating a bunch of extra garbage, rather than CPU time (a fair number of objects get created to populate the Controller).  Unfortunately OSX seems to be very poorly supported for profiling purposes.  Either way, I have not put a huge amount of effort into performance, so I would be comfortable tabling this concern until later on -- and improving the performance of controller invocations overall would be a worthy cause. \nIt can be an item for the future to investigate using http.ServeContent or ServeFile in the Controller.RenderFile implementation\n. Great summary.  I agree that the 403 on directories is worth doing, but I think all of those other items can wait.  Agree it's not necessary to support staticDir: syntax.  I think your solution to the module thing is good.\nThe other items you brought up:\n- Weird whitespace: The only difference is you swapped the position of the comment line to one line later.\n- Hanging file.Opens --  I'm pretty sure it will run out of file descriptors (I'm not sure if Go closes them automatically when they get GC'ed).  I think the straightforward solution would be to update BinaryResult to test if the Reader is a ReadCloser, and then Close() it if so.\n. On the file.Opens -- correct.\n. I think this is good. \nLast question -- what is your opinion on this: \nGET /public/{<.*>filepath}     Static.Serve(\"public\")\nGET /favicon.ico               Static.Serve(\"public/img\", \"favicon.png\")\nThe first argument would always be a directory, and the second is a filepath?\n. LGTM\nA couple tiny final comments, then ready to merge.\n. Ah, I was just referring to the inline comments I made -- but I love the godoc :p \nLooks awesome, thank you very much for your work!\n. Hmm, I haven't seen that before -- I just pushed a change to use the howeyc/fsnotify library, which has many updates since the snapshot I was using previously.  Please update revel and fsnotify and try again.\ngo get -u github.com/howeyc/fsnotify\ngo get -u github.com/robfig/revel\n. I've seen this on my linux machine as well -- I think it was after running benchmarks.  I can only assume that the FD limit was reached due to ubuntu being a bit slow to release them (maybe?).  After waiting a bit, it worked though.  Revel does open one FD for each file/directory being watched, but for a new app it shouldn't be more than e.g. 15\nLooking at my own lsof output, it appears that Revel has exactly the FDs open that I would expected, so I'm closing this as not-revel's-fault.  (If you discover what was happening, I would love to know though!) \n. This makes sense, thanks!\n. @Shaban it's nice to be able to develop offline, and these are sample apps to demonstrate the functionality -- I would not expect a production app to serve its own jQuery \n@kyleconroy thanks \n. I just realized that part of using ServeContent involved changing BinaryResult to require a ReadSeeker instead of a Reader.  That is not a desirable change actually, since it removes the ability to stream binary data back to the client without having it all on disk or in memory first.  \nI don't think there is any situation where you would know the size but not be able to have a ReadSeeker though, so this CL is a fine step forward.  I will look into allowing BinaryResult to take a Reader as well, later on.\nThanks for contributing!\n. Hi,\nI have not tried to use Eclipse for Go development before.  I will try to set it up and see if / how it works -- do you use GoClipse, or regular Eclipse?  I think that it should be possible.. \nThanks!\n-Rob\n. Agreed\n. Thanks\n. Howdy,\nYea, I didn't make any particular support for that -- it was not very obvious what to make, and even without the support it is pretty straightforward with encoding/json:\ngo\nfunc (c Application) Test() rev.Result {\n    mentions := []struct {\n        Text string `json:text`\n    }{}\n    err := json.NewDecoder(c.Request.Body).Decode(&mentions)\n    if err != nil {\n        rev.ERROR.Println(err)\n    }\n    rev.INFO.Println(mentions)\n    return c.RenderText(\"ok\")\n}\nLet me know if that doesn't work for your use case, or if you see an opportunity for improving it\nThanks!\n-Rob\n. Thanks, fixed in 6f98defe0ba09a30e5dcfc2b1e70318bca9d56aa\n. Hi Kenny, I just wanted to let you know that I am extremely busy this week and may not be able to follow up until the weekend or early next week.  This is a great contribution, so I don't want you to think that I'm ignoring you :) \n. Hi Kenny,\nThanks for your patience!  I will have time this weekend to work on this as well.  Here are some initial notes.\n\nRenderInLayout\n\nAs you note, the RenderInLayout / Render change is a major breaking change which does not seem necessary to support the swappable render engines.  It seems to specialize the structure pretty closely to this Mustache API, in a way that I am not comfortable with (I'm sorry for not realizing that was the plan earlier!).  I think we should work on a pull request without that functionality for now.  \nAlso, Mustache the template language does not have the concept of a \"layout\", afaik.  That was the idea of the specific implementor here -- I'm sure we could do something similar, perhaps with a fork, that fits better into the existing model. In fact, it could probably be implemented as a simple method that returns a RenderTemplateResult after modifying the RenderArgs a bit.  (Happy to help here)\n\ngo\nif new(MustacheTemplate).HandlesFile(templateName)\n\nIt seems like \"HandlesFile\" should be a configured mapping, instead of a function, so that the extension it handles is not hard-coded, right?\n\ngo\n// Change back to original dir - required for mustache to find relative paths\nerr = os.Chdir(pwd)\n\nHm, it might be possible to work around this, but this looks like another thing in the Mustache implementation that could be fixed pretty easily in a fork. \n\ngo\n// Find a template, given a relative path\nfunc (loader *TemplateLoader) templateLookup(name string) (Template) {\n  for key, t := range loader.templates {\n     if key == name { \n       return t \n     } \n   } \n  return nil \n}\n\nIt seems like this could be\ngo\nreturn loader.templates[name]\n\ngo\n// TEXT TEMPLATES which perform no transformations\n// This could instead use the text/template package?\n\nYes, we will need to use text/template for text templates\n\nPlease feel free to let me know if anything is unclear.  \nThanks again for your hard work! \n. I see, thanks for clarifying.  I think the picture of allowing \"layouts\" in my head was the more general mechanism provided by either Django or Play! -- their templates are not divided into \"layouts\" and \"templates\" but they provide mechanisms for configuring that relationship between any number of templates.   \nHere's an example of each:\nhttps://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance\nhttp://www.playframework.com/documentation/1.1/templates#inheritance\nIn my experience, a single level of template stacking has not been enough for any sizable project, so I don't want to make a mechanism that the developer quickly outgrows.  Having the template language to specify it seems like a much better solution to me.  \nTo get Mustache to that point, I think we could either (1) make the convenient RenderInLayout helper that produces a Result.  I think it would be exactly what you made, except it should not be a Controller method.  It could either be a regular helper function provided by another package, or it could even be something that the developer embeds in their controller to gain that, and maybe other helpers:\n``` go\ntype MustacheController struct {\n  *revel.Controller\n}\nfunc (c MustacheController) RenderInLayout(context, options map[string]interface{}) revel.Result { ... } \n```\nThis does not have to be part of your pull request, but once this is done I will make the Go templates use Pongo so that it can have the same layout functionality: \nhttps://github.com/flosch/pongo \nHonestly, the thing I am even more interested in than explicit Mustache support is the ability to specify other template engines in general, so that someone can (without forking revel) register their preferred template engine  to have it handle some particular extensions.  Then, we should have a revel/template package that provides engines for any of the major guys.  (Or maybe, the developer can specify one of the template languages for which we have provided an engine, which may be easier to accomplish than the fully general thing.)\nHopefully this all makes sense..  thanks again!\n. This would be a great feature to have -- the only tweak that comes to mind is that I would consider specifying delimiters as a single setting instead of two different ones. \nFor example, maybe template.delimiters = {% %}, and we can simply remove spaces and take the first n/2 tokens to be the opening and the second n/2 to be the closing.  That may make it more convenient to specify and clear to read in the config. \nI will merge this as soon as possible.  \nThanks for your help! \n. Yep, thanks!\n. Hi, thanks!  \nThat makes sense -- we should make the \"eq\" function compare the value of int types, ignoring their type.  Excellent catch.  (If you are interested to contribute, that would be a nice self contained pull request.. :~) \nThanks for the report!\n. FYI, the problem with c.Redirect(Controller.Action) is new -- it is tracked with issue #103 .  I hope to resolve it today. \n. In the default header.html, it includes this in the header:\n<link rel=\"shortcut icon\" type=\"image/png\" href=\"/public/images/favicon.png\">\nDoes that meet the concern?  Why would having a special route be preferable?\n. I don't see the value in adding to the default routes.  Feel free to reopen if you disagree (and can provide a reason). \n. I pushed a fix to the 500 in 621abae9184262fcee7ddc570bcdcf5545cced0b \nThe failure to resolve the redirect means that results.go - getRedirectUrl() is not successfully discovering (what I assume is) \"Hotels.Index\".  Is that controller/action successfully registered in your app/tmp/main.go ?  What revision of Go are you on?  (Perhaps there was a behavior change to the reflect package in tip) \nThanks for the report (and your help)!\n. I think the cause is that it is necessary to have the module.static=github.com/robfig/revel/modules/static line in the config.  I pushed f9f01827b7387849876fb6e6277ddf3953120af4 to fix this for new apps, but you will have to change any existing app.conf : \n```\n...\nmodule.static=github.com/robfig/revel/modules/static\n[dev]\n..\n[prod]\n...\n``\n. (Sorry, haven't had a chance to try this out yet.. hope to get to it soon)\n. I'm not sure how the first request could be treated differently from subsequent requests..  Do you mind pasting the result ofgo env`, and a console session that demonstrates the issue? \nI tried overriding the GOPATH like this:\n$ echo $GOPATH\n/Users/robfig/gocode\n$ GOPATH=~/gocode2:~/gocode bin/revel run myapp prod\n..\nand it worked as expected..\n. Feel free to re-open if you still would like assistance.\n. Sorry for the delay -- it was not disapproval, just travel :~)\nI could not think of a better implementation strategy than the one you used.  I had a few small comments, but nothing major.  The only thing is that this func is extremely unit testable -- do you mind adding one? \nThanks for contributing!!!\n. > Not Sure if that's any good because the sooner it leaves the multiple switch statement the faster the code executes, or am i missing anything obvious?\nI guess it could be tested with a benchmark pretty easily (if you had a test case), but it is hard to imagine it making much difference (especially given the other overheads in web serving).  \nTo be clear, this is the proposal: \ngo\nswitch x.(type) {\n  case int: \n    switch y.(type) { \n      case int: \n        return x == y\n      default:\n        return false\n    }\n}\nseems equivalent to this:\ngo\nswitch x.(type) {\n  case int: \n    switch y.(type) { \n      case int: \n        return x == y\n    }\n}\nreturn false\n\nI will, i am not familiar with the way testing works in revel, but i will read up, i already have some tests but they are rather abusing a template and some data model and manually looking at results instead of automated tests.\n\nWoops, I  just meant a regular go test.  For example, after extracting it to a named func, you could add a func to templates_test.go like TestEq(t *testing.T) { ... }  You can run those tests with go test github.com/robfig/revel (or just go test if you are in that directory).\nThere is more information on writing tests here:\nhttp://golang.org/pkg/testing/\nhttp://golang.org/cmd/go/#hdr-Test_packages\n. I would like to provide this functionality as Play! does -- you can invoke another action and it issues a (type-safe!) redirect.  However, I found it quite difficult to do so far.  \nOne alternative to the format string is to use \ngo\nurl := revel.MainRouter.Reverse(\"Controller.Action\", map[string]string{ \n  \"arg1\": \"value1\" \n}).Url\nbut there you have to hard code the action name.  There must be a good way to improve this situation...\n. Please check out the new(ish) reverse routing package.  That makes generating URLs pretty great. \nhttp://robfig.github.io/revel/manual/routing.html\n. That's a good question, one that applies pretty broadly to Go development practices.  I thought about this issue a little, since there are many parts of Revel in the same package, which use different constants. There is no equivalent to Java's static class constants, and it feels too heavy to create a package for just a single model.  \nWhat I have been doing is just letting them stay in the same namespace -- in the example you gave, if there are multiple models with a Status column, then it would actually be a nice thing if they had the same constant values.  I believe in practice there won't usually be any conflict where you want to use the same name to identify a different constant, and you may even want to treat it as a flag that you may want to choose a different name for the constant to avoid confusion.  \nIn case that does end up happening (it has not yet for me), I would rename the constant, as you suggested to UserStatusCompleted.\nHope this helps!\n. OpenShift support would be wonderful to have.  It looks like a great platform. \nThe steps to solve this appear to be:\n- Create an OpenShift account & app, with the DIY cartridge\n- Create a Revel app, or copy one of the samples to a new location.  (It can't be done in place because it needs its own git repo)\n- Implement the open shift hooks necessary to run the application, at least .openshift/action_hooks/start and .openshift/action_hooks/stop, perhaps others.  Test by pushing updates to the OpenShift git repo\n- Upon success, write an article or add it as a section to the deployment page in the manual.\n. Thanks for taking this on!\nYou can pass it via an environment variable in app.conf, using the syntax ${ENV_VAR} \n. That seems like a good idea!\nI do not have any plans for it yet\n. You would want to look in revel/params.go:ParseParams \nThat function handles form-urlencoded and multipart/form-data... it could also be extended to handle json. It would need to unmarshal the json, probably into a map[string]interface{}, so that it could subsequently iterate through the map and add each param to the url.Values, to feed it into the flow that way.  If that doesn't work, then it would need to replace the url.Values variable with one that can handle both form parameters and json parameters.  Or maybe it makes sense to extract an interface for Params and then have implementations for forms, multipart forms, and json.  (But I'm not sure about that) \nWould the behavior be that passing a json argument of \nhttp://host/controller/action?{\"arg1\": \"value1\", \"arg2\", 5}`\ninvokes\nfunc (c App) Action(arg1 string, arg2 int) revel.Result\n? \n. Cool!  Great work!  \nI think it's ok to ignore the case of the array -- in that case, the developer can still decode it from c.Request.Body.  The only alternatives I can think of:\n- Binding them to indices (as you said)\n- Binding it to a special parameter name like \"body\"\nThe latter one may not be too weird if the behavior was consistent between maps and arrays.  For example, you've implemented : \ngo\nfunc (c App) Action(arg1 string, arg2 int) revel.Result\nbut it could also work for arrays if the usual pattern was \n``` go\ntype thing struct { arg1 string, arg2 int }\nfunc (c App) Action(body thing) revel.Result\n```\nHowever.. having to define a type for every json request seems unnecessarily annoying, so I think the way you did it is good. \nThe last thing to figure out is how to get the JsonMessages to get converted into Go types to be passed in.  I'm afraid it isn't as easy as I hoped, since the JSON format is not the same as the form-encoded format, so the existing Binder won't be able to do it.  I'm not sure the best way to accomplish that off the top of my head.. maybe a separate member for json data in Params will be necessary, so you can keep the map[string]*json.RawMessage around and then unmarshal the values once you know the target types.\n. Yea, the benefit of passing it as an argument is that we know what type to Unmarshal to..\n. This ticket was about adding support for that kind of thing to the framework, but you can easily work around that lack of support right now.  You can do like this:\n``` go\ntype PostPayload struct {\n    Text    string\n    ObjectId int\n}\nfunc (c MyController) Action() revel.Result {\n    var payload PostPayload\n    err := json.Unmarshal([]byte(c.Request.Body), &payload)\n        ...\n}\n```\nDoes that work for your case?\n. Nope.  There was no resolution on the desired design, and the pull request was abandoned\n. LGTM, thanks!\n. I think we're getting close.. thank you for your hard work!!\n. This looks great, I think we are almost there!\n. Merged, thanks!\n. Awesome, thanks for the docs!\n. Please add the detail about the expiration being measured from the last request, rather than the start of the session (also, looks like you may need to merge upstream)\n. Do you mind adding a note about how the expiration is from the time of the last request? \n. Server-side syntax highlighting would be great.  How do you envision implementing it?   It is definitely not such a core functionality that it should go in the revel package, but having it included as an optional plugin or something would be great.  I'm not sure how that would work off the top of my head though..\nAt one point I thought being able to pass blocks of a template to a helper would be helpful -- I even filed a feature request (that is not making much progress):\nhttp://code.google.com/p/go/issues/detail?id=4727&q=robfig&colspec=ID%20Status%20Stars%20Priority%20Owner%20Reporter%20Summary\n. This seems like a pretty great highlighting routine.  It is too bad that the code needs to be defined in a variable for it to work, though. \n. Yea, that seems to work really well!\n. I realize you've changed track now, but I just want to make one note: \n\nah and on your proposed region argument (for go template engine) couldn't we do that by somehow having a postprocess hook and a selector engine?\n\nI think that's a great way to do it -- I would love if there was a straightforward way to add a step like this to a controller.  Right now I can't think how it could be implemented.. maybe a Result implementation that wraps an existing Result, has it write to a fake http.Response, and then parses that buffer, modifies it, and writes it to the real http.Response.  That is pretty roundabout.  I wonder what design change could allow this...\n\ni think a highlighter in go is not worth it, but a less.js parser sure is.\n\nI agree that less.js or coffeescript would be valuable.  In case you haven't seen the suggested projects list, check it out: https://github.com/robfig/revel/blob/master/CONTRIBUTING.md\n\"otto\" is a good find -- are you saying that you tried to use it to compile less.js and you found that less.js uses Regexes that aren't supported by the regexp package?  That's a bummer.  I wonder if coffeescript would work.. As you say, there doesn't seem to be an easy way to work around that. \nI guess a PCRE implementation for Go might pop up at some point.. I wonder how difficult it would be to port.  (I haven't seen how big the implementation is)\n. Good discussion.  I'm not sure if there is anything else going on here, so closing for now. \n(Cleaning up old issues)\n. The best practice for this is to actually use nginx as a frontend to do the gzip transparently.  However, I would be in favor of providing something that does that in Revel, if anyone wants to make a pull request.\n. LGTM \n. If the request has the \"Accepts: application/json\" header set, then .json templates will be used by default.  You can tell the format of a request inside an action by checking c.Request.Format == \"json\".  For a json request, you should be able to return c.NotFound(\"(Message)\") and have it render errors/404.json template as the response.\n(And I see you opened another issue for your second item.)\n. Can you provide (more of) an example of what you're thinking of? \n. Thanks for the report.  This is just over-zealous logging by the i18n module -- there is nothing wrong going on.  I've been meaning to make it less aggressive. \n. Fixed by 8f6461bbc301a3eb51975e7f6374b87dd406fcdc\n. I have been meaning to upgrade our Go Templates to use Pongo instead, which does support that stuff, without having to resort to any tricks.\n. Yea, right now it uses vanilla Go Templates.  It is not presently something that the application can do independently\n. Sorry for the confusion\nNo, it is not implemented yet.  In the future, I would like to add it.\n. I believe it is being worked on as part of #99 \n. @pedromorgan should give github.com/robfig/soy a shot :)\n. Ah, I forgot about that. \nWe just solved this same problem with the template \"eq\" function -- what do you think about making that exported and using it for AssertEqual ?\n. Ah, I wasn't specific enough.  I meant the function that implements the TemplateFunc \"eq\", which is actually called tplEq right now.  Sorry for the red herring\n. Cool, this seems reasonable.  I wish I could think of a better name than Equal, to make what's going on more clear, but I think this is probably good enough.  (And something more complicated like EqualIgnoringSomeTypeDifferences wouldn't be good either :)\nAside from the one style thing (which pre-dated your change), I think this is good to go.\n. Thanks for the contribution!\n. I'm not too familiar with it -- can you explain what that would accomplish, or the use case you have that is not met by router.go? \n. Why is that better? \n. Thanks for the compliments!\nOn my laptop, I get 8592 ns/op for Revel's router.go benchmark.  (You can run it with go test -bench=\".*Router\")  I downloaded and ran his, and I get either 512 ns/op or 330 ns/op (depending on the compression setting).  We don't use the same routes, but it looks comparable (we both have routes that extract parameters, etc) -- the only difference is that in his example there are 77, and in router_test there are only 8 or so, which would indeed make router.go look better. \nIn terms of features, his can extract parameters -- the only thing it can't do is regular expressions (both for the route and for the parameter).  I think that regexes for parameters are pretty common, but we could apply those constraints after the routing.  Regexes on the route itself may be less common -- in my experience, I mostly use the /? pattern to support optional trailing slashes.  So.. maybe a trie-based implementation would be a good move. \nOne question I would want to answer first is how big the routing time is compared to the other overheads.  10us doesn't seem like very much to me -- except for \"hello world\" style benchmarks, a web request that responds in less than 100ms is considered fast, but even if our target latency is 10ms, that still puts routing at 0.1% of the total time.  So, I'm not sure how much we gain by optimizing. \nAll that being said, I still prefer being fast over slow, so I would be in favor of exploring this!  I would want to hear from revel-framework if anyone uses the regexes applied to routes (and for what purpose) before throwing that feature out in favor of performance.\nAlso, I would like to get to a place where we profile some common workloads and know how long the various components take -- if the action lookup / invocation takes 100us, we should work on that instead!  I had made server_test to do that, but it appears to no longer work -- it runs the booking sample app and makes a bunch of requests for hotel details, ignoring the network.  A better strategy would be to actually run it out of process and test the full stack.. \nWish I had more time to work on this! \n. Luke, I'm afraid this is meant to be a full-stack framework -- if you want just a routing component, I suggest you use Gorilla's mux.\n. I suspect the problem is that your json request does not specify \"ContentType: application/json\".  \nIf your ContentType is not specified (or if it is xxx-form-urlencoded as with many libraries by default), then Revel will read the Body to parse the parameters out. \nIf that does not solve your problem, please paste a dump of the HTTP request you are making. \n\nYou can verify that it does work by modifying the booking sample app to add this line (in app.go): \ngo\nfunc (c Application) Index() revel.Result {\n    b, err := ioutil.ReadAll(c.Request.Body)\n    revel.INFO.Println(string(b), err)\nand then loading localhost:9000 and making this request in your javascript console: \n$.ajax({\n  type:\"POST\", \n  url:\"/Application/Index\", \n  data:JSON.stringify({ name: \"John\", time: \"2pm\" }), \n  contentType:\"application/json\"\n} )\nFor me, this prints the JSON post data. \n. To get json back, you should specify the \"Accept: application/json\" header -- modifying my example above...\n$.ajax({\n  type:\"POST\", \n  url:\"/Application/Index\", \n  data:JSON.stringify({ name: \"John\", time: \"2pm\" }), \n  contentType:\"application/json\",\n  dataType:\"json\"\n} )\nYou can use OnAppStart to run a func on init, or you can put it in a Plugin if that makes more sense: \ngo\nfunc init() {\n  revel.OnAppStart(func() {\n    // ... runs once, synchronously, on app startup\n  })\n}\n. Thanks for the contribution!  Just had one small comment\n. LGTM, thanks!\n. Cool, thanks!  Just a couple comments\n. Something must be swallowing these notifications, thanks!\n. I'm not sure I understand the value of having duplicate test/dev modes -- if the developer does make that distinction, it is pretty easy to configure in their own app.  (And I think the dev/prod distinction is much more universal than a dev/test distinction) \n. AH, I didn't realize it was all about the testrunner.  You can actually do this right now: \nrevel test path/to/app test\nI think your suggestion makes sense, but I don't really want to have duplicate modes (it's easy enough for the developer to configure how they want) and it is also easy enough to run the tests in any desired mode.  I think that for now I'd like to leave it as-is.  If you have trouble with the testrunner running it in test mode, please re-open.\nThanks for your patience (and your contributions!), and I apologize for letting this drop! \n. The web test runner should use whatever mode you run the app in.  For example, given the app.conf from your pull request, you should be able to do this: \n$ revel run path/to/app test\n$ open http://localhost:9000/@tests\nDoes that work for you?\n. I see -- so you want only the test runner to be in \"test\" mode, but the rest of the app to be in \"dev\" mode.  I don't think it is possible to vary the run mode by request (or by section of the app).  The harness would have to be smart about restarting the app in a different mode when you access the /@tests endpoint, which seems like quite a specialized change..  \nI don't see much opportunity for making this use case easier with a code change -- feel free to point one out if I'm missing it, but your suggest pull request would not have done it either.  Instead, perhaps there is a workflow that would work better -- maybe using the command line test runner in a separate terminal window would work, without restarting your dev instance? \n. That makes sense to me.  Certainly the primary use case for the revel test command is integration with automated test runners, but including the particular line / assert that failed seems like it would not hurt.\nMaybe output like this? \n```\n1 test suite to run.\nAppTest                 FAILED  !     0s\nFailures:\nAppTest.TestThatIndexPageWorks\n    Status: (expected) 200 != 404 (actual)\n    In /tests/apptest.go (around line 15) : t.AssertOk()\nSome tests failed.  See file:///Users/robfig/gocode/src/benchmark/test-results for results.\n```\n. I believe that won't work, since in development both will be watching your code and attempt to re-build the application at the same time.  Who knows though, perhaps you will get lucky :)\n. The code looks good -- however, I realize that my example was poor.  I think collecting the suite PASSED/FAILED at the top and then listing failures for all suites at the end would be ideal, while the current code would interleave them.  Does that seem like a reasonable change?\n. LGTM , just 2 small comments. \n. Hm, weird.  Anyway, thanks! \n. Hi, thanks for the suggestion! \nIt seems that Revel could more gracefully handle this use case if the default behavior for Render is to fall back to RenderJson/RenderXml if a single argument is passed to it (and there is no such template).  What do you think of that? \nSeparately, I agree that the response code should be 404 if the template is not found, not 500. \n. If you don't mind, please give the v1 branch a shot and let me know any feedback.  (Presently it doesn't do anything about returning 406.. I wasn't sure how to know if the action didn't want to support a content type or if it was just being developed)\n. Good point, updated.  \nI amended the commit, so you will have to:\ngit fetch\ngit reset --hard origin/v1\n(I realized I had forgotten to clean up some of the delimiter handling stuff and comments, and had amended before you wrote back -- didn't expect anyone to pull it so quickly!)\n. Good point.. It seems a little bit simpler if it can be only one of four types, and the increase in utility from being able to handle Request.Format = gsp  (from gsp=application/x-gsp) seems pretty small.  I guess there is a case for that for some things, like Format = PDF. \nOne complication is that many extensions may be matched to the same mime type.  E.g. \"htx=text/html\", so we would need a whitelist\nDoesn't seem worth the effort overall. \n. In other words, if the requested URL looks like a filename, set its extension to be the Format? That's not a bad idea.. \nI guess given the format, it could get the default content type, and use that format when looking for the default template.  It could use text/template as the default engine (or developers could register their own). \nI guess an extension would take precedence over an Accept header?  e.g. GET  /script.js, Accept: text/html would set Format = js.\nSeems general and useful.\n. Being able to statically specify the content types handled for each action seems like overkill, and no other framework does that.  It's very hard to imagine any developer taking the effort to do that explicitly.  Maybe it could be inferred from something, but I'm having trouble seeing how that would work either. \nI do agree we should respect the Accept headers, but there is a loophole -- web browsers send  a header like this:\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nFrom what I understand, when viewing /script.js, a Format of JS is acceptable because of that last /.  So, I think in practice, the Accept header will not limit what content type can be returned.\n. This should do it:\ngo\nfunc (c AppController) Action() revel.Result {\n  println(\"Request from \" + c.Request.RemoteAddr)\n  ...\n}\n(the Request object embeds *http.Request) \n. Ah, I think the usual header name for that is X-Forwarded-For, right? \nI would like to make Revel put the correct address in Request.RemoteAddr...  Care to submit a pull request? :~) \n. Oh, you can access the session like this:\ngo\nfunc (c AppController) Action() revel.Result {\n  println(\"Session ID \" + c.Session.Id() + \", username: \" + c.Session[\"username\"])\n  c.Session[\"value\"] = \"bar\"\n}\nIt is automatically saved and restored to a signed cookie.\n. Can you show the action that you are invoking, so that I can reproduce?  \nWhen I edit the booking sample app to use RenderTemplate, I certainly do get a Status 200 back:\ngo\nfunc (c Application) Index() revel.Result {\n    ...\n    return c.RenderTemplate(\"Application/Index.html\") \n}\n. Can you please print the output that you get from executing curl -v localhost:9000 ? \n. Closing due to inactivity\n. Sorry, just been busy with the day job.  This makes complete sense and I hope to have a solution for you before long.  In particular, I would like to make it so that the cookies are only set if they have changed and not otherwise -- that way you would not have to enable or disable it explicitly, simply not using it would have that effect. \nI am not yet sure about the implementation -- it is nice that Session is a map, but that means I can not tell if any of the key/values are changed (other than more or fewer entries in the map).  I am trying to decide between:\n- calculating a hash of the map entries before and after the action\n- making session into a struct with Set() and Get() methods that can record when a value is added/updated.\nAny thoughts? \n. Although, to solve your immediate problem, the only thing necessary would be to record the size of the session before the request and after the request -- if they are both 0, then we can skip writing the cookie.\nIf you would like to implement that, I would be happy to merge it in.\n. Working on this.. \n. With the new filter design, it is very easy to remove the Session middleware from your application (or even a particular controller / action).   That sounds like it would solve this issue. \n(I would still like to do the hashing thing, but there are bigger fish to fry right now)\n. Hi!\nThere is this google group: \nhttps://groups.google.com/forum/#!forum/revel-framework\nThe website should have documentation (the tutorial, manual, and samples should hopefully be able to get you started).\nhttp://robfig.github.io/revel\nIf you can't figure out how to do something or have ideas for improving the friendliness of the web site, please share!  (I know it is not great, but I'm interested to hear where you get stuck).\nThanks for trying it out!\n-Rob\n. Thanks for reporting this. \n. There are a couple suggestions for how to rewrite the import paths here:\nhttps://groups.google.com/forum/#!topic/golang-nuts/ONs1vjIm9kg\nYou will have to run that on all packages under revel/\nAdditionally, change revel.REVEL_IMPORT_PATH variable in revel.go \nThat should be it.  If you can post your steps, I would be happy to post it in the CONTRIBUTING.md article. \n. This is the process I've been using:\nhttps://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-to-fork-without-breaking-go-import-paths\n. Thanks!\n. We should probably fix this, as it is useful for JSON APIs..\n. Hm.  Making it a struct would certainly work for both, but it does seem like there should be a way to marshal that into XML.  Perhaps ask on the go-nuts google group?\nhttps://groups.google.com/forum/?fromgroups#!forum/golang-nuts\n. Seems like Struct is probably your only option -- I guess that XML does not map as easily to/from maps.\nhttps://groups.google.com/forum/?fromgroups=#!topic/golang-nuts/Y6KitymP7Dg\nIf you have any ideas that Revel could implement to make this easier, I am interested to know! \nThanks for the questions!\n. I started a thread on go-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/GjngdEKsUXA\nDoesn't seem like much enthusiasm for the change, though.. \nUnfortunately parsePostForm is not exported so the only way to implement this would be to duplicate the code and not use Request.ParseForm at all. \n. Thanks for the note.  Do you have any suggestions for how Revel could benefit from it?  I'm not sure I see...\n. I'm not knowledgable about Scala, so that article made my eyes glaze over :)  It seems that an Actor is a goroutine in an endless selecting for loop that handles various inputs on its channels.  Perhaps the difference is that Actors provide a little more structure, to avoid the developer having to write the goroutine select loop.\nI do think the actor model is a good one -- is there something Revel could do to support it better?  It seems tangential to the request serving structure, so a developer can already use any actor implementation they choose.\n. It still seems to me like this structure is a level above what Revel provides.  Go allows concurrent programming, and I don't think Revel gets in the way of that, and I also don't think anything that Revel currently does would be better done more concurrently.  I certainly agree that providing a structure of actors and message passing on top of your HTTP handlers would be a nice feature, but at this stage of development I am much more focused on getting the basics right (for example, the middleware interface).  This seems more like a nice-to-have.  \nI also may not be understanding you -- a concrete example of a change to Revel or a feature that could be added might help me grok what you have in mind.\nClosing this for now since I don't see anything actionable that can be done here.  If you are interested in framework design  discussions, we are having many of those over on the google group.  I encourage you to join in!\nhttps://groups.google.com/forum/#!forum/revel-framework\n(For example, Filters, pluggable routers, template loaders, etc)\n. Thanks, this looks good.  Just had one comment \n. LGTM , thanks\n. That is correct.  I suppose an article on that would be helpful.. \n. FYI, here is the current plan.  Comments welcome:\nhttps://groups.google.com/forum/#!topic/revel-framework/BXwnW6TgnpM\n. I am unable to reproduce -- it works fine for me in latest stable Chrome.  \nDo you mind providing a dump of the exact HTTP request that your chrome is sending?  (Either using Fiddler/Charles or just pasting the contents of the chrome network monitor Headers panel)\n. Closing due to inactivity\n. No plans -- I believe that nginx can be used to talk SPDY to clients while talking HTTP to servers, so that solution seems like it could work for now. \n. Both beego and Revel are built on the standard library's HTTP server.  Go uses a goroutine-per-request model, which does use async I/O under the covers.  However, it manages your goroutine state for you, so there is no need to suffer callback spaghetti to get the benefits.  Also, there is ample evidence that it is as performant as Node.js for Hello World style web benchmarks, so I think that the \"events are the only way to scale\" bandwagon is losing steam.\nDiscussion:\nhttp://stackoverflow.com/questions/6328679/in-golang-does-it-make-sense-to-write-non-blocking-code\nAcademic food for thought on events:\nhttp://static.usenix.org/events/hotos03/tech/full_papers/vonbehren/vonbehren_html/\nBenchmarks:\nhttp://www.techempower.com/benchmarks/#section=data-r4&f=5mbk-0\n. Revel does not provide anything like that -- it would be possible for the developer to implement such a scheme  within the framework though.  Any type that implements the revel.Result interface may be returned to the framework to be applied to the response.  I think it would be challenging -- right now there is no way to know if the data injected into the template varies per user or not, and there is no easy way in Go Templates to cache partial templates. \nHope this helps, and of course I'm open to any suggestions for improving Revel!\n. Thanks for the bug report!\n. Hi,\nYou can use the db module, just like the booking sample app does.  Just change these settings to use MySQL:\ndb.import - what MySQL library you want to use\ndb.driver = \"mysql\"  (passed to sql.Open) \ndb.spec - the connection string\nSee how it works in github.com/robfig/revel/samples/booking/...\nHope this helps,\nRob\n. Looking at the README in that project, it shows this line:\ngo\n// Create a connection handler\ndb, err := sql.Open(\"mymysql\", \"test/testuser/TestPasswd9\")\nthat configuration would correspond to:\ndb.import = github.com/ziutek/mymysql/godrv\ndb.driver = mymysql\ndb.spec = test/testuser/TestPasswd9\nThe db spec should be the connection string for accessing your mysql server.  It generally includes the hostname or IP address, the user name, the password, and the database.  A more realistic example from the benchmark app is: \ndb.driver = mysql\ndb.import = github.com/go-sql-driver/mysql\ndb.spec = benchmarkdbuser:benchmarkdbpass@tcp(localhost:3306)/hello_world?charset=utf8\nI believe the connection could possibly vary by driver, but for this different driver at least it is \nuser:password@address/database?charset=CHARSET\n. Thanks!\n. Hey Jeff,\nI think that is actually an unrelated issue -- that unhelpful error page appears when mode.dev = false, as that controls revel.DevMode, which is the switch used in revel/templates/errors/500.html to decide whether or not to show the stack trace.  Perhaps you have an old app.conf that lacks that, and it probably defaults to false.  There should be no issue showing you build error in dependencies right now, it just won't re-compile if the app is running and there was no change to app code.\nOf course, in any case it should be logging it to ERROR, although that may be going to a file instead of the console.  (I am personally unhappy with the current logging situation and would love to replace it with something better.)\nRE GOPATH-watching -- The other thing I would be concerned about when watching the whole GOPATH is that editing unrelated files would make Revel recompile the app needlessly.  \nI do see the argument that all of these reasons not to do it only apply after they have a larger codebase, and a sophisticated user could easily flip that switch to off if it was causing them problems.  Perhaps this is really helpful for the new users, which we are trying to woo.  I think I'm starting to come around...\n. No \"go clean\" is necessary.  Whenever I'm working on a dependency, I usually just switch back to an app file and re-save it to trigger a recompile.\n. I suppose this doesn't hurt anything, and could be helpful.  I'll try developing with it on and see how it goes. \n. This doesn't work on OSX -- even filtering down the directories further (ignoring any starting with dot, skipping the standard library), I run out of file descriptors less than halfway through my GOPATH.  ulimit -a tells me I have a limit of 4864 open files.\nIt seems like a watch implementation based on FSEvents instead of kqueue could handle this, though.. \n. I think the goal of rebuilding when any dependencies change (not just within the app) is a good one.  However, this implementation:\n- Works only for linux\n- Watches the whole world, rather than figuring out the app's dependencies and watching only those.\nwhich is why I was hoping we could develop a better solution.  I suppose something is better than nothing though.\n. Are you passing markType in the request body?  I believe that DELETE is not supposed to have a request body, so we do not parse it.  (We use ParseForm)\n. Thank you!\n. Agreed.  Right now each request is independently made -- we should move to a model where the Test has a http.Client that has a cookie jar and can optionally follow redirects.  Then everything you describe would be very easy. \nHappy to merge a pull request, or I can work on this after I finish up #151 \nThanks for the feedback!\n. Whoops, too early in the morning.  There is already a http.Client that you can configure on the TestSuite -- I believe the only thing necessary is to initialize it with a CookieJar in NewTestSuite.  Regarding the redirects, the documentation on http.Client says that it automatically follows redirects, unless you set the CheckRedirect func to return an error in some case. \n. Yes, I would suggest you develop on the filters branch, where this ability is provided.  And please let me know how it works for you!\nIt will be merged into master soon. \n. Thanks! \n. Hey, thanks for the pull request!\nTaking a step back from this approach, it seems to me that what's standing in the way of the gzip filter right now is that Results are not easily composable -- if they were, you could easily implement this as a Filter.  (You could actually do it as it exists today, but it would be awkward since you would have to create a fake *Request.) \nWhat are your thoughts if the Result was more like a simple (Status, Headers, io.Reader) tuple (a la Rack)?  The Reader would allow you to pretty easily wrap response streams with something like gzip.  Since many results are not streamed, it could also be cast to a bytes.Buffer to access the []byte directly (if it really is a Buffer), since that is frequently easier for applications. \nWould that handle the cases you're thinking of?\n. I was going to look into whether this could be done as configuration on the revel.Server, or via some more general mechanism.  A related feature that would be nice is being able to mount http.Handlers at a specific URL (since there are open source projects that expose their functionality as that).  Configuration of server handlers would ideally handle both cases without having different mechanisms for both.\n. Oh, and another option that came to mind was simply having the handler as a func variable.  Then, in your init(), you could re-set the variable to be wrapped, or additionally override it entirely.  That would not require a special BuildHandler function, afaict\n. Regarding your comments on the Rack API -- do you have any references where I could learn more about their discussion on changing the API?  I would be interested to hear what they see as the pros/cons.  For me, the interface looks very simple and would fit the way Revel is put together.  The result does not have to be a simple byte array, it could be a reader in Rack, and we would want to maintain that in Revel certainly.  (so it can handle streaming without a problem)\n. Thanks for the link!\nActually, I think this is already possible? \ngo\nfunc init() {\n  revel.OnAppStart(func() {\n    revel.Server.Handler = .. .\n  }\n}\nI think that may be preferable to avoid confusion -- if anyone sets revel.Handler in OnAppStart(), it will have no effect since the reference was already copied into the Server. \nDoes that work ok for you? \n. I wasn't sure it would work myself, but Go seems pretty intent that a receiver is exactly the same as any other parameter, so it seemed like a good bet :~) \nThanks!\n. I think the issue is that it is using 'go get -d' which does not build and install the tool. \nI think if you re-order the go gets in the travis.yml to have this one first, and get rid of the -d, things will be better: \ngo get -v github.com/robfig/revel/revel\n. Thanks!\n. Thanks!\n. I don't really agree with adding a Header variable to Response.  Perhaps better would be to simply embed the ResponseWriter in the Response. \n. Not having an up-to-date revel command line tool would cause this behavior.  Please try the following: \n$ rm `which revel`  # Remove the tool you're using now.\n$ revel help  # Returns an error, because revel command line tool is not there.\n$ go get -u github.com/robfig/revel/revel  # Fetches the latest code and builds a new tool.\n$ revel run github.com/robfig/revel/samples/chat\nPlease let me know if that does not work.\n. Looks good, just the one comment.\n. Thanks!\n. I just merged in a new router to master (65d5a0577a8adf4ecd4603ee26ddce9253709a52) that uses this new syntax.  I'm not sure how you could end up with an updated version of the routes but not an updated version of the router... \nPlease try updating to HEAD and rebuilding. \n$ go get -u github.com/robfig/revel/revel\n$ revel run github.com/robfig/revel/samples/chat\n. I am confident that the commands I pasted will solve your problem, without this changeset.  If not, please re-open.\n. I think this case can work out without too much trouble by making the lookup mechanism case independent, storing the correctly-capitalized name in the ControllerType / MethodType, and using that instead of the router output.  I think this can all be done with the right change to those types in Controller and in Controller.SetAction.  \nA side effect of this change would/should be to make the Controller.Action / .Name / .MethodName right as well, since those are also probably incorrectly capitalized. \nThanks for the report.\n. I believe your PR fixed this issue.  Please re-open if not.\n. Looks like the travis build failed:\n./controller.go:225: c.Type.Name undefined (type *ControllerType has no field or method Name)\nI think you probably want c.Type.Type.Name  (ControllerType is a revel type, which has reflect.Type as a member).  It's a little bit awkward unfortunately\n. Thanks! \n(Is there anything we should do to handle 404s, or was that just a false start?)\n. I think it would be preferable to skip any routes that don't have either a ControllerName or a MethodName (e.g. they are empty).  Right now that is just 404s, but it's not hard to imagine adding other special actions like that\n. Thanks!\n. Thanks!\n. Hm, I think this needs to use reflect in order to handle all the cases...  for example, a slice of structs should probably also be covered by this.   Do you mind taking that implementation route instead? \n. Almost perfect -- do you mind removing the .([]interface) case as part of this, since it is now redundant?  \nThank you for cleaning this up!\n. Perfect, thank you!\n. The refactoring to SetStatus and SetContentType still looks broken to me.  Did you successfully push your latest stuff?  If so, what are you trying to achieve with the refactoring?  Maybe we can achieve it in a different way.  \nNote that the purpose of WriteHeader is not to allow the developer to set the status code and content type.  The developer does that by assigning to c.Response.Status and c.Response.ContentType.  This func is so that result implementations can specify a default status/content-type.  That functionality is combined with writing the header, because that is the point at which it must be evaluated.  \nI would suggest leaving it as-is unless you see a simplification that meets that same need.\n. You are correct, it is not module-friendly! \n. When you run revel, it generates that package for you, based on your routes file. \nPlease run this and paste the output: \ncd $GOPATH\ngo get -u github.com/robfig/revel/revel\nbin/revel run github.com/robfig/revel/samples/chat\nI believe that should work. \n. The commands you ran rebuilt your command line tool -- I suspect it was old / out of date. \n. I did not document it well, but I was thinking the magic Render may only work when returned directly from the action.  If you return from another func, then it is not obvious what template it renders -- should it be App/Index.html or App/process.html?  What if process is an exported action?  Also, it will still not catch all invocations of Render -- for example, here are two more examples that wouldn't work even after making this change: \n``` go\nfunc (c App) process() revel.Result {\n  result := c.Render(currentAvatar)\n  ..\n  return result\n}\nfunc appHelper() revel.Result {\n  return c.Render(currentAvatar) \n} \n```\nRather than try to cover all of the cases, I think just covering the simple one is best, and other usages can set c.RenderArgs directly and call c.RenderTemplate(). \n(Anecdotally, I have found it convenient to return directly from the action most of the time, so this sort of requirement hasn't been difficult for me in the past).\nI do agree that documentation needs to be improved though! \n. I've been wanting to provide this feature -- unfortunately the Flag package does not make it easy to accept arbitrary flags and add them to Config.  \nFor this particular case, I think you can do it yourself with this snippet: \n``` go\nvar cacheHosts = flag.String(\"memcached\", \"\", \"Heroku memcached hosts (CSV)\")\nfunc init() {\n  revel.OnAppStart(func() {\n    flag.Parse()\n    revel.Config.SetOption(\"cache.hosts\", *cacheHosts)\n  })\n}\n```\nSorry about that!\n. Actually, it is possible that snippet won't work, if the cache OnAppStart runs before yours. \nYou may have to do this instead (mostly copied from cache/init.go:OnAppStart):\n``` go\nvar cacheHosts = flag.String(\"memcached\", \"\", \"Heroku memcached hosts (CSV)\")\nfunc init() {\n  revel.OnAppStart(func() {\n    flag.Parse()\n    defaultExpiration := time.Hour  // or read from Config \"cache.expires\" \n    cache.Instance = NewMemcachedCache(strings.Split(*cacheHosts, \",\"), defaultExpiration)\n  })\n}\n```\nBeing able to specify dependencies between initializations is another TODO item.  So many things to do, so little time.. \n. FYI, now you can do this with an environment variable, using the syntax ${ENV_VAR} in app.conf\n. I agree.  It should do that. \nI wonder if there's an elegant way to do it without adding \"if\" statements to every result type.. \n. Smart.\nIt looks like HTTP requires a Content-Length response from HEAD requests, so we would need to generate the template anyway, even though we don't send it.\n. It appears that you have built Revel with a Go distribution from appengine, but Revel is attempting to build apps with the one you installed from source in $GOROOT. \nI would suggest rebuilding revel with your $GOROOT go:\ngo build -a github.com/robfig/revel/revel\ngo get github.com/robfig/revel/revel\n. (Closing due to inactivity)\n. For github, a pull request is basically \"merge the head of branch A into this other branch\".  It is not related to the particular commits you have. If you push more commits to a branch that has an open pull request, they will automatically be added to the pull request. \nThe typical flow is: \n- Open a pull request\n- Respond to comments by pushing another commit \n- Repeat\n- Merge\n(as opposed to opening a new pull request for every round of review) \n. I hadn't realized about the name collision before, thanks for bringing that up.  \nHRM, it seems like a very confusing API to have Response implement methods WriteHeader and WriteStatusHeader.  I think there must be a better way to achieve the default status/content type by Result type. \nPlay! 2 makes it part of the return value, e.g.\njava\nreturn c.Ok(c.Render(...))\nbut that seems sort of heavy handed. \nRails seems to have it as a parameter to its render method, which is difficult to pull off here since we don't accept a random map of stuff. \nMaybe if the Results embedded a BaseResult with those two properties:\n``` go\ntype BaseResult struct {\n  Status int\n  ContentType string\n}\ntype RenderTemplateResult struct {\n  BaseResult\n  ..\n}\nfunc (c Controller) RenderTemplate(..) Result {\n  ...\n  return RenderTemplateResult{{200, \"text/html\"}, ...}\n}\n```\nThat may make a bit more sense than the current design of having every Result hardcode its default status code.  For example, a RenderTemplateResult could be used to show error pages, and it's really at the construction site that you know what the status code should be.  \nAlso, do you think there is any value in allowing callers to override the content type for a built-in Result?  I'm having trouble recalling why I thought that was necessary.. \nAny thoughts?\n. That's good information.  I haven't used Play 2.0 actually - do all the result types extend SimpleResult? I suppose Revel could support exactly that API.  It seems to be basically \"builder\" pattern vs simply setting properties.  The builder seems a little bit nice, but it really expands the API surface a lot.  I'm not sure if it's worth it.  e.g.\ngo\nc.Response.Status = http.StatusMovedPermanently\nc.Response.ContentType = \"text/plain\"\nreturn c.Render()\nvs\ngo\nreturn c.Render().\n  Status(http.StatusMovedPermanently).\n  ContentType(\"text/plain\")\nor\ngo\nreturn c.MovedPermanently(c.Render()).\n  ContentType(\"text/plain\")\nIt shouldn't be super common for developers to override the default status code or content type, so I'm not sure I see the necessity of specifying the status code 100% of the time.  (And if they did frequently want another status code, they could create a new factory method to construct it). \n\nSadly, I guess Play! doesn't provide any advice on how to deal with the default status code situation.  It sounds like Rails has the same issue where the results have a default status code / content type, but Rails doesn't allow the developer to override them without duplicating?  That seems poor. \n. Good insight.  I agree that in the normal case, the developer shouldn't need to touch the Response, which speaks to getting the headers into the Result. \nThat suggests that there should be no \"Response\" object, just the connections \"ResponseWriter\" and the action-returned \"Result\".  And then the question turns to the right way to construct Results -- I'm not actually sure the builder pattern on an embedded BaseResult works as sketched earlier -- the return value would be the embedded BaseResult, not the overall Result.  I wonder if this is how Play2 ended up with the wrapping approach :)\nI guess the 3rd code snippet I gave above could work.  However this turns out, I would like the wrapping to be optional since it is really not that common that you need a custom status code.  (Perhaps depending on the application, but for simple form-driven web applications it's never needed)\n. Thanks for the contribution!\n. Hm, creating and running new apps works for me right now (and it is part of the continuous build). I think my largest suspicion is that you recently updated Revel and haven't rebuilt the command line tool (since that would be one explanation for not being able to run a newly created app).  That error in particular doesn't ring any bells, but this is worth trying anyway: \n$ go get -u github.com/robfig/revel/revel\nThat should update to the latest, build, and install a new command line tool.  Then you can try creating / running a new app again.\nAnother thing you could try is cleaning (although I believe the build already does this):\n$ revel clean github.com/ElectricTomato/gopassed\nI would be happy to debug further if you push your latest code to github.  I see the revel branch there, but it does not appear to be a revel app. \n. I did get a Revel app to run on GAE a long time ago, but I had trouble figuring out how to bring up the local development environment of appengine services, without which it seemed sort of pointless. \nIf you are knowledgeable about appengine (especially the development environment), that would be an incredible contribution.  You can checkout the \"appengine\" branch. \n. Hi, \nI like the idea of the connections module, but I'm less sure about adding this method to Config.  It seems too specialized -- it only allows you to get values out as strings, and it returns untyped interface{}s, which does not seem ideal.  I can imagine a more general thing being something like a map[string]Config interface which basically allows you to traverse the keys and at each level extract typed values. \nI do agree that multi-level maps are a pain to extract with the current thing.  I wonder if we should just go whole hog and use TOML instead\nhttps://github.com/mojombo/toml\n(I guess TOML doesn't support variable substitution, though.)  \nOverall, I would be supportive of the connections module, but I suggest either moving the config parsing code into it (at least for now), or figuring out how to make it more general.  \nThanks for the PR!\n. It doesn't seem worth adding a ton of complexity here.  Configuration should be good enough (and I would probably argue that the current one is \"good enough\"), but this is not the main point of the project.  \nThe marginal benefit of allowing someone to use YAML or JSON over INI seems miniscule, especially compared to the probable increase in complexity and \"more than one way to do it\" that would result.\n. FYI, there are plenty of high value projects in the CONTRIBUTING.md that I would be a lot more excited about than adding to the configuration options :)  Or even the many bugs / small features marked \"Contributor Ready\" in the Issues\n. I'm not sure what you mean by \"model implementation\" ? \n. Thanks for the tip.  I will keep that in mind, although a more robust ORM integration is left until v2. \n. I agree, this is a good issue to solve.\nThe first error you point out is a Go templates thing -- to use a special character as an index you have to use the \"index\" function: {{index . \"slice[]\"}} \nFor, representing a multi-select value, I think your suggestion about serializing to CSV could be the best.  (e.g. using \"encoding/csv\"), and having something (a tag? a method on flash?) to deserialize it to []string\n. Within the {{with}} block, the dot \".\" is redefined to be the $field, while the {{msg}} helper needs to get the RenderArgs (the original value of \".\").\nThe simple solution is to put another \"with\" around your page, like this:\n{{with $dot := .}}\n{{with $field := field \"booking.CheckInDate\" .}}\n  <p class=\"{{$field.ErrorClass}}\">\n    <strong>{{msg $dot \"FIELD_NAME_IS_HERE\"}}:</strong>\n    ...\n  </p>\n{{end}}\n{{end}}\nBut that's pretty irritating.\nIt's possible that you can use \"$\" to reference the original value of dot, without having to create and use another assignment (I'm not sure if this works without trying it):\n{{with $field := field \"booking.CheckInDate\" .}}\n  <p class=\"{{$field.ErrorClass}}\">\n    <strong>{{msg $ \"FIELD_NAME_IS_HERE\"}}:</strong>\n    ...\n  </p>\n{{end}}\n. Agreed\n. Thank you !\n. You can use OnAppStart, which runs synchronously before the server begins to accept connections: \ngo\nfunc init() {\n  revel.OnAppStart(func() {\n    ... \n  }) \n}\n. It is called on server startup.  It just happens in dev mode, the first request causes the harness to build and run the server (in prod mode it indeed does run immediately).  I don't see why that would be an issue for loading custom services though.\n. Sorry for the delay -- this is a sizable change and I haven't had a chance to digest it yet.\n. Sorry for the long delay, and thanks again.\nFYI, I made some revisions to the implementation: \nhttps://github.com/robfig/revel/commit/7f06f0d2ffaa2c7febcbd4e68a3a336d59481f41\n. Thanks!\n. Looks good.  Thanks!\n. Thanks!\n. I think {{option .Id}} should work, without the nested braces\n. Just tried this out myself.  The intermediate variables are not necessary, and to convert the integer into a string for the option name you can use the printf value.  Here's an example:\ngo\n    {{range $.answerType}}\n        {{option $field (printf \"%d\" .Id) (printf \"%s - %s\" .Name .Describe)}}\n    {{end}}\n. Hi, \nThat error message is not dangerous -- it just informs that it could not figure out what the default Key should be for that validation call.  (I should fix it to either correctly figure it out, or at least not print such a frightening message).\nWhat I would suggest in this case is actually implementing an EmailDoesNotExist Validator -- the validators are run sequentially, so it won't be run if a previous one fails.  \nFor example:\n``` go\ntype EmailDoesNotExist struct{}\nfunc (v EmailDoesNotExist) IsSatisfied(i interface{}) bool {\n  email := i.(string) \n  ...\n  return true\n}\nfunc (v EmailDoesNotExist) DefaultMessage() string {\n  return \"Email already exists\"\n}\n```\nThanks for the bug report!\n. The TestSuite stuff makes it easier to make real HTTP requests against a running server (I think it's called a Functional test).  Unfortunately there is no way to do the more unit-testy \"invoke this action and inspect the Result object\".  In your example, assuming the return value is HTML, perhaps using something like GoQuery to check that certain elements are present on the page with certain values is the best thing.  (Although perhaps a simple string find is sufficient).\nIt should not be too hard to make the unit-test version of TestSuite though, so that may be worth doing at some point..  If you didn't need to execute the Filters (e.g. to parse the Params object, etc), you could do a simple version right now. For example\n``` go\ntype App struct {\n  *revel.Controller\n}\nfunc (c App) Index(val string) revel.Result {\n  .. do some stuff ...\n  return c.Render(a, b, c) \n}\n```\nthen your test could be\n``` go\nfunc (t AppTest) TestIndex() {\n  result := App{}.Index(\"someval\")\n  if c.RenderArgs[\"a\"].(string) != \"expectedValueOfA\" {\n    t.Fail()\n  }\n.. \n}\n```\nbut that would likely only work for simple actions.\n. I knew that was a thing, but it seemed to me like Windows actually worked with those paths, so I haven't worked on it.  (At least, I successfully run the Framework Benchmarks on Windows)\nIs the package command the only thing that doesn't work, or are you unable to build and run revel apps in general?  \nThe commit you reference turned out to break all kinds of things and I ended up giving up on it (you can see a subsequent commit reverted that change).\n. If that makes the commands work on windows, I will happily merge it!\nPlease open a pull request\n. Yeah, right now there is no particular integration with a tool like that, and it seems pointless to create empty directories without more support.  Hopefully in the future.. \n. That just means that you have an action parameter or a validation parameter for which Revel couldn't determine a key name.  Its type is map[string]interface{} \nDoes that give you enough information to track it down?  It is at character position 3192 of one of your files \n. Hm, that would be a helpful to have in a sample app.  I think there are many ways to do it... \n1. Potentially the easiest would be if a Controller corresponded to a single menu tab.  Then you could have the template know which one is selected by the controller name, which could be added to RenderArgs before every request (if it's not already available there somehow). \n2. You could potentially have a map from Controller name to Menu item, and look it up to get the selected item\n3. Add a Menu struct { Item1, Item2, Item3 bool } to the RenderArgs, and set the appropriate one in the action or interceptor\n4. Use a variable set in the template , e.g. \nPage:\n{{set . \"menuItem\" \"ItemName\"}} \n{{template \"menu.html\" .}}\nMenu.html:\n{{if eq .menuItem \"Item1\"}} Item 1 selected {{end}}\n{{if eq .menuItem \"Item2\"}} Item 2 selected {{end}}\nI think there's more ways and variations.  Does this help?\n. Fixed by https://github.com/robfig/revel/commit/af568e373fe4e12e019f05dee2efd49492d18882\nThanks!\n. You can see the body of the {{option}} function in template.go:\ngo\n        \"option\": func(f *Field, val, label string) template.HTML {\n            selected := \"\"\n            if f.Flash() == val {\n                selected = \" selected\"\n            }\n            return template.HTML(fmt.Sprintf(`<option value=\"%s\"%s>%s</option>`,\n                html.EscapeString(val), selected, html.EscapeString(label)))\n        },\nIt requires that you have flashed the value of the field on the previous request.  I guess that is the missing link? \n. f.Flash() is always a string, whereas f.Value() is the typed value.  What Play 1.x handles this case by providing \"field.Value\" that is taken from RenderArgs, and it is up to the user to use that if they want.  \nFor example:\n<input value=\"{{coalesce field.Flash field.Value}}\">\ncoalesce is not a real function, but it just means take the first non-empty argument -- maybe there is something builtin to do that, or you can easily write that template function\nWhat do you think of that solution?\n. Wonderful!\n. Wonderful, thanks!\n. Thanks for fixing this!\n. Are you aware of any ORM system that allows this?  I would be curious to see how they do it\nAFAIK you can not use any ORM for this purpose; you would have to automatically generate DDL, and then depending on how you need the results you could maybe just select * from the row into a list of interface{} and then type-switch for each value, assuming that you need to know their types.  \nBut actually, I would recommend you discover another way to implement this.  For example, you could instead use a  a schema like this (although this performs very poorly with RDBMSs): \nUserValues\nUser: UserId\nRow: RowId\nKey: UserColumnName\nValue: ValueAsAString \n(or maybe have one value per data type, e.g. int, string, date) \n. Thanks for the report, I hadn't tried that before but it seems like a nice thing to support. \n. Wow, great analysis.  It sounds like we can't move forward with this without a solution for pathtree support, right?\nLet me ask, does the old regex router work for your needs?  You can try it out by checking out revision 6e34b217f71ea44bcf5c59676ed2670ffc90d457 \nThe syntax you would want is\nGET     /{controller}/{action}                    {controller}.Get_{action}\n. Please try checking out the v1 branch, and reopen if that does not handle your case. \ncd $GOPATH/src/github.com/robfig/revel && git pull && git checkout v1\n. {{Range $item, $index := .items}}\n. Thanks!! This looks good.  \nI wonder if there is any solution for setting this for modules as well.. \n. (If you get a chance, adding a note about this option to the gh-pages branch manual/template.md and manual/appconf.md would be helpful as well! )\n. Yeah, I think the configuration would need to live in the module\n. I'm sorry, building on your source directory may delete your files :(.  I don't think there is a way to recover them, although there is some help online:\nhttp://superuser.com/questions/150027/how-to-recover-a-removed-file-under-linux\nWe should add safeguard to prevent that, perhaps by only overwriting the build directory if it looks like a build directory\n. Great idea!  Just a couple small comments.\n. Looks good, thanks again!\n. Thanks!\nHm, that really takes up a big portion of screen to include by default -- I think it would be something developers could leave on always if it was more like a small tab absolutely positioned on the right side, which could expand to show the variables if clicked, just like the django debug toolbar. \nAre you interested in making a more intense UX like that? \n(Here's a weird screencast of the DjDT: http://vimeo.com/6640136) \n. Looks great, just the one comment\n. Thanks!\n. $field can't really handle maps.. it only works with single-valued fields unfortunately.\nIn fact, I don't believe that the binder handles maps right now, although I had a half-completed changeset to add that support..\n. For the form, just don't use the $field helper -- it doesn't do anything magical anyway. \nFor the binding, how do you feel about implementing support for map[string]string binding?  Here is the implementation I started: \ngo\n+func bindStringMap(params *Params, name string, typ reflect.Type) reflect.Value {\n+       result := map[string]string{}\n+       for key, values := range params.Values {\n+               if !strings.HasPrefix(key, name+\"[\") || key[len(key)-1] != \"]\" {\n+                       continue\n+               }\n+\n+               keyName := key[len(name)+1 : len(key)-1]\n+               result[keyName] = values[0]\n+       }\n+       return reflect.ValueOf(result)\n+}\n+\n+func unbindStringMap(output map[string]string, name string, iface interface{}) {\n+       for key, value := range iface.(map[string]string) {\n+               output[name+\"[\"+key+\"]\"] = value\n+       }\n+}\nIt had occurred to me that it would be possible to support more types than just map[string]string -- it should be possible to support keys and values of any type that the binder can handle, by delegating..  but I suppose we could start with just map[string]string\n. FYI, I just pushed https://github.com/robfig/revel/commit/4d9cd2f7ba28f9c19b75e3fa498987c674f67701 which adds support for binding form keys like\nInformation[name] = value\ninto \ngo\nfunc (c *App) Index(Information map[string]string) revel.Result {\n  ...\n}\nwhere it will have a value of\ngo\nmap[string]string{\n  \"name\": \"value\"\n}\nAre there any remaining questions I can help with?\n. Perfect, thanks for the docs!\n. Is the binding particularly more susceptible to DOS attacks than other things?  I guess I'm not sure, without some sort of test that can demonstrate it.\nThanks for the doc fix!\n. Out of curiosity, what is the motivation for this change?\nIt seems like a limited case of the more general \"only send a cookie if the data changes\" -- I wonder if that is possible to implement.  Right now, they will still have an empty cookie set forever, as soon as they have one validation usage. \n. A JSON API is definitely within scope!  \nI see, you use the validation library as a helper, but you don't want any cookies.  The solution in that case is to remove ValidationFilter from your revel.Filters array.  (You should find that in your /app/init.go file) \n. Ah, makes sense.  I support the idea of only having the cookie when necessary.  I think the logic of \"if there was no incoming value and no outgoing value, then skip the cookie.\"  Additionally, instead of writing an empty cookie (as it does currently), it seems better to delete the cookie (achieved by setting an expiry time in the past, I believe). \nHow does that sound?\n. This is excellent.  Just a tiny comment. \n. Many thanks for the contribution!\n. Thanks!\n. Thanks.  I think that \"their\" is the correct gender-neutral pronoun in this case :)\n. From http://en.wikipedia.org/wiki/Gender-specific_and_gender-neutral_pronouns\nProblems of usage arise in languages such as English, in contexts where a person of unspecified or unknown sex is being referred to, but the most natural available pronouns (he or she) are gender-specific. In such cases a gender-specific pronoun may be used with intended gender-neutral meaning, as he has been used traditionally in English, although she is now sometimes used instead. Use of singular they is another common alternative. Some attempts have been made, by proponents of gender-neutral language, to introduce artificial gender-neutral pronouns.\n. Yeah, sometime the build fails because one of the test apps doesn't give back its port quickly enough.. I should fix that. \nThanks for the fix!\n. This should work if you change your route to have them. \nFor example, in your conf/routes file:\n/index.html  App.Index\nShould invoke your App.Index action when you go to /index.html.\n. I see what you're saying.  \nCan you try checking out Revel at revision  https://github.com/robfig/revel/commit/6e34b217f71ea44bcf5c59676ed2670ffc90d457 and change your route to the old style, e.g. /view/{id}.htm, and see if that works for you?\nI think we will return to that router, since there are use cases like this one that the new router doesn't support.\n. Here is the latest development plan.\nhttps://groups.google.com/forum/#!topic/revel-framework/BXwnW6TgnpM\nCheck out the v1 branch, and this should work for you.  If not, please reopen. \ncd $GOPATH/src/github.com/robfig/revel && git pull && git checkout v1\n. (The reason for that is that it's not clear whether it should use the name of the helper or the name of the originally-invoked action as the template name -- there are use cases for both, and I don't think either is particularly more intuitive than the other)\n. Ah, that's true.  The block of code at revel/harness/harness.go:152 takes care of killing the process when it gets SIGINT, which is OSX/Linux specific.  Do you have any suggestions for how it could be implemented?  I don't believe Windows has a process signaling system...\n. Oh, I didn't realize you said it works if you Ctrl-C it -- so that means that Windows does support the SIGINT listener!   If that's the case, you could try expanding it to listen for any signal (not just SIGINT) -- perhaps that could get it to work for you.  \nSince it works in the common case, I'm not too interested in trying to create hidden windows or stuff like that (I don't believe that there is a cross platform way to do the pulse thing you said either)\n. Yeah, actually,  a HTTP request could work.. \n. I'm not sure this is important enough to pursue.. \n. Cool!  I would definitely be happy to get an emailer library integrated.  The points that @mikejihbe lists is exactly right. \n@tanema, cool stuff!  I like it.  A couple first reactions: \n- Setting default \"from\" and \"username\" is good, but I think it would be useful to override those.  Or, at least use one of a couple different values depending on if the email is for sales, crm, etc. \n- Why make it an embedded / struct situation instead of a simple function?\n- Typical use cases are sending email as a side-effect of processing a transaction, or sending a bunch at once as a result of a nightly job.  I wonder if it makes sense to provide support for doing that (e.g. retrying strategies so they can fire one off in a goroutine, or something that takes a list or channel of emails for the bulk case and can at least reuse the connection).\n- I wonder if I could refactor the logic that gets the calling function name as a view out of Controller.Render so that others could use it.. \n- Line 133 - you should use revel.DevMode instead -- some developers define other run modes like \"test\" where the email should also not be sent.  (Although, sometimes in dev mode you want to send it.. blargh). \n- Why avoid the standard library utilities when putting together the email content?  https://code.google.com/p/go-wiki/wiki/SendingMail and http://golang.org/pkg/net/mail/#Address.String suggest that there is more escaping to be done \nHopefully I don't sound too harsh!  This is great.\n. Yeah, I think the argument that the struct can hold the (default) configuration for the From/To/Subject etc is a good reason to have it.  Would it be threadsafe, so that it can be a singleton, or does each caller need to create their own?  (hopefully it's threadsafe!) \nRegarding sending, I think your suggestion of using the configuration is good -- maybe there is a mail.send boolean defined that, when false, prints it to console.  Then, the developer can set that configuration in the modes they want to send in. \n. Yep, agree 100%.  There is some discussion about that here: \nhttps://github.com/robfig/revel/issues/130\nI suspect it will be a sizable change -- I was hoping to do it next. \nThanks for the tip about the Vary header. \n. Thank you for taking this on!!  I appreciate the contribution (and the fixing of page build errors :)\nI think that the proposed process is more work than the developer needs to go through.  Perhaps we can pare it down to the essential steps. \nThanks again\n. That branch is very old, but I recall that I had successfully gotten an app to run on GAE.  The thing I that stumped me was how to run all of the GAE services in development (I believe that it's possible, since dev_appserver.py does it, but I ran out of steam before figuring it out -- I assume it involves starting up python services, which seems like a pain..) \n. Oh, and the way I handled routes was to configure a single route \"/\" in the app.yaml and have revel do the routing.  Of course, that will probably mess with the app stats, so that is not a great approach either. \n. I'm not sure that I fully understand your suggested approach, but if you can get it to work, great!\nThe approach I had been following\n- Create a replacement for revel.Server that is compatible with AppEngine (in server_appengine.go, used via build tags)\n- Have Revel take care of the normal development workflow (e.g. the code reloading, etc) \n- Have a command that allows the user to package the app for appengine. (I forget how this part worked -- I probably just hacked it manually at the time.)\nI would be happy to support it even for V1, if it could be done. (I don't think it should require any backwards-incompatible changes)\n. Thanks!\n. Looks good, just a couple small comments\n. Thanks!!\n. Great idea, but it looks like you changed the wrong method!\n. Thanks for the contribution!\n. Hm, I think you can change the Dialect to quote table names, maybe?\n. Why does it have to parse a query string? It generates the query string based on the model name.  Maybe I'm not understanding you..  it seems that if Transaction.* does something different than DbMap.*, that would be a bug.  (Other than ensure usage of the same connection)\n. Ah, I see what you mean.  Well, I'm happy to add quoting to the table name in the query, if that's all it takes to make it work for you.\nBtw, the QBS (github.com/coocood/qbs) orm does exactly what you say -- you can set properties on a struct and it uses that to query (it's short for \"query-by-struct) \n. No other sample uses a sql database -- booking is the only one that would have that problem.\nThat would be a nice contribution, thank you!\n. Closing due to inactivity.  \n(Please reopen if there was a change request -- I don't see anything outstanding skimming the comments) \n. Thanks for the notification. \n. You write a lot of comments, which is wonderful. \nI do think you could be more consistent in their formatting though:\n- You use \"//\" for some and \"/* */\" for others\n- You leave a space between \"//The first letter\" sometimes but not always\n- You capitalize half the time.  \nI may be overly picky, but I think details like that make code look more professional and more pleasant to consume\n. Also, let's settle on the design -- no need to implement something when we haven't even decided if it's the right thing.\n. Yeah, I need to fix that.. \nThanks for the contribution!\n. Agreed, sorry about that.  I wonder where it should go..\n. I have never tried that, so I assume not.  Why do you want to do that?\n. Makes sense.  I'll look into it (or you may feel free to!) \nIt probably makes sense to see how Play! or Rails configures it and do something analogous.  (that stuff is in server.go) \n. I think it might be as easy as:\n- Leave http.port set to empty string (e.g. http.port=)\n- Make server.go handle a port of 0 by not adding the \":0\" to the end of the HttpAddr\ne.g. change this code:\ngo\n    Server = &http.Server{\n        Addr:    fmt.Sprintf(\"%s:%d\", address, port),\n        Handler: http.HandlerFunc(handle),\n    }\nThen I think it may just work if you set http.addr=/tmp/revel.socket in your app.conf.\n. This is awesome!  Thank you very much!\n. I see, this case happens whenever the user does not send an Accepts-Language header, and no Locale cookie is set.  In that case, I agree that it should not log at WARN for using the default language.\nOut of curiosity, since all browsers send the language header, is this happening because you're making an API  rather than a web page ?\n. Cool, thanks\n. Heh, thanks!\n. Thanks for the contribution!  I had a few small comments \n. *os.File implements io.Reader \n. Sorry for being unclear.  I meant something like this: \n``` go\nfunc (c Controller) RenderFile(file os.File, .. )  {\n  ...\n  return c.RenderBinary(file, filename, disposition)\n}\nfunc (c *Controller) RenderBinary(reader io.Reader, name string, disposition .. ) {\n  return &BinaryResult{\n    ...\n  }\n}\n```\n. Ahh... what modtime would someone pass in that is not returning bytes from a file?   \nIt seems like the different use cases have different parameters that they would want to provide:\n- the streaming/generation case probably does not have a modtime \n- the streaming/generation case may or may not have a length. \nNote that the comment about \"ServeContent\" only applies if it's a ReadSeeker, which is not the case for streaming. \nHonestly, I wonder if the simplest interface is just having the action return the Result directly.  Did you try doing that in your code?  How did it look? \n. Thanks\n. Thanks again for contributing.  Here's a couple high level comments:\n- I think this can be in a \"revel/mailer\" sub-package -- unless there's a reason to put it into the main \"revel\" package?\n- Examples of using the API would help me to understand the proposal.  For example, right now it seems like this pull request has all configuration done with un-exported variables, so I don't see how this can be used by callers. \n- Please follow Go conventions on commenting and variable naming\nWhat do you think of an API like this:\n``` go\nimport \"net/smtp\"\nimport \"github.com/robfig/revel/mailer\"\n// A mailing service.  Contains the connection details\nvar SendGrid = mailer.Transport{\n  Addr: \"smtp.sendgrid.com\"\n  Port: 12111,\n  Auth: smtp.CRAMMD5Auth(\"username\", \"password\"),\n // Something for TLS\n}\n// Which persona to send mail on behalf of\nvar Salesperson = mailer.From{\n  Name: \"Rob Fig\", \n  Email: \"robfig@company.com\",\n  ReplyTo: \"sales@company.com\",\n}\n// Example sending a transactional email\nfunc ProcessTransaction(orderItems []Item, orderAmount int, orderDate time.Time) {\n  confirmation := mailer.Message{ \n    From: Salesperson,\n    To: \"Mr Customer customer@earthlink.net\",\n    Subject: \"Transaction processed!\",\n  }\n// Render \"app/views/email/ProcessTransaction.html\" and \"app/views/email/ProcessTransaction.txt\"\n  // with the given render args to get the HTML and Text body.\n  // (At least one of the templates is required to be present)\n  SendGrid.Send(confirmation, orderItems, orderAmount, orderDate)\n}\nvar Localhost = mailer.Transport{\n  Addr: \"localhost\"\n  Port: 12111,\n}\nvar Computer = mailer.From{\n  Email: \"computer@company.com\",\n}\n// Example sending random notifications to people internal to the company\nfunc SendInternalEmail() {\n  // Can also include the body inline\n  Localhost.Send(mailer.Message{\n    From: Computer, \n    To: \"internal@company.com\", \n    Subject: \"Alert\",\n    Body: \"Text body\",\n    BodyHtml: \" Alert!\",\n  })\n}\n// TODO: Email headers and Attachments also belong in the Message probably\n```\nWhat do you think?  Maybe it would help if you put your API proposal in the same format so we can think about the interface together\n. Does Revel have a queue processor?  I must have missed that development :) \nGenerally I think idiomatic Go says the Send function should send synchronously, and it's up to the caller to determine if it's in a goroutine, etc.  We have no built-in queue support presently, but of course that would be a nice integration as well.  The current solution could be serializing message structs into Redis manually and having a daemon pick them up to do the sending. \n. Ah, that could be useful for limiting the number of active goroutines -- I differentiate that from a queue processor because the job runner is in-process, so the process restarting would lose any pending jobs.  Ideally an integration with AMQP or Redis could be had that makes it more robust.. \n. Thanks!\n. Merged https://github.com/robfig/revel/commit/21544503dabcb4ef758e1a35fe8d3f1ad04483c2\nThanks\n. I would like to allow that, much like it's possible to do for Filters.  (see filterconfig.go)  Although, I think there are other areas that interceptors could become more useful, so maybe it should wait for a broader upgrade.\nPart of the assumption was that the part of your app that requires login would generally be in different controllers from the part of your app that is public.  (As you said). \nAnother solution is to check the c.Action string in the interceptor, and just returning if you want to skip it for that action.\n. Oh, btw, I don't think a simple solution like the one you outlined would be sufficient.  Other use cases are equally common like \"apply this interceptor to all actions EXCEPT this one\".  I would like to have a more general mechanism that can handle things like that as well... \n. Thanks\n. Ahh.. thanks for the bug report and the investigation!  \nFYI, there is an open issue to use filepath everywhere: \nhttps://github.com/robfig/revel/issues/79\nThat would avoid the weirdness like your BasePath having a mix of back and forward slashes.  But, it sounds like it wouldn't fix the problem, if panics on Windows come with forward slashes.  That actually seems really weird -- are you sure about it?  It seems like Go should use os.PathSeparator in stacks.. \nOut of curiosity, what is your development environment?  e.g. Do you use MinGW, Cygwin, or PowerShell? \n. That sounds like a great idea\n. Seems like a nice feature.  The usual way to attain this is using a reverse proxy (nginx, haproxy) that send requests to multiple backends, but this could be a low-overhead replacement.. \n. It looks like SO_REUSEPORT has come to linux, and it's available on OSX as well.  Perhaps that could be used to start up the upgraded app on the same port, and then shut down the old app?  \nI'm not 100% sure that the details work out exactly right to avoid dropping any connections though. \nhttps://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/setsockopt.2.html\nhttps://lwn.net/Articles/542629/\nhttps://groups.google.com/forum/#!searchin/golang-nuts/graceful/golang-nuts/vLHWa5sHnCE/wpTizkgC1boJ\n. (Actually, HAProxy is the usual thing for this, not nginx, I think) \nYou would have a HAProxy that sits in front of your entire set of services, configured to route requests to services based on the host, path, etc.  Each service runs with 2+ instances, and HAProxy can be configured to round-robin between them, or balance based on # of active connections, etc.  Also, it does \"health checks\", which means it requests a URL on that service and uses the response code to decide whether it's healthy and new requests should go to it. \nGiven that setup, have the application handle a kill signal by going into \"lame duck\" mode -- continue serving any requests that are in progress, but return a 400 instead of 200 on the health check, causing HAProxy to not send new requests to that server.  After a pre-determined amount of time (e.g. 30 seconds) or if you can tell that all requests are done, the server shuts down and the deploy process starts up a new instance in its place. \nThat sounds like a lot of stuff, but it's actually not much to set up, and if you have more than one service you need HAProxy or something like it anyway.\n. It doesn't have any special support, but there's no reason you couldn't do it: \n``` go\nfunc (c App) Index() revel.Result {\n  w := c.Response.Out\n  w.Header().Set(\"Content-Type\", \"text/event-stream\") \n  for { \n    select { \n    case something: \n      w.Write([]byte{\"event: something_happened\\ndata: \"})\n      json.Marshal(w, eventData)\n    }\n  }\n}\n```\nHaving something that can format data into SSE format could be useful, but it is not hard to do as-is.  It doesn't seem like Rails has any more special support for it (although its string interpolation makes it more convenient), but this probably good enough.. \n. Great idea!\nI think the implementation can be simplified to add the callback name to the regular JsonResult struct -- JsonResult can use it if it's set, or ignore it otherwise.  Then c.RenderJsonP will just set that extra parameter.\n. Nice, just one comment.\n. Thanks!\n. Thanks!\n. Thanks!\n. Nice!  Just one tiny comment. \nDo you mind updating the documentation?  I think adding a note to the \"http.addr\" section of manual/appconf.md should do it (it's in the gh-pages branch) \nThanks!\n. What kind of patch do you suggest?  \nIt seems to say that any usage of secure tokens (in the example, CSRF) with gzipping responses is vulnerable to brute-force attacks on the token.  I guess one could say that Revel doesn't ship with CSRF or gzip support built in :).  In the long-term, I didn't see any obvious patch that could be applied to prevent this from happening, other than not enabling compression. \n. (I don't see any next steps here) \n. I wonder if we could do it with a region instead, using range.  Maybe this could work?\n{{range times .Depth}}\n <span class<\"indent\"></span>\n{{end}}\nI'm not sure if range accepts a pipeline as an argument...\n. @shaban both of those look like nice additions! \nAgreed that the idea of putting HTML in a literal string does not appeal to me\n. Yeah, those seem useful to me -- \nI would probably rename \"limited\" to \"first\" instead (in case there is a case for taking the last N).  Also it could return a slice of struct{} \n. Thanks for the report, haven't got around to it yet.  Pull requests accepted :)\n. Go stack traces are not super easy to scan to tell where the panic originated (compared to Java, for example).  Trimming part of the trace that is known to not contain the offending code would make it easier to find the source of the program.\n. Thank you for the bug report!\n. @codeb2cc try updating revel to head, and reopen if it doesn't work.  I just applied the patch suggested by @Hender.  Sorry it took so long.\nhttps://github.com/robfig/revel/commit/12afdc1f3f5fbb6fbe01ca84f3d30d87af4dc5da\n. If your action looks like this:\ngo\nfunc (c App) Index(customerId int) revel.Result\nand it's invoked with:\n/App/Index?customerId=abc\nthen it may be a good idea to add the integer parse error to the Validation context.  At least, Play! does, and it can be helpful for debugging.\n. I have been trying to keep master stable, and I'm batching up breaking changes in the v1 branch. When I'm ready to merge, I plan to make the master revision a github release (tagged with e.g. \"0.7\"), and merge v1 branch in as e.g. \"0.8\".   (v1 is a bit of a misnomer I suppose) \nHopefully that's enough information to make a decision. \n. Hm, the current design does not make that very elegant, but it shouldn't be too difficult, either.  \nA couple notes:\n- The c.Response.Status may be set by the Action to override whatever status code the Result has as a default.  For example, the RenderTemplateResult produced by a c.Render() call uses http.StatusOK as the default status code.\n- Both the status and the headers are written on Result.Apply(), which is done after all of the filters have run by default (see server.go:handleInternal), but which could easily be done in a custom filter (that sets Result to nil after applying it). \n- Actually capturing the status and content length would have to be done by implementing the http.ResponseWriter interface as a wrapper of the \"real\" ResponseWriter, and applying the result to that one.  That could be done in a filter, or by wrapping Server.Handler to pass down your custom implementation. \n. Per my comments in https://github.com/robfig/revel/issues/280 , I don't want to change the old logging system.  Thanks for trying to help out though!\n. That's a good idea -- the only thing is that the next \"version\" of revel is going use glog, so that stuff is going to go away\n(I've already pushed a commit migrating to glog to the v1 branch)\n. As I said before, I don't really want to touch the logging stuff in master since it is going to disappear in the next release.  Unfortunately, glog does not have the capability to log to separate files.  I would consider forking it to add that functionality but if there are two different versions of glog included in the same program it could be bad..\n. (The v1 branch has glog integrated.)\n. Sorry it took me a while to look at this -- I see you deleted the file, but let me know if there's anything I can help with.  \n(Eventually I would love to have some kind of user / authentication module that people can drop in as a starting point) \n. That seems reasonable\n. (If you care to implement this, I would welcome a pull request to the v1 branch.  If not, I hope to get to it sometime soon..)\n. Thanks for the tip\n. Also see revel package \n```\n$ revel package\n~\n~ revel! http://robfig.github.com/revel\n~\nPackage the Revel web application named by the given import path.\nThis allows it to be deployed and run on a machine that lacks a Go installation.\nThe run mode is used to select which set of app.conf configuration should\napply and may be used to determine build options.\nFor package, run mode defaults to \"prod\".\nFor example:\nrevel package github.com/robfig/revel/samples/chat\n\n```\nPlease feel free to reopen if these don't meet your needs\n. This isn't much information to investigate, but let's see..\nOnly one variable has that type in revel, that is the Validation.ErrorMap(), which is used by the errorClass template func.  \ngo\nfunc errorClass(name string, renderArgs map[string]interface{}) template.HTML {\n    errorMap, ok := renderArgs[\"errors\"].(map[string]*ValidationError)\n    if !ok {\n        glog.Warningln(\"Called 'errorClass' without 'errors' in the render args.\")\n        return template.HTML(\"\")\n    }\n    valError, ok := errorMap[name]\n    if !ok || valError == nil {\n        return template.HTML(\"\")\n    }\n    return template.HTML(ERROR_CLASS)\n}\nI believe that if the error map is not found in RenderArgs, the conversion will still succeed.  So it should explicitly check for errorMap being nil and then log an appropriate error\n. This works:\nIndex.html:\n<div class=\"container\">\n{{set . \"var\" \"foo\"}}\n{{template \"App/test.html\" .}}\n</div>\ntest.html:\n{{.var}}\nThis also works:\nIndex.html:\n<div class=\"container\">\n{{template \"App/test.html\" \"foo\"}}\n</div>\ntest.html:\n{{.}}\nDoes that solve your problem?\n. How about\n{{$ := .}}\n<section id=\"filter\">\n  <div class=\"page-header\">\n    <h1>{{msg . \"filter\"}}\n      {{if .mEditable}}<a href=\"{{.pageurl}}/filter/new\" title=\"{{msg . \"filter.create.desc\"}}\" class=\"btn\"><i class=\"icon-plus-sign\"></i></a>{{end}}\n    </h1>\n    <p class=\"muted\">{{msg . \"filter.desc\"}}</p>\n  </div>{{range .mFilter}}\n  <article>\n    <h2>{{.Name}}</h2>\n    <div class=\"dlist\">\n      {{set $ \"dot\" .}}\n      {{template \"dlist.html\" $}} // Use {{.dot}} within this template\n    </div>\n  </article>{{end}}\n</section>\n<section id=\"target\">\n...\n      {{set $ \"dot\" .}}\n      {{template \"dlist.html\" $}} \n</section>\n...\nOverall, I am eager to build more powerful functionality on top of go templates, but I'm not eager to do it with pre-processing using regular expressions :).  It looks like a lot more work, but I think the way Zap approached it may be best.  \nhttp://godoc.org/code.google.com/p/sadbox/zap\nThe reason is that regular expressions are easy to break and can't implement more than simple tags.  They seem to me more like a workaround than a foundation.\n. I would like to allow a selection of templating systems.  \nHere is another solution for your problem that works even if your .mFilter items are structs: \n{{$ := .}}\n<section id=\"filter\">\n  <div class=\"page-header\">\n    <h1>{{msg . \"filter\"}}\n      {{if .mEditable}}<a href=\"{{.pageurl}}/filter/new\" title=\"{{msg . \"filter.create.desc\"}}\" class=\"btn\"><i class=\"icon-plus-sign\"></i></a>{{end}}\n    </h1>\n    <p class=\"muted\">{{msg . \"filter.desc\"}}</p>\n  </div>{{range $i, $filter := .mFilter}}\n  <article>\n    <h2>{{.Name}}</h2>\n    <div class=\"dlist\">\n      {{set $ \"index\" $i}}\n      {{template \"dlist.html\" $}} // Use {{.mFilter.index}} within this template\n    </div>\n  </article>{{end}}\n</section>\n. Hi, thanks for the contribution!\nThat seems like a fair amount of code to accomplish this.  I think an easier solution may be to simply ignore any errors when deleting/creating the directory.  After all, if the subsequent \"create a file\" fails, then it will still die, so if it really doesn't have access then it would still appropriate print the error message. \n(It would also probably be fine if we skip deleting and recreating the directory altogether...)\n. This looks great, thanks for the hard work!  Just had a few comments, but nothing big. \n. Thanks!\n. Well.. they both work :) \nI guess FINALLY just sounds more comforting to me.  PANIC would work perfectly well too though, and I can see that people may be confused why it's not that instead. \nFixed\n. It should take 1-3 seconds.  Perhaps you somehow installed Go without installing the standard library, and it's rebuilding the whole thing every time?  (Which is about 30 seconds) \nOn the slow machine, I would suggest removing your existing Go installation and following the instructions to install from source: \nhttp://golang.org/doc/install/source\nAdditionally, you can see what packages are being built if you make this change to revel source code, github.com/robfig/revel/harness/build.go: \nExisting:\ngo\n        buildCmd := exec.Command(goPath, \"build\",\n            \"-tags\", buildTags,\n            \"-o\", binName, path.Join(revel.ImportPath, \"app\", \"tmp\"))\nAdd a -v:\ngo\n        buildCmd := exec.Command(goPath, \"build\",\n            \"-tags\", buildTags,\n            \"-v\", \n            \"-o\", binName, path.Join(revel.ImportPath, \"app\", \"tmp\"))\nThat will cause all the packages built to be printed to the TRACE logger.\n. Ah, it doesn't print the output for a successful build.  Please add a print to see it: \n``` go\n        buildCmd := exec.Command(goPath, \"build\",\n            \"-tags\", buildTags,\n            \"-v\",\n            \"-o\", binName, path.Join(revel.ImportPath, \"app\", \"tmp\"))\n        revel.TRACE.Println(\"Exec:\", buildCmd.Args)\n    output, err := buildCmd.CombinedOutput()\n    revel.TRACE.Println(string(output))  // <----\n\n```\n. Very weird, I haven't seen that before.\nIf you run go build -x github.com/mattn/go-sqlite from the command line, does it still take that long?  I assume so -- you would be able to see exactly which command takes all the time from that output.  Maybe follow up on golang-nuts, if it isn't obvious what's wrong/different from that?\nThere is a revel thing here, though.  Revel should not be re-building all of the dependent libraries every time, unless they change.  I guess the default go build doesn't save the intermediaries?  I'll investigate that situation -- perhaps it has to install things explicitly.\n. I'm afraid I can't help you -- perhaps if you sent an email to golang-nuts saying that sqlite3 took 30 seconds to build and hung on that one gcc command, they would know what the problem is.  (At least one of the gcc authors/maintainers is a core Go contributor..)\nSorry about that!\n. Actually, I agree that revel should be using \"go install\" instead of \"go build\".  Although this appears to be an unusual pathological case for slow builds, it would make all builds faster, even with just native Go code. \nI believe it would be a 1 line change\n. Oh, even easier.  \"go build\" now has a \"-i\" flag:\nThe -i flag installs the packages that are dependencies of the target.\n. Actually, that prioritization comment is out of date. There is no order prioritization in pathtree; the most specific route takes precedence.\nThe route syntax means \"match all following\", so route could match \"end/of/path\", which is nice for file serving.\n. Thank you!  \nInitial comments:\n- A queue integration is not necessary to begin with -- starting with a synchronous interface is good.\n- This seems to lack some of the stuff of my proposal in https://github.com/robfig/revel/pull/254 -- it is common to have a couple personas (or maybe one) that you send email as, but this interface requires the caller to pass the sender info every time. \n- I didn't see the point of having the Authentication string member of Mailer.\n. Very nice implementation!  I have a few comments, but I think this is starting to look very good!\nThanks again\n. Hey, very cool!  \nI have a couple comments: \n- How do you envision an app would integrate this module?  Modifying the booking sample app to use it would be very illustrative and help work out kinks in the API.  I assume that your intention is that they could use the built-in routes of Session controller or write their own that calls the library directly?\n- I really like the idea of providing a stock login page -- that can help projects get off the ground quickly, and they can override the login page and use the library directly as the project grows.  Great idea. \n- The hard-coded redirect to \"/admin\" should probably be extracted to a package-level exported variable that can be set by the app\n- It is unusual to do the \"if c.Request.Method == \"POST\"\" manually -- better practice is to route the GET and POST requests to different actions.\n- Why use the cache?  The session cookie is signed, so you can depend on it not being tampered with. \n- I'm not sure how far you want to go into permissions, but a list of permission strings would be far more general than a single Role string.  \nGreat work, and thanks again!\n. > Definitely. How do you see the permission strings being used?\nApps can use it differently -- for example, the collection of strings could mean any of the following: \n- Per-action permissions -- user is allowed to call an action if that action name is found in the list.\n- Employee groups -- strings are names of groups like \"finance\", \"sales\", and actions / controllers can restrict access to users that have the relevant group listed. \n- User level -- strings are names of the highest karma level achieved.  As users interact with the system, they can earn new permissions like \"venue manager\" or \"superuser\" that allow them access to do more things. \nAt work, we use employee groups in particular.  It's simple, effective, and not hard to manage.  (Actually we map employees to an employee group, and grant that employee group certain permissions.)\n. Hey, this looks solid, thanks again for contributing! \nI had a few comments..  also, at a higher level, how does this compare to other frameworks' authentication systems?  I know Django ships with one, but I haven't used it..   are you familiar with any? \nThanks!\n. Cool, thanks!  \nYou can't view source?  Hmm.. that seems like something to fix.  I'll play with it this weekend (and see if I can get it to work on OSX)\n. We should probably discuss CSRF stuff in a separate ticket, but to respond to your question -- I think the simplest may be simply having a function to call on startup, passing the App.Bar method value.  I think having a convention of \"configuration in code goes in app/init.go\" is pretty good. \n(Much like the interceptors or filters are configured with function calls rather than strings) \n. I managed to run it on OSX, but I can't seem to set any breakpoints in my code, so it doesn't do much.  Can you provide some guidance as to how I could use it to debug a hypothetical problem in the booking sample app? \n(E.g. how to set a breakpoint at a particular file line, or at a particular function.  Or maybe there is another useful way to operate it?)\n. Yes.. that's a good point.\n. (It looks like #297 is handling it, goodie)\n. Sounds reasonable! \n. I think this should apply to the flash cookie as well.  Otherwise LGTM!\n. Thanks!\n. Ah, my assumption of the error was incorrect before.  Thanks for providing a stack trace.  You can see the problem is at field.go:16\ngo\nfunc NewField(name string, renderArgs map[string]interface{}) *Field {\n    err, _ := renderArgs[\"errors\"].(map[string]*ValidationError)[name]\n    return &Field{\n        Name:       name,\n        Error:      err,\n        renderArgs: renderArgs,\n    }\n}\nIt doesn't defend against the possibility of renderArgs being nil or \"errors\" not being present in RenderArgs.  \"errors\" is added to RenderArgs by validation.go:\ngo\n    // Add Validation errors to RenderArgs.\n    c.RenderArgs[\"errors\"] = c.Validation.ErrorMap()\nSo, I would guess that the filter is either disabled, or you did not pass the top-level RenderArgs to {{field}} (for example, you are in a sub-template or a loop where dot {{.}} no longer refers to the overall map).  \nI pushed this fix to provide a better error message:\nhttps://github.com/robfig/revel/commit/bd5d6c8f79c13577200a5336dbb1180f7e497d55\n. Thanks!\n. Revel can serve on a subdomain.  Did you have a more specific question?\n. Presently you can not match routes based on a subdomain.  Pull request welcome\n. The HTTP Client is automatically following redirects.  If you don't want that behavior, you have to configure it -- you can access it as c.Client in a Before() method\nHowever, I would instead just write your tests with that knowledge, and succeed when you get 200 back and are on the expected page via a redirect\n. Move gorp to e.g. /app/db/ package so both your job and your controllers can depend on it \n. Nothing requires you to put your jobs in a separate package. If you prefer, all of your code can go into controllers and then you won't have any cycles! \n. I would suggest storing it in the cache in that case.  \ngo\ncache.Set(c.Session.Id() + \"_text\", value) \n...\ncache.Get(c.Session.Id()+\"_text\", &value)\n. The default cache implementation stores the data in memory.  If you have multiple instances of your server, this will not work without making the user sticky to a single instance.  The workaround there is to configure cache to use a memcached cluster.\nOverall, it is easier to scale web applications to more machines if you don't have to maintain server-side state for each user.\n. Not really.. but I don't think making that func exported would solve your problem either (since the session would have been reset by the time you get to it). \nI think the thing to do is to take revel.SessionFilter out of your Filters entirely, and replace it with your own custom implementation (probably largely based on copy-pasta from session.go)\nHow does that sound? \n. Seems like a reasonable idea -- only thing I wonder is if it makes more sense to just have this property as an exported variable on the TemplateLoader, since I can imagine there are other configuration to add later, and adding a constructor parameter for every one doesn't seem to scale \n. Sounds reasonable\n. Thanks for contributing the update! I had a few comments..\n. Also, FYI, this is a related pull request that just came in:\nhttps://github.com/robfig/revel/pull/307\nIt makes me think that the \"new\" command should be able to use any third-party repository, and I can have a list of the ones I know about provided in the application.  Maintaining many different skeletons is too much work for me, I think.\n. Boy, this pull request adds 130k lines of code to the repo.  I can barely keep up with the questions and pull requests as it is.  Adding so much skeleton app code to the repo would increase the maintenance burden a lot.  \nI think a better approach is to have \"revel new\" able to take a skeleton from any github repo.  I would also be happy to keep a list of known good skeletons hardcoded in the application, but I don't want to maintain all of the skeletons themselves.  Also, having the flexibility for anyone to create a shared skeleton and distribute it trivially seems like a good thing. \nAs an aside, I see that you have included all of the source for boostrap / foundation / etc.  When I use bootstrap in a project, I only take a single CSS file -- what is the motivation to take all of the component source files?  Does it make it easier to customize? \n. You have to build the revel program first.  Take a look at revel's .travis.yml, where it does that, gets a number of dependencies, and then tests the sample apps \n. c.Response.Out.Header() \n. It seems to me like your GOROOT is set incorrectly.  Please try removing the \"export GOROOT\" from your .profile -- it isn't necessary to set in any case and can only cause problems.\nWhat is the output of \"go env\" ? \n. It seems like we may want to \"go get\" the provided import path for the user -- seems like a common case is not having it cloned yet.  What do you think?\n. That would be good.  FYI, the build process does this - check out harness/build.go \n. in new.go -- just pointing you there in case an example is helpful\n. Edge go breaks the template?  That's good to know, thanks.  I should make Travis test on that as well... \n. Cool idea!! \n. Hi!\nI haven't planned to make the logging pluggable.  I'm not against the idea, but it seems like a lot of work when there are much bigger fish to fry.  Also, it was my impression that different loggers have different models -- I guess Revel could pick one and define interfaces around them, and then each logging system could have an adapter?  \nThere is a great benefit in having all code use the same logging package, so it does seem like a good thing to have, overall.  My only concern would be getting the interface good enough.\nYeah, I was unhappy with my homegrown usage of the standard library logging package.  I looked at a couple, including seelog. I ended up choosing glog because:\n- It can be used from any application.  I want to use the same logging in my libraries and non web apps as I do in my web apps.  Corollary: logging should not depend on the revel package.  (This was one reason why I hated the initial thing I made)\n- Since it is released by the Go team, it seems like it may end up as more of a standard.  Having code use the same logging package seems pretty important.  In Java, apache commons-logging was about the only game in town, so I think it happened naturally.  In Go, the situation is much less clear, but the standard-library logging is not powerful enough to be the only thing people use, IMO.\n- Configuration is very simple, and the defaults are good / don't really need to be overridden in many/most cases.  (\"Pass --logtostderr if you want to see everything in your console, otherwise only error logs go to stderr\" is a nice model)\n- It has just enough features -- I am definitely tainted since I used to work at Google and have missed the logging infrastructure for a while, but I felt like these 3 features were very important: \n  - Ability to set the logging level of a particular file -- e.g. if I want to debug what's going on in a part of the application, I don't want to turn on TRACE logging for the world, just for the particular file.\n  - Ability to pass in a flag to log to stdout -- when I'm developing, running with --logtostderr is great, although you don't want that in production.  It's convenient to do that rather than maintain two separate sets of configuration.\n  - Short and sweet API, glog.Info() from any file, without having to define a package level logger or anything.\n. I have already made the switch to glog in the dev branch.  I have not merged everything since I want to make more breaking changes yet keep things stable since people are using revel already.  But, the dev branch is pretty stable and I'm using it for a new project which will hit production in two months or so.\n. As I'm getting more experience with making Go apps, it seems like a mistake for a library to require a specific logging library, because different ones have different capabilities, and developers will integrate code that does not use the same logger.  \nThe lowest common denominator is the pkg/log logger, and it does provide a logger.SetOutput call that can funnel the revel loggers into any third-party library.  The bad case is revel using glog and other code using seelog or log4go, or whatever.  \nI do think the pluggable logger could be a good idea, but maybe the logger.SetOutput is enough to interoperate...\n. Thank you!  Just a small comment\n. Just a couple comments.. Thanks!!\n. Thanks!\n. Yes, please do.\nRegarding the failure to show the right template file, I'm afraid the reason is that the information is simply not available from html/template.  When I add the same sort of error to header.html in the booking sample, I get this error back from the template.Execute call:\ntemplate.Error {\n     1  .  ErrorCode: 5\n     2  .  Name: \"Application/Index.html\"\n     3  .  Line: 46\n     4  .  Description: \"no such template \\\"nope.html\\\"\"\n     5  }\nIt doesn't say that it was actually in header.html, and I don't see any way of getting that information.  On the bright side, I think the common case is that the shared templates remain pretty static while most development time is spent on the leaf template.\nI suppose one improvement could be detecting that this problem occurred (for example, in this case the reported line number is actually higher than the number of lines in Index.html) and reporting that, but I'm not sure how often that will be possible.  \nAny ideas?\n. I've heard before that the auto-reloading does not work in Vagrant.  @jgraham909 , did you get specifically that to work?  \nI don't use Vagrant personally, and I'm not sure what the problem is.  Certainly happy to support it if a change is needed / would help. \n. Thanks for the links and explanation, @jgraham909 ! \n. This should really come built-in, but you can use FilterConfiguringFilter to configure which filters are invoked for any controller (or action).  Check out revel/filterconfig.go or filterconfig_test.go for some examples.\n. To elaborate my view -- presently I believe the session, flash, and validation filters add cookies to every response.  However, the only responses where they are potentially useful is HTML web pages.  Static serving, JSON APIs, or other non-typical-web-page responses would find them annoying. \nMaybe the solution is to add the cookie only if the returned content type is text/html \n. Thanks!\n. Thanks for the contribution!\nRegarding the implementation - the browser treats cookies as \"session\" cookies if no Expires is set.  In this implementation, it looks like Expires will always be set to time.Time{}.UTC().Unix().. \n. Ah, I just now read the mailing group thread -- the Go implementation ignores values less than 0.  \nHow do you feel about using \"session\" to configure it for session length instead of \"0\" ?  It seems much more clear in the config, and I don't think it would require much more code.\n. LGTM.  Just the formatting comment\n. Thanks!\n(there is no notification when you push a new commit, so commenting is the only way to put it back on my list of stuff)\n. Actually, what do you think about adding all of these to the default RenderArgs: \n.Session\n.Flash\n.Request\n.Params\n.Errors\n. Exactly, to run on port 80 you have to \"sudo revel run\" your app. \nHowever, your nginx solution should have worked.  What failed when you tried that?\n. The http.addr variable should be the IP address you want to bind to.  To use it with nginx, you should set it to 127.0.0.1 \nRegarding the difficulty running revel in sudo -- I have run into that many times, since the Go environment is configured per user.  As root, run \"go env\" to see what the current situation is.  I have never seen a situation where GOPATH is set but revel doesn't find it -- if that is really happening reproducibly, I would be happy to dig in and fix it.\n. That is probably due to either:\n- an existing process running on that port\n- the specified http.addr not being available on your machine\nlsof -p 9000 should report any process running on port 9000.  You can specify http.addr= (empty string) to bind to wildcard ip. \n. If you use curl / wget to access \"localhost:9000\" from the host machine, does that work successfully?\nIf so, then I guess it is a firewall issue?\n. Back to the basics: yes, I would expect that configuration to bind on every available IP, port 9000.  Revel does not do anything special with the HTTP server, so this should be the minimal reproduction: \n``` go\npackage main\nimport \"net/http\"\nimport \"log\"\nfunc main() {\n  http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { \n    w.Write([]byte(\"Hello world\"))\n  })\n  log.Fatalln(http.ListenAndServe(\":9000\", nil))\n}\n```\nDoes the above program work when you \"go run\" it?\n. ACTUALLY, I forgot about this -- the harness binds to localhost instead of wildcard (if you are running with \"watch.code = true\").  I guess I didn't expect that to be used in production -- you could try commenting this out and rebuilding the app: \n``` go\n// revel/harness/harness.go:NewHarness\nif addr == \"\" {\n    addr = \"localhost\"\n}\n\n```\nSorry I didn't realize it before\n. Thanks, seems like a good thing to do.  \nA reverse proxy is so common that it probably makes sense to even overwrite the Request.RemoteAddr with the X-Forwarded-For \n. I think modifying github.com/robfig/pathtree to treat extensions as a special case would be the simplest way to go about this.  \nAn alternative is to go back to the more flexible (although slower) regex router. \n. SGTM, just needs implementation.\n. Yes, I meant the time to route a single request using the original regexp router that Revel started with.  I think there was a set of router benchmarks flying around lately, but here's a blog post that illustrates the difference:\nhttp://blog.ant0ine.com/typepad/2013/02/better-url-routing-golang-1.html\n(pathtree is actually faster than the one he is writing about, benchmarking them against the same 100-route file)\nPresently the implementation is very simple due to the simple model.  Adding multiple variables per path segment would certainly complicate it.  I think the addition should be limited to a dot-extension, and only on the final path element.\n. Very cool.   A couple thoughts:\n- It's too bad that so much of the code is dedicated to doing the function invocation -- maybe we could extract a helper for that (since I think revel already does that exact same thing somewhere else..)\n- I would like to start extracting functionality to slim down revel core.  This could function perfectly well as a standalone package.\n- Providing an auth module like Django's could be very helpful, and I would be interested to do that.  However, this pull request appears to be a re-implementation of interceptors (intercept.go), and provides almost the same functionality, so I would not be inclined to commit it as-is.\n. I'm not sure what you mean\n. Very cool, thank you!\n. Seems reasonable to me! \n. It hasn't been an issue yet.  By the time it becomes an issue, hopefully the community will have converged on a solution for this problem. \n. Thanks!\n. Yeah, the logger complains if it can't figure out the right key for a validation statement, even if you specify one separately.  We could probably just remove that logging statement altogether. \n. Thanks!\n. Agreed, this CL looks good.  Can you also update .travis.yml to run the Redis service?  I don't believe that your tests are included as part of the continuous build as-is.. (otherwise, I'm not sure how it passed!)\nThank you\n. Thanks\n. Ah, relative import paths. \nFair enough.. \n. Your import path is incorrect.  You are compiling the library, not the command line tool.  \nTry this (from the quick start on the front page):\ngo get github.com/robfig/revel/revel\n. Sure, please submit a pull request.  \nIn the meantime, you do not need to \"chmod\" it.  Just invoke it like \"bash run.sh\" instead of \"./run.sh\"\n. Agreed\nYou could do it today with: \n``` go\nfunc init() {\n  revel.OnAppStart(func() {\n    revel.FilterController(static.Static{}).Add(cacheForever)\n  }\n}\nfunc cacheForever(c *revel.Controller, fc []Filter) {\n  fc0 \n  c.Response.Headers()[\"Cache-Control\"] = \"max-age\"\n}\n```\n. Yes, that should probably be fixed to have identical initialization order regardless of mode. \nIn server.go:\n``` go\n    // If desired (or by default), create a watcher for templates and routes.\n    // The watcher calls Refresh() on things on the first request.\n    if MainWatcher != nil && Config.BoolDefault(\"watch.templates\", true) {\n        MainWatcher.Listen(MainTemplateLoader, TemplatePaths...)\n    } else {\n        MainTemplateLoader.Refresh()\n    }\nServer = &http.Server{\n    Addr:    fmt.Sprintf(\"%s:%d\", address, port),\n    Handler: http.HandlerFunc(handle),\n}\n\nrunStartupHooks()\n\n```\nSo in dev mode, the templates are not loaded until the first request hits the WatcherFilter:\ngo\nvar WatchFilter = func(c *Controller, fc []Filter) {\n    if MainWatcher != nil {\n        err := MainWatcher.Notify()\n        if err != nil {\n            c.Result = c.RenderError(err)\n            return\n        }\n    }\n    fc[0](c, fc[1:])\n}\nInstead, even in dev mode, things should be initialized eagerly.\n. Similar comment as in #360\n. Ah, didn't realize that.  I guess RenderHtml() taking just a string would be ok\n. If we remove the note, then perhaps we should also change it back to use the official goauth2..\n. Cool, thanks!\n. No need, you can just as easily do \ngo\nreturn revel.RenderHtmlResult{html}\nAlso, I do not want to encourage producing HTML with string formatting functions.  It is better to use templates to avoid escaping problems. \n. How about this\n``` go\nvar routeData = map[string]interface{}{\n  \"App.Index\": \"Mydata\",\n  \"App.Other\": \"mydata2\",\n}\nfunc (c App) Index() revel.Result {\n  data := routeData[c.Action]\n  ...\n}\n```\n. Nope, sounds like a good change.  (May need charset=utf-8 in more places than just JsonResult, actually...)\n. Seems like we should go through and make all paths everywhere use forward slashes, per https://github.com/robfig/revel/issues/260#issuecomment-22956737\n. Boy, this configurable delimiters thing is really turning into a nightmare.  There must be a better way to do it than now changing all non-revel templates to use the same one?\n. I think the reason I didn't originally do this is that some of the app.conf settings can affect the harness, which is not restarted.  It may just be the http.port and http.ssl settings though, so maybe it's still worth doing it. \n. (Filenames are not case sensitive on Windows or OSX) \nSeems fine to me\n. I meant that it seems easier for all reasonable cases if the matching is case insensitive.  \nFWIW, Go does not allow foo.go and FOO.go in the same directory, for exactly the reason that such a thing is not possible on all platforms\nThanks Brenden!\n. Thanks!\n. LG, just 1 comment.  \nIt would be nice if it was more flexible in general -- the previous messages were optimized for showing the error message inline next to the field (probably the UX-preferred way to handle form validation).  These defaults are optimized for showing all messages at the top (Eng-preferred way).  Too bad we can't have both! \n. Thanks!\n. Thanks!  Do you mind also updating the tests? \n(You can see the failure if you click through to the Travis build)\n. It must be pretty rare to use different charsets for different actions and want to test that.  I would be fine if the AssertContentType stripped the charset entirely though. \nIn the meantime, this PR is fine\n. Must be an oversight, thanks\n. Thanks!\n. Thanks\n. I think this particular case would \"just work\" if we overwrite the RemoteAddr with the X-Forwarded-For.  On the other hand, it's not obvious where that should be done or if we should create a method to get it, falling back to RemoteAddr.\nI guess this is fine\n. SGTM!  FYI, I think you can get the import path with:\ngo\npwd, _ := os.Getwd()\nimportPath = filepath.Rel(filepath.Join(build.Default.GOPATH, \"src\"), pwd)\n. FYI, things don't have to be marked \"Contributor ready\" for others to work on them -- I just meant that as a helpful flag, not a hard and fast rule :)\n. I'm running Go 1.2 and Mavericks and have no trouble running the booking app.. what problem are you seeing?\n. Not sure I understand the difference between that and just having [dev] and [prod] sections in the app.conf? \nFor DB credentials, the best practice is providing them as environment variables, which, IIRC, can be referenced directly from app.conf e.g.\ndb.spec = ${DB_SPEC}\n. Not sure it's worth the effort, to be honest.\n. Yeah, ideally feature ideas / requests would go to the group for wider distribution\n. I don't think it can be removed until Go 2, based on the compatibility guarantee.  I recall reading a thread about it on golang-nuts -- the reason for the change is just that debug.Stack potentially allocates a bunch of memory to store the returned stack, and the thought was that it may be called exactly when the program is crashing and unable to allocate memory.  Our usage of that in revel is not when the program is crashing, just when we want to get a stack trace so I don't think this concern applies in our case.  Overall it could improve performance for servers that log a bunch of errors, and could be upgraded at some point, but it doesn't seem too important. \n. I don't really see anything here that motivates me.  Despite not being a C programmer, I don't find Go conventions on naming to be confusing, and I vastly prefer succinct variable names to verbose.  There are many reasons I could make up to rationalize that preference, but I think that's well-trodden ground.  Certainly I don't see any value in the initial example provided to open the ticket.  I believe that variable names should be appropriate for their scope.  Errors are handled locally, so their scope is effectively 3 lines or so.  err is perfectly descriptive for that scope.  If you want to reference it 100 lines later, then I agree that a more descriptive name is called for. \nAnyway, this seems more like a discussion topic than anything actionable.  I'd better close it before @brendensoares asks me to :)\n. SGTM\n. go get does work, though.\n```\nusage: go get [-d] [-fix] [-t] [-u] [build flags] [packages]\nGet downloads and installs the packages named by the import paths,\nalong with their dependencies.\n```\n. Does this leave the caller in a different directory than where they started?  That could be fixed by following it up with a \"cd -\" or something, I think\n. Can you provide details on what the concrete error type was for the request you're trying to fix?\nFor example, you are checking for LinkError, but according to its description, it is only returned on a failed file link/unlink operation.  So I don't see how that could be relevant here.\n. The database/sql package (and by extension, libraries like Gorp that wrap it) expose a single thread-safe handle to a database connection pool.  When running transactions against it, it automatically creates or \"checks out\" connections for you to use and returns it to the pool afterward.  I don't think there is any point to ever \"Close\" it. \n. SGTM\n. Not sure if this is helpful, but FYI the \"-X\" flag:\nhttp://golang.org/cmd/ld/\n. Agree 100%.  I was thinking that mechanism could entirely replace interceptors. \n. Thanks!\n. Sounds great, I look forward to the patch.  You may find it harder than you expect, due to the \"no circular imports\" rule and validation being used in a Filter.  \nFWIW, revel/cache is also its own sub-package.\n. Being encrypted is not required in the usual case for session data.  Out of curiosity, what is your use case? \nAdding a configuration option to enable encryption could be ok, but that may be too specialized an application for this and perhaps developers should just create their own thing instead of using revel.Session.  For example, they probably want to specify which cipher to use, and the cipher setup can be a huge pain, etc.\nPersonally, I doubt this is worth the effort or complexity.\n. Instead of requiring every message sent to the Logger to be colorized, why not update the loggers so that e.g. all messages logged through WARN are colorized in that way, etc.  Then the change is small and localized, instead of gigantic and sprawling, and maintainers don't have to remember to add the color variables to every log message\n. I think loggers have a SetOutput method so you could pipe everything\nthrough your colorizer\nOn Jan 2, 2014 8:16 PM, \"Aaron Torres\" notifications@github.com wrote:\n\nHmm I'd like to do something like that but I'll have to give it more\nthough as to how. I'd have to wrap a bunch of methods since there\nERROR.Println, ERROR.Printf, ERROR.FatalLn, etc.\nIf it's OK to color all of the text on a string instead of just arguments,\nit's pretty simple to wrap these I think, although it may be slightly less\nefficient for Printf. My thought here would be something like this:\nPrintf -  Fmt.Print(ERROR_COLOR(sprintf(...args)). Println - Fmt.Println(ERROR_COLOR(...args)) FatalLn - Fmt.Println(ERROR_COLOR(...args)) exit(1)\nMaybe it can be done by implementing io.Writer also for efficiency. I'll\nthink about it some more and update accordingly. If anyone has any\nsuggestions I'm happy to discuss.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/436#issuecomment-31499251\n.\n. You can just write it to the ResponseWriter. \n\nIf you want a catpcha, you can use this: \nhttps://github.com/dchest/captcha\n. Note that semver says that pre-1.0 releases have backwards-compatibility-breaking minor releases.  e.g. 0.7 to 0.8 is allowed to break compatibility, but if you want to do it after 1.0, then you have to go to 2.0. \nTypically, once you are satisfied that you don't need to break compatibility for a long time, you go to 1.0 (since major releases are generally reserved for a very large batch of new stuff, rather than tweaking existing interfaces). \n. This should work if they are the same type. Please provide an example where\nit does not.\nOn Jan 7, 2014 5:49 AM, \"winter\" notifications@github.com wrote:\n\ncase float32, float64:\nswitch b.(type) {\ncase float32, float64:\nreturn reflect.ValueOf(a).Float() == reflect.ValueOf(b).Float()\n}\nCan't compare float with \"==\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/449\n.\n. You have pointed out two things:\n- float32(1.1) != float64(1.1)\n- revel.Equals(float32(1.1), float64(1.1)) == false \n\nI would say that the Equals function is working properly\nIf you want to compare float equality, I'd suggest using the same types or using a dedicated comparator that takes a tolerance.  There is no way for the Equals function to know that those two different values were the result of a conversion from untyped constant, and I don't think it would be appropriate to hardcode a tolerance into it.\nHope this helps\n. The reason is that 'go build' ignores files with the _test.go suffix. Just\ndon't do that.\nOn Jan 7, 2014 12:12 PM, \"Don Han\" notifications@github.com wrote:\n\nsorry, i mean the underscores in the test files' names, like app_test.go\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/450#issuecomment-31757076\n.\n. It wasn't named as a Filter - the Filters are meant to be wrappers that pass on the request, and this is the terminal point, when it invokes the user code and returns.\n. The filter right before it would have to invoke it somehow.  How do you suggest, if it's not a filter?\n. If people are pulling a new version of revel, they may as well pull a new version of fsnotify.  Please do submit a PR for ignoring attribute changes.  Thanks!\n\nAlso, I really thought that dot files/directories were already ignored by watcher.go.  If that's not the case, then we should change it\n. I think you can do this already with \"log.level\" in app.conf\n. How is that different from levels? \ne.g. this:\nlog.trace.output = off\nlog.info.output  = stderr\nlog.warn.output  = stderr\nlog.error.output = stderr\nSets the log level at \"INFO\"\n. True .. this other syntax allows you to send logs to different places, e.g. ERROR.log, INFO.log, etc , but perhaps that is unnecessary complexity\n. I don't super care, but like @landr0id I find the go* naming convention for libraries pretty annoying.  (especially when the directory name then doesn't match the package name, or it adds a directory level) \n. Up to you guys, since you're the ones doing the work :~)  either way, I added ya'll to the revelframework org \n. Getting started\n$ go get github.com/revel/revel/revel\nThanks Justin :)\n. I think the package was originally named cmd actually, but we want the tool name to be \"revel\" and \"go get\" uses the directory name for the binary name. \n. :+1: revelframework.org\n. Seems like a common case so could add an Ok() factory function that does that.\nNote that it is not the intention that 100% of things are done through revel.  Don't be afraid to access the http.Request/ResponseWriter provided to you on the Controller instance.\ngo\nc.Response.WriteHeader(204)\n. It seems pretty uncommon to want to vary error classes by field.. in my opinion, that use case is far short of being motivating enough to make a breaking API change and forcing all callers to specify the error class every time.  \nInstead, how about one of these two solutions:\nLook for an override in render args\nFor example\n{{set . \"ERROR_CLASS\" \"my-error-class\"}}\n{{with $field := field .. }}\nor maybe it could look up something more specific to field, so that it could be injected to every render args as global data\nif overrideErrorClass, ok := renderArgs[name + \"_errorClass\"] ; ok {\n  ... use overrideErrorClass\n}\nImplement your own field class\n``` go\nrevel.TemplateFuncs[\"field\"] = MyNewField\ntype MyField struct {\n  revel.Field \n  ErrorClass\n}\nfunc MyNewField(...) *MyField {\n  return ..\n}\nfunc (f MyField) ErrorClass() { \n  return f.ErrorClass\n}\n```\nDo either of those work for your case?\n. Thanks!\n. I'm surprised the test suite didn't catch this -- it does create a new app and run it. \n. Many of those tools have builtin ways to handle this.  For example, the sass command line tool has a \"watch\" mode where it only recompiles on change, and it will not recompile if the source file hasn't changed (so even if you run it every time on startup, it would not recompile your CSS every time).  \nI'm not familiar with grunt, but it would be quite a poor build tool if it didn't allow you to use that sort of functionality...\n. Grunt doesn't have to do the watching itself, but both sass compilation (sass, compass) and JS compilation tools (plovr) already do it, so maybe ask grunt to invoke the watch mode on the compilation tool instead the blind compile? \n. One line of thought says that such sensitive things should be passed in as environment variables rather than files that are checked in.\n. Thanks for the contribution!\nCan I ask what is the motivation for this?  \nAssuming there is one, why use sha256 instead of using the random bytes directly?\n. I'm still not sure why the session has to be cryptographically random (and why 64 bits isn't enough).  What can an attacker do with a session id? \n. @pushrax  \"If you have a user's session ID then you are effectively logged in as them, no password required.\"\nIs that true?  I think they either need to have the full cookie, or they need to be able to forge a signature.  I don't see how knowing the session id alone helps them do anything.  Anyway, I guess it doesn't hurt anything.\n. There is a standard logger... I think revel uses the stdlib \"log\" package.  I can see a couple options for the developer for structured logging: \n- Use their own logging helpers that take structured data and write to the revel loggers\n- Use their own logging system and use logger.SetOutput to forward revel logs to it\n- Use their own logging system entirely and turn off the revel loggers\nStructured logs have a higher barrier to entry, and I haven't worked on projects that have bothered with them myself, so it may not be such a universal requirement.\n. The defaults do specify a e.g. \"INFO \" prefix -- that can be configured.  If you add this line to your app.conf, you will get just the message that is logged, IIRC: \nlog.info.flags = 0\n. Also, you could still log.Println the \"Listening on.. \" message, and just fmt.Println and swallow some other identifier.  \nI didn't see any other straightforward crossplatform way to do it.  You could create some kind of known endpoint just for this, but is that really better? \n. See discussion here \nhttps://github.com/revel/revel/pull/153\n. I see -- well, I think that val.(string) will panic if the type of val is not string.  \nThe form you want for a single type is\ngo\nif val, ok := val.(string); ok {\n  .. val is a string ..\n}\nor for testing against multiple types: \ngo\nswitch val := val.(type); {\n  case int: \n    // val is an int\n  case string:\n    // val is a string\n}\n. It's exactly as @anonx says\n. No reason, as far as I recall\n. Looks like the only change to this line is extra space at the end.\nIt's worth figuring out how to get your editor to apply gofmt on save, or something like that.  (Makes developing go much easier to never have to remember to run gofmt explicitly again)\n. FYI, you can omit the type on these declarations\n. You don't seem to gain anything by naming the return value.  Unless you use the name as documentation or to assist implementation by declaring the variable, I would suggest omitting it since it adds complexity (it's another variable in scope to think about). \n. FYI, len(args) == 0 when args is nil (so the args != nil check is redundant) \n. I think this is fine, but it is also an option to do:\nInitHooks = append(InitHooks, func() { loadMessages(path.Join(BasePath, messageFilesDirectory)) })\nif you don't want to create a named function for it.\n. I don't think \"CurrentLocale\" adds anything over \"Locale\"\n. Why not use CurrentLocaleRenderArg here, instead of hardcoding \"currentLocale\"? \n. Sure, thanks!\n. Please rename \"array\" parameter to something else, now that it can be either an array or an integer.  Perhaps \"arrayOrLength\", or something neutral like \"item\" (since you do type dispatch later to decide what it is).\nAlso, I think we should return string since we don't do any HTML escaping.  (instead of template.HTML)\n. Great.  I would make a small tweak to make this a little more idiomatic and cleaner (and also warn the user if they don't pass an expected type) \ngo\nswitch v := reflect.ValueOf(array); v.Kind() {\n  case reflect.Int: \n    if array.(int) != 1 {\n      return plural\n    }\n  case reflect.Slice:\n    if v.Len() != 1 {\n      return plural\n    }\n  default:\n    ERROR.Println(\"pluralize: unexpected type \", v)\n  }\n  return singular\n}\n. There is a lot of path.Join debt in Revel overall, but I think you want \"path/filepath\".Join -- path.Join always uses \"/\", not os.Separator. Same for \"path/filepath\".IsAbs().  Aaaand, I think you need to do filepath.FromSlash(filepath), to convert dir1/dir2/file.png to dir1\\dir2\\file.png when necessary.  \n(Booo windows)\n(Honestly, it is a little unclear to me when forward slashes work on Windows and when they break it -- it is entirely possible that os.Open automatically handles that conversion.. I haven't tested it.  If you have a windows machine and it works there, that is also good enough for me!) \n. Out of curiosity, why do you distinguish between FixedArgs vs FixedParams?\n. It looks like the old regex handled whitespace at the end of a line, but the new one doesn't?\n. (You might have said this is in-progress, but it would be good to have a test for relative path (where the URL path is different from the filesystem path) and absolute path)\n. Cool\n. I guess you can not call RegisterController for the real controller due to circular dependency.  We could do that if this was in a different package, but then it would not be able to call any un-exported functions.  Blarg.  \nI guess this is the best solution for now.\n. Are quotes actually necessary for the CSV module to return the args?  Seems like it should work without\n. What do you think about adding the FixedParams to the Controller.Params map, associated to the corresponding argument names?\nThat way, they would be present in .Params if the developer access that, you would get the binding for free, and the binding would also take the argument type into account. \n. Should also update the skeleton app\n. Yes -- I meant to suggest taking the names from the first N args of controller.MethodType.Args -- specifying arg names in the routes file is definitely overkill\n. Ok, yea, the same is good.  \nFYI, Controller.Params and Controller.Args are entirely different uses: \n- Params has all of the request parameters\n- Args is a generic map that the action can use during the request processing \n. Do you mind reverting these few no-op line changes?\n. Please use \"i\" instead of \"key\" if it's just an array index.  (It makes me think that FixedParams is a map)\n. Please check that Args is long enough -- if not, it can just break the loop.  (can log something to WARN or not)\n. How do you want to handle module staticDirs? \n. Too bad it's just a parameter position issue that prevents having a single Serve method.  I don't really see a way around it though\n. It doesn't seem like this would work for absolute files, e.g. Static.ServeFile(\"/Users/robfig/profile.png\").  That seems like it should be desirable?\n. Please reset this file to head (looks like it is a revision behind) \n. This file is behind too\n. I believe it's a little more idiomatic to do:\ngo\nif v, ok := c.ReadSeeker.(io.Closer); ok { \n  v.Close()\n}\n. This has gone quite long -- please extract a func \n. It seems that this may be slightly simpler (and equivalent)\ngo\nint64(a) == int64(b)\nDitto for the others\n. Actually -- I'm not sure if my suggestion works, since it will probably complain you can't cast type interface{} to int64.  Never mind! \n. (You could save a line per case by omitting default and moving the return false outside the switch)\n. At least on this one you could do the \ngo\nreturn a.(string) == string(b.([]byte))\n. I certainly have nothing against it!  Thanks for the promotion, and I'm interested to see what you build! \nAlso, there is nothing that you need to do with this comment -- it was an incorrect suggestion on my part. \n. (similar to how I extracted a func for ReverseUrl) \n. Please extract this into a named function. ( It's too big to go inline )\n. This will create a copy of the byte slices -- I would use this instead:\nhttp://golang.org/pkg/bytes/#Equal\n. Instead of hard coding a case for one type of slice, you could use reflect.DeepEqual() to do the comparison (which will work as long as the element types are equal, and it will work for slices of all types). \n. reflect.DeepEqual() should handle this case as well\n. Actually, I think reflect.DeepEqual would work for all types, as long as the types are the same (so this entire branch) \n. a rune is treated as an int32, so it would be part of the test in the switch statement.\n(there is no way to tell the difference between those types at runtime, afaik)\n. I wonder about the necessity of doing this -- I think that a rune and a string are pretty distinct types -- when does this come in useful?\n. Does the default expiration time mean that it expires immediately, or never?\n. I think it makes sense to parse the session duration once on startup, and store it in a time.Time (e.g. a package-level variable or a SessionPlugin member variable) so that we don't have to re-parse on every request. \n. I think this is probably fine, but I am personally curious why Play! goes through such lengths to verify that the expiration time is respected.  It sets the timestamp in the session, signs it, and uses that to verify it, so that a malicious client can't use the cookie after expiration.  I'm not sure if there is a use case that we should concern ourself with..  Thoughts?\n. Capital P\n. Oh, I see what you're saying.  Actually, the indentation of the comment threw me off -- I thought it meant to say that one of the variables could be a rune exactly where the comment is (in the case before you meant it).  Apologies \n. Hm, I want to make things convenient for the developer, but I don't think that extends to not requiring them to know the difference between a rune and a string.  I think any real use case would involve a constant expression where the fix is as simple as changing single quotes to double quotes, no?  \nAnother counter argument is that, unless I'm mistaken, this would then be the case:\ngo\n53 == \"5\"\n50 != \"50\"\nwhich seems weird.. \nAnyway, there is definitely a gray area of how much conversion we should do.  Here is the scale as I see it:\n1. Equivalent value and type (most conservative)\n2. Equivalent value but different type size (int32 vs int64)  (initial request)\n3. Equivalent value but requires type conversion ([]byte to string)\n4. Different concrete value, but identical conceptual value (\"52\" vs 52, rune('5') vs \"5\", []int{5} vs 5)\nI was ok with []byte to string since that is a very common conversion and they really are the same underlying thing.  But I see a line before that last step which I am not comfortable to pass right now.    Sorry!\n. Wow, what an extensive test!\n. It seems like there should be an int(i) in here too?\n. All of these \"for\" loops would be a good candidate for a table driven test. \ne.g.\n``` go\n{\n  { ints, ints, true }, \n  { ints, ints2, false },\n  { ints2, ints, false },\n ..\n} \n.. code to run the table .. \n```\n. I don't think we get much value from many test cases to check that unrelated types & values are not equal...  that is the default state of this thing.  (It's good practice to be thoughtful about which cases are worth testing, rather than indiscriminately testing everything)\n. I think it would be worth having one test for comparing a slice of integers \n. Sorry to nitpick, but please put this at the bottom of the file, by ReverseUrl (I would like to keep them grouped, and I would like to keep the primary template stuff near the top for code organization)\n. Please don't put unrelated changes into an ongoing Pull Request.  I am happy to add more form helpers, but that should be a separate thing. \n. Newline before this func\n. I'm not sure a benchmark for this one test case makes much sense to keep in the test suite.  (I think we wrote it because we were curious about that one case, not because we are interested in its performance over time) \n. I think it's more idiomatic to set all of these things in the initializer for the map.  For example, \ngo\ntype list []interface{}\ntm := map[string]list{ \n  \"slices\": list{slice, slice2}, \n  \"slices2\": list{slice3, slice4}, \n  ...\n}\n. Another nitpick, the convention for documentation is to start each doc comment with the name of the thing being declared (http://golang.org/doc/effective_go.html)  (I'm bad at this myself, but it looks like you meant to do it here anyway)\n. Also, if you initialize the map before the testRow func, you can have the signature be:\n``` go\ntm := ...\ntestRow := func(key1, key2 string, expected bool) {\n   // t and tm are available here because the closure was defined with them in scope\n}\ntestRow(\"slices\", \"slices\", true)\ntestRow(\"slices\", \"slices2\", false)\n```\n. Please remove the parens around the if condition (I thought gofmt might do that, but obviously not) \n. What do you think about using strings.ContainsAny(key, \":\\x00\") (in place of the serial checks) ?\n. I think \"Host\" would be a better name \n. Please add a newline after the end of the func \n(gofmt should take care of that) \n. I think we can simply change MakeRequest instead of having two versions, unless you see a reason to keep a non-session version around.\n. It is not idiomatic to use parens\n. ditto\n. this is equivalent to make([]controllers.TestSuiteResult) \n. (And please put it under the comment -- I like to have a code structure like: \n// Describe what block of code does\nblock\nof\ncode\nIn this case it's no big deal, but still, a little wacky to have that comment sandwiched between two variable declarations..) \n. Space between string and { \n(I found it helpful to configure my editor to run go fmt every time I save) \n. You should use os.Stat() to get the size.  No need to open the file. \n. It is more conventional to have *testing.T be the first argument, and that local functions begin with lower case. \n. What writes the resp.Headers to the response then? \n. This is not actually necessary unless the command line tool was the target of the change. \n. This is a good example.  I think it would be better to put it in an existing sample app though.  Booking seems to demonstrate the most features, so probably that one is best. \n. A little bit better: \ngo\npath.Join(revel.BasePath , \"public\", \"js\", \"sessvars.js\")\n. One more tweak -- please use c.Name instead of c.Type.Type.Name() a second time. \nThanks!\n. I don't think there's any need to add the CodePaths if you're already watching all of the gopaths\n. Please only watch the GOPATH/src subdirectories. \n(otherwise I think it will trigger changes when stuff gets installed into the /pkg subtree, etc) \n. over-zealous find-replace? \n. spelling, \"separator\" \n. I think that this is usually called a \"slug\"\nhttps://en.wikipedia.org/wiki/Clean_URL#Slug\nhttps://docs.djangoproject.com/en/dev/ref/models/fields/#slugfield\n. I would suggest extracting these regexps to private variables, so that they are compiled just once and are documented as to what they do (e.g. took me a while to figure out this one is meant to remove HTML entities) \n. FYI, this is fine, but I frequently see people use backticks when doing escape characters in strings, e.g. \\s+ \n. This could return map[string]interface{} \nWhy \"Array\" instead of \"Map\"? \n. I don't think we gain anything from combining the initialization with the runtime calculation.  I would suggest putting the initialization into the OnAppInit and having this be a simple calculation that can assume it is already initialized. \n. (A time.Time can not be nil, only zero)\nAlso, this function never returns a zero time, as far as I can tell?   (I assume that session.expires = 0 means to indicate that there is no expiration)\n. Please add a comment saying that this will reset the session if it has expired.   (Took me a few minutes)\n. It might be most clear to actually extract a function that returns true or false for whether the session has expired\n. I think you only want to set this if it has expired, right?  Otherwise it seems like this will set the session expiration into the future on every request\n. As discussed, expires is after last request. (which also matches the behavior when setting the cookie)\n. Seems a little bit less duplicative if you have usage() accept an exit code.  Then this becomes:\ngo\nif len(args) == 1 {\n  usage(0)\n} \nif len(args) > 1 { ... }\nusage(2)\nWhat do you think?\n. It looks like flag.Usage is called whenever there is an error parsing flags -- I guess that means if they try to set an integer flag to something that doesn't parse.  I think it's worth keeping this functionality, e.g.\ngo\nflag.Usage = func() { usage(1) }\nor whatever\n. (Nope, I don't.)\n. I don't think this case is possible\n. I think the idiomatic control flow is more like:\ngo\nfor _, suite := range suites {\n  if suite.Name != suiteName { \n    continue\n  }\n  if testName == \"\" {\n    return []controllers.TestSuiteDesc{suite}\n  }\n  for _, test := range suite.Tests {\n    ... \n  } \n}\ninstead of successively deeper levels of nesting as conditions are checked.\n. This is probably an accidental find/replace error?  You I think you mean to change the href instead\n. It doesn't seem like this process gains anything from using Dave Cheney's script or having a separate Go installation.  I think we can make it simpler -- the essential pieces are really just..\nOne time setup:\n- Installing Go from source is required (e.g. a binary download will not work here) \n- Figure out the values of GOOS = [darwin, freebsd, linux, windows] and GOARCH = [386, amd64, arm] for your target platform\n- Build the cross compiler for your target machine: cd $GOROOT/src && GOOS=x GOARCH=y ./make.bash \nTo cross-compile:\n- GOOS=x GOARCH=y revel package my/app\n. GOROOT doesn't need to be set\nhttp://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really\n. Just link here for these: http://golang.org/doc/install/source\n. typo\nbuild the cross-compiler by specifying the target environment... \n. Good example snippet\n. I guess it's a little nicer if you collect the declarations in a block:\ngo\nvar ( \n  err      error\n  cookie   *http.Cookie\n  errors = make([]*ValidationError, 0, 5)\n)\n. LOVE the tests, thank you\n. Idiomatically, code is structured to avoid unnecessarily deep nesting.  In this case, it's preferable to do\n``` go\nif method != RESOURCE { \n  ...\n  return\n}\n// the else case is here, not nested\n```\n. Seems like this should be compared ignoring case?\n. Let's call this RenderBinary instead (since the input is a stream of bytes).\n. typos:\n- RenderMemory should be capitalized\n- \"expect\" -> \"except\" \nAlso, there is nothing about this that requires it to be a file kept in memory -- it could equivalently be bytes generated by an algorithm or streamed from another service. \n. If it were very easy to have RenderFile to delegate to this one, that seems like a nice reuse.. \n. I think the code would be clearer (and not unnecessarily copy the marshalled json a couple times) as\n``` go\nif r.callback == \"\" { \n  resp.WriteHeader(http.StatusOK, \"application/json\")\n  resp.Out.Write(b)\n  return\n}\nresp.WriteHeader(http.StatusOK, \"application/javascript\")\nresp.Out.Write([]byte(r.callback + \"(\"))\nresp.Out.Write(b) \nresp.Out.Write([]byte(\");\"))\n```\nthoughts? \n. No need to create a new variable\n. I think ViewsPath is already in the TemplatePaths slice\n. This should be integrated with the TemplateDelims app.conf property, not an either-or \nFor example, if we want to allow users to override the TemplateDelims set in app.conf, then revel should call NewTemplateLoader() passing in TemplateDelims as the new parameter. \n. I'm trying to understand your situation...  you have one set of templates that you process to generate the Go templates?  Are you using HAML or something? \nI do agree that we need a better way to set template delims than hardcoding it just for ViewsPath alone. \n. The problem with {{define}} blocks and the current template integration is that there can only be one template that defines \"content\". As soon as you make a second page, this pattern doesn't work \n. Why change the indent of everything here?\n. Eh? \n. What is the ng-app for?\n. I think it is better to have the source code neatly formatted than the generated code.  For example, if you add a div around a call to another template, this strategy would say that you have to go into that sub-template to indent it.  It does not seem maintainable to me.\nIf you want nicely-formatted output, I would suggest making a filter to format the generated HTML \n. It seems a shame to include the navigation bar, but not the code to handle selecting the active link, since it is a common task.  (A question on how to do this came up recently on the mailing list)\n. This README does not seem to be necessary / useful. \n. We should try to follow the standard Go comment guidelines:\nhttp://golang.org/doc/articles/godoc_documenting_go_code.html\ne.g.\n// Transport initializes the stmp client. \n. I think the parameter to Hello() should be the name of the server requesting to send mail, not the mail server itself.  The documentation says that calling it at all is not necessary unless you need control over it for some reason.\n. Is this necessary?\n. (It's pretty common to call a directory like this \"testdata\") \n. It is good to test against real mail servers of course, but I think we need a solution for running unittests without actually sending mail through a real server..\n. English correction - the plural of \"mail\" is .. unfortunately, \"mail\"  :)\nMaybe SendMessages ?\n. Especially since Go has no method overloading, it is preferable to accept a single parameter of type *Message rather than the members of message.  This is important because when we support CC, BCC, Reply-To, we would have to add all of them to the function signature.  It is much better to take a struct where the caller can specify a literal that specifies only the parameters that they care about.\n. We should have one type that is used for the \"From\" information, and it can be used as a default on the mailer or on the individual message. \ne.g.\ngo\n// Which persona to send mail on behalf of\nvar Salesperson = mail.From{\n  Name: \"Rob Fig\", \n  Email: \"robfig@company.com\",\n  ReplyTo: \"sales@company.com\",\n}\n. Instead of multiple \"Mailer.Send\" methods, it may be an easier API to provide functions that make Messages, and a single method to send the message (or list of messages). \nFor example\ngo\nfunc Render(templatePath string, args interface{}, msg *Message) *Message\nfunc Send(msg ...*Message) error\nallows\ngo\nmail.Send(&mail.Message{ \n  To: []string{\"robfig@gmail.com\"},\n  Plaintext: \"Hello\" ,\n  Html: \"<h1>Hello</h1>\", \n  From: robfig,\n})\nas well as\ngo\nmail.Send(mail.Render(\"email/Message\", renderArgs, &Message{\n  To: []string{\"robfig@gmail.com\"},\n  From: robfig,\n}))\nI don't know.. maybe that makes it more complicated.  I guess one benefit is that it provides a solution for dealing with the multiple optional parameter issue that I brought up in another comment, while still allowing defining parameters using a type literal.  What do you think? \n. Why implement Transport and Send separately from Mailer, and export them?  They seem like low level functionality to me -- is there a use case handled better by using them directly rather than using a Mailer? \n. Presumably this replaces some code elsewhere?  (e.g., you should remove whatever existing authorization code it was using before)\n. You may want to check out how the CONTRIBUTING.md suggests you deal with import paths in a fork:\nhttps://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-to-fork-without-breaking-go-import-paths\n. Is it possible to use the auth module for this?\n. I find the choice of \"Session\" as the name for everything in auth pretty confusing, especially as it stores things in the Controller.Session\n. I think hardcoding the \"AllowedActions\" permission model is too specific to be useful to a wide variety of folks..  that's why I suggested making a generic list of strings. (e.g. called Permissions, which could be anything the app wants) \n. Maybe /auth instead of /session? \n. This doesn't seem to be used\n. I think there is not supposed to be a space in the json tag -- json:\"status\"\n. If you haven't updated this file, you can safely delete it. \n. Similarly, I think it's best to delete any files that aren't needed (even though they are part of the stock skeleton).  It helps to focus attention on the interesting bits!\n. Do you mind adding a note saying that the session cookie will also disappear if the user closes their browser?\n. You can remove the \"go's\" qualifier -- \"It uses ParseDuration..\"\n. I think one link to the appconf.html manual page at the top is good.  (Per-section links into the appconf.html page is probably overkill.)\n. Doh, you're right. We changed that when adding expiration time. \n. go\n// Key sets the ValidationResult's \"key\" and returns itself for chaining.\n. I didn't do a great job of this to start, but if we're adding a bunch of comments we should follow the Go commenting guidelines: \nhttp://golang.org/doc/articles/godoc_documenting_go_code.html\nIn particular:\n\nNotice this comment is a complete sentence that begins with the name of the element it describes. \n. (ValidationResults are accessed by key from the ValidationErrorMap)\n. Typo -- multipart\n. I would be in favor of always adding session to the render args (e.g. in the session filter) -- shall we do that instead?\n. (session[TS_KEY] is already stored in \"exp\")\n. No need to nest these conditions\n. Ok -- you can do it in master so it's immediately available -- i'll merge it in to dev. \n. The other couple variables (e.g. .DevMode) already provided in RenderArgs are capitalized, so I guess we should do the same here as well.\n. Ah, I forgot about that.  I guess I probably went capital with DevMode since I didn't want to lower camel \"devMode\"\n\nOk, we can do lower case. \n. extra space at end of line -- forget to run go fmt? \n. better to just do \ngo\ndefer w.Close()\nI don't think we really care about an error that happens on Close(), and this could otherwise overwrite an error returned from Write with nil\n. If the caller has a slice, they can call this method easily.  There isn't any reason to have a second form. \ne.g.\ngo\nvar messages []*Message = ..\nmailer.Send(messages...)\n. Would do defer c.Quit() here as well\n. Here you convert the data from []byte to string, and when sending it you convert back from string to []byte.  I think we should leave it in []byte.. \n. A switch is a bit more clear way to handle a bunch of exclusive \"if\" statements\n. Might as well return this directly rather than declaring a temporary variable\n. This if { } is unnecessary\n. I don't think it makes sense to have a Default To/BCC/CC ..  what is the use case for that? \n. typo: 'convenient' \nThe comment could be more straightforward.\n// Send the given email messages using this Mailer.\n. Why distinguish PlainAuth from other auth?  Just make m.Auth required, and the caller can construct the PlainAuth just as easily. \n. What do you think about having the Mailer holding the smtp.Client open between calls to Send()?  That may improve performance for callers that send one email at a time.\n. No need to use a temporary variable.\n. Please organize imports as \n``` go\nimport (\n  stdlib\n  stdlib\n  stdlib\n3rd party\n  3rd party\n  3rd party\n)\n```\n. \"Default\" is an awkward name for this.  Caller code would look like: \ngo\nvar robfig = mail.Default{ \n  From: \"robfig@gmail.com\",\n  ReplyTo: \"no-reply@gmail.com\",\n}\nWhy not \"Sender\" or \"From\" ? \n. The parameter to Increment is an unsigned integer, so I don't think you can do this\n. These last two helpers look pretty generic -- if they were also implemented for e.g. memcached, it may make sense to extract them as shared helpers\n. We can leave it for later, but it would probably be ideal to do these fetches in parallel.\n. Generally, there is no need to leave blank lines between these blocks (here and everywhere):\ngo\nresult, err := DoSomething()\nif err != nil {\n  ..\n}\n. \"should be relative to $GOROOT\" is not really accurate.\nYou can just say it's an import path.\n. Out of curiosity, what was the motivation behind adding this?   It may be better to put in the main func (rev.go)\n. please extract a function for \"getSkeletonBase\" or something \n. The go get is already being logged below \n. I don't think the AppName is actually available in the template\n. Please leave a blank line before any comment lines -- otherwise it's easy to miss the parameter in a wall of text\n. I don't think it is good to create HTML using Sprintf... \n. (But then you can just use\ngo\nreturn &revel.RenderHtmlResult{html}\n)\n. extra line\n. Do you mind separating the validation change from the template case sensitivity one? \n. unicode.IsUpper \n. It seems like you are using this as a slice of characters rather than slice of strings.  A better type for that would be []rune \nAlso, this sort of routine is easy to extract into a function and unit testing -- do you mind writing a test for it?\n. (FYI, indexing a string doesn't work with non-single-byte characters.  Not sure that matters here since english is basically hardcoded.  I was hoping to add localized validation messages at some point, a la http://www.playframework.com/documentation/1.2.4/validation#messages )\n. (resp.WriteHeader() already uses resp.ContentType if it's set)\n. This logic seems backwards? \nMy understanding is that: if X-Forwarded-For is present, then it should be forbidden, because that means it came from a frontend rather than from local access on the machine.  In that case, shouldn't it be ok instead of !ok? \n. It's more idiomatic to do checks and return early rather than nesting large blocks of code.\nFor example\n``` go\nif field == \"\" {\n  return \"Field\"\n}\n...\n```\n. What everyone on the golang-nuts mailing list says.\nIt's not the easiest thing to search for, but here's one reference: \nhttp://talks.golang.org/2013/bestpractices.slide\n. what argument types are meant to be supported?  just strings? \nI can imagine passing in ints, e.g. an id, so perhaps it would make sense to try to support more.  on the other hand, could also wait until the use case comes up.\n. ",
    "vineychow": "Play2. X advantage more\uff0cPlay1. X more mature.\n. ",
    "jawsthegame": "Thanks rob, I was able to get this working earlier doing just that.\nThanks for the quick response!\n- Tom\nOn Sep 7, 2012, at 6:40 PM, Rob Figueiredo notifications@github.com wrote:\n\nIt's a little confusing because \"new\" creates a skeleton app in the named directory, but \"run\" actually takes the import path.\nHere's an example\n$ echo $GOPATH\n/Users/jaws/gocode\n$ cd /Users/jaws/gocode\n$ rev new src/testapp\n~\n~ revel! http://robfig.github.com/revel\n~\n~ Your application is ready:\n~ /Users/robfig/code/gocode/src/testapp\n$ rev run testapp\n~\n~ revel! http://robfig.github.com/revel\n~\n2012/09/07 18:38:23 run.go:38: Running app (dev): testapp (/Users/robfig/code/gocode/src/testapp)\n2012/09/07 18:38:23 template.go:120: Refresh\n2012/09/07 18:38:23 watcher.go:92: Watching: /Users/robfig/code/gocode/src/testapp/app\n2012/09/07 18:38:23 watcher.go:92: Watching: /Users/robfig/code/gocode/src/testapp/app/controllers\n2012/09/07 18:38:23 harness.go:113: Listening on :9000\nLet me know if it still doesn't work for you!\nThanks,\nRob\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "pbgc": "I get exactly the same error...\n. Just saw that it's already corrected.\n. rev is an unix tool (http://unixhelp.ed.ac.uk/CGI/man-cgi?rev), not Linux, And it's present in Linux, BSD's and OSX etc.\nI also think it would be better to use revel.\n. oh.. I'm sorry! I just thought about the files on \"controllers\" folder and not that the point was the SQLite dependency... and indeed I already had it on my machine...\nSorry for making you loose time...\n. websocket mode work for me without any problem!\nOSX Mountain Lion with Chrome 21.0.1180.89 here.\n. ",
    "evan108108": "Any progress on this? I would love to use Revel on AppEngine.\n. ",
    "moraes": "Some notes:\n- It is not possible to achieve compile time safety for reverse routing without code generation (or turning usage into a real pain).\n- gorilla/reverse has lower level building blocks for muxes/reverse routers. The plan is to make a \"muxing framework\", but it is evolving slowly.\n- See http://shadynasty.biz/blog/2012/08/07/painless-web-handlers-in-go/ for how he uses gorilla in code and templates.\n. ",
    "daeken": "Glad to hear it!  Let me know if there's any way I can help; not much of a Go programmer, but if you have any questions in terms of what's kosher security-wise, I'd love to lend a hand.  Good luck!\n. ",
    "KirinDave": "Having a oneline helper for pbkdf2 or bcrypt would be a huge boon to any-and-every web framework out there.\n. ",
    "micrypt": "If it's of any use, the Ampify packages include a PBKDF2 implementation:  https://github.com/tav/ampify/blob/master/src/amp/crypto/crypto.go. Best of luck.\n. ",
    "chillyfeffers": "@KirinDave The go.crypto/bcrypt package pretty much already has this with the GenerateFromPassword and CompareHashAndPassword functions.\nSee: http://go.pkgdoc.org/code.google.com/p/go.crypto/bcrypt\n. ",
    "retif": "or rvl, because rev[tab] wil stuck with rev\n. https://github.com/kennygrant/revel/compare/master...mustache#L12R193\nimplicit layout fallback if no provided file exist at #L12R193 may be confusing, and not very good for testing\nthe ability to easily embed template engines as revel plugins would be cool\n. ",
    "gamache": "+1 for something other than 'rev'.\nBut, on the bright side, I found out how $PATH gets set on OS X.\n. ",
    "fedot": "sqlite3 is only needed to run booking sample, not the revel itself\n. ",
    "theclapp": "@fedot: Thanks, I updated the title.\n. ",
    "XULRunner42": "yebyen@minemat:~/go-revel$ pastebinit build.out\nhttp://paste.debian.net/189585/\nI am having a similar problem (but not solved by fetching pkg-config and libsqlite3-dev) on Debian SID\nArchitecture is ARMv7\nThe package says I have not imported the sqlite3 driver?  I have not tried on a normal architecture (LOL)\nyebyen@minemat:~/go-revel$ for i in 1; do go get github.com/robfig/revel;\ngo build -o bin/rev github.com/robfig/revel/cmd;\ngo get github.com/robfig/revel/samples/booking/app/controllers ;\nbin/rev run github.com/robfig/revel/samples/booking; done > build.out 2>&1\n. I just wanted to report success, since you said you were only testing on mac!\nThis is the right combination of software to get it started.\n. I am using the latest x86 FreeBSD Stable as of this week, everything\ncompiled fresh, force recompiling all ports to make sure I don't have any\nversion mismatches, almost done with that.\nI have also available a Debian Sid on amd64 (maybe x86... have to check my\nenvironment to be sure) with last week's revel code, could update it to\ncurrent but then I'm not sure my console output would be complete...\nJoining the channel does not yield any output.  The page loads as usual and\nno \"welcome to the chat\" happens, typing messages into the channel does not\nmake messages flow, etc.\nI posted a separate issue about the conf changes to new int flags for\noutput...\nI will try to get a dump of console messages in just a minute...\nWorking with x86 FreeBSD tonight, I had similar results on x86 or amd64\nlinux, whichever architecture it's masquerading as... the FreeBSD is\ndefinitely x86/i386.  I'd hazard a guess that if both systems fail in the\nsame way, it's likely to be the same bug.\nOn Sep 24, 2012 9:39 PM, \"Rob Figueiredo\" notifications@github.com wrote:\n\nThanks for the report, but I need more information to help.\n- What environment?\n- What kind of failure do you see / what doesn't work?\n  - Can you paste the console output?\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/22#issuecomment-8840941.\n. OK, so I've tested as server: FreeBSD and 32bit/i686 Debian Sid\nThis time active refresh seems to work fine, but the web socket version still fails every test I throw at it.\n\nI'm using the latest firefox 15.0.1 and chromium 18.0.1025.168 on Ubuntu as client (both)\nAll that I get back is \"WebSocket \u2014 You are now chatting as testguy\" with no \"testguy joined the room\"\nI have the same results with Android JellyBean built in browser from a CyanogenMod 10 beta\nThe revel source is at 9c1843718f ... from Sep 19\nThe console output from Sid x86 server after various probings on the websocket controller follows:\n~\n~ revel! http://robfig.github.com/revel\n~\n2012/09/24 22:07:22 run.go:42: Running app (dev): chat (/home/yebyen/vel/src/github.com/robfig/revel/samples/chat)\n2012/09/24 22:07:22 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app\n2012/09/24 22:07:22 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/chatroom\n2012/09/24 22:07:22 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/controllers\n2012/09/24 22:07:22 harness.go:104: Listening on :9001\n2012/09/24 22:07:29 run.go:55: Rebuild\n2012/09/24 22:07:29 run.go:118: Exec build: /usr/bin/go [/usr/bin/go build -o /home/yebyen/vel/bin/chat github.com/robfig/revel/samples/chat/app/tmp]\n2012/09/24 22:07:30 run.go:131: Exec app: /home/yebyen/vel/bin/chat [/home/yebyen/vel/bin/chat -addr= -port=59467 -importPath=github.com/robfig/revel/samples/chat]\n2012/09/24 22:07:30 main.go:24: Running revel server\n2012/09/24 22:07:30 mvc.go:707: Registered controller: LongPolling\n2012/09/24 22:07:30 mvc.go:707: Registered controller: Application\n2012/09/24 22:07:30 mvc.go:707: Registered controller: WebSocket\n2012/09/24 22:07:30 mvc.go:707: Registered controller: Refresh\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/views\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/views/Application\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/views/LongPolling\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/views/Refresh\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/app/views/WebSocket\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/templates\n2012/09/24 22:07:30 watcher.go:92: Watching: /home/yebyen/vel/src/github.com/robfig/revel/templates/errors\n2012/09/24 22:07:30 watcher.go:70: Watching: /home/yebyen/vel/src/github.com/robfig/revel/samples/chat/conf/routes\nListening on port 59467...\n2012/09/24 22:07:30 template.go:119: Refresh\n. pulled the latest code and rebuilt revel binary on FreeBSD, same result at least with android browser and android chrome.  i will reopen if I get the same result later on debian and some real browsers, but at least anecdotally, andbang.com works in Android browser, which demands web socket support\ni can report that sqlite and bcrypt stuff works in the booking sample on FreeBSD, but I had to go get it explicitly, not sure why... that might be expected behavior\n. ",
    "jstemmer": "I've added printing the help for both commands. Wasn't sure if I should prepend the help messages with a tilde or not. IMO the entire output would look cleaner without them :)\nMaybe in the future the run command could detect a revel app in the current dir and run it without having to type the entire package path.\n. I've attached a pull request to this issue.\nThanks for your work on revel btw, got my first little project up and running :)\n. ",
    "zinenko": "First way \u2026\n``` go\npackage controllers\nimport (\n  \"github.com/robfig/revel\"\n  \"labix.org/v2/mgo\"\n  \"fmt\"\n)\nvar (\n  session *mgo.Session\n)\nconst(\n  CONNECTION_STRING = \"localhost\"\n)\ntype MongoPlugin struct {\n  rev.EmptyPlugin\n}\nfunc (self MongoPlugin) OnAppStart(){\n  fmt.Printf(\"Connection to mongo %v\\n\", CONNECTION_STRING)\n  session, err := mgo.Dial(CONNECTION_STRING)\n  if err != nil { panic(err) }\n}\nfunc (self MongoPlugin) BeforeRequest(c *rev.Controller) {\n  c.Txn = session.Clone()\n}\nfunc init() {\n  rev.RegisterPlugin(MongoPlugin{})\n}\n```\nThe error occurs in this line c.Txn = session.Clone ()\nrev.Controller not override, and somehow convey to this its controller (application) is also hardly possible.\nSecond way right now to try. \nThanks!\n. ",
    "jamesward": "Ah, yes - I forgot about the help.\nI'll make these updates and update the PR.\nIdeally the config library would handle env var substitution in the config file...  But I need to learn some more Go before I can tackle that.  :)\nBTW: I just blogged about this: http://www.jamesward.com/2012/09/28/run-revel-apps-on-heroku\n. No worries.  Thanks!\n. ",
    "kdar": "I'm having a bit of an issue getting this to work on heroku.\nI follow the step by step guide on the blog post, and revel just tells me \"No matching route found\".\nI tried all sorts of different routes in the config, and nothing works.\nI made my own simple web server in go, and it runs perfectly fine in heroku. I had it print out all of the http.Request vars and nothing was out of the ordinary. Any clues @jamesward @robfig ?\n. The fix for me was adding the module.static = github.com/robfig/revel/modules/static to the [prod] section of the config. Wish this was documented in the buildpack or something. Thank you!\n. Still seem to be getting package issues:\noutroot@ubuntu:~/projects/rxmgo$ revel package rxmgo\n~\n~ revel! http://robfig.github.com/revel\n~\n2012/12/30 15:59:46 build.go:90: Exec: [/home/outroot/dev/go/bin/go build -tags  -o /home/outroot/dev/go-  projects/bin/rxmgo rxmgo/app/tmp]\nAbort: Failed to copy data from /home/outroot/dev/go-projects/src/rxmgo to /tmp/rxmgo506314918/src/rxmgo: read   /home/outroot/dev/go-projects/src/rxmgo: is a directory\n. Nevermind. Figured out it's because I had my directory symlinked and revel will not package a symlinked directory.\n. Well some plugins in revel are kind of weird, like sessions, validation, and flash. They're weird in the sense that they aren't truly plugins, because revel's Controller has declarations for Session, Flash, and Validation. You also can't optionally enable/disable these plugins. Not entirely sure how the Play! framework works, as I've never used it. But, generally speaking, if something is a plugin, the main application shouldn't have any prior knowledge of it.\n. I almost like #3, as it's what I'm used to while using the Pylons python framework. It can watch any library that you import, and reload on changes to those libraries. Though, #2 sounds pretty good to me.\n. Yea, should be more consistent. I do like the abbreviation \"rev\" a lot, but that's easy just to put it that way in the import statement.\n. This ORM seems nice (except for its limitations), but I'd prefer revel to stay how it is where the user can use any database library by making a simple plugin for it. Especially since I use revel with mongodb, and I would hate to have some forced ORM.\n. I put it up on the go projects wiki: http://code.google.com/p/go-wiki/wiki/Projects\n. Yea, I'm still getting that redirect resolving error. I am using the latest Go tip. If I downgrade to Go 1.0.3, it all works fine. So I'm wondering what has changed (I need Go tip for other projects because of changes they made to json and other things).\n. If I change the FindMethod function to:\n// Return the reflect.Method, given a Receiver type and Func value.\nfunc FindMethod(recvType reflect.Type, funcVal *reflect.Value) *reflect.Method {\n  // It is not possible to get the name of the method from the Func.\n  // Instead, compare it to each method of the Controller.\n  for i := 0; i < recvType.NumMethod(); i++ {\n    method := recvType.Method(i)\n    if method.Func.Pointer() == (*funcVal).Pointer() {\n      return &method\n    }\n  }\n  return nil\n}\nthen it seems to work. Have not tested this on 1.0.3, just tip.\n. ",
    "tw4452852": "\u4e8e2013\u5e743\u670810\u65e5 4:04:14,Kevin Darlington\u5199\u5230:\n\nI'm having a bit of an issue getting this to work on heroku.\nI follow the step by step guide on the blog post, and revel just tells\nme \"No matching route found\".\nI tried all sorts of different routes in the config, and nothing works.\nI made my own simple web server in go, and it runs perfectly fine in\nheroku. I had it print out all of the http.Request vars and nothing\nwas out of the ordinary. Any clues @jamesward\nhttps://github.com/jamesward @robfig https://github.com/robfig ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/robfig/revel/pull/23#issuecomment-14669553.\n\nI also encountered this problem several days ago. But after I updated \nrevel, my origin app didn't work because the static router in route \nconfig isn't compatible with the new one, so I add a static config in \nmy app.conf:\n- module.static= github.com/robfig/revel/modules/static\nand change my routes:\n-GET     /public/                            staticDir:public\n+GET     /public/{<.+>filepath}     Static.Serve(\"public\")\nThen everything were all right. May these will help you!\n. I think *revel.BinaryResult is what you want.\n. Ahh, I found the problem: it's because I registered a template function in onAppStart, in dev mode the template will not refresh on before onAppStart hooks run, but in product mode, the template will refresh now before the onAppStart hooks run, so the app will broken.\nNow, I have a way to fix this problem: register the template function in init(), But I think we should change the init sequence when run a app (runStartupHooks in server.go:Run function)\n. @pushrax @brendensoares Done. #874 \n. ",
    "gothy": "I'd like to second that, not that it doesn't work at all. It just doesn't work all the time. Sometimes you just don't know if it's an updated version of a page or not and restarting the whole thing.\n. Hi rob!\nJust did it. First change after launch - code compiles and the change is visible. Then I just revert to old version(minus one symbol in output) - no reaction on page refreshing.\nHere's what revel prints with tracing on:\nDmitrys-MacBook-Air:bar_fe gothy$ $GOPATH/bin/revel run fe dev\n~\n~ revel! http://robfig.github.com/revel\n~\n2012/10/05 08:57:01 run.go:41: Running fe (fe) in dev mode\n2012/10/05 08:57:01 run.go:42: Base path: /Users/gothy/gopath/src/fe\n2012/10/05 08:57:01 template.go:119: Refresh\n2012/10/05 08:57:01 watcher.go:92: Watching: /Users/gothy/gopath/src/fe/app\n2012/10/05 08:57:01 watcher.go:92: Watching: /Users/gothy/gopath/src/fe/app/controllers\n2012/10/05 08:57:01 harness.go:112: Listening on :9000\n2012/10/05 08:57:06 harness.go:81: Rebuild\n2012/10/05 08:57:06 run.go:118: Exec build: /usr/local/go/bin/go [/usr/local/go/bin/go build -o /Users/gothy/gopath/bin/fe fe/app/tmp]\n2012/10/05 08:57:08 run.go:138: Exec app: /Users/gothy/gopath/bin/fe [/Users/gothy/gopath/bin/fe -port=52590 -importPath=fe -runMode=dev]\n2012/10/05 08:57:08 main.go:23: Running revel server\n2012/10/05 08:57:08 mvc.go:707: Registered controller: Application\n2012/10/05 08:57:08 watcher.go:92: Watching: /Users/gothy/gopath/src/fe/app/views\n2012/10/05 08:57:08 watcher.go:92: Watching: /Users/gothy/gopath/src/fe/app/views/Application\n2012/10/05 08:57:08 watcher.go:92: Watching: /Users/gothy/gopath/src/fe/app/views/errors\n2012/10/05 08:57:08 watcher.go:92: Watching: /Users/gothy/gopath/src/github.com/robfig/revel/templates\n2012/10/05 08:57:08 watcher.go:92: Watching: /Users/gothy/gopath/src/github.com/robfig/revel/templates/errors\n2012/10/05 08:57:08 watcher.go:70: Watching: /Users/gothy/gopath/src/fe/conf/routes\nListening on port 52590...\n2012/10/05 08:57:08 template.go:119: Refresh\nFirst refresh triggers output, but I've updated controller code 3 or 4 times. Output is the same.\nOS X is 10.7.4 if that matters\n. Template changes are cathed OK, but none of the controller change were captured :(\nI use sublime text for editing, you can experiment with it to figure out what's the problem.\n. https://groups.google.com/d/msg/golang-nuts/mi2XQvmrZx8/YZDhsf2ZLC4J\n. It works!\nThanks for the fix and for your great framework :)\n. +1 for this, would be really useful\n. ",
    "kalnado": "the latest version from dev branch works for me as well, thanks @robfig \n. ",
    "bithavoc": "+1\n. Nice!\n. +1\nI would vote for Testing(Integration Testing) and ORM first.\n. Awesome +1\n. Should we add a note in Readme to inform users the minimum version is now 1.3?\n. ",
    "ghost": "Could you give me some details on the value for the 3 flags ? I tried to put my $GOPATH for the first two and \"dev\" for the runMode but I got :\n2012/10/28 17:31:15 revel.go:90: Failed to load app.conf: not found\nThank you.\n. This works perfectly, thanks !\n. @brendensoares I don't see any reason to complicate things.  Those who need it will add one line to their routes file.\n. Hi, @flosch. Is there any reason why pongo2's template.Execute method expects pongo2.Context rather than interface{}? We have already had our own Context in revel.\nAnd there are plans to make template engine configurable.\nMeanwhile, other template engines receive data interface{} rather than variable of their own type:\ntemplate:\ngo\nfunc (t *Template) Execute(wr io.Writer, data interface{}) error\ngithub.com/hoisie/mustache:\ngo\nfunc Render(data string, context ...interface{}) string\nor return standard template.Template that has Execute(wr io.Writer, data interface{}):\ngithub.com/eknkc/amber\ngo\nfunc Compile(input string, options Options) (*template.Template, error)\ngithub.com/yosssi/ace\ngo\nfunc Load(basePath, innerPath string, opts *Options) (*template.Template, error)\n. Thank you, both your examples work just fine. Revel is awesome.\n. Looks like the problem occurs due to this line (in fact, earlier):\nGo\npkgImportPath = rootImportPath + \"/\" + filepath.ToSlash(path[len(root)+1:])\nI guess, rootImportPath and root has a trailing slash on Windows. Demonstration is here. I am however cannot be 100% sure as cannot check this hypothesis on a Windows machine.\nP.S.: Am I the only one who's a little bit scared by Harness part of Revel?\n. @daemonfire300, could you please do the following (on your laptop):\n``` Sh\nCreate a new Revel project.\nFor example:\nrevel new github.com/anonx/sample\n```\nAdd to the Index() action (app/controllers/app.go, line 15):\nGo\nrevel.WARN.Printf(\"%#v\", revel.CodePaths)\nreturn c.Render()\nVisit localhost:9000 and share with us the warnings from console in a format:\nSh\nWARN  2014/09/30 11:26:48 app.go:15: []string{\n    \"/home/anonx/Development/src/github.com/anonx/sample/app\",\n    \"/home/anonx/Development/src/github.com/revel/revel/modules/static/app\",\n    \"/home/anonx/Development/src/github.com/anonx/revel/modules/testrunner/app\"\n}\n. @daemonfire300, are you using the latest version of Revel? I have installed Windows 8.1, go1.3amd64 and built your sample but haven't managed to reproduce the issue.\n@brendensoares, Revel is very extendable and customizable. Don't like default cookie based session? Include your own filter instead. Don't need compression filter? Exclude it from the list of filters. And everything is splitted into separate independent (at least, not very dependent) chunks of code.\nAs a result, the code is easy to read and follow. Harness is rather something monolithic and complex. No way to customize the process. And the nesting level is one of things which makes its code difficult to be read. Sometimes there are up to 3 nested fors + if.\n. Thank you @daemonfire300. I have managed to reproduce the issue. Looks like it is caused by #719 which was later reverted  that's why you cannot reproduce it now.\nBut just like a terminator it will be back in v0.11. Or it won't? @brendensoares \n. > how did #719 affect this?\n@brendensoares Yeah, It didn't. I successfully reproduced the bug multiple times by reverting #719 and then merging it again.  But apparently it was just a coincidence.\n. :+1: Right now I'm solving this issue by making sure customerId can never be 0 for my data and returning error/not found message in case it is.\n. > To elaborate, what's happening here is that:\n\n\nthe mattn/go-sqlite3 package has a 5 megabyte .c file in it\nwhen building the package, this .c file is compiled\nbuilding a 5mb .c takes a while\nunless you go install it, the package is built every time you build a package when depends on it.\n\n\nhttps://groups.google.com/forum/#!topic/Golang-nuts/KexEyiy6PvA\nSo, no. It's not a revel related issue.\n. @pedromorgan https://github.com/revel/revel/issues/290#issuecomment-52385218\n. Thank you, Rob. Just interesting why isn't Cache used for Flash by default?\nP.S.:\nIn case anybody else will face the same problem...\nHere is a demo of what I am writing about. To reproduce execute go get github.com/a1k0u/ltdemo and then start revel run github.com/a1k0u/ltdemo.\nTo solve the problem I reassigned Flash filter by its modified version CacheFlash. To test it run the commands:\ngo get github.com/a1k0u/ltsolution and revel run github.com/a1k0u/ltsolution\n. > Due to how Go requires packages to be inside of a $GOPATH we cannot support this request.\nI think you can: https://github.com/revel/revel/issues/1004#issuecomment-221785882.\nhttps://github.com/revel/cmd/commit/b85dd76b3efb094a382bffac8bae1c1e9d49ec90 added support of multiple GOPATHs but not of relative paths.\n. @jeevatkm It doesn't matter. It is possible to support both absolute and relative paths with multiple GOPATHs. That's all we need to know. Whether we want to implement it or not and what's the priority of this issue is another question.\n. @jeevatkm Though wait, you about this issue, not #1004. @brendensoares was right. I read @robfig's comment and perceived this issue as a request for relative paths. But @tejainece apparently wants project to be outside of GOPATH. That's not something that should be addressed then. Revel project is still a Go project. And unless this brings something really valuable it shouldn't fight the Go build system.\n. @pedromorgan Still valid.\n. @arvenil, do you have any other useful methods apart from AssertNotEqual? Probably we can just add them to the TestSuite?\n. Brenden,\nthanks a lot for your reply. Indeed, my issue might seem very incomplete, I am sorry about that. Let me clarify.\nAccess Control Management: exactly. Roles, permissions - similar to Cancan in Rails\nAsset Fingerprinting: a hash based on the asset contents to facilitate caching for clients\nResponders: exactly, that would save me a lot of code, I guess?\n. Should I post to the group then? I am not too familiar with Google Groups for this purpose, any guidelines on how to post?\n. Ok, will do so soon. Thanks!\n. > define these before/after methods for a set of controllers\n@JaTochNietDan, :+1:. Probably something like:\n``` Go\ntype ParentController struct {}\nfunc (c *ParentController) Before() {}\n```\nAnd then for:\nGo\ntype ChildController struct {\n    ParentController\n}\nwill be called ParentController.Before and its own ChildController.Before if presented.\n. @brendensoares The conversion from RFC 5322 address specifications to RFC 5321 addresses does not need to be in the SMTP package, nor does it make sense to put it there. Revel should do the conversion. \n. Thanks, @bhilton. This has been resolved by #761.\n. Hello, hope you don't mind but I have to suggest a few things here. It would be ill advised to over-engineer authentication and authorization to the point where you model the user objects, their storage, or model the roles further. \nHow about a case of building web application for non-hobbyist environments? You will instantly bump into directory services (LDAP) and some SSO method (GSSAPI/Kerberos, or smart card certificates). Now, if you have already a centralized identity management and storage for user data, why would you duplicate any of that in your middleware for web applications? That would imho be just unnecessary, and source of extra work. I strongly advise against building database based authentication framework.\nAlso, why model the user further when every application has slightly different relation to it? I have seen so many different approaches, and what has worked best has been not to take things too far. For instance Pyramid (Python web framework) just\n- Standardizes authentication plugins (see http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/security.html#creating-your-own-authentication-policy )\n- States that the result of authentication plugin is \"something your plugin choose to return as String - or Unauthenticated\"\n- Leaves handling that to your application logic (most likely handled in other plugins/filters)\nThis approach enables building simple elegant solutions for nearly every need, depending on the application. Authentication, authorization do not necessarily have to depend on any user store that will be accessed further!\nAlso take a look at the API at the link. It enables building challenge/responses (think of GSS-API, SSL authentication, etc that are not really \"web application views in traditional sense\" but one step lower level server / client interaction), while I doubt how your proposed solution would conveniently enough do that. I suggest you glance https://tools.ietf.org/html/rfc4559 briefly and make sure that can be supported easily enough.\nAs for authorization, I would also suggest taking a look at how Pyramid does ACLs. Most often ACL is set up as something where the default last action is DENY, and you list what \"roles\" have what \"level\" of ALLOWED access. This can be applied not only views, but also to any model object. Then when user authenticates for the first time, you generate the list of active roles that user has, and save it in some cache. Checking model or view access is just a matter of comparing two lists. Very fast, and works well. The nice part is that the approach does not dictate on strict set of used roles, or access levels. It's again all up for the application developer. Just the convenience functions are provided by default. And oh, Pyramid handles stuff like inheritance out of the box.\n. @NitroKKX, /revel/modules/auth.\n. revel dot gl is also a good option.\n. @brendensoares revelframework.org is way too long. revel.gl (.gl may stand for \"Go Lang\") is short and simple.\n. return c.Redirect(Hotels.Settings, ... params Inteface {})\nHow is this different from reverse routing?\nreturn c.Redirect(routes.Hotels.Settings(arg1, arg2...))\n. > If I checkout the clean code from source control I wont be able to find that method before I have run the code sort of successful at least once. \nRight. But is that really an issue?\nThe fact that reverse routing is already there. It is supported and used by many projects.\n. @brendensoares, what advantages over current Reverse routing will it bring?\n. As part of our security testing process (#627) we should always try to get deeper understanding of reported errors and flaws. This measure can prevent their comeback.\nHere is a short profile of this issue:\nFixed parameters\nFixed parameters in @revel are parameters which are extracted from conf/routes file. Example (1):\nGET    /products/:id     ShowList(\"PRODUCT\")\nGET    /menus/:id        ShowList(\"MENU\")\nExpecting that a signature of the action above is ShowList(typ, id string) we can make a conclusion that for /products route fixed parameter is typ=\"PRODUCT\" and for /menus it is typ=\"MENU\".\nFixed parameters are assumed to be safe as they are defined by application's developers rather than received from application's users. They are stored in c.FixedParams and added to c.Params as well.\nRoute parameters\nIf we have routes as in case of code listing no.1 and a request to /products/helloworld, route parameters will be id={helloworld}. So, they are extracted from user request for the defined routes.\nThus, they are not safe.\nQuery parameters\nQuery parameters include everything after ? sign in url. For example, if we request /products/smth?prefix=private. Query parameters will have prefix={private}.\nThey are just as route parameters cannot be trusted.\nForm parameters\nForm parameters are the parameters from request body. So, if we are submitting a login form with username and password fields form parameters will contain login={johndoe} and password={something}.\nForm parameters are received from users so they are not safe.\nParameters\nParameters are stored as url.Values which is map[string][]string under the hood. It contains the parameters from all the groups mentioned above appended together:\n- Fixed parameters (safe)\n- Route parameters (unsafe)\n- Query parameters (unsafe)\n- Form parameters (unsafe)\nSo, if we have a route file:\nPOST     /todo/:ourparam     ToDo(\"fixed_param\")\nAnd a form which has action=\"/todo/route_param?ourparam=query_param\" and input name=\"ourparam\" value=\"form_param\" our app will get:\ngo\nParams := url.Values {\n    \"ourparam\": []string{\"fixed_param\", \"route_param\", \"query_param\", \"form_param\"},\n    ...\n}\nProblem\nThe problem is that the order in which all the parameters of different types are appended is not documented and defined explicitly.\n503 has become possible because for Static.Serve(prefix, filepath string) only first prefix's value from c.Params is binded:\ngo\nc.Params = url.Values {\n    \"prefix\": []url{\"some_param_from_query\", \"public\"},\n}\nBefore #504 it was query parameter. Now it is a fixed parameter.\nBut we still should define what we are trying to get when we are appending parameters of different types both safe and unsafe ones together.\nIf it brings any value (and it looks like it does) we should better document the order (probably, we need to rethink and change it) and the fact that c.Params can never be trusted (#809). c.FixedParams should be used by framework users and module developers when safe param from routes file is expected.\n. @brendensoares Right, and it is labeled for consideration in v0.12.\nI personally have never felt comfortable concatenating paths and making that kind of stuff. That's too fragile. So, I'm :+1: the idea of using some abstraction layer instead. Haven't investigated whether pathlib fits our needs or something else is required, though.\n. Is it really a common case? Wouldn't it be better to just use Revel Cache for that?\n. @brendensoares, there is a sample app:\n``` Go\n// app/init.go\nfunc init() {\n    // setup grunt asset compilers\n    revel.OnAppStart(func() {\n        if revel.MainWatcher != nil {\n            appPath := revel.BasePath\n            for _, gruntCompiler := range compilers {\n                path := filepath.Join(appPath, gruntCompiler.Path)\n                revel.INFO.Printf(\"Listening: %q\\n\", path)\n                revel.MainWatcher.Listen(gruntCompiler, path)\n            }\n        }\n    })\n}\nvar compilers = []*grunt.GruntCompiler{\n    // grunt.NewCompiler(name, path, grunt_rule)\n    grunt.NewCompiler(\"Gruntfile.js\", \"Gruntfile.js\", \"default\"),\n    grunt.NewCompiler(\"sample JS\", \"app/assets/js/sample\", \"uglify:sample_js\"),\n    grunt.NewCompiler(\"sample SASS\", \"app/assets/sass/sample\", \"sass:sample_css\"),\n}\n``\n. @pedromorgan Cool. The only thing I'm missing is a clear list of criterias. For example, how long it isbugtill it becomesOOps:) ?\nBy the way, wouldn't we offence someone if we addmad-ideaslabel to their issue? Or is it like a label just for internal use?\n. Wow, @brendensoares your classification is super awesome.more details neededis needed, IMO.\n    +     topic categories: testing (or testsuite), router, samples, harness, revel cmd.\n. @robfig I am also using Revel with a modified version of session mechanism. It stores data in cache and relies on Revel id generation code.\n. Isn't it what is intended to be introduced in Go 1.4 by adding [go generate`](http://golang.org/s/go1.4-generate) command? At least the following is in the list of \"motivational examples\":\n\n\nHTML: embedding .html files into Go source code\nbindata: translating binary files such as JPEGs into byte arrays in Go source\n. Hey, @xoen. You asked in IRC:\n\nIs there any way to convert a revel.Result to string? I\u2019m talking about the revel.RenderJsonResult. It seems it has a obj property but it\u2019s not exported\n\nCould you please clarify what exact use-case do you have?\nI understand that you are trying to:\n\nlog all the request and responses information to files\n\nBut just to be sure that we are solving the right problem it's good to know your high-level goal.\n. > Maybe the Options approach is a bigger topic and for the interim we have some simple csrf.MarkExempt(path string) function for now that just stuffs paths in a map[string]bool? Could even let you register a regular expression so you could easily mark any path that starts with a prefix as exempt?\n@iamjem, by path you mean URN like /app/index or action name like \"Application.Index\"?\nPersonally, I would prefer something like csrf.MarkExempt(Application.Index) as in this case the solution will be type safe and it will not depend on routes. The same technique is used for Revel's Redirect (reference, see Redirect section).\n. G'day, @brendensoares. Why would somebody want to exempt actionX on urn1 but have CSRF enabled for the same actionX on urn2?\n. @iamjem \n\nI would need to do some validation of the method expression to ensure its a valid struct (that contains an embedded revel.Controller), and then piece together the controller name and action to compare against controller.Action?\n\nTo my view of thinking, it's a good idea to keep everything idiot-proof and make sure that App.Index argument of csrf.MarkExempt(App.Index) is a correct action that returns revel.Result and App is a struct that contains revel.Controller. But that is not absolutely necessary.\nNothing bad will happen if I pass csrf.MarkExempt(NotController.SmthToString), right? As this is not an action, project users will never visit /NotController/SmthToString, so no need to exempt it and worry about it.\ngetRedirectUrl till the line 355 is enough to eliminate typos in input parameters and throw errors in case structures are renamed but changes are not reflected in MarkExempt part.\n\nI would imagine that a developer would typically mark exempt methods in the various init hooks throughout their app before and not while the server is running. Is that a safe assumption?\n\nI think, yes. It should be called from revel.OnAppStart(func() { ... }) most of the time. Exempting actions on the fly looks like an extremely rare use case to make every app lose in performance.\nWhat do you think, @brendensoares?\n. @iamjem, there is a revel.FindMethod which iterates through all methods of a certain controller and returns a method you need which has Name attribute. Or do you mean something else? If so could you please provide an example?\n. At least, it's possible to remove the last 2 lines of .travis.yml. They are repeated twice. See line 34 and line 42.\n. The error message is:\n\nserver.go:111: Failed to listen: listen tcp :9000: bind: address already in use\n\nsleep commands as a workaround were initially introduced by the commit https://github.com/revel/revel/commit/77a032e6da466c2a1f80ea7fd5923b081dc9851e.\nProbable reason of the error is the fact that test applications are killed so it takes time to free up ports (but that is just my assumption). Thus, possible solution (1) would be to close the connection before killing the app.\nA simple and kind of workaroundish solution (2) is to modify test apps to get port value from ENV:\n```\nconf/app.conf\nhttp.port=${PORT}\n```\nand run every test on their own port like PORT=9001 revel test ....\n@pushrax, any thoughts on this?\n. > Are there any other Revel components that should be made into sub-packages?\n@brendensoares, what as for util package?\n. @brendensoares, Looks like params and utils should be turned into subpackages as well. Otherwise there will be import cycle. Because they are used by the sub-packages you have included in the roadmap and belong to revel package. So, revel imports sub-packages which import revel.\nAnd I'd like to clarify what naming convention could be applied to params subpackage. For example, in case of Binder it is binding. So, we can use it as binding.Binder. What as for Params?\n. OK, I agree. @brendensoares, there is one more naming issue. How can the package Controller be called? There are already Controller struct and NewController method inside. So, controller.Controller is against golang convention. What do you think? controllers (plural) is the only thing that comes to my mind.\nLet's make a decision on naming of every subpackage in advance.\n- [ ] TestSuite -> testing\n- [ ] Binder -> binding\n- [ ] Router -> routing\n- [ ] Server -> servers?\n- [ ] Validation -> validations?\n- [ ] Watcher -> watchers?\n- [ ] Session -> sessions?\n- [ ] Controller -> controllers?\n- [ ] Filter -> ...? (We have both Filter and Filters inside)\n. @brendensoares And could you please clarify the criteria for extracting a component into subpackage. For example, we are going to turn Session filter into a subpackage. But at the same time there are no i18n, panic, flash, interceptor, and action filters in the roadmap. Don't forget we also have CSRF which should be a filter as well. I think there should be some logic and consistency behind the structure of the project. But I do not quite understand it now, to be honest.\n. @brendensoares I'm asking about the criteria just for practical reasons. We have init.go with the following content:\ngo\nrevel.Filters = []revel.Filter{\n    ...\n    revel.RouterFilter,\n    revel.SessionFilter,\n    ...\n}\nI, as a user of the framework, expect that every standard filter will have predictable import path. For example:\ngo\nimport (\n    \"github.com/revel/revel/routing\"\n    \"github.com/revel/revel/session\"\n)\nSo the filters above can be used as:\ngo\n    ...\n    routing.Filter,\n    session.Filter,\n    ...\nIf import paths are different I feel like something is wrong with consistency:\ngo\nrevel.Filters = []revel.Filter{\n    revel.PanicFilter,\n    routing.RouterFilter,\n    revel.FilterConfiguringFilter,\n    params.Filter,\n}\n\nI am inclined to split v0.12 into 2 releases as it's too large currently. It's more important that we keep consistent momentum than trying to release large improvements. Agreed?\n\n:+1:\n\nInternal, independently testable packages are more appropriate than external for most, if not all, of the remaining items. Agreed?\n\nBy external you mean packages in separate repos? If so, yes I agree with you. Now I'm not even sure that creation of a separate modules and samples repos was such a great idea. It turned out to complicate the process of testing without bringing any additional value.\n. There are revel.TRACEs, revel.INFOs, revel.WARNs, and revel.ERRORs all around the code. Looks like we cannot go without a separate log package.\n. @brendensoares Yes, good idea. But sounds like a lot of work.\n. @brendensoares I'm looking forward to it.\n. @dbriemann :+1: Great project. Exact thing I was looking for.\n. According to the blog post and cookie names, there is also https://www.ties.com.\n. Security is about an infinite process rather than just some magic thing which can be done once. Here is a list of some actions we should take:\n- [ ] Create a vulnerability knowledge base. So it is possible to keep records of potential vulnerabilities and range them by risk level. Those which are of high risk should be fixed ASAP while others can be addressed in subsequent releases.\n- [ ] Split revel into independent components (that what we are doing in v0.12) to simplify testing.\n- [ ] Better document every separate component: what it is expected to do, how it is doing it, what kind of threats are possible (aka threats modelling) and how they are eliminated in the current implementation.\n- [ ] Security testing should be a part of every phase of SDLC not just the last one.\n- [ ] We should have some kind of metrics to measure effectiveness of our security testing.\n. @brendensoares \n\ndid you mean SDLC instead of SDLF?\n\nYes, there was a typo. I've fixed it.\n\nAlso, how might we go about setting up a security kbase? Should we use github's wiki or perhaps a dedicated repo with CVE-like files?\n\nI think we should learn from other projects (django, rails, etc). Even though I'm not a big fan of \"welcome back to 90s, my friend\" styled web-sites.\n. Looks like the issue is not related to Revel:\n\nrelocation R_X86_64_32 can not be used when making a shared object; recompile with -fPIC\nBad value\ncollect2: ld returned 1 exit status\nrunning gcc failed: unsuccessful exit status 0x100\n1. https://code.google.com/p/go/issues/detail?id=6940\n2. https://code.google.com/p/go/issues/detail?id=5067\nThe Go linker does not currently support building objects that may be linked into a PIE.\n. @brendensoares, I totally agree with your arguments:\nWhy aren't using/supporting an existing package? Seems we're duplicating effort needlessly here. I see no benefit to having a Revel-specific mailer package.\n\nI'm :+1: to use existing third party components for Revel as long as they satisfy the following conditions:\n1. The code is high quality\n2. It is tested, CI is used\n3. The project is active\nI haven't used jordan-wright/email yet but it looks good to me, the code is gofmted, linted, and tested. The only thing I'm a bit concerned about is PRs which are dated the beginning of August/September and still having no any answer at all.\n. A special (reserved) section name is [DEFAULT] (uppercased) not [default] (1). So use it instead.\n. @pedromorgan, you said Python cannot parse the conf file without default section and Revel cannot start with it. I'm trying to reproduce it:\n``` Sh\nrevel new github.com/anonx/issue655\nvim github.com/anonx/issue655/conf/app.conf\nAdd [DEFAULT] section at the top of the file\nrevel run github.com/anonx/issue655\nAwesome, it works.\n```\nBased on the docs executing the following commands:\n``` Sh\n$ python\n\n\n\nimport ConfigParser\nConfig = ConfigParser.ConfigParser()\nConfig\n\nConfig.read(\"github.com/anonx/issue655/conf/app.conf\")\n['github.com/anonx/issue655/conf/app.conf']\nConfig.sections()\n['dev', 'prod']\nConfig.get('DEFAULT', 'app.name')\n'issue655'\nConfig.get('DEFAULT', 'format.datetime')\n'01/02/2006 15:04'\n```\n\n\n\nOh my... It works again!\nThe difference between Python and Revel is that in Python [default] is a usual section name (not reserved one) just like, say, [apple] or [pedromorgan]. [default] != [DEFAULT]. In Revel's implementation [default] is not allowed.\n. > So, if I'm reading correctly, adding [DEFAULT] to the top of our app.conf does not cause any issues in Revel and allows Python to correctly parse our app.conf, right?\nExactly.\n[DEFAULT] is the only section which is treated as a special reserved section name in Python. And the same is correct for Revel.\n. Cannot reproduce it. Could you, please, provide more info if the issue hasn't been resolved yet.\n. Hey, @cnaize \n\nI want to understand how url helper works.\n\nHere it is: template.go#L394\n\nI need url like:\nhttp://localhost:9000/pages?page=1\n\nSo, that's what you get by default in case it's not redefined in conf/routes file.\n\nI don't want to write:\nfunc (c Pages) IndexPages(page int) revel.Result {\nbecause I want to check if the controller contains the param page (in this case it will be 0).\nHow to add my template var to c.Params.Query with the url helper?\n\nCould you please clarify your use-case.\n. Are you working on pagination? Why do you need float then?\nWell, if you really need it you can get page parameter as a string:\nfunc (c Pages) IndexPages(page string) revel.Result {...}\nurl helper will work for you then. And you can check whether the string is empty, try to convert it to float and return not found in case of error.\nHowever, it is not a good idea to solve problems in Golang using PHP approaches. Just as complex computations in templates. Since Golang is statically typed it is probably better to have different actions for different input types. It depends on your exact use case though. As for the computations in templates, use controllers / template functions for that.\n. So, all you need is just to return:\n1. not found when page parameter is not numeric\n2. first page in case page parameter is skipped\nRight?\nIf ?page=1 format is not a requirement, why not to define two actions then:\n```\nfunc (c *Pages) FirstPage() revel.Result {\n    return c.Redirect(routes.Pages.IndexPages(1))\n}\nfunc (c *Pages) IndexPages(page int) revel.Result {\n    if page == 0 {\n        return c.NotFound(\"Page does not exist\")\n    }\n    // ToDo\n}\n```\nand in route file include something like:\nGET    /pages             Pages.FirstPage\nGET    /pages/:page       Pages.IndexPages\nThen in your template you can use:\n<ul>\n    {{range $i := ...}}\n        <li...><a href=\"{{url \"Pages.IndexPages\" $1}}\">{{$i}}</a></li>\n    {{end}}\n</ul>\nIf your template helpers return float64 you'll have to write one more to convert the result to int.\nThus, everybody who comes to pages/something will get not found message. Those who visit pages will be redirected to pages/1.\n. It seems as a correct behavior to me. Well, at least it's what I would expect because I see no reason for one action being available on different URL addresses. And here is an explanation why it works that way.\nSo, each declaration of method is equal to one route in your auto generated app/routes/routes.go file. No money, no honey No method declaration in admin.go -> no GetList action.\n. (1) Cool, it would be much more flexible then. As for the backward compatibility, looks like there are not so many apps which are relying on Revel tests. Among public apps mentioned in #616 the following are using tests:\n1. https://github.com/richtr/baseapp\n2. https://github.com/revel/revel/tree/master/samples/persona\nThose who don't have any Revel tests apart from standard TestThatIndexPageWorks:\n1. https://github.com/jgraham909/bloggo\n2. https://github.com/mischief/airplane\n3. https://github.com/taddev/revelBlog\n4. https://github.com/alexfish/blog\n5. https://github.com/lidashuang/webchat\n6. https://github.com/cfrco/revel_gbook\n7. https://github.com/TheTree/Trunk\n8. https://github.com/zzdboy/GoCMS/\n9. https://github.com/revel/revel/tree/master/samples/booking\n10. https://github.com/revel/revel/tree/master/samples/chat\n11. https://github.com/revel/revel/tree/master/samples/facebook-oauth2\n12. https://github.com/revel/revel/tree/master/samples/i18n\n13. https://github.com/revel/revel/tree/master/samples/twitter-oauth\n14. https://github.com/revel/revel/tree/master/samples/validation\nAnd there are a few more related issues I would like to raise:\n(2) As soon as #606 is ready it will be necessary to test CSRF protected apps. So we should come up with an idea on how to get CSRF token in tests. The methods used by others include:\n1. SAP in response to GET /token with CSRF-Token: Fetch header returns token for the current session 1.\n2. SO users offered approach of either a) getting token from cookies by parsing them in tests, or b) using a constant token for dev mode.\nI think a helper for setting CSRF will have to be added.\n(3) There is an AssertContains. Can we add AssertDoesNotContain or something? It's not difficult, just a copy of AssertContains but without a ! symbol in code.\n(4) It would be super useful to have not only Show stack link but Show response as well. I think this point is even more important than those above.\n\n@revel, your thoughts?\n. @pushrax, there are already MakeRequest and MakeRequestSession. Should they be renamed to Send or something?\nWhat do you think about MakeMultipartRequest introduced in 0.10. What kind of use-case does it have? Looks like it cannot be used for uploading files, moreover the API is not consistent as other MakeRequest... methods get request as input (#696).\n. > Keeping the token random and parsing it out of the cookie seems best to me.\nHowever, it may not be possible as CSRFSecret (#606) is stored in Session. And not everybody uses standard COOKIE based Session filter.\n\nAdding aliases for the MakeRequest family of functions works for me.\n\n@pushrax, why not just rename them?\n1. MakeRequest -> Send\n2. MakeRequestSession -> SendSession\nThe whole change is not backward compatible anyway.\nAnd as for MakeMultipartRequest, can it be removed?\n. Since MakeRequestSession is more widely used than MakeRequest I have settled on the following naming:\n1. MakeRequestSession -> Send\n2. MakeRequest -> SendClean (I've also thought about SendSessionless option, but it's way too long)\nPeer review the commit  a6bde97, please.\n. @brendensoares:\n\nwhy remove MakeMultipartRequest?\n\nFirst of all, a little bit of background information.\nRFC-1867 (7):\n\nmultipart/form-data contains a series of parts. Each part is expected to contain a content-disposition header where the value is form-data and a name attribute specifies the field name within the form, e.g., content-disposition: form-data; name=\"xxxxx\", where xxxxx is the field name corresponding to that field.\nAs with all multipart MIME types, each part has an optional Content-Type which defaults to text/plain.  If the contents of a file are returned via filling out a form, then the file input is identified as application/octet-stream or the appropriate media type, if known.  If multiple files are to be returned as the result of a single form entry, they can be returned as multipart/mixed embedded within the multipart/form-data.\nFile inputs may also identify the file name. The file name may be described using the filename parameter of the content-disposition header.\n\nHow current implementation of MakeMultipartRequest is supposed to be used for uploading files? Something like showed at the code fragment below (1)?\n``` Go\n// (*TestSuite) MakeMultipartRequest(method, path string, fields map[string]string)\ntestFile := getTestFileAsByteSlice()\nt.MakeMultipartRequest(\"POST\", \"/signup\", map[string]string{\n    \"fullname\": \"Jane Roe\",\n    \"avatar\":   string(testFile),\n})\n```\nI expect, this code would be equivalent to submitting the form with the following fields:\nHTML\n<input type=\"text\" name=\"fullname\">\n<input type=\"file\" name=\"avatar\">\nOK, but how does MakeMultipartRequest method work? Here is a code stub for demonstration:\nGo\nfunc (t *TestSuite) MakeMultipartRequest(method string, path string, fields map[string]string) {\n    // ...\n    for key, value := range fields {\n        w.WriteField(key, value)\n    }\n    // ...\n}\nIt uses func (w *Writer) WriteField(fieldname, value string) error. This method creates a new part like content-disposition: form-data; name=\"%s\" which's Content-Type will be text/plain (as this is the default). Thus, code (1) will be equivalent not to the form I have expected but to the following:\nHTML\n<input type=\"text\" name=\"fullname\">\n<textarea name=\"avatar\"></textarea>\nAs a result, if I have the following action:\nGo\nfunc (c *App) Upload(fullname string, avatar []byte) {\n    // ...\n}\navatar will not be binded for me. c.Request.FormFile(\"avatar\") will return nothing as avatar is treated as a text field rather than file.\nNot to mention, we cannot upload large files (more than RAM size) in such a way. I'm trying to eliminate this in #696 by not reading the whole file into memory.\nAnd after #703 I have decided it should support multiple files upload instead of just a single one.\n. > It looks more user friendly that PostForm() since you can just pass in a map of values.\nThis, is BTW one more reason to get rid of it. Other methods (Get, Post, PostForm, etc.) use url.Values as input parameter which is map[string][]string, not map[string]string. Thus it's possible to test the following case:\nHTML\n<input type=\"text\" name=\"address[]\" value=\"Address 1\">\n<input type=\"text\" name=\"address[]\" value=\"Address 2\">\n<input type=\"text\" name=\"address[]\" value=\"Address 3\">\n``` Go\nfunc (c App) PostSignup() revel.Result {\n    var addresses []string\n    c.Params.Bind(&addresses, \"address\")\n// addresses = [\n//  \"Address 1\",\n//  \"Address 2\",\n//  \"Address 3\",\n// ]\n\n// ...\n\n}\n```\nThe test will look like:\nGo\nfunc (t AppTest) TestThatPostSignupWorks() {\n    t.PostForm(\"/app/PostSignup\", url.Values{\n        \"address\": {\"Address 1\", \"Address 2\"},\n    }\n}\nThere is no so much difference in easiness for the end user between \"address\": {values} and \"address\": \"value\". But the first one is more powerful.\n. @brendensoares, the last thing is ResponseBody. It is a very common use case to compare it to strings like:\nGo\nt.AssertEqual(\"Hey, world\", string(t.ResponseBody))\nWithout string() the error will be (expected) Hey, world != [72 101 121 44 32 119 111 114 108 100 33] (actual) which is not very informative.\nSometimes string() is a requirement:\nGo\nt.Assert(\"Hey, world\" != string(t.ResponseBody))\nSo, an elegant solution for converting it to string is required. This is not related to the initial goal of this issue though.\n. @pushrax, I think it should be included on *nix based systems only. Looks like it breaks the build process on Windows systems. The error is in rcrowley/goagain: undefined: syscall SIGUSR1/2 because these are UNIX commands (Related).\n. @brendensoares, as I know .travis.yml is the only place where Golang version is defined. There is a special // +build constraint in Golang, but Revel doesn't use it.\n. Copy of #409. Community is working on it. But everybody's contributions are welcome.\n. @brendensoares, OK, I'll create a new pull request then.\nLooks like MakeMultipartRequest can only be used for posting forms with fields, but not with files as neither writer.CreateFormFile nor writer.NewFilePart is presented.\n. @brendensoares, agree. But url.Values instead of map[string]string. So the method is:\nGo\nfunc (t *Test) PostFile(path string, params url.Values, filePaths url.Values)\n. Yes. Will close #687 and #696 ASAP.\n. @acrisci, you are right it hasn't been merged as at the time of release there was no PR targeting to develop. I have excluded #698 from the release notes.\n. It is possible to let search engines know that the docs have moved to a new location by adding rel=canonical:\nHTML\n<link rel=\"canonical\" href=\"https://revel.github.io/manual/index.html\" />\n. > I have to have that for every page right?\nExactly. Canonical url should be indicated for every page on both robfig.github.io/revel (more important since search engines think this is the source of content) and revel.github.io. Like:\n1. robfig.github.io/revel/index.html -> rel revel.github.io/index.html\n2. robfig.github.io/revel/manual/index.html -> rel revel.github.io/manual/index.html\n3. ...\n. > but the \"f:\\go_example\\src\\myap\\public\\js\\angular.min.js\" file is indeed exists!\n@xpbliss, angular.min.js does exist. But the error is about angular.min.js.map file. Is it there?\n. Go\nfunc (c *App) UploadFile(myfile []byte) revel.Result {\n    // Do something with \"myfile\" here\n}\nThat's it. Make sure your form has enctype=\"multipart/form-data\".\nInstead of []byte you can as well use *os.File, io.Reader, or io.ReadSeeker just as it is indicated in the docs.\n. @xpbliss, Do you want to use custom binder function? Why? For uploading files you don't need it.\nWell, in some cases params are not bound automatically. For example, if you have an array of some values:\nHTML\n...\n<input type=\"file\" name=\"avatar[]\">\n<input type=\"file\" name=\"avatar[]\">\n<input type=\"file\" name=\"avatar[]\">\n...\nThen it can be binded like:\nGo\nfunc (c App) Upload() revel.Result {\n    var avatars [][]byte\n    c.Params.Bind(&avatars, \"avatar\")\n}\nBinder will work for the following types:\n- Ints of all widths\n- Bools\n- Pointers to any supported type\n- Slices of any supported type\n- Structs\n- time.Time for dates and times\n- *os.File, []byte, io.Reader, io.ReadSeeker for file uploads\nFor other types you will have to define a custom binder, read section Custom Binders of Binding Parameters\n. Yes, that is possible:\n\nWalk walks the file tree rooted at root, calling walkFn for each file or directory in the tree, including root [1].\n\nJust make sure all your files belong to controllers package and there are no any other packages in controllers' folders.\n. > I'm not sure what you mean here\nYou cannot have a mix of packages at the same folder. That was my point.\n. @brendensoares, the issue is related to use of i18n along with Revel validation. Here is an example:\nIn booking sample there is a app/models/booking.go:\nGo\nv.Match(booking.CardNumber, regexp.MustCompile(`\\d{16}`)).\n    Message(\"Credit card number must be numeric and 16 digits\")\nHow can we use i18n here?\n@Agon, I have settle on the following solution:\n``` HTML\n// Template\n{{with $field := field \"User.Name\" .}}\n    {{if $field.Error}}\n        {{/Pay attention to the \"msg\" function here/}}\n        {{msg $ $field.Error.Message}}\n    {{end}}\n    ...\n\n{{end}}\n```\nSo, the message will be translated. And in models I have something like Message(\"errors.some.key\").\nBut, anyway I had an impression like nobody had used i18n before me and something was wrong with Revel's approach.\n. @brendensoares, yeah you're right. Looks like at the time I have faced the issue I just wasn't good at Go. To pass App Controller to the models package I was importing github.com/revel/revel/samples/booking/app/controllerslike:\n``` Go\nimport \"github.com/revel/revel/samples/booking/app/controllers\"\nfunc (booking Booking) Validate(v revel.Validation, c controllers.Controller) {\n    ...\n}\n```\nAnd obviously got import cycle is not allowed.\nThe working solution is:\n``` Go\nimport \"github.com/revel/revel\"\nfunc (booking Booking) Validate(c *revel.Controller) {\n    c.Validation.Match(booking.CardNumber, regexp.MustCompile(\\d{16})).\n        Message(c.Message(\"Credit card number must be numeric and 16 digits\"))\n}\n```\nand we should call it in controllers like:\nGo\nbooking.Validate(c.Controller)\n. > that seems more like a work around rather than an ideal, long-term solution.\nAgree with @brendensoares here. There should be a better way than Message(c.Message(\"...\")).\n. In Play framework public is used for static files. And app/assets is reserved for LESS CSS, CoffeeScripts and other components which should be pre-compiled.\nAnd it would be counter intuitive to have 2 folders with the same name assets for static and app/assets for client-side components.\nstatic is definitely a better option than assets. But does it really worth it to break backward compatibility just for renaming? Should the attention be paid to renaming constants from UPPER_CASE to Golang styled ConstantName and other stuff like this then?\n. > GET /public/*filepath Static.Serve(\"public\"), is what makes the public folder public\n\nbackwards compatibility is a non concern.\n\n@notzippy, oh you're right.\nSo, this is a very easy change which requires only 1 line modification and it will not break any existing projects.\n. :+1: for static.\n. Sorry, little off-topic. @brendensoares, modules will be moved out of the revel/revel repo as well (to revel/modules), right? What as for revel/revel/samples?\n. The best way is to use nginx or whatever as a proxy server.\n. Thanks so much.\n. ### Reference implementations:\n1. https://docs.djangoproject.com/en/1.7/topics/forms/modelforms/\n2. https://www.playframework.com/documentation/2.1.0/JavaForms\nThis is BTW related to #369, since labels are necessary for generation of forms as well.\n. I have started working on this. And there is one thing I don't like with this approach:\ngo\ntype User struct {\n    Name  string  `autoform:\"required=true,minsize=2,maxsize=100\"`\n}\nOur parameters (in struct's tag) are not statically typed and will be checked only during run time. Well, we can fail early (OnAppStart) in case they are not correct. But anyway, is it a golang way?\n. > #369 is an enhancement, so it's not really required for this, agreed?\n@brendensoares I actually realized #718 consists of two components:\n1. form generation\n2. form validation\nThus, this looks like a replacement for current validation mechanism in use. So, yeah #369 is not really required.\nAs for typing, I like the idea of using struct tags for validation rules. Ex:\ngo\ntype User struct {\n    Name  string  `autoform:\"required=true,minsize=2,maxsize=100\"`\n}\nAnd that is the reason I have opened this issue.\nWell, finally I have come up with a solution that would let us combine this approach with a statically typed one. I'm implementing it when I'm free from procrastination. Step by step. I'll let you know when PoC is ready.\n. OK, here is the concept I have ended up with.\nSample\nModel\n``` go\npackage models\n// User is a sample of model.\ntype User struct {\n    ID   int\n    Name string autoform:\"text,minlength=2,maxlength=64,required\"\n    Info string autoform:\"text,maxlength=8192,textarea\"\n}\n```\nController\n``` go\npackage controllers\nimport (\n    \"github.com/anonx/sample/app/models\"\n    \"github.com/anonx/sample/app/routes\"\n\"github.com/anonx/autoform\"\n\"github.com/revel/revel\"\n\n)\nvar au autoform.Type\n// App is a sample controller.\ntype App struct {\n    revel.Controller\n}\n// Index is a page that shows form.\nfunc (c *App) Index() revel.Result {\n    // Get the form we have created earlier in init().\n    formHTML := au.Render(\"sampleForm\", c)\n    return c.Result(formHTML)\n}\n// Hello action validates input parameters and greets user.\nfunc (c App) Hello(user models.User) revel.Result {\n    // Make sure user parameter is correct.\n    // If not, redirect user back to the form page.\n    res := au.Validate(\"sampleForm\", user)\n    if res.HasErrors(c) {\n        return c.Redirect(routes.App.Index())\n    }\n// Otherwise, show the greeting message.\nreturn c.ResultText(\"Hello, %s!\", user.Name)\n\n}\nfunc init() {\n    revel.OnAppStart(func() {\n        // Initialize autoform module and create a sample form.\n        au = autoform.Type{}\n        au.Create(\"sampleForm\", models.User{}, \"Name\", \"Info\")\n    })\n}\n```\nCustom types\n``` go\npackage models\nimport (\n    \"github.com/anonx/autoform\"\n)\ntype User struct {\n    CreditCard string autoform:\"creditcard,visa\"\n}\nfunc init() {\n    autoform.Context[\"creditcard\"] = MyCreditCardType\n}\n```\nCustom keys\n``` go\npackage models\nimport (\n    \"github.com/anonx/autoform/text\"\n)\ntype User struct {\n    Username string autoform:\"text,minlength=2,maxlength=64,required,  alphanum\"\n}\nfunc init() {\n    text.Context[\"alphanum\"] = MyAlphaNumValidator\n}\n```\n. > Performance hit due to reflection of tag values.\n@brendensoares It will be parsed once (on bootstrap or by revel/cmd). Current validation mechanism is using reflect package, too. Isn't it? Open app/tmp/main.go. It will have revel.DefaultValidationKeys = map[string]map[int]string{ ... } which is generated from controllers.\n\nThe biggest issue is how this change will be received by the community.\n\nWe are the community. But yeah we can try to make it more compatible with the style of validation we have already had. Like a combination of struct tags approach and Revel's c.Validation.\n\nI assume that if you want to validate a form that has no related model that you would simple create a dedicated struct for that form, right?\n\nYes, that's right.\n. @brendensoares I think this is the case when RFC is a requirement. I'll try to create a PR in revel/rfcs later.\n. This is still a nice to have feature however reflection is IMO a step in the wrong direction. Type safety is what makes Go different from Python and Ruby. And it is wise to take advantage of it. Thus, code generation is a better approach.\n. I have removed this from v0.12 milestone as we have already had retargetted version (#723) which is included in v0.11 release.\n. > Can we version the cmd the same as the framework?\n@brendensoares, To my view of thinking that would be reasonable.\nBy the way, we have samples and modules now. I think it's out of question they should have the same version as the framework.\n. Hasn't Revel already supported this? It scans both module and app folder for templates. Templates in app folder have higher priority thus it's possible to override views of modules. Example: errors/.\nAs for view name spacing for modules can we just use Convention over configuration? So, modules' authors will be asked to store their views not in app/views but in app/views/ModuleName.\nThe behavior will be exactly as @NitroKKX describes (but zero change to codebase is required):\n\nI am proposing that if I create the following file in the main app \"app/views/XCustomer/register.html\" that when revel compiles the code it uses the register.html defined in the app and not the one in the module.\n. Didn't have to delete SuiteResult.html.\n. OK, I'm restoring SuiteResult.html I have recklessly deleted.\n\nHowever, it seems to me this file should be moved out of testrunner in the long run. On the one hand it is a good idea to have all tests related templates in one place. On the other hand testrunner has nothing to do with this file (it is used only by /revel/cmd/revel for creating static test results).\n. Steps to reproduce:\n1. results.compressed=true in conf/app.conf\n2. return nil instead of return c.Render() / return c.Redirect(...)\n@xpbliss, if you want to return nil instead of Render methods family, set response status explicitly before returning like:\nGo\nc.Response.Status = 200\nOK, this is the way Revel works. If Status is not defined compress filter will set Status to 200 ok and Content-Type to application/x-gzip (that's why download dialog appears).\n~~Not sure whether there is something wrong with this behavior as I couldn't even imagine somebody would ever want to return nil~~. Your thoughts?\n. > https://stackoverflow.com/questions/26035816/testing-post-method-with-csrf\n@kostonstyle, TestGetSignUp is not guaranteed to be started before TestPostSignUp. Try to receive csrf-token either inside Before() or TestPostSignUp().\n. Yes it works. Thanks\n. :+1: This is exactly what I was thinking about. And cover it by tests. And make something with ResponseBody as its comparison to string is a very common use-case.\n. Should it be extracted into a dedicated repo? Or just a separate folder like testsuite?\n. > `````` HTML\n\n{{with $field := field \"user.User\" . }}\n//why not support ID? ,such as :\n{{$field.Error}}\n{{end}}```\n``````\n\n@xpbliss, there is {{$field.Id}}. In your case it will produce user_User.\n\nHow the views \"name\" value pass into the controller \"models.User\" ?\n\nAs for this question, could you please clarify what you mean.\n\nwhen using the angularjs in view \"userform.[[$field.Name]].value\",it's wrong.\n\nI have never used AngularJS before. I wonder, can userform['field name is here'].value (in your case userform['[[$field.Name]]'].value) be used instead of userform.fieldName.value?\nYou have redefined Revel's {{ template delimiters to [[ in your local version of Revel, right?\n. @dmitrykakunin, here is a discussion which explains why Golang templates work that way.\nThe workaround is:\n{{ \"<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->\" | raw }}\n{{ \"<!--[if lt IE 9]>\" | raw }}\n    <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n    <script src=\"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n{{ \"<![endif]-->\" | raw }}\n. You're welcome.\n. @brendensoares, 30 second sleeps are not enough now (#613). I just restarted the tests.\n. Hey, @kostonstyle.\nDefault Session filter signs your data and stores it in cookies. Thus the size is limited to 4kb.\nAt the same time Revel is very extendable. You can redefine most of the components including Session filter. Write your own, include it in your app/init.go file instead of\nGo\nrevel.SessionFilter, // Restore and write the session cookie.\nAnd that's it. So, yes it is possible.\nBut you don't necessarily need to work with Redis directly. You can write a filter which would store you data in Cache. And there is an out of the box support of both Redis and Memcached by Revel's Cache. That's just a matter of a few lines in your conf/app.conf:\nINI\ncache.memcached = true | false # a boolean indicating whether or not memcached should be used. (default false)\ncache.redis     = true | false # a boolean indicating whether or not redis should be used. (default false)\ncache.hosts     =              # a comma separated list of hosts to use as backends. If the used cache is Redis, only the first host in this list is used.\nI have tried to show advantages and disadvantages in the following table:\n| Feature | Cookie based | Cache based (default) | Cache based (Redis/Memcached) |\n| --- | --- | --- | --- |\n| Scalability | scalable | one Revel instance only | scalable |\n| Max data size | 4kb per user | < RAM for all users | > RAM for all users |\n| A part of Revel project | :+1: | :-1:, develop your own or use third party (example) solution | :-1:, develop your own or use third party (example) solution |\n| No need to install any extra software | :+1: | :+1: | :-1: , install either Redis or Memcached |\n. Gorilla session provide more functionality.  On the gorilla website, they said\nImportant Note: If you aren't using gorilla/mux, you need to wrap your handlers with context.ClearHandler as or else you will leak memory! An easy way to do this is to wrap the top-level mux when calling http.ListenAndServe:\nhttp.ListenAndServe(\":8080\", context.ClearHandler(http.DefaultServeMux))\nThe ClearHandler function is provided by the gorilla/context package.\nThat is the problem, how  can I know, if memory leaks is go to happen?\nThe revel framework is awesome, your guys make a great job.\n. Yes I will try to write a middleware for that, I will let you know.\n. I am working on session store based on gorilla session.\n. @brendensoares, I think this idea is super awesome. We can kill two birds with one stone. Just as you have already mentioned, good docs will support the growth of community. And understanding of priorities will let us focus on aspects which are most important for real world apps.\nI think we can start from defining a list of initial subjects. They should not be too low level. Because in this case we will have intersection with our manual.\n. @xpbliss, use c.Request.Header.Get(\"X-Forwarded-For\") instead of c.Request.Header[\"X-Forwarded-For\"][0]. It will return the first element if X-Forwarded-For does exist and empty string otherwise.  Or just manually check that X-Forwarded-For exists.\nX-Forwarded-For identifies IP address of a client connecting through proxy. So, when you are running your app, X-Forwarded-For happens to be empty. And as you want to get the first element of it the panic occurs.\n. go fmt has been a requirement for a long of time (BTW it automagically sorts imports in alphabetical order). Can we make go lint a one more requirement, so most style mistakes are fixed as well?\n. > the bit about sorting imports was actually about leaving blank lines between groups of packages. Check out the link.\n@pushrax I know. This issue is likely partially inspired by the latest comments in discussion #606.\n. Interesting link: http://goreportcard.com\n. @pedromorgan No, it isn't fixed.\n. Hey, @xpbliss.  connected() method is executed before every request and RenderArgs stores per request values. Why have you decided that RenderArgs[\"user\"] still exists after expiration of cookies?\nCould you please provide more details?\n. RenderArgs[\"user\"] is nil right after cookies are expired. What makes you think that it isn't? Probably you can share your exact use-case and info on what you are trying to do. Then it will be possible to help you.\n. Hey, @JaTochNietDan, could you please provide some use-case?\n. There are such projects in Python. For example, Github-Auto-Deploy or Git Play (both are one file solutions). I think it can be actually easily done in Revel. It should listen on some port and pull request when it gets hook from git's X branch. Illustration from Github-Auto-Deploy's README:\n\nIt can even parse .travis.yml file and follow the steps there (we can use docker somehow). The most difficult part is restarting itself (harness is not included in deployed apps, right?); if only it is not started as a separate app (process).\n. :+1: Thank you, @sprij. Looks good to me.\n. Wouldn't file system cache be too slow? Or would it be an in-memory cache + file system just like yet another Redis?\n. Guten Tag, @cnaize!\nFrom documentation:\n\nThe embedded url.Values (godoc) does provide accessors for simple values, but developers will find it easier to use Revel\u2019s data-binding mechanisms for any non-string values.\n\nIt is possible to manually bind your parameters like:\n``` Go\nfunc (c Admin) UpdateSettings() revel.Result {\n    var settings []map[string]string\n    c.Params.Bind(&settings, \"settings\")\n// ToDo\n\n}\n```\nBTW, if you are using ...['Name'] in your HTML instead of ...[Name], the name of your attribute will be 'Name'. Not sure whether it's what you expect.\n. G'day, @klauspost.\nThank you for your contribution. I see how this change is useful for web-sites which require on-the-fly translation of their content by end-users. So messages can be taken from DB, not only from config. Is it your use-case?\nDo alternative Message implementations still need parseLocale function. Are there use cases when we are going to override Message but still need messages which is private now?\n. Hey, @somenxavier. Update your copy of fsnotify: go get -u github.com/howeyc/fsnotify.\nSimilar issues are #539 and #689.\n. Standard net/http will have graceful shutdowns built-in starting from Go 1.8.\n. Hey, @amlwwalker.\n\nIs it possible to change the \"App\" part of the name, or remove it entirely from the URL? Can I do this in configuration anywhere?\n\nSure, it's possible. There is a routes file for that: conf/routes. You can define a route for every action like:\nGET    /login                 App.Login              # A simple path\nor even make things like:\n*      /something_here/:action   App.:action    # Catch all requests to the App controller\n\nAlso could you point me in the direction of any documentation to make get parameters false directories? \nhttp://localhost:9000/App/Pagename/max/2\n\nIf you explicitly define a route in conf/routes in a format:\nGET      /App/Pagename/max/:max   App.Pagename\nyou'll get the behavior you need.\nYou can read more about routes in the official manual.\nFeel free to ask any questions here on github or in Google Group.\n. Thanks, @kishorevaishnav. @amlwwalker, hope this answers your question. If not, feel free to reopen.\n. #719 is already in master (as #723), isn't it?\n. > no\n\n\n719 is already in master (as #723), isn't it?\n\n\n@brendensoares, I think it is:\n\n723\nMilestone v0.11\nbrendensoares merged commit 9b837f6 into revel:develop from JaTochNietDan:master on Sep 13\n\nI know, #719 was reverted. But #723 is a retargeted version of #719 + a few commits related to renaming of fLink to errorLink.\n. Can confirm. Looks like there is a merging problem with #723:\nLink is missing in Error struct and strconv import is required. Patch is needed.\n. Thank you, @elaich, @dragon3. Thanks, @pushrax, you were 1 minute faster than me. I'm closing it now as the issue is solved.\n. Hello, @svalleru. Are you using the latest version of Revel? Could you please run go get -u github.com/revel/cmd/revel, try to package your app again, and share the results with us?\n. Thank you, @acrisci. LGTM, I think it can be merged.\n. @atomical, test command has the following format:\nSh\nrevel test [import path] [run mode] [suite.method]\nSo, if you have a, say, smth section run tests as follows:\nSh\nrevel test github.com/anonx/sample smth\nBTW Revel config supports ENV variables. So, you may want to use them as well:\n``` Ini\nconf/app.conf\nmysql.db.name = ${MYSQL_DB_NAME}\n```\nThen it would be possible to run your tests like:\nMYSQL_DB_NAME=somedb revel test github.com/anonx/sample\n. > @anonx did you remember to mix in 3 parts ground up unicorn horn?\nThank you, @brendensoares, ground up unicorn horns and leprechaun neck beard shavings did the trick. Now everything works.\n@pushrax, go get does not support branches, does it? Should git clone -b $CURRENT_BRANCH <remote_repo> $HOME/gopath/github.com/revel/<repo_name> be used instead of go get -v <remote_repo>?\n. OK, I have mixed two things in my starting message. It actually can be built but cannot be tested (at least I haven't managed to so far). go test github.com/revel/revel returns the following for me:\nSh\nanonx@localhost:~/Development/src$ go test github.com/revel/revel/\n2014/11/01 01:51:43 revel.go:297: Failed to load module. \\\nImport of github.com/revel/revel/modules/jobs failed: \\\ncannot find package \"github.com/revel/revel/modules/jobs\" in any of:\n    /usr/lib/go/src/pkg/github.com/revel/revel/modules/jobs (from $GOROOT)\n    /home/anonx/Development/src/github.com/revel/revel/modules/jobs (from $GOPATH)\nFAIL    github.com/revel/revel  0.022s\nThe module with incorrect path is random. Sometimes it is jobs, sometimes static or testrunner.\nI have executed git checkout develop && git pull origin develop, everything is up to date.\n. @pushrax, as far as I know there aren't any. Moreover, I have signed up at Koding and reproduced it at their virtual machine.\n``` Sh\nsudo apt-get install golang git\ncd ~\nmkdir Go\nSet $GOPATH in .profile\ngo get github.com/revel/revel\ncd src/github.com/revel\ngit clone -b develop https://github.com/revel/modules\ncd revel\ngit checkout remotes/origin/develop\ngit checkout develop\ngit branch\n * develop\n  master\ngit pull origin develop\n From https://github.com/revel/revel\n * branch            develop    -> FETCH_HEAD\nAlready up-to-date.\nanonx: ~/Go/src/github.com/revel/revel $ ls -la\ntotal 360\ndrwxr-xr-x 8 anonx anonx  4096 Nov  1 13:49 .\ndrwxr-xr-x 5 anonx anonx  4096 Nov  1 13:47 ..\ndrwxr-xr-x 8 anonx anonx  4096 Nov  1 14:01 .git\n-rw-r--r-- 1 anonx anonx    55 Nov  1 13:47 .gitignore\n-rw-r--r-- 1 anonx anonx  1499 Nov  1 13:49 .travis.yml\n-rw-r--r-- 1 anonx anonx  6942 Nov  1 13:47 CONTRIBUTING.md\n-rw-r--r-- 1 anonx anonx  1092 Nov  1 13:47 LICENSE\n-rw-r--r-- 1 anonx anonx  1753 Nov  1 13:49 README.md\n-rw-r--r-- 1 anonx anonx 14821 Nov  1 13:47 binder.go\n-rw-r--r-- 1 anonx anonx  9854 Nov  1 13:47 binder_test.go\ndrwxr-xr-x 2 anonx anonx  4096 Nov  1 13:47 cache\n-rw-r--r-- 1 anonx anonx  4512 Nov  1 13:47 compress.go\n-rw-r--r-- 1 anonx anonx  1334 Nov  1 13:47 compress_test.go\ndrwxr-xr-x 2 anonx anonx  4096 Nov  1 13:47 conf\n-rw-r--r-- 1 anonx anonx  3059 Nov  1 13:47 config.go\n-rw-r--r-- 1 anonx anonx 11313 Nov  1 13:47 controller.go\n-rw-r--r-- 1 anonx anonx  3788 Nov  1 13:47 errors.go\n-rw-r--r-- 1 anonx anonx  2429 Nov  1 13:49 fakeapp_test.go\n-rw-r--r-- 1 anonx anonx  1662 Nov  1 13:47 field.go\n-rw-r--r-- 1 anonx anonx  1112 Nov  1 13:47 filter.go\n-rw-r--r-- 1 anonx anonx  6838 Nov  1 13:47 filterconfig.go\n-rw-r--r-- 1 anonx anonx  3400 Nov  1 13:47 filterconfig_test.go\n-rw-r--r-- 1 anonx anonx  1962 Nov  1 13:47 flash.go\n-rw-r--r-- 1 anonx anonx  4477 Nov  1 13:47 http.go\n-rw-r--r-- 1 anonx anonx  5889 Nov  1 13:47 i18n.go\n-rw-r--r-- 1 anonx anonx  7989 Nov  1 13:47 i18n_test.go\n-rw-r--r-- 1 anonx anonx  5648 Nov  1 13:47 intercept.go\n-rw-r--r-- 1 anonx anonx  2603 Nov  1 13:47 intercept_test.go\n-rw-r--r-- 1 anonx anonx  1127 Nov  1 13:47 invoker.go\n-rw-r--r-- 1 anonx anonx  3318 Nov  1 13:47 invoker_test.go\n-rw-r--r-- 1 anonx anonx   654 Nov  1 13:47 libs.go\n-rw-r--r-- 1 anonx anonx   771 Nov  1 13:47 panic.go\n-rw-r--r-- 1 anonx anonx  3584 Nov  1 13:47 params.go\n-rw-r--r-- 1 anonx anonx  4675 Nov  1 13:47 params_test.go\n-rw-r--r-- 1 anonx anonx  9278 Nov  1 13:47 results.go\n-rw-r--r-- 1 anonx anonx  1271 Nov  1 13:47 results_test.go\n-rw-r--r-- 1 anonx anonx  9988 Nov  1 13:49 revel.go\n-rw-r--r-- 1 anonx anonx 13285 Nov  1 13:47 router.go\n-rw-r--r-- 1 anonx anonx 11049 Nov  1 13:47 router_test.go\n-rw-r--r-- 1 anonx anonx  4664 Nov  1 13:47 server.go\n-rw-r--r-- 1 anonx anonx  2659 Nov  1 13:47 server_test.go\n-rw-r--r-- 1 anonx anonx  5194 Nov  1 13:47 session.go\n-rw-r--r-- 1 anonx anonx  1747 Nov  1 13:47 session_test.go\ndrwxr-xr-x 7 anonx anonx  4096 Nov  1 13:47 skeleton\n-rw-r--r-- 1 anonx anonx 14600 Nov  1 13:47 template.go\ndrwxr-xr-x 3 anonx anonx  4096 Nov  1 13:47 templates\ndrwxr-xr-x 3 anonx anonx  4096 Nov  1 13:47 testdata\n-rw-r--r-- 1 anonx anonx 10315 Nov  1 13:49 tests.go\n-rw-r--r-- 1 anonx anonx  4359 Nov  1 13:47 util.go\n-rw-r--r-- 1 anonx anonx  2600 Nov  1 13:47 util_test.go\n-rw-r--r-- 1 anonx anonx  6833 Nov  1 13:47 validation.go\n-rw-r--r-- 1 anonx anonx  2201 Nov  1 13:47 validation_test.go\n-rw-r--r-- 1 anonx anonx  3753 Nov  1 13:47 validators.go\n-rw-r--r-- 1 anonx anonx  7854 Nov  1 13:47 validators_test.go\n-rw-r--r-- 1 anonx anonx  5717 Nov  1 13:47 watcher.go\ngo test\nERROR 2014/11/01 13:55:22 revel.go:273: Failed to import github.com/revel/samples/booking with error: cannot find pack\nage \"github.com/revel/samples/booking\" in any of:\n        /usr/lib/go/src/pkg/github.com/revel/samples/booking (from $GOROOT)\n        /home/anonx/Go/src/github.com/revel/samples/booking (from $GOPATH)\n```\ngrep -r \"revel/revel/modules\" ./ and grep -r \"revel/revel/samples\" ./ find nothing. go build works as expected, there are no any errors.\n. :+1: @pushrax. Everything is OK now. I didn't know fakeapp_test used samples.\n\nDo you have some generated files left around that were deleted in the tree?\n\nSo, there actually were generated files inside samples on my local PC.\n. Hey, @xpbliss.\nIdeally, here is a howto (there is also a godoc):\nUpdate your app/init.go. Include import path of CSRF module:\nGo\nimport (\n    ...\n    csrf \"github.com/revel/revel/modules/csrf/app\"\n)\nAnd add it to the list of filters:\nGo\n...\nrevel.FlashFilter,      // Restore and write the flash cookie.\ncsrf.CsrfFilter,        // CSRF prevention.\nrevel.ValidationFilter, // Restore kept validation errors and save new ones from cookie.\n...\nInclude {{ csrftoken . }} or <input type=\"hidden\" name=\"csrftoken\" value=\"{{._csrftoken}}\"> in your forms.\nBut I'm afraid it is not ready yet. I may be mistaken though.\n. @revel/core, Looks like this condition will always be true.\nMoreover, due to this the token will not be rendered if I'm visiting page for the first time.\nMy bad I didn't check it earlier.\n@brendensoares, there wouldn't be a patch release? I'm asking to know whether I should create a PR with the fix in revel/modules or revel/revel.\n. Thank you, @xpbliss. That's why I have said it is not ready yet. The module requires a number of changes. Until it is finished it is possible to use third party modules. For example, this one.\n. @brendensoares, I'm working on a fix. There is an aspect I'm thinking about. Should lack of Referer header be considered an attack? Some users turn referer's transmission off for privacy's sake. Should we allow it? Or probably make it configurable and let app developers decide?\n. @brendensoares, in current implementation it is used in pair with Synchronizer Token Pattern (and Cookie-to-Header Token for methods others than POST). So it should be secure enough. The question arises as to whether Referer validation adds any additional value. If not, probably it worth getting rid of it.\nBTW Django has it, Play! doesn't.\nAnother thing I'd like to touch on while this module is not widely used:\nIt is actually a filter rather than a module. It is just like Session filter. The fact it is located together with modules is strange as I cannot include it in my app.conf, can I? I think there should be a separate repo / folder for filters.\nAfter all it is not very convenient to import it every time in the following way:\nGo\nimport (\n    csrf \"github.com/revel/revel/modules/csrf/app\"\n)\nThat app part is annoying and it is against golang convention.\n. And there is a thing I don't quite understand. This part:\nGo\nrevel.TemplateFuncs[\"csrftoken\"] = func(renderArgs map[string]interface{}) template.HTML {\n    if tokenFunc, ok := renderArgs[\"_csrftoken\"]; !ok {\n        panic(\"REVEL CSRF: _csrftoken missing from RenderArgs.\")\n    } else {\n        return template.HTML(tokenFunc.(func() string)())\n    }\n}\nHere we get a CSRF token string from a map of arguments:\nGo\ntokenFunc, ok := renderArgs[\"_csrftoken\"]\nRight? Why is it tokenFunc? And what are we doing next?\nGo\ntokenFunc.(func() string)()\n. > @anonx looking closer it seems the csrf and db modules should both be part of Revel's core library as subpackages. Do you agree?\nAs for csrf, if we are not going to create a separate repo for filters I think yes it should be a part of Revel's core. db is neither a filter not a module. At the same time it does not provide too much at the moment. Probably it can become a part of a larger package for DB manipulation.\n. @xpbliss, not yet.\n. @verdverm, what is the status of auth module?\n\nGod, who can solve this problem\n\n@goofcc Anybody who wants to. But if there are no such people, I'll try to do it till v0.12 release.\n. > Need to add some stuff to docs about modules\n@pedromorgan Not now. csrf is not ready and unfortunately cannot be used yet. CSRF is a module but it should be turned into filter, I think.\n. @brendensoares OK. I'm trying to be always online. So, any day is OK. Are you still in GMT-8 timezone? If so, either morning or evening hours would be good.\n. Jan 3, 2015, 5pm (PST). Right? :+1:\n. #### To do list:\n- [ ] Create filter as csrf package in revel/revel.\n  - [ ] Apply Synchronizer Token Pattern to all requests but GET, HEAD, OPTIONS, TRACE, and WS; +/- check origin if presented.\n  - [ ] Check origin of Websocket handshake connections.\n- [ ] Fix template helper function.\n- [ ] Revise exempt functionality. +/- Replace map by thread safe version.\n. @Gujie I think the only option right now is to use https://github.com/cbonello/revel-csrf.\n. @brendensoares, there is a convention:\n\nAnother convention is that the package name is the base name of its source directory\n\nSo, as a new package name is testing, source directory's name is testing as well.\nAnd I use testing instead of testsuite as a package name, because testing.TestSuite looks better than testsuite.TestSuite. And somewhere there was another convention for that.\nBut if you can come up with a better package name, I'll rename it.\n. Sooo, I'm merging this and this, eh? @pushrax \n. Yep, I'll do it.\n. > The only way of fixing this I can think of is to have a file similar to a Gemfile.lock that records the SHA of the referenced repos :(\n@pushrax, there are a number of golang projects for that.\ngoop has the exact behavior you have described. godep is a more popular thing for that but it stores all the dependencies inside your repo (there will be Godeps/_workspace/src/...).\nI personally like the way @robfig's glock works. The only difficulty I have faced is glock save github.com/revel/revel (for develop branch) saves all dependencies but revel/modules and revel/samples because there are no such import paths inside revel (1, 2). So I have to add them manually as follows:\nGlock\n...\ngithub.com/revel/modules 8dfbc9ef1dd867acb81ce515d88de809acdae048\ngithub.com/revel/samples b9195cea1e01697e6f123b2f120807883c69d558\nAnd it works as expected till I decide to update my dependencies like glock save github.com/revel/revel again. This command deletes the import paths I have added manually.\n. @pushrax, I'm not a rubyist. I wonder how Gemfile.lock solves the issue you have mentioned. Doesn't gom have similar use cases? It has Gomfile which looks exactly like Gemfile:\nRuby\ngom 'github.com/mattn/go-ole', :goos => 'windows'\ngroup :test do\n    gom 'github.com/mattn/go-sqlite3', :branch => 'develop'\nend\ngroup :production do\n    gom 'github.com/mattn/go-sqlite3', :branch => 'master'\nend\nBut it will not work for our case as neither modules nor samples are golang packages which can be installed.\nCan we modify the tests in such a way that revel would not depend on samples (and as a result on modules)? We have testdata/i18n, why cannot we have testdata/someSampleFragment?\n. Hello, @birkirb. Thank you for opening this issue. You are right, MakeRequest is no longer a method of TestSuite. You can find related discussion here: #687. testSuite cannot be accessed and docs update is needed. Probably we should introduce (t *TestSuite) NewTestRequest(req http.Request) *TestRequest. It will fix the issue. Thus it will be possible to write own methods like:\n``` Go\ntype TestSuite struct {\n    revel.TestSuite\n}\nfunc (t *TestSuite) PutFormCustom(...) {\n    req := http.NewRequest(...)\n    ...\n    return t.NewTestRequest(req)\n}\n```\nNow it is still possible to implement own methods by overriding the result of existing ones. For example, PutFormCustom will look like:\nGo\nfunc (t *TestSuite) PutFormCustom(uri string, data url.Values) *TestRequest {\n    req := t.PostFormCustom(uri, data)\n    req.Method = \"PUT\"\n    return req\n}\n. @pushrax I think so.\n. @brendensoares,\n\nnil instead of c.RenderText(\"\")\n\ndoesn't work.\nIt looks like it is not possible to use methods like WriteTo with c.Response.Out as argument.\n@flamingtop, there are two possible ways to use the captcha:\n``` Go\nfunc (c *App) Captcha() revel.Result {\n    id := captcha.New()\n    c.Session[\"captcha_id\"] = id\nvar buffer bytes.Buffer\ncaptcha.WriteImage(&buffer, id, 240, 80)\n\nc.Response.ContentType = \"image/png\"\nc.Response.Status = 200\n\nreturn c.RenderText(buffer.String())\n\n}\n```\nOr alternatively as Rob answered here:\nGo\nfunc (c Application) Captcha(id string) revel.Result {\n    c.Response.ContentType = \"image/png\"\n    captcha.WriteImage(c.Response.Out, id, 250, 250)\n    return nil\n}\nIt doesn't answer why the code you have posted doesn't work though.\n. > @anonx returning nil doesn't work? Why not? Rob, as you noted, suggested that. Can you clarify what isn't working about that?\n@brendensoares, I mean it doesn't fix the issue and cookies are still empty.\n\nthe cookie in the HTTP responses from your browser before, during and after the captcha action?\n\n@brendensoares, when using c.Response.Out.Write() or c.Response.Out.WriteHeader() instead of returning result at the end of action there is no Set-cookie header in response.\n\nAbove serves the captcha image fine as well, BUT it doesn't write the session cookie.\n\n@ShawnXu, yes but it is assumed that you will have another action where you generate a new captcha id and save it to session:\nGo\nfunc (c App) LoginForm() revel.Result {\n    id := captcha.New()\n    c.Session[\"captcha_id\"] = id\n    // In your template you should include\n    // <img src=\"{{url \"Application.Captcha\" .session.captcha_id}}\" alt=\"Captcha\">\n    return c.Render()\n}\n\nBoth bytes.Buffer and c.Controller.Response.Out seem to implement \"Write\", I wonder what difference does it make\n\n@flamingtop, in my case I didn't use c.Response.WriteHeader() or c.Response.Out.Write() because that is what causes the error.\n. Well, the reason is simple. RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1, (6) Response:\n\nAfter receiving and interpreting a request message, a server responds with an HTTP response message.\nResponse = Status-Line               ; Section 6.1\n           *(( general-header        ; Section 4.5\n           | response-header         ; Section 6.2\n           | entity-header ) CRLF)   ; Section 7.1\n           CRLF\n           [ message-body ]          ; Section 7.2\n\nSimply saying, order of Write calls matters. It is not possible to call http.SetCookie or WriteHeader after c.Response.Out.Write has already been called from action.\nSo, we should either make c.Response.Out private and provide some other mechanism for writing directly to response or change the order of calls somehow.\n. The question is not really about Revel but rather Golang. Because if you have golang installed installing revel is just a matter of 1 command. But anyway here is an instruction:\nGolang and Revel framework installation on windows\n\nOpen http://golang.org/dl/ and download the latest stable .msi for your system (386 for 32 bits systems or amd64 for 64 bits ones), install it.\n   \n\n.\nCreate a folder where the code you are going to work on will be located. For example, D:\\Go.\nAdd D:\\Go\\bin to PATH, set environment variable GOPATH to \n   D:\\Go. More about it here. For Windows 7 the process will look like:\nFrom the Desktop, right-click the Computer icon and select Properties. If you don't have a Computer icon on your desktop, click the Start button, right-click the Computer option in the Start menu, and select Properties.\nClick the Advanced System Settings link in the left column.\nIn the System Properties window, click on the Advanced tab, then click the Environment Variables button near the bottom of that tab. In the Environment Variables window (pictured below), highlight the Path variable in the \"System variables\" section and click the Edit button. Add or modify the path lines with the paths you want the computer to access. Each different directory is separated with a semicolon as follows: C:\\Program Files;C:\\Winnt;C:\\Winnt\\System32;C:\\Go\\bin;D:\\Go\\bin.\n      \nInstall git, hg, bazaar, and CVS.\n   \nStart cmd.exe and go get the Revel: go get github.com/revel/cmd/revel.\nStart a sample app: revel run github.com/revel/revel/samples/booking.\nOpen http://localhost:9000. Booking sample should be there.\n\nBut I'd recommend just using *nix Virtual machine as Windows version has lower priority.\nLinks\n\nhttps://golang.org/doc/install#windows\n. I'm closing it now. Feel free to reopen. \n\nP.S.: We are now encouraging the community to both ask and answer common Revel workflow questions on StackOverflow.\n. > However, the solution is to actually do add this to the path as well: C:\\Go\\bin\\bin. Strange that it does this on windows but anyway, problem solved for me.\n@benjamin-wss, if it's not a typo and the path is C:\\Go\\bin\\bin that means that your GOPATH=C:\\Go\\bin. In fact it should point to any existing empty folder, for example D:\\MyGoProjects\\. And then D:\\MyGoProjects\\bin should be added to PATH.\n. @benjamin-wss, actually all you have to do is just updating your GOPATH here:\n\nBut I would agree that use of a virtual machine is a better alternative if you want to focus on development instead of installation.\n. Hey, @deterok. Glad to hear. Are there still any errors?\nThere is actually a description of this in godocs of template:\nGo\n// ErrBranchEnd: \"{{if}} branches end in different contexts\"\n// Example:\n//   {{if .C}}<a href=\"{{end}}{{.X}}\n// Discussion:\n//   Package html/template statically examines each path through an\n//   {{if}}, {{range}}, or {{with}} to escape any following pipelines.\n//   The example is ambiguous since {{.X}} might be an HTML text node,\n//   or a URL prefix in an HTML attribute. The context of {{.X}} is\n//   used to figure out how to escape it, but that context depends on\n//   the run-time value of {{.C}} which is not statically known.\n//\n//   The problem is usually something like missing quotes or angle\n//   brackets, or can be avoided by refactoring to put the two contexts\n//   into different branches of an if, range or with. If the problem\n//   is in a {{range}} over a collection that should never be empty,\n//   adding a dummy {{else}} can help.\n. @deterok, you've said the problem is partially solved that's why I have decided something else is wrong.\nIf everything works as expected I'm closing it now. Feel free to reopen. Thank you.\n. @ottob, :+1: \n. @rtm7777, :+1:. Glad to hear your issue has been solved.\n. Hey, @chengziqing. Could you please provide more info about your app so it would be possible to reproduce the error.\n. Glad to hear your issue has been solved. I'm closing it then.\n. Hey, @cnaize. Custom functions should be registered within init() function as follows:\nGo\nfunc init() {\n    revel.TemplateFuncs[\"eq\"] = func(a, b interface{}) bool { return a == b }\n}\nThere is no need for OnAppStart because startup hooks are run after initialization of templates.\nHere is a related issue: #353. The orders of initialization in dev and prod modes are different that's why your code works in dev mode but not in prod. It looks like an easy change and is likely to be fixed in v0.12.\n. @klauspost, I wonder can this be implemented in a form of filter? The thing is improvement of internal organization is on our roadmap. Among other things it includes better modularity, reduction of the Revel's API surface, and less code in the main repo.  In this way we are trying to improve maintainability of Revel's code base and simplify its further development.\nI think we can create contrib repo for filters and modules. Thus, the development could become even more community oriented.\n. @brendensoares, why not? Here is PoC just for illustration:\ntestrunner:\n``` go\nfunc saveContext(c *revel.Controller) revel.Result { \n    revel.INFO.Println(\"One more request\") \n    cache.Set(\"somekey\", c.RenderArgs, time.Minute) \n    return nil \n } \nfunc init() { \n    revel.InterceptFunc(saveContext, revel.FINALLY, revel.ALL_CONTROLLERS) \n} \n```\ntestsuite:\n``` go\nfunc (t *TestSuite) TestThatIndexPageWorks() {\nt.Get(\"/\")\nt.AssertOk()\nt.AssertContentType(\"text/html; charset=utf-8\")\n\nvar context map[string]interface{}\n_ = cache.Get(\"somekey\", &context)\nrevel.WARN.Printf(\"%#v\", context)\n\n}\n```\nSo, we have just an interceptor in our testrunner which saves the context to cache. And in testsuite we are just getting the context back and using it.\nOf course, the actual implementation will be a little bit more complex and there will be wrappers in testsuite to hide the use of cache.\n. Thank you, @xiaoao.\nInfo\nThis is a retargeted and squashed into 1 commit version of #770. It halfway closes #774.\n. This is a copy of #806. So, I'm closing it.\n. Hey, @5dao. Could you please clarify what you are trying to do and what is the problem?\n1. You are using jsrender, right?\n2. Should  str2thml .ops part be processed by jsrender or Revel? str2thml is your custom golang template function, isn't it?\nP.S.: there are a few ways to prevent golang template from escaping your data:\nA) Add to your conf/app.conf  the following line:\nINI\n// There should be a space between {% and %}.\n// You can use here whatever delimiters you want.\ntemplate.delimiters = {% %}\nThen, all your {{ something }} contructions will be treated as plain text. And it will be possible to use {%if%}, {%end%}, etc. instead.\nB) Use raw method as follows:\nHTML\n{{raw \"{{ something }}\"}}\nThen, it will be rendered as {{ something }}.\n. OK, now I see what you mean. @dao, this is how golang templates work. Execute's data parameters are not trusted even if you are using raw (which returns your data as template.HTML).\nSo, your code should be modified in such a way that only value you need is returned. <option> is a part of template, it is not a good idea to manually concatenete it to your data.\n. You are welcome.\n. Hey, @rtm7777. You can actually just have in your template something like:\nhtml\n{{if eq .RunMode \"dev\"}}\n    <!-- Dev mode scripts are here /-->\n{{else}}\n    <!-- Prod mode scripts are here /-->\n{{end}}\n. I have deleted the second part of my answer. Actually, if you want some kind of special behavior of static module it is better to clone it and make the changes you need. And then replace in your conf/app.conf the module.static=github.com/revel/revel/modules/static line.\nHope this helped. I'm closing this issue, feel free to reopen and ask further questions here. Thank you.\n. Who controls @revelframework twitter account? Can v0.11.2 bugfix release be announced? Those who use revel in production are recommended to upgrade it ASAP. From a dozen of projects only two are not affected by the bug.\n. @brendensoares, :+1: \n@landaire, I think additional info should not be shared publicly until projects in the wild fix the vuln. So, I emailed you the details.\n. @notzippy, unfortunately you are right. I didn't pay attention to the fact that ServeModule calls Serve rather than returning result on its own. And Serve does use value from Fixed params now instead of the input argument. Thus, working version should look like:\nhttps://gist.github.com/anonx/4faf012749485965fe8d\nAre you using revel in production?\n. @notzippy Then there are a few options:\n1. One more release (v0.11.3) with the fix in gist or changes to master without new release\n2. You can clone static module, apply the changes from gist and replace module.static=...'s value in your conf/app.conf. So, use your own static module.\n3. You can use v0.11.1 (before patch) but remove wildcard route from your conf/routes file, so it wouldn't be affected by the bug.\nI personaly use the 4th option:\n4. Do not use static module in production, let nginx care about your static files. It is not always possible though.\n. @brendensoares http://localhost:9000/Static/Serve?prefix=/etc&filepath=passwd or prefix=conf&filepath=app.conf. This worked on any project that had a wildcard route.\n. Hello, @pbnjay. Thank you for raising this issue. You are right \"index out of range\" panic is not really user-friendly and intuitive thing. And something like invalid arguments for url \"Controller.Action\" would be much more informative.\nThere are still plenty of time till v0.12 is released. So it's OK if you submit PR later. Make sure that you will target develop branch.\n. @brendensoares, the issue is {{url \"Controller.Action\" .arg1 .arg2 ...}} helper panics in case of incorrect arguments rather than showing a user friendly error message. Just like @pbnjay described, he had:\ngo\nfunc (c App) Thing() revel.Result {\n    return c.Render()\n}\nand was trying to use {{url \"App.Thing\" .someID}}. And instead of a message about incorrect arguments it paniced with a stack trace and error like runtime error: index out of range.\n. Hello, @xpbliss. You should create a windows service. Here is a SO thread with some details on how to do it:\n- http://stackoverflow.com/questions/3582108/create-windows-service-from-executable\nAdditional links\n\nhttp://support.microsoft.com/kb/251192 - Win Support: How to create a Windows service by using Sc.exe\nhttp://nssm.cc - the Non-Sucking Service Manager\n. This is a copy of #812, so I'm closing it.\n. @xpbliss, could you show your config file (of course without sensible parts). The error indicates that it cannot parse it.\n. Yeah, I was right. Looks like there is no app.name=some_name_here in your config file. So, when you are trying to use it as %(app.name)s it panics.\n. OK, but are you sure it is in default section but not in dev or some other?\n\n``` ini\napp.name should be here... /or/ in every of the sections below.\napp.name=something\n[prod]\n...\n[dev]\n...\n[something_else]\n...\n``\n. @xpbliss, can you show your config file?\n. @xpbliss, I cannot reproduce the error with the config above even with uncommented%(app.name)s/log/%(app.name)s.log. It looks correct and it works for me no matterGOPATH` and other parameters are presented on the host machine or not.\nThe only thing is without custom renamings and stuff like this your config will not work under *nix based systems. Because binaries do not have .exe extensions and it is not possible to have directory and file with the same name at the same place. So there would be a conflict: %(app.name)s binary and %(app.name)s directory. But that is not related to this issue actually. Moreover you are running Windows.\n. This has been closed by @pedromorgan as it is a copy of #814.\n. > We need a clear line to tag bugs..\n:+1:\n\nWhats release cycle..\n\nAs for release cycle. I think there would be a better progress if we have some kind of defined deadlines and time constraints. Like 3 month per release (v0.12, v0.13, ...). If we do not manage to discuss or implement some issue, we move it to the next release. So, it would be possible to work on things that we know how to implement and that really matter.\n. Hello, @xiam.\n\nIs it there a limitation that justifies messing with the user's $GOPATH/bin?\n\nI think there is no any. Looks like we can safely modify line 63 of harness/build.go:\ngo\nbinName := path.Join(pkg.BinDir, path.Base(revel.BasePath))\nAnd it will compile projects to another location. For example, we can use app's path instead of pkg.BinDir (which is $GOPATH/bin).\n. @brendensoares, yes I did.\n. Thank you, @JaTochNietDan. This is really very useful thing. I was thinking about it myself.\nCould you please target revel/modules repo. All revel modules are there now.\n. @brendensoares As far as I know it hasn't been retargeted.\n. Hello, @chengziqing. Could you please clarify what you are trying to do and what kind of problem arises. Step-by-step info on how to reproduce could be useful.\n. @notzippy :+1: I agree with 1, 3, 4. Don't think we should worry about backward compatability now though.\n. @notzippy \n1) Don't know. We should identify what exactly we are trying to achieve first. How the implementation could look like. And then decide whether standard logger is enough / any existing solutions exist and what value they bring.\n2) As early as possible. So, instead of wasting time discussing some abstract ideas we have a real PoC.\nBut well, I'm not an expert in the field of logging. How is this problem solved in other frameworks (Rails, Django, Play)?\n. Hello, @xpbliss. You should implement your own Session filter using this one as an example. And then include it in your init.go file:\n``` go\nrevel.Filters = []revel.Filter {\n    ...\n    // Comment default session filter\n    // revel.Session,\n// Insert your own one instead\nmy_session_package.SessionFilter,\n...\n\n}\n```\n741 is a relevant discussion.\n. Thank you, @nadeemc. gofmt is needed but apart from that it looks good.\nWe've discussed this issue (which is, I must admit, my fault) with @notzippy in #809 and waiting for response of either @brendensoares or @pushrax. They should decide whether one more patch release is possible or the fix should be merged without release or we shouldn't merge it to master at all.\n. Hey, @lozandier. There is a jwt package for golang. But I don't think there is a conventional way of its integration into Revel. So, you can define a conventional way yourself and then contribute to Revel docs.\n. Hello, @arahansa. I think yes, it is absolutely OK. At least there are already two projects like this: in Chinese (http://gorevel.cn/) and in Russian (http://docs.gorevel.ru/).\n. @brendensoares :+1: I support this absolutely brilliant idea. That what I mean by better documentation of every component of the framework. \nThe question is when it is possible to switch to RFC. There is already a code base and a lot of issues. How the migration will look like? Will RFC be used for new features only or for bug reports as well?\nIn case of emberjs RFC does not replace issues, right? It is just an additional element.\n. > @pedromorgan has made great improvement to the Revel website (pending PR) at revel/revel.github.io#43 which should address some of your concerns with better documentation.\n@pedromorgan great great job.\n\nThat said, we can definitely improve understanding of the lower level code details as well. I feel our efforts to better encapsulate and modularize the code base will help us immensely in that sense. That change alone will make our code base more mentally perceivable.\n\nAgree.\n. @pedromorgan, advantage of a separate repo over GH issue is that every RFC would be a refined description of feature X. And no matter how many people are working on the RFC, it will be kept short so any outsider can read it.\nIf you are using issues you would have to read a lot of comments without any structure to understand the idea and not miss any details. If only 1 person is working on an RFC, it may work, though.\nAnd yeah, it is easier for community members to contribute to the discussion in issues. How motivated they should be to pull request something to rfcs repo?\n. So, here is a short summary:\nRevel can import from modules (http://revel.github.io/manual/modules.html): \n1. templates\n2. controllers\n3. routes\n4. assets (using Static.ServeModule method).\nThis PR makes it possible to import i18n files, too. @notzippy Is my understanding correct?\ncasting @pedromorgan \n. @notzippy To import routes from the module, update your app's config/routes: https://github.com/revel/revel/blob/master/samples/booking/conf/routes#L5 or #422.\n. @brendensoares We are using Modules directly in static module BTW: https://github.com/revel/revel/blob/master/modules/static/app/controllers/static.go#L66\nThe only difference is here messages are scanned once (on bootstrap time). And static is iterating over modules on every request which is not really cool if we have many modules.\n. Hey, @xpbliss. Could you please clarify one thing:\nAre you asking about the Golang code for uploading files? If so, here it is, and its description is here.\n. Hello, @amlwwalker. Could you please provide more details on how to reproduce it.\nYou are running revel run github.com/revel/revel/samples/persona, right?\nThe message isn't actually related to read/write permissions. If you are using standard session filter then session data is stored in client cookies in a format:\nmy_session_data_here; here_is_a_signature_of_my_data\nSo if user is trying to modify their data, the signature is becoming invalid and session filter throws the message session.go:123: Session cookie signature failed. Thus it is a sign that either you are trying to modify cookies using Firebug or something. And then that message is an absolutely normal behavior. Or something else is doing it and we need to investigate this case.\n. @amlwwalker, by chance, didn't you delete (or set to empty value) app.secret from (in) conf/app.conf of persona sample?\n. @amlwwalker could you please clear cookies in your browser, try to visit persona / any other sample again, and publish the results here.\n. So, you did delete REVEL_SESSION (or whatever it is called) cookie and the message session.go:123: Session cookie signature failed still arises in console every time you visit the page?\n. Glad to hear everything works.\n. Can confirm. Looks like panic filter doesn't have a separate behavior for prod and dev modes. All it is doing is just recovering from panic, and writes stack trace to response.Out (See panic.go for details).\nThe correct behavior would be writing stack trace to response only in case mode.dev is true. @goofcc, you can either contribute the fix and wait for the release of v0.12. Or, as a workaround, till it is not resolved create your own panic filter (using this one as an example) and use it instead of the standard one.\n. @goofcc, could you show the code fragment which causes panic, what you get in console, a list of filters you use (in app/init.go), and a screenshot of the error (on mac osx).\n. Result is different if you are using (1) revel run ... prod or (2) revel build ... && run.sh, right? In first case you get an error, in second a stack trace is showed.\n. @brendensoares Not sure this is Windows specific.\nHere is the code, I use for check:\n\nIf I'm running it under Linux using revel run github.com/anonx/sample prod I get an error:\n\nSo, this is the exact behaviour we expect.\nHowever, if I use revel build github.com/anonx/sample /tmp/sample and cd /tmp/sample && ./run.sh it shows a stack trace:\n\nThus, the problem @goofcc identified is valid not only on Windows, but at least on Linux, too.\n\nIn order to ensure that this sensitive debug stack trace is NOT shown in production mode, we need to add an condition check...\n\n@brendensoares Exactly.\n. Hello, @yanlinpu. What exactly you are trying to do with those files? Upload them? If so, here is an example: https://github.com/revel/revel/blob/master/samples/upload/tests/multipletest.go#L23\n. So, module's asset files are not accessable, right? I'm afraid this is a bug. We have a fix in #824, but it is not merged yet.\n. @yanlinpu It should be fixed now. Upgrade to the latest version of revel: go get -u github.com/revel/cmd/revel.\n. Hello, @nxtuong7488.\nIs there any reason why you want to use redis based cache for dev environment?\nRevel's cache filter provides you the methods such as Set, Add, Delete, etc. They work similarly no matter what backend for cache data you use. Thus, it is possible to use RAM based cache (default) during development. And then seamlessly switch to cluster of memcached or redis in production if RAM based solution is not enough.\nSo, it's not like a common use case to configure memcached/some other cluster just for development of an app.\nAnswering to your questions.\n1. No it is not possible to select database in the current implementation.\n2. RedisCache implements Cache interface. And thus it contains only those methods which are required by the interface. That's why seamless transition from backend A to backend B, I have said above, is possible. RedisCache is not intended to be used as a primary database. So if you want to execute any other commands you would have to use redigo or any other library manually. \n3. In the current implementation pool of connections cannot be reused.\n. Gday, @pedromorgan. Can confirm, this is how it works. Reference:\ngo\nv := strings.TrimSpace(strings.ToLower(val))\nswitch v {\n    case \"true\", \"on\", \"1\":\n        return reflect.ValueOf(true)\n}\n// Return false by default.\nreturn reflect.ValueOf(false)\nBut I agree with you. That is strange. Probably it should do the opposite like:\ngo\nswitch v {\n    case \"false\", \"off\", \"0\", \"\":\n        return reflect.ValueOf(false)\n}\n// Return true by default.\nreturn reflect.ValueOf(true)\n\ndoes True, TRUE, or ON or On also..\n\nYes, due to use of ToLower it is case insensitive: TrUe = TRUE = True = ...\n. Here is how it works in Python (http://docs.python.org/reference/expressions.html#boolean-operations):\n\nIn the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: False, None, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true.\n. @pedromorgan You mean @anonx (just like anonymous -> anon X)? @anox is somebody else.\n. Hey, @opennota. Is it a dev environment (revel run ...)? Or prod (revel build ... & cd ... & ./run.sh)?\n. Yes, I've tried. Here are the results:\n\nopennota  26502 anonx    9u  IPv6 21601119      0t0  TCP *:9000 (LISTEN)\nopennota  26502 anonx   10u  IPv6 21617160      0t0  TCP server:9000->client:50713 (ESTABLISHED)\nopennota  26502 anonx   13u  IPv6 21616214      0t0  TCP server:9000->client:50714 (ESTABLISHED)\nopennota  26502 anonx   14u  IPv6 21617162      0t0  TCP server:9000->client:50715 (ESTABLISHED)\nopennota  26502 anonx   15u  IPv6 21616216      0t0  TCP server:9000->client:50716 (ESTABLISHED)\nopennota  26502 anonx   16u  IPv6 21617164      0t0  TCP server:9000->client:50717 (ESTABLISHED)\nopennota  26502 anonx   17u  IPv6 21617165      0t0  TCP server:9000->client:50718 (ESTABLISHED)\nI stress tested both @opennota's app and a newly created app. From loads of requests, a few stay unclosed.\nEdit:\nI've both tried to use go1.3 and go1.4. Same results. Subjectively, go1.3 closes connections faster. But I didn't measure. Tried to reread changelog of go1.4 to find out what changes are made to net package and stuff like this. But got 503 status code which is very symbolic.\nP.S.: The number of unclosed connections is absolutely random. Sometimes there are just a few of them. Sometimes the number growths rapidly.\nEdit 2:\nTo reproduce, follow the instruction:\n1. revel build ... an app. ./run.sh it.\n2. Open your-ip:9000. Press F5 multiple times.\n3. Use pgrep run.sh to find PID of your running app.\n- Use lsof -n -i -p $PID and netstat -an | grep 9000 to view the info about connections.\n- To increase the number of unclosed connections, use more than 1 client with their own IPs.\n  TIME_WAIT status is OK. But ESTABLISHED, which doesn't disappear for some time, is strange.\n. Well, it looks like this is not due to some kind of flaw in Revel code or something.\nHere is a related discussion. HTTP 1.1 keep-alive connections just live for quite long time.\nTo check this hypothesis update your init.go and insert to line 37:\ngo\nvar HeaderFilter = func(...) {\n    ...\n    c.Response.Out.Header().Set(\"Connection\", \"close\") // Line 37\n    ...\n}\nThus, connections will be closed immediately just as in case of HTTP 1.0.\nBut I think we still have to decide whether to use a timeout on server. Or come up with some other solution. Thoughts?\n. @opennota, http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\n\nSection 8.1.4 of the HTTP/1.1 RFC says a \u201csingle-user client SHOULD NOT maintain more than 2 connections with any server or proxy.\u201d The key here is the word \u201cshould.\u201d Web clients don\u2019t have to follow this guideline. IE8 isn\u2019t the first to exceed this guideline. Opera and Safari hold that honor supporting 4 connections per server.\n\nNumber of connections per server by browsers:\n| Browser | HTTP/1.1 | HTTP/1.0 |\n| --- | --- | --- |\n| IE 6,7 | 2 | 4 |\n| IE 8 | 6 | 6 |\n| Firefox 2 | 2 | 8 |\n| Firefox 3 | 6 | 6 |\n| Safari 3,4 | 4 | 4 |\n| Chrome 1,2 | 6 | ? |\n| Chrome 3 | 4 | 4 |\n| Chrome 4+ | 6 | ? |\n| iPhone 2 | 4 | ? |\n| iPhone 3 | 6 | ? |\n| iPhone 4 | 4 | ? |\n| Opera 9.63,10.00alpha | 4 | 4 |\n| Opera 10.51+ | 8 | ? |\n. @opennota, Can browser reuse those connections after restart? Or after long lasting inactivity? Probably, it can't so it opens new connections (and old ones are neither closed not reused). I haven't dived into RFCs, specs, and browser docs, though. So, that's just my assumption.\n@brendensoares, do you think Revel should have some timeouts built in? We have WS support, I'm not sure how that would affect it. But at least, this should be documented. Because, malicious clients (any clients with F5 button) are able to DoS a website in minutes.\nI wonder, does nginx help handle this problem? Keep-alive connections, http 1.1. @pushrax\n. @brendensoares \n\nManage the maximum number of keep-alive requests. We already close each request, but the connection is the real issue, not the request.\n\nWould we start using non keep-alive when the number of keep-alive connections is exceeded?\n\nSet a maximum number of simultaneous connections Revel will accept at once and reject the rest (i.e. after 32 requests, it returns a 503). You could also not set a max and just let the requesting client wait or timeout itself.\n\nIsn't it how it works now? Except in your case the limitation is configured in app.config.\n@opennota \n\nOr, maybe, Revel can close an oldest connection when accepting a new one.\n\nI think, that's what timeout is for. Not sure closing active connections is a good idea.\n\nWell, I think timeouts and proper documentation is all we can do. It is not a good idea to limit the number of connections per ip, as user with 82.148.97.69 wouldn't understand us. And other solutions are not effective against malicious users anyway.\nIt is possible to configure timeouts on operating system (Linux example) rather than framework level. The same is relevant for the number of connections.\n. Thank you @tomodian, @xuanxu. The issue has been resolved.\n. @CipherChen What's your $PATH?\nsh\necho $PATH\nDid you add your $GOBIN folder to $PATH?\nsh\nexport PATH=\"$PATH:/path/to/my/bin/dir\"\nAnd yeah, now we encourage Revel community to use stackoverflow, IRC, or google groups for any kind of questions. GH Issues are only for bug reports and related stuff now.\n. @CipherChen  Sure, you should run go get github.com/revel/cmd/revel not just revel/revel.\n. @brendensoares was that fix related to extending of timeouts on new requests rather than on connections you've mentioned here ever applied to golang?\nI'm trying to test chat sample (websockets) using revel (develop) and go1.4:\nsh\nrevel run github.com/revel/samples/chat\nAnd it looks like it works not as we expect it. I'm actively sending new messages, but the connection is closed exactly 1 minute after openning the websocket connection but not 1 minute after the last message.\nYou can try it yourself. Start the chat sample. Using Firebug console or something add the following line and keep sending some messages.\njavascript\nsocket.onclose = function() { alert(\"Closed!\"); }\nThe connection will be closed (and you will get \"Closed!\" alert) despite the fact you're actively using the chat.\n. @brendensoares You are right. Everything works fine but the websocket part.\nHere we are creating our initial handshake HTTP connection.\njs\nvar socket = new WebSocket('/app/websocket')\nHere is the code responsible for its processing: https://github.com/revel/revel/blob/master/server.go#L25\nThe connection above is the only HTTP connection which is used by websocket chat. There're no any subsequent HTTP requests. We just initializing our websocket and it does all the stuff for us.\nThat's why the fix doesn't affect websocket part. And no matter whether you're  actively using websocket or not, the initial connection will be timed out. No HTTP requests -> no timeout extension.\nWebsocket doesn't do anything with our initial HTTP connection's timeout (doesn't extend on subsequent websocket requests). Don't know whether it is by design or it's a bug. Have to read the specs to find out.\n. @pedromorgan, what's the use-case? What kind of files are in mods/? What do you want to do with them?\n. Tests fail with the error:\n\n--- FAIL: TestBenchmarkCompressed (0.01 seconds)\npanic: Route validation error (in /home/travis/gopath/src/github.com/revel/modules/jobs/conf/routes:1): revel/controller: failed to find controller Jobs\n[recovered]\npanic: Route validation error (in /home/travis/gopath/src/github.com/revel/modules/jobs/conf/routes:1): revel/controller: failed to find controller Jobs\n\nLooks like TestBenchmarkCompressed has to be updated. Does fake booking app require modifications?\nOh, and did I tell you I don't like how revel is tested?\n. OK, here is the problem with tests. This PR adds check of routes to OnAppStart func: https://github.com/revel/revel/blob/3fb3e8973c461b41e8a6575a1b2468560b2e6598/router.go#L424\nAnd the fake app starts OnAppStart funcs first and only after that it initializes routes: https://github.com/revel/revel/blob/master/fakeapp_test.go#L70\nAs nobody understood anything from my description above, here is an illustration:\n``` go\n// Fake app.\n func startFakeBookingApp() {\n    ...\n    // Line 70: (STARTUP HOOKS ARE HERE)\n    runStartupHooks()\n// Line 72:\nMainRouter .... blah-blah-blah\nroutesFile ... blah-blah-blah\n...\n\n}\n// Our startup hook (YEAH, STARTUP HOOK).\nfunc ThisPROnAppStart() {\n    if routerIsEmpty {  // And router is empty, because it will be initialized on line 72!!!\n        ERROR.Fatal(\"Go away!\")\n    }\n}\n```\nThe order of initializations and stuff like that in fake app should be identical to the order we have in real apps:\nhttps://github.com/revel/revel/blob/master/server.go#L58\nToDo List\n\n[x] Create a new PR to fix the fake app.\n[x] Restart tests (TravisCI) of #884 to make sure it is correct.\n. OK, looks like we cannot just move runStartupHooks() (line 70) below all those router related stuff. Because one of the startup hooks checks whether loaded routes are correct. And not all of them are correct as our fake app implements only a few controllers out of many real booking sample has to. So, we would get the error:\n\n\nRoute validation error (in /path/to/go/src/github.com/revel/modules/jobs/conf/routes:1): revel/controller: failed to find controller Jobs\n. Hi @pedromorgan. Is any help with revel-www needed?\n. @brendensoares IIRC it is not consumed. We discussed it in IRC about a year ago. The plan was to start using it.\n. :+1:\n. So, the issue has been resolved? I'm closing it then. Feel free to reopen.\n. Not @revel/core but anyway... I think this is a reasonable decision. The only concern is to make sure that we wouldn't have to repeat ourselves. Like a few copies of the same app.conf or any other file for every of the skeletons: bootstrap, foundation, bower, ember, angular. That would be a lot of files difficult to maintain. So, I think there should be some basic part of skeleton and extensions (which override and/or supplement basic part) for boostrap, ember, or something else.\n. @carc1n0gen Will it show 404 or 500 if index method does not exist?\n. @fellz Your revel test file cannot be named as app_test.go. Everything with _test.go at the end is treated as golang test file. Revel tests are usual golang files. Thus it should be apptest.go or any other name without that suffix.\n. > i changed because go test doesn't see any test files in test dir\n\n@fellz That's how it should work. test directory is for revel test not go test. It is possible to write go tests for revel tests though :-)\n. @fellz, please close this issue\n. @brendensoares I think so. There are a few articles related to the subj BTW:\n1. Original http://www.jamesward.com/2012/09/28/run-revel-apps-on-heroku\n2. Update http://traviscline.com/blog/2012/11/18/update-running-revel-apps-on-heroku/\nAnd the one you have mentioned in Articles:\n1. https://medium.com/@jatescher/building-a-go-web-app-with-revel-on-heroku-37247cc1d9a6\nThough, I don't quite understand why anybody would want to install golang and all necessary dependencies on production server if it's possible to test, configure, build, and pack everything locally. And it can be automated, too.\n. Who's going to test this? This PR is all about renaming. Nothing new is introduced.\n. I assume all interested parties have tested it and we are ready to merge?\n. I'm removing all my repos so clone config_package branch and probably cachesession / cacheflash repos if you're interested. Otherwise, this will become unmergable and the repos will pass into oblivion.\n. @notzippy, no that is a regular golang test file. So, it's go test github.com/revel/revel/....\n. > convert log messages to returned error result and checking so that revel can log messages\nCan we do this with filters? They do not return anything. They import revel for it's logger and they define something like Params or Session which is used by revel. So, we end up having something like:\n``` go\n// Something type is used by revel package.\ntype Something struct {\n}\n// SomeFilter is a filter that uses revel package.\nfunc SomeFilter(c *revel.Controller, fc []revel.Filter) {\n    ...\n    revel.WARN.Println(\"Some message here...\")\n    ...\n}\n```\nAnd thus we've got an import cycle.\n. > There are HTTP clients that go bananas when seeing a compression header on an empty response body.\nHey, @birkirb. What exactly do they do? I'd like to reproduce it.\n. @birkirb I wonder, wasn't it something related to the https://github.com/revel/revel/issues/733#issuecomment-56713379?\n. Hello, @tw4452852. Looks like you didn't update your local copy of revel's develop branch (git pull origin develop). Now there is no modules directory there. It has been moved to a separate repo: https://github.com/revel/modules/tree/develop\n. @pedromorgan What will it automate? Docs compilation?\n. > This is actually a critical feature that we need as we will sometimes have requests coming into us which are larger than the default 10 MB allowed size.\nHello, @JaTochNietDan. I wonder, what is the exact use case? And what is the behaviour of Revel without this patch?\n. Hi, @ready4god2513. I don't know. I'm a member of Revel Framework's Community just like you are. Let's ask @brendensoares or @pushrax.\n. Hi, @ready4god2513. You are right, looks like the docs are outdated.\n\nThe SQL standard time formats [\u201c2006-01-02\u201d, \u201c2006-01-02 15:04\u201d] are built in.\n\nThese formats were built in ages ago:\n\nNow they are not.\nFix is more than welcome here: https://github.com/revel/revel.github.io/tree/develop\nRelated docs links\nhttps://revel.github.io/manual/appconf.html#formatting\nhttps://revel.github.io/manual/binding.html#date--time\n. We are probably coming back to the time format mentioned in the docs: https://github.com/revel/revel/pull/872#discussion_r25130060. So, changes to the docs may not be needed.\n. :+1: LGTM.\n. Link to the fragment of code @notzippy has mentioned above: https://github.com/revel/revel/blob/master/router.go#L424-L431\n. @pbnjay I think you are right and the code below would do the trick:\ndiff\nOnAppStart(func() {\n    MainRouter = NewRouter(path.Join(BasePath, \"conf\", \"routes\"))\n    if MainWatcher != nil && Config.BoolDefault(\"watch.routes\", true) {\n        MainWatcher.Listen(MainRouter, MainRouter.path) \n-   } else {\n-       MainRouter.Refresh()\n    }\n+   MainRouter.Refresh()\n})\nRight now, routes generation is triggered by the first request to the app. And the change (above) forces it to refresh routes on app start no matter what. @brendensoares did the same change to templates generation IIRC.\n. #884 is merged, so I'm closing this.\n. @pbnjay I think @brendensoares asked whether you could update your PR because right now there is a merging conflict.\nThe change should be something like this:\ndiff\nMainRouter = NewRouter(path.Join(BasePath, \"conf\", \"routes\"))\n+err := MainRouter.Refresh()\nif MainWatcher != nil && Config.BoolDefault(\"watch.routes\", true) {\n    MainWatcher.Listen(MainRouter, MainRouter.path)\n-} else if err := MainRouter.Refresh(); err != nil {\n+} else if err != nil {\n    // Not in dev mode and Route loading failed, we should crash.\n    ERROR.Panicln(err.Error())\n}\nor this:\ndiff\nMainRouter = NewRouter(path.Join(BasePath, \"conf\", \"routes\"))\n+if err := MainRouter.Refresh(); err != nil {\n+   // Not in dev mode and Route loading failed, we should crash.\n+   ERROR.Panicln(err.Error())\n+}\n+\nif MainWatcher != nil && Config.BoolDefault(\"watch.routes\", true) {\n    MainWatcher.Listen(MainRouter, MainRouter.path)\n-} else if err := MainRouter.Refresh(); err != nil {\n-   // Not in dev mode and Route loading failed, we should crash.\n-   ERROR.Panicln(err.Error())\n}\nRight?\n. v0.13? C'mon, the change is super easy, just a few lines but important. Let's double check now and include in v0.12.\n. Hi, @rtm7777. I like the idea of running custom revel/cmd commands. But I think it should be something more than just a script runner. Our own format of \"revel tool\" package, probably. And implement existing commands such as run, build, package, etc. in a form of those packages. So, revel/cmd will be more modular and extensible.\n@revel/core, thoughts?\n. https://github.com/revel/rfcs/pull/2 is a (high level) proposal to transform revel command into a files watcher and task runner. Every project will have .revel.yml in the format like:\nyml\ninit:\n  --- # Add your list of what should be done every time `revel run` is started.\n  - npm install coffeescript\nwatchers:\n  --- # Include a list of commands that are expected to be executed on files' change.\n  -\n    --- # Recompile my app every time my controllers are modified.\n    path: app/controllers/*.go\n    before:\n    action:\n      - go generate path/to/myapp\n      - go build path/to/myapp\n      - go run path/to/myapp\n    after:\n  -\n    --- # Compile my coffee script files to JS.\n    path: app/assets/coffee/*\n    action:\n      - coffeescript -smth -smth_else\nSimply saying, the only responsibility of revel will be watching files and executing commands requested in .revel.yml. Thus, it will close #620, too.\n. > Can we commit this to develop ?\n~~@pedromorgan, we'll do if @brendensoares doesn't come up with a better idea of assets-preprocessing~~.\n. @pedromorgan I've implemented something similar in my toolkit. Conf is a bit different though, but still yaml and is described here. You can try it out if you'd like and decide whether Revel should adopt this approach.\n. @xuanxu thanks for contributing to Revel! :+1: This PR LGTM.\nBut could you please target the develop branch per Revel's Contributing Guidelines?\n. Thank you, @xuanxu. It will be merged by @brendensoares to v0.13 (#841).\n. Thank you, @xuanxu. This will be available in v0.13.\n. #### Status of the project\nIt feels like the project is stalling. Reforms are needed. First of all let's find out who's still on board.\nAre you still using and/or interested in development of Revel Framework, Core Team?\n1. @brendensoares \n2. @pushrax \n3. @notzippy \n4. @landaire \n5. @pedromorgan \n6. I'm dead sure there was somebody else, there were 8 people including me and robfig. verdverm?\n. @notzippy, I like your idea of roles/responsibilities and transparency of expectations & time frames.\nWell, 1 active and 1 inactive team member.\nShould more people be invited? Probably, some active collaborators: https://github.com/revel/revel/graphs/contributors\n. Hi, @eric-gilbertson. I like your ideas: https://groups.google.com/forum/#!topic/revel-framework/mt__Z4w4a-E\nActually one of my early contributions to Revel was #725 and I was thinking about these things too. So, :+1: to your PR.\nI prefer buttons at the right side though. I usually do not use mouse but when I do my cursor is at the right side of the screen most of the time. What are the preference of other users? I know testrunner is not likely the most popular part of Revel. But probably somebody will share with us their opinion regarding this aspect? @pedromorgan, @brendensoares, @notzippy \nP.S.: testrunner has been moved to a modules repo. Thus, you need to target it there: https://github.com/revel/modules/tree/develop\n. @eric-gilbertson What if test name would be a link for running a test. And we can make it display: block so it will be width: 100%.\n. Thank you, @grsmv. I'm closing this now. #898 will be merged.\n. Hi, @grsmv. Thank you for your contribution. We have already had PUT method: https://github.com/revel/revel/blob/develop/testing/testsuite.go#L121\n781 is a related PR.\n. @grsmv Oh, sorry, my mistake. You also added PutForm, I didn't notice that as I paid attention only to PutCustom part and realized we had already had that. Yeah, I think it's a valuable thing which is worth being merged. But you will have to target the develop branch per Revel's Contributing Guidelines.\n. @grsmv Looks like you didn't do git pull origin develop and your branch is not up-to-date. There is a merging conflict.\n. @grsmv Thank you, LGTM :+1:. It will be merged to v0.13. Right, @brendensoares?\n. Thank you, @grsmv.\n. @brendensoares #728 changed the behaviour of testrunner.\nFor demonstration, here is a sample action:\ngo\n// ToDo redirects user to Index page.\nfunc (c *App) ToDo() revel.Result {\n    // Redirecting to App.Index.\n    return c.Redirect(routes.App.Index())\n}\nBefore #728 we had:\ngo\nfunc (t *AppTest) TestThatToDoWorks() {\n    t.Get(routes.ToDo())\n    // Status is equal to the status of App.Index (destination page).\n    // Body is equal to the body of App.Index (destination page).\n}\nAfter merging we have:\ngo\nfunc (t *AppTest) TestThatToDoWorks() {\n    t.Get(routes.ToDo())\n    // Status is equal to 301 Moved Permanently.\n    // Body is empty.\n}\n. #900 replaces \"301 Moved Permanently\" by our good old friend \"302 Moved Temporarily\". Combination of #899 and #900 will fix the broken tests.\n. @brendensoares, @pedromorgan Can we make some changes to our v0.12 docs:\n- Update version on index page.\n  \n- Remove a dot or move it to the end of \"Read how the chat is implemented\" sentence.\n- Remove # get revel framework and go get github.com/revel/revel. There is no need to do it. Revel will be automatically go getted as a dependency of revel/cmd/revel.\n  \n. Yeah, and can we have more elegant h1's? I mean a bit smaller and with a smaller bottom margin (margin between Quick Start text at the image above and a horizontal line).\nPlus, Quick Start link at the main menu leads mostly to empty pages (with some code fragments without code highlighting). Probably we should remove it for now? And when we have something to say we will return it back?\nApart from that I like our new docs, :+1:.\n. Oh, my mistake. Those pages are not empty. Only Quick Start / Introduction / ... ones. So, can we remove just empty links and make menu consistent with the rest of revel web-site (I mean left side menu).\n- One of empty Quick Start / Intro pages. Pay attention to the menu:\n  \n- Left side menu which is used for other sections of web-site such as Manual, Tutorial, etc. Looks more professional, doesn't it?\n  \n. It should be replaced by http.StatusSeeOther (status code 303) [1]. #430 is related.\n. We have decided to replace filters by controller like structs, right? So, I'm closing this.\n. @brendensoares Don't forget to include in release notes info on how to upgrade to v0.12. Looks like testing package is the only breaking change. So, users will have to update import paths of TestSuite type in files of tests directory.\n- Old version:\n``` go\npackage tests\nimport \"github.com/revel/revel\"\ntype AppTest struct {\n    revel.TestSuite\n}\n```\n- Required change:\n``` go\npackage tests\nimport \"github.com/revel/revel/testing\"\ntype AppTest struct {\n    testing.TestSuite\n}\n```\nApart from that everything works for my not-so-small application as expected, nothing is broken, its tests are passed.\n\nAnd we also need to update README && not include https://github.com/revel/revel/blob/develop/.travis.yml#L8 to master.\n. @brendensoares We didn't update version.go: https://github.com/revel/revel/blob/master/version.go#L5\nI'll let you know when I come up with a better idea.\n. @brendensoares I thought v0.12.0dev meant it was develop branch. Well, if it didn't and dev part is intentional meaning revel is not stable then it's OK (although, I think v0 means exactly that without any suffixes). But what BUILD_DATE means? https://github.com/revel/revel/blob/master/version.go#L7 Why is it Jan 19, 2015?\n. @jniltinho Create a template helper function. Either in one of your controller files or in app/init.go.\ngo\nfunc init() {\n    // Template helper that returns a substring of required length.\n    revel.TemplateFuncs[\"substr\"] = func(str string, length int) string {\n        if len(str) < length {\n            return str\n        }\n        return str[:length]\n    }\n}\nAnd use it in your templates as {{substr .MyClientName 70}}.\n\nP.S.: Groups or Stack Overflow is a better place for such kind of questions.\n. Templates should not be used for calculations. That's what controllers are for. But if you really want to, create a template helper function in one of your controllers or in app/init.go:\ngo\nfunc init() {\n    revel.TemplateFuncs[\"multiply\"] = func(a, b int) int {\n        return a * b\n    }\n}\nUse it in your template as:\ndjangotemplate\n{{set . \"number1\" (multiply .number 1024)}}\n{{.number1}}\n\nAnd as I have already said, Stackoverflow is where questions should be asked. This is a bugtracker.\n. Can we close this?\n. @jniltinho You need to update your conf/app.conf. We have moved modules to a separate repo in revel v0.12.0. So, in order to upgrade your app from v0.11 you need to replace:\nini\nmodule.static=github.com/revel/revel/modules/static\nand\nini\nmodule.testrunner = github.com/revel/revel/modules/testrunner\nby their new paths:\nini\nmodule.static=github.com/revel/modules/static\nand\nini\nmodule.testrunner = github.com/revel/modules/testrunner\nThank you.\n@brendensoares BTW did we include this in the release notes?\n. @xpbliss Here is a list of breaking changes: https://github.com/revel/revel/releases/tag/v0.12.0\nYou need to update your files in tests/ directory. Instead of revel.TestSuite you should use testing.TestSuite (from github.com/revel/revel/testing package).\n. @jniltinho You have in your CheckLogin interceptor:\ngo\nfunc CheckLogin(c *revel.Controller) revel.Result {\n    username, _ := c.Session[\"username\"]\n    if username == \"\" {\n        ...\n        return c.Redirect(\"/login\")\n    }\n    ...\n}\nSo, while your username is empty it will redirect you to User.Login action.\nAnd this interceptor is applied to all possible actions.\nSo, here is how it works.\n1. You visit /somepage and CheckLogin redirects you to user/login.\n2. You visit user/login, username is still empty, CheckLogin redirects you to user/login.\n3. You visit user/login, username is still empty, CheckLogin redirects you to user/login.\n...\nn. You visit user/login, username is still empty, CheckLogin redirects you to user/login.\nYou need to modify the logics if you want to fix it. For example, return nil in your interceptor if username is empty, but c.Action == \"User.Login\".\nP.S.: BTW, try to use 2 separate methods for login form and its validation. Here is a sample: https://github.com/revel/samples/blob/master/validation/app/controllers/sample4.go#L12-L28\nAlso, did you try asking this question on Stack Overflow or in Google Groups?\n. @jniltinho I meant something like:\n``` go\n// Users is a controller that is used for user auth,\n// their personal profiles, etc.\ntype Users struct {\n    *Controllers\n}\n// Login is a page that shows login form.\nfunc (c *User) Login() revel.Result {\n    return c.Render()\n}\n// PostLogin checks username & password and redirects user\n// either back to form or to profile page.\nfunc (c *User) PostLogin(username, password string) revel.Result {\n    c.Validation.MinSize(username, 6)\n    c.Validation.MinSize(password, 6)\n    ...\n    err := md5Crypt.Verify(user.Crypt, []byte(password))\n// Something is wrong with our parameters, redirect user back to the form.\nif c.Validation.HasErrors() || err != nil {\n    c.Validation.Keep()\n    c.FlashParams()\n    c.Flash.Error(\"Please, check your credentials.\")\n    return c.Redirect(Users.Login)\n}\n\n...\n\n// Everything is good, set username to the session.\nc.Session[\"username\"] = username\n\n// Redirect user to profile page.\nreturn c.Redirect(Users.Profile)\n\n}\n// Before is an interceptor that is called before any request.\nfunc (c *User) Before() revel.Result {\n    _, ok := c.Session[\"username\"]\n// Make sure username is empty and redirect is allowed.\nif !ok && !redirectForbidden[c.Action] {\n    // Redirect user to the login page.\n    return c.Redirect(Users.Login)\n}\n\n// Otherwise, continue the execution.\nreturn nil\n\n}\nvar redirectForbidden = map[string]bool {\n    \"Users.Login\":     true,\n    \"Users.PostLogin\": true,\n}\nfunc init() {\n    // Register our intercept method.\n    revel.InterceptMethod(Before, revel.BEFORE)\n}\n```\nAs for \"Simple rules for auth in projects\", I think that is planned. Both Auth and ACL.\nAs for, InterceptMethodWithout there are actually plans to get rid of interceptors and replace them by something better.\n. @brendensoares Yes, we can reproduce. The steps are simple. Just create an app and revel build it. Looks like that is related to #855. Testrunner module is loaded only when in dev mode. But module:testrunner is included in the routes by-default (no matter it is prod, dev or something else).\nShould revel build remove unused routes? Or what should we do?\n. We have the following check: https://github.com/revel/revel/blob/master/router.go#L296-L297\nSo, that might not be the case.\n. @brendensoares It is definitely a bug, I think. At least I would expect revel build building a working version of app.\n. @brendensoares The bug is not as critical as I thought. Actually default app works as expected after build. Better steps to reproduce:\n- Include module:something route in your app/routes.\n- Add that module only to prod section (and dev if you want, but not to DEFAULT):\n``` ini\nthere is no module.something in DEFAULT namespace\n[prod]\nmodule.something = path/to/something/module\n``\n- Userevel build,revel run [path] proddoesn't have that error. So, looks like we have difference in order of calls in dev and prod again (remember issue with template functions andOnAppStart`?).\n. One more observation. Config file:\n``` ini\n[DEFAULT]\nno module.testrunner here...\n[prod]\nmodule.testrunner = github.com/revel/modules/testrunner\n```\nRoutes:\nmodule:testrunner\n...\n- revel run github.com/username/project will generate app/tmp/main.go with:\ngo\nrevel.RegisterController(*TestRunner ...)\n- revel build github.com/username/project doesn't include that call when generating app/tmp/main.go.\n. So, here is the difference:\n- We run our app in dev mode: https://github.com/revel/cmd/blob/a7b72c9afbff471c8c6c579f3b63780d2c478b12/revel/run.go#L39-L45\n- We build it in DEFAULT mode: https://github.com/revel/cmd/blob/a7b72c9afbff471c8c6c579f3b63780d2c478b12/revel/build.go#L41 https://github.com/revel/revel/blob/67891f91e7da2e524a8d1d8a27c6f481f021a445/revel.go#L158\nThat's why all modules that are not in DEFAULT section will not be loaded when we build. Is that a bug? I'm not so sure now. We can try to build in prod mode though (However I think we shouldn't).\nSo, we can just document that. Want a module in production? Include it in DEFAULT section.\n. Not really a bug but some conceptual issue. #924 is related.\n. @brendensoares I think they are already configurable https://github.com/revel/revel/blob/master/skeleton/conf/app.conf.template#L82-L85\n@huacnlee We have already had 4 loggers. It looks like that's enough for most cases. Otherwise, we would have to introduce SYSERROR, SYSWARN, SYSTRACE, too. And that's too many and not justified.\n. Well... IMO the messages had to be module based ones, not built into the core.\n. I've tried to reproduce but cannot confirm the bug. revel/revel, revel/cmd, and revel/modules are the latest master branches, newly created app is used. Both revel runed and revel builded results work as expected, no panics or errors. Incorrect headers are ignored.\n. @1lann Oh, I didn't pay attention to results.compressed part. So, can confirm, there is a bug. I have identified its cause and it should be fixed in v0.13. Thank you.\n. @huacnlee By the way, this is a very interesting point.\n@revel/core What are the pros and cons of using return c.Smth() rather than just c.Smth()? Absence of return would make Render method even more magic, wouldn't it? But on the other hand, it would allow to use such constructions as requireUser (from code fragment above).\nAlthough, for requireUser case, interceptors are probably a better approach:\n``` go\nfunc (c *App) RequireAuth() revel.Result {\n    if _, ok := c.Session[\"email\"]; ok {\n        return nil\n    }\n    return c.RenderTemplate(\"accounts/login.html\")\n}\nfunc (c *App) Index() revel.Result {\n    // ToDo\n    return c.Render()\n}\nfunc init() {\n    revel.InterceptMethod((*App).RequireAuth, revel.BEFORE)\n}\n```\nIf user is not authorized he/she will see a login page. And it will work for any action of App controller.\n. Thanks everybody. I'm closing it now. @xuxiangyang feel free to reopen if you need to.\nNote to @pedromorgan to add package manager to docs :smile: \n. @brendensoares I joined the team ~12 hours ago.\n\nOtherwise we're going to move ahead without you. \n\nGo ahead. I'll get over it.\n. @jniltinho Looks cool.\n. It is extremely friendly in creating barcodes. Trust me.\n. Cache is already its own package. And I think it is a good idea to make it even less dependent from revel. This works for testing package, too. There are tasks with higher priority right now though. So, added to backlog for now.\n. > but revel build seems to use the packages from the $GOPATH\n@kurtzhong Right, just as any golang application. That's why godep has restore command that is:\n\nthe opposite of godep save. It will install the package versions specified in Godeps/Godeps.json to your GOPATH\n\nhttps://github.com/tools/godep#restore\n. By the way, now it is not possible to run godep go test after every change to code (as described here). But I hope we'll have a solution soon.\n. Does that answer you question? I'm closing this issue now, feel free to reopen again.\n. Hello, @kurtzhong. Thank you for using revel. Try to use godep save ./app/tmp (still under the revel app's root path) instead of the command you use. That should solve the problem.\n. Though, wait. It doesn't solve the issue. Looks like a conceptual problem. Thank you for reporting. I'll mark this as a bug. We'll see what we can do.\n@brendensoares steps to reproduce:\n``` shell\ncd $GOPATH/src\nrevel new github.com/brendensoares/sample\nrevel run github.com/brendensoares/sample &\ncurl http://localhost:9000\ncd $GOPATH/src/github.com/brendensoares/sample\ngodep save ./app/tmp\ncd Godeps/_workspace/src/github.com/revel/modules/testrunner\nls\nThere is no routes directory, only app.\n``\n. @notzippy To clarify that last bit. Imagine you are a maintainer of superCoolApp package in Debian. You're compiling that app and making it available to be installed usingapt-get`.\nI am a user. I'm running apt-get install superCoolApp and trying to edit /etc/superCoolApp/app.conf.\n1. I'm updating http.port to 80 and expecting the app will start listening on :80.\n2. I'm changing results.compressed to true and I want it to start compressing responses.\nEverything works as expected so far.\n3. Now I'm removing module.static = ... as I configured nginx instead. And... Nothing happens. I'm adding a new module.smth = .... Nothing happens. I'm moving module.testrunner to [prod]. And still nothing happens.\nAs a user I have a question. Why those module.smth = ... parameters are in the configuration file if that aspect cannot be configured after build? They mean nothing at that stage.\n. > within a \"module\", I expect a README.md which \"would be the manual\" for that module (also any other docs in md format\",, \n@pedromorgan Agree. We cannot enforce third party module makers. But for modules in revel/modules repo that is a must have.\n. > So you would like compile time directives to be separate from runtime options\n@notzippy Yeah, exactly.\n\nisn't that easier to say?\n\nI'm not a Hemingway. More like a Plato.\n. > Here you're proposing that modules are antithetical to configuration and view files and should be editable at runtime.\n@nadeemc Where did I say that? My proposal is all about (as @notzippy rephrased) using separate config files for compile time directives and runtime options.\n\nPersonally I think the opposite is more inline with Go; compile configuration and views into the app\n\nDoes that mean that in order to change port or host or DB credentials I have to install Golang, configure $GOPATH, and recompile the whole app? The same if I want to update my logo or insert Google analytics code to my footer.html?\nThere should be such an option. But that's definitely not a good default. Assets, views, and configs should be editable. Moreover, asset files may be better handled by nginx.\n. @brendensoares What are your plans regarding @revel?\n. @brendensoares Google IPs are blocked in China.\n. I think this problem could be solved by use of either godep or vendor for the Revel Sources.\n. @brendensoares Yes, exactly.\n. Can confirm. Due to default 1 Minute timeouts that were introduced in v0.12 (#843) request cannot be finished if it takes too much time.\n@russ168, @chqsark If you need actions that are processing something for so long, customize timeouts by editing your init.go or some controller:\ngo\nfunc init() {\n    revel.OnAppStart(func() {\n        // 0 means there will be no any timeout at all.\n        revel.Server.ReadTimeout = 0\n        revel.Server.WriteTimeout = 0\n    })\n}\nThank you @1lann for your help. I agree, 504 error should be shown instead of 500. Moreover, not related to the issue but 500 errors should contain responses (related to #881, we discussed the solution with @brendensoares in IRC).\n@chqsark How did you measure the speed?\n. @brendensoares This is probably not the right way. But if we are not going to introduce the right one in v0.13 let's use this workaround.\nDoes anybody want to start working on implementation of right solution?\n. BTW there is a filepath.ToSlash equivalent (to strings.Replace(s, \"\\\\\", \"/\", -1)) in standard path/filepath library that transforms your path no matter what separators it uses to Unix looking path format with slashes.\n. @brendensoares What is a better solution in your opinion? I've used different approaches for my framework including #505 like. But ended up using standard filepath.Join, filepath.ToSlash, filepath.FromSlash, and 3 simple helper functions.\n. :+1: Yeah, absolutely. But somebody will have to retarget #1028 to develop.\n. @pedromorgan Looks like HN.\n. Hi, @KidFeng. Is that fragment of code located inside func init() { ... }?\n. @KidFeng golang template package requires functions to return just 1 argument, here is a related fragment (https://golang.org/src/text/template/funcs.go):\ngo\n80  // goodFunc checks that the function or method has the right result signature.\n81  func goodFunc(typ reflect.Type) bool {\n82      // We allow functions with 1 result or 2 results where the second is an error.\n83      switch {\n84      case typ.NumOut() == 1:\n85          return true\n86      case typ.NumOut() == 2 && typ.Out(1) == errorType:\n87          return true\n88      }\n89      return false\n90  }\nSo, if you want 2 results, you probably need to create your own type and then return it:\n``` go\ntype Page struct {\n    Prev, Next int\n}\nfunc init() {\n    revel.TemplateFuncs[\"calcPage\"] = func(page int) Page {\n        return Page{\n            Prev: page - 1,\n            Next: page + 1,\n        }\n    }\n}\n```\n. @KidFeng You're welcome.\n. Hello, @michaelbironneau. What operating system are you using?\nAccording to #928 there are issues with showing detailed info in tesrunner module on Windows.\nExpected result is below:\n\nInstead windows users see what you have published above.\n. Hey, @avdept. Revel uses standard html/template package. So, yeah that's definitely possible.\nOr do you mean by \"template module\" something else?\n. @avdept Right, Revel has a list of built in functions (like url, append, msg, etc.) and additionally user defined ones (that you register with revel.TemplateFuncs), if there are any.\nBut that is achieved by use of standard Funcs method\n\nFuncs adds the elements of the argument map to the template's function map. It panics if a value in the map is not a function with appropriate return type. However, it is legal to overwrite elements of the map. The return value is the template, so calls can be chained.\n. @vahid-sohrabloo, thank you for this PR. Everything is OK, \"needs testing\" is a label for @revel/core to make sure everything is correct and to double check things.\n. > I don't think the server read/write timeouts should be set at all, or if they are, they should be larger and configurable in the conf file.\n\nAgree. Looks like the timeouts became a reason of more bad things than good. Let's use \"no timeouts\" option by default and make it configurable. The following change is required (https://github.com/revel/revel/blob/develop/server.go#L85-L90):\ndiff\nServer = &http.Server{\n    Addr:         localAddress,\n    Handler:      http.HandlerFunc(handle),\n-   ReadTimeout:  time.Minute,\n-   WriteTimeout: time.Minute,\n+   ReadTimeout:  Config.IntDefault(\"timeout.read\", 0) * time.Second,\n+   WriteTimeout: Config.IntDefault(\"timeout.write\", 0) * time.Second,\n}\n@bejayoharen Do you want to create a PR?\n. @bejayoharen Yeah, I didn't test either and missed the fact int has to be type casted to time.Duration.\n. @bejayoharen :+1: Thanks.\n. I haven't tested it yet, but it may be related to the default timeouts introduced in v0.12 (#843).\n@kurtzhong, @wangmingjob, could you please add the following fragment to your init.go and share the results with us:\ngo\nfunc init() {\n    revel.OnAppStart(func() {\n        revel.Server.ReadTimeout  = 0\n        revel.Server.WriteTimeout = 0\n    })\n}\n. My mistake, type cast of int to time.Duration is needed. Like:\ngo\nReadTimeout:  time.Duration(Config.IntDefault(\"timeout.read\", 0)) * time.Second\n. @bejayoharen And could you please target develop branch.\n. Resolved by #940.\n. Thank you, @bejayoharen. It has been merged into develop (see last two commits here).\n@revel/core New behaviour is introduced by this PR. There are no timeouts by-default. However, if somebody needs them he/she can use timeout.read and timeout.write options in their config/app.conf. Example:\n``` ini\nTimeout specifies a time limit for request (in seconds) made by a single client.\nA Timeout of zero means no timeout.\ntimeout.read = 300\ntimeout.write = 60\n``\n. @brendensoares, Even if we decide to use some kind of default timeouts this PR is useful. It allows us to useconf/app.conf.templatefor that rather than hardcode something toserver.go. So timeout values will be documented.\n. Here is another related fragment: https://github.com/revel/revel/blob/master/skeleton/conf/app.conf.template#L35-L54\n. Can confirm anonymous embedding ofnon-struct` types causes a panic.\nSteps to reproduce:\n- Create a new Revel app.\n- Create a new type and embed it into controller. For example:\n``` go\n// Test may have any type (e.g. string, bool, float64, or WhatSoEver)\ntype Test int\n// App is a default controller with embedded Test type.\ntype App struct {\n    *revel.Controller\n    Test\n}\n```\n- Run the app.\n- ...\n- PROFIT!\n. If you want your action:\ngo\nfunc (c Account) User(user models.User, verifyPassword string, id ...int64) {\n}\nto have an optional id parameter, add to your conf/routes something like (in that order):\n``` go\nMethod  #Pattern             #Action\nGET      /account/user/:id    Account.User\nGET      /account/user        Account.User\n```\nNow url template helper correctly works both as url \"Account.User\" and as url \"Account.User\" 12345. Instead of GET use the method you need and update the pattern to what you need.\n. This is the exact behaviour standard Mux has (note, they are using r.URL.Path rather than r.URL.RawPath), isn't it?\nThough it is possible to change Revel's behaviour. Revel team will have to make changes to the router.go and reverse router.\n. @pedromorgan Not really. This is the way most go routers work. But this behaviour is different from Play Framework. So, it's up to you @revel/core to decide which one you want.\n. As for standards I don't know to be honest. But I assume both are compliant. That is an internal behaviour of application.\nRelated fragment from Go's net/url docs:\n\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, code must not use Path directly.\nGo 1.5 introduced the RawPath field to hold the encoded form of Path. The Parse function sets both Path and RawPath in the URL it returns, and URL's String method uses RawPath if it is a valid encoding of Path, by calling the EncodedPath method.\n\nI don't know what will be the consequences of this change, somebody will have to take care of investigating this. Though, at first sight the change looks easy: 1) 1 line in router.go, 2) reflect the change in harness (probably, use custom reverse proxy handler), aaand the most important 3) make sure nothing is broken, no flaws are introduced by this change.\n. Revel currently does not have its own tool to calculate test coverage and as far as I know its tests are not compatible with the standard go test -cover command. So, I don't think there is a way to check coverage apart from creating standard Go tests (like app_test.go files in your app/controllers directory).\n. @ptman I agree, test coverage would be good to have. The easiest way I see is to make Revel tests compatible with the standard go tests. That may be achieved by use of code generation. So, instead of test runner (that uses reflection) Revel could have a test generator that would scan your tests/ directory and generate standard go tests.\n. @ptman Yes, that's even better.\n. In case @revel/core decides to use code generation rather than runtime reflection for tests... Go 1.7 introduces an interesting feature that could be useful right for this use-case: https://twitter.com/rakyll/status/736252589742907392\n\n. @DavidHunter I don't think this is a lack of people but rather a lack of action. If not actively developing new things or refactoring existing code it is at least possible to merge existing PRs. There are some that are simple, not controversial, do not break things, and at the same time important.\n. @kyawmyintthein This is the message you get when your code panics before starting an app. Check your defineBidItemTable function.\n. @mrkaspa There is no way as far as I know. It is however planned to implement pluggable templates in v0.13.\n. I have met a related project https://github.com/golib/hamlengine. Haven't tried it though and have no idea whether it works.\n. Here is what you need:\n``` go\nfunc init() {\n    revel.OnAppStart(func() {\n        // Order matters: first path has the highest priority.\n        revel.ConfPaths = append([]string{\"/etc/appname/\"}, revel.ConfPaths...)\n    // Loading the \"app.conf\" from all of those locations.\n    var err error\n    revel.Config, err = revel.LoadConfig(\"app.conf\")\n    if err != nil {\n        revel.ERROR.Fatal(err)\n    }\n})\n\n}\n```\nBut number of keys such as http.port and http.addr still will not be overridden. That's because the order of calls:\n1. Revel sets ConfPaths\n2. Revel runs LoadConfig\n3. Revel gets DevMode, HttpPort, HttpAddr, etc. from config.\n4. Our OnAppStart function is started that adds a new ConfPath and reruns LoadConfig.\nThis can be fixed by the following change to Revel codebase:\ndiff\n+if ConfPaths == nil {\n+   ConfPaths = []string{}\n+}\n-ConfPaths = []string{\n+ConfPaths = append(\n+   ConfPaths,\n    path.Join(BasePath, \"conf\"),\n    path.Join(RevelPath, \"conf\"),\n)\nThen it will be possible for you to achieve the behaviour you want as follows:\ngo\nfunc init() {\n    revel.ConfPaths = []string{\"/etc/appname\"}\n}\nAnd it will work just as you expect: 1) Use of params from /etc/appname/app.conf, 2) If some key is not found, use of conf/app.conf of your app, 3) If still some key is missing, use of Revel's default app.conf.\n. > Actually I was aiming to find out a way with-out modifying Revel codebase. So It will compatible with future release.\n@jeevatkm Well, I didn't want you to update your local version of Revel. I thought you could submit a PR. But I've already done it.\nIf #868 gets accepted you'll be able (just as I have already said) to achieve this behaviour by adding to some of your controller files:\ngo\nfunc init() {\n    revel.ConfPaths = []string{\"/etc/appname\"}\n}\nNot that this is the ideal solution, but it will solve your issue the easy way.\n. @wjc133 Leanote doesn't have tests directory. Try to create it manually.\n. @wjc133 From FAQ of fsnotify:\n\nHow many files can be watched at once?\nThere are OS-specific limits as to how many watches can be created:\n- BSD / OSX: sysctl variables \"kern.maxfiles\" and \"kern.maxfilesperproc\", reaching these limits results in a \"too many open files\" error.\n\nHave you tried changing the limit of open files [1] [2] [3]?\n. @wjc133 You're welcome.\n. @goors Why do you want your app to be recompiled in prod mode? That's actually an expected behaviour to recompile app in dev mode only. Though if you want you can modify your app.conf:\n``` diff\n[prod]\n-mode.dev = false\n+mode.dev = true\n-watch = false\n+watch = true\n```\nHowever I don't think this will work without harness.\n. First of all in production you are not using revel run because that starts a reverse proxy (harness) in front of your app that was not supposed to be used in the wild, that is just a dev tool.\nInstead you are building your app with revel build /path/to/app /path/to/destination and then running it as ./run.sh or ./run.bat.\nAnd you are not editing your app directly at the production server, right?\n. > This build is working, but I do not see difference between that and revel run app prod.\nThere is a difference. revel run starts an app that is called harness. Harness does a few things:\n1. Listens your \"127.0.0.1:9000\" or whatever address you've configured inside app.conf;\n2. Starts your app on some random free port;\n3. Proxies requests from (1) \"127.0.0.1:9000\" to (2) that random port;\n4. Shows user friendly errors and stuff (which are supposed to be for developer, not for strangers from the internet);\n5. Watches changes and recompiles things.\nA result of revel build is just your app that uses standard Go server.\nActually you can use revel run but then that  (1) \"127.0.0.1:9000\" should be made unavailable for the outer world. And you will have to configure nginx or something to listen :80 / :443 and pass requests to (2) port of your app (not port of harness).\n758 is related to your issue.\n. Have you tried revel.Config.String(\"http.addr\") and/or revel.Config.StringDefault(\"http.port\", \"default value\")?\nIf instances have their own app.conf files you may even want to give a name to every of them:\nini\napp.instance.name = alpha\nAnd make this value available to your views as follows:\ngo\nfunc init() {\n    revel.RenderFuncs[\"instance_name\"] = func() string {\n        return revel.Config.StringDefault(\"app.instance.name\", \"unknown\")\n    }\n}\nAnd use it:\nhtml\n<!--Current instance is {{ instance_name }}-->\nIf they do not have own config files it is possible to achieve the same effect by using similar approach but with the following config:\nini\napp.instance.name = $INSTANCE_NAME\nand then starting your apps as INSTANCE_NAME=alpha ./run.sh\n. @viblo Alternatively, it is possible to use revel.Server.Addr to get an address that is listened by your app.\n. @viblo Are you starting your app as run.sh (after revel build path/to/myapp path/to/dest) or as revel run?\n. @viblo There is a difference between revel run and run.sh. revel run starts your app and reverse proxy (that one which shows you user friendly errors when there are some), run.sh starts your app only.\nYou don't have IP as by-default your app listens *:port (i.e. all IPs / hosts). To modify that behaviour you need to set http.addr in your conf/app.conf. As an example:\nini\nhttp.addr = ${ADDR}\nThen run your app as ADDR=x.x.x.x ./run.sh when you want specific IP. And just run.sh and revel run will still work as before listening all ports.\n. Actually, you can't. Go templates require static parameter where you're using $filename.\nYou'll have to rethink what you're trying to do and implement it some other way.\n. @amlwwalker How that file is created? Through some web control panel when your app is already running. Or before starting the app using some editor (gedit, nano, vim, notepad, etc.)?\n. So that means you trust the content of that file, right? If so, here is a code snippet:\n``` go\nfunc (c App) MyAction() revel.Result {\n    // Make sure the template we need exists.\n    tpl, err := revel.MainTemplateLoader.Template(\"App/Index.html\")\n    if err != nil {\n        return c.NotFound(\"Page does not exist.\")\n    }\n// Executing the template (passing c.RenderArgs as context).\nvar html bytes.Buffer\nerr = tpl.Render(&html, c.RenderArgs)\nif err != nil {\n    return c.RenderError(err)\n}\n\n// Including the HTML rendered above in the context of current template.\n// Thus, it will be possible to include it as {{ .tpl }}.\n// template.HTML() is needed so Go template does not escape things.\nc.RenderArgs[\"tpl\"] = template.HTML(html.String())\nreturn c.Render()\n\n}\n```\nUse the parameter you need instead of \"App/Index.html\". Make sure you receive it from trusted source (like config file).\n. @amlwwalker  You can create any number of subdirectories as long as your modules are controllers packages.\nI.e., your structure should look like:\n\n\u251c\u2500\u2500 Modules\n\u2502   \u2514\u2500\u2500 Sample.go package controllers\n\u251c\u2500\u2500 app.go package controllers\n\nYou can access your Modules/Sample.go as if it were a regular Sample.go at the root of app/controllers/ directory: 127.0.0.1:9000/ModuleControllerName/ActionName.\n. All controllers must have unique names. If you're using App for your controller inside app.go you cannot use it for one in modules/sample.go.\n. You don't need to initialize anything, just restart revel.\n. +1 for this change. It doesn't break things, easy, but may be useful if you want to modify address from a hook function.\nThough, per contributing guideline develop branch must be targeted not master.\n. @brendensoares Yeah, you're right. It is configurable. But IIRC somebody had a use-case when they wanted to modify the addr dynamically from startup hooks.\n``` go\nfunc Run(port int) {\n    address := HttpAddr // Here we are initializing it.\n// Creating a server here.\nServer = &http.Server{\n    Addr:         localAddress, // This is the address from the line above.\n    ...\n}\n\n// The startup hooks change the Server.Addr\n// based on some dynamic conditions.\nrunStartupHooks()\n\n// But the change doesn't have affect if we're not using SSL.\nif !HttpSsl {\n    net.Listen(network, localAddress)\n} else {\n    Server.ListenAndServeTLS(...) // But it affects this line.\n}\n\n}\n```\nSo, @runner-mei is not adding a new parameter. He makes the code consistent between HTTPS and HTTP modes.\n. @klauspost :+1: Well done and the blog post is great.\n. @insasho :+1: for the improvement of docs. As for the 4th point, have you ever visited fsnotify's home page?\n\nhttps://fsnotify.org/\nFrom the beginning, fsnotify had users, with Rob Figueiredo testing it on OS X and later adopting it for Revel.\n. Substructs can be binded automatically, maps can't. A list of supported types is here. +1 for merging your PR #998.\n. @DavidHunter https://github.com/revel/revel/wiki/Apps-in-the-Wild\n. @brendensoares Let me know when you find a void that Revel can fill and help is needed.\n. > There are a few, can u help.. simple help would be helpful.. I go some time at last ... \n\n@pedromorgan Yes, I can. What do you need help with?\n. > and a sponsor has come forward to help get Revel moving again.\n@brendensoares I wonder, who's that?\n. ping @brendensoares \n. @xpbliss I proposed a pluggable-everything architecture about half a year ago but it required quite a lot of work to rewrite the whole code base of Revel.\nSo, I started my own project that is highly inspired by Revel but uses that new architecture. Key aspects are: everything is implemented as a set of independent tools rather than as a monolith, code generation instead of reflection, type safety, compatibility with the standard library, full customizability. It is still a work in progress and many things are missing. But what I like about it is the simplicity of adding new template engines, routers, etc. Probably, one day Revel team will adopt a similar approach.\n. :+1: A legit request. And not difficult to implement.\n. @pedromorgan Yes, it is.\n. @jeevatkm Now Revel uses the first GOPATH in the list no matter what. Relative paths are not supported.\nWhen user is running revel run ./something it creates DEFAULT_GOPATH/src/something ignoring the ./ part. Meanwhile we could do the following:\n1. User runs revel run ./something.\n2. We transform ./something to the absolute form (e.g. /home/johndoe/Go/src/github.com/johndoe/something).\n3. We check whether the absolute form from the step (2) is inside one of the GOPATHs.\n- If it is, project is created.\n- Otherwise, we notify the user that project must be inside GOPATH.\n. > doing anywhere path or relative path is not that easy to do with current follow. \n@jeevatkm Could you please rephrase, I'm not sure I understand.\n\nAs you described in step 2, if we transform and make a choice it might lead to further questions.\n\nNo further questions required. We are using filepath.Abs to make absolute path out of relative one (the input path is relative to the directory where you run revel run not to the GOPATH).\nAnd to make sure the absolute path is within some of the GOPATHs, you check whether it HasPrefix GOPATH[0], GOPATH[1] or GOPATH[N]. It's that easy.\n. It's exactly about relative paths:\n\nanother framework beego, it has the simular command, \"bee new xxx\".\nit created project from relative path, it's much better for me.\n\nHere is a related function of Beego: https://github.com/beego/bee/blob/master/new.go#L57\nIt does exactly what I've described. Except it doesn't support absolute paths at all: input is always considered as relative that's why ./ at the beginning is not required.\n. > The major change I have done recently was using godep save -r in my revel project (didn't use -r before).\n@xinzhangcmu I think that's it. Revel is not compatible with dependency managers that override import paths.\nYou may want to use Go's GO15VENDOREXPERIMENT.\n. @pedromorgan Yes it is. https://tip.golang.org/cmd/go/#hdr-Vendor_Directories\n\nIn Go 1.5, as an experiment, setting the environment variable GO15VENDOREXPERIMENT=1 enabled these features. As of Go 1.6 they are on by default. To turn them off, set GO15VENDOREXPERIMENT=0. In Go 1.7, the environment variable will stop having any effect. \n. Cannot reproduce, everything works as expected for me with go 1.5.1. Make sure you are using the latest version of Revel:\n\nbash\ngo get -u github.com/revel/cmd/revel\nThen recompile your app:\nbash\nrevel run path/to/bittrove-api\n. @UmeshVeerasingam Looks like tmp/main.go was generated by outdated version of Revel. revel.TestSuites is indeed undefined as it is now a part of revel/testing package and should look like testing.TestSuites.\nHave you tried to remove the tmp directory and run the app?\n. @DieselDraft What version of Go are you using? Do you have this issue with a skeleton app (that one that is generated by revel new)?\n@revel/core If you're interested, here is what I'm doing to not depend on runtime and reflect. Simply saying: code generation. Every action name is known during build time, that's why we can generate an extra line of code for later use with Render.\n. There is an inconsistency of runtime.Caller between gc and gccgo (see golang/go/issues/6835 for details):\n\nThe stack trace using the gc compiler is\n0: main.WhoCalledMe\n1: main.(*Inner).meth\n2: main.main\n3: runtime.main\nUsing gccgo it's\n0: main.WhoCalledMe\n1: main.meth.pN10_main.Inner\n2: main.meth.pN10_main.Outer\n3: main.main\n4: runtime_main\n. @pedromorgan Yes and No. On the one hand Revel could address this issue either by using conditional compilation (easy fix), e.g.:\n\ngo\n// +build !cgo\nor by use of code generation I've mentioned above (may require rethinking of the architecture).\nOn the other hand, this is not really Revel's fault but incompatibility of go compiler with cgo. Did you read Go Proverbs?\n\nCgo is not Go.\n\nThough, there is also:\n\nCgo must always be guarded with build tags.\n\nThere is a third option (the easiest), too. Announce that cgo is not supported.\n. Gday, @arhitiron. Revel automatically calls ParseForm, ParseMultipartForm or whatever function is needed for a request, so req.Body is parsed and all valuable information is stored to controller.Params.(Fixed, Route, Query, Form, Files).\nThough, if you still need the value of c.Request.Body, you should define the maximum request size to parse in your app.conf as follows:\nini\nhttp.maxrequestsize = 100500\nRelated commit: https://github.com/revel/revel/commit/fcf88855b6ec0bb3393a641f84a45610c70edb29\nRelated PR: #877\n. Good day, @fereidani. Can this be implemented with interceptors?\n``` go\nfunc (c App) Authenticate() revel.Result {\n    if c.notAuthenticated {\n        return c.RenderTemplate(\"notAuthenticated.html\") // Stop here.\n    }\n    return nil // You're good to go.\n}\nfunc init() {\n    revel.InterceptMethod(App.Authenticate, revel.BEFORE)\n}\n```\n. @fereidani It is possible to create a separate auth module once and use it for any number of Controllers. For demonstration:\n``` go\n// Auth is a controller that provides logics for user authentication.\ntype Auth struct {\n    *revel.Controller\n}\n// Authenticate checks whether user is already authenticated.\n// If not, an auth form is rendered.\nfunc (c Auth) Authenticate() revel.Result {\n    if c.notAuthenticated {\n        return c.RenderTemplate(\"notAuthenticated.html\") // Stop here.\n    }\n    return nil // You're good to go.\n}\nfunc init() {\n    // Make sure the Authenticate action will be called before any\n    // other action of Auth controller.\n    revel.InterceptMethod(Auth.Authenticate, revel.BEFORE)\n}\n```\nNow we can use the Auth controller as follows:\n``` go\n// App is a sample controller.\ntype App struct {\n    // We replaced \"*revel.Controller\" by our manual \"Auth\" controller here.\n    Auth\n}\n// Index either shows an auth form or prints\n// \"You're authenticated\" message.\nfunc (c Controller) Index() revel.Result {\n    return c.RenderText(\"You're authenticated.\")\n}\n```\nWe can create hierarchies with any level of nesting using this approach.\nAm I missing something (I'm not familiar with expressjs's Next method)?\n. @fereidani My opinion is the idea you propose is interesting. There are already proposals to improve filters and replace interceptors. I think #1012 should be discussed, too as an alternative approach. Let's see what core team members think.\n. @jeevatkm Not a high priority but I think support of relative paths is a good thing to have. Now when you're using revel new ./path it ignores the ./ part and creates $GOPATH/src/path. And when you are using revel run ./path it shows an error. This is something that can be improved.\n. #613 is related. It could save 3 minutes per travis build.\n. @tejainece Do you mean wildcard route? If so, remove the last line of your conf/routes file:\n15:  # Catch all\n16:  *       /:controller/:action                    :controller.:action\n. Yeah, right as @runner-mei is pointing out, edit your app/views/errors/404.html template, the fragment of interest is:\nhtml\n{{if eq .RunMode \"dev\"}}\n{{template \"errors/404-dev.html\" .}}\n{{else}}\nOr create your custom app/views/errors/404-dev.html file (the default one for reference).\n. @revel/core @pedromorgan Restart the build manually N times. Are there still no errors?\n. In theory symlinks should work OK since v0.10 (see #555 for details).\n@dreadiscool I think more details would be helpful for @revel/core to reproduce. Do you have a symlink within app/ (as @pedromorgan asked) or you are running revel run /path/to/symlink or it's something else. What's your host and guest OS (which one is Linux)?\n. @dreadiscool Is the version of Revel Framework >0.10 and version of Go >=1.4?\n. @archeious I think you'll have to clone static module and update related fragment. Or, alternatively embed static controller and create you own Serve wrapper action:\n``` go\npackage controllers\nimport (\n    s \"github.com/revel/modules/static/app/controllers\"\n    \"github.com/revel/revel\"\n)\ntype App struct {\n    *revel.Controller\n    s.Static\n}\nfunc (c App) ServeThumbnail(prefix, defaultTh, filepath string) revel.Result {\n    // Show the requested file if it does exist.\n    res := c.Serve(prefix, filepath)\n    switch res.(type) {\n    case *revel.BinaryResult:\n        return res\n    }\n// Otherwise, show the default thumbnail instead.\nreturn c.Serve(prefix, defaultTh)\n\n}\n```\nThen use it in your routes as follows:\nGET     /thumbnail/*filepath                App.ServeThumbnail(\"public\", \"img/favicon.png\")\nOpen http://localhost:9000/thumbnail/xxx. Then http://localhost:9000/thumbnail/img/glyphicons-halflings.png (I assume, this is a newly generated app; otherwise test with some other file names).\n. Pass them as parameters. If you're using reverse routing, you may want to do the following:\n``` go\nimport (\n    ...\n    \"github.com/yosualb/yourproject/app/routes\"\n)\nfunc (c *App) SomePage() revel.Result {\n    return c.Redirect(routes.App.Greet(\"James\", 16))\n}\nfunc (c *App) Greet(name string, age int) revel.Result {\n    return c.RenderText(\n        \"Hello, %s. You're %d years old.\",\n        name, age,\n    )\n}\n```\nIf you want to pass something user should not be able to modify, use session or cache.\n. Go 1.6 supports space trimming out of the box: https://tip.golang.org/pkg/text/template/#hdr-Text_and_spaces. Older versions don't. So, if you don't need a support of older versions of Go, make an upgrade and use the new {{- and -}} syntax.\n. Iteration over a small number of elements is faster than getting an element from a map.\nThat's the case when we need up to 9 iterations.\nThough, extra allocations kill the benefit:\ngo\nfor _, compressableMime := range compressableMimes {\n}\nTo use the advantage of a list of elements it should be:\ngo\nfor i := 0; i < len(compressableMimes); i++ {\n    if responseMime == compressableMimes[i] {\n    }\n}\n. @pedromorgan Why not? Looks like exactly Revel's issue to me. Not critical, but still.\n. @brendensoares In the following case we are getting a copy on every iteration:\ngo\nfor _, compressableMime := range compressableMimes {\n}\nIn this one we aren't:\ngo\nfor i := 0; i < len(compressableMimes); i++ {\n}\nThough, I've just benchmarked it and it looks like that's not necessarily the case for the small array of strings (not complex types). What I get looks more like a measurement error.\nBut the map vs. loop for small number of elements is still the case. The complexity of the former is O(1+c), and of the latter is O(n). If n is small enough, O(n) < O(1+c).\nThat's why non standard MUX implementations use their own slice based data structures instead of maps for parameters.\n. Can confirm. Revel's testrunner serializes Response to show it to user in the browser for debugging purposes.\nIn Go 1.6, however, Cancel <- chan struct {} has been added to Request (and Response embeds Request).\nAs chan struct{} type is not supported by JSON Marshal methods (that are used for serialization), the change to the standard library broke Revel's testrunner module.\nNow Headers tabs of failing tests are empty.\n\nAnd there is a json: unsupported type: <-chan struct {} console error.\n\n. You actually have to install it as go get github.com/revel/cmd/revel.\n. > it seems to apply header for static files as well such as images and css and js\nThat's due to the fact that in Revel static assets are served using Serve action. So, there is no difference between static files and dynamic actions, actions take part in both cases.\nWhen implementing CSRF protection you can check whether current c.Controller.Action to make sure it is not equal to Static.Serve. Though, this feels kind of hacky.\n. 1. Why httprouter? Why not a pluggable router?\n2. There are already both issues and some PRs for that.\n. There are no alternatives for fsnotify that could be used for Revel.\nRevel has already had this in the README:\n\nAs of Revel 0.11.0, Go 1.3+ is required.\n\nHow about just replacing it by 1.4?\nP.S.: As for the commenting things out. I don't think that should be done.\nMoreover, IMO both master and develop branch must be protected.\n\nAll changes should be in a form of PRs: they are created, tests are started, if they pass PR gets merged. Otherwise, git history will be a mess.\n. @jeevatkm I think what @ottob implies is that Go Team officially supports only Go 1.6 and 1.5. And thus Revel doesn't have to work on something older than 1.5.\n. > from here its says their \"all in one params\" http://revel.github.io/manual/parameters.html\n\nwhich is fair, but is this not dangerous ??\n\n@pedromorgan This is convenient but cannot be considered a good practice. And it made #503 and later #809 possible.\n. No not yet @brendensoares \n. thank you for replying. i will use manual templates  @jlujan \n. Hi Leshax,\nI'm new to using this project, so I can't speak to the details, but I just got my db connection up and running according to their well documented example here. If you are still having trouble, could you post your InitDB function? The problem I had initially was that I used the dynamic typing \" := \" operator to initialize my DB pointer, so it wasn't exporting globally. Here is an example of my working code: https://gist.github.com/ehenry2172/d8e7e5bb5f85ed3e966bcceb2c56783f . With Before / After instead of interceptors would it make sense to replace OnAppStart mechanism by a special first class function that would be invoked automagically? Like the one below:\n```go\ntype Controller struct {\n    ...\n}\nfunc (c *Controller) Before() revel.Result {\n    ...\n}\nfunc (c *Controller) SomeAction() revel.Result {\n    ...\n}\nfunc (c *Controller) After() revel.Result {\n    ...\n}\nfunc Ready() {\n    ...\n}\n``. That's why it's a function, not a method. Or is you concern that you can have only 1Readyfunction per package?. What purpose would the [Before/After` actions](https://github.com/revel/revel/issues/420) perform that couldn't be done by interceptors? That's consistency.. Nevermind. Error was because my app was in a folder called \"src\".. ",
    "jgraham909": "FWIW minGW is a way to get GDB in windows.\nOn Mar 24, 2013 12:05 PM, \"Rob Figueiredo\" notifications@github.com wrote:\n\nI have really been putting this one off apparently :)\nImplementing a revel debug command that drops the user into the gdb\nsession in the console is probably the way to go.. I guess there is no\nequivalent on windows\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/33#issuecomment-15366140\n.\n. Cool\n\nserver_test certainly seemed like the odd one but tests often are. \n- I think most of the complexity was due to not running an instance of the test app? \n- What if we fully instantiated one of the demo apps and then documented that there would be some network latency issues involved in the testing. This would capture the first request compile spike too which would be good just for a completeness.\nWithout knowing the amount of people using revel and if any sites are in production it is difficult to say where testing should be focused and what we should be testing. My inclination is that we should be testing the complete stack and then as bottlenecks and bugs are discovered build out tests that are more specific in critical sub-systems. \nI'm new to go and haven't delved much into the testing bits so take the above accordingly.\n. I think I have addressed everything flagged with the exception of; router_test.go for absolute path. I did verify that this worked for the booking app on some random files. I'm not sure I understand the testing methodology in router_test.go this all seems like its just testing the regex? \nThere are some issues when requesting directories; \n- we no longer provide directory listings\n- requesting a path that maps to an existing directory results in Error 354\nNote that requesting a non-existent path or file results in an expected 404\nThe issues as follows (using the booking app as a test bed) these issues occur when requesting a directory that exists. These all stem from no longer serving directories. I don't think not serving directories is a bad thing but this behavior is bad we should maybe return a 403 (forbidden) for matching paths that are files rather than directories?\nRequesting any directory that exists (eg. http://127.0.0.1:9000/public/js in the booking app) results in Error 354.\nError 354 (net::ERR_CONTENT_LENGTH_MISMATCH): The server unexpectedly closed the connection.\nIs it acceptable that directory listings are not provided? If so is providing a 403 okay?\n. Yeah most of the routing is that regex so that's where most of the tests should focus.  Just making sure I was seeing the whole picture and not missing anything subtle while writing out the tests. \nI don't think we would lose any flexibilty moving to ServeContent in fact we would be gaining a lot of functionality. I would prefer going with ServeContent as ServeFile defers to it anyway. We should then pull out the mime detection and let the controller include that, or not. If not then pass that along to serveContent to detect for us.\n1. So where do things stand?\n2. Can we draft up a list of remaining details and things that should be added to the list of contribution ideas? \n. > It might be worth supporting the staticDir: syntax, converting it to the new one, to avoid breaking everyone's apps. It could print an ERROR message telling them to update their route.\nGiven that there is no release, or version and the development status is \"Early adopters only. Pull requests welcome.\" I say this should be handled with documentation to avoid any lingering cruft from legacy code. However if we must support it, it should likely reside in parseRouteLine() and not touch any other code. If that's a must let me know and I will put some handling code in parseRouteLine() and spit an error out.\n\nThe testrunner uses the staticDir:module:dir format, which I don't think we have an answer for yet?\n\nI made two attempts the first one was pretty awful so I rolled it back and went with a different approach implementing Static.ServeModuleDir which takes the module name as an additional first parameter. The result is much less code that is also easier to read, I think the route declaration is cleaner too. There is not a corresponding ServeModuleFile as I wasn't sure if we wanted that as well.\n\nMy main performance concern would actually be around creating a bunch of extra garbage, rather than CPU time (a fair number of objects get created to populate the Controller).\n\nYeah my concerns too. Our efforts are probably best pooled in optimizing that controller instantiation process rather than treating things as \"special\" at this point. From working with several frameworks, applications, and CMSs I've found that anytime something is special or different it ends up being a huge pain in the long run. \nRelated to extra garbage there is a hanging os.Open() in Static.ServeDir(). It seems to be okay and this pattern seems to be prevalent from googling about it, but doesn't sit very well with me. We can't use defer either since we need to pass an open filehandle. I'm not sure where we would put a call to Close perhaps BinaryResult.Apply after the io.Copy call, that seems even more awkward though. Maybe it's okay and it will require GC tuning relative to the number of file requests on very active servers? \nI don't know what's up with that weird whitespace discrepancy in server.go I can't figure out what's different between my version and upstream. My editor strips newlines and saves via go fmt, but I loaded it in vim too and everything looked identical. The following comment is the only one I couldn't resolve.\n// If they accept a websocket connection, treat that arg specially.\nI will take a complete read through our discussion here and write up a list of remaining items. I think there were a few minor things that may have slipped through the cracks and some larger ideas/plans that should likely make it out to the larger roadmap.\nEDIT: \n- Better tests\n  - windows\n  - benchmarking\n  - split unit & functional tests: eg. unit tests in package, functional tests as separate package. \n- Serve forbidden on requested directory listings Static.ServeDir\n- Review other possible error codes in Static.ServeDir() and respond accordingly\n- Canonicalize URLS?\n- Refactor to http.ServeContent\nI may have missed something but the above is what I have after a full read-through.\nI think serving 403 forbidden for directory requests listings and other possible error codes should make it in here before this pull request gets complete. Other than that I don't feel too strongly about where the rest should occur. If you think some the other items should be handled here let me know.\n. - Fixed the 503 and added error responses for a couple edge cases.\n- Fixed that re-orderered comment, I looked at that so many times and didn't see it. It's always the little things right? :)\n- Hanging file.Opens: That should go at the end of BinaryResult.Apply() right? If you want, I can pick that off as part of this.\n. Just pushed the close reader. \nI'm going to be offline through the weekend so I won't be checking back here until Sunday evening at the earliest.\nCheers\n. I think just Serve() is more clear. I should have reviewed Play's assets handle a little more closely.\nI changed ServeModuleDir() to ServeModule() I think that makes it a little more clear what the behavior is and this makes it have full functionality of Static.Serve() now.\nI think this syntax is slightly less clear as it looks like Static.Serve() is variadic at first glance, but in fact there are always two parameters one just may be dynamic from the URI. This is minor and easily addressed via documentation.\n. I just refactored to use http.serveContent() instead of io.Copy(). It defaults to the current time as the modified time and if we can get a proper fileinfo result from file.Stat() we use the resulting modTime. I verified that it is infact sending 304 (not modified) headers.\nLet me know if anything needs further work or we have left anything out.\ncheers\n. Wasn't quite sure what you were looking for on \n\nA couple tiny final comments, then ready to merge.\n\nSo I just went with what I thought was useful.\n. Awesome! \n. Likely we will need more information to help debug this. Have you taken a look at what lsof reports back for the running revel PID?\nTo get your PID issue the following ps -a | grep revel\n$ ps -a | grep revel\n16381 pts/2    00:00:00 revel\nIn this case our PID is 16381 we will then issue that to lsof -p 16381 example output below\n$ lsof -p 16381\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME\nrevel   16381 jeff  cwd    DIR    8,2     4096 6172813 /home/jeff/gocode/src/github.com/robfig/revel\nrevel   16381 jeff  rtd    DIR    8,2     4096       2 /\nrevel   16381 jeff  txt    REG    8,2  7375716 6032755 /home/jeff/gocode/bin/revel\nrevel   16381 jeff  mem    REG    8,2    52152 6819373 /lib/x86_64-linux-gnu/libnss_files-2.15.so\nrevel   16381 jeff  mem    REG    8,2  1811160 6819308 /lib/x86_64-linux-gnu/libc-2.15.so\nrevel   16381 jeff  mem    REG    8,2   135398 6819404 /lib/x86_64-linux-gnu/libpthread-2.15.so\nrevel   16381 jeff  mem    REG    8,2   149312 6819286 /lib/x86_64-linux-gnu/ld-2.15.so\nrevel   16381 jeff    0u   CHR  136,2      0t0       5 /dev/pts/2\nrevel   16381 jeff    1u   CHR  136,2      0t0       5 /dev/pts/2\nrevel   16381 jeff    2u   CHR  136,2      0t0       5 /dev/pts/2\nrevel   16381 jeff    3w   CHR    1,3      0t0    5887 /dev/null\nrevel   16381 jeff    4r  0000    0,9        0    5862 anon_inode\nrevel   16381 jeff    5r  FIFO    0,8      0t0  117691 pipe\nrevel   16381 jeff    6w  FIFO    0,8      0t0  117691 pipe\nrevel   16381 jeff    7u  0000    0,9        0    5862 anon_inode\nrevel   16381 jeff    8u  IPv6 117692      0t0     TCP *:9000 (LISTEN)\nThis should give you a listing of the open files (including ports). I know there are some issues in go that are being resolved in 1.1 surrounding this but it would be good to rule revel out.\n. Also note that the previous embedding method works just fine.\ntype Application struct {\n    m.MgoController\n    User *models.User\n}\n. Personally I found it easiest to just symlink the directory. So remove github.com/robfig/revel from your GOPATH and then symlnk your forked version into github.com/robfig/revel. \nI found this worked great when working on pull requests as it doesn't create extraneous diffs and avoids the scenario where you forget or miss mangling and import path.\n. +1 for this... when revel doesn't watch the import path you can sometimes end up with errors in browser like;\n```\nOops, an error occured\nThis exception has been logged.\n```\nBut there is no error logged in the console. I have found this issue to show up when import code, that I'm working on, doesn't compile cleanly. This would be a huge nice to have and would have saved me a bit of time tracking this down. It's mainly awkward because it is inconsistent with the workflow that revel encourages, and then provides no helpful information about what went wrong.\n. Doh! You're right I had fixed the app.conf dev issue but didn't push it and was working on a different machine. Sorry for the clutter.\nThis could also be addressed via documentation. eg. \"If you are editing imported dependencies or modules you will need to edit files within your application for force a recompile.\" or do we also need a go clean of the appropriate import paths?\n. This should be covered in the filters branch which I think Rob is looking to merge in soon. Can you check that branch out and see if it accomplishes what you need?\nMore details in the framework users group; https://groups.google.com/forum/#!topic/revel-framework/VVEDovyK_jg\n. I like coalesce it is certainly an improvement over {{if $field.Flash}}{{$field.Flash}}{{else}}{{$field.Value}}{{end}} \nAlternatively what if we just adjusted $field.Value to auto-set to the flash value if present? Or alternatively create a  $field.activeValue (as a string) that is set as Flash first then Value if no flash, this wouldn't lose any state information at render time and if necessary both Flash and Value would maintain their existing behavior.\n. FWIW coalesce as we are talking about it is the same behavior as \"or\" in the template functions (http://golang.org/pkg/text/template/#hdr-Functions) although that documentation is horribly confusing to me. eg.\n{{or \"\" \"a\" \"one\" \"two\"}}\n{{or \"\" \"\" \"\" \"two\"}}\n{{or \"\" \"\" \"one\" \"two\"}}\nOutputs; \n    a\n    two\n    one\n. Alternatively it sounds like you may want to consider a document data\nstore. Mongo handles stuff like this pretty gracefully. With mgo/bson you\ncan define a \"super\" struct and pass the omitempty struct tag to prevent\nempty fields from being stored.\nOn Thu, Jul 11, 2013 at 6:40 AM, Rob Figueiredo notifications@github.comwrote:\n\nAre you aware of any ORM system that allows this? I would be curious to\nsee how they do it\nAFAIK you can not use any ORM for this purpose; you would have to\nautomatically generate DDL, and then depending on how you need the results\nyou could maybe just select * from the row into a list of interface{} and\nthen type-switch for each value, assuming that you need to know their\ntypes.\nBut actually, I would recommend you discover another way to implement\nthis. For example, you could instead use a a schema like this (although\nthis performs very poorly with RDBMSs):\nUserValues\nUser: UserId\nRow: RowId\nKey: UserColumnName\nValue: ValueAsAString\n(or maybe have one value per data type, e.g. int, string, date)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20811810\n.\n. Yaotian,\n\nCheckout the mgo/bson marshal documentation\nhttp://godoc.org/labix.org/v2/mgo/bson#Marshal it describes the struct tags\nI was speaking about. Note that this only applies to mgo, but there is no\nreason another ORM couldn't provide something similar.\nOn Jul 11, 2013 9:08 PM, \"yaotian\" notifications@github.com wrote:\n\nJeff, Thanks for the reply.\nWhat is exact meaning of \"omitempty struct tag\" in your previous email? Do\nyou have any example that i can understand correctly?\n2013/7/12 Jeff Graham notifications@github.com\n\nAlternatively it sounds like you may want to consider a document data\nstore. Mongo handles stuff like this pretty gracefully. With mgo/bson\nyou\ncan define a \"super\" struct and pass the omitempty struct tag to prevent\nempty fields from being stored.\nOn Thu, Jul 11, 2013 at 6:40 AM, Rob Figueiredo \nnotifications@github.comwrote:\n\nAre you aware of any ORM system that allows this? I would be curious\nto\nsee how they do it\nAFAIK you can not use any ORM for this purpose; you would have to\nautomatically generate DDL, and then depending on how you need the\nresults\nyou could maybe just select * from the row into a list of interface{}\nand\nthen type-switch for each value, assuming that you need to know their\ntypes.\nBut actually, I would recommend you discover another way to implement\nthis. For example, you could instead use a a schema like this\n(although\nthis performs very poorly with RDBMSs):\nUserValues\nUser: UserId\nRow: RowId\nKey: UserColumnName\nValue: ValueAsAString\n(or maybe have one value per data type, e.g. int, string, date)\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/robfig/revel/issues/215#issuecomment-20811810>\n.\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/robfig/revel/issues/215#issuecomment-20836288>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20857459\n.\n. Yeah I will rework this so it's not so obtrusive\nOn Jul 15, 2013 7:44 PM, \"Rob Figueiredo\" notifications@github.com wrote:\nThanks!\nHm, that really takes up a big portion of screen to include by default --\nI think it would be something developers could leave on always if it was\nmore like a small tab absolutely positioned on the right side, which could\nexpand to show the variables if clicked, just like the django debug\ntoolbar.\nAre you interested in making a more intense UX like that?\n(Here's a weird screencast of the DjDT: http://vimeo.com/6640136)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/222#issuecomment-21018011\n.\n. I updated the UI/UX. As part of this I pulled in bootstrap's glyphicons which prompted a mv of images to img.\n\nLet me know if you want any additional refactoring.\n\n\n. Yeah, whoops got a little crazy with the find & replace good catch. \n. > For the form, just don't use the $field helper -- it doesn't do anything magical anyway.\nAs an example of the above. If you are passing in 'Example' as a named parameter to your controller Render() call you can output the values with something like the following (note, this code is untested);\n{{ range $index, $value := .Example.Information}}\n    <span>key: {{$index}}</span>\n    <p>{{$value}}</p>\n{{end}}\nTake a look at the \"debug\" pull request #222 for an example of iterating over pipeline values in a template.\n. Re: zurb foundation: Most of our projects use zurb foundation. I can review and/or help out if you want.\n. I think the email package should leverage the queue processor. eg. What if some event triggers 200 emails? We don't want that halting other progress, and generally email time sensitivity is not that critical, at least within a reasonable amount of responsiveness (eg. in the range of minutes to hours).\nAlso strong support for templates is a plus. It looks like this can just be addressed via documentation of the API? Maybe I'm missing something though.\n. Ha! I was thinking that the \"one off jobs\" from the job runner module would do this. I haven't actually used the job runner though so obviously I misunderstood the implementation. http://robfig.github.io/revel/manual/jobs.html \n. I don't think this is a revel issue.\nIMO this is a vagrant process/workflow issue which could be addressed through a combination of;\n- shared folders & symlinks (mainly for code editing ease) I personally use sshfs with nautilus bookmarks for convenience in Ubuntu to connect to vagrant files.\n- setting up a proper go environment in the vagrant instance\n- issuing revel run ... from the vagrant instance after ssh'ing in.\nI have been able to get revel working fine in vagrant instances. Maybe we can help you sort this out if you provide more detail of your process/workflow as well as what you are trying to do and what you are expecting the outcome to be.\n. Sorry @mattbaird I had forgotten about this issue with fsnotify and shared filesystems, what @robfig details is correct. Essentially if you aren't editing the files directly in your vagrant instance then fsnotify doesn't get notified of file changes. From my limited understanding this is a kernel level issue and I don't foresee a satisfactory resolution anytime soon. As such, I have shifted to running all go development locally.\nI do a lot of LAMP stack work so vagrant is priceless for that, and was my default dev choice for many years. In the future I might do a split dev environment where dbs and other services run on a vagrant instance and then go/revel runs locally connecting to the vagrant instance as necessary. But for now go/revel locally has been great. The single binary makes development with go much easier.\nYou can see more on the details for fsnotify and vagrant impact here  https://twitter.com/mitchellh/status/376408213203062784\nand related issues on the fsnotify project here https://github.com/howeyc/fsnotify/search?q=vagrant&ref=cmdform&type=Issues\n. Hi Tim\nI think this might be a permissions issue. IIRC ports < 1024 are reserved\nand require additional privileges to open. Assuming you don't already have\nsomething running on port 80 have you tried running your revel run with\nsudo privilege? Eg sudo revel run mylivesiteapp\nAlternatively lsof can be helpful in letting you know of something is\nalready running and listening on port 80. lsof | grep TCP\nOn Oct 1, 2013 6:06 AM, \"tim peterson\" notifications@github.com wrote:\n\nCan there be documentation somewhere for how to run Revel from a real live\nsite on port 80?\nI set up Revel on localhost:8888 no problem but then when I went to\nmy-live-site.com and ran:\nrun revel mylivesiteapp\nI get the following error\nERROR 2013/10/01 12:58:15 harness.go:167: Failed to start reverse proxy: listen\ntcp xx.xxx.xx.xx:80: cannot assign requested address\nAdding Nginx as a proxy with this nginx.conf didn't help eitherhttps://gist.github.com/tim-peterson/6774608\n.\nThe bottom line it'd be nice for newcomers such as myself to be able to\nsee Revel in real live action. This would seem to help adoption.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/331\n.\n. Tim you need to setup the environment for the sudo environment. I would\nrecommend setting env_keep to include GOPATH in /etc/sudoers. See\nhttp://stackoverflow.com/questions/257616/sudo-changes-path-why for more\ninformation.\n\nOn Tue, Oct 1, 2013 at 9:08 AM, tim peterson notifications@github.comwrote:\n\ngo env doesn't show GOPATH, how to correct that? Probably not relevant\nbut export GOPATH=~/gocode doesn't do anything.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/331#issuecomment-25464008\n.\n. Good to know. This is my first real bit of go code. When you're dealing at the os level there are always some oddities. In this case I tried to follow revel convention \n\nIn most other languages the '/' are handled properly as '\\' where necessary. I would assume go does this as well but checking is the best way to verify. If getting go up and running on windows isn't too much of a hurdle I may fire up a vm and checkout windows compatibility. But honestly this is low low priority for me. FYI there are available virtual machine images from MS over here http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11575\n. 1. I probably should just switch it all to FixedArgs, I initially was trying to follow revel convention, but FixedParams is exactly the same as FixedArgs so we should likely keep the same name.\n2. Not sure, quotes are explicit I can try some tests without as well.\n. Noted, will fix that.\n. Yes, more tests are in order. Wanted to first make sure that the overall approach was looking good otherwise.\n. Yeah this all seemed like a jumble to me so I tried to follow your approach. \n. I will have to dig into this code more, but do we have to have names associated with the args then? Seems like the syntax in the routes file for that would be awkward. I like handling this via convention; eg. fixed args are always first in the arg list.\n. Gotcha, this makes perfect sense and would be good to bake that mapping in so modules or interceptors can inspect and/or modify that as suited via name.\n. ",
    "rmacy": "@robfig would revel debug build the app and run gdb on the executable with the appropriate flags set? If not how were you envisioning the implementation? Just curious, would love to submit a PR for this.\n. @robfig I'm working on this! I'll be rather quiet the next two weeks though, I have to head out for my Annual Training and I'll be lucky to be near a computer.\n. Yeah, I got caught up in other work and with the Military, so I didn't make much headway :/\n. ",
    "kidoman": "Hey guys, any luck on this? Loving Revel though\n. ",
    "imosquera": "I'm also very interested in the debug command for revel!  Is there a branch that you've started to work through the revel debug?  Otherwise I can fork and begin build the command.\n. ",
    "justinfx": "As another option for debugging, has anyone every checked out hopwatch? I know it would be another dependency, but since Revel already has the web-view based concept of seeing your tracebacks, and has all the endpoints for modules, it might be neat:  https://github.com/emicklei/hopwatch\n. Wow that is really awesome\nOn Mon, Sep 9, 2013 at 11:40 AM, Rob Figueiredo notifications@github.comwrote:\n\nThis one looks even better\nhttps://github.com/sirnewton01/godbg\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/33#issuecomment-24032451\n.\n. \n",
    "brendensoares": "294\n. Debugging Revel apps with gdb is a common request needing an official answer.\nTODO\n\n[ ] Official guide on how to debug Revel code\n[ ] Enhancements to facilitate easy debugging (revel debug, IDE integration, etc)\n. @robfig can this issue be closed?\n. @tinchen have you tried running revel in GoClipse? How might GoClipse support Revel? Are you asking to be able to insert breakpoints in the IDE and then be able to step through them while running Revel?\n\n@robfig I think this issue needs to be closed. There isn't any actionable items as far as I can tell and the issue is rather stale.\n. @jrem a recipe would definitely be great, but I won't be able to contribute such since I don't use eclipse or similar IDE; I use vim and the command line.\nAnyone else in a position to contribute to this research would be warmly welcomed.\n. @jrem agreed, documentation would be helpful if we could collect such information from the community. Would you be willing to try any other debuggers and report your findings?\n. I started looking into gdb in general and it seems Go has good support for it, so at this point it's just a matter of making it easier to debug Go code. https://github.com/sirnewton01 has godev and godbg which seems like a great start.\nAs far as we're concerned, goclipse needs to figure out gdb support on their own as we can't afford the time to support IDE features. Though like you said, revel can already be debugged in a bare bones way, so it's just a matter of waiting for the IDEs to catch up.\nI've scheduled this for v0.10 in the hopes of figuring out a official \"Revel app debugging\" solution.\n. I'll create a new issue for a more general, non-IDE specific debugging solution.\n. #294 \n. @kennygrant I've started my first project with revel and I'd love to help out if anyone is interested in collaborating.\n. Scheduled for consideration in v0.11\n. Perhaps we should just add static/built-in support for a root favicon so that you don't have to explicitly define it in the routes?\n. Closing since it's an easy addition and since Revel doesn't use ico files currently. Thanks!\n. @p1n00n3 did you ever successfully deploy the example application? Can we get a pull request to add some instructions to the manual's deployment section?\nIf not, I'll close this issue as it's become stale.\n. @pedromorgan let's close this one down. If someone can contribute to getting Revel running on OpenShift, then we can start a RFC.\n. @seanmac02 is this PR dead? I think it's a good addition. Someone should add it.\n. Merged and resolved conflict. Also fixes capitalization typo. Will be pushing up soon.\n. @hfeeki so you want a way to create a Revel app from the command line that does not use HTML templates or public assets and that simply returns JSON/XML/etc serialized responses based on model structs and their validation rules with a RESTful GET/POST/PUT/PATCH/DELETE approach?\nIt seems to me that this is already quite possible. Just create a new app with no templates or static public assets. \nIt seems we would want to do some things to generate scaffolded routes, controller classes and model structs based on a database schema to automate the monotonous/repetitive steps to initial setup. Perhaps that is waht you're really asking?\n@robfig Do we have enough information here to mark this as contributor ready?\n. @wanli2011 I've always enjoyed that article ever since I found it. REST can be a very controversial topic when it comes to \"best practice\". Anything specific you from this article you want to discuss?\nAs far as this request goes, I can see some value in having some resource generation similar to rails for models, views, controllers, etc.\nDoes anyone else have any input or insight on this?\n. @iamjem standard models are a must for this feature to be implemented since you can't do much of  an API without having CRUD access to data somewhere.\nWe've discussed the options, but Go is different that other web capable languages in how data can be modeled, extended and serialized.\nThere are also competing ideas of what the \"Go way\" of doing data abstraction is. For example, many Gophers strongly dislike the idea of ORM due to the object/relational mismatches that inevitably occur when interfacing the two. That, though, leads to a very sadistic/purist approach of working at a low level with the data (e.g. pure SQL queries) instead of gaining the benefits of abstraction.\nFor commentary on the topic, you may enjoy http://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/\nThere is still value here in this feature request, but we need to discuss it more and make a decision on how to approach data modeling in Revel first. I've tagged this issue accordingly.\n. Revel will provide the CRUD actions in the controller, right?\nOne big issue is that because there are different data abstraction packages in common use, there is no single approach to support. The most generic is simply using structs to contain model data. Beyond that, we have to choose one way over the others.\n. @eddiejaoude I agree it would be useful at reducing the effort needed to get a project off the ground. Let's explore this more in v0.13.\n. @eddiejaoude Check out v0.14 of The New Roadmap.\n. Check out progress on this topic here: https://github.com/kishorevaishnav/revelgen \n. @PatrickWolleb feel free to join us on IRC to ask any questions.\nWhere are you trying to pass RenderArgs from?\nAs far as detecting content type per request, I think that's a good idea and deserves its own issue: #778.\n. @jniltinho that's a nice tool ,but we can't include that in the scope of Revel itself.\nTODO\n\n[ ] define requirements\n[ ] implement\n\nRequirements (WIP)\n\n[ ] create and run api app with no errors\n[ ] no template file watching\n\nTests (WIP)\n\nrevel new apitest skeleton=api\nrevel run apitest\nno errors\n...\n. Thanks for the updated @flosch! Personally, I am not very familiar with Django style templates, but I'd be interested in learning about them.\n\n@pedromorgan The idea is that the template engine would be modular, but I'm not sure how easily we can do that for Go templates, pongo, mustache, HAML, etc. We definitely need to look into it. I've scheduled #99 and this related issue for consideration/discsussion in v0.11.\n. Help me out here guys, but I'm not seeing a good reason to add support for this. What's wrong with simply restarting the app when you update your packages? Even though file descriptor limits can be manually increased by the user, every fd occupies system memory that could be used by your app.\nIf we did add support for this feature, perhaps watch.gopath should be watch.dependencies since you're not really watching the entire $GOPATH so much as you're watching a few imported packages, right?\nAll that said, I would rather see a way to allow a Revel app to monitor custom paths as this would have real world usage like monitoring a directory for external events (e.g. emails, logs, uploads). This feature seems more like a convenience, but it doesn't really save any time as far as I can tell.\nFWIW, I verified that a directory's modification timestamp changes when creating, renaming or deleting one of its files (on OS X Mavericks and likely any Unix-like OS). So we could reduce the fd count if we only watch  directories (e.g. src/somepackage) instead of all files under a directory as long as we don't care about file changes. I hope I'm not way off base on that assumption (I've never used fsnotify or the like myself)\nAs this issue is a bit stale, I'm going to close it, but feel free to re-open it if you feel there is more to be said.\nThank you @vanackere for your contribution to the community.\n. Ok, I can see how working on your own imported packages would required multiple rebuilds per day.\nAs far as your comment about memory, when you're building a web app that is intended to scale responsibly, you should be mindful of how you're using your limited resources. It's healthy to design with constraints, because it forces you to actually think about what you're doing.\nAssuming we do pull your changes in, what are your thoughts on the naming of watch.gopath that I mentioned?\n@robfig Any final remarks? I think @vanackere has made his case enough to include this PR, especially if it's off by default and not enabled in production (though we can leave that up to the user).\n. I think this PR is a good first step, especially since it is disabled by default; it comes with a \"buyers beware\" YMMV warning in a sense.\nWe can always improve this later and look into ensuring cross platform support. I'll be merging into the develop branch soon.\nThanks @vanackere \n. merged into develop.\n@vanackere Any chance you could contribute some documentation?\n. @robfig  @pix64 Per #370, does the case need to be sensitive? So long as the correct Go method is called. We could just use strings.Title(strings.ToLower(controllerName)).\n. @robfig I prefer your 2nd example because it flows a bit better when reading it. The 3rd example seems a bit disjointed.\n@plamb What's the deal with this PR? Seems your code was well intentioned and the conversation here goes into great detail discussing the options.\n. @revel/core I feel this is a valuable discussion that needs a little life put into it. Thoughts?\nThis is somewhat of a significant decision as it will affect how content will be delivered in Revel.\nI vote for a builder pattern that uses a default content-type in order to avoid dynamic content type detection. I think the builder pattern is a clean interface to control a results parameters.\nThat said, code readability is a good goal for Revel's API.\nNow, I may be too tired to think, but what about not calling c.Render() at all by default? Couldn't we set the content of c.Result automatically in most cases with sane defaults and convention over configuration?\n. There's been no official progress on this. Do you use App Engine @wlaurance ? Perhaps you could contribute code to support it?\n. :+1: \n. @wlaurance bringing this thread back from the dead, is there anything you have learned regarding Go/Revel and GAE? I'm sure others would appreciate sharing your experience.\n. @JustinBeckwith great contribution! @anonx added it to our Articles wiki page. Thanks!\nPS - I'd love your feedback on Revel once you try some of the other frameworks and anti-frameworks :)\n. YAML support would be a positive addition, though it isn't a priority. It would definitely allow for more complex configuration as needed. Perhaps we could rename app.conf to app.ini (since it's inside the conf folder anyway) and allow for additional drivers to detect other app.* files (eg: app.yaml). I haven't looked yet, but I assume that app.conf maps to a struct somewhere and if so the driver pattern (aka http://en.wikipedia.org/wiki/Bridge_pattern) would be a viable solution.\n. @revel/core Please review this thread and provide some feedback on if it sounds like a good idea. I've scheduled and re-opened for v0.11.\n. @landaire we need to either reject this PR or merge it in. A pluggable config parser is beyond this PR.\nTodo:\n- [ ] target develop branch\n- [ ] confirm @3d0c's given example works with his implementation\n. ### TODO\n- [ ] Serialize slice types so they are preserved during restoreFlash()\n. Can anyone clarify for me what \"custom services\" or \"private services\" is? An example would be great to help me understand what the issue is. Thanks!\n. @decker502 seems like a file privilege error. Were you able to fix it?\n@robfig can we close this?\n. @egonelbre I agree that it's not very obvious how to do what you were asking; it requires that a new Revel user get familiar with Go's template package. Hopefully when we add support for other more common 3rd party templating engines it will be more obvious. I'm sure we'll also add some clear instructions in the manual (and ideally some tutorial videos, too!).\nThanks for being part of the Revel community and contributing your feedback and ideas!\n. @robfig @jgraham909 It seems the or tag helps with this issue, but it doesn't cover the main issue @Michael2008S was having.\n@Michael2008S can we close this issue? If I get no response in a couple days, then I'll just assume all is well and close the issue. Thanks!\n. @robfig can we get a contribution for @Jetvp's commit so we can close this issue?\n. @insasho could you share the link to your code so I can take a look? I'd love to help you if I could, but I need more information.\n. Thanks @insasho. I've added this to the backlog so we can discuss it further and come up with a good solution.\n@pushrax @verdverm @landr0id Input on this would be appreciated. If I recall, #451 has a solution that would work here, too.\nI can't look into this in detail right now, but I can this evening.\n. @verdverm sounds reasonable to me. BTW, I found that we can mention the core team with @revel/core ! :dancers: \nI just discovered I can edit your post. I now know how to :dancer: \n. ### TODO\n- [ ] decide if @Jetvp's commit is the best approach (consider alternatives, if any, and refine the API)\n. Assuming there are no issues remaining, I'll close this.\nIf there is more to be said, please re-open. Thanks.\n. Is there anything that needs to be changed in Revel, or was this fixed in liteIDE?\nI will close the issue for now assuming that it was not an actionable issue for Revel. If there is something we could do to make it easier to debug Revel, then please re-open.\n. @notzippy @tonka3000 I'm pretty sure you can run gdb on the revel app via the generated tmp/main.go, but you can't use the revel command to do it, you'd have to manually build and execute the app with the correct flags that revel would do itself.\n. @Jetvp did you every find a working solution?\n@robfig can we close this or set some specific goals and mark it as contributor ready?\n. I have ubuntu 13 and I do not have this error, though this may be an issue with the goland deb package. I would recommend trying to isntall from source with gvm (https://github.com/moovweb/gvm).\nLet me know if you have more issues after installing from source. Also, what version of Go are you using?\n. @rbucker881 could you contribute some documentation?\n. @rbucker what needs clarification? How can we improve?\n. @notzippy good points. We were brainstorming on IRC yesterday about how we can improve the whole returning a result thing. We came up with the idea of controller action results being inferred from the returned type. For example:\n- strings would trigger an HTML result\n- structs would trigger a JSON or XML result\n- ints would return a specific status code\n- nil would return whatever the configured default status code was\nMy point in mentioning this is that the magical Render() method could end up being changed drastically is v0.13 when templating and a View model is decided on.\nThat said, you bring up some good points to clarify. Thanks!\n. @pedromorgan though this is old, I think we should leave it open as it's assigned to a future release (v0.13) and we'll need to consider it's suggestions on improving the documentation for Render() then. Do you agree? I'll wait for your reply before opening the issue again.\n. Labelled and moved to backlog for later consideration.\n. @revel/core Thoughts? I don't think this is of particular use (at least not for me). I also have zero experience with GAE, so I can't gauge complexity or the tasks needed to get a revel app running on it.\n. ### TODO\n- [ ] Define how to deploy a Revel app to GAE\n. @ScruffyProdigy looks pretty good.\n@robfig Besides style, what else should we discuss regarding this feature?\n@ejlangev how does Rails do it?\n. @ejlangev I'd say inflection libraries pretty well cover plurality detection well enough, don't you?\nThanks for the reminder on how resources work in Rails, It's been a while since I worked on a Rails project. It does seem that Rails handles singular resources though (http://guides.rubyonrails.org/routing.html#singular-resources). Is that right?\n@ScruffyProdigy can you review some of the comments @robfig made on your commits? It seems the only thing left to do is tweak the code style a bit to clean it up.\n@robfig Is there anything design related in the PR you would like to discuss?\n. @ScruffyProdigy please update this pull request to include your latest commits. See https://help.github.com/articles/using-pull-requests#changing-the-branch-range-and-destination-repository\nThanks!\n. @wanli2011 anything you'd like to highlight in that article?\n. @ScruffyProdigy I learned that as well; don't rebase, merge.\nIt's been a while since we discussed this. I'm assuming you've made additional commits to your master branch that need to be in this PR. I would recommend creating a feature branch on your fork and then creating a new PR with all the latest commits for restful routing in Revel. Just reference this PR (#245) in your new PR.\nHope that helps.\n. @robfig perhaps add a section on extending in the controllers portion of the manual? Or simply introduce the idea of helper methods by adding a section on helpers in the controllers section.\n. Moving this to the backlog as its low priority. Anyone is welcomed to submit a PR though.\n. Seems @tanema never followed up with the feedback. I'm closing this PR since it has become stale. Also, #292 is more recently active.\nThank you @tanema for being part of our community and taking time to contribute!\n. Labeled and moved to backlog for later consideration.\n. @pix64 @revel/core is #420 relevant/helpful for this use case?\n. @CoreyKaylor I see your point, but at the same time it seems a solution to per-action interceptors is complex. I think it would be simpler, or at least more understandable, to determine what happens for each action in the context of its controller instead of a bunch of interceptors.\nAssuming we implement #420 soon, then in the Before() method you could check c.Action and determine your path forward based on what each action needs before it runs.\n. Closing this in favor of #420. It seems composing a controller with a modified embedded controller would be an ideal for require auth per controller. You would then ideally be able to override the Before() method to base requirements on action as needed.\n. Labelled as bug and scheduled for v0.9\n. @robfig I wonder if there is a cross platform approach that would work for Windows? I agree that nginx et al is a good approach, but I fail to see how it would let you gracefully migrate a pool of processes from an old version to a new version. Could you help me understand? Or anyone from @revel/core could chime in.\n. :+1: HAProxy.\nIn order to have built-in support for this, we'd need to add process management to Revel. I thought Go didn't do forking easily? It seems my concern isn't unfounded: http://stackoverflow.com/questions/10027477/golang-fork-process\nDoes anyone want to own this to get an experimental implementation started?\n. @pushrax how will we be able to start an updated binary while the old binary is still finishing up pending requests? What will the flow look like? I'm more interested in this topic now.\n. Very good. Makes sense. Thanks @pushrax!\n. Closing since #690 should implement solution.\n. Reopened and scheduled for v0.12 so we can add non-breaking support for Windows.\n. @exherb @robfig doesn't maintain Revel any longer.\nWhat are you expecting to happen and what is actually happening?\nMore details will help us help you. Also consider asking your question on stackoverflow.com with the golang tag.\n. @bobobo1618 seems like a good idea. Any chance you can contribute?\n@robfig can we mark t his as contributor ready?\n. Could you include some instructions on how to use this module? Perhaps a README.md in the module root?\n. @bussiere Is this still an issue?\n@robfig if this is no longer an issue, can we get it closed?\n. @bussiere If you still have issues building on Windows, please feel free to let us know!\n. Looks like you found a real issue. Is it still an issue with the latest version of Revel? Were you able to work around it?\n@robfig can we verify that this is no longer an issue or mark it as contributor ready?\n. @bussiere any update on this?\n. This issue may not be included in the v0.9 release unless we are able to reproduce the issue and offer up a proper fix. v0.9 is due in 4 days.\n. @anonx @pushrax why is the harness scary or undesirable?\n. @pushrax I imagine to many it's a good thing that there is less to deal with. I feel that the less you have to worry about as a developer the better so long as everything just works (Apple). Then again, if you need to customize the build process, it should be easy and well documented (Linux).\nI think the scariest thing about Revel is its code inspection. There's a lot of magic going on there and it isn't so trivial to master how it's working. That is far more dangerous and scary, IMHO, that the abstracted build process.\nDo you agree?\n. @anonx @pushrax we should jump on IRC soon and discuss this more in depth. I don't see much that can easily change about the harness without losing a lot of value in Revel, but I'm open to ideas.\n. @anonx how did #719 affect this? I don't see any relevant change in its commits. If we can't reproduce it, then we shouldn't worry about it for now. We have other items that need our attention.\n. ### ~~@TODO~~\n- [ ] ~~target develop branch~~\n- [ ] ~~confirm as working~~\n. Sorry for taking forever to come to a decision on this PR.\n@revel/core has discussed this and has determined that you can add your own template functions already in Revel and this scenario doesn't appear to be a common need.\nThanks for contributing this idea @MZAWeb!\n. Scheduled for v0.8\n. So upon reviewing this issue and getting some peer reviews of it, I don't think there are any issues with Revel's docs. \"The spec\" you are talking about is the w3c working draft I'm assuming (http://stackoverflow.com/questions/15198231/why-cookies-and-set-cookie-headers-cant-be-set-while-making-xmlhttprequest-usin). I see no need to reiterate standards for other projects within Revel.\nIf you have a specific suggestion as to where you feel the Revel docs should mention such limitations, please create a Pull Request so that we can review your ideas more specifically.\nThanks for contributing!\n. Labelled as bug and scheduled for v0.9\n. The stripping is happening at https://github.com/robfig/revel/blob/master/panic.go#L21 and https://github.com/robfig/revel/blob/59448d1d08f99e3e5a5f803957f0d6f77e90d034/errors.go#L29 right?\nWhat was the motivation for not showing the entire stack? I would think as a developer, I want to see the stack from the erroneous line of code back to the first caller with the deeper, full stack trace viewable somewhere (e.g. in a log file).\n. I don't think we can do ANSI color coding because it isn't shown in the terminal only. Isn't it shown as an error in the browser as a controller result as potentially in a log file?\n. @wildattire do you have a PR that we could consider?\n. ### TODO\n- [ ] reproduce this issue and remove truncation (perhaps this should be configurable)\n. @robfig could you give some additional details in what you're asking for and mark this as contributor ready?\n. ### TODO\n- [ ] add controller validation integration to binder parsing\n. @dajohi Closing this issue since it's stale now. Please feel free to re-open it with additional details if you are still having any issues.\nThanks!\n. @robfig where did glog go? I'm going to close this issue as it seems there are no actionable steps to take.\n@jlujan thanks for being part of the community and contributing your feedback!\n. @landr0id that sounds like a good point and fine solution. Would BASE or EMBED be more relevant?\n. * is an understood symbol for any, so that works and it's almost obvious.\n. @robfig It seems Zap is doing what other popular templating systems already do. I would rather build support for something like HAML than try to extend the current template package.\n@pa001024 It seems redundant to create an include tag when the template tag can already accomplish the same thing.\nI'm going to close this issue for now unless it becomes a more common issue. I defer to @robfig for the final call, but I think the consensus is that we should rebuild the entire template system in Revel to be more flexible so as to allow the use of more powerful, proven and pre-existing templating engines.\nThanks for contributing and being involved in the Revel community @pa001024 !\n. @revel/core We need an owner to define steps to reproduce and propose a final solution.\n. Closing in favor of overwriting generated files. Thanks for your contribution @ReSc !\n. @roblillack can you try a different machine/VM to see if the issue continues? Also, a different version of Go?\nCan we agree that there are no Revel-based action items here? Seems to be a go command issue.\n. Closing since there are no action items and no additional details. Reopen if needed. Thanks.\n. @arkxu did you add any sort of documentation to the manual on how to use the mail methods?\nJust skimming through it, it looks well done! \n. @arkxu don't worry about Travis CI, it's failing because tcp port 9000 is not available. It's been doing that a lot lately. @robfig is the only one with access to restart builds currently.\nYou can run the tests on your local machine to verify all is well.\n. Merged into develop branch instead of master so we can get control of our releases.\nThanks for this contribution @arkxu Hang around so we can refine it!\n. This is scheduled for the v0.8 milestone, which is due out in 3 days.\n. What's the status of this task? I've begun working on my own Auth helper and I have some comments on this thread.\nFor example, it'd be better if you could choose which controllers(and maybe even individual actions) required a valid user session. If auth requirements aren't met then it should redirect to a login screen(which should be customizable ideally).\nAlso, if the session key could be set in the app.conf file it would be ideal as opposed to spreading out important values like this over many files.\n. Re: intercepts, I agree and understand, but I feel that it should be done automatically by the library instead of by the programmer.\nThe way I've done it so far is by having any controllers requiring auth to have a anonymous/promoted field of the auth struct so that it inherits the auth functionality. Also, the auth struct's init method currently checks for a valid user session and if it is not found it redirects to a hard coded login controller.\nEither way, I'd like to contribute. I can't look at the code now, because I'm at my day job as well. When I have some time this evening I can add more specific feedback and ideas. Perhaps I can help fill in where you've left off.\nPS - perhaps we could collaborate more on the Revel Google Groups list? Or is this a good place to have planning discussions?\n. @mclark4386 I edited my post before you added the link when I remembered seeing that link on the Revel site. Thanks.\n@slogsdon yes they would, but it's a much simpler approach. I wouldn't want the dev to write the intercept. That was what I was getting at I suppose.\nAs far as configuring the redirect to force login, the issue isn't views, but controllers. Are you currently planning on the Auth module serving up the views? In my approach, I am redirecting to another controller. I think that's important, because not every app handles logins the same. I may be missing the point here though. I really need to get up to speed with your solution before I get too specific.\n@robfig have you ever considered having a core team to develop revel? Since I'm using Revel for a project, I'd like to contribute to it regularly and it'd be great if we could prioritize feature requests and ensure steady progress.\n. @slogsdon the question is what % of devers will do scenario 1, 2 and 3?\nSince the default views/controllers would implement auth a specific way (eg: email/pass or username/pass) scenario 1 and 2 are basically the same because they lock the dever into a certain approach.\nI would guess (based on my own experience) that scenario 3 would be most common, because each app will have its own needs and may not want to use the default auth module approach. The only value I can see for scenario 1 and 2 is as a sort of starting point for new devers; a sort of template to build from.\nI think the real issue that we should resolve is the goals of the auth module. I am of the opinion that the auth module should only consist of basic methods for creating(ie: salted hashes), persisting(ie: cookie, db or file based) and verifying a session(ie: checking for valid auth session). A flexible, implementation-agnostic permission/role system would also be a big value add (so each controller can require certain permissions/roles for access to its actions).\nWhat other features could we have that would be valuable for the majority of devers?\n. @ClanStyles Since we're talking about authentication here, I say we should implement an authorization module separately. We ought to continue this conversation on #409. Authentication should only deal with a valid user session is present or not and the ability to create/delete it (i.e. login, logout).\n@slogsdon thinking of it now, if we're doing a module for the auth, then I think a sample controller and view would be good. We could eventually include samples of different forms of auth as well such as user/pass, http auth, oauth, etc.\n. This PR is starting to grow stale and I'm somewhat concerned that it needs to be tested/refined bit more. I was hoping to get this in the v0.8 release, but we'll need to push it back.\nPS - @slogsdon there are some comments on your code in this PR saying that you will be making some more refinements. Are you planning on doing that in the coming weeks?\nAlso, I really feel we should only include controllers/views via a sample app example. I'm just too concerned that if we provide controllers/views for one kind of authentication then we would need to provide controllers/views for the rest. I think that's not a good thing as IMHO the goal of a auth module is to allow the management of a user's session as I've mentioned above. I know you've asked for a more senior decision on some of these discussion points, but for the sake of progress I'd like to release something that covers the basics and expand upon it later as time allows.\nLet's focus on finalizing the basic aspects of this PR and create a new issue to spec out the other ideas. We already have an issue dedicated to authorization.\n. Let's close this PR so we can retarget the develop branch and hopefully only see your changes (instead of the recent release's changes).\nThanks.\n. What's remains to be done before we can accept this PR?\n. Todo:\n- [ ] update the import paths\n- [ ] target the develop branch\n- [ ] verify all is working well in sample apps\n. :+1: \n. Any idea why 1.3 would lack what 1.2 already supported?\n. Seems there is a SO question about this Go 1.3 gdb problem and links to this golang issue. It appears to be a Python script issue that is used for Go gdb debugging.\nHave you tried the suggested fix there with loading the Python script?\nSome helpful resources for Go debugging: \n- https://github.com/sirnewton01/godbg\n- Introduction to Go Debugging\n- The Official Go Debugging Tutorial\n- cgdb tutorial video\n. PR #358 is moving this conversation forward.\n. @robfig what's wrong with the default delimiters?\n. I'm rescheduling this for v0.10 due to lack of feature branch and develop branch targeting.\n. @davidzchen we could. I agree with @robfig though in that #472 should take priority over this to allow users to define their own skeleton. We can provide additional skeletons as separate repos for users to include.\n. Todo:\n- [ ] update bootstrap to latest\n- [ ] update jquery to latest\n- [ ] target develop branch\n. We'll update bootstrap and jquery in a new PR and target the correct branch.\n. @robfig @verdverm What's the deal with this PR?\n. Per my discussion with @robfig, glog and regex routes support will not be merged.\nRe-open if there is more to say.\n. It's not that hard to replace the generated files with whatever you want to use.\nHow are you thinking of accomplishing definable skeletons? Do you think we should provide multiple skeleton templates in the core by default?\n. @polds is this still an issue or has it been corrected in Go?\nLooking at your code sample above, I'm not sure how there could be an unmatched delimiter. Can anyone else comment on this?\nFor now, I'm going to close this issue. If there are actionable items, we can discuss it further and define steps to reproduce the bug. Thanks.\n. @robfig can you explain why glog is no longer desired per our recent discussion regarding the v1 branch?\nI've added this to the v0.9 milestone to move forward on implementing a modular, driver-based logger interface.\n. What's the deal with this PR? @hura why did you close it? I see @robfig had comments, but I don't see any comments.\n. It wasn't merged in, but I'd like to add it since these comments are helpful, especially for newer users. Thanks for this contribution @hura.\nAs far as you moving on, do you have any helpful comments on Revel or why you moved on to Clojure? I wish you well.\n. @goodsign I'm closing this issue for now unless there are some actionable items to take. It seems you've found a work around with the naming of your app. Thanks!\n. So to be clear, you want to be able to tell Revel when not to send the cookie in the response?\n. Response type check for text/html may be effective.\n. Are you trying to access the resp.ContentType from a filter?\n. Where are you inserting your filter in the order of the default filters?\n. This is issue definitely has merit, but since it has a workaround it is not going to be a high priority. We may be able to include a solution in v0.10 or v0.11.\nWe'll come back to this soon.\n. @pushrax what if the session does have keys in it? The session filter would still set the cookie in the response? I think the static module needs to delete the cookies from the Controller.Response.Out (https://github.com/revel/revel/blob/master/controller.go#L58) AFTER the ActionInvoker is called since the response's Content-Type is unknown until that point.\nPerhaps we can clear the cookie for certain Content-Types in RenderFile and RenderBinary (https://github.com/revel/revel/blob/master/controller.go#L188) which is used by the static module action (https://github.com/revel/revel/blob/master/modules/static/app/controllers/static.go#L83 ).\n. @pushrax would the cookie be lost if not returned in the response? I was unsure of the answer to that, but went on the assumption that it would continue to exist on the client-side. Can you confirm/deny?\nAs far as why we'd want to clear the cookie, I was under the impression that cookie data is not used when requesting static content like images and such.\nNote @robfig's comment 5 months ago:\n\"To elaborate my view -- presently I believe the session, flash, and validation filters add cookies to every response. However, the only responses where they are potentially useful is HTML web pages. Static serving, JSON APIs, or other non-typical-web-page responses would find them annoying.\nMaybe the solution is to add the cookie only if the returned content type is text/html\"\nBased on that and @dajohi's initial request to disable cookies on static.Serve\n. @pushrax we should discuss this at our next fireside chat. We're due for another. Maybe next Thursday or even possibly tomorrow (Saturday)?\n. @pushrax I don't think I meant delete the cookies, just not return them in the response. The cookies would still exist in the browser so no app logic should be affected.\nEither way, I think #587 handles this issue, but #352 may allow for further customization. Closing this issue.\n. @goodsign that's sneaky. Could you contribute a fix?\n@robfig can we mark this as contributor ready?\n. What should be the expected result? Simply not allow an app named revel?\n. I'm closing this issue. It doesn't warrant putting thought into a solution since whomever tries to create Revel with Revel deserves pain. Too much reveling!\nThanks for taking the time to discuss it though @goodsign !\n. @tim-peterson this is a good idea. I've noted it. We definitely want Revel to be easy to use and learn. Thanks!\n. @slogsdon can you contribute a fix per your cited code?\n@robfig can we get this accepted as soon as a PR is submitted? Or at least mark this as contributor ready.\n. Thanks @slogsdon for your contribution! I've closed this issue now that we have a PR waiting to be accepted.\n. So based on what you're saying, we should add some sort of delimiter around the parameter label like {:id}.png or perhaps we could escape the period like :id\\.png around https://github.com/robfig/revel/blob/master/router.go#L281-L295\n@robfig Can you confirm my logic? Any thoughts on what would be the cleanest solution?\n. Really though, a . should be a delimiting character since variables shouldn't have periods in their name, unless we have some concept of object hierarchy.\nThoughts?\n. https://github.com/robfig/pathtree/blob/master/tree.go#L93\nNot being familiar with the logic behind pathtree, it seems we simply need to change el[1:] to only slice up to the next delimiter (e.g. /, ., -). My fear is that my ignorance means that the above change alone is not enough to match properly. For example, can /some/:thing-:thinger/another/:item.json match [thing:123, thinger:222, item:456] for /some/123-222/another/456.json?\n. @robfig how is regex slower? How much slower? Also, does it matter since routes aren't loaded often (just on app start and if they change when they're being watched)?\n. Thanks for your contribution! I've merged another redis cache backend based on redigo into the develop branch. I would love to have your feedback on that implementation and any suggested improvements.\nWe are working toward making Revel more modular, so the cache package may end up changing to make it easier for others to write additional backends. Please stay around for that as you are obviously familiar with caching, Go and Revel. We could use your talent ;)\n. I believe #350 covers this now. If not, feel free to say so and clarify what you feel needs to be done.\nThanks for contributing to the Revel community!\n. https://github.com/moovweb/gvm found GVM from a SO question and it fixed this exact error when installing Revel on Ubuntu 13.04\n. This seems like an interesting bug. Anyone in @revel/core want to take ownership of it? See if we can define some steps to reproduce and then propose a solution?\n. @landr0id was there PR for your fix that you can reference?\n. @mattbaird After a quick skim of your PR, everything looks good. Any chance we can get some documentation showing how this would be used? Perhaps a sample app?\nPS - I've seen docker and may have to try it out myself. How long have you used it?\n@robfig can we get this PR reviewed?\n. No, I'm pretty sure it's you. You are fail programmer.\nPS - jk, TCI has been giving that same tcp error for at least a week now. Only @robfig has access to the TCI account, so I can't restart those failed builds. TCI is fail :/\n. The best I could do is merge it into the develop branch since we're trying to get releases under control. I don't think this would make it much easier than using your own repo, would it?\nPS - any idea what the CL that @robfig mentioned stands for?\n. @mattbaird https://github.com/robfig/revel/issues/milestones v0.8 is due out in 15 days and your PR is included in it.\n@robfig has been very busy which is why I've volunteered to help maintain Revel and keep it active. If you or any others are interested in driving the development of Revel forward, I would warmly welcome you. This redis cache contribution is valuable and reflects well on you. Likewise, others who have contributed significant features are ideal candidates to join Revel's core developer team.\nSo, @mattbaird or anyone else reading this who is interested, please reach out to me on twitter at @brendensoares, even if you have yet to contribute code, but have competency in Go or are eager to learn.\n. I've merged this into the develop branch. Thanks for the redigo-based redis cache.\n. @tejainece Can you code a solution and submit a pull request?\n. Due to how Go requires packages to be inside of a $GOPATH we cannot support this request. Something related has been added to detect the current $GOPATH you are in (if any).\nThanks for offering this feature idea.\n. @alkchr I see what you're saying. We can add some logic to allow relative paths within a $GOPATH. It seems a little bit magical, but it should work as expected.\n@jeevatkm shall we reopen this for v0.14?\n. @robfig this PR looks good. Can we add it in?\n@lukaslueg I agree, regex would be more flexible, but I wouldn't let that stop us from pulling in this change the way it is.\n@CasualSuperman I made some comments on your PR code. What do you think?\n. :+1: Sounds good, but I noted one more variable name clarification on line 51 of compress.go: https://github.com/CasualSuperman/revel/commit/6d77999e56b791a49a286683654abe48ec0555d8\n. @CasualSuperman have you tested your quality level detection? Have you successfully used this in a browser yet?\nI'd say it's about ready for a merge :)\n. @CasualSuperman chrome and firefox are enough. Currently, Windows is not a fully supported platform, so IE is not a requirement.\nEverything looks good to me; the builds are passing, you have code tests, the code style is consistent and harmonious with the rest of Revel and you've tested in 2 standards compliant browsers.\nThanks for your contribution. I'd love if you hung around our community a bit more. Members like you are a real asset :)\n. @insasho How would you handle this on non-Posix platforms (ie: Windows)?\n. @insasho packaging is something that hasn't really affected me, but I have yet to create a really complex, asset heavy app with Revel. Sounds like an important topic though\nAs for as Windows, my point is that we should ensure we don't try to chmod a file, but maybe that's not a concern?\n. ## TODO\n- [ ] Ensure os.Chmod permissions include correct executable flags (https://github.com/revel/cmd/blob/6ea9d159b2fbc8eeaef540bca5b99ba48483b363/revel/build.go#L106)\n. It would be great to start adding settings like this to app.conf. I would even say we should set defaults for cache-control:max-age=86400. We could simply define static.max-age=60 to change the value from the default.\nAlso, @insasho see #323. I've scheduled this for the next release as well. Hopefully we can get to these enhancements before the next release ends.\n. Pushed back to v0.11\n. @landr0id it seems if we passed the arguments to Static.Serve() that it would muck up the routes file. We should keep that as simple as possible.\nBecause of that, I vote for a config file. We can create a dedicated config file in the Static module. I assume we'd want to selectively config the headers of given files, so maybe we could implement a pattern matching system based on the file path. Thoughts?\n. ### TODO\n- [x] move this issue to the revel/modules/static module\n- [ ] add config option for static file caching\n- [ ] add cache header code to static module\n. @tw4452852 Could you submit a pull request for review showing what you think needs to change?\n@robfig This is over my head at the moment. I haven't taken the time to look into this. Can you confirm?\n. That seems odd. Could you provide a code sample or explain your usage? It seems it may be related to promoted fields, but I can't say for sure without seeing what your code is doing.\nOne quick and simple test is to change the variable name from db to something else like modDb et al.\n@robfig can we close this issue if we don't get a response within a few days?\n. @dajohi I'm closing this issue, but feel free to add more details or let us know if you figured out the problem.\n. @xiaoao you should write some unit tests ti ensure different subdomains are properly recognized (eg: some.domain.co.tld and other.long.sub.domains.com as well as a default for domain.com perhaps)\n. @xiaoao have you been able to test that these changes work as expected?\n. @xiaoao how would you define your routes with subdomains?\n. See also: #536\n. @rambocoder is it possible that the issue is not revel and that it's the configuration of your init script?\nI believe that is the issue. If you find otherwise, please re-open this issue.\nThanks!\n. Maybe we should have a default charset setting in app.conf and then make it variable when you manually set the content type?\n. I'm at work so I can't watch the video, but Revel doesn't yet have a XSS or the like. At this point, it's a basic web MVC framework.\nDo you have any specific feature requests? If so, list them out and we can create new issues for each to specify how they should work. Of interest to me is a better ORM and a authentication module. Both of which are on the list of desired features.\n. @mictadlo Since this issue is stale, I'm going to close it. Feel free to re-open it if you have more specific details to add to the conversation.\nPS - videos would be great, but they're not a top priority currently.\n. @opennota Curious, why are you not using the views folder?\nThis may be something we can do with #99. Also, possibly related #305?\n. I'm basing my thoughts on my experience with other web frameworks.\n@purohit For one, I don't like using upper case in my file names, especially on case sensitive file systems.\n@robfig So there is no specific reason for the case sensitivity? I might put in a pull request soon to make it case insensitive.\n. @robfig I run my web apps on a linux server. Do you run your web apps of a mac or windows? Also, when you said seems fine, did you me seems fine the way it is?\nThanks.\n. @purohit I don't want to manually specify rendering \"register/index\" instead of \"Register/Index\" for all of my controllers.\nWhile I understand the influence that Go conventions have had on the file name case, I do not agree it should be restricted. IMHO, \"register/index.html\" should be treated as the same file as \"Register/Index.html\" or ReGiStEr/INDEX.html\". There is no good reason that this is not the case now. No human would name multiple files the same except with varying character case. I think the same goes for Go method names.\nAs @robfig mentioned, Windows and Mac do not enforce case sensitivity. So Revel might as well be consistent on all platforms otherwise code I develop on a Mac won't function on a production Linux server. That is not good.\nI would hope Revel's aim is to be a flexible framework, not a dogmatic one.\n. Forked, coded, pushed and requested pull: #370 \n. #370 is a start in the right direction. struct tag integration may be too much and out of scope. I was able to accomplish the task with the current code and some string formatting.\n. ### TODO\n- [ ] add context-based error messages\n. @robfig can you accept this PR?\n. I'm sure we can have both, but maybe that's something to improve for Revel 2.0\n. Ya, for now. I just backlogged it.\n. Curious, anyone know why the log structs are all caps?\n. Fork, change, test, request pull :)\n. No response? Is there an issue here? If so, please feel free to re-open this issue. Thanks!\n. If you feel that's best, fork it and make the change, add a code test and create a pull request.\n. Looking back at this, it seems this applies to https://github.com/robfig/config . I would recommend making this a PR for @robfig's repo so he can determine if it's a good change.\n. Should we break AssertContentType apart into a 2nd method called AssertCharset? If so, perhaps we should add a 3rd parameter to the WriteHeader method for charset since charset is an optional parameter for a Content-Type header (http://www.w3.org/Protocols/rfc1341/4_Content-Type.html)?\n. Can you contribute a fix?\n@robfig can we mark this as contributor ready?\n. I think that's how it should work. I'm assuming the public route is the static controller and it would make sense that favicon.png is expected to be directory. So then, ENOTDIR is correct which implies that any portion of the path after favicon.png/ is not found aka doesn't exist.\nCan you add more details as to what is going on?\n. Curious, why do you think they were looking to attack your service?\nAs far as stat, how do you know what error type is being returned? Briefly looking at Go's os package, it returns abstract info for each file (http://golang.org/pkg/os/#FileInfo). For example, we can test if it isn't a directory with FileInfo's IsDir(). If I am understanding everything correctly, then Windows support should work great.\nThat said, Windows is currently a low priority platform currently and is not officially supported. So, if you could submit a pull request implementing a 404 for ENOTDIR type errors, then that'd be perfect in my opinion in that it would cover your current needs and would likely work as expected on Windows.\n. Thank you!\n. Good question. Best way is to upgrade to Go 1.2 and run revel's tests to find out, but having reviewed the release notes, I don't think Revel will be negatively affected.\n. @abellee Feel free to open a new issue if you run into any issues with Revel and thanks for contributing your feedback to our community!\n. I believe we've recently addressed this: https://github.com/robfig/revel/issues/367 and https://github.com/robfig/revel/issues/370\n. Didn't even consider testing for upper case. I'll address this today. Thanks!\n. It seems upper case directories and template files are working the same as lower case or mixed case.\nThe issue must be in the template functions lookup of the template name, which I did not consider. I'm looking into it more now.\n. Line 297 of http://golang.org/src/pkg/text/template/exec.go :\ntmpl := s.tmpl.tmpl[t.Name]\nThis is why the {{template \"path\"}} actions are failing. It is checking for the exact name of the file.\nI can't think of a way to have case insensitive template names that addresses this issue, because in order to do so we have stored the lower case version of the template name in the template.Template instance which is then found via its Lookup method.\nThe only thing we could do is contribute to the text/template package at http://golang.org/src/pkg/text/template/template.go so that it stores and looks up template names in lower case form to support case insensitive matching.\nI'm sorry for the inconvenience. Please offer any solutions on what would be best for the Revel community regarding this issue.\nMy humble opinion is that case insensitive file name matching is very important for cross platform software, but I may be wrong. Thoughts?\n. @nkatsaros that's not a bad idea, but is there any adverse effect to doing this?\n. @nkatsaros I agree, this is not an acceptable \"bug\" to allow to remain. If you could contribute a PR we can get this fixed, otherwise I can do it in 8 hours or so.\n. Thanks @nkatsaros \n. I think what you need is http://golang.org/pkg/runtime/#Caller so that you can get the line and file of the calling code that triggered the panic. Then you can use http://golang.org/pkg/runtime/#FuncForPC and Go's reflection to get more details on the calling function.\n. Good question. I'll look into it myself as soon as I can run a test and see what is happening.\n. I believe the answer lies in the panic filter especially on line 23: https://github.com/robfig/revel/blob/master/panic.go#L23\nI would guess that you are running your tests from the command line. Is that a good guess? If so, that explains why your panic is reacting differently since Revel is running its tests through itself on the @tests route.\n. You need to import \"runtime/debug\" and use its debug.Stack() method as shown in my the linked panic.go on line 23.\nShort of doing this for you, I can't explain any more clearly. If this was a more common request, I would take some time to contribute a solution, but you could just make your panic messages more descriptive so you can figure out what's going wrong in your code.\nI apologize If I'm missing something. I didn't spend very much time looking into your specific issue, just did my own brief testing (I didn't try running the tests from the command line nor did I test with custom code). If I'm overlooking something please let me know. The main point to take away is that it seems your test suite is not being run in the same context as the default test suite.\nYou may be able to simple use debug.PrintStack() to show the entire stack trace and calling line of code. That would be simpler than trying to do it all yourself since you're doing this on the command line. \nThat said, it seems debug.Stack() is deprecated in favor of runtime.Stack(), so we could address that in the Revel code. (see http://golang.org/pkg/runtime/debug/#Stack)\n. I can take some more time later looking into your specific issue if you could commit your custom test suite to a temporary git branch and push it up on github so I can check it out and try to find a more relevant answer for you.\n. @arvenil any news?\n. One last question; have you verified this works as expected in a proxy setup?\n. That looks simple enough. If you could mark this contributor ready, I(or someone more eager) can put in a PR ASAP.\nThanks!\n. Hehe, good to know. Seems like a good idea though to mark issues that have been discussed to the point that they;re ready to be implemented. So, good call on the helpfulness aspect :)\n. Curious, does this issue happen with revel run? Seems odd that this would be an issue because I'm quite sure @robfig devs on a mac.\n. Closing, because, without additional information, there are no actionable items with this issue. Thanks @mil\n. Ya, that's the idea. Makes it easier to keep production-specific config out of the code base. I'll mark this for Revel 2.0 :)\n. environment variables would actually work well. Didn't think of that. I was thinking of doing that via nginx and fcgi, but that isn't as familiar for me when done with Go.\nEither way, I assume we'll eventually have a good number of modules that will need configuration and supporting multi-file config would be ideal, do you agree @robfig ?\n. Alright, I'll let this idea settle and if it comes up again later we can consider it then. Thanks.\n. Moved to the backlog to discuss some time in the future.\n. For clarity, could you further define the functionality that each of these features would have?\nAccess control management as in user roles and permissions?\nAsset fingerprinting as in putting a version in the URL when serving static assets like javascript?\nResponders as in implicitly calling the correct Render method based on the HTTP Accept header? What would happen if multiple types were given in the Accept header?\nI'm vaguely familiar with Rails use of these features, but if you could link to Rails docs for each as a reference implementation, that'd be very helpful.\n. Good ideas.\nI think each of these 3 requests deserve an issue of their own. What do you think? That way we can work out the relevant details for each.\n@robfig would it be better if planning of features like this was done on https://groups.google.com/forum/#!forum/revel-framework ?\n. @carl-pfeiffer Just join the Revel group and post your ideas. We don't have a formal process in place now, though it's something we'd like to do soon along with better planned release cycles (e.g. master vs develop branch and tagging releases).\nI'll close this issue since we'll be fleshing out the ideas you mentioned on the Revel Google Group for now.\n. Sounds good.\n. What style does golint enforce? I couldn't find any details.\nMy main point in variable naming is to avoid vague variable names. Even error is better than err and I'll admit you don't have to be smart to know that err contains an error object given its context, but that won't be true in all cases for other variable names.\n. Some fine points.\nI agree that context matters and there are always exceptions to rule and I would add that just because something is commonly done, doesn't mean its a good idea(https://yourlogicalfallacyis.com/bandwagon < I love this little site).\nAlso, I understand that error is a type, but I was just making an example (though a poor one). In the context of err error then it would be more clear what err was, but the same can't be said with err := some.Thing().\nI would be curious to see the results of running golint on Revel.\nPS - @purohit you should come on freenode #revel irc channel sometime. What timezone are you? I'm GMT-8\n. This sounds like a positive contribution. Also, +1 on style for your impossible panic.\n. We should add a willUnload interceptor (eventually a controller method when we switch from interceptors to controller methods).\nI'd like to get this done for the next release/\n. @chirimoya would this be useful in production? For some reason, my gut reaction is that this should be non-production only. Thoughts?\n. Closing this since #593 should cover this topic. Thanks All!\n. @chirimoya put in a new feature request and we'll see what we can do :)\n. @bobrik were you having an issue before?\nman go-get shows\n```\nGO-GET(1)                   General Commands Manual                  GO-GET(1)\nNAME\n       go - tool for managing Go source code\nSYNOPSIS\n       go get [-a] [-d] [-fix] [-n] [-p n] [-u] [-v] [-x] [ packages ]\nDESCRIPTION\n       Get  downloads  and  installs  the  packages named by the import paths,\n       along with their dependencies.\n```\nNote Get  downloads  and  installs  the  packages\n. @arturolinares Have you verified this works both with and without ./src?\n. @arturolinares even with this PR's changes, it still doesn't work?\n. Assuming that Linux is our most important platform currently, then I think this works. I don't see why this would function any differently on Mac. As for Windows, that will have to come later.\nWe'll be getting a more clear cross-platform testing flow setup soon, but until then Windows is going to be for others to verify for us.\nThanks for the being part of the community and contributing @arturolinares!\n. This should be fixed via #385. Please re-open if the problem persists after you checkout the latest commits. Thanks!\n. @rafadev7 Can you include a gist with the code file that contains the erroneous code?\n. @purohit https://github.com/rafadev7/irado His code looks fine to me. Can you reproduce this issue by checking out his code? I would, but I can't at the moment.\n@rafadev7 Can you reproduce this error by creating a new revel app? Also, what OS, Go version and Revel commit are you currently using? Finally, are you still facing this same error?\n. @rafadev7 Please re-open if the issue persists.\n. Does this solution work for you with your given use case?\n. I've merged these changes into the new develop branch. Thanks for contributing @lidaobing!\n. My assumption is that since only 1 connection exists while the app runs that it will be closed if/when the app exits. I would also assume that the Close() method is needed for doing database connections for each request.\nThose are assumptions though. @robfig you wrote the sample apps, right? What's the deal with the database connection?\n. Does this answer your question @mawenbao ? If not, please re-open the issue with more details. Thanks!\n. Have you verified this works as expected?\n. As I mentioned in your PR, you could add methods for PUT and PATCH. I imagine it would be useful for those testing a RESTful HTTP API. If you're interested, fee free to create a new PR.\nThanks!\n. This looks good. I'd like to see the same methods for PUT and PATCH too, but as far as the DELETE method goes, this looks great.\nThanks for being part of the community and contributing!\n. We've added support for this in v.08, (via #439) but we could integrate more support for this soon (e.g. revel test output). I'll move this feature into the backlog for later discussion.\n. ### TODO\n- [ ] find places where color can enhance the dev user experience\n- [ ] make it configurable\n- [ ] make it so!\n. Thanks for staying active on this feature, but why did you issue a new PR?\n. @ScruffyProdigy you should be able to simply commit more changes to the same branch that you originally created the PR on.\n. I'm going to close this PR for now since the previous PR should include any changes as both PR's are on the same branch in your repo. This is assuming my understanding of how PR's work with commits is correct.\n. Basic authentication with abstract permissions is currently being discussed for a near future release on PR #293. Though the consensus is we should implement a separate module for authorization as authentication happens first before authorization can happen.\nSome reference implementations:\n- http://framework.zend.com/manual/1.12/en/zend.acl.introduction.html\n- https://github.com/DocSavage/rails-authorization-plugin\n- https://github.com/ryanb/cancan\n- http://book.cakephp.org/2.0/en/core-libraries/components/access-control-lists.html\nAuthorization via a subject/predicate/object aka user/action/resource aka RBAC (http://en.wikipedia.org/wiki/Role-based_access_control) would be my first choice over ACL.\nI'm not sure if we could make the authorization module flexible enough to be driver-based so that other kinds of permission systems could be used. Could we just have an abstract interface of some sort that applies to many permission solutions?\n. Is it just more or was that custom binder example broken before?\nThese changes look good. Thanks for the contribution!\n. SGTM. How are you planning on using the version number? Also, can you change your PR to target the develop branch instead of master?\n. Thanks for targeting the develop branch.\nSo, what is your use case for this feature?\n. What is considered a valid version number? If git describe returns v0.8.13 then should we strip the v?\nAlso, instead of only checking the environment and git tags, why not also check app.conf?\n. My concern is comparing the build's app version to a minimum version check. You'd have to have some sort of common format where there are only numbers and periods. Am I right?\n. Alright, we can always make tweaks later. Thanks for the contribution!\n. @abustany could you join our conversation on #460? There seems to be a build loop that has been introduced due to our usage of git.\n. Can you describe steps to reproduce the issue as well as the expected result? We don't have an official bug reporting guideline, but you could include other commonly used info (e.g. http://www.mediawiki.org/wiki/How_to_report_a_bug).\nThanks.\n. I've looked at the PR for the config package. I only have access to revel's repo, so we'll have to wait on @robfig to get his input on this.\nSince this is out of the scope of Revel, I'm going to close this issue.\nThanks @whaly \n. backlogged as nice to have\n. @revel/core Thoughts?\n. I think my initial intent was to make the value accessible outside of Go. Could we do both and then import the VERSION value from the plain file from the revel package?\n. @landr0id yeah that could be one way to do it. Though, maybe it'd be better to implement Go Dep (https://github.com/kr/godep) instead.\n. @pushrax Ya, -X might be a tricky approach. I'd be fine with version.go. I don't have a real use case myself for this right now, just thought it would be important for it to be clearly available somewhere, but maybe it's not important at all.\nLet's leave this in the backlog to marinate a bit longer. If it comes up later, then we can revisit it and hopefully have a real world use case for it.\n. @pushrax we don't have a revel version, but I'd like to have it. Question is, what would show? Both revel framework version as well as revel cmd version?\n. @notzippy Checkout out our releases/tags; we do use the semantic format. The Patch version is always implied as 0 unless we actually release a patch.\nA compatibility method is a nice idea.\n. @pedromorgan I really like that YAML file idea. Is that a jekyll feature? Can it read from remote domains?\n. The PR #858 may not be perfect, but it's present. Closing.\n. Ya definitely. I was thinking of just creating a local branch and going through and making TODO comments and then doing a mass grep -R \"TODO\" * to get a sense of what we're dealing with.\nYou have a better, more collaborative idea?\n. Other than that, I suppose just starting somewhere is the best way to do it. Then discussing and improving the PR's (like you've been doing).\n. I feel like this is a good high level goal instead of a specific task. We'll fill in missing godoc comments as we organize the code.\n. True, if we add a panic and finally method, then it would cover the functionality of an interceptor.\nThis seems like an easy enhancement and one that would simplify the process of hooking into the request flow.\n. Does it make sense to have an interface defined for each of the 4 methods (before, after, finally, panic) and test if a given controller implements the relevant interface method at runtime?\nThe alternative is purely using teh reflect package to see if a controller has the appropriate methods.\nI haven't written any test code to compare the 2 paths, but I think they're both real options (the reflect package approach for sure).\n. @anonx exactly what I was assuming would be done. I've done it on a past Revel app and it works great.\n. This needs its own RFC. I'll take ownership of it.\n. Don't want to be a pain, but could you target the develop branch for your PR?\n. The easiest change is to export emailPattern and make sure it's clear that the Email instance must have its Match set.\nIdeally, we should have a default pattern to use. We could introduce validator constructors to assist with default values especially for the Check method.\nThoughts?\n. Why make a separate issue? We can come up with a solution here and then create a PR for the develop branch.\nEDIT - your new issue is proposing a solution to cover more than current email issue, so that's fine. @qubic, we'll be implementing a solution to simplify the email validation issue you stated. In the mean time, you can change your code to use the Email() separate of Check(). Thanks!\n. Thanks for targeting the develop branch for the PR.\nAt first glance, this looks great! It deserves a more in-depth review though, so I will return soon to give it a proper critique.\n. Thank you! I've scheduled it for v0.8\n. I'd like to see v.Email() return a new Email{} with the Match properly set. With the others, I don't see a sane default value, so they should require parameters to be set.\nAs far as the namespacing, perhaps we should create a revel.validators package that validation code imports via import . \"revel/validator\"? It's kind of a tough call since we'd be introducing the first sub-package to Revel (which is a path we're considering taking). Maybe @robfig or others could chime in with thoughts.\n. Of the 3, I like 2 the most; it's consistent.\nWe didn't openly discuss namespacing via sub-packages, but @robfig recently mentiond it to me in a private discussion. He's leaning toward modularizing Revel a bit to make it more in line with the Go way.\n. Let's wait a day or so and see if we can get some more feedback. I've scheduled this for v0.8.\n. So as we discussed on IRC, we're going to introduce some exported ValidTYPE variables that can be passed by value. For example, v.Check(field, revel.ValidEmail) would ensure that field is a valid email based on the default email pattern.\nIs that right?\n. Curious, why doesn't the Email struct implement an IsSatisfied method?\n. @landr0id of course :) thanks\n. Added in #443 \n. No need to have an issue like this unless you want feedback before you implement a pull request. Just create the pull request and we can review it there.\nEither way, this is great! Thanks.\n. This is a good enhancement. Thanks.\nCan you please target the develop branch instead of master? We have not updated our contributing guide yet, but we are trying to reserve master for tested and released changes only.\nWhen you target develop, I'll schedule this PR for v0.8 (due in 4 days).\n. That seems odd. I don't see a functional difference between 302 and 307 according to their specs, but I do see the note about 303 being used similar to 302. Odd.\nAre there any HTTP/1.1 interoperability issues? See http://stackoverflow.com/questions/5129076/after-a-post-should-i-do-a-302-or-a-303-redirect\nWhat ways are UX improved?\nI do see value in adding an override parameter to the revel.Controller.Redirect method, but given its current form I'm not sure how to introduce such a parameter. Though this is preferable to adding another method. \u00a0Any suggestions?\nI've moved this to the backlog for further discussion. Thanks!\n. Noted. We'll try to get this into a future release. Likely v0.10. Thanks!\n. Short Answer: YES.\nThis is something that would seem to fit into the idea of having an API module of some sort that would automatically ignore HTML templates and only render into a serialized format (e.g. JSON or XML).\nIt is currently possible for you to simply not call c.Render() and use one of its alternative forms such as c.RenderJson() or c.RenderText() etc. It's just not highly optimized for that type of web app (yet).\nI've moved this to the backlog for further discussion. Thanks!\n. @revel/core Thoughts?\n@leebrooks0 I've looked at this again with fresh eyes and noticed I may have missed the point of PJAX. Upon further reading (http://ntotten.com/2012/04/09/building-super-fast-web-apps-with-pjax/) I see that PJAX is simply serving partial page HTML instead of full pages.\nI feel this is already possible with Revel; just make certain routes return partial HTML. For example, you could have GET /login that returns a full HTML page or load a JS MVC page that then loads parts of the page such as a login form found at GET /login/form.\nDoes that make sense?\n. I'm going to close this issue up then since it seems there are no actionable items to support PJAX. I assume there are some features that could make PJAX easier to do, but I have no particular use case to consider.\nThanks @lenw !\n. Make sure validators is properly linked\n. Done!\n. @lidaobing can you provide steps to reproduce this issue along with expected results just to clarify your expectations?\n. I'm not familiar with this portion of Revel yet. If you have an idea, why not submit a PR so we can test it out?\nI'll look into this more tomorrow for the v0.8 release.\n. Perhaps you could write out a spec for what you are envisioning. Something simple that explains your expectations would be beneficial and not rely on Go experience :)\n. With that said, I'll close this issue. Thanks for the idea!\n. The docs are in markdown, so it shouldn't require any Go code.\nI'll verify and correct this tomorrow if no one does it by then.\nThanks!\n. Tested that via {{template \"test/test.html\"}} with test.html in app/views/test/ and it worked as expected.\nThanks for contributing @leebrooks0 !\n. https://github.com/robfig/revel/blob/c36e7f7484e91108ff26152e3c3ad5bdf3229c8e/modules/jobs/app/jobs/plugin.go#L30\nThat line is printed from the jobs module, so it definitely looks like something isn't right here.\nWithout seeing your setup, I can't say for sure, but I will look at this soon and see what I can find out.\n. Did you stop and restart your revel app after disabling the module?\nI've successfully enabled and disabled the jobs module by changing app.conf and routes as documented without issue in dev mode.\nFor that reason, I am closing this issue. If you have more details to reproduce the issue, then please comment and we'll re-examine the details.\nThanks!\n. I tried loading the /@jobs URL and it returned a 404.\nPerhaps you can zip up your project and out it online or do a screencast or something. You could also try to have someone else reproduce the issue, otherwise I have no way of addressing the issue, because I can't reproduce it. Sorry.\n. Ah, I see. That sounds odd. I'll have to look into it more soon to confirm what's happening.\n. @ottob Thanks for digging in. Your proposed solution sounds correct.\nIs this an urgent item for you? I've updated the labels and scheduling for this issue so that it can be addressed in the near future.\n. ### TODO\n- [ ] refactor ProcessSource() to selectively process app code as needed\n- [ ] verify this fixes the unexpected loading of modules like jobs\n. I'll test it soon and let you know how it goes!\n. I'll be testing and merging this in for today's release. Is there anything left to add to this or is it ready to go? PS - we can always improve it later, so long as we're taking a step in the write direction.\n. I don't think disabling it is a worthy feature at this point anyway. Thanks!\n. Just a quick question, doesn't this work for Windows, too (http://stackoverflow.com/questions/2048509/how-to-echo-with-different-colors-in-the-windows-command-line)?\nIf it does, might as well remove the GOOS check.\n. Would it hurt the usability to let it go and just hope it's enabled? It won't negatively impact the developer if it's disabled will it? Or will it show gibberish ANSI codes if it isn't enabled?\nSomething to test.\n. Where would these go html files be stored? Can you describe the steps in more detail so I can understand what you're expecting to happen?\nThanks.\n. That sounds useful, but can't you just do that now? Will the templates not load properly with a non-html extension?\n. An issue we had with template filename case also showed that we don't have full control over what gets loaded. The ultimate solution is writing our own custom pluggable template engine. As it is now, the template package doesn't allow us to fully control template loading :/\nStill, this is a good idea to explore more later, so we'll keep this in the backlog to discuss later. Thanks!\n. @leebrooks0 I really like the idea of gohtml similar to erb files. Perhaps ego would be another option? Either way, it seems this is not easy with the built-in template package.\nFor this reason, I'm going to close this issue. Allowing other template engines is on our todo list, so we'll likely get to it then.\nPS - another option would be to override or clone the built-in Go template embedding that would allow us to control how templates are loaded. That may actually solve this issue as well as our case sensitivity issue that we had before. Something to consider. @revel/core thoughts?\n. Yes and please use the develop branch for pull requests. The contributing guidelines have not been updated with that yet. Thanks.\n. Let's use revel.ValidRequired() for now despite its weird name. We'll have to improve it later, but for now it's best to be consistent with the Valid prefix.\nOther than that, this is a great change!\n. Revel has no special support for image manipulation, but Go has the image package http://golang.org/pkg/image/ .\n. https://github.com/robfig/revel/blob/00060899f7cee4fb9e54356b04d2f2a12707a35d/controller.go#L25 The Controller struct exports a Response object that you can access from your controller action.\nYou can see that a Response has an Out field of type http.ResponseWriter (https://github.com/robfig/revel/blob/c36e7f7484e91108ff26152e3c3ad5bdf3229c8e/http.go#L22). You can learn more about writing to such an object at http://golang.org/pkg/net/http/#ResponseWriter .\nI hope this helps\n. Have you tried putting each API version into its own module and then using the new module route embedding (issue #422):\n* /api/v1 module:api_v1\n* /api/v2 module:api_v2\nI can't test this idea at the moment, but it may allow you to avoid the controller name clashes.\nLet me know!\n. According to http://robfig.github.io/revel/manual/modules.html this idea may not make any difference.\nI do think, however, that name spacing on modules is a good way to go about solving this issue. How we accomplish this could be open to discussion.\nWe would have to make the RegisterController() (https://github.com/robfig/revel/blob/master/harness/build.go#L306 and https://github.com/robfig/revel/blob/master/controller.go#L349) aware of the existence of a module context when loading and then change the route matching to use a matching algorithm to find the best match for the given controller (giving preference to non-module app controllers).\nFor example, assuming we have these controllers:\napp/controllers/users.go\nmodules/apiv2/app/controllers/users.go\nThis would load the \"app\" Users controller:\nGET /api/v1/user Users.Show\nThis would load the \"apiv2 module\" Users controller:\nGET /api/v2/user module:apiv2.Users.Show\nThis is a rough idea. Thoughts?\n. I'm not sure modules alone will be able to fix your issue. Please share if you do find a solution. Otherwise, we'll have to come up with an enhancement to address this issue.\n. @plestoon be more specific. Give me a code sample of what you would like to be able to do.\n. Alright, now that we have 2 proposed solutions, we just need additional feedback from the community.\nI still prefer a module-based solution because it helps separate the organization of the different code bases. For example, API v1 vs. v2 will have different versions of the models and controllers. That's enough of a difference to justify thinking of them as separate.\nAlso, using file paths to specify controller and action is specific, but it is not concise. In my opinion, it dirties the nice route format.\n@robfig, @landr0id and anyone else; thoughts?\n. @plestoon the problem is that all controllers, no matter what folder they are under, belong to the controllers package and that is why we see name collisions. We need to brainstorm more on how to address this issue.\n@revel/core any more ideas?\n. @NitroKKX that's an idea we could try. Namespace routes for controllers by module.\n. @NitroKKX after thinking, module name spacing is already possible like you demonstrated ie. module.AnyNameHere = some/path/to/module. We just need to register the controllers with the module name prepended. We'll have to strip out unsupported characters (eg. non-alphanumeric) and capitalize the first character.\nNow, before we make a PR for this, I wanted to revisit @plestoon's original request of simply making the controller path the name space. He suggested controllers/api/v1/user would be registered as ApiV1User. This seems equally doable and would preclude the need to modularize your app and configure it accordingly. So, it seems slightly simpler. However, it seems if we didn't use modules, we would have to figure out how to name space views as well, though not likely in the case of an API which should not make use of views.\nLet's weigh out the benefits and sacrifices here before we make a final decision.\n. @NitroKKX good points. I like the idea for the revel cmd to make new modules, too!\nWhat about reverse routing? routes.ApiV1User.Action? or something else?\n. @NitroKKX it looks like we could make it do that by appending the module's name space value at https://github.com/revel/revel/blob/df5d88dbece276012b4c7ab45a33a1047c1db108/revel.go#L316\n. I just thought of an issue for this when thinking about name spacing views. I'll quote from #724 \n\n[What] if you name space the module differently than the module expects, then it won't be able to find its own views since the module controllers run just like any other controller (as if it existed directly in the importing app). How would we handle that?\n. @NitroKKX how would the RenderTemplate() method know that the calling code was from a module and therefore that it needed to be name spaced according to the current app.conf settings? Seems rather difficult/impractical, but I'm open to suggestion.\n\nHaving reread this thread, it seems that simply name spacing controllers would be the most straight forward solution, but even that would still require use to heavily modify the code generation process in harness/build.go and harness/reflect.go. We would need to pass more than a simple list of code paths to search; we'd have to qualify each code path as with an app path or a module path and if it was a module path then we would need to specify the module's name as defined by the app's app.conf e.g. module.SomeName = /some/path/to/somename. It seems that this is no small undertaking as it will likely have unexpected effects in Revel and its apps. Fortunately, we have the luxury of time to let this sink in a bit more.\nIf the community deems this valuable, then we can certainly put in the time to implement it.\nThat said, in the mean time, @plestoon please consider other solutions, such as manually naming your controllers and perhaps. I've just confirmed that you can already organize your controllers into sub-directories without any issue.\nWe'll revisit this in v0.12. Thanks!\n. This needs its own RFC in revel/rfcs. @plestoon @NitroKKX can you take ownership of this?\n. Did you post on Reddit?\nI know https://github.com/robfig/revel/blob/master/CHANGELOG.md and most everything only mention v0.8, but notice the \"tagging releases\" under \"How Revel Is Developed\": https://github.com/robfig/revel/blob/master/CONTRIBUTING.md\nSo basically, the patch/hotfix is currently assumed to be 0 at the moment.\nI do agree with you that version to version changes could be breaking. My thought, as noted in the link above, is that we don't affect the API of Revel in hotfix versions, only in major or minor releases.\nAs far as what the roadmap is for v1.0.0, I would say feature completeness to an acceptable and comparable level is the main goal. Personally, I'd also like to ensure that ALL of Revel's features are fully and properly documented before v1.0.0 so that developer adoption won't be inhibited. Basically, v1.0 needs to reflect a mature, polish framework that will really improve web development productivity in Go.\nDo you have any actionable issues or feedback concerning the above?\n. This is right in line with #419. Thank you for these additions!\n. Like @mclark4386 said, you can just set SOME NAME <SOME@MAIL.COM>.\nI was able to set the ReplyTo to Test Name <email@address.com> but when I tried the From I got a syntax error from gmail: mail failed: 555 5.5.2 Syntax error. si6sm157601180pab.19 - gsmtp. SO talks about it: http://stackoverflow.com/questions/4321346/555-5-5-2-syntax-error-gmails-smtp . I'll have to dig in more soon.\nHere's my code:\nfunc (self App) MailTest() revel.Result {\n    mailer := &mail.Mailer{Server:\"smtp.gmail.com\", Port:587, UserName:\"USER\", Password:\"PASS\"}\n    mailer.Sender = &mail.Sender{From:\"FROM_NAME <FROM_EMAIL>\", ReplyTo:\"REPLYTO_NAME <REPLYTO_EMAIL>\"}\n    message := mail.NewTextMessage([]string{\"TO_EMAIL\"}, \"Test Subject\", \"Test Body\")\n    if err := mailer.SendMessage(message); err != nil {\n        // Error\n        return self.RenderText(fmt.Sprintf(\"mail failed: %s\", err))\n    }\n    return self.RenderText(\"mail sent\")\n}\n. Well, unicode was included in the mailer_test.go (https://github.com/robfig/revel/blob/master/mail/mailer_test.go), but not in the FROM field. Though I don't see why that would matter.\n. It is a sad day for me today. The issue is not in Revel's mail client, but in Go's mail client :/ \nSee http://golang.org/src/pkg/net/smtp/smtp.go line 226 cmdStr := \"MAIL FROM:<%s>\".\nWhat can we do now, but maybe mention it on the go nuts mailing list.\n. NO! IT MUST NOT BE US! IT'S THEM!\n@strandmon Sigh. I understand. That makes sense. I see how to address it now. I'll work on making the appropriate changes. Thanks!\n. @verdverm Ya, good idea. I think I can do it by then.\n. I'm likely going to completely remove Revel's mail package in favor of supporting https://github.com/jordan-wright/email\n. What happens when you try and what do you expect to happen? Not having tested this myself, I have a hunch it has to do with float's lack of numeric exactness.\n. @newoptions is it generating an error or is it just not the result you expect? My comment about exactness is wrong (http://play.golang.org/p/H8Oh5CruLk).\n. I'm not seeing any underscores. Can you please give all the details needed to reproduce this issue? Thanks.\n. @plestoon assume I have just run revel new issue450. How would I reproduce the issue you're having?\nPerhaps, create a app_test.go with \"...\" as its contents. When I run go test then I should see \"...\", but I see \"...\"? \nMaking detailed steps like these really help us more efficiently handle community submitted issues with our limited time.\nThanks!\n. Perfect. I'll take a look at this soon!\n. @robfig genius. I didn't even notice that @plestoon's initial code sample was in main.go :)\n. @pleston feel free to comment if you feel there's more to this issue. Thanks!\n. This happens because the FlashFilter (https://github.com/robfig/revel/blob/e90b244a61be929873b00f26f500ad58af5127da/flash.go#L35) runs before your controller action is invoked (https://github.com/robfig/revel/blob/5c0deec85a9653a7881c94eb9fa429c7287098ff/skeleton/app/init.go#L13) in the ActionInvoker filter. When you set the Flash values they cannot be retrieved until the next request is processed (where the FlashFilter can extract the key/value pairs from the persisted cookie.\nIt's pretty clear that a Redirect() is required for the post/redirect/get pattern. Render() does not redirect the user agent.\nWhat are your thoughts?\n. I can see some value in that.\nWhat would you call it though? params or such? Then the FlashFilter can populate params with its own values or  a params[\"flash\"].\nThoughts?\n. Ya, I could see that working well. Does it fit your scenario?\n. Scheduled for v0.9.\n. #221 seems related.\n. Even though it's in the list of filter? https://github.com/robfig/revel/blob/master/skeleton/app/init.go#L18\nIf it isn't a filter, then why not just make it part of the filter processing code?\n. I thought it was a filter, but you're saying it wasn't named as a filter...which I interpret to mean it isn't intended to be a \"filter \".\nI'll let this sink in on come back to it later :]\n. ActionInvoker is a special case and there is little value in renaming the func.\n. See \"URL Parameters\" section of http://robfig.github.io/revel/manual/routing.html .\nGET /test/:id Test.Show would pass the id parameter to the Test controller's Show() method.\n. We have some questions that still need answering and I would also like to see some unit tests added before we merge this into the code base.\nBecause of that, I've pushed this PR back to the next release. When the above needs are met, I ask that you create a new pull request that targets the develop branch along with a dedicated feature branch on your forked repo per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\nThank you for your contribution thus far. Let's get this added soon!\n. @bakanis are you still interested in taking the lead on this PR or should we take it over?\n. If revel run 'app_name' works, then what command is triggering that long path error? Can you provide steps to reproduce this bug from a fresh app?\nThanks for reporting this!\n. Very sorry to hear that this is affecting you in the wild! While we look into this issue, you can revert back to version 0.7 via git tags. That should get you back up. Let me know if it does or does not.\nYou are definitely right, something is wrong here. Thanks to your input, we can hypothesize that it's an issue in https://github.com/robfig/revel/blob/master/revel/build.go. Can you describe your app's file structure and create a new app (revel new bugapp) that also triggers the same issue?\nAs soon as we find out exactly how to trigger this build issue we can find out what's wrong and fix it. Thanks!\nEDIT: the build.go file you reference hasn't been modified in more than 6 months. I doubt the issue is the line you cited. It is possibly it has existed for 6 months and no one has experienced it because it is a rare case triggered by some uncommon setup. Definitely curious to find out how to reproduce this issue.\n. v0.8 of revel added a feature that falls back to git describe to assign an APP_VERSION. It prefers an environment variable though.\nAs far as Go package management, from my reading, the only idiomatic way to do it via go get is with some commit locking. This is what I've seen recently: https://github.com/gpmgo/gopm though I don't use any package management myself.\nAnother interesting idea that I just thought of now is if there was an adopted convention for ALL packages to export a VERSION variable which could be checked somehow. Not sure that's the best way, but it sounds like a good idea at the moment ;)\nPS - thanks for following up on this and confirming that it was an environment issue!\n. Sounds like a simple fix. I'll look into this soon. Anyone else is welcome to chime in.\n. Can you give an example of output that you are looking to change with this PR?\n. I edited your title. PS - target the develop branch in all future PR's. Thanks.\nI've scheduled this for v0.9\n. manually merged into develop branch\n. Can you add an overview README.md to your module? I would like to have decent documentation explaining how to make use of this auth module.\n. So what I expect from Auth is to be able to:\n- find out if there is a user logged in (an authenticated/validated user)\n- log in a user (authenticate/validate the user)\n- log out a user (unauthenticate/invalidate the user)\n- require a user to be logged in to be able to access a specific action\nI don't want my Auth module to force me into a particular paradigm such as username or email based user identification. So it needs to be abstract when identifying a user.\nIt's nice to have a default controller to handle the views for logging a user in and out of the system, but not helpful if it assumes a auth paradigm (e.g. username vs email).\nThese details are what I'm measuring this PR against and, as it stands, it's not meeting my expectations. I'd love some critique of my expectations @robfig @verdverm @landr0id\n. @verdverm We've separated the authentication and authorization modules in #409 so we don't need UserCanX.\nAlso, would we include default drivers for the AuthInterface in the auth module?\nWhat would Connected() do?\nI would avoid cluttering the routing config; people love how simple it is. I would vote for defining auth requirements per action in each controller's Before() method (which is yet to be implemented; it will likely replace Intercepts). This would also allow developers to use a sort of \"base\" controller that can be embedded (this is what I'm currently doing myself with my own auth implementation).\n. @verdverm #420 \nI don't think the intercept replacement is blocking this PR. It just means we'd have to control per action rules differently like via a manual conditional for each action that requires an authenticated user.\nI see no reason why we can fit #420 into v0.9 in the lest 3 weeks, but it comes down to what can realistically be accomplished in everyone's limited volunteer time.\n. @slogsdon thanks for the heads up. Worst case, we can merge your code into a new branch to collaborate on. Thanks!\n. @verdverm So I've spent some time pondering the Auth module and how to approach it. In order to make something that fits the needs we've discussed above, we need to standardize on a data model layer so that the auth module knows how to match a user in a data store based on the user identifier field and a properly hashed secret (e.g. password).\nThe alternative is to make assumptions in the authentication driver of both credential type (e.g. username, email, etc) and data store type.\nEither way, I think we should aim for convention over configuration. I feel if we don't standardize on the data abstraction layer, we're going to have to have some way to configure things like the user table name, the credential database columns, etc.\nRails has the ActiveRecord ORM and I think Revel needs to adopt one, too, so it can have a consistent way to access data stores. I'd like to propose my concept ORM https://github.com/brendensoares/storm for discussion. There are some things that need to be tweaked in the spec, but I think it may be an effective data layer if done properly.\n. Rescheduling this for v0.10 to allow for further discussion on how we ought to approach this.\nPS - the booking sample (http://robfig.github.io/revel/samples/booking.html) demonstrates doing user authentication via GORP.\n. @revel/core Thoughts?\n. @Cuidightheach Check out a work in progress auth implementation: https://github.com/iassic/revel-modz/tree/master/modules\nIt isn't perfect, but it's a start.\nThe idea is to make the backend auth store modular so that it can be driven by a SQL database or a raw file or whatever you may need. It is important to offer a standard interface that the individual drivers will implement which is why we're defining a user model interface of sorts.\nI hope I understood your concerns correctly. The goal for both authentication and authorization is modularity so that you can create complex or simple solutions as required by each unique set of constraints. There's no need to define a rigid requirement for a specific implementation, just a general interface that can be adapted to many solutions.\n. @mikkolehtisalo I don't understand what you're asking. Can you clarify?\nAlso, take a look at revel/modules#1.\n. @mikkolehtisalo an SSO driver could be written to support a more complex flow, i'm sure.\n. Closing in favor of @verdverm's auth module.\n. I'll look into this soon. It seems like it may be an route ordering issue. This sounds like a familiar topic, too. Have you searched past issues?\nEDIT: See #333 as that may give some context. Also, some steps to reproduce the issue you are seeing and what you are expecting to see would be very helpful.\n. Seems odd. How does it get into a build loop? When is git touching the controller? Why would git touch the controller?\nI'll look more into the issue soon, but I am concerned that ignoring attribute changes may break things further (though that's only a gut feeling at this point).\n. What is \"a template function\" and what is \"fs_usage\"? Is that a Mac utility? It's not on Ubuntu.\n. Ok thanks for the details. Can you answer my initial questions like when/why is git touching anything? I'm a bit lost to how that would be happening. Thanks.\n. In my own testing I can confirm that the --dirty flag modifies files in the .git folder. This definitely would trigger the looping you're seeing.\nIt seems --dirty is needed in order to differentiate working trees with staged changes from those without. That doesn't seem relevant to our use of detecting the current version of the app though.\nIt's odd that you're experiencing this and no one else is. Can you run git tag -l and ls -lA?\nAs far as pulling in the recent howeyc/fsnotify#79, I don't think it would help since there are files being modified in the .git folder. I feel the real solution would be to exclude all dot files and folders from being watched (even git status modifies the .git folder)). Thoughts?\nReferences:\nhttp://git-scm.com/docs/git-describe\nhttp://git-scm.com/book/en/Git-Basics-Tagging\n. @ottob you could also try defining the APP_VERSION environment variable via export APP_VERSION=0 to prevent git from being called (see https://github.com/robfig/revel/blob/master/harness/build.go#L116). That would be the fastest workaround for this issue.\n. @ottob I was assuming the .git folder being modified (in my testing) was triggering a rebuild, but I see what you're saying about your controller file.\nDo you want to put out a PR with your suggested changes. I suppose we need a way to verify the installed version of fsnotify supports the new method; perhaps when it fails to build it will be obvious?\n. Closing because this issue should be fixed now. Thanks!\n. jobs.In(time.Second*20, MyJob{}) // right away will execute 20 seconds after it is called. Perhaps you want jobs.Now()?\nrevel.OnAppStart() appends the passed function to a list called startupHooks which is processed from the generated main.go file via Run() as soon as the server starts. It is not related to request processing.\nFeel free to reopen the issue if you feel there is an actionable step that revel can take to fix your issue. Thanks!\n. I've labelled this and scheduled it for the next release. Thanks for helping to improve Revel, @tcolar !\n. This seems like welcome documentation in the same vein as #419.\n. #462 seems to also be included in this PR. Am I right?\n. You need to have separate branches for each PR, otherwise you'll end up updating a PR with unrelated commits. Then of each branch/PR as a silo of changes.\n. I'm not experienced with Go/Revel localization, so I can't comment directly on the use case. That said, I could see some value in introducing some logging levels that would allow you to tone down the amount of log entries. Thoughts?\n. I created an issue and assigned it to the backlog milestone for later consideration.\nSeeing as how this PR is very straightforward and does not affect functionality, I'll accept it as it is.\nThanks for contributing!\n. Looks good, thanks!\n. Can you cite the lines of code you're referencing? Honestly, either solution you mention works. I can see some cross platform Windows issue with this, but Windows is not an officially supported platform at this time.\n. @rjeczalik there is no definitive list of Windows issues. From what I've heard, Revel can run on Windows without too much effort, it's just not something that we test or support currently due to our focus on Linux/Mac environments.\nIf you'd like to test Revel on Windows and share your findings, then I'm sure many others would be very appreciative of your contribution.\n. Curious, does the Unix file permissions translate to Windows file permissions or does it simply get ignored?\n. Thanks for looking into that file permission question. I'll close this now since we have a PR scheduled for v0.9.\n. What's not correct? Also, we need to target the develop branch. See https://github.com/robfig/revel/blob/master/CONTRIBUTING.md \"How Revel Is Developed\"\n. Sorry to be a pain, but can you target the develop branch?\n. Please retarget the develop branch. https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\nThanks!\n. I don't know the solution to the windows slash issue, but it's been\ndiscussed here quite a bit. Probably time I bite the bullet and figure it\nout.\nOn Feb 19, 2014 7:49 AM, \"Tony Worm\" notifications@github.com wrote:\n\nI added basePath to the revel new template rendering context\nso that skeletons can be more flexible with file.go.template\nwith importing modules/controllers/routes\nThis seems to work on the other OSs besides Windows... of course\nOn Windows, the slashes are inserted as '\\'\nwhether or not the filepath.FromSlashes() is called\n@brendensoares https://github.com/brendensoares @robfighttps://github.com/robfig\ndo you know how to deal with this slash issue on windows?\n\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/472#issuecomment-35512612\n.\n. @pedromorgan not that I can find. Maybe we should manually add \"Tested against Revel vMj.Mn.Pt\"? We could use automated tests to help verify the docs are all valid, but that may need additional effort in order to accomplish that in an effective way.\n. Not that I can see. You could disable different log outputs, but there's no way to alternate between different levels of log verbosity. Is there?\n. log.level = warn is more concise. It accomplishes the same thing, just in a way to is easier to toggle.\n. @revel/core Any thoughts on this?\n. Alright. Let's leave it alone for now.\n. Rob and I can coordinate the move; should be straight forward. I was thinking it may be better to wait until we reach our first full release aka v1.0 (which is not yet scheduled).\n\nWhich os preferred? gorevel.com or revelframework.com. I kind of prefer \"less is more\". As far as hosting, we may even be able to get free hosting; either way I also manage a VPS. Ideally, it would be nice if our site was powered by Revel ;)\n. @landr0id I can see some points on the naming, but revelframework seems so long :/ That may not matter though.\nThoughts @robfig ?\nAlso, @verdverm, looking to forward to seeing what you're working on.\n. Alright, revelframework is doable. @robfig you already have the organization setup, right?\nWhat is everyone's thoughts on when to make this transition?\n. @anonx why is revel dot gl good? I think for the domain, a more clear/verbose name would be better such as revelframework dot org or such.\n@pushrax thanks for the insight. How can we acquire @revel exactly? As far as backwards compatibility with go get, we can leave robfig's revel repo up and just not update it. However, if I recall correctly, GitHub will forward all requests from the old URL to the new automatically, so it may not be an issue in reality.\nThoughts?\nI'd like to get the repo moved ASAP simply for the ability to more actively manage the project and the team. The custom domain and such are merely nice to haves for now.\n. @pushrax I see what you're saying with the new URL...I suppose revel/revel is only slightly redundant ;) I don't see any major issue with that, do you? (I will admit that it feels odd at the moment, but I see no other good option).\n. @anonx that's a clever interpretation of the gl tld (perhaps you can start a trend for Go projects using gl domains), but I think the consensus is for the more descriptive domain.\n. Sounds good, but won't the old repo's issue still exist? Shouldn't lose that history.\nAlso, what do you mean by \"fork the repo back\"?\n. @pushrax Can you add me to the @revel? Also, the \"github.com/revel/cmd/revel\" sounds like a good idea.\n. @pushrax thanks. I've added you to the core team if you're interested (if not, let me know and I'll remove you).\nStill slightly lost; how would incompatibility be caused by users importing the old repo i that repo will essentially become a historical archive?\n. You're right. I agree now. Thanks for clarifying.\nOn Feb 13, 2014 7:45 AM, \"Justin Li\" notifications@github.com wrote:\n\nI may be missing something, but this is my reasoning:\n- Repo is moved. go get github.com/robfig/revel works fine due to\n  forwarding.\n- To allow go get github.com/revel/revel, all package names need to be\n  changed in the source code, on master.\n- Now, go get github.com/robfig/revel will fail, due to the package\n  names being incorrect.\nIf GH supported forwarding to a particular branch or tag, that would be\nperfect. I don't think they do though, which is why I think creating a\nstatic fork at github.com/robfig/revel containing the current code would\nbe the simplest option.\n\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-34991094\n.\n. Done & Done! Thanks for everyone's effort to make this happen! We can get a domain setup when we reach v1.0 :)\n. You can do return c.Redirect(\"/hotels/%d/settings\", hotelId) (http://robfig.github.io/revel/manual/results.html) but I could see your proposal being useful, too.\n\nScheduled to the backlog for later discussion. Thanks!\n. @zzdboy Sorry, I don't understand what you mean by \"Can increase such method does not\". Can you clarify?\n. This is worth trying. I've scheduled for v0.12 so we can prototype and discuss further.\n. @anonx you know what, after looking at this in more detail, I'm not sure there is any benefit over the auto generated reverse routing redirects (http://revel.github.io/manual/routing.html).\nI'm going to let this topic simmer until we get to it later. Very likely, we won't implement it, though I'd like to try some cases myself so I can get a feel for the workflow that @panjunjie may be experiencing.\n. I haven't used the cache yet myself, but I would be curious as to how the user object is getting stored in the cache. I'll try to take a look at this and see if it's being used incorrectly or if it's a bug.\n. @pedromorgan there's a formatting issue with the &'s: err := cache.Get(c.Session.Id(), &amp;products).\nAlso, we need to add var products *[]Product under \"Session usage\" (which should be uppercase \"Session Usage\"). Maybe we should change that from products to product to match the example above.\nWe could also change \"Session Usage\" to \"Key Points\" so that it's commenting on the \"Cache Example\".\n. ### TODO\n- [ ] emphasize need to use pointer to a pointer\n. Looks like it was added with 1.2 (http://golang.org/doc/go1.2#text_template) so I would say let's remove our version.\n. For reference, Revel's eq uses https://github.com/robfig/revel/blob/c36e7f7484e91108ff26152e3c3ad5bdf3229c8e/util.go#L134 and note that http://revel.github.io/manual/templates.html says eq is a simple a == b test.\nSo, to confirm, your issue is that Revel's eq works differently than the recent Go 1.2 eq template function, right?\n. @BillyTheKidO any feedback on the above?\n. @shaban thanks for the insight. Any chance you can look into any dependencies on your eq implementation and report your findings so we can make a decision on how to proceed?\n. Excellent. Thanks @shaban \n. @shaban it seems to me that we should leave Equal() in util.go and simply remove eq from TemplateFuncs. What do you think?\n@revel/core Thoughts?\n. Merged in #674 \n. @pedromorgan feel free to open a new issue to discuss the jobs enhancements you want :)\n. @jgrar It seems the issue is that we are expecting a IPv4 address and you have a IPv6 address (http://www.dslreports.com/faq/11053) Can you confirm that you are not using IPv4?\nIt seems the fix for this is to check for IPv4 OR IPv6 loopback address.\n. @jgrar thanks for the details. ~~This makes me more confident that checking for an IPv6 loopback address will fix the issue.~~\n. @drewwells there isn't any ticket for starting jobs from the jobs page. It's just a static, status listing.\n@verdverm what were you thinking when you mentioned that?\n1. I'm not certain of the value of restricting access to the jobs page. I agree with @pushrax that this should be up to the dever to properly configure in app.conf. That said, it is wise to have a safety net here in case they don't properly configure their app.\n2. Alternatively, we could only allow the status page if revel.DevMode is true, but I see value in being able to check it in production from a trusted IP.\n3. The core issue here is that @jgrar was unable to access the jobs status page from his local machine, because it was being proxied. The fix is to check proxied address like the remote address. This really has nothing to do with IPv6 it seems, though it would be nice to also check for IPv6 loopback address. I've updated this issue's title to reflect the latest understanding.\nhttp://play.golang.org/p/xgrjhoBz7A\ngo\nHeaders := map[string]string{\"X-Forwarded-For\": \"::1\"}\n// remoteAddress is the client's remote address (e.g. 127.0.0.1, 16.1.23.240, ::1, etc), either directly or via reverse proxy (e.g. nginx)\nremoteAddress := \"127.0.0.1\"\nif proxiedAddress, isProxied := Headers[\"X-Forwarded-For\"]; isProxied {\n    remoteAddress = proxiedAddress\n}\nif remoteAddress != \"::1\" && remoteAddress != \"127.0.0.1\" {\n    fmt.Println(\"Forbidden!\")\n    return\n}\nfmt.Println(\"Granted\")\n. Thanks for the contribution!\n. I believe @verdverm is correct. You can try increasing your file watch limits as mentioned on howeyc/fsnotify#89.\nClosing for now. Thanks!\n. Sorry to be picky, but can you please target the develop branch per our guidelines: https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\nThank you!\n. This is troubling. Looks like we only tested the happy path. Do you have any recommended regex that you've found reliable?\nI've filed this as a bug and scheduled it for v0.9. Thanks!\n. Thanks!\n. I agree, we should add application/json to compressableMimes.\nIs there any reason this would cause problems?\nI've scheduled it for v0.10.\n. #562 has added the needed line of code to get this to work. We'll release this in a few days.\n. Scheduled for v0.9. Thanks!\n. I think I understand what you are asking, but can you link to a reference example? Thanks!\n. Sorry, but you need to target the develop branch per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed Thanks!\n. Can you create a new pull request that targets the develop branch? Otherwise, I'll have to manually merge in this PR.\nI appreciate your help!\n. Merged in manually.\n. Genius! Scheduled for v0.9\n. Please target develop branch per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed Thanks!\n. We've recently added a similar feature in #413. Is that sufficient for your needs?\nAdding some ability to pass in custom build flags is not out of the question: https://github.com/robfig/revel/blob/master/harness/build.go#L74 but I would be cautious in regards to adding when its use case may be limited.\n. @revel/core We recently discussed how deep Revel goes into HTTP/S with the consensus that we want to avoid hiding the HTTP layer from developers. Would this PR be going against that principle?\nSee #549.\n. @pushrax no, but we need to in #549 \n. I'm going to reject this PR for now in favor of giving the control to the developer to implement this. We just need to finish #553.\n. Sounds good. I'd like to see what you come up with.\n. Looks good. Thanks. Scheduled for v0.9\n. Good point @robfig, but if it's a common task I'm sure we would implement a built-in solution @hugecannon. What's your use case for this feature? Also, could you RenderText(\"\")?\n. @hugecannon seems we could use c.Render() (https://github.com/robfig/revel/blob/master/controller.go#L98) and if a template file doesn't exist, then render an empty body. That's a theory anyway.\n. Closing in favor of #520. Thanks!\n. Looks good. Thanks.\n. Oh, I see. I'll close this then. Thanks.\n. What kind of support are we considering here? There are different levels of integration and complexity.\nWhat is your use case?\n. Thanks @denmaradi . Also note https://github.com/revel/revel/pull/263 where this was added for some additional notes on how it is used.\nI'll close this for now assuming that our current result method for JSONP is good enough and there are no specific comments for enhancements to JSONP support.\n. I've scheduled this for v0.10 instead of v0.9 because I want to make sure this works in a real world scenario. I do appreciate keeping the unit tests up to date, but I'd like to confirm that it works with real TLS certificates.\nCan you confirm this? Also, please target the develop branch in future PRs per our guidelines at https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\nThanks.\n. @mcheng89 good to hear. Thanks.\nIt does seem this PR would allow for separate subdomains. Bonus!\n. Sounds good. Can you create a pull request to target the develop branch per our guidelines at https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed so that I can get this added to the next release?\n. Please target the develop branch and create a feature branch on your fork per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\nThanks.\n. @daemonchen it's possible that your Windows install does not know how to open such files and therefore downloads them as generic binary files.\nClosing this issue as the PR has been merged.\n. Good catch. Thanks for contributing!\n. @verdverm This release has been delayed. I'll be moving all the open issues to the backlog wehre we can re-prioritize.\nI'll merge this PR into develop since you claim it addresses the issue. So @ottob will get this fix in master very soon for v0.9.\n. This is something worth discussing more soon. Labelled and put in backlog.\n. @anonx @pushrax this is related to #260 right?\n. #270 looks related\n. Please make sure to target the develop branch per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed .\n. @revel/core We need to fork this and continue it on the develop branch. This seems to be the direction we want to go to allow other template engines. Thoughts before we continue with it?\n. @pedromorgan after we get v0.10 released, we should get this moved to develop so we can start experimenting.\nI've assigned it to myself and scheduled it for v0.11!\n. I'm going out on a limb with this merge since I haven't tested this myself (due to lack of time), but your code looks well formed and thoroughly commented.\nPlease tell me you've tested that this code works properly.\n. You would need to marshal the struct into a string such as JSON and then store it in the session.\nIt seems that it would be nice if this was done automatically via reflection. Perhaps that's a future enhancement we can add.\n. @anonx that's a good point. Honestly, I haven't used the cache since I started maintaining Revel. I should do that so I'm able to better answer questions like these ;)\n@xpbliss I'm closing this for now. Thanks! Feel free to comment if you have additional input.\n. See RenderFile in http://robfig.github.io/revel/manual/results.html and https://github.com/robfig/revel/blob/00060899f7cee4fb9e54356b04d2f2a12707a35d/controller.go#L181\nIf that doesn't solve your issue, feel free to re-open it. Thanks!\n. To chime in on the discussion, we're not at v1.0 yet so I would not give so much weight to backwards compatibility yet.\nI realize there are Revel apps in production environments right now, but that's the risk you take with new languages and frameworks.\nThoughts?\n. If you can provide a sample of how to use this and a unit test, I'll include this with the delayed v0.9 release.\n. Should be fine, but we need to target the develop branch for all PRs. Please correct and we'll discuss further.\n. See #520 \n. D'oh! Wrong target branch.\n. I'd be willing to do this for the next release, but in the mean time you can just type in the #555 into the GH search box. Also, please target the develop branch per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed .\nThank you for this contribution!\n. @revel/core Thoughts? This looks good to me.\n. @pushrax I interpret your sail boat with a gust of wind to mean it's good to go and not stormy seas head. :dancer: \n. Alright, for bugs, I think we should target master so we can release a hotfix for v0.9.2. Do you agree?\nWe had a bug in the booking sample app, too. I released a hotfix as v0.9.1.\nWhat can we do in the future to catch these sort of bugs? I have a proposed list of steps to verify changes in each release that we can chat about this evening.\n. Good question @robfig \n@verdverm How did you catch this bug?\n. How is GoConvey related to runtime debugging? It definitely looks great for unit testing, but I don't see the relation.\nSide point: our testing suite is already pretty nice with browser output, but maybe we could enhance it further with some inspiration from GoConvey.\n. @mihaihuluta there is still no official guide to give you easy steps. Sorry.\n. Thanks for the helpful resources @cellis and @mihaihuluta :]\n. #294 \n. @pedromorgan we need a guide for it somewhere, eventually. Where were you thinking? The website or the wiki?\n. @pedromorgan that sounds like a good idea.\n. So revel version outputs \"Revel v0.9.0\"?\nShould we have different versions for the Revel command and the library?\n. #418 \n. This issue was mentioned on IRC last night, but I was unable to get more details from the person (as there was some error they were getting from jobrunner.go). This issue doesn't seem to be about an error; just housekeeping.\n. Ah, too bad we don't have Go package management :/ Thanks for posting the solution.\n. @wdreeveii a PR would be ideal. Also, steps to reproduce this bug are needed (and will soon be required once we update our contributing guidelines) so we can properly address the issue.\n@landr0id @pushrax I don't think the issue is if .git exists. I think it's that we current directory needs to be the repo root. To test this, we just need to try running revel run/build from a different directory than root.\n. Fixed with #544 \n. @lenw Can you give us some steps to reproduce? Is this happening on a particular route to a particular controller/action or does this happen when you run your app?\nIf your project ha a public repo, then that'd be great.\n. @lenw does this happen on just 1 URL or many?\n. @pushrax Got it. Thanks.\nSo if I follow the panic trace (for my benefit):\n1. https://github.com/revel/revel/blob/master/controller.go#L373\n2. https://github.com/revel/revel/blob/master/controller.go#L294\nit seems that elem is a zero value (https://github.com/revel/revel/blob/master/controller.go#L360). reflect.Elem() returns a zero value if its receiver is nil (http://golang.org/pkg/reflect/#Value.Elem). If t is nil then that must mean c is nil (https://github.com/revel/revel/blob/master/controller.go#L359 and http://golang.org/pkg/reflect/#TypeOf).\nSo @lenw, can you add fmt.Printf(\"%#v\", c) to https://github.com/revel/revel/blob/master/controller.go#L357 and share the output when the panic occurs?\nAlso, we need the definition of your App controller @lenw.\nAm I off base @pushrax?\n. @lenw Could you manually revert back to the v0.8 tag and see if it fixes the issue? If not, it may be related to your app code specifically.\n. @lenw That's great. Now we can begin narrowing down the possible causes. Start removing the embedded attributes from your App controller until the error goes away. Create a Test() method and route that returns just a string.\n. @landr0id @pushrax @verdverm @robfig We need to figure out a workflow for hotfixes. I think we want to have hotfix branch for PRs to target so we can still test that a fix works and does not introduce regression bugs. The develop branch isn't usable for this because it could have other changes, too. Thoughts?\n@wdreeveii I wouldn't worry about the old robfig imports for now. Like @pushrax mentioned in another issue, we haven't transitioned yet and we don't need to rush. I think it'd be fine to do them all at once.\nThat said, thanks for making this a PR.\nI like @landr0id idea about not changing the current directory and instead passing it as an argument; that way the application state doesn't change nor need to be restored back to the previous directory in the defer.\nAlso, I would not use pwd as the variable name because pwd is an abbreviation for \"print working directory\" (http://www.linfo.org/pwd.html). It would be more clear to use something like currentDirectory.\nThoughts?\n. @wdreeveii completely understandable.\nSo, if we're all in agreement, ether @wdreeveii can make the changes to this PR or we can create a new one.\nI'm fine with the lone import path commit; let's be reasonable and not disqualify this PR over 1 line of code that won't hurt functionality.\n. See #538 for final patch.\n. I'm fine with \"patch\" as that's part of semver and I like to be consistent with standards I adopt. Let's just rewire our brains to let \"patch\" mean quick fix @landr0id :)\n@pushrax Good call on the \"discuss\" label; I was going to add something similar, but just grabbed support for speed.\n@landr0id I agree on the GH issues vs mailing list.\nHow about a RC process for new releases to iron out wrinkles?\n. @jcvernaleo that seems to be the consensus. Thanks for adding more perspective to the discussion.\n. @shaban that's a great service! When I was brainstorming a backwards compatible Go package versioning system, I thought of doing just this. It seems someone else agreed. Very cool.\n@revel/core What do you guys think about implementing gopkg.in?\nhttp://godoc.org/gopkg.in/revel/v0.9.1/revel\n. @pushrax we have to weigh the pros and cons. Having some measure of version locking seems quite convenient to me.\nAs far as external services, github.com falls into that group and yet here we are. That said, I would like to look into who is behind gopkg.in to learn more about its future.\n. @pushrax I understand what you're saying with having to change the import paths. So I retract my statement; it would be a hassle for a library like Revel to constantly change import paths for each version.\nMy last concern for this discussion is if we should adopt a release candidate approach, but no one has commented on it, so I'll assume there is no perceived value in that workflow for now.\n. This is my fault more than @landr0id as I should have not merged it without tests.\n@fumiyas because this is a bug I'll merge it into master, but anything else should be targeted at the develop branch so we can test it and verify that it doesn't introduce other issues. Our contribution guidelines talk more about our current process.\nWe'll also be requiring bug PRs to target the new patch branch as well, but this is a simple typo that doesn't require any further testing (though we do need tests added).\nThanks for catching this bug!\n@pushrax We need a workflow for releasing bug fixes like this such as merging, testing and updating the version. After I merge this into master the version should be 0.9.1. Do you agree? I'd like to get this fix out ASAP, but tests are needed and I'm wondering if we should merge this into patch and then add the tests before we release to master. Thoughts?\n. TIL how to create a PR from a forked repository.\nNow we can add the automated tests and such before we release.\nI'm closing this PR so that we can focus on the new one. Thanks again @fumiyas !\n. Are there any other bugs needing fixing? This issue is kind of a big blunder and I'd like to see it corrected.\n. @landr0id any reason you targeted the develop branch in your new PR? I think the best way forward is to merge this PR into patch and then add the tests you created to patch.\nThoughts?\n. Steps to reproduce?\n. So, this isn't really a bug as much as it is enhancing the error reporting, right?\n. @revel/core we decided to look more into the panic stack trace to see what the request flow is and what is going on. @verdverm has volunteered to look into this.\n. Closing as #556 should fix this issue.\n. @revel/core Do we really want Revel handling this level of HTTP? We need to decide now how deep down the rabbit hole we're going to go.\nIf Revel doesn't offer these features, then a proxy like nginx could. We could support fcgi or some environment variable passing for things like HTTP host.\nThoughts?\nSee #549.\n. @mcheng89 Sorry to be critical of this PR when I wasn't with #500, but I want to make sure this is really going to add value to Revel for more than just a few developers.\nCan you give some sample code demonstrating how this feature would be used given a couple example domains? How would domains be specified in the app routes and to which controllers would it be routed?\nThanks.\n. Why is this closed @mcheng89 ?\n. Looks good, but we need to target patch not develop. See my comments on #533 \n. To clarify, what's the connection between watcher.Refresh() and \"on app start\"?\nHow would disabling the refresh be different than simply disabling watch in app.conf (https://github.com/revel/revel/blob/master/skeleton/conf/app.conf.template#L28)?\n. I think grunt js is just an automation tool so it may not have a built - in\nwatch concept.\nOn Mar 9, 2014 10:05 AM, \"Rob Figueiredo\" notifications@github.com wrote:\n\nMany of those tools have builtin ways to handle this. For example, the\nsass command line tool has a \"watch\" mode where it only recompiles on\nchange, and it will not recompile if the source file hasn't changed (so\neven if you run it every time on startup, it would not recompile your CSS\nevery time).\nI'm not familiar with grunt, but it would be quite a poor build tool if it\ndidn't allow you to use that sort of functionality...\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/540#issuecomment-37131913\n.\n. @verdverm How is that custom listener being used with Revel? Are you setting it as Revel's watcher in harness.go or similar?\n. Oh, thanks @anonx :)\n. I agree with the less strict email validation and would suggest we change the Email{} to BasicEmail{} so that it's clear that we're not going to great lengths to ensure full spec email formatting.\n\nI also like the idea of a MX/Host validator, but that's not urgent.\n. I think it should change though so it's obvious that it's a simple pattern matcher.\n. Just to be consistent with the changed helper method\n. @pushrax There could be advanced methods to validate an email such as by connecting to the destiantion host server and verifying that the email exists, etc.\n. :+1: \n. Good point. How often should we do that? Perhaps only when we release develop to master to we sync develop and master?\n. @shaban Agreed. I'll remove the template label.\n@landr0id So should we keep contributor ready even with the core team now active (to allow others to take on less urgent tasks)?\n. @anonx rofl yes we should remove mad-ideas. @pedromorgan can you add a wiki page with definitions for each of your suggested labels? Also, let's try to keep the labels serious. It's funny, but the focus shouldn't be our silly labels.\nGolang has some useful labels to consider as well: https://github.com/golang/go/issues\n. FYI, I changed mad-ideas to ambitious-ideas for now. I think these mean the same thing without any negative feeling.\nThe labels I'd like to see\n- effort level\n  - effort-minutes\n    Will take up to 60 minutes to implement.\n  - effort-hours\n  - effort-weeks\n    These should be broken up into smaller items, we should never accept issues this large; too much uncertainty/risk\n- priority level (http://en.wikipedia.org/wiki/MoSCoW_method)\n  - priority-could\n  - priority-should\n  - priority-must\n  - priority-immediate\n- accepted status\n  - accepted\n  - ~~accepted for contribution\n    This may be more appropriate for low priority issues that the core team won't accept soon. Same meaning, at least to me, as contributor ready.~~\n  - declined\n- needs RFC\n  If so, someone must take ownership of drafting the RFC. This should replace the current feature and enhancement labels. I feel like bugs should have their own RFC format to include reproduction steps, expect outcome vs actual, tested versions, etc. support labels should not be needed anymore if we force everyone to use stackoverflow.com.\n- discuss status\n  - waiting for reply\n  - more details needed\n    Not sure if these are needed or not. It seems any additional detail should be in an RFC. Thoughts?\n- topic categories\n  - #controller\n  - #log\n  - #template\n  - #modules\n  - #docs\n  - etc, more ideas wanted.\n. @pedromorgan no worries, all your effort has been valuable. Keep it up!\nAs far as overlapping labels, that's fine. I expect to see a single issue with multiple tags: bug priority-immediate controller template effort-minutes. Agreed?\n. I've added the labels and decided to not add accepted for contribution and instead cover that with both accepted and contributor ready.\nNow we just need to start using the new labels. In order to decide priority, effort and accepted/declined, we need to decide to meet each week to review RFCs and bug reports. How does Sunday sound? We could limit the weekly meeting to 30 minutes or less.\n. I prepended all topic category labels with a hash # to signify its use as a tag. I don't know if all of our topic tags are needed, but we can prune them as we maintain Revel.\nI also color coded and grouped the new labels. It's all looking much more organized now. Hurray!\n. @pedromorgan I normally do, but I'll make sure I do more often.\n. @verdverm I would have normally agreed with you as Rails does similar, but environment variables seem a better approach because we already support it.\nIf people want to have those values in files, they can create a shell script that sets the environment variables. I did just that for DB credentials and it works great.\n. @verdverm I used bash scripts that I run once on the server. Why would you run it in config?\n. @verdverm Got it. Thought you were insisting it be done with the config package instead of via environment variables.\nAre there any actionable items with this issue now that we've discussed it a bit?\n. Great. What were you planning on using app.secret for?\n. Answered my own question. app.secret already exists and is used. I overlooked that small fact.\nThanks for the conversation.\n. Sounds good. Nice use case.\nWe might need to change the generated routes package since we could have method name collisions if we had a Generate controller for instance.\nHow would you name the routes? Would we add a parameter to the routes file? Or would we add code to revel.OnAppStart()?\nWhat do you guys t hink about outting the optional route name after the method like\n GET(login)    /login                 App.Login              # A simple, named path?\nPS - http://revel.github.io/manual/routing.html we still need to document the nested module routing that you added in #422.\n. I say named routes is a good idea in addition to the generated routes package for reverse routing.\nI like the format:\nGET /app/login App.Login app_login\n- method (GET, POST, WS, ...)\n- URI pattern\n- controller action\n- route name (no spaces, no quotes, optional)\nIf we're all in agreement, I say we create a PR and release it in v0.11.\n. We're moving toward consensus on a YAML-based router and it would be better t o delay this feature until we have that at which point we could easily add a name attribute.\n. Good catch! Did you actually run into this issue or just notice it in the code?\nIs this a critical fix that should be released as a patch?\nWhat about this would you test? I'm not sure tests would have caught this issue since it's a user agent specific scenario.\n. Consider it done. We'll be removing support for HTTPS from Revel in favor of the developer doing it via #553 and the new main.go.\nTodo:\n- [ ] get PR to remove all HTTPS from Revel\n. https://github.com/revel/revel/issues/918#issuecomment-89431129 @jniltinho wants to keep HTTPS support.\n. Is the entropy of the session id relevant with session signing in effect?\nOn Mar 13, 2014 12:11 PM, \"Levi Gross\" notifications@github.com wrote:\n\nYour welcome!\nCurrently sessions are created with about 8 random bytes (64 bits of\nentropy) plus the current time (which is predictable). This patch gives the\nsession identifiers at least 128 bits of entropy.\nThe SHA256 hash is not needed. If you agree with the above mentioned\ncomment, I will remove it. If not, just reject the PR :)\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/pull/552#issuecomment-37574416\n.\n. @levigross either way, I like this change. It doesn't hurt anything and it only makes it more secure. It may be overkill, but in this case I like it.\n\nThanks for the contribution!\n. @pushrax I don't see any reason to remove the sha256. I agree it isn't needed (as far as we can tell), but it certainly doesn't negatively affect usability of Revel nor its performance.\nIf anything, we can clean up the variable naming of random_bytes, but, again, why remove teh sha256?\n@robfig It doesn't especially since we already sign our cookies. If we didn't have cookie signing, then it would be slightly easier for an attacker to guess the session id and possibly hijack it from a remote user agent. Correct me if I'm wrong here, but I believe that would be the case.\n. @pushrax Ah, when you said surface area did you mean attack vectors? If so, then I can see your point and would submit to your suggestion of removing the sha256 in favor of a simpler implementation.\n. @robfig @pushrax @anonx Using the session ID as an access token seems the typical approach for larger web apps since the cookie is limited in capacity. The way to avoid session hijacking is to reauthenticate at important steps and/or monitor additional user agent data such as the remote IP using the session ID. HTTPS should also eliminate most sniffing attempts.\nAll that sound right?\nEDIT: So we're done with this PR. @pushrax has already fixed the bumpy case formatting and remove sha256.\n. @pushrax  Kick chick? That's the only relevant reference I could Google.\n@bobobo1618 Revel is the only worthwhile Go project out there. All other projects should integrate with us. Period. Also, Go's runtime should bend to do our will. Chuck Norris style. That is all.\nNow, that said, are you saying that you would like to create your own main.go file and not have Revel generate it?\nI kind of like that idea, because it makes it more clear where the app entry point is and gives more control to the developer. The only drawback to that is having to manually register all the controllers and modules, but we could accomplish that still by defining some other generated code file such as register.go that registers all the controllers when someone (e.g. the main.go code) calls revel.register() or something similar.\nI'm interested in hearing more.\n. Everything sounds good to me. I think we can get this in the next release given its simplicity. I'll take ownership of it.\nThanks @bobobo1618! I'll let everyone know when the PR is ready.\n. I'm working on the implementation now and I've combined some of the generated code to allow for a static main.go, but I'm getting caught up on the point of exposing the http.Handler in main.go.\nCan't you access the handler via revel.Server.Handler? revel.Init() does not return anything and I don't think it should since it simply sets up the state of Revel before revel.Run() is called (in server.go where the http.Server is initialized).\nSome feedback and direction on this would be helpful. :)\n. @mcheng89 Ya I'm trying to shuffle around the code so that all of the setup code is still executed.\n. @iamjem very nice write up!\n@abrander could you explain some of your points? For instance, I'm not sure why you wouldn't bind to an HTTP port or what the benefit of a privilege drop is (perhaps for daemonizing Revel?).\nI wanted to give a quick progress update. I've tried a couple different ways to expose the HTTP handler, but I've run into some challenges having to do with generated code and code file organization. I should still be able to accomplish the task, I'm just trying to do it in a clean way. More to come soon (e.g. a PR).\n. 29 days later...oy. Sorry for the delay. I've been busy/distracted. I'll be spending some time in the next few days getting back into flow on this. Gotta catch up on my notifications :]\n. JSON log output instead of plain text? That seems a bit verbose, doesn't it?\nOverall, I think a logging interface would be a good enhancement to Revel, but would it allow for custom logs or just common info, debug, panic, etc?\nIs there a potential way to introduce a logger interface that could be used as an adapter to something like log4go?\n. @pushrax can we get a logger interface ready for the v0.10 release?\n. @verdverm util.go would be a great place to put such a symlink aware file path walker. Any progress on this?\n. @verdverm I'll be online tonight at 7pm PDT (maybe a few minutes earlier even), can you be on so we can test this and merge it?\n. :+1: Looks good on the surface. Have you tested this yet?\n. Correct me if I'm off, but the relationship between the app and the harness is that the harness uses os/exec to run the Revel app binary and wait for it to output a trigger string (\"Listening\") indicating it's accepting connections (https://github.com/revel/revel/blob/master/harness/app.go#L107). That definitely seems hacky (as noted in the func comment).\nSo, to confirm, the issue with this PR is that you are no longer writing out to stdout since it's going to the INFO logger which means the harness will never think the app is ready to accept requests.\nSo, we need to find a logger-independent way for the harness process to receive notifications from the app process, right?\nWhat about having a temporary file created in the app root the indicates that the app's server is accepting requests? Something like accepting.pid with the process id as the content (thought its existence is enough for this use case). This seems more efficient that having a hidden, local-only heartbeat route, though that's an option.\nWe could also consider named pipes (http://golang.org/pkg/os/#Pipe), but it seems that the use case for this is only on app start and therefore may not justify something more elaborate. However, named pipes may allow us to perform more intelligent/graceful app shutdowns if we issued notifications over the pipe to wait for all active requests to complete. To that extent, the rpc package may also be an option.\nThoughts?\n. @verdverm what's the status of this PR?\n. @WinWiny I'm closing this PR assuming that #567 addresses this issue more directly as mentioned by @pushrax.\nThank you for contributing and feel free to discuss further if we missed something that this PR covers!\n. :+1: \n. Using a latest aka v0 version in the import path would defeat the purpose of version locking, wouldn't it? The point is to create a dependency on a specific version, right?\n. It seems for now we'll have to continue without version locking, but we're very interested in finding an elegant and effective solution.\n. I'd like to dig into this in the next day or so, too, but I wanted to take a moment to high five @klauspost on the excellent issue reporting. Clear description of the issues along with steps to reproduce not to mention environment details (OS and versions, etc) and sample output.\nThis is a model for what every issue reported on Revel should be like. Great work and thanks for taking the time to contribute to the community!\n. @klauspost @pushrax thanks for the follow up and PR.\n. Are you asking about Go or Revel or what? Revel doesn't deal with these specifics and I don't think Go does either.\nYou may find log4go useful though: https://code.google.com/p/log4go/\n. More specifically:\n- https://github.com/revel/revel/blob/01b6c0017a90e4ab066ca7c0640ac850d774929c/harness/build.go#L29\n- https://github.com/revel/revel/blob/5bf2fc12adff02657b13b86f4842c596564b3591/harness/reflect.go#L84\nLearn more at http://golang.org/pkg/go/ast/\n. :+1: \n. :+1: I do like the consistency of it, though I am slightly concerned with polluting the controller interface with these sort of convenience methods. Thoughts?\nPS - in order to \"retarget\" this PR, you need to create a new PR that targets the develop branch per our contributing guidelines. Thanks!\n. How's it going @ClanStyles?\n. This is an interesting concept to add into Revel. I'm not fully convinced it's the \"right choice\", but I'd like to look into this a little more.\nHas this been tested successfully?\nI've scheduled it for the backlog so that @revel/core can discuss it further. Thanks for starting this PR @tpjg !\n. Scheduled for consideration in v0.11\n. @joecohens thanks for this PR. Could you create a new PR that targets the develop branch per our contributing guidelines (https://github.com/revel/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed)?\n. https://github.com/revel/revel/blob/master/session.go#L155\nhttps://github.com/revel/revel/blob/master/session.go#L147\nSo, how about this:\nif len(c.Session) > 0 {\n    c.SetCookie(c.Session.cookie())\n}\n. @wdreeveii https://travis-ci.org/revel/revel/builds/22881717#L358\n. What OS are you running your app on? Also, review the manual on flashing values: http://revel.github.io/manual/sessionflash.html\n. Thanks for the solution @daemonfire300 !\n. @pushrax you mean:\nif (f.Flash() == val || f.Flash() == \"\") && f.Value() == val {\n@wdreeveii let's wrap this up and merge it!\n. @pushrax you mean if _method has an empty string as its value? If so, that seems like a good addition before we merge this PR.\n@joecohens Can we make the remaining tweaks so we can merge this in?\n. 404 sounds good and I think this filter is ALMOST ready for some real world testing. My last concern is why it is located in router.go? I feel it would be better in its own httpmethodoverride.go file. Perhaps we should add a filters folder unless it does make sense to others to put it in the router.go.\nPersuade me.\n. @joecohens Go for it :+1: (for reference: http://httpstatus.es/405)\n. :+1: \n. :+1:  thanks @klauspost \n. :+1: \n. :+1: Looks good to me, I just had some questions.\n. :+1: \n. I've scheduled this for consideration in v0.11. We'll see what we can do about this as it seems like a reasonable use case. Thanks for posting here @jsegura \n. If someone else can assist by contributing code it could be, but we have quite a large release already scheduled that will likely be split into the next release.\nPersonally, I don't see this as a critical issue. That said, you're invited to garner support for this feature by discussing here and recruiting others to your cause. I'll do my best to support you.\nAfter reviewing v0.11's release plan, it seems reasonable that we could release a solution to this issue since we only have a couple bugs and high priority features.\n. @anonx thanks for mentioning that. First I've seen it.\nIt seems go generate is intended for including content into the binary via byte slices and such. We need to preserve the file path structure of our assets e.g. /assets/images/test.png and go generate doesn't seem to do that by default. Something to follow though.\n. @acrisci just experiment. I haven't dived deep enough into how the revel package command works to give any additional details currently. There are other higher priority items we're focused on.\nIf you could add more details to a possible solution that'd be great.\nHere's a head start:\n```\n$ revel package\n~\n~ revel! http://revel.github.io\n~\nPackage the Revel web application named by the given import path.\nThis allows it to be deployed and run on a machine that lacks a Go installation.\nFor example:\nrevel package github.com/revel/revel/samples/chat\n\n```\nThen when you run revel package github.com/revel/revel/samples/chat a chat.tar.gz is generated which includes all needed source code (Revel and app code) as well as a shell script/batch script to execute the included app binary.\nPersonally, I'd liek to figure out how remove the need for the source code, which currently seems to be necessary for certain Revel features. Like I said, I haven't had time to dig in much further to identify the source code dependencies, but you could...\nTODO\n\n[ ] Identify what code requires the presence of the src folder in the product of revel package\n. @acrisci I have confirmed your findings. Also, we need to note that certain modules, such as testrunner, also must have their source accessible if they make use of views, templates, etc. You can see this in the chat app if you change the runMode flag in run.sh to dev. This brings up another question, can we get rid of the MS batch and *nix shell scripts by using some sane defaults (e.g. the current directory)?\n\ngo-bindata is a good find; at least we don't have to reinvent the wheel. The only thing I want to avoid is packaging assets like images and javascript in this fashion since it could greatly enlarge the the memory footprint of a Revel app at runtime. So we would still require those kinds of assets, as found in the Revel app's public folder, to be in the same directory as the app binary. Though, if the app doesn't serve static content it would be possible to have only the app binary. As far as I'm concerned, that's a win :) Besides, they could setup nginx or some other CDN to server their static assets.\nBy the way, we already check if the app is running from an exported package based on a safe assumption.\nAs far as implementing asset embedding, we could just cache all file assets in memory when the Revel app starts normally and when the app is packaged into a single binary we can have the embedded code injected into the memory cache. So basically, we the app won't care how it got there, as long as it's there. Does that make sense?\n. I was thinking we could create a searchPath flag that can default to the current working directory of the app binary or it could be set at runtime from the command line. It would be the base path where the file assets should be stored; mainly the public/static assets as used by the Static module. The views/templates, app/mime config and routes could be compiled into the binary.\n. @acrisci I just forked robfig/config to revel/config recently. We can use that URL soon. You can always use your own fork in the mean time and then submit a PR to revel/config?\nPS - I just enabled issues on revel/config.\n. @pedromorgan no, it's not that easy. There are some code dependencies in Revel with the source for controllers and routes. I am interested in single binary builds still though, but it may result in a major shift in Revel's design under the hood.\n. @pushrax a configurable option would be nice. I could see this being acceptable in dev mode, but not production.\n. Sounds good @k0kubun. We may add it ourselves for the next release if you aren't able to by then, so please keep us up to date on your progress.\n. @k0kubun instead of rebuild.eager can we do watcher.eager? No need to add new root config attributes.\nAlso, is there a better word than eager? Seems odd. :)\n. @k0kubun or watcher.mode = \"normal|eager\"?\n. http://godoc.org/gopkg.in/fsnotify.v1#Watcher\nWatcher has no Event or Error. Why did you change those lines? Perhaps that was the old version?\n\ngopkg.in/fsnotify.v1\ngithub.com/revel/revel\ngithub.com/revel/revel\n_./watcher.go:149: watcher.Event undefined (type fsnotify.Watcher has no field or method Event)\n./watcher.go:156: watcher.Error undefined (type fsnotify.Watcher has no field or method Error)_\n./watcher.go:176: watcher.Event undefined (type fsnotify.Watcher has no field or method Event)\n./watcher.go:181: watcher.Error undefined (type fsnotify.Watcher has no field or method Error)\n./watcher.go:212: undefined: fsnotify.FileEvent\n. TravisCI is passing. Do I have your green light to merge?\n. @diatmpravin let's clean this up per @pushrax's comments and we can include it in v0.11\n. :+1: Scheduled for consideration in v0.11\n. #397 \n. @ludmiloff Sorry to bother, but we need to target the develop branch. Could you create a new PR?\n. Closing in favor of retargeted #772. To be continued...\n. @birkirb retargeting was done because the PR was targeted at the wrong branch; master instead of develop.\n\nUsing goagain is problematic because it doesn't support Windows and we're trying to have consistent features across platforms for Revel.\n. @birkirb #690 shows the conversation in detail. We can make this feature non-Windows only or we can implement some file based messaging with fsnotify (e.g. during runtime, Revel can create a single file that can hold structured content to message to and from observing processes which would implement the sort of functionality that we need cross-platform to allow processes to tell each other when they were done shutting down and such).\nI prefer the latter as it would allow the feature to exist on all supported platforms (linux, mac, windows).\nThese features are planned in our Roadmap. \n. In order to fix this, you nee to include the static module in your added app config section or remove the static route from your routes file.\nThere are no actionable items here for us to improve, just a misconfiguration. I'll close this for now assuming all is well.\nThank you for contributing!\n. See #590 for original PR and additional context.\n. :+1: \n. @pushrax when we merge, can we make sure to mark the PR in the relevant release for easy history?\n. :+1: \n. Why is this in a separate PR? What's wrong with #592?\n. @landr0id looks like it's testing expectations for the method above it. No comments and vague method naming don't help here, sorry :/\nCould you tell me a bit about go vet? I tried finding detailed info from the command line a couple days ago and it didn't tell me very much.\nThanks.\n. \"Awkward chaining.\"\n- I think this is a good idea. I don't like how each filter is responsible for calling the next directly. I agree adding some kind of success callback would be good.\n\"Filters are only called once, from top down.\"\n- What do you mean about \"bottom to top\" filters? How would that work exactly? As it is now, every request starts at the top of the filter list and works its way down to form the final response content aka result. How would it work in reverse?\n  - If you wanted to modify the outgoing response (e.g. for \"security\") then you could add a filter after the ActionInvoker, right?\n\"Filters get called, even if a serious error occurs in an earlier filter.\"\n- How would returning a Result immediately work? What is the use case for that?\n- Correct me if I'm wrong, but if a panic occurs, execution will stop immediately and call the deferred panic filter.\n\"No good way to modify outgoing responses.\"\n- See above.\n. Wanted to make a relevant note here that Revel Filters serve as our approach to middleware that allow 3rd party developers to extend Revel's request pipeline. Some have incorrectly interpreted Interceptors as the middleware. Middleware in general is somewhat of a vague term, but I like the description given on this stackoverflow thread.\nUltimately, this confusion will be eliminated once we remove Interceptors in favor of per-controller methods as noted in #420.\nAlso worth mentioning is our effort to expose the Revel HTTP handler in #648. This should allow further middleware hooking opportunities, though I am (still) not 100% sure this is the right thing to do as it adds additional code for the app developer to chew on.\n. @pedromorgan this is scheduled in the Revel Roadmap since we want to enhance the interface to Filters. I'm opening this back up.\n. @iamjem this needs an RFC in revel/rfc. Could you take ownership and transcribe what we've discussed here into the RFC format?\n. @xoen you bring up some interesting ideas. Unless @iamjem has time before me, I'll be creating an RFC in the revel/rfc repo to solidify the changes we are discussing.\nStay tuned.\n. @landr0id didn't we fix the missing git repo issue?\n@sxmad are you getting this error from a fresh install of Revel? Also, do you have a proxying web server in front of Revel (e.g. nginx)? Can you paste the response headers for http://localhost:9000/public/js/jquery-1.9.1.min.js?\n. I assume this is no longer an issue. Reopen if needed.\n. @mcspring any reason this PR also affects mailer?\nI've scheduled this for possible inclusion in v0.11. Thanks.\n. @verdverm I'd be satisfied to release this with just Go template support. The first and most important step is introducing the template rendering indirection so we can add support for more parsing engines in the near future.\n. #506 \n. I'm really interested in this PR, but I don't think v0.11 is the right time. Rescheduled.\n. There seem to be some conflicts with this. When was the last time you pulled develop's changes into your repo?\n. Ditto @klauspost Your contributions are very much appreciated!\n. This is a great first stab :) @revel/core any input?\nThanks for the tests/examples, too. That makes things a lot easier! As soon as we push out v0.10 we cna look into this more closely.\n. @landr0id @pushrax thanks for bring that up and the issue link, too. I knew UUID was a recent conversation, but couldn't recall where we discussed it. I think we all agree that this change is needed.\n. I want to get this merged ASAP. Mad rush to start confirming v0.11's PR's. Are we good to merge this into develop?\n. # TODO\n- [ ] remove sha1/salt in favor of crypt/rand (this seems like a negligible benefit)\n- [ ] support per page tokens (which could be a later enhancement)\n- [ ] Check and ignore request with origin header\n@iamjem when can you get this done? Thanks!\n. @iamjem can we get this done in a day or so? If not, I'll merge this and then finish up the TODOs as noted above.\nThanks for your help so far!\n. @iamjem we could do something crazy like add a meta attribute to the Controller. Maybe something like:\ngo\ntype App struct {\n  *revel.Controller\n  Options map[string]bool\n}\nAnd once we have a Before() method on controllers, you could set c.Options[\"CSRF\"] = false.\nHow crazy of an idea is that?\n. Actually, it would be better if the Options map was included in the revel.Controller struct.\n. @iamjem your interim solution sounds reasonable.\n. @anonx Uniform Resource Name (had to Google that). Either way, using the controller action may be a cleaner/easier solution, but what if an action is targeted by multiple routes? Probably not common enough to care, but curious enough to ask.\n. @anonx @iamjem I suppose we could just suggest the best practice of not using the same action for different routes. It does seem to be a rare edge case.\n@iamjem can you add the csrf.MarkExempt() method to use the controller action? Perhaps we could even abstract the func getRedirectUrl(item interface{}) (string, error) functionality into a separate function so that it and the new csrf method can accept either a string route URL or a controller action.\n. @anonx @iamjem I'm on IRC, can we chat really fast?\n. :+1: Can't wait tp get this released. Much anticopated :)\n. @iamjem Can we merge this in the next day or so?\n. @iamjem last time we chatted you said you had some buttoning up to do for this PR. Is it ready to be merged?\n. @iamjem Great! I'll do a final review and test tonight.\n. I'll merge this and then add your usage instructions as comments to the filter. Thanks @iamjem!\n. Can you explain what this is doing exactly? What is golib?\n. This seems like a nice optimization. @pushrax you good with releasing this with v0.10?\n. Overall, I'd say this is ready to be merged. Any objections @revel/core ? Looks solid.\n. @klauspost I believe you can rebase your current branch and then create a new PR. @pushrax am I right?\n. Merged with #669 \n. :+1: I've marked this for v0.11 so we can get v0.10 released first. If @revel/core approves of this PR, we may release it with v0.10. Thanks @thereallisa \n. @landr0id is this ready for release?\n. Any idea what the deal is with Travis CI's \"go get code.google.com/p/goauth2/oauth\" error? I was able to go get it. PS- I'm on IRC right now.\n. @pushrax do you think we CAN kill the sleep steps? I don't know if we can get around them due to how Travis does builds. Any ideas?\n. Perhaps we should open a new issue about it to investigate a solution?\n. @robfig do you have any comments as to the purpose of the 30 second sleeps?\n. We should be able to remove these sleep's if we can merge #593, right?\n. ## TODO\n- [ ] Setup a cross-platform method to send signals to processes (aka file based PID oriented messaging)\n. Thanks @ianonavy and welcome! Glad to have you :)\n@revel/core any thoughts?\n. Yes, proxying/exposing the needed functionality would be a good solution.\nI don't think the currently exposed interface would perceivably change. The restructuring would be only internal. Is there something I a may be overlooking? Perhaps the only way to be 100% certain is to give it a go.\n. Checkout the revised roadmap and specifically the \"Create subpackages\" list item. Does everyone agree that this list is reasonable and complete? Are there any other Revel components that should be made into sub-packages?\n. @NitroKKX when I say \"subpackage\" I mean exactly what you are thinking of: a subfolder inside the Revel core package that is then imported by the top level Revel code. It's a way to organize Go code since in Go each folder must be its own package.\nTo start, these subpackages will be internal only.\n. @anonx that's a possible package, but it seems it might be better as a more specific set of util packages instead of some catch all package. What do you think?\n. @NitroKKX Good point about moving the watcher to cmd. As for the coupling of router and server, I'll have to look closer to see what can be done, but separation of concerns and modularity are the high level goals. We want to have common interfaces that must be present without knowledge of implementation details such as the router being our current custom DSL format or YAML or whatever.\n. @anonx isn't Params also related to binding? Perhaps we should combine it into the binding sub-package?\n. @pedromorgan see the Roadmap for v0.12 and specifically the \"Create sub-packages\" checkbox.\nI would like to create a few more internal packages, but @anonx brings up some good points that I haven't thought through fully.\n@anonx my high level goal is to have a clear separation of concerns. I'd like to do this without affecting the exported interface that Revel devers see. I want it to be a purely internal change. I will admit that sub-packages may not be the correct solution for each of the items listed above and I am ready to find more reasonable solutions if we can think of them.\nAs far as criteria for creating a sub-package, I'd say if a segment of code is independently functional and complex enough (say ~300 lines of code or more) then we should seriously consider its re-organization. The criteria is somewhat subjective though.\nPS - I am inclined to split v0.12 into 2 releases as it's too large currently. It's more important that we keep consistent momentum than trying to release large improvements. Agreed?\n. @anonx it just struck me that we may not be understanding sub-packages the same way. Not all that I've suggested on the v0.12 Roadmap should be external packages. Internal, independently testable packages are more appropriate than external for most, if not all, of the remaining items. Agreed?\n. @anonx to your last point, the value I see is that it provides a place to put community driven modules and samples and alleviates the clutter in the core library. It does aggravate the package management issue aka version dependency, but that's a good thing; we need to decide a solution for that ASAP.\nIn regards to splitting the release, any good ideas on a release theme to put on the Roadmap?\nLastly, I didn't expect a dever to have to import any of the internal sub-packages, but maybe that was an oversight on my part. The session package has more than just a filter; it has/needs an interface to allow other backend drivers i.e. Redis, Files, In-memory etc. We could put the revel.SessionFilter in a filters sub-package and simply have it import a subsequent session package that contains the interface and other backend drivers. That way the revel package still owns the filter interface implementations and we can further modularize independent code i.e. sessions, routing, flash panic/error handling. Agreed?\nEither way, it would be productive if we could chat directly for 30 minutes to outline RFCs for each of the remaining code re-organization efforts aka sub-packages.\n. @NitroKKX I've chatted with @anonx and we decided it's best to keep watcher in the revel repo to ensure watcher functionality when not using the revel command.\nHere is the outcome of our chat as far as new sub-packages:\n- sub-package naming convention vs Revel API exported attributes\n  - testing\n  - binding\n    - decided: combine binder and params into 1 package\n  - routing\n    - decided: move router.go\n  - decided: no server\n  - validation\n    - decided: go ahead and move it to subpack\n    - decided: Validation to validation.Context\n  - watcher\n    - decided: Watcher to watcher.Notifier\n  - session\n    - decided: session.Session to session.Values\n    - decided: SessionFilter to session.Filter\n    - merge flash.go to session i.e. FlashFitler with session.Filter\n  - controller\n    - decided: Controller to controller.Context and controller.NewContext\n    - decided: pass in config.Context instance to NewController\n  - filter\n    - decided: remove initial var Filters values and require app/init.go to set them or panic\n    - decided: Filter to filter.Type\n    - decided: Filters to filter.Stack\n  - config for app config...needs eventual abstraction for backend drivers\n    - decided: MergedConfig to config.Context\n    - decided: NewEmptyConfig to config.NewContext\n    - decided: LoadConfig to config.LoadContext\n    - need a revel/cmd issue\n  - should make sub-packages more independent of Revel in the future\n. After trying to combine params and binder into binding I've decided they are separate concerns and should be packaged separately.\nbinder's input is a string and its output is a Go variable. I'm wondering if binder is the most appropriate name for this. It seems pack and unpack makes more sense than bind and unbind. It's main purpose is the conversion of strings to and from variables, right? In my experience, binding has to do with event processing more than data conversion. Thoughts?\nSo, it seems we'll need a params sub-package after all @anonx. It's input is a net/http Request and its output is a key/value list of variables. I can't think of a better name for the package or any sort of *ing equivalent. I'm open to ideas. Same goes for binder, but I don't mind keeping binding.\n. @notzippy that makes sense. What about params?\nAny input @pushrax @anonx ?\n. @anonx we can consider the use of dependency injection for challenges like this, but in this case, I don't think we even need the logger. It seems the better solution is to return errors where applicable instead of logging the errors directly. Revel can do what it wants with the errors. Agreed?\n@notzippy the new logger interface is planned for v0.15. It's a need, but not as important as other items.\n. @anonx I'm almost ready to push the PR for review. I have one last Params dependency in binding to solve and then I can show you my progress.\n. #872\n. Sounds good. We just need to make it a goal to keep it active. Try not to let new posts go unanswered for more than a day.\n. Good start. In our next release we can ask Revelers to share their projects with the rest of the community :) Thanks @landr0id \n. @richtr When we add to thw wiki I'll make sure to add that link. So far we're just collecting links here :]\n. Very nice @zzdboy @purohit :)\n. https://commands.com/ as mentioned at https://groups.google.com/forum/#!topic/revel-framework/7SVSKDPvK34\n. Added wiki page: https://github.com/revel/revel/wiki/Apps-in-the-Wild\n. @dbriemann added :)\n. Added murphy.rs @goors \n. nice find @alkchr \n. @codegangsta I assume that was your choice? How do you feel it compares to Youtube? Any highlights? Thanks.\n. I've added https://github.com/revel/revel/wiki/Screencasts to start solidifying the list of topics and order.\nThis is complimentary to #748 also.\n. Fixed by #621. Closing. Thanks guys!\n. This is an interesting topic, but I really like the simplicity of our current format. I'd rather focus on enhancing the current routing implementation through benchmarks.\nI've marked this as a backlog item for further discussion.\n. @naoina thanks for adding Revel! I was just reading those benchmarks yesterday and wanting to measure our own metrics. Now we have something to aim for! @verdverm\n@Azer- your routes.toml looks kind of scary compared to what we have now.\n@pushrax agreed, radix trees seem the way to go (http://en.wikipedia.org/wiki/Trie)\n. @Azer- your routing.yml text above looks like a mix of app.conf and routes. Can you explain your thoughts?\n@landaire  I want to see the following converted to YAML.\n```\nRoutes\n# This file defines all application routes (Higher priority routes first)\n # ~~~~\nmodule:testrunner\nGET     /                                       App.Index\n# Ignore favicon requests\n GET     /favicon.ico                            404\n# Map static resources from the /app/public folder to the /public path\n GET     /public/*filepath                       Static.Serve(\"public\")\n# Catch all\n *       /:controller/:action                    :controller.:action\n ~                                                                                                                                                                                                                \n ~                                                                               \n```\n. @pushrax I don't think under the hood is relevant, as long as it works consistently and is easy to use for developers. That said, I'm all for simplicity.\nSetting up routes in Go is an option, but where would it go in the app?\n. @landaire did you ever get any benchmarks on the YAML parser?\nThinking more about this topic and going through other PRs, I think adopting YAML for the routes and app.conf is a good idea. Consistency and flexibility. My assumption is that the performance of YAML is comparable to our current approach, but I'd like to confirm this.\n. @fuzzthink I can related to the draw of the routes being simple. To me, they're very similar to what you would see in a server side access log.\nThat said, it's somewhat limited, but going with a Go based approach as @pushrax suggested would address the current parsing issues.\nIdeally, we'll be able to abstract the route parsing (as well as config parsing) so that people can choose the format they prefer (i.e. YAML or our format or some other).\n. Sounds great @imadha! I've labelled and targeted for v0.11. Keep us up to date on your progress and any discussion points!\n. The difference between the 2 approaches, as I see it, is that 1 assumes /assets/ and 2 makes it configurable. I'd like the option to be configurable.\nI think a good starting point is have a package that accepts a list of file paths as input and then provides compiled file paths as output, perhaps keyed in a map by asset type (e.g. css, js).\n. @logorrhea your help is highly appreciated and warmly welcome. I don't think there has been any progress on an implementation. We could chat about this on IRC this weekend if you'd like.\n. I'm unavailable this weekend, but I can chat in the evenings. I'm GMT-7/PDT.\n. I feel like we should write a unit test to cover this issue. @revel/core agreed?\n. @ianonavy could you add a test to router_test.go that covers this trailing space. I believe all you need to do is add a case to the routeTestCases map.\nOnce you do this we can release it for v0.10 :]\n. @landr0id I think that convention is useful, but maybe we can abstract that away and modularize that into whatever is responsible for generating the view's result. For example, Go templates, HAML templates, XYZ templates.\n. @pedromorgan this issue also has the idea of a View object instance that is related to template handling. It is better than Render because Revel uses MVC and the \"V\" isn't used in Revel currently.\n. If you want to render a static HTML file, you should look at @landr0id's first link and search for Static.Serve(\"public\") on that page. The Static module will allow you to make certain paths render static files.\n. This looks like a good change, thanks!\nOnly problem is we need your PR to target the develop branch per our contribution guidelines (https://github.com/revel/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed). Then we can accept and release this PR.\n. We need to target this PR to the develop branch per https://github.com/revel/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed before we can merge and release it.\n. We could learn from http://liftweb.net/ when it comes to highlighting how Revel addresses security and other common web framework concerns as well.\n. @anonx did you mean SDLC instead of SDLF?\nAlso, how might we go about setting up a security kbase? Should we use github's wiki or perhaps a dedicated repo with CVE-like files?\nObjective metrics sounds like a great idea.\nSeparating is definitely going to have a huge positive impact for security and other practical areas in Revel's development.\nThanks for continuing this important conversation.\n. What exactly can we learn from other projects?\n. @anonx I think I was asking for a specific solution. Do you agree that a revel/cve repo be created for this? @pushrax thoughts?\n. This has been moved to the backlog until we can give it more concentrated attention as it requires. Perhaps after v0.15 is released.\n. How would order.City be switched to order.From.City and not order.To.City? Also, how do you suggest we support order.To.Validate()? Would each struct implement some validation interface?\n. I edited your issue title. Is it accurate?\n. Did you find your answer?\n. @xpbliss you should be able to check against the c.Controller in your intercept method.\n. Hmm...Cyrillic script...\n\"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\ncollect2: \u043e\u0448\u0438\u0431\u043a\u0430: \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 ld \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u043e\u0441\u044c \u0441 \u043a\u043e\u0434\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 1\"\nin English:\n\"incorrect value \ncollect2: error: ld execution completed with return code 1\"\nWhat is collect2?\n. Thanks for the update @anonx. I'm closing this issue unless there is an action item for Revel. Thanks @deterok.\n. Thanks. Have you confirmed this works? Any reference that explains why gmail does not accept that format? Looks like it's a common address format.\n. Curious, why not just separate the sender's name and email address in the Sender struct (https://github.com/revel/revel/blob/master/mail/mailer.go#L21)?\nPS - @maiconio we need you to target the develop branch per our contribution guidelines. Thanks :]\n. @revel/core Why do we even have our own mailer? Why aren't using/supporting an existing package? Seems we're duplicating effort needlessly here. I see no benefit to having a Revel-specific mailer package.\nI'm considering removing this altogether in favor of @jordan-wright's https://github.com/jordan-wright/email\n. @pushrax @anonx Do you have any feedback on removing the mail code from Revel and standardizing on the above mentioned email package?\n. @anonx thanks for the validation.\nAs far as the aged PR's, maybe we should setup the Revel Github organization as a sort of Apache Foundation and offer to support under-staffed open source Go code ;)\n@jordan-wright could you use our help?\n. https://github.com/revel/revel/blob/5bf2fc12adff02657b13b86f4842c596564b3591/controller.go#L253\nhttps://github.com/revel/revel/blob/5bf2fc12adff02657b13b86f4842c596564b3591/router.go#L442\nhttps://github.com/revel/revel/blob/master/invoker.go#L16\nhttps://github.com/revel/revel/blob/5bf2fc12adff02657b13b86f4842c596564b3591/controller.go#L245\nThat is very interesting. It seems what you're seeing is correct, but I can see problems with how it's being handled.\nWe should look into this more. The value of c.Action should be either always lower case or always exactly what it is defined as in the code.\nIn the mean time, you should check against the lower case version of it to have some consistency. Thanks for bringing this up!\n. @xpbliss Can you share your routes file? At second glance, you may be using the wildcard controller/action matching which doesn't confirm an existing action name.\n. Thanks!\nTODO\n\n[ ] ~~It seems the solution is to have the router transform the :controller and :action values to lowercase since https://github.com/revel/revel/blob/5bf2fc12adff02657b13b86f4842c596564b3591/controller.go#L343 does a case-insensitive search. That would provide consistent results.~~\n\n~~We can do this in the router at https://github.com/revel/revel/blob/4c4e2db7f07e24aa3f0d649e28ab94e5044d876a/router.go#L117 and https://github.com/revel/revel/blob/4c4e2db7f07e24aa3f0d649e28ab94e5044d876a/router.go#L120~~\nI can't implement this now, but I'll try to do it later tonight. Should be a simple change that doesn't affect anything else.\n@revel/core input?\n. Marked as ready for contribution. Scratch what I said about \"tonight\". We need to release v0.10 before we start anything new.\n. #755 should address this. Fix was simpler than I planned (always a good thing).\n. @Azer- you can help give feedback to this PR revel/revel.github.io#16 which adds instructions for using environment variables in app.conf.\nHelp us refine and release it! :)\n. @pushrax does this look ready for release? It looks good, but I still haven't used Revel caching yet so I can't comment from experience.\n. What does the terminal output say when this happens? Can you paste your routes file?\nI wouldn't use the hello world app as it is likely outdated. This is something we can look into later, but there are other sample apps included with Revel that you can try. Also, you could simply start a new Revel app by running revel new helloworld in the terminal. This would generate a new app that you can then deploy to Heroku.\nLet me know what happens.\n. Odd. If you gain any additional insight, please post the details here to help anyone in the future :)\n. How is this different from #583 ?\n. I agree with @pushrax that #583 is fine since it's disabled by default. Also, CSRF in that case would only happen if the developer was not responsible with their input validation and in most cases there will be some kind of session token involved if not also a request token.\n. @pushrax :+1:\n. Not certain. Hopefully soon.\n. I agree. Let's look into this for v0.11.\n. Related to #779 \n. I'll take a look at it on my side in a few hours.\n. I installed go 1.3 last night, but got caught up in another task. Does this issue also happen when you create a new Revel app or just re-build the current app?\nIt's probably as you mentioned above; go 1.3 doesn't support the old object file format. Just a guess for now though.\n. I was able to create a new revel app and run it without any errors. So if you clean your build files and build again it should work fine.\nI'm going to close this for now. Feel free to re-open it if you have more details. Thanks!\n. Are you seeing cached public files in your app? Public files are served by the static module (https://github.com/revel/revel/tree/master/modules/static) which does not implement caching. So, you should not have any of your public js/css/png files cached.\n. Can you give me an example of how to reproduce what you're currently seeing and then detail what you'd like to see? Thanks!\n. Can you give me sample code to work with so I can see what is not being included in the browser error rendering? There are different kinds of errors that can occur. Thanks.\n. That helps, thanks.\n. After poking around panic.go and how error rendering works in Revel, it looks like we should be able to display the add without any Go code changes. We just need to change the template at https://github.com/revel/revel/blob/master/templates/errors/500-dev.html since errors.go already populate the error.Stack string.\nI'm off to work right now, but if anyone wants to try before I do, I'll mark it ready for contribution.\n. #754 should now address this. Thanks @kokizzu!\n. @pushrax Can I get some thoughts on this? I'm somewhat concerned that this may be a jarring change to release. What do you think?\n. @pushrax After thinking about it I think we can release this in v0.10 if we add clear instructions in the release notes on how to support the new structure.\nAs far as when to release v0.10, I think this is my last concern. I can finish #480, but @verdverm is waiting on feedback to finish #555. I think I can test for him tonight and finish #480. If you could test #555 as well and then we could nail down this PR with some testing and instructions, then we could release by tomorrow night.\n4 months behind is an eye sore. Makes me wonder how I can keep up with Revel in the future. I'm doing my best to keep the issues here up to date, but I haven't done much else really. I do appreciate your effort. It doesn't go unnoticed. Thank you @pushrax :)\n. Looks like it was not responding in time when you were trying to get it. You can manually download that package into your Go path's src directory at $GOPATH/src/code.google.com/p/go.net/websocket and then retry the go get for Revel's repos.\nLet me know how that goes. For now, I'll close this item as there is nothing we can do to assist you since it's out of our control. Thanks!\n. Glad to help!\n. I've scheduled this for v0.10 and assigned to @pushrax. Thanks @ottob!\n. :+1: Are we still good with v0.11 or do we want to push this up to v0.10?\n. :+1: \n. @pedromorgan thanks for doing some investigation on this. That's the kind of issue I like to see (i.e. more than just a complaint, but also a probable cause and possible solution).\nPlease continue to participate on #481 so we can get it buttoned up!\n. Is this from the main.go? If so, look at #553 where we will be requiring a user defined main.go instead of a generated file.\n. We'd have to modify the config package to do that. We may be able to modify\nRevel to look for a default section though too.\nSeems odd that the python parser doesn't support an auto default section.\nOn Jul 3, 2014 2:42 PM, \"Pete Morgan\" notifications@github.com wrote:\n\nI'm developing and app that uses fabric so attempted to read the appl.conf\nwith pythons configparser\nconfig = configparser.ConfigParser()\n config.read(\"/conf/app.conf\")\nthrows an error\nconfigparser.MissingSectionHeaderError: File contains no section headers.\nAdding a section to the app.conf solved the problem\n[default]\n app.name=myapp .....\nBut then revel could not start..\nIs it possible to add a [default] section, but also backwards\ncompatible ??\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/655.\n. I've pushed this up to v0.11so we can try to find a solution.\n\nPS - we'll most likely be making changes to https://github.com/revel/config only.\n. Thanks for looking into this in detail @anonx!\n@pedromorgan Can you help us reproduce the issue?\n. So, if I'm reading correctly, adding [DEFAULT] to the top of our app.conf does not cause any issues in Revel and allows Python to correctly parse our app.conf, right?\nIf so, this issue has no action items. I'm closing it unless additional details are adding showing that we need to make changes in Revel.\nThanks all!\n. :+1: Thanks for closing the issue and providing an answer.\nWere there any details that we could improve so others don't have the same confusion in the future?\n. @pushrax is this addressed by #637 ?\n. Fixed with #667 by @pushrax. Thanks @ckrissun!\n. init.go has been renamed in #648 so I'll make these changes on that PR to avoid an extra merge commit. Thanks! I'll watch for more single line import blocks in Revel :)\n. @pedromorgan I think this is a good idea, but it's going to require changes to @robfig's pathtree. It seems that robfig/pathtree#1 may already have what you're looking for. I encourage you to continue the conversation there.\nTodo\n\n[ ] get support in pathtree\n[ ] update pathtree in working copy\n[ ] confirm it works as expect in a revel test app\n. @pedromorgan it seems I may have misunderstood robfig/pathtree#1, but the change must still be made there since pathtree is what Revel uses to parse the route URL patterns.\n. :+1:  for forking @robfig's pathtree\n. You're welcome to submit a PR adding this functionality to the Static module, but for now there are other more urgent issues needing what limited time @revel/core has to give.\n\nIt may be good to see if you can persuade others of this value as well. Personally, I would use nginx to handle all static requests and therefore not need this functionality in Revel.\nI've moved this to the backlog for further discussion.\n. # TODO\n- [ ] extend static module to support directory listing\n. 1. Cabbage? ew. TMI.\n2. #647 already requests in browser trace display\n3. The trace is supplied by Go, not Revel. How would you correct the error? Now's a good time to get familiar with Revel and specifically panic.go so that you can contribute to the project :) We need more contributors; already have plenty of reporters ;)\nCan you share the code on line 84 of your version of build.go in the revel/cmd package? That may shed more light on what's going on here.\nI'm closing this issue for now since #647 already exists.\n. Are you drunk?\nWho is saying it will take 2 days to do what exactly? Django sings?\nClarify.\n. @pedromorgan please feel free to add more details. I'm closing this issue for now since there are no clear action items. Thanks.\n. Search the repo for \"subdomain\" and you'll see a few. Most notably #358.\nAdd your feedback to that PR and we'll see if we can include it in v0.11 if time allows.\n. I assume you solved the issue?\n. Travis CI says no obvious problems and I trust your ability to write working code @pushrax :)\n. @pushrax makes some valid points. Also, thanks @anonx for assisting @cnaize. Closing.\n. @anonx makes good points. Do you understand @xpbliss?\n. @NitroKKX I believe it's ultimately up to the config package supporting that formatting. That said, I don't think content belongs in a config file and we're discussing using YAML for the app.conf instead of the INI-like format that we currently use. Perhaps you can contribute to that conversation on #619?\nI don't see any action items currently, so I'm closing this. Thanks!\n. @seawatts feel like helping us create a good solution? It always helps when those involved in enhancing features have a real use case :)\n. #697 Thanks @seawatts!\n. Rescheduled to v0.12 so we can properly target the PR at #697 \n. Thanks for consolidating these into topic issues. Are there any action items here we can work towards or were you thinking something else in regards to making these \"bugs of bugs\"?\n. These items are either closed now or rescheduled for v0.12.\n. Interesting idea.\nYou know that the app.conf is using the ini format, right? I think it may be more efficient to stick with ini than json when considering parsing time.\nEither way, I've labelled this for discussion. @revel/core ?\n. Good point on parsing time @pushrax \n. @pedromorgan I'm aware of the inconsistency.\nIt is unfortunate that INI does not have a formal specification, but note what Wikipedia says about default sections:\nKeys may (but need not) be grouped into arbitrarily named sections.\n...\nIf no matching entry name is found and there is an entry under the (Default) entry name, INI mapping uses that instead. Thus each section name does not need its own entry.\n(http://en.wikipedia.org/wiki/INI_file)\nAlso note the Python documentation:\nThe only bit of magic involves the DEFAULT section which provides default values for all other sections.\n(https://docs.python.org/3/library/configparser.html)\nPython handles default values in a custom way. There is no requirement to have a [DEFAULT] section.\nEither way, I agree with @pushrax on this one. I think our current approach is simpler than JSON and related.\n. @landr0id I can see the value of having the config in YAML since it's a more definite specification compared to INI. I still don't think the routes are a good idea for YAML (yet), but perhaps you can take your YAML experience and help us do a prototype for the config?\n@pedromorgan am I understanding that you want to be able for Revel to parse multiple formats for the configs? That seems like a bad idea from a documentation example perspective as well as complexity. Can you help me to see some of the benefits of supporting multiple formats?\n. Looks like we're leaning toward YAML app configuration if we change at all. Closing the discussion. Thanks for everyone's input!\n. This is scheduled for v0.15 and the priority is not high enough to worry about it right now. This will have to wait until other more important features are complete.\n. Thanks @klauspost. @revel/core thoughts?\n@klauspost is your patch small enough to share here?\n. Hopefully this issue will aid others who are making use of websockets with Revel. Thanks for your continued contributions @klauspost!\n. @pedromorgan the difference between Revel and other Go web frameworks is that we provide consistent interfaces for devers to cod apps with so that they can focus on their app logic. We don't want to make Revel so customizable that it loses its edge. Revel needs to \"just work\" out of the box. instead of creating an artificial layer of abstraction by allowing Revel's support for other implementations of core features, we work to support 3rd party technologies like MySQL vs MongoDB, but not Revel Sessions vs Gorilla Sessions. That may be possible, but it's not our goal.\n@klauspost @pushrax Issue hasn't been updated and isn't planned for a release yet (https://github.com/golang/go/issues/6377). @pedromorgan check out golang's labels. Looks useful for Revel's GH labels.\n@pushrax Gorilla's websocket package looks like a good candidate for replacing golang's incomplete implementation. I hope it doesn't have any dependencies on other Gorilla packages.\n. Thanks for the update @ptman!\n. No idea how I closed this, but this seems like a valid bug.\n. Sweet deal. Thanks @klauspost @pushrax \n. :+1: \n. I would agree with @pushrax that we should simply return the request object for further modification, but we would also need to add a Send() method as well. Too bad it's a breaking change, though I think it's worth it.\nAlso, since it only affects the test suites, I don't see why we can't make this change since existing code just needs to chain the send call like:\nt.PostForm(\"/session\", url.Values{\n        \"login\":    []string{\"johndoe\"},\n        \"password\": []string{\"password\"},\n    }).Send()\nAm I right?\n. @anonx why remove MakeMultipartRequest?\nAlso, I commented on your commit :)\n. @anonx thanks for collecting all the relevant information into one place for me :) Instead of removing the method, could we correct to to act as we would expect? It looks more user friendly that PostForm() since you can just pass in a map of values. Definitely something that needs refinement though.\n. @anonx you're right and I overlooked what url.Values was defined as. Let's remove MakeMultipartRequest.\nIs there any other TODOs for this enhancement?\n. @anonx I trust your judgement on this topic. Do what you think is best and we'll review the PR when you create it.\n. Thanks for your help @xpbliss!\n. Thanks for your help @cryptix \n. How are you going about testing this?\n. @pushrax don't mess with my conventions however redundant they may be! :) I guess in my defense, an assignee shows who has taken responsibility for an issue in the case that someone has submitted a PR needing team review. When a team member submits a PR, it gets a little weird lol.\nAlso, I like the beta feature idea :+1: How should we track such features for testing and finalizing in a future release?\n. Let's see how it goes :)\n. Would be an interesting future issue to investigate a Windows capable solution. I'm sure there are Windows API syscalls that could accomplish the same thing. Just needs more expertise/experimenting.\nThough, Windows has always been low priority in my mind for Revel.\n. @pushrax that seems like a heavy responsibility for an average developer to care for. I'd much rather come up with a fix for Windows.\n. @pushrax the way this was written cannot be conditionally compiled (currently).\n. Curious, is this PR going to jive with #593? \n. ## TODO\n- [ ] use go build tags to offer a windows and non-windows solution\nThis has been pushed back to v0.12 and will be removed from the v0.11 release. Thanks.\n. I've scheduled for v0.11. Thanks!\n. @pushrax is there anything wrong with using the new import path?\n. Thanks @pushrax and @ottob \n. Just my 2 cents: It's a good idea. I see this being opt-in through the routes matching pattern. If a format pattern is defined in a route, then it sets the content type to be returned.\nI believe in Rails, the controller can specify what to do for different formats e.g. nothing. See http://apidock.com/rails/ActionController/MimeResponds/InstanceMethods/respond_to\nWe could set a default of only responding to html so that random extensions are simply ignored.\n@pushrax @landr0id thoughts?\n. @pushrax that's a good question. Here's a dumb question in return: Where do we declare a minimum Go version for Revel?\nAs a temporary fix, could we include the -i flag dynamically based on the current version of Go?\n. @anonx // +build \"go1.3\"?\n. @robfig @pushrax it seems -i may not be the solution per the latest developments on #290 \n. Thanks @anonx and @xpbliss. I've scheduled #409 to v0.12 for consideration. It's getting rather stale and it's a feature worth reviving.\n. :+1: This sounds like a good idea. The more we can prove everything works as intended, the better :)\nI assume the multipart request is for posting forms with files as well as form fields. Is that correct? It doesn't seem to be used in the Revel codebase.\n. @anonx it would be nice if we could pass in a map[string]string of file paths by file name e.g. map[string]string{\"image\" : \"scheme:///some/file/path/to/image.jpg\"} so we can pass in more than 1 file per POST. Thoughts?\n. :+1: Let's do this! Do you already have PR in the works?\n. @seawatts thanks for contributing! Can your please retarget your PR to the develop branch per our contribution guidelines? That way we can review it and include it in our next release!\n. @serialx Sure did. lol. Confused as to why you were in the auto complete list... :) Thanks for the correction.\n. Let's catch this in the next release.\n. @seawatts we've chosen to close this PR in favor of the upcoming pluggable logger interface.\nThank you for contributing. We'd love to add a syslog provider in the near future.\n. :+1: Agreed. Anyone who feels moved can contribute the PR :)\n. @stsmedia can you create a new PR that targets the develop branch? I'll get it merged in as soon as you do. Thanks!\n. @acrisci Sorry, my fault. I should have noticed that this was a retargeted branch that was never actually retargeted. I'll move this up to v0.12.\n. This has been covered by #781.\n. Also, I don't think we can do a 301 on GitHub pages. The other solution is a gem we could use: https://help.github.com/articles/redirects-on-github-pages but I don't think it performs a server side redirect.\nI assume your issue with this is that the search engines are still returning the old repo instead of the new docs. The only solution I see is removing the old repo content all together.\nThoughts?\n. Good idea @anonx. That should help in the long run, but I have to have that for every page right? I wonder if doing it on the index will be enough?\nI'll try to get that merged into the revel.github.io repo soon.\n. @xiam Thanks! You'd have fork https://github.com/robfig/revel/tree/gh-pages because we need the changes there. Then @robfig can accept a PR from you. We could apply the same patch to our https://github.com/revel/revel.github.io as well.\n. Change made thanks to @xiam.\n. @xpbliss read the field manual: http://revel.github.io/manual/binding.html see \"slices\" section.\n. I assume you figured it out. Reopen if needed.\n. What is the encoding of the contents that you're displaying? Where are you displaying the contents?\nYou can see the binder code for file uploads here: https://github.com/revel/revel/blob/df5d88dbece276012b4c7ab45a33a1047c1db108/binder.go#L220\n. https://github.com/revel/revel/blob/df5d88dbece276012b4c7ab45a33a1047c1db108/params.go#L28\nc.Params.Files is the list of uploaded files.\n. I'm not familiar with tigertonic's code nor your use case. I could look into this later if you don't figure out a solution, but let me take a stab in the dark.\nYou want to be able to track all the different response status codes returned by the Revel app, but you're not able to, because you are seeing resp.Status == 0 on panics. Right?\nJust quickly skimming panic.go I notice that it calls RenderError. Can you make use of that?\n. @revel/core \n@cryptix I'll try to look into this in detail this weekend. I'd love to pair program with you if you're interested? We can meet up on IRC.\n. @cryptix What timezone are you? I'm PDT. I can pair with you Monday night if you're available.\nI'd like to wrap this up or delay it to the next release.\n. Alright, I can meet up with you on IRC at 11pm PDT tonight.\n. Pushed back to v0.12.\n. @cryptix are you still interested in implementing a PR for this issue?\n. See \"Resolving Messages\" at http://revel.github.io/manual/i18n-messages.html\ngo\nfunc (c App) Index() revel.Result {\n    c.RenderArgs[\"controllerGreeting\"] = c.Message(\"greeting\")\n    c.Render()\n}\n. @anonx I'm not sure I see an issue. The link I gave explains how to pull i18n messages with c.Message() which can be inserted into the validation message. What am I missing here?\n. @anonx I don't see how what @Agon is talking about has to do with models need access to the controller instance. Am I missing something here? Sorry if I am.\nEDIT:\nI suppose you're making the connection to the booking model because @Agon mentioned the ValidationResult? I think I understand now. Is there a good solution to this that we can include in Revel? I can't think of one now. The dependency is having access to the current controller to detect the current locale. Tricky.\n. @pushrax that seems more like a work around rather than an ideal, long-term solution.\n. Alright. So the solution is basically dependency injection. I'll let it go and if it hurts too many brain cells later we can brainstorm more.\nGood stuff everyone!\n. @anonx @pushrax looking at this with fresh eyes makes me think that perhaps there isn't a better solution than what I called a work around above. Are there any reasonable alternatives to @anonx's passing for localized message text from controller?\n. This is feels like a good candidate for the RFC repo. Improve i18n validation messaging workflow.\n. @cnaize we've discussed this topic in the past. Try searching our issues and feel free to contribute your thoughts. \n. @anonx backward compatibility isn't so much an issue here, especially since I'm thinking of these sorts of changes for v1.0. Coding conventions are also in my mind for the v1.0 release. Polishing is my goal.\n@pushrax public to me seems to be a legacy reference to apache public_html. Public alone seems a little vague, though likely common enough to be clear. I'm trying to reduce any mental friction in Revel.\n. So we all agree that static would be more appropriate?\n. If we don't change to static then I'll yield to public. I'm just being picky. This is a low priority tweak. Thanks all!\n. @pedromorgan we provide static file serving as a Revel module in case devers don't setup a front end HTTP server.\n. I've cancelled this change. No value added.\n. I assume this is no longer an issue. Reopen if needed.\n. Good finds! I've put this in the v0.12 release which I'm targeting as a polishing release.\n. @pedromorgan this shouldn't be closed until we've made the needed code changes.\n. @anonx yes and the samples repo is where the samples folder will be moved soon.\n. @landaire thanks for stepping up Lander!\nWe may want to push this back to v0.12 since there are higher priority items in v0.11.\n. @pedromorgan Why did you close this?\n. :+1: @klauspost's solution or @anonx's solution.\nWhat you're asking for is better served by a CDN. However, I see value for it still. See #352 for a discussion on adding custom headers to the Static module.\n. Thanks for helping @klauspost \n. :+1: \n. Appreciate the details and the effort to move this forward. I moved #369 to v0.12 and tagged it for discussion.\n. @anonx #369 is an enhancement, so it's not really required for this, agreed?\nAlso, as far as struct tags, they depend on the reflection interface. I'm not concerned about that. Are you?\nThere are other approaches to storing validation rules that could be statically typed, like having a global validation map[string]string so you could do\nrevel.ValidationRules[\"User\"] = \"required=true,minsize=2,maxsize=100\";\nWhat do you think?\n. I like the idea of tag-based validation, but I have some concerns:\n1. Performance hit due to reflection of tag values\n2. Backwards incompatible changes from existing validation\nThe biggest issue is how this change will be received by the community.\nI favor your proposed approach because it reduces the amount of code logic to configure validation. I assume that if you want to validate a form that has no related model that you would simple create a dedicated struct for that form, right?\n. @anonx good point; only reflected at startup.\nOverall, I like this PR.\nAs far as the community goes, should we:\n1. create an RFC to fully flesh out how this will work and be used by devers\n   - one benefit of a RFC is that it basically turns into the docs that we'll add to our manual site\n2. just pull in a PR on the revel repo and create the docs AFTER it's implemented\n   - If we do this, how will you collaborate on it?\n. Nice points, as always, @alkchr. If there is a better, and still readable solution, then that would be great. Otherwise, there is still value here. Reflection on struct tags isn't horrible.\n. This is an interesting idea. Perhaps we can make this configurable. I don't want to make this default because not everyone uses sublime for coding.\n. Now we just need to update the manual page: http://revel.github.io/manual/appconf.html\nThanks!\n. @JaTochNietDan Sorry, but this needs to target the develop branch. This was my fault, I did not check which branch it was merging to. Please create a new PR targeting develop and I'll merge it. Thanks!\n. @pedromorgan that would be good.\n. @anonx I agree that the separate repos need their own version, but we should think about how we could ensure the samples have the exact version their expect. Short of adopting a package management approach, we could discuss runtime version checks such as a value specified in config/app.conf.\n. @mnapoli that would have been useful. I'll keep it mind, thanks!\nI've applied labels to all current repos except for category labels, which we can add as we go.\n. #719 \n. @NitroKKX are you asking about view name spacing for modules as you did in #445? If so, it's definitely possible, but I just thought of an issue: if you name space the module differently than the module expects, then it won't be able to find its own views since the module controllers run just like any other controller (as if it existed directly in the importing app). How would we handle that?\n. @NitroKKX we'd have to track what module/name space a controller belongs to, but this sounds good.\n. I think this feature needs to wait until we implement the new template engine and view model abstraction as noted in v0.13 of The New Roadmap.\n. @notzippy (this addresses your comment from 6 days ago and today) Revel looks for views in the app root first and then in the module root after based on the fact that the TemplatePaths slice is appended in that order. When a template has already been added, it is skipped.\n@NitroKKX I just spent a few minutes testing how templates and modules are handled. I was able to successfully override a module's template by creating the same template path in my app's views folder. So, it seems we don't need to worry about any sort of advanced name spacing for module templates.\nBesides, the idea of a module is a way to extend your app, not to break it up into separate chunks. A module (ie. all its view and controllers and config, etc) gets merged into the app itself at build time.\nIt seems the real solution here is to recommend a convention for modules to name space their own views. So given a module named Testmodule and an App controller with an Index action, the module should define app/views/Testmodule/App/Index.html relative to itself. Thhis would allow the importing app to override all the Testmodule views cleanly/semantically.\nThis feels like the right solution. I'm closing this unless a better argument can be made for putting effort into affecting how Revel works. Thanks!\n. This makes the error page bit heavy, but I think for great gain. I'm good with this. :+1: \n@revel/core ?\n. Is this PR ready to be merged now @anonx ?\nEDIT: everything looks good to me. :+1: \n. @xpbliss when you embed a controller, you should use a pointer such as *App.\n. @duythinht Please retarget your PR to the develop branch per our guidelines for contributing\n. @pushrax what about setting a default status code eg. 200 before filters are run?\n. @pushrax Isn't the goal of this issue to set a non-empty response status?\nAlso, it seems the Apply methods are directly writing the headers instead of using Response.Status. It seems we shouldn't allow filters to do this as it's an opposing approach to processing the response. Thoughts?\nSince we're declaring our own Response we should force filters to use our defined Response. If they need to override the actual ResponseWriter, then they can go through Response.Out. Right?\nI don't know of any use cases for this, but I'm sure they exist. I'd have to examine our current filters more. It feels like this may just be legacy code that can be better engineered.\nThese issues look related: #186 #704\nFinally, I don't know why we're setting some status values in the controller.Render*() methods and some in the *Result.Apply() methods. We should be consistent and my gut feeling is that we should prefer to do it in the controller methods and allow the result methods to override if needed. Thoughts?\n. @pushrax but we expose access to c.Response.Status so we might as well consistently use it. I can't put too much mental effort into this at the moment, but hopefully we can discuss in the context of tangible code soon.\n. @pushrax what gives you that impression? Where can I look to better understand the implied validity?\n. Looking at it once again, I have decided to merge this PR as it is a step in the right direction. We can improve the code as we go, but we must make steady progress.\n. Thanks @dmitrykakunin!\n. @notzippy actually, we currently add a template to the set twice e.g. \"Foo.html\" and \"foo.html\". That was one of my first contributions to Revel.\n@pushrax if I recall correctly, you can't control how the template name lookup happens. I have considered overriding the built-in template function so that we can lookup only the lower-case string. That may be an option/\n. @pushrax I've given this issue to you since you're more familiar with the topic. I have confirmed (as has @notzippy) that we cannot override the template function as I assumed.\n@notzippy or we could only support all lowercase template names as a convention or go back to precise case requirements. I'm leaning toward allowing the template package to manage the case sensitivity and not ToLowering the template names as we are.\nIt is silly to me that the template names are case sensitive, but it should be fine to allow the developer to keep their own lowercase filename convention instead of trying to hack it together in Revel.\nThoughts?\n. @pushrax yes, let's convert back to case sensitive. I would prefer if we could make the example and default skeleton views lowercase though to encourage a lowercase convention. It's just less error prone instead of trying to match action name casing.\n. If we're going to get this added, then we need to do it ASAP otherwise I'm moving it to a future release.\nWhen we do this, we need to modify the skeleton to use all lowercase view template file names.\n. # TODO\n- [ ] Only store the ToLower() version of the template file names in template.go\n- [ ] Ensures controller action lookups work as expected (lower case version matching)\n. @notzippy then IMHO we should change the lookup to be lower case. Seems like it would be less likely to cause mental friction over correct letter capitalization.\n. So what if we were to only store the lower case template name that way there was no duplicate template and therefore no duplicate define?\nWe would just have to make it clear that the convention was to always refer to templates in lower case (even within templates e.g. {{ template \"lowercase.html\" }}.\nThis would allow developers to use either Index.html or index.html file names.\nThoughts?\n. @notzippy the main issue is that Revel is looking for a bumpy case view template because of the Go convention for exported methods with controller actions and therefore forces us to extend that convention to file names. I want Revel to look up the lower case version of the controller action\nAlso, note that we cannot do any sort of error handling because we cannot override the {{ template \"lowercase.html\" }} function. If we could, then everything would be much simpler.\nNote what @robfig said in #367:\n\nI meant that it seems easier for all reasonable cases if the matching is case insensitive.\nFWIW, Go does not allow foo.go and FOO.go in the same directory, for exactly the reason that such a thing is not possible on all platforms\n\nGo already enforces file names to not be duplicated by letter case variations. Using the lower case version of template file names allows us to be consistent. The only thing a new Reveler must learn is that all template file names are accessible only in their lower case form. That won't be an issue for most coders unless they choose to use mixed case, which I feel strongly is not common, especially since we're supporting Windows coders who often deal with case sensitivity issues.\n. @notzippy that's true. I'll look into trying out a different way of matching (by iterating the slice) and see if we can only make the matching insensitive while still removing the duplicate templates mentioned here. Thanks :)\n. @notzippy I prescribe the following to relieve the symptoms of your Mondays (in this order):\n- Take a walk\n- Laugh randomly\n- Dance to high BPM music\n- Eat something filling and then something sweet\n- Take a shower\nYou should be feeling markedly improved.\n. #753 fixes this issue. Thanks everyone for your contributions!\n. @pushrax I don't consider this a bug, but we could enhance the code inspection code to support this. Agreed?\n@NitroKKX Please turn on your TRACE logs in app.conf. Then confirm that you are seeing Surprising: Decl does not have 1 Spec: [...]. I believe I found the offending code. The code inspection ignores type declarations with more than 1 spec (like your type block).\n. @NitroKKX adding a filename is a good idea.\n@pushrax why 0?\n. TODO\n- [ ] Add file name and line number to multiple spec type detection log to better communicate to the developer\n- [x] Change multiple spec type detection log from TRACE to WARN to better communicate to the developer\n. @pushrax  but the return type is for a single Decl, we'd have to convert it to a slice and then change the calling code to expect it.\n@notzippy yes, we'd have to do that, as I noted above in the \"Optional\" todo. Glad we're on the same page. Also, yes, your commit looks good. I noticed you don't print out the Decl anymore; I think that's fine since it doesn't any useful information. Can you also note the file's line number, too?\n. @notzippy seems you don't need to explicitly pass filename around since you can use Decl.Pos() to get the file name and line number position with token.File.Position(...). Just change filename to the file value on line 196.\n. @pushrax what are you pointing to on line 625?\n. @pushrax that's actually a good point. I was thinking we should support declaring 2 controllers in 1 type block, but that's just silly.\n@notzippy don't worry about multiple type specs, that's not necessary and I've removed it from the \"optional\" todo's above.\n. @notzippy yes, that's what I meant, filename:linenumber. So, you couldn't use this file?\n. @notzippy 99% there, just had a question about the for loop you added to iterate the specs. We should implement @pushrax's comment of just using the first spec no matter what, right?\n. @pushrax look good to you?\n:+1: from me. Make a PR and let's get this merged into develop!\n. Merged #731 \n. :+1: Thanks for contributing :)\nPS - we should think about adding a test case for this to harness/reflect_test.go, but we're good for now.\n. There is no automatic relationship between c.Session and c.RenderArgs. You need to manually clear the value of c.RenderArgs[\"user\"].\nHowever, this brings up an interesting discussion for event queues or even, at the very least, event hooks per request. For example, if the session expires this request, it could call an event hook that is ready to handle the event with further action, like clearing the c.RenderArgs[\"user\"].\n. That's interesting. Would you be able to show us what the HTTP response looks like in your browser?\n. @pushrax @anonx I still feel having a default status handling would be ideal. We can discuss further in #728.\n. Not a new topic: #409 is a great place to catch up on the discussion. It also links to a reference implementation worth looking at by @verdverm.\n@goofcc feel free to contribute your thoughts and code :)\n. I was thinking just an internal package for now in the revel/revel repo.\n. :+1: \n. :+1: good stuff @anonx Quick on the draw :)\n. @klauspost TravisCI passed successfully. What error did you see?\n. @anonx I commented on #613 in regards to #593.\n@klauspost Thanks!\n. @anonx your reply is worth putting in the wiki for eventual inclusion in the docs :)\nTODO\n\n[ ] write a simple session filter to use redis as an alternative to the cookie store to demo how customizable the session filter is\n. What version of Revel and Go are you using and on what OS. If I could get steps to reproduce this it would make the process easier.\n\nThanks!\n. @drewwells \n1. What do you get with pwd $GOROOT and ls $GOROOT when it doesn't work and when it does?\n2. Can you reproduce this issue on another machine (e.g. physical, VM or remote)?\n3. I'm not sure there is an action item so far. What could Revel do to address your issue? It uses the go/build package to get GOROOT from the default context (http://golang.org/pkg/go/build/#Context).\n. @drewwells perfect!\n. Not sure, I've never tried this. What's wrong with Revel's session handling?\nIf you want to use a different session handler, then you'll have to experiment on your own. Let us know what you find out :)\n. I can't know how their code would leak memory. I would have to do research into the topic, but, due to time constraints, I won't be looking into this for now.\nI would encourage you to look into Revel Filters and how our current Session Filter works.\nPerhaps, if there are desirable enhancements to be made, we could improve our session handling code with your help :heart_eyes: \n. #741 \n. @pedromorgan @shelakel it seems that the gorilla/sessions package has not been designed to be modular as it depends on other gorilla packages. Is this correct? If so, they're isn't anything simple that Revel can do as far as I can think.\n. :100: for the well formed check list and comprehensive explanation of changes. :+1: \n. As mentioned in #746, we're going to remove the template name lower casing, so this will no longer be an issue.\n. @klauspost I'm not sure this is the right way to approach i18n in views. Isn't it more common to have a message lookup method to get another languages version of the content?\n. @ready4god2513 what would the different be between index.html.en and index.html.es? Wouldn't the structure of the page be the same? Seems redundant to have localized views in addition to localized message files.\n. @notzippy as long as there is a good use case for it, then I support it :+1: \nI just don't have a good use case myself since I have never coded an app in a RTL language.\n@klauspost can you outline a good use case from your point of view?\n. @klauspost @ready4god2513 thanks gents. I'd like to test this out myself before we merge it, but all sounds good.\n. After talking this over with @jeevatkm we feel it would be best to not merge this PR and instead include this functionality in the upcoming pluggable template engine.\nThank you @klauspost for contributing this solution, it's a valid idea that we can use soon!\nWe'll leave this PR open so we don't forget it.\n. This is noted in #690.\nDo you use Windows for development? As I mentioned in the above issue and others in the past, Windows is not a priority to me.\nThat said, doesn't Windows have equivalent calls we can use? Worst case, we can fork goagain and make the tweaks and submit a PR to them. Worth noting this has already been brought up in rcrowley/goagain#11\n. Just want to clarify that though Windows is not a priority, I definitely don't want to seclude you from the Revel community (especially as valuable as you are to our community). Ideally, we need to find a fix for this before v0.11 is released. I appreciate you taking the lead on this and filing an issue in goagain.\nI'm sure there is a solution we can come up with so that Revel continues to be usable in Windows :)\n. I have installed Go on my Windows machine and successfully ran a Revel app (yay).\nI also was able to reproduce the error on the develop branch related to our use of goagain.\nI am pushing to find an alternative solution for goagain on Windows (rcrowley/goagain#11). Please help :) I have no experience in Windows API development; only somewhat effective GoogleFu.\n. @klauspost I ran into this goagain alternative and it appears as though it doesn't use any signals that Windows doesn't support.\nI'll look into this later in more detail and run some tests on Windows, but if you could also look into it I'd appreciate your help.\n. I've reverted #690 and pushed it back to v0.12 so we can add non-breaking Windows support. Thanks @klauspost for the feedback.\n. @notzippy many frameworks have be mentioned in these Articles. We could start another wiki page for comparable web frameworks to server as a basis for productivity comparisons.\nAlso, as far as your comment about Martini, I'm pretty sure I could run revel new hello && revel run hello a lot faster than you could create a main.go file with the above content and then run it from the command line ;) Just saying.\nThat aside, hello, world is not a substantial enough benchmark to compare something as complex as web frameworks. We need to demonstrate how each creates new projects, handles page requests, sessions, templates, database access, and other more advanced features such as code reloading, asset preprocessing, app deployment, etc, etc.\n. We should discuss this toward the end of v0.12 when the code organization tasks are completed.\n. Would be nice to have a table comparing the different time results for dev types such as \"purist\" for all by hand/copy pasta and then a column for each common Go framework. Then, each row can be a common task, such as creating a new project, creating a new controller and action, and so one with increasing complexity through a web app's life cycle.\n. @devshell very true. Now we just need to implement decent auth functionality :)\n. I must admit I am slightly sad to bring this back to the way it was before my #367. I've made more comments in #729 to check my logic on a possible workaround that would allow use to not merge this PR.\n. Closing in favor of #753 \n. @pedromorgan Why is this here? If anything, it should be a wiki page.\nAre you wanting to have a more comprehensive sample Revel app?\nWe can chat more on IRC soon.\n. @notzippy Gerrit doesn't look like it adds anything that github already offers. Please explain how it would benefit us.\n@anonx that sounds like a good idea to experiment with.\n. @notzippy nice that it doesn't require us to self host it. It's definitely something to look at in the future (after we make some decent progress on the current roadmap).\n. @anonx sweet tool! Revel got a B. Room for improvement :)\n. @pedromorgan this needs to be addressed in the code before we close.\n. @klauspost @pushrax @anonx how are we able to delete the tmpFile before we invoke the controller action?  How would the action be able to access the contents of the tmpFile?\n@klauspost What are the steps to reproduce this so that we can make sure it's properly addressed?\n. @klauspost we will be able to fix this when the new binding package(#872) is complete in v0.13.\n. I've pushed this back to v0.15. This may not be a straight forward task and will likely need a cross-platform signaling solution (as mentioned in other issues involving SIGINT on Windows).\n. Woo! :+1: \n. There are really only 2 numeric types in Go: int and float.\nWould it be better to add a RangeFloat validator instead of modifying the current Range func to allow for both?\nThoughts?\n. @pushrax what do you think about changing the argument type from int to interface{} and then detect the type via a type assertion instead of a separate method?\n. @daemonfire300 not sure why we would want a dedicated interface other than the current Validator, but please share your thoughts in the form of code ;)\n@pushrax SGTM\n. @xpbliss @notzippy this needs a RFC in revel/rfcs. Can either of you take ownership of this and make sure we get the RFC proposal details completed for review?\n. @notzippy :100: Very good! Thank you!\n. :+1: Thanks!\n. I agree, should be relatively simple.\nWhat is your current use case?\n. Good to know.\nAre you wanting to cache a key value store or just plain text e.g. HTML?\n. @brentadamson All we need to do is implement the Cache interface that accepts a path to store the files on the file system. There are many existing Cache implementations that demonstrate how to code and test the cache driver.\n@notzippy Since we already implement a common Cache interface, it's just a matter of initializing a a revel.Controller.Cache variable before each controller action is executed so that the cache driver is accessible.\nTODO\n\n[ ] implement file-backed Cache driver\n[ ] write unit tests to verify implementation is correct and demonstrate its usage\n. Not sure if this is a bug or a user error. Where is the myapp1 directory (absolute path please) and what does it contain?\n. So it sounds like you were trying to run the batch file from a different directory and by moving into the same directory as the run script, it works. Is that right?\n\nI'm going to assume this is taken care of now. Thanks.\n. @cnaize Does this answer your question?\n. :+1: Let's discuss this soon.\n. I see some potential improvements to i18n.go, like renaming messages to messageConfigs and making a messages map[string]map[string]string set to the parsed values.\nFor now, this PR is backwards compatible, so it looks great!\nThanks @klauspost!\n. @pushrax I don't see any harm in adding it, though I haven't had any issues and I use Vim religiously.\n. @xiaoao please target the develop branch per our guidelines for contributing as noted when you create a new issue.\n. @anonx no, sorry for the confusion. I updated the above todo list. Checkout #722. It will be an easy merge, just need to retarget it. I didn't finish with a merge to develop, only reverted it.\nThanks.\n. :dizzy_face: I am so glad I'm not alone on this project. I'd make it crumble from the inside ;) Thanks for pointing out the facts @anonx!\n. See #862. #727 would need to be a separate skeleton since not ever dever uses bower.\n. Thanks @elaich and @dragon3. I didn't get this error when I ran all my tests. Weird. Thanks also to @anonx and @pushrax for quickly fixing.\n. Thanks @pushrax. I didn't get this error for some reason :/\n. Hi guys.\nThis is assigned to v0.14 and the next release is v0.13. So no, we're not focused on this feature at this point. Contributions are always welcome, especially with open source software managed by a few volunteers,\nThanks!\n. @RobertJGabriel that project looks like it could be very valuable for this feature. Thanks for mentioning it!\n. @svalleru Please list the contents of this directory: /Users/myuser/Desktop/golang/src/github.com/revel/cmd/revel/\n. This is essentially the same as #698, so I'll close that one since this PR targets the correct branch.\nThanks @acrisci and @anonx!\n. @pushrax I don't see the modules and revel core as heavily coupled to each other currently. If a module becomes dependent on a specific version of revel then it would only benefit us by forcing us to move forward with a workable package management convention. Personally, I still like gopkg.in. Seems straightforward.\nWhat do you think? Are we good to push ahead on this?\n. @pushrax PS - #714 discussed moving the harness as well as samples and modules.\n. @acrisci github.com/revel/modules/jobs\nIt's only available in the develop branch of the modules repo currently.\n. @atomical you can just create another section in your app.conf such as [test] and then set whatever parameters you need e.g. different DB credentials/host. Does that answer your question?\n. @atomical does that answer your questions? Assuming so, I'll close this.\n. @anonx did you remember to mix in 3 parts ground up unicorn horn?\nAlso, what errors are you seeing?\n. Sounds like everything is working as expected for develop. Thanks for the helping spirit guys!\n. So the end of this issue is to note that Travis CI won't work with PR's targeting the master branch. Fortunately, we don't ever target the master branch, so this shouldn't cause any difficulties with our development process. Please note further if I'm overlooking any details.\n. @anonx if it's in master, then we should create a hotfix to address it and then make sure it is also pushed to the new modules repo.\n. @anonx I was thinking that, too. Referer is not reliable enough to use: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet#Checking_The_Referer_Header\n. @anonx all good points. I'd like to chat about these improvements and more Thursday evening.\n. @anonx looking closer it seems the csrf and db modules should both be part of Revel's core library as subpackages. Do you agree?\n. @anonx I'd say we remove referer checks as it is spoofable.\nAs far as your question about tokenFunc, I'm not certain what it's doing. I don't see how it goes from a string in c.Session['crsf_token'] to a func() string. Good question for @iamjem.\n. @anonx when can we meet up on IRC? Maybe this Sunday?\n. @anonx great! Let's aim for tomorrow evening, say 5pm PST. How's that?\n. @anonx :currency_exchange: :hourglass_flowing_sand:  Yes, sir.\n. This is important, but I think we can push it to v0.13. Agreed?\n. @rambocoder that's a good idea.\n. Added this to the roadmap. We need to wrap this up. Either remove the csrf code or fix it,\n. Why not testsuite folder instead of testing? Other than that :+1: \n. @anonx @pushrax :+1: \n. @anonx are you going to merge this manually?\n. @pushrax this is only an issue with v0.12 since we are moving code around repos, right?\nPerhaps for this release, we ignore CI and verify manually.\n. @pushrax modules should not be coupled to the core. The whole point is to agree on a common interface so that they can be modular.\nAs far cmd, it only uses Revel's core lib to access the config; it's not coupled on much else.\nSo, Thursday evening or no?\n. Noted in the Roadmap v0.12 item \"Update the Revel Manual to reflect current features\".\n. @pedromorgan yes, they're listed at the bottom of the v0.12 section.\n. @flamingtop could you confirm the cookie in the HTTP responses from your browser before, during and after the captcha action?\nI looked at the session code and I don't see why it wouldn't return.\nAlso, try return nil instead of c.RenderText(\"\") since that modifies the response writer.\n. @anonx returning nil doesn't work? Why not? Rob, as you noted, suggested that. Can you clarify what isn't working about that?\n. Have you read the Getting Started Tutorial or Revel Manual?\nI agree that our documentation needs attention and if you checkout our Roadmap you'll notice it's on our radar.\nAs far as ORM, notice what the Revel website says at the bottom:\n\nORM -- Presently Revel is BYOORM (bring-your-own-ORM). A good ORM integration would make simple things simple. (e.g. gorp, hood, qbs, jet, beedb, gosexy, gorm, xorm)\n\nThe roadmap also covers our desire for better built-in support for a standard ORM library.\nI appreciate your feedback. It's good to have your perspective as it helps us better judge where our limited effort can go. I'd invite you to join us and help improve our documentation so that others learning Go and/or Revel will have a better experience than they may now.\nWhat do you think? Can you help us make Revel a pleasure to use?\n. @LorenzV this is good feedback from someone learning Revel. Thanks for outlining these topics for us to improve on!\n. I added this to v0.12 on the Revel Roadmap.\n. @LorenzV I like your changes. I also agree we can progressively improve the style after we update the manual.\n@pedromorgan rouge does seem to support ini, but not sure how it would render Go templates.\n. @LorenzV I'm closing this as there are no action items here. Please feel free to ask more questions on StackOverflow.com or by submitting pull requests to our revel/revel.github.io repo to improve documentation. Thanks for your help!\n. @anonx @benjamin-wss :100: excellent job with the screenshots guys :dancer: \n. I'd like to see some unit tests for this code. Is that reasonable?\n. I think, to your point @klauspost, we can make this modular, like @anonx is wanting, during v0.13 which would then allow us to better unit test the code. I think for now, this code looks good to go.\nThanks @klauspost!\n. @anonx I don't think it's possible to access the controller context in a test suite since you're making HTTP calls. You can only test against the textual response.\nHave you given this more thought and specifically how you might accomplish this? I'm pretty sure it's not possible, but I'm curious to understand your thinking.\n. @anonx I see what you're thinking. That seems a tad complex, but it would definitely allow for more detailed testing.\n. @ready4god2513 none of the core team wrote the Redis code, it was contributed. Thus, it hasn't been thoroughly reviewed and optimized. Your effort is warmly welcomed.\n. @ready4god2513 it seems we can change the type to a signed integer and simply change the memcached and inmemory implementations to convert the num uint64 to int64(num * -1)?\n. @ready4god2513 I take the lack of opposition as a :+1: ;)\n. @pushrax we should bump the Travis CI Go version to 1.3 as well, agreed?\n. @xiaoao Sorry, but I didn't see this PR and added my own #882. Thank you for contributing this code!\n. @anonx @robfig controls the twitter account. I DM'd him about the new hotfix.\n. I've been out of the loop for a bit too long. I'm not sure what the issue is here, though I trust it's a real issue.\nCould I have some steps to reproduce this along with the expected results versus the actual results? That way I can better contribute to the conversation.\nI have to catch up on a lot of other issues, so I'll watch for this thread. Thanks.\n. @anonx I read through the related issues and now I see what's happening. Hope most people are using nginx or the like :disappointed: \n. This looks very nice. Thanks! The Travis CI tests seem to be having some issues still, but the code looks good :+1: \n. @pbnjay can you tell us the steps to reproduce this issue and what you expect should happen. I can get this fixed in the code when I know for sure I actually fixed the issue you're seeing. Thanks.\n. @anonx thanks I get it now.\n. @xpbliss I'm closing this since it's not directly Revel related and @anonx did a fine job giving additional resources to look into.\nPlease use stackoverflow.com for questions like these that are not related to code issues.\nThanks!\n. @xpbliss @anonx are you sure your environments match? Specifically the file/folder structure? Perhaps some steps to reproduce are needed.\n. :+1: \n. @pedromorgan it may be better to use the wiki to track bugs of bugs aka a table of contents of current issues much like we have begun doing on the wiki's roadmap page.\n. #827 should help use decide what we'll work on per release. @anonx I agree on deadlines. We had agreed to every 6 weeks before (https://github.com/revel/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed), but volunteer effort often comes in waves.\n. @notzippy by forums do you mean the mailing list or stackoverflow.com?\n. @xpbliss I assume you're asking about cross compiling? I also assume you found the answer you needed since you closed this issue.\n. @xiam thanks for the detailed steps to reproduce! Every issue should have these details! It makes our efforts so much more enjoyable when the burden of proof isn't only on us (@revel/core).\n@anonx did you test your proposed solution?\n. @anonx can we get a PR? Also, did you leave the @revel/core? I can't assign this to you.\n. @JaTochNietDan @anonx @pushrax I assume this hasn't been retargeted yet? I've added it to my todo list; seems like small changes so should be fast. I'll work on my todos tomorrow.\n. @chengziqing yes, please add more information. I do not understand the title of this issue and how it is related to Revel.\n. @notzippy isn't this already covered in our roadmap?\nhttps://github.com/revel/revel/wiki/Roadmap#v012-see-issues specifically:\n- Improve Revel's logger #316 #554 #557 #676\n. @notzippy I've updated the Roadmap and the logger changes are now in v0.15. Can we close this issue as others cover it or should we add this specific issue to the list on the Roadmap?\n. @anonx no reason we can't do another patch as long as it's not a breaking change. That's the point of patch versioning :)\n. @lozandier I'd be interested in seeing what you come up with. I have no experience with JWT, but I've heard of them and I'm always curious about applying new technology for great good ;)\n. :+1: This is exciting. Thanks for contributing your talents @arahansa !\n. @notzippy I haven't given it any detailed thought yet. I would want to see all pending RFCs in one view unrelated to target version. Target version would only matter when scheduling  the priority of the item on the Roadmap.\nI'm open to further discussion as far as how to go about this. Perhaps I can work on it this weekend.\n. @pedromorgan you're insane. I think I like you.\n@anonx we should start with new complex features. We already have some pretty massive conversations here on GH, for instance #458. We MUST force our contributors, code, feedback or otherwise, to be more strict with how their thoughts are organized. RFC's would provide a structure that we MUST have if Revel is to make consistent forward movement. I don't see RFC's being used ofr existing features anytime soon, though we could consider it after we reach v1.0.\nJust a note that our crazy Welsh team member, @pedromorgan has made great improvement to the Revel website (pending PR) at revel/revel.github.io#43 which should address some of your concerns with better documentation. That said, we can definitely improve understanding of the lower level code details as well. I feel our efforts to better encapsulate and modularize the code base will help us immensely in that sense. That change alone will make our code base more mentally perceivable.\nI have now added the RFC repo: https://github.com/revel/rfcs\n. @pedromorgan people don't follow our guidelines as it is. We really need better structure. It takes a lot of mental effort (at least for me) to fully understand and issue and then move on to understand the issue again for countless issues. The RFC framework will, as @anonx said, will allow us to more clearly communicate needs and solutions.\nAlso, RFCs are only intended to be temporary ways to collect software requirements aka specifications. These will be used to code an implementation that solves the correct problem. RFCs are not intended to be documentation of how Revel works. The manual, godoc and code serve that purpose.\n. @notzippy can you please provide steps to verify that this works from a new app to the expected results?\nPlease & thank you.\n. @anonx @notzippy importing module routes is in the Revel manual under \"Routing Modules\".\n. @pedromorgan what do you mean \"referinging stuff\"?\nDon't merge into master, that would break our workflow. The Roadmap for v0.12 has been reduced, we just need to finish it up and then we can merge into master and release develop. There isn't much effort needed before we can release v0.12.\n. @notzippy No, this PR is not the correct way to go about loading i18n files in modules.\n~~We can still use this PR, but we need to make some changes.~~\n~~TODO~~\n\n[ ] ~~Track a MessagesPath in revel.go's func addModule(name, importPath, modulePath string) that i18n.go can search for messages files.~~\n\nI'm rescheduling this for the next release as we don't have time to update this PR and reverify it. v0.12 needs to get buttoned up and out the door.\n. @anonx @notzippy I'm thinking that we have a user configurable MessagesPath that is searched for message files. We may also have a single user configurable flag, such as SearchModulesForMessages, that would then adds all detected modules' path to MessagesPath.\n\"Separation of Concerns\" seems like a good pattern to follow in general and this is an opportunity to use it. Agreed?\n. Thanks @notzippy and @jeevatkm for feedback.\n. :+1: great thread with good amount of details. I like the screenshots. This is a fine example of community collaboration! Great work @anonx and @amlwwalker !\n. So it seems to be a Windows specific issue. Someone will need to trace the code on Windows and find out why it's acting differently.\nTODO\n\n[x] trace Windows runtime panic code to find out why it's taking a different code path\n. I have confirmed that Windows is handling panic(\"123\") differently than Linux with a brand new app (revel new test and revel run test).\n\nFurther, I discovered that this issue has been around for over a year. #260 has already documented that Windows file paths are not being evaluated properly and are always causing the raw stack trace to be displayed. This means that Revel is unable to display anything other than the raw stack trace as neither the template for a dev mode error page nor the template for the simple production 500 page can be loaded.\nTODO\nIn order to ensure that this sensitive debug stack trace is NOT shown in production mode, we need to:\n- [ ] add an condition check on revel.DevMode for ERROR.Print(err, \"\\n\", string(debug.Stack())) inside of the above cited line in panic.go\n@anonx @pushrax please sanity check my findings.\n. @yanlinpu please explain what you're trying to do so we can help you. I'm closing this until we hear from you. Thanks.\n. @pedromorgan do you want to create a PR to address this change? We should also document this (as mentioned above).\n. Booking sample app demonstrates how to use gorp.\n- http://revel.github.io/samples/booking.html#database--gorp-plugin\n. This should be in v0.14. I'll move it.\nFor now, the sample app will have to do.\n. @anonx have you tried reproducing? I wonder if this is a Go 1.4 issue.\n@opennota can you give us steps to reproduce. Does it happen with a brand new app? What commands do you run to reproduce the error? Have you tried on Go 1.3 as well?\nThanks.\n. @anonx a Revel timeout seems wise. Nginx does manage request timeouts.\n@opennota IE and other browsers probably have a minimum idle connections to an \"active\" domain and will probably open connections until it meets that minimum. It seems browsers open a lot more than 8 simultaneous connections.\nI see 2 problems that Revel has to handle directly when not using a front-end proxy like Nginx:\n1. Manage the maximum number of keep-alive requests. We already close each request, but the connection is the real issue, not the request.\n2. Set a maximum number of simultaneous connections Revel will accept at once and reject the rest (i.e. after 32 requests, it returns a 503). You could also not set a max and just let the requesting client wait or timeout itself.\nDDoS is still possible, but at least it's configurable. It looks like @opennota's use of ReadTimeout will allow us to better control how long a connection exists before it meets its timeout deadline. FYI, deadline is extended at the start of every request that a connection sends. See this stackoverflow question.\n. @opennota I don't understand how 1 client has 96 connections. What client is it? I've never seen that! Are they local connections or via the internet? Is it on a domain name or IP address?\n. @opennota if it was a bot, then that makes sense, since major browsers are coded to respect RFC guidelines (to some degree).\nThis does bring up a good conversation about limiting connections though. The easiest solution is toput a front-end proxy in front of Revel. @pedromorgan we should make this clear in the \"deployment\" section of the manual. Revel does NOT have connection/resource management and all production deployments should have a HTTP proxy that is properly configured in front of all Revel HTTP requests.\n. @pedromorgan it's planned in v0.15, but it's not as important as other features. The current custom format(not CSV) is proven and working.\nMaybe we can visit #536 and #358 in the next release to support subdomains without rewriting the router for other formats.\n. Built-in properties may not be the correct name. Perhaps \"Supported Config Properties\"? There is nothing wrong with them being overridden. No worries there unless you can think of a problem.\napp.conf is loaded in revel.go Init()\n. Revel's README suggests StackOverflow for these sorts of questions.\n. @tomodian can you submit a PR so we can merge this fix? Thanks!\n. @CipherChen http://revel.github.io/tutorial/gettingstarted.html#build-the-revel-command-line-tool\n. @anonx That net/http issue I mentioned was committed almost 2 years ago it seems. Why do you ask?\nIf it's not working how we hoped, then what do we do? Is it possible it does work as expected, but not for web socket connections?\n. @anonx are you connecting directly to Revel or via a proxy? Are you binding to localhost or an IP? I wonder if this is an issue with the WS library we're using? Can you verify what your Go runtime's src/pkg/net/http/server.go file contains on line 419 versus the diff we're looking at?\n. I have confirmed that the read/write timeout on revel.Server does affect websocket connections, too.\nI made the following changes to server.go:\nfunc handle(w http.ResponseWriter, r *http.Request) {\n    upgrade := r.Header.Get(\"Upgrade\")\n    if upgrade == \"websocket\" || upgrade == \"Websocket\" {\n        websocket.Handler(func(ws *websocket.Conn) {\n            ws.SetDeadline(time.Now().Add(time.Second * 10))\n            var msg = make([]byte, 512)\n            if _, err := ws.Read(msg); err != nil {\n                ERROR.Println(err)\n            }\n            WARN.Println(time.Now(), string(msg))\n            r.Method = \"WS\"\n            handleInternal(w, r, ws)\n        }).ServeHTTP(w, r)\n    } else {\n        handleInternal(w, r, nil)\n    }\n}\nI noticed that WARN.Println() is only called once on the initial websocket frame. The key was to set the deadline of the websocket connection via ws.SetDeadline(time.Now().Add(time.Second * 10)) which sets it to 10 seconds into the future. I tried longer intervals into the future with great success.\nIdeally, we want to extend the deadline for each websocket frame, just like the net/http server does, but I'm not sure the best way to accomplish this. It seems the websocket Codec may be the proper place to do this.\nI've created a PR to collaborate on this solution: #860.\nPS - I don't think a WS connection should timeout ever, unless it's by inactivity, which is not what we're seeing with this issue.\n. Solution noted in #860. This PR is done done.\n. @klauspost thanks for this! I have been putting off learning docker. I should try this out soon.\n. I'm not sure Revel should have these kinds of benchmarking tools built-in when there are more comprehensive tools already in existence, though this is very imaginative.\nAlso, it's nice that you're giving us an example of how RFCs could be used along side GH issues, but we must use our RFC repo to manage this information in order to maintain clear structure.\n. @pedromorgan file a RFC explaining the problem you're trying to solve and why we should care about it. Thanks.\nPS - what are you talking about \"switching everything here over to develop\"?\n. Checkout #153 and https://github.com/revel/cmd/blob/develop/harness/harness.go#L154-L161\n. @pedromorgan do you have a use case for this? If not, let's close it.\n. @nxtuong7488 I hope you found your answer. If not, feel free to join us on IRC or post to StackOverflow.com and tag your questions with revel. We try to keep github issue focused on core development topics rather than app development. Thanks!\n. @xpbliss this would be a good candidate for an RFC (revel/rfcs repo) describing what problem needs to be solved and why we should care.\nAgreed @anonx @pushrax @pedromorgan ?\n. @evalphobia thanks for contributing to Revel!\nCan you please provide steps to reproduce the issue and test the code? Thank you!\n. @evalphobia this looks great! These steps will make it much easier to confirm all is working as expected.\nI've scheduled this for v0.13 and added to the Roadmap.\n. @sevki thanks for contributing to Revel!\nPlease retarget your PR to the develop branch per our contribution guidelines.\nAfter the PR is targeting the correct branch, I would like to know the steps to reproduce this issue so we can confirm what problem is being solved and that it is working as expected.\nThank you!\n. @roblillack thanks for contributing to Revel!\nPlease target the develop branch per our contributing guidelines.\nAfter that, please provide steps to reproduce so we can ensure the problem being solved is working as expected.\nThank you!\n. @sevki thanks for contributing this and sharing the details of the issue. This will be included in v0.12 once the scheduled roadmap items are completed.\n. :+1: good work @anonx thanks!\n. @pedromorgan I already agreed on the YAML file idea in #418. We'll want to add a revel version command also.\n. Do we want a custom domain for our Github Pages site or do we want a Go-based Revel site and then stop using Github Pages?\n. @pedromorgan Did you purchase revel.io? I remember that being expensive.\nI don't want to use python. I'll setup nginx for shared hosting setup.\nI purchased a Digital Ocean VPS for $5/mo and setup revelframework.com (we also have .ORG and revelgo.co). I'll install all the software tonight. Please provide your public SSH key and I'll add it so you can login to the VPS.\n. Revel is running: http://revelframework.com:9000/\n. @revel/core we need to schedule a meeting to get initiatives like the new revel website moving forward. How's 9pm PDT?\n. @notzippy sorry, I was thinking Friday, today.\n. @notzippy we have the next proposed meeting time in our wiki. So if any of us want to know when the next meeting is, it should always be proposed here: https://github.com/revel/revel/wiki/Meetings\n. @pedromorgan no matter where we put the meeting time, the problem is getting everyone to meet. It's hard due to varying time zones and personal schedules. For example, becuase you're on UTC and we're on PDT, we have to find a day when some can meet at night and you meet with us in the morning. Then we have EST members too or @anonx in TX, USA.\nWe need to find a good day and stick to it.\nI'm considering some form of agile dev sprints and tackling a small subset of features or fixes on a per week basis. To do that, we need to get organized first and that needs to happen soon.\n@revel/core do you have any good ideas on how to coordinate schedules? Perhaps a shared Revel Google calendar?\n. @davidhunter contributions are welcome, but the core team needs to work together and in order to do that we need to communicate effectively and regularly.\n@revel/core email revelframework AT gmail with your google account email so I can share a calendar and setup a hangout.\n. I'd say this is now ready to merge. We can add a revel version command soon. @anonx @pushrax any feedback?\n. @revel/core I may be losing my mind, but is it even possible to consume the version.yaml file that we added? @pedromorgan is this consumed by the website or docs? Why did we add this? We should add a comment to this file as far as what it's purpose is.\n. @pedromorgan ok, could you provide more info for how we can make use of it? For example, the yaml file is not included in the revel package command, should it be?\n. @arvenil thanks for bringing this up. It seems @robfig noted some TODOs that touch on this trace you're seeing. The message itself is not very clear and could be improved.\nI'll close this for now since it isn't a breaking issue, but we'll have to improve this soon. Thanks!\n. Actually, I think we should keep this open and just assign it to the backlog, that way we'll come back to it later (rather than hoping we do sometime in the future).\n. @jinchizhong we'll need to test this issue to see if we can reproduce it. I can't do that now, but I'll try to soon.\nIn the mean time, can you try something like:\ngo\nfunc (c Test) Index() revel.Result {\n    xxx := \"test string\"\n    return c.Render(xxx)\n}\n. I tried my xxx suggestion above in Revel v0.12 and Go 1.4 on Mac OS X and it works fine.\nI'm going to close this unless it can be proven. We could schedule a time to talk on IRC if needed to confirm the issue.\nThanks.\n. @xpbliss I edited your comments to format the code samples. It makes it much easier to read. Please try to use the code formatting in the future :)\nAs far as your question...\n\nbut when i read the file and let's a template file. revel always says \"template: :165: function \"addOne\" not defined\n\nWhat do you mean \"read the file\" and \"let's a template file\"?\n. :+1: \n. I tend to agree with @pushrax on this issue. I don't much like catch all routes like this. I would remove the current catch all instead of adding another.\n. @carc1n0gen thanks for taking the time to share this with the community. I'm closing since it's an easy change for a dev to make themselves.\n. I wish I could help, but I have not tried running Revel on Heroku. If I have time in the near future, I can try myself, but in the mean time, please investigate further and share any findings here.\nThanks!\n. @pushrax @anonx Is there anything we can document from this issue to help others?\ncc @pedromorgan \n. @anonx added that 2nd link to Articles as the other 2 were already there.\nAs far as using Heroku and the like, it may be a matter of inexperience and/or ease. Also, if Heroku is the preferred platform for a project, could they deploy binaries? I don't know, but my gut says you can't.\n. Thanks for this @metafex! I want to verify your testing just to be careful, but this looks good at first glance.\n. @pedromorgan anyone can create a test to verify this. Anyone who has time that is. Hopefully it'll be done soon.\n. :+1: this looks great @anonx! Didn't even think about TravisCI config. Good catch.\n@revel/core Thoughts?\n. @pedromorgan there is no dodgy. Everything we merge should be confirmed as working and ideally have automated unit tests.\n. @anonx in this case we'll need manual peer testing to confirm all works as expected and that there are no regression bugs. That's all.\n. @notzippy @pushrax @pushrax I added a test to cover this issue and merged it as #870.\n. Wrong branch (of all people to do this!)\n. I am increasingly concerned about the naming of this package. binding is not concerned with \"data binding\" in the common definition of that phrase (2-way data binding to keep UI up to date with underlying data models and their attributes).\nIt is, as documented in the manual, concerned with converting Go types to and from strings.\nIt seems the most familiar naming to adopt would be marshalling as that is what data conversion is called.\nAssuming we can all agree that this is the best thing to do, we can leave revel.Params.Bind() as is for now so that we don't break the exported Revel API (yet). This seems practical since the code subject to this PR is not exported (func binderForType()) for use by app code.\nThoughts?\n. @birkirb we can get this merged for v0.13, but first you need to target the develop branch.\n. Added PR for correct repo. Thanks @tw4452852!\n. revel-determinator??\nLaughing?\nWe can start using the domain, but we should release v0.12 first. What do you want to use it for right now?\nYou are a crazy Welsh. It's hard to understand what you're saying sometimes, but I've created a meta repo for you to experiment. Hopefully then I'll see the value of your idea.\n. I don't understand what you're asking. Move develop into next?\nI'm focused on finishing the new subpackages and then we can release v0.12. I assume this is what you want.\nNot sure how you are being held up on docs. You want to release docs now and it can't wait?\n. The only delay is getting develop merged into master. I'm trying to get the roadmap as complete as possible before releasing v0.12 (especially the new subpackage roadmap items).\n. @metafex I'm very curious to look at this in more detail! I'll try to reply tomorrow after work, but first, sleep. :)\n. :+1: great PR\n. @pbnjay #855 has modified these lines. Could you review it and retest with the latest develop?\n. :+1:  this looks thorough, but deserves more focused consideration.\n. @anonx I hope we're not going to run into similar issues we've had in the past with this topic (#745 #395)\n. @huacnlee this is a great contribution!\nSide point, we do need the PR to target develop instead of master. I can do this later since this feature is on our v0.13 roadmap.\nI'll probably end up writing an RFC to spec out the details for how this will end up working, but this is a good foundation to build on.\n. @huacnlee yes, please create a PR that targets the develop branch. Thanks!\n. I want to get this included in v0.12, which I'm trying to button up now and release.\nHowever, I don't like that this overrides the filter ordering. I feel strongly that this should be controlled by the filter ordering as defined by the developer. What is your motivation with this change?\n. Ordering is up to the developer and trying to force it to be last breaks the convention that ordering is configured outside of each filter.\nI've created a new issue to revisit this topic in the near future.\nThanks for the contribution @birkirb!\n. @anonx I like this idea.\n@pedromorgan What do you mean mashup fabric into revel? I don't want revel to depend on any other language platform like fabric in python.\n. :+1: \n. I removed @landaire.\n@notzippy I like your roles. It's a great idea, but I'm concerned about people sticking to it. I'd love to define these roles in our wiki and use them for v0.13 and see how it goes!\nAlso, @anonx, I asked our community to use StackOverflow, not our forums. I want to increase Revel's exposure to the general dev community and I don't think a mailing list is the right location to do that. Either way, we do need help staying on top of community activity.\nI added it to my todo list to catch up on the mailing list.\nI am still interested in Revel and do my best despite other obligations.\n@notzippy we have already decided to make reorganization ongoing isntead of blocking further development. @anonx makes good points about not ignoring developer needs over internal organization and code beauty. So, point is, let's keep making forward progress and continuous improvement together.\nWe use to have a weekly team meeting, but people got busy and it was hard to maintain. We also now have to consider timezones as @pedromorgan is on GMT and the rest of us are in US timezones.\nThere are many challenges to face. Some of the biggest is prioritizing the community's requests with our own and then implementing it properly with tests to verify all is as expected.\n@pedromorgan I am strongly against using master. It does not work out well. Too many fires to put out in that workflow. I agree we need more frequent releases, though. I already mentioned on a RFC repo issue that the RFCs are  there to define major changes, like the asset pipeline, not bug fixes and small, obvious enhancements. I feel there is value in planning with RFCs.\nMy biggest goal is getting the weekly meeting going again with our team. From there we can discuss further. long threads like this one can be resolved much faster in real time, and preferably via voice instead of text. Can we do this weekly?\nPS - @anonx I've invited more contributors to join core team (we'll see who joins):\n- @jgraham909\n- @tmbrggmn\n- @iamjem\n- @anonx \n- @klauspost \n- @ottob \n. @revel/core https://github.com/revel/revel/wiki/Core-Team#proposed-roles We should finalize these roles  soon.\n. This needs to target the develop branch per our contribution guidelines.\n. @notzippy this is a good idea. Some more:\n1. Show a live, stacked progress bar(linked to foundation framework because I like its markup better than bootstrap :)) of test results\n2. Add animations to indicate status (e.g. blinking green when running)\n. This is closed due to moved modules repo. See revel/modules#12\n. :+1: \n. :+1: \n. :+1: @anonx Yes sir, I'll add this to the roadmap as well.\nThanks for your hard work @grsmv!\n. @grsmv I edited the title as I think you meant PutForm not PostForm. Correct me if I'm wrong.\n. Looking to merge this now and release v0.12. Our docs GH Pages repo has already been merged.\n. Good catches @anonx. @pedromorgan is taking ownership of the docs. I agree that the styling can be improved.\n@pedromorgan can you fix the above 3 items noted? After that, we can resync develop branch with master via git pull and move forward with additional changes in develop. If we need to make patch releases to master in between major releases, then that's fine, but let's still use our version control workflow.\n. We need to make sure that asset pre-processing is pluggable. This PR uses node.js and external tools to compile assets, but I would much rather not introduce such dependencies.\nHere are so native Go libiraries:\n- HTML\n  - HAML\n    - https://github.com/dddaisuke/go-haml\n    - https://github.com/realistschuckle/gohaml\n    - https://github.com/eknkc/amber templating inspired by haml/jade\n    - https://github.com/travissimon/ghaml\n  - Slim\n    - https://github.com/yosssi/ace templating inspired by slim/jade\n- CSS\n  - SASS\n    - https://github.com/moovweb/gosass\n- Javascript\n  - CoffeeScript\n    - https://github.com/jashkenas/coffeescript/tree/master/src (we would need to port this logic to Go)\nWe can start by using external commands, but I would really like to use native code and we can transition to this goal gradually if the asset pipeline is modular.\nI can start an RFC to define these points and use this PR as a starting point/reference.\n. @huacnlee  www.github.com/revel/rfcs\nI see what you mean that production doesn't require it. Sounds good. I'm happy to merge this into develop and build on it.\n@revel/core thoughts?\n. @huacnlee thanks for the sample app!\nThe code looks very well made :+1: \n. Looking at this again, why add this directly to Revel when you could just use the node tools? There are many asset precompiler tools in use these days.\nI'm leaning toward not adding this to Revel. @revel/core thoughts?\n. :+1: \n. @anonx I noted the new import path. Also updated the README.md and switched the TravisCI branch to master.\nWe need to figure out a clean way to switch the Travis branch during release. For now, we'll just have to switch it back to develop after the release. Any better ideas?\n. @anonx Should it be 0.12.0 or 0.12.0rc or what?\n. @anonx I agree that v0 means we've yet to reach the desired foundational features.\n@notzippy I'm good with plain 0.12.0, but we may want to discuss a release candidate workflow to make releases more often as @pedromorgan has recently asked.\n. @anonx BUILD_DATE refers to date of release in my mind. Thoughts? I've updated both date and version number now.\n. @jniltinho thank your very much for your gratitude! It means a lot to me (and us) to have positive feedback from fellow developers :)\n. @notzippy :100: agreed. I just mentioned this to @anonx in the v0.12 PR regarding the cmd repo.\n@notzippy Can you set these up? We should setup matching milestones, too. This may not apply to the samples repo, though. Thoughts?\n. @notzippy https://github.com/revel/revel/wiki/Meetings#agenda Added.\n. @pedromorgan cmd, modules, samples all tagged with `v0.12.0.\n. @rtm7777 I noted the same thing locally, but didn't create an issue for it yet, so we'll use this :)\nThanks!\n. This has been merged. Thanks all!\n. Try running go get github.com/revel/cmd/revel and make sure your $GOPATH /src folder has github.com/revel/modules in it.\nI looks like you're running an old version of revel. Can you provide reproduction steps?\n. @anonx Noted in release Thanks!\n. Excellent! Thanks for helping u improve Revel! @jniltinho @xpbliss\n. Sorry @xoen, but once an issue is closed, we can't answer it. Please open a new one.\nJust kidding. I'm reading your post now.\n. > panic: Failed to load routes file: open /app/.go/src/github.com/revel/modules/testrunner/conf/routes: no such file or directory\n1. Does this file exist?\n2. How are you running revel?\n3. What is in your conf/routes?\n. Perhaps you need to remove github.com/revel/modules and go get github/com/revel/modules to retrieve the missing file? I'm not able to test this right now since I'm not at my workstation, but it's something to try.\n. We should test this further to see if we can reproduce the issue. Would you be able to create steps to reproduce this from a brand new Revel app (revel new testrunnerbug)?\n. How curious. Would you call this a bug or an enhancement? I lean toward bug.\n. ## TODO\n- [ ] verify testrunner route is ignored in non-dev modes\n- [ ] find root cause of testrunner error in non-dev modes\n. @anonx good observations.\n. @huacnlee why did you close this? Also, what is the purpose of SYSINFO?\n. Nevermind, I see you targeted the master branch.\n. So, what is SYSINFO for?\n. @huacnlee what about just making the log prefix values configurable via app.conf instead of adding an additional log level?\n. @anonx I see that the revel loggers get init'd and then replaced via getLogger() in revel.go.\n@huacnlee are your log screenshots cropping out the log prefixes?\n. @huacnlee so this PR just removes the \"INFO\" prefix? I'm not sure that is a good thing or not, but all of your other changes are good :+1: \n@anonx any comment on removing \"INFO\" prefix?\n. We'll get this in v0.13. Thanks @huacnlee!\n. @1lann thanks for taking the time to detail this issue. The next step is to confirm this by testing independently to confirm your issue.\n. @huacnlee I think this is a simple solution and I am tempted to merge it, but some good points have been made here about avoiding magic via conventions (e.g. this method will actually end the request if you call it). It's better/safer to explicitly return a value.\nAs far a a user auth filter, I would actually recommend a BEFORE interceptor myself.\nI'm going to close this PR for now for these reasons. Thanks for contributing!\n. @anonx @pedromorgan should we reopen this to make sure package manager gets added in next release?\n. Closing this due to age and low priority.\n. @anonx no doubt you'd get over it and go write another framework :) Glad you made your membership official. Revel sorely needs active devs like you.\nPS - we broke 5,000 GitHub Stars!!! W00t!\n. @jniltinho excellent! Let me know when it's up and I'll add it to our Apps in the Wild wiki page :)\n. @revel/core who changed the label colors on revel/revel? If we make changes, we should at least be consistent across our repos.\n. @revel/core alright, so declined label was also removed...what's going on? We have a workflow that we need to stick to. Any changes should be discussed and accepted by the whole team.\n@pedromorgan did you make these changes?\n. @pedromorgan ...?\n. @notzippy I want to implement your idea of roles for #892. Which role would you be best at? Would we rotate roles?\n. @jniltinho already in the current target version pluggable template engine\n. Closing this as duplicate of #99 and #123\n. @pedromorgan no, they have their own repos. I don't see a need to keep their code in our own mirrored repo, do you?\nAlso, I put this in the backlog, but it may not get much attention if it's there and not in the roadmap.\n. @notzippy indeed it is :confounded: \nEDIT: however, this could be delivered later as an add-on and the pluggable template part could be done just to port the current Go template support to a new interface. @revel/core thoughts?\n. Huh?\n. You guys concern me :)\n. :+1: this is ready for contribution if anyone else has time to do this.\n. tagging revel/rfcs#4\n. After reading this entire thread, I think it comes down to separating compile time and runtime configs, right? If so, I agree we should do that.\nI actually made a similar note about modules and how they should not be part of the runtime config.\nSo the question is, how do we make module inclusion configurable at compile time? I lean toward Go code instead of a modules.conf.\n. @notzippy I think I see some value in config files. I'd like to explore this more soon.\nPS - I'm back >:)\n. @notzippy thanks. Sorry to hear about your hospital stay. Hope you're resting up and feeling better.\nSeems we've lost @anonx due to our inactivity. Last time I spoke with him we decided to simplify our goals and focus: https://github.com/revel/revel/wiki/Meetings-2015-04-16 .\nAs far as the topic of this thread, I feel like modules don't add much value for a developer. We don't have a module ecosystem that really takes advantage of the plugin and play potential. I'd rather focus on the priority list mentioned in the meeting notes I just mentioned.\n. If it's just a mirror then there's no gain. Where are you that would cause golang.org to be blocked by a firewall? Closing for now.\n. @anonx what is vendor? Perhaps https://github.com/kardianos/vendor ?\n. Can you provide steps to reproduce this from a fresh revel new testapp?\n. Defaults have been added and can be overridden now. This issue should now be resolved.\n. I marked this accepted, but I wonder if this is the right solution.\nThis is the same issue as #260. See also #270 #505 \n@revel/core comments?\n. Deferring this as it is low impact/probability and we know of a better solution. Just need to do it.\nTODO\n\n[ ] implement platform independent path separators\n. @revel/core thoughts?\n. @tvvocold could you explain what we gain from this?\n. @tvvocold thanks for the offer, but at this time we can't afford the resources to manage another portal for our project. Closing for now.\n. :+1: good communication and code samples @anonx @KidFeng A fine example of working together to solve problems.\n. No action items here. Closing.\n. Overall, good enhancement. @anonx is there anything specific we need to discuss?\n. @kurtzhong @wangmingjob  Are you in China? See #926.\n\nI'm closing assuming that your access is being blocked. Re-open if this is not the issue.\n. @kurtzhong Thank you for the additional details and work around. I appreciate it!\n. :+1: \n. @anonx would it be better to have the default be a sane value? No timeout seems dangerous for a default.\n. @bejayoharen time will tell what is the bet solution, but I feel if we make it clear that file uploads need a 0 timeout, then it wouldn't be bad to have safe defaults, like 60 seconds. Having no timeout makes a web app more vulnerable to DoS attacks, on purpose or on accident (high traffic spikes).\n. PR #943 fixes this.\n. :+1: \n. :+1: \n. :+1: \n. You're on a roll @goors! Thanks for sharing! :100: \n. If you have more helpful info, please reopen. Thanks.\n. I wish I knew from experience, but I've never tried to use the build pack.\nHave you looked into the .godir requirement?\nReopen if you have more helpful info. Thanks!\n. Thanks for starting work on this @ptman, we'll add this to our todo list.\n. Thanks @bertzzie for the additional info and @chrislearn for the initial issue. We'll add this to the backlog for later consideration.\n. :+1: thanks for sharing your fix!\n. Put in the backlog for later consideration. Thanks.\n. :+1: thanks for sharing your fix @goors!\n. Thanks for sharing the work around @xoen!\n. @PabloK did you read the manual?\nClosing due to lack of action items.\n. RAML looks interesting. I'm all about industry standards that can be supported by many tools. We'll have to prioritize this for release, but there are many other features in front of this.\n. Please go to stackoverflow.com for help on this issue. It doesn't seem related to Revel and I don't have enough time to help you with this problem. Sorry.\nThanks!\n. :+1: thanks for sharing your fix @mrkaspa!\n. It seems your SO question has not received any answers. Perhaps you can provide some steps to reproduce the issue from a new Revel app?\nYou can provide steps here and we'll determine if it's a Revel issue.\nThanks!\n. If you don't want to see warnings, then disable the WARN level. Overwriting Params isn't ideal.\n. I'm going through PRs now and have been progressively over the last few days. @alkout @DavidHunter \n. No action items. Closing.\n. What is the benefit of this change? What does it all your to do that can't be done now?\n. :+1: team work! The crowd wins again :crown: \n. Due to the common use of wildcard IP addresses, the best thing to do is add some app logic to your code that records os.Hostname().\nThere isn't an ideal way to change Revel's server.go to  use a specific IP address from a list of available IPs.\n. @nirmal85yadav any progress on this. I don't use GAE and have yet to try.\nI'll close this issue assuming it's been handled.\n. PR'd Thanks!\n. @onlyjob v0.13 is due out soon.\n. @pedromorgan yes, the controllers folder is recursively loaded:\n1. Check Code Paths\n2. Harness Build Command\n3. Loads all Go files\nFrom there, it's based on Go packages, not folders (which is why the controller names need to be unique). The folders are only there for organizational purposes. I'm 99% sure all the above is accurate :)\nThere has been other conversations about using modules to further organize app code, which should allow for name spacing of controllers essentially, but that's a different conversation for another time.\n. Closing as there seem to be no action items here. Thanks all.\n. Oh dear, there seems to be an error:\n```\ngithub.com/revel/revel/cache\ncache/inmemory.go:48: undefined: cache.ErrKeyExists\ncache/inmemory.go:62: c.Cache.cache.Delete(key) used as value\ncache/inmemory.go:69: cannot use n (type uint64) as type int64 in argument to c.Cache.cache.Increment\ncache/inmemory.go:69: assignment count mismatch: 2 = 1\ncache/inmemory.go:70: undefined: cache.ErrCacheMiss\ncache/inmemory.go:77: cannot use n (type uint64) as type int64 in argument to c.Cache.cache.Decrement\ncache/inmemory.go:77: assignment count mismatch: 2 = 1\ncache/inmemory.go:78: undefined: cache.ErrCacheMiss\n```\nLooks like a little more effort is needed. I can't look into it now, but if anyone else can, please chime in. I'll come back to this eventually, yet community support is welcome :dancer: \n. This has been deferred to the backlog @onlyjob due to incompatibilities.\nTODO\n\n[ ] compare performance benefits of original repo vs robfig's fork\n[ ] determine if it's worth forking the original repo into revel's GH org in order to apply robfig's changes.\n. @runner-mei localAddress is derived from HttpAddr which is configurable based on http.addr in the config file. Why would you add a new config param?\n\n@alkchr @revel/core  am I crazy?\n. This sounds exciting. I'd like to run some tests before we merge. I'd also like to see if there is a problem that I can fix in the compress_test.go that you mention. I'm unaware of any specific bugs there.\n. @klauspost the compress_test.go benchmarks work for me:\n$ go test -bench=.\nPASS\nBenchmarkRenderCompressed      30000         42463 ns/op\nBenchmarkRenderUnCompressed    30000         41268 ns/op\n...\nThere was an error in BenchmarkInvoker, but that seems unrelated here.\n. @klauspost How do you know it's not applying compression?\nWhen I test this PR I get an improvement:\nBenchmarkRenderCompressed      30000         40650 ns/op\nBenchmarkRenderUnCompressed    30000         41156 ns/op\n. A test use case would give me some good understanding into the intent of this change. Can you provide an example usage?\n. Looks like a harmless change, but what is the benefit?\n. All, we're going to have to rework the roadmap as there isn't enough regular development on Revel to achieve the roadmap in reality.\nI'll likely break it down into a list of priorities without specific release commitments.\nI'll be dedicating a few days later in December to getting Revel reorganized. Any help is appreciated. I'm in IRC most days now.\n. @xpbliss @jeevatkm has joined @revel/core and a sponsor has come forward to help get Revel moving again.\nWe'll have to push back template plugin support due to limited dev resources and the need to release the current develop branch.\n. A IS software company from Prague. I'll share more soon.\n. With HTTP compression, I don't see a benefit to shortening names. Descriptive names are good for humans, compression is good for load time/latency.\nI'm closing for lack of action items. Feel free to prove the value of this idea.\nThanks!\n. I've never heard of class names being an issue for copyright. At the very least, you can use your template function in your app.\nIf it is a common need for most of our devs, then we could add it.\nThanks for taking the time to discuss ideas to improve Revel.\n. @runner-mei we're working to review, document, and release this in the next week.\nAre you available to help with this process or should we take over this PR?. #1136 is taking over this PR. Let's collaborate there. Thanks @runner-mei !. Please consider asking future questions on stackoverflow.com with the revel tag. Thanks!\n. #659 #963 \n. You have a type: \"appliation\".\nHow does this affect performance? Can you cache results?\nPerhaps we can discuss this later and even add it to Revel. You might consider a PR. Also, we recommend using the RFC format in revel/rfcs to outline the reasons for adding this to Revel.\n. Thanks for sharing your outcome. Please consider using stackoverflow.com with the revel tag for future questions.\n. I restarted the build a couple times @alkchr and it had some issues, but it doesn't seem related to this commit:\n```\ngolang.org/x/sys/unix\ngithub.com/bradfitz/gomemcache/memcache\ngithub.com/garyburd/redigo/internal\ngithub.com/garyburd/redigo/redis\ngolang.org/x/sys/unix\n../../../golang.org/x/sys/unix/asm.s:8 6a: No such file or directory: textflag.h\ngithub.com/robfig/go-cache\nThe command \"go get -v github.com/revel/revel/...\" failed and exited with 2 during .\nYour build has been stopped.\n```\nIt seems there is an issue with Go 1.3, but #1023 added Go 1.3/1.4/1.5 and it passed with no errors.\nI'll merge into develop branch and we'll do some more tests when we release to master.\n. The Travis tests for develop passes for Go 1.4/1.5 and fail for 1.3. It seems removing the sleep lines caused this since the #1023 tests passed before?\nNot sure what to say about that. Will need more testing to see if there is something we can do to fix it or not.\n. Like @mattbaird said, it isn't a Revel issue. It's been discussed before here and elsewhere.\nClosing this thread unless there is actionable changes in Revel's code. Thanks!\n. @dreadiscool thanks for all the digging and rich details. The video is definitely helpful.\nSymlinks are a frequent issue we're having now.\nI'm 99% sure Revel doesn't do any sort of caching.\nWhat I would do is start in the static module serve code and follow the path through it. I'd be curious to see what data is being returned.\nI would try another browser and try serving the file with another HTTPd (e.g. nginx). I ran a test on my side by creating a soft symlink (ln -s ...) inside my public folder and I created a test.js which I accessed in Chrome. I then proceeded to change it and refresh the browser each time. I could not reproduce your issue.\nLet me know if you find more details.\n. Seems like your question is answered @yosualb. Consider asking questions on stackoverflow.com with the revel tag. Also, share your answers if you find a good solution.\nThanks!\n. This is an interesting code quality tool. Right now our rating isn't very high and it doesn't exactly reflect anything relevant to the Revel community. Perhaps we can make use of this in the future.\n. Thanks for sharing your solution!\n. @alkchr how is iterating with an index better than with a range value?\n. Thanks for the info @alkchr I assume range returned a reference to the value, not a duplicate value.\n. @chucklqsun why did you close your PR? Is this feature not needed?\n. @lujiacn I haven't tried this new feature, maybe you can share your findings with the rest of the community? Also, consider seeking answers on stackoverflow.com and tagging it as revel.\nThanks!\n. #963 has a safer solution, though same end result. Thanks @u007 for helping push this ahead!\n. Created revelframework.slack.com\n. Good conversation everyone!\nTODO\n\n[x] update readme.md to require Go 1.4\n[x] update docs to reflect Go 1.4 minimum\n. Just a note, you can delete most of what is included in archives (as alluded to here). The only files that are needed are used at runtime (go source files are not used at runtime.\n. Any news here?\n. We should consider the field name. Revel was inspired from the Rails and Play web frameworks. We can also consider the naming in other popular web frameworks like Node.JS and PHP:\nrequest.ip and request.remote_ip Ruby on Rails\nrequest().remoteAddress() Java Play\nrequest.connection.remoteAddress Node.JS\nRequest::$client_ip and @_SERVER['REMOTE_ADDR'] Kohana PHP\n\nDoes anyone have any preference? I feel there is value in choosing a naming convention that will be familiar to developers who have used other web frameworks.\n. Thanks for taking the time to consider our options on this. Let's merge this!\n. PS - what can we do to document this new API addition?\n. These sort of cross package errors are to be expected. Looks good to me.\n. The skeleton has moved to the cmd repo and this bootstrap class has been fixed there. Thanks for contributing.. Seems this issue is finished.\n. Removing the mentioned code should not be needed.\nThis sounds like a familiar problem with the config. I think testrunner is not disabled properly and it is trying to load it. Can you share your routes and app.conf?\nAlso, what Revel version are you using? Are you running in dev or prod mode?\n. This is a lower priority issue due to its low probability, but it is a problem. I've marked this as a bug, increased its priority, and put it in the backlog.. We've added a solution that will only enable secure cookies if the config declares HTTPS as enabled. Closing this issue now in favor of the PR.. Did you find a solution @hishamwaleed?\n. Can you list the versions of Revel andGo you are using? Can you reproduce this issue on another machine?\n. @lujiacn we discussed this issue as a team and decided the best solution is to change the default value to be based on the availability of HTTPS that way we avoid any negative side effects with Sessions not working.\nThe following change should do it:\nCookieSecure = Config.BoolDefault(\"cookie.secure\", HttpSsl)\nAre you able to make this change or should we take control of this PR?. CORS requires that you respond to the OPTIONS request with the needed headers.\nI've not attempted this in Revel, so I can't provide more info. If you find a good solution, please share here.\nI'll close this issue for now until there are actions items.\n. According to the manual DevMode is set at runtime. However, the revel.go source code sets it based on an undefined app.conf setting called mode.dev and yet the same source file has a comment that contradicts this DevMode bool   // if true, RunMode is a development mode..\nIt seems this is a bug. DevMode needs to be set to true if RunMode == \"dev\" and false if not.\n@revel/core correct?\n. I'm on IRC every day and I answer questions there. I have no time to do actual coding that's why I try to organize core members to assist with actual contributions. Lately I've not even made time to stay on top of github issues.\nForking this repo would be a logistical mistake. Adding more community members to the core team to give them the ability to make decisions as a core team is the correct way forward. The biggest issue with open source project management is getting a consistent core team to stick around. It's like herding cats mostly because people have families, friends, and jobs that are more important.\nIt would be great if we could get corporate sponsors as well. I have recently formed a corporation in the US that I do my consulting under and am planning on sponsoring development through that, but there are still lots of variables. For example, is paying core team members for their work good or would it actually have no significant effect? Would offering enterprise support allow us to fund a full time developer or two? Is there demand there?\nJust some background, @jeevatkm and others have done wonders for Revel recently. Many past core members have gone off to their own web framework projects as experiments. Partly because Revel is missing some active development direction.\nOther logistical concerns are how often we need to release versus what is reasonably achievable. Also, though there are many PRs, not all of them are consistent with what Revel is and needs to be, so there are serious considerations for effects of changes in the code to the community. This requires discussion, but talking to myself has no benefit when I'm not even actively coding for Revel (again I'm just managing the project at this point).\nTL;DR: if you want to join @revel/core step right up! It's not like I haven't tried to organize a team in the past:\n- Open call for core team members\n- Open Call for Revel Core Developers\n- https://github.com/revel/revel/issues/892#issuecomment-84640422\n- https://github.com/revel/revel/issues/917\n- https://github.com/revel/revel/issues/1051\n- https://github.com/revel/revel/issues/816. - https://gitter.im/revel/community?utm_source=share-link&utm_medium=link&utm_campaign=share-link\n- http://revelframework.slack.com\nWe're trying slack and gitter for chat along side our IRC channel. Any preferences?. I think we'll go with gitter as it allows public channels without manually invites. Plus, it integrates well with GH and still has a mobile app.. we'll continue this convo on gitter. So steps to reproduce:\n1. revel new bug\n2. Add go template braces inside of a <script> tag within the app/views/App/Index.html view content\n3. Load localhost:9000 in browser and see incorrectly rendered content\nRight?. Is the current go based templates functionality supported to provide 100% backwards compatibility?. Closing in favor of the above defined hybrid approach to be released with PR #1171. Thanks for everyone's effort on this!. Covered by #1173 . @notzippy I kind of prefer doing that via app.conf if at all. I think our goal should to use convention over configuration.\nIt makes sense that if the module has a tests folder that we make use of it. Are there scenarios where that would backfire or be negative?. @goors I understand your pain. However, you should be able to easily find and replace all breaking changes in your app code.\nAs far as WHY we renamed it, it is not for nothing. revel/revel#622 shows where the thought began back in 2014. We're looking to add a Controller.View to contain template context variables. We're also going to release a new pluggable template engine very soon that has support for multiple template formats and will allow for adding more in the future with ease. See revel/revel#622.\nI hope you see the value in the direction we're going. We're also refining our release process to avoid these jarring surprises. We plan to communicate deprecations caused by breaking API changes in advance.\nThe big picture is that's we're refining Revel's current design now so that we can reach v1.0.0. When we reach v1, we'll ensure that no minor updates have breaking changes.\nThanks for being part of our awesome community!. The key is having local config that does not track sensitive information in version control. Whether you use env vars or other means is an implementation detail.\ni would say env vars are an extremely common approach and it would be good to clearly support it in Revel, perhaps even listing multiple solutions (like your *.conf file).. I think the core issue is getting the OS environment variables into our config through Revel instead of a 3rd party tool.\nEnvironment variables are so widespread that it's poor form not to enable their easy use. For example, AWS allows config values for Elastic Beanstalk apps via env vars.\n.env file is a common convention in other dev environments that we should support. It's not a must, but it would be nice. . @notzippy prefers the current naming because it's before the server starts. We need to clarify further.. Sometimes your init code is not related to a particular controller @alxkchr . @goors did you resolve the issue?. @goors What's your use case for directly accessing the http.Requests? Doesn't Revel abstract access to all related fields (e.g. URL/route, params, etc)?\nIt may not be clear, but this change allows us to use more performant http engines, like  FastHTTP.\nRevel's purpose as a framework is to allow developers to focus on developing application logic without getting stuck in the lower level details. Has Revel failed to provide you with that functionality and, if so, can we improve Revel?\nThanks for being part of the conversation and contributing your time to the community.. @acegishniz I used your example code and tried to reproduce the issue, but it worked as expected.\nHave you tried to isolate the code from the rest of your app to see if it still occurs? It seems like there may be something else causing side effects in your code.\nJust to be clear, the error about the slice index being out of bounds is saying that the paramName is not as long as expected. This would definitely be a bug in Revel's binder code. \nThe issue is that we need to be able to reproduce the bug on our side so we can fix it with some level of confidence.\nWe're very interested in figuring out what caused this error for you. Please let us know!. PS - I've tried post and get methods of submitting the form and setting the checkbox to on and off with the same successful result. I tried on both Revel v0.17.1 and v0.18.0.\nHere's my code:\ncontrollers/app.go:\n```\n[...]\nfunc (c App) Index() revel.Result {\n    return c.Render()\n}\nfunc (c App) Post() revel.Result {\n    var invisible map[string]string\n    c.Params.Bind(&invisible, \"invisible\")\nreturn c.RenderJSON(invisible)\n\n}\n```\nviews/App/Index.html:\n[...]\n<form action=\"/post\" method=\"post\">\n    <input name=\"invisible[32ffb9e6-92d2-11e7-b1bf-54a050de5eca]\" value=\"on\" type=\"checkbox\">\n    <input type=\"submit\">\n</form>\n[...]\napp/routes:\nGET     /     App.Index\nPOST    /post App.Post. will do my best to get that done ASAP.\n. Will update ASAP. Thanks.\n. Done and created new pull request.\n. I sure will.\n. I'll look into supporting UTF-8 strings and see what I can do about correcting that case. Thanks.\nAlso, localized messages would be a great next step for validation. We could have a validation directory in the messages folder which could have modelname.en and modelname.es.\n. I see what you're saying, but what are you basing your measure of what's idiomatic for Go?\n. Alright, I'll get my code in line with the current best practices sometime this week, unless you'd rather scrap this PR for now in favor of reworking the validation system.\n. Is [skeleton] a name or a path? How do you know what your options are?\n. Being picky here; it should be singular because there is only one result. http://robfig.github.io/revel/manual/results.html calls it results, but in code it's revel.Result. Thoughts?\n. You mean CSRF?\n. Why not just do this now?\n. http://en.wikipedia.org/wiki/FIFO First in, first out queue may be a better more concrete label? Thoughts?\n. Good stuff. Comments like this are very valuable. Not so sure about your choice to parenthesize certain comments, though.\n. yourapp/app/init.go: may be better than a \"nested\" comment line. Same for file.go above.\n. Why is this called file.go?\n. Why the padding line?\n. Is there a better method name than this we can use?\n. errS? What's with the funky name?\n. No underscores, go bumpy case.\n. errG too vague. Might as well be err.\n. Paths? Are there more than one? Also, might as well replace args []string with importPath\n. Might as well be generateSecret, don't gain anything by abbreviating.\n. Why are we not inlining these functions? It does make it easier to see the overview, but what else are we gaining? These methods are only ever called here.\n. Hmm, that import convention seems nice and logical. I like it.\nImport path for skeleton sounds good. Would allow us to have some available on GH as well as allowing others to provide their own for the community.\n. SGTM\n. I don't think we should be defining the User model here. What the auth module should do is expect the presence of a User model with a given interface.\nFor example, we should allow the User model to return an identifying attribute whether its field is called Username or Email or Anything.\nThoughts?\n. Should we call this Auth instead? Wouldn't want to confuse developers with this and Session (http://robfig.github.io/revel/manual/sessionflash.html)\n. Why is this defined here? Seems this should just be a context dependent string in the controller. I don't see a use case for this being defined up front/globally for a user.\n. Would this be more clear/obvious if it was called Validate or IsActive or something? Just considering the options.\n. Why Basic?\n. Any reason for the short s variable name? I think it would be better if we tried to use descriptive variable names. Perhaps slug would be better?\n. Is r referring to a rune?\n. Where is this being used once it's set?\n. If you removed references to Session then why is it here? I may be missing your meaning.\n. If I agree with @robfig here. Each template file should be independently indented.\n. Can you add a commit to this PR to remove this as well as any other changes we need to make?\n. You can correct this and add the commit to this PR on your own. The only issue is you have targeted the master branch and not created a topic branch on your fork so any changes you've made to your forked master branch will be included. We need to create a new PR with the relevant commits on a feature branch in your forked repo. See https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed\n. Added this back for documentation purposes. Seems it was removed some time ago. I don't see any problem having a default value; does anyone else?\n. The code currently defaults it to 720 hours anyway (https://github.com/revel/revel/blob/master/session.go#L33).\n. sounds pragmatic :+1: \n. I see what you did here, but I'm not sure if GetLogger is the best name for this variable. Perhaps just Logger?\nEDIT: on 2nd thought, since it returns different results based on the given string, maybe LogTo()? I suppose it'd be good to discuss a logging interface that could be implemented here per our discussion in  #554.\n. is WARN the right place for this error message?\n. I don't mind message, but why not inline it on the errors.New()?\n. Agreed.\n. Agreed.\n. Instead of calling this RestfulForms, what do you think of HttpMethodOverride?\n. Makes sense. :+1: \n. instead of AppRoot why not BaseURL or BaseURLPath?\n. Why was this changed?\n. ./router.go:494: too many arguments to return (https://travis-ci.org/revel/revel/builds/23794147#L143)\nDon't return the result of c.RenderError(). Instead, set c.Result to the result of the render error call. That should do the trick.\n. Perhaps make this part of the else condition of the above if?\n. Thoughts on wasSessionEmpty instead of sessionWasEmpty? My background in objective C is influencing my perspective here. Maybe if sessionWasEmpty is more readable instead of if wasSessionEmpty?\n. Also, why do we track the length of the session before the other filters are executed? Is it possible for the session to be cleared by a filter?\n. I think he's trying to follow the er interface convention. Personally, I don't care too much for forcing conventions, but if we want to follow that convention it would make more sense to call it TemplateParser.\n. I don't think it does.\n. Looks like it http://golang.org/pkg/html/template/#New\n. :+1: \n. Thoughts on \"Supported Methods:\" instead of \"Allow:\"?\n. Why 2 lines instead of 1?\n. should we fork this?\n. What happened to the !?\n. Having a hard time understanding...what's the typo?\n. Or maybe \"Only:\" since the context implies that the following list are HTTP methods. This is only a minor issue though. I'd say this PR is good to go!\n. Would it be picky of me to ask to rename ok to something more descriptive like closeNotifierSupported or whatever it is that is being checked?\n. Is this needed?\n. Remove this, too? I assume it's just left overs.\n. This looks odd to me. Does it actually work? I would expect to see stopSig chan int here. What's your thinking on this?\n. I know the tendency in Go is to be very brief/concise, but I strongly feel that descriptive variable names makes the code more understandable. The exception is if the variable refers to a variable in a formula that is detailed in comments.\nIn this case, instead of m, would overrideMethod be more clear?\n. Same concern here. Perhaps overrideTest instead of rTest?\n. Sorry, forgot to commit my cmd changes. Checkout my branch at brendensoares/cmd@fae987c247f0a539353131005c6107f50f49e4d9\n. A range of what type?\n. Remove .\n. Why not combine these 2 lines into 1 if statement like so:\ngo\nif Config.BoolDefault(\"log.colorize\", true) {\n. what does fLink refer to?\n. can we sub errorLink or something else more obvious? Then I'll merge.\n. Sorry to be a pain, but I assumed we would change all instance of fLink to errorLink. Could you be so kind?\n. :+1: \n. Can you move the revel import down to its own section. We're trying to separate the imports into \"built-in\" and \"other\" sections.\n. A comment here would be useful to explain that allowedMethods don't require a token.\n. c.Request.Header.Get(\"Origin\")\n. This is a valid point that would improve code readability.\n. @anonx yes, if the token wasn't sent in the form (right?).\n. It may be better to add a MessagesPaths similar to TemplatePaths in revel.go instead of accessing Modules directly. Thoughts? It's a minor difference, but more consistent with the current module convention.\n. Not sure I like such a vague variable name on a struct. Thoughts?\n. Agreed.\n. hook.callback() seems appropriate.\n. That's true. We can assume all hooks will run at the same level just as they do currently and can be changed to different priority if needed. Should be good for backward compatibility.\n. remove # since they do nothing in godoc output. arg to context or args. viewArgs or context or contextArgs?. JSON. JSON. tied to the response. WORD != WORD. JSON. Handles(). TEMPLATE_REFRESH_REQUESTED?. TEMPLATE_REFRESH_COMPLETED?. extends to embeds. wording. This class to BufferedServerHeader per godoc conventions and also, it's a struct not a class. Request is. ServerHeader?. WebSocket. wording. wording. would it be better if this was near the type definition?. User-Agent header/string?. Comment?. If. GetAll returns. why GetValue for Form assignment?. why GetFile for Files list?. wording, parameters not vars to align with revel manual doc vocab. query string parameters. path parameters. fixed route parameters. these should be past tense events e.g. REVEL_BEFORE_MODULES_LOADED. ENGINE_SHUTDOWN. ENGINE_STARTED. ENGINE_BEFORE_INITIALIZED. is Called accurate or are these event types?. should this be controller_test.go?. again why GO?. serverengine.go to follow the golang runtime convention of no hyphens or capitals?. why 1000?. serveradaptergo.go?. cleanup?. why 9001?. wording and golang?. Why did the case of these change?. declated. should godocs start with the name of the identifier followed by a description? E.g. \"controllers is a list of controllers mapped using...\"? . word choice \"in order reads the template\" feels awkward. Better symbol other than RNS e.g. LOCAL?. namespace vs module name?. godoc starts with identifier name?. add , and put } on new line?. need explicit deprecation message to be painfully clear to revel users when running code that uses this deprecated code. add comments for what colors these correspond to. XXX? Maybe TODO. delete?. Try. s vs lr?. Update the comment. := space. _, f space. ba means what?. Before After...is there a better name or meh?. target instead of arg?. It's a small and simple optimization to reduce the calls to findTarget(), but is it possible to cache these entries on app start for further performance gains?. ?. ",
    "notzippy": "Closing - docs have intellij debugging now. Closing in favor of https://github.com/revel/revel/pull/1003. Should be re-assigned to revel/cmd enhancement. Closed and moved to revel/cmd https://github.com/revel/cmd/issues/73. @robfig :+1: \n. Adding https://github.com/revel/revel/pull/1003 , closing this. looks to be implemented .. closing. With custom server engine implementation this can be closed, since the work is done outside revel core. Closing this request as server engine will obsolete it. I am looking at a design to implement multiple configuration options, if ini does not suit your needs you will be able to use another, like YAML. Adding a session manager to handle objects will cover this. Needs documentation. Flash data is availabe in viewargs as is the controller. The revel command builds a go file , compiles and  a new process for running the application so it cannot be debugged in a normal manner. I created a patch in issue #294 to add support for a debug command on the command line which launches the app inside the gdb debugger https://github.com/notzippy/cmd/commit/715251e30ca70aad278c7fbffa5cb8ed5b83f08b you should be able to look at that patch to figure out what command you need to use to launch your revel app directly from the litetide. But don't forget that variable inspection is pretty much non existent in go \n. I think the biggest hurdle is where in the documentation this is hidden, in the controller -> results, to me the controller section should be modularized into three sections 1) How it gets there, 2) What you can do , 3) What you can return. All the other stuff after results should be somewhere else. \nAlso the documentation should state each item with the equivalent code beside each item. For example\n1. Adds all arguments to the controller\u2019s RenderArgs, using their local identifier as the key. \n(in example below this equates to c.RenderArgs[\"myValue\"]=myValue\n2. Executes the template \u201cviews/Controller/Action.html\u201d (In example below this is equivalent to c.RenderView(\"views/MyApp/Action\")\nAlso the second part of item 2 is redundant \"passing in the controller\u2019s \u201cRenderArgs\u201d as the data map.\" every view rendered gets passed in the RenderArgs so restating it here is redundant.\n. The docs look much clearer now. Closing issue until further interest is shown. The server engine is abstracted now, so this may now be customized using a custom server engine implementation\n. Merged closing. FYI Having a look at this...\n. Had a look, go 1.2 works wonderfully, showing variables and values, but go 1.3 is missing gdb support, you can set breakpoints but variable inspection does not work. I would recommend delaying this addon until debug support is better supported in go, and possibly close the other gdb references to point here. https://github.com/notzippy/cmd/commit/715251e30ca70aad278c7fbffa5cb8ed5b83f08b\n. Just the way the variables are structurally stored from what I can see. see here \nThere might be some alternatives to gdb, look at the work here\n. Derp\n. There is documentation on running revel in intellij which can provide some debugging. The best debugging is good logging. Closing - thanks. I get this, but since we broke out templating to use template engines, we can now provide a different way of addressing this issue on even a per file basis. Closing this. Logger PR submitted #1213. Done. Closing now moved. Closing this one in favor of hosts. Closing, I am reworking the config now and will keep this in mind. @nullne There isn't a module written which fully implements an ACL library. You can implement a version of your own by using interceptors, which is what I have typically done in the past. We are looking at alternatives though which would integrate with the GORM module (revel/modules#32).. Closing other items to address. @winduptoy PR #1224 has an implementation of graceful shutdown, but I was hesitant in implementing it because the version requirement was go 1.8 . Logger is now configurable ser pr #1213 . Duplicated. Currently the versioning system used in revel is rather arbitrary after the 1.0 release I hope we can switch to a 1.0.0 pattern, so the semantics would be\nGiven a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when you make incompatible API changes,\nMINOR version when you add functionality in a backwards-compatible manner, and\nPATCH version when you make backwards-compatible bug fixes.\nthus an app could make a call during the init process revel.Compatible(1,5) to state that it needs version 1.5.x or newer, if the revel version is 1.4.5 it should panic, or if the version is 2,0 it should warn that it may be incompatible.\n. Merged. Fixed. We will direct people to the wiki for guidelines and current status. If your code imports from jobs, then the builder will pull in the jobs module and start them. \nIt would be better to have a configuration setting to enable or disable adding the jobs. . #1185 closes this. I agree that in order to satisfy the post/redirect/get pattern that you must use the Redirect(). What I am asking for is a way to have the same as the flash but only using the post response pattern. So if the controller chooses to Render() then the flash package behaves differently ie it does not set the values in a cookie, instead it makes them directly available to the page (through the {{.errors}} and {{.flash}}) . The validation routines are very useful however I can see some situations where you are not going to redirect the client requests to retrieve the messages (ie an ajax post and response). If revel could cleanly handle both situations it would be ideal.\n. Sorry been busy the last few days, I like the idea of adding a params map with a flash element. so params would be of a type map [string] interface{} ? And it would be accessable on the page as {{.params.flash.}} ?\n. It should, I haven't arrived at this point yet with my site but I\nrecognized that the current validation would have short comings when used\nwithin an AJAX environment.\nOn Mon, Jan 13, 2014 at 7:40 PM, Brenden Soares notifications@github.comwrote:\n\nYa, I could see that working well. Does it fit your scenario?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/451#issuecomment-32236404\n.\n. Something as simple as the following appears to work, allowing the field tag to pull the values and validation errors from the current post so redirect can be avoided.\n\n```\n    Input.Validate(c.Validation);\n    if c.Validation.HasErrors() {\n    data := map[string]string{}\n    for key, vals := range c.Params.Values {\n        data[key] = strings.Join(vals, \",\")\n    }\n    c.RenderArgs[\"flash\"] =  data\n\n    // Display input page\n    return c.RenderTemplate(\"test.html\")\n}\n\n```\n. Suggest using this version instead https://github.com/gosimple/slug. the revel/meta package takes care of this. Closing simmered long enough. Closing documented. JSON is now collected as well. Remove method from routepath and have it manually checked after route path is matched. See #1212 . We deferred this because we wanted to abstract the server engine, and we wanted to ensure the implementation would be backwards compatible with existing source trees. It is still open because we want to implement this at some point.. Closing see namespace . #1185 . Server engine allows this to be done. Issue #1156 allows for a custom server engine which will allow any implementation. #1213 replaces this.. Closing If people still need revel to watch the entire gopath, please re-open. Pr #1213 has this feature, give it a thumbs up to vote for its\nimplementation\nOn Tue, Aug 1, 2017, 3:24 AM Rambone, notifications@github.com wrote:\n\nrotate log file by date or size is a strong demand\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/568#issuecomment-319331799, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBjfwM-qPbKp69rYA6cNWSdHXAsapks5sTvz2gaJpZM4BtN9M\n.\n. Filters do have a before and after, the FilterConfigurator can be used to modify the filters for control on a per action basis. Closing in favor of https://github.com/revel/revel/pull/1003. Rather than binding why not use encoding ? That is the standard used in golang for json and xml translations from strings to golang objects. It should be applicable here as well.\n. For logs, we could define it as an interface in revel and implement it in a different package. From what I have seen with logging there are many different approaches to take, rather than attempt to have revel do it all why not allow someone to implement an interface to there favorite logging package and assign it in the config. By default revel would use the golang logger, (which would be in its own package)\n. Closing, on wiki. Closing, implementing it using a filter is the most logical and simplest. The function c.Validation.Context(\"order.From\") would return a revel.Validation object. This call would set the context within this object\n\nNo I am not suggesting that a structure support a specific interface. I was using the function address.Validate() as an example that a programmer can add. You could have validation outside the structure as well or have different validation functions depending on the input\nThe important thing is how revel builds the Key. When the address validation occurs you typically do a :\naddress := Order.From\nc.Validation.Required(address.City)\nThis would normally set the key to \"address.City\"\nIf the context was set the key would be \"order.From.City\"\nWhen you change the context like c.Validation.Context(\"order.To\") and run the same validation c.Validation.Required(address.City) the key would be \"order.To.City\"\n. Sorry missed your edit @brendensoares , but yes it is accurate\n. This generator https://github.com/yvasiyarov/swagger looks like it can do this. The revel project has been split up since this PR, #1156 issue will allow the user to plug in their own template engine. Do this and fix the issue with wildcard mapping being prioritized before other mapping. TODO\n [ ] Fork https://github.com/Jetvp/pathtree/commits/master. This is resolved now . If not please re-open. Added ability to customize log handlers now, #1213 . Closing due to lack of response. I think that the documentation is missing an important point, the configuration line generated GET     /public/*filepath                       Static.Serve(\"public\"), is what makes the public folder public. Not the name \"public\". So @anonx, backwards compatibility is a non concern. Personally to me the assets folder is where generated content (for example a resized image) went into and the public folder is were version controlled files are placed in. \n. Config rework is coming along. Closing this one. Thanks for the start. As an additional note, the app folder needs to be scanned for templates first before the modules, so that the templates in the app folder are added first to the set first.. \n. Two things @anonx , \n1) I am not entirely sure how revel scans the views, does it really scan app/views first ? Or is it an unstated order similar to init function ? I have looked at the code and it seems to do just a straight source tree walk to me, and possibly scans the modules first even.\n2) The original point was to allow a developer (web site designer not module designer) to use a module under their own defined namespace. Using your method it is still possible to run into conflicts across modules. \nAdditionally by using the app/view/ModuleName, you will break the smart c.Render() statement.\n. @pushrax  Actually that won't work, if the template \"Foo.html\" and template \"Bar.html\" is added to the set and inside Foo.html you do a {{template \"Bar.html\"}} ... Then \"Boom\" it errors out (since both  will be listed as \"foo.html\" and \"bar.html\")\n. @brendensoares That is the issue, if you have a {{define}} inside of the template it errors out because you are adding the same define to the template set twice. You cannot override the {{template}} lookup it is not a function. The only option I see is to have a separate map for lower case template names, and use this map to do the lookup for the real name in TemplateLoader.Temaplate That said maybe it would be best to defer this until after the template engine #602 is released. \n. The view must remain capitalized in the skeleton app, it is reversed engineered from the function Index as \"Index.html\" so changing it to \"index.html\" will cause it to fail\n. Personally I like the capitalization of the first letter of the template. I use it mentally as a flag for \"this template is included directly by the controller\", if the first letter is lower case then that template is included inside another template. \nAlso a forced lower case will break existing apps, (were making it case sensitive may cause some issues but not definitely break things).\n. I agree that would work, but to me it goes against conventional thinking. \nRoutes are case sensitive, urls are case sensitive if you know how to include a template in a go app you know it is case sensitive. \nWhat you are asking people to learn is counter intuitive, saying it does not matter what case you use when you include a file from a controller but you must use lower case if you are including a file from a template. A universal The inclusion of a template is case sensitive. I think the more revel deviates from default behavior, the harder it is to learn. \nWhat could also be done is that the error handler be enhanced when the controller cannot find the template. If the template is not found search through the list of  templates for one that would match it in a case insensitive manner using the template.Templates() and report MyController/MyAction.html could not be found, did you mean MyController/myaction.html ?\nI would be okay to leave this till after the template plugin is ready. Right now it works for me, and I don't need the define..\n. With #367 the goal was to perform case insensitive matching, however you're proposing all templates be lower case that is not case insensitive. \n. @brendensoares  Thanks for understanding - having a case of the mondays here :-/\n. Like the change thanks...\n. Something like this ?\nhttps://github.com/notzippy/revel/commit/afc56ab08e159cd8fd3fcacd844d4d19ea930a77\n. I was also wondering if getStructTypeDecl should return a list of candidates as opposed to only one. That would handle the case were the controller is not placed first in the types. BTW my alter ego is @NitroKKX \n. @brendensoares file is an ast.File not a token.File, I was able to pass in the fset *token.FileSet to serve the same purpose though. Also what do you mean by noting the files line number ? Do you mean to log the Position.LineNumber as well like this revel.WARN.Printf(\"Surprising: %s:%d Decl contains no specifications\", fset.Position(decl.Pos()).Filename, fset.Position(decl.Pos()).Line) ?\nMultiple specs sounded like fun... but that said there is likely better items to be worked on..\n. @brendensoares nope that is from package iterating over an array of ast/file Different from token/file\n. Here is the updated patch https://github.com/notzippy/revel/commit/8ba9fc7109a69966089876023c74cbf9ffd58206\n. @brendensoares  Sure can do, having the iterate there would only filter out types which are not structures which would not likely help much anyways... New commit https://github.com/notzippy/revel/commit/1fe75071a7013119d6e20b951f0ace885290efef\n. Added session engine support, it is now possible to add in your own implementation for this.\n1216 . Added session engine support #1216. Only comment is that you should drop the toLower in the template lookup as we are no longer doing case insensitive template lookups, see #729\n. Some languages you would want represented in a different structure, some are read LTR and other RTL \n. Adding functionality to PR #1170, thanks for your input and design.. @rwese Thanks for commenting, this should be fixed soon . I am not sure if revel can beat the single line MVC of martini\n    m.Get(\"/\", func() string {\n        return \"Hello world!\"\n    })\nThe most similar one seems to be http://beego.me/ although revels big advantage here is the modules, should we list a bunch of comparable frameworks ?\n. Sorry missed reverting the case change in the hotel app.\n. Since we are splitting up the revel commands, samples and modules we should also add a gerrit server to the mix. So we can make changes that affect multiple repositories in one sweep. Also makes code review and approval easier..\n. @brendensoares It would be a long discussion comparing gerrit patchsets and github PRs (I just put it out there as gerrit IMHO does a better job of developing an improvement). FYI http://gerrithub.io links directly to github, personally I have not used gerrithub (once again just spewing out random thoughts).\n. Added badge. Technically you could use the regular expression validator to validate the float numbers (although that would be a challenge). The rangeFloat validator should be able to specify a limit to the fractional digits as well as binding the upper and lower integral limits. \n@brendensoares I think @daemonfire300 meant to pass an interface into a range validator to provide a mechanism to compare the bounds. But if you want to provide the additional ability to limit the fractional digits this would not help to much.\n. @brendensoares preparing rfc\n. RFC https://github.com/revel/rfcs/pull/1\n. Should also be able to do fragment caching as well, ie be able to cache a template based on criteria, perhaps also define a time for item to be cached as well ? {{ccache \"foo.html\" . (print .Bar \"-\" .Foo) 24}} would be also nice if cache storage was a pluggable interface , so it could be configured to store in file system, memory or database etc.. \nBy pluggable interface i mean that on revel startup you could pass in an object to handle the storage and retrieval of the cached objects based on the criteria.\n. In general this is best implemented in Redis. Closing , will need to redo the code to implement this since the age of this PR is so old. See https://github.com/revel/modules/tree/master/csrf/app . Server engine resolves this now. I think this should be merged with #235 since they both touch on the same subject. \nLike I said on that page documentation for the render mechanizim is discussed under controller -> result . A very good overview is found in Concepts. Read that document closely and then the rest of the document flow makes a bit more sense. \n. No pull request submitted, closing. This fix broke the Static.ServeModule for my included modules. It is using a relative path from my main applications public folder and not the path of the module folder. My modules contain public folders and were included in the routes like\n/public/modulefoo/*filepath StaticServer(\"modulefoo\",\"public\")\nThe directory structure was\nmodulefoo/app\nmodulefoo/public \nWith this change it looks for the file in the mainapp folder which is unexpected.\nmainapp/public/modulefoo/\n. @anonx  Looking for dec 1 deployment, will be testing in next few days in the wild though\n. I can make the changes to file itself, but the issue may be else were, currently Serve is being called instead of ServeModule for the module in question.. I am trying to track this down. Do you have access to the irc channel  rather then filing this log :-) ? If not that is fine I can continue back tracing to see were things are going wrong. Currently the router appears to be creating the route properly...\n. @anonx looking at the road map, v.12 is going to be a while yet - I think we should release the change to fix static includes sooner as opposed to later. @brendensoares what are your thoughts ? \n. {{set . (msg \"admin_title\")}} \nThe forums would be a better spot to ask questions like these\n. Muhaha it is a mad idea.... \n@anonx \n1) do you think the go-loggoing logger will suffice?\n2) At what point (version) should this be added ?\n. Most PHP loggers only do the minimum, date, timestamp and formatted message, in java the tomcat and jetty loggers output the IP address as well. Not sure about rails or django. When a language has thread local variables logging IP addresses is simpler, since go does not have this, we need to move the \"log formatter\" into the controller so it can be accessible. Which means you would need to pass a portion of the controller or logger to a model call if you want logging done inside the module.\nKey points\n- Modular logging levels, \n- Ability to log one or more modules to a single output stream\n- Ability to log specific levels of specific modules\n- Log file watch support, so log levels may be changed without reboot to revel required\n- Logging  request information\n- Logging IP information\n- Anything else ??\n. Not sure how I missed that.. Yes this is covered by those. With the number\nof loggers available (and a contrasting set of features) this may be better\nhandled by an rfc.\nOn Fri, Jan 2, 2015, 12:45 AM Brenden Soares notifications@github.com\nwrote:\n\n@notzippy https://github.com/notzippy isn't this already covered in our\nroadmap?\nhttps://github.com/revel/revel/wiki/Roadmap#v012-see-issues specifically:\n- Improve Revel's logger #316\n  https://github.com/revel/revel/issues/316 #554\n  https://github.com/revel/revel/issues/554 #557\n  https://github.com/revel/revel/pull/557 #676\n  https://github.com/revel/revel/issues/676\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/822#issuecomment-68514026.\n. Closing due to no response in over a year. Requests for comments looks like a good pattern to follow. How are you planning to organize the project for the RFCs ? I think the structure should also reflect the implementation strategy like:\n\nproposal/              (\"beta\" RFC, unapproved)\nactive/                (untargeted approved RFC)\n{version}/target       (targeted approved RFC)\n{version}/complete     (completed RFC)\nOf course never having used a system like this it may be overkill to worry about the \"structure\", another possibility is to move the RFC to the branch that you plan to implement it on, so the version directory becomes unnecessary...\n. Steps, I create a module called bar and add a messages/test.en file to it to translate helloworld. Note this just adds <b>A friendly {{msg . \"helloworld\"}}</b> to the created view in the application, in the real world messages in the module should be normally only used in that module.\nrevel new temp/foo\nmkdir -p $GOPATH/src/temp/foo/modules/bar/messages\necho \"helloworld=Hi there\"> $GOPATH/src/temp/foo/modules/bar/messages/test.en\necho \"module.bar=temp/foo/modules/bar\" >>$GOPATH/src/temp/foo/conf/app.conf\necho \"<b>A friendly {{msg . \\\"helloworld\\\"}}</b>\" >> $GOPATH/src/temp/foo/app/views/App/Index.html \nrevel run temp/foo prod\n(Had to run in production mode since the module is appended to the production section of the app.conf)\nAdditional notes, \n1) It is expected that the developer follow the same guidelines with the messages as they would with the views, ie prefix all the messages with something appropriate which would not conflict with another message since these are appended to the \"global\" message queue\n. Yes this allows modules to declare there own 18n messages. I was not aware\nthat routes could be defined in a module, how does one so that?\nOn Fri, Jan 2, 2015, 6:41 AM anonx notifications@github.com wrote:\n\nSo, here is a short summary:\nRevel can import from modules (\nhttp://revel.github.io/manual/modules.html):\n1. templates\n2. controllers\n3. routes\n4. assets (using Static.ServeModule method).\nThis PR makes it possible to import i18n files, too. @notzippy\nhttps://github.com/notzippy Is my understanding correct?\ncast @pedromorgan https://github.com/pedromorgan\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/pull/828#issuecomment-68530676.\n. @brendensoares @anonx thx, learn something new every day...\n. Will this make the 0.12 release ? Or will it be deferred till later ?\n. @brendensoares Why is it important to store the messagesPath ? After the message dictionary is built is there any need for the path to be stored ? Perhaps if I understood the usefulness of this it would make more sense. \n. Not proper area for asking questions, please do so on the forum https://groups.google.com/forum/#!forum/revel-framework\n. Added to cli tool. Ideally in production you would want to have your proxy bypass revel completely to access the public static files and folders directly. But I would not be totally against this, the change would be in the static module, static.go:serveFile:81\n\n-       basePath = revel.BasePath\n+       basePath = revel.Config.StringDefault(\"static.root\", revel.BasePath)\nBut since this is a module issue you need to create the issue against the revel/modules project, so I am closing this, feel free to do a pull request with the above code.\n. Try https://github.com/revel/modules/tree/develop You want to target the change against a development branch. \nI am not sure what you mean by the {{static ...}} tag we already have {{url \"public/js/foo.js\"}} tags to do reverse routing using the routes file\n. AFAIK next release is v0.12 https://github.com/revel/revel/wiki/Roadmap#v012-see-issues so I would say yes develop will move to master.\n. With the new routing you can now use the url to specify static routes as well, so no need for this to be in the conf. Dude, this is not the forum ! Post there and there will be a response.\n. What you are looking for is FilterConfigurator http://revel.github.io/manual/filters.html\nPer-Action configuration\nAlthough all requests are sent down the revel.Filters chain, Revel also provides a FilterConfigurator, which allows the developer to add, insert, or remove filter stages based on the Action or Controller.\nThis functionality is implemented by the FilterConfiguringFilter, itself a filter stage.\n. Isn't this should be possible by using github and httrack. Have the dynamic site on a developer machine or something (this could be running anything you want). Use httrack to \"mirror\" that site to github.\n. I like the idea of revel hosting revel docs. It would be useful for a couple of reasons, \n-  It would showcase revel\n-  You could build versioning information into the links, and update globally using app.conf\n-  You could write tests to validate the documentation (check for broken links etc..).\n. @brendensoares  What date ?\n. @brendensoares a Shared calendar sounds good to me, we could create a hangout group for the core members as well. Also a shared workbook would be good as well, for group ideas, agendas, meeting notes..\n. I see those as well, the reflect package looks at the import and tries to determine a list of packages that a file needs to compile. Packages are determined by  the prefix of the package name (like \"github.com/foo/bar\") The standard libray errors out since it has no such prefix.\n. This is part of the cli project and will be taken care of there. @wildattire have you tried a revel clean and rebuild ?\nWorst case you can assign the values into c.ViewArgs like\na,b,c := 1,2,3\nc.Render(a,b,c)\nis the same as\nc.ViewArgs[\"a\"]=1\nc.ViewArgs[\"b\"]=2\nc.ViewArgs[\"c\"]=3\nc.Render()\nI will try to test this later today\n. @wildattire \nHmm, what type of variables are you passing ? I tried a int, string, time.Time - all worked without errors (go 1.9). I tried with one and two variables . I figured it out ! This fails\n```\n    return c.Render(\n        a,\n        b)\nThis works\n    return c.Render(a,b)\n```. I can see why you went multiline ! Lol\n. The new CLI tool will address having skeletons in the cloud so to speak. In your first example you can simply do a \nt, er := template.New(\"\").Funcs(revel.TemplateFuncs).Parse(str)\nAnd it will work, this is what occurs when revel retrieves the templates internally and the revel.ExecuteTemplate does not perform that action because it should already have been done at that point.\n. Closing issue \n. @franchb I am not a Heroku expert, but I will try to deploy a sample app this weekend... thanks for replying . @brendensoares Looks like there was a slight oversight in the router (see patch). Not sure if you are moving the router to another spot, if you are can you apply the patch as well ? thx\n. So you would like a test added to  router_test.go ? How is that test file launched ? \nrevel run github.com/revel/revel ????\n. I would be okay with the change to marshal\nOn Wed, Feb 18, 2015, 12:24 AM Brenden Soares notifications@github.com\nwrote:\n\nI am increasingly concerned about the naming of this package. binding is\nnot concerned with \"data binding\"\nhttps://en.wikipedia.org/wiki/Data_binding in the common definition of\nthat phrase (2-way data binding to keep UI up to date with underlying data\nmodels and their attributes).\nIt is, as documented in the manual\nhttps://revel.github.io/manual/binding.html, concerned with converting\nGo types to and from strings.\nIt seems the most familiar naming to adopt would be marshalling as that\nis what data conversion is called\nhttps://en.wikipedia.org/wiki/Marshalling_%28computer_science%29.\nAssuming we can all agree that this is the best thing to do, we can leave\nrevel.Params.Bind() as is for now so that we don't break the exported\nRevel API (yet). This seems practical since the code subject to this PR is\nnot exported (func binderForType()) for use by app code.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/pull/872#issuecomment-74828476.\n. I think this is a good idea, but with the code base changes it is best to redo this work - sorry @brendensoares . The router is initialized in the same fashion as your call \n\nOnAppStart(func() {\n    MainRouter = NewRouter(path.Join(BasePath, \"conf\", \"routes\"))\n    if MainWatcher != nil && Config.BoolDefault(\"watch.routes\", true) {\n        MainWatcher.Listen(MainRouter, MainRouter.path)\n    } else {\n        MainRouter.Refresh()\n    }\n})\nSo if your OnAppStart happens before the router then you wont see the routes. I always thought OnAppStart should have a weight assigned to it so that important things can happen first\n. @brendensoares I would think the reasoning behind forcing this to the last is so that the entire response is compressed, ie no extra data added afterwards. Otherwise the filter is pretty much useless because if you add something after it, the compression is lost.\n. @anonx Agreed, \nThis is a familiar use case as well, basically a run once command passed into the application when you start the web application. A technique you can use is to export an environment variable APP_VERSION and then start the application. The value of \"APP_VERSION\" is available from the config by doing a revel.Config.StringDefault(\"app.APP_VERSION\", \"(not set)\"), adding a function to revel.OnAppStart to read the app.APP_VERSION and compare it to a known value you have a way to hook in some initialization code.\n. This is the direction we are heading in with the new CLI tool, closing as these points are covered there. Yes I am actively developing a large project using revel, I have not\nparticipated much development wise lately because I was waiting for the\nrestructure to be completed. Brendon has done an excellent job splitting up\nthe work into sections, but it is difficult to contribute work when we\nremain in a wait for restructure state.\nShould we open up multiple development branches then? Or would that get to\nchaotic? I do not have experience in this matter, my projects have been\nsolo effort..\nOn Mon, Mar 16, 2015, 12:31 AM anonx notifications@github.com wrote:\n\nStatus of the project\nIt feels like the project is stalling. Reforms are needed. First of all\nlet's find out who's still on board.\nAre you still using and/or interested in development of Revel Framework, Core\nTeam https://github.com/revel/revel/wiki/Core-Team?\n1. @brendensoares https://github.com/brendensoares\n2. @pushrax https://github.com/pushrax\n3. @notzippy https://github.com/notzippy\n4. @landaire https://github.com/landaire\n5. @pedromorgan https://github.com/pedromorgan\n6. I'm dead sure there was somebody else, there were 8 people including me\nand robfig. verdverm?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/892#issuecomment-81465134.\n. Some additional thoughts, I think we also need some roles / responsibilites defined in the core group as well. \n1. First Responder - responsible for looking at new pull requests, bug reports and responding to them. \n2. Development core - responsible for a specific branch, calling feature cut offs and creating new branches\n3. Documentation core - Responsible for maintaing / updating the website in responses to releases and changes to the development.\n4. Public Relations - Resposible for checking / updating the forums messages, doing the biweekly report on the forum update the community with new releases information, bug fixes, future direction. \n5. Design lead, resonsible for coordinating the development core, documentation core and first responders with bug fixes\n\nI find without some defined roles it is difficult to contribute, or that one person ends up doing most of the work. I would go further to suggest these roles be rotated throughout the core team so that the work is not always on one person. A person can (will need to) belong to multiple roles, but should remain in that role for a minimum of 2 weeks and a max of 2 months. Finally we should also be more transparent within the core group regarding on what we expect to get accomplished and in what time frame. \n. Yes more are needed, I would look to recent PR for possible contributors,  in theory those are the ones who are active in the project.\n. Another two cents.. If you hid the subtests for each controller you would save a lot more space, add a + beside the test button for the controller to display / hide the subtests. \n. Closing, at the moment we are focusing on rebuilding core components - thanks for the PR. @brendensoares  I would go with all numeric 0.12.0\n. @jniltinho Help with documentation and translation would be great. Screencasts would be very appreciated as well. :100: \n. This is possible with the server engine now. @brendensoares I think samples should be labeled as well since there will be some changes which are not backwards compatible. I will label once we we are united on what the version name should be :+1: \n. Normally a filter is used to implement this behavior, can you think of a\nsituation that this would preferable over a filter?\nOn Sat, Mar 28, 2015, 11:37 PM Jason Lee notifications@github.com wrote:\n\nUseful method to give a Result and break off action call stack.\nFor example:\nfunc (c Posts) requireUser {\n  if c.Session[\"user_id\"] == nil {\n    c.Finish(c.Redirect(\"/login\"))\n  }\n}\nfunc (c Posts) Edit() revel.Result {\n  c.requireUser()\n  // Follow code will not run, if requireUser called c.Finish\n  posts := DB.FindPosts()\n  c.RenderArgs[\"posts\"] = posts\n  return c.Render()\n}\n- No login: [GET /posts/1/edit] -> [Require user] -> [Redirect] ->\n  [End]\n- Logined: [GET /posts/1/edit] -> [Require user] -> [FindPosts] ->\n  [Render] -> [End]\n\nPS: Where is the controller test cases?\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/revel/revel/pull/915\nCommit Summary\n- Controller add c.Finish method to allow user give a Result and break\n  off action call stack.\nFile Changes\n- M controller.go\n  https://github.com/revel/revel/pull/915/files#diff-0 (26)\nPatch Links:\n- https://github.com/revel/revel/pull/915.patch\n- https://github.com/revel/revel/pull/915.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/pull/915.\n. @anonx Wouldn't that need to be c.Smth(revel.Result) and in that case it is less obvious what the the action is supposed needs to do. Unless I am missing your point here.\n. @brendensoares - I did not make these changes...\n. @brendensoares \n\nPersonally I think I would be pretty good at first responder / public relations, the other roles I can take responsibility for a periods of time as well (but not for a month). I am normally available monday - friday 7pm or later for meetings. \nI think it is a vital to rotate positions, no one person can sail a ship, but we all need to be on the same page as far as where that ship is going to. So weekly or biweekly meetups or mashups or whatever you would like to call them are needed. It would be nice if we could have a shared whiteboard, or the likes for working out ideas (I like seeing a goal visually), that would be good (even a shared google worksheet would be good enough). A shared text hangout while working on the sheet would be nice so we can converse while looking at the whiteboard / Agenda...\nJust some random thoughts today...\n. @brendensoares , @pedromorgan It is on the road map \"Pluggable template engine\" \n. Have you looked at the current cache implementation\nLooking at a filesystem cache is targeted for v.15 in the Roadmap\nAlthough we do welcome any insights or discussions on the subject\n. Closing, there are other topics in need of focus. Thanks for your write up, currently like most GO apps, gdb support is not overly useful. The only thing you can really do with it is set breakpoints and step through code, but a key component - variable inspection was has been missing from GDB since GO 1.2. \nRevel does have exceptional logging support which is very useful for seeing what is going on. Using revel.DEBUG.Printf(\"MyVariable %#v\",myVariable) is a quick way to see the value of a variable (Make sure the logger is turned on in the app.conf).\nThere is a command function for revel that was written and just has not been merged to launch revel with the ability to launch revel with the debugger see #294 \n. Have a look at this project https://github.com/derekparker/delve, I have not tried this recently but it looked pretty good last year, and they are working on making an interface to an ide (the group that developed the golang plugin for intellij is assisting with this https://github.com/go-lang-plugin-org/go-lang-idea-plugin)\n. Closing, use vendoring instead. @zuoRambo Have you tried using revel/meta#11 ? You can use that to bring your gopath to the state of revel versions from 0.14-0.17. Alternately this person got vendoring to work after cleaning out of his gopath references to the revel package revel/modules#35. See #1326 . @anonx I am unclear on that last bit, if I remove a module from my config it is definitely no longer in my compiled app unless it is referenced within the app somewhere else then in the app.conf (for example I use a model from a module within an app controller in my code). It is my understanding that the following occurs during a revel build. revel build generates the main.go and routes.go. These source files are created based on app.conf, routes files. Then revel executes the go build is to be run against the app, because of the main.go,routes.go files the compiler includes these modules to be compiled with your app. \n. @anonx So you would like compile time directives to be separate from runtime options (isn't that easier to say ?). \nI do agree that having both (runtime and compile time directives) in a single configuration file may be confusing to the layman, and sure if you want to move the compile time directives into its own file that makes sense. \n. @brendensoares Personally I like the configuration file. There may be other compile time directives that may not be configurable at runtime so I wouldn't label it specifically to modules.conf, I would call it build.conf or something that would point to its nature of being a compile time configuration settings. \n@anonx Me Hemingway ?!? - my wife would get a kick out of that... It was more like the third time I rewrote that comment the idea crystallized for me.\n. @brendensoares Welcome back (congrats in order?) I have not been active lately either due to hospitalization. Getting better now.\n. Closing, no response. Personally I would do the following, it should give a OS independent feel\nBasePath = filepath.Join(strings.Split(BasePath,`\\`))\n. See http://golang.org/pkg/text/template/#hdr-Functions you need the function eq first then the items you are comparing\n. Looks like it, closing. This can be fixed by using a filter configuration and having the filter adjusted for the static module. Server engine normalizes the routes now. This error was due to a renaming issue. closing. Server engine will allow you to write tests that are compatible with code coverage tool from go. Not entirely sure what you mean by revel style test. To get code coverage reports you need to run the code as a go test command, which the revel command does not do. I am looking into a way to make this possible though and should have a solution soon. @roger-russel-dafiti There is - You can see an example in \nhttps://github.com/revel/examples/blob/master/booking/app/controllers/app_test.go. This was because of changes to revel, after modifying application it worked again. Closed, targeted cmd branch https://github.com/revel/cmd/issues/73. You can now add any template engine you would like with revel, see http://revel.github.io/manual/template-engine.html\nclosing\n. PR discussion in module, closing. A new working PR is ready to be merged for next release. Sorry for the really long delay. @ianterrell Is there a reason you closed this ? Sorry I did not see this sooner but it seems like a good addition. There have been some changes to the initialization and more changes coming I am closing this because of conflicts. Thanks for the PR, with the additions of Vendor awareness I think this will not be necessary.. Closing, was replaced by new PR. Merged. @sadeghebadi or @acegishniz if you can create a new bug report, that would be great. Please include any error syack traces that may be available.. @wmh Can you resolve your conflicts ?. Replaced by #1208. I have always supported a pluggable template engine, but it should be configurable on a module basis, from looking at the code it appears you are switching globally. Is it possible to modify your code to accommodate this ?\n. Closing in Master tracking issue is #680 . Closing due to lack of response. Closing due to no response. Good idea so opened ticket #1130 for someone to implement. You need to set c.Result with your redirect\nc.Result = c.Redirect(\"/App/Mytest\")  \n        return\nThe filter is run in server.go with the following code \n```\nvar (\n    req  = NewRequest(r)\n    resp = NewResponse(w)\n    c    = NewController(req, resp)\n)\nreq.Websocket = ws\nFilters0\nif c.Result != nil {\n    c.Result.Apply(req, resp)\n} else if c.Response.Status != 0 {\n    c.Response.Out.WriteHeader(c.Response.Status)\n}\n// Close the Writer if we can\nif w, ok := resp.Out.(io.Closer); ok {\n    w.Close()\n}\n```\nSo as you can see the result will be applied if it is not nill.\n. Closing, cgo unsupported at this time. Closed - dormant issue. Sorry for the late reply to this, I see that you have stopped work on the module. Your thoughts on adding the intercept capability to jobs is an interesting proposal. Currently the jobs implementation is using a package outside of Revel, but we have forked it so we could add something like this in the future. If you are interested in helping out let us know. Closing for now though until we have more interest in it.. Right on @littlexiang , thanks closing...\n. Correct, inmemory stores the value in a map without serialization, when retrieved the pointer is set to the one stored in the map. So an update to the object will modify the version in cache. I have updated the document to reflect this. You should have an init file in your project that looks like this add in a line with MinifyWriter . p.s. there is also a configuration option that needs to be set as well results.minify=true. Check high up in the output log @goors , it will likely be one of the first things that is printed out.. Revel doesnt cache files, however it does comply with http standards regarding sending header information about the file - so the browser can decide if to use its local cache or not. Symlinks may be the issue depending on the version of Go, if this is still an issue please reopen. Sorry for the long delay in replying to this.\nThe locale set in the RenderArgs comes from the request itself (or from a cookie). So if the browsers default locale is english then it will be set to english. We recently added the ability to set the locale via a request parameter lang. . Looking at codebeat, the warnings / errors are not useful. Closing this. I understand the expectation of a controller in a module to have its own view namespace, but that is not the way Revel works. The best practice is to create your own namespace for your module in your view. Rather then having {{template \"controller1/index.html\" .}} You should create a namespace within your views like {{template \"module1/controller1/index.html\" .}}. So your path structure will look like\nmodule1/app\n       -> controllers\n       -> views/module1/controller1\n            -> index.html\nWithin the template engine the index.html template will module1/controller1/index.html\nWe are continuing to work on documentation for best practices when writing modules. Thanks for your input.. You can use FilterConfigurator to change the chain of filters for an action. For example\nFilterAction(Serve.Static).Remove(SessionFilter)\n. It does sound like you are missing some part of the error. Are you seeing this message in the log file? Is there anything printed to stderr? If a template function panics you will get a misleading error I think, do you have any custom template functions?\n. So did this cause a panic? Do you get a clear error when in development mode?\n. Revel does do this https://github.com/revel/revel/blob/master/i18n.go#L127-L133. Moving this to backlog, I am not sure how important it is to have every module version available.. Moved critical components. Re-opening so this can be added to the documents @pedromorgan . Moved to webpage. What was your opinion on this https://github.com/shaoshing/train ?. There is a module for an orm now , closing. No response, closing. looking at the code, this should now work, please reopen if it is still an issue. @ottob Just to clarify the issues you listed have to do with this PR and not with Revel as it is currently ?. Closing since #1092 was closed. @saturn4er Sorry it has been a while, can you resolve the conflicts here ?. Closing due to lack of response, interceptors is now updated to be sorted by depth of intercept call which can help with the ordering. This may be due to the fact that the browser is not storing the cookie locally, closing due to age. Reference #1097 . The Add command adds that header to the existing one. What you need to do is use the Set command.. The issue here is that in revel we modified the watcher.Events channel and watcher.Errors channel to add the ability to watch more then one file change this causes a race condition to be reported because previously these objects were closed by a defer close(w.Errors) in inotify.go.  This is not an issue when running in prod mode since the files are not watched.. Thanks for the input, I looked at your messages on stack and was left a bit confused. Can you clarify what this model looks like ? I suspect what you are doing has a need for session management, so a specific state is persisted (and accessible) across requests.. I see something that uses reflection to invoke an endpoint. That isnt builtin, but there are external libraries which can be added to provide this functionality. like this one . If you look the PR's have been tagged and labeled, the product is production ready as it is. I would love to be able to allocate time to this project but I don't have the bandwidth. @brendensoares is leading the development on this with as much time as he can allocate. If you have time to help contact him.. I talked with Brenden on IRC and he is still around, try reaching him there.\nOn Wed, Mar 1, 2017, 4:19 AM Pete Morgan notifications@github.com wrote:\n\nForget above, @brendensoares https://github.com/brendensoares is the\nowner, and the only one who can add users :-((((((((((((((((((\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1119#issuecomment-283325696, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBuRiOb1iwALZM7ZI7dTu9BetDzwLks5rhWJNgaJpZM4L9Llg\n.\n. I am thinking most features can be merged, as long as it is not to much like spaghetti code. I really liked the PR to allow different template engines... @shawncatz @jeevatkm @pedromorgan  and others, we have scheduled a meeting for tomorrow at 8pm PST, the room is https://appear.in/revelframework . Please join us.. It could be your country is blocking the url https://gopkg.in/fsnotify.v1 , can you navigate to that address ?. There is no internal package that supports eventsource, however there are some libraries available for go which you can use to implement it like this one. I havent used this one but I think you can call the  EventSource.ServeHTTP(resp http.ResponseWriter, req *http.Request) from the revel controller. . I think if we tackled each of those individually we could make a lot of progress. . So the reason the order is reversed is that we want the highest valued item - ie the Fixed item to be bound from the Param.values map right ? In theory this really shouldn't break anything beyond preventing a hack. Alternatively we could have changed the code to only add values to the map if the value did not already exist in the map (this is definitely more efficient) @pedromorgan is there documentation now that indicates the bind order ?\n1. Fixed\n2. Path\n3. Form\n4. Query\n\nSo when we add the values to the map we do so in reverse, Query, Form, Path, Fixed.\n. You can manually set the secret key in revel in the app.conf. The other frameworks must be able to do this as well, so I am not sure why you need to store the key in the database ? What other frameworks are you using ?\n. Do the other frameworks allow you to change the key on the fly ? (it looks like in playframework this is a read only value as well). To me it makes more sense to set the key values in your configuration file. If you want to use different values for production and development that is possible by moving the key to the appropriate section. \nThe other thing you can do is implement your own SessionFilter class that saves and secures the cookie with the key from the database. Then use your SessionFilter instead of revels built in one\nI can bring this topic up at the next general meeting this week and see what is said but the above options should work as well. I agree, there is not much gained by the secret key being private. Do you want to expose it by adding a Setter method with a PR  ?. should be in new release tonight. @noway Use linux :-P .. \nBut seriously we are looking into this and if possible it will be fixed either this weekend or the next.\n. @noway Quite right, I am looking into this issue. This issue is because html/template is attempting to safely format the code, which is breaking this aspect of it. You can provide a custom tag to protect the content like this example https://play.golang.org/p/7l7UywD20B\nThe only suggestion I can make is to protect the code using the raw command. Do you think this should be kept in this format, or should we reformat it like this : https://github.com/revel/revel/wiki/Creating-a-Development-Environment. Assuming your GOPATH is c:\\GOPATH then you need to \ncd c:\\GOPATH\nrevel new mycompany.com/myapp. This means you have not checked out the revel/config project on the develop branch. What I do is look at my gopath and anything under src/github.com/revel I switch to develop. @pedromorgan travis is building now zzzZZZzzzz. Sounds like a good idea, using a module with a filter would be a good way of creating a generic implementation.. So basically you would like to see an application exposed through the revel API ?. Should be doable, we are looking at making the webengine pluggable so a module could be written with this intent. I will update this thread when I have more specifics. Just an update, I have it working. Now that I spent some time with it I realized that you could implement this completely without a special web engine using a filter. Did you still want a sample of how to implement this ?\n. \n. Sample code to implement with current version of revel. (in file app/init.go)\n```\nfunc init() {\n     config = newrelic.NewConfig(\"Unknown Application\", \" Unknown Key \")\n     app, _ := newrelic.NewApplication(config) // TODO Error check !!!\n     RelicFilter := func(c revel.Controller, fc []revel.Filter) {\n        txn := app.StartTransaction(c.Action, c.Response.Out, c.Request)\n        defer txn.End()\n        fc0 // Execute the next filter stage.\n     }\nrevel.Filters = []revel.Filter{\n            RelicFilter,\n    revel.PanicFilter,             // Recover from panics and display an error page instead.\n    revel.RouterFilter,            // Use the routing table to select the right Action\n    revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n    revel.ParamsFilter,            // Parse parameters into Controller.Params.\n    revel.SessionFilter,           // Restore and write the session cookie.\n    revel.FlashFilter,             // Restore and write the flash cookie.\n    revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n    revel.I18nFilter,              // Resolve the requested language\n    revel.InterceptorFilter,       // Run interceptors around the action.\n    revel.CompressFilter,          // Compress the result.\n    revel.ActionInvoker,           // Invoke the action.\n}\n\n}\n```\nThis is some rough (untested) code based on the server engine implmentation here. Nice ! Good to see this is working for you now . I am going to cancel this PR, in favor of the other one... . Yes @runner-mei adding extension based switching sounds like a good ideas as well. . @pedromorgan You can step by whatever means you want between modules, as long as it resolves back to something that is sorted analphabetic it will be fine.\n@shawncatz I was trying to avoid doing modification to the end of the filename, since a lot of editors are extension type enabled putting in something like foo.html.pongo2 may not work. @runner-mei suggested an extension format like foo.pongo2.html , this would allow editors to still treat the file like an html document and at the same time allow the template loader to use the correct engine to parse it.\n@shawncatz It is important to have the modules ordered. Template views are only loaded once by the loader, duplicate top level path names are ignored. Originally the load order was application,revel,random modules. The new load order is application, sorted modules, revel.. @pedromorgan Re extension based naming, yes I didn't like that idea either that is why I have the shebang approach in the code. Having different methods in place should be fine though, we do the same with way controllers operate (we can be specific with what view we want rendered, or we just allow revel to figure it out). Yes, it is fully backwards compatible, (not case sensitive). I am still tweaking the method signatures a bit yet to streamline some things. I made some modifications to the template engine Expanded BaseTemplate, to carry template name, template path, template type, and filebytes\nMoved template detection into engine, and added a BaseEngine class which detects templates by shebang and file extension\n. Closing , updated PR #1157. Yup duplicate of #1128, I will bump the priority of that ticket. Any changes to the example libraries required @pedromorgan ?. Modules is causing the failure in travis atm, https://travis-ci.org/revel/revel/jobs/210274185 @pedromorgan . It should be working that way, see manual here http://revel.github.io/manual/routing.html\nCan you confirm this does not work ?. Closing due to no response from reported. We are preparing for a new release, sorry some things are broke atm. Can you pull the latest from revel into this PR  @shawncatz ?. Resolved PR #1143 . @shawncatz can you add - redis-cli info to the before_install section  ? like\nbefore_install:\n  - redis-cli info\n\n. Can you modify your pr and update the one line from if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update && brew install memcached redis fi to if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update && brew install memcached redis && brew services start redis; fi. Finally working @shawncatz . The GO Template engine uses html/template to render the content on the page. That parser strips html comments from the content. see here The reasoning behind this is here you can use a custom function to protect your inline comment to resolve this. Revel provides the raw tag to do this, see this for an example : https://play.golang.org/p/GOm-Myv3z5. Do you have a link to the issue ? I thought the person resolved there own issue by adding a function to revel.OnAppStart which is where things should be initialized. This will not set it any sooner. Added in modules. Implemented. Think this fixes the issue https://github.com/revel/cmd/pull/86. Yes, there was a new release, which means that all packages under github.com/revel needs to be updated. This was a breaking release (some code changes may be required), you can read about the changes here https://github.com/revel/revel/releases. Thanks for the heads up and test case. We will prioritize this issue.. Can you update params_test.go with a test case for this situation ? thanks... Would this be better ? So highest gets the first slot but lower ones can be promoted...\nfor k, v := range p.Fixed {\n-       values[k] = append(values[k], v...)\n+       values[k] = append(v, values[k]...)\n    }. What about a hybrid approach ? Since fixed and route parameters should never be set using query or form values they always do a replace, and query and form parameters are appended together.\n    // ?query vars are first\n    for k, v := range p.Query {\n        values[k] = append(values[k], v...)\n    }\n// form vars append so query first, form second\nfor k, v := range p.Form {\n    values[k] = append(values[k], v...)\n}\n\n// :/path vars overwrite and any above variables over written with path\nfor k, v := range p.Route {\n    values[k] = v \n}\n\n// fixed vars overwrite, finaly rewrite all above values with the fixed ones\nfor k, v := range p.Fixed {\n    values[k] = v \n}\n\n```\n. @pedromorgan I think with this PR #1171 you may need to rewrite the manual :-P\nI incorporated this change in there... Yes, do a go get -u GitHub.com/revel/cmd\nOn Wed, Apr 5, 2017, 6:47 AM runner notifications@github.com wrote:\n\nupdate github.com/revel/cmd ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1159#issuecomment-291866439, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBmYU_rxIkK_08IfXRPIjLqQAwzxuks5rs5ttgaJpZM4M0Het\n.\n. Looks like a good start - It would be nice to try and implement a more transparent solution but that can be deferred. . Recommend passing in a flag from the revel/cmd to indicate the core app that revel is to add in all folders for modules that contain tests. Additional feature could be to filter tests by module. I was just thinking there is no need to include those folders if revel was not running any tests - so harness would pass in something indicating what mode it should be run in... Update is best\n\ngo get -u github.com/revel/cmd/revel\nIf you want to \"uninstall\" find $GOPATH/src/github.com/revel and delete it, \nBut that update statement should do it for you.\n. Cool, that should do it for you then. We are trying to push out new releases on the first day of Tuesday of every month now. . Sorry, I should have seen that as well. The commenter is right though, those method signatures were changed... Sorry. Hi,\nSorry for the delay in response, a recent breaking update requires that you update the full revel package you can do so by go get -u github.com/revel/cmd/revel\nIf this is still an issue after please reopen. This should be under the revel/cmd I think.\nThat said I have done this in the past by placing a config value in the [dev] or [prod] section, and using that as a path to load up the localconfig for server specific values... So for [dev] it would be ./server_config.conf and for [prod] ../../../../server_config.conf (one level up from the application install folder)\nPersonally not a big fan of environment variables..  . Are you thinking of changing the config so it would default to the https://golang.org/pkg/os/#Getenv if it was available ?\n```\nfunc (c *Config) Int(section string, option string) (value int, err error) {\n         sv,err := os.Getenv(option), nil.(error)\n    if sv==\"\" {\n           sv, err = c.String(section, option)\n        }\n    if err == nil {\n        value, err = strconv.Atoi(sv)\n    }\nreturn value, err\n\n}\n``. Reference https://github.com/revel/revel/issues/391. What do you think of embedding the example above  @brendensoares ? Maybe that with an option to turn it on in the app.conf ?. Closing due to no response. But we do enable their use, this will use the environments variableCHAT_DB_DRIVER`\ndb.driver = ${CHAT_DB_DRIVER}. Already implemented, closing. `init` functions are not run as part of revel, the are a golang command see [here](https://golang.org/doc/effective_go.html#init). Note the build will fail because revel/cmd needs the changes merged as well. @arvenil\n\nIn the Go server engine the ServerWebSocket is implemented by the structure *GoWebSocket inside that structure the native Conn *websocket.Conn lives. In code you can implement this like\n```\nfunc (a App) EndPoint(ws revel.ServerWebSocket) {\n // realWs is \"golang.org/x/net/websocket\"\n realWs := ws.(*revel.GoWebSocket).Conn\n// Your code\nreturn a.Render()\n}. Thankyou for your suggestion, we will discuss this and have a look into it.. We would put it in the modules folder - i see there is already an open PR there for it. If you could integrate it to use the GORM module that would be good revel/modules#42 . I would thing it should be in the revel/modules/auth/casbin  thanks\nSteve. Any stack Trace in the console window or log files?\nOn Sat, May 20, 2017, 5:15 PM kikanny notifications@github.com wrote:\n\nOur server code was working fine and all of sudden all I'm getting is \"App\nfailed to start up\nrevel/harness: app died.\" I didn't make any change to the code. I've tried\nreinstalling revel but that didn't work. I've tried doing a fresh pull of\nour server code and that didn't work either. Any ideas would be greatly\nappreciated!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1177, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBr7UMD3asoxJTunqiWYCNhq_5vNDks5r74IdgaJpZM4Nhc9Q\n.\n. Nothing relevant appears in the trace. Reinstalling go basically cleans the GOPATH/pkg GOPATH/bin folders. But it doesn't explain why it was working and then wasn't. \n\nHowever if you are running this in a non development environment you should always use the revel build command to create a runtime executable, and then copy that to the server and run the executable. This will eliminate the need for any dependencies and also give you a single executable to run. You should never use revel run, as (like you saw) will try to run the application through a proxy and not give you meaningful errors if the software is unable to start. See here for more documentation on the revel command. RegisterController is called from app/tmp/main.go in your application folder, that map is used by the SetAction. Please reopen if you have more questions or chat with us on gitter https://gitter.im/revel. Hi, that looks like a great addition. We are just about ready to release a configurable template engine. Which will affect this PR. I will ping you when it is released so you can update this code. @Acidic9 Did you want to resolve these conflicts ? Or should I just close because the {{with does the same ?. Closing, using {{with accomplishes the same because the inner block will only be executed if object is not nil. The reason for this is that this session data is stored in the form of an\nencrypted cookie which is text based. What I have done in the past is to\nconvert the object to JSON before storing. Of course you need to be mindful\nof the size limit of a cookie. If your objects are too large to serialized\nwith JSON you could store the session data in a database and use the cookie\nsession to store a reference to the database data. I am looking at ways to\nimplement this as a module. Hope this helps\nNz\nOn Sun, Jun 4, 2017, 12:56 AM Ari Seyhun, notifications@github.com wrote:\n\nWhen using the in-build sessions with Revel, the session type is\nmap[string]string.\nIs it possible for this to be changed to map[string]interface{} to allow\nany kind of session type?\nIf this was changed to map[string]interface{}, methods could be written\nfor retrieving the basic data types such as func (s *Session) Int64()\nint64 { ... }, etc.\nMaybe this would over complicate things but it's just an idea.\nAny thoughts?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1181, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBpMRA97fn02_Pd3KUXsRfM6PSUqPks5sAmMTgaJpZM4NvTjz\n.\n. @Acidic9 currently session information is stored in an encrypted cookie, I am working on a way to change this so you can store session data server side (with client cookie reference) or like it currently does.. With PR #1216 you will be able to store any small object in the session using the controller.SessionMarshel  And with this PR you will also be able to make your own session engine by implementing that interface. The idea is that you can then expand upon a cookie based version to a larger version. This is a firewall issue, closing for the time being - thanks @runner-mei . What purpose would the Ready function perform ? . That couldn't be done by \nfunc init() {\n  revel.OnAppStart(Ready)\n}. I like revel.OnReady(func(){}) or revel.OnStart(func(){}) \n\nThat said, not sure if this is a direly needed feature. Closing this in favor of clearer documentation on the subject. Revel expects an app folder with the controllers folder inside it. See here to see how the folder structure should be laid out.. Sorry, this had gotten buried in my email. Is this an app that you have written or are you using one of the example apps ? . Thanks, PR #1205 should resolve this issue. Thanks @runner-mei , I had thought that maps with multiple read access was OK and writes required synchronized access. It appears I would need to use a sync.RWMutex for reading and writing to the map. I will update this PR with that which should make it functionally the same as yours.. @runner-mei I have created a new PR to address the issue further - I think there may have also been a basic flaw with the previous PR where the save map values were never used. Please checkout #1223. Good point @runner-mei  How about I move the mutex locking to the beginning of the else clause like this ?. PR has been merged into develop. What is your GOPATH set to in windows ? You can only run a revel application when that application exists inside the GOPATH. The first line should be\nfunc (this Foo) Boo() revel.Result {\nOn Mon, Jul 3, 2017, 2:04 PM Huholoman, notifications@github.com wrote:\n\nHello,\ni did some search in issues and in code, but I didnt find anythink what\ncould help me.\nThis is my code\nfunc (this *Foo) Boo() {\nmp := map[string]interface{}{\n      \"yaya\": \"blabla\",\n      \"blabla\": \"yaya\",\n  }\nreturn this.RenderJson(mp)\n}\nI think, it should be ok.. I even found similar code in some issue here,\nbut my code still throws me this error\nERROR 2017/07/03 22:31:56 build.go:119: # remembrall/app/controllers\napp/controllers/app.go:19: too many arguments to return\n  have (revel.Result)\n  want ()\nCan anyone help me, please?\nThanks,\nTobias\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1190, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBgXFaFvk2ndNM5_hMI-ZrULEEIzZks5sKVdcgaJpZM4OMrte\n.\n. Would you be able to resolve the conflicts against the develop branch ? \nthanks. Closing, the better method to use is the Before/after instead of the interceptor. . Sorry you found another manual issue, the correct values for cache are \n DefaultExpiryTime\n ForEverNeverExpiry\n\nThe reason the \"go\" command is used is to offload the work to another thread, so the current thread doesn't need to wait for the cache to be added.. @jimmy-go Thanks for the feedback, and the points for making Revel better.\nThe Go way is idiomatic, that is the whole idea behind Go. But it does not make you think about code organization until you realize that hey maybe that file that is 2000 lines long should have been split into two, and now I need to worry about packages and crap if I am moving stuff now I got circular references and  \u00af_(\u30c4)_/\u00af  . Revel forces you to think about planning your package layout at the beginning which is what a lot of beginners need. Do advanced programmers need this, likely not as much but I find it convenient that Revel does a skeleton layout for me.\nThe revel command actually mashes together a set of multiple Go commands. Here is what it does and the Go equivalent command\n1) Start a proxy (Just for the browser aspect)\n2) Building a main file from the code, this is very similar to go generate function - and has the same purpose, let the machine generate code that the machine needs and the humans only need to deal with higher level code.\n3) Compile the code - this is a convenience method to go build\n4) Check errors in code, if an error in the code is a missing package error do a go get missing.package - repeat step 2\n5) Run the code connecting the proxy to the port the code is running on, pass in the path to the application (so templates can be found), pass in run mode (dev, prod or other) yourapp your_app_path run_mode\n6) If the compiled code has errors display the errors through the proxy (and related file)\n7) Monitor for any source file changes, if code is changed restart at step 2\nI am looking at breaking this process out, but you have to admit it saves a bunch of steps.\nI agree with the framework vs toolkit issue, and part of the series of the latest releases was to make Revel more modular internally. Currently the server and template engine have both pluggable architectures. which avoids the issues you have with typical frameworks were you \"hit the wall\" with the configuration options available. Revel could communicate on an RS232 port now if you wanted it to. \nThe config, routes, those are in the crosshairs to be dealt with in a different manner. \nMy 2 cents :-D\n. OK, You are running an ab tester which is generating thousands of requests which are piling up because one of the functions you wrote is taking 5 minutes to return ? Are you expecting Revel to close the response before your function returns ? . In the code read and writes timeouts are set here. Looking at the documentation it may be that we also need to set the IdleTimeout or the HeaderTimeout. Which are you setting manually ?. The messages folder needs to be at the same level as the app folder - see the i18n example app here \nhttps://github.com/revel/examples/tree/master/i18n. O wow it totally is, thanks for pointing that out .. Sorry about that..\nBTW like the goatee. Yup, I have the same issue - we are working on rewriting the cli and have logged that as an issue https://github.com/revel/cli/issues/1. Do you mean that the template delimiters in the app.conf is not being used ? Can you provide an example ?\nthanks. The documentation looks to be wrong, the app.conf should be template.go.delimiters not template.delimiters , this was changed in v0.16. Closing for now, if this does no resolve your issue please reopen. If you change that if statement to \nif engine.splitDelims != nil && strings.Index(baseTemplate.Location(), ViewsPath)>-1 {\n\ndoes it work ?. @swrap , these changes have not been merged yet to master - will be on Tuesday (Oct 31).... There was a lot of work done in routing, one change that may have effected your project is that the wildcard routing cannot affect controllers in other modules. If you can PM the route paths on https://gitter.im/revel I can have a look at them and see if I can see any issues. The errors you listed would occur on app startup before any requests are made, there are no parallel processes running at this time.\n. The error below looks legit\nERROR 2017/07/12 15:54:52 router.go:140: Failed to find controller for route path action /:controller/:action?controller.:action\nIt looks like there is an action path in the routes file defined like controller.:action and it should likely be :controller.:action\n. The other route error is indicating that the route action createpost does not exist for the controller - unfourtunately it does not log the actual controller name as well. If you modify github.com/revel/revel/controller.go line 307 to the following it should tell you the controller name as well.\nif c.MethodType = c.Type.Method(methodName); c.MethodType == nil {\n-       return errors.New(\"revel/controller: failed to find action \" + methodName)\n+       return errors.New(\"revel/controller: failed to find controller.action \" + controllerName + \".\" + methodName)\n    }. The validation is tighter with 17 then the older versions, although the\noccasionally successfully starting up is puzzling., Can you update the\nrouter. Go code to the above so it will show the controller it is looking\nfor in the action?\nThanks\nOn Wed, Jul 12, 2017, 5:28 PM Matthew Baird, notifications@github.com\nwrote:\n\nthose paths work in < .17, and surprisingly they ALSO work occassionally\nwhen I start up under 0.17. I have logs and another developer to verify\nthis.\nThis codebase works fine if I roll back the commit hash to 8b51173\nhttps://github.com/revel/revel/commit/8b511737be1349346965fddaf7c107017c0c1b9a\n\"createpost\" doesn't exist - it's CreatePost and that does exist and is\npart of our QA automation testing (func (p Project) CreatePost(....))\nI ctrl-c the process, up arrow to execute the same start command and get\nDone, without errors.\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.jobs\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.static\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.staticcache\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.testrunner\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module jobs\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module static\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module staticcachecontrol\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module testrunner\nINFO  2017/07/12 17:27:30 module.go:157: Found testrunner module, adding tests path /home/matthew/code/go/src/github.com/AtScaleInc/modeler/tests\nINFO  2017/07/12 17:27:30 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/12 17:27:30 main.go:34: Running revel server\nERROR 2017/07/12 17:27:30 router.go:800: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action route\npanic: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action route\nthoughts?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1200#issuecomment-314935059, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBl-T0ewX-8ZqutGBS2vz3Zsvm3JZks5sNWSqgaJpZM4OWTqH\n.\n. (back) \n Can you insert the following ERROR.Printf line like :\n\n// Note method name is case insensitive search\nif c.MethodType = c.Type.Method(methodName); c.MethodType == nil {\n-       return errors.New(\"revel/controller: failed to find action \" + methodName)\n+       ERROR.Printf(\"revel/controller: failed to find action \" + controllerName + \".\" + methodName,\"Short name\",c.Type.ShortName(), \"%#v\", c.Type)\n+       for _,m := range c.Type.Methods {\n+           ERROR.Printf(\"Method \" + m.Name)\n+       }\n\n+       return errors.New(\"revel/controller: failed to find action \" + controllerName + \".\" + methodName)\n}\n\nThat should print out the ControllerType details so maybe it will help resolve what is going on\nI appreciate your time identifying issues, I know it can be painful process when something upstream breaks your code. . Lol take off ehh !\nYes it appears that it is trying to map Engine.Create action to the EngineWebhooks controller. Can you post what you have for the route definitions of Engine.Create and what is defined for EngineWebhooks ?. Is that the order in the route file or is enginewebhooks first ?\n. Created a small test project with those settings, no issues parsing the routes... \nDo you have anything in your code that calls revel.RefreshRoutes ?. And are those controllers in a module or in the app ?. Sure, email will come from (my github name)@gmail.com. Typically you would mock the database that the checkAuth function is using. Something like https://github.com/DATA-DOG/go-sqlmock can help with this. Then you do not need to change the function. Closing for now, re-open if you have more questions or chat on https://gitter.im/revel/community. The challenging part with that is Revel registers it as a miss on the router path since the route path starts with matching the method and working its way up. So when it looks up your request it looks for /GET/ to find App.Index and you could have a second like /PUT/ pointing to App.Index2 So in that case it hits it as a miss. \nWhat could be done is that I add another route without the method (for methods which are defined) and if the first lookup fails then a second lookup could occur which may find a match and if a match is found we could set the status code to 405. Do you think that would work for you ?\n. There is a domain routing feature I have been eyeing that this could be implemented in. I added a reference back to this from there. . It has to do with changes to the router, I am putting them both together in that aspect.\nthanks . @brendensoares Did a bigger update to the code base - I moved most of the logger code inside a revel/logger package and broke out the code into separate files. There still is a revel/logger.go file which defines the global loggers but in general it is cleaner. Can you have a quick peek again ?. @zuoRambo thanks for the feedback - The reason we choose to deprecate those variables is because the functionality is contained inside the revel.AppLog, revel.AppLog.Error(\"message\") revel.AppLog.Warn(\"message\") revel.AppLog.Debug(\"message\") revel.AppLog.Info(\"message\") revel.AppLog.Crit(\"message\"). Since they are contained there we should not expose a duplicate method elsewhere.\nI realize it may be some work to switch over existing applications to use the new logging, but with the new logging you get some extended features like JSON log records with field/values. \nLet me know if you have more reasons for revel.ERROR log messages to remain open. I am not really sure this will work in all situations\n. @pedromorgan \nI am torn if I should be adding two new methods (and two maps) on the controller to do this. Or if this should be implemented elsewhere and injected onto the controller as a single object - my other thoughts are on page session data (data that would be persisted through a series of JSON requests, ie only be relevant for that page). I am testing a new approach where the c.Session object is changed to a map[string]interface{} Since this is a breaking change I am deferring this PR till next release.... Thanks for the PR, but I dont see any files changed. Closing, if you want to push more commits reopen.. With the latest develop build you can create your own ServerEngine like\ndone here\nhttps://github.com/revel/modules/tree/develop/server-engine/fasthttp it\nshouldnt take much to create an engine that is based on the graceful http\nengine.\nI agree about the context option, although I am concerned people will not\nuse it properly\nhttps://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39\nOn Mon, Aug 7, 2017 at 2:30 AM, Rambone notifications@github.com wrote:\n\nWhy revel don't use graceful http https://github.com/facebookgo/grace\nto support graceful reload http server?\nAnd i think revel need context https://golang.org/x/net/context.\n@notzippy https://github.com/notzippy\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/pull/1217#issuecomment-320616269, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBr0SYqxBJK9V1aVXhXvCQAOzUkvCks5sVtkzgaJpZM4OlE3j\n.\n. Labled as a bug since there was some issues which were open that referenced bugs in the cache code. Not yet @zuoRambo still working on an RC for this one as it has a number of changes. Thanks for the detail bug report, this is resolved in PR #1205 which is merged to the development branch only atm. 1) Server Event support We have added a number of meta events here a listener can be added here . We haven't got an implementation on how graceful shutdown will work but it is on the horizon (and the event is there)\n2) Log rotation #1213 \n3) With the new logger there is a context logger placed on the controller.Log here\n4) Controllers do have a kind of context map called Args whose life cycle lives the length of the request. It is not a true context object that you can abort a request or the likes, but you really shouldn't be populating context with real data anyways . . Also - thanks for the feedback - always great to here back from people using Revel. All the new items are now implemented !. Thanks, that failure is annoying - it almost seems like there is a slight delay before memcache retains the data and the unit tests are going to quick for it. I can get it to occur once in a thousand runs on my machine, and it is purely random, if I put any delay in like logging it never occurs ! So I think maybe a slight delay is needed between writing and reading the data back.. Passing now !. Closing in favor of #1225 . I was thinking of just adding another configurable port to listen on so you could shutdown the server or even get some running stats from the server. @zuoRambo , we have merged code into develop that allows you to define any http server. See fasthttp for an example implementation. I think this would be an ideal implementation for the graceengine idea. The standard go server source is here. Can you re-implement this PR as a server-engine module (modules/server-engine/grace)?. @zuoRambo Thanks a lot, the implementation looks great... Unfortunate that this feature is only available in go 1.8. A lot of peoples installations are on Ubuntu which seems to be stuck on Go 1.6 (which is why we kept compatibility to that version.) \n\nPerhaps this can implement this by making a new server engine wrapping https://github.com/braintree/manners  ? Which is compatible with Go 1.6 and supports the shutdown method. What are your thoughts on this ?. I have been looking at a way to implement this in an version agnostic manner, the general implementation is usable but linking it to go 1.8 can make things difficult.. It has been a long time coming but now a number of dependent libraries only support Go 1.8 as well so I am now merging this. Thanks @zuoRambo . Added via another PR. go get github.com/revel/cmd/revel\nOn Tue, Aug 22, 2017, 5:11 AM Rambone notifications@github.com wrote:\n\n@paritosh90 https://github.com/paritosh90 how do you install revel\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1227#issuecomment-324007071, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBmGP8jErgAe2E-cHTglsBXcN6wkBks5sasVcgaJpZM4O9X35\n.\n. We use a similar one, see process here revel/meta#11. We needed to modify the github.com/inconshreveable/log15/logger. Wasn't planning on making this a long term repository though. Is this an issue for you ?. Revel automatically downloads dependent packages and places them in the go\npath. Check to make sure there are no revel packages (outside of your go\ndep filler) that exist\n\nOn Mon, Sep 4, 2017, 5:54 AM Michael Bond notifications@github.com wrote:\n\nAttempting to start a new project using GoLang/Deps (\nhttps://github.com/golang/dep ) as the package manager.\nError encountered: panic: reflect: call of reflect.Value.Type on zero\nValue\nSteps to reproduce above error:\n\nrevel new test1\ncd test1\ndep init\nrevel run test1\nnavigate to localhost:9000 in web browser. Causes error\n\nHowever, if you run the new app before doing a dep init the app runs.\nSteps to reproduce working app:\n\nrevel new test1\nrevel run test1\nctrl+c\ncd test1\ndep init\nrevel run test1\nnavigate to localhost:9000 in web browser. Does not cause error.\n\nAlso, if i delete app/tmp/main.go and run it again it still works.\nVersions:\n\nGo: go version go1.9 linux/amd64\nRevel:\n\n~\n~ revel! http://revel.github.io\n~\nVersion(s):\n   Revel v0.17.1 (2017-07-14)\n   go1.9 linux/amd64\n\nDep: 0.3.0\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1231, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBgqnWMWjxAz0ZXeYJqDOi17sHrb5ks5se_LqgaJpZM4PL4f6\n.\n. The cause of this is because revel downloads missing packages automatically using a go get <packagename> command. This places the packages outside of the vendor folder causing the for mentioned issues. A possible solution is to change the revel code so that if a vendor folder is found it runs the deps command to add the new package. Logging now has a context option to it - (see https://github.com/revel/revel/pull/1213)\nI just fixed it so if you do a git update you should get the patch\nhttps://github.com/revel/modules/commit/3f777980cd94fa4c59b25e3ba9a4f0f616d64cf3\n. Closing - no reply. Thanks for the PR, you need to add some context with what you are trying to accomplish. Currently I see you added a Button that is wrapping an input and an anchor. This is not good form, I am closing this but feel free to reopen . type Is a valid style attribute see here. Closing because this does not appear to be beneficial.. You can use a common structure, but your common controller code must be in a package called controllers. For example the booking application App Controller extends the GorpController.\n\nIf you want to make a common controller that is used by multiple projects you can create a module and place the controller inside a package there. \nIf you have multiple shared controllers in a single project you want to extend you can place them in a package like /app/shared/controllers/your_controller.go\nThe key is the package name must be controllers.. I am closing this for now, feel free to re-open if this didnt work. @xaionaro If you want to help with development that would be great :-D\nhow about revel/cmd#100 ?\nI have added some code to detect and hide types that are unexported\nDEBUG 13:14:00  revel reflect.go:704: Skipping adding spec for unexported type  type=test package=web/app/controllers\nI have added some warnings to indicate if a type exists in the package but does not inherit from the expected package like\nWARN  11:54:39  revel reflect.go:713: Type found in package: controllers, but did not inherit from: revel.Controller  name=EventUI path=web/app/controllers. Sorry you are finding the documentation a little technical side - sometimes when you work with it so long it is hard to see it from a new perspective. The command you are looking for is {{append . \"styles\" \"vendors/bootstrap/dist/css/bootstrap.min.css\"}} see here\nIf you have suggestions on how to improve the manual we are open for suggestions. The tutrorial section in the manual makes use of the append function as well. Go has a unique template syntax, the html template extends from the text template so that is where you can find a lot of the core functionality.\np.s. I did respond to you on gitter as well . Quite right, this is a bug, unexported types should be ignored. But I got a fix revel/cmd#100. Thanks, those should say {{$field.ID}} in that example, will do a PR for develop on this. Logging has been rewritten (on develop branch), I don't see this on the developer branch I am closing this as I cannot duplicate it.. Soon ?!? Just when I think it is good, I seem to find something else that is off :-(\nIf you are proficient in Go you can try switching to the develop branch for all the revel repos in your gopath (src/github.com/revel/*) and see how it goes for you. But there may be some bumps... . Looks like this file  /Users/sobin/golang/src/thought_books/app/controllers/gorm.go has a package main and /Users/sobin/golang/src/thought_books/app/controllers/app.go has a package controller defined at the top of the files. . This code doesn't compile. Also I am unsure what advantage this provides. Can you explain in more detail ? Closing for now.\nthanks.. Develop will merge to master - hopefully on oct 31\n. Hi\nI have struggled with the question of how best to integrate a CRUD design into Revel as well, I don't think re-inventing the wheel is necessary as there are a lot of good tables out there already. Which one to choose ? It really depends on your current architecture, and what you are familiar with. I am thinking of making a module using datatables, it is a bit large of a javascript library but it appears to be consistent performance regardless of the number of rows. I will describe my setup below\nI am using https://datatables.net/ with Revel to display an editable table with millions of records. I have enabled the scroller ,serverside flags and set the ajax property to retrieve the data via a json call. I have a collapsable section above the table which a user can create a new record or edit an existing record. On edit I fetch the row contents from the datatable using the \n            referenceRow = eventDataTable.row( $(this).parents('tr') )\n            var data = referenceRow.data();\n\nSaving the data is a matter of collecting it back into a data object and then I use an ajax post like\n        $.ajax({\n            url: \"{{url `Data.DataSave`}}\",\n            contentType: \"application/json\",\n            type: \"POST\",\n            dataType: \"json\",\n            data:JSON.stringify(data),\n            success: function(dataReturn) {\n\nThe endpoint for \"DataSave\" is a single struct object which makes it easy to validate and save\nI was able to do up 4 editable tables pretty quickly using this technique. Only issues I had is that numerical values needed to be a number, (or removed if they were empty). On server side I used gopkg.in/guregu/null.v3 to handle null numbers. \n\nYour issue with the timestamp i am not completely clear on, but it sounds like you if you posted the data back as a JSON object (make sure you set the correct contentType) and had a target of a slice of dates it should work. When posting arrays back as form values the expected field names are a[]=?&a[]=? and so on. \nHope this helps\nPostback if you are still having problems or chat on gitter\n. Oh I thought you were talking about the whole front UI..  If you are just talking about a ORM we do have a module called using GORM and another using GORP SQLx would make another fine addition as well. With Revel the preference is to expand the functionality using modules, that way you are not locked in.\nRevel/examples is an excellent place to checkout some sample code the booking app runs out of the box. It uses GORP to do the orm layer.\n. This is done, see the booking app in examples.. Revel 0.18 was just released that may have something that fixes this issue.\nCan you do a\ngo get -u github.com/revel/cmd/revel\nOn Tue, Oct 31, 2017, 4:12 PM Nikola notifications@github.com wrote:\n\nI am getting this error when trying to use some other template negine then\ndefault:\nServer Error:\nTemplate Compilation Error (in /Users/johnny/projects/go/src/github.com/revel/modules/template-engine/ace/app/views/errors/403.json): Failed to parse template file using engines /Users/johnny/projects/go/src/github.com/revel/modules/template-engine/ace/app/views/errors/403.json Template Compilation Error (in errors/403.json:2): function \"Error\" not defined\nMy conf looks like:\nmodule.1.ace=github.com/revel/modules/template-engine/ace\nmodule.2.static=github.com/revel/modules/staticmodule.3.jobs=github.com/revel/modules/jobs\nmodule.4.testrunner = github.com/revel/modules/testrunner\ntemplate.engines=ace,go http://github.com/revel/modules/testrunnertemplate.engines=ace,go\nMy revel version is:\n~\n~ revel! http://revel.github.io\n~\nVersion(s):\n   Revel v0.17.1 (2017-07-14)\n   go1.8 darwin/amd64\nAce will minify html as far as i can see (similar to jade) and that is why\nI want it.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1253, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBmA2K7hKqxYjttGUOpFZIeoU9HK7ks5sx6lAgaJpZM4QNjC3\n.\n. Can you do the following commands \ngo get -u github.com/xeonx/timeago\ngo get -u github.com/revel/log15. I had to do the following in Gopkg.toml\n```\n[[override]]\n  branch = \"master\"\n  name = \"github.com/xeonx/timeago\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/log15\"\n\n. Are you using a `vendor` version of revel ? it looks like the github.com/revel/revel that Go is compiling against is not the correct version.\n. Can you verify that `$GOPATH/src/github.com/revel/revel/logger` folder exists ?. And you are sure there are no vendor folders in your project ? If you check the file [$GOPATH/src/github.com/revel/logger.go](https://github.com/revel/revel/blob/master/logger.go#L18) The field is really there. So I am thinking maybe the go compiler is using another folder ?. If you want to stay with an older version of revel you can use the revel meta package. \nSteps\n$ go get github.com/sparrc/gdm\n$ mkdir revel-checkout \n$ cd revel-checkout/ \n$ export GOPATH=$PWD \n$ go get github.com/revel/meta \npackage github.com/revel/meta: no buildable Go source files in revel-checkout/src/github.com/revel/meta \n$ cd src/github.com/revel/meta/ \n$ gdm restore -f v0.17.0.godeps \n$ go install github.com/revel/cmd/revel/ \n$ ../../../../bin/revel version \n~ ~ revel! \nhttp://revel.github.io \n~ Version(s): \nRevel v0.17.0 (2017-06-06) \ngo1.8.3 linux/amd64\n``\n. Currently the revel/cmd and revel/revel must be the same version. I haven't found an easy way to separate them :-( . But the above will work to checkout specific versions of Revel, I just havent found a nice way to document it yet. The GDM package manager adjusts your GOPATH's repos checked out hash to match the \"godeps\" file (or if the repo isnt checked out it will do so then adjust the checked out branch). That is why I created a new GOPATH in my example. That is a different approach of saving a file, ideally the files should be saved like this app https://github.com/revel/examples/tree/master/upload , so if you pass in thecontroller.Params` object you should be good to go.. Its called abstraction, it was done so that the server engine can be abstracted to use other http.Server like Fasthttp. Sorry if this broke your existing code, but this is the direction we had decided to move in. \nIn most cases were you were not completely reliant on the http.Request and http.Response objects things would be ok. \n. If you need to stay on an older version of revel here are the steps to do that. Sorry this has not made it to the documentation yet\nhttps://github.com/revel/meta/pull/11. You need to read the change log or the release notes. You need to cast it to ResponseWriter,\nhttps://github.com/revel/revel/releases\n\"You can get the http.ResponseWriter from\nrevel.Controller.Response.Out.Server.GetRaw().(*http.ResponseWriter)`\"\nOn Sat, Mar 10, 2018, 8:48 AM Okunev Yu Dmitry notifications@github.com\nwrote:\n\nDoesn't work\nresponse := controller.Response.Out.Server.GetRaw().(*http.Response)\nINFO  19:46:51    app server.go:2753: http: panic serving 127.0.0.1:34062: interface conversion: interface {} is http.response, not http.Response\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1259#issuecomment-372044107, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBgX6K-H0UmCjyQJ6IzGOSqT0f_Htks5tdAPygaJpZM4QP7sJ\n.\n. Should be resolved, please do a go get -u github.com/revel/revel\nThanks for posting.. Are you returning c.RenderTemplate ? or something else ?\n\nYou can try change the logging in production to be the same as dev and see if that helps tracking things down. \nI would also try looking for something that you specified in the dev section that is not in the prod section of the configuration file. . Hi @lujiacn \nThanks for the detailed explanation - \n1) The default http.addr listening ip was to open, and as such could be a security issue in its default state. That is why it was changed, but that change should have been noted. I will add it.\n2) Confirmed. This appears to be an issue with the way the package command works differently from the build command. For now please use the build command and tar that folder to the server.\n. You can use an environmental variable in the configuration - see http://revel.github.io/manual/appconf.html. No problems, another way of doing the redirect is\nc.Redirect((*Task).Index)\nThat way you do not need to import the route file\n. just tried dotted notation in route path without issues \n*       /v3.5                module:apptest\n*       /v3.6/apptest                AppTest.Index\n. Initial testing I couldn't reproduce, I am adding to the examples a deeper\ntest... Working on other bugs ATM though\nOn Mon, Dec 4, 2017, 4:34 PM Nick Wallace notifications@github.com wrote:\n\nAny updates on this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1264#issuecomment-349155092, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBnB7-wZDQwxSQt0k-a81dqu0cfP-ks5s9I-agaJpZM4QYdx_\n.\n. The panic filter is failing because it cannot locate the source file of the go code that caused the error. If you have stripped away the source files from the deployment this could cause that (IMHO it really shouldn't) but looking at the code it is attempting to load up the file which the stack says has the error on it. \n\nIf you remove the revel.PanicFilter from app/init.go you should see the cause of the real cause of the error.. It may be that the Websocket interface has been changed - if you look at the breaking changes you can see the new interface for a WebSocket is ws revel.ServerWebSocket . This simplified the access to a websocket to two methods ws.MessageSendJSON(&event) and err := ws.MessageReceiveJSON(&msg) \nDoes this resolve your issue ?. I can simulate it. Looking into a solution.... @cytown can you check to see if that patch resolves your issue ?. If you set the address to 0.0.0.0 it should listen on all ip addresses. I\nwill update the manual\nOn Mon, Nov 20, 2017, 5:49 PM yuki2006 notifications@github.com wrote:\n\n(Sorry, my English is not good.)\n0.18.0's default value of http.addr changed to \"localhost\"?\nAnd can I set a wildcard?\ndocument\nhttps://revel.github.io/manual/appconf.html\nOn Linux, an empty string indicates a wildcard\nsource code(0.18.0)\nhttps://github.com/revel/revel/blob/master/server.go#L82\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1268, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBpoH82hNCKx0qZthRzODHUesb3ilks5s4iwSgaJpZM4QlKgR\n.\n. The Release notes were mistake about the http.Response - it is actually the http.ResponseWriter \n\nhttp.Response.Out Is not the http.ResponseWriter and is deprecated, you can get the output writer by doing http.Response.GetWriter(). You can get the http.ResponseWriter from revel.Controller.Response.Out.Server.GetRaw().(*http.ResponseWriter)`\nAnother (more generic) approach to do this is by extending the GoServerEngine . An example of this approach is the NewRelic module\n. Sorry, you are having issues - You are coming from version 0.15 correct ? Version 0.16 started automatically capturing request containing a json body (specified by the request header) and placed that into the c.Params.JSON object. Further if there is a structure parameter it would automatically bind. So for your code\nfunc (u *Controller) Endpoint() revel.Result{\nbody, err := ioutil.ReadAll(u.Request.GetBody())\nvar formEditEmailUser forms.FormEditEmailUser\nif err = json.Unmarshal(body, &formEditEmailUser); err != nil {\nu.Response.Status = 400\nlog.Println(err)\nreturn u.RenderJSON(err.Error())\n}\n// More code\nYou can simplify it to\nfunc (u *Controller) Endpoint(userForm forms.FormEditEmailUser) revel.Result{\n/// more code\n}. @rami-dabain  There is one more production bug that I would like to include with this patch set, can you wait for it ?. This is an indicator that a controller function has a field in which the the Revel cmd generator cannot automatically create as a unique identifier.  For example lets say your controller validates something like the following\nc.Validation.Required(user.Name)\n\nIn behind the scenes Revel looks at the source and captures the user.Name, so when this validation fails Revel knows in this file that the particular function that was being validated had the key of user.Name (it does this by calling the runtime.Caller() and getting the source code position)\nYou can override the key name by doing something like\nc.Validation.Required(user.Name).Key(\"application.user.name\")\n\nwhich will work just as well allowing you to explicitly to do this. I will check the code to see if I can make the error message more friendly. New version will say \nERROR 08:12:49 reflect.go:540: Error: Failed to generate key for field validation. Make sure the field name is valid. line=14 function=Index file=src/test/app/controllers/app.go. I can see how it would get confused with that. Glad you were able to\nresolve it.\nOn Thu, Nov 23, 2017 at 5:30 AM, Lukas Matt notifications@github.com\nwrote:\n\nOk I resolved it. For something like this\nGET     /stream                                 Stream.Index\nGET     /stream/:page                           Stream.Index\nI changed my controller to:\nfunc (s Stream) Index() revel.Result {\n  return s.IndexPagination(0)\n}\nfunc (s Stream) IndexPagination(page int) revel.Result {\n[...]\nand my conf/routes to:\nGET     /stream                                 Stream.Index\nGET     /stream/:page                           Stream.IndexPagination\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1273#issuecomment-346618885, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBjRypMm4SwRutzMBhPZy4UKYOin_ks5s5XOFgaJpZM4Qot0y\n.\n. Can you upload the line it is referencing in src\\git.xxx.com\\project\\sign\\app\\tmp\\main.go:11:2 ? \nThanks. Closing because of no response. I do not think this is a revel issue, it could be you have an older go installation that is causing issues.\nSee here. confirmed results.compressed = true. This should fix the issue. @pedromorgan It adds in a library so that windows terminal output is colored. Did you specify the template engine to use go and pongo int the app.conf ?\n\nOn Sat, Dec 9, 2017, 8:53 AM megabait1212 notifications@github.com wrote:\n\nHi,\nI am trying to load pongo2 but always getting this error \"Template loader\nerror error=\"Panic (Template Loader): Unknown template engine name -\npongo2.\"\nRevel v0.18.0 (2017-10-30)\ngo1.9.2 linux/amd64\nI have installed pongo2 like in the manual \"go get -u\ngithub.com/flosch/pongo2\", also tried with dep and glide, for existing\nproject and for new, nothing help.\nCould you give advice what to do? How to fix such issue?\nThank you\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1278, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBjPs2jT0I95XMJ2wIpydcldV_Qj5ks5s-rrtgaJpZM4Q8KJY\n.\n. It appears you can ignore this error. The \"proxy\" used in the revel command makes use of the revel server engine and it erroneously reports this error. But if you look further on it does compile the pongo2 templates successfully (at least for me) \n\nERROR 10:24:05  revel harness.go:100: Template loader error                     error=\"Panic (Template Loader): Unknown template engine name - pongo2.\"                                               \nDEBUG 10:24:05  revel harness.go:146: Rebuild Called\nlater on\nDEBUG 10:24:09  revel template.go:116: Refresh: Refreshing templates from        section=template path=\"[/Work/builds/gopath-revel/srcgithub.com/revel/examples/booking2/app/views /Work/builds/gopath-revel/src/github.com/revel/revel/templates /Work/builds/gopath-revel/src/github.com/revel/modules/template-engine/pongo2/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/template-engine/ace/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/jobs/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/testrunner/app/views]\"\nDEBUG 10:24:09  revel template_engine.go:66: CreateTemplateEngine: init templates      section=template name=pongo2\nDEBUG 10:24:09  revel template_engine.go:66: CreateTemplateEngine: init templates      section=template name=ace\nDEBUG 10:24:09  revel template_engine.go:66: CreateTemplateEngine: init templates      section=template name=go\nDEBUG 10:24:09  revel template.go:144: Refresh: Refreshing templates from        section=template path=\"[/Work/builds/gopath-revel/src/github.com/revel/examples/booking2/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/testrunner/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/template-engine/pongo2/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/template-engine/ace/app/views /Work/builds/gopath-revel/src/github.com/revel/modules/jobs/app/views /Work/build\ns/gopath-revel/src/github.com/revel/revel/templates]\"\nDEBUG 10:24:09  revel template.go:330: loadIntoEngine:Engine 'ace' compiled /Work/builds/gopath-revel/src/github.com/revel/examples/booking2/app/views/Application/About.html  section=template\nDEBUG 10:24:09  revel template.go:330: loadIntoEngine:Engine 'pongo2' compiled /Work/builds/gopath-revel/src/github.com/revel/examples/booking2/app/views/Application/Index.html  section=template\nCan you verify this as well ? . Can you show me the full startup stack until it says \nListening on.. localhost:. That is the first part, there should be more yet. Hi\nCan you change the config log to be \n```\nlog.all = stdout    # Log all loggers to the stdout\nlog.all.filter.module.app = stdout    # Log all loggers for the application to the stdout\nlog.error.nfilter.module.app = stderr # Everything else that logs an error to stderr\nlog.crit.output = stderr              # Everything that logs something as critical goes to this\n``\nAnd capture what the output is until theListening on.. localhost:` again. Hi - I wanted to thoroughly test the situation (thus the delay). \nFirst off i was wrong about the log command it should be log.all.output=stdout that will show all debug / info messages. Now I believe the issue may be that the included templates are not in pongo2 format, so what happens is the pongo2 engine compile fails for the primary template then the go engine picks up the template and renders what you see. The fix is to change the header.html and footer.html like\nheader.html\n```\n<!DOCTYPE html>\n\n\n{{title}}\n\n\n\n\n\n\n    {% for style in moreStyles %}\n      \n    {% endfor %}\n    {% for script in moreScripts %}\n      \n    {% endfor %}\n  \n\nFooter.html\n\n\n```\nNow if you do NOT want the automatic template compiler switch you can add a shebang header to the Index.html like this\n```\n! pongo2\n{% set title = \"Home\" %}\n{% include \"header.html\" %}\n\n\n\nIt works!\n\n\n\n\n\n\n\n      {% include \"flash.html\" %}\n    \n\n\n{% set title = \"Home\" %}\n{% include \"footer.html\" %}\n```\nThen if the specified engine fails to compile the template you will get an error like\n```\nServer Error:\nTemplate Compilation Error (in /home/notzippy/tmp/revel-test/src/testpongo/app/views/App/Index.html:1): [Error (where: parser) in footer.html | Line 1 Col 17 near '='] If-condition is malformed.\nAdditionally, an error occurred when rendering the error page:\nTemplate Compilation Error (in /home/notzippy/tmp/revel-test/src/testpongo/app/views/App/Index.html:1): [Error (where: parser) in footer.html | Line 1 Col 17 near '='] If-condition is malformed.\n```. Thanks, included the fix in pr #1271 . You can do a\ngo get -u github.com/revel/cmd/revel\nOn Thu, Dec 14, 2017, 6:15 AM pranay-1995 notifications@github.com wrote:\n\n@notzippy https://github.com/notzippy I have already installed revel on\nmy system. So, how do you update revel with this patch merged?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1279#issuecomment-351722409, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBvOMMBxM-dIhblgLriwzvd-KeE7xks5tAS2YgaJpZM4Q87Rn\n.\n. @lujiacn The results.compressed config option should be fixed now.\n\nI will check into seeing why the routes.App.Index() is breaking things\n. When we test the binder we try them in various formats like this Can you reduce your test to something a bit smaller ?. I wouldn't be opposed to improving performance as long as it can be done\nwithout changing the current logger interface definition, and can provide a\nsimilar non breaking configuration options.\nLet me know if that is possible before starting any work. One of the issues\nwe had with log15 was being able to set the debug frame properly so it\nwould report the correct log line numbers, this may be an issue in zap as well.\n. Are you working on this @runner-mei ?. Sounds good - like I said earlier all that I am concerned about is that the Multilogger interface remains unchanged and that the configuration settings for it remains the same. . @runner-mei any updates on this ?. Thanks for the PR, was there issues with the implementation @runner-mei ? Or did you run out of time working with it.... I'm closing this issue for now, I want to make the current logger interface less reliant on log15 for the interfaces but for now zap logger is a heavier implementation - I created a start of a gist but if you want to remain perfectly agnostic use the logger.HandlerFunc to perform your own logging.. You can send me a private message on https://gitter.im/revel/community\nThanks\nOn Sun, Dec 17, 2017, 7:49 PM Griffin Byatt notifications@github.com\nwrote:\n\nHi there! I've found a small information disclosure that may reveal\ndirectory information. Is there a security@ address I should contact, or\nwould you prefer I update this issue with details?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1284, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBv60V2eWh2F0zUEzGg-_nAJoRitMks5tBeDagaJpZM4RE8gS\n.\n. The panic filter is hiding the real cause, can you comment it out and post your results again ? \nAlso I updated revel a couple of days ago which may print more details - do a go get -u github.com/revel/cmd/revel before running to include this.\nthanks. This issue was moved to revel/cmd#113. Thanks, will look into this. Hi guys, sorry this fell through the cracks - is this still an issue in the later builds ?. Definitely a TODO before version 1 release, but until we get there with all the code in a bit of flux with branches I am going to close this until we can do this on a final run. Thanks for finding this, I will see if I can write a test case for the test framework which simulates this.. I think the error is here, rather then returning the error this function returns nil. If an error was returned then params.go would just log a warning. @ptman can you test this change ?\n\n-       return nil, nil\n+       return nil, err. Changes merged into develop. Can you post your redirect ?. Yes that is what I suspected - however ModuleFromPath should never return nil, I believe this is a windows directory matching issue.. @Acidic9 Although your patch treated the sympton it did not fix the root of the issue, I believe #1296 resolves this issue fully. I am going to close this for now, let me know if 1296 fixes revel/cmd#113 bug as well. I also enabled windows travis testing as well... But it could be added :-D. Closing see #1282. Looks good, can you also do a PR for the documentation here. Sorry - I tried to fix the XML source code and ended up breaking the go lang examples. I think both are legible now (but they need some more loving on the look side of things).. I cannot repeat this, closing.... Ideally the code should be\nfunc (c App) Page() revel.Result {\n    if c.Request.Method == http.MethodPost {\n        c.Flash.Error(\"Something bad has happened\")\n                return c.Redirect(\"App/ShowError\")\n    }\n    return c.Render()\n}\nThe reasoning behind doing it this way is to prevent form resubmissions by people pressing F5\nThat said I am pretty sure you can do something like\nc.FlashParams() // Copy the parameters to the Flash.Data object (which also contains the error)\nc.ViewArgs[\"flash\"] =  c.Flash.Out // Set the flash data in the template\nTo set the flash data on the page rendered.\n. If you use the field template function it takes care of repopulating the input fields values from the flash object in the view. Looks good to me - thanks. That is strange, can you pastbin the source code that was generated for the page ?\nAnd can you tell us what OS you are using ?\nthanks. This issue was moved to revel/modules#69. tl;dr - no there is not something currently in revel that does this.\nThat is something I have wanted to do have a module.conf, so a module could append its own dependent modules (similar to what the routes files does). \nThis becomes a rather intriguing project involving both the revel/cmd package and the revel/revel, rules about what can a module.conf set (ie can it specify a database connection, and how should the module configuration properties be mapped onto revel.Config object?). The other thing I was thinking about if the module.conf could define a prefix for the template path - or maybe the template paths prefix could be defined by the name of the module that was imported... All interesting topics :-P If you want to take a crack at implementing this I think it would be a great addition to Revel. If you want to bounce some ideas off of me I am on https://gitter.im/revel/community\n. You likely included the header {{template \"header.html\"}} the way you need to included it is {{template \"header.html\" .}} The extra period after the template name means pass the current pipeline  (which  is the ViewArgs in the revel.Controller) into the template as well. \nLet me know if this resolves the issue. Sorry work has been crazzzy, I was playing with this and found this scenario where the item is an empty array yet it according to your test it is not empty. Can you update your code so this works as well ?. Read the section in customize log handling\nOn this page below. You can create a new output handler and route all\nerrors through it in the app.conf\nhttp://revel.github.io/manual/logging.html\nHope that helps, post back..\nOn Sat, Feb 17, 2018, 10:01 AM Jan C. notifications@github.com wrote:\n\nHi,\nI am using sentry https://sentry.io for monitoring errors and have a\nsmall revel application. I want to catch internal errors (templates failing\nto render, 5xx responses) and forward them to sentry. Where do I plug that\ninto revel? I looked into Filters but I can only extract a ErrorResult\nthere (only giving me a message, i.e. for 404s). It looks like even failed\ntemplates always return a *revel.RenderTemplateResult and give no\nindication of an error.\nMaybe you can point me to the right direction here in how to properly\nextract errors. My last resort will probably using a completely custom\nlogger, but I don't want to log everything into sentry either.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1313, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBvtUhuGBDI6dSq0KASa4fd-nqad-ks5tVxP7gaJpZM4SJZl6\n.\n. Hmm, that way although working is allowing the log15 dependency to sneak into your project and I would prefer that not to happen - nothing wrong with they way you did it, but I see it more as a limitation with the current implementation of logging... \n\nThe other issue I see is your mapping function should just ignore anything that is in the context that isnt a string. and for improvement is that you could look for the error inside the context and return that, instead of creating a new error object for raven.CaptureError(errors.New(r.Msg), nil) \nI think what can be done is add the following in the revel logger package. \n```\n// Call to define a handler function for the logs\nfunc HandlerFunc(log func(message string, time time.Time, level LogLevel, call stack.Call, context ContextMap)) LogHandler {\n    return callHandler(log)\n}\n// The function wrapper to implement the callback\ntype callHandler func(message string, time time.Time, level LogLevel, call stack.Call, context ContextMap)\n// Log implementation\nfunc (c callHandler) Log(log log15.Record) {\n    ctx := log.Ctx\n    var ctxMap ContextMap\n    if len(ctx)>0 {\n        ctxMap = make(ContextMap, len(ctx) / 2)\n    for i:=0;i<len(ctx);i+=2 {\n        v := ctx[i]\n        key, ok := v.(string)\n        if !ok {\n            key = fmt.Sprintf(\"LOGGER_INVALID_KEY %v\", v)\n        }\n        var value interface{}\n        if len(ctx)>i+1 {\n            value = ctx[i + 1]\n        } else {\n            value = \"LOGGER_VALUE_MISSING\"\n        }\n            ctxMap[key] = value\n\n    }\n}\nc(log.Msg,log.Time,LogLevel(log.Lvl),log.Call,ctxMap)\n\n}\n// Internally used contextMap, allows conversion of map to map[string]string\ntype ContextMap map[string]interface{}\n// Convert the context map to be string only values\nfunc (m ContextMap) StringMap() (newMap map[string]string) {\n    if m !=nil {\n        newMap = map[string]string{}\n        for key,value := range m {\n            if svalue,isstring := value.(string); isstring {\n                newMap[key]=svalue\n            }\n        }\n    }\n    return\n}\nWhich should allow you to do\nfunc init() {\n    // ...\n    logger.LogFunctionMap[\"sentry\"] = func(c logger.CompositeMultiHandler, options logger.LogOptions) {\n    c.SetHandlers(logger.HandlerFunc(sentryLogger), options)\n}\n\n}\nfunc sentryLogger(message string, time time.Time, level logger.LogLevel, call stack.Call, context logger.ContextMap) {\nraven.CaptureError(errors.New(message), context.StringMap())\n}\n``\nAnd in app.conf do something likelog.error.output = sentry`\nWould that work for you ?. Yes that can be removed, sorry  about that.\nOn Tue, Feb 20, 2018 at 9:47 AM, Lukas Matt notifications@github.com\nwrote:\n\nDo we need this println: https://github.com/revel/\nrevel/blob/master/results.go#L474 ?\nmodule := ModuleFromPath(recvType.PkgPath(),true)\nprintln(\"Returned \", module)\n\nI saw it a couple of times in my log. I think random output like this Returned\n0x12e4c80 isn't very helpful, no?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1314, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBhTix8rEvP9AbZlhQ-5QfdudCz2uks5tWwUUgaJpZM4SMXI7\n.\n. @LuciferDev , that should work just fine. Are you still having this issue ?\n. 204 header means you cannot send a content body, but the JSON form of nil is the word null. And the server engine then complains about this. If you where to return a b.RenderText(\"\") it would all be fine. I am not sure if this should be checked on Revel's side, since this is a programming error.\n\nIf sending a 204 response for an empty JSON object would be your normal response you could consider implementing your own result to do this like:\n```\ntype Result204 struct {\n}\nfunc (Result204) Apply (req revel.Request, resp revel.Response) {\n    resp.WriteHeader(204,\"\")\n}\nvar result204 = Result204{}\n....\n// Then in the controller code you can return\nreturn result204\n```\nor you can extend the RenderJSONResult to check to see if the object is nil and automatically return a 204 if it is... \nIf you need more help with this add to this report, otherwise I am closing this.\n. Pretty similar to this?\nhttp://revel.github.io/manual/organization.html\nOn Sat, Mar 17, 2018, 7:30 AM Abdelaziz Elrashed notifications@github.com\nwrote:\n\nHi,\nI liked your directory structure at glance. But, I feel it needs to be\nmore organized in order to help to do big projects with ease. And I think\nthe structure for Laravel Framework https://github.com/laravel/laravel\nis very neat.\nHere is how the skeleton will looks like with Laravel Thinking in mind:\n\u279c  skeleton git:(master) \u2717 tree -L 3.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 controllers\n\u2502   \u2502   \u2514\u2500\u2500 app.go\n\u2502   \u251c\u2500\u2500 middlewares\n\u2502   \u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 jobs\n\u251c\u2500\u2500 bootstrap\n\u2502   \u251c\u2500\u2500 init.go   (old app/init.go)\n\u2502   \u2514\u2500\u2500 routes.go (Auto-Generated)\n\u251c\u2500\u2500 config\n\u2502   \u2514\u2500\u2500 app.conf.template\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u2514\u2500\u2500 bootstrap-3.3.6.min.css\n\u2502   \u251c\u2500\u2500 fonts\n\u2502   \u2502   \u251c\u2500\u2500 glyphicons-halflings-regular.ttf\n\u2502   \u2502   \u251c\u2500\u2500 glyphicons-halflings-regular.woff\n\u2502   \u2502   \u2514\u2500\u2500 glyphicons-halflings-regular.woff2\n\u2502   \u251c\u2500\u2500 img\n\u2502   \u2502   \u2514\u2500\u2500 favicon.png\n\u2502   \u2514\u2500\u2500 js\n\u2502       \u251c\u2500\u2500 bootstrap-3.3.6.min.js\n\u2502       \u2514\u2500\u2500 jquery-2.2.4.min.js\n\u251c\u2500\u2500 resources\n\u2502   \u251c\u2500\u2500 messages\n\u2502   \u2502   \u2514\u2500\u2500 sample.en\n\u2502   \u2514\u2500\u2500 views\n\u2502       \u251c\u2500\u2500 App\n\u2502       \u251c\u2500\u2500 debug.html\n\u2502       \u251c\u2500\u2500 errors\n\u2502       \u251c\u2500\u2500 flash.html\n\u2502       \u251c\u2500\u2500 footer.html\n\u2502       \u2514\u2500\u2500 header.html\n\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2514\u2500\u2500 web\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 apptest.go\n19 directories, 20 files\nI added extra middleware, jobs and models directory, to make you feel how\nthis structure will help many to grow quickly and efficiently. What do you\nthink?\nThanks\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1322, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBi0LXOEdT8Lghpk8YBLbumogNvKEks5tfR4MgaJpZM4Su0s3\n.\n. Im not sure if the last comment is true regarding a separate directory for API controllers. Can you explain your thoughts on this further ?. Released version 0.19.1 to address this issue - thanks for the quick work guys. My dependency file looks like \n```\n\nGopkg.toml example\n\nRefer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md\nfor detailed Gopkg.toml documentation.\n\nrequired = [\"github.com/user/thing/cmd/thing\"]\nignored = [\"github.com/user/project/pkgX\", \"bitbucket.org/user/project/pkgA/pkgY\"]\n\n[[constraint]]\nname = \"github.com/user/project\"\nversion = \"1.0.0\"\n\n[[constraint]]\nname = \"github.com/user/project2\"\nbranch = \"dev\"\nsource = \"github.com/myfork/project2\"\n\n[[override]]\nname = \"github.com/x/y\"\nversion = \"2.4.0\"\nrequired = [\"github.com/revel/cmd/revel\"]\n[[override]]\n  branch = \"develop\"\n  name = \"github.com/revel/modules\"\n[[override]]\n  branch = \"develop\"\n  name = \"github.com/revel/revel\"\n[[override]]\n  branch = \"develop\"\n  name = \"github.com/revel/cmd\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/log15\"\n[[override]]\n  branch = \"develop\"\n  name = \"github.com/revel/cron\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/xeonx/timeago\"\n[[constraint]]\n  branch = \"v1\"\n  name = \"gopkg.in/Masterminds/squirrel.v1\"\n[[constraint]]\n  name = \"gopkg.in/guregu/null.v3\"\n  version = \"3.2.0\"\n[[constraint]]\n  branch = \"v2\"\n  name = \"gopkg.in/yaml.v2\"\n[[constraint]]\n  name = \"github.com/BurntSushi/toml\"\n  version = \"0.3.0\"\n``. The command line launcher still has some issues but other then that you can use revel with dep. \n* Place the above Gopkg.toml file inside the project folder (the one up from the app folder), change the branch to be the one you want to follow.\n* Make sure deps is installed, and is on the path\n* Run deps\n* Runrevel run yourapp` (command line ) \nRevel should use deps to pull out any additional packages based on what is needed in your application\n. Sorry forgot to add you need to install the command line version of revel\nas well\ngo get -u github.com/revel/cmd/revel\nOn Mon, Apr 9, 2018 at 12:10 PM, Lucio Mollinedo notifications@github.com\nwrote:\n\nHello. Thanks for the quick response.\n\nRun deps\n\nI don't understand what you mean by running deps. I did the following:\n\nI created a Gopkg.toml file based on yours (attached at the bottom)\n   in $GOPATH/src/MYAPP, but I removed those packages which I am not\n   using.\nI ran dep ensure in $GOPATH/src/MYAPP to get my dependencies\n   installed in $GOPATH/src/MYAPP/vendor .\nI tried running revel run MYAPP to no avail. The output I get is: /bin/sh:\n   revel: not found.\n\nI am not sure of what I am missing here.\nMy Gopkg.toml looks like this (removed those packages in your example file\nwhich I am not using):\nGopkg.toml example\n\nRefer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md\nfor detailed Gopkg.toml documentation.\n\nrequired = [\"github.com/user/thing/cmd/thing\"]\nignored = [\"github.com/user/project/pkgX\", \"bitbucket.org/user/project/pkgA/pkgY\"]\n\n[[constraint]]\nname = \"github.com/user/project\"\nversion = \"1.0.0\"\n\n[[constraint]]\nname = \"github.com/user/project2\"\nbranch = \"dev\"\nsource = \"github.com/myfork/project2\"\n\n[[override]]\nname = \"github.com/x/y\"\nversion = \"2.4.0\"\nrequired = [\"github.com/revel/cmd/revel\"]\n[[override]]\n  version = \"0.19.0\"\n  name = \"github.com/revel/modules\"\n[[override]]\n  version = \"0.19.1\"\n  name = \"github.com/revel/revel\"\n[[override]]\n  version = \"0.14.1\"\n  name = \"github.com/revel/cmd\"\n[[override]]\n  version = \"0.19.1\"\n  name = \"github.com/revel/cron\"\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1326#issuecomment-379861344, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBoUsBF3ptRrMu8MDuJAyvmzv8Zzwks5tm7ItgaJpZM4S25FO\n.\n. @stuartkuentzel  Not sure what you mean by adding the ignore array, can you post an example ?. OK, Version 0.20  should help with this as it separates revel/cmd from revel/revel so there should be no cross contanimation. If you are running inside of a docker box you need to setup specific networking to allow the docker to communicate outside of itself. Should be similar to an apache or nginx setup. 0.0.0.0 is the special address to use to listen on all interfaces. If you do figure out the issue then please post and close this.\n\nthanks. I would highly recommend changing your go import path in your project to be the github one, I know it is annoying but it will cause grief if you keep going in this manner \n```\nimport (\n    \"github.com/nelsoncaastro/amai/app/models\"\n    \"github.com/nelsoncaastro/amai/app/routes\"\n\"github.com/revel/revel\"\n\n)\n```\nThat said you should be able to symlink the fetched folder so that travis is happy ln -s $GOPATH/src/github.com/nelsoncaastro/amai $GOPATH/src/amai\nLet me know if this works for you. Sorry didnt mean to drop off the face of the earth - were you able to resolve this issue ? Im assuming you have but if you havent reopen. thanks!. I think all you need is revel.CurrentEngine.(*revel.GoHttpServer).Server.Handler = serveMux\n. It feels like you are swimming against the current. When you define the module inside of app.conf Revel does all this nice stuff for you. So even if you never use that module in your routes there is no harm of having it defined. Go really doesn't allow you to include code programatically even the database implementations require that you import the needed modules in order to function. \nThat all said I think you can do this all by performing the same process as the import module does, but just in a file with an init function defined in the module like this. But note the harder aspects like the \"MODULE_FILESYSTEM_PATH\" need to be hardcoded inside the source code because they cannot be determined at run time.\n```\nfunc init() {\n    revel.AddInitEventHandler(func(typeOf int, value interface{}) (responseOf int) {\n        if typeOf == revel.REVEL_BEFORE_MODULES_LOADED {\n                        myModule := &Module{Name: \"MODULE_NAME\", Log: revel.RootLog.New(\"module\",\"MODULE_NAME\")}\n            revel.Modules = append(revel.Modules, myModule)\n        // If there are template files in this module we need to know the file path to import them\n        myModule.Path = filepath.ToSlash(\"MODULE_FILESYSTEM_PATH\")\n                    revel.CodePaths = append(revel.CodePaths, filepath.Join(myModule.Path, \"app\"))\n                    revel.TemplatePaths = append(revel.TemplatePaths, filepath.Join(myModule.Path, \"app\",\"views\"))\n\n        myModule.ImportPath = filepath.ToSlash(\"MODULE_GO_IMPORT_PATH\")\n        revel.RegisterController( // Add in necessary stuff\n        )\n        // Repeat for all controllers.\n    }\n\n    return\n})\n\n}\n``\nThisinitcode would need to be maintained in the module manually, but it would then make it unnecessary to do extra work in your app. All you would need to do in your app would be toimport _ \"foo.bar/my/module\"in your code. I would also recommend, in your module, avoid using thecontroller.Rendermethod, but instead use thecontroller.RenderTemplateinstead. The reasoning for this is that the passing in values forrevel.RenderArgNames` is based on the source code line number and would (likely) be painful for you to maintain (although it is possible)\nThis should allow you to skip adding them to the app.conf file directly (untested though, let me know if it worked for you).. That is the direction that we want to take Revel, the functionality of the\nRevel cmd package was going to be my next focus, basically I want to remove\nall revel/revel dependencies from that project (that will help with\nvendoring) and make me happily release a version 1.0. it would also be an\nideal time to try and implement the dynamic module support. We were just\ndiscussing that the other week about how we could make adding modules more\ndynamic, and easier to add. If you have some ideas on this I would be happy\nto have a chat, find me on gitter.im/revel\nOn Wed, Apr 11, 2018, 6:02 PM Guybrush Threepwood notifications@github.com\nwrote:\n\nThanks very much! I will give it a try and let you know soon \ud83d\udc4d\nIf it was possible to modify the revel.Config just after the config has\nbeen read in to memory, and before the main.go file was generated, would\nrevel then do all the work?\nI was eventually going to fork Revel and add the module loading code into\nthat, to allow submodules, along with a config module that I am going to\nbuild shortly, which would make this is a non-issue, but for now, I am\nkeeping it as a separate module. I expect that before I fork and pull\nrequest, it would be better to talk to a maintainer of the codebase, such\nas yourself.\nIf submodule loading isn't suitable for the revel codebase, then I was\nthinking that perhaps allowing a CodePath inside apps and modules for the\nbuild stage (perhaps a build directory), that the harness imports, which\ncould be triggered by AddBuildEventHandler with HARNESS_BEFORE_BUILD and\nHARNESS_AFTER_BUILD events. These events would be triggered before and\nafter main.go is generated.\nI expect this is probably very edge case stuff as most people who use\nRevel don't want to do anything until their app has started running, so\nmaybe it is more work that it is worth.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1331#issuecomment-380641620, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBs8sVfEqKxftyc7jWjPGtyV9kXrWks5tnqefgaJpZM4TP43i\n.\n. You can add a filter to your process, on the way in set the writer Controller.Response.SetWriter with your own filtered version (if the specific condition exists).\n\nFor further details feel free to ask at https://gitter.im/revel/community. Documentation updated. Thanks, will follow with a master release soon . Yes, the proxy runner (when revel run is executed) is verbose with sending messages to the console. I will be adding code to the revel command to make this less verbose. This is resolved in the new revel command tool. Yes, on prelaunch all the templates are compiled at once and put into the master template.Template object. This allows the software to detect any errors before the application starts. I can see how this would cause issues for you. What I would do in this case is uniquely define your form bodies, set the formBodyTemplate before you call the template function and use the i18ntemplate function to render the results (since it allows you to pass in the name as a varaible where the template function doesn't)\nroughly then\n{{ define \"form\"}}\n  <div class=\"form form--{{ .Form.Modifier }}\">\n    <div class=\"form__header\">\n      <h1 class=\"form__title\">{{ .Form.Title }}</h1>\n    </div>\n    <form action=\"{{ .Form.Action }}\" method=\"{{ .Form.Method }}\" class=\"form__body form__body--{{ .Form.Modifier }}\">\n      {{ i18ntemplate .formBodyTemplate . }}\n    </form>\n  </div>\n{{ end }}\n{{ template \"Auth/templates/master.gohtml\" . }}\npartials/form_login_body.html\n<input type=\"text\" name=\"email\" value=\"{{ .Form.Email }}\" placeholder=\"Email address\" class=\"form__input\">\n  <input type=\"password\" name=\"password\" value=\"\" placeholder=\"Password\" class=\"form__input\">\n  <a href=\"/forgot-password\" class=\"form__link\">Forgot Password?</a>\n  <button type=\"submit\" name=\"submit\" class=\"form__submit\">OK</button>\nlogin.html\n```\n{{set . \"formBodyTemplate\" \"partials/form_login_body\" }}\n{{ template \"Auth/templates/form.gohtml\" . }}\n```\nAlternately the template names could be external files as well...\nuntested\nBut I have hope it should work in some form :-P\n. Nix that , the file must be defined externally in order to do this so you need to have a third file, Ill update the original\n. It doest appear you have any import statements in your code - did you set up your code using the revel new command ?. By default revel only listens on the localhost, I think if you want to run inside docker you need to change the IP to listen on to 0.0.0.0 see #1327 and http.addr=0.0.0.0 in your app.conf. Thanks for pointing out that message on SO, I have answered it. \nCurrently the revel proxy application starts up (assuming you started it with revel run command) with the debug level at max. So until you see the output \"Application has started\" it will print a large amount of messages. Once the application has started the logger should be configured to what is set in the configuration. To avoid this you need to run a built version (revel build myapp targetfolder) then your application will be run without the proxy\nThere may be an assumption that off is an active handler, so it would discard the data, unfortunately the handlers are \"or\"ed logically together, not \"and\"ed so setting all outputs to one handler then turning one off does not affect the logger set to all\nFor your configuration the following should work\nlog.warn.output  = stdout\nlog.error.output  = stdout\nlog.crit.output  = stdout\nlog.warn = warn.log\nlog.error = error.log\nlog.crit = crit.log\nlog.request = request.log. Opps, I missed the output - try \n```\nLog all loggers for the application to the stdout (except debug)\nlog.info.output = stdout\nlog.warn.output = stdout\nlog.error.output = stdout\nlog.crit.output = stdout\nlog.info.output = log/%(app.name)s-warn.json    # Log all warn messages to file\nlog.warn.output = log/%(app.name)s-warn.json    # Log all warn messages to file\nlog.error.output = log/%(app.name)s-error.json   # Log all errors to file\nlog.crit.output = log/%(app.name)s-critical.json # Log all critical to file\n. I see these two loging to the same file is that correct ?\nlog.info.output = log/%(app.name)s-warn.json    # Log all warn messages to file\nlog.warn.output = log/%(app.name)s-warn.json    # Log all warn messages to file\n. Also note that the log is section dependent, so if you have the log information in the \"debug\" section then you may have different results when in production. Im reopening this so it can be tracked. This will be done before version 1 release. But closing this for now until we get there since the code is changing daily.. Thanks, I see no reason why this cannot be merged to master to make a 0.19.1 release. I was having problems creating a test case for this scenario - is it possible that you can create one for this ?. Great, that makes much more sense now.... Sorry for the late merge, it slipped my mind. @hwsoderlund I was thinking a new tag for revel 0.19.1 - considering the other issue with the compression libraries that was failing travis. The issue is that the content type is set when the request is initialized [here](https://github.com/revel/revel/blob/master/http.go#L86). So Revel does not know if the content type is changed. If you set the `c.ContentType=\"\"` before you call the `c.RenderBinary` function, this will cause the [apply function](https://github.com/revel/revel/blob/master/results.go#L396) to set the content header according to the file extension. Which is (I think) what you want. . Do you know what target it is binding to ?. It looks like you are attempting to bind a string to a string pointer that is in the controller. You do not need to define your controller variables as pointers. Closing. @xaionaro Do you have any controllers that have functions defined like the following ?\nfunc (f MyController) Input(apple string) {\n}\n```\nIm going to reopen this because you are right it should be better logged when the error occurs. Agreed, Revel cant point the line but it should be able to report the\ncontroller.function - I can look at the source code this weekend and let\nyou know what changes would need to be made to make this easier for you to\nlook for.\nOn Tue, Dec 4, 2018 at 10:58 PM Okunev Yu Dmitry notifications@github.com\nwrote:\n\n@notzippy https://github.com/notzippy well. I don't see such:\ncontrollers$ grep -RIn revel.Result . | grep --color string | grep ''\n./phones.go:155:func (c Phones) ShowConfigFanvil(mac string) revel.Result {\n./app.go:529:func (c App) ChatMessageSentJson( /token string, channelId string, userName string, text string/ ) revel.Result {\nI could check every Action manually:\ncontrollers$ grep -RIn revel.Result . | wc -l\n260\nBut this can take too much time.\nI believe I use binding to a structure (with *string) somewhere. But I\ndon't see where it could be. IMO, revel should report something about\nwhich line actually caused the panic.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1346#issuecomment-444380009, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBkU2eNKc382Sxo2pol76lheOuzcXks5u126sgaJpZM4U2JOo\n.\n. I would suggest starting it in the call back method on the application startup similar to a database connection - see here. That description is the process to create a new template engine, This describes using an existing engine. The Pongo2 engine and the Ace engine are both existing template engines that work in Revel.. Yes this is a bug in the CMD module. I am working on that module now to fix this see revel/cmd#126. Was there any additional log messages on the server ?\n\nOn Mon, Jul 23, 2018 at 8:52 AM, Juancesar123 notifications@github.com\nwrote:\n\nhello i have a problem route options not found in revel. im using vuejs\nwith axios.\n[image: image]\nhttps://user-images.githubusercontent.com/16625151/43087690-a4fcbf06-8eca-11e8-8035-a648277a0bf7.png\nthis is my code in file routes in revel\n`GET /posts PostController.Index\nPOST /posts PostController.Create\nPUT /posts PostController.Update\nGET /posts/:id PostController.Show\nDELETE /posts/:id PostController.Delete`\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1350, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBqqj9t5FCW2RI2GuS1zo0jcjvGi7ks5uJfFDgaJpZM4VbP2l\n.\n. If vue.js was posting the information it would not find the route. I am closing this for now, feel free to reopen if still an issue. This error looks like the revel/modules package was not downloaded, now with the revel tool it will download this automatically for you. Closing. Sorry for the delay on this, this is something that I would like to look into further - currently the package command was to simply deploy to a static site, not really a cloud service. Were you able to make something work for you ?. Sorry for the late response, Controllers instances are reused now. but you can turn that off by setting revel.controller.reuse=false in your app.conf. If the response headers are set appropriate the body should be decompressed automatically\n. So kind of like a pre-processor before the body is pulled out for binding. You can do that with a filter like\n```\nrealRequest := controller.Request.In.GetRaw().(*http.Request)\nbuf, _ := ioutil.ReadAll(realRequest.Body)\nrdr1 := ioutil.NopCloser(bytes.NewBuffer(unpackBody(buf))) // note unpackBody would return the unziped body\n\nrealRequest.Body = rdr1 // OK since rdr1 implements the io.ReadCloser interface\n``\nJust make sure the filter is called before the actionfilter is invoked\n. Sorry for the late reply. What you could do is have a section in the app.conf specified just for running unit tests, and if this is the revel.Mode in yourinit.goyou can check therevel.Mode` and see if the mode is in test mode, if it is then set your controller to use the mock transaction. Definitely\nOn Sun, Aug 19, 2018, 2:11 AM Paul T\u00f6tterman notifications@github.com\nwrote:\n\nGo 1.11 will come with (experimental?) go modules. Revel should probably\nsupport this official module versioning solution.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1357, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBhFY4PQF-fYy7SozWjGePI0M1X5Gks5uSSu8gaJpZM4WC5GJ\n.\n. Thanks @Heinoc . Current thoughts are that the new Go module support will be supported by a\nmodule (as they are currently implemented). This will allow the base\nframework to remain compatible at a different level.\n\nOn Tue, Aug 21, 2018, 1:13 AM Paul T\u00f6tterman notifications@github.com\nwrote:\n\nBut what versions of Go does revel want to support?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1359, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBtxABj93kSPeDuQRqe9XNUW00jlXks5uS8E0gaJpZM4WFTbH\n.\n. Closing due to no further response. Where you able to resolve your issue ?. This looks like an error with the Go compiler go build runtime/cgo: open /usr/local/go/pkg/linux_arm/runtime/cgo.a: permission denied are you able to write a small piece of Go code and have it run ?. Yes, it is right here. Interesting, I see there is a bug listed for it here as well : https://github.com/golang/go/issues/25138. With the new revel command tool you can specify your own build parameters which should allow you to customize your build as needed. See the build-flags\n. Thanks for the note, what does your toml file look like ?. I think the cause is the prune\nhave you tried commenting it out ?\nor add into the prune section non-go = false\nSee this. * The first error - looks like there may be something in your app.conf that is pointing to that folder? The idea for package is that everything that will call the same as the build command but zip the directory afterwards\n The second error is an issue with the CLI and dealing with a vendor folder - which I am working on fixing presently - although why it didnt error out like the package command seems odd\n Depending on the configuration revel may not attempt to precompile the templates - which is where I would expect to see this error occur\n. This should be resolved with v0.20.1 of revel/cmd now. If you run go get github.com/revel/modules does it work ? \n. That error is expected - when you fetch the modules repo by itself - but it is an issue with the revel/cmd that it doesn't auto-fetch the revel/modules package now. Ill leave this open until that is fixed.\n. It looks like you have an older version of revel/revel. Please update it\nand revel/modules with go get -u command\n\nOn Wed, Sep 26, 2018, 9:14 AM \u0141ukasz notifications@github.com wrote:\n\nI still have a problem to run my app, same errors as above. Any idea how\nto run it?\nDEBUG 18:06:25  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go\nDEBUG 18:06:25  revel template_engine.go:45: Registered template engine loaded         section=template go=nil LOG15_ERROR=\"Normalized odd number of arguments by adding nil\"\nINFO  18:06:25    app  revel.go:170: app.conf: No mode found: {\"mode\":\"dev\", \"specialUseFlag\":false}  section=system\nERROR 18:06:25 harness.go:231: Could not start application              error=\"revel/harness: app died reason: exit status 1\" ```\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1373#issuecomment-424773804, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBtn-0AORXaJLjzlDK59mowceRQ5Yks5ue6fpgaJpZM4W3GW6\n.\n. This is fixed now . The reason for this is that the framework version is older then the tool. To update the framework do a \ngo get -u github.com/revel/modules let us know if that resolves your issue. You may also need to do a go get -u github.com/revel/revel. I added that to the last release, if it detects an incompatible framework\nit will report and halt\n\nOn Sat, Oct 20, 2018, 2:39 PM Pete Morgan notifications@github.com wrote:\n\n@notzippy https://github.com/notzippy quick silly questions.. is there\na way to make revel.cmd detect version conflicts and also can the revel\ntool do an update eg revel check to check and revel upgrade to upgrade ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1373#issuecomment-431620023, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBodtUnS9xK9A9c9_6Ak_JVDqWLq8ks5um5f5gaJpZM4W3GW6\n.\n. Rather it is on develop branch ATM, will be in next release\n\nOn Sat, Oct 20, 2018, 4:13 PM Steve Heyns notzippy@gmail.com wrote:\n\nI added that to the last release, if it detects an incompatible framework\nit will report and halt\nOn Sat, Oct 20, 2018, 2:39 PM Pete Morgan notifications@github.com\nwrote:\n\n@notzippy https://github.com/notzippy quick silly questions.. is there\na way to make revel.cmd detect version conflicts and also can the revel\ntool do an update eg revel check to check and revel upgrade to upgrade ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1373#issuecomment-431620023, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBodtUnS9xK9A9c9_6Ak_JVDqWLq8ks5um5f5gaJpZM4W3GW6\n.\n\n\n. We are working on it see : https://github.com/revel/cmd/pull/145\n. This has been merged, let us know if the issue persists.. Yes there is a known bug in this release for windows. I am in the process of correcting a newer version. Thanks, but that was a bug It is fixed now and the only package you need is the CLI tool revel again. Revel tool will do the work to fetch the needed repositories.. There was an issue with revel/cmd where the skeleton repository used was retrieved via ssh - which would fail if behind a proxy or firewall. The next milestone release changed the retrevial to use https.. Hi, https://gitter.im/revel/community is a good channel to ask this on. \nBut basically if you have persistent entities that are shared among your controller you want to use the revel.OnAppStart(func(){})  place your code within the function. When Revel is initialized and before it starts the engine the function will be called. This is fixed in this milestone version. @lucastetreault  There are methods to unmarshal data see https://godoc.org/github.com/revel/revel/session#Session.GetInto . \n Get fetches the object from the session, if it is an object it will retrieve it as a map[string]interface{}\n GetInto fetches the object from the session into the passed in object\n* GetDefault fetches the object from the session into the passed in object, or returns the default value if not found\n\nYou do not need to manually marshal the data since it is automatically done for you. The only extra convenience method could be something like GetString() which could return a string from the session. A PR on this would be welcome.. Thanks for pointing out that oversight, adding that to the next release. Slack is interesting how it signs stuff\nhttps://golang.org/pkg/net/http/#Request.ParseForm is what auto reads the body of the request into the Params, this calls parsePostForm. which reads the body and converts it (and by reading the body you lose access to it)\nI have a couple of ideas of how to do the signature check.\n1) ~~Combine the controller.Params.Form object back into the bytes. I think this is likely the best since Revel can still parse your params for you automatically~~\n2) Skip the revel.ParamsFilter by using configuring filter. This will stop parsing the form automatically\nLet me know which one you choose. Thought about it the first technic will not work, because Go juggles the map when you read it back. \nThat leaves you the configuring filter, or making your own custom filter to do something like this \n```\nrealRequest := controller.Request.In.GetRaw().(*http.Request)\nbuf, _ := ioutil.ReadAll(realRequest.Body)\nrdr1 := ioutil.NopCloser(bytes.NewBuffer(buf))\nrdr2 := ioutil.NopCloser(bytes.NewBuffer(buf))\nslackChecksumCheck(rdr1) // Alternately you could put the []byte into the controller.Args  or the test result.\nrealRequest.Body = rdr2 // OK since rdr2 implements the io.ReadCloser interface\n``\nSee [filters](http://revel.github.io/manual/filters.html) for more details on making your own filter. Closing since there was no further information added. Fantastic @sinataghva , thanks for sharing your code, as a side note, I think you do not needrdr1at all but can set the args likec.Args[\"body\"] = buf`\nAs an additional note (for people looking at this in the far future) in the init of the main app the FilterConfiguringFilter needs to be enabled as well like\n// Filters is the default set of global filters.\n    revel.Filters = []revel.Filter{\n        revel.PanicFilter,             // Recover from panics and display an error page instead.\n        revel.RouterFilter,            // Use the routing table to select the right Action\n        revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n        revel.ParamsFilter,            // Parse parameters into Controller.Params.. Hi, That seems odd, can you run the command and paste the output on pastebin using the verbose ?\nrevel new -a github.enterprisexyz.com/user/app1 -v. It appears like it is failing to clone the skeleton repository. Sorry for the delay, there is another bug in Revel with windows (that is now fixed on the develop branch) that I was resolving first. Your issue appears to be the failure of the clone command - can you run the command git clone git://github.com/revel/skeletons C:\\Users\\userabc~1\\AppData\\Local\\Temp\\revel\\ manually ? does it work ?. I have modified the code to default the retrieval of the skeleton using https next release should fix this. Thankyou ! . Thanks for you response @lujiacn - you are correct that Result is an interface, to be more exact it is a  named interface. The proposal is to return anything you want. If it happens to be a revel.Result interface that is fine. If it is a map or string or number it will be automatically wrapped in a result that is will encode to JSON. . It appears you are using a vendor folder for your project /Users/magoo/testgopath/src/www-forecast/vendor/github.com/revel/modules/static, this will lock in a specific version of Revel.\nCan you post the contents of your Gopkg.toml ?\n. It looks like you are missing revel/revel ?\n[[constraint]]\n  name = \"github.com/revel/revel\"\n  version = \"0.20.0\". If you include modules and not revel in the vendor what happens is that the modules controllers inherit from a different revel.controller then your app does revel.controller which means when the tool looks to build the code the modules controllers do not inherit from revel.controller (even though they do) Go's package management system is finicky. . does this path exist ? /Users/magoo/testgopath/src/www-forecast/vendor/github.com/revel/modules/static it should because it is in your Gopkg.toml file but it appears like it doesnt. That is it you need \n[[constraint]]\n  name = \"github.com/revel/modules\"\n  version = \"0.20.1\"\nversion 0.20.0 was missing the module.go file in the root of github.com/revel/modules which messes with deps. Try updating the version. That seems really weird - here is my toml file\n```\nrequired = [\"github.com/revel/revel\", \"github.com/revel/modules\"]\nNote to use a specific version changes this to\n[[override]]\n  version = \"0.20.1\"\n  name = \"github.com/revel/modules\"\nNote to use a specific version changes this to\n\n[[override]]\n  version = \"0.20.0\"\n  name = \"github.com/revel/revel\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/log15\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/cron\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/xeonx/timeago\"\n```\nand this is the result of run dep on an empty vendor folder\n$ rm -rf vendor/*\n$ dep ensure\n$ ls vendor/github.com/revel/modules/\nauth  csrf  db  jobs  LICENSE  modules.go  orm  pprof  README.md  server-engine  static  template-engine  testrunner\n. I think you need to remove those two packages from your gopath\nrm -rf  /Users/magoo/gopath/src/github.com/revel/modules/  /Users/magoo/gopath/src/github.com/revel/revel\nand the compiled folder\nrm -rf  /Users/magoo/gopath/pkg/{{architecture}}/github.com/revel/modules/  /Users/magoo/gopath/pkg/{{architecture}}/github.com/revel/revel\nI can tell more if you run the revel command with the -v option - like revel run -a yourapp -v\n. Does this path exist /Users/magoo/gopath/src/www-forecast/vendor/github.com/revel/modules/static ?. Also sent you a message on gitter.im. The issue was the section of the Gopkg file, with unused-packages = true dep removed important packages that the Dep tool did not realize were needed. Removing that section fixed the issue\n```\n[prune]\n  go-tests = true\nunused-packages = true\n```. Thanks, can you do PR's for revel/cmd, revel/modules as well ?\nWindows builds are failing because travis never officially supported windows until recently and right now travis only partially supports windows.. Hi,\nIt certainly can be done. You need to write a filter that runs before the [RouterFilter] that checks if a route path could be found (similar to the route filter code) If the MainRouter returns nil then do a proxy call to the python instance, and write the results into controller.Response.GetWriter()\nIn the next release (this week hopefully) I have added a catch all path function it operates first though (so it isnt a catchall). The man page is here \nIf you have more questions feel free to chat on https://gitter.im/revel/community, \n``. Correct [workPermits](https://github.com/revel/modules/blob/master/jobs/app/jobs/plugin.go#L15) is the max number of concurrent jobs - it could have been a bool or anything really but that was the way it was done [6 years ago](https://github.com/revel/revel/blame/v0.8/modules/jobs/app/jobs/plugin.go). I see that you closed this, did you figure this out ? If so could you share your solution ?\nthanks. It sounds like the client is not closing the connection after the call you can specify read and write timeouts in the app.conf filehttp.timeout.read,http.timeout.write` by default they are set to 0 so no timeout, by setting them the server should autoclose the connection. Timeout time is in seconds\n. Hi\nTHis has nothing to do with Revel, this is Go's html templating system being very secure aware. To prevent the escaping you can wrap certain fields in template types to prevent this - for example the template.JSStr type will wrap prevent your issue with the script text being escaped.. We could - or you could derive your own formatter to handle this as well and add it to the LogFunctionMap like\n```\n    logger.LogFunctionMap[\"ssjson\"] =\n        func(c logger.CompositeMultiHandler, options logger.LogOptions) {\n                c.SetHandlers(logger.HandlerFunc(myJsonHandler),options)\n        }\n...\nfunc myJsonHandler(message string, time time.Time, level logger.LogLevel, call logger.CallStack, context logger.ContextMap) (error) {\n                stringMap := context.StringMap()\n                                stringMap[\"time\"]=fmt.Sprintf(time)\n                                stringMap[\"message\"]=message\n                                stringMap[\"level\"]=fmt.Sprintf(level)\n                                b, err := jsonMarshal(props)\n// TODO output the data to the file\n                return nil\n            }\n``. Figured this out, the default value for the app.conf  fieldpackage.foldersisconf,public,app/views. It is missingmessagesfor a temp fix you can define the field above in your app.conf to beconf,public,app/views,messages` sorry this will be fixed in next release. If you can show how Go's http server can be modified to do this I can help\nwith the PR\nOn Wed., Jan. 16, 2019, 12:48 a.m. Rami, notifications@github.com wrote:\n\nI am using a library that detects attempts of lowering the SSL version (to\nan older version) where it gives an attacker a change to break into the SSL\ntunnel, this library requires the raw bytes of the initial handshake that\nis received by the https socket.\nThis library might be a good addition to revel, I can create a merge\nrequest if someone helps me figure out how to extract the raw bytes of the\ninitial handshake!\nTried to rewrite the http server module but no luck understanding it, with\nno documentation / comments it is a bit difficult to grasp\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1416, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBtGnRzURHLAksZHtEVc2wO5p4Qilks5vDudEgaJpZM4aCkuh\n.\n. I was looking at this, it appears the Apply function writes the response to the output streams internal map but this is only written when the server engine receives the result - after all the filtering has been done. So this means no interceptor will see this header written. Is there something else you can use to flag the interceptor about a location rewrite ?. In theory the return the controller.Result could be used, if you casted the value like \nif redirect,hasRedirect := controller.Result(*revel.RedirectToActionResult); hasRedirect {\n  // do something\n}\nyou could do something.... Isnt that the same as this ? \n\nRegardless I think I may be convinced that we could add an \"Apply\" filter to the filter chain so you could add a post apply action which should accomplish your needs as well... Yes this sounds like a versioning issue, what is the output of revel version ?. Hmm that is odd, it looks like you did everything right according to this . What does you Gopkg.toml file look like ?. Do not prune unused packages, that removes the template folders and code . I will update the document, it has been a while since I had used intellij\nfor debugging so didnt know of the changes. Are you using the goland\nversion ?\nOn Wed, Feb 20, 2019 at 2:36 AM lexxito notifications@github.com wrote:\n\nApart from adding -a after build command, I had to delete -srcPath \\src\nfrom the arguments to make it work. It would be nice to update that\ntutorial so people wouldn't be confused.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1422#issuecomment-465519817, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABUsBqifFit1A7ImE4PGcRMtOg5kGSIfks5vPSVBgaJpZM4bDzLq\n.\n. ty @helgix . Yes, I can see how that could be an issue, but would it not be a better idea to place the check on where maxIndex is set (note the check added on the if index > -1 && maxIndex < maxIndexBound { below) ?\n```\n    maxIndexBound := Config.IntDefault(\"params.max_index\", 1024)\n\n// Factor out the common slice logic (between form values and files).\nprocessElement := func(key string, vals []string, files []*multipart.FileHeader) {\n    if !strings.HasPrefix(key, name+\"[\") {\n        return\n    }\n\n    // Extract the index, and the index where a sub-key starts. (e.g. field[0].subkey)\n    index := -1\n    leftBracket, rightBracket := len(name), strings.Index(key[len(name):], \"]\")+len(name)\n    if rightBracket > leftBracket+1 {\n        index, _ = strconv.Atoi(key[leftBracket+1 : rightBracket])\n    }\n    subKeyIndex := rightBracket + 1\n\n    // Handle the indexed case.\n    if index > -1 && maxIndex < maxIndexBound {\n        if index > maxIndex {\n            maxIndex = index\n        }\n        sliceValues = append(sliceValues, sliceValue{\n            index: index,\n            value: Bind(params, key[:subKeyIndex], typ.Elem()),\n        })\n        return\n    }\n\n...\n. OK, so in this situation it would be best to ignore the parameter all together ? And likely a good idea to log the error.\n        if index > -1  {\n                        if maxIndex > maxIndexBound {\n                            binderLog.Error.Println(\"Invalid parameter index, ignoring parameter\",\"index\", maxIndex,\"key\",key)\n                            return\n                        } \n            if index > maxIndex {\n                maxIndex = index\n            }\n            sliceValues = append(sliceValues, sliceValue{\n                index: index,\n                value: Bind(params, key[:subKeyIndex], typ.Elem()),\n            })\n            return\n        }\n. Which package are you using ? Those can be extracted from the `controller.Request.In.GetRaw().(*http.Request)` and `controller.Response.Out.GetRaw().(*http.ResponseWriter)` . The reason they are abstracted is to allow for custom server engines.. Should be `controller.Response.Out.Server.GetRaw().(http.ResponseWriter)` . thanks !. Is the `revel.BeforeAfterFilter` in your init.go file ?\nrevel.Filters = []revel.Filter{\n        revel.PanicFilter,             // Recover from panics and display an error page instead.\n        revel.RouterFilter,            // Use the routing table to select the right Action\n        revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n        revel.ParamsFilter,            // Parse parameters into Controller.Params.\n        revel.SessionFilter,           // Restore and write the session cookie.\n        revel.FlashFilter,             // Restore and write the flash cookie.\n        revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n        revel.I18nFilter,              // Resolve the requested language\n        HeaderFilter,                  // Add some security based headers\n        revel.InterceptorFilter,       // Run interceptors around the action.\n        revel.CompressFilter,          // Compress the result.\n                revel.BeforeAfterFilter,\n        revel.ActionInvoker,           // Invoke the action.\n    }\n. There shouldnt be any packages that import this explicitly unless you added it to your app.conf like this it shouldn't be importing it.. You could do something like\nif tokenFunc, ok := renderArgs[\"_csrftoken\"];!ok {\n        panic(\"REVEL CSRF: _csrftoken missing from RenderArgs.\")\n    } else {\n        return template.HTML(tokenFunc.(func() string)())\n    }\n. Would make more sense if this if statement (line 85) was inside the previous if statement block (line 81). Otherwise it appears like your checking the same thing twice.\nLeave as is, code is correct as stands\n. At this point the return from function sameOrigin must be true because you checked for it being false on line 69, you should be able to remove the criteria from the if statement\n. Look at the if statement on line 69 again if !sameOrigin(c.Request.URL, referrer) {... return}, so if sameOrigin returns false then the code returns. It will never reach line 94 to call the same function sameOrigin(c.Request.URL, referrer) which must be true if it got this far\n. Quite right, harder to visual the code on a screen without bracket highlights..\n. Messages is a different beast to begin with. It is loaded through an init method and OnAppStart. Templates are loaded in server.go:run. To me neither seem totally correct, exposing TemplatePaths seems unnecessary (as does ConfPaths and CodePaths). My thoughts are that the revel:addModule method should have a callBack list of items to be notified when a module is added, (with the possibility of adding more callbacks in the config). Each item then would take care of initializing its own area. However I do not want to even look at this until after we have broken completed the breaking up of revel. \nFor the intermediate time though I think this is a valuable PR even if it is not implemented in the same way as the templates.\n. Since we are modifying LoadConfig should we not pass in the section as well instead of defaulting it to \"\" ? \nAlso small peeve of mine is initialization of structures without field names return &Context{conf,\"\"} imho should be return &Context{config:conf} \n. Somehow this for loop appears wrong as well, if an err is assigned something by config.ReadDefault it is ignored the variable err is created inside the for loop so it is impossible to reach line 32. I know you didnt change this part but we may as well correct its behavior.\nfor _, confPath := range confPaths {\n    if conf,err := config.ReadDefault(path.Join(confPath, confName)); err!=nil && err!=\"not found\" {\n          return err\n    } else if err==nil {\n           return &Context{config:conf}, nil\n    }\n}\nreturn nil, fmt.Errorf(\"Config %s not found\",confName)\n. If you remove var err error this will not compile since the creation of err variable is only within the scope of the for loop.\n. :+1: \n. I think the default value should be 5 and we have some sort of guideline as to the range of values to be used.\nie  Default / normal is 5, high / first is 1, low / last is 10. \nSo people know that revel builtin startuphooks will run at 5, if they want something before or after it should be higher or lower.\n. I think this was added by mistake. Invoked or Raised or Fired sound better ?. Change to GetValues() GetFiles(). I am torn, generally I like the type definitions at the top of the file and the functions following them. Of course this approach has issues when multiple type definitions, what is your thoughts ? . This is used by pretty much all of the test cases to create a controller. I thought this would be a better spot for this function. That gives room for the Minimum Engine constants listed before this block. there is already a file called template_agapter_go.go so this is consistent with that. That is what it was set to before. The case is the normalized to lowercase. Just to make all lookups consistent.. If possible can you modify this so it behaves similar to the i18template function. \nBasically allow for variable number of arguments\n- If one argument format the time as the default lang in the app.conf\n- if two arguments, and second one is string assume that is the region\n- if two arguments, and second is map assume that is the viewArgs and extract the CurrentLocaleViewArg from the map\n. Store the customLanguage outside the function in a map keyed by the localeStr, so that a new timeago.Config object doesnt get created every time a this template function is called . Probably shoud say no arguements passed to TimeAgo call. add in \nif tmpl := engine.Lookup(langName);tmpl!=nil {\n    runtime.TemplateMap[baseTemplate.TemplateName]= tmpl \n}\n. Add in check to see if template map contains the template already, if so do not add it\nif loadedTemplate, found := runtime.TemplateMap[baseTemplate.TemplateName]; found!=false {\n        // Duplicate template found in map\n        TRACE.Println(\"template already exists in map: \", baseTemplate.TemplateName, \" in engine \", engine.Name(), \"\\r\\n\\told file:\",\n                loadedTemplate.Location(), \"\\r\\n\\tnew file:\", baseTemplate.FilePath)\n        return\n    }. Why did you remove the other attributes ?. Fixed. Could you a a log statement here like\nsuggestion\n                binderLog.Error.Println(\"Invalid parameter index, ignoring parameter\",\"index\", maxIndex,\"key\",key)\n                return. ",
    "tmbrggmn": "Cool, thanks for the swift reply Rob.\nOne point that may also be handy to include in the guidelines is how/where to document the contributions. Maybe use the github wiki as an incubator of sorts?\nI may have an attempt at adding i18n, I've got a couple ideas using goconfig.\n. Cool! Thanks for the information.\nI'm actually working on i18n support. I've got it figured out in my head on how I would like to do it (remains to be seen if it's actually any good ;-)) and I was planning to add it in the Revel core code. Then it hit me that it may be best to add this as a module or plugin, the reasoning being:\n- Any i18n code would be neatly separated from the core\n- The module/plugin could be disabled if the app doesn't need it (in case the user would like to run a really lean Revel core. E.g. for RESTful services where they don't require anything to be translated or externalized; they could free the resources taken by the plugin by disabling it)\nOnly I ran into the issue above. The other issue I'm seeing is that even if I were to be able to write the plugin, I'd still need to be able to provide easy and short functions to access the messages, which I haven't figured out yet.\nI'd be more than happy to add the following, but I'm not entirely sure I follow when you say:\n\nIf you wanted to fix that, I would be happy to merge a pull request that imports myapp/app if any code exists in it (I believe it would be a compile error otherwise), as well as provides that file as part of the skeleton app.\n\nIf I understand correctly, you mean that we would want to provide a sample module in the skeleton that contains some sample code (say sample.go) and then modify the core so that it actually imports the code with refection after detecting it (should this be in harness, addModule or somewhere else)?\n. Right so since we're on the subject, here are a couple of  ideas about things I would do differently to the current Play! implementation:\n- I had planned to promote the message files from /conf to their own folder: /messages. I always thought that they kind of polluted the conf directory, especially when there's a lot of files already in there. Besides, they're not really configuration (IMO).\n- Liberate message files from that archaic messages.<local> constraint and make it so that file names do not matter - apart from the extension. The extension would simply be a ISO 639-1 code and whatever comes before that wouldn't matter (see the next point). In fact, multiple files with the same extension would also be allowed.\n- Since we're already using goconf the distinction between a language and its regions would be made using the config sections. The file denotes a language and each (optional) section in it would denote a region (using ISO 3166-1 alpha-2 codes). This way, a message file can have a \"default implementation\" for a language but still define region-specifics if it wants to. And since regions will always belong to a language, it's handy to have the entire language context with it.\nThe only downside I see with this is that when a language has a large number of messages, and each of these need to be translated for a number of regions, the file could get quite large.\nThis would allow a lot of flexibility in terms of organizing message files. Especially the ability to separate messages files for a single language into multiple files could be really handy (e.g. imagine certain parts of a messages file need to be translated by a 3rd party; using 1 file they would have to be unmerged and merged every time a translation needs to happen).\nAnyway; sounds like a plan. I think I'll give the module code loading a shot, although I'm sure this would take me exponentially longer than it would you. In any case I can start with the message loading code (this can be developed independently), and move on to integrating it in core later.\n. Alright thanks for the heads up. I shouldn't have any merge conflicts.\nI've started with adding the i18n stuff in the core. I committed the basics a couple of days ago (tmbrggmn/revel@bd1d083), which adds support for loading the files and retrieving a message. It's based on goconfig, and as such it's not capable of merging files yet (which means that more than 1 message file for the same locale is not supported).\nI have yet to integrate the new code so it's available in the views and controllers and provide the request interceptor to detect the current locale from Accept-Language and store it in the cookie.\n. The message files related stuff is pretty much completely done. Right now I'm working on integrating it in the core so that it can actually be used. For that I need to parse the Accept-Language header, which I've finished last night. I think the only thing that remains right now is to create and load the i18n Plugin so that it can handle requests to figure out the current locale (or default in case there isn't one) and set the cookie value(s).\nI've got a question concerning http.Request parsing: in mvc.go there are several functions that take a http.Request argument, do some parsing on it and return something. Do you think it's worth a moving this to its own package or source file? As-is I believe there are 2 such functions and I've added a 3rd (ResolveAcceptLaguages).\n. Okay, what I propose is that I keep the code in there for now and focus on i18n. I'll create an issue to refactor mvc.go again to take those functions out. If until I can commit i18n someone else picks it up; great, I'll merge my code with the new mvc.go refactoring. If not, I'll pick it up after i18n. \n. One thing I've been wondering: why do we need the LANG value in the cookie? Is it to avoid having to parse the Accept-Language header each request?\n. Quick proposal: should we consider adding a typed field Language to a rev.Controller?\nUsing Controller.Args adds the \"complexity\" of having to keep a key somewhere. Which part of the code is responsible for defining this key? The i18n plugin? The controller? This adds dependencies; when a Controller needs access to its own current language it needs to look it up in Args using a string defined somewhere else.\nWhat say you?\n. I think I've finished the first basic version of this. I've added a sample app and updated the documentation. I've compiled some change notes and other bits as well.\nCurrently, I'm still unsure about the following issues:\n- My gh-pages branch doesn't build any longer for some reason. I've tried running jekyll locally, which fails straight away on the literal tag but I don't know if this is an actual error (it did not used to do that), or just my local version of Ruby/jekyll that's wonky.\n- When implementing the last change to store the current locale in the controller, I realised that the i18n plugin is not required. We could move the logic from the plugin to the Controller if we wanted to. I'm not sure what's best; keep the plugin or move the current locale resolution code to NewController().\nHow would you like to proceed? Do you review the i18n stuff first before I make a pull request, or should I just go ahead and make the request (I'm guessing it'll be 3 request: goconfig, revel and the pages).\n. > If I understand your second item, you're saying that the plugin stores the Locale to a property on Controller, but since the i18n plugin relies on the app configuration to require it, apps that do not would end up with the .Language property being empty. Is that right?\nWell there's that, the Locale property would be empty, but what I meant is that we don't really need the i18n_plugin if we simply moved what's in there to Controller (assuming that NewController() is always used). The question is: what is the added value of having the i18n plugin? On one hand, I guess it's nicely separated and independent from the other code, and could be entirely disabled if needed. On the other hand it would work just as well if the plugin was not there and its responsibilities were assumed by Controller. Not a big deal - just something I was pondering.\n. @kdar You raise an interesting point; the way I've changed it now makes it awkward considering your POV. I've added the Locale property to Controller, but maybe it should have been added to Request instead. The plugin sets the current locale on the request, after which the controller can use it to resolve messages.\nThe more I think about it, the more I lean towards moving the Locale property from Controller to Request. As for the i18n plugin I would suggest leaving it as is for the moment. Maybe it'll evolve as better ideas emerge.\nA significant point in favour of the plugin - IMO - is that the logic it applies to figure out which locale the client is interested in is completely arbitrary (as in I've made it up as I went along, based on how Play! does it). Even if plugins right now are not completely hot-pluggable, it does at the very least make it relatively easy to swap/customise this logic for use cases that this default implementation does not cover (compared to having to hack in the actual Controller internals to add it).\n. Okey dokey; I've committed the fixes for the issues you mentioned (revel and goconfig). I have fixed a couple of overly long comments; are there any specific cases that you know of that I may have missed?\nI've also fixed a small thing in the documentation; unfortunately they still aren't building so I think there's still something wrong with them. Is there any way you could check your version (maybe a small commit) to see if it was something I added or if it's a GitHub thing?\n. Very odd. I have the same version of jekyll as is mentioned on the GH pages site. Oh well, we'll see.\nIf it's OK with you, I'm planning to make a last change (moving the CurrentLocale property to the request rather than the controller) and then submit the pull requests?\n. To be brutally honest; I have no idea. I haven't had time to fix the issues above yet though - I'm planning to do them either today or tomorrow. I think I can just commit the fixes and then somehow have them pulled into the pull request.\n. Fixed the comments; have a look and let me know if there's anything else I should do!\n. All I had to do was use filepath for srcPath := filepath.Join(gopath, \"src\") and I seem to be up and running again. Are there some other things that don't work?\n. Oh wow, I see. Looks like a bit of a Pandora's Box this one :smile: \n. I think you may have incorrectly set the GOPATH variable?\nGOROOT is where Go was installed. For example; your PATH environment variable could have an entry GOROOT/bin to make sure that the Go binaries are available in your shell environment. The GOPATH variable on the other hand is used to allow Go to resolve dependencies, and it should have a predefined structure (see the link to get the details).\nYou should put your code in GOPATH. Setting both GOROOT and GOPATH to the same directory doesn't seem correct to me (maybe it'll work if you create the structure inside of your Go installation, but that's just weird). I tend to think of GOPATH entries as \"workspaces\".\n. Honoured by the invite but I'm afraid I'm not going to be of much use here. Life has caught up with me and I hardly have any free time left as it is.\nGood luck for the future though!\n. That's weird because I'm using Sublime Text 2 with GoSublime and it should run gofmt automatically (AFAIK it does as well). Don't know how those extra spaces got there (or stayed there).\n. Good point; never noticed it. Boo boo on my part. Do I fix and send a pull request?\n. ",
    "shaban": "Hey Rob,\ni put the samples online, probably they need a bit love with revel progressing nicely.\nthey are online at\n- http://booking.shaban-naasso.de\n- http://chat.shaban-naasso.de\n- http://validation.shaban-naasso.de;\n- http://twitter-oauth.shaban-naasso.de\n- http://facebook-oauth2.shaban-naasso.de\n- http://i18n.shaban-naasso.de\nI can help at polishing the samples, first idea that leapt to my mind while setting it up was enumerating their ports in their app.conf so you can run them same time without conflicting ports.\ncya around\nShaban\n. I made a small website running on revel to host an introductory article (mostly taken from your site) and a link to samples and other useful resources. Kind of the article holding the samples being a sample itself.\nIf you want to take a look it's here.\nhttp://www.shaban-naasso.de/revel-framework\n. Yeh that's something i wanted to tell you since ages, but forgot due to our interesting discussions. Something's not right there might be on my part though maybe changing the ports broke something (though i wouldn't know why).\nOnly thing i noticed is by looking at the app.conf one could see that there was really old skeletons they were created from. Maybe simply redoing them on fresh new skeletons making use of the packaged bootstrap + some powered by revel badge will make them more appealing for a wider audience + also fixing breakage and giving them enumerated ports to make it easier to keep up with new releases / changes.\n. i wonder how come you guys not using the CDN \nhttp://www.bootstrapcdn.com/\nhttps://developers.google.com/speed/libraries/devguide#jquery\nfor JQuery and Bootstrap.\nthis way you have less files to worry about and who is adept enough to use the Framework can also download and put them into the public directory.\n. I am at the moment super busy because i have to finish an online campus for\na distance teaching academy.\nBut if it can wait a few days i am absolutely ok at doing it.\nWorking with Revel is such a breeze.\nOnly thing that caused me some headaches was that\nc.Redirect(Controller.Action) sometimes fails for no reason while\nc.Redirect(\"/controller/action/\") works as intended.\nMaybe some issues with trailing slashes or so.\nWell enough bitching :D\nRevel is plain awesome and once that campus is done i will get back to you\nat weekend.\nWish ya a good time :)\n2013/3/13 Rob Figueiredo notifications@github.com\n\nHi, thanks!\nThat makes sense -- we should make the \"eq\" function compare the value of\nint types, ignoring their type. Excellent catch. (If you are interested to\ncontribute, that would be a nice self contained pull request.. :~)\nThanks for the report!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/101#issuecomment-14815538\n.\n. i am getting the idea you don't like the way i coded it :P\n\nif you want something changed just lemme know\n. > (You could save a line per case by omitting default and moving the return false outside the switch)\nNot Sure if that's any good because the sooner it leaves the multiple switch statement the faster the code executes, or am i missing anything obvious?\n\nAt least on this one you could do the\n\ngo\nreturn a.(string) == string(b.([]byte))\nyes you are absolutely right, i will do this\n\nThe only thing is that this func is extremely unit testable -- do you mind adding one?\n\nI will, i am not familiar with the way testing works in revel, but i will read up, i already have some tests but they are rather abusing a template and some data model and manually looking at results instead of automated tests.\n. It got very late here and i probably won't finish the tests by today also i have a few questions.\nSo far I changed the string byte part as suggested. On ommiting default line i still wait for clarification (see earlier comment).\nLooking at the testing module i was a bit confused.\nI didn't understand how you run the internal tests like those in the server_test.go.\nTo understand the basics i simply made a test project and used the /@tests as starting point to learn.\nOther problem was that testing something inside a template is quite hard as you would need an incredible amount of template code to use something like AssertOk().\nSo i did the following:\ngo\neq := revel.TemplateFuncs[\"eq\"].(func(a, b interface{}) bool)\nok := eq(sampleInt8, sampleInt16)\n    if ok!=expected {\n        // print parameters expected outcome and real outcome\n                // return error result\n    } \n        // print that all is good\n        // next test with different sample data\nam i on right track and how can i make this work as an internal test instead of a whole new webapp?\nsorry for all the questions \n. lol shouldn't work late at night thanx for clarifying.\ngonna do that proper after work.\n. maybe these articles here can shed some light on their intentions?\nhttp://www.playframework.com/documentation/2.1.0/ScalaSessionFlash\nhttp://www.playframework.com/documentation/1.2.3/cache#session\nsome excerpts that look interesting:\n\n[...] Session [...] not stored by the server [...] added to each subsequent HTTP request, using the cookie mechanism. \nOf course, cookie values are signed with a secret key so the client can\u2019t modify the cookie data (or it will be invalidated).\n[...] Session is not intended to be used as a cache. If you need to cache some data related to a specific Session, [...] use the Play built-in cache mechanism and store a unique ID in the user Session to keep them related to a specific user.\n. Since i still changed stuff, just wanted to mention it's good to pull now IMHO\n. since it's a bit old issue that you might overlook wanted to show you this comment: https://github.com/robfig/revel/issues/44\n\ni am gonna complete the eq function tomorrow if you made up your mind on the rune stuff by then \ncya around and wish ya a good time\nShaban\n. it's been a pleasure \n. ok changed it to include all the equivalent types \nand made tests more concise\nadded doc comment to function\nsorry for confusion in previous comment please disregard\nalso added \"checkbox\" helper which is pretty trivial since it's basically same code as radio thought that would come in handy too.\nit's all beautiful now :)\nP.S. i switched from release to tip \nand it's awesome.\nBenchmark went from 619 ns to 400ns without changes in code\n. changed all things you asked for.\none ugliness though is the function doesn't have the same name as it has inside the template since you already used the function name eq in router_test.go which might be confusing for someone looking it up in godoc and expecting it to be eq.\n. oh i was more simplistic, but i am sure it would work quite nicely still.\ni would do it in a declarative manner.\nso if you know that you want to make a cms or blog or portal and have need for it you could simply use some html conform way of tagging that something should be processed.\nso in template\nHTML\n<div class=\"article-entry\">\n{{highlight .CurrentArticle.Content \"prefix\"}}\n</div>\nThat prefix from the second argument we use to prefix all our output classes as to avoid collision and we could even have it default to \"revel\" if empty.\nand in Content\nHTML\n<!-- some big code block -->\n<pre>\n<code class=\"prefix-go-gutter\">\n.. some source code\n</code>\n</pre>\n<!-- above example would honor whitespace because of pre,\nand use go highlighting and show line-numbers(gutter)-->\nso when parsing that we just look if there is a code tag that is suitable for highlighter and if it's inside the pre tag so we initialize the scanner with the correct whitespace handling ('\\n','\\t',' ') for pre and just whitespace without pre.\nGo\nfor tok != scanner.EOF {\n// i skipped the part where i setup the scanner \n// and declare buffers and source reader and such\n// so don't worry i thought about all that.\n        escaped := html.EscapeString(scan.TokenText())\n        switch scanner.TokenString(tok) {\n        case \"Ident\":\n            if isKeyword(scan.TokenText()) {\n                out += \"<span class=\\\"prefix-ident\\\">\" + escaped + \"</span>\"\n            } else {\n                out += html.EscapeString(scan.TokenText())\n            }\n        case \"String\":\n            out += \"<span class=\\\"prefix-string\\\">\" + escaped + \"</span>\"\n        case \"Char\":\n            out += \"<span class=\\\"prefix-char\\\">\" + escaped + \"</span>\"\n        case \"RawString\":\n            out += \"<span class=\\\"prefix-rawstring\\\">\" + escaped + \"</span>\"\n        case \"Int\":\n            out += \"<span class=\\\"prefix-int\\\">\" + escaped + \"</span>\"\n        case \"Comment\":\n            out += \"<span class=\\\"prefix-comment\\\">\" + escaped + \"</span>\"\n        default:\n            out += html.EscapeString(scan.TokenText())\n        }\n        tok = scan.Scan()\n    }\n    out = strings.Replace(out, \"\\t\", \"&nbsp;&nbsp;\", -1)\n    lines := strings.Split(out, \"\\n\")\n    for k, v := range lines[0 : len(lines)-1] {\n        highlighted += fmt.Sprintf(\"\\n%s<br/>\", v)\n        linenumbers += fmt.Sprintf(\"%v<br/>\", k+1)\n    }\n    gutter := \"<div class=\\\"prefix-gutter\\\">\" + linenumbers + \"</div>\"\n    parsedcode := \"<div class=\\\"prefix-code\\\">\" + highlighted + \"</div>\"\n    return \"<div class=\\\"prefix-highlight\\\">\" + gutter + parsedcode + \"</div>\"\nif you have a better idea don't hesitate to show me.\n. well if you want to use it for internal use can even have it default to all c-style language and not care about declaring anything.\nby using something like this.\n``` Go\nvar keywords = [...]string{\"abstract\", \"append\", \"bool\", \"boolean\", \"break\", \"byte\", \"case\", \"catch\", \"chan\", \"char\", \"class\", \"close\", \"const\", \"continue\", \"debugger\", \"default\", \"defer\", \"delete\", \"do\", \"double\", \"else\", \"enum\", \"error\", \"export\", \"extends\", \"fallthrough\", \"false\", \"final\", \"finally\", \"float\", \"float32\", \"float64\", \"for\", \"func\", \"function\", \"go\", \"goto\", \"if\", \"implements\", \"import\", \"in\", \"instanceof\", \"int\", \"int8\", \"int16\", \"int32\", \"int64\", \"interface\", \"map\", \"long\", \"native\", \"new\", \"null\", \"panic\", \"package\", \"private\", \"protected\", \"public\", \"range\", \"recover\", \"return\", \"rune\", \"select\", \"short\", \"static\", \"string\", \"struct\", \"super\", \"switch\", \"synchronized\", \"this\", \"throw\", \"throws\", \"transient\", \"true\", \"try\", \"type\", \"typeof\", \"uint8\", \"uint16\", \"uint32\", \"uint64\", \"uintptr\", \"var\", \"void\", \"volatile\", \"while\", \"with\"}\nfunc isKeyword(s string) bool {\n    for _, v := range keywords {\n        if v == s {\n            return true\n        }\n    }\n    return false\n}\n```\nyou could have it all combined since on this low level java, c, c++, go, javascript all would look nicely formatted soem of the more suble constructs not honored perfectly would not really make a big difference i assume.\n. hah i have a good idea you remember my revel based home site?\ni simply build that highlighter into it as a quick hack so we can look at results if you want.\nand np gonna add docs for new helper\nhm wanted to switch to the gh-pages branch but it won't let me shows me \n\nerror: pathspec 'gh-pages' did not match any file(s) known to git.\n (256)\n. ok here is a working example of it, it's just a fast hack i simply parse everything between pre tags to get it done fast.\nit shows listing in c,c++,java,javascript, go.\n\nhttp://www.shaban-naasso.de/serverside-syntax-highlighter\n. I must say the more i scroll around and look at the speed and the lack of all the oddities javascript syntax highlighters have the happier i get from looking at it :dancers: \n. The more i think about it the more confused i am.\nI looked at the plugin \"events\" and don't know how to use that for such a functionality.\nThen i also pondered on mounting that problem from another side.\nAn efficient approach would also be to have it as a database helper.\nI mean when you save your data you get from (textarea, RTE Editor, etc.) into a sql or nosql db one would only need to render once.\nAnd then of course how to elegantly give sensible configuration parameters without having the author type too much crap into the class field of a code element.\nI was for a moment thinking about using microdata schemata to describe the code tag this would at least have the advantage if you have to type all that you get additional semantic info on your listing that can help search engines to put your listing into some useful context. One Problem is that the \"Code\" schema is still a draft and has zillions of fields but not sure if you can specify something like \"shows linenumbers\".\nYou see i am confused. If you can set my mind straight i would really appreciate it. I am not afraid of getting the highlighter right it's just revel is a big house and i ain't no architect and want my piece to fit in perfectly instead of standing out like a sore thumb.\nWhats your thoughts on this Rob?\nP.S. almost forgot also some way to inject a skeleton css would be good because normally people expect a component to look halfway normal after using but without css you would just see the linegutter and the code all on top of each other which might discourage a lot of people. Was thinking about some very neutral looking css with comments in it like / change color of this and that here /\nah and on your proposed region argument (for go template engine) couldn't we do that by somehow having a postprocess hook and a selector engine?\ni see a lot of uses for this to generalize templates and then make some decisions in the controller to find out which postprocess applies.\nLike: if my article's keywords field contains \"this\" postprocess \"thisfilter\". Not hundred percent sure if this would be a perfect use for a syntax highlighter but there is countless things coming to my mind where frontside paradigms could be worked into the serverside and feel natural and simplify the decision tree in the template.\nLike a template that hooks in div#adminbar when the user is admin and things like that.\nLast update: \nadded PHP listing and it looks nice too, i made it some sort of benchmark it's a ~3500 lines php script and all of thse listings take 6 seconds on my server (AMD Athlon(tm) 64 X2 Dual Core Processor 5600+ ,  4GB RAM half of that free). I tested some javascript online ide (http://ace.ajax.org/) and to my dismay it was much faster. Though most javascript syntax highlighters were horrible googles prettify was quite fast too) maybe regular expressions parsing much faster than going via text/scanner.\nhttp://www.shaban-naasso.de/serverside-syntax-highlighter\n. Ok long story short i think that's frontside stuff for a good reason and since last time i checked (a few years ago) there has been a lot of progress on these scripts.\nIf i had to make a site that deals with a lot of source code i'd probably use ace with read only and be set.\nmaybe time better invested into a less parser or something like that.\ni checked a lot of existing implementations and there is really only 2 really good things i have seen.\n- a variety of parsers that simply use rhino, v8, node.js or similar stuff to run the original less.js script (that's also the way play framework is rolling)\n- there is a php less parser that is used in production and can be used to understand the parsing. one ugly thing is it is not a REAL less Parser because according to documentation JavaScript expressions can be evaluated as values inside .less files. javascript is part of the syntax and that's something php can't do. \nnow there is a few problems.\nif we use that javascript interpreter way and compile v8 or use node.js or so we loose lots of the goodies that revel is for like being a native go thing and using the nice  go get command to install dependencies. And for the reason that javascript is part of the specification and also porting back new versions is a headache parsing it yourselves is no option either.\nI looked at something quite interesting.\nhttps://github.com/robertkrimen/otto\nIt's a javascript interpreter in go. But even that solution has a problem. Since RE2 syntax of regular expression does not contain the full set of PCRE as it is being used in the original less.js script.\nSo either:\n- find a good way to split backreferences and such stuff into submatching expressions / or looping through some \"string\" package functions to translate that non existent feature. \n- Or find a PCRE implementation that is not just a wrapper around a C-API and then use that to complement the otto library\n- or finding a good way to rewrite these expressions in the less.js source to have it run in otto runtime\n- or package a command line tool that is available on all nix,osx,win like pcregrep and use that for dealing with regexp that is not compatible to package regexp\nSorry for all that spam but sometimes experimentation leads to non anticipated results and i think a highlighter in go is not worth it, but a less.js parser sure is.\n. Actually i have seen the list and that's why i knew something about the necessary steps i compiled v8, looked how long it takes to install node and rhino looked up play's implementation and loads of other things including installing otto and trying to run less.js with it. It only complained about the regexp stuff.\nI think i also saw a PCRE implementation that wrapped a C-API. If installing the prerequisites is a one liner on all mainstream OS's it would be worth considering that's next thing i will try.\nI had some very weird idea too, that would involve patching less.js in a way so that it makes an ajax request to a predefined route this way one could capture the output. it's a bit stupid though :ghost: \nOn the regional helper issue something came to my mind.\nIn go data composition is simply the best in all the industry with embeddable types and all these things and struct field tags to have database drivers treat members differently like in mongo bson:\",omitempty\" or bson:\",inline\" to treat embedded types fields like fields of the parent type. Also with functions tied to types you can query and navigate around your data model in the template nothing of that intention of the makers of mvc paradigm but nonetheless an important part of go.\nSo what i am trying to say. If you declare a field of your model that is a string or equivalent as let's say revel: selectable you could open a reader on the string and navigate around with the exp/html package + something like https://github.com/PuerkitoBio/goquery and then in the template a call to a helper with arguments of a revel: selectable + selector can let you perform operations jquery style without even worrying about the response being written already and stuff like that.\nOne problem though the go.exp stuff is in shambles for now the author of goquery hinted though that it's gonna be cleaned up once go1.1 is out probably as a part of the go/src that will not be installed by default but via an explicit install.\n. i looked at ant0ine's numbers and they don't look impressive.\neither he is using a very sucky computer to test it on or he is mistaken.\nfor example revel's router takes like 3600 ns/op on my server (quadcore  i7 2600)\ni once programmed a map based router and the best you can do is about 1080ns/op which is faster but then regexp gives you much more ways to express yourselves at still reasonable cost imho\nfor comparison he states around 20k ns/op which is way off the mark.\nP.S. actually my benchmark also renders a small template in that 1080ns\nif Rob likes the speed improvement and helps me get the notorious ugliness out of my code i am of course willing to contribute :neckbeard: \n. hey Rob, i have some microframework with a pretty efficient (imho) multiplexer function\nsince revel is a much more modular thing would be quite hard to integrate this.\nso i post this simply for some inspirational value how to maybe chicken out fast\nof the decision tree if no regex is defined inside the route.\ni think best way to handle it would be when you register the routes after parsing\nthe routes configuration to simply predefine distinct attributes \nto tell regex and none regex routes for all thinkable route types apart.\nhere is the gist of my approach once again it's not that i think it's a superior approach but possibly some of this is food for thought.\nhttps://gist.github.com/Shaban/5362594\nonce again sorry for my uninformed coding style.\nthe interesting part in that listing is using the much undervalued filepath.rel function from the library and the neat fallthrough part at the end.\n@lukeholder \nthere is one thing about having a framework and a router and not a pluggable router collection that you have a tighter integration for convenience.\nif you for example miss the programmatical definition of routes instead of the routes.conf it's easier to have some init() function with some verbs to use for route declaration and supplement the existing router like this.\n. should be fairly easy i used a function to limit results and simply had it receive a int limit, an interface that is tested on being slice and then return the limited slice as interface and it worked.\nthat case is even easier since you just would have to create a slice of n entries to range over.\nso\ngo\nfunc Times(n int)[]bool{\n return make([]bool,n)\n}\nwill do the job.\n. frankly yes.\nequal zero-valued elements.\nthis would allow you to stay with the range operator.\nthe allocated slice's memory footprint won't be an issue since you would run into bandwidth issues long before this would matter.\n. sorry for the sloppy comments i made, i was kind of in a hurry.\nlet me explain my reasoning.\nthe problem to me isn't even the extra keyword, the problem is the way you pass the parameters.\nin my opinion although it's technically a clean solution it becomes ugly in the template part if your string to be repeated is a bit longer.\nimagine some javascript widget that needs a lot of markup.\nthen you would have all that inside the curly braces.\n. sorry for spamming again.\nshowing you the template side of my proposal so you can try out and decide which you like better.\nthis is the utility functions i usually use plus the one suggested.\ngo\nfunc init() {\n    revel.TemplateFuncs[\"sub\"] = func(a, b int) int { return a - b }\n    revel.TemplateFuncs[\"add\"] = func(a, b int) int { return a + b }\n    revel.TemplateFuncs[\"html\"] = func(a string) template.HTML { return template.HTML(a) }\n    revel.TemplateFuncs[\"times\"] = func(a int) []bool { return make([]bool, a) }\n}\nin the template then it looks quite nice like this.\n{{range times 5}}\nhello world 5 times\n{{end}}\n. you can go even further with reflection and make something multipurpose like these 2 things\nwhen passing nil as second argument a slice of n elements is created for ranging over it.\n{{range limited 5 nil}}\nhello world 5 times\n{{end}}\nwhen passing a slice as its second argument it is limited to n elements.\nif n is bigger than len(slice) it returns the full slice.\n assuming posts is some forum/blog post.\n<div id=\"posts-section\">\n{{range limited 10 .Posts}}\n<h2 class=\"media-post\">{{.Title}}</h2>\n<p class=\"media-body-text\">\n{{.Body}}\n</p>\n{{end}}\n</div>\nof course return type of function would be interface{} but the go template package is great at inspecting arbitrary data and can handle that.\n. i understand your problem.\nso your problem is that in a subtemplate when you pass a subset of your data to the template execution you loose access to the root of your data model.\ni have 2 questions though.\n- if you pass \".\" or $ (if dot points somewhere else) to your subtemplates you retain access to your complete data model. Is that ok for your purposes?\n- if you choose not to pass \".\" but instead a subset. Isn't it then in your best interest to only work on this local data so you can easier debug things? what is the point of passing a subset when you want to break out of this local behaviour?\nnot saying that there is no need for something like \"include\" but i don't see any benefit of organizing data-structures and templates in a way where everything is connected to everything.\nplease let me know if i miss somthing or am plain wrong :)\n. ah one more thing the notion that you can only pass one parameter ignores the cool way data modeling is done in go.\nif you have difficulties displaying your data it might be a failure of your data model.\none parameters can be a struct, a map a slice , whatever it can be a whole hierarchy of data.\nif you find it hard to encapsulate the data, you have a wide array of functionality in go to keep cohesion.\nyou can embed types, you have interfaces you can use helper functions on a type to aggregate some data and so on.\nso as an example\n``` go\ntype Foo struct{\n  *UnrelatedFoo //all elements of UnrelatedFoo are directly accessible \n  //as if they were part of Foo.\n  Key int\n  Name string\n}\ntype UnrelatedFoo struct{\n  Description string\n  Keywords string\n  Title string\n}\ntype UberFoo struct{\n  Foos []*Foo\n  CurrentFoo int //can have an index finger on the currently selected foo.\n}\n//and deliver the current Foo on the fly with a helper function \n// that you can use inside template.\n// and if you repeatedly need it,\n// simply save it as part of your data model\n// in a way that is local to your single request.\nfunc (uf UberFoo)CurrentByFunc()Foo{\n  for _, f := range uf.Foos{\n    if f.Key == uf.CurrentFoo{\n      return f\n    }\n  }\n  return nil\n}\n```\nwith these embedding techniques you can basically design your views and subviews according to the needs of your templates and keep things in order.\nthe naming and the nature of the example is of course dumb but just as an illustration on how to compose the data needed for arbitrarily complex views (subtemplates).\nactually i assume you know all that stuff but probably didn't spend enough time thinking on the data side of things when it comes to templating (no offense intended)\n. hi author of revels eq implementation here.\nit indeed doesn't compare in the same fashion.\nrevels eq only compares 2 parameters instead of variadic parameters\nwhere parameter n is compared to parameter1\nafaik the eq version of go also handles the int8 vs int and so on comparison problem which was the reason for me to write it in the first place.\nWhat it does not handle is []byte to string conversion which is a pity since declaring a []byte in gorp is the only way to get strings that are bigger than varchar[255] in MySQL afaik.\ni am all for removing it, since it makes codebase leaner and one can focus on things that need improvement instead of carrying baggage around.\ngood precaution would be to document this change on the http://robfig.github.io/revel/manual/templates.html page for some grace period so if there would be any problems with existing code ([]byte string conversion) people have it easier to track down the problem.\nalso see https://github.com/robfig/revel/issues/283\nP.S: actually i forgot something it might be that this function is needed for testing purposes in revel tests.\n. i can do that, if its not urgent.\ngimme a couple of days and i look into it.\n. The only meaningful dependency is in https://github.com/revel/revel/blob/master/tests.go#L161-L165\nNothing else depends on AssertEqual function. But it is part of the testing Framework.\nAssertEqual is also undocumented in http://revel.github.io/manual/testing.html so hopefully not a lot of people are using it for self written tests.\nI am personally leaning towards keeping this function and make it private for now. Now that revel is nearing 1.0 it will probably soon be time to organize how external repositories can be installed as plugins/module/etc. Which probably will need some higher level testing features to make sure all plays nicely. Which would be the best time to review this functionality again.\nBut thats all your call of course :)\n. LGTM\n. hi, not 100% on topic but i felt that this might be related and interesting information on how to deal with backwards incompatible changes, beta releases etc.\nSummary of the description of gopkg.in service\nThis service provides versioned URLs for redirecting the go tool onto GitHub repositories. \nThe advantage is that the URL is cleaner, shorter and redirects to the package documentation at godoc.org when opened with a browser and handles git branches and tags for versioning.\n. An extra template helper / function would be a feature according to your logic, since they are decoupled from anything else mostly.\nPluggable Template engines and such might need enhancement of an existing feature on top of any template specific features they bring on the table.\nSo i don't see how template as label would be meaningfull since it can be things of very different scale / scope.\n. heya,\ni had some test struct with all kinds of different types and had it compare\nthem among each other wildly i think it didn't work the way you propose.\ni'm in the middle of something right now and can't look at the code.\nI will look at it properly in the next hour.\nOn an unrelated note, i would want to put a Powered by Revel Badge in the\nfooter of my project if you have nothing against that idea.\nWhat's your take on this?\nGreetings\nShaban\n2013/3/17 Rob Figueiredo notifications@github.com\n\nIn template.go:\n\n@@ -40,7 +40,54 @@ var (\n    // The functions available for use in the templates.\n    TemplateFuncs = map[string]interface{}{\n        \"url\": ReverseUrl,\n-       \"eq\":  func(a, b interface{}) bool { return a == b },\n-       \"eq\": func(a, b interface{}) bool {\n-           // both types are same don't cast anything\n-           if reflect.TypeOf(a) == reflect.TypeOf(b) {\n-               return a == b\n-           }\n-           // switch first parameter for int, uint, float and string types\n-           // and look for equivalent types in other parameter\n-           // if not equivalent no need to compare - return false\n-           switch a.(type) {\n-           case int, int8, int16, int32, int64:\n-               switch b.(type) {\n-               case int, int8, int16, int32, int64:\n-                   return reflect.ValueOf(a).Int() == reflect.ValueOf(b).Int()\n\nActually -- I'm not sure if my suggestion works, since it will probably\ncomplain you can't cast type interface{} to int64. Never mind!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/106/files#r3406024\n.\n. that's be handy i try this\n. ok\n. yes there is none. rune is int32 you can use them synonymous.\nthe rational is the following.\nby using an int32 which would normally be a number as a parameter for eq together with some string type one can safely assume that in this context the author of that template used a rune literal 'a' or simply made a mistake. worst thing that could happen is that by coincidence a number is a valid unicode point and somehow really the same as the string to be compared.\n. see above. normally it would be plain wrong actually but a template is a specific context like css or javascript or html being things outside of go with their own distinct paradigms. \nAnd trying to support the template author with these things helps him to express himself.\nIt's a web tool and not a go program so i thought i try to give them all the power they can utilize there.\nThe main question for me is. Do i bring in weirdness that will lead to unexpected results in this context or will it feel smooth and natural and i am not sure either about the []rune thing to be honest, but i couldn't think of any problem either that it could cause.\n. after rereading i think i missed the point of your concern.\nin this switch it doesn't matter if both are int32 it is already handled before.\ncase int, int8, int16, int64:\n\nyou see here that a being int32 is not handled inside it comes in a later case. if its an int type and not int32 we must assume that we need to compare it as a number with b also being handled as a number\n\ncase int32:\n    switch b.(type) {\n    case int, int8, int16, int64:\n      return reflect.ValueOf(a).Int() == reflect.ValueOf(b).Int()\n    case []byte:\n      return string(a.(int32)) == string(b.([]byte))\n    case string:\n      return string(a.(int32)) == b.(string)\n    }\n\nhere you see that also the type of b governs how a is compared to b\n\ncase int, int8, int16, int64:\n\nhere we don't need the int32 case since that would make both equal and would be handled above with both parameters being same type.\nnow when b is a number we compare them as numbers\nif b is a string type compare them casted to string types\nalthough it looks a bit weird it's all pretty factual leaving very little room for unintended behaviour (see the rather comprehensive testing file)\n. In a nutshell i mean we cannot tell if the template author uses a comparison between a rune and a string because he is an amateur used to php.\nOr if he is a genius using some arithmetical trick with strings to bring up something jaw-dropping\n. No need to be sorry,\nI find your rational absolutely convincing and discussion is the key to getting best results.\nToday i will be traveling and be back in like 6 or 7 hours then i will do it as you laid out.\n. Probably yes. int being always one of the other int typs depending on architecture i omitted it, but you are right i will add int to the test too.\n. will try to do it like this.\ni never studied anything so i am really bad at formalism and such, but i think i know what you mean.\n. yes you are right.\nwill clean up a bit\n. ok\n. oh while coding i found some weirdness that prohibits us from doing it the way you laid out.\nif a person wants to use \"52\" vs 52, and 52 is an int32 the program will assume he is trying to do '4' vs \"52\" as it would assume int32 is a rune and we can't guess by context what the author wanted.\nshould we better drop comparing string number representation and make an additional helper itoa  or whatever you want to call it so the author can use that like\n{{$v := range .MathValues}}\n  {{$w := itoa $v.Width}}\n  {{if eq $w $v.InPixels}}\n    some layout\n  {{else}}\n    other layout\n  {{end}}\n{{end}}\nnot saying ^^this is good practice just couldn't come up with a good example :D\nthe reason i picked itoa vs atoi since a number is always a perfect string but a string is not always a number and you would have to check for parsing error and also less performant with atoi.\n. after reading your post again i think you meant step 4 to be the one beyond the line?\nif so i completely missed your point sorry.\n. ok\n. will split into a second pull request\n. yes benchmark was curiosity and a good opportunity to learn i will remove it\n. ok\n. thanks i didn't know\n. nice idea :)\n. ",
    "nikoudel": "Could you please check this version?\nI'm not sure if the address in getFreePort(addr string) is really needed. I also avoided naming the temporary harness port variable by calling rev.Config directly.\n. The address is gone now.\n. ",
    "tmc": "Thanks. FWIW that second commit wasn't intended to be part of this PR.\n. FYI I pushed a different approach that is closer to the default Go buildpack, it works better (fetches dependencies correctly).\n. ",
    "saggit": "OK ,even through i can not find out why,but i find a way to solve this problem,\njust edit the app.conf file and give \"http.addr\" a value ,like \"localhost\"\n. @kdar \nyes,i try,it does not work,try \"localhost\" or \"127.0.0.1\" it works perfect\n. @robfig well done!\n. ",
    "hpgood": "in the dev mode,two way:\n1.configure:\nhttp.port=9090\nharness.port=9000\nstart in 9090 port ,and visit by 9000 port.\n2. configure http.addr a really value.\nhttp.addr=localhost\n. yeah,one line is better.I hope I shell use it in next version. Thanks.\n. ",
    "elite527": "Good idea.It  confuse me sometimes.\n. ",
    "rickb777": "+1\nit needs simplifying a.s.a.p, before widespread adoption makes it too difficult to change.\n. The advice to use 302 was dated from 1999. I think we can safely use HTTP/1.1 nowadays, which means we should use 303 and 307 correctly and not use 302.\n. ",
    "purohit": "Thanks for doing this. I'm using it for a new project, and was a little confused at the rev.*\n. Awesome, just saw this!\nEm 09/03/2013 16:24, \"Rob Figueiredo\" notifications@github.com escreveu:\n\nI just pushed the cache integration. Check it out!\nhttp://robfig.github.com/revel/manual/cache.html\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/76#issuecomment-14673631\n.\n. That's pretty clever, and thanks for the response. I like the use of anonymous fields with MessageOverride. I prefer the clarity of \n\ngo\nif c.Validation.HasErrors {\n ...\n}\nover that power. I'll probably use the if and keep the MessageOverride in mind for the future. Thanks again!\n. Maybe I should RTFM: http://golang.org/pkg/html/template/#HTML\n. Thanks, that will help. It's cleaner to me than typecasting.\n. Thanks for fixing 1, before I was switching between revel run myapp and revel run myapp test to see errors 'cause I didn't know it was in TRACE.\n. Thanks -- no, it doesn't prevent the app from working, just a little weird to see the \"error\" everytime.\n. The reason was because according to, http://www.sqlite.org/inmemorydb.html: \n\nWhen [:memory is used], no disk file is opened. Instead, a new database is created purely in memory. The database ceases to exist as soon as the database connection is closed. Every :memory: database is distinct from every other. So, opening two database connections each with the filename \":memory:\" will create two independent in-memory databases.\n\nThen the in-memory SQLite instance the app instantiated would be different from the one the TestSuite was using  for every Before -> TestXXX -> After, so I couldn't test if the App inserted stuff into the database from the TestSuite.\nHowever, I see further down the page that you can create a shareable memory database, so I will try that tonight along with your suggestion of importing github.com/robfig/revel/modules/db/app -- I'll comment again when I've tried it.\n. I see -- got it. I still need to use a filename for SQLite because the shared memory db doesn't work across threads, as the docs say. I tried using db.Db, which works fine except if I close the connection during a test then it can't be used again for another test, since it's only opened OnAppStartup. \nConversely, if I don't close it, then I'll start getting database:locked errors cause too many tests are using the same connection. Basically on each TestXXX's exit I should wipe the database (\u00e0 la fixture-dropping) so it doesn't pollute the other test's results, but again this will cause problems trying to use the connection too much. So I'm not sure what I should do there -- I appreciate your advice.\nI also a pathological test 'cause I couldn't get the Before/After working -- is this right?\n``` go\npackage tests                                                                                                                                                             \nimport (                                                                                                                                                                \n    \"github.com/robfig/revel\"                                                                                                                                           \n)                                                                                                                                                                         \ntype PathologicalTest struct {                                                                                                                                          \n    revel.TestSuite                                                                                                                                                     \n    field string                                                                                                                                                        \n}                                                                                                                                                                         \nfunc (t PathologicalTest) Before() {                                                                                                                                    \n    t.field = \"one\"                                                                                                                                                     \n}                                                                                                                                                                                                                                                                                                                                                 \nfunc (t PathologicalTest) TestNothing() {                                                                                                                               \n    // fails                                                                                                                                                            \n    t.Assert(t.field == \"one\")                                                                                                                                          \n    t.field = \"two\"                                                                                                                                                     \n}                                                                                                                                                                         \nfunc (t PathologicalTest) After() {                                                                                                                                     \n    // Should be two? Is still blank.                                                                                                                              \n    revel.INFO.Println(t.field)                                                                                                                                         \n}\n``\n. Thanks a lot for the examples, and for the change. I did likewise (using a pointer, and exporting my Dbm). With multiple test runs I will still getdatabase:lockederrors on successive runs, but it will work correctly on the first run of all tests. I will look into proper fixtures and transactions. Thanks again!\n. It wasn't obvious to me how to fix this (I got the same error after upgrading): -- inapp.conf`:\ngo\nmodule.static=github.com/robfig/revel/modules/static\n. Thanks for the advice, that helps a lot. I think you're right about trying to keep names different through semantics -- I'll try to do that and then rename if needed.\n. Awesome, any tips on where I should look to make changes?\n. Yep! I forked revel, and have it working and tested for incoming json data in a map form. If the request.Body is:\njson\n{\n  \"id\": 5,\n  \"array\": [\"oh\", 2],\n  \"hash\": {\"quite\": \"so\", \"sir\": \"thomas\"}\n}\nI'll let Go partially unmarshal the data into req.Form, by just extracting the top-level keys \"id\", \"array\", \"hash\" with value types *json.RawMessage. So the resulting values from ParseParams looks like:\ngo\n{\n  \"id\": \"5\",\n  \"array\": `[\"oh\", 2]`,\n  \"hash\": `{\"quite\": \"so\", \"sir\": \"thomas\"}`\n}\nallowing the developer to use the default or custom Binder to reflect the expected data.\nBut I'm not sure what to do in the case of a incoming array, 'cause there wouldn't be any \"keys\" so to speak, unless we unmarshalled them into array indices, but that seems hacky. What would you recommend in that situation? I'll wait to submit a pull request until we figure it out.\njson\n[\"what\", \"to do?\"]\ngo\n// eh...\n{\n  \"0\": \"what\",\n  \"1\": \"to do?\"\n}\n. I think I was wrong about the use case for incoming JSON data, and am starting to doubt this feature would be useful. Basically, I (and I expect some other devs) want to handle incoming JSON data for REST-compliant front-end frameworks. \nFor the use cases\nPUT /models/{id}\nPATCH /models/{id}\nPOST /models\nfor example, I'd pass the entire gorp-style model or a sub-set of it:\njson\n  {\n    \"Id\": 1,\n    \"Text\": \"Hello\",\n    \"Created\": 1363498343,\n    \"Updated\": 1363498343\n  }\nand then just unmarshal it into the model I've already defined. \nFor a GET, I'd either get the whole collection without passing an id, or get a specific model (for DELETE, too):\nGET /models/\nGET /models/{id}\nDELETE /models/{id}\nSo in these cases it actually doesn't make sense to break up the incoming hash into a map[string]*json.RawMessage only to have to iterate through that map and re-create the (Gorp) struct, when I could have just unmarshalled it directly. What do you think?\n. Maybe it would suffice to do something dead simple, like simply unmarshalling the json data into a var i interface{}, adding it to a new member in Params, and letting the dev type assert as necessary. But then, I don't think it would do any magical struct initialization like Unmarshal does, as described here: http://blog.golang.org/2011/01/json-and-go.html.\n. Also to note, Go's net/http package doesn't yet parse PATCH form bodies yet (only for POST and PUT):\nhttp://golang.org/src/pkg/net/http/request.go#L612\nSo they'll have to be manually parsed from the request.Body if you don't use PUT.\n. That's the sense I got when I looked into it -- the code would have to be\nduplicated. Eek.\n2013/8/5 Rob Figueiredo notifications@github.com\n\nI started a thread on go-nuts:\nhttps://groups.google.com/forum/#!topic/golang-nuts/GjngdEKsUXA\nDoesn't seem like much enthusiasm for the change, though..\nUnfortunately parsePostForm is not exported so the only way to implement\nthis would be to duplicate the code and not use Request.ParseForm at all.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/140#issuecomment-22153418\n.\n. @darkhelmet: Not sure if this has anything to do with it, but \"The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.\" (http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.4).\n. This was fixed as soon as I merged in #201 :) Thanks!\n. If you're using Gorp like I am, the way I do this is with Gorp's transient fields (https://github.com/coopernurse/gorp) :\n\n`` go\ntype Person struct {\n    Name    stringdb:\"name\"Age     intdb:\"age\"HisName stringdb:\"-\"// Won't get saved\n    HisAge  intdb:\"-\"` // Won't get saved\n}\n...\n// Then you can modify the real fields before they get saved\nfunc (p *Person) PreInsert(s gorp.SqlExecutor) error {\n    p.Name = fmt.Sprintf(\"Mr. %s\", p.HisName)\n    p.Age = p.HisAge + 5\n    return nil\n}\n```\n. I'm not sure I understand. If all the fields are tied to real database columns, why not just set the values on some of them, and not others?\n. So you're dynamically creating database columns based on user-input? Or do you have the structure of the columns themselves, but not the row data?\n. Thanks for the comments, I made the changes. I agree, that control flow is far nicer.\n. Can't you just use:\n{{template \"name\" pipeline}}\n    The template with the specified name is executed with dot set\n    to the value of the pipeline.\nFrom: http://golang.org/pkg/text/template/ ?\n2013/8/23 pa001024 notifications@github.com\n\nexample:\nfile \"Dashboard/Action.html\"\n\n{{set $var \"foo\"}}\n{{include \"Dashboard/widget_test.html\"}}\nfile \"Dashboard/widget_test.html\"\n{{$var}}\nwill output:\n\nfoo\n(see code for details)\nNote:\n1. It is inline so almost does not affect performance.\n2. Currently it won't check circular reference, so may cause some\n   problems in wrong usage.\n\nYou can merge this Pull Request by running\ngit pull https://github.com/pa001024/revel master\nOr view, comment on, or merge it at:\nhttps://github.com/robfig/revel/pull/286\nCommit Summary\n- Add {{include}} template tag\nFile Changes\n- M template.gohttps://github.com/robfig/revel/pull/286/files#diff-0(18)\nPatch Links:\n- https://github.com/robfig/revel/pull/286.patch\n- https://github.com/robfig/revel/pull/286.diff\n. html/template strips HTML comments for you automatically, here's how to fix: https://groups.google.com/forum/#!topic/golang-nuts/mriui-HG65A\n. I use upstart on Ubuntu. After I package my app, my upstart's\nrevel_app.conf file is a one-liner:\n\nexec /path/to/packaged/app/run.sh\n. I forgot to mention, the file name is something nicer, like myappname.conf\nso I can do [start/stop/restart myappname].\n. @tim-peterson -- mclark has it, I use revel package appname, upload the resulting .tar.gz file to a server, and tar -xvzf it in place.\n. Check /var/log/upstart/myappname.log, the full error message should be there.\n. Filenames in computing are nearly always case-sensitive. Why make it case-insensitive?\n. Ah, I didn't know that. You can tell what kind of computing I've been up to.\n. I don't agree that view files should be case-insensitive. The top 2 Python frameworks (according to http://www.hotframeworks.com/languages/python), Flask and Django, both render .html files case sensitively. Play framework views are also case-sensitive.\nI'd recommend we follow those frameworks, Unix filesystem convention (and NTFS convention http://support.microsoft.com/kb/100625) and the principle of least astonishment and leave files as case sensitive without a pressing reason to the contrary.\nI also think this is separate from the issue of the default template filenames. I understand not liking CamelCased filenames. But this framework routes actions to exported controller methods (which are CamelCased by Go convention), so those method names should parallel view filenames. Meaning SomeView will render SomeView.html, and not also SOMEVIEW.HTML, someView.html, or sOmEvIeW.hTmL. I'd find anything else bizarre. And if there were multiple such files with different names but had the same case-insensitive squished name, how would you resolve which file to render, and why even put yourself in that situation?\nIf the above naming conventions are still a nuisance, why not simply specify which file to render? I'm curious to hear your thoughts.\n. I can see where it'd be horrendous to develop on HFS+ and then have broken production code. For that reason I'd support case-insensitive filenames.\n. I don't see much value in changing something like err to readError when it's the result of a function already called ReadFile. I do think code quality conventions are useful in general, and one tool I've found invaluable in my projects is https://github.com/golang/lint. It enforces good comments on exported things, good (although not necessarily meaningful) names, etc.\nRunning it on a pre-existing code base is going to spew a lot of errors, and it would take probably 24 hours of development time to make Revel compliant. I ran it on an existing codebase of mine about half Revel's size, and it took about 2 days to conform it. But now I run it before every check-in and am quite pleased at the quality it enforces!\n. The code (https://github.com/golang/lint/blob/master/lint.go) has a bunch of functions starting with lint..., and each function comment describes some stylistic check. There isn't, unfortunately, a README that gives a high level overview, and the comments won't show up on Godoc.org on since the functions aren't exported.\nHere are three examples, to give a gist:\n``` go\n// lintPackageComment checks package comments. It complains if\n// there is no package comment, or if it is not of the right form.\n// This has a notable false positive in that a package comment\n// could rightfully appear in a different file of the same package,\n// but that's not easy to fix since this linter is file-oriented.\n// lintExported examines the doc comments of exported names.\n// It complains if any required doc comments are missing,\n// or if they are not of the right form. The exact rules are in\n// lintFuncDoc, lintTypeDoc and lintValueSpecDoc; this function\n// also tracks the GenDecl structure being traversed to permit\n// doc comments for constants to be on top of the const block.\n// lintValueSpecDoc examines package-global variables and constants.\n// It complains if they are not individually declared,\n// or if they are not suitably documented in the right form (unless they are in a block that is commented).\n// lintNames examines all names in the file.\n// It complains if any use underscores or incorrect known initialisms.\n```\nI agree that vague variable names are in fact by definition not good (vague being pejorative). What constitutes a vague variable name? That's often a matter of taste. I think err is so heavily used in Go code that it's quite recognizable as an error, the type of the variable is error, and there are no other common English words that the prefix err would be confused with. Certainly there are examples where terseness detracts from code quality, but I don't think err is one of them.\nSingle-letter variable names are usually unfriendly, but it's also important to take the context into account. For example, in the link (whose entire argument appears to be a one-sentence generalization, although the discussion that follows is more useful), someone complains about the use of r, s *big.Int as parameters in DSA signing and verification. But in the DSA algorithm spec, those parameters are part of a mathematical formula and are in fact simply called r, s. The software around the algorithm correctly reflects that.\nI don't like s *Stmt but I do like expr *ast.Expr, even though they're both abbreviations. This is just one person's (my) taste and others might prefer more terse or verbose variable names.\nI wonder if after having the project pass Golint (which will be significant effort in itself, and I'm willing to help do it), if the opinion of robfig and perhaps a few other designated style-checkers would suffice on pull requests, where it might not be easy to use a computer rule. He does a great job of checking for style like that now. Maybe one day the workload will become too high -- perhaps we can cross that bridge when we get to it? I can't tell if this is a genuine problem yet.\nWhat do you think, @robfig?\n. Also GMT-8, I'll try to drop by sometime.\n. Do you have \"package revel\" at the top of your file?\n2013/12/7 RafaDev7 notifications@github.com\n\nWhy can't I do it:\nfunc (c AppController) RenderValidationResult(err revelValidationResult)\nrevel.Result\nI've got an error, is it a bug?\nGo Compilation Error\nThe Go code src/github.com/rafadev7/irado/app/tmp/main.go does not\ncompile: revel redeclared as imported package name\nIn src/github.com/rafadev7/irado/app/tmp/main.go (around line 12)\n7:\n\"github.com/robfig/revel\"\n8:\n \"github.com/mattn/go-sqlite3\"\n9:\n \"github.com/rafadev7/irado/app\"\n10:\ncontrollers \"github.com/rafadev7/irado/app/controllers\"\n11:\ntests \"github.com/rafadev7/irado/tests\"\n12:\nrevel \"github.com/robfig/revel\"\n13:\ncontrollers0 \"github.com/robfig/revel/modules/jobs/app/controllers\"\n14:\n \"github.com/robfig/revel/modules/jobs/app/jobs\"\n15:\ncontrollers1 \"github.com/robfig/revel/modules/static/app/controllers\"\n16:\n \"github.com/robfig/revel/modules/testrunner/app\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/401\n.\n. That's what I mean. You might have had a problem redeclaring your package\nas \"revel\" instead of your own name.\nOn Dec 9, 2013 3:59 PM, \"RafaDev7\" notifications@github.com wrote:\n@purohit https://github.com/purohit yes I have the revel package.\n@brendensoares https://github.com/brendensoares I just don't saved this\nbranch.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/401#issuecomment-30187237\n.\n. Not sure if you mean only open-source apps, but my Mandarin-language\nlearning program, Outspoken, is built entirely with Revel. And thanks for\nthe great work.\n\nhttps://outspokenlanguage.com/\nOn Jul 4, 2014 9:39 AM, \"zzdboy\" notifications@github.com wrote:\n\nhttps://github.com/zzdboy/GoCMS\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/616#issuecomment-48001730.\n. \n",
    "NosDmit": "If you try build revel, you see build error. I don't find bug tracker and write in issues. I download websocket from http://code.google.com/p/go/source/browse/?repo=net#hg%2Fwebsocket and add to Go path. Please, find link and change to source. \n. ",
    "Claud": "Installation does not work. I see this output:\npackage github.com/robfig/revel\n        imports code.google.com/p/go.net/websocket: Get https://code.google.com/p/go/source/checkout?repo=net: x509: certificate has expired or is not yet valid\n. I recommend you try the \"Runit\" to run your applications.\n. ",
    "pozen": "I got this problem when i try to build :\nC:\\Users\\xxx>go build github.com/robfig/revel/cmd\ncan't load package: package github.com/robfig/revel/cmd: cannot find package \"gi\nthub.com/robfig/revel/cmd\" in any of:\n        c:\\go\\src\\pkg\\github.com\\robfig\\revel\\cmd (from $GOROOT)\n        C:\\gopath\\src\\github.com\\robfig\\revel\\cmd (from $GOPATH)\n. ",
    "daddykotex": "I've had the smae problem on Windows and installing Mercurial solved the problem,\n. ",
    "moorage": "Hmm -- well I tried changing my GOPATH to something else with export GOPATH=/my/desired/directory, and then ran new, and it didn't output into my/desired/directory -- it output where revel was installed.\nI am not playing around with Revel enough to know if other people are having the same problem, though.\n. Hmm -- I guess I wasn't trying to install revel in a different location, but rather a new project in a separate directory from my GOPATH\n. ",
    "eaigner": "Well there is always the option to avoid it all-together by making it a function rather than a controller method\nfunc DoThis(c *rev.Controller)\n. Would it be possible to derive what is an exposed controller method and what isn't from the routes file?\n. Right.\n. What about this idea?\ngo\ntype Controller struct {\n  *rev.Controller\n  IgnoreMethodName rev.Annotation\n}\nThen the method MethodName would be ignored. This way you could \"fake\" annotations.\n. ",
    "stapelberg": "Re: using bash run.sh:\nI am deploying all my stuff using systemd, where you specify an absolute path to the binary you want to run. In my case that is /opt/piksku/run.sh, which is much clearer than /usr/bin/bash /opt/piksku/run.sh.\nAnother thing I\u2019ve noticed is that the timestamps of the files are all wrong (e.g. \"-rw-r--r-- 1 root root  482 1985-08-14 00:00 app.conf\"). Is that an oversight or another implication of using zip files? It might be bad for the Last-Modified HTTP mechanism, e.g. when you edit a file on the production server (it\u2019s a no-no, but people probably still occasionally do it), then later edit it locally with different changes and deploy a new package. The client would not get the new file in that situation.\n. I\u2019m aware of what \u201cpackage\u201d does on a high-level point of view. But what are the exact commands I\u2019d need to run in order to achieve the same result?\n. ",
    "rverton": "Yes, you are right. I completly agree on (1), should have thought of this before. \nRegarding the optional arguments: I dont know a good way how to do this in go. Do you have an idea how this can be solved? We can create two separate functions - one which accepts singular/plural values and the second which holds default values, but I think just using a single function and forcing the user to set values is a bit cleaner. What do you think?\n. I will also send an pull request for the gh-pages if this request is merged.\n. ",
    "przytads": "$ go get github.com/robfig/revel\nUsername for 'https://github.com': ABC\nPassword for 'https://ABC@github.com': \ncd /ABC/gocode/src/github.com/robfig/goconfig; git fetch\nfatal: https://github.com/robfig/goconfig/info/refs not found: did you run git update-server-info on the server?\npackage github.com/robfig/goconfig/config: exit status 128\n. $ mkdir gocode2\n$ cd gocode2/\n$ export GOPATH=pwd\n$ echo $GOPATH\n/ABC/gocode2\n$ go get -v github.com/robfig/revel\ncode.google.com/p/go.net (download)\ngithub.com/robfig/goconfig (download)\nUsername for 'https://github.com':  <-- why?\nPassword for 'https://ABC@github.com':  <-- why?\ncd .; git clone https://github.com/robfig/goconfig /ABC/gocode2/src/github.com/robfig/goconfig\nCloning into '/ABC/gocode2/src/github.com/robfig/goconfig'...\nfatal: https://github.com/robfig/goconfig/info/refs not found: did you run git update-server-info on the server?\npackage code.google.com/p/go.net/websocket\n    imports github.com/robfig/goconfig/config: exit status 128\n. ",
    "chriscauley": "Just a heads up for anyone having this problem. I had this issue when I misspelled the url. It doesn't look like that is the issue in the above example (unless his paste is not 100% accurate). However, github will require you to login before giving you a 404. This is presumably because they give a 404 if you try to access a private repository you don't have access to. For consistency you always need to login before you get a 404.\n. ",
    "gregworley": "without any modification to the booking sample app, enter username demo, password demo, without entering anything in the search box, search for hotels, and from the results follow the link for the first hotel leads me\nhttp://localhost:9000/hotels/1\nand the html error page is:\nNot Found\nHotel 1 does not exist\nThese routes have been tried, in this order :\nGET       /@tests                                           TestRunner.Index\nGET       /@tests.list                                      TestRunner.List\nGET       /@tests/public/                                   staticDir:testrunner:public\nGET       /@tests/{suite}/{test}                            TestRunner.Run\nGET       /                                                 Application.Index\nGET       /hotels                                           Hotels.Index\nGET       /hotels/list                                      Hotels.List\nGET       /hotels/{id}                                      Hotels.Show\nGET       /hotels/{id}/booking                              Hotels.Book\nPOST      /hotels/{id}/booking                              Hotels.ConfirmBooking\nPOST      /bookings/{id}/cancel                             Hotels.CancelBooking\nGET       /register                                         Application.Register\nPOST      /register                                         Application.SaveUser\nGET       /settings                                         Hotels.Settings\nPOST      /settings                                         Hotels.SaveSettings\nPOST      /login                                            Application.Login\nGET       /logout                                           Application.Logout\nGET       /public/                                          staticDir:public\n-         /{controller}/{action}                            {controller}.{action}\n. additionally, I inserted the println in gorp.go and here's what I'm seeing in the terminal:\n~\n~ revel! http://robfig.github.com/revel\n~\nINFO  2013/02/07 17:47:45 revel.go:246: Loaded module testrunner\nERROR 2013/02/07 17:47:45 i18n.go:99: Error reading messages files: lstat /home/richardworley/gocode/src/github.com/robfig/revel/samples/booking/messages: no such file or directory\nINFO  2013/02/07 17:47:45 run.go:56: Running Booking example (github.com/robfig/revel/samples/booking) in dev mode\nINFO  2013/02/07 17:47:45 harness.go:136: Listening on :9000\nINFO  2013/02/07 17:47:55 revel.go:246: Loaded module testrunner\nERROR 2013/02/07 17:47:55 i18n.go:99: Error reading messages files: lstat /home/richardworley/gocode/src/github.com/robfig/revel/samples/booking/messages: no such file or directory\nINFO  2013/02/07 17:58:45 main.go:27: Running revel server\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] create table User ('UserId' integer not null primary key autoincrement, 'Name' varchar(100), 'Username' varchar(20), 'HashedPassword' blob) ; [[]]\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] create table Hotel ('HotelId' integer not null primary key autoincrement, 'Name' varchar(50), 'Address' varchar(100), 'City' varchar(40), 'State' varchar(6), 'Zip' varchar(6), 'Country' varchar(40), 'Price' integer) ; [[]]\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] create table Booking ('BookingId' integer not null primary key autoincrement, 'UserId' integer, 'HotelId' integer, 'CheckInStr' varchar(255), 'CheckOutStr' varchar(255), 'CardNumber' varchar(16), 'NameOnCard' varchar(50), 'CardExpMonth' integer, 'CardExpYear' integer, 'Smoking' varchar(255), 'Beds' integer) ; [[]]\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] insert into User ('Name','Username','HashedPassword') values (?,?,?); [[Demo User demo [36 50 97 36 49 48 36 74 47 113 105 109 50 86 89 103 114 55 97 120 111 111 50 106 100 107 77 70 79 76 102 79 79 65 119 106 82 109 57 105 113 104 74 71 68 72 74 99 66 112 104 68 122 53 116 86 82 56 48 113]]]\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] insert into Hotel ('Name','Address','City','State','Zip','Country','Price') values (?,?,?,?,?,?,?); [[Marriott Courtyard Tower Pl, Buckhead Atlanta GA 30305 USA 120]]\nINFO  2013/02/07 17:58:45 gorp.go:78: Hotel 1 inserted.\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] insert into Hotel ('Name','Address','City','State','Zip','Country','Price') values (?,?,?,?,?,?,?); [[W Hotel Union Square, Manhattan New York NY 10011 USA 450]]\nINFO  2013/02/07 17:58:45 gorp.go:78: Hotel 2 inserted.\nINFO  2013/02/07 17:58:45 gorp.go:855: [gorp] insert into Hotel ('Name','Address','City','State','Zip','Country','Price') values (?,?,?,?,?,?,?); [[Hotel Rouge 1315 16th St NW Washington DC 20036 USA 250]]\nINFO  2013/02/07 17:58:45 gorp.go:78: Hotel 3 inserted.\nListening on port 44183...\nGo to /@tests to run the tests.\nINFO  2013/02/07 17:58:46 gorp.go:855: [gorp] select * from User where Username = ? [[demo]]\nINFO  2013/02/07 17:58:46 gorp.go:855: [gorp] select * from User where Username = ? [[demo]]\nINFO  2013/02/07 17:58:46 gorp.go:855: [gorp] select * from Booking where UserId = ? [[1]]\nINFO  2013/02/07 17:58:46 gorp.go:855: [gorp] select * from User where Username = ? [[demo]]\nINFO  2013/02/07 17:58:46 gorp.go:855: [gorp] select * from Hotel limit ?, ? [[0 10]]\nINFO  2013/02/07 17:59:42 gorp.go:855: [gorp] select * from User where Username = ? [[demo]]\nINFO  2013/02/07 17:59:42 gorp.go:855: [gorp] select 'HotelId','Name','Address','City','State','Zip','Country','Price' from Hotel where 'HotelId'=?; [[2]]```\n. ",
    "coocood": "I didn't mean to ask revel to bind to any ORM, I'm just thinking maybe you can list \"Qbs\" along with \"gorp\" in revel website.\n. thank you, kdar\n. ",
    "mictadlo": "bossdb ( https://github.com/evanmiller/boss_db )  also looks interesting, because it supports many databases  ( https://github.com/evanmiller/ChicagoBoss/wiki/Configuration ) and soon are coming more. Maybe it is possible to combine it with QBS?\n. Thank you Linicks. It is what I wanted say. I found also this project https://github.com/areusch/glam , but its performance was slow. Maybe it is possible to improve it.\n. ",
    "bamzi": "i updated to the lastest commit (5fb04ba) but the same issues still apply.\nTo test further, i places one of the sample apps (booking) into \"src/\" folder, but same exact error in browser. \nthe sample app code won't work from $GOPATH root directory and has to be placed in \"src/\" folder, i think that's by design. (error msg: revel.go:195: Failed to import booking with error: import \"booking\": cannot find package)\n. FIXED\nyou were right about some old revel somewhere\nback in november i had installed revel but the full removal and relocation skipped the unix executable file in $HOME/bin folder. removing that solved the issue.\nThank a lot for your effort and patience with me.\n. i don't want to hijack the thread away from luke's questions. \n@robfig what are your thoughts on  go-urlrouter (https://github.com/ant0ine/go-urlrouter) which deviates away from regex entirely and uses a map based trie data structs. the claim is that it's 40-50 times faster than regex url routing!  source: http://blog.ant0ine.com/typepad/2013/04/go1-1-beta2-much-faster-.html\n. Thanks for the input @Shaban and putting in the effort of testing it.\ni think i rushed to believe in it at face value. i'd too would not want to give up revel routing's ease/flexibility at any cost. Rob has done, still doing, a fantastic job with revel. i personally see it as the future framework of choice for, dare i say, even enterprise apps.\nthough, i must admit i'm probably not using %50+ of this beauty given the purpose of my app, being an API backend that doesn't need views/tmpl or sessions/flash. likes of my project are plenty since the general direction is separating backend from frontend for extension and scale. but still i cannot stop recommending it.\n. i guess this question is going unanswered because of clarity.\nin other words:\ni may be able to disable sessions and cookies by forking the framework and modifying the core (big no no), however, internally in my app code i can't figure out how to set conditions for forgoing cookies even though i make no reference nor do i initiation any sessions in any of the functions.\nso the questions are:\nif i'm not using or initiating sessions from the inside of my app why is it still being passed through?\nwould a condition parameter in config file be a good idea?\ni.e.  cookies=disable and/or sessions=disabled (by default it could be enabled)\n. thank you for taking the time to answer. my app is also a side project after my full time job. so i totally understand.\ni understand most web project would utilize the full features of the framework which requires sessions info even at times sending or requesting a json or xml response, since cookies also play an important security role. therefore, going implicit may become a cause for concern which would need additional logic as security measures.\ni'll look into your suggestion, while i want to solve my small problem i don't want to cause others a huge headache.\n. much thanks.\ni've been following up on changes/improvements and amazing job thus far.\n. yes the issue was my code. thanks for helping me find the source.\n. ",
    "FreekingDean": "Sounds good I'll check it over see what I can do!\n. Didn't update the module into my app.conf. I need to read more before just making an issue I suppose.\n. ",
    "glittershark": "Tried installing revel to a non-homebrew go installation, still same issue\n. Found the problem -- apparently revel breaks if GOROOT is set? Either way running unset GOROOT fixed the issue.\n. Yeah, the issue here was that I didn't quite understand the whole GOROOT/GOPATH business - I read a little deeper into the documentation surrounding the feature, and I understand what's going on now.\nAs a side note - does Revel work if there are multiple paths inside GOPATH?\n. ",
    "nickjshearer": "FYI, I think switching to serveContent has made explicitly setting the Content-Length redundant, and caused the HTTP package to log out some warnings (see issue #92).\n. First off, this is my first ever issue comment on GitHub so go easy on me! I'm more than prepared to be wrong on this one.\nI think this is happening because the http package is very strict about 304 responses returning no other entity-headers (see this golang-nuts post). \nWhen Revel returns a BinaryResult as a response (which, for a new app, would be the jquery JS and bootstrap CSS) it always sets a Content-Length:\n```\nif r.Length != -1 {\n    resp.Out.Header().Set(\"Content-Length\", fmt.Sprintf(\"%d\", r.Length))\n}\nhttp.ServeContent(resp.Out, req.Request, r.Name, r.ModTime, r.ReadSeeker)\n```\nhttp.ServeContent uses ModTime and the request's If-Modified-Since to decide whether it should serve the file at all, or simply return StatusNotModified. Go then complains, because it expects there to be no additional entity headers for a 304 response. Although this currently only results in a console warning, I see in Go's HTTP package that this may change in the future to return an error.\nI don't know why Revel is explicitly setting the Content-Length here, because http.ServeContent overwrites it (see here). So I think the easiest and quickest fix is to simply remove the if statement I pasted above that sets the Content-Length.\nApologies in advance for messing up the pull request on this one - I meant to attach it to this issue, but it appears to have created a new issue. I'm still getting to grips with pull requests, so again, forgive me!\n. I think this is probably up for debate. If you go by the standards, browsers should check for a link element in the <head> before looking for favicon.ico in the root. The link is preferred to the root favicon. The default skeleton app does just this, putting the favicon link in the header.html view. \nGiven that all modern browsers will prefer a <link> to a root favicon I personally think it should stay as it is.\nThat said, there is some inconsistency here, because the booking sample app included with Revel serves up a favicon via the route. I'd flip this issue around and suggest that in the booking sample app we should switch the route out for a <link> in the header view.\n. ",
    "p1n00n3": "Unfortunately I still get the error message. This is happening on my Linux box. I have no problems under my Mac box.\n. Thank you for your update and sorry for the late reply. This issues seems to have been fixed either by Ubuntu or Go. \nI'm using the latest Go release and I no longer have this issue. Once again. Thank you.\n. Thank you for that.\nOn Oct 11, 2013 7:01 AM, \"Otto Bretz\" notifications@github.com wrote:\n\nFor the archives:\nI ran into this today, my project is getting fairly big so just watching\nall of the files hit the default 256 files limit of OSX.\nFix: running ulimit -n 512 in the terminal before starting revel.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/91#issuecomment-26129194\n.\n. I was able to deploy the helloworld example application. I'm still going through the process. I will provide more feedback as I make progress. Under OpenShift you have to use the IP provided or else revel will report the port that it is trying to bind to as already taken. Is there a way to have revel use the value of env variables as values for some of the config values or at the very least. Can some of this config values be set via command line options? Thank you.\n. \n",
    "ottob": "For the archives:\nI ran into this today, my project is getting fairly big so just watching all of the files hit the default 256 files limit of OSX.\nFix: running ulimit -n 512 in the terminal before starting revel.\n. What if I'm running revel behind an nginx proxy so that revel isn't running ssl? Could this be made into an option like https://github.com/robfig/revel/pull/297 that would override the HttpSsl value?\n. Ok, thanks, I didn't know this.\n. For the archives. I added this to my app/init.go\ngo\nrevel.FilterController(sc.Static{}).\n        Remove(revel.SessionFilter).\n        Remove(revel.FlashFilter)\nwhere sc is an import like so sc \"github.com/robfig/revel/modules/static/app/controllers\"\n. You are right. I didn't test this properly, sorry. Will update again later.\n. @hura getSessionExpiration checks if expireAfterDuration == 0 and then returns a zero time. This will make sure that we get a session cookie.\n. Something like this? Added to the session.expires part of appconf.html.\n\nIt can also be set to \"session\" to allow session only expiry. Please note that the client behaviour is dependent on browser configuration so the result is not always guaranteed.\n. Ok?\n. How did you tell that the module was not loaded? I've restarted the app and even removed my app and revel binary and rebuilt everything. Running latest master version and dev mode here also.\n. Thanks for looking at this. I get a 404 on /@jobs also. But the module is still loaded and the jobs are still being run.\n\nTry to add an actual job like this:\n``` go\npackage jobs\nimport (\n    \"github.com/robfig/revel\"\n    \"github.com/robfig/revel/modules/jobs/app/jobs\"\n)\ntype TestJob struct{}\nfunc (c TestJob) Run() {\n    revel.ERROR.Println(\"fail\")\n}\nfunc init() {\n    revel.OnAppStart(func() {\n        jobs.Schedule(\"@every 1m\", TestJob{})\n    })\n}\n```\nI added log.Println(\"load:\", key) to the loadModules() function of revel.go and only the testrunner and static modules are printed. But my job is still being run. Weird.\n. I dug a little deeper. This is what happens:\n1. Build() in harness/build.go runs ProcessSource()\n2. This will pick up the jobs folder of my app and add it to the generated app/tmp/main.go file.\n3. The init() of my jobs are run and the revel job module is imported and my jobs are scheduled.\nNot sure what the best solution to this is though. Change ProcessSource() so that if the jobs module is not enabled skip jobs packages like the main packages are skipped?\n. Nope, not urgent at all. I have a workaround in place.\n. fs_usage is an OSX tool. I found out about it here: https://github.com/howeyc/fsnotify/issues/62. See the original issue description.\nBy template function I mean something like this from my controllers cases.go.\ngo\nfunc init() {\n    revel.TemplateFuncs[\"status2class\"] = func(s int) string {\n        switch s {\n        case 1:\n            return \"info\"\n        case 2:\n            return \"success\"\n        case 3:\n            return \"\"\n        }\n        return \"\"\n    }\n}\n. I think it goes something like this:\nNewHarness() triggers (h *Harness) Refresh()  triggers Build() triggers git through getAppVersion(), triggers a new file change event so we get back to (w *Watcher) Listen and another (h *Harness) Refresh() again. Loop forever.\nI'm not sure how to figure out why git executed from getAppVersion() changes attributes of files.\nBtw. https://github.com/howeyc/fsnotify/pull/79 has been merged now. Should I submit a pull request for watcher.go so that attribute events are ignored? I've seen no regressions with this change.\n. I tried to change my controller and it's not checked into git so it's marked as modified. If I then run git describe --always --dirty I get this from fs_usage:\n20:01:36  lstat64           app/controllers/cases.go                                                         0.000005   git         \n20:01:36  open              app/controllers/cases.go                                                         0.000010   git         \n20:01:36  lstat64           app/controllers/cases.go                                                         0.000005   git\nIf I omit --dirty I get nothing in fs_usage so it would probably not trigger the rebuild loop. So how important is --dirty?\n. $ git tag -l\nv1.0\nv1.1\nv1.2\nv1.3\nv1.4\nv1.5\nv1.6\n\nI feel the real solution would be to exclude all dot files and folders from being watched \n\nI'm not sure how this would help. The modification event I get is for the cases.go file, my controller.\n. @abustany \nBefore:\nstat app/controllers/cases.go \n16777217 31788912 -rw-r--r-- 1 ottob staff 0 46545 \"Jan 18 10:10:23 2014\" \"Jan 18 09:33:03 2014\" \"Jan 18 09:33:03 2014\" \"Jan 17 20:08:53 2014\" 4096 96 0 app/controllers/cases.go\nAfter git describe --dirty:\nstat app/controllers/cases.go \n16777217 31788912 -rw-r--r-- 1 ottob staff 0 46545 \"Jan 18 10:12:02 2014\" \"Jan 18 09:33:03 2014\" \"Jan 18 09:33:03 2014\" \"Jan 17 20:08:53 2014\" 4096 96 0 app/controllers/cases.go\nSo it looks like it's only the atime that is changed.\n. I'm not sure how to best deal with the updated fsnotify dependency. Maybe @robfig has an idea?\n. Correct, dot files/directories are already ignored. https://github.com/robfig/revel/blob/master/watcher.go#L120\n. I would like to see this fixed in master asap.\nMaybe there should be a proper workflow for reporting security issues? So that issues like this can be private until a fix is available in master.\n. @brendensoares I've implemented a workaround. So there's no hurry for me any more.\n. So what would be the idiomatic way to use the app.secret? It would be good if this was documented somewhere.\nIf I set it as an environment variable, should I then read it from my app.init() and add it to the global config so that it can be used in revel.Init()? Or maybe that's to late, isn't my app.init() executed after revel.Init()?\n. :+1:  I see no problems with my application that does some simple Set, Get and Delete calls. And tests pass for me too.\nThanks!\n. v0.10 would be nice.\n. I've been using this all day, no problems. Thanks pushrax!\n. The go project patches security issues in latest major release and previous (1.5). So I would drop support for anything older than that.\n. @alkchr exactly!\n. I tested this today and have found two issues.\n1. Modules doesn't work\nI have this in my config module.static=github.com/revel/modules/static. When I start our revel app I get an error here https://github.com/revel/revel/blob/master/revel.go#L394 which makes sense, because there is no go code in the static folder root:\n2017/06/12 23:57:09 revel.go:333: Failed to load module.  Import of github.com/revel/modules/static failed: cannot find package \"github.com/revel/modules/static\" in any of:\n    /Users/ottob/go/src/mindoktor.io/mindoktor/CLINIC/vendor/github.com/revel/modules/static (vendor tree)\n    /Users/ottob/go/src/mindoktor.io/mindoktor/vendor/github.com/revel/modules/static\n    /usr/local/go/src/github.com/revel/modules/static (from $GOROOT)\n    /Users/ottob/go/src/github.com/revel/modules/static (from $GOPATH)\nI could hack around this by adding the following to the top of addModule() https://github.com/revel/revel/blob/master/revel.go#L401\ngo\nmodulePath = strings.Replace(modulePath, \"/app/controllers\", \"\", 1)\nand change  https://github.com/revel/revel/blob/master/revel.go#L394 to\ngo\nmodPkg, err := build.Import(importPath+\"/app/controllers\", BasePath, build.FindOnly)\nThen everything worked as expected.\n2. vendor folder in parent folder of revel app doesn't work\nWe have our revel app in $GOPATH/src/mindoktor.io/mindoktor/CLINIC but our vendor folder is located in $GOPATH/src/mindoktor.io/mindoktor/vendor/, that is the parent folder of the revel app. This is valid in go and works with other go apps.\nThe check for the vendor path is too simple in importPathFromPath() defined here https://github.com/revel/cmd/blob/master/harness/reflect.go#L777. It expects the vendor folder to be in the revel app folder.\nThis might be an unusual setup so we can work around it by having a special vendor folder for our revel app. I just wanted to report it if it happens to be easy to fix.. Correct, when I use latest un-vendored master everything is working as expected.. ",
    "tinchen": "Hi,\nThanks for your reply so quickly, I tried to use GoClipse (http://goo.gl/AwXR8) , it can run and debug regular Go app well.\nThank you very much !\nTin\n. ",
    "jrem": "Has anyone ever been able to debug a revel application within GoClipse? Can it in fact be done? It seems that revel applications have a different structure than other go applications thus it is unclear how to configure eclipse to debug a revel application. A screenshot proving it is indeed possible would be good, along with a recipe on how to achieve the result. I guess the developers of revel are  using different debugging techniques.\nAn actionable item would be a screenshot showing some code paused in the debugger and how it was achieved, or, if its something that can't be done at this present time, a reason why not (and update the answer when (if) it does later become possible.)\n. I suspect the goclipse plugin would need to be extended to have a revel application configuration added, I guess a feature request to that project would get the ball rolling.\n. I am very used to graphical debuggers, setting breakpoints and examining variables helps me reason what the code is doing, what variables are in scope and their values, I guess when on the leading edge debuggers aren't always yet available. Just tried github.com/sirnewton01/godbg, almost works, but not quite, oh well. A section in the docs about what debugging techniques are known to work would be helpful.\n. Actually godbg does work, just needed the right parameters and to remember to \"revel run theapp\" after any code changes so it gets recompiled, and binary/src match, although the displayed variables are a little terse, and the overall process can be a bit flakey. github.com/davecgh/go-spew, godoc.org/github.com/emicklei/hopwatch (uses go-spew underneath), also work well especially to pretty-print the variables which is mostly what I was after. \nFor now, I'll use these, and will check each release of goclipse to see if/when it starts working.\n. ",
    "pcrawfor": "Thanks Rob, will give it a try and let you know\n. Hey Rob, that works fine I may take a stab at trying to do something a bit more automatic when requests come in with content type of application/json.  Will let you know if I come up with anything.\nThanks\n. ",
    "tejainece": "@robfig Posted solution will not allow automatic binding, action parameters, etc.\n. In dev mode, when you access a route that doesn't exist, revel automatically servers a page with existing schema. Can this is be turned off?\n. No.\nI meant this page that is displayed: http://oi65.tinypic.com/33f99hv.jpg\nWhen there is no matching route.\n. Hey,\nThanks. Fixed it. Somehow forgot to inform you guys.\n. ",
    "kumarsiva07": "@robfig @brendensoares Can you add this to params.go in master?\ngo\nfunc (c Application) Test() rev.Result {\n    mentions := []struct {\n        Text string `json:text`\n    }{}\n    err := json.NewDecoder(c.Request.Body).Decode(&mentions)\n    if err != nil {\n        rev.ERROR.Println(err)\n    }\n    rev.INFO.Println(mentions)\n    return c.RenderText(\"ok\")\n}\n. Yes.  I am using react instead of revel templates.\nSo all the request will have request data in the form of json. It's a\napplication/json type request.\nOn 2 Jun 2016 2:50 am, \"Jeevanandam M.\" notifications@github.com wrote:\n\n@kumarsiva07 https://github.com/kumarsiva07 Can you describe your use\ncase?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/97#issuecomment-223127629, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AHXgdqsHiz0jYrvCxovWB8ag_ow7bzu0ks5qHfcOgaJpZM4AfIxc\n.\n. > panic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x8c7aa]\n\ngoroutine 1 [running]:\ngithub.com/revel/revel.(*MergedConfig).String(0x0, 0x67f128, 0x7, 0x0, 0x0, 0x0)\n    /Users/user/gocode/src/github.com/revel/revel/config.go:92 +0x2a\ngitlab.com/onebyzero/iam/app/models.InitDatabase()\n    /Users/user/gocode/src/gitlab.com/onebyzero/iam/app/models/base.go:37 +0x7d\ngitlab.com/onebyzero/iam/app.init.1()\n    /Users/user/gocode/src/gitlab.com/onebyzero/iam/app/init.go:25 +0x1ed\ngitlab.com/onebyzero/iam/app.init()\n    /Users/user/gocode/src/gitlab.com/onebyzero/iam/app/init.go:42 +0x64\nmain.init()\n    /Users/user/gocode/src/gitlab.com/onebyzero/iam/app/tmp/main.go:246 +0x74\ngoroutine 17 [syscall, locked to thread]:\nruntime.goexit()\n    /usr/local/Cellar/go/1.5.1/libexec/src/runtime/asm_amd64.s:1696 +0x1\n\nMy app.conf\ndb.driver = postgres\ndb.spec = postgres://postgres:postgres@localhost:5432/iam_dev?sslmode=disable\n\nWhy i am getting this error?\n. What will be the expected release date?\n. Could you please add me in that channel?\nkuma....@live.com\n. ",
    "jeevatkm": "@kumarsiva07 Can you describe your use case?\n. @kumarsiva07 - please create an issue with your description and also mention about #97 and #110.\n. #1028 PR is merged to develop branch for handling path separator using filepath.ToSlash in error.go. So I'm closing this one.\n. In-favour of #1054 and revel/cmd#46, revel will handle file path according to OS and without impacting revel import path handling.\nI'm closing this one.\n. User mentioned:\n\nInstead it is being created in $GOPATH/src/ directory.\n\nI would like to clarify this, is it relative path request or request for creating a project outside $GOPATH/src?\n. @alkchr yes this issue, not #1004 \n. @alkchr - Thanks for clarifying. Please continue to share your thoughts on improving Revel.\n@brendensoares - We are not reopening this issue.\n. @arvenil - currently Revel testsuite have dozens of helper methods defined. Please make use of it and also if you think new method can be added to Revel, kindly submit PR or let us know.\nI'm closing this one.\n. @arvenil thanks, please let us know.\n. @brendensoares I implemented here, have a look this branch :)\n. I'm closing this in-favour of revel/cmd#56\n. I agree with organizing, if possible making independent as possible.\nBut my question is about naming and structure, for example:\ngo\nimport (\n    \"github.com/revel/revel/routing\"\n    \"github.com/revel/revel/session\"\n)\nInstead, it's better have structure/name like this:\n``` go\nimport (\n    \"github.com/revel/log\"\n    \"github.com/revel/routing\"\n    \"github.com/revel/session\"\n    \"github.com/revel/auth\"\n    \"github.com/revel/csrf\"\n    \"github.com/revel/db\"\n    \"github.com/revel/testing\"\n// etc...\n\n)\n``\n. GenericWalk` is implemented and improved as part this PR #867.\nAlso revel/cmd related changes (1 & 2) have been done.\nI'm closing this one.\n. @klauspost Thanks for your suggestion, surely we will take care.\nI'm closing this one in-favor of PR #1056\n. #872 might take time. @klauspost suggestion will work in this case, so I'm applying it. \n. I think we can populate Response.ContentType field after resolving Format here then we can use it as needed.\n. Docs taken care for v0.13 release, so I'm closing this one.\n. @alkchr you're correct this PR didn't made it to release. \n. I'm closing this in-favour of PR #1070 \n. @pedromorgan - I would like to work with you on revelframework.com, please let me know your thoughts. \n. Thanks, I will have a look this repo.\n. I'm closing this one in-favour of revel/www#1\n. As per my understanding, binder code look okay. Just skeleton app.conf needs an update from \nini\nformat.date     = 01/02/2006\nformat.datetime = 01/02/2006 15:04\nto\nini\nformat.date     = 2006-01-02\nformat.datetime = 2006-01-02 15:04\n@ptman would you like to do it?\n. Taken care, thanks to @ptman \nI'm closing this one.\n. Yes, I agree with @alkchr this is not a bug. As per design Revel supports modules/testrunner in dev mode only.\nAs part recent PR https://github.com/revel/cmd/pull/14 and related fix around it. Revel will support build and package command with environment/mode value as an input (cmd/build.go and cmd/package.go), if not supplied it defaults to prod.\nI'm closing this one, if we need to discuss about testrunner support for non-dev mode then can start a separate thread for discussion.\nThanks @alkchr \n. @alkchr you have mentioned \n\nI have identified its cause\n\nCan you please share the details?\n. One edge case is addressed, however it's better cover all possible cases or adapt to https://github.com/golang/gddo/blob/master/httputil/header/header.go#L172\n. I believe we can close this PR in-favor of #1028 \n. #1028 merged to develop branch, I'm closing this one.\n. @acorbelli - Sorry for delayed response. v0.13 includes the resolving symlink in views path. Will this commit address your issue?\n. I'm closing this one In-favor of PR #867.\n. I have investigated, harness is not an issue. Problem is at NumField() call for non-struct embedded fields.\n. Taken care!\n. @goors and I discussing on SO. There is hook for startup functions via OnAppStart. Is there any hook for override/merge/add to the Config for before server startup?\nIf there is such hook, it would be great. Then building product (shipping to end user) based on revel framework would be fantastic.\n. I'm working on open source application using revel. Problem is -\nI would set my application config values in /etc/appname/appname.conf and will be using revel app.conf for internal application purpose not exposed/allowed to user. My application will be packaged as .deb and .rpm.\nFor example: /etc/appname/appname.conf has following config values\n``` sh\nhttp.address = \"192.168.1.1\"\nhttp.port = 4000\nand remaining configs...\n```\nI was tried init() function approach ended up with runtime error.\n``` sh\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x87f6a]\ngoroutine 1 [running]:\ngithub.com/revel/revel.(MergedConfig).String(0x0, 0x594570, 0x9, 0x0, 0x0, 0x9)\n    /Users/jeeva/Documents/scm/revel/src/github.com/revel/revel/config.go:92 +0x2a\ngithub.com/revel/revel.(MergedConfig).StringDefault(0x0, 0x594570, 0x9, 0x57cc10, 0x4, 0x0, 0x0)\n    /Users/jeeva/Documents/scm/revel/src/github.com/revel/revel/config.go:99 +0x41\n```\nHow to achieve this?\n. @anonx Thanks for your response. Actually I was aiming to find out a way with-out modifying Revel codebase. So It will compatible with future release. @goors too gave a suggestion of modifying Revel codebase.\nThing is having hook functions for Revel config or accepting conf path via command line would be the best bet here. \nAs you mentioned above, loading sequence of conf files is good enough-\n1. Use of params from /etc/appname/app.conf\n2. If some key is not found, use of conf/app.conf of your app\n3. If still some key is missing, use of Revel's default app.conf\n. @anonx I'm happy to do PR, however I didn't realized here :) Thanks\n. Closing this one. \n. @kumarsiva07 I have create a new revel app against master, followed steps:\nbash\nrevel new github.com/configtest\nAdded below config to conf/app.conf under [dev] section\nini\ndb.driver = postgres\ndb.spec = postgres://postgres:postgres@localhost:5432/iam_dev?sslmode=disable\nAdded following to App Controller src/github.com/configtest/app/controllers/app.go\n``` go\ndriver, _ := revel.Config.String(\"db.driver\")\nrevel.INFO.Println(\"db.driver:\", driver)\nspec, _ := revel.Config.String(\"db.spec\")\nrevel.INFO.Println(\"db.spec:\", spec)\n```\nRun the App:\nbash\nrevel run github.com/configtest\nOutcome:\nbash\nINFO  2016/06/01 12:49:22 app.go:11: db.driver: postgres\nINFO  2016/06/01 12:49:22 app.go:14: db.spec: postgres://postgres:postgres@localhost:5432/iam_dev?sslmode=disable\nSo it's working as expected, if you could provide steps to reproduce it. It would be great!\n. Improved the documentation in Readme and Added demo Revel Application here. Not just contributing once, I would to like improve further and continued contribution. \nBTW are you guys working on any security module for Revel? Since I'm in a need of one. Thought to check with you guys so I can use/develop further/develop new security module. Kindly let me know.\n@revel/core - ?\n. Implemented JWT signing methods HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384 and ES512.\n. What do you mean by submodule?  Can you please describe?\n. I had point no. 1 in my mind while I developed this module for revel. Please put it under https://github.com/revel/modules. Once its added I will remove my existing repo. Then I will contribute for improvement.\nPlease let me know, how to add jwtauth module documentation here http://revel.github.io/manual/modules.html? I will add it.\n. This module is using JWT library https://github.com/dgrijalva/jwt-go as refer by http://jwt.io. From the look of what I searched around. I believe it doesn't have any NSA backdoors. \nAs suggested I will prepare a branch from revel/modules. Once done I will submit merge request.\n. Thanks, I just had a look on that Readme.md, I can do few improvements from my existing documentation. Updated doc will be ready when I submit merge request.\n. @pedromorgan - As discussed I have submitted the pull request here.\nI know how to write TestSuite for revel application but I don't know how to write one for revel Module. Any help appreciated.\n. Revel module structure of JWTAuth is here, cleaned up the previous one.\n. My understanding is existing flow stay as-is with configurable values like @brendensoares mentioned and using Server.Addr in net.Listen(network, Server.Addr) provide ability to modify via startup hooks since it is exported variable revel.Server.Addr and startup hooks cannot have access to un-exported/local variable like localAddress from revel package.\nBTW #999 points to correct branch for this change.\n. Taken care.\n. @runner-mei Thanks for your response. \n. @alkchr can you please share your thoughts on this request?\n. @alkchr doing anywhere path or relative path is not that easy to do with current follow. As you described in step 2, if we transform and make a choice it might lead to further questions.\nHow about this? If revel finds more than one GOPATH then give a choice to user to choose.\nFor example:\n``` bash\n.... Revel found multiple GOPATH, please choose one from it?\n1. ~/golang/3rdLibs\n2. ~/golang/myLibs\n3. ~/golang/myApps\nEnter your choice (default is 1): 3\n... generate a project ...\n```\n. @alkchr I have described the above comment inline with user mentioned problem, not for relative path support.\n\nwhen i execute \" revel new hello\", it creates the project always under ~/golang/3rdLibs, that's where i wish to place 3rd libs, i don't like \"revel\" to create under this path.\ni have to move to ~/golang/myApps manully each time, it seems much bad.\n\nDid I explained it clearly?\n. @alkchr I had look on given reference and I understand your point, thanks.  My bad I was thinking of ./ or ../ inputs.\nI'm marking this for v0.13, I will take care.\n. done!\n. @xinzhangcmu did you sort out this via vendoring?\n. @pedromorgan this is not bug, it work as designed. @douglarek thanks for your suggestion. Yes Revel expects target-path as absolute path. \nI'm closing this one.\n. @alkchr I just checked cmd/new.go new command needs a fix, currently it validates absolute path gives an error msg- \nAbort: '%s' looks like a directory.  Please provide a Go import path instead.\nbut it needs validate relative path too, thanks for mentioning this scenario. I'm applying a relative path check.\n. Not a gzip functionality. Need HTML minify for my revel app. Planning to use https://github.com/tdewolff/minify.\nAny guidance?\n. I'm not sure about revel scope. however if revel provides HTML minify (not JS or CSS) like compress filter. It would be great :)\nYou're correct for JS & CSS, it should be statically served. But I'm looking for HTML only. \n. I'm trying to create one, but facing Content-Length issue. Will post my code later.\n. Sorted out Content-Length issue.  Created Revel MinifyFilter by referring revel.CompressFilter.\nNow MinifyFilter is working fine. Can core team have a look and comment on it? if I'm missing something!\n``` go\nimport (\n    \"io\"\n    \"net/http\"\n    \"regexp\"\n\"github.com/revel/revel\"\n\n\"github.com/tdewolff/minify\"\n\"github.com/tdewolff/minify/css\"\n\"github.com/tdewolff/minify/html\"\n\"github.com/tdewolff/minify/js\"\n\n)\nvar (\n    m            minify.M\n    htmlMimeType regexp.Regexp\n)\ntype MinifyWriter struct {\n    http.ResponseWriter\n    minifyWriter   io.WriteCloser\n    shouldMinify   bool\n    headersWritten bool\n    closeNotify    chan bool\n    parentNotify   <-chan bool\n    closed         bool\n}\nfunc Minify(c *revel.Controller, fc []revel.Filter) {\n    fc0\nif revel.Config.BoolDefault(\"results.minify\", false) {\n    if c.Response.Status != http.StatusNoContent && c.Response.Status != http.StatusNotModified {\n        mw := m.Writer(\"text/html\", c.Response.Out)\n        writer := MinifyWriter{c.Response.Out, mw, false, false, make(chan bool, 1), nil, false}\n\n        w, ok := c.Response.Out.(http.CloseNotifier)\n        if ok {\n            writer.parentNotify = w.CloseNotify()\n        }\n\n        c.Response.Out = &writer\n    } else {\n        revel.TRACE.Printf(\"Minify disabled for response status (%d)\", c.Response.Status)\n    }\n}\n\n}\nfunc (c MinifyWriter) CloseNotify() <-chan bool {\n    if c.parentNotify != nil {\n        return c.parentNotify\n    }\n    return c.closeNotify\n}\nfunc (c *MinifyWriter) WriteHeader(status int) {\n    c.headersWritten = true\n    c.prepareHeader()\n    c.ResponseWriter.WriteHeader(status)\n}\nfunc (c *MinifyWriter) prepareHeader() {\n    // minify is only applied to HTML content\n    if htmlMimeType.MatchString(c.Header().Get(\"Content-Type\")) {\n        c.shouldMinify = true\n        c.Header().Del(\"Content-Length\")\n    }\n}\nfunc (c *MinifyWriter) Close() error {\n    if c.shouldMinify {\n        c.minifyWriter.Close()\n    }\nif w, ok := c.ResponseWriter.(io.Closer); ok {\n    w.Close()\n}\n\n// Non-blocking write to the closenotifier, if we for some reason should\n// get called multiple times\nselect {\ncase c.closeNotify <- true:\ndefault:\n}\nc.closed = true\nreturn nil\n\n}\nfunc (c *MinifyWriter) Write(b []byte) (int, error) {\n    // Abort if parent has been closed\n    if c.parentNotify != nil {\n        select {\n        case <-c.parentNotify:\n            return 0, io.ErrClosedPipe\n        default:\n        }\n    }\n// Abort if we ourselves have been closed\nif c.closed {\n    return 0, io.ErrClosedPipe\n}\n\nif !c.headersWritten {\n    c.prepareHeader()\n    c.headersWritten = true\n}\n\nif c.shouldMinify {\n    return c.minifyWriter.Write(b)\n} else {\n    return c.ResponseWriter.Write(b)\n}\n\n}\nfunc init() {\n    m = minify.New()\nm.AddFunc(\"text/css\", css.Minify)\nm.AddFunc(\"text/html\", html.Minify)\nm.AddFunc(\"text/javascript\", js.Minify)\n\nhtmlMimeType = regexp.MustCompile(\"[text|appliation]/html\")\n\n}\n``\n. It minify's HTML, inline CSS and inline JS in the HTML content.\n. @goors create a package calledfilterusing above code snippet or this [gist](https://gist.github.com/jeevatkm/f17069142842b302e244ada9cda7c4e0) and you have register like this. Finally set the configresults.minify=true` as describe by @notzippy.\ngo\nrevel.Filters = []revel.Filter{\n                revel.PanicFilter,             // Recover from panics and display an error page instead.\n                revel.RouterFilter,            // Use the routing table to select the right Action\n                revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n                revel.ParamsFilter,            // Parse parameters into Controller.Params.\n                revel.SessionFilter,           // Restore and write the session cookie.\n                revel.FlashFilter,             // Restore and write the flash cookie.\n                revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n                revel.I18nFilter,              // Resolve the requested language\n                HeaderFilter,                  // Add some security based headers\n                revel.InterceptorFilter,       // Run interceptors around the action.\n                revel.CompressFilter,          // Compress the result.\n                filter.Minify,                 // Minify filter\n                revel.ActionInvoker,           // Invoke the action.\n        }. @goors if init is not fried. You will be get panic since object is not yet initialized.  do you see any?. @goors I just had a look on tdewolff/minify repo. It seems library have been improved. That code snippet was created year ago. So if you pull the repo you get latest library not the one I have used.\nJust refer latest doc from repo and modify the minify initialization part. Then it would sort out your issue.. @goors as per the error info, it seems nothing wrong in the code. \nMy guess is probably previously compiled .a referring somewhere. Just clean respective repo directory under $GOPATH/pkg/.../... and run it again.. Glad you made it work. However initializing minify instance for every request is not good idea.\nAs @notzippy mentioned in #1169 func init called by golang.. Thanks @goors \ud83d\udc4d . @gyulalaszlo can you please retarget this PR to revel/develop branch?\n. I will be manually targeting this PR to develop branch. I hope you @gyulalaszlo don't mind. \nThanks for contributing to Revel.\n. Manually targeted and merged to develop branch.\n. - First of all, @alkchr - this is not a issue with Revel. It's a enhancement to Revel in-terms of performance\n- Using range or index based access is not gonna make difference\nI believe, we can go with map[string]bool usage like @ganpati mentioned in the issue. Then code will look like in prepareHeaders-\ngo\nif _, found := compressableMimes[responseMime]; found {\n    shouldEncode = true\n    c.Header().Set(\"Content-Encoding\", c.compressionType)\n    c.Header().Del(\"Content-Length\")\n}\n. Even though issue is with golang core\nTest runner updated accordingly to prevent this json: unsupported type: <-chan struct {}\n. I think because of incorrect branch target, @chucklqsun submitted #1039 after that.\n. I have tested this PR locally, it seems it doesn't account for relative vs abs path. For eg.:  config value is log.info.output = log/%(app.name)s.log, this PR will create a log directory wherever user runs command  revel run ...\nSo, I will be adding default revel.BasePath if it's relative path provided in the log config.\ngo\nif !filepath.IsAbs(output) {\n      output = BasePath + string(filepath.Separator) + output\n      // or\n      // output = filepath.Join(BasePath, output)\n}\n. Manually targeted and merged to develop branch.\n. In-favour of revel/cmd#44, I'm closing this one.\n. @zllc - thanks for reporting it.\nv0.12 Revel is already pointed to golang.org/x/net/websocket.\nCan you please try follow commands confirm?\n```\n$ go get -u github.com/revel/cmd/revel\n$ revel new github.com/myaccount/my-app\n$ revel run github.com/myaccount/my-app\n```\nNow sample application is running at http://localhost:9000\n. You're welcome.\n. @sivakumar07 thanks for your suggestion. Team is busy with preparing v0.13 release. After release we may circle back and see what is suitable for @revel/core team and revel community.\nI'm closing this one.\n. Randomly cache test cases (memcached and redis) is failing. Which is impacting PR submission and dev work.\n. @alkchr thanks for your suggestions. Yesterday I have updated the develop branch to Go 1.4, build back to normal also I have nailed down the problem which was around cache test cases, will be looking into it one by one.\n@ottob would you like to mention any particular security issue you think of?\n. @alkchr @ottob - I understand your view point and suggesting to follow Go Lang release policy.\nI would like to share my thoughts here. Revel can be lenient about version support, which expands the usage of Revel Framework (In reality organizations/users gradually does the version upgrades). Yes, I agree we have push minimum version when our critical dependent library pushes us; like fsnotify made us to Go 1.4\n@revel/core thoughts?\n. Taken care!\n. Done!\n. Merged.\n. @ptman thanks for contributing to Revel, I will have a look and share my thoughts. \nThanks again!\n. @ptman I have shared my points, could you please take care. I have assigned this PR to v0.14 will followup with you.\n. Please go with one commit for addressing comments and keep existing commit history.\n. Thanks for your effort, I will have a look and will take care necessary things case by case.\n. As part of code quality improvement, we have done a good on overall code base except -\n- Interceptor in-favour of upcoming implementation #420 \n- And Logger {ERROR, INFO, etc..} in-favour of revel/log#1\n. Godoc task is moved as separate.\n. Please have empty views directory. Will have fix in v0.13 release.\n. Fix applied in v0.13 develop branch.\n. Done\n. @ptman thanks for your time and PR. Did you get a chance to verify them?\n. Thanks \ud83d\udc4d \n. Done!\n. @ivanzhangio Can you please try this, share your feedback?\nNote: Please change the path according to windows.\n- Remove $GOPATH/bin/revel, $GOPATH/bin/revel/revel.d/,  $GOPATH/src/github.com/revel and $GOPATH/pkg/darwin_amd64/github.com/revel\n- go get -u github.com/revel/cmd/revel\n. I will look into it ASAP. Thanks for your quick response.\n. @ivanzhangio @runner-mei Can you please take an update and verify it? \nPS: I have applied path fix and verified in my windows 10 VM.\n. FYI, windows support will be significantly improve on v0.14 release\n. @runner-mei thanks for confirmation.\n. No, please use revel build or revel package.\n. I couldn't understand.\n\nbuild generate some files that are not compiled\n\nCan you please explain in detail, what is the issue you're facing?\n. okay, I get it. So you want to exclude the src from archive correct? \n. I understand. Actually, exclude feature is currently not exists. \nCan you please create an issue here with feature description for revel package command?\n. @mageddo please create an issue at revel/cmd with detailed description for package command.\nI'm closing this one.\n. You're welcome, please continue your contribution to Revel.\n. Done!\n. I have read your inputs, below is equivalent to Go http.Request.RemoteAddr and it's language level-\n- request().remoteAddress() Java Play\n- request.connection.remoteAddress Node.JS\n@_SERVER['REMOTE_ADDR'] Kohana PHP\nBelow one, customized by respective framework-\n- request.ip and request.remote_ip Ruby on Rails\n- Request::$client_ip Kohana PHP\nNow, let's come to Revel. It can provide -\n- ServerIP - comes from app.conf - http.addr or local loopback address\n  - Or We call this as IP and add documentation explaining this is server ip. Like Ruby SO question\n- ClientIP or RemoteIP in the Controller\n  - Both terms is known in the industry and developers familiar to it\n. @brendensoares what is the final take on this?\n. ClientIP method already has godoc, all we need to do is updating controller attributes in the manual.\n. Will do it, when time permits.\n. Did you get a chance to see this IntelliJ plugin wiki? Please give it try.\n. Revel does have main entry point, $GOPATH/src/<import-path>/app/tmp/main.go gets generated during a build. \nCan you please try revel run command or output from run command?\nrevel run <import-path>\nWhen you run revel run, it builds a revel app and creates a binary here $GOPATH/bin/revel.d/<import-path>/<app-name>.\nThat binary takes following params to run the application.\n$GOPATH/bin/revel.d/<import-path>/<app-name> -importPath <importPath-value> -srcPath <sourcePath-value> -runMode <runMode-value>\nIf you turn on the trace logging in revel (app.conf - log.trace.output = stderr), you can relate my description from logging output.\n. @mrichman I'm glad it worked.\nI would like to ask a favor from you. Whenever you get a chance; can you please document (How to debug revel with IntelliJ Go plugin) your steps here, it would be great. \nCommunity will get benefit from your effort and findings :)\n. Can you please share project file structure and complete error log line?\nAlso, what is it mean I have a lot of files in public folder, error showing controller path tree and you're mentioning about public directory. I couldn't understand. Please clarify.\n. I hope you have enough hard disk space :)  What is ulimit size for hard and soft? please increase it might solve your issue.\n. May be, if you exceed total of 100000. One important thing, when you increased fs.inotify.max_user_watches value then increase max limit file descriptor too.\n``` bash\nvi /etc/sysctl.conf\nfs.file-max = 200000\nApplying changes\nsysctl -p\n```\n. Thank you.\n. This PR build fail is expected one. Since corresponding PR revel/cmd#58 is not yet merged.\nAbort: Failed to open file /home/travis/gopath/src/github.com/revel/revel/skeleton/.gitignore: open /home/travis/gopath/src/github.com/revel/revel/skeleton/.gitignore: no such file or directory\n- [ ] First merge PR revel/cmd#58 into develop branch and trigger travis build manually\n- [ ] Merge this PR\n. CI is passed, merging it.\n. This is not a windows issue please refer revel/cmd#51. What is your Go version (1.7 beta or devel)?\n. Thanks for confirming, till that revel/cmd#51 gets released. Please use Go v1.6.2. \n. @marquinhusgoncalves Thanks for the PR.  \nPlease target the develop in branch revel/cmd repo per Revel's Contributing Guidelines.\nskeleton/app/views/flash.html is moved to revel/cmd/revel/skeleton/app/views/flash.html\n. @jchavannes  Thanks for the PR.\n. Please refer #1050\n. After the build; target directory will have run.sh & run.bat and other files. Use the run file.\n. Let's say this is revel app vagrant-revel-react reside in $GOPATH/src/vagrant-revel-react\n- when you revel build vagrant-revel-react /tmp/myapp\n- /tmp/myapp gets created with build artifacts\n- cd /tmp/myapp and this directory will have files I have mentioned about.\n. @nikxliu  It looks like you have GOROOT path in GOPATH as well. So remove D:\\tools\\Go for GOPATH and give it try.\n. @nikxliu If you didn't modify any configs, you're running revel in dev mode.\nFrom your details, you're facing issue of GOROOT and GOPATH conflict. Please refer http://golang.org/doc/code.html \nAs @brendensoares mentioned, code change is not required to sort out this issue.\nKindly make distinguish between GOROOT and GOPATH in your environment and keep your revel app in GOPATH. Your program will surely work.\nPlease let me know.\n. @nikxliu glad to hear!\n. @arixion Multiple ways to achieve this behavior. One suggestion from my end.\ngo\nreturn c.Redirect(LoginApp.Login, cont)\nAbove line gives continue URL to the login page. Post continue URL you have on login page along with credentials. Then you will have login credentials and continue url as part of login submission.\nOnce login is success, use continue URL to redirect user to that page.\n. > monkeypatched revel/cmd/harness/build.go\nCan you please describe your issue?\n. As of now, revel has support for adding -tags build values from app config build.tags.\nCustom support for -ldflags is yet to come. For now you can edit build.go use it for your purpose.\n. Implementation was part of v0.13.0 release. \n- Defaults to HttpOnly and always secure cookies for non-dev mode #942, PR #943\n. Currently DevMode uses the app config mode.dev value. As you have described, it is safe to set DevMode to true/false value based on RunMode.  Safe to remove mode.dev from config.\n. My apologize for the delayed response.  As @shawncatz mentioned, Yes I have started working on aah web framework for Go. I felt I could do more to the web framework and Go community.\nI don't have permission to add contributors, we have to touch base with @brendensoares. Only he can help.. @brendensoares Thank you. I really enjoyed working in Revel, @pedromorgan and you. I'm available on gitter.im(you can find me using github name) let's be in touch.. @notzippy I believe it's March 2nd evening. I will try to join or I will go through the MOM later on. I have to pickup my daughter around that time.. @brendensoares You have expressed it objectively and clear. Thanks.. It's better to have 0755 as a FileMode, remaining looks fine.\n. If we support this RenderCustom then ;  charset=utf-8 value have to come with c.ContentType, no hard-cording.\n. Currently this package is not exists, its been changed to golang.org/x/text/unicode/norm\n. This is test case t.Errorf would be appropriate here.\n. This is test case t.Errorf would be appropriate here.\n. This is test case t.Errorf would be appropriate here.\n. This is test case t.Errorf would be appropriate here.\n. please update to t.Errorf or t.Fatalfinstead of panic.\n. May be you can have sum := currrentVal + int64(delta)\n. please update to t.Errorf or t.Fatalf instead of panic.\n. please update to t.Errorf or t.Fatalf instead of panic.\n. please update to t.Errorf instead of panic.\n. please update to t.Errorf instead of panic.\n. please update to t.Errorf instead of panic.\n. May be you can have both the variable to :=\n. May be you can have :=\n. please update to t.Errorf instead of panic.\n. Please update to ERROR.Println, this is not candidate for panic.\n. Please update to ERROR.Println, this is not candidate for panic.\n. As per hasLocaleCookie method, you can combine L196 and L197.\n. L19 is not candidate for panic, please update to -\ngo\nERROR.Println(err)\nreturn \"\"\nor you can change the if condition with err == nil have encode string inside and have return \"\" at the end of the method.\n. I think, we can handle gracefully errors in results.go and log it errors instead of panic all over. @revel/core thoughts?\n. For test case, please update to t.Errorf instead of panic.\n. For test case, please update to t.Errorf instead of panic.\n. For test case, please update to t.Errorf instead of panic.\n. what do you think of-\ngo\nif contentBytes, er := ioutil.ReadFile(routesPath); er != nil {\n    ERROR.Printf(\"Failed to read route file %s: %s\\n\", routesPath, er)\n} else {\n    content = string(contentBytes)\n}\n. May be within a method, you can go for :=\n. May be within a method, you can go for :=\n. For test case, please update to t.Errorf instead of panic.\n. For test case, please update to t.Errorf instead of panic.\n. For test case, please update to t.Errorf instead of panic.\n. I think we can handle error gracefully on server.goinstead of panic. @revel/core thoughts?\n. Please handle it gracefully with ERROR.Println\n. Please update it to-\ngo\nERROR.Println(\"Failed to walk filepath:\", err)\nreturn err\ninstead of panic.\n. please update it to-\ngo\nERROR.Println(\"Failed while listener refresh\")\ninstead of panic.\n. ",
    "kennygrant": "PS Sorry to mix up several changes here in one example - we could probably do this as just a few pull requests separately (perhaps templates, layouts and then render function if it was completely backwards compatible), with discussion on each one. Obviously some things like the Render() function you might not want, but I wanted to get a demo up for you to look through for the layouts and mustache stuff, so I just put it all together into one demo. The layouts could be done with a separate RenderInLayout function at least initially, but long term I imagine you'd want one render function with consistent params.\nSo when you have had time to look let me know which parts you like and a rough idea of direction, and I'll try to get changes worked up which could actually be merged. Feel free to split this ticket up into several if you prefer, and we can discuss one feature at a time. \n. > implicit layout fallback if no provided file exist at #L12R193 may be confusing, and not very good for testing\nYes it might be best to just fail if RenderInLayout was called and there is no layout in the app, so we might not need to put a layouts/application.html file in the framework. Revel currently has a convention for view template names, so the layouts convention is just an extension of that:\nviews convention:\ncontrollername/action.html\nlayouts convention:\nlayouts/controllername.html\nif no controller-specific layout, use layouts/application.html \nlayouts/application.html would be generated for new apps in views/ as the current split layouts are\nThe intention of the layouts/application.html inside revel templates was to cover apps generated under the old scheme who wanted to switch to layouts, but having thought about it, it's probably not necessary, and apps should provide a layout if they want to render in layouts, which would have to be called explicitly. And if you don't want controller specific you'd just have one layouts/application.html and not worry about it. You do need some default layout as otherwise your app would not be serving html at all, but a snippet, so all apps using layouts would need at least layouts/application.html. The above conventions also mirror rails, and I find it works very well there, typically you won't use controller specific ones often, but you do sometimes and it's nice to just add them and have it work (as you just add views templates in revel at present).\nThese thoughts are obviously just suggestions though and I didn't intend to get into deep discussion of all the features right now, this is all at a more preliminary stage to feel out which bits Rob would prefer to be done and in what order. So I don't really have concrete proposals here as yet, just a proof of concept for layouts and template engines. It would all have to be done the revel way, and I'm just feeling out what that is right now. \nI probably should have done this as a mail to the list at this stage Rob, and sorry for putting so many changes (and some potentially controversial) together for you to review, I realise when actually submitting it would be better to tackle all of this in small chunks and gradually and docs/tests are important too for each change. We could start with just mustache handling in template loader if you like, or something smaller to work up to that? \n. No problem, I will only be able to work sporadically on it too.\n. Hi Rob, thanks for the comments. Just one thing to note:\n\nAlso, Mustache the template language does not have the concept of a \"layout\", afaik. \nThat was the idea of the specific implementor here \n\nIn my toy example I wasn't actually using the concept of Mustache layouts at all (or indeed relying on layout support in the template engines) - as I wanted to handle them in a general way whatever the template engine, just by using its simple render function (this is how it can also handle layouts in the go templates, without explicit layout support) - I thought it better to keep this general so that any template adapter just needs to provide a t.Render function and possibly RenderInString (though that's not really required). However these are separate issues, and support for mustache doesn't require support for layouts or a changed c.Render function at all, and support for layouts could leave your existing c.Render function alone (need to think on how that would work). I see why this mixup might have occurred as I used the name 'RenderInLayout' for the new method, but it's unrelated to mustache or the internals of that particular implementation, it works on any template inc. go html/template ones. Sorry for mixing up the changes here and putting in unnecessary little changes which was doubtless a bit confusing. \nSo, from the above it looks like you'd like to focus on a more general template loader first, which handles mustache and text/template as well as go template, so I'll look at that first - I won't get to it until the weekend I don't think as I am also very busy at the moment, and it might take a week or two but I'll see if I can come up with something which is minimally disruptive and takes in your points above in a prototype pull request, without any layout or render function changes. I'll rename this ticket to match.  I will only look at adding template adapters, with the changes suggested above. \n\nreturn loader.templates[name]\n\nIndeed! This function probably isn't required at all now... thanks for pointing that out. \n. I was planning to work on this but paid work this summer has since\nintervened, so please do give it a go based on this discussion with Rob, as\nmy work has now stalled on this.\nOn Fri, Oct 11, 2013 at 5:18 PM, Philip Feairheller \nnotifications@github.com wrote:\n\nIs anyone actively working on alternate template engine support?\nI'd be willing to give it a try as I'm about to embark on a project using\nRevel, and would like to use Mustache (as a supported template engine).\nOne thought I had was to take the Rails approach, and resolve the template\nengine based on extension. So, allow additional (supplied or contributed)\ntemplate engines to be added in app.conf, and have Revel attempt to find\nnot only a matching view for the given controller action, but also search\nfor any file that matches the configured template engines.\n*.html would default to Go templates as it does today (by convention, I\nthink). So for the controller action App.Index, if App/Index.html exists,\nit is rendered as a Go template, if App/Index.html.mustache exists, it\nwould be resolved and rendered as a Mustache template instead, as long as\nthe Mustache Engine was enabled.\nPrecedence rules would have to be established, of course.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/99#issuecomment-26150283\n.\n. \n",
    "pfeairheller": "Is anyone actively working on alternate template engine support?\nI'd be willing to give it a try as I'm about to embark on a project using Revel, and would like to use Mustache (as a supported template engine).\nOne thought I had was to take the Rails approach, and resolve the template engine based on extension.  So, allow additional (supplied or contributed) template engines to be added in app.conf, and have Revel attempt to find not only a matching view for the given controller action, but also search for any file that matches the configured template engines.\n*.html would default to Go templates as it does today (by convention, I think).  So for the controller action App.Index, if App/Index.html exists, it is rendered as a Go template, if App/Index.html.mustache exists, it would be resolved and rendered as a Mustache template instead, as long as the Mustache Engine was enabled.\nPrecedence rules would have to be established, of course.\n. ",
    "landaire": "Could this be marked as closed as of bd6236c676255928b889d4a72804762734dc38b3?\n. Pluggable parser sounds good, but how would one tell Revel what to use? We can't put that in the app.conf file, because that would be contradictory.\n. I created a module for this. It's tricky because the net/http/pprof package makes up its own routes. I think that for a proper module, one would have to copy what the Go authors did in net/http/pprof.go. I'll do that later, but for now check out this testing branch: landr0id/feature/pprof-testing.\nI modified the booking app to load the module, so if you visit /pprof or go tool pprof <binary> http://localhost:9000, you'll be in business.\n. I was going to take a shot at this, but wanted to discuss the implementation. Having something like GET /jobs/ module:jobs would imply that all routes from the jobs module would use the GET method. Should the method be omitted, or a keyword used in its place? Something like MODULE?\n. I like the sound of BASE. It may add to confusion, but another idea I had is that perhaps the wildcard * can be used?\n. Sorry about that comment. Forgot to run go test ... and ran into an issue so I had to pull the commit. Pull request incoming!\n. I was able to reproduce this by just sticking the following in the Booking sample's Booking model validation:\nstart, _ := time.Parse(\"15:04\", \"09:00\")\nend, _ := time.Parse(\"15:04\", \"08:00\")\nv.Required(start.Before(end)).\n    Key(\"booking.NameOnCardfasdfasdf\").\n    Message(\"bad stuff happened\")\nChanged the error message to hint at a bad key and removed the logging statement which causes the huge output.\n. @brendensoares because it wasn't anything major I just pushed it to the develop branch. See the commit here\n. Should this be done in the app.conf file? I feel like we should allow arbitrary headers to be set, which isn't possible with Rob's config package because the data map[string]map[string]*tValue member isn't public. As @insasho suggested, maybe the parameters to the method would be better?\n. I agree with @pushrax. Since constants need to be defined at compile-time, how would we read the value out of the file so that we can make it const? Autogenerated .go file when running the revel build command (underlying function really)?\n. @robfig I think that would be perfect!\n. For sure. My bad.\n. @brendensoares I'm sure you got a notification of it, but see #422 for the updated request.\n. @brendensoares remind me to explain to you in IRC my debugging experience tonight...\n. The Email struct is defined as such:\ntype Match struct {\n     Regexp *regexp.Regexp\n}\ntype Email struct {\n    Match\n}\nIf you use revel.Email{} without setting the Regexp field then the pointer will remain nil. You can work around this by using the following:\nv.Email(user.Username) on a newline\nor\nemailPattern := regexp.MustCompile(\"[\\\\w!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[\\\\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\\\\w](?:[\\\\w-]*[\\\\w])?\\\\.)+[a-zA-Z0-9](?:[\\\\w-]*[\\\\w])?\")\nrevel.Email{revel.Match{emailPattern}}, // <-- this in v.Check\nThat regex comes from validators.go.\n@robfig or @brendensoares, should there be a function to initialize the struct or should the emailPattern var be made public to allow for checking like @qubic has done without having to copy the regex between models/projects?\n. @brendensoares I've started a new issue for this: #426\n. @brendensoares I've added the README file.\n. I was considering a couple of options for implementing methods after reading your response. \n1. Would be to have methods for everything (like I said int he main post\n2. Would be to have methods for everything and remove the struct equivalent of those which would not have defaults set; because you're right! Defaults for lengths/numerical values don't make sense.\n3. Only a method for Email{}, optionally making the struct private. There are a couple of different ways this one could be implemented, like passing the nil pointer like I suggested above resulting in the default value. I feel like if you aren't going to use the default emailPattern regex, then you might as well be using Match{}. The only reason not to use Match{} is because the DefaultMethod() is different.\nI don't know, just tossing out ideas.\nRegarding namespaces: When you say, \"which is a path we're considering taking,\" is there another ticket somewhere that this was discussed?\n. I agree. I'd be more than willing to write a patch for this if you'd like or I could wait until Rob weighs in his thoughts.\n. @robfig I actually examined the validators.go package and there's nothing being referenced from the overall Revel package! Everything it uses is contained in that file. Not so sure about validation.go however. I'll get a patch put together sometime tonight or tomorrow. \n. Yes, that's what we discussed before I ran off and did some things. I should have that patch up sometime tonight, assuming my night goes as planned. I'll get on IRC tonight as well\n. Because it's declared as type Email struct { Match }, it implements Match, which does have that method.\n. Yep!\n. Done.\n. @brendensoares I did not see that section! Thanks for pointing that out. Besides the above, nothing else. And yes, I did make the reddit post.\n@robfig thanks for the input as well. I think that just about settles my questions/comments then!\n. The markdown stuff sounds great, @verdverm.  It would be great if we could get a blog of some kind and then the docs wiki-like. I totally agree with the above.\nAs far as naming goes I almost want to say \"revelframework\" simply because I don't think that the idea should be centralized around Go, but rather the framework itself. The amount of apps and libs which use the go* naming convention I feel is pretty ridiculous. \n. Is this on top of my change yesterday? Because yesterday I added a change to ensure that the .git directory exists. The command should also work with the given parameters...\n@wdreeveii could you provide a little bit of clarification on this, and maybe a proper PR so we can visually see what's changed?\n. @pushrax @brendensoares I see, that makes sense. Should we instead check the error code returned from the git command? And yeah if I'm understanding the code @wdreeveii posted, the working directory would still be the same as revel.BasePath.\n. Note this PR is actually doing two different changes and should probably be two different PRs.\nI think the method should instead pass --git-dir instead of changing the working directory. Thoughts? Are there any situations where we wouldn't want to be in the BasePath directory, or should the app change directory earlier on?\nRelated: e14115760e and #525.\n. @wdreeveii different branches for each fix :)\nIf the contributing file doesn't cover this already, that should probably be updated with workflow tips. No worries though. We appreciate the PR because it sparks discussion and can lead to more, better changes!\n. Should the branch be named \"patch\" or hotfix though? Hotfix for some reason sounds more descriptive to me that it's intended for things that are critically broken in the current release and shouldn't be held off for very long.\nAs far as discussions go, I like GH issues simply because I'm more familiar GH than I am with maintaining a presence on mailing lists.\nOn Wed, Feb 26, 2014 at 10:40 AM, Tony Worm notifications@github.com\nwrote:\n\nAll sounds good to me\nOn Feb 26, 2014 1:37 PM, \"Justin Li\" notifications@github.com wrote:\n\nA few things:\nLet's follow semver http://semver.org/ (major.minor.patch). With that\nterminology in mind, we can create a patch branch, and have bugfixes\ntarget that branch. Every once in a while (depending on necessity), we can\nmerge patch into master and rebase develop.\nI think GH issues are fine for this kind of discussion, but I don't have a\nstrong opinion either way.\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/530#issuecomment-36160477\n.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/revel/revel/issues/530#issuecomment-36160833\n. Huh, not sure how I let that typo slip through. I say all releases should be tagged.\n. #529 could be included. \n. Thanks for reporting this. This is related to the move to the revel.github.io repo instead if having the gh-pages branch.\n. I've created an issue for this in the other repo. Again, thanks for reporting.\n. Thanks for the input guys. @jcvernaleo I totally agree that less validation is better. I know that it always makes me slightly annoyed when I can't sign up for a website with username+service@gmail.com.\n. Email{} wouldn't change, since revel's regex by default is private. Instead, the helper method (ValidEmail()) would need to be modified.\n. I don't think I'm following. The only way to use the Email struct through direct initialization is to provide your own regex, so why change the name?\n. I believe that when I was discussing it with Brenden, the controller context params (c.Params) doesn't have the the values unless they're explicitly passed. I'll have to go back and look.\n. Note these changes still need to be merged into develop.\n. @pushrax my mistake :)\nCarry on.\n. Not sure about templates, but contributor ready was helpful for me when I initially started contributing because I knew there would be input from either you or Rob about how you'd like it implemented.\n. The routes would be named in the routes file, yes. I like the way way you propose as well. I'll add the documentation for the last feature I added soon.\n. @ianonavy glad to hear that! No work done right now by me or anyone else as far as I know of. If you have any questions, feel free to hop on IRC and ask us anything.\n. > is a valid route and incorrectly matches the fixed param \"public\"\n\n\nCould you elaborate on this? The way you have that set up, a GET request made to /javascript/{path/filename} would serve any file under public/js/{path/filename}. Is that not your result? I'm not seeing the issue otherwise.\n. That probably should throw an error. Good catch. That may deserve an issue of its own, however it is very related.\n. I just looked at the regex. Shouldn't have done that haha. I feel like it can be simplified... Look at capture groups 2 and 3: http://regex101.com/r/uT6dB2.\nWhy do you think we can't match parens though? See: http://regex101.com/r/gD3cG8\nI was working on this comment when you posted yours, but I think it still applies. Maybe I'm missing something but I think a finite state machine overcomplicates things.\nReviewing your code a little more, I definitely think it's overcomplicating things. Why use a state machine? We only need to match any of the following:\nmodule:<MODULE_NAME>\nOR\n<METHOD>           <PATH>         <CONTROLLER>.<ACTION><OPTIONAL:>(<PARAMS>)</OPTIONAL>\nMy above regex (second link) is wrong in assuming strings -- the quote literals can be omitted resulting in (?P<Controller>\\w+)\\.(?P<Action>\\w+)(?:\\((?P<FixedArgs>.*)\\))?\n. No worries :)\nI do think however that the regex we currently have is way too complex and could be simplified.\n. go test -bench . github.com/revel/revel\n. Since we're starting to get off topic, let's continue this discussion in #619 \n. Looks like a command line tools problem. See this Stack Overflow question. Apple did some weird stuff with Xcode 5 and the related command line tools.\n. @verdverm I don't think those changes would trigger a recompile of the dependencies, would they? Modifying these files currently triggers an app recompile, but it doesn't trigger a dependency recompile in addition.\nWatcher sees changes in app/pkgs dir > go build or go install -- whatever -- for those dependencies > app rebuild\n. I was actually dead wrong about Revel not building my code with my current setup (oops, I must not have been paying attention because of the need to recompile to get code completion in the project using Sublime), but having assets in other directories being rebuilt I feel would also be a great addition for speeding up development.\nIs what you're suggesting though a revision of #153?\n. I don't know why I didn't try using template.JS... That was kind of obvious, and solves the problem for both JS/HTML contexts. I'll write a patch here soon.\n. I've been wanting to propose this as well. routes.go I'm guessing doesn't work because of the import path?\n. Looks good. Very nice improvement.\n. Not too sure what intercept_test.go:79 is supposed to be... Dumping the struct with %v? Or is it supposed to be a field?\n. @revel/core anyone have any ideas about my last comment?\n. Here's the documentation on it: godoc\n. Pretty sure we made some change to the error message. 317a19309\n. Mad props! Great implementation and pull request overall. I'm just curious though, why go with a UUID instead of using a SHA hash or something among those lines?\n. Now it is :)\n. That's always been a problem. I don't recall why though.\n. It'd be nice to retain compatibility but I don't think that should be too large of a concern. We haven't yet released v1.0, so it should be assumed things will break. \n. I may be able to do some searching around tonight, if not closer to the weekend.\n. So here's what I found earlier today just by searching \"revel\" with the Go language filter on GitHub:\nBlog apps\nhttps://github.com/jgraham909/bloggo\nhttps://github.com/mischief/airplane\nhttps://github.com/taddev/revelBlog\nhttps://github.com/alexfish/blog\nOther\nhttps://github.com/lidashuang/webchat (different chat sample)\nhttps://github.com/cryptix/revelTodo (todo app)\nhttps://github.com/cfrco/revel_gbook (no freaking idea what this is to be honest but it says \"demo app\" which is a better description than most other things)\nhttps://github.com/ottemo/web-server (some API for getting models?)\nhttps://github.com/TheTree/Trunk (@iBotPeaches may be able to provide details).\nand my site (http://landaire.net/projects), which is kind of interesting I guess because it has a couple of crappy APIs (ID3/xval) which I could open source after some cleaning up.\n. I like this idea, except where would they be hosted?\n. I agree! Better error messages would definitely be better. Just from looking at the code (to anyone reading this out of context of the last discussion: https://github.com/ianonavy/revel/commit/a9caab35b861e690260b96fcf99af4abebb4a4a9) I can identify a couple of issues.\nThe regex was helpful for ignoring lines (comments included), and with your implementation you could not have parens inside of arguments. It also assumes that parens will always be present, which isn't the current case.\nMaybe it's just me, but ditching the routes file and going with an actual structured format that's common. I keep pushing YAML, because I really like YAML.\nFor instance...\n```\n- method: GET\n  path: /test/blahblah\n  controller: Application\n  method: Index\n  params: [\"blah\", 2, 3 \"asdfasdf\"]\n\n\nmethod: POST\n  path: /test/blahblah\n  controller: Application\n  method: CreateNewResource\n  params: [\"blah\", 2, 3 \"asdfasdf\"]\n\n\nmodule: some_module\n  prefix: /module/prefix\n```\n\n\nIt's a lot more to write, but it's more obvious what's what and makes it extremely easy to add things while retaining backwards compatibility.\nedit: this would also open us up to a pluggable route loader if people don't like the way our routes file is by default.\n. > It actually doesn't assume that parens are always present. If there are no parens, the FSM exits in the IN_ACTION state.\nI forgot about the range iteration forcing the loop to break. For some reason I saw the DONE constant and assumed before reading all the way that it broke the loop there. Doing too many things at once :).\nBut yeah, I don't know. Adding all sorts of exceptions to the rule and getting weird with it just doesn't seem right to me. I learned a few things from your commit though! For example, I had no idea that strings.Fields existed. I just think that if anyone else new to the way routes are parsed wanted to make a contribution to it they'd take one look and think, \"What the hell are these constants? What the hell is this loop? Where should I put my code..?\".\n@revel/core thoughts about ditching the current routes parsing?\n. My second method in the sample was supposed to be \"action\". Whoops! I'm at the gym right now but I'll take a better look when I get home. Why include the top-level \"routes:\" though?\n. Cool! Question about this though: static_file: public/img/favicon.png. Wouldn't this mean that it's Revel's job to do static serving instead of the static module? Why change it up from:\naction: Static.Serve\nparams: [\"public/img\", \"favicon.ico\"] # <--- this is a little awkward though\n. So here's what I came up with: https://github.com/landr0id/revel/commit/58ccbad02be431df2a161a8622dc9a5f3a8f140d\nThe only issue is that when there's a parsing error, the router will pass a long a line number in the file that's problematic. Using an external parser which doesn't return line numbers except for errors is just fine -- we can use pattern matching/substrings to get the line number (see https://github.com/landr0id/revel/commit/d122a64654bf2ce7a3e4c65cb1ed704f67407c9c#diff-56c3bb2da6c5ecf6872e89a554944453R171 which I don't think works properly because I wrote/tested it on the bus).\nThe only problem arises when there's an error in matching the method (that's a TODO since I didn't realize I didn't implement it) or there's a key missing, that is not a YAML problem and we cannot easily get a line number.\n. Don't think anyone has started work on something like this. Funny enough though, I was considering this just last week.\nThis would be a welcome contribution and would definitely make for a good module.\n. I like approach 1. As you said, with approach 1 you or someone else can easily implement approach 2. However if you're already making a add the template func, it wouldn't be much extra work to add a controller either.\n. I like this idea. Would this possibly allow us to remove some of the magic that is the controller.Render method? It currently assumes a template to be named the same as an action in the /views/ dir.\n. Your question is pretty vague as far as what you have set up, tried, etc.\nPlease see this documentation on routing, and this documentation on results (specifically the Render section).\nI'm not sure if you're asking how to make your action return either of the two, or one in particular.\n. This should be something done by nginx/Apache, not the framework. I see how it adds value to be able to view it in your dev environment as well, so if you really want it I'd suggest extending the Static module as Brenden mentioned for that.\n. Personally, I think INI is a crappy format and YAML should be used instead. It would definitely clean up some things with the current config structure. For example:\napp.name=Facebook OAuth2\napp.secret=ly2bgKNgQ7BSoWW8BZ33Tos9Z9hy2Ck6bFXotLxwSaXk60iXPqlZUKnJpGVoIHhs\nmodule.static=github.com/revel/revel/modules/static\nmodule.testrunner=github.com/revel/revel/modules/testrunner\nmode.dev=true\nCould change to:\napp:\n    name: Facebook OAuth2\n    secret: ly2bgKNgQ7BSoWW8BZ33Tos9Z9hy2Ck6bFXotLxwSaXk60iXPqlZUKnJpGVoIHhs\nmodules:\n    - { name: static, import: github.com/revel/revel/modules/static }\n    - { name: testrunner, import: github.com/revel/revel/modules/testrunner}\n. I'm going to reopen this issue for more discussion on the implementation. It's clear that not everyone likes YAML, and that's fine. This just means that the implementation should be abstract and just use a decoder conforming to the encoding/TextUnmarshaller interface, chosen depending on the file extension.\nOut of the box supported encodings:\n- toml (https://github.com/BurntSushi/toml). toml in particular is very similar to what we have now but is well-defined and actually has structure instead of being 2 levels.\n- JSON (encoding/json)\n- XML (encoding/xml)\n- YAML (https://github.com/go-yaml/yaml)\nThe implementation (somewhat pseudocode):\n``` go\ntype UnmarshalFunc func(data []byte, v interface{}) error\n...\nunmarshallers := map[string]UnmarshalFunc {\n    \"toml\": toml.Unmarshal,\n    \"json\": json.Unmarshal,\n    \"yaml\": yaml.Unmarshal,\n    // etc.\n}\nvar unmarshaller TextUnmarshaller\nfor extension, extensionUnmarshaller := range x {\n    if _, err := os.Stat(fmt.Sprintf(\"conf/config.%s\", extension)); err == nil {\n        unmarshaller = extensionUnmarshaller \n    }\n}\n// go about unmarshalling\n```\nThis is not going to be backwards-compatibile. The old app.conf files will no longer be used in favor of toml by default. The revel.Config API I don't think has to change, but additional types could be supported such as dates, arrays, and map[string]interface.\nOne thing that's supported in with the current config is environment variables, which wouldn't be that difficult to add in. If it's a string value that matches the current env var pattern, treat it as such. If it matches the pattern but is not intended to be an env var, escape the $ with a backslash and it will be stripped. The following booking config would look like this:\n``` toml\nApplication\n[app]\nname = \"Booking example\"\nsecret = \"secret\"\nServer\n[http]\naddr = \"\"\nport = 9000\nssl = false\nsslcert = \"\"\nsslkey = \"\"\nLogging\n[log.trace]\noutput = \"stderr\"\nprefix = \"TRACE \"\n[log.info]\noutput = \"stderr\"\nprefix = \"INFO \"\n[log.warn]\noutput = \"stderr\"\nprefix = \"WARN \"\n[log.error]\noutput = \"stderr\"\nprefix = \"ERROR \"\n[database]\nimport = \"github.com/mattn/go-sqlite3\"\ndriver = \"sqlite3\"\nspec   = \":memory:\"\n[build]\ntags = \"gorp\"\n[modules]\njobs = \"github.com/revel/revel/modules/jobs\"\nstatic = \"github.com/revel/revel/modules/static\"\n[env.dev]\ndebug = true\nwatch = true\n    [env.dev.extended.modules] # Anything in the \"extended\" key would be merged with its global config above if and only if they are of the same type\n        testrunner = \"github.com/revel/revel/modules/testrunner\"\n[env.prod]\nwatch = false\nmodule.testrunner = \"\"\n[env.dev.extended.log.trace]\noutput = \"off\"\n[env.dev.extended.log.info]\noutput = \"off\"\n[env.dev.extended.log.warn]\noutput = \"off\"\n[env.dev.extended.log.error]\noutput = \"off\"\n```\nAnd in JSON that looks like:\njson\n{\n  \"app\": {\n    \"name\": \"Booking example\",\n    \"secret\": \"secret\"\n  },\n  \"http\": {\n    \"addr\": \"\",\n    \"port\": 9000,\n    \"ssl\": false,\n    \"sslcert\": \"\",\n    \"sslkey\": \"\"\n  },\n  \"log\": {\n    \"trace\": {\n      \"output\": \"stderr\",\n      \"prefix\": \"TRACE \"\n    },\n    \"info\": {\n      \"output\": \"stderr\",\n      \"prefix\": \"INFO \"\n    },\n    \"warn\": {\n      \"output\": \"stderr\",\n      \"prefix\": \"WARN \"\n    },\n    \"error\": {\n      \"output\": \"stderr\",\n      \"prefix\": \"ERROR \"\n    }\n  },\n  \"database\": {\n    \"import\": \"github.com/mattn/go-sqlite3\",\n    \"driver\": \"sqlite3\",\n    \"spec\": \":memory:\"\n  },\n  \"build\": {\n    \"tags\": \"gorp\"\n  },\n  \"modules\": {\n    \"jobs\": \"github.com/revel/revel/modules/jobs\",\n    \"static\": \"github.com/revel/revel/modules/static\"\n  },\n  \"env\": {\n    \"dev\": {\n      \"debug\": true,\n      \"watch\": true,\n      \"extended\": {\n        \"modules\": {\n          \"testrunner\": \"github.com/revel/revel/modules/testrunner\"\n        },\n        \"log\": {\n          \"trace\": {\n            \"output\": \"off\"\n          },\n          \"info\": {\n            \"output\": \"off\"\n          },\n          \"warn\": {\n            \"output\": \"off\"\n          },\n          \"error\": {\n            \"output\": \"off\"\n          }\n        }\n      }\n    },\n    \"prod\": {\n      \"watch\": false,\n      \"module.testrunner\": \"\"\n    }\n  }\n}\nYAML:\n``` yaml\napp: \n    name: \"Booking example\"\n    secret: \"secret\"\n  http: \n    addr: \"\"\n    port: 9000\n    ssl: false\n    sslcert: \"\"\n    sslkey: \"\"\n  log: \n    trace: \n      output: \"stderr\"\n      prefix: \"TRACE \"\n    info: \n      output: \"stderr\"\n      prefix: \"INFO \"\n    warn: \n      output: \"stderr\"\n      prefix: \"WARN \"\n    error: \n      output: \"stderr\"\n      prefix: \"ERROR \"\n  database: \n    import: \"github.com/mattn/go-sqlite3\"\n    driver: \"sqlite3\"\n    spec: \":memory:\"\n  build: \n    tags: \"gorp\"\n  modules: \n    jobs: \"github.com/revel/revel/modules/jobs\"\n    static: \"github.com/revel/revel/modules/static\"\n  env: \n    dev: \n      debug: true\n      watch: true\n      extended: \n        modules: \n          testrunner: \"github.com/revel/revel/modules/testrunner\"\n        log: \n          trace: \n            output: \"off\"\n          info: \n            output: \"off\"\n          warn: \n            output: \"off\"\n          error: \n            output: \"off\"\n    prod: \n      watch: false\n      module.testrunner: \"\"\n```\n. I was thinking about includes/imports as well. Just need to find a good way to implement it. I'm currently on a trip to Seattle riding passenger with my laptop and started on part of it already, so I may be able to get this done by the time I arrive.\n. yeeeeeaaaaaahhhhh I worked on it on my way to Seattle that one time and haven't touched it since.\nhttps://gist.github.com/landaire/0a1efe7738f5defd990f\n. I don't think this should be something enabled by default. I can see it invoking some weird behavior for someone unknowingly down the line if it's not properly documented.\n. static sounds good.\n. I'm playing catch-up slowly but surely! Brenden I'd be willing to take on the task of moving toward a YAML-based config by default. I already have most of it done anyways (see: https://github.com/landaire/revel/compare/landaire:8ae827ea065ac9e1e8fcdc8a8a4e453a438869c5...6aa848b8079dbcd9e2377f3fbb53900e19302454)\n. This is my main beef with Revel right now as well... I'd be much more satisfied with it if we had a standardized authentication interface.\n. How did this cause a vulnerability? I thought that #503 was fixed a long time ago.\n. Unfortunately I'm not able to be nearly as active as I once was which is quite obvious now. Work/school/personal life got too busy.\n. path.Join unfortunately cannot be used here because it calls the path.Clean method, which will remove any trailing slashes or multi-slashes (/////).\n. That would be the result of me hitting CMD + Z one too many times for running tests. I'll fix that tonight.\nOn Sat, May 17, 2014 at 3:28 PM, Brenden Soares notifications@github.com\nwrote:\n\n\n@@ -75,7 +75,7 @@ func testInterceptorController(t *testing.T, appControllerPtr reflect.Value, met\nfunc testInterception(t testing.T, intc Interception, arg reflect.Value) {\n     val := intc.Invoke(arg)\n-    if !val.IsNil() {\n-        t.Errorf(\"Failed (%s): Expected nil got %s\", intc, val)\n-    if val.IsNil() {\n  What happened to the !?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/revel/revel/pull/611/files#r12771115\n. @brendensoares L244 has the typo\n. \n\n",
    "dmitrykakunin": "Some social tools like Google+ use a simple method to get a favicon for external links, fetching http[s]://domain.com/favicon.ico without checking link-tag. \nAlso according Yahoo recommendations developers must put favicon.ico in the root of server: http://developer.yahoo.com/performance/rules.html#favicon\n. I don't have now, but I'll make it in this week and push to you.\n. So, I have looked regexp and made a simple fix.\nThe original regular expression simply didn't has starting/ending marker ^ and $.  Function MatchString() without\nthis markers did a partial match.\nThere is pull request: https://github.com/robfig/revel/pull/489\n. Oh, I'm sorry. I didn't read this instruction. I'll aim to the development branch in the future. Thank you!\n. @anonx thank you for quick response\n. ",
    "DanielHeath": "If it helps, the code is on NFS, so fsnotify is reduced to polling.\n. Each time I re-build ./bin/revel (go build -o bin/revel github.com/robfig/revel/cmd) I can re-run the server once.\n. I think I've figured it out.\nharness.go is dropping environment variables; not sure how. \nBecause my GOPATH is not the system default GOPATH, after the first request things are falling over.\n. ",
    "pedromorgan": "Is this still active ??\nis there an openshift a docker etc ?\n. Maybe RAML fits in here also https://github.com/revel/revel/issues/968. Would it be possible to configure which template engine to use..\nIn my case I would like pongo2 or go_sweetpl\nhttps://github.com/daemonl/go_sweetpl\nBut inheritance is a must !!!!!!!!\n. Template Dream is still open and tagged\n. Olde bug so closing \n. apologies.. but yes .. after rereading .. will fix..\n. Hi @ScruffyProdigy, can you target at develop branch so we can consider for merge TIA. Can someone explain why ?\nSo I can stick on the FAQ \n. Yes apologies, I noticed that later..\nCheck the bottom of http://revel-docs.daffodil.uk.com/manual/faq.html\n. What @tejainece mentioned...\nThe new project should be created in current working directory. Instead it is being created in $GOPATH/src/ directory.\nWhich seems a bit daft to me.\n. Is this issue valid or can it be closed ?\n. related to #474 Evaluate Revel version numbering and package dependencies\n. Having it in a version.txt file file solved a lot \"hell of a lot\" of problem with flightgear... compiling docs, cmake, remote checking etc et all...\nIn the meantime, one possibility for the docs is to use a data file..\nlike\nhttps://github.com/pedromorgan/revel.github.io/blob/pedro/_data/version.yaml\nand appears on the homepage\nhttp://revel-docs.daffodil.uk.com/\n. yes the _data directory is a jekyll feature..\nhttp://jekyllrb.com/docs/datafiles/\nDont think it will work on remote domain, but could be scripted I suppose\nOn 5 January 2015 at 22:17, Brenden Soares notifications@github.com wrote:\n\n@pedromorgan https://github.com/pedromorgan I really like that YAML\nfile idea. Is that a jekyll feature? Can it read from remote domains?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/418#issuecomment-68792171.\n. Here's a snippet from a pylons/py2 application in production, and port in progress to revel.\n\nOne of the pains is adding intercept* \nNote some of these \"requests\" come from\n- LAN  = IP address alows browsing (in building)\n- Public = some controller not need authentication in this case\n- A POST requires authentication etcc\n```\nclass RpcAccountsController(BaseController):\ndef __before__(self):\n    self.auth, self.staffUser = auth.check_session(request, is_staff=True)\n\n\n##======================================================================\n@jsonify\ndef accounts(self):\n\n    payload = dict(success=True, auth=self.auth)\n    if not self.auth:\n        return payload\n\n```\n. Is there a way to \"embed\" the version number in the docs also.. automatically ??\neg latest relase is {{version}} - but that comes automatically from revel source ??\n. is the docs correct here ??\nhttp://revel-docs.daffodil.uk.com/manual/cache.html\n. Can this be made a configuration.. in my case I would like the /@jobs url to be publicly available, as the application inputs are totally driven by cron.jobs and in a public enviroment\nAlso on a side note, it would be great if there was a countdown timers, and a \"now\" timer.. \nand a status page.. to monitor processes.. yes a control panel. but then this leads onto being able to stop restart jobs even add new ones et all ;-)\n. eg\n[dev]\n      jobs.pool = 2\n      jobs.url = /my-control-panel@jobs\n  [prod]\n      jobs.pool = 10\n      jobs.url = 404\n. ok @alkchr I wanna stick your above post in the manual  http://revel.github.io/manual/parameters.html\nis that ok. .snag for me is the pages of app.conf and paramaters need to be on same page .. maybe\n. Can this go into the \"develop\" branch so we can test ?? This is very interesting, ..\nBut how do I use it ? what is the config ?\n. Yes Yes please.. This is what I'm after to use other template engines.. ;-))\n. Closed as https://github.com/revel/revel/pull/1003 is a redesign. Do we need to put this in the FAQ ?\n. I'd stick it in the manual as a quick quide, with some footer links to some externals.. \n. started a page here..\nhttp://revel-docs.daffodil.uk.com/manual/debug.html\nJust need time to check and finish it.. hopefully by the weekend\nOn 5 January 2015 at 22:18, Brenden Soares notifications@github.com wrote:\n\n@pedromorgan https://github.com/pedromorgan that sounds like a good\nidea.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/523#issuecomment-68792264.\n. Am adding all sort of labels now, 2015 styleeeeeeeee ;-)) and close this one its 2015 yipeeeeeee!!!!!!!!\n. I just added these in a night to \"get the picture\".. so afaik there is no harm in nuking some, adding a few like @brendensoares suggested above, et all...\n\nAlso we must bear in mind that a more than one label for a bug, eg controller+template as some of these issues crossover.. \n. It would be handy if you pinged me when on IRC \n. I'm closing this for now, Seems revel has grown up a bit and this is not good practise..\nPlease repoen\n. So i need for my next project to create a single executable, images, css et all ... in one..(idea is to run on Raspberry Pi's in a lab, around 20 of them as simple info screens)\nI notice that revel package my/app creates an exectable, and also the whole source directory.. and revel directories....\nWould go-bindata solve this problem ??\nhttps://github.com/jteeuwen/go-bindata\n. This will probably solve my problem with working on \"jobs related code\", ie not http stuff..\n. Can I close this issue.. seems to me this lot is now in revel ;-)\n. Where are we now with this..\nI think there are inbuilt packages/modules eg jobs, testrunner\nand then third party\n?\nits a config issue ??\nhttp://revel-docs.daffodil.uk.com/manual/modules.html\nand a manual for others..  \nmaybe we need revel create mod to do that ?\n. This is a sill issue, around naming convention..\nSo renderArgs works, cos u are rendering a html out\nit also works with pdf, with rendering a page,\neven rendering an svg..\nThe idea is that stuff is passed onto something to \"render\" it.. \nnow views/ is what seome people call it templates/ another et all..\nSo on that note, I wanna close it.. cos I dont see any point in this debate..\n. Who's gonna shit and get off the pot ? ;-). xref in docs https://github.com/revel/revel.github.io/pull/114/commits/422c9278cb26108a053babab60109ddaa0ed99ab. me also\n. I am well into this.. as reverse Gen of the docs.. ;-))))))))))))\n. Have done a bit more research and this leads me to\nhttps://github.com/revel/revel/blob/master/modules/jobs/app/controllers/status.go#L14\nAlso on the main page it manual/jobs page it says\nhttp://revel.github.io/manual/jobs.html\n     \"For security purposes, the status page is restricted to requests that originate from 127.0.0.1.\"\nin fact the code also checks for \"X-Forwarded-For\" ?? whats that ??\nCan this be made a configuration.. in my case I would like the /@jobs url to be publicly available, as the application inputs are totally driven by cron.jobs and in a public enviroment\nAlso on a side note, it would be great if there was a countdown timers, and a \"now\" timer.. \nand a status page..  to monitor processes.. bit more like supervisor.. but then this leads onto being able to stop restart jobs even add new ones et all ;-)\n. can me make it case insensitve the whole of the \"keys/section\"\neg\n[default]\n[Default]\n[deFaulT]\nThis would work in concert with the templating people..\nand everything else in every other system..\nOn 1 August 2014 11:08, anonx notifications@github.com wrote:\n\nUse [DEFAULT] not [default].\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/655#issuecomment-50868850.\n. There is nothing reserved about default..\n\nSticking [DEFAULT] on top of page is nothings..\nAnyway I file a new bug about a new concept..\nMaybe revel get the config of configs once and for all.. and a cunning plan..\n. Yes, on my flavour [default] or alike is required..\nie an ini file format\nProblem is python is too stubborn..\n. What branch should I be using for cutting edge ??\nIf irc.freenode.net#revel alive\nOn 4 July 2014 16:53, Justin Li notifications@github.com wrote:\n\nMay be due to the leak fixed in develop.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/657#issuecomment-48057871.\n. So is this possible ? Do we fix pathtree, or simpy copy the code and make it \"embeded\"..\n\nThis is \"show stopper\" for me, wanting to migrate and application\n. Sometimes this is required, both for dev and indeed \"serving\"..\nWhat revel offers as an end user is an out of the box application, with no nginx, apache et all.. its \"is the webserver\", so for that reason, we need to accomodate imho.. \n. BTW in my case, its golang compiled on a rasperbrry pi, and being part of the \"FlightGear\" flight sim, so I need to use revel to in the background, speak udp at 25hz, radar at around 5 secons with websocket and downloading charts for static serving.. \n. Closing issue as its moot with tags \n. Issue is moot with labels\n. @brendensoares >> \"You know that the app.conf is using the ini format, right? \"\nNot quite, it lacks a [default] or alike section, and is not readable with for example python's confgParser..\nSo this afaik is a \"revel\" format file.. and not an ini \n. see #655 \n. Can't revel accomodate both, ie \n- an ini file having a [default] section is good\n- but not having a [default] section is still ok (still parses into memory) \nThis would definatelly work for me\n. +++1 for yaml definately... (apart from adding comments?)\n. @landaire yes.. thats the idea..\nThe problem is that I need to somehow \"share the config\" with other applications, in my case \n- revel\n- import routines in python\n- generate mapnik db connections\n. Thanks @landaire for the example.. and maybe I can explain...\nHeaven would be able to import or include stuff also.. eg a mad version using yaml and alike..\napp: \n    name: \"Booking example\"\n    secret: \"secret\"\n  http: \n     include \"/path/to/other_file.json#http\n  database:\n     user: import \"/path/to/foo_file.ini#database/user\n     pass: import \"/path/to/foo_file.ini#database/pass\n     database: \"my_db\"\nThe idea here is that:\n- the \"revel config\" is using yaml, a go dev fav\n- the http block is include from a json file and the \"http\" section from a wsgi app\n- the database has an import from an ini file reading the user/pass pair form the \"dbadmin\"\nThe snag I have is that I got so many duplicated \"stuff\", and really I only want one place.. for sharing between applications.. eg\n- the database credentials, and db and stuff in in a mapnik.xml file\n- the superuser details are in the \"application.json\" file, used by python...\n- being able to import or include these values what make life, well heaven...;-)\n. @landaire Have u got a patch for the yaml config\n. This sums it up..\nhttp://i.imgur.com/3uyRWGJ.jpg\n. Can we look at this again,, and either cancel it\nor use something from this..\nWhat we want is to read various configs, and use anything and not be tied to \"revel\" config format..\nSubdomains is a huge ieeue we have to address..\nand is a necessity..\nThis means either messing with new syntax with revel..\nor using a comformant format..\neven we interchange with other apps..\nlets shit, and get off the pot..\nwe allow any format u want..\nand make the config simple... and transportable.. and futurable winth include eta all\n. Can we get to the bottom of the websocket implementation..\n- after all the websocket is a \"native go\" ??\n  and all sort of implemets in the way..\nSo this page is aoutta date..\nhttp://revel-docs.daffodil.uk.com/manual/websockets.html\nand also the api..example\nhttps://github.com/revel/samples/tree/master/chat\nhttp://revel-docs.daffodil.uk.com/samples/chat.html\nWhat we need in teh docs is a few examples, using various sockets.. different api and same smell.. ;-)\nThe websocket thing We need to write well in the manual as to how to \"do it\" = whichever way u want to do it.. This is the killer for revel in 2015\n. Is this not in \"config\" by now ?? \nEg static in revel, nginx, apache3, et all\n. Am closing cos its olde... \n. ++ yaml\nas coments and stuff and config\n. and can we label the documentation the same way, eg new in v.e.r\n. This issue is not resolved..\nWe need to determine how to \"plugin\" third part.. for fun ;-)\nCan we get down to the bottom of this ?\n. See @brendensoares comment above and pluggable template engine . OOPS, posted here instead of GROUP,,, what a tired idiot.. apologies\n. We need to make candidate project live again..\nMake it work in real world,, and shit happens alike..\n. Ok.. maybe I explain why am crazy.....\nThe skeleton apps look like simple concepts..\nand there's loads of blogs and simple stuff.. even slight clever..\nBut we neeed new users, from java, php, django, et all to actually have a serious intentional \nalmost working apps, and we need to promote this..\nThe idea in my head is a new developer maybe both to go as well as revel..\nand \n1) seeing other \"projects\" and now their wired, and starting at a ifiot level\n2) proposing \"help wanted\".. I'm doing this and am stuck.. need a little step up to get me there..\nThats probably what I meant my candidate projects..\nBut anyway.. close this issue.. wasa mad idea.. \n. Is this fixed ? assume it is ?\n. ok this is easy..\nCan i add that revel2..\n. See I dont like this either..\nIt means having two configs..\nThis is a config issue of an user wanting to run same code..\nbut in different \"scenario\"..\neg a test user vs production\nSo this is top of the list how we can accommodate config in the scheme of things..\neg sharing configs between apps also..\nor auto gen in aand out\n. Need to add some stuff to docs about moduiles\ncsrf is a built in module right ?\n. Is the a \"list of features\" that need to be documented so I can have a stab..\n. Am busy atmo, but if someone can gimme a quick rundown of where things are and what to do then it would be helpful..\n. Ok we need to get a grip on this test, and make the booking work...\n. @LorenzV  thanks for the pointers..\nHere's a version for u to review.. am getting familiar with thing and interlinking.. so critisism most welcome\nhttp://revel-docs.daffodil.uk.com/\n. @LorenzV thanks for the feedback..\nRe colors in code samples, were limited really by pygments, and already \"borrowed\" the github-jekyll theme http://revel-docs.daffodil.uk.com/css/jekyll-github.css\nHowever, as i understand it, github has moved away from pygments to another highlighter...  but I agree that it could be nicer.. \n. playing with pygment styles.. feedback appreciated\nhttp://revel-docs.daffodil.uk.com/manual/validation.html\n. @LorenzV - you are more than welcome to come up with a style.. I'm not a designer (and am am colour blind lol)\nMain \"override\" style is http://revel-docs.daffodil.uk.com/css/revel.3.css\n. Yep, pygments is not that good, but it does kinda support htmldjango for templatea and ini files..\nThe alternate I looked at is \"rougr\", http://rouge.jayferd.us/demo but that dont support ini or templates so have not pursued further...\n. at present am using \"htmldjango\" which highlights the html and django\ntemplates, which is thankfully similar\nOn 5 January 2015 at 22:16, Brenden Soares notifications@github.com wrote:\n\n@LorenzV https://github.com/LorenzV I like your changes. I also agree\nwe can progressively improve the style after we update the manual.\n@pedromorgan https://github.com/pedromorgan rouge does seem to support\nini, but not sure how it would render Go templates.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/793#issuecomment-68791920.\n. am well into this idea.. Migrating from jganso = pongo2\nand that is somehwee u do not want to @go@2\n\nand smarty.php dev and also jinjs is nicea and go to after djano nightmare\n. Can I close this issue? \nis this still a problem ?\n. urgent = pongo\nWhats releae cycle..\nCan we do a winodws@me relase\nie f** up everyone,\nand as its it o lang so me call it revel-2016\nand then the gates off hell might open,\nas it runs on windows..\n. Closing as am tagging ;-)\n. We need every RFC on earth..\nwe want everyone one reveling in a mad idea..\neg - can I use postgis with revel..\nlets go for it us nutters,.. \nits 2015.. want more and faster and more dodgy and more updates till its safe..\nBut yes.. RFC..\nmy RFC.. How can i use smarty tempating ?\n. We also need to push features into develop faster.. we need to crash everyone..\n. Want to reopen issue to discuss one issue..\nI think having a seperate Repos for RFC is not a good idea...\nSimply because its not in the \"revel\" project itself, etc.. and imho we dont need a repo for RFC..\nWhat I suggest as an alternative is to\n- add the contributor quideline and to file RFC as issues..\n- But we also ask for some preprep and some some arguments for and against..\n- This would then link to direct patches etc etc..\nWe also want to make it simpler for newbies, who want  an out of the box experience with revel, migratign from python, pdjango, flask, or play and everyother framework..\nFirst question I had from an php designer was .. so the tempaltes is nice, but where do I redirect all .php to no .php or html ?? for example.... ??\nSo Inbuild RFC's would be cool..\n- but we need to stick than infor on the \"website\" == revel + manual etc..\n- we can even make a page in jekyll for listing issues with some js.. etc\nBut my feeling is we nule revel/rfcs and stick em here instead..\nafter reading this\nhttps://github.com/blog/1939-how-github-uses-github-to-document-github\n. @brendensoares Can u merge the develop branch into master ASAP, people are referinging stuff.. and we need to go!!!!!!!!!!!!\nor shall i commit to master myself.. he thinks !!!\n. also yes/no\n@anonx python was in the back of my mind hence my confusion\n. php is similar to python\nhttp://php.net/manual/en/language.types.boolean.php\nWhen converting to boolean, the following values are considered FALSE:\n   the boolean FALSE itself\n   the integer 0 (zero)\n   the float 0.0 (zero)\n   the empty string, and the string \"0\"\n   an array with zero elements\n   an object with zero member variables (PHP 4 only)\n   the special type NULL (including unset variables)\n   SimpleXML objects created from empty tags\n. Ok this is bugging me..\nMainly because I am migrating py/php apps to go ;-)\nSo the check in those domains is\n- prove it false = default stuff\n- or prove its true...\nI prefer the false stuff, as is default, ie 0, none et all\nSo can I suggest we change to @anonx plan and patch..\nIe and also include \"yes\" and \"no\" even in international..\nCertainly non zero values.. in > 0 is abused in php/python, and\nwe can abuse go the same way.. ;-))\nthis would make easier and solve some stuff for legacy apps, \nbut also I thingk imho the way  to go as its more logical im my head\n. We Need a function global function, in psuedo code\nfunc IsTrue(some_val) {\n        case \"false\", \"off\", \"0\", \"\": 0, 0.0 \"nowt\", \"no\":\n           return false\n         default:\n               return  LookupInterNatinal(some_val, LANG_CODE)\n        return true\n}\n. From a practical standpoint..\n- a check box send value and http = \"on  ?\n- a pyqt button is true on false\n- an ajax and javascript would be none\n- a python None is a false\n- a query string in pylons request.params.get(\"foo\") would be none\n- whilst request.params['foo\"] would cKrashz and app in py\n- A $_GET['foo'] in php = false  \nFood for thought..\n\nLegacy Damage\nI think there i no legacy damage in using @anonx suggestion above of oppositing\n. Also am confused what the db module is about ?\nare there any examples ?\nhttp://godoc.org/github.com/revel/revel/modules/db/app\n. Yes booking sample shows sqlite, \nWhat we want is a more proper config, demonstrating mysql, postgres, even mssql ?\nI think what needs clearing up is...\n1) how to do the config and\n2) where should i create connection etc..\n3) how to pass connection around, with multiple database best practise..\nI got this issue with https://github.com/freeflightsim/fg-navdb\nwhere I kinda want to pass a golang db interface around, but allow third party orm etc to inherit above that..\n. Also when does Config and getting variables come into scope ?\nAnd are there triggered to register config changes, eg changing a database config and live switch ??\n. Ok what I want now is revel devel .. ie a switch mode\n. see Revel Devel or revel devel or revel lever\nhttps://github.com/revel/cmd/issues/21\n== lever ==\n. Err am perplexed..\nThe static module is \"build in revel\".. not here\nhttps://github.com/revel/modules\nbut here\nhttps://github.com/revel/revel/tree/master/modules\nSo it means here ??\nhttps://github.com/revel/revel/blob/master/modules/static/app/controllers/static.go#L85\nAlso whats in the back of my head is having the {{static_ver \"/js/foo.js\"}} tags\n. WTF.. Ok so this is version \"next realsase right\"..\nMaybe I better change some of the docs to reflect this now...\nand am switching everything here over to develop..\n. Is this still valid folks ?? \n. actually I explain what the real problem is from flight gear..\nSomething machine readable that aint in code..\nEg python modules have\ninit.py\nand\nVERSION = 5.2\nBut there is one in \"documentation\" land and having to somehow read that file to make the \"version\" of the docs..\nIf it was a simple text file, then one can eat it..\nI am very familiar with this problem as a contributor to\n- smarty - http://www.smarty.net/\n- flightgear - http://api-docs.freeflightsim.org/\n- fgms - making webiste ontop of api http://fgms.freeflightsim.org/\nand many many others..\nsphinx sucks\ngodoc sucks\nmarkdown sucks\ndoxygen is better\njekyll is a blog\nits all a nightmare to pull these things together..\nWhat we actually want is a set of state/api/code/docs generates automatically that are true and correct at the time..\nBut we need some trigger to to make the \"updates happen\", even if its upstream..\neg swapping from go 1.1 to 1.4\nand revel 0.09 to 1.13\nAs long as the versioning runs with the docs, then it whould bestraight forward..\neg a new git tag = 0.23\nand jenkins can read that and go off and compile new set of docs and all..\n. This way we can copy Django which is a good case example..\ndocs.django.com/latest/ << latest stable\ndocs.django.com/next/ << latest dodgy in develop\ndocs.django.com/1.4/ << last stable\ndocs.django.com/1.2/ << before stable\nWe have to guarantee that user can get access to legacy docs as part of the contract\nan working on this concept at\nhttp://revel-docs.daffodil.uk.com/\nIf anyone understands what I'm on about in automating stuff a bit, then please whisper back..\nMaybe we even start to eat dog food.. and make \"revel\"  compile itself.. \n. Infact the best version no is the date..\n2015-01-25T23:00: 07\nThere is no argument then about version.. latest\n. Well yea kinda..\nSnag is that with github.io, we are tied to \"github\" and jekyll etc..\nso for example, I cant create a plugin and do clever \"insecure=true\" things..\nBut in the project, we want do insecure things like reading source files, and making webrequests..\nSo yes, its a gen docs things.. and like httrack we can rsync with some server..\n. Snag with github, is that we cant create in ruby \"with insecure\".. tags..\nEg tags I wanna create are\n{godcs \"cache.NewCache\"}\nor\n{see_also \"controllers,cache,foo#bar\"}\nand clever stuff to do..\nMore I think about it, we should build the revel docs in revel itself.. all\nwe need is some templates\nand a markdown parser.. etc.. wuite simple really..\nAlso this way, I thuink we could integrate the source code, issues etc..\nOn 19 January 2015 at 16:31, Brenden Soares notifications@github.com\nwrote:\n\nDo we want a custom domain for our Github Pages site or do we want a\nGo-based Revel site and then stop using Github Pages?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/857#issuecomment-70521859.\n. Can we bring this to the front please..\n\nBut we need to focus more... and make it work..\nso big questions are..\n1) Where is the \"revel-domain\" gonna be and can we setit up now..\n2) can we have installed revel + python fabric (sorry we need some py cos its simple)\n3) I got it started at\nhttps://github.com/pedromorgan/revel-www\nAt an upper level to that webservice..\nwe needs revel/meta..\nWhich I do not have write access, can clone.. its empty...\nSo perms or a simple read.me would be nice to get started..\nRe revel-www..\nCan i suggest that we create that project.. I can move\nto revel/ so end users can see how revel uses itself ;-)\nwill be fun..\nparticular is we can embed the samples/ in revel also as prefix\n. Need:\n- www.revelframework.com = website + docs\n- test.revelframework.com = next gen website + docs\n- admin.reveltramework.com = admin panel for \"revel\"\n- samples.revelframework.com/*/ = live sample sites\n. Am basically giving up on jekyll, its too restrictive..\nand moving on with https://github.com/pedromorgan/revel-www\ncos its gonna be more fun to make be a devil and make revel work the  way we want..\n. Whose got admin on the revel irc chat.. \ncan we add a revel bot ?\n. Here are some quick thoughts that I'd like to discuss.\nThe goal\nRevel needs to have good docs both in code and the official guide. So the idea is to tie things together a bit more.. and hopefully this way get more contributions from the community. By tie together I mean versions of code, modules, quick starts, deploys et all.\nWe're hitting the limits of jekyll+github which is causing frustration. Since' Revel is a web framework we should host Revel's website with Revel itself (eat our own dog food).\nSo here is my plan.\n1) Dump Jekyll\n\nI started on revel-www https://github.com/pedromorgan/revel-www\n[ ] I need a new repo: revel-docs\n[ ] copy all the md docs into there...\n[ ] get rid of the jekyll stuff.. so it's almost pure markdown\neven in directories/file  such as manual/intro.en.md\n\n\n\n2) Setup the revel app to parse a checkout of the revel-docs git\nhttps://github.com/pedromorgan/revel-www/blob/master/conf/routes#L5\n- navigation is now in YAML files\n- blackfriday md > html is kind of working\n3) Get syntax highlighting working\n\nblackfriday is not working with pygments\ncan't figure out how to parse/use the {%highlight go %} blocks and \"```go\"\n\n4) godoc + versioning\nThe goal is to create git checkouts\na checkout of the revel/revel repo per tag on the local file system\ne.g.:\n- /git_checkouts/revel/0.12/*\n- /git_checkouts/revel/0.13/*\n- /git_checkouts/revel/0.14/*\n- ln -s /git_checkouts/revel/0.12/ /git_checkouts/revel/latest/\nThis way we can parse the files on the fly, instead of creating the files manually.\n5) revel/meta\n\nThe idea of this is to hold an \"index\" of what is what across the project..\n  this includes logos, straplines(what is this? - @brendensoares), maintainers, admins, www_links, et all..\nAll stuff is to be entered here, so a change here, automatically propagates across the system, eg a new version, emergency release notice, new logo.\n\n6) modules/ documentation\n\nA major part of my cunning strategy is to convince the revel team\n  to allow documentation md.files to be in the source.\n[ ] discuss this further\n\nThis is certainly what I think would work with modules in particular and is first target..\nSo the idea is that there would be\n- /modules/jobs/manual.md  the manual entry\n- /modules/jobs/tips.md  the tips and warnings page..\nBearing in mind that a developer can go and change this after a TWeak..\nand is also versioned.. ie to the tag..\nsee #907\nAnyway.. that should make everything, future proof imho..well at least better than now..\nwe can then have fun such as notifications to IRC, a faw bot, live samples\ninternational, and even an automatic self reminder or how olde revel is..\nand UTC timezone fun\nEDIT: cleaned up formatting\n. Can I make a suggestion..\nWhoever is in charge of the IRC,,,\ncan we stick a meeting on there....\nAnd forget PST..\nMake it UTC +/1 diff.. and comment\nWe need to keep irc alive\nand ping me anytime anyones on.. \nsometimes u guys sneak in, whatever tod..\nand all i want is a simple q+a\n. BTW:\nOnce we fire up the revel in revel on revel app..\nwe can can stick these in..  ;-)\n. This is as far as I got with the app idea..\nhttps://github.com/pedromorgan/revel-www\nfree Time, time time time is problem as usual.. ;-(\nOn 5 September 2015 at 22:26, Brenden Soares notifications@github.com\nwrote:\n\n@davidhunter https://github.com/davidhunter contributions are welcome,\nbut the core team needs to work together and in order to do that we need to\ncommunicate effectively and regularly.\n@revel/core https://github.com/orgs/revel/teams/core email\nrevelframework AT gmail with your google account email so I can share a\ncalendar and setup a hangout.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/857#issuecomment-137995361.\n. I started here..\nhttps://github.com/pedromorgan/revelframework.com\n\nWill look at it when i have time.. (its busy season here in Wales)\n. Ok OK.. cool,, but now I realise a mistake, probably my fault..\nSnag is that the remote \"docs compiler\" and jenkins etc,, need the actual source and name..\nSo what would work, after thinking about it..\nname: \"Revel Core\" << name of package\nsource: github.com/revel/revel  <<  location\nversion: 0.1.2 << version no\ndate: 2015-12-24T11.59.59Z << date of version as panic release..\nI know its just but more complicated.. but my python\nfab get_revel failed.. as we need more meta..\nIncidentally modules would be\nname: \"Auth Module\" << name of package\nsource: github.com/revel/modules/foo  <<  location\nversion: 0.1.1 << version no\ndate: 2015-11-24T11.59.59Z << date of version as panic release..\nanyway.. having it in Yaml is fantastic.. or in welsh \n```\n\"bendigedig\" = rejoice and happy\nben di ge dig\nhead dizzy and high\n```\n. The yaml is part of the documentation, and a way to determine what the \"code is\". Eg info on a new module or alike added to the documentation\n. Can we create test for this  and merge ?\n. Can we just merge this to \"dodgy\" and see what happens ??\n. Can u add\nDEFAULT_TIME_FORMAT     = \"15:04\"\nand that would be exactly what I use already..\n. ASAP please\n. The base is this complex build for FG\n- https://gitorious.org/fg/fgmeta/\nBut in our case its much much simpler\n. Yes an all else..\nRevel needs a space like the FG above.. but less complicates..\nHowever it will be machine readable this stuff and core intention.......\nSo please create that as I need it for jenkins..\nExpect all strange scripts and alike..\n. And yes automate stuff is main objective..\n. BTW @brendensoares \nCan we start using revel-determinator.com.domain\nand also very important\nif we got a somainn and some githue and revel@openhsift jenkins\nthen we are laaaughing\nCan we start use domaain splease ?\n. I use fabric a lot..\nIf me mashed up fabric into revel, like travix.yml stlye.. we'd be cool\n. Another example is to map does based on version ,.\nMaybe even a custom command in app. Or added in config...\nBut this is definite what we want..\n. Xref to revel/cmd\nhttps://github.com/revel/cmd/pull/22\n. @anox Yes I like this idea  a lot..\nand then we can use revel cmd proper..\nrevel project # print indo on project I am in\net all..\nWe need it yaml 100% as this allows us to put coments in code..\nWe also need teh app.conf and all pointers in this maybe also..\nThis will work.. \nCan we commit this to develop ?\n. FABRIC = python fabric..\nPlease checkout fabric python docs..\nbut fabically its a \"fabfile.py\" planted in project dir..\nhere#s and example than generated code on remote server and local..\nits a kinda remote RPC.. communicating with remote servers..\nhttps://github.com/freeflightsim/flightgear-docs-project/blob/master/fabfile.py\nSo am already snekaring this into revel.. cos its a cool tool.. and use it all the time..\nWe need to look at some part of fabric such as rebooting remote, re-boot-ploy et all\nWe got the domain alreadty..\nSo can we start kiking up a few revel apps on there,, cos we can and it would be fun ;-)))\n. I dont mind looking after the docs, (when i have time)\nOn 17 March 2015 at 08:02, anonx notifications@github.com wrote:\n\n@notzippy https://github.com/notzippy, I like your idea of\nroles/responsibilities and transparency of expectations & time frames.\nWell, 1 active and 1 inactive team member.\nShould more people be invited? Probably, some active collaborators:\nhttps://github.com/revel/revel/graphs/contributors\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/892#issuecomment-82192689.\n. I have a view on this...\n\nWe need to make revel.support in revel...\nWe need a faq.. powered from example..\na github bugs list.. as an remote api\nbrowse the manual on mobile, tablet or Virtual..\nWe want to get more back from out community and move faster..\nTO achieve this, I think we need to stake more risks with \"develop\" than current..\nand then throw than into a branch called \"next\" = next expected version = testing\nand then into master fast..\nI dont think we need too much of a process, with rfc etc..\n- we can instead achieve the same things in branches, and the\n  new structure of mofules...\nSo from my point of view as the \"docs maintainer\".. and also using \"master\" for projects..\nIs that I want to sync them..\nFirst step would be to please after all this time..\nmerge the \"develop\" NOW into master\nand then I can go and hack away at the \"next\" version coming downstream..\nWe need more community, more throw it all in, and see if it crashes.. and more fun\nrather than the slower \"stable\" approach..\nwere not at 1.0 yet,,\nand end users so  far have their stuff.. (binary or code)\nso we are allowed AFAIK to actually really mess up things..\nand this is what we want..\nmake it crash and a message to upgrade..\nand read the api docs.... (which I maintain.. along with everyone)......\nInfact bump the version, penguin style\nto  0.2.0 or alike.. \nAnyway.. am off to bed..\nand looking forward to hacking away tomorrow morning..\nthe lunar eclipse her in wales starts at\n8.20 am\nPeak - 9.32 am\nand end = 10.32\nLooking forward\n. This needs to be in the \"manual\" and not here, and wip.. and aware of issue, so adding to my todo and closed here.. ta.. ;-)\n. - Buttons on the right side I would really like..\n- Also a row hover, so I can see which line i'm on..\nI also wouldnt mind the whole thing being more compact, with less spacing and smaller fonts, so i can get more on a page\njust my thoughts\n. We need to include a quick \"template starter\" to the docs, its on my TODO list...\n. revel/meta is WIP and soon ....\nBut idea of meta is to basically do as above..\nand pointers to all the repos, and all the tags..\na bit of a go.deps, but in yaml and used to generate www site etc..\nWe also need to look at revel/openshift-buildpack......\nand make a page on platforms it downt run on.. yet eg appengine\n. ALSO, tags make a github Release.. chich could be automated by jenkins..\nAnyone who wants access to my Jenkisn server.. then please email me...\nBut am working towards automation more.. and even using revel-frameworks.com\nand custom plugins and more automation away from github.. (and its limitations)\n. @brendensoares  Can u tag NOW.. modules needs to be 0.12 as I need for api query.. \nSame with docs also.. \n@notzippy has got it right inmho.. particuar if we have to \"emergency fix a release\".. so need to tag everything..\nSomeone mentioned a manifest recently on IRC, can remember who..\nCan we add that to revel/meta \n. Taken an initiative and tagged revel.gh.io ;-)\nFirst time I even done that, its easy when u have perms init.. ;-)))\n. There are many choices.. check here\nhttps://code.google.com/p/go-wiki/wiki/PackageManagementTools\nI've used godeps, but the choice is probably something you have to take\n. Also check gvn, (Go Version Manager). .whilst not a package manager is useful tool \nhttps://github.com/moovweb/gvm\n. Note to self.. add pakacge manager to docs\n. Looks nice...\n. The project is probably not FOSS yet, as there as some dodgy parts..\nWe need to get better at this.. and rock on revel-www in revel..\n. Keep us updated regarding pitfalls good luck on last 10%\n. {% extend \"SomeLAYOUT\" %}\n{% set page = \"hello\" %}\nThankx, here is replay vid below\n\n. Yes please..\n Am migrating jinga2 n smarty\n. Can we keep this open,, for feedback please.. \n. Wheres the pongo version ??\nCan we have a \n- revel/thirdparty\n  and a a sub modules ??\n  eg pongo ? gorm, gorp ?\n. OOps.. didnt intent to create this \n. So this is an interesting read, and does clearup some things as an \"end user\",... \nAnd indeed @notzippy  raises a big issue, which is basically \"compiled with config\" or \"compiled without\" maybe ?\nCan I also add, that within a \"module\", I expect a README.md which \"would be the manual\" for that module (also any other docs in md format\",, \n. Chatted to @brendensoares about this, but its a smimple way to decouple docmentation of aany module next to source..\nAnd that leas to the \n\nrevel mod create adb stuff..\n\nI have an urging feeling to move to yaml, toml and machine readable configs...\n. Qt Seem to have it sussed, and use \"/\" internally.. for all filePath\nand two fucnctions toNativeSeperators(), fromNativeSeperators()\nhttp://doc.qt.io/qt-4.8/qdir.html#fromNativeSeparators\nhttp://doc.qt.io/qt-4.8/qdir.html#toNativeSeparators\n. I just looked at the site, and I cant figure out what its about... or am i missing something ?\n. Can i close this? \n. So whats the problem, simply adding the tls.Config will make it work ?? \n. ?? is this a bug ??\n. Is this a bug ?\n. So which one is \"standards compliant....\" ? \nWhat are the ramifications of a change ?\nsorry for muppet questions...\n. Whaat ??\nU want it builtt in ?\n. https://github.com/revel/revel/issues/1045\n. Is this a bug now or can I close ??\n. I am 20000% henind this...\nLets GO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n. To explain more..\nRevel is a little baby, and now that the the olde condif format has a few issues..\nWe want API and configg of configs..\nAnd the nightmare of \"configs\" for local, dev, p prod.. et all..\nSo I propose we look at this hard.\nSearch for issues of Routing and Config..\nand what I want is the mother of all configs in revel..\neats anything..\nhttps://github.com/revel/revel/search?utf8=%E2%9C%93&q=+config+yaml&type=Issues\nhttps://github.com/revel/revel/issues/680\nSOO.................\nRecently I see RAML, and indeed it sings from my song sheet..\nWith include files , and externals and all..\nLove the idea..\nI think we should implement this asap..\nthe yaml eater, and json eater.. and the false teeth..\n. https://github.com/pksunkara/alpaca/blob/master/README.md\n. Snag we got is that the \"routing in is in .. line format\"..\nBut it worked on some platform which was the start..\nMaybe we create a config-crash-mash repos.....\nSo thro in wll out configs..\nand then eat it..\nchew it over like..\nIts a pinin the ass for me having to kinds manage 3 sets of same\ncredentials and configs in plases..\nI am well into a machine readable format.. that works..\nso I can share the db connection on freeflightsim.org..\nwith\na golang frontend.. in json (coss for internet)\n- but back format was yaml (cos I can add comments\n- then json config for nginx and db\n- and a subdomain in another db..\n- and same app capuring routes et all..\nEven redirects in Yamls and a loader for redirect would be cooll..\nor rewrites for olde.. php/perl and implemeting end pointz..\nOn 27 August 2015 at 23:11, Jan Olszak notifications@github.com wrote:\n\nhttp://raml.org/spec.html\nRAML is \"RESTful API Modeling\", but I guess very small extension to the\nformat could make it useful for routing. I'm no RAML expert though, it may\nbe possible right now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/968#issuecomment-135569239.\n. Whats teh issue here.. are these large files or something ??\n\nIs ita  timeout problem.. \nOr is it parsing didgy URl's etc..?\nMore explain of problem would be useful ..\nta\n. xpbliss.. yo I thought u were a team member.. \nWhat do u want main.. thats not there at the moment ?\n. Is this still not working or is this a bug ??\n. Ok guys we need to nail templating..\nThe main thing we need as a ..\n1) smarty developer.. yes was an early adocpter..\n2) python cos of django jinga2 and inheritance..\n3) back to square one with golang templates\nSo can we push this forward with Pongo.. and for me a smarty3 in templates..\nMain thing.. is inheritance which is what we relly relly want..\nIs there any consensus about how the interface would work..\n. Sorry guys, changes the title to amber templating..\nhttps://github.com/eknkc/amber\nAnd flagging as templating stuff.. \nCertainly on the todo list is \"templateing plugings\"..\nLooking at \nPongo2, Amber et all\nAnd we need some more \"templating parsers\"..\n- as a hardocre origningal Smarty2 Developer in php land of younder year\n- then django\n- then jinja2 = cool\nMain thin is inheritance is what all the olde template designers want.. \n. https://github.com/revel/revel/pull/506 - Support template engine\nhttps://github.com/revel/revel/pull/602 - \n. Explain What u want in a simpler way.. the \"nuts of the problem\"..\nWere looking over horizon with more config stuff...\nSo please explain more of what u want..\nta ;-)\n. Is the idea to move this in revel/modules ??\nOr do we create it as submodule ??\n. I think where revel is headed is towards a more modular approach..\nsee https://github.com/revel/modules\nand the idea soon is to have \"auto documentation\" and stuff for a website at revelframework.com\nSo there are tow possible options for the module..\n1) stick it in the https://github.com/revel/modules repo\n- the assumtion is here that its ther in standard distribution.. and supported..\n2) create it as a submodule\nThis means it would appear as a module.. \nbut be an external repo pointing to https://github.com/jeevatkm/jwtauth\n3) We just add your module to the list ??\nThis project is still a baby and teething problems.. .. suck this dummy.. .... ;-)\n. Ok re the docs, that is something I;m working on..\nThe idea is to have a README.md in your repos.. and then the \"website\" engine will present that as the docs for the manual... \nie as modules are added etc...\nThis is down to @brendensoares and I cant actually check it, cos I never ever used JWT..\nbut it looks goos and assume u put some effort in.. .. any NSA backdoors in there..etc  ?? ;-))\n. Actually what would help is..\n1) fork revel/modules and create branch\n2) stick your stuff in there...\n3) and make it work in revel/modules/ namespace..\n4) then request a merge.. so brendan can click and then we all happy ;-))\n. https://github.com/jeevatkm/jwtauth/issues/3\n. Ok so I'm not a dev so I must confess that.. \nBut what I am after is a REDME.md with the manual ..\nthe idea here is that docs are gen from your code etc..\nfor a taste see what I am upto .. https://github.com/pedromorgan/samples/blob/docs_dev/booking/README.md\nBut your docs are cool anyway.. so dont see any issue really.. ;-)))))\n. Would be handy if it was a \"property\" of the controller though. imho ?? \n. I believe this is possible recent with the virtual/container stuff or something like that..\nhttps://github.com/revel/revel/issues/189\nhttp://jbeckwith.com/2015/05/08/docker-revel-appengine/\n. Quick hack is somethings like...\ngo\nfunc (c App) MyPage() revel.Result {\n    c.RenderArgs[\"filename\"] = \"myfile.html\"\n    return c.Render( c.RenderArgs[\"filename\"] )\n}\n. Should this go into \"revel\" core ?  would be handy IMHO ..\n. Hang on a minit.. does this mean we can have sub dirs of controllers ???\n. Looks good to me..\n. Have u got a small example of this ?.. (thinking about the manual if this is merged)\n. Looks OK 2 md.. Merge it and we suffer...let's move on this is good\n. Maybe we need a \"release candidate\".. \n. @alkchr >> Let me know when you find a void that Revel can fill and help is needed.\nThere are a few, can u help.. simple help would be helpful.. I go some time at last ... \n. And u  first, U need to send me the prorities.. so I can crete stats, and decide plan and update docs et all..\nSo cunning plan is to actually create a \n\"hacker.revelframework.com\" control panel..\nAnd the idea is to create there a \"hot list\" of bugs and issues..\nthat we want done to release and share and have more fun..\nThere are some strange showstoppers, such\nas configs, subdomain, templates, jobs et all..\nI am also emphasising the \"hacker\" part..\nas normal documentation for an \"end user developer\"\nwould be at \"dev.revelframework.com\".. \nmaybe.....\n. Is this a revel/cmd issue ??\n. NO i totally disagree.. All configs are really anstractions of xml, so we might as well use that for safety net and its x platform, human readable,.... haha ;-))))))))))))))))\nBut a plan in future is to use toml, yaml, json, ini, even aham xml.. with idea being to chare configs among apps etc.. \nCheckout the  issues tagged as config ..https://github.com/revel/revel/labels/%23config\n. Is this not in golang as  new \"Vendoring\" ??\n. @peterkellyonline - What's the use case of this (and a code snippet example) ?\n. @peterkellyonline Can you target this at the development branch so we can get closer to merging. TIA.. Please re-open if this is still a problem.. ta ;-)\n. Is this a revel bug ??\n. Is this bug still valid ??\n. ta ;-)\n. So I maintain some of the docs.. and have not got opporunnity to test,,,\nAre u saying that revel serielises to redis+memcache ok and revel not??\nAs I understand in my limited usage.. redis or memcache need data serialised to json or alike for storage, when primitives are not used ??\n. Revel gives u permission to set these vars to your delight... ..\nThe logic needs to be in your code etc.. and do not think this is a revel problem.. are u php and want root url ???\n. Please explain more and an example please... Do not understand problem .. unfortunately..;-(\n. Not sure if this falls within the scope of revel.. \nAre u suggesting processing stuff on the fly? shoulnt this kinda stuff be served statically ?\n. Ok so I get the drift.. its packing siles and js minify and gzip and compress...\nThe only \"realm\" that revel could minify in, in in the compilation of the template,, and not its variables..\nHowever it is interesting to consider dynamic css and build stuff as part of packaging is exiting idea..\nThis also goes along with the \"embedded data\", and having a dev enviroment reading siles, and an executable with all within.. ;-)))\nIn go 1.6 there the {{block}} and the {{foo -}} strip me naked {{-foo}} from other temaplaing languages..\nThe templating and stuff is also kinda in limbo as \n- smarty (confess as developer)\n- django/jinga2\n- golang is a pain in ass.. Am in with pongo2 with there was jinga2\n. If we gonna implemeny minify etc.. then please come up with some more detail, code an even an RFC.. for now I am closing this issue. .and apologies... \n. Hey maybe u can add go 1.4 and 1.5 to the same patch..\n. Dont understand explain more please... ?\n. config issue man.. ;-))\n. its in the app/ directory right ?\nhttp://revel.github.io/manual/appconf.html#watchers\n. Ok we need to work out if symlinks are \"watched\".. and this leads to another isse I want to watching \"paths\".. as not in the while of GOPATH, but externals such as a specific lib... \nWill try and test this when I get some time... this weekend.. \n. Is there a quick way to create a test case for this so I can check here ?? \n. Am not sure what u doing.. is it a symlink in static directory ?? served by revel ??\n. WHAW !!!!! fir time ever on screen play..\nCan u show it on windows-8 as well pelase.. ;-)))))))))\n. Is this a docs or patterns issue ?? \n. Why do we need this ??\nis this a travis or something ??\n. Set watch.routes  to true\nhttp://revel.github.io/manual/appconf.html#watch\n. a golang issues, not revel \n. Are us suggesting a .ext ?? in controller input ??\n. Is this for static, or dynamic ??\n. any ideas how to impelment in \"indistry wide way ??\".\nAm tagging issues so feedback respected.. \n. Ok so this was one of wishes from before..\n963 and #659\n. am closing this for now.. If bug persists please repoen\n. Here's a list, omitting some stuff which don't need docs and self explanitory\n\n[ ] https://godoc.org/github.com/revel/revel#ActionInvoker\n[ ] https://godoc.org/github.com/revel/revel#BindValue\n[ ] https://godoc.org/github.com/revel/revel#CheckInit\n[ ] https://godoc.org/github.com/revel/revel#CompressFilter\n[ ] https://godoc.org/github.com/revel/revel#ContainsString\n[ ] https://godoc.org/github.com/revel/revel#InterceptorFilter\n[ ] https://godoc.org/github.com/revel/revel#ParamsFilter\n[ ] https://godoc.org/github.com/revel/revel#RouterFilter\n[ ] https://godoc.org/github.com/revel/revel#Slug\n[ ] https://godoc.org/github.com/revel/revel#Unbind\n[ ] https://godoc.org/github.com/revel/revel#Controller.RenderError\n[ ] https://godoc.org/github.com/revel/revel#GoTemplate.Content\n[ ] https://godoc.org/github.com/revel/revel#InterceptorMethod\n[ ] https://godoc.org/github.com/revel/revel#ValidMatch\n[ ] https://godoc.org/github.com/revel/revel#Validation.Match. Please refer the \"binder\" in the manual\n\nhttp://revel.github.io/manual/parameters.html\n. New pull request in revel/cmd https://github.com/revel/cmd/pull/69\nSo this can be closed. Is this something we want to do in future ?. Anyone tested this ?. So digging down for curious.. Think its here calcValues/.. Should be called \"parseValues\"\nhttps://github.com/revel/revel/blob/master/params.go#L75\nand probalby here is clash.. as we expect the \"path\" to be set after ALL query stuff etc..\nhttps://github.com/revel/revel/blob/master/params.go#L83\nAnyway, they are sepeate things.. after looking at code..\nBut we HAVE to make this clear\n. ``` csv\nHot Zone\nGET /reveldevil/params                        RevelDevil.ParaHell\nGET /reveldevil/params/:code                  RevelDevil.ParaHell\nGET /reveldevil/params/:code/:hell            RevelDevil.ParaHell\nGET /reveldevil/params/:code/:hell/:haven     RevelDevil.ParaHell\n```\nand the controllers\n```\nfunc (c RevelDevil) ParaHell(code string) revel.Result {\nstuff := make(map[string]interface{})\nstuff[\"0_url=\"] =  c.Request.URL.String()\nstuff[\"1_aqquiring a param named=\"] = \"code\"\nstuff[\"2_revel_params=\"] = c.Params\nstuff[\"3_controller_method_arg=\"] = code\nstuff[\"4_revel_values=\"] = c.Params.Values.Get(\"code\")\nstuff[\"5_raw_query_arg\"] = c.Request.URL.Query().Get(\"code\")\nstuff[\"6_revel_route/:code\"] = c.Params.Route.Get(\"code\")\nstuff[\"7_revel_query?code=\"] = c.Params.Query.Get(\"code\")\n\n\nreturn c.RenderJson(stuff)\n\n}\n```\nresults =\njs\n{\n  \"0_url=\": \"/reveldevil/params/YIPEE/flower?code=xxx\\u0026code=xxx\\u0026code=zzz\",\n  \"1_aqquiring a param named=\": \"code\",\n  \"2_revel_params=\": {\n    \"Values\": {\n      \"code\": [\n        \"xxx\",\n        \"xxx\",\n        \"zzz\",\n        \"YIPEE\"\n      ],\n      \"hell\": [\n        \"flower\"\n      ]\n    },\n    \"Fixed\": null,\n    \"Route\": {\n      \"code\": [\n        \"YIPEE\"\n      ],\n      \"hell\": [\n        \"flower\"\n      ]\n    },\n    \"Query\": {\n      \"code\": [\n        \"xxx\",\n        \"xxx\",\n        \"zzz\"\n      ]\n    },\n    \"Form\": null,\n    \"Files\": null\n  },\n  \"3_controller_method_arg=\": \"xxx\",\n  \"4_revel_values=\": \"xxx\",\n  \"5_raw_query_arg\": \"xxx\",\n  \"6_revel_route/:code\": \"YIPEE\",\n  \"7_revel_query?code=\": \"xxx\"\n}\n. Maybe code below should be final \"loop\", rewriting any previous values near\nhttps://github.com/revel/revel/blob/master/params.go#L96\ngo\n    for k, v := range p.Route {\n        values[k] = v\n    }\n. So #503 Explains this well. Could you explain a bit more what this patch does ?\n. Does not look like a revel issue, Please reopen with more into. TIA. Can you reponen with more info please. If this is still a problem then please reopen. Flash is a map[string]string\nAt present it does not flash structs\nCheck the guide here on how to use flash\nhttp://revel.github.io/manual/sessionflash.html#flash\n. I don't quite understand the purpose of this; however github has recently added reviews, so please reopen with more info. . revel run launched the \"harness\", so its correct behaviour, eg with \"watch\" enabled. Duplicate https://github.com/revel/revel/pull/1116\n. Closed as duplicate. I'm just the docs maintainer, Its mainly up to @brendensoares as he's the BDFL. I'm trying to get in contact also!. Ok here's a suggestion (note my contrib is the docs as an end user, not a golang expert)\n\nI'm trying to get in touch with @jeevatkm and @brendensoares. \nIn the meantime will need a list of Contributors to add to project. \nIf I dont hear back soon, then I'll start adding people to the project. \nBUT, I dont wanna upset anyone!!. Forget above, @brendensoares is the owner, and the only one who can add users :-((((((((((((((((((. Maybe we start adding \"reviews\" to pull requests, and if it gets more thatn say 2, then its merged ??\n. OK so testing out new projects...\nand had the mad idea of creating a 2017x lets go..\n\nHere's my list of nuts to crack...\nhttps://github.com/revel/revel/projects/4\nLets start merging and break things please...\n. Not sure what the issue is, Repopen with more info. use\nrevel run myapp\nhttps://revel.github.io/tutorial/gettingstarted.html\n. exactly, I sometimes wonder why the process is so complicated.. simple changes. sigh!. Summarised, changed params order from\n\nFixed, Path, Form, Query\nto\nQuery, Form, Path, Fixed. Correct, its opposite.. so a Fixed will overwrite a Query.. Its on the TODO list to explain how to fork/branch in revel, in the manual probably on the qucikref page,\n\nhttp://revel.github.io/quickref/index.html\n. Changing extention names if a really bad idea imho, hate the idea.. Re modules ordering (dont understand why) but can we step in 10's instead,\nso we can stick ones in middle, bit like a run level kinda thing (eg dovecot config)\neg\nmodule.10.pongo2=github.com/revel/modules/pongo2\nmodule.20.static=github.com/revel/modules/static\nmodule.22.my_custom=github.com/me/revel_custom\nmodule.30.jobs=github.com/revel/modules/jobs. @notzippy yes need to change the examples, and also check the modules (need time, as usual). @notzippy it fails cos its develop branch ?\nPatches for\n- modules https://github.com/revel/modules/pull/23\n- examples https://github.com/revel/examples/pull/14. So I cant find anymore RenderArgs under /revel/* project, apart from the docs (which I need to fix along with  other v.14). @notzippy Docs in manual are almost ready. Fixed, my bad. OK a major problem is that 1.6 intorduced the {block} in golang templates..\nSo i would go with 1.6+ really .. get with it... Cross ref https://github.com/revel/revel/pull/1114 Improve Validation API. https://github.com/revel/revel/pull/998. @notzippy Whee is that stuff u had about updating \"cmd\" and it updates everything.. I lost it semhow in the branches... Confused.. The fixed should overwrite all other params, but all other params need to be arrays ?. @notzippy Yes that is what we want.. All query/post etc vars appended.. BUT a fixed one is CONST ;-) ta.. commit it bro...\n. Need to update manual to explain this problem.. and also a new CORS chapter.. ;-). Can we do a \"HOT FIX\" and make renderArgs() call ViewArgs() ??\nOn 11 May 2017 at 15:09, Nikola notifications@github.com wrote:\n\nHi, i do not know why would someone go on and change RenderArgs ->\nViewArgs. Just stupid. Now i have like 10 projects, that need update. Just\nstupid. Can you please, keep old RenderArgs as well and do another release\nwith that as well?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1163#issuecomment-300800802, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAHkHOKIUETHBytJE_qboQggFfaDqh7Mks5r4xaBgaJpZM4NIGJQ\n.\n. So one way am using is to serialise an \"interface/struct\" to json and back..another used a csv row\n\nWould be neat to look at this, and see if we can add \"helper\" functions for data, inclucing checking cookie length etc.. ```\nSession.ToJSON(\"foo\")\nSession.FromCSV(\"var\")\n```. IMHO this is a storm is a teacup, your coffee MUST be pure ground, not instant, the TIP must be green...\nAs a hacker, I use golang cos it nice break from the subtle bugs on my systems.. I dont care if its not \"pure go\"... does the job, and that all i want,, and as today, get home and have spare time to add a comment to this issue... So it works for me big time..and logic is abstracted away in a module, that relly I could replace overnight with \"something else\"..\nRevel gets me up to speed and fast.. generally using py+bottle for dev and then into golang/revel.. Even the mobile developer loves go, cos it makes sense, unnlike the python stuff. Maybe we need a counter with \"why revel sucks\".\n1) does recomiple on the fly\n2) a test suite\n3) compile a binary and done\n4) go home early, I didnt have to write my own framework to solve problem..\n5) isnt idimatic go, uses some tricks to create things.. But hey.. ask the designers. og go..\n6) otherwise stick to php7 or c# or even.... wow things are running.. . >> It's awkward \nShould that be akward. Look good to me, I;m already serialising json, so this solves my problem... I see any changes, apart from removing text/css and indentation ??. Cant quite figure out what this change is about.. is it cli or something ? a muppet needs enlightment. side question here @notzippy what u looking for, can try and runa quick test here... Just looked at the manual, and can't see a watch config for messages/\nhttps://revel.github.io/manual/appconf.html#watch\n. try  ...\nroot:password@/dbname?etc\nor\nroot:password@tcp(127.0.0.1)/dbname?etc\n. https://github.com/revel/revel/blob/master/validation.go#L189. @notzippy quick silly questions.. is there a way to make revel.cmd detect version conflicts and also can the revel tool do an update eg revel check to check and revel upgrade to upgrade ?. just comment out the import sqlite. Can you explain a bit more that NORMAL/STRICT does ?. Cant this block be taken out cos persona is retired ?. Maybe an  optional third argument of encoding.. ? . ",
    "silven": "I just now ran into this problem and the only real solution would be the ability to bind the values into a struct. How would I go about making calls like \n``` go\ntype thing struct { arg1 string, arg2 int }\nfunc (c App) Action(body thing) revel.Result\n```\nPossible?\n. Yes, that worked, thanks. But it took a while before I figured out some misc stuff that needed changing as well.\n. ",
    "zacg": "Hi, are @purohit 's changes related to this issue going to be pulled/merged back into master?\n. ",
    "rbucker": "I'm not certain I understand the main issue. What seems obvious to me is that the outermost tokens would always be stripped when assigning to variables... because the the outermost tokens are always anonymous. Whether it's {} or []. If you want to assign it to a \"body\" variable then that would be non-obvious, however, when using Unmarshaling the values manually that behavior seems to be exposed in user-code. \n. The doc calls RenderTemplate() the \"less magical way\",  I'm ok with that.\n. It is quite magical, however. And I really like it. I just spent too much time debugging my code before I went into the source and found the comment I was looking for.\nI created a separate issue for the doc.\n. Please update the doc with this obvious comment:\nper the spec: the cookie header cannot be modified in an XMLHttpRequest ($ajax, $getJSON, etc)\n. ",
    "arslantopcu": "err := json.Unmarshal([]byte(c.Request.Body), &payload)\nerror go file\ncannot convert c.Controller.Request.Request.Body (type io.ReadCloser) to type []byte\n. resolved \nhttps://github.com/revel/revel/issues/488 smothers commented on Mar 21, 2014\n. ",
    "seanmac02": "Left my laptop at the office, but I will definitely make the changes and get another pull request in.\nSean\nOn Mar 20, 2013, at 3:29 PM, Shaban notifications@github.com wrote:\n\nmaybe these articles here can shed some light on their intentions?\nhttp://www.playframework.com/documentation/2.1.0/ScalaSessionFlash\nhttp://www.playframework.com/documentation/1.2.3/cache#session\n\u2014\nReply to this email directly or view it on GitHub.\n. Pulled the \"expired or missing\" method out.  Also since getSessionExpiration() can never return a zero time, simplified logic around this.\n. \n",
    "zionist": "Thanks good patch. Will try to use\n. ",
    "dajohi": "what needs to happen to get this in?\n. this works for me too.\n. How does that look?\n. or instead of returning \"\", perhaps just set str = \"\" and call Message() with an empty string?\n. ",
    "jcvernaleo": "Ever since pull request 198 was merged in, I think this issue should be closed since that takes care of it.\n. I've been lightly using Icefex's branch (for internal testing) and it seems to be working well for me.  I know that's no substitute for actually going through the changes carefully, but figured it wouldn't hurt to mention it working for me.\n. Yeah, looks like the credit is very clear.  This issue probably should be closed.\n. Not sure how I could get RenderFile to delegate to this func since os.File is not an interface.  Otherwise I agree with all of your comments.\n. You are correct.\nStill not totally sure what you are suggesting though.  I guess it would be possible to make RenderFile take an io.Reader and then behave differently if it is an os.File (but that would probably require using reflect which seems like more trouble than it is worth.  Doesn't quite seem worth have the two functions call a third to do their work since pretty much all the shared code is the return statement.\n. There you go.  The one catch is that RenderBinary now requires modtime as a parameter so that RenderFile can pass along the file modtime.\n. I tend to think a modtime of time.Now() is reasonable for things that are not a file (and therefore might have their own modtime).\nI updated the comments to indicate that and to take care of your point about ServeContent.\n. For your other point, isn't having the action return the Result directly fairly close to what it did initially, that is RenderBinary just returns a result as does RenderFile (where the only extra thing it does is the file.Stat()?\n. 2014/01/15 13:30:37 invoker.go:26: Binding: prefix as string\nMy commit stops output like that (which I find just makes it hard to see important messages).\n. Also, the title of the pull request should have been 'Quiet', not 'Quite'.  Can't spell.\n. Sorry about that,  I forgot about the dev branch.  I'll be more careful about that next time.\n. @brendensoares (or @robfig )\nAny thoughts on this pull request.  I've been using it on a fairly large localization project for a site we are doing with revel and it is much easier to find problems when I do it this way, but if you think there is a better way, I'd love to hear about it.\n. Generally I'm a fan of different logging levels (usually verbose and quiet are good enough for me).\nIn this case, I don't see the use of the particular output line at all.  It may have been useful in writing the localization feature, but for someone localizing a site, I don't think it helps.\nOf course if one you guys prefer levels, I'm fine with that (and happy to help).  But the current type of logging to the terminal is definitely too much for my use case (localizing and developing a site we use in production).\n. Thanks!\n. Hate to just add another me too, but I greatly prefer these discussions on github (where I see them) instead of on google groups (where I do not see them).\n. I can tell you that from my experience, as much as I hate to say it, email validation is one case where I would rather have a few false positives and accept bad addresses rather than ever rejecting a valid email address.  So I would prefer something that accepts more addresses rather than less.  If you really need to know that an email address is good (which I do in the site I work on), then you probably neeed to send some confirmation email to the person who gave you the address.  So really, the email validator is preventing something bad from going in your user database and blocking only obviously invalid addresses.\nAt least that is my opinion.\n. This one is pretty minor and looks correct to me.  It probably should just go in.. I think you mean it is a dup of #1080 . Either way, one of those two should probably go in as it is the correct change (and the other PR should be closed).. ",
    "PurAir": "Thank you .I  will try to it .\n. ",
    "hfeeki": "More and more web site need support restful api for developer, so I think maybe those web site project should be split into api server and ui server , like next: \napi server <-- json restful api -->  ui server \napi server <-- json restful api --> other site, mobile app, etc. \nSo the developing flow is: \njson restful api -> api server -> ui server \nIn order to develop api server and ui server in the same time, a fake api server should be a good idea. \n. The api server do not need public directory, maybe do not need templates, do not need to know html, css, javascript, ajax, It will better for integration test, performance test, etc.\n. Do you have upgrade it to use pongo ? I can not find the code . \n. Where to download this branch ? \n. I want to write code to support pongo. Could you give me some suggestion or tip to implement it ? \n. Thanks for your answer. Now I can get posted body, But I got html error info and c.Request.Format is html:\ncurl  -H \"Content-Type: application/json\" -d '{\"name\": \"abc@gmail.com\", \"keys\": {\"keyname\": \"ssh-rsa userpubkey user@host\"}}' localhost:9000/user\nI should reveived json error, but it show me long html error. \nAnother question: My api server need to init db conn when it start to run, Where to run my own init func ? \n. ",
    "TeemoWan": "http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\n. http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\n. ",
    "iamjem": "I think this would be an excellent feature. Some way to easily generate scaffolding would be very cool. Maybe providing various struct types that people could combine to compose API controllers. I don't know that this could be totally automated, there would have to be some explicit work in regard to data, since Revel really has no opinion in regard to models and data. Users would at least have to implement the code to perform the CRUD operations, since someone could be using any number of things.. the database/sql package, an ORM like Gorp, or some NoSQL solution.\n. My comment was more that an API in Revel doesn't need to be responsible for the CRUD operations, or know any specifics about the data layer of the application period. Instead its job could just be sanitizing and validating incoming and outgoing data. Maybe it just provides the hooks for the user to implement CRUD operations, handing them a neat bundle of \"clean\" data to work from.\nRevel certainly needs to know what the data should look like, and thats where I think there's some opportunities. It would make sense to evaluate how popular data packages in Go are handling modeling so that Revel could follow closely in line, allowing users to potentially re-use parts of the models they're already creating.\n. I recently started playing with Revel and was wanting to do something a bit more substantial with websockets. Though its great WS support is built in, its still a lot of work to build up the boilerplate infrastructure to do more substantial things with them.\nThe go-socketio project is quite well written and I'd hoped to integrate it with Revel. I had the same idea of swapping out the Server handler. I was able to combine the two projects pretty easily with an app hook, I posted my approach on my blog here http://www.pixeldonor.com/2014/apr/30/combining-revel-and-socketio/.\nSeems to work well enough currently? Let me know if you see anything I could have done differently.\n. That's true, its similar to the PanicFilter example I mentioned. But still, I point to the original topic: the API is awkward.\nIt feels like some of the responsibility of progressing through the Filter chain should exist outside of the Filter itself.\nThere could be a simple Filter interface like:\ngo\ntype Filter interface {\n    HandleRequest(c *Controller) Result\n    HandleResponse(c *Controller) Result\n}\nThis would be similar to Django's approach. The current Filter API is somewhat like the Connect.js implementation, only Connect.js uses simple callback for invoking the next middleware function. Response objects also have other events available.\nI think at the very least, it would make sense to pass a callback to Filter's as the second argument instead of a list of Filters. When would you do anything other than this (which appears in virtually every Filter):\ngo\nfc[0](c, fc[1:])\nBut, again this is only a suggestion. Was curious if there were discussions already and if there was any interest to find some improvements.\n. Sorry, I didn't mean callback to imply an async thing. I was thinking the second parameter to a Filter could simply be a function that handles calling the next filter (if we wanted Filter's to have that responsibility at all).\n. When I'm talking about \"top down\" I'm referring to the request traveling down through the middleware stack, and then \"bottom up\" is the response traveling back up through the middleware stack.\nRight now the filters are kicked off in handleInternal inside server.go. Here's an example of another possible way that method could look:\n``` go\n// lets pretend this is the filter interface\ntype Filter interface {\n    HandleRequest(c Controller) Result\n    HandleResponse(c Controller) Result\n}\nfunc handleInternal(w http.ResponseWriter, r http.Request, ws websocket.Conn) {\n    // initial code\n    var (\n        req  = NewRequest(r)\n        resp = NewResponse(w)\n        c    = NewController(req, resp)\n    )\n    req.Websocket = ws\n// request cycle, \"top down\"\nfor i, l := 0, len(Filters); i < l; i++ {\n    result := Filters[i].HandleRequest(c)\n    if result != nil {\n        result.Apply(req, resp)\n        return\n    }\n}\n\n// response cycle, \"bottom up\"\nfor i := len(Filters) - 1; i >= 0; i-- {\n    result := Filters[i].HandleResponse(c)\n    if result != nil {\n        result.Apply(req, resp)\n        return\n    }\n}\n\n// if no result was explicitly returned\n// then check if one is present on the controller\nif c.Result != nil {\n    c.Result.Apply(req, resp)\n} else if c.Response.Status != 0 {\n    c.Response.Out.WriteHeader(c.Response.Status)\n}\n\n}\n```\nI like this because its explicit. People developing filters can look at the interface and pretty much figure it out without even looking at documentation. Also, now there's more control over the response cycle. Currently, you can stop the controller from traveling further down the filter stack by just not invoking the next filter, but once the response cycle begins (the response cycle being any code following fc[0](c, fc[1:]) in a filter) you can't stop it.\n. So instead of using simpleuuid for the random strings (which is using time.Now), instead use crypto/rand as seen in session.go in the dev branch?\nFrom what I've seen, this is more common than using UUID generators. I used the UUID simply because thats what was in use at the time for sessions in master.\n. Hadn't seen this project before, implementation-wise it looks pretty similar.\nWhat is the use case for per-page tokens? I guess I don't see what the security concern would be there? If a user logs in at some point, you'd want to refresh the token (which there's a convenience function for).\nOn an unrelated note, I'm wondering if there's a more elegant way to handle exemptions than manually registering absolute paths as is done in this package.\n. Talked with another Revel enthusiast who had some more insight into some tweaks we should consider to improve security:\n- Remove SHA1/salt and just use the random string from crypto/rand we're generating. Using SHA1 may actually reduce randomness.\n  - Sounds like a good idea. I can remove this and reduce complexity a bit more.\n- Prevent tokens from leaking in GET requests. \n  - I'm assuming this is when a form uses GET instead of POST, and the token shows up in the URL? Security risk being that its now visible in the URL.. and could be captured in HTTP Referer if the user left the site? I'm not sure we could prevent the token from showing in the query string, but we could perhaps refresh the token when this happens so the token in the query string is now invalid?\n. Hmm thats interesting. As far as I know there's no way of doing anything similar to what the methodOverride middleware in Connect does within Revel. And really, it sounds like a dangerous feature to have period!\nFor the CORS it looks like we just need to ensure the scheme and host match for the request and referrer. Right now its only checking the scheme.\n. I'll look through this once more and make sure everyone's comments were\nincorporated. Its been a while and this isn't terribly fresh in my head!\nMight have to be this weekend though.\nOn Thu, Sep 11, 2014 at 2:20 PM, Brenden Soares notifications@github.com\nwrote:\n\nI want to get this merged ASAP. Mad rush to start confirming v0.11's PR's.\nAre we good to merge this into develop?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/pull/606#issuecomment-55313946.\n. @brendensoares sorry for my absence, made some updates, i guess i had some laying around for a while back that hadn't been pushed either. take a look.\n\nthe one thing i'm still missing is CSRF exempt. really think it should be convenient for a user.. the existing CSRF library for revel makes you manually register route paths, which I think blows. probably a way to mark an entire controller as CSRF exempt, but that has implications code-wise for the user. any ideas?\nin python and node this is normally wrapping a method/function in a special CSRF exempt decorator, and you're done.\n. @brendensoares So would you be specifying CSRF exempt at the controller level?\nDoesn't seem there's an easy option to do something like this at the route level. My only concern with controller level configuration like this is that the solution needs to be robust enough to support other per-route configuration in the future.\nMaybe the Options approach is a bigger topic and for the interim we have some simple csrf.MarkExempt(path string) function for now that just stuffs paths in a map[string]bool? Could even let you register a regular expression so you could easily mark any path that starts with a prefix as exempt?\n. @brendensoares @anonx at the time the CSRF filter is running, does it know what the target controller method is? I agree, registering a URL explicitly is duplicative since its already in the routes.\nAnd for the controller action duplication, I think thats a valid point. Someone might have the same controller action registered for different HTTP methods, or even different nearly identical routes, and have conditional logic within it based on which method? \n. Just a status update, should have a first stab at things done tonight for review tomorrow. Planning on accepting string paths, compiled regex, and method expressions to the MarkExempt method.\n. Few stumbling points I've ran into.\nFirst off, I'm not finding a way to reflect a method expression to get its method name? You can reflect the function's args of course, the first of which would be the controller struct. But I would need to do some validation of the method expression to ensure its a valid struct (that contains an embedded revel.Controller), and then piece together the controller name and action to compare against controller.Action?\n``` go\ntype MyController struct {\n    *revel.Controller\n}\nfunc (m MyController) Index() revel.Result {}\ncsrf.MarkExempt(MyController.Index)\n// or this should work too\ncsrf.MarkExempt((*MyController).Index)\n```\nOr is this even worth it?\nSecond topic is concurrency. I would like to avoid having to use synchronization on the maps/slices that hold these exempt values since these filters would be getting called on every request, and that could have performance implications. I believe this would only be safe if values were only being read from once the server is accepting requests. I would imagine that a developer would typically mark exempt methods in the various init hooks throughout their app before and not while the server is running. Is that a safe assumption?\n. Keep in mind too one of my questions: is it possible to reflect the name of the method in a method expression? My earlier attempts weren't working. I could figure out the controller no problem, but whatever magic happens when you use a method expression seemed to hide the original methods name. Not a type I've personally had to introspect before.\n. @anonx my question is, can we use reflection to determine the name of the method in a method expression? I haven't had any luck doing so. Code wise, this is what I'm expecting csrf.MarkExempt(item interface{}) should do:\n``` go\nfunc MarkExempt(item interface{}) {\n    // First check and handle when item is a string (URI), regex (code omitted)\n    // Now check if item is a function (in the case of a method expression)\n    if reflect.TypeOf(item).Kind() == reflect.Func {\n        // Now we can inspect item's arguments, the first of which\n        // should be a controller.. but how do we know what the name of\n        // the method on the controller is that we care about? We need it for\n        // validation later, when its compared against *controller.Action...\n        // This (along with other things I've tried) doesn't return the method name...\n        // We basically want to find \"Index\" if someone did MarkExempt(SomeController.Index)\n        fmt.Println(reflect.TypeOf(item).Name())\n    }\n}\n// Sample controller\ntype HomeController {\n    *revel.Controller\n}\nfunc (h HomeController) Index() revel.Result {}\n// Example of marking it exempt in the app init:\ncsrf.MarkExempt(HomeController.Index)\n// or\ncsrf.MarkExempt((*HomeController).Index)\n// or we say forget it, and they just use a string\ncsrf.MarkExempt(\"HomeController.Index\")\n```\n. Believe I have the couple code cleanup items, exemptions, and tests committed now. After talking with @brendensoares on IRC, we decided to go with exemptions for paths and controller actions (as strings). So, to mark exempt, you'd do something like this:\ngo\n// as a path\ncsrf.MarkExempt(\"/ControllerName/ActionName\")\n// as a controller action, validated against controller.Action\ncsrf.MarkExempt(\"ControllerName.ActionName\")\nSome possible future updates could include accepting method expressions, and potentially regular expressions.\n. @brendensoares what do you need from me?\n. My last commit should have covered everything in that regard. I think its\ngood to be merged in.\nOn Wed, Oct 22, 2014 at 9:56 AM, Brenden Soares notifications@github.com\nwrote:\n\n@iamjem https://github.com/iamjem last time we chatted you said you had\nsome buttoning up to do for this PR. Is it ready to be merged?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/pull/606#issuecomment-60097813.\n. Sorry, definitely some rough edges left from the refactoring that needs to be cleaned up still. When we've got some consolidated feedback I'll go through and incorporate everything at once.\n. Looking at this again. Is your comment about line 134? The tokenFunc variable gets used outside of the if statement, which is why I didn't declare them in the if's initialization statement.\n. Thats only if its not a white listed method. If someone does an AJAX request cross-domain using a safe method (like GET) we need to check it there too. I could possibly pull the check up outside the if statement though.\n. Yes, but line 69 happens only when the condition on line 55 is true (only if the HTTP method is not safe, like a POST). The check on line 94 always gets called when its either a safe HTTP method (like a GET request), OR the unsafe request passed the previous tests inside the line 55 if statement. The reason the sameOrigin() call is on line 94 is to ensure that tokens aren't leaked in \"safe\" (like an HTTP GET) cross origin requests, for example if someone built an API that works cross origin.\n\nLike I mentioned though, since the condition is always needed at some point in the filter, it could be move above line 55. I'll do that.\n. I agree, I was about to pull open my editor because these diff views are a bit lacking in legibility.\n. ",
    "eddiejaoude": "\nOne big issue is that because there are different data abstraction packages\n\nIt could start by supporting the most commonly used approach, then expanded afterwards.\nThis feature would be useful for rapid development & to kickstart a project.\n. @brendensoares sounds good.\n\nIt could start by supporting the most commonly used approach, then expanded afterwards.\n\nIf not the most commonly, may be the recommended approach?\n. > Add models folder to revel/revel/skeleton\n\nChoose official Revel ORM (e.g. STORM)\nAdd model/controller generation\n\n:+1: \n. ",
    "PatrickWolleb": "Could you give me a starting point on where to implement such a thing? I have been trying to build a REST API around revel. I think we need global errors (or better anything) rendered as JSON or any data type supported by the API.  I.e controller.RenderError should know what type to render based on content-type.. I am not sure how to  approach but it would be great to help develop a solution.\n. How can I pass RenderArgs to the controller?\n. ",
    "jniltinho": "Gojsonschema\nDescription\nAn implementation of JSON Schema, based on IETF's draft v4 - Go language\nhttps://github.com/xeipuuv/gojsonschema\n. :+1: \n. :+1: \nThanks\nI'll post my questions on Stackoverflow\nI migrated my Beego project to Revel, I am very loving the Revel, congratulations to all of the community are doing a wonderful job.\nThe revel.github.io was pretty much after the upgrade.\nI hope I can help in translating some contents to Portuguese Brazil and create some screencast\n. :+1: \nUpdate Revel and CMD\nChanges conf/app.conf\nRun app, logs\nINFO  2015/03/26 09:13:44 revel.go:329: Loaded module static\nINFO  2015/03/26 09:13:44 revel.go:329: Loaded module testrunner\nINFO  2015/03/26 09:13:44 revel.go:206: Initialized Revel v0.12.0 (2015-03-25) for >= go1.3\nINFO  2015/03/26 09:13:44 main.go:30: Running revel server\n. If I modify the controllers/init.go\nfrom:\ngo\nrevel.InterceptMethod(CheckLogin, revel.BEFORE)\nto:\ngo\nrevel.InterceptFunc(CheckLogin, revel.BEFORE, &App{})\nAnd in the other controllers\ngo\n// No login here\ntype App struct {\n     *revel.Controller\n}\ngo\n// No login here\ntype MyController struct {\n     App\n     // If add App no login in Controller\n}\ngo\n// No login here\ntype MyController2 struct {\n        App\n        // If add App no login in Controller\n}\nAnd controllers/user.go\ngo\n// OK, no redirect loop, render my login form\ntype User struct {\n       *revel.Controller\n}\nIn this way I can put only one method CheckLogin\nAdd new Intercep Method, disable intercept\ngo\nrevel.InterceptMethodWithout(CheckLogin, revel.BEFORE, &Login{})\nNew Feature ?\nSimple rules for auth in projects\nI'm using Sublimetext3 with Plugin GoSublime\nI love it involved with the Revel Project\nThanks\n. :+1: \nChange OK, read page login, no read css,js,\n\nError:\nERROR 2015/03/26 17:38:54 results.go:370: Couldn't resolve redirect: didn't recognize type: func() string\nServer Error:\ndidn't recognize type: func() string\nAdditionally, an error occurred when rendering the error page:\nTemplate errors/302.html not found.\n. Change:\nAdd     \"Static.Serve\":   true,\ngo\nvar redirectForbidden = map[string]bool{\n    \"User.Login\":     true,\n    \"User.PostLogin\": true,\n}\nTo:\ngo\nvar redirectForbidden = map[string]bool{\n    \"User.Login\":     true,\n    \"User.PostLogin\": true,\n    \"Static.Serve\":   true,\n}\n. PS - we broke 5,000 GitHub Stars!!! W00t!\nBeego -> 4159\nRevel +1000 ++\nRevel _long life_\n. Hello @brendensoares  @anonx @pedromorgan\nUpdate 04/05/2015\nJune Beta coming soon in Github!!\nMy first project using Revel (SPAMD Antispam, Panel Admin Web Mail, Antispam)\nLike PostfixAdmin, Modoboa, IRedMail, but with easy installation\nWill soon be on Github\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. @pedromorgan \nI'm making a transition from a legacy application for an OpenSource application\nI am working to improve the App every day, will soon have a demo, is an application with several modules, I'm losing a little time with the core to facilitate the creation of other modules.\nAspx (.NET) to Golang(Revel)\n. :+1: \nPongo2 -> https://github.com/flosch/pongo2\nI'm looking Pongo2, very interesting for those from the Python world\nWe can add a feature in the next roadmap to add Pongo2?\nCool !!!\n:100: \n. @brendensoares  I\u2019m sorry.\nThanks, \nNew features in 0.13, please do not remove HTTPS, I'm using in my project\n. ",
    "nathanleclaire": "Cool.  Really like the framework, by the way.  Thanks and keep up the good work Rob!  I will try to contribute when I know Go a little bit better :)\n. ",
    "flosch": "Author of pongo here. Since this issue isn't closed yet I just want to let you know that I've released pongo2 which is the successor of pongo. If you have any questions regarding how to use pongo2, let me know. Cheers!\n. @anonx pongo2.Context is a simple map[string]interface{} since pongo2 provides all objects by their name in the template. For example, passing a pongo2.Context{\"person\": personObject, \"makeSomethingUseful\": func(...) {}} makes these two symbols (obj and func) available and they can be used, e. g. by printing out {{ person.Name }} or using the function in {% if makeSomethingUseful(person.Foo) %}...{% endif %}. Currently, I have no plans to drop this support, but you're free to pass any map[string]interface{} as a context (and typecasting it to pongo2.Context). If you're making sure that your interface{} is a of type map[string]interface{}, then you can pass it easily to pongo2. If it's not a map of this kind, you could create a correct context like this: pongo2.Context{\"obj\": givenInterface} and access this object by \"obj\" in your templates.\n. ",
    "nolman": "Sounds like a good idea will update the PR.\n. Ah so the challenge here is that eq uses testing.T and AssertEqual speaks revel.TestSuite. \ntesting.T.Error(message) won't fail a revel test suite since revel.TestRunner.Run expects a panic.\nI believe we could create an equivalent to testing.T and wire it up so that it's T.Error would be handled similarly to the test failures that revel expects (panic(fmt.Errorf(message))). It is a little complicated but it could be useful if used to extend TestSuite. What do you think? Is there a better alternative approach I am missing?\n. Got a little carried away, let me know if you want me to revert any of these commits :)\n. +1 to the naming, not super happy with it but I can't think of anything better that isn't too verbose\n. bump :D\n. I think test/dev is a pretty common distinction but I am not sure what the norm is in golang. In the past I have found the distinction to be very useful. A few of the things I like about it, it gives you a flag to use to wrap tests in a transaction so you can roll them back. Your development environment doesn't get polluted with your test data or vice versa.\nMore concretely the reason I opened this pull request is because I want to spawn bots (making a game) in a goroutine in development but not in test as I want deterministic test results.\nI can understand not wanting to duplicate the config. Is there a way to override the web test runners environment? Shell is easy enough to override. Could potentially dry up the config to default test to dev but run test in test env as well.\nThoughts?\n. One more bump :)\n. Ya I knew about the command line arg, however I couldn't find a way to set the web test runner environment?\n. Ya unfortunately that doesn't really work, I want to start the app in dev with NPC's auto spawning but in test I would prefer not to so that the tests run deterministically. So I would need to bounce the server to use the web test runner in test mode and start it again to resume development.\n. Yup you are right that this PR wouldn't have fixed that, my bad.\nYou are right I think the command line is the best option. That said the command line test runner feedback loop is a bit awkward with the 'revel test' and open the output file in the browser if it failed. I couldn't see a configuration option to override the output (sorry if I missed it). What do you think about improving the command line test runner's output? What I would like to just see would be what test(s) failed with the assert that failed, line number, and the file.\n. @robfig sorry for the delay, it was a busy week :)\n. Yup, SGTM. Sorry for all the go formatting stuff, still learning the go way :)\n. bump\n. bump :)\n. That's odd, go fmt didn't change this for me?\n. ",
    "lukeholder": "Your defining the route in code with Handler, and not a route file that revel is parsing its self.\n. What I like about using mux or a separate library for routing is that it make it more modular. I can also use MUX in another application and have a consistant api.\n. ",
    "erikstmartin": "Another option would be to start up 2 instances of revel with \"revel run\" one being in test mode and bound to a different port, then you could still use the web browser to view the test runner in test mode?\nRob are there any issues that might be caused with auto compile/restart of 2 instances at one time?\n. That's a consideration, I think my thought process was that MakeRequest was to allow a user to make a pristine request where they had complete control over the http.Request, so i didn't want to modify their request.\n. ",
    "Merovius": "I think that would be nice, yes (sorry for the answer taking so long).\nBut I actually meant 406 (Not Acceptable) when I wrote 406 ;)\n. I don't think, that it is a good idea to give anything a precedence over accept-headers. It is simply not standards-conform. If a clients sends an Accept-Header, it tells us what formats are meaningfull to it, if we can not deliver that, we should really send a 406 return code. The content-type of the answer should always respect the Accept-Header. So in the above example, if the clients GET /script.js with Accept: text/html, it is a mistake, to send content-type != text/html. And if the content-type is text/html, it doesn't make much sense, to render it with anything but the html/template engine, because after all the client should try to interpret our response as html and therefore proper protection against XSS is in order.\nSo, the method to render content should really depend on the content-type and the content-type should depend on the negotiation of Accept-header vs. content-types available. I think the file-extension is a very bad indicator for content-type, so there really should be a way for an application-developer to tell revel, what content-type it can generate with what precedence and rever should do autonegotiation. This may complicate the revel-app interface considerably but is the only way to produce \u201ecorrect\u201c behaviour, in my opinion.\nA possible way to indicate what content-type is available would be the routes-specification. Adding a content-type field to a route would allow the developer to specify multiple routes for the same resource with different content-types which would then be taken as given in order of precedence. To simplify things for simpler apps, it might be sensefull to have a default-policy, if no content-type is given (for example taking the content-type from the extension or something like that).\n. There are actually standards on how to do content-negotiation, which is exactly what this is about (I say this, because I have the feeling that at least part of it is reinvented here). There is also an existing library written in pure-go implementing this standard (or at least thriving to do so). I think trying to infer really anything from a file-extension is bound to fail, especially when combined with some heuristic like \u201eif the accept header and format type are not compatible\u201c (quick question: What format do resources without extension have? Or starting with a dot? Or having a dot someplace in the middle for obscure reasons?). My suggested policy remains: Let the developer describe on a per-route-basis all the data needed for standards-conform content-negotiation, use some sensible default-strategy if no such data is given. Most user-agents (i.e. browsers) will set Accept: / by default, so I guess if someone bothers to set an Accept-header, it should be taken seriously.\n. ",
    "ejlangev": "Sounds basically like the respond_to block in rails.  Could think about allowing a specified content type at the route level (which would just return a 406 when given an Accept header of another type).  If nothing is specified it passes through to the controller normally which could potentially return a 406 if it can't find the proper template.\nTemplate matching could be done with specific template files for each content type. Maybe something like you can make templates with the proper names with specific extensions that correspond to that content type.  Based on the content type the proper one is rendered automatically.  Possibly specifying no extension matches any content type as an override.  This would also allow customization based on the request format if someone wanted to override this behavior.\nIf this seems reasonable I'll take a shot at implementing it.  Looking for a good Golang project to contribute to anyway.\n. Seems like revel includes a list of Mime types in conf/mime-types.conf.  Why not use that to determine the request format from the accepts header?  Seems unnecessary to hardcode it to just handle html, xml, json, and txt when you already have a map in that file that would help you accept more.\n. Yeah I agree it would be kind of annoying and not worth the effort.  What about an override for when the format is set in the request string as in \"/myapp/script.js\" would set the format to 'js' rather than the behavior right now which is to set the format to 'html' provided an Accept header is not specified.  Seems like this also solves the problem in general for other formats as well.\n. Yes that's what I was thinking.  The extension would take precedence over any Accept header when setting the format and then the format would be used to pick a template to render.\nI like the idea of being able to customize template handlers for different content types (with a customizable default being text/template like you said).  That would give an easy way to support easy JSON or XML building via some library and Haml or something for html generation.\n. I guess I was conflating content type with request format somewhat though not intentionally.  Here's a (hopefully) more clear explanation of my suggestion incorporating some ideas from others:\nRoutes should be able to set a default format as well as a list of acceptable formats.  Requesting one with an invalid format should return a 406 Not Acceptable error.  If it sets just a list of acceptable formats choose the first element as the default.\nrequest.Format is set by first examining the path requested with a fallback to the Accept header with a default of possibly html.  So a request for '/script.js' sets the Format to 'js' and a request to /script with Accept: application/json sets the Format to 'json' etc.  \nIf the accept header allows multiple formats then it should default to some value associated with the route itself provided one of the acceptable values is allowed by the route.\nIt should return a 406 error if the Accept header and format type are not compatible e.g. a request to /script.xml with Accept: application/json or if the requested format is not valid for the given routes\nIt should set the content-type of the response based on a combination of the Accept header and the format because the accept header might allow multiple content types and we'd need to pick one from either the format in the request path (js in /script.js) or a default (html maybe but possibly configurable on a per route basis as mentioned above).\nIt should render a template based on the content type's associated format after selecting it.\nOther ideas mentioned in the thread not directly related to Accept and Content Type etc:\nAbility to select different template engines for different formats, would be a great feature to have once the other stuff is flushed out a little more once the rules for handling requests for different content types with the same controller actions are finalized.\nDoes this make sense to everyone?\n. It might not limit the response type every time but it is possible that it could limit it by setting accept to a single type like Accept: application/json.  In which case I think the framework should return a 406 error unless it can respond with json.\nWhat I was getting at with the ability to set formats at the route (or group of routes) level was something like a request to /action with Accept: application/xml, application/json; /.  If the handler for /action can produce either XML or JSON which one should it choose by default?  To me it makes sense to be able to configure that case with application, controller, and action level granularity which seems applicable to routes.  Even more useful with resource style routing.\nAnother case is a request for /action with Accept: / which has the same issue described above if there are multiple templates with different formats for the action.  Using html as the default doesn't seem adequate because an API use case might be choosing between JSON and XML without an HTML option.\nThe auto-negotiation library linked above by @Merovius seems useful and like it would provide a more standards compliant way of parsing that header than the current behavior.\n. Why use singular and plural to determine the methods?  Seems like that forces you into a convention with no escape.  Why not implement it basically the same way it's done in Rails which seems to be what this was going for?\n. Rails doesn't use singular or plural controller names to determine what actions to support on a particular controller.  Instead it would generate all the routes by default and allow either a blacklist or whitelist option to create a subset of those routes.\nSo the default \"resources :articles\" generates routes for new, show, index, create, edit, update, destroy on the articles controller.  \"resources :article\" would generate the same routes on an article controller.  If you only wanted the new and show actions you could whitelist the routes it creates with \"resources :articles, only: [:new, :show]\".  Here's the doc if that wasn't that clear http://guides.rubyonrails.org/routing.html.\nBut my point was more that determining what is singular and what is plural is an inherantly error prone process and seems like it will cause a headache for someone using it later on.\n. @brendensoares Yes that is right but it's using different methods to determine what to do (the 'resource' method vs the 'resources' method) rather than the number of the name of the controller.  Maybe it would be better to say that I think this feature is a good first step but not really complete and merits some discussion on how resource routing should work as a whole to be customizable etc.\nAs far as inflection libraries are concerned, I remember during the development of Rails that users of the framework had all sorts of problems with updates to the inflector breaking their code at times they didn't expect.  So much so that the rails team eventually stopped accepting patches to the inflector and told people to fix any errors they found in their application code (See the top of http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html).  To me it's undesirable to have an update to the framework inflection library be able to change the routes of my application without me specifically invoking an inflector method in my code.  Just my 2 cents.\n. This seems like a good idea.  I assume the hierarchy for overriding will be to load the environmentally specific configs after the normal app.conf?\n. ",
    "eefi": "32f8d70 either needs some kind of fallback for dealing with extensions it doesn't know about, or a way for applications to extend the types recognized by Revel. For example, we're using a .js template to generate JavaScript, and this commit breaks that with an \"engine not found for extension .js\" error. Other people might want to generate .csv or other more esoteric but still text-based types, and it seems fragile to expect Revel core to know about all of them.\n. ",
    "yuriyklepikov": "Thanks, but it didn't work on my server, because I have the front server nginx\nI got Real IP from header:\nhed := c.Request.Header\nRealIp := hed.Get(\"X-Real-Ip\") \n. X-Forwarded-For:127.0.0.1 :(\nWanted to know where used REVEL_SESSION? how to get its value? Using c.Session.Id() writes one more cookies They are somehow related to each other?\n. func (c Application) Index () revel.Result {\nreturn c.Render()\n}\nnginx 1.2.8 stable\nI saw that the server will cache the only 404,500 Status page (error)\n. ",
    "davidhhuan": "Thank you for your replying. :)\nI think BBS is more helpful with that case to share :)\n. ",
    "yarko": "The GOPATH environment variable seems to be analogous to \"virtualenv\" in\npython.\nSet GOPATH when you have a different source tree / fork.\nSee http://golang.org/doc/code.html#tmp_13;\nYou might find http://www.ryanday.net/2012/10/01/installing-go-and-gopath/helpful.\nMore reference:\nSee http://tip.golang.org/cmd/go/#GOPATH_environment_variable for details,\nand  \"go help gopath\"\nRegards,\n- Yarko\nOn Fri, Apr 26, 2013 at 12:35 PM, Ashwin Purohit\nnotifications@github.comwrote:\n\nI wanted to see the effect some of my changes have after I forked your\nrepo. When I do:\ngo build -a -v -o $GOPATH/bin/revel ~myhome/myfork/revel/cmd\nThe new binary is still building from:\ngithub.com/robfig/revelgithub.com/robfig/revel/harnessgithub.com/robfig/revel/modules/testrunner/appgithub.com/robfig/revel/modules/testrunner/app/controllers\nAny ideas?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/137\n.\n. Not sure if this is on track, but I applied the mac patch for gdb as\ndescribed in the readme for https://github.com/sirnewton01/godbg\n\nMaybe that (and associated links) will help.\n On Sep 8, 2013 7:12 PM, \"Rob Figueiredo\" notifications@github.com wrote:\n\nI managed to run it on OSX, but I can't seem to set any breakpoints in my\ncode, so it doesn't do much. Can you provide some guidance as to how I\ncould use it to debug a hypothetical problem in the booking sample app?\n(E.g. how to set a breakpoint at a particular file line, or at a\nparticular function. Or maybe there is another useful way to operate it?)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/294#issuecomment-24032986\n.\n. \n",
    "Linicks": "\"Thanks for the note. Do you have any suggestions for how Revel could benefit from it? I'm not sure I see...\"\nSince Revel, as I understand it, is trying to implement a Play style framework;  It should probably incorporate these types of features.  Here is a Play example to illustrate a use case (read parts one and two):\n- http://blog.tksfz.org/2012/10/12/websockets-echo-using-play-scala-and-actors-part-i/\nThe Akka framework which is part of the Typesafe platform and Play implements functionality similar to Erlang.\n-  http://akka.io/\nHere is a link to Jo-Armstrongs paper on building reliable distributed systems:\n- http://www.sics.se/~joe/thesis/armstrong_thesis_2003.pdf\nAnd his blog:\n- http://joearms.github.io/\nHere is an Erlang framework that already implements all of this stuff:\n- http://www.chicagoboss.org/\n. \"I do think the actor model is a good one -- is there something Revel could do to support it better? It seems tangential to the request serving structure, so a developer can already use any actor implementation they choose.\"\nThis is a complex topic, and really deserves more attention than I can give here.  However, I will try to help clarify what the original poster was trying to communicate.  I think the real question is:\n\"How is Revel, as a Play inspired framework, going to implement concurrency, and robustness within the framework itself, and everything written on top of it?\" \nEssentially Go, Erlang, Scala/Akka, etc. implement concurrency based on Hoares CSP ideas (http://en.wikipedia.org/wiki/Communicating_sequential_processes).  Obviously each of them have their own symatics, pro/cons, etc., but they are all trying to solve the concurrency problem that we are all faced with. \nBeyond the language itself are the libraries and tools like Revel that we use to build applications upon.  Because most of today's web applications/distributed  applications have to worry about concurrency it's important to have a complete system that implements this.  Within Erlang, Go, and Scala it's fairly easy to implement concurrency because it's build into the language, but it's far more complicated to build a complete system that is concurrent.   Amadahl's Law (http://en.wikipedia.org/wiki/Amdahl's_law) helps illustrate the importance of this.  Within the Erlang community, they have built a set of libraries/framework that they call OTP that not only help developers build current distributed applications, but ones that are very robust.  The combination of the Erlang run time, the language itself, and the OTP framework have been proven winners in this space. Because of it's proven success, many are replicating its functionality with other languages like Scala, which is Akka.  In Haskell, they have implemented this functionality with Cloud Haskell, and it appears they are doing it with goerlang.  In the Play framework, they leverages the Akka framework heavily so that applications written on it can also benefit from a comprehensive proven system that has concurrency built in.  As a side note, the Vert.x (http://vertx.io/) project has taken an interesting approach to solving this problem that's worth taking a look at.\nBecause Revel is so young, I think that it would be a great opportunity to take a close look at these systems, and develop a strategy in which Revel can implement a highly concurrent and robust web framework.\n. ",
    "dexterm": "Hi Rob,\nThanks for the help,\nbut I couldnt get it to work\nI am using ziutek/mymysql driver\nWhat should I pass in the db.spec\ndb.import = github.com/ziutek/mymysql/godrv\ndb.driver = mysql\ndb.spec   = \nThanks\nDexter\n. ",
    "vanackere": "Only watching the dependencies of the app code is workable but will involve adding/removing watchers each time dependencies are added/removed in the code so I feel this is a lot of work for little gain.\nI have no access to OSX systems so cannot make any test/suggestion... On Linux at least, I believe that inotify can watch directories and so we're not likely to encounter any limit on a regular project. If you're worried, I'd suggest including the feature, but disable it by default in a first time, then we can work out solutions (eg a fallback to some regular polling ...) if we encounter cases that don't work.\n. Hi again,\nWould you accept to merge this patch now that this option is disabled by default ?\n. 2013/12/9 Brenden Soares notifications@github.com\n\nHelp me out here guys, but I'm not seeing a good reason to add support for\nthis.\n\nTo the contrary I do not see a good reason to not support this on systems\nwhere this is working fine (so far, at least on Linux this is working fine\nfor me and quite a number of coworkers who really gain a lot of time with\nthis patch in their daily workflow).\n\nWhat's wrong with simply restarting the app when you update your packages?\n\nWhen you're updating only the packages in question this is quite annoying.\nI do have a custom gopath containing several internal go packages (shared\nwith several revel & non-revel apps) and while editing those packages it is\nnice to have the revel app automatically rebuilt. Moreover this is the\nbehaviour of \"go build\" so i'd argue this should also be the behaviour of\nthe revel watcher...\n\nEven though file descriptor limits can be manually increased by the user,\nevery fd occupies system memory that could be used by your app.\n\nIn my opinion, unless you're developping on a raspberry Pi, this should\nreally have a minimal impact on your system (and if your system memory is\nso important that it matters you should really not be using a framework\nlike revel anyway...).\n\nIf we did add support for this feature, perhaps watch.gopath should be\nwatch.dependencies since you're not really watching the entire $GOPATH so\nmuch as you're watching a few imported packages, right?\nAll that said, I would rather see a way to allow a Revel app to monitor\ncustom paths as this would have real world usage like monitoring a\ndirectory for external events (e.g. emails, logs, uploads). This feature\nseems more like a convenience, but it doesn't really save any time as far\nas I can tell.\nFWIW, I verified that a directory's modification timestamp changes when\ncreating, renaming or deleting one of its files (on OS X Mavericks and\nlikely any Unix-like OS). So we could reduce the fd count if we only\nwatch directories (e.g. src/somepackage) instead of all files under a\ndirectory as long as we don't care about file changes. I hope I'm not way\noff base on that assumption (I've never used fsnotify or the like myself)\nAs this issue is a bit stale, I'm going to close it, but feel free to\nre-open it if you feel there is more to be said.\n\nAFAICT this patch is still working fine and it seems that the fix to have\nthe feature working on OS X should be made in the fsnotify package instead.\nIn the meantime this option is disabled by default so have no impact on\npeople that do not explicitely enable this feature...\nPlease reopen this issue (unless @robfig has decided that this is really a\nbad idea, in which case I'll have to live with my private fork of revel for\nthe forseable future...).\n. ",
    "verdverm": "555 may help with the 'watch the whole world' issue\nIt's a slightly different attempt at watching external dependencies\nI also ran into the OSX file descriptor limit today\nthe ulimit was set to 256 by default\nupped it to 1024 and everything is ok again\n. @brendensoares @pushrax @landr0id @robfig \nThe first comment has a link to a discussion Rob had, which makes points to having some consistency between the various arguments passed to the template engine.\nI think it would be good to define & document what Flash,Session,and RenderArgs will have and what the overlaps and uniquenesses should be\n. seems to be a problem with how Postgres parses the statement\nchanging line 32 of revel/blob/master/samples/booking/app/controllers/app.go\nto the following: \nusers, err := c.Txn.Select(models.User{}, fmt.Sprintf(\"select * from 'user' where Username = '%s'\", username))\nsolves the problem with Postgres.\nI haven't checked it with the other dialects\nwill do tomorrow and submit a pull request\n. Would that make it a Gorp issue?\nIt seems DbMap uses the QuoteField for table names when performing operations\nbut that the Transaction.*() does not, \nI'm guessing because it would have to parse the query string for the table name, then reassemble it with quotes\n. So a little clarification... maybe parse was the wrong word.\nAs it seems to me, line 32 of samples/booking/app/controllers/app.go:\nusers, err := c.Txn.Select(models.User{}, select * from User where Username = ?, username)\nhas the table name embedded in a query string. GORP would have to read this string, determine where the table name is, and then modify the string to quote the table name.\nThere is a Get() function which returns a single row.\nIt would be ideal if there was an analogous Select() to the Insert() & Get() functions\nwhich took a partially filled structure and matched on those fields, returning more than one row\n(Though this would make queries such as \"select * from table where field > value\" difficult)\nDoes this help?\n. I am thinking of doing a PR to add a new sample app which incorporates the zurb-Foundation responsive-layout framework.\nI can update the bookings Select query then.\nAlso, are you using similar queries in any of the other samples.\nIf so, I can fix those while I'm at it \n. That fix was for the create table clause\nthis issue is related to select statements\nthe issue here is that the  `` style string (even with quotes embedded) causes the PSQL parser to fault.\nthe easy fix is to just use fmt.Sprint(...) \nThough quoting the table name will likely be necessary\n. Yeah, still having this issue.  A gist is being prepared\n. @jwmiller19 is on Windows Vista\nThere error does not seem to be present on Windows 8\n@bussiere  what version of Windows did you experience this error on?\n. this is a bit stale\n@revel/core \nwhich template function enhancements should we add to the revel code?\nare there any template functions that are not needed, which we could remove?\n. @revel/core would it be easier to use the gocolorize package to color the totality of the output?\nWe could highlight code by revel app and module and leave the rest uncolored\nI think this would help the readability whether the stack trace is trimmed or not. It would help see where the code is transitioning from revel to user to go and such.\nI'm personally a fan of colorgcc\nnotes: \ncheck tty?\n. good point, revel could have a couple of small skeletons while still being\nable to have foreign skeletons\n What about a separate repository called 'revel-skeletons' ?  Although I\nguess anyone could create something like that.\nI'll adjust. Do you think the skeleton include should be relative to\n$GOROOT ?\nfor foundation, the standard js/css include everything.  When using Sass,\nthey allow you to include only the components you actually use, thus making\nthe resulting css file smaller for sending over the interwebs.  I'm 99.9%\nsure bootstrap is the same.  For me, it's a matter of commenting in/out\nlines to add/rmv components from bootstrap\nOn Sun, Sep 15, 2013 at 4:01 PM, Rob Figueiredo notifications@github.comwrote:\n\nBoy, this pull request adds 130k lines of code to the repo. I can barely\nkeep up with the questions and pull requests as it is. Adding so much\nskeleton app code to the repo would increase the maintenance burden a lot.\nI think a better approach is to have \"revel new\" able to take a skeleton\nfrom any github repo. I would also be happy to keep a list of known good\nskeletons hardcoded in the application, but I don't want to maintain all of\nthe skeletons themselves. Also, having the flexibility for anyone to create\na shared skeleton and distribute it trivially seems like a good thing.\nAs an aside, I see that you have included all of the source for boostrap /\nfoundation / etc. When I use bootstrap in a project, I only take a single\nCSS file -- what is the motivation to take all of the component source\nfiles? Does it make it easier to customize?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/307#issuecomment-24478888\n.\n. rescinding this pull request \n. Yea, that was my intention. It seems natural since all Go code seems to\nlive in a common path. I could add some code that 'go get' 's it if not\nfound, and if that fails give more detailed error message.\n\nOn Sun, Sep 22, 2013 at 11:39 AM, Rob Figueiredo\nnotifications@github.comwrote:\n\nIt seems like we may want to \"go get\" the provided import path for the\nuser -- seems like a common case is not having it cloned yet. What do you\nthink?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/311#issuecomment-24884338\n.\n. would I handle it there or in new.go?\n\nOn Sun, Sep 22, 2013 at 12:04 PM, Rob Figueiredo\nnotifications@github.comwrote:\n\nThat would be good. FYI, the build process does this - check out\nharness/build.go\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/311#issuecomment-24884744\n.\n. I am thinking of reopening this on the develop branch. Some recent conversations make me think it would be useful for letting users have their own frameworks like foundation. It might make writing module groups easier...\n. @brendensoares are we fore going this for now?\n. maybe we could take some time to list all the functions that need documentation (with links to the code)\n. nope, that's the same tag I leave around my code\n. @brendensoares  +1 for modules\n. I think Revel should be able to handle modules with conflicting names, via some namespace mechanism.\n\nI can foresee someone including two third-party modules in their app where this could come up.\nIf we are going for ease of use and extensiblity, we should think about how to deal with modules being written and used by the community,  and making this process as easy and free from conflicts as we can\n. @brendensoares  time for your fix by v0.10?\n. My take on Auth functionality for Revel would be as a handle or interface,\nso that we can handle @brendensoares bullet points, but leave the dirty work to modules.\nHere is an interface I sketched out, string seemed like the easy abstraction for specifying a user\n``` Go\ntype AuthInterface interface {\n    Connected(user string) bool\n    Login(user string)\n    Logout(user string)\nUserCanAccess(user, path string)\nUserGrantAccess(user, path []string)\n\n}\n```\nMaybe managing this with the routing system makes sense?\n @robfig @brendensoares @landr0id thoughts?\nI think some nice features of the handle, in addition to Brenden's, would be:\n- allowing for both user and group level permissions by url path\n- being able to easily specify user/groups with urls\nThis is probably manageable with the interface I drew up though\n. @brendensoares I think you've got this pretty well thought out. \nSo there needs to be some work in the filters ( or whatever is replacing Intercepts )\nbefore we can incorporate Auth functionality?\nAre there relevant PR's for the Intercepts replacement?\n. @brendensoares \nHere's my first take at this, it's tied to https://github.com/jinzhu/gorm right now (but that should be easily removed)  The data abstraction layer needs work to become more like what you discussed two posts up.\nexample: https://github.com/iassic/revel-modz/tree/master/samples/user_auth\nmodules:\nhttps://github.com/iassic/revel-modz/tree/master/modules/auth\nhttps://github.com/iassic/revel-modz/tree/master/modules/user\n. I feel like this function should be put in the GH Pages somewhere too\n. It seems that my more current changes from #468 are here...\n. starting from scratch with all my PR's\n. yeah, I don't know how that happended...\nI'm new to managing branches and in general working with forks & PRs\n. closing this to open a new PR without the other commit for documentation\n. this seems not correct...\n. no problem, starting from scratch\n. better?\n. no, but I did figure it out I think\n. I think I get it now  :]\n. I added basePath to the revel new template rendering context\nso that skeletons can be more flexible with file.go.template \nwith importing modules/controllers/routes\nThis seems to work on the other OSs besides Windows... of course\nOn Windows, the slashes are inserted as '\\' \nwhether or not the filepath.FromSlashes() is called\n@brendensoares @robfig \ndo you know how to deal with this slash issue on windows?\n. Notes on the windows slash issue...\npaths, passed as arguments to the template rendering, should be processed by filepath.ToSlashes()\nthe go system handles changing the slash direction on windows for the import paths\n. @brendensoares \nthis should be good to go\n. all this SGTM, and I do like fresh starts :]\nI have my own GH organization for my company\nI'm new to project management, is it safe to assume you will manage the\nmerge process?\nwww.revelframework.com is available\nI also have a server we can host on if no one else does\nOn Tue, Jan 21, 2014 at 5:35 PM, Brenden Soares notifications@github.comwrote:\n\n@robfig https://github.com/robfig @landr0idhttps://github.com/landr0id\n@verdverm https://github.com/verdverm\nI've discussed this briefly in the past with Rob. I'd like to move Revel\nto github.com/gorevel so that we can manage the team better when Rob is\nMIA. It would also allow us to consider adding additional repos (e.g.\nskeleton templates, the new mailer and other Revel modules).\nRob also has github.com/revelframework IIRC.\nlooking into GH's process for moving repos, it seems GH will forward all\ntraffic on github.com/robfig/revel to the new URL we choose, so it\nshouldn't affect anything too dramatically. Not sure about the GH pages\nsite though. I'd love to setup a dedicated domain for Revel anyway, so\nmaybe now's a good time to introduce that.\nMy last concern is Rob's other Go packages (e.g. config and pathtree). I\nam fine with leaving them with Rob since they are essentially free\nstanding. Also, moving them may affect other projects who import them.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477\n.\n. It seems fitting to make the v1 release a party with the image Rob chose\nfor the current GH site. I'm phor gorevel.com if you have it.\n\nWe should use Revel for the Revel site. I'm going to be working on my asset\nmanager the next few days, which includes processing of markdown, via\nBlackfriday. Hopefully we can carry over a lot of the docs and such.\nOn Tue, Jan 21, 2014 at 7:30 PM, Brenden Soares notifications@github.comwrote:\n\nRob and I can coordinate the move; should be straight forward. I was\nthinking it may be better to wait until we reach our first full release aka\nv1.0 (which is not yet scheduled).\nWhich os preferred? gorevel.com or revelframework.com. I kind of prefer\n\"less is more\". As far as hosting, we may even be able to get free hosting;\neither way I also manage a VPS. Ideally, it would be nice if our site was\npowered by Revel ;)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-32980833\n.\n. Stay tuned! I have this sort of functionality in my own work pipeline\n\nOn Wed, Jan 22, 2014 at 12:03 PM, Lander Brandt notifications@github.comwrote:\n\nThe markdown stuff sounds great, @verdverm https://github.com/verdverm.\nIt would be great if we could get a blog of some kind and then the docs\nwiki-like. I totally agree with the above.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-33043497\n.\n. @brendensoares\n\nme too, it will be nice to 'see' the underlying system I have developed\npdf: https://128.226.2.16/dept/ComboSem/worm-chiu.pge_gecco2013.pdf\np.s. our math department signs there own certs...\nOn Wed, Jan 22, 2014 at 2:33 PM, Brenden Soares notifications@github.comwrote:\n\n@landr0id https://github.com/landr0id I can see some points on the\nnaming, but revelframework seems so long :/ That may not matter though.\nThoughts @robfig https://github.com/robfig ?\nAlso, @verdverm https://github.com/verdverm, looking to forward to\nseeing what you're working on.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-33058476\n.\n. by seeing, I'm working with this right now\n\nhttp://egweb.bcgsc.ca/\nOn Wed, Jan 22, 2014 at 3:52 PM, Tony Worm verdverm@gmail.com wrote:\n\n@brendensoares\nme too, it will be nice to 'see' the underlying system I have developed\npdf: https://128.226.2.16/dept/ComboSem/worm-chiu.pge_gecco2013.pdf\np.s. our math department signs there own certs...\nOn Wed, Jan 22, 2014 at 2:33 PM, Brenden Soares notifications@github.comwrote:\n\n@landr0id https://github.com/landr0id I can see some points on the\nnaming, but revelframework seems so long :/ That may not matter though.\nThoughts @robfig https://github.com/robfig ?\nAlso, @verdverm https://github.com/verdverm, looking to forward to\nseeing what you're working on.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-33058476\n.\n. Maybe we narrow the choices down by associating them with milestones\nDo people prefer sooner or later?\n\n\nwith\nsooner ~ the next week or two / v8 / v9\nor\nlater     ~ for or with v1\nI think doing it sooner could help us get our flow down by v1, so once we\nhit the initial release we are already rocking and rolling.\nOn Thu, Jan 23, 2014 at 12:44 PM, Brenden Soares\nnotifications@github.comwrote:\n\nAlright, revelframework is doable. @robfig https://github.com/robfigyou already have the organization setup, right?\nWhat is everyone's thoughts on when to make this transition?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/477#issuecomment-33148519\n.\n. I think the issue is an extra level of pointer indirection is needed.\n\nthis is how I used the cache before.\nnotice that in Get, we take the address of a pointer\nand that in Set, we just use the pointer\n``` Go\nfunc (c App) connected() (u models.UserInfo) {\nif c.RenderArgs[\"user\"] != nil {\n    return c.RenderArgs[\"user\"].(*models.UserInfo)\n}\nerr := cache.Get(c.Session.Id(), &u)\nif err != nil {\n    fmt.Println(\"cache.Get() error: \", err)\n} else {\n    if u != nil {\n        return u\n    }\n}\nif username, ok := c.Session[\"user\"]; ok {\n    user := c.getUser(username)\n    err := cache.Set(c.Session.Id(), user, 30*time.Minute)\n    if err != nil {\n        fmt.Println(\"cache.Set() error: \", err)\n    }\n    c.RenderArgs[\"user\"] = user\n    return user\n}\nreturn nil\n\n}\n``\n. I saw that Go had put theeq` template function in their code\nIt probably isn't necessary any more.\n@robfig @brendensoares  thoughts? concur?\n. #388 has a discussion about this test. I think it is being done to restrict access to the jobs page to local access only. If we didn't have this check, the job status/running pages would need to be wrapped with some sort of Auth mechanism so that arbitrary users can't access these pages (and run jobs on your behalf)\n@jgr2 are you trying to access the jobs page on a remote server?\n@robfig @brendensoares thoughts?\n. This doesn't seem like a Revel issue. \nmy hunch is that this emanates from https://github.com/howeyc/fsnotify/blob/master/fsnotify_linux.go#L169\nIt sounds like an OS error thrown from syscall.InotifyAddWatch(...)\n(assuming that is the correct OS specific file from github.com/howeyc/fsnotify)\n. the Params object gets filled from the Request object in this function:\nhttps://github.com/robfig/revel/blob/master/params.go#L32\nthe Body field of the Request object is an io.ReadCloser\nhttp://golang.org/pkg/net/http/#Request\nthis is probably why it is not exposed through the Params object.\nYou can get to the Body field through\nc.Request.Body\nyou will have to close the ReadCloser once you finished reading from it\n. @SimonRichardson this looks good\nCan you open a new PR which targets the develop branch per https://github.com/revel/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed .\n. @mcheng89 any updates on this?\nI can test it on my server when the PR targets the develop branch per https://github.com/robfig/revel/blob/master/CONTRIBUTING.md#how-revel-is-developed .\n. @pushrax AFAIK we are merging a bunch of stuff into master and moving to v0.9\nthis should happen in the next day or two\n@brendensoares what's the status of the v0.9 merge into master?\n. I just tried to replicate this, but was unable to.\nI'm running the app in dev mode on develop branch\nmy static routes look like this\nGET       /ipa/*filepath                                    Static.ServeModule\nGET       /favicon.ico                                      Static.Serve\nGET       /public/*filepath                                 Static.Serve\n*         /:controller/:action                              404\n. It seems like bad practice to use a route like /*\nOn Feb 17, 2014 12:00 PM, \"Justin Li\" notifications@github.com wrote:\n\n@verdverm https://github.com/verdverm you're using a url like\n/public/app.conf?prefix=conf/?\nWith a route like\nGET     /*filepath                              Static.Serve(\"public\")\n/app.conf?prefix=conf/ hits app.conf (on master and develop).\n\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/504#issuecomment-35302423\n.\n. I didn't mean to down play the situation, your contribution is the most\nurgent fix right now. I only meant to voice my opinion the such wide open\nwildcards, in general, are probably not best practices. I use 404 return in\nmy controller/action catch all because of my opinions. They are just\nopinions though\nOn Feb 17, 2014 12:08 PM, \"Justin Li\" notifications@github.com wrote:\nWhy is that? It should be jailed to the public dir, and any files that\ndon't exist will 404. In any case, it is possible to do this, so the issue\nneeds to be fixed.\n\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/504#issuecomment-35303136\n.\n. Can you provide more details?\nCan you replicate with this patch?\n\nOn Feb 17, 2014 1:34 PM, \"mcheng89\" notifications@github.com wrote:\n\n@verdverm I'm able to replicate this issue with /public/*filepath using\nthe develop branch.\n\nReply to this email directly or view it on GitHub.\n. I was able to replicate too and can verify the patch fixes as well\n\n+1 @pushrax for finding & fixing this\n. +1 for private security reporting\n. @davidzchen @brendensoares \nthis looks good to me\n. @longbai looks good to me\n@brendensoares this looks like the last issue for v0.9 milestone\n. @pushrax @brendensoares \nsounds & looks good to me\n. @opennota @brendensoares \nseems reasonable to me from my limited knowledge about such things\n. @pushrax @brendensoares \nthis looks good to me\n. @brendensoares \nI managed to work a bug into master...\n. I was originally going to target master, will do\nmaybe it can become a script at some point\nor maybe being better about using Go's testing framework\nthat's something I need to do\n. @brendensoares retargeted\n. what about this: http://goconvey.co/\nand this:\nhttp://blog.lazywei.com/2013/11/25/goconvey-and-gocheck/\nnot gdb, but they both look pretty good\ngdb related:\nhttp://golang.org/doc/gdb\nhttp://thornydev.blogspot.com/2014/01/debugging-go-golang-programs-with-gdb.html\n. @landr0id probably want to check the error code either way ;]\n. All sounds good to me\nOn Feb 26, 2014 1:37 PM, \"Justin Li\" notifications@github.com wrote:\n\nA few things:\nLet's follow semver http://semver.org/ (major.minor.patch). With that\nterminology in mind, we can create a patch branch, and have bugfixes\ntarget that branch. Every once in a while (depending on necessity), we can\nmerge patch into master and rebase develop.\nI think GH issues are fine for this kind of discussion, but I don't have a\nstrong opinion either way.\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/530#issuecomment-36160477\n.\n. in revel/samples/chat/app/views/WebSocket/Room.html\n\nchange the socket url to be /websocket/room/socketS?user=\n(notice the capital S added to the end of socket)\nbasically screw up the url location\n. @brendensoares I would still classify this as an bug\nrevel lets the connection pass the routing filter\nat some point the header section is written to a hijacked connection\nthis causes the golang net/http to panic\nwhich ends up getting caught by the panic filter.\nI classified it as a bug because of the panic\n. PR for this #556 \n. I managed to handle this functionality in the custom Listener\nhttps://github.com/iassic/revel-modz/blob/develop/modules/grunt/grunt.go\n. that sounds reasonable\nI'm not sure what the best practices are for such sensitive things\nHow do people do this in production environments? \n. If someone wants to include the file, I think they could use the github.com/robfig/config.LoadConfig(filename)\nas long as the file is in the conf directory\nand then use\ngithub.com/robfig/config.Merge(config)\nto combine them\n. @brendensoares I'm learning :]\n. No, I think not\nOn Mar 3, 2014 7:50 PM, \"Brenden Soares\" notifications@github.com wrote:\n\n@verdverm https://github.com/verdverm Got it. Thought you were\ninsisting it be done with the config package instead of via environment\nvariables.\nAre there any actionable items with this issue now that we've discussed it\na bit?\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/546#issuecomment-36580153\n.\n. Yeah, I was thinking about that\n\nit's done slightly differently in the three places I know of, or at least\nthe local context is interleaved differently. I'd like to untie that code\nif possible. I made some of them recursive functions, the only issue might\nbe circular links. I'm pretty sure linux handles these internally at 3\ncycles. I'm not sure about inside of Revel, Go, or other OS\nI have to give it some more thought this weekend\nOn Mon, Mar 17, 2014 at 10:26 PM, Justin Li notifications@github.comwrote:\n\nIt would probably be better to make an abstracted filepath.Walk that\nhandles symlinks, so we can reuse it everywhere.\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/pull/555#issuecomment-37893756\n.\n. Yeah, I think I have a PR which needs testing by others\n\nWorks great for me, but I don't know if I've stressed it enough\n@revel/core\nWe probably need to talk more about testing, when and how\nOn Thu, Mar 27, 2014 at 2:42 AM, Brenden Soares notifications@github.comwrote:\n\n@verdverm https://github.com/verdverm util.go would be a great place to\nput such a symlink aware file path walker. Any progress on this?\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/pull/555#issuecomment-38773307\n.\n. Generally we should abstract these replicated functions out to make our own\nfilepath.Walk function which does follow symlinks\n\ndraft: https://gist.github.com/verdverm/75b036439591ac0ef47e\nwe should probably call it:   revelWalk\nThere are walk functions, which make use of filepath.Walk, in...\n- watcher.go\n- template.go\n- i18n.go\n- harness/reflect.go\n. Yup, try changing the client WS connect location on the chat app and look\nat your browser console\nOn Mar 27, 2014 2:14 AM, \"Brenden Soares\" notifications@github.com wrote:\n\n[image: :+1:] Looks good on the surface. Have you tested this yet?\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/pull/556#issuecomment-38772153\n.\n. #555 may be of some help here.  #555 enables symlinks to be watched as well. I use this to build several apps with common functionality symlinked in and app specifics overridden with modules. One really nice thing about it, is that I can have app specific templates for the header/menu/footer and these get propagated into the symlinked views/controllers. Everything gets picked up and resolved with the current framework + the symlink enhancements \n. @landr0id I concur \n\nIt deals with some of my external dependencies.\nIt does not handle packages I import however, which do not contain an app path\nIt looks like, with the current code base, you could put the business logic an a module, with code to be watched under an app directory, and include the module in your app.conf in it should be added to the watch list\nI think you could also do something like...\ninit() {\n    myWatched := []string{\n        \"/absolute/path/to/the/code/to/be/watched\",\n        revel.ResolveImportPath(\"module/import/path\"),\n    }\n    revel.CodePaths = append(revel.CodePaths,myWatched...)\n}\n@revel/core could we expose a flag or function to add external dependencies to the watched list?\nI feel like this should be almost transparent to the user, besides setting a watch.imports flag to true\n. here is a longer example in the context of a form\n{{with $field := field \"usersignup.Email\" .}}\n<div class=\"large-12 columns\">\n    <label for=\"{{$field.Id}}\">Email <small>required</small>\n        <input id=\"{{$field.Id}}\" name=\"{{$field.Name}}\" \n------>       value=\"{{firstof $field.Flash $field.Value}}\"   \n              class=\"{{$field.ErrorClass}}\"\n              type=\"text\" \n              placeholder=\"user@domain.com\" \n              autofocus/>\n    </label>\n    {{if $field.Error}}<span class=\"error\">{{$field.Error}}</span>{{end}}\n</div>\n{{end}}\n. Here is the switch version:\nGo\n\"firstof\": func(args ...interface{}) interface{} {\n    for _, val := range args {\n        switch val.(type) {\n        case nil:\n            continue\n        case string:\n            if val.(string) == \"\" {\n                continue\n            }\n            return val\n        default:\n            return val\n        }\n    }\n    // if we get here, all of the args were 'null'\n    return template.HTML(\"\")\n},\nthis would be useful for time perhaps:\nGo\n        case time.Time:\n            if val.(time.Time).IsZero() {\n                continue\n            }\n            return val\n. Closed for #586 \n. I inserted some print statements\nGo\n    fmt.Printf(\"\\nresp:\\n%+v\\n\", t.Response)\n    fmt.Printf(\"\\nbody:\\n%+v\\n\\n\", t.Response.Body)\n    if t.ResponseBody, err = ioutil.ReadAll(t.Response.Body); err != nil {\n        panic(err)\n    }\nwithout compression\n```\nSet up\nresp:\n&{\n  Status:200 OK \n  StatusCode:200 \n  Proto:HTTP/1.1 \n  ProtoMajor:1 \n  ProtoMinor:1 \n  Header:map[\n    X-Frame-Options:[SAMEORIGIN] \n    X-Xss-Protection:[1; mode=block] \n    Date:[Wed, 26 Mar 2014 20:07:48 GMT] \n    Content-Length:[2044]   *   missing in compressed version *\n    Content-Type:[text/html; charset=utf-8] \n    Set-Cookie:[REVEL_FLASH=; Path=/ REVEL_SESSION=9befdcbe78163946de48d3e13fa61b5592ca0b42-%00_TS%3A1398456468%00; Path=/; Expires=Fri, 25 Apr 2014 20:07:48 UTC] \n    X-Content-Type-Options:[nosniff]\n  ] \n  Body:0xc2081776c0 \n  ContentLength:2044 ******\n  TransferEncoding:[] \n  Close:false \n  Trailer:map[] \n  Request:0xc208192410 \n  TLS:\n}\nbody:\n&{body:0xc208177680 mu:{state:0 sema:0} closed:false rerr:?reflect.Value? fn:0x501b00 earlyCloseFn:0x501a90}\nTear down\n```\nWith compression\n```\nSet up\nresp:\n&{\n  Status:200 OK \n  StatusCode:200 \n  Proto:HTTP/1.1 \n  ProtoMajor:1 \n  ProtoMinor:1 \n  Header:map[\n    Date:[Wed, 26 Mar 2014 20:08:49 GMT] \n    Content-Type:[text/html; charset=utf-8] \n    Set-Cookie:[REVEL_FLASH=; Path=/ REVEL_SESSION=c3278f603862079c46cbc2efe41a47782c2295f1-%00_TS%3A1398456529%00; Path=/; Expires=Fri, 25 Apr 2014 20:08:49 UTC] \n    X-Content-Type-Options:[nosniff] \n    X-Frame-Options:[SAMEORIGIN] \n    X-Xss-Protection:[1; mode=block]\n  ] \n  Body:0xc20800d7c0 \n  ContentLength:-1   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   Hmmm, what's up with this?\n  TransferEncoding:[] \n  Close:false \n  Trailer:map[] \n  Request:0xc2080da5b0 \n  TLS:\n}\nbody:\n&{body:0xc20817a720 mu:{state:0 sema:0} closed:false rerr:?reflect.Value? fn:0x501b00 earlyCloseFn:0x501a90}\nTear down\n```\n. should we try this with one or two other template engines that have some amount of following?\n. Does this handle per-page CSRF tokens?\nI'm currently using github.com/cbonello/revel-csrf and I recall a comment on some issue about wanting per-page tokens\nfor example, what happens if I have multiple tabs open of the same form? or two different pages from the same site?\nlooks good, thanks?\n. Saw this today on HN:  https://github.com/julienschmidt/go-http-routing-benchmark\nRevel wasn't included in the list ... :(\n. I was getting the same secret key in app.conf\nI was trying to minimize the files I touched, I'll move it\n. It's a Go import path, something we can 'go get'\nRob had a comment in #311 \n\"It seems like we may want to \"go get\" the provided import path for the user -- seems like a common case is not having it cloned yet. What do you think?\"\nas to the comment about \"github.com/robfig/revel\" import deletion\n(said comment which I am unable to find on github)\n...\nis not actually a deletion, but a reordering of the imports into groups\nso that the import statement looks something like:\nimport(\n// Go standard library packages\na_blank_line\n// Go third party packages\na_blank_line \n// Application specific packages\n)\nwith each group alpha sorted\n. it's plural in sample/booking/app/init.go\nI'll fix it in those two places and any others that might be plural\n. yea, I always forget the order of the acronym\n. I was planning to do the filter stuff, together, as a separate PR.\nI think it will involve changes beyond the scope of this PR\n. I <3 data structures\n. difference of style, I took it out\n. I'm not sure I understand what you mean, or what you comment is addressing\noh wait maybe I do...\nHaving comments in the code, \n    from commented sections of text,\nallows godoc to generate the code in a gray block\nand the nested comments look like regular comments \nin the output from godoc\nexample: http://golang.org/pkg/sort/#Search\n. as in an arbitrary controller\nhow about   \"yourapp/app/controllers/somefile.go\"\n. any suggestions?\ninitGoPathVars() ?\n. You mean having one longer function like it is currently?\nRob had asked me to abstract the function\nso I made the one function into several\nI think it's better for maintainability and there might be more of this in the other files in the directory.\nI was going to look, but I haven't yet. More work than I want to do for this PR right now\nRelevant PRs to this:  #307 #311 \nthere are some outdated comments that are on the subject\n. I think Rob and I might both have issues with pluralization. I imagine it's pretty spread out through my code.\nAt least I'm converging to a style, this open source stuff is fun. Soon I'll be on the other side of the process. I have an intern this semester, who may end up contributing code as well. \nOn the args []string  I think there is a pattern that will emerge, at least in this directory, of:\nfunc processRevelArgs(args []string) \nI'd like to abstract this at some point. It should make adding features to the revel command easier and more maintainable. maybe for v1.1. Doesn't seem that important right now\n. What is this line for? trimming a trailing '-'\nWhat if the end of the string is '---'\nor starts with a '-'\nMy thought is that this should be a trim on both ends and that we might use\nhttp://golang.org/pkg/bytes/#Trim to achieve the same\n. it's a range over a string\ngood details near the bottom of http://blog.golang.org/strings\n. It should handle all types as is. Takes in and returns interface{}\nfirstof arguments get evaluated before being passed in,\nso when we have an arguement, such as flash.Value, if it's not there, we get the empty string\nThat's why the check for string is there\nI think val.(string) == \"\" should be one of your fancy reflect things\nsomething like reflect.ValueOf(val).KindOf() == reflect.String && val.(string) == \"\"\npushing new commit with fix now\n. replace this with filepath.WalkFunc  http://golang.org/pkg/path/filepath/#WalkFunc\n. replace this with filepath.WalkFunc http://golang.org/pkg/path/filepath/#WalkFunc\n. I got an error here because ImportPath isn't passed to the template render engine\nresult was: \"<no value>/app/boot\", which is weird because I thought it should return the empty string or something that results in zero runes. This <no value> could be due to a change in golang's or our template functions\nDid you make a change to your revel/cmd repo? in new.go?\nIt probably makes sense to pass this ImportPath value into the rendering context\nThe current context includes:\nGo\n\"AppName\":  appName,\n\"BasePath\": basePath,\n\"Secret\":   generateSecret(),\nWe just need to add the following line (to the above code):\n\"ImportPath\": basePath + appName,\n. ",
    "AllenDang": "Yeah! I see. I misunderstood what DELETE means in restful! Thanks for quick response!\n. This panic happens very frequently, what would lead to this?\n. I tried your fix on both master and v1 branch, issue still there. The error messages are\n2013/09/05 12:39:43 http: proxy error: EOF\n2013/09/05 12:39:53 http: panic serving 127.0.0.1:55503: interface conversion: interface is nil, not map[string]*revel.ValidationError\n. It keep pumping out. I filed a similar issue before and be fixed, but seems the fix doesn't cover all angle. \n. Any thought on this? This is kind of critical for my web site. It caused a data broken this morning (server side logic has been interrupted during data insertion), and my site was down for 30 min to recover.\n. I tried this way and \"From\" is not working. Syntax error (8-bit characters not allowed). I use \"\u5c71\u5761\u7f51 < 123@abc.com >\", is it because I use Chinese character?\n. ",
    "tpjg": "The Get requests indeed automatically follow redirects (unless the CheckRedirect func prevents it), however the PostForm method does not follow redirects. Which is fine, I even prefer that so I can check that indeed a 302 was received and then continue with a Get.\nAnd you're right, using the CookieJar would be the best solution of course. I didn't yet have a CookieJar ... and only just found out Go 1.1 is out. After installing that and assigning a CookieJar it still doesn't seem to present cookies after a redirect. I'm probably doing something wrong ...\ngolang\nfunc (t UserTest) Before() {\n    println(\"Set up UserTest\")\n    var err error\n    t.Client.Jar, err = cookiejar.New(nil)\n. Ok, that was too early in the morning for me. Seems not only does the CookieJar do it's work, now also PostForm seems to follow redirects. So that works!\n. Is it me, or must the templates now be in lower case? I had for example {{template \"User/form.html\" .}} and after upgrading Revel that no longer worked. Changing to \"user/_form.html\" made it working again. I'm not against case insensitive, but it seems to me that you now _must use all lower case in your templates to include others?\n. I don't know how to retarget and will create a new PR instead.\n. Just FYI: I have tested this myself and am currently using an app with nginx in front of it. Also I'd like to note that the Play! framework and Rails (typically deployed using Passenger) have this concept builtin.\nlocation /approot {\n            proxy_http_version 1.1;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_pass http://localhost:9000;\n        }\n. Because the code generates a URL that should not be escaped. Of course this is optional and can be reversed to an ordinary string.\n. Could be anything. In the Play framework it is application.context. I don't know what the best or most descriptive name is, BaseURL also sounds good.\n. ",
    "darkhelmet": "When I wrote my webutil package, I wanted something above frameworks. The gzip filter doesn't care if you're using the base net/http package or this framework or that framework or whatever, it just cares about HTTP.\nI think altering the revel specific to allow the gzip filter to be written easily would be good overall, but then you'd still need a revel specific piece of code to do it. The http.Handler based gzip filter can work in every go program, as long as you can hook into the Handler construction.\nIn another framework I tried to use a filter style approach with their API, and it was really kind of annoying, as I had to repeat myself all over the place to say \"oh yes, use this here, and here, and here...\". Now I just build up my handler once and it works on everything.\nI don't think the rack API is really is good for Go because of the differences in concurrency and how easy it is to stream content. That being said, I could probably think of a better list of pros/cons for that style of API, but even the rack/ruby community is wondering how they can change the API.\nSo yeah. I'm rambling, I don't know. This was a quick, easy change to give access to the construction of the handler. :smile: \n. I'm not sold on my implementation, but I still think the ability to wrap/override the handler would be a good thing.\n. This was one: http://blog.plataformatec.com.br/2012/06/why-your-web-framework-should-not-adopt-rack-api/\nThere were others, but I can't seem to find them.\nBasically I want two things: to not be trapped in a call/return style API that makes streaming a pain, and to be able to use framework agnostic http.Handler wrappers.\n. How about this? Now the init function looks like this:\ngo\nfunc init() {\n    handler := revel.Handler\n    handler = webutil.AlwaysHeaderHandler{handler, http.Header{\"X-Revel\": {\"Hello\"}}}\n    handler = webutil.GzipHandler{handler}\n    revel.Handler = handler\n}\n. Yep, you're right, this PR isn't needed!\n. Should I have to do anything special in my handler? I would think not...\n. Yes, so my assumption would be that the server handles the HEAD by ignoring/not sending the body.\n. Be very sneaky and feed things ioutil.Discard?\n. ",
    "plamb": "Rob, thanks for looking at it. I'll clean it up tomorrow. I did wonder a couple of times about embedding the ResponseWriter and should have asked about it.\n. It's been a few days and if I recall correctly, I renamed that function because it clashes with an http.ResponseWriter one of the same name (but it's been long enough that I could be totally wrong). I'll take a look at it when I get back tonight.\n. Rob, somethings not right. I put those methods back as one and just renamed it so that it wouldn't clash (error below). I thought I'd pushed that change to github but it doesn't look like it. Sorry for the hassle, I'll clean it up.\n. Rob, let me know if this isn't a clean commit with just the changes to the Response.Out. I'm still trying to work out my git flow for handling a fork correctly. Even though, I closed the old request it looks like github remembers it and brings in comments from previously closed requests.\n. I had some very similar thoughts this past weekend but got completely distracted with battling git. Besides rails, I've used play 2.0 with scala and was at first really put off by the whole Ok(...) thing but we do have some cases where we don't return an Ok and I found that going back months later it made the code very readable (which I cannot say for scala in general).\nIt's very much the rails way to set headers for you based on response types. The problem we get into though, suppose you have a route that includes a :wants .pdf, rails is going to automatically set the content-type to 'application/pdf' and write it out but what happens if the file isn't there and you need to return an html error message instead (clients don't always want to see a 404 and their may be other ways to handle it). In rails, you end up writing a controller method that  duplicates much of the built-in functionality and is rather long and nasty. This is a bit of  a convoluted case though, I don't see someone using angularjs and wanting to send back a non-json response.\nI'll put some more thought into it over the next day or two and see if I have any further ideas.\n. In Play 2.x your BaseResult is named SimpleResult\n``` scala\ncase class SimpleResult(header: ResponseHeader, body: Enumerator[Array[Byte]],\n    streamingStrategy: StreamingStrategy = StreamingStrategy.Buffer())\ncase class ResponseHeader(status: Int, headers: Map[String, String] = Map.empty)\n```\nAlso in play (in scala, things are a bit different in java) you can do something like \nscala\nOk(<h1>Hello World!</h1>).as(HTML).withHeaders(CACHE_CONTROL -> \"max-age=3600\", ETAG -> \"xx\")\nBoth Play and Rails have the concept of a result and a response. In rails headers are part of the response object and the documentation even says it's unusual for the code to do anything with them. Play wraps the header access into the results (because it's really unusual to go down and mess with the netty response itself).\nI had not noticed that in both play and revel there's an encapsulation concept where Controller extends Results which extends Response. Instead of starting at the bottom of the chain, I probably should have looked from the top down.\nNot really advocating anything here, just really trying to put some ideas into the pipeline.\n. The comments in the code for play 2.1 have quite a few deprecations and indications that SimpleResult will be the only ResultType in play 2.3.\nFor that single use case rails completely got in the way. In fact, it was one of two pieces that I split off into a play 2.0 based service late last year. The other piece was very performance bound and moving it off ruby/rails to play/scala gave it a huge boost. Those were also the first two things that I moved to go.\nMy original thought here was that I didn't like the way response.Out.Headers() read and wanted the syntax to be response.Headers() (which is very rails like). I've been wondering if that's really the place to put header access, should it be in the result instead? The way things are working is that the controller has a result and a response, with the response being the low-level way that result gets written to the client. Should header manipulation happen at the result instead so that there's little to no reason to do anything with the response object itself?\nAlso one of the things I noticed with play is that without a content type set it does content determination like http.ResponseWriter does. For both of them they look at the first 500ish bytes to determine what kind of content you have. I'm not sure if that's hugely useful and by just setting the content type you can avoid that code from running.\n. Rob, I'm a bit over loaded this week, I'll do my best to revisit this later in the week.\n. I keep 100% of the db code within the models, fat model style, as opposed to the samples that have it in the controllers. And I have 3 different database connections and redis. What I did was create an app/db directory and there's a .go file for each of my connections (one is through gorp, one through plain sql and the third is nightmare from hell). I adapted the current db module instead of using it in the controller. Here's a simplified version of app/db/gorp.go that I've been putting together for a sample app. Changing it for multiple connections is really straight forward.\n``` go\npackage db\nimport (\n    \"database/sql\"\n    \"github.com/coopernurse/gorp\"\n    _ \"github.com/lib/pq\"\n    \"github.com/robfig/revel\"\n    //\"github.com/robfig/revel/modules/db/app\"\n    \"log\"\n    \"os\"\n)\nvar (\n    Db     sql.DB\n    Driver string\n    Spec   string\n    Dbm    gorp.DbMap\n)\nfunc init() {\n    revel.OnAppStart(func() {\n        // Read configuration.\n        var found bool\n        if Driver, found = revel.Config.String(\"db.driver\"); !found {\n            revel.ERROR.Fatal(\"No db.driver found.\")\n        }\n        if Spec, found = revel.Config.String(\"db.spec\"); !found {\n            revel.ERROR.Fatal(\"No db.spec found.\")\n        }\n    // Open a connection.\n    var err error\n    Db, err = sql.Open(Driver, Spec)\n    if err != nil {\n        revel.ERROR.Fatal(err)\n    }\n\n    Dbm = &gorp.DbMap{Db: Db, Dialect: gorp.PostgresDialect{}}\n    Dbm.TraceOn(\"[gorp]\", log.New(os.Stdout, \"olr_site:\", log.Lmicroseconds))\n})\n\n}\n```\n. ",
    "anta40": "Hi Rob,\nI just found that I have 2 different versions of revel.exe, and the older version was in %PATH% while the other was not. I removed that and updated revel. Now it works.\n. ",
    "pix64": "Actually using strings.Title is a bad idea. /apP/index also will to use /AaP/index.html and fail. It would be better to lowercase the controller name. The downside to this is you'll have to rename all your view folders.\n. Oops. Forgot to restart Revel before testing. Fixed\n. Sorry about that. I don't know how to work GitHub.\n. You're right. Somehow I got stub in my brain.\n. > Another solution is to check the c.Action string in the interceptor, and just returning if you want to skip it for that action.\nThanks, that'll work for my purposes.\n. ",
    "mattetti": "Quite note, commenting out the module from app.conf fixed the problem:\n# module.static=github.com/robfig/revel/modules/static\nI guess modules might need to be copied over??\n. ",
    "derekchiang": "@robfig Now it works.  Not sure what's the difference though :P\n. ",
    "kyleconroy": "Awesome, thanks\n. ",
    "mattico": "go get -u ... fixed the problem until I killed the app again.  I deleted the whole robfig/revel directory, and then ran go get ... again, and now it seems to work.  An easy fix for a strange error.  Thanks for your help.\n. ",
    "wlaurance": "Any progress on this front? @robfig @arnaudbriche \n. I'm starting to use App Engine more and I really enjoy Go. So yeah, I'll look at things and report any progress I can make\n. ",
    "JustinBeckwith": "Greetings folks!  I know this is a bit of an old thread, but I wanted to let you know I wrote a post on how to run revel on AppEngine.  It takes advantage of the new Managed VM feature:\nhttp://jbeckwith.com/2015/05/08/docker-revel-appengine/\n. ",
    "3d0c": "What about an abstract Config and a several adapters for YAML, JSON, ini-based configs.\n. I've read it. But right now i've got a case when I need two database connection, i've done it this way. \nAny way, i'll rewrite connections-module with config inside.\nBy the way, if You want some model implementation, multiple connection is a must have feature. Config -> Connections -> Adapter -> Model (IMHO)\n. First of all, You are using an outdated version of Go. Ubuntu 13.04 has 1.0.2 version. There is no cookiejar package. Just install the last Go binary from https://code.google.com/p/go/downloads/list\nSetup $GOROOT.\nEnsure $GOROOT is in Your $PATH.\nAnd try again.\n. ",
    "dkulchenko": "I'll second the request for multiple config backends. In my case, I'm not using YAML or JSON; my config is managed cluster-wide and is being sourced from an external DB (e.g. etcd or redis) at runtime. There's currently no way to do so with revel, since the ini config file is hardcoded into config.go, so I'm maintaining a local fork of revel with the backend in config.go switched out for my own custom backend.\nPluggable config support would be very helpful.\n. ",
    "SmartMessage": "This is a delayed loading, when I first visited the localhost: 9000, this code will be revel call.\nWhether the configuration file can be used the way, revel startup module by loading a static approach to implementation. Thank you very much\n. Thank you very much\n. ",
    "wildattire": "Is there any reason this issue is closed?  SmartMessage is correct.  init.go's init() function is not called until the first request, as is everything inside it, including the OnAppStart() call.  It is NOT called on server startup.\n. Ok, thanks for the clarification.  It can become an issue if the service loading takes a long while to complete and the  pages depend on those services being loaded - which results in longer development iteration in acceptance testing for initial page load.\nBut now that we know the issue, we'll find a way around it.  Thanks.\n. We are repeatedly bitten by this, as will be anyone who breaks their project up into multiple modules.\nOur solution is to patch errors.go by replacing BasePath with the GOPATH for any new revel installation.\n. Is there any hope of re-opening this? We are experiencing the exact same problem after upgrading from Go 1.7 to Go 1.9.. Thanks. Yes, we've done a clean rebuild of revel and pretty much all dependencies everywhere, no no avail.\nin this line:\nif renderArgNames, ok := c.MethodType.RenderArgNames[line]; ok { ... }\nThe value of line is 478, but c.MethodType.RenderArgNames has a single entry in it, with a key of 479. So perhaps there is an off-by-one error somewhere?\nWe've kludged up a little patch in the Render() function to reassign line in the event there's only one entry in the map:\nif _, ok := c.MethodType.RenderArgNames[line]; !ok && len(c.MethodType.RenderArgNames) == 1 {\n        for k := range c.MethodType.RenderArgNames {\n            line = k\n        }\n    }\nWhich resolves the error.\nI can also confirm that your suggestion of manually setting ViewArgs prior to zero-param Render() also works. Thanks.\n. We are passing:\n - 2 large structs with strings, ints, bools, []strings, etc\n - 7 struct slices, all of different types, each with nested structs, strings, etc\n - 5 strings\n14 parameters total, most of which are slices of structs. It's a fair amount of data. Sorry, not at liberty to explicate the structure of all of them.\n. Oops, I only saw your question for some reason, not the fix. I can confirm, when we put all our parameters on a single line, it works fine. Thanks!. ",
    "arvenil": "@wildattire Why in prod mode it runs immediately and in dev mode not? Can I somehow change that that it will run immediately also in dev mode?\n. But the question is why in case of \"build-in\" revel assertions like t.AssertEqual() it shows line when assertion fails In /tests/apptest.go (around line 8):       t.AssertEqual(\"a\", \"b\") and not where panic occurred like it happens with my custom assertion t.AssertNotEqual(\"a\", \"a\") In /tests/ExtendedTestSuite.go (around line 12):    panic(fmt.Errorf(\"(expected) %v == %v (actual)\", expected, actual)).\n. @brendensoares brendensoares Yes I run them from command line as I showed in examples above. But I don't get the answer :) Long story short - can I somehow achieve the same result with my assertions as with revel assertions? :) I'm quite new with go so there is never too much of explanation :)\n. Thanks, and no worries, sadly I don't use revel anymore but maybe in future this will become useful ;)\n. > Why not do a try?\nSeriously, I didn't even dare to think this could actually work out of the box without any additional configuration - shame on me I doubted on this! Just tried it and works flawlessly! \n\nJust make sure all your files belong to controllers package and there are no any other packages in controllers' folders.\n\nI'm not sure what you mean here, I've created app/controllers/account/settings.go and the package is account here - works perfectly fine.\n@xpbliss @anonx @brendensoares Thanks!\n. Good to know (though never had multiple packages at same folder anyway)\n. @notzippy How from revel.ServerWebSocket I can access *websocket.Conn? \n. ",
    "yaotian": "Please close it. Wrong bug submittion\n. thanks.but the question is real field also need be changed based on custmer\ninput\n\u00d4\u00da 2013-7-11 \u00c9\u00cf\u00ce\u00e76:31\u00a3\u00ac\"Ashwin Purohit\" notifications@github.com\u00d0\u00b4\u00b5\u00c0\u00a3\u00ba\n\nIf you're using Gorp like I am, the way I do this is with Gorp's transient\nfields (https://github.com/coopernurse/gorp):\ntype Person struct {\n    Name    string db:\"name\"\n    Ageint  db:\"age\"\n    HisName string db:\"-\" // Won't get saved\n    HisAge  int    db:\"-\" // Won't get saved}\n...\n// Then you can modify the real fields before they get savedfunc (p *Person) PreInsert(s gorp.SqlExecutor) error {\n    p.Name = fmt.Sprintf(\"Mr. %s\", p.HisName)\n    p.Age = p.HisAge + 5\n    return nil}\n\u00a1\u00aa\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20778447\n.\n. For example, i want to make a crawl for users. Users wants different things\nfrom web pages. So i need provide a way for them to input what they wants.\nThen these things will be used to make the real columns in the database.\nBut before we create the database, we don't know which columns they want.\nMaybe 5 columns, maybe columns.\nThat's the question.\n\n2013/7/11 Ashwin Purohit notifications@github.com\n\nI'm not sure I understand. If all the fields are tied to real database\ncolumns, why not just set the values on some of them, and not others?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20783193\n.\n. yes. I'm dynamically creating database columns based on the user-input.\nDon't know how to make this model.\n\n2013/7/11 Ashwin Purohit notifications@github.com\n\nSo you're dynamically creating database columns based on user-input? Or do\nyou have the structure of the columns themselves, but not the row data?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20784393\n.\n. Thanks Rob. My current solution is same as you. And i am using json format\nfor that.\nI guess this is the most possible solution for the question.\n\n2013/7/11 Rob Figueiredo notifications@github.com\n\nAre you aware of any ORM system that allows this? I would be curious to\nsee how they do it\nAFAIK you can not use any ORM for this purpose; you would have to\nautomatically generate DDL, and then depending on how you need the results\nyou could maybe just select * from the row into a list of interface{} and\nthen type-switch for each value, assuming that you need to know their\ntypes.\nBut actually, I would recommend you discover another way to implement\nthis. For example, you could instead use a a schema like this (although\nthis performs very poorly with RDBMSs):\nUserValues\nUser: UserId\nRow: RowId\nKey: UserColumnName\nValue: ValueAsAString\n(or maybe have one value per data type, e.g. int, string, date)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20811810\n.\n. Jeff, Thanks for the reply.\nWhat is exact meaning of \"omitempty struct tag\" in your previous email? Do\nyou have any example that i can understand correctly?\n\n2013/7/12 Jeff Graham notifications@github.com\n\nAlternatively it sounds like you may want to consider a document data\nstore. Mongo handles stuff like this pretty gracefully. With mgo/bson you\ncan define a \"super\" struct and pass the omitempty struct tag to prevent\nempty fields from being stored.\nOn Thu, Jul 11, 2013 at 6:40 AM, Rob Figueiredo notifications@github.comwrote:\n\nAre you aware of any ORM system that allows this? I would be curious to\nsee how they do it\nAFAIK you can not use any ORM for this purpose; you would have to\nautomatically generate DDL, and then depending on how you need the\nresults\nyou could maybe just select * from the row into a list of interface{}\nand\nthen type-switch for each value, assuming that you need to know their\ntypes.\nBut actually, I would recommend you discover another way to implement\nthis. For example, you could instead use a a schema like this (although\nthis performs very poorly with RDBMSs):\nUserValues\nUser: UserId\nRow: RowId\nKey: UserColumnName\nValue: ValueAsAString\n(or maybe have one value per data type, e.g. int, string, date)\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/robfig/revel/issues/215#issuecomment-20811810>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/215#issuecomment-20836288\n.\n. :(\nAny work around for this?\n\n2013/7/16 Rob Figueiredo notifications@github.com\n\n$field can't really handle maps.. it only works with single-valued fields\nunfortunately.\nIn fact, I don't believe that the binder handles maps right now, although\nI had a half-completed changeset to add that support..\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/223#issuecomment-21017502\n.\n. And i know less revel's source codes. I can't know whether they can work\njust by just this.\nSo i copy them into binder.go and they can't compile.\n\n2013/7/16 Rob Figueiredo notifications@github.com\n\nFor the form, just don't use the $field helper -- it doesn't do anything\nmagical anyway.\nFor the binding, how do you feel about implementing support for\nmap[string]string binding? Here is the implementation I started:\n+func bindStringMap(params *Params, name string, typ reflect.Type) reflect.Value {+       result := map[string]string{}+       for key, values := range params.Values {+               if !strings.HasPrefix(key, name+\"[\") || key[len(key)-1] != \"]\" {+                       continue+               }++               keyName := key[len(name)+1 : len(key)-1]+               result[keyName] = values[0]+       }+       return reflect.ValueOf(result)+}++func unbindStringMap(output map[string]string, name string, iface interface{}) {+       for key, value := range iface.(map[string]string) {+               output[name+\"[\"+key+\"]\"] = value+       }+}\nIt had occurred to me that it would be possible to support more types than\njust map[string]string -- it should be possible to support keys and values\nof any type that the binder can handle, by delegating.. but I suppose we\ncould start with just map[string]string\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/223#issuecomment-21042188\n.\n. \n",
    "metafex": "No problem, if you have any suggestions on how to handle the harness and application relation regarding re-deployment on source changes I'd be happy to implement it. The current state does not feel quite simple enough (IMO).\n. Ah, looks much nicer now :+1: This helps me alot since I'm using it in production already.\n. @martinml this is not a go bug, and it is unrelated to your original problem. The output you see is what you are supposed to see, the paths are from the debug symbols, and it looks like the distribution was build on Windows Vista/7. Your code does exactly what it is supposed to do: print the call-stack.\n. I did a \"strings runtime.a\" and found out that there are multiple occurences of \"C:/\". So yeah, those are generated at compile-time. Unfortunately I don't have an in-depth knowledge of the go runtime internals, therefore a I don't know how to quickly fix this.\n. AFAIK the Go TLS implementation does not support Perfect Forward Secrecy, so this is a non-issue.\nedit: The attacker also needs a memory dump of the server(!) process. I'd say this attack is no concern at all.\n. > Definitely. How do you see the permission strings being used?\nOne approach that is really easy to implement (and I'm currently doing with an app) is using action based permissions. In the DB i have a table where all permissions are listed and another one with the user id and a permission id to see if the user is allowed to call that specific action.\nThe only drawback with that is that is much work w/o an management interface to maintain this.\n. Sounds good to me. When this gets merged I'll refactor the permission stuff from my app out, polish it a bit and make a PR of it too.\n. In the logs it says: ERROR 2013/10/23 08:32:59 server.go:92: Failed to listen: listen tcp :9000: address already in use. Sometimes running the integration test again helps.\n. ",
    "Michael2008S": "I use \"{{range $.answerType}}\" to fix that problem,but still heve another problem:\nI can't use {{option $field {{.Id}} {{.Describe}} }} like this, how should I do?\n\nTemplate Compilation Error\nunexpected \"{\" in operand; missing space?\nIn CusSvrQaMgr/Index.html (around line 39)\n34:\n    {{with $field := field \"customerServiceQa.AnswerType\" .}}\n35:\n    \n36:\n37:\n        {{option $field \"\" \"\" }}\n38:\n        {{range $.answerType}}\n39:\n            {{option $field {{.Id}} {{.Describe}} }}\n40:\n            {{.Id}}{{.Describe}}\n41:\n        {{end}}\n42:\n43:\n    \n. No,It didn't work with  {{option .Id}} ,and sometimes I will not just use the \"Id\" maybe I'll set the field with another string .\n\nTemplate Execution Error\n: executing \"CusSvrQaMgr/Index.html\" at : wrong number of args for option: want 3 got 1\nIn CusSvrQaMgr/Index.html (around line 54)\n49:\n50:\n    \n51:\n    Answer Type:\n52:\n    {{with $field := field \"customerServiceQa.AnswerType\" .}}\n53:\n    \n54:\n        {{option $.answerType.Id }}\n55:\n    \n56:\n    {{end}}\n57:\n  \n58:\n. Finally I can do it like this code:\n\n\nAnswer Type:\n    {{with $field := field \"customerServiceQa.AnswerType\" .}}\n    \n```\n    {{option $field \"\" \"\" }}\n    {{range $.answerType}}\n        {{$id := .Id}}\n        {{$name := .Name }}\n        {{$describe := .Describe }}\n        {{option $field $name $describe }}\n        {{.Id}}{{.Name}}{{.Describe}}\n    {{end}}\n\n{{end}}\n```\n\n\nbut still have a problem that I can't do it like this \"{{option $field $id $describe }}\",it tell me that the error:\nTemplate Execution Error\n2: executing \"CusSvrQaMgr/Index.html\" at <$id>: wrong type for value; expected string; got int64\n. It work. Thank you  @robfig .\n. The value I was read in the database but not int the previous reques.You mean I should set the Flash value in the controllers? So how should I set the Flash value?\nfunc (c CusSvrQaMgr) EditQa(qaid int64, qamodid int64) revel.Result {\n    answerType := models.GetAllAnswerType(c.mqbs, 0, 100, \"\")\n    msgType := models.GetAllMsgType(c.mqbs, 0, 100, \"\")\n    cusQaList := models.GetCusSvrQaByQAMod(c.mqbs, qamodid, 0, 100, \"\")\n    customerServiceQa, _ := models.GetCusSvrQa(c.mqbs, qaid)\n    c.FlashParams()            //   # Is it like this? #\n    return c.Render(answerType, msgType, cusQaList, customerServiceQa)\n}\n. @robfig  I change the code in revel's template.go like this:\n```\n    \"option\": func(f *Field, val, label string) template.HTML {\n        selected := \"\"\n        if f.Flash() == val {\n            selected = \" selected\"\n        }\n    if f.Value() == val {\n        selected = \" selected\"\n    }\n\n    return template.HTML(fmt.Sprintf(`<option value=\"%s\"%s>%s</option>`,\n        html.EscapeString(val), selected, html.EscapeString(label)))\n},\n\n```\nAnd the it work fine.  But I don't konw whether it will take some new bug in the  revel. So can you tell me whether we can change the code like that. \nsome code I change look below:\n```\n    \"radio\": func(f *Field, val string) template.HTML {\n        checked := \"\"\n        if f.Flash() == val {\n            checked = \" checked\"\n        }\n    if f.Value() == val {\n        checked = \" checked\"\n    }\n\n    return template.HTML(fmt.Sprintf(`<input type=\"radio\" name=\"%s\" value=\"%s\"%s>`,\n        html.EscapeString(f.Name), html.EscapeString(val), checked))\n},\n\"checkbox\": func(f *Field, val string) template.HTML {\n    checked := \"\"\n    if f.Flash() == val {\n        checked = \" checked\"\n    }\n\n    if f.Value() == val {\n        checked = \" checked\"\n    }\n\n    return template.HTML(fmt.Sprintf(`<input type=\"checkbox\" name=\"%s\" value=\"%s\"%s>`,\n        html.EscapeString(f.Name), html.EscapeString(val), checked))\n},\n\n```\n. find another bug: when the f.Value() is an \"int\"/\"int32\"/\"int64\" is not \"==\" val ,because the val is \"string\" type. maybe the f.Flash() have this bug too.\n\"option\": func(f *Field, val, label string) template.HTML {\n        selected := \"\"\n        if f.Flash() == val {\n            selected = \" selected\"\n        }\n        if f.Value() == val {\n            selected = \" selected\"\n        }\n. The coalesce is cool.But my problem is that I should set the \"flash\" value like the code below when I read the data in the database. In revel's template.go I found that I can't use $field.Value ,I only can use $field.Flash in \"select option\"/\"radio\"/\"checkbox\".So I have to set the \"flash\" value again.\n---------------------cusSvrQaMgr.go------------------------\nfunc (c CusSvrQaMgr) EditQa(qaid int64, qamodid int64) revel.Result {\n           answerType := models.GetAllAnswerType(c.mqbs, 0, 100, \"\")\n           msgType := models.GetAllMsgType(c.mqbs, 0, 100, \"\")\n           cusQaList := models.GetCusSvrQaByQAMod(c.mqbs, qamodid, 0, 100, \"\")\n           customerServiceQa, _ := models.GetCusSvrQa(c.mqbs, qaid)\n```\n //TODO set the flash value\nflash := map[string]string{\n    \"customerServiceQa.FromQusId\": strconv.FormatInt(customerServiceQa.FromQusId, 10),\n    \"customerServiceQa.ToQusId\":   strconv.FormatInt(customerServiceQa.ToQusId, 10),\n}\nreturn c.Render(answerType, msgType, cusQaList, customerServiceQa, qamodid, flash)\n```\n}\n__EditQa.html___\n<div class=\"control-group\">\n        <label class=\"control-label required\"><strong>\u5f53\u524d\u95ee\u9898\u8282\u70b9\u7c7b\u578b:</strong></label>\n        <div class=\"controls\">\n        {{with $field := field \"customerServiceQa.AnswerTypeId\" .}}\n        <select name=\"{{$field.Name}}\">\n            {{range $.answerType}}\n                {{option $field (printf \"%d\" .Id) (printf \"%s - %s\" .Name .Describe) }}\n            {{end}}\n        </select>\n        {{end}}\n        </div>\n    </div>\n. Yes ,we can close.I use another way to do that.\n. ",
    "tanema": "Actually I didn't think to try it that way that should cover most of my testing needs thank you! \n. I dont know what the revel guys have planned but here is mine. https://github.com/tanema/revel_mailer It renders templates using the template loader however render args need to be passed to send() with a map[string]interface{}. You can render both text and html templates and it supports tls. It would not take much to support attachments either considering how low level I have kept the smtp interface. \nEDIT: I am willing to make a pull request to revel with this as well I just wanted to test it a bit more and play around with a few things before I did so.\n. Hey @robfig \nYou make good points, and as I said I have been working on it so some of it is still a work in progress. Here are my thoughs on your points\n- Are you suggesting to override this with a render argument? If so that should be pretty easy.\n- I thought that as an embedded struct that it would do a couple things\n  - follow suite with the controller style both with how the controller is structured and how it returns a result\n  - group similar actions together under one \"mailer\"\n  - lastly I just preferred more of this style with a simple Send method at the end of the method \n- This sounds like a great idea that I had no thought of yet I will take that into consideration.\n- It would be great to have a similar style of render call as the controllers I think I would need some help with that one.\n- right now in dev mode the mail still sends it just outputs the formatting of the mail to the command line for debug purpose. I would like to prevent it from sending in debug in the future. Also I had planned on pulling that out into a config to set in the config file so that it could be turned on and off when needed.\n- I found the support for more advanced usages i.e. sending multiple formats, is just not that great. Some of the code I used comes directly from the go smtp library just because it was too ridgid and I had to pull it out and rearrange it.\nLastly on all these points I am always open for suggestions. If I have erred in some of my thinking let me know. Here is my latest todo list as well.\n- password from env variable\n- attachments\n- prevent from sending in debug\n- set debug as config in config file\n. @robfig & @Jetvp I can do it so it looks like what @Jetvp suggested it would make attachments a little better and I can take queues form this codebase (https://github.com/scorredoira/email). One downfall with redesigning it and not making it an embedded struct is that specifying the template would have to be specific and rely less on the template loader, which if view loading becomes any different would make maintenance of the mailer harder. Also with the embedded design it could be setup so you have defaults for a mailer (from, to, ect.) rather than specifying them every time. I took my design queues from rails actionmailer.\nIf we can get a consensus on what would be the best design for it I can go ahead and make the changes.\n. I just finished putting the touch ups on attachments and a debug setting that will print to the console rather than send it. Also I added a concurrent option to use the go keyword or not. I think I might end up creating a pull request with what I have because I am not really sure how I will go about making the design into a singleton pattern within revel. Also I do not know as of right now how I could make it both threadsafe and use mailers as a singleton right now. \nThat said those are very good points and really good things to consider, but also once it is within revel regarding what @Jetvp said, it would be ideal to have some sort of mail queue for batch sending. I was not sure if the revel jobs utility was best for that and I am still trying to think over what needs to be done to consider that.\nOutstanding TODO's\n- threadsafe singleton\n- mail queue\n. Okay I can definitely do that, your design allows for a lot more flexibility. I think I was trying to abstract too much of the configuration into the config file and that made it too rigid for different use cases. \nThe only thing that I am unsure of how to use the render arguments like you do in the controllers like in your first example. The rest is pretty easy to move accommodate.\n. ",
    "alexzorin": "Oh okay, I hadn't seen that those changes were reverted. I've taken a closer look this time, and you're right that things largely work despite the messed up paths.\nrevel run does work fine. revel build works fine as long as the destDir isn't within the srcDir (so, no building to ./bin/)\nrevel package still fails but the changes to get it working are minor. Anyway I've suggested a fix.\n. ",
    "bketelsen": "There are many places in the docs and on the website where Play! is credited.\n. ",
    "egonelbre": "Mix between 1&3 looks like  a solid solution...\nMy issue wasn't \"I don't know how to do it\" - it's more of \"it would help newcomers to have examples of it\"; and just a general question on different ways on how to do it. :)\nthanks :)\n. ",
    "insasho": "221 seems related to this -- Field.Flash and Field.Value are being treated inconsistently.\n. I'm struggling with an issue related to this. I have a Edit(userId int) method and a EditPost() method. The first queries for a record from the database and passes it to the template, and EditPost() validates the POST, optionally updates the database, then redirects to Edit if there is a problem.\nThe issue reported by @Jetvp seems related: How do I use the same template to present both the original entity value and the $field.Flash value? It seems that I need some way to push the values into Flash.Data when hitting Edit() directly. I've looked through the samples and I don't see a CRUD example that would show me a better way.\nThanks!\n. I can't easily share the actual code, but I've pasted a representative subset below. If there is a better pattern for implementing the \"U\" of the CRUD operation, I'd love to find a more concise way!\nMy goal is to use the same template for initial presentation of the form (GET) and the subsequent presentation of errors (POST). In the GET case, the .Flash variable is not populated so all form fields show up as blank. In the POST case, the .Flash variables are populated. \nIt seems that the only way for me to work around this is to pass a variable to the template that tells it whether to read the .Flash or the .Value properties. It seems like there should be another field returned by the field helper such as .PresentValue which handles that distinction behind the scenes.\nRoutes:\nGET     /user/edit                             App.UserEdit\nPOST    /user/edit                             App.UserEditPost\nTemplate:\n```\n{{with $field := field \"user.Username\" .}}\n\n\n{{$field.Name}}:\n<!--- on GET, this field will be filled from database --->\n<input type=\"text\" name=\"{{$field.Name}}\" value=\"{{$field.Value}}\">\n\n<!--- on POST, this field will be filled with validated data --->\n<input type=\"text\" name=\"{{$field.Name}}\" value=\"{{$field.Flash}}\">\n\n<span class=\"error\">{{$field.Error}}</span>\n\n\n\n{{end}}\n```\nController handling GET:\nfunc (c App) UserEdit(userId int) revel.Result {\n        userRaw, err := sitemap.Get(models.User{}, userId)\n        if err != nil {\n                log.Panic(err)\n        }\n        user := userRaw.(*models.User)\n        // Note: .Flash values are not populated\n        return c.Render(user)\n}\nController handling POST:\nfunc (c App) UserEditPost(user models.User) revel.Result {\n        user.Validate(c.Validation)\n        if c.Validation.HasErrors() {\n                c.Validation.Keep()\n                c.FlashParams()\n                return c.Redirect(routes.App.UserEdit(user.Id))\n        }\n        // update database\n        return c.Redirect(routes.App.Index())\n}\n. @brendensoares You don't need to. Windows will happily execute any file with an extension of .bat, and revel package already creates a .bat file.\nIt would be very nice to revisit app packaging entirely so that the \"package\" would be a single, monolithic binary containing all the referenced assets, but that's probably a separate feature request.\n. Related: It would be useful if static.Static had other configuration options, such as the ability to disable session cookies on content it serves. This is of questionable value, and can be a security risk if static assets have cache-control:public and private pages do not. Static assets by default should probably not have any set-cookie headers.\n. I was not aware that Revel was using fsnotify. Thanks for the pointer. I'm glad to see https://github.com/go-fsnotify/fsnotify/issues/9 is a feature request for adding polling to fsnotify. I still think it would be useful to mention that watch won't work on many platforms from within a VM as this is a common case. \n. ",
    "jameslai": "radio and checkbox exhibit the old problem. Is the intention to never allow the native helpers to solve this issue and to utilize workarounds? I notice option evaluates both the Flash and Value methods, but radio and checkbox were never updated.\n. I have found this as well. It appears that Revel only checks the size of the logs during startup. If the existing log filesize exceeds the specified value during startup, the log will be rotated. However, if the service is in operation, it never periodically checks the size to rotate.\nTherefore, in effect, the more successful your application is at living a long time, the more disastrously large the logfile can become.\nIf there is a decision to make action on this, I would also recommend that log rotation for time periods be considered as well in addition to filesize. Rotating logs daily (weekly, etc) despite the filesize not being exceeded is a common requirement.. ",
    "olarriga": "I have the same problem. Option is not set selected. If I convert all to string (f.Value(), f.Flash and val) and do the comparaison with string it works.. ",
    "eparziale": "@jameslai  What is your current workaround code for radio and checkbox helpers?\nAs you mentioned above, the native option helper currently handles both Flash and Value methods, but radio and checkbox were not updated.\nOnce you share the workaround, can we commit a fix so that the native helpers work as intended?\nHappy to open a separate Github issue to address this problem.\nThanks,\nE\n. Actually, I was able to answer my own question by modifying the existing radio function from here: https://godoc.org/github.com/revel/revel#pkg-variables\nThis function works, and handles value as well as flash, just as in the current version of option\nrevel.TemplateFuncs[\"custom_radio\"] = func(f *revel.Field, val string) template.HTML {\n        checked := \"\"\n        flash := f.Flash()\n        value := fmt.Sprintf(\"%v\", f.Value())\n        if flash == val || flash == \"\" && value == val {\n            checked = \" checked\"\n        }\n        return template.HTML(fmt.Sprintf(`<input type=\"radio\" name=\"%s\" value=\"%s\"%s>`,\n            html.EscapeString(f.Name), html.EscapeString(val), checked))\n    }. Agree this is an annoying aspect of revel test command, and my team faced the same issue.\nWe work around it in our continuous integration builds by piping test command output to stdout and to a file, then grepping the file for ERROR keyword and failing build if error encountered.\nHere are commands we run\n*Here we run the tests and ouput to stdout, as well as tee to testResults file\n- run:\n        name: Run Integration tests\n        command: \"revel test myapp test 2>&1 | tee testResults \\n\"\n*cat testResults file to double check that we actually captured all the output\n    - run: cat testResults\n*grep testResults file for ERROR keyword and exit with code 1 if true. Else exit 0\n    - run:\n        name: Check Integration Test results\n        command: |-\n          grep -q 'ERROR' testResults && exit 1\n          exit 0\nAlthough this isn't ideal (revel cmd tool should be updated to output proper exit code), this workaround may save you or others the hassle for now. ",
    "Jetvp": "I was having a look through router.go and noticed the following part of code commonly occurring which might need to be updated:\n// If the action is variablized, replace into it with the captured args.\n    controllerName, methodName := route.ControllerName, route.MethodName\n    if controllerName[0] == ':' {\n        controllerName = params[controllerName[1:]][0]\n    }\n    if methodName[0] == ':' {\n        methodName = params[methodName[1:]][0]\n    }\nMaybe this could be changed to something along the lines of:\ncheckpoint = len(methodName) - 7\nif methodName[checkpoint] == ':' { ...\nHopefully that will keep the speed good compared to a standard string replace.  Of course there are other parts like bring in the prefix etc.\nThe reason I use this function mapping method is it means you are not exposing all public functions to the web unless you express it to be and can have some expectations about how the data was passed to it.\n. I have fixed the mapping to find the correct controller and function with any correct :var at the end of the string.  I just have to finish fix the Router.Reverse function.  I believe the performance impact should be rather minimal with the test results being in the same range.\n. I have added the commit here:\nhttps://github.com/Jetvp/revel/commit/fcf6523ffb3032fa415b0b46e71480636befc131\nThis supports any prefix in front of the controller and method, and will reverse correctly using he control.method to the public address.  For example using the following rules:\n```\nCatch all\nGET     /:controller/:action                    :controller.Get_:action\nPOST    /:controller/:action                    :controller.Post_:action\n*       /:controller/:action                    :controller.All_:action\n```\nUser.Post_Settings will change to /User/Settings.  When using a post method it will then map back to User.Post_Settings (this is supported in the template URL function too).  This means that it is also not possible to access a function without the Get_, Post_ or All_ in front.\nThere are a few tiny things that could be cleaned up:\n- The code is set in the reverse function to include any prefixes in the path too, however the tree package does not support searches with a wildcard not at the front.  This would require a change to the tree package to fully support.  For example with the following:\n```\nCatch all\nGET     /:controller/:action                    :controller.Get_:action\nPOST    /:controller/P:action                   :controller.Post_:action\n*       /:controller/:action                    :controller.All_:action\n```\nUser.Post_Settings would become User/PSettings.  However the tree.find will not match the reverse for now meaning it will fail to find the function.  This could be fixed by updating the tree find package in the same style.\n- It is possible to have an out of bounds panic in the Reverse function if you use a wildcard with nothing behind it.  This is present in the old function too, however the if it continued using it the code could become unreliable.  Might be best to ignore any string in the loop with is just a wildcard unless you like it panicing on this event.\n- I've used Strings.LastIndex as it has the simplest code of the find functions.  However it may be possible to write the reverse of it supporting a pure single char search being faster than Strings.Index which is too heavy for this.\n. How it stands now it works with the wildcard at the front for the left side like in the first example without any issues, like how it is used currently.  This is still very helpful and I'm using it in my current project.  I've only scanned quickly over pathtree so would need to have a much deeper look into the find function.\n. Fix for pathtree is posted here: https://github.com/robfig/pathtree/pull/1\nNow it will correctly handle the following case both ways.  You can easily test it by placing a letter like P in front of your actions.  Your links will all pain a P from the reverser and still route back to the same functions.  Not sure exactly when this is as useful but it is there in case someone wants to be fancy (can only really think of one good case).\n```\nCatch all\nGET     /:controller/:action                    :controller.Get_:action\nPOST    /:controller/P:action                   :controller.Post_:action\n*       /:controller/:action                    :controller.All_:action\n```\n. Very nice, however I might end up adding it to the nav bar under a debug menu that pulls right.\n. I should also add you can add Revel itself as the folder by going File -> Open Folder... then changing the build options to have targetargs \"run project\" for example.  Then it will let you debug through Revel itself.\n. Not sure where the build failed but I was having exactly the same issue and this patch works.\n. Try c.RenderTemplate (need to pass the template you want to use).  You will also need to add msg manually to c.RenderArgs map before calling the function.\nhttp://robfig.github.io/revel/docs/godoc/controller.html#Controller.RenderTemplate\n. I was doing some research into it and found the following:\nhttp://stackoverflow.com/questions/4278979/ctrlhandler-not-called-on-event-ctrl-close-event-in-windows-web-server-2008\nIt seems very hackish and not sure you really want a window in the background.  Unfortunately I don't believe a new revel.exe will be allowed to terminate the previous application because Go does not use the required privileges that would require elevating the application.  I guess the other way is for the project to poll revel for a pulse else shut down.\n. I have asked that the IDE I'm using sends a ctrl-c signal before killing the process and hopefully that helps.  I'm just more worried if revel does crash for an unknown reason that someone may not be able to bring it back up.  Could the reverse signal just be a web socket?\n. http://mercurial.selenic.com/wiki/Download\n. If you read the documentation for \"go get\" you will find it uses 4 different dependencies in order to get the source code.  You will see go called for hg, which is mercurial.\n. With the structure you could make it follow the validation style where each function returns itself.  Then you can do things like:\n_, err := Mail().Sender(\"a@a.com\").To([]string{\"b@b.com\"}).Subject(\"Hi\").Send(template, args)\nThe other thing is that emails should be sent using a task queue and not being sent during the execution to avoid system locks.  For example on GAE it would be done using the following: https://developers.google.com/appengine/docs/go/taskqueue/ but maybe Rob's cron can do it?\nAdmittedly on GAE you would send the email with the following: https://developers.google.com/appengine/docs/go/mail/.  So if there is a good set of API created following this structure (https://developers.google.com/appengine/docs/go/mail/reference) then we could easily create a GAE filter in that branch that can be a simple drop in replacement.\n. Actually I personally am a fan of the structure but that's just me ;)  Just thought maybe that added method would allow the use of the structure while others can shortcut it in a functional sense so people could do it both ways.  Really I think the Google example is cleaner and gets ride of calling functions left right and centre:\nmsg := &mail.Message{\n    Sender:  \"romeo@montague.com\",\n    To:      []string{\"Juliet <juliet@capulet.org>\"},\n    Subject: \"See you tonight\",\n    Body:    \"Don't forget our plans. Hark, 'til later.\",\n}\nif err := mail.Send(c, msg); err != nil {\n    c.Errorf(\"Alas, my user, the email failed to sendeth: %v\", err)\n}\nAlso it might be good to add the reply to field.  It can be very useful for server messages.\n. I guess looking at the code I'm wondering if there is a way to make it auto rebuild these config/route files while running dev mode on the GAE dev server.  I know it rebuilds automatically when there is a code change so if the command prompt will update these files as need then it would become a good framework for GAE too.\n. I believe that's the recommended routing method by some of the Google devs anyway for Go because of the speed of Go.\nI did notice using the run_tests.py file lots of errors and I needed to some python components to get it to pass (Pillow and lxml from http://www.lfd.uci.edu/~gohlke/pythonlibs/).  Now I have clean results for it so hopefully that's it.  You will notice it comes with it's own version of go, as such I'm you should compile the app using this to have the support required functionality (they talk about it being a sand boxed version).\nThe thing is once running they said it will auto recompile any source code changes.  So I was thinking if you have the cmd GAE command entered again then it could run in a mode which updates the main.go and routes.go files to any changes we make in our source tree (possibly even copying files over to the GAE directory?).  This would give you a very good development environment.\nWould this be something you would be happy to support in a V2 tree along with the other router?  Then I could start working on it for my own project.  I don't want to end up with code going off in a different direction where it can no longer be brought back.\nAlso this project here might be a good insight:\nhttps://github.com/georgenava/appgo\n. I believe you can't tell an application on GAE to build something and that's why it checks for changes.  But I'm not really sure about it.\n. ",
    "rtm7777": "Thanks for the help, it turned out that it was enough to change the tamplate to something like this:\n{{range $f := $.faculties}}\n    <div id=\"{{$f.FacultyId}}\">\n        {{range $g := $.groups}}\n        <a href=\"#\">{{$g.GroupName}}</a>\n        {{end}}\n    </div>\n{{end}}\n. Will be good also use json, yaml, etc for I18n\n. Problem was solved when I updated heroku runtime stack to Cedar-14.\nhttps://devcenter.heroku.com/articles/cedar-14-migration\nTo do this, I ran the following command in folder app:\n    heroku stack:set cedar-14\nI don't think it has anything relation with this issue, but I also updated Go version in .travis.yml file to 1.3\n. Thank you @anonx, I'll try to do it.\n. Thanks @notzippy , in next time I'll know.\n. ",
    "burberger": "I'll get on the documentation later tonight or tomorrow.  For modules, I can think of two approaches.\nEither:\n- Having an app.conf for each module containing its own set of settings\n- Define a module.modulename.delimiters (or something similar) variable in the applications app.conf\nWhat do you think?  I prefer the former option, as it allows for future expansion to per module configurable options, but I'm not sure what you have in mind for what modules should and shouldn't be capable of.\n. ",
    "wangyun": "maybe the command is \"revel build projname .\" under my gopath src folder \nhow can I unrm my projects?..\nI'm using archlinux on raspberry pi\n. After some trying, I recovered most of my projects, only lost a little.\nI think you can add some warning or like you said, only overwriting the build directory if it looks like a build directory.\nAnyway, Revel is a very good go framework, I like it. thanks for your work.\n. Or, maybe move old files to a tmp folder instead of deleting. unless user use some flag to force delete. \n. ",
    "tonka3000": "Hy,\ncan anybody explain me how to debug an revel app in LiteIDE. Normal go app works perfect.\nI can start the revel app with the debugger and it stops on the main function, but it doesn't stop on any of my own breakpoints. My revel app is a new one created with revel new myapp, and my breakpoint is in the Index-function of the main controller.\nI start revel with \"Start Debugging External Application...\" with\napplication: revel\narguments: run myapp dev\nThe dev is required for the devmode otherwise gdb will crash.\nCan anybody tell me what i'm doing wrong?\nI use Mac OS X 10.10.1 and LiteIDE X26\nGreetings\nTonka\n. hey notzippy,\nthanks for the information, i will try it :-)\nGreetings\n. ",
    "op": "The binding stuff looks super convenient. Isn't it quite dangerous however to expose such a feature if you can request ids[999...]=1 to make a simple DOS attack? Couldn't figure out how to add validation to it (except maybe adding a custom binder).\n. I played around with revel as a way to create a simple API on top of revel which only exposes eg. JSON or XML, and not something you would consume through a web browser.\nIf this is outside the scope of revel, feel free to ignore. ;)\n. OK. I tried that but then there was a nil pointer. That's why my first version was a ValidationSimpleFilter, which only sets up the c.Validation struct.\nWhich version would you prefer?\n. Ah. Yes, that sounds better. The only time when the empty cookie is set right now is if you already had a cookie (similar to how it was before).\nI'll see if I get some time to fix that. If not and you have the bandwidth, feel free to do it. ;)\n. Updated the changeset and added some tests to it. Is this how you meant?\n. Sorry, I didn't see that issue. Closing this one.\n. Cool. Fixed!\n. Thank you. :)\n. ",
    "plroman": "When I look at the build log (or rather search for the keyword \"fail\"), it always displays that line:\nserver.go:82: Failed to listen: listen tcp <nil>:9000: address already in use\nAnd \u00e0pparently the tests pass. Perhaps the build script is broken.\n. ",
    "lukecheng": "But the name of urls are not fixed. My current url in conf/routes:\n/view/:id    App.View\nI want to change it like:\n/view/:id.htm    App.View\n. Thank you very much!\n. ",
    "akshatpradhan": "but why use mercurial? Why not stick with git?\n. ",
    "cryptix": "Some dependencies of revel use mercurial as their version control. It's their decision.\nSent from my iPhone\nOn 22.07.2013, at 13:17, Akshat Pradhan notifications@github.com wrote:\n\nbut why use mercurial? Why not stick with git?\n\u2014\nReply to this email directly or view it on GitHub.\n. net/http/cookiejar is part of the standard lib. that shouldn\u2019t be missing.\nwhat version of go is installed on lubunt 13.04?\n\nOn 08.10.2013, at 23:25 , Alexander Lenail notifications@github.com wrote:\n\nI'm getting the same error, and I have Mercurial installed.\nLubuntu 13.04 (raring ringtail). \nsudo apt-get install golang\nmkdir ~/gocode\nexport GOPATH=~/gocode\necho GOPATH=$GOPATH >> .bash_profile\nsudo apt-get install git\nsudo apt-get isntall mercurial\ngo get github.com/robfig/revel\n--> package net/http/cookiejar: unrecognized import path \"net/http/cookiejar\"\nWhat am I doing wrong?\n\u2014\nReply to this email directly or view it on GitHub.\n. Just wanted to shim in and say that I also tested this, works great as far as I can tell. Thanks, Arkxu!\n\nIn case somebody runs into a mail server with a selfsigned/untrusted CA dropping this in mail/connection.go turns off cert checking:\ndiff\n+  config := &tls.Config{\n+    InsecureSkipVerify: true,\n+  }\n        if ok, _ := c.Extension(\"STARTTLS\"); ok {\n-               if err = c.StartTLS(nil); err != nil {\n+               if err = c.StartTLS(config); err != nil {\n(I'd love to check the fingerprint of the cert much more but haven't figured out how yet. Why is SSL such a mess... :-/ )\nI also hacked together AUTH LOGIN authentification by just implementing the smtp.Auth interface here. Not sure how foolproof it is, just tested it against one server so far.\n. If you try to use Revels template helpers (like {{msg}} ) you get a nasty\nERROR 2013/10/14 13:41:29 panic.go:29: interface conversion: interface is nil, not string\n/home/cryptix/go/src/testapp/app/controllers/utils.go:116 (0x46c743)\n    App.sendVerificationEmail: err := mailer.RenderTemplate(message, \"verificationMail\", args)\n. make sure to export GOPATH as well.\nOn 16.09.2013, at 13:11 , Yura Shevchuk notifications@github.com wrote:\n\nI use Elementary OS (base on ubuntu)\n~/.profile\nexport GOROOT=$HOME/go\nexport PATH=$PATH:$GOROOT/bin\nexport PATH=$PATH:/usr/local/go/bin\nGOPATH=$HOME/gocode\nPATH=\"$PATH:$GOPATH/bin\"\nWhen I run go get github.com/robfig/revel I get this logs.\npackage bufio: unrecognized import path \"bufio\"\npackage bytes: unrecognized import path \"bytes\"\npackage crypto/md5: unrecognized import path \"crypto/md5\"\npackage crypto/rand: unrecognized import path \"crypto/rand\"\npackage crypto/sha1: unrecognized import path \"crypto/sha1\"\npackage crypto/tls: unrecognized import path \"crypto/tls\"\npackage encoding/base64: unrecognized import path \"encoding/base64\"\npackage encoding/binary: unrecognized import path \"encoding/binary\"\npackage encoding/json: unrecognized import path \"encoding/json\"\npackage errors: unrecognized import path \"errors\"\npackage fmt: unrecognized import path \"fmt\"\npackage io: unrecognized import path \"io\"\npackage io/ioutil: unrecognized import path \"io/ioutil\"\npackage math/rand: unrecognized import path \"math/rand\"\npackage net: unrecognized import path \"net\"\npackage net/http: unrecognized import path \"net/http\"\npackage net/url: unrecognized import path \"net/url\"\npackage runtime: unrecognized import path \"runtime\"\npackage strconv: unrecognized import path \"strconv\"\npackage strings: unrecognized import path \"strings\"\npackage sync: unrecognized import path \"sync\"\npackage time: unrecognized import path \"time\"\npackage crypto/hmac: unrecognized import path \"crypto/hmac\"\npackage encoding/csv: unrecognized import path \"encoding/csv\"\npackage encoding/hex: unrecognized import path \"encoding/hex\"\npackage encoding/xml: unrecognized import path \"encoding/xml\"\npackage os: unrecognized import path \"os\"\npackage syscall: unrecognized import path \"syscall\"\npackage unsafe: unrecognized import path \"unsafe\"\npackage regexp: unrecognized import path \"regexp\"\npackage go/build: unrecognized import path \"go/build\"\npackage html: unrecognized import path \"html\"\npackage html/template: unrecognized import path \"html/template\"\npackage log: unrecognized import path \"log\"\npackage mime/multipart: unrecognized import path \"mime/multipart\"\npackage net/http/cookiejar: unrecognized import path \"net/http/cookiejar\"\npackage path: unrecognized import path \"path\"\npackage path/filepath: unrecognized import path \"path/filepath\"\npackage reflect: unrecognized import path \"reflect\"\npackage runtime/debug: unrecognized import path \"runtime/debug\"\npackage sort: unrecognized import path \"sort\"\n\u2014\nReply to this email directly or view it on GitHub.\n. try running go get -u github.com/revel/cmd/revel. your fsnotify might be out of date.\n. resp.StatusCode == 0 for all responses, regardless of success,  panic or 404. I'll look into RenderError it on the weekend.\n. I looked into it again and sadly I'm quite confused...\n\nIt looks like the http.ResponseWriter in the revel.Response of the revel.Controller  is replaced by a later filter action somehow. At least it's not used by the stack when I pass it on the next filter (although the responses are still sent out correctly) but I get an (expected) panic when I set it to nil. If I call revel.(Response).WriteHeader before call the next Filter I get an increment in the right counter and a (also expected) warning server.go:1745: http: multiple response.WriteHeader calls.\nMaybe my understanding of how the filter stack works is incorrect or overwriting of c.Response.Out just doesn't work as expected in a Filter.\nI'm also unsure what you meant by using RenderError.. Redefining all the Render* methods on a Controller and count the statuses there?\n. @brendensoares I like that idea a lot but (un)fortunately I'm going on vacation starting next week so my weekend is quite stuffed with social responsibilities. I'll take you up on the offer when I get back :) \n. @brendensoares I'm CEST. So if we can start after 11pm PDT we can do it.\n. Nice! I'll be there after breakfast. :)\n. ",
    "zfrenchee": "I'm getting the same error, and I have Mercurial installed. \nLubuntu 13.04 (raring ringtail). \nsudo apt-get install golang\nmkdir ~/gocode\nexport GOPATH=~/gocode\necho GOPATH=$GOPATH >> .bash_profile\nsudo apt-get install git\nsudo apt-get isntall mercurial\ngo get github.com/robfig/revel\n--> package net/http/cookiejar: unrecognized import path \"net/http/cookiejar\"\nWhat am I doing wrong?\n. ",
    "liuggio": "same as  @zfrenchee with ubuntu 13\n. ",
    "serialx": "The existing manual had some errors causing github pages error. I've fixed that too. :)\n. @robfig I completely agree. Thank you for your feedback. Will work on it soon!\n. Simplified the docs. Thank you for your feedback. I didn't know that GOROOT was obsolete after Go 1.0. There must be many outdated docs out there. :)\n. @brendensoares I think you mis-referenced @seawatts as me. :)\n. ",
    "pschultz": "Oops. Fixed now.\n. ",
    "rambocoder": "Quotes around \"user\" in the SQL would do it. GORP did the same thing for it's SQL, because of PostgreSQL having user as keyword. https://github.com/coopernurse/gorp/pull/25\n. Check out this upstart script http://wiki.colar.net/golang_revel_init_script\n. +1 I like Gorm\n. Looking at the code, the allowed methods are mostly implemented https://github.com/revel/revel/blob/c5893f222a8983e12aaac6ffaac0362ddcc56087/modules/csrf/app/csrf.go#L16 for GET, HEAD, OPTIONS and TRACE, but not WS.\nI think CSRF filter would be widely used if it was added to skeleton by default https://github.com/revel/revel/blob/c5893f222a8983e12aaac6ffaac0362ddcc56087/skeleton/app/init.go#L13\n. ",
    "saward": "Instead of using a question mark as a placeholder for values, use $1, $2, etc.  may not be your problem, but I didn't see it suggested here.\nEg, perhaps (can't check exact syntax ATM):\nusers, err := c.Txn.Select(models.User{}, \"select * from User where Username = $1\", username)\n. ",
    "rhacker": "http://stackoverflow.com/questions/6304268/postgresql-query-syntax-without-quotes\nI think this should be mentioned, since the problem may be from the time you created the database which contains double quote so later you have to use it anyway :) \n. @robfig \n. ",
    "ScruffyProdigy": "I've looked through the help file, and it says pushing to my branch should update my pull request.  In this case, it does not seem to be doing that.\nWhen I restarted working on this branch, I rebased to the current master, and in retrospect think github works better with merge commits instead.  I'm not sure the best way to continue this.\n. Sorry, I'm a bit new to GitHub, and couldn't figure out how to simply\nupdate the PR :-(\nOn Thursday, December 12, 2013, Brenden Soares wrote:\n\nThanks for staying active on this feature, but why did you issue a new PR?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/408#issuecomment-30446419\n.\n. \n",
    "karls": "Hmm, seems like I cannot restart the build. By the looks of it, one of the tests died due to the app not exiting quickly enough?\n. ",
    "rozaliev": "I've found that revel already does all the magic for me.\n``` Go\ntype AuthHelpers struct {\n  //just had to define this pointer\n  *revel.Controller\n}\ntype Sessions struct {\n  *revel.Controller\n  // embed\n  helpers.AuthHelpers\n}\nfunc (c Sessions) Destroy() revel.Result {\n   // and it works\n  c.SignOut()\n  return c.Redirect(routes.App.Index())\n}\n```\nIt was't that obvious. Maybe there should be some doc about it.\n. ",
    "genedna": "I config the Nginx proxy HTTP request in production. Nginx could proxy with unix socket:\nupstram bacdend {\n  server unix:/tmp/revel.socket;\n}\n. I am newbie on Go and Revel, I am looking for how to implement it.\n. ",
    "marksteve": ":smile:\n. ",
    "pa001024": "In the performance test or the user does not correspond to the default language.\nAnd when you are under attack (DDoS).\nAccepts-Language header is not always accurate.\nIn either case, this will bring some trouble.\nSo warning only the language file exists but the key is lost, just like now.\nThis's enough to find the problem.\n. @purohit I know {{template \"\" .}}. but it's is very different, it will execute twice and without variables. \nsee the example, can the template do it?\n. This example may not be convincing, because it is possible to be replaced.\nThe problem here is the template can only pass one parameter.\nI went straight to get my project to do a comparison.\nwithout include\nhtml\n{{$ := .}}\n<section id=\"filter\">\n  <div class=\"page-header\">\n    <h1>{{msg . \"filter\"}}\n      {{if .mEditable}}<a href=\"{{.pageurl}}/filter/new\" title=\"{{msg . \"filter.create.desc\"}}\" class=\"btn\"><i class=\"icon-plus-sign\"></i></a>{{end}}\n    </h1>\n    <p class=\"muted\">{{msg . \"filter.desc\"}}</p>\n  </div>{{range .mFilter}}\n  <article>\n    <h2>{{.Name}}</h2>\n    <div class=\"dlist\">\n      <table class=\"table table-hover{{if $.mEditable}} editable{{end}}\">\n        <thead>\n          <tr>\n            <th>{{msg $ \"viewdata.key\"}}</th>\n            <th>{{msg $ \"viewdata.value\"}}</th>{{if $.mEditable}}\n            <th>{{msg $ \"viewdata.edit\"}}</th>{{end}}\n          </tr>\n        </thead>\n        <tbody>{{range .ViewData}}\n          <tr>\n            <td>\n              {{if $.mEditable}}<input type=\"text\" value=\"{{.Key}}\">{{else}}{{.Key}}{{end}}\n            </td>\n            <td>\n              {{if $.mEditable}}<input type=\"text\" value=\"{{.Value}}\">{{else}}{{.Value}}{{end}}\n            </td>{{if $.mEditable}}\n            <td>\n              <a class=\"btn btn-danger btn-block\" href=\"#\"><i class=\"icon-trash icon-white\"></i> {{msg $ \"viewdata.delete\"}}</a>\n            </td>{{end}}\n          </tr>{{end}}{{if $.mEditable}}\n          <tr>\n            <td>\n              <input type=\"text\" placeholder=\"{{msg $ \"viewdata.key.new\"}}\">\n            </td>\n            <td>\n              <input type=\"text\" placeholder=\"{{msg $ \"viewdata.value.new\"}}\">\n            </td>\n            <td>\n              <a class=\"btn btn-success btn-block\" href=\"#\"><i class=\"icon-plus-sign icon-white\"></i> {{msg $ \"viewdata.add\"}}</a>\n            </td>{{end}}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </article>{{end}}\n</section>\n<section id=\"target\">\n...\n</section>\n...\nwith include\nhtml\n{{$ := .}}\n<section id=\"filter\">\n  <div class=\"page-header\">\n    <h1>{{msg . \"filter\"}}\n      {{if .mEditable}}<a href=\"{{.pageurl}}/filter/new\" title=\"{{msg . \"filter.create.desc\"}}\" class=\"btn\"><i class=\"icon-plus-sign\"></i></a>{{end}}\n    </h1>\n    <p class=\"muted\">{{msg . \"filter.desc\"}}</p>\n  </div>{{range .mFilter}}\n  <article>\n    <h2>{{.Name}}</h2>\n    <div class=\"dlist\">\n      {{include \"dlist.html\"}}\n    </div>\n  </article>{{end}}\n</section>\n<section id=\"target\">\n...\n      {{include \"dlist.html\"}}\n</section>\n...\nonly use template\nhtml\n{{$ := .}}\n<section id=\"filter\">\n  <div class=\"page-header\">\n    <h1>{{msg . \"filter\"}}\n      {{if .mEditable}}<a href=\"{{.pageurl}}/filter/new\" title=\"{{msg . \"filter.create.desc\"}}\" class=\"btn\"><i class=\"icon-plus-sign\"></i></a>{{end}}\n    </h1>\n    <p class=\"muted\">{{msg . \"filter.desc\"}}</p>\n  </div>{{range .mFilter}}\n  <article>\n    <h2>{{.Name}}</h2>\n    <div class=\"dlist\">\n      {{template \"dlist.html\" $}} // Problem: where is my {{.}}(in the {{range .mFilter}})?\n    </div>\n  </article>{{end}}\n</section>\n<section id=\"target\">\n...\n      {{template \"dlist.html\" $}} // same Problem\n</section>\n...\nSo I think it is necessary if you do not have a better solution to that!\n. Your code looks for compromise template. in general, this is not normal is not it?\nhelper function ,good idea. but where is my \"better\" solution ? :<\n. Or, I want to say is the {{msg}} change to not need parameter \".\"\nThen my problem will solve.\nBTW, using regular expression may be more performance-based considerations.\nI have thought about {{set $ \"dot\" .}}, which is more rough solutions for me.\n. Zap is a good idea, revel will import it ?\n. ",
    "CoreyKaylor": "I agree that interceptors are more useful at the action level. I'm not entirely sure that #420 really helps this out as a potential need to intercept 2 of the 4 actions (each uniquely) on a controller are reduced to single methods that now conditionally changes its behavior based on which action is invoked.\nAn extremely common scenario where this would be useful is to allow an interceptor to apply the binding for a given struct being posted into the controller action and apply validation. This would make your controller action only the success / happy path already having been validated.\n. ",
    "martinml": "I am not using any special environment, just your plain old Windows XP (I know I know :smile:) with the standard Go installation and cmd.exe. No MinGW, no Cygwin, no PowerShell. But to be sure, I had a fresh installation of XP laying around so I installed Go in it via the go1.1.1.windows-386.msi official installer:\n```\nC:>go version\ngo version go1.1.1 windows/386\nC:>go env\nset GOARCH=386\nset GOBIN=\nset GOCHAR=8\nset GOEXE=.exe\nset GOHOSTARCH=386\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=C:\\gocode\nset GORACE=\nset GOROOT=C:\\Go\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_386\nset CC=gcc\nset GOGCCFLAGS=-g -O2 -m32 -mthreads\nset CGO_ENABLED=1\n```\nThen I did this (note the forward slashes in the stack!):\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"runtime/debug\"\n)\nfunc main() {\n    fmt.Println(string(debug.Stack()))\n}\n```\nC:\\>go run slashes.go\nC:/slashes.go:10 (0x40101e)\n        main: fmt.Println(string(debug.Stack()))\nC:/Users/ADMINI~1/AppData/Local/Temp/2/bindist934530519/go/src/pkg/runtime/proc.c:182 (0x41114e)\nC:/Users/ADMINI~1/AppData/Local/Temp/2/bindist934530519/go/src/pkg/runtime/proc.c:1223 (0x412de0)\nCould it be a bug in Go itself? Also, the path C:\\Users doesn't exist at all in XP (it'd be C:\\Documents and Settings), so I'm not sure why it's appearing there.\n. Ah, that definitely makes more sense.\nThat'd mean that the forward slashes in the paths of the stack are not being generated by the runtime but by the build process, right? I tried to have a look at the compiler source but that totally escapes my knowledge :\\\n. Just in case someone found the same problem, this is a very bad hack to get nice error pages when working in Windows (apply in revel.go at 7f06f0d2ffaa2c7febcbd4e68a3a336d59481f41):\n``` diff\n@@ -7,10 +7,11 @@ import (\n    \"io/ioutil\"\n    \"log\"\n    \"os\"\n    \"path\"\n    \"path/filepath\"\n+   \"runtime\"\n    \"strings\"\n )\nconst (\n    REVEL_IMPORT_PATH = \"github.com/robfig/revel\"\n@@ -97,10 +98,14 @@ func Init(mode, importPath, srcPath string) {\n        SourcePath = path.Clean(SourcePath)\n        revelSourcePath = SourcePath\n        packaged = true\n    }\n\nif runtime.GOOS == \"windows\" {\nSourcePath = strings.Replace(SourcePath, \\, \"/\", -1)\n}\n+\n    RevelPath = path.Join(revelSourcePath, filepath.FromSlash(REVEL_IMPORT_PATH))\n    BasePath = path.Join(SourcePath, filepath.FromSlash(importPath))\n    AppPath = path.Join(BasePath, \"app\")\n    ViewsPath = path.Join(AppPath, \"views\")\n\n```\nDon't use this in production :wink: \n. Sorry to bump this again but I had a (crazy?) thought.\nWindows internal APIs work perfectly when using / as a directory separator. Maybe the simplest and cleanest solution would be to use forward slashes everywhere, use path instead of filepath and don't worry about the differences at all?\nI'm aware of #79 and #206, but those problems were originated by the mixing of the different separators in the first place (i.e. revel.BasePath was using backslashes and path.Base() expected forward slashes).\n. ",
    "opennota": "The following functions do not exist in the path package, but are used by revel:\nAbs\nSplitList\nWalk\n. I think that a separate set of delimiters for each path would be a better idea, so we'll have something like\ntype TemplatePath struct {\n  Path string\n  Delimiters string\n}\n. This is how applications define restrictions:\nrevel.ActionRestrictions = []revel.ActionRestriction{\n    {\"Application\", \"Admin\", MustBeAdmin},\n    {\"Hotels\", \"*\", MustBeLoggedIn},\n}\nwhere MustBeAdmin, MustBeLoggedIn should be functions with signature func (SomeControllerOrControllerPtr) revel.Result, i.e.\nfunc CheckPermissions(c Application) revel.Result { ... }\nfunc AnotherCheck(c *Hotels) revel.Result { ... }\nIf they return nil, execution proceeds to the action, otherwise the returned result is rendered to the client.\n. > I would like to start extracting functionality to slim down revel core.\nSounds reasonable. I didn't think of a standalone package.\n\nProviding an auth module like Django's could be very helpful, and I would be interested to do that.\n\nI'll take a look at that.\n. > Curious, why are you not using the views folder?\nThe client code is in its own separate directory with its own build system.\n. Fixed dealing with mixed slashes and backslashes in windows.\n. Indeed. Fixed.\n. I think revel should respect Response.Status if action returns nil. See PR #514\n. I would prefer a separate function.\nQuote from the Go FAQ:\nPackages intended for public use should try to maintain backwards compatibility as they evolve. The Go 1 compatibility guidelines are a good reference here: don't remove exported names, encourage tagged composite literals, and so on. If different functionality is required, add a new name instead of changing an old one. If a complete break is required, create a new package with a new import path.\n.  Or 3. Add some mechanism to allow the developer to plug in any new functions he wants. (Don't know whether it is possible with the current architecture.)\n. The latter.\n. I tried to reproduce it locally, but couldn't get that many unclosed connections. I got just a couple of them. BTW, after about 14 hours 74 of these connections (on the production server) are still ESTABLISHED (I diff ed lsof outputs to find unchanged lines).\nEdit: I'll try to rebuild it with Go 1.3 and redeploy.\nEdit2: I have it rebuilt and redeployed. Let's see.\n. I've set read and write timeouts using a startup hook:\n``` diff\n--- a/app/init.go\n+++ b/app/init.go\n@@ -16,6 +16,8 @@\n package app\nimport (\n+       \"time\"\n+\n        \"github.com/jgraham909/revmgo\"\n        \"github.com/revel/revel\"\n )\n@@ -37,4 +39,8 @@ func init() {\n        }\n        revel.OnAppStart(revmgo.AppInit)\n        revel.OnAppStart(AppInit)\n+       revel.OnAppStart(func() {\n+               revel.Server.ReadTimeout = time.Minute\n+               revel.Server.WriteTimeout = time.Minute\n+       })\n }\n```\nEdit: well, now the number of connections seems to not grow up uncontrollably, but decrease with time. I need to watch more, though.\nEdit2: I still wonder though, what makes a browser open multiple connections where there's already an open keep-alive one.\n. @anonx, 8 seems to be the maximum. Nowhere near 20+ simultaneous connections.\nSo far, multiple connections are still present on the server, but their number doesn't grow as it was before I set the timeouts.\nEdit: judging by the user-agents the abusing browser is IE 11.\n. > It seems browsers open a lot more than 8 simultaneous connections.\nInteresting. In this table IE 11 has the highest number of connections per hostname.\n\n\nSet a maximum number of simultaneous connections Revel will accept at once and reject the rest (i.e. after 32 requests, it returns a 503).\n\n\nOr, maybe, Revel can close an oldest connection when accepting a new one. I don't know whether it is practical, though.\n\nFYI, deadline is extended at the start of every request that a connection sends.\n\nIf I'm not mistaken, a malicious user can also send a single character just before a deadline, and the connection will stay open.\nEdit: currently I have 96 (!) open connections from one of the clients. One other client has 10, and all other do not exceed 6 connections.\n. They were internet connections. The client's IP address was 188.233.xxx.yyy. A badly written bot, maybe? I don't know.\n. Well, I think the issue can be closed now.\n. ",
    "pushrax": "You can do this easily with nginx too, though having an in-app construct for this would eliminate the need to run multiple Go processes when one will do. In fact, if unix sockets are used, it's pretty simple to have the parent fork, exec the newly compiled version with the same file descriptors, and then have the child kill the parent.\n. Like @redalastor mentioned, https://github.com/rcrowley/goagain implements the strategy I described. I'd be happy to own this in a while since I'm going to need it.\n. The running server receives SIGUSR2, forks (thus copying file descriptors), and execs the new binary, which then listens on the same fds. The child sends SIGHUP or similar to the parent, which stops listening and dies gracefully.\n. As far as I can tell, this doesn't actually fix the issue since ListenAndServe only ever uses tcp. Assuming I'm not missing something, should we add another config parameter for indicating which network to listen on?\n. @anonx  the harness is probably the thing I like least about Revel as well...\n. @brendensoares for me, mainly because it obfuscates the build process significantly and makes it difficult to customize bits and pieces of the framework.\n. I meant the whole thing, reflection included. It's hard to tell exactly what happens/how when your app is built.\n. :+1: to not deleting the directory and just overwriting any files.\n. There is no -o flag for go install, always uses GOBIN :(\nEdit: though, it could set GOBIN to app/tmp actually.\n. @brendensoares they can conflict with the things you're templating, e.g. if you have a Go template that produces an Angular template.\n. @twistor I definitely agree that sessions should be instantiated lazily. Issue created here: https://github.com/revel/revel/issues/576\n. #587 should address this for most cases.\n. Why would we want to clear the cookie? Presumably if you set it, you'd like it to stick around and not disappear on the next request to non-static content.\nI was under the impression this was wanted for cases where there really is no cookie, but maybe I was wrong (i.e. go apps that serve only static content, APIs, etc). Normal webapps wouldn't really care about what cookies are sent along, since if they really don't want cookies on their static content they need to use a separate domain anyway. \n. @brendensoares as a separate thing, we could disable Set-Cookie if the value didn't change, sure. That would be the easiest way to fix all of this. I was referring to your comment about clearing the cookies when a static file is requested \u2013\u00a0that would break application logic since there is only one set of cookies per domain.\nIn any case, as I mentioned in my previous comment, real applications should be serving their static content from a different domain or subdomain, otherwise the client wastes bandwidth by sending them all to the server on every request (regardless of the server configuration). I agree the extraneous Set-Cookies should be fixed, but I don't think it's really that important in practice.\n. Yeah, #587 handles this specific case, but we can keep improving the cookie implementation for sure. #352 sounds like a good case for allowing multiple filter chains, which afaik isn't possible at the moment.\n. @brendensoares Makes sense to me. I'm not sure, but I think splitPath may need to be modified as well, since the actual URI parsing needs to know about the change.\nI think @robfig was referring to allowing regexes within routes and using regexes to actually parse request URIs. \n. This would definitely be useful in production, to do all the same stuff you might use it for in dev. e.g. clean up temp files, log stuff, or whatnot.\n. Why not just make it a const in one of the Go files?\n. If you need the version from the binary revel, you could just run revel version and parse the output.\n. We can't (or rather, shouldn't) control how people build the revel binary, making -X less useful. We could have a version.go file to make it clear where to find it, but I really think just putting it in the main revel file would be fine.\n. The correct way to implement it is to look at the X-PJAX header and render differently if it is set. This would be as simple as setting a render arg in a filter, and either including the layout files or not.\n. Yeah, though to be DRY you could just put the check in the layouts and render nothing if it's set.\n. Interim hacky solution: compile and run a v1 and v2 app separately.\n. #333 seems like exactly what I'm looking for. Basically, I defined these routes:\nGET     /users/:id.json                         Users.Show\nGET     /users/:id                              Users.Show\n, and got a duplicate route error. Reordering them has no effect.\nI'll look into submitting a PR to fix #333 tonight.\n. Yeah, the harness doesn't start the actual app until the first request is made. This is an artifact of not reloading the app on files save to prevent reloading multiple times if you save multiple files.\nI think  it would be a good idea to add a special case for the first boot, also since it would reduce wait time until you can start developing.\n. I'm fine with the current behaviour, as it's the most flexible and doesn't feel too verbose to me.\n. I can provide free hosting if desired, but a better alternative may be to keep using GH pages with a custom domain (you can do this very easily). We set up http://batmanjs.org/ with this method, and it's working great. If you want to use Revel for it anyway, I have plenty of server resources to contribute (and an awesome revel deploy pipeline from another project :cake:).\nAs for making the transition, the biggest thing is that all package names would have to be changed, breaking compatibility with existing projects. It may be worth forking the repo back to robfig's account after moving it, then updating all the package names in the organization's copy afterwards. That way existing projects using go get continue to work, and you can bug people to switch to the new package name when they try to update.\n. @robfig I talked to GitHub and managed to secure @revel, if you want to use it instead.\n. @brendensoares yeah GH will forward all requests, though the package name in the source files will no longer match on master, which is why the copy at github.com/robfig/revel needs to be different from the copy at github.com/revel/revel.\nI registered the @revel organization to prevent it being snagged after I had it released, and gave ownership to @robfig. Up to him to decide how to use it.\n. @robfig one option would be to move the command line tools into their own repo:\n$ go get github.com/revel/cmd\nor something like that.\n. One more option is github.com/revel/cmd/revel, which is slightly less ridiculous than github.com/revel/revel/revel :poop: \nI guess it creates a better separation of concerns as well, which is nice.\n. :+1: revelframework.org, I don't see what's wrong with it, and I think having a recognized extension outweighs having a short domain in this case.\n. So here's my suggested way forward:\n1. Move the repo to the organization. Everything will continue to just work, since GitHub will forward all traffic.\n2. Fork the repo back to github.com/robfig/revel. This will prevent existing projects from encountering any issues throughout the transition. Replace the readme with a message indicating this copy will not be updated, and a link to the repository's new home.\n3. Fix package names in the organization's copy.\n4. Develop as usual.\nThe nice thing is that this will have zero impact on current users, so it can be done at any time. The only downside is that links to old issues from outside GitHub will no longer be valid.\nThoughts?\n. You're right, no history will be lost. What I meant was to fork github.com/revel/revel to github.com/robfig/revel after the transfer. Otherwise, continued development on github.com/revel/revel would cause incompatibility with projects importing github.com/robfig/revel. This means that links like https://github.com/robfig/revel/issues/477 would be pointing at the forked copy though, which would not retain the issues.\nAdded you to the org :sparkles:\n. I may be missing something, but this is my reasoning:\n- Repo is moved. go get github.com/robfig/revel works fine due to forwarding.\n- To allow go get github.com/revel/revel, all package names need to be changed in the source code, on master.\n- Now, go get github.com/robfig/revel will fail, due to the package names being incorrect.\nIf GH supported forwarding to a particular branch or tag, that would be perfect. I don't think they do though, which is why I think creating a static fork at github.com/robfig/revel containing the current code would be the simplest option.\nI don't mind being part of the core team, as I have a fairly big project invested in revel now and I'll probably contribute some parts of it back :)\n. It should check the value as well, like it does with RemoteAddr. The whole thing feels weird and hacky though, IMO it should be up to the user to enable and secure the jobs page in production.\n. I think so, though did we reach a final conclusion about https?\n. I feel like this would be better if the default was *, so you wouldn't have to type it out every time. In addition, doing so would allow for free backwards compatibility.\n. :+1:\nThis is an extremely dangerous issue! I suggest merging this fix directly into master. @robfig was there a reason you originally allowed query params to override fixed params?\n. @verdverm you're using a url like /public/app.conf?prefix=conf/?\nWith a route like \nGET     /*filepath                              Static.Serve(\"public\")\n/app.conf?prefix=conf/ hits app.conf (on master and develop).\n. Why is that? It should be jailed to the public dir, and any files that don't exist will 404. In any case, it is possible to do this, so the issue needs to be fixed.\n. @verdverm all credit goes to @mcheng89, I'm just an onlooker here :)\nAlso :+1: for private security concerns. When we get the domain we can create security@revelframework.org or similar.\n. Yep, wouldn't submit a PR for untested code :)\nEnded up tweaking one stylistic thing here though: #513\n. I agree that the session shouldn't be used to store things other than primitive data in most cases, since your requests will become very bloated.\n. :boat::dash:\n. Pretty much any emoji\n:shipit:\n:ship::it: (italian ship)\n:cat2::dash: (farting cat)\n:tophat: \n:monkey_face: (classy monkey)\nmean ship it from me :P\nAt this point the my only negative ones are :-1:, :warning:, :bomb:, :fire:, and :poop:. Though I often comment with :fire: on a removal to mean \"kill it with fire\"\n. Closing as a duplicate of #418, no need to keep an extra issue around.\n. We haven't actually switched to using the @revel forks yet, so they haven't diverged from the originals yet. \nCould you provide some more details about the compile error you're seeing?\n. @wdreeveii is this on master or develop?\n@verdverm @landr0id if on develop, checking for existence of the .git directory before running git needs to be rethought.\n. @brendensoares .git only exists in the repository root, which is why I think https://github.com/revel/revel/commit/e14115760e39dd9d477c7d33c276a03948a7b750 may be the culprit. Though it's using revel.BasePath, so it should be pointing at the right place...\n. Could you share the call to RegisterController around app/tmp/main.go:81 as well as the definition of the offending controller? My quick guess is that one of your controllers embeds a pointer type, but the generated code isn't initializing it to a non-nil value.\n(copied from https://groups.google.com/d/msg/revel-framework/1v3ZHuNFCSE/VeU5KoffTUkJ)\n. @lenw yeah, or any nested embedded pointers of the App struct. Are you embedding anything in there other than revel.Controller?\n. @brendensoares it would happen everywhere, since it's caused by a call in main().\n. You're mostly right, though nil is different from a pointer to nil. In this case, we're sure that c is (*controllers.App)(nil) and so elem is controllers.App, and something must be happening further down. (see http://play.golang.org/p/RNZQPw3zC_).\nSo I think the issue is actually on a subsequent iteration of the BFS in findControllers, i.e. one of the anonymous fields in appControllerPtr is nil. I think maybe this could be fixed by using reflect.TypeOf somehow rather than elem.Type() on :294, but I'm not 100% sure.\n. Reproduction of my theory here: http://play.golang.org/p/mSwtb1VsMT\n. Revel should take care of this.\nHere's an expanded example of the panic: http://play.golang.org/p/KPtauSQ4i5\nAnd here's a potential fix: http://play.golang.org/p/JCJd4diVeK\nAlso here's the current code with a non-pointer embedded type: http://play.golang.org/p/A_mqYkY9a0\nI have no idea why it wasn't an issue before... @lenw it was working on 0.8, right? Can you try removing revmgo.MongoController and seeing if the issue persists?\n. Actually, my \"potential fix\" is way off, as it basically undoes the entire point of dereferencing it. I'll think more about this.\n. :+1: to all comments.\nDid this not work before, or did 0.9 break it?\n. Someone want to own this? It'd be a good one to get into the next patch release.\n. Included in #544\n. Let's follow semver (major.minor.patch). With that terminology in mind, we can create a patch branch, and have bugfixes target that branch. Every once in a while (depending on necessity), we can merge patch into master, rebase or merge into develop, and create a new GH release tagging master.\nI think GH issues are fine for this kind of discussion, but I don't have a strong opinion either way. I relabelled this issue as \"Discuss,\" which sort of makes sense to me.\n. I don't really mind, but \"hotfix\" just reminds me of really old Windows updates haha.\nRandomly googled \"patch vs hotfix\" and found http://stackoverflow.com/a/269383 which is somewhat similar to my thought process.\n. If I'm understanding this right, we don't have to do anything to implement it? If we need to change the package names in the source tree, then I'm against depending on yet another external service which can fail and cause headaches.\n. IMO the way Go is designed, it's up to the application to lock their versions if they want reproducible builds. The many tools to do this make it quite easy.\n. Cool, thanks! @landr0id there should be tests for these.\n. Yeah, all releases should be tagged. To avoid needless releases though, we should group up as many patches as we can.\n. ~~Again, I think * should be implied/default so you don't have to edit all the tests and examples.~~ Sorry, looks like you already did that!\nBesides that, I think this feature is reasonable, since it means that you don't need to run several Go processes to service a single site with multiple subdomains.\n. :+1: \n. Otherwise :+1:, thanks!\n. Merged into patch.\n. Please update your copy of fsnotify, per https://github.com/revel/revel/releases/tag/v0.9.0. \n$ go get -u github.com/howeyc/fsnotify\n. Good call, thanks!\n. I'm using https://github.com/gruntjs/grunt-contrib-watch for my builds, works fine.\n. RFC5322 3.4.1 is the official specification of an email address. We can either appropriate net/mail which (somewhat) implements that spec, or use the HTML5 definition of a valid mail. The latter is the approach we took with batman.js, by using WebKit's regex for validating an email:\n/[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9-]+(\\.[a-z0-9-]+)*/\nhttps://github.com/batmanjs/batman/pull/940\n. Maybe augment the WebKit regex to include \\p{L}? (unicode characters in the letter category)\n. I don't think it's necessary to rename anything. It's understood that email validation is simply to reject obviously malformed addresses, and that the application developer should send a verification email if they really wish to determine that an email is valid. BasicEmail implies that there is a non-basic validator, which there won't ever be.\n. afaik Symfony is the only framework that does that for you, and I'm really not a fan. The vast majority of applications that really need to validate emails will send a verification email anyway, so I don't feel the complexity is justified.\n. This one is kind of annoying, since we don't actually have a way of knowing if the value was left blank or if it was set to a falsy value without resorting to pointers. I don't have a good answer...\n. @landr0id I did that yesterday.\n. Definitely environment variables, with some random values set for dev mode.\n. @ottob you can read environment variables from within the config file directly, like\napp.secret=${APP_SECRET}\nThis is confusing because the issue is titled \"app.secret\" but we have a config var called \"app.secret.\" @brendensoares which were you referring to in your last comment? I feel like we're all on the same page that environment variables are the way to go, so I suggest we close this issue.\n. We ran into it in production. There's a long discussion about the issue here: https://bugzilla.mozilla.org/show_bug.cgi?id=221028\nI would have just modified any existing tests to include the quotation marks, but it looks like there are no tests for this entire function, which is what I meant.\n. Gonna merge this into develop for now, since the next release is coming up pretty soon as discussed.\n. :+1: from me naturally\n. The session ID generation mechanism does not affect the HMAC cookie signing. I like this change, though like you said the extra sha256 is unnecessary and adds more surface area.\nNote for the future: camelCase is preferred to snake_case in Go.\nI'll do a followup commit to remove the sha256.\n. If you have a user's session ID then you are effectively logged in as them, no password required. This matters a ton since by default revel's sessions are long-lived. 256 bits is probably overkill, but you can't really be too safe in these situations.\n@brendensoares certainly we could run the id through any number of extra one-way hashes, but it does nothing to lower the determinism of the output. If anything, it is only detrimental since a hypothetical bug in the sha256 code could compromise the result. Why not use the simpler solution when there are no drawbacks?\n. @brendensoares sorta \u2013 basically I operate under the assumption that more code often means more potential for bugs. In crypto there is often an explicit effort to reduce effective complexity (even if the algorithm itself is mathematically complex) since it's easier to screw up when there's more to think about (e.g. recent Apple and GnuTLS fuckups).\nNot like it really matters much either way for our particular case, since there's no practical attack involved. I just prefer using the simplest solution possible.\n. @robfig ah yeah you're right about the default implementation \u2013\u00a0I was thinking in terms of my own apps which store session data in redis and just store the id on the client (though they still use Revel's id generation code).\n. :100: I agree with all of the points here. It will require some careful structuring to remain compatible with the hot code reloading mechanism though.\nHi Sunohara. kicks across the room (sorry to those who don't get the reference haha)\n. @brendensoares it's just that the character in @bobobo1618's avatar often ends up in situations like:\n\n. Essentially the only thing that needs to be done is rename the generated main method and alter it slightly. I can't think of anything that would make this infeasible.\nAssuming we add a default main.go as part of the scaffolding, I think this would be a really useful change that has no negative impact. It would make things like #554 much less of an issue, since you'd be able to selectively override Revel's behaviour.\n. The only reason I'm suggesting this is because Revel emits some of its own messages directly to INFO, etc. It would be nice to capture those as well (though admittedly not strictly necessary). I thought about specifying a different stream for the internal loggers, but iirc they preformat to add \"INFO\" etc. I guess you could just strip that out though.\nBy \"no standard logger interface\", I mean an interface specifically (the stdlib logger is just a struct type).\nEdit: on second thought, I guess I can just replace the built-in loggers entirely before the app starts, though I'll need to roll my own main. \n. Indeed, though unfortunately there is this case. Since initModules uses INFO and friends, there is no chance to tweak the loggers before they're used. (the generated main.go also uses INFO, and I'm sure there are other places as well)\nOne solution would be to make getLogger overridable. It would be a really simple, backwards compatible change that completely addresses this issue. What do you think?\n. Reopening, with #557 up for discussion.\n. The JSON logs are just for production; in development plaintext is fine. The reason is to allow for consistent parsing of the log stream (with fields) while shipping to Splunk/Logstash/Fluentd etc.\nI really like what logrus did with defining an interface that log.Logger satisfies. This allows for any logger that implements that interface to be dropped in.\n. Maybe \u2013\u00a0I'm super busy at the moment but I'll look at doing it this weekend.\n. It would probably be better to make an abstracted filepath.Walk that handles symlinks, so we can reuse it everywhere.\n. Hm, since the harness looks at stdout to determine when the app launched, this breaks everything. Thoughts on a less brittle way of waiting for the app? Maybe have a default heartbeat endpoint that the harness tries to ping?\nIf we don't want to change that behaviour, then I'm fine with closing this PR.\n. Closing until this comes up again (if it does)\n. Adding to what @robfig said, you can write use a default clause in the switch to handle unspecified cases.\n. I think after you remove commented code and squash those commits, this should be good to go.\n. Does #567 fix this issue?\n. I don't totally follow, why can't you use template.JS? I'm using exactly that in my own application to spit out arbitrary binary data in JS strings.\n. We talked about this in #530 and decided against it at the time. Further discussion here is welcome, but if the assumptions made there were correct (notably that we would need to alter all of revel's import paths) I'm still of the opinion it's not the best way to handle dependency management.\n. :cake::dash:\n. Can you post the panic backtrace?\n. From the Go docs:\ngo\n// ContentLength records the length of the associated content.  The\n// value -1 indicates that the length is unknown.  Unless Request.Method\n// is \"HEAD\", values >= 0 indicate that the given number of bytes may\n// be read from Body.\nSo that's totally fine and makes sense (the Content-Length header was not sent). We'll need to find the source of the io.ErrUnexpectedEOF and determine why it's happening, since ReadAll won't normally return it...\nThis \"fixes\" the issue but doesn't tell us why it's happening:\ndiff\ndiff --git i/tests.go w/tests.go\nindex c9bef29..e109e91 100644\n--- i/tests.go\n+++ w/tests.go\n@@ -108,7 +108,7 @@ func (t *TestSuite) MakeRequest(req *http.Request) {\n        if t.Response, err = t.Client.Do(req); err != nil {\n                panic(err)\n        }\n-       if t.ResponseBody, err = ioutil.ReadAll(t.Response.Body); err != nil {\n+       if t.ResponseBody, err = ioutil.ReadAll(t.Response.Body); err != nil && err != io.ErrUnexpectedEOF {\n                panic(err)\n        }\n. LGTM. Manually merged into the develop branch with 71011a69b850f686038870e859fe25f425e4896d (please target it specifically next time)\n. I think the reason this was omitted originally is that the default of RenderError is StatusInternalServerError. This makes the API consistent though, so :+1:.\nIf you retarget this PR to the develop branch, we can merge.\n. Few minor comments, otherwise LGTM. Please retarget this PR to the develop branch so we can merge easily.\n. Looks like there's an issue with path separators again cc @revel/core \n. Issue with the command line tools only, moved to https://github.com/revel/cmd/issues/4\n. Not sure, but you should rebase your changes onto develop and open a new PR targeting it. Might magically fix itself then :cake: \n. Closing in lieu of #582\n. Makes sense, can you reopen this PR to target develop?\n. Closing in lieu of #581\n. I would condense the conditional to avoid duplicating selected = \" selected\", otherwise lgtm\n. Moved to a new PR to merge.\n. Is this the output after go fmt? Otherwise lgtm\n. Seems good overall :cake: \nIt might be a good idea to add POST to the verb array and kill the request if _method is defined but not present in the array. I'm not particularly opinionated about that though.\n. @brendensoares empty string or something like OPTIONS or herpderp\n. 405 Method Not Allowed would be more appropriate (or even 400 since it's not actually the HTTP method that's not allowed, it's the pseudo _method, but I think 405 is still reasonable).\n:+1: to a filters folder and splitting up, but I think we can save that for another PR (keep features and refactoring separate).\n. Gonna merge this and address @brendensoares' comment in a followup commit.\n. Nice catch, thanks!\n. @revel/core can I get a couple reviews?\n. @brendensoares was that a :+1: in the other PR?\n. LGTM overall, though can you target the develop branch instead as written in CONTRIBUTING.md?\n. This is done by design, to prevent rebuilding multiple times when saving multiple files (or saving a file multiple times).\n@revel/core should we make it configurable?\n. We're getting close here :cake: \n. How about watcher.mode = 'deferred' or 'eager'?\n. Oh, it's merged already. Will push another commit to fix up a spelling mistake.\n. I like the idea, but the current content isn't all that useful. Presumably they've already done most of what's in there to be able to see that file at all.\nEverything from line 28 down is good though!\n. Agreed, it could help people get started with exploring.\n. Since it doesn't need to be asynchronous, I agree that it would make sense to go with a real interface for filters.\n. JavaScript should be sent as application/javascript, which mime-types.conf contains. If you're getting application/x-js, you either have some code altering the regular response, or are using another webserver in front of Revel that is altering the response.\n. @brendensoares because mailer compiles templates.\n. Thanks! Just made one small change in https://github.com/revel/revel/commit/1a28d0c3207cdd6524de841e2d1ad67e000e4257\n. Thanks for the awesome work tracking down and fixing these issues @klauspost!\n. Probably based in on the behaviour that was corrected in #552. As @landr0id mentioned, definitely switch this one over as well.\n. @iamjem yep, exactly.\n. @mcspring FYI the standard way to use forked go libraries is to use your own remote while keeping the packages the same. Otherwise merging upstream changes becomes really difficult.\n. Great work!\n. Just need to rebase and :+1: \n. You can do it in the same PR by force pushing.\n. Makes sense. Two things:\n- Please run go fmt as your indentation is consistent\n- Reopen this PR against the develop branch, as indicated in CONTRIBUTING.md\n. @brendensoares just fixed that in #612. It wasn't really an error; the message was a bit misleading.\n. It would be wonderful if we could kill the sleep 30 steps in CI.\n. It's almost definitely an issue with Revel, not Travis. I'm not too familiar with the origin of the sleeps, but I thought they had to do with some ports not being correctly released or connections being left open.\n. Done, in #613.\n. Good call @anonx, removed in 7c255d7\n. :+1: that is a good idea since we can't alter kernel parameters on CI obviously. It sucks that Revel shuts down so uncleanly, but there is already an issue for that I think.\nThe one annoying thing is that the samples become marginally more difficult to run as examples, but it's a reasonable tradeoff IMO.\n. Is the reason it sends a sigkill over sigint just because of windows?\n. Seems reasonable, though how would we not break compatibility? Keep the common public interfaces in the root package, and proxy to the subpackages?\n. Still nice to have, and most large projects have one. May as well keep it IMO, even if it's not used much.\n. mods.io is Revel.\n. This would be really cool. Could maybe clear up some confusing bits and more clearly define the structure and approach to developing a Revel app.\nI think YouTube would be fine.\n. I agree with @brendensoares, there are more important and useful things to be done before this.\n. Revel's router is trie-based, and very fast. https://github.com/robfig/pathtree\n. :-1: to YAML, it's an extremely complex format under the hood. Let's keep this as simple as possible. One option is to just use a Go DSL like the other routing libs out there.\n``` go\nsomething.GET(\"/\", \"App.Index\")\nsomething.GET(\"/favicon.ico\", \"404\")\nsomething.GET(\"/cats/:id\", \"Cats.Show\")\nsomething.DELETE(\"/cats/:id\", \"Cats.Destroy\")\nsomething.Resource(\"Cats\") // implicitly set up routes, like in rails\n```\netc.\n. It would be really simple, sure.\n. :+1: \n. This has been fixed in develop already, in #585.\n. :+1: for the new config, some comments for the other changes.\n. +1000\n. I think you may need to use a filter to intercept non-controller actions. See: http://revel.github.io/manual/filters.html\n. http://gcc.gnu.org/onlinedocs/gccint/Collect2.html\nWhat version of Go are you using?\n. The current version has been working fine for me for the past months with Gmail.\n. Cool, makes sense. Your original post was a bit misleading since you had used <pre> instead of backticks (fixed it for you now), causing it to render as From: SOME NAME SOME@MAIL.COM.\nShouldn't we do the same for the c.Rcpt calls as well? I think the spec for forward-path is the same as reverse-path.\n. @brendensoares killing the mail code in Revel is fine with me. (if you ask me about deleting code 99% of the time I will say it's a good idea :P)\n. Makes sense to me :+1: \n. The directory structure mimics Play fyi.\nI'm fairly sure the current config setup is 12 factor compliant. Production keys should come from environment variables (which it supports). If we were going to change it, I'd vote for having multiple files, with the format conf/<environment>.yml (e.g. conf/production.yml).\nI don't really see why conf needs to go in app. See rails, etc.\nDiscussion about a YAML routes file: #619 \nThe templating system needs a major overhaul to support custom template formats (search for \"template\" in this repo and you'll find a whole bunch of issues). Better extensions would be part of that.\nJSON body decoding and binding: #97 #110 \nI'm not sure how I feel about Revel bundling an ORM. You can get set up with gorp or similar fairly easily without a specific Revel layer for it.\nNot really sure what you mean by 4/. I don't think anyone is intending to write a CSS preprocessor as part of Revel.\nThanks for the input! Might be better to create multiple issues next time, just to make it easier to read.\n. I agree, the behaviour is weird. Can you change Increment and Decrement as well?\n. Um, that is really weird, and should be impossible. I don't have an answer.\n. What is the use case of this? Is there a situation where you can set headers, but can't set the actual method?\nIf you could squash all those duplicate commits up, that would be awesome.\n. You'll need to git rebase -i HEAD~9, remove the unrelated compression commit, and then switch all the extra commits to be squashed. I can do it and open a new PR if you want.\n. Cleaned up the commits in #641\n. Can you try adding a filter before the router in your app/init.go that logs the request's path?\n. My only comment is that maybe this should only be allowed for POST requests. Does that make sense?\n. Yeah, they are similar but fulfill very different needs. #583 is optionally enabled though, so it's fine to have available still.\n. @klauspost, you can set the headers inline since http.Header is just a map[string][]string.\n. @brendensoares how's that now?\n. Thanks!\n. @brendensoares RenderFile reads the mod time and includes it in the call to http.ServeContent. As a result, caching headers are sent. This is effectively a duplicate of #352.\n. If we made it backwards compatible, it would be awesome to include in v0.10. Otherwise, maybe we should hold off.\nRelatedly, I would love if we could organize a date to get v0.10 out, it's long overdue.\n. Good call\n. No reason for this to be delayed, rescheduled for v0.10\n. Duplicate of #481.\n. It's referring to #658 which you already handled, so I'll close this one.\n. May be due to the leak fixed in develop.\n. Use develop for the latest changes. See CONTRIBUTING.md or Revel Workflow for a description of how Revel is developed.\nYep, the channel is alive, if you ping me (just say a sentence including \"pushrax\") I'll probably respond within a few hours.\n. Don't think so, I will try to reproduce.\n. Before you couldn't even specify an extension... #459 https://github.com/robfig/pathtree/pull/4\n. We can fork pathtree to the revel organization if we need to.\n. lmao\n. :+1: from me\n. The issue is about to be fixed in the develop branch, which should hopefully be merged into master soon.\n. @klauspost can you confirm this version makes sense to you?\n. I already merged your previous PR which included that patch, so it should be good to go.\n. It must be some other code, this is all Assert does:\n``` go\nfunc (t *TestSuite) Assert(exp bool) {\n    t.Assertf(exp, \"Assertion failed\")\n}\nfunc (t *TestSuite) Assertf(exp bool, formatStr string, args ...interface{}) {\n    if !exp {\n        panic(fmt.Errorf(formatStr, args...))\n    }\n}\n```\nNo reflection there.\n. Hm, lines 52 and 59 \u2013 user = new(models.User) \u2013 should not compile, since user already has type models.User, not *models.User. Maybe the error is a result of some preparsing that Revel is doing. Try switching the declaration on line 42 to var user *models.User and adjusting the rest as appropriate.\n. It's the code that generates main.go to register all the controllers and test suites. https://github.com/revel/revel/blob/master/harness/reflect.go\n. Two things I'm noticing:\n- Putting this logic in the template is a violation of separation of concerns. Make a paginator model that has the necessary functions to build the view.\n- Why are your values sometimes floats? Rather than working around it, just fix it!\n. Why not split up your conf into data.conf.url, data.conf.user etc.\n. https://github.com/revel/revel/pull/557 is relevant.\n. To be honest, I'm totally fine with the current config format \u2013 any weird external/custom files that an app needs can be loaded and parsed manually. Since env vars are supported, most of my production configuration values come from there anyway.\nSide note: parsing time is unimportant since it is only loaded once at boot time.\n. Thanks, looks good.\n. http://www.gorillatoolkit.org/pkg/websocket is another widely used WebSocket implementation, could be worth looking at.\n. Does Redirect(\"/page-1\") work?\n. The return value is evaluated before any defers, so that's fine. I'm more wondering why you're using os.O_CREATE|os.O_RDWR|os.O_TRUNC, which means you're always sending an empty file (unless you're writing to the file and rewinding it somewhere).\n. Good call @klauspost. This is the relevant code.\n. @klauspost is right, it's not a bug in Revel.\n. Looks good\n. IMO the ideal API would be to have PostForm and similar methods return a wrapped request object that you can modify, and then call Send or something like that. Bit of a breaking change, so maybe have both, with different names?\n. Keeping the token random and parsing it out of the cookie seems best to me. This tests the entire real interface as a black box.\nAssertNotContains seems fine. An alternative is to use AssertContainsRegex until/if we don't add it.\n:+1: for \"show response\"\nAdding aliases for the MakeRequest family of functions works for me.\n. Er, I meant to say we should parse it out of the header, I think.\nRenaming is fine.\n. My local testing indicates it's working, and I'll try it in production on mods.io soon. We should probably set up some automated tests as well, though it's a bit of an annoying case to test.\nAdditionally, we can release it as a beta feature since it's behind the config flag, and invite people to test it out.\n. btw, no need to assign the PR author to the PR :P\n. Cool, will try this out in production ASAP as well.\n. We can remove this and leave it up to the app once main() is exposed.\n. The average developer won't make use of this anyway \u2013 it's more of a feature for production deployments. In addition, I highly doubt anyone runs Revel in production on a Windows box, so if we really want this we can just use conditional compilation to exclude Windows.\n. Yes, we would need to make a new file.\n. Alternatively, we can just update to the latest API. Edit, just read https://groups.google.com/forum/#!msg/golang-dev/-__vD-kOF5s/v8eLY271-ucJ, looks like we have to use the gopkg.in version :S\n. Nothing, and this is closed by #692\n. @landr0id I'm curious what cases you had in mind. Maybe if there is a route like /movies/:name, and a movie name happens to end with .txt or something?\nWhat I really want is the flexibility of Rails' routing, which automatically creates routes like /posts/:id(.:format) when you do resources :posts. Ideally the route itself can specify what behaviour it wants, so I suppose the best time to do this would be when we improve the route file format. For now I'll make it a config thing, and we can go from there.\n. Actually, I'll just remove the later commits and include this as a filter in the app that needs it.\n. Works for Go 1.3+ only, should we increase the minimum Go version for Revel?\n. Closing this for now since it needs further investigation.\n. @brendensoares \n. If you have the dev console open in your browser, it will try to fetch the source map. http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\nIgnore this warning, or remove the source map stuff from the top of your copy of angular.min.js\n. That solution seems reasonable I think.\n. @brendensoares, @anonx gave a working solution in his latest comment.\n. IMO that solution is perfectly fine \u2013\u00a0otherwise you have a shitty cyclic conceptual dependency. In MVC, the models should not know about the controllers, but it's ok for models to know about the underlying (i.e. Revel's) concept of a controller.\n. Rebased and merged in d45d8103a2cebe2043bac8cb667ed79e182b3168\n. Feel free to reopen this issue if you need more info.\n. public is fine with me, don't really see a need to change it.\n. Test methods must begin with the string Test, e.g. TestUserCanCreateAccount.\n. You can implement the Validator interface and then call Check directly on your Validation instance.\n. Hm, would it be feasible to create your own tiny controller to interface with the module instead? IMO it makes a lot more sense if the module isn't responsible for handling any requests, and instead is mainly used as a library by the main app.\n. Ideally this would be done by writing back to the response in the result Apply methods instead (e.g. here), but that gets run after the filter chain. Instead, what we could do to keep the default statuses defined in a single place is add a DefaultStatus method to the Result interface, does that sound reasonable?\n. Doesn't help, since then the status will always be 200 instead of 0 until the result is applied, regardless of what kind of result the controller returned.\n. @brendensoares the Apply methods are the things that actually consume Response.Status.\nI figured this issue is asking for something similar to https://github.com/revel/revel/issues/704\n. I was under the impression c.Response.Status was more of a write-only thing. I actually think that having specific accessor methods would be better in this case, it would make the validity clearer.\n. We should ToLower the template name when storing and ToLower it when looking up, that will handle all cases.\n. Could we just keep it case-sensitive? It may break some existing applications, but it should break in an obvious way.\n. Interesting, must be due to the reflection code. Not sure this is too important to fix though.\n. Easy fix then, we can just change that condition to only return if genDecl.Specs is 0.\n. @brendensoares so it continues the normal path if the number of decls is >= 1.\n. @brendensoares https://github.com/revel/revel/blob/master/harness/reflect.go#L625\n. @brendensoares it's already picking the first typespec from the list \u2013\u00a0what I'm suggesting is that if there is more than one we still just pick the first one.\n. Try checking your HTTP console for the headers, or check the output of curl -I http://<your host>.\n. text/plain is weird, is the template an html file?\n. Was this resolved?\n. Thanks!\n. This is fine with me :+1: \n. Makes sense, thanks.\n. @anonx the bit about sorting imports was actually about leaving blank lines between groups of packages. Check out the link.\nIMO just following all of https://code.google.com/p/go-wiki/wiki/CodeReviewComments would get us 90% of the way there.\n. :+1: for closing the closer.\n. What we do on mods.io is sit nginx in front, and then dynamically set up ports to load balance on. Ideally when https://github.com/revel/revel/pull/690 gets into its final state, it will be the easiest way to do zero downtime restarts.\n. Thanks!\n. A float-specific range function makes sense to me, since the arguments needs to be different types.\n. :-1:, then we lose compile-time type checking, which should be avoided when possible.\n. Done, I think. There are a lot of builds queued, so it might take a while for things to appear correctly.\n. Please go fmt, otherwise LGTM\n. Anyone using vi/vim should seriously have this in their global gitignore.\n. Looks good, but can you squash those all into one commit?\n. Wait, is this really what we want? It makes it harder to keep the versions in sync if people aren't vendoring their dependencies. I am fine with the separation overall, but just missed the discussion.\n. Works for me \u2013\u00a0on CI I think we just need to check out $CURRENT_BRANCH on related repos and it should work.\n. You can git checkout after a go get. I have a change staged for this, will push it up after I finish some work things.\n. Do you have some generated files left around that were deleted in the tree?\n. You need to go get github.com/revel/samples\n. CI is still broken.\n. I agree, testing is the better package name.\n. @anonx none of those are really suitable for libraries; they are meant for the final binaries. In fact, if we were going to do that for modules and samples, why wouldn't we just keep them in the same repo\u203d\n. @brendensoares this will be an issue indefinitely, unless we never make breaking changes to the API (which we will, hopefully) or want to update modules/core in sync.\n. With this change, you can't make a PR against master and have CI run correctly, since it will check out develop modules and cmd.\n. The samples are a sanity check that we haven't broken the API. I think it's good to keep them around (also, they aren't the issue here anyway since they are on master).\ncmd and modules are more tightly coupled to the core.\nGemfile.lock specifies a particular revision (not branch) to check out. I suppose we could replicate this by using travis.yml as a sort of revision lock.\n\nMaybe we can add some condition to select develop vs master inside of .travis.yml?\n\nLike, figure out somehow whether a particular PR is against master or develop? Not sure how we'd do that.\n. #810 is merged into develop, is that enough to close this issue (after updating the docs)?\n. This is alright with me, but seems somewhat unnecessary as gzip is already very good at this.\n. This also isn't atomic, when it easily could be :(\n. > but want to ensure from the owners that we should build to the systems capabilities not an implicit contract.\n:+1: from me.\n. I don't mind switching the interface to a signed integer\n. :+1: \n. @brendensoares I did a couple days ago, it's on develop\n. Notice added in the readme and release notes for 0.11.0.\n. I'm sorry, I honestly can't understand what this means.\n. :+1: to this feature, but like @anonx said please open this against the modules repo.\n. As @anonx said, if you need to use the redis connection directly to access features not present in the cache module, just create your own redis connection.\n. Looks good, though can you target the develop branch as described in the CONTRIBUTING.md?\n. I don't think either of these are a good idea:\nGET     /:controller/                           :controller.index\n*       /:controller/:action                    :controller.:action\nThe potential security downside is pretty high.\n. Can you add a regression test for this one?\n. Merged in https://github.com/revel/revel/commit/bcce705fe25b4a0bc36c13ce3c864ce9f08e8d41, and made a couple modifications in https://github.com/revel/revel/commit/fcf88855b6ec0bb3393a641f84a45610c70edb29. I switched http.maxRequestSize to http.maxrequestsize to align with the lowercase convention of other settings, and set the default to \"don't set this at all.\"\n. Sometimes templates are the right place to do certain calculations if the result is only relevant to the view. For example, calculating a percentage from a ratio or building a human-readable representation of a byte value. However, the cleanest way would be to create a filter (\"TemplateFunc\") that does the specific calculation, rather than doing arbitrary math in the template.\n. :-1: there is no clear value that GH issues don't provide\n. Can you confirm this works if there is a space in the path?\n. This change was just for performance reasons, since logging to /dev/null should be slower than just discarding the stream afaik.\n. This conditional isn't really necessary, since joining a blank string is a noop.\n. :+1: good call\n. How about moving this to the previous line and just doing action == \"Root\"?\n. val is already a string within this case of the assertion switch.\n. Unnecessary comment imo\n. To be consistent, either the output of this function should always be of type template.HTML or never.\n. This file is the wrong place for this. It should be implemented like the other filters.\n. I don't think this should be enabled by default, for CSRF reasons. Opt-in makes more sense.\n. break\n. Probably instantiate this outside of the method, and maybe export it to allow custom methods?\n. This will never happen (<=). Since \"\" is not in the allowed array, you can just remove these 4 lines.\n. Request.Form includes values from the query string, which creates a big CSRF hole in this feature. You can remove these two lines and use c.Request.Request.PostFormValue(\"_method\") below to only read from the body.\n. :+1: \n. :+1: \n. Any of these is fine with me.\n. Instead of making a new config file and loading it, you could do\ngo\nimport \"github.com/robfig/config\"\n// ...\nrevel.Config = &revel.MergedConfig{config.NewDefault(), \"\"}\n. For some reason I thought the last filter actually ends up indirectly executing the controller, is that wrong? I don't mind either name.\n\nJust confirmed that this is the case, so it would indeed be possible for the session to be emptied. Since the variable name thing isn't really important, I'll merge this now.\n. You stripped spaces off the end of these lines, I'm not sure if it matters but they may have been there for a reason.\n. Why not just call this TemplateEngine? Everything would read much better, e.g. RegisterTemplateEngine. Might even call this TemplateParser.\n. Do Go template engines usually return html/template Templates?\n. This nesting has gotten too deep, I think this should be extracted into a method. \n. We need to not call this if eager rebuild is enabled, I think.\n. I'd call this function eagerRebuildEnabled\n. This seems like an odd way of controlling the flow, how about breaking Notify up into several submethods and then calling the ones needed rather than having the if !w.eagerRebuildMode() in Notify?\n. We've been using Content-Type (with that capitalization). I know header keys are case insensitive, but it's better to be consistent.\n. Is there a case the underlying writer is not an http.CloseNotifier?\n. Similar \u2013\u00a0is there a case it's not a Closer?\n. Typo on all of these, should be \"guaranteed\"\n. Sorry, it's the previous one only (line 244). doh\n. Rollback is a noop if the tx was committed, so it should stay in FINALLY. Otherwise handled errors won't cause a rollback when they should (an uncommited tx is different from a rolled back tx).\n. The original behaviour makes rollback work correctly if the transaction was already committed, and every uncommitted transaction should always be rolled back (as mentioned in my other comment).\n. The Go convention for comments is to always use full sentences. e.g.\ngo\nMaxIdleConns = 0 // No idle connections.\n. You can use revel.Config.IntDefault to save the found check.\n. I'd put these in TRACE rather than INFO.\n. Are the last two logs necessary? I feel like the absence of a message means everything is fine, and it should only say something if it dies.\n. It also took into account that you might have forgotten to, or purposely didn't commit it before returning a result from the controller. In this case, it is actually mandatory to roll back (especially if there was a SQL error that was not panicked up the chain).\n. For type assertions I think ok is pretty widely accepted. e.g. http://golang.org/src/pkg/net/dial.go\n. I'd call this method extractAddress or something like that to be more specific. I'd call the argument from.\n. Go convention calls for title case sentences in comments. You can remove the fix issue #448 bit, it should be easy to find from the commit log.\n. Does this ever happen? I think we can probably remove this case.\n. addr might be a better name for sAlias\n. IMO this shouldn't be the concern of the framework.\n. This change is just to prefer JSON over XML if both are accepted (not like this is ever going to be the case)\n. ?\n. Isn't this backwards? Should be if !Config.BoolDefault(\"log.colorize\", true) { I think.\n. Ah, I think MainWatcher is just used for the routes and templates (in the real server, not the harness), so this call is fine (and necessary).\n. This is going to reallocate and be quite slow compared to doing a case-insensitive search.\n. (just spitting out my thoughts here)\nThis is safe because a false positive, at worst, will cause some spaces to not be trimmed.\n. This is probably premature optimization, but I would benchmark a regex vs this.\n. ",
    "exherb": "@robfig\nlooks \ngo\nf, ok := w.(http.Flusher)\nw.Write(raw)\nf.Flush()\nis not working ...\n. ",
    "andrewmunsell": "Makes sense-- I condensed it down to use the existing RenderJsonResult.\n. Yep, makes sense.\n. ",
    "jwmiller19": "Here is the output from when I tried to compile, along with the main.go.\nhttps://gist.github.com/jwmiller19/8668947\n. ",
    "daemonfire300": "Also occurs on Windows 8.1 (does not seem to be specific to the Windows version).\nhttps://gist.github.com/daemonfire300/b45a947b360443c6e6ff\n. Are there any workarounds for this?\n. I just ran my code/revel against go1.2amd64 and it seems to work but not on go1.3amd64 on my laptop.\n. INFO  2014/09/29 22:47:52 gorp.go:1161: [===|gorp|===] begin; []\nWARN  2014/09/29 22:47:52 app.go:10: []string{\"C:\\Users\\lop\\Go\\src/bitbucket.org\\daemonfire300\\pleyus-alpha/app\", \"C:\\Users\\lop\\Go\\src\\github.com\\revel\\revel\\modules\\testrunner/app\", \"C:\\Users\\lop\\Go\\src/bitbucket.org\\daemonfire300\\pleyus-alpha/tests\", \"C:\\Users\\lop\\Go\\src\\github.com\\revel\\revel\\modules\\static/app\"}\n. @anonx  I am a bit ashamed and confused. Because I can not reproduce it not anymore either.\nI will describe what I did.\nMy project was running with an old revel 0.9 a few months old, then I ran go get -u //* to update all packages, ran \"revel run ...\" and browsed localhost:9000 and the described error popped up.\nAfter checking on my Desktop (Windows 7 Go 1.2amd64) and one day later, I ran a go update on my Laptop (Go 1.3amd64 Windows 8.1 Pro) again and since then I can not reproduce the error.\n. I am sorry, I forget to check one important thing. Revel users reflect for a lot of things and if you make a function\nfunc (u User) (v revel.Validation)\nbut your actual object in the controller is called \"user\" revel assigns the error to \"u.$field\" and \"user.$field\" stays empty.\nSo it is not an actual bug, I just missed that tiny feature.\n. Would it make sense to make a RangeValidator interface and create Range (int) and RangeFloat?\n. ",
    "MZAWeb": "Nope. It was my first idea too :)\n. You're proposing I should create a range of equal elements ? \nSent from my iPhone\n\nOn Aug 22, 2013, at 8:33, Shaban notifications@github.com wrote:\nshould be fairly easy i used a function to limit results and simply had it receive a int limit, an interface that is tested on being slice and then return the limited slice as interface and it worked.\nthat case is even easier since you just would have to create a slice of n entries to range over.\nso\nfunc Times(n int)[]bool{\n return make([]bool,n)\n}\nwill do the job.\n\u2014\nReply to this email directly or view it on GitHub.\n. Not worried about the memory footprint. But the solution is ugly and hacky. We shouldn't need to work around such a simple limitation. Check the pull request, is actually less code to do this right than to build a slice to range over it.\n. @shaban I see your point now, and it's a great one.\n\nSpecially the second snippets. Really useful. \n@robfig Do you think those functions make sense to merge into core?\n. ",
    "jchavannes": "Created PR with a change that fixes it for me: #1082.\n. Replacing with #1082 which is against the right branch.\n. @jeevatkm No problem.  Let me know if there's anything else I can do here.\n. ",
    "codeb2cc": "I've encountered the same problem. After checking the raw request I find out that Chrome sends GET ws://hostname/ws/socket HTTP/1.1 but IE just sends GET /ws/socket HTTP/1.1. I think that's the casue.\n. Thanks. It works correctly now. And I think you should update the harness.go too.\n. ",
    "jlujan": "I was thinking more of just making GetLogger public.\nThen for adding a gorp log it is just something like:\ngorp_log, _ := revel.Config.String(\"log.gorp.output\")\nlogger := revel.GetLogger(gorp_log)\nDbm.TraceOn(\"[gorp]\", logger)\nNo reason to add it as revel.GROP or anything.\n. That would actually just be:\nlogger := revel.GetLogger(\"gorp\")\nDbm.TraceOn(\"[gorp]\", logger)\n. ",
    "slogsdon": "No worries on the time. The files are still in the feature branch I was working on in my fork of revel, but I've closed this issue until I can find a nice, idiomatic way of doing things while keeping it decoupled. My first iteration wasn't to my liking.\nI've got a working auth module in a project of mine, so hopefully using it will help me figure out the above easier.\n. Thanks for the feedback, Rob. These shouldn't be too hard to take care of, so I should have some new commits for you to look over in the next few days.\n. Now that I'm at a computer, here are answers for your questions:\n\nHow do you envision an app would integrate this module? I assume that your intention is that they could use the built-in routes of Session controller or write their own that calls the library directly?\n\nYes, my initial idea was that the built-in routes could be used, but now that you mention it, having the ability to use the library in arbitrary calls makes sense as well.\n\nWhy use the cache? \n\nI have no clue. I think I had a reason, but knowing that the session cookie is signed leads me to believe it should just be removed.\n\nI'm not sure how far you want to go into permissions, but a list of permission strings would be far more general than a single Role string.\n\nDefinitely. How do you see the permission strings being used?\n. > One approach that is really easy to implement (and I'm currently doing with an app) is using action based permissions. In the DB i have a table where all permissions are listed and another one with the user id and a permission id to see if the user is allowed to call that specific action.\nI see where you're going with that. I believe we're working on an app at work that has a similar setup. Perhaps exposing something like auth.GetHash (see above) would be best so the developer can define the permissions has he/she sees fit?\n. Thanks, @robfig. I responded to your diff comments and will work on remaining changes as I can. I'm currently in a bit of a time-crunch with a few projects at my day job, so hopefully it won't be long.\nHonestly, the only auth system bundled with a framework that I have used is the default MembershipProvider in .NET. With that, .NET provides methods for testing whether a user is logged in or not, but anything beyond that (access control for individual resources, for example) is left to the developer to implement. Check out MSDN for details, but the gist is that it creates a guid for users and manages the passwords for the users. Authentication can be validated programmatically or with web controls.\nI've also used the access control features that are built into the Phalcon PHP framework (see ). You define a very straightforward list of resources and the roles that are allowed to access them, and the ACL object allows for testing a user's role against that list.\n. @brendensoares I haven't had the chance recently finish off this pull request due to day-job obligations (we are down to one dev, now). \nFor your first comment, one could use revel.InterceptFunc to do what your describing. Example from above where the third parameter is the controller that requires authentication:\nrevel.InterceptFunc(auth.CheckSession, revel.BEFORE, &controllers.Admin{})\nAs far as the session key goes, it would be a trivial change to use revel.Config.String to grab the session key. I had hard-coded it in the first place just to get the functionality/api flushed out.\n. Ah, I understand you now. My apologies. With your proposed way of embedding the auth struct into the controller, wouldn't the programmer still be required to to flag the controller as requiring authentication? Just spit-balling there trying to nail this down.\nThe hardcoded redirect on invalid session had been discussed slightly above. @robfig suggested switching /session to /auth for capturing credentials. The default views can be modified as is if the programmer chooses, and if he/she requires a more custom implementation, the programmer should be able to easily use the exposed api. Whatever is decided, I think flexibility is key. I've tried to maintain flexibility, but there's a high chance that things can be done better.\nDefinitely wouldn't mind others pitching in on this. That's the goal of GitHub, right?\nLook's like @mclark4386 beat me to pointing you to the Google Group.\n. @brendensoares I'll give a quick run-down of currently supported scenarios:\n1. The dev chooses to use all the defaults by adding module:auth to his/her routes file. This scenario would use the default controller and views.\n2. The dev adds module:auth to his/her routes file and creates his/her own views in views/session/ for customization. This scenario would only use the default controller.\n3. The dev adds a custom auth controller to his/her app, using the exported functions of the module. There would also be a need for views to match the controller and the appropriate routes in the routes file.\nObviously, scenario 3 involves the most amount of work, but I believe it would allow for the customization that you're describing. This was only my second iteration of an authentication module, so there may be a better way of handling having a super basic offering that would work as a default and also having the ability to customize each part of the authentication process.\n. I agree with your opinions on the module including the basic methods, but maybe @robfig or someone else more involved in the project can shed some light on whether or not to include a \"starter\" set of a controller, views, etc.\nTo be honest, I've only had experience with .NET MembershipProvider's when it comes to framework supplied authentication strategies, and I can go further into that if needed. I'm not sure how other frameworks like Rails or Play (which revel has been modeled after both) handle this.\n. @brendensoares I can try to make the changes in the next couple of weeks, but more than likely, I won't be able to finish them. I have a few big projects at work wrapping up and a baby boy coming into the world towards the end of the month.\nThat being said, I would like to get this cleaned up so that we can get it merged into master. I will try to get this to a good state, but I can't promise anything to be honest.\n. bah. tried to rebase my recent commits down to one and screwed the pooch.\n@brendensoares I've made most of the changes discussed above, except for implementing in the booking app, and removed the bits regarding authorization so that #409 can take over.\n. Completely understandable. I should be able to repackage these in a PR targeted for the develop branch tonight.\n. Submitted a basic PR for this that adds a test for the X-Forwarded-For header.\n. No problem, dude. :thumbsup:\n. I haven't verified this exact implementation, but I do use similar code to this in other projects. This should work without issue in it's current state as long as the proxy sets the header with the correct IP.\n. @brendensoares I commented on your line notes. \nI currently have very limited free time, so I'm not sure if I will be able to work on this before the desired milestone. I will certainly try, but in case I don't, I'm all for someone picking this up and going with it so that it progresses faster and can be merged.\n. Yes, I'm still in the process of integrating with the booking app.\n. I'm sorry about this. I think I was half asleep when I pushed my commits, not realizing that they would be added to the pull request. I'm aware of the contributing guidelines and will update when I have a chance.\n. Yes, it will definitely be possible to use the module for this. It will be worked in once I finish the integration with the booking app.\n. I'm a lazy dev sometimes when it comes to naming, but I agree.\n. It wasn't my intention for AllowedActions to be hardcoded. It merely defines the signature by which to get the permissions for the user in a similar manner that User information is retrieved. I'll work on making it more general as per you suggestions.\n. That would make more sense to match the routes to the module name.\n. It isn't. I believe it is residual from when I was first starting on this, but I never got around to removing it. I'll be sure to do that.\n. I agree. The implementation is what it is because, at the time, I wasn't able to come up with a nice solution that follows what you suggest, so I fell back to this.\n. Yes, and I removed/changed references to Session in the module as well for the same reason.\n. This is a remnant of things before it was decided to strip down the module to the basics, and as such, we should remove and leave it to the controller to declare.\n. I'm always up for a better/clearer API. Validate and IsActive both seem to be better alternatives to Check.\n. I didn't have anything better to call it at the time.\n. I was referring to the types/functions in modules/auth/plugin.go. I had renamed the routes for this controller but hadn't renamed the controller struct itself.\n. ",
    "yiziz": "don't have the time for this currently, if I get to implementing this though, will definitely send a request\n. ",
    "dominicphillips": "Thats what the revel build command is for. For example:\nrevel build github.com/robfig/revel/samples/chat /tmp/chat\n. ",
    "ysimonson": "Perfect, thank you!\n. ",
    "mclark4386": "I'll test this later, but I can see this example being very useful and since there is a twitter and a FB one already I see no reason not to have it, but it's up to Rob in the end^^;\n. after I login it goes into an infinite loop saying: Login successful: and refreshing.\n. lol gotcha, may bad\n. boom, that got it^^\n. There needs to be a way to \"+1\" pull requests^^ Hear that GitHub? Get on it! =P\n. @brendensoares https://groups.google.com/forum/#!forum/revel-framework ^^\n. This seems like a nice addition!\n. should a move all the work into a controller and call that from the job and admin panel... though part of the point was to use the job infrastructure...\n. ah, cool... I'll try that. I just haven't gotten completely comfortable with go yet so somethings are still magic-esk so I was more or less going off the booking sample. I'll let you know how it goes. Thanks! \n. That got it! thanks!\n. It may be getting confused because of the fact that your GOPATH has 2 values.\n. @twoolie  fair enough\n. I've actually got mine deploying via git + a deploy script that pulls the latest master, switches to a local deploy branch with all the passwords and keys in it and then rebases off the new master and then I revel run AppName prod ... and like magic I have updated and restarted in about 5-10 seconds^^\n. revel package AppName\n. do you mean like /signin/:email/:password ?\n. ah, gotcha! That is a good idea!\n. Pretty sure then you would set it to \"Allen < 123@abc.com > \" instead of just the email.\n. ",
    "marconi": "Yep, no worries though, I just thought someone would find this useful. Cheers! ;)\n. Or you can clone my revel fork at https://github.com/marconi/revel.git and run the persona project under samples.\nOn Tuesday, September 10, 2013 at 7:08 AM, Matthew Clark wrote:\n\nis there an easy way to gen a diff of this so I can test it? I would very much like to try the sample because I can see it being helpful!^^\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/robfig/revel/pull/288#issuecomment-24122148).\n. that's what happens when you don't set a host, see the controller:\n\nconst host = \"\"\n. :+1: \n. Updated the pull request, cheers!\n. ",
    "cswank": "I followed both suggestions and am still getting the same results.  I built go from source and changed my PATH and GOROOT to point to the new install.  Here is what the build command output looks like after I updated it (I don't see evidence that the standard lib is being built):\nINFO  2013/09/02 05:43:27 harness.go:157: Listening on :5000\nTRACE 2013/09/02 05:43:30 harness.go:124: Rebuild\nTRACE 2013/09/02 05:43:31 build.go:73: Exec: [/home/craig/go/bin/go build -tags gorp -v -o /home/craig/Projects/registry/container/bin/docker-registry bitbucket.com/cswank/docker-registry/app/tmp]\nTRACE 2013/09/02 05:43:56 app.go:56: Exec app: /home/craig/Projects/registry/container/bin/docker-registry [/home/craig/Projects/registry/container/bin/docker-registry -port=34423 -importPath=bitbucket.com/cswank/docker-registry -runMode=dev]\nINFO  2013/09/02 05:43:56 revel.go:286: Loaded module static\nINFO  2013/09/02 05:43:56 revel.go:286: Loaded module testrunner\nINFO  2013/09/02 05:43:56 revel.go:286: Loaded module jobs\nINFO  2013/09/02 05:43:56 main.go:32: Running revel server\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Application\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Jobs\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Static\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: TestRunner\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: StorageApplication\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Index\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Tags\nTRACE 2013/09/02 05:43:56 controller.go:363: Registered controller: Images\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/bitbucket.com/cswank/docker-registry/app/views\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/bitbucket.com/cswank/docker-registry/app/views/Application\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/templates\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/templates/errors\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/testrunner/app/views\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/testrunner/app/views/TestRunner\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/jobs/app/views\nTRACE 2013/09/02 05:43:56 watcher.go:94: Watching: /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/jobs/app/views/Jobs\nTRACE 2013/09/02 05:43:56 watcher.go:72: Watching: /home/craig/Projects/registry/container/src/bitbucket.com/cswank/docker-registry/conf/routes\nGo to /@tests to run the tests.\nGo to /@jobs to see job status.\nListening on port 34423...\nTRACE 2013/09/02 05:43:57 template.go:170: Refreshing templates from [/home/craig/Projects/registry/container/src/bitbucket.com/cswank/docker-registry/app/views /home/craig/Projects/registry/container/src/github.com/robfig/revel/templates /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/testrunner/app/views /home/craig/Projects/registry/container/src/github.com/robfig/revel/modules/jobs/app/views]\nTRACE 2013/09/02 05:43:57 i18n.go:184: Unable to read locale cookie with name 'REVEL_LANG': http: named cookie not present\nTRACE 2013/09/02 05:43:57 i18n.go:150: Found Accept-Language header value: en-us\nTRACE 2013/09/02 05:43:57 i18n.go:184: Unable to read locale cookie with name 'REVEL_LANG': http: named cookie not present\nTRACE 2013/09/02 05:43:57 i18n.go:150: Found Accept-Language header value: en-us\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: moduleName as string\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: prefix as string\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: filepath as string\nTRACE 2013/09/02 05:43:57 i18n.go:184: Unable to read locale cookie with name 'REVEL_LANG': http: named cookie not present\nTRACE 2013/09/02 05:43:57 i18n.go:150: Found Accept-Language header value: en-us\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: moduleName as string\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: prefix as string\nTRACE 2013/09/02 05:43:57 invoker.go:26: Binding: filepath as string\n^CTRACE 2013/09/02 05:44:01 app.go:86: Killing revel server pid 7788\n. The trace didn't seem to print anything different, so I broke my code with an unneeded import.  Here is the output.  I wonder if it is the sqlite3 stuff that is taking a long time?  I used the booking app as a starting template.\nERROR 2013/09/02 12:40:21 build.go:80: code.google.com/p/go.net/websocket\ngithub.com/howeyc/fsnotify\ngithub.com/robfig/config\ngithub.com/robfig/pathtree\ngithub.com/streadway/simpleuuid\nbitbucket.com/cswank/docker-registry/app/checksums\nbitbucket.com/cswank/docker-registry/app/storage\ngithub.com/mattn/go-sqlite3\ngithub.com/robfig/cron\ngithub.com/robfig/revel\nbitbucket.com/cswank/docker-registry/app\nbitbucket.com/cswank/docker-registry/app/controllers\nbitbucket.com/cswank/docker-registry/tests\ngithub.com/robfig/revel/modules/jobs/app/jobs\ngithub.com/robfig/revel/modules/static/app/controllers\nbitbucket.com/cswank/docker-registry/app/controllers\nbitbucket.com/cswank/docker-registry/app/controllers/images.go:6: imported and not used: \"os\"\ngithub.com/robfig/revel/modules/testrunner/app\ngithub.com/robfig/revel/modules/jobs/app/controllers\ngithub.com/robfig/revel/modules/testrunner/app/controllers\ngithub.com/mattn/go-sqlite3\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.7.3-1ubuntu1' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --with-cloog --enable-cloog-backend=ppl --disable-cloog-version-check --disable-ppl-version-check --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.3 (Ubuntu/Linaro 4.7.3-1ubuntu1) \nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-I' '/home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3' '-g' '-O2' '-fPIC' '-m64' '-pthread' '-o' '/tmp/go-build267370817/github.com/mattn/go-sqlite3/obj/_cgo.o' '-v' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/4.7/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o $WORK/github.com/mattn/go-sqlite3/obj/_cgo.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/4.7/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/4.7 -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../.. $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_main.o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -ldl -lgcc --as-needed -lgcc_s --no-as-needed -lpthread -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/4.7/crtend.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crtn.o\ngithub.com/mattn/go-sqlite3\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.7.3-1ubuntu1' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --with-cloog --enable-cloog-backend=ppl --disable-cloog-version-check --disable-ppl-version-check --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.3 (Ubuntu/Linaro 4.7.3-1ubuntu1) \nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-I' '/home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3' '-g' '-O2' '-fPIC' '-m64' '-pthread' '-o' '/tmp/go-build267370817/github.com/mattn/go-sqlite3/_obj/_all.o' '-v' '-nostdlib' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/4.7/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o $WORK/github.com/mattn/go-sqlite3/_obj/_all.o -L/usr/lib/gcc/x86_64-linux-gnu/4.7 -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../.. $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -r /usr/lib/gcc/x86_64-linux-gnu/4.7/libgcc.a\n. Oh, didn't notice that first line on the output:\nERROR 2013/09/02 12:40:21 build.go:80: code.google.com/p/go.net/websocket\n. Since I'm not using the sqlite3 stuff, I removed these lines from the app.conf file:\ndb.import = github.com/mattn/go-sqlite3\ndb.driver = sqlite3\ndb.spec   = :memory:\nAnd now it compiles quickly.  I'd still like to know why that takes so long when I have those lines in app.conf, and why it is only slow on one of my two computers.\n. Building sqlite3 does indeed take a pretty long time (24 seconds).  I've marked the actual gcc call that takes almost all of the time below by typing \"#### long pause here###\"\ngo build -x github.com/mattn/go-sqlite3\nWORK=/tmp/go-build394621480\nmkdir -p $WORK/github.com/mattn/go-sqlite3/_obj/\nmkdir -p $WORK/github.com/mattn/\ncd /home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3\n/usr/local/go/pkg/tool/linux_amd64/cgo -objdir $WORK/github.com/mattn/go-sqlite3/_obj/ -- -I $WORK/github.com/mattn/go-sqlite3/_obj/ sqlite3.go sqlite3_other.go\n/usr/local/go/pkg/tool/linux_amd64/6c -F -V -w -I $WORK/github.com/mattn/go-sqlite3/_obj/ -I /usr/local/go/pkg/linux_amd64 -o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_defun.6 -D GOOS_linux -D GOARCH_amd64 $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_defun.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -print-libgcc-file-name\ngcc -I . -g -O2 -fPIC -m64 -pthread -I $WORK/github.com/mattn/go-sqlite3/_obj/ -o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_main.o -c $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_main.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -I $WORK/github.com/mattn/go-sqlite3/_obj/ -o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o -c $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -I $WORK/github.com/mattn/go-sqlite3/_obj/ -o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o -c $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -I $WORK/github.com/mattn/go-sqlite3/_obj/ -o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o -c $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -I $WORK/github.com/mattn/go-sqlite3/_obj/ -o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -c ./sqlite3.c\nlong pause here\ngcc -I . -g -O2 -fPIC -m64 -pthread -o $WORK/github.com/mattn/go-sqlite3/obj/_cgo.o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_main.o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -v -ldl\ngithub.com/mattn/go-sqlite3\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.7.3-1ubuntu1' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --with-cloog --enable-cloog-backend=ppl --disable-cloog-version-check --disable-ppl-version-check --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.3 (Ubuntu/Linaro 4.7.3-1ubuntu1) \nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-I' '/home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3' '-g' '-O2' '-fPIC' '-m64' '-pthread' '-o' '/tmp/go-build394621480/github.com/mattn/go-sqlite3/obj/_cgo.o' '-v' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/4.7/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o $WORK/github.com/mattn/go-sqlite3/obj/_cgo.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crt1.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/4.7/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/4.7 -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../.. $WORK/github.com/mattn/go-sqlite3/obj/_cgo_main.o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -ldl -lgcc --as-needed -lgcc_s --no-as-needed -lpthread -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-linux-gnu/4.7/crtend.o /usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/crtn.o\n/usr/local/go/pkg/tool/linux_amd64/cgo -objdir $WORK/github.com/mattn/go-sqlite3/_obj/ -dynimport $WORK/github.com/mattn/go-sqlite3/_obj/_cgo.o -dynout $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_import.c\n/usr/local/go/pkg/tool/linux_amd64/6c -F -V -w -I $WORK/github.com/mattn/go-sqlite3/_obj/ -I /usr/local/go/pkg/linux_amd64 -o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_import.6 -D GOOS_linux -D GOARCH_amd64 $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_import.c\ngcc -I . -g -O2 -fPIC -m64 -pthread -o $WORK/github.com/mattn/go-sqlite3/_obj/_all.o $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -v -Wl,-r -nostdlib /usr/lib/gcc/x86_64-linux-gnu/4.7/libgcc.a\ngithub.com/mattn/go-sqlite3\nUsing built-in specs.\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.7/lto-wrapper\nTarget: x86_64-linux-gnu\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu/Linaro 4.7.3-1ubuntu1' --with-bugurl=file:///usr/share/doc/gcc-4.7/README.Bugs --enable-languages=c,c++,go,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.7 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.7 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --enable-plugin --with-system-zlib --enable-objc-gc --with-cloog --enable-cloog-backend=ppl --disable-cloog-version-check --disable-ppl-version-check --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu\nThread model: posix\ngcc version 4.7.3 (Ubuntu/Linaro 4.7.3-1ubuntu1) \nCOMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.7/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-I' '/home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3' '-g' '-O2' '-fPIC' '-m64' '-pthread' '-o' '/tmp/go-build394621480/github.com/mattn/go-sqlite3/obj/_all.o' '-v' '-nostdlib' '-mtune=generic' '-march=x86-64'\n /usr/lib/gcc/x86_64-linux-gnu/4.7/collect2 --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -z relro -o $WORK/github.com/mattn/go-sqlite3/_obj/_all.o -L/usr/lib/gcc/x86_64-linux-gnu/4.7 -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.7/../../.. $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_export.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo2.o $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.o -r /usr/lib/gcc/x86_64-linux-gnu/4.7/libgcc.a\n/usr/local/go/pkg/tool/linux_amd64/6g -o $WORK/github.com/mattn/go-sqlite3/_obj/_go.6 -p github.com/mattn/go-sqlite3 -D /home/craig/Projects/registry/container/src/github.com/mattn/go-sqlite3 -I $WORK $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_gotypes.go $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3.cgo1.go $WORK/github.com/mattn/go-sqlite3/_obj/sqlite3_other.cgo1.go\n/usr/local/go/pkg/tool/linux_amd64/pack grcP $WORK $WORK/github.com/mattn/go-sqlite3.a $WORK/github.com/mattn/go-sqlite3/_obj/_go.6 $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_import.6 $WORK/github.com/mattn/go-sqlite3/_obj/_cgo_defun.6 $WORK/github.com/mattn/go-sqlite3/_obj/_all.o\n. ",
    "roblillack": "I saw the same issue and I'm pretty sure it's somehow revel's fault.\nIf I run the buildCmd manually, it will take ~30s every time I run it\u2014even without changes to the code. If I just change the \u201cbuild\u201d verb to \u201cinstall\u201d, any further \u201cbuild\u201d (and revel's hot reload) will be done in less than a second.\n. Alas, even -i does not help in my case. If I completely clean out external deps and run the following command multiple times:\n$ time go build -v -i MYAPP/app/tmp\n\u2026 the build will take ~40s every time\u2014even without changing any files. If I run the build for MYAPP/app/controllers instead, any succeeding build (being it for \u2026/controllers or \u2026/tmp) will finish in 0.5\u20132s.\nAny idea, why this could make a difference?\n. Digging deeper, this is what is installed for building \u2026/tmp with -i (or during a hot build):\npkg/darwin_amd64/code.google.com/p/go.net/websocket.a\npkg/darwin_amd64/github.com/agtorre/gocolorize.a\npkg/darwin_amd64/github.com/howeyc/fsnotify.a\npkg/darwin_amd64/github.com/revel/revel/harness.a\npkg/darwin_amd64/github.com/revel/revel/modules/testrunner/app/controllers.a\npkg/darwin_amd64/github.com/revel/revel.a\npkg/darwin_amd64/github.com/robfig/config.a\npkg/darwin_amd64/github.com/robfig/pathtree.a\nWhen building \u2026/controllers, in addition to the packages above, these get installed:\npkg/darwin_amd64/code.google.com/p/go.crypto/bcrypt.a\npkg/darwin_amd64/code.google.com/p/go.crypto/blowfish.a\npkg/darwin_amd64/code.google.com/p/gofpdf.a\npkg/darwin_amd64/github.com/coopernurse/gorp.a\npkg/darwin_amd64/github.com/mattn/go-sqlite3.a\npkg/darwin_amd64/github.com/revel/revel/modules/db/app.a\nAs you can see, none of the real dependencies of my app will be installed by the go build -i call in harness/build.go\u2014and I don't have the slightest idea, why. :)\n. I still think that somehow the \u2018dependency detection\u2019 is broken. If you look at my comment above, you'll notice that all the missing packages are dependencies not used by revel, but my custom controllers. \n. Ok, retargeted it to revel/cmd: https://github.com/revel/cmd/pull/25\n. ",
    "kokizzu": "this also happened to me, it's painfully slow when I develop using Revel, on 3 different machine (OSes: Archlinux AMD, Manjaro Intel and Manjaro AMD)\nhere's some log of the action when starting up:\nINFO  2014/11/04 10:42:35 build.go:92: Exec: [/usr/bin/go build -ldflags -X puis/app.APP_VERSION \"git-c5f70d1-dirty\" -tags  -v -o /home/kyz/Dropbox/go/bin/puis puis/app/tmp]                                                 \nINFO  2014/11/04 10:42:44 build.go:94\nwhen hot reload triggered:\nINFO  2014/11/04 10:43:59 build.go:92: Exec: [/usr/bin/go build -ldflags -X puis/app.APP_VERSION \"git-c5f70d1-dirty\" -tags  -v -o /home/kyz/Dropbox/go/bin/puis puis/app/tmp]\nINFO  2014/11/04 10:44:38 build.go:94\nmachine: i3-4150, 4GB RAM, Non-SSD hdd\nI'm not using sqlite, just PostgreSQL with GORM, step by step tutorial:\nhttp://kokizzu.blogspot.com/2014/11/how-to-start-revelgormpostgresql.html\n. Confirmed '___')\ngo get -u -v github.com/mattn/go-sqlite3\nfrom 40+ to 1-2 seconds hot-reload..\n. What I currently seeing is just error message and line containing related\nsource code. And what I suggest is full stack trace as showed on console\nwhen running revel run\n. i forgot which part, but here's some example, but this time, it's not really useful:\nOn the console:\nERROR 2014/06/25 19:15:31 panic.go:29: runtime error: invalid memory address or nil pointer dereference                               \n/home/asd/goroot/src/myapp/app/controllers/app.go:30 (0x489896)                                                                       \n        App.Any: db.AutoMigrate(User{})                                                                                               \n<autogenerated>:21 (0x48a540)                                                                                                         \n/usr/lib/go/src/pkg/runtime/asm_amd64.s:361 (0x42b6c2)                                                                                \n        call32: CALLFN(call32, 32)                                                                                                    \n/usr/lib/go/src/pkg/reflect/value.go:563 (0x43ca60)                                                                                   \n        Value.call: call(fn, args, uint32(frametype.size), uint32(retOffset))                                                         \n/usr/lib/go/src/pkg/reflect/value.go:411 (0x43b707)                                                                                   \n        Value.Call: return v.call(\"Call\", in)                                                                                         \n/home/asd/goroot/src/github.com/revel/revel/invoker.go:35 (0x45fb7c)\n        ActionInvoker: resultValue = methodValue.Call(methodArgs)[0]\n/home/asd/goroot/src/github.com/revel/revel/compress.go:45 (0x453c3e)\n        CompressFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/intercept.go:103 (0x45e629)\n        InterceptorFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/myapp/app/init.go:39 (0x489351)\n        func.001: fc[0](c, fc[1:]) // Execute the next filter stage.\n/home/asd/goroot/src/github.com/revel/revel/i18n.go:155 (0x45da74)\n        I18nFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/validation.go:191 (0x4738c3)\n        ValidationFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/flash.go:45 (0x45ac7a)\n        FlashFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/session.go:144 (0x46db01)\n        SessionFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/params.go:133 (0x461833)\n        ParamsFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/filterconfig.go:208 (0x45a840)\n        FilterConfiguringFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/router.go:465 (0x46b8da)\n        RouterFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/panic.go:15 (0x45ff50)\n        PanicFilter: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/watcher.go:160 (0x47904b)\n        func.029: fc[0](c, fc[1:])\n/home/asd/goroot/src/github.com/revel/revel/server.go:42 (0x46bf5b)\n        handleInternal: Filters[0](c, Filters[1:])\n/home/asd/goroot/src/github.com/revel/revel/server.go:30 (0x46bc69)\n        handle: handleInternal(w, r, nil)\n/usr/lib/go/src/pkg/net/http/server.go:1235 (0x4f9ee0)\n        HandlerFunc.ServeHTTP: f(w, r)\n/usr/lib/go/src/pkg/net/http/server.go:1673 (0x4fbe5f)\n        serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)\n/usr/lib/go/src/pkg/net/http/server.go:1174 (0x4f9a5e)\n        (*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)\n/usr/lib/go/src/pkg/runtime/proc.c:1445 (0x414f10)\n        goexit: runtime\u00b7goexit(void)\nOn the browser:\n```\nPanic\nruntime error: invalid memory address or nil pointer dereference\nIn /app/controllers/app.go (around line 30)\n25: }\n26: return c.Render(myName)\n27:  }\n28:\n29:func (c App) Any() revel.Result {\n30: db.AutoMigrate(User{})\n31: p := User{}\n32: db.Save(&User{Name: \"kis\"})\n33: db.Where(\"name LIKE ?\", \"%kis%\").Find(&p)\n34: fmt.Printf(\"%+v\", p)\n```\n. ",
    "acrisci": "I can confirm installing sqlite with go install github.com/mattn/go-sqlite3 significantly reduced build time for my app.\n. I have a use case for this as well. What can I do to help out?\n. The method I used to find which code in the src folder is needed was to package the chat example program, remove things one at a time, and see where the error happened.\napp/views is needed\n2014/09/26 17:40:52 template.go:227: error walking templates: lstat /home/tonyctl/scratch/revel/chat/src/github.com/revel/revel/samples/chat/app/views: no such file or directory\napp/conf/app.conf is needed\n2014/09/26 17:46:35 revel.go:152: Failed to load app.conf: not found\napp/conf/routes is needed\n2014/09/26 17:49:02 watcher.go:72: Failed to stat watched path /home/tonyctl/scratch/revel/chat/src/github.com/revel/revel/samples/chat/conf/routes : stat /home/tonyctl/scratch/revel/chat/src/github.com/revel/revel/samples/chat/conf/routes: no such file or director\napp/public/*/ is needed\n2014/09/26 17:52:55 static.go:62: File not found (/home/tonyctl/scratch/revel/chat/src/github.com/revel/revel/samples/chat/public/stylesheets/main.css): stat /home/tonyctl/scratch/revel/chat/src/github.com/revel/revel/samples/chat/public/stylesheets/main.css: no such file or directory\nrevel/templates/*/ are needed to load error templates\nrevel/conf/mime-types.conf is needed\n2014/09/26 18:33:34 util.go:89: Failed to load mime type config: not found\n. So it seems to me that the src folder is required primarily for file system access for config files, views, and web assets.\nA possible solution would be to use go-bindata to generate a file that contains these assets when the app builds, perhaps at the same time the main.go file is generated.\nThen we could change the way revel accesses the file system to determine if it should look for the embedded asset or on the actual file system to retrieve the data.\nI am not familiar enough with the revel source code to know if this plan will work or if there is another approach that may work better.\n. I tried to figure out a way to load the config from embedded assets and ran into a problem.\nThe error from loading a config (reported above) happens in config.go. This calls ReadDefault from the package robfig/config which is hardcoded to open a file from the filesystem. see here.\nHowever, go-bindata gives us a function that returns a byte slice.\nSo I guess I need to implement a function in robfig/config that will load a configuration file from a byte slice.\n. @brendensoares I'm not sure whether or not robfig/config is active. There is a revel fork, revel/config, but it is not being used in the project. Neither of these projects have an issue tracker.\nHow should I go about contributing to these projects in a way that it will be used in revel, or should I be looking for a workaround instead?\n. +1 thanks\n. This is listed in the release notes but was never actually merged.\n. Oops, forgot to put this in a feature branch.\n. @pushrax that is an excellent idea. I was not aware there was such a thing as a global gitignore.\n. #698 was listed as being merged in the release notes for v0.11.0 but never actually merged.\n. What is the new import path for the jobs module?\n. github.com/revel/modules/jobs/app/jobs works. Running tests also requires the development version of revel/cmd.\n. I use an environment variable. It might be nice to have a better way to detect if we are testing.\n. ",
    "nabati": "+1 on \"go install github.com/mattn/go-sqlite3\". \nSignificantly reduced build time. \n. ",
    "toqueteos": "@robfig Nice then, it's good to know it but a change on the default routes file would be great, I supose.\nFeel free to close and ignore the associated ML thread.\n. ",
    "fzxu": "Thanks for your comments. I did some adjustment this weekend. Based on your comments:\n- Put the queue thing in backlog right now, not thinking about it.\n- The sender info should be in the message. But yes, it is easier to have a default sender put in the mailer to make it simpler. Changed it a little bit.\n- The Authentication was used to check if it is \"plain\" so that it will create a smtp.PlainAuth instance. Now it assume that if no Auth is passed in, that is 'plain'.\n. I just commit the implementation of sending email from the view template. You can check the test code to see how it works.\nThere is a little difference than you proposed is that I have to pass in a map for the rendering as it is not possible(or very complex) to use ast to go through all the codes to check where  calls the \"SendFromTemplate\" function.\n. Thank you Rob for the review, I will keep moving :)\n. I adjust the APIs a little bit. Did not get time to write the unit test yet :)\nFor the 'From' struct which I don't think it makes lots of sense. The others should be near, please take a second look.\n. {{msg}} is not supported right now. I got little busy recently, will update this pr soon.\n. I added cryptix 's code to ignore the tls verify and adjust the code a little bit. Next one is the mock testing...\nThanks cryptix.\n. for the {{msg}} problem in the template, there is a word around by passing the localized value in the args map, sometime like:\nargs[\"hello\"] = c.Message(\"hello\")\nso that in the email template, the localized string can be get from:\n{{.hello}}\n. Hi Rob,\nI just committed the mock unit test for the mailer, could you take some time to have a look. I think that should be close. Thanks!\n. You can check out the test cases for now, I will update the manual pages after it gets merged. Thanks!\n. Thanks for reviewing, Brenden!\nSeems like you are reviewing on a specific commit, not the pull request. Most of them have been changed already. I fixes some remaining typos. Could you take another look?\n. hm... I only changed the type that cause the CI build fail. I don't believe it. How can I rerun the CI?\n. I did and all the tests passed. I think it should be ready to merge. Let me know if I need to change anything.\n. Thanks, it finally got merged!! :)\n. ok. read documents......\n. will remove\n. it's better to have as it sends multiple email in a single connection.\n. yes. Did not have time to add unit tests, will do later. \n. I did not get this structs -- separate the name and email. Shall I combine them in the message something like \"Rob Fig robfig@company.com\"? What if the name of sender is different from replyto? I think it is even more flexible to let user put the full email.\n. Just leave an option for the user to use. Say , if they don't want to send emails immediately, instead, they want to implement a queue. Something like that, not sure.\n. I don't think it is necessary, because if the user want to send all messages in one connection, just call the method once and passing all the messages.\nif the user want to send in separate connection, call it once per message. we leave the option to the user which i think is better.\n. I think most of the use cases are using plain authentication so the user don't even need to learn how to create smtp.PlainAuth...\n. oh, did not know that. this is neat.\n. ",
    "leebrooks0": "Thanks @arkxu! @brendensoares when do you plan on releasing it give or take?\n. Brilliant.\nOn Thu, Jan 2, 2014 at 2:54 AM, Brenden Soares notifications@github.comwrote:\n\nThis is scheduled for the v0.8 milestone, which is due out in 3 days.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/292#issuecomment-31434051\n.\n. Agreed.\n\nOn Wed, Mar 5, 2014 at 9:58 AM, Brenden Soares notifications@github.comwrote:\n\nI'm going to close this issue up then since it seems there are no\nactionable items to support PJAX. I assume there are some features that\ncould make PJAX easier to do, but I have no particular use case to consider.\nThanks @lenw https://github.com/lenw !\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/431#issuecomment-36718187\n.\n. I am keen on making contributions, just need to get a little more skilled\nin Go.\n\nOn Fri, Jan 3, 2014 at 8:42 PM, Brenden Soares notifications@github.comwrote:\n\nI'm not familiar with this portion of Revel yet. If you have an idea, why\nnot submit a PR so we can test it out?\nI'll look into this more tomorrow for the v0.8 release.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/435#issuecomment-31543627\n.\n. Will get onto it tomorrow. (It is midnight in South Africa)\n. Sorry for my very tardy reply, I don't have any special use case, I was\njust thinking if it was easy to do then why not? however you say it is not\nnearly as easy to do as I thought it was, so it is not necessary then.\n\nOn Tue, Jan 7, 2014 at 5:13 AM, Rob Figueiredo notifications@github.comwrote:\n\nBeing encrypted is not required in the usual case for session data. Out of\ncuriosity, what is your use case?\nAdding a configuration option to enable encryption could be ok, but that\nmay be too specialized an application for this and perhaps developers\nshould just create their own thing instead of using revel.Session. For\nexample, they probably want to specify which cipher to use, and the cipher\nsetup can be a huge pain, etc.\nPersonally, I doubt this is worth the effort or complexity.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/435#issuecomment-31710141\n.\n. They would be stored exactly where the normal views would be stored, before\nyou had index.html, now you have index.gohtml, with nothing changing but\nthe extension. This allows tooling such as GoSublime to give better support\ne.g. to identify {{ }} etc. as being part of Go templates and not just\nplain text.\nhttps://github.com/DisposaBoy/GoSublime/blob/b5a94b2a42aada0ea0df71dd6026352a92741362/GoSublime.sublime-settings#L311\n\nOn Fri, Jan 3, 2014 at 8:44 PM, Brenden Soares notifications@github.comwrote:\n\nWhere would these go html files be stored? Can you describe the steps in\nmore detail so I can understand what you're expecting to happen?\nThanks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/440#issuecomment-31543711\n.\n. I tried earlier, and I got errors\n\nOn Fri, Jan 3, 2014 at 11:25 PM, Brenden Soares notifications@github.comwrote:\n\nThat sounds useful, but can't you just do that now? Will the templates not\nload properly with a non-html extension?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/440#issuecomment-31554984\n.\n. Did some digging around, c.Render returns the controller Name/Action/RequestFormat.\nRequestFormat is here https://github.com/robfig/revel/blob/c36e7f7484e91108ff26152e3c3ad5bdf3229c8e/http.go#L16\n\nSo somewhere along the line one needs to do a check if RequestFormat is html, then check for gohtml files as well. I will look into this, seems like a good place to start.\n. I can't see an easy way of doing this, short of doing something like if the template is not found then try alternative extensions, or dropping .html in exchange for .gohtml.\n. OK, found this https://github.com/robfig/revel/blob/develop/CONTRIBUTING.md\n. ",
    "clanstyles": "I've used a lot of frameworks. I'm pretty familiar with CakePHP's auth system and very well versed in ASP.NET's. I feel that with Go, scenario 3 seems to be the most viable. Possibly adding a controller with a .example extension and in the instructions providing it as an option?\nDown the road we'll need to have support for memcache or some sort of session cache. Most of these other languages have attributes or in the place of Cake, when you use the Auth module, in the core there is a function that every controller can optionally implement CheckAuth. \nNow the thing I've noticed is a growing trend in Claim based authentication vs Role based. Obviously this is a basic authentication module. I prefer role based, it's easier to roll out in the beginning, but for larger apps, claim based is a must have.\n. Yeah that sounds like the right idea. I think basic ACL will work for 99% of the requirements. Everything should be modular so people can choose their plugins.\nHow do you plan on distributing it? Can we add some revel functionality to auto-add modules to blank revel installs? \nI would think authentication should have the interface for authorization. Then you just select an authorization module and register it.\n. Yeah I'll do it. If we're going to change this, why wouldn't something like ...\nThere are some other internal things I'll add. I need to get a little time to fix this.\n. ",
    "tpletcher": "token based stuff is a big animal to implement overall, and at the end of the day you really still need an underlying identity management service to handle the mappings of roles to groups and then users to groups. and anything at scale is going to require some middleware in front of the distributed services to validate the tokens passed to the api endpoints/actions against the central identity management system(assuming an SOA scenario as you'd find in any large scale environment)..I know this as i live it everyday at the office :). point here is that i don't think revel wants to(or should be) be an identity service in the Claim pattern @ClanStyles mentions above. that needs to be implemented elsewhere as a high-performance service(for which Go is perfect), and revel should be a consumer of the identity service via a plugin module that implements policy driven control of controller level actions..this pattern is something we've implemented now twice at HP Public Cloud, first in rails and subsequently in the Horizon framework(Django under the covers).\nall of that said, i have found implementing basic auth based on the booking sample to be pretty straight-forward. which is great, and really basic auth should remain a very simple thing. I do not think going down a path like Devise did for Rails, for example, is the right thing. Don't get me wrong Devise is a fantastic prototyping tool. But you ultimately end up back down the stack in Rails when you start implementing in real world architectures.\ni'm about to tackle access control now. but i would very much agree with @brendensoares  that any generic access/action control implementation should provide both controller and controller action level pattern. something to consider: if there is going to be organic revel modules for some of the building blocks like auth and rbac, is to split them into separate efforts? this would prob force a leaner, more disciplined interface approach and facilitate the scenario i mentioned above where someone wants to plug revel into a larger architecture as a front-end framework\nmy 50cents worth anyway, and kudos to @slogsdon for this package. great contribution..\n. @tim-peterson i have found that while i see the same error as you do when trying to start/stop the upstart action, it will work on a system reboot. i suspect this is something to do with the context in which upstart runs, ie root. its weird that sudo start myapp wont deliver the same result but that appears to be the case... \ni have tried several approaches including using the setuid action in upstart, etc...no luck. still working on sorting out the issues...\nI'll post something up if i can sort it out, but in the meantime a reboot is there as an ugly workaround..\n. i've rolled the revel version up to the current v0.8. builds still failing...\nnote that a revel run 'app_name' runs the app successfully...\n. Hi Brendon,\nBoth revel build and revel package are failing for me. What is odd is that the chat sample app builds successfully.\nWhat's worse is that revel build worked fine on this server until i updated revel. on my dev machine its still working as well. that box has go 1.1 on it and the v0.6-30 revel build. \nPutting some checkpoints into build.go on the server box revealed that the failure occurs in this stanza, i.e. it never makes it past this first line.: \n// Revel and the app are in a directory structure mirroring import path\nsrcPath := path.Join(destPath, \"src\")\nwhen you look at the error output in the gist attached above it sure looks like something is broken in the path code. and when you think about it, the fact that the sample apps build, but non sample apps don't would make sense if the pathing changes recently dropped in are causing this. the test harness wouldn't catch the issue as its building code inside the revel path....\ni'm travelling back across the pond this am. will spend some more time on this over the weekend. need to get this sorted as it's dropped my production server :)\n. no worries on the prod thing. knew what i was getting into with a new framework around stuff like this. we'll figure it out.\ni was surprised too by this issue arising. i did note when i looked at the source code that it had not changed in 6 months. \ntomorrow am, im going to sit down and build up another vm from scratch and try to run the build for this app. i'm wondering if my enviro is somehow out of whack. if you look at this Gist: https://gist.github.com/tpletcher/8459061, and look at the build output on the second file, that WARN trace that indicates it can't determine git repo version is odd. i have never seen that until now, and its certainly not present on my dev workstation where build runs clean with the v0.6 of revel....\nwill update this ticket with results of the fresh install tomorrow...\n. ok, so as it turns out it was an environment issue. i rebuilt from scratch and builds are working again. i'm actually glad this was an issue on my end. \nthat said, i've been running through my bash history looking at what might have caused this. last weds, before i pushed (or more accurately tried to push) the new build out, i updated both go and revel. something obviously got out of whack in one of the updates. \nthe problem i have with go is that as of a 30 days or so ago there was a known bug in the install script where a certain test would fail in a cloud VM server. this means you have to run ./make.bash, and you get no tests. its a known issue and hopefully there will be a fix soon.\nwith revel, i think things are going to be hard with both revel and dependency updates until such time as some package management strategy is adopted. in the mean time, the approach i will take is to just build new server up from zero when i do a revel or go update. not ideal, but at least i know i can avoid downtime..\ni'd be very interested to know what the core contributors are using for package management (if anything)..\n. this issue is back. i have not touched this box since i rebuilt it from scratch and ran the first build which was successful..\nsame error as before, same behavior...this is a major issue for me...\n. sheesh.....ssh'd into wrong server...sorry....\n. https://www.nafinn.org\n. ",
    "cbonello": "Thanks Matthew.\nNext I'll work on nosurf integration and see what I can do for CSRF\nprotection.\nOn Fri, Sep 6, 2013 at 3:57 AM, Matthew Clark notifications@github.comwrote:\n\nThis seems like a nice addition!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/294#issuecomment-23906485\n.\n. Thanks Rob.\n\nRegarding nosurf, there's an option to opt out of the csrf protection on a\nper route basis. I was thinking of using a config variable to list the\nno-csrf routes. But the config package does not support arrays of strings.\nAnd switching to a TOML implementation for config files would probably be\ntoo extreme...\nOr maybe we could update routes' declaration with a NOCSRF tag somewhere.\nPOST            /Foo      App.Foo\nPOST   NOCSRF   /Bar      App.Bar\nDo you have any idea/preference?\nOn Fri, Sep 6, 2013 at 7:00 PM, Rob Figueiredo notifications@github.comwrote:\n\nCool, thanks!\nYou can't view source? Hmm.. that seems like something to fix. I'll play\nwith it this weekend (and see if I can get it to work on OSX)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/294#issuecomment-23939703\n.\n. Rob,\n\nYou have to use \"nm --debug-sym $GOPATH/bin/booking\" to list the debug\nsymbols.\nTo set a breakpoint in Hotels.Index for instance you have to type in gdb:\nbreak github.com/robfig/revel/samples/booking/app/controllers.Hotels.Index\nSo, it's difficult to use. And I wonder if it's really useful.\nfmt.Println() is not so bad after all...\nI have also to update my patch to include \"-gcflags '-N -l'\" during\ncompilation.\nOn Mon, Sep 9, 2013 at 5:42 AM, Rob Figueiredo notifications@github.comwrote:\n\nI managed to run it on OSX, but I can't seem to set any breakpoints in my\ncode, so it doesn't do much. Can you provide some guidance as to how I\ncould use it to debug a hypothetical problem in the booking sample app?\n(E.g. how to set a breakpoint at a particular file line, or at a\nparticular function. Or maybe there is another useful way to operate it?)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/294#issuecomment-24032986\n.\n. \n",
    "xiaoao": "how to config the conf/routes file or how to do to support the subdomain? thx \n. ok,thank you\n. well done!\n. I'm sorry,  flash just using for current domain, so I remove the domain attribute from flash cookie.\n. ",
    "kisom": "Hey Rob, that's what I needed to know. Thanks!\n. ",
    "haibinzhang": "Thanks for your reply and excellent work on revel. \n\u53d1\u81ea\u6211\u7684 iPhone\n\u5728 2013\u5e749\u670815\u65e5\uff0c00:11\uff0cRob Figueiredo notifications@github.com \u5199\u9053\uff1a\n\nThanks for contributing the update! I had a few comments..\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for your reply. \nI see the problem if define.\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\u5728 2013\u5e749\u670815\u65e5\uff0c00:05\uff0cRob Figueiredo notifications@github.com \u5199\u9053\uff1a\n\nIn skeleton/app/views/App/Index.html:\n\n\n\n\n\n\n  -\n  -\n  -\n\n\n{{template \"flash.html\" .}}\n\n\n  -\n  -\n  -{{template \"footer.html\" .}}\n{{define \"content\"}}\n  The problem with {{define}} blocks and the current template integration is that there can only be one template that defines \"content\". As soon as you make a second page, this pattern doesn't work\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. I changed this to format the generated HTML source code.\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\u5728 2013\u5e749\u670815\u65e5\uff0c00:05\uff0cRob Figueiredo notifications@github.com \u5199\u9053\uff1a\n\nIn skeleton/app/views/debug.html:\n\n-\n-   Available pipelines\n-   \n-   {{ range $index, $value := .}}\n-       {{$index}}\n-       {{$value}}\n-   {{end}}\n-   \n-   Flash\n-   \n-   {{ range $index, $value := .flash}}\n-       {{$index}}\n-       {{$value}}\n-   {{end}}\n-   \n-        ",
    "davidzchen": "Can we also bump to Bootstrap 3.1.0 too since it has been released?\n. Agreed. That sounds like a good plan.\n. Sorry, I have been busy this past week. I will rebase my changes on develop and submit a PR later today.\n. Thanks for getting this to work, @jivko-chobanov! If it is fine with you everyone else, I'd be happy to pick this up and finish it.\n. Actually, don't merge this quite yet. I'm going to go back and set up the branch properly.\n. That is a good point. We should maintain backwards compatibility since this is a public API. However, I also feel that the globally fixed ERROR_CLASS is a pretty significant design limitation that needs a fix. I also do not like the idea of adding a new field function just to provide the error class.\nI am thinking about two possible solutions:\n1. Create a FieldOpts struct type that is passed as an optional parameter to field. One of the fields of FieldOpts can be ErrorClass. This would let us add additional options later on while maintaining backwards compatibility.\n2. Keep field the same but add a new function setErrorClass that would set the error class for the field.\n@opennota - would you be fine with either of these?\n. That would be nice. I will explore whether that is possible with the current architecture. If it turns out to be very non-trivial, I will try (1) or (2).\n. That is a good point. I do not want to over-engineer what is a very simple fix. We can always add a note to the documentation on upgrading in the next release notes. \n@robfig - Any thoughts about this?\n. Thanks, @robfig. That sounds good. I undid the API change and added code in ErrorClass to check whether ERROR_CLASS is set in renderArgs and override the default ERROR_CLASS if it is set.\nIf this change is fine with you, I will send a separate PR for the documentation change.\n. Thanks!\n. ",
    "pvdvreede": "Thanks Rob! Worked perfectly!\nClosing issue.\n. ",
    "dfilipovic39": "Feel silly now, didnt know it is accessible via ResponseWriter :\\\nWorks like a charm, thank you.\n. no, i mean like for instance additional string defining list of users that have access to it. then you could have a interceptor that handles redirection to login page if the user isnt authorized or isnt allowed to access the page. i know there is a way but this would be very elegant i think\n. Sure, that would work. I was just pointing out the possibility of extending the declarative type of routing whichis by the way very nice and clean. Especialy since it compiles into go code. So instead of declaring the map the way you did it would be neat if it would be created from the routes declaration file.\nIts just an idea that might simplify things.\n. ",
    "itdxer": "When I run echo $GOPATH I get path to my ~/gocode folder.\n. Thanks!\nThe problem was in the wrong ways.\n. ",
    "polds": "I believe I've tracked this down to the version of Go I'm using:\n go version devel +2e1ef7b9c4a9 Thu Sep 12 16:54:01 2013 -0400 darwin/amd64 \nLong story short, due to the changes that were made in Xcode 5 with clang and gcc I was forced to upgrade to an edge version of Go.\n. Ok this only happens to parameters placed next to an extension I modified my script to do the following:\nGET  /servers/:id/status.png     Banners.Index\nand again worked as intended.\n. ",
    "TripleDogDare": "Perfect.\nHere's the solution, for anyone looking here in the future. \nIn /app/init.go\n``` go\npackage app\nimport (\n    \"github.com/robfig/revel\"\n    \"html/template\"\n)\nfunc init() {\n    // Filters is the default set of global filters.\n    revel.Filters = []revel.Filter{\n        revel.PanicFilter,             // Recover from panics and display an error page instead.\n        revel.RouterFilter,            // Use the routing table to select the right Action\n        revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n        revel.ParamsFilter,            // Parse parameters into Controller.Params.\n        revel.SessionFilter,           // Restore and write the session cookie.\n        revel.FlashFilter,             // Restore and write the flash cookie.\n        revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n        revel.I18nFilter,              // Resolve the requested language\n        revel.InterceptorFilter,       // Run interceptors around the action.\n        revel.ActionInvoker,           // Invoke the action.\n    }\n    registerTemplateFuncs()\n}\nfunc registerTemplateFuncs() {\n   //Other functions being registered.\n    revel.TemplateFuncs[\"html\"] = func (s string) template.HTML {\n        return template.HTML(s)\n    }\n}\n```\nThen you can use it in your html like so. Code highlighting will probably be a bit off like it is here.\nhtml\n{{html `<!--[if lt IE 9]>`}}\n    <script src=\"/public/js/html5shiv.js\"></script>\n    <script src=\"/public/js/respond.min.js\"></script>\n{{html `<![endif]-->`}}\n. Better yet, Revel already provides this function in its template.go.\nSimply use \"raw\".\nhtml\n{{raw `<!--[if lt IE 9]>`}}\n    <script src=\"/public/js/html5shiv.js\"></script>\n    <script src=\"/public/js/respond.min.js\"></script>\n{{raw `<![endif]-->`}}\n. @brendensoares Just trying to make it blend in with existing code.\n. ",
    "goodsign": "Well, I agree on your points. You mentioned that 'Revel could pick one and define interfaces around them, and then each logging system could have an adapter'. \nI'm absolutely happy with the idea and it is just what I wanted. It is a good solution to give others the possibility to integrate their logger as a revel adapter.\nAre you going to provide those interfaces (for adapters) after you reimplement logging internals using glog?\n. ### Update on the strange \"invalid import path\" issue:\nI guess I've found out the problem source. I had my app called like 'somepath/revel' and it probably replaced the revel binary itself when compiling.\nShould I create a separate issue?\n. Was this topic discussed in go-nuts or go issue tracker? Maybe it is just something that could be added to the standard library. It seems that there is something missing about it.\n. ",
    "hura": "I went through all my outstanding PRs and closed the old ones. I think this is ready to go and should've been merged a while ago. FWIW, I moved on to clojure and abandoned Go & Revel.\nCheers\n. Yes I always like to keep long comments before configuration vars.\nWell it wasn't Revel but it was Go which bothered me after a while. Too much stuff is missing. Clojure is wonderful and I'm about 5x faster when using clojure. I rewrote my app in 2 weeks.\nGood luck to the new Revel team members! Cheers\n. And now a typo in the commit message... sigh :)\n. You're right, seems to be ok. time.Time{} returns all zeros Time which evaluates to a small integer:\nhttp://play.golang.org/p/vLSQgY7EEo\n. btw, this should get documented\n. I'm all for that. But I'd say let's close out this PR and open a issue ticket for the others to track.\n. Btw, I think you're doing something much more general here. It's not limited to authorization. It's basically a per-controller filter which could do any functionality (not just authorization).\n. The only dep (List: http://godoc.org/github.com/robfig/revel?imports ) that has this is the websockts:\nhttps://code.google.com/p/go/source/checkout?repo=net\nwhich is an offical golang package:\nhttps://code.google.com/p/go-wiki/wiki/SubRepositories\nSo it's probably a \"safe\" package.\n. I don't think that's true. The cookie always has an expiration date set so it's never a session cookie.\nhttp://en.wikipedia.org/wiki/HTTP_cookie#Session_cookie\n. Yes! It's just one line (similar to how the FlashFilter does it). I was gonna ask if that could be done anyways. Just reject this PR then and I'll do the other all at one. master or dev branch?\n. I went with the same as \"flash\" does it:\nc.RenderArgs[\"flash\"] = c.Flash.Data\nShould we differ? Since this is almost the same...\n. ",
    "mattbaird": "Hi JGraham, I tried using the shared folders & symlinks, I know my vagrant go environment was correct, but I haven't done revel run ..., maybe that's the magic I need. I'll also look into sshfs and nautilus bookmarks to make editing easy. The problem that I ran into, specifically, is that fsnotify won't be called on the /vagrant share so revel will never pick up changes. I wrote a plugin that gave you an endpoint to reload automatically as a work around, but it's kind of a pain; I really like the reloading you guys wrote.\n. Thanks - bummer. I hope they get around to fixing it. Thank you all for Revel, it's great.\n. nuts. I just noticed someone else has implemented a redis cache as well. Mine used Redigo which is the most popular redis client.\n. @robfig I setup redis manually and tested it that way. I'll see if I can get the CI working.\n. @brendensoares since it is a cache provider, other than changing config, the current docs should be valid. I'll write up some config docs if that makes sense.\nWhen could this get integrated?\n. the travis failure is: \n\"revel test github.com/robfig/revel/samples/chat\"\n...\n\"2013/12/19 23:01:50 server.go:92: Failed to listen: listen tcp :9000: address already in use\"\nthis doesn't have anything to do with my patch.\n. @brendensoares  hehe. I was reading it on a small screen and at first I thought, what a sod! then I read the rest.\nany chance of getting this merged? I could really use it, and working off my branch is a pain in the butt.\n. @brendensoares no idea what CL means, maybe he met PR but was thinking about other things. How long till releases get under control? Is Rob AFK for a while?\n. @dreadiscool this is an issue with fsnotify, there isn't really a work around last time I checked. I ran into this when trying to run my dev env inside Docker hosted on linux.\n. I filed this in haste while I'm gathering more details.\nIt seems to be non-deterministic and timing based. Is there a chance you are searching through the map of routes before it is fully loaded? I ask because I can have it work, stop the server restart with no changes and it fails.\nwe have a large set of routes - about 300 lines of routes.\n. those paths work in < .17, and surprisingly they ALSO work occassionally when I start up under 0.17. I have logs and another developer to verify this.\nThis codebase works fine if I roll back the commit hash to 8b511737be1349346965fddaf7c107017c0c1b9a\n\"createpost\" doesn't exist - it's CreatePost and that does exist and is part of our QA automation testing (func (p Project) CreatePost(....))\nHere's a successful start:\nDone, without errors.\nINFO  2017/07/12 17:26:32 build.go:192: Cleaning dir tmp\nINFO  2017/07/12 17:26:32 build.go:192: Cleaning dir routes\nINFO  2017/07/12 17:26:33 build.go:192: Cleaning dir tmp\nINFO  2017/07/12 17:26:33 build.go:192: Cleaning dir routes\nINFO  2017/07/12 17:26:37 module.go:117: Sorted keys module.jobs\nINFO  2017/07/12 17:26:37 module.go:117: Sorted keys module.static\nINFO  2017/07/12 17:26:37 module.go:117: Sorted keys module.staticcache\nINFO  2017/07/12 17:26:37 module.go:117: Sorted keys module.testrunner\nINFO  2017/07/12 17:26:37 module.go:152: Loaded module jobs\nINFO  2017/07/12 17:26:37 module.go:152: Loaded module static\nINFO  2017/07/12 17:26:37 module.go:152: Loaded module staticcachecontrol\nINFO  2017/07/12 17:26:37 module.go:152: Loaded module testrunner\nINFO  2017/07/12 17:26:37 module.go:157: Found testrunner module, adding `tests` path /home/matthew/code/go/src/github.com/AtScaleInc/modeler/tests\nINFO  2017/07/12 17:26:37 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/12 17:26:37 main.go:34: Running revel server\nGo to /@jobs to see job status.\nINFO  2017/07/12 17:26:37 sqlx.go:66: DB connection using revel\nAttempting connection to postgres: host=192.168.99.9 port=10518 user=atscale dbname=atscale sslmode=disable application_name=modeler\nConnected to postgres: host=192.168.99.9 port=10518 user=atscale dbname=atscale sslmode=disable application_name=modeler\nINFO  2017/07/12 17:26:37 httputils.go:44: authServer:http://192.168.99.9:10503/\nI view the UI, it renders, everything works. I then ctrl-c the process, up arrow to execute the same start command and get\nDone, without errors.\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.jobs\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.static\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.staticcache\nINFO  2017/07/12 17:27:30 module.go:117: Sorted keys module.testrunner\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module jobs\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module static\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module staticcachecontrol\nINFO  2017/07/12 17:27:30 module.go:152: Loaded module testrunner\nINFO  2017/07/12 17:27:30 module.go:157: Found testrunner module, adding `tests` path /home/matthew/code/go/src/github.com/AtScaleInc/modeler/tests\nINFO  2017/07/12 17:27:30 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/12 17:27:30 main.go:34: Running revel server\nERROR 2017/07/12 17:27:30 router.go:800: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action route\npanic: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action route\nthoughts?. INFO  2017/07/12 18:05:02 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/12 18:05:02 main.go:34: Running revel server\nERROR 2017/07/12 18:05:02 router.go:800: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find controller.action App\\publish.route\npanic: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find controller.action App\\publish.route\ngoroutine 1 [running]:\nlog.(*Logger).Panicln(0xc420278370, 0xc420191d00, 0x1, 0x1)\n    /usr/local/go/src/log/log.go:222 +0xbe\ngithub.com/AtScaleInc/modeler/vendor/github.com/revel/revel.init.6.func1()\n    /home/matthew/code/go/src/github.com/AtScaleInc/modeler/vendor/github.com/revel/revel/router.go:800 +0x241\ngithub.com/AtScaleInc/modeler/vendor/github.com/revel/revel.runStartupHooks()\n    /home/matthew/code/go/src/github.com/AtScaleInc/modeler/vendor/github.com/revel/revel/server.go:178 +0x85\ngithub.com/AtScaleInc/modeler/vendor/github.com/revel/revel.InitServer(0xd781a0)\n    /home/matthew/code/go/src/github.com/AtScaleInc/modeler/vendor/github.com/revel/revel/server.go:97 +0x34\ngithub.com/AtScaleInc/modeler/vendor/github.com/revel/revel.Run(0xb3cb)\n    /home/matthew/code/go/src/github.com/AtScaleInc/modeler/vendor/github.com/revel/revel/server.go:151 +0x1e4\nmain.main()\n    /home/matthew/code/go/src/github.com/AtScaleInc/modeler/app/tmp/main.go:2767 +0x2f598\nthis function exists and is regularly called successfully:\nfunc (p Publish) Route(orgId, projectId string, currentStep string, encodedPublishWorkflowData string) revel.Result {\nbtw, thank you for digging in on this.. First startup worked, restarted and got this:\nINFO  2017/07/13 09:31:35 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/13 09:31:35 main.go:34: Running revel server\nERROR 2017/07/13 09:31:35 controller.go:308: revel/controller: failed to find action App\\engine.create%!!(MISSING)(EXTRA string=Short name, string=enginewebhooks, string=%!v(MISSING), *revel.ControllerType=&{App\\ 0x12c3b60 controllers.EngineWebhooks [0xc4202b0b80 0xc4202b0bc0 0xc4202b0c00] [[0 0]]})\nERROR 2017/07/13 09:31:35 controller.go:310: Method Index\nERROR 2017/07/13 09:31:35 controller.go:310: Method UpdateHook\nERROR 2017/07/13 09:31:35 controller.go:310: Method DeleteHook\nERROR 2017/07/13 09:31:35 router.go:800: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:91): revel/controller: failed to find action App\\engine.create\npanic: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:91): revel/controller: failed to find action App\\engine.create. engine.create exists (Engine.Create) func (e Engine) Create(orgId string) revel.Result {\nenginewebhooks is a different controller (next one alphabetically) and has Index, UpdateHook and DeleteHook methods.\nis it looking for Engine.Create but on EngineWebhooks controller? . btw you are so polite, you must be Canadian.. The Engine controller has \nEngines\nGET    /org/:orgId/engine                                                                                          Engine.Index\nGET    /org/:orgId/engine/create                                                                                   Engine.Create\nPOST   /org/:orgId/engine/create                                                                                   Engine.CreatePost\nGET    /org/:orgId/engine/:engineId/update                                                                         Engine.Update\nPOST   /org/:orgId/engine/:engineId/update                                                                         Engine.UpdatePost\nGET    /org/:orgId/engine/:engineId/delete                                                                         Engine.Delete\nPOST   /org/:orgId/engine/:engineId/default                                                                        Engine.MakeDefault\nGET    /org/:orgId/engine/:engineId/advancedsettings                                                               Engine.AdvancedSettings\nGET    /org/:orgId/engine/:engineId/license                                                                        Engine.License\nGET    /org/:orgId/engine/:engineId/upload                                                                         Engine.Upload\nand enginewebhooks has:\nGET    /org/:orgId/engine/:engineId/webhooks                                                EngineWebhooks.Index\nPOST   /org/:orgId/engine/:engineId/webhooks                                              EngineWebhooks.UpdateHook\nPOST   /org/:orgId/engine/:engineId/envId/:envId/webhook/:hookId              EngineWebhooks.DeleteHook\n. engine first, and then engine webhooks.. No calls to RefreshRoutes\nthey are in a app, not in a module.\nI would share the entire routes with you in a more private setting. email me (my first name)@atscale.com and I'll shoot it to you.. got a different start up error where the publish controller and the publishedproject controller got confused. Similar to engine/enginewebhooks they both have the same prefix of publish\nINFO  2017/07/14 10:23:16 module.go:157: Found testrunner module, adding `tests` path /home/matthew/code/go/src/github.com/AtScaleInc/modeler/tests\nINFO  2017/07/14 10:23:16 revel.go:249: Initialized Revel v0.17 (2017-07-11) for >= go1.6\nINFO  2017/07/14 10:23:16 main.go:34: Running revel server\nERROR 2017/07/14 10:23:16 controller.go:308: revel/controller: failed to find action App\\publish.route%!!(MISSING)(EXTRA string=Short name, string=publishedproject, string=%!v(MISSING), *revel.ControllerType=&{App\\ 0x12c5b60 controllers.PublishedProject [0xc4202b41c0] [[0 0]]})\nERROR 2017/07/14 10:23:16 controller.go:310: Method Index\nERROR 2017/07/14 10:23:16 router.go:800: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action App\\publish.route\npanic: Route validation error (in /home/matthew/code/go/src/github.com/AtScaleInc/modeler/conf/routes:49): revel/controller: failed to find action App\\publish.route. ",
    "ijl": "In implementing this I ran into the issue that filters don't have access to Content-Type unless it were to be manually set before render. E.g., serving a static CSS file, the order is: Static.Serve, Controller.RenderFile, filters, BinaryResult.Apply. The Content-Type header is set in BinaryResult.Apply. How would you proceed then?\n. I suppose the only good option I can think of is to have cookies set in a lazy method on Response, and the actual SetCookie call is made only after render and if necessary by Content-Type.\n. Yes.\n. is this closed by #542?\n. ",
    "twistor": "I found this issue while looking for something tangentially related. The fix would apply to this it seems.\nI was curious why the session is not lazy. As in, why a session gets set at all, if no explicit session data is set. Automatic anonymous sessions for users can be a pain for things like proxy caching, etc. \n. ",
    "tim-peterson": "Hi @robfig and @jgraham909 thanks for the replies!\nI has never able to get sudo revel run my app to work b/c sudo: revel: command not found but \nI have all along had everything as root and now running revel run my app says:\nERROR 2013/10/01 15:13:22 revel.go:228: GOPATH environment variable is not set\nI'm confused by that because:\n~# echo $GOPATH\n/root/gocode\nRegarding NGINX, nothing has seemed to \"fail\". I called /etc/init.d/nginx restart like I do on my other sites on different servers and then called revel run myapp. The errors have been the same GO/Revel errors I've previously mentioned as if NGINX isn't doing anything.\nJust for clarity in nginx.conf, I listen on 80 set set proxy pass to http://127.0.0.1:8888 and in my Revel app conf/app.conf I set: \nhttp.addr=\"my-live-site.com\"\nhttp.port=8888\nor is it?\nhttp.port=80\n. Yep, go env doesn't show GOPATH, how to correct that? Probably not relevant but export GOPATH=~/gocode doesn't do anything.\n. Ok I added the Defaults env_keep=\"GOPATH\" to my /etc/sudoers. GOPATH still wasn't there when running go env. Regardless I ran:\n```\nroot@ip-xx-xxx-xx-xx:~# sudo /root/go/bin/revel run mylivesiteapp\nERROR 2013/10/01 17:33:50 revel.go:244: Failed to find Revel with error: cannot find package                                        \n\"github.com/robfig/revel\" in any of:\n    /usr/local/go/src/pkg/github.com/robfig/revel (from $GOROOT)\n/root/gocode/src/github.com/robfig/revel (from $GOPATH)`\n```\nAs you can see, the \"github.com\" and \"code.google.com\" folders didn't install in root.\nBecause of this and because root doesn't appear to be the way people want Go/Revel installed, I installed everything at $HOME.\nUnfortunately now I'm stuck on a much more basic problem: \n```\n $ go get github.com/robfig/revel\npackage bufio: unrecognized import path \"bufio\"\npackage bytes: unrecognized import path \"bytes\"\n...\n```\nadding sudo still causes and an error:\n$ sudo go get github.com/robfig/revel\npackage net/http/cookiejar: unrecognized import path \"net/http/cookiejar\"\nugh.\n. Ok these unrecognized packages were due to me running Go v 1.0.2 rather than 1.1. I had installed Go via apt-get install golang which was obviously not the latest.  Follow the wget directions here instead.\nNow, I'm back to the original problem:\n```\n$ sudo /home/ubuntu/gocode/bin/revel run mylivesiteapp\nERROR 2013/10/01 19:41:19 harness.go:167: Failed to start reverse proxy: listen tcp xx.xxx.xx.xx:9000:\ncannot assign requested address\n```\nsudo didn't seem to help.\nHere's the contents of my app.conf:\nhttp.addr=\"xx.xxx.88.69\" \nhttp.port=9000  #doesn't matter if this is 80 I get the same error.\nI'm trying to access my site via the browser at its name or IP address:9000 or :80. As expected neither work.\n. ok, I'm now able to run the app on port 9000 or 80 if I set http.addr= (empty string). However, pointing my browser to my IP address or my domain name with either of these ports, e.g., http://xx.xxx.xxx.xx:80, hangs indefinitely. Trying the NGINX route using http.addr=127.0.0.1 fails too. And setting http.addr=\"my.live.site.IP.address\" or http.addr=\"mylivesite.com\" produces the Failed to start reverse proxy: error described above.\nI'm able to ssh into this domain name or IP address and have done this many times before with other domains so I don't think there is domain mapping carelessness on my part.\n. Yes curl works.  $ curl \"http://localhost:9000\", displays the contents of your \"myapp\" demo (the html file with the \"It works!\" TwBS hero unit).\nHmm, firewall, doesn't seem to be the issue unless I'm not understanding the following...\n```\n$ sudo iptables -L -n\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination \n```\nThe following also had no effect on my ability to access http://mylivesite.com:9000 from the browser:\n$ sudo ufw disable\nFirewall stopped and disabled on system startup\nCan we go back to the basics here? All I need to do is run my app (command below) and visiting  http://xx.xxx.xxx.xx:9000 or http://mylivesite.com:9000 in the browser should work?\n$ revel run mylivesiteapp\nAgain my app.conf is:\nhttp.addr=\nhttp.port=9000\n. @robfig I tried your latest suggestions without success. But I think I have to apologize because after that, I wasn't even able to get a basic index.html file to work with Nginx on port 80. Therefore, this doesn't seem like a Go/Revel issue but more of a connecting to internet issue. \nI'm using a brand new ubuntu 13.04 EC2 instance where I simply did apt-get install nginx and then /etc/init.d/nginx restart like I'm familiar with. The other apps I've successfully installed have been PHP apps so in those cases I've installed PHP too but regardless, upon starting Nginx for the 1st time I'm always used to getting the Nginx welcome message index.html file. Changing nginx.conf server_name from localhost to mylivesite.com had no effect.\nSo in summary, same issue with Nginx as with Revel, curl \"localhost\" works but curl \"mylivesite.com\" hangs indefinitely. Ugh, sorry.\nUPDATE I'm testing whether this is an EC2 security group issue b/c I just noticed that mylivesite.com's security group is not the same as the other sites I've successfully set up. So sorry about this. It looks like this issue will be closing imminently...\n. Yes!!!! the issue is solved.  I ended up using Nginx as a proxy b/c I could never solve the sudo revel run issue mentioned above without destroying my server by changing /etc/sudoers.\nFor anyone coming across this thread, here is a gist (shown below too) of the key parts of my nginx.conf and Revel app.conf to make this work for you.\nThanks again @robfig and @jgraham909 for all your help and patience.\nnginx.conf\n```\nserver {\n        listen 80;\n    root /usr/share/nginx/html; # not relevant, but root needs to be set to something otherwise gives error\n    index index.html index.htm;\n\n    server_name mylivesite.com;\n\n            location / {\n                    proxy_pass      http://127.0.0.1:9000;\n            }\n    }\n\n}\n```\nGo Revel mylivesiteapp app.conf\nhttp.addr=\"127.0.0.1\"\nhttp.port=9000\n. p.s., to go back to my original point, in the documentation it may be good to include the nginx.conf/app.conf and sudo revel run snippets to inform people about running remotely. \nAgain, these types of details seem to help adoption/improve accessibility. \n. Hi @purohit thanks for the tips. Can you explain how to \"package my app\"? \n. Thanks @mclark4386 and @purohit . I followed your revel package and Upstart directions without error.\nHowever, when I tried to run my app with $ sudo start myappname I got the following error: start: Job failed to start. Is this a permission issue?\nWithout sudo I get this hideous response:\n$ start myappname\nstart: Rejected send message, 1 matched rules; type=\"method_call\", sender=\":1.37\" (uid=1000 pid=13498 comm=\"start myappname \") interface=\"com.ubuntu.Upstart0_6.Job\" member=\"Start\" error name=\"(unset)\" requested_reply=\"0\" destination=\"com.ubuntu.Upstart\" (uid=0 pid=1 comm=\"/sbin/init\")\n. That's weird.  The only things in my /var/log/upstart/ directory are a bunch of .gz files, e.g., cryptdisks-enable.log.1.gz.  Just to be clear, I tar -xvzf my app into my home directory, /home/ubuntu/. Any thoughts on where my log should be?\nAlso, please note that my packaged myapp is not in my /home/ubuntu/gocode directory as stated in the Revel tutorial\n. @rambocoder thank you. Using this still gives me the error: \nubuntu@ip-xx-x-xx-xx:~$ sudo service myappname start\nstart: Job failed to start\nDebugging this following this thread wasn't helpful to me but perhaps it might make sense to you?\nhttp://askubuntu.com/questions/36200/how-to-debug-upstart-scripts\n@tpletcher: unfortunately, rebooting my EC2 didn't help. \n. ",
    "NathanArmstrong84": "Thanks! @tim-peterson . you are awesome. \n. I tried: \ngo get -u github.com/revel/cmd/revel\nI still get error on my  src/bittrove-api/app/tmp/main.go\nhere -> revel.TestSuites not defined   \n}\n    revel.TestSuites = []interface{}{ \n    }\n    revel.Run(*port)\n}\n. @alkchr \nYou are right, for some reason it using the outdated version of Revel.\nEven though I see this in my revel/version.go:\n```\npackage revel\nconst (\n    // Current Revel version\n    VERSION    = \"0.12.0\"\n    // Latest commit date\n    BUILD_DATE = \"2015-03-25\"\n    // Minimum required Go version\n    MINIMUM_GO = \">= go1.3\"\n)\n```\nOn my Mac OS, it seems fine. I am only having this issue on my CentOS 7 box. I am going to give a try tomorrow. I'll let you know the outcome.\n. ",
    "rsenk330": "Thanks for the feedback! I updated the the style changes and also fixed the decrement. Coming from python, it takes some getting used to with unsigned/signed values.\nFor generalizing the last two functions, how do you recommend handling it? For example, redis stores and returns everything as a string, but it looks like memcached stores things as a memcache.Item. The majority of those functions are identical, though.\nI also don't know why the tests aren't passing with travis. Do you have any ideas for that? They all pass when I run locally. The only thing that I can think of is that Redis is setting the TTL for a key a little later than when the go test is sleeping (to wait for the key to expire). I might be way off though and might be missing something really obvious.\n. ",
    "e-oz": "Well, ok, it's a safe one, but in general there is 2 problems (described above). But if it's ok and nobody worries - close the issue please :)\n. Well, it was enough reason to not use Revel for me (because it's example how project is not prepared for mass usage).\n. ",
    "twoolie": "@mclark4386 From the go docs: \n\nSince the $GOPATH variable can be a list, the rest of this document will use $GOPATH to mean the first element unless otherwise specified.\n\nAs far as I can tell, this is by design. Go searches all the paths for packages, but will only install to the first path listed.\n. @robfig You are exactly right. I missed that part of the documentation. Thankyou\n. ",
    "lukaslueg": "Maybe it would be nice to have compressedMimes be an array of regular expressions that the current Content-Type is checked against. This would allow one to specify text/.* or text/(plain|html|xml|css|) and such. There may also be a list of types that are always ignored like (audio|image|video)/.*\n. ",
    "CasualSuperman": "Renaming the variable makes sense to me. I thought it sounded awkward as well but I wasn't sure how to fix it. Regex sounds like a good next step.  Additionally, this ignores the client's preferences in compression types, so that's also something I'd like to add in when I get the chance.\n. It appears to work within each of the demos in Chrome and Firefox on Linux, but I haven't tested it within any other browsers/OSs. When using curl with various Accept-Encoding headers the quality detection has worked. Does anybody have a non-Linux box to test these with other browsers (IE in particular)?\n. ",
    "clipperhouse": "This seems sensible. It\u2019s a best practice to version static files in any case, with a long max-age.\nThe \u2018cheap\u2019 way to do it is via a querystring, which I do here with the home.AppVersion property, which is simply the last time the app started.\nTwo downsides to my approach: first, querystrings are often ignored by CDNs, in which case you\u2019d want to make it part of the path, as Rails\u2019 asset pipeline does.\nSecond downside is that the cache will be invalidated even when the underlying static asset hasn\u2019t changed. The more sophisticated way to handle it is to have the cache-buster string be a hash of the file contents. The URL only changes when the underlying asset changes.\nSome sort of mechanism for doing the above in Revel would be handy.\n. ",
    "romanoff": "Does anybody have an idea why could this build possibly fail?\n. Is there some way to force Travis run tests again or should I recreate pull request to do that?\n. Today I checked new approach and it doesn't seem to work as html is private field.\nThe Go code app/controllers/app.go does not compile: implicit assignment of unexported field 'html' in revel.RenderHtmlResult literal\nOne way is to change html to public field. Other is to add RenderHtml method to controller. Which one do you prefer? I can modify this pull request.\n. Updated pull request\n. go\nreturn revel.RenderHtmlResult{html}\ndoesn't seem to work as html is private field\n. Agree. What if we will just accept one parameter - html. And no objects. Will this work?\n. ",
    "ygabo": "Yep. I tested it and if you just switch the import to \"code.google.com/p/goauth2/oauth\", then the sample facebook oauth2 app should work right away without changing anything else. (assuming the id/secret/callback url are properly setup)\n. ",
    "guotie": "My fault.\nI use http 1.0 so it didnot use chunked transfer.\n. so many errors when I use ab test a revel app just \"hello,world\"\nab -n 20000 -c 1000 http://127.0.0.1:9000/\n2013/12/03 14:39:10 reverseproxy.go:141: http: proxy error: lookup localhost: no such host\n2013/12/03 14:40:04 reverseproxy.go:141: http: proxy error: dial tcp 127.0.0.1:42568: cannot assign requested address\n. oh, I know\nit's just because dev mode.\n. ",
    "inagun": "2013/11/5 tarqe39 notifications@github.com\n\nClosed #362 https://github.com/robfig/revel/issues/362.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/issues/362\n.\n\n\nClouet Ronnie\ninagun@gmail.com\n. ",
    "damselem": "Great, I'll take a look at other places and will try to send a pull request sometime this week.\n. ",
    "panjunjie": "\u76ee\u524d\u6211\u5728\u672c\u5730\u7684results.go\u6e90\u7801212\u884c\uff0cresp.WriteHeader(http.StatusOK, \"application/json\")\u4fee\u6539\u6210\uff1aresp.WriteHeader(http.StatusOK, \"application/json;charset=utf-8\")\uff0c\u95ee\u9898\u6682\u65f6\u5f97\u5230\u89e3\u51b3\u3002\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4ec0\u4e48\u597d\u7684\u5efa\u8bae\u6216\u65b9\u6848\u5417\uff1f\n. Incidentally, if the render() function can be manually specified html file (which is in views folder) to render also. is it more flexible?\n. I have tried: c.Request.Header[\"Referer\"][0], but c.Request.Header[\"Referer\"] returns the [].\n. @lenw thanks.it was no Referer headers being sent.\n. Thanks, but i don't kown how write it to the ResponseWriter in revel framework.\n. Thank you much!\n. ",
    "lidaobing": "@brendensoares it's not easy as I thought\nthe stat func will return ENOTDIR instead of ENOTFOUND on this case. we need also wrap this error like ENOTFOUND.\nso It's easy to provide a patch which works well on Linux and Mac, but I don't know what happened on Windows.\n. @brendensoares you are right. some attackers tried this url on my service.\nafter found this issue, I switch to nginx for the /public folder (which can avoid this problem)\nthe returned 500 code is not a big issue, but it will trigger our alert system.\n. @brendensoares we found similar request from same IP like /admin.php /public/img/favicon.png/../../admin.php, something like this, :)\nand I'll try to make a pull request fix for this, :)\n. @brendensoares a new pull request at https://github.com/robfig/revel/pull/402\n. @robfig it return the PathError, And this is inspired by the isNotExist from go source: http://golang.org/src/pkg/os/error_unix.go\n. @robfig, for more discussion, check #379 \n. @brendensoares if you want to use finfo.IsDir(), you need check every parent path, for example, if the user ask /public/a/b/c/d/e, you need check following pathes(as follows), this make the logic more complex than expected.\n/public\n/pubic/a\n/public/a/b\n/public/a/b/c\n/public/a/b/c/d\n/public/a/b/c/d/e\n. @brendensoares @robfig patch updated.\n. @brendensoares it works as expected.\n. @brendensoares a new pull request in #434\n. ",
    "nkatsaros": "This is also broken for me. #370 broke it.\n. My suggestion would be to add templates using both the original case and the lower cased version of the path. This would make the action templates case insensitive but included templates can use the original case or lower case.\n. Given that #367 was made because many file systems are case insensitive I don't think there will be any issues. text/template should work fine with duplicate templates with different names. \nEven if this is a stop gap measure I think it should be done because the change breaks old applications in a not easy to diagnose way.\n. I made a quick fix #395.\n. I changed the function so that the template bytes are only read once and are accessible to the outside scope.\n. ",
    "luck02": "closing, realized we never provided a 'prod' db config.  Problem solved.\n. ",
    "nullne": "So is there anything useful with access control in revel?. ",
    "ludmiloff": "@TripleDogDare your idea is excellent, I have patched revel with some code based on your idea, here is my work https://github.com/ludmiloff/revel/commit/2a8a56f61816de90974fd4d604d1ec7cc02dbfa9\n. My last commit https://github.com/ludmiloff/revel/commit/eceec1fa331a039582a20cd8305edd5ffcaa4d51 fixes runtime error because waitGroup used\n. ",
    "chirimoya": "+1 .. it would be really great to have some shutdown hooks merged into the next version \n. ",
    "markus-wa": "Considering this still has not been implemented yet, are there any plans to do so?\nEdit: not sure why it says i 'unassigned' someone. ",
    "winduptoy": "Am I correct in stating that there is no way to cleanly shutdown a database connection when the server is shutdown since this hook does not yet exist? The booking sample application only opens a database connection. \n  . ",
    "intel352": "@notzippy I assume it's possible to check go version from within the code. Perhaps integrate the graceful shutdown, but gate it behind a minimum version check?  That way the overall package is still usable for older environments, while at least getting the functionality implemented.. @runner-mei any luck with this?. @notzippy After making the change in the associated PR, the scenario provided above now functions. Please make any adjustments necessary.. I see this as well, it seems that Revel is logging it's engine start prior to evaluating the app configuration, so it gets quite a bit of logging done re: startup prior to taking config into account.. @notzippy I've tried your recommendation, but I only see stdout logs, I don't see any log files created (aside from the request log, which I've not messed with as it works fine as-is).\n```\nLog all loggers for the application to the stdout (except debug)\nlog.info.output = stdout\nlog.warn.output = stdout\nlog.error.output = stdout\nlog.crit.output = stdout\nlog.info = log/%(app.name)s-warn.json    # Log all warn messages to file\nlog.warn = log/%(app.name)s-warn.json    # Log all warn messages to file\nlog.error = log/%(app.name)s-error.json   # Log all errors to file\nlog.crit = log/%(app.name)s-critical.json # Log all critical to file\n```. @notzippy This is weird, the app is behaving differently in a local Docker run, than it does when deployed to Heroku (via Docker as well). On heroku, only requests log is created. In local Docker, I see at least the warn and requests logs (warn was also recording info level, error of mine in the config I'd pasted earlier).\nDon't worry about it, I'll try to see if I can sort why this is behaving differently despite same app.conf and Docker CMD.\nThanks!. @notzippy both info and warn were going to the same file on my local Docker instance, I've corrected that. I have the configuration in the [prod] section, and I'm using same exact Dockerfile to deploy locally as well as on Heroku (meaning it has the same CMD even, with prod mode specified).\nAfter digging further, I was using heroku run to check log files, but apparently that executes a one-off dyno. So quite likely files are logging, I need to set up heroku exec instead to be able to connect to an existing dyno.\nLearning pains  :). ",
    "bobrik": "Huh, I didn't notice than in the first go get you run it with github.com/robfig/revel, but in the second run it is github.com/robfig/revel/revel. You're right, it works the way the doc says, but the second go get actually only does installation without downloading anything.\n. ",
    "arturolinares": "No, in the same dir it was run... I don't know in mac though, I tested in a nitrous.io VM:\n$ uname -a\nLinux test-52220 3.8.0-31-generic #46~precise1-Ubuntu SMP Wed Sep 11 18:21:16 UTC \n2013 x86_64 x86_64 x86_64 GNU/Linux\n. With ./src doesn't work. Using relative paths as the source path causes the static module to prepend the base path to the static files location. This happens because using dirname returns the path relative to the caller location. In the example below run.sh prints the command generated before my changes:\n$ cd /                                                                                                                                       \naction@testapp-52220:/$ home/action/package/run.sh                                                                                                                     \nhome/action/package/testapp -importPath bitbucket.org/alinares/testapp -srcPath home/action/package/src -runMode prod                                               \naction@testapp-52220:/$ cd home/                                                                                                                                       \naction@testapp-52220:/home$ action/package/run.sh                                                                                                                      \naction/package/testapp -importPath bitbucket.org/alinares/testapp -srcPath action/package/src -runMode prod\nOn Windows the absolute path is correct only when run.bat is called in the same dir (it uses variable %CD%, maybe it should use %~dp0%)\n. It works on linux with this PR changes :) \u00arom: Brenden SoaresSent: lunes, 9 de diciembre de 2013 18:21To: robfig/revelReply To: robfig/revelCc: Arturo LinaresSubject: Re: [revel] Use absolute path in -srcPath flag (#399)@arturolinares even with this PR's changes, it still doesn't work?\n\u2014Reply to this email directly or view it on GitHub.\n. ",
    "jasewhatson": "Yup fixed. Thanks!\n. ",
    "rafadev7": "@purohit yes I have the revel package.\n@brendensoares I just don't saved this branch.\n. ",
    "mawenbao": "Sorry, this issue should be a duplicate of #99 and #123. I should have searched for my problem first.\n. Got it, thanks.\n. ",
    "yulrizka": "Yes, I already using it in my local machine for my local project\n. ",
    "ptman": "Disabling this via config would be nice. I run a revel app in docker and forward logs to syslog. The ANSI color codes really only add clutter\n. Ah, a later commit made it configurable: https://github.com/revel/revel/commit/0ea6736c6434ac9a914840d8f4df6b5e874ff664\n. This seems to have been fixed upstream: https://github.com/golang/go/issues/6377\n. Maybe add something like gometalinter to the test process\n. Is it really necessary to parse the document body? Isn't the csrf_token supposed to be in the cookies/headers? At least I get some value from t.Session[\"csrf_token\"]. But I do have some problem with that being invalidated:\nTRACE 2016/03/23 14:38:51 csrf.go:38: REVEL-CSRF: Session's token: 'uhVOHiZRhO+FWzE2kobYb9IS0cCZDPGhynxJGZ4Apoo='\nTRACE 2016/03/23 14:38:52 tokengen.go:26: REVEL-CSRF: Generated new Token: 'VPJAjYL5zTqSVN7GrIHcU5Q+NeMScfqzVoGHi6UJD0M='\nTRACE 2016/03/23 14:38:52 csrf.go:55: REVEL-CSRF: Processing unsafe 'POST' method...\nTRACE 2016/03/23 14:38:52 csrf.go:83: REVEL-CSRF: Token received from client: ''\n. Ok, that was my mistake. t.Session[\"csrf_token\"] works really well.\n. I have the same origin mismatch problem on localhost as well. I patched https://github.com/revel/modules/blob/master/csrf/app/csrf.go#L114. I think there should be a localhost exception or maybe http exception like in https://github.com/cbonello/revel-csrf/blob/master/csrf.go#L56. So change config to ISO8601 ? I can do a PR if that moves this forward.\n. Maybe Go15VENDOREXPERIMENT is more relevant to this than #923 \n. What about GO15VENDOREXPERIMENT with revel?\n. I had no intention of unassigning this, sorry.\n. I'm using https://github.com/golang/dep , but I can't use it for revel itself, because revel needs the revel binary installed in $GOPATH/bin. So I have this in Gopkg.toml:\nignored = [\n  \"github.com/revel/cron\",\n  \"github.com/revel/modules\",\n  \"github.com/revel/modules/jobs/app/jobs\",\n  \"github.com/revel/revel\",\n  \"github.com/revel/revel/testing\",\n]\n\nThat is, I use dep to vendor everything but revel.. @zuoRambo how did you install revel? go get github.com/revel/cmd/revel ? in that case revel is installed in GOPATH, not vendor/. Did you remove revel from GOPATH?. I have this same problem. The config option that causes this is 'watch'. Apparently websocket connections don't work with SSL in the harness.\n. Looks like harness can only proxy non-SSL websockets. I got it working by replacing https://github.com/revel/cmd/blob/master/harness/harness.go#L207 with:\nd, err := tls.Dial(\"tcp\", host, &tls.Config{InsecureSkipVerify: true})\nBut someone with a better familiarity to revel should probably integrate this so that it works both with SSL and without.\n. So is this actually already fixed in https://github.com/revel/cmd/commit/f122160a111500bce9e52c9337a9e208c049b7b0 ?\n. Test coverage is a useful and expected tool. It really should be possible to get coverage information out of revel tests. How could this be fixed?\n. Maybe revel test could do the code generation and run coverage (or revel cover) without having to modify how /@tests currently works.\n. https://blog.cloudflare.com/go-coverage-with-external-tests/\n. I tried to make a simple _test.go:\nfunc TestRevelTests(t *testing.T) {\n    revel.cmdTest.Run(packageArgs)\n}\nBut it naturally didn't work, as I only got it to produce (empty) code coverage for the revel test command that compiles a separate binary (without coverage profiling) to run the tests.\n. I think this was solved on IRC: place var APP_VERSION string in app/init.go\n. BTW, golint:\napp/init.go:8:5: don't use ALL_CAPS in Go names; use CamelCase\n. golint is just about style, not a bug IMHO\n. 1.4 is the last \"fast\" compiler written in C, right? Until 1.7 is out, it is significantly faster than newer releases.\n. Thank you for looking at the PR. I saw your comments drop in. Do you prefer rewritten history or a new commit that addresses the comments?\n. Yes, I've been using that config myself for a long time. A year maybe?\n. In the meantime, I do something like this to filter the files I don't want out from my archives:\ngunzip < project.tar.gz | tar --wildcards --delete '*.go' src/$package/tests src/$package/doc | gzip > project-small.tar.gz\n. @mageddo well, we've had a production service running for almost a year running in a docker container without those .go files so I'm fairly confident that it works. They are just used when compiling the binary. I assume the archive contains the files because  all of app/ is just copied there.\n. Thanks!\n. revel.OnRevelReady() or revel.OnRevelStart() or revel.OnInit() or revel.OnStart()?. Ran into this again. IE causes crash as it sends quite weird data on POST -> GET redirect.\nhttps://stackoverflow.com/questions/39358954/ie-sending-wrong-content-type-on-redirect-using-xmlhttprequest. I just surrounded lines 60 & 61 with if mp != nil {}, but I doubt that's a full solution.. @notzippy yes, works, seems to be the correct fix. and maybe https://github.com/revel/revel/blob/master/http.go#L142 as well. May I recommend dep or something else that allows you to use your own copies of dependencies? That way you can also easily patch stuff.     app.conf: No mode found: {\"mode\":\"dev\"\nyour app.conf doesn't seem to have a section called [dev] and fails to run in the default \"dev\" mode because of that. what sections do you have defined? revel run appname prod ?. That would keep the err variable from scope from the following TRACE.Printf. The dropping of the else is suggested by golint:\n\nif block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary)\n\nincluding the moving of the variable declaration outside of the conditional statement\n. Line 138 is part of Listen() that doesn't return anything, unlike watchWalker on line 89\n. t is not defined in startFakeBookingApp() and all the loggers are set to io.Discard\n. ",
    "hsluoyz": "Hi, I'm the author of casbin. It is an authorization library that supports models like MAC, RBAC, ABAC.\nRelated to RBAC, casbin has several advantages:\n1. roles can be cascaded, aka roles can have roles.\n2. support resource roles, so users have their roles and resource have their roles too. role = group here.\n3. the permission assignments (or policy in casbin's language) can be persisted in files or database.\nOf course you can also don't use RBAC at all, and only use the basic ACL model. casbin can be highly customized to adapt to multiple scenarios.\nPlease consider it and let me know if there's any question:). Hi @xpbliss ,\nplease see this 3rd party Revel authorization middleware: https://github.com/casbin/revel-authz. Hi @notzippy ,\nI made a Revel plugin here: https://github.com/casbin/revel-authz. It uses Casbin to perform access control for Revel.\nIs there a 3-rd party middleware list for Revel that I could put it on? Thanks.. Hi @notzippy ,\nI have used Gorm for the policy storage of the Casbin module. Please review the PR: https://github.com/revel/modules/pull/47. ",
    "abustany": "Apparently I couldn't update this PR with the new branches, check PR #413 instead (and I'll close this one)\n. Well, the idea is to be able to embed the build number in the binary. Imagine that you have a CI system watching your repository and deploying the new commits, I find it really convenient to be able to access the version number from the app, so you can include it eg. in the page footers. Users reporting bugs can then easily add that information to their reports. If you don't have the version number embedded in the binary, you have to resort to solutions like generating a go file and compiling it with the app, which I'd very much like to avoid since they mean I can't simply do a revel package anymore, but need to write a Makefile or something (and end up with stuff like that, not really elegant).\nMore generally, most tools I use include a --version switch, that'd be the equivalent for a revel app :)\n. Updated the PR according to the review comments - basically both the go and the env variable used to set it are renamed from REVEL_APP_VERSION to APP_VERSION\n. I didn't associate any semantics to the version number itself, since tastes vary wildly in this domain... git describe returns the name of the latest annotated tag before HEAD, again the naming strategy of the tag is up to the developer to decide. If more processing is needed (eg. removing the \"v.\"), that can always be done on the application side: if my tags are called release/foo, I can strip the release/ prefix in the code before showing the version to the user. Writing a generic logic for that is impossible.\nAdding app.conf as a source does not make too much sense in my opinion since the file is read at runtime, and versioning is a compilation time thing. But I might have misunderstood what you meant.\nBrenden Soares notifications@github.com wrote:\n\nWhat is considered a valid version number? If git describe returns\nv0.8.13 then should we strip the v?\nAlso, instead of only checking the environment and git tags, why not\nalso check app.conf?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/robfig/revel/pull/413#issuecomment-31025334\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. Hmmm what would you compare it against? There's probably a valid use case for that too but that patch is not trying to address it (so far :) ). That said, I wonder if that kind of check would be at application level too: the version number parsing is again application specific (eg. some companies prefer to have week number releases, like w32-1), and you could then add a minimum version requirement in the app.conf as a normal configuration key (and do the comparison in the app init). This commit is really just about adding a way to bake a version string in the binary, what you do with it is another story :-)\nBrenden Soares notifications@github.com wrote:\n\nMy concern is comparing the build's app version to a minimum version\ncheck. You'd have to have some sort of common format where there are\nonly numbers and periods. Am I right?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/robfig/revel/pull/413#issuecomment-31044919\n. Well, thanks for the extensive review, and for merging the patch! Keep on the good work with revel :)\n\nBrenden Soares notifications@github.com wrote:\n\nMerged #413.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/robfig/revel/pull/413\n. Apologies about the regression. I'm using a linux system myself so didn't see this happen... Does git describe --dirty change only the atime or also the mtime? In either case I'd expect howeyc/fsnotify#79 to help there, since git describe would probably not change file contents...\n. OK, so git somehow opens the file and updates the atime... I guess the patch you proposed makes sense.\n\n@brendensoares that behaviour only happens on OS X for me, maybe it'd also happen on linux if you mount your fs with atime support (off by default on all distros I know to reduce disk IO).\n. ",
    "fhusson": "In a revel app in the folder messages, add a file \"message.en\", in the file add the content:\nremote.up=Up\nremote.down=Down\nIn the folder app/views, in a template try to use the new key with {{msg . \"remote.up\"}} the message will not be displayed.\nThe bug is for every word that begin with \"rem\" because the package robfig/config ignore lines with rem, I have set a pull request to fix this \nhttps://github.com/robfig/config/pull/9\nbut someone has an alternative, with the pull request 8 (2 months ago)\nhttps://github.com/robfig/config/pull/8\n. ",
    "temoto": ":+1: \n. ",
    "JaTochNietDan": "I think this is a good idea and alternative to interceptors, although in terms of practical application I think there needs to be a way to be able to define these before/after methods for a set of controllers easily, as opposed to defining them in each controller that you want to use them in. If you get what I mean.\n. Yeah that's a good point, that particular extension supports Sublime, Notepad++ and Netbeans on Windows. There's also an OS X version.\nMaking it configurable would probably be the most ideal solution. Perhaps if we were able to specify the actual format of the link it would be the best, if no format specified then don't make it a link?\nSomething like:\nerror.link = \"subl://open?url={{file}}&line={{line}}\"\n. I have updated it so that it's configurable via an entry in app.conf, for example:\nerror.link = \"subl://open?url=file://{{Path}}&line={{Line}}\"\nIf it is not set, it will not put a link and it will behave as it always did.\n. Well for example, we could add logic to the application itself so when you make a call to a route such as /update, the application will then pull updates, run a series of tests and then once all of that checks out, then we can tell Harness to do a hot reload of the code base.\nThis allows us a simple way to roll out updates to the server with our own logic implemented. You could argue that you could just abstract this logic out into a build server of some sort, but for simplicity and convenience sake, this could be a worthwhile addition.\n. Hey @pushrax, could you go into more detail about your deployment process?\n. Essentially we are accepting emails being sent to us via POST request for one of our products (I work at Teamwork and we use Revel for parts of our product's backend). The issue is that sometimes emails can grow quite large (generally caused as you continue to reply to emails, the size of the email body grows exponentially as each reply retains the previous thread of replies).\nIn this case we were unable to process some of these requests as the max body size of a request in Go's http server is 10 MB and one of the emails coming in was 11.4 MB (see here). When this function fails to parse the form in Revel, it prints out a warning and then it seems that we can't access the values in the form (see here).\nThere may be a better solution for this that I'm not aware of, though this has solved our problem for now.\n. It could perhaps do with better naming but it is basically referring to the setting.\nI guess you could also just take out that parameter and take the link straight from the config within the method.\nMy naming idea behind it was \"file link\".\n. Changed it to errorLink :+1: \n. Ah, did that there now\n. ",
    "lenw": "I used \nc.Request.Header[\"Referer\"][0]\n. I see that the request is just the http.Request which is : \nfunc (r *Request) Referer() string {\n    return r.Header.Get(\"Referer\")\n}\nYour original code should work. There are probably no Referer headers being sent.\nCan you check ?\n. :+1: \n. Would that mean the templates would have a flag they would have to check ? \n\nCloudAfrica\n0834006106\n\nOn 05 Mar 2014, at 6:06 PM, Justin Li notifications@github.com wrote:\nThe correct way to implement it is to look at the X-PJAX header and render differently if it is set. This would be as simple as setting a render arg, and either including the layout files or not.\n\u2014\nReply to this email directly or view it on GitHub.\n. No prob - here is the whole func \n\nLine 81 is the last line of the paste.\n```\nfunc main() {\n    flag.Parse()\n    revel.Init(runMode, importPath, *srcPath)\n    revel.INFO.Println(\"Running revel server\")\nrevel.RegisterController((*controllers.App)(nil),\n    []*revel.MethodType{\n        &revel.MethodType{\n            Name: \"Setup\",\n            Args: []*revel.MethodArg{ \n            },\n            RenderArgNames: map[int][]string{ \n            },\n        },\n        &revel.MethodType{\n            Name: \"Index\",\n            Args: []*revel.MethodArg{ \n            },\n            RenderArgNames: map[int][]string{ \n                51: []string{ \n                },\n            },\n        },\n        &revel.MethodType{\n            Name: \"Features\",\n            Args: []*revel.MethodArg{ \n            },\n            RenderArgNames: map[int][]string{ \n                63: []string{ \n                },\n            },\n        },\n        &revel.MethodType{\n            Name: \"Pricing\",\n            Args: []*revel.MethodArg{ \n            },\n            RenderArgNames: map[int][]string{ \n                67: []string{ \n                },\n            },\n        },\n        &revel.MethodType{\n            Name: \"Contact\",\n            Args: []*revel.MethodArg{ \n            },\n            RenderArgNames: map[int][]string{ \n                71: []string{ \n                },\n            },\n        },\n\n    })\n\n```\n. @brendensoares Unfortunately its not public so will have to describe.\n1. Made changes to code as per v0.9.0 docs\n2. revel run project\n3. Open http://localhost:9000 \n4. Panic !\nI am happy to try anything you think might help or share bits of code that I can.\n@pushrax you suggested that I might be embedding a pointer, would that be in the App struct ?\n. @brendensoares added the print and get (*controllers.App)(nil)\nThe main App struct is \ntype App struct {\n    *revel.Controller\n    revmgo.MongoController\n    m1  *models.Tracker\n}\n@pushrax does your theory imply that m1 in my App would need to be initialized 1st or should the revel controller guard against such things, or should I not have pointers in the App struct but rather copies ?\n. @pushrax thanks - changing to non-pointer types for now to get it running again. \nYes 0.8 was working no probs \n. @brendensoares will give that a try and let you know shortly\n. @brendensoares 0.8 failed so must be something in my code ...\nI am removing all pointers from the App struct as that seems to be the source of the problem. Please advise if there is anything else I should look for.\n@pushrax should we close this or is there a fix from your comments above ?\n. @brendensoares  Ok so have refactored the App to not have any pointers or embedded bits\ntype App struct {\n    revel.Controller\n}\nThis was not good as the code wants a pointer to the rever.Controller so changed that \ntype App struct {\n    *revel.Controller\n}\nThere is no panic on startup anymore. Will start adding pieces back and see where it breaks.\n. when I add https://github.com/jgraham909/revmgo back I get the panic \n. Update the revmgo import to use the new revel/revel package and so far so good.\n. I have opened a pull request on revmgo for this.\nAll seems good now.\nThanks for the help !\n. It depends on the html tags you intend to use, checkboxes ?\n\nxpbliss mailto:notifications@github.com\n28 August 2014 at 11:23\nIn controllers:\nfunc (c App) Del(ls []string) revel.Result{\n//something to do\n}\nIn views:\nhow to make a ls array string into the Action \"Del\"?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/revel/revel/issues/702.\n\n\nSent with Postbox http://www.getpostbox.com\n. ",
    "agtorre": "Oh nice, you can see some of the effects here:\nhttps://travis-ci.org/robfig/revel/builds/16246425\n. Hmm I'd like to do something like that but I'll have to give it more though as to how. I'd have to wrap a bunch of methods since there ERROR.Println, ERROR.Printf, ERROR.FatalLn, etc. \nIf it's OK to color all of the text on a string instead of just arguments, it's pretty simple to wrap these I think, although it may be slightly less efficient for Printf. My thought here would be something like this:\ngo\nPrintf -  Fmt.Print(ERROR_COLOR(sprintf(...args)). \nPrintln - Fmt.Println(ERROR_COLOR(...args)) \nFatalLn - Fmt.Println(ERROR_COLOR(...args)) exit(1)\nMaybe it can be done by implementing io.Writer also for efficiency. I'll think about it some more and update accordingly. If anyone has any suggestions I'm happy to discuss.\n. That's the path I just started going down as well. Testing in a new local branch.\n. Ok, gonna close this request and re-pull using the new branch.\n. If this looks good I'll look at adding some config parameters to change or disable colors for a specific level of logging.\n. I'm pretty sure it's ready to go. The only thing is it defaults to on with no way to disable it or change the colors. I'm not aware of any issues though.\n. I did look at that, but that particular option depends on Powershell. It\nwould definitely be a challenge to get this working correctly with Windows.\nFor example, I think the ANSI coloring might work with cygwin, but we can't\nbe sure they'll use it.\nOn Sun, Jan 5, 2014 at 1:01 AM, Brenden Soares notifications@github.comwrote:\n\nJust a quick question, doesn't this work for Windows, too (\nhttp://stackoverflow.com/questions/2048509/how-to-echo-with-different-colors-in-the-windows-command-line\n)?\nIf it does, might as well remove the GOOS check.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/439#issuecomment-31599573\n.\n. It would just show gibberish ANSI codes unfortunately. There was some\ndiscussion here about it here:\n\nhttps://groups.google.com/forum/#!topic/golang-nuts/b8PH6e31DNw\nOn Sun, Jan 5, 2014 at 2:37 AM, Brenden Soares notifications@github.comwrote:\n\nWould it hurt the usability to let it go and just hope it's enabled? It\nwon't negatively impact the developer if it's disabled will it? Or will it\nshow gibberish ANSI codes if it isn't enabled?\nSomething to test.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/robfig/revel/pull/439#issuecomment-31601052\n.\n. \n",
    "PlkMarudny": "Old stuff, buy anyway:\nfile, err := os.Open(filename)\nif err != nil { \n        return c.RenderError(fmt.Errorf(\"Cannot open a file requested: %s\", err))\n    }\n    return  c.RenderFile(file, revel.Inline). ",
    "plestoon": "thanks for the idea. i didn't even notice that modules exist since i'm quite new to revel and even go. i just played too much with Play!\n. still thinking about this issue. using modules feels a little strange and over-killing to me. i'd rather have fully qualified controller names in the routes file, or using a relative path to the controllers folder.\n. currently i want this:\n    GET            /api/v1/users                api/v1/User.Index\nor\n    GET            /api/v1/users                full/package/path/to/controllers/api/v1/User.Index\ni prefer the former one since it keeps things short, including reverse routing\n. just need a simple name spacing mechanism, don't think using modules is simple and general enough. is it always a bad design to have two controllers with the same name within the same module\n. sorry, i mean the underscores in the test files' names, like user_test.go\n. sorry, please just rename the newly generated apptest.go to app_test.go, then revel test issue450\n. ",
    "seawatts": "+1 for fully qualified names in routes\n. ",
    "NitroKKX": "Why couldn't revel prefix the controllers automatically with the module name as defined in app.conf ? If your app contained\napp/controller/user\n/app/module/Customer/app/controller/user\nAnd your module was registered in app conf as\nmodule.XCustomer = github.com/customer\nThen two controller references would be \nUser  (app/controller/user)\nXCustomer_User (/app/module/Customer/app/controller/user)\nObviously there could be an issue if someone named a controller with an underscore that would match a module specifically but then simply do not allow controllers to contain the underscore.\n. Having two different versions of the same controller in the same project seems rather unusual to me. Like @pushrax said run 2 different versions of the app in that case. That said, compressing the controller namespace to ApiV1User is an intriguing solution as well - but bears the question to ask - Why did he not simply name the controller that way in the first place ? \nA key benefit to doing this on the module side is sharability. If you develop a module you cannot predict what controller names could exist in a project were the module is used, but if revel could prefix the module controllers to something that is in the conf file then a module will always be pluggable into a project. I think that people should be encouraged to use the modular solution. It makes their code more reusable and (hopefully) more sharable. Perhaps to encourage people making modules revel should have another command option to create a module ?\n. No opinion on reverse routing, not that familiar with it.\n. Stretching this topic further, are views going to be name space aware as well ? So to include a template from a module you could reference it like /XCustomer/someView.html ? \n. I responded on #724 \n\nIf the controller in the module rendered a view with a relative path (a path that does not start with a \"/\") then the view to be rendered would be modified to the fully qualified path of the module as defined in app.conf\n. @brendensoares were is @verdverm's auth module ? I could not find a reference to it ?\n. Pardon my ignorance, but what is subpackages, and how is that different then placing the files in seperate folders ?\n. Thanks for the explanation @brendensoares , I hadnt heard it termed subpackages before and just wanted to ensure I understood you properly. Shouldnt field and i18n be moved to a subpackage as well ? watcher should be moved into cmd as well since it is only relevant there too. Not sure about some of the other subpackages, since there are a lot of cross reference between them - like router, server and controller are pretty tight and may be best to leave them together in the revel package. The rest look good.. Just my (c)(c)\n. Makes sense to me. Thanks\n\nOn Sat, Jan 3, 2015, 11:38 PM Brenden Soares notifications@github.com\nwrote:\n\n@NitroKKX https://github.com/NitroKKX I've chatted with @anonx\nhttps://github.com/anonx and we decided it's best to keep watcher in\nthe revel repo to ensure watcher functionality when not using the revel\ncommand.\nHere is the outcome of our chat\nhttps://github.com/revel/revel/wiki/Meetings-2015-01-03 as far as new\nsub-packages:\n- sub-package naming convention vs Revel API exported attributes\n  - testing\n  - binding\n    - decided: combine binder and params into 1 package\n      - routing\n    - decided: move router.go\n      - decided: no server\n  - validation\n    - decided: go ahead and move it to subpack\n    - decided: Validation to validation.Context\n      - watcher\n    - decided: Watcher to watcher.Notifier\n      - session\n    - decided: session.Session to session.Values\n    - decided: SessionFilter to session.Filter\n    - merge flash.go to session i.e. FlashFitler with session.Filter\n      - controller\n    - decided: Controller to controller.Context and\n      controller.NewContext\n    - decided: pass in config.Context instance to NewController\n      - filter\n    - decided: remove initial var Filters values and require\n      app/init.go to set them or panic\n    - decided: Filter to filter.Type\n    - decided: Filters to filter.Stack\n      - config for app config...needs eventual abstraction for backend\n        drivers\n- decided: MergedConfig to config.Context\n   - decided: NewEmptyConfig to config.NewContext\n   - decided: LoadConfig to config.LoadContext\n   - need a revel/cmd issue\n  - should make sub-packages more independent of Revel in the future\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/614#issuecomment-68624265.\n. Agreed this could be achieved that way, but what if it is a generic set of configuration options that you would like to pass to a module. For example passing connection information to a database module if it was simply one configuration variable it would be easy, but with multiple variables your program would need to choose which set to pass in. Also if you need to establish multiple database connections this would make things easier as well.\n\nMy example of a json string as a configuration option is just an example, perhaps you want to define a multiline copyright notice in the configuration, or a bunch of email addresses ? Having the option to have the configuration value span more then one line is handy.\n. Yes, migration to yaml will resolve this issue as well\n. @xpbliss That will work fine if the controller is not contained in the module. My point was that both the controller and view are in the module. \n. @brendensoares this is an extension of #445, resolving views inside the module would be handled fairly easily. If the controller in the module rendered a view with a relative path (a path that does not start with a \"/\") then the view to be rendered would be modified to the fully qualified path of the module, so in the case above if the controller in the module returned\nc.RenderTemplate(\"register.html\")\nthen the requested template name would be translated to \"/XCustomer/register.html\" and this is what the template engine would look for. The added twist to this is that since the main application has a view at  \"app/views/XCustomer/register.html\" as well that the template engine would use the template at that location rather then the one inside the module..\n. I wasted over an hour backing out changes I had made trying to figure out wtf happened. The least that could be done in the interm is to update the documentation so that it is stated that the controller can only be created using the type FooController struct {*revel.Controller} technique. Currently the doc states that it must be the first defined structure in the file.\nhttp://revel.github.io/manual/controllers.html\n. Yes I saw those messages, and I am still getting messages like those TRACE 2014/09/18 07:43:18 reflect.go:624: Surprising: Decl does not have 1 Spec: &{<nil> 11929 type 11934 [0xc20820bf20 0xc208220000 0xc208220150 0xc2082202a0] 12574} How about adding some extra code to log the file it is actually looking at ? Like passing the filename to that call ?\n// For each source file in the package...\n-   for _, file := range pkg.Files {\n-   for fname, file := range pkg.Files {\n          if scanControllers {\n              // Match and add both structs and methods\n-               structSpecs = appendStruct(structSpecs, pkgImportPath, pkg, decl, imports)\n-               structSpecs = appendStruct(structSpecs, pkgImportPath, pkg, decl, imports,fname)\n. Amended last commit, thought I had formatted already ... opps\n. PR should be merged to the develop branch as well, no ?\n. ",
    "newoptions": "@robfig @brendensoares http://play.golang.org/p/BvOohyh25v\n. ",
    "dmage": "For \u0414\u0440\u0443\u0301\u0436\u0431\u0430 \u0434\u0440\u0443\u0301\u0436\u0431\u043e\u0439, \u0430 \u0441\u043b\u0443\u0301\u0436\u0431\u0430 \u0441\u043b\u0443\u0301\u0436\u0431\u043e\u0439 good versions are\n\u0434\u0440\u0443\u0436\u0431\u0430-\u0434\u0440\u0443\u0436\u0431\u043e\u0439-\u0430-\u0441\u043b\u0443\u0436\u0431\u0430-\u0441\u043b\u0443\u0436\u0431\u043e\u0439\ndruzhba-druzhboy-a-sluzhba-sluzhboy\nFor URLs latest is preferred (because it wouldn't be skewed by url encoding).\nBut \u0434\u0440\u0443\u0436\u0431\u0430-\u0434\u0440\u0443\u0436\u0431\u043e\u0438-\u0430-\u0441\u043b\u0443\u0436\u0431\u0430-\u0441\u043b\u0443\u0436\u0431\u043e\u0438 is awful. \u0439 != \u0438\n. ",
    "mikkolehtisalo": "@brendensoares It seems still quite lacking. I am interested how you would accomodate something like this: https://github.com/mikkolehtisalo/revel/blob/master/gssserver/gssserver.go\n. @brendensoares IMHO you are still a bit fixated on password based authentication, and do not take into account non-interactive SSO mechanisms (which have to break the ordinary stack of request processing in order to work). \n. ",
    "tcolar": "I'v looked into this some more and what I've found out is that it works as expected when started in PROD mode. \nHowever in DEV mode the cron job are not being started until I visit a page. I'm guessing that in dev mod, the \"reload\" proxy does not start/init the app until a call is made .... \n. Right that's exactly what I was thinking. It also would make for a more \"consistent\" behavior between Dev and Prod modes.\n. ",
    "rjeczalik": "Now I've noticed chmod u+x \"$SCRIPTPATH/booking\" in run.sh - wouldn't it be better for revel build to run os.Chmod on these files?\n. @brendensoares I've sent Pull Request #484. This shouldn't cause any cross-platform issues with Windows.\nExcuse my laziness, but out of curiosity is there any issue list on what's needed to be done in order to officially support Windows?\n. @brendensoares I'll give Revel on Windows a try and see how it goes.\nRegarding file permissions, only Unix's w is mapped to Windows' FILE_ATTRIBUTE_READONLY, rest is ignored:\nhttp://tip.golang.org/src/pkg/syscall/syscall_windows.go#L488\n. Oh sorry for not RTFM'ing; I've sent #487.\n. You're welcome!\n. ",
    "zzdboy": "Can increase such method does not\nFor example:\nreturn c.Redirect(\"/hotels/settings\",\"The message\",  seconds)\n. https://github.com/zzdboy/GoCMS\n. ",
    "viblo": "Just want to add that I also think a Redirect method without string but with arguments would be useful and would feel more clean than the current way.\n. Interesting solution. However, Im not sure I like importing something that is generated. If I checkout the clean code from source control I wont be able to find that method before I have run the code sort of successful at least once. \n. I have the same app.conf everywhere, the two servers where I have deployed my revel app are identical (except that they have their own IPs). The easiest solution would definitely be if it would read the \"real\" ip and not a configuration/environment value, since otherwise I must configure the two servers differently.\n. That was strange, revel.Server.Addr returns :43812, same as is printed in revels log. However, in my revel config file I have http.port=18227? I havent event noticed that it actually listens on both ports. Where does 43812 come from? I thought it would only listen on what is written in config file. Anyway, that value is no help since it doesnt include IP and its not even the port I use to connect to.\n. @anonx with revel run. When I now test with run.sh it shows the correct port. I didnt realize that it behaved differently depending on the method used to run. (I do use run.sh in production, so no big concerns about revel run). However, I still dont have the IP.\n. Yeah, thats what I would ideally avoid doing, easier if it had the actual listening ip for the request available, but Im not sure if its even possible if the server is setup to listen to *. Anyway for now I have solved my problem by using os.HostName() instead.\n. ",
    "souravray": "thanks Brenden,\nhere is my User (gorm) model -\n``` go\npackage models\nimport (\n    \"time\"\n)\ntype User struct {\n    Id              int64\n    Email           string sql:\"size:255\"\n    ClearPass   string sql:\"-\"\n    HashedPass   []byte sql:\"size:255\"\n// relational table\nDetail     UserDetail\nStatus    []UserStatus\n\n}\ntype UserDetail struct {\n    Id        int64\n    FirstName  string sql:\"size:255\"\n    LastName   string sql:\"size:255\"\n    BirtDate   time.Time.\n//reference\nUserId   int64\n\n}\ntype UserStatus struct {\n    Id   int64\n    StatusText   string sql:\"size140\"\n    StatusTime   time.Time\n//reference\nUserId int64\n\n}\n```\n. @verdverm thanks for the suggestion. I change my code  from\ngo\nvar user models.User\nto\ngo\nvar user *models.User\n& it works!\nSo passed parameter should be an 'address of  a pointer' not 'address of a variable'. I'm still confused, why it so.\nThe doc is needed to be updated.\n. ",
    "jgrar": "I didn't make it clear enough, sorry.\nI'm trying to access this from the same machine. I'm using chrome if it helps. I know what the check is for but it doesn't check this header for a local address- that's the issue.\n. @brendensoares It has been 8 months and I no longer have access to the dev machine that this issue was raised on, so I'm not able to confirm. I do however have a fix I used:\n```\ndiff --git a/modules/jobs/app/controllers/status.go b/modules/jobs/app/controllers/status.go\nindex 47ef614..e35e40e 100644\n--- a/modules/jobs/app/controllers/status.go\n+++ b/modules/jobs/app/controllers/status.go\n@@ -12,7 +12,8 @@ type Jobs struct {\n }\nfunc (c Jobs) Status() revel.Result {\n-   if _, ok := c.Request.Header[\"X-Forwarded-For\"]; ok || !strings.HasPrefix(c.Request.RemoteAddr, \"127.0.0.1:\") {\n+   revel.TRACE.Printf(\"%#v\\n%#v\", c.Request.Header[\"X-Forwarded-For\"], c.Request.RemoteAddr)\n+   if /_, ok := c.Request.Header[\"X-Forwarded-For\"]; ok || / !strings.HasPrefix(c.Request.RemoteAddr, \"127.0.0.1:\") {\n        return c.Forbidden(\"%s is not local\", c.Request.RemoteAddr)\n    }\n    entries := jobs.MainCron.Entries()\n```\nRemoving the check for X-Forwarded-For fixed this issue.\n. ",
    "drewwells": "How would a random user execute jobs?  The @jobs page only lists jobs, it doesn't provide any mechanism for running them.  @verdverm If there are plans to add executing jobs from the job status page, can you link the ticket?\n. That's a good point lets take this up with the gopkg team.\nOn Sat, Mar 22, 2014 at 6:30 PM, Justin Li notifications@github.com\nwrote:\n\nWe talked about this in #530 and decided against it at the time. Further discussion here is welcome, but if the assumptions made there were correct (notably that we would need to alter all of revel's import paths) I'm still of the opinion it's not the best way to handle dependency management.\nReply to this email directly or view it on GitHub:\nhttps://github.com/revel/revel/issues/564#issuecomment-38367593\n. I sent an email explaining this problem.  Here's his response:\n\nHow can revel be modified to use gopkg without having to rewrite all the\nimports internally on every version?\n\nThat's a good question.\nIt was recently announced in a few places that gopkg.in started to\nenforce the use of major versions in the import path. In other words,\nRevel can still tag revisions as v0.9.1, but the import path should be\ngopkg.in/revel/v0/revel (or gopkg.in/v0/revel, if you name the\norganization as \"go-revel\"), and gopkg.in will direct go gets to the\nlatest version (v0.9.1, in this case).\nThis solves a few different issues. One of them is what you describe\nabove: when using a major version, you can use the exact same import\npath both internally and extrenally without changing it on every\nrevision.\nThe other one is more subtle, and a lot of people don't realize is an\nissue until too late:\nAlice imports Revel 0.9.1 on package A\n Bob imports Revel 0.9.2 on package B\n Cath imports packages A and B into her app C\nAs a consequence, Cath's app will have two different copies of Revel,\njust slightly different. With the new constrained model described,\nAlice and Bob will instead import /v0/revel, and Cath will happily\ntake the latest revision available that is compatible with her code,\n(v0.9.2, in this case).\n. Yes, thats what the documentation implies:\nhttp://godoc.org/gopkg.in/v1/docs#hdr-Version_zero\n\nI can see there is no hard and fast solution for this.  If Revel depends on\ngithub.com/revel, it is at the mercy of the state of files of that version.\n How can you ensure v0.9.1 is looking at v0.9.1 without specifying that\nversion internally?\nThis is a difficult thing to maintain externally and internally.  I could\nsee a dependency traversing tool that goes through and renames imports to\nmake this all work.  That's overlapping functionality with\nhttps://github.com/tools/godep though.\nOn Thu, Mar 27, 2014 at 1:27 AM, Brenden Soares notifications@github.comwrote:\n\nUsing a latest aka v0 version in the import path would defeat the purpose\nof version locking, wouldn't it? The point is to create a dependency on a\nspecific version, right?\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/564#issuecomment-38772662\n.\n. Go 1.3.1\nmy revel git branch is on tag v0.9.1\n. Also, run/build/package all throw this error.\n. This is old now, I don't know if it's even a problem anymore. Closing\n. \n",
    "Depado": "For future reference and if anyone stumble on this again, if you're using systemd on your computer (Linux for example) this can be fixed by doing \n(sudo) sysctl fs.inotify.max_user_watches=100000\nAnd to set it permanently, just put fs.inotify.max_user_watches=100000 in your /etc/sysctl.conf\nNote that 100000 is arbitrary you can put whatever value you want inside it, as long as it's big enough to avoid the issue.\nSource\n. ",
    "smothers": "@wanli2011 I ran into same issue with AngularJS and content-type: application/json. If you only need support for the top level key/value pairs in a json object this filter should do the trick.\nvar JsonParamsFilter = func(c *revel.Controller, fc []revel.Filter) {\n    if strings.Contains(c.Request.ContentType, \"application/json\") {\n        data := map[string]string{}\n        content, _ := ioutil.ReadAll(c.Request.Body)\n        json.Unmarshal(content, &data)\n        for k, v := range data {\n            c.Params.Values.Set(k, v)\n        }\n    }\n    fc[0](c, fc[1:]) // Execute the next filter stage.\n}\nInsert it right after the revel.ParamsFilter\nrevel.ParamsFilter,  // Parse parameters into Controller.Params.\nJsonParamsFilter,    // Monkey patch JSON params\n. ",
    "rendon": "@smothers :+1: After a while trying to read some JSON from the request body this line did the trick.\ncontent, _ := ioutil.ReadAll(c.Request.Body)\n. ",
    "bhilton": "Thanks - this looks like it will address what I need!\n. ",
    "hugecannon": "@brendensoares that's what I've done for the meantime, though it's not too nice having RenderText(\"\") all over the place. I would like to implement something along the lines of RenderNoBody() or something\n. ",
    "faultblog": "Whoops, that bash_profile not bashrc, Pull it, sorry, it's 4am\n. No sorry Brendan, it was correct the first time.  I was tired, it was 4 am, I got it wrong sorry.  But if you put export in your .bashrc, it works, but for .bash_profile, you use PATH\n. ",
    "denmaradi": "http://revel.github.io/docs/godoc/controller.html#Controller.RenderJsonP\n. ",
    "mcheng89": "Add https sni support for multiple https domains \n. @pushrax :+1: Its done\nTodo: Handle host for reverse routing\n. For the TLS SNI, I have two domains each with their own certificates. I don't get warnings from my browser so I would assume that it's working. The same cert works before the change but it only supported one domain. \nWould this also fix #358? I can put sub1.example.com in the routes file to handle a specific sub domain now. \n. @verdverm I'm able to replicate this issue with /public/*filepath using the develop branch.\n. Yup. I create a new app using the devel branch: revel new www\nThe default routes file has this line:\nGET     /public/*filepath                       Static.Serve(\"public\")\nThen I run http://127.0.0.1:9000/public/app.conf?prefix=conf\nAnd I have access to the app.secret now :(. I can modify my own session data now.\nI can verify that the patch fixes it.\n. If we don't call revel.Run() and just use the handler, wouldn't we need to call the template loader, runStartupHooks, and the fmt.Printf(\"Listening on %s...\\n\", localAddress) (harness listens for this?) at some point. Maybe some code needs to be shuffled around or we need another way to call those?\n. I'm not by a computer so the path might be wrong, but if you look at the tmp/main.go file, you will see the method args defined there. The main.go is generated when revel builds your application. It uses the \"go/ast\" package to get the argument names and types. \n. Take a look at the intercept filter:\nfc[0](c, fc[1:])\ninvokeInterceptors(AFTER, c)\nIt's able to look at the results after the controller returns a result. \n. ",
    "daemonchen": "Hi,\nNice to meet you.\n I occur a problem.\nWhen I view static file such as main.css or main.js in windows 8, it start to download the file.\nBut it's quite good in linux or mac.\nI don't know why.\n. ",
    "jivko-chobanov": "I am not able to continue to work on this, I am sorry.\n. ",
    "longbai": "OK, Thanks :)\n. I have add session test and an example in booking\n. @brendensoares , Is it OK? If there are something to do, please tell me :)\n. ",
    "mihaihuluta": "Is there an official debugging guide for Revel? Personally I just want to follow clear steps in order to be able to debug a Revel application (currently it matters less if its command line based or IDE based). I really do not want to spend time trying to figure out how to do it. Specially that I am new to both Golang and Revel.\n. In my case this answer helped a lot: http://stackoverflow.com/questions/23952886/revel-debugging-how-to\n. ",
    "cellis": "I'm also interested in this. Having spent about 5 hours trying to get the sublimetext 3 debugger (gogdb) working for simple go programs, i'm thinking it's not going to be easy with Revel.\nI think a gentler tutorial to debugging with gdb is this: http://lincolnloop.com/blog/introduction-go-debugging-gdb/\n. ",
    "wdreeveii": "Apparently I have not updated robfig's cron package for some time. My local\ncron.Parse was only returning 1 argument while revel was expecting 2.\nOn Wed, Feb 26, 2014 at 7:48 AM, Brenden Soares notifications@github.comwrote:\n\nThis issue was mentioned on IRC last night, but I was unable to get more\ndetails from the person (as there was some error they were getting from\njobrunner.go). This issue doesn't seem to be about an error; just\nhousekeeping.\n\nReply to this email directly or view it on GitHubhttps://github.com/revel/revel/issues/526#issuecomment-36146826\n.\n\n\nWhitham D. Reeve II\n907-764-5263\n. a) My PR contains the jobrunner.go import fix because i can't figure out how to create PR with only a single commit.\nb) --git-dir -- If I had known about this option, I would have used it.\n. This works with a space in the path.\n. Can anybody illuminate why this build failed?\n. ",
    "imuneer": "@lenw I had the same exact issue.. Removing the pointer same as you described, worked for me.\nthanks\n. ",
    "ntwarijoshua": "the error is caused by a embedding a non pointer value of the revel.Controller struct\n. ",
    "DSpeichert": "Anything I could do to help with getting this merged?\n. ",
    "rami-dabain": "Guy what happened with this MR?\nThis is really a great feature!. Anyone merge this please? the websocket bug is prohibiting me from updating revel as all of my project is websocket based !. sure, ping me if you want a help in review\nOn Dec 6, 2017 6:16 PM, \"notzippy\" notifications@github.com wrote:\n\n@rami-dabain https://github.com/rami-dabain There is one more\nproduction bug that I would like to include with this patch set, can you\nwait for it ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/pull/1271#issuecomment-349709872, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABJEMDZo4uXfLjc96f5hE1VaP72rbTnxks5s9svQgaJpZM4Qmre9\n.\n. Does this have same behavior over wss ?. Caddy Http Server:\nhttps://caddyserver.com/\n\nbuilt in golang, it matches the browser agent to the tls handshake signature it sends. if they don't match, then a MITM attack might be on the way. also can provide more accurate browser identification\nCan't find the blogpost that describes how it is done,but the idea is simple once you get the raw bytes of the TLS handshake. ",
    "0xMF": "Thanks the link to the detailed instructions you gave me worked. You might also want to change instructions on http://revel.github.io/ for other noobs like me who would also be affected with this. \nBest. \n. ",
    "ianonavy": "Hi,\nI'd like to start contributing to Revel, and I think that this might be a good place for me to start. Is there any work being done on this right now?\n. Looking at the way routes are currently implemented in Revel, it would be easiest to just add an optional 4th whitespace-separated column to the lines in the routes file. Something like this:\n(METHOD) (URL Pattern) (Controller.Action) [NAME]\nFor example: \nGET    /login                 App.Login        \"login\"\nThis has the advantage of being backwards compatible with existing routes files. I can try implementing it and see how it affects performance if you like it. Personally, I don't like GET(login) beacuse it looks too much like a function call. \nIn regard to the Generate method, I don't think that it belongs in the routes package at all. It should probably be implemented in the router as mentioned in OP as a method in the revel package or something similar: revel.GetRouteByName. However, the main issue with this implementation is name conflicts across multiple modules. \n. Hmm... looking at the implementation for route parsing, we seem to be using regular expressions to parse a non-regular, context-free grammar. For example, I just tested that GET /javascript/:filepath Static.Serve(\"public/js is a valid route and incorrectly matches the fixed param \"public\". Perhaps we should consider alternative parsing methods such as Go Parse or Go yacc.\nEdit: actually, Peg looks more promising.\n. Bumping. Any thoughts?\n. I modified this line in the router test to read\n`GET /javascript/:filepath Static.Serve(\"public/js\"`: &Route{\n(note this missing close paren) and the test still passed. In my opinion, this should probably throw a syntax error. The issue is that it still matches the regular expression. However, you can't write a regular expression to match pairs since you need a non-regular context-free grammar to match pairs.\n. Well it would be easy to add Name field to the Route struct, but it's hard to add an optional 4th column for a name without using multiple regexes. We could do what @brendensoares mentioned with the parentheses after the HTTP method, but it would still be imho the wrong way to do it. I think that the parseRouteLine should just be rewritten to use an actual parser library rather than a regex but still work the same.\n. Rather than using a full on parsing library, I've added error checking by replacing the regex with a simple finite state machine. Please review this commit and see whether you like the change: https://github.com/ianonavy/revel/commit/a9caab35b861e690260b96fcf99af4abebb4a4a9\n. Ah yes, my head was stuck in theoretical CS land and not seeing that since we're just matching exactly 1 set of parens, it's fine. I'd be curious to see whether a FSM performs better than a regex, but yeah that could work too.\n. Another problem is that much of the parsing for things like nested module routing and separating the fixed parameters into an array is done outside of this function. This function just splits it into the \"method, path, action, fixedArgs\" variables for other methods to parse, and a regex is probably fine for that. I'm just thinking about how we might add a \"name\" field to this, and it worked pretty well to just add to the FSM I wrote. Named capture groups simplifies everything and could also work. I remember reading that there are performance benchmarks in our tests. How does that work?\n. http://pastebin.com/D80mSvqS\nWell, it appears that a FSM offers no measurable performance increase, even for a large router. Maybe I should write a new benchmark that just tests that particular function. \nAnyway, another advantage of the FSM is that you can provide more helpful error messages. For example, you can exactly say \"missing open paren\" or \"too many close parens\" as opposed to just \"syntax error.\"\n. As a new contributor, I agree that organizing the source files into subpackages would make it easier to focus on one issue.\n. This is easily fixed as follows: http://play.golang.org/p/2fkJkbJTyz\nEdit: simply add csv.TrimLeadingSpace = true\n. I just read your edits. As mentioned in the last comment in the other issue, I think the main advantage of using a FSM is that you can provide specific syntax error messages such as \"too many closing parens\" or \"missing open paren\" whereas the regex you wrote would simply not match the line.\n. It actually doesn't assume that parens are always present. If there are no parens, the FSM exits in the IN_ACTION state. The issue with parens inside the arguments could be fixed by just adding a counter variable or stack to make sure that the parens are balanced. I did assume, however, that comments had been taken care of outside this function, but that could be easily added.\nI wholeheartedly agree with moving to a standard like YAML. It would allow for more flexible and easier parsing.\n. Oo, I really like the idea of a pluggable router loader.\nAlso, you had two methods in your sample. :P\nMy take:\n```\nImport all routes from the job modules.\n\nimport: jobs\n\nA simple path\n\nmethod: GET\n  path: /login\n  action: App.Login\n\nAutomatically route to controller (either magic :action symbol or explicit key/value pair)\n\nmethod: POST\n  path: /hotels/:id/:action\n  controller: Hotels\n\nStatic serving\n\nmethod: GET\n  path: /public/*filepath\n  static_path: public\n\nStatic serve exact file\n\nmethod: GET\n  path: /favicon.ico\n  static_file: public/img/favicon.png\n\nFixed params\n\nmethod: GET\n  path: /products/:id\n  fixed: ShowList(\"PRODUCT\")\n\nPrefix all routes in the testrunner module with /debug/\n\npath: /debug/\n  import: testrunner\n\nNamed routes (in the future)\n\nname: login\n  method: GET\n  path: /login\n  action: App.Login\n\nCatchall\n\nmethod: *\n  path: /:controller/:action\n```\n. Actually, we don't need that. Editing to replace with \"---\" instead. Too used to JSON.\n. That would work better, but I agree, it is kind of awkward. The great thing about YAML is that it also supports\n\nparams:\n- public/img\n- favicon.ico\n. Instead of commenting out those large blocks of code, I'd probably just remove them. Other than that, it looks great. :) I haven't had the time actually test it with a YAML configuration file. When you're parsing the params, can you not just set the params []slice to the value of route[\"params\"] but just check for nil, instead of looping? Might save some cycles.\n. Done.\n. ",
    "xthexder": ":+1: \n. ",
    "nrser": "ugh. thanks for the pointer, will see what i can do.\n. yeah, that hack fixed it... replaced /usr/bin/xcrun with\n``` bash\n!/bin/bash\n$@\n```\nalso ran\nrevel clean github.com/robfig/revel/samples/booking\nrm $GOPATH/bin/booking\nthough not sure if i needed to. app once again starts. thanks for the help.\n. btw, what should i put in the db.spec config var to get sqlite to use a disk file? tried a few things and it just kept complaining that it couldn't find the db file. that's what i was struggling with before this bs happen.\n. never mind, it got it. this worked fine:\ndb.spec   = app/tmp/booking.db\n. ",
    "levigross": "You're welcome!\nCurrently session ids are created using a UUID which is a combination of 8 random bytes (64 bits of entropy) plus the current time (which is predictable). This patch gives the session identifiers at least 128 bits of entropy.\nThe SHA256 hash is not needed. If you agree with the above mentioned comment, I will remove it. If not, just reject the PR :)\n. @brendensoares It depends on the implementation of the session signing, in some cases it does and others it doesn't. I will do some research to see if the PR is needed or not.\n. @pushrax Thanks! \n. ",
    "bobobo1618": "@pushrax I'm quite amused that someone recognises him on Github.\nAs for the rest, I know it'd be a tradeoff for people wanting to do this and there's a good chance we'd lose some of the shiny dev features but for some projects it could be worth it.\nAs for init stuff, shouldn't Revel be able to happily set up its handler with the relevant modules and return it to the user?\nIt could be as simple as this?\n``` go\npackage main\nimport (\n    revel \"github.com/revel/revel\"\n    \"net/http\"\n)\nfunc main(){\n    revelHandler := revel.Init()\n    http.ListenAndServe(':8000', revelHandler)\n}\n```\n. Awesome! Glad to hear it :D\n. ",
    "abrander": "A few things I think should be possible with user controlled main():\n- Allow for NOT binding to a http port.\n- Allow for running runStartupHooks() WITHOUT calling revel.Run()\n- Allows for binding to multiple ports (think of listening to multiple IP's for different SSL CN and maybe a http-redirector also).\n- Privilege drop after bind().\n. @brendensoares Allow me to elaborate:\n- We use some of revel features for utilities not using http, for example for using revel's cache settings and config file parsing, for this purpose it would be nice to be able to start revel without listening for http. Right now be have this workaround:\ngo\n// We try to mimic enough of revel.Run() to run\nfunc mimicRevelRun() {\n    // Some init code but no binding\n}\n- I previously thought that I needed to drop privileges after bind()'ing to port 80/443, but it turns out that Go's process model really doesn't allow that. We ended up using setuid/setgid in the init system before starting the daemon and setcap for giving the daemon CAP_NET_BIND_SERVICE-capabilites.\nI think almost all our troubles and ugly workarounds will be solved if we can manually call http.Server{}.ListenAndServe(). It will allow us to bind to multiple ports and listen on different ip's with different SSL certificates.\n. ",
    "janekolszak": "Maybe this will help anyone: https://github.com/janekolszak/revfluent\nIt's a small Revel + Fluentd logger.\n. I ended up using OSIN. Putting it into Revel didn't take much time.\n. http://raml.org/spec.html\nRAML is \"RESTful API Modeling\", but I guess very small extension to the format could make it useful for routing. I'm no RAML expert though, it may be possible right now.\nAsking here: http://forums.raml.org/ would probably help.\n. This might be usefull after they move to RAML 1.0\nhttps://github.com/EconomistDigitalSolutions/ramlapi\n. ",
    "littlexiang": "seems writing a module to override the revel.LOGGER is a good way\n. maybe revel would provide revel.SetLogger() function to do so?\n. maybe could write an app level config module by myself instead, that would be easy and flexiable\n. usually it is because you are inside the project path\ntry this\nmkdir build\ncd build/\nrevel build project\n. something like closures\nfunc NewFunc(args interface{}) *func() {\n    return &func(){args can be used here}\n}\n. ",
    "klauspost": "Here is a backtrace:\nhttp://pastebin.com/56D7XtwH\nPanic is from github.com/revel/revel/tests.go:112\nif t.ResponseBody, err = ioutil.ReadAll(t.Response.Body); err != nil {\n-->     panic(err)\n    }\nSo it seems like \"ioutil.ReadAll\" is failing because of compression.\nMy main guess would be that 1) a header is wrong or 2) something in one of the compression modes is wrong (I don't know which ones the go client accepts).\n. I found the cause. You need to close the gzip/deflate stream, not just flush. You are adding an unfinished section to the encoded data after a flush-sync.\n1) Add Close() to WriteFlusher() interface.\n2) Add \"defer c.compressWriter.Close()\" BEFORE c.compressWriter.Flush() (deferred functions are called in reverse order).\nI can't do a pull request, I don't know github/git enough, and I am currently to pissed off on github to spend more time on it. Sorry, but it is a two-line fix.\n. You should not share your gopath code between different machines.\nThe code has already been compiled on another machine with go 1.2, while your new machine is go 1.2.1, which is incompatible.\nTo fix it, move your stuff from d:\\dropbox... to a local directory, re-set your gopath and delete pkg/windows_amd64 in your gopath. Alternatively do a clean gopath install.\nThis doesn't appear to be revel specic.\n. I created a new pull request targeting development.\n. Looks very good!\n. I have added a check to confirm that the data delivered to the compress filter isn't already compressed.\nThis allows for a static file handler to deliver pre-compressed/cached content, and that will pass through the compress filter and not be double compressed.\n. Yes - There are a lot of proxies that can block some, or simply not support all methods.\nThe most common place for these problems are mobiles on cellular data, where the forced proxy simply drops all requests that are not GET/PUT/POST. In other cases the browser simply doesn't support newer functions like PATCH/DELETE/HEAD.\n. ... and I spent two hour just getting this pull request into git. I really hate it. If you have any pointers on how to squash them, that would be appreciated.\n. Well - I effed that up - now things are just one big mess. GIT is really a black box of mystery and weirdness for me, and it takes me hours just to get basic tasks done. I've been using SVN for years, but  GIT just doesn't seem to play nice for me ;)\nSorry - if you can just take the few  lines of code and add them yourself, I would appreciate it.\n. Yeah - POST only is a reasonable change. GET/POST are by far the most widely supported methods.\n. #583 is overriding via a method parameter. This is a more standard way of doing it as a header, and this is much safer.\nAFAICT, with #583, you can escalate CSRF vulnerabilities to also include PUT/PATCH/DELETE. Consider this placed on a hostile site:\n<form action=\"http://yoursite.com/account?_method=DELETE\" method=\"post\">\n    Your favorite colour: <input type=\"text\"><br>    \n    <input type=\"submit\">\n</form>\nWith this, you need access to write headers in your request, which you can't do with a simple URL/form. \nI would personally not be comfortable running a site with 583 enabled.\n. As a simple start, I have made a controller that returns all routes and documentation for all controllers and models in your application:\nhttp://pastebin.com/6Rbb7mc5\nWith this info, it should be fairly easy to cook up an Angular page that parses and display this information. You may of course have some secret stuff you don't want exposed, so you may want to filter that.\nModels should be linkable to relevant godoc\n. Yes, I have been running similar code in our setup for a while, and it is stable if \"server.go\" is also patched to close the response - otherwise this will break.\nfunc handleInternal must include this at the end:\n// Close the Writer if we can\nif w, ok := resp.Out.(io.Closer); ok {\n    w.Close()\n}\nIt is not in this pull-request as far as I can see, so I just wanted to be sure it was included.\n. It is similar to the proposed patch, but with an actual fix (the proposed fix still returns the error, so the connection is still dropped) :\ndiff\ndiff -r 93f5aef8cb25 websocket/hybi.go\n--- a/websocket/hybi.go Wed Jan 29 10:23:52 2014 +0900\n+++ b/websocket/hybi.go Wed Feb 26 10:00:05 2014 -0800\n@@ -288,20 +288,21 @@\n        handler.payloadType = frame.PayloadType()\n    case CloseFrame:\n        return nil, io.EOF\n-   case PingFrame:\n+   case PingFrame, PongFrame:\n        pingMsg := make([]byte, maxControlFramePayloadLength)\n        n, err := io.ReadFull(frame, pingMsg)\n        if err != nil && err != io.ErrUnexpectedEOF {\n            return nil, err\n        }\n        io.Copy(ioutil.Discard, frame)\n+       if frame.PayloadType() == PongFrame {\n+           return nil, nil\n+       }\n        n, err = handler.WritePong(pingMsg[:n])\n        if err != nil {\n            return nil, err\n        }\n        return nil, nil\n-   case PongFrame:\n-       return nil, ErrNotImplemented\n    }\n    return frame, nil\n }\nI only use outgoing communication on websockets, so I don't know if this actually works on two-way communication.\n. You should not close the file at all. The file is handed to the server, and the result is streamed AFTER you return your result, so your function returns before any content has been read from the file.\nThe file will be closed by the server once it has been delivered.\n. Just copy \"revel/modules/static/app/controllers/static.go\" from the revel installation into your own controllers, rename it to something like \"MyStatic\", and you can do whatever you like to it.\nHere is an example of a \"modified\" static controller:\nhttp://pastebin.com/VgEFJ6PS\nIt sets some additional headers, serves a precompressed \"file.ext.gz\" if it can find it, and we can include files that are only visible in \"dev\" mode (like javascript map files, etc).\n. In app/init.go, just add \"runtime.GOMAXPROCS(runtime.NumCPU())\", or what you'd like it to be.\n. Is the build system broken? The error seems completely unrelated to my code?\n. Yeah - it was \"server.go: Failed to listen: listen tcp :9000: bind: address already in use\"\n. PS. I cannot build the current \"develop\" branch because goagain cannot compile on Windows, so I have only tested it on 0.10.0, and manually merged the changes.\n. @notzippy - that would make my change weirdly inbetween, with new code behaving another way than the existing. I think that should be done once the case change is done.\n. Our two current usecases are EULAs and welcome messages, that are basicly big lumps of text that it doesn't make sense for us to use the translation system for. The EULAs differ from country to country, so a simple translation isn't what we are requiring.\nAnother usecase is for heavily formatted text, since the current message system escapes HTML.\n. @pedromorgan ... you are closing because.....?. (it is my understanding that the files will be leaked until the server restarts on linux)\n. I had a look at it, and it seems like this could be handled by adding a simple check in the \"ActionInvoker\" controller:\nGo\n    for _, arg := range c.MethodType.Args {\n        // If they accept a websocket connection, treat that arg specially.\n        var boundArg reflect.Value\n        if arg.Type == websocketType {\n            boundArg = reflect.ValueOf(c.Request.Websocket)\n        } else {\n            boundArg = Bind(c.Params, arg.Name, arg.Type)\n            // If the argument is a closer, defer a Close call, so we don't risk leaks.\n            closer, ok := boundArg.Interface().(io.Closer)\n            if ok {\n                defer closer.Close()\n            }\n        }\n        methodArgs = append(methodArgs, boundArg)\n    }\nThis fixes the issue for me.\n\"bindByteArray\" should just be closed in the binder after the file has been read.\nTo reproduce:\n- Add POST controller, similar to this:\n  `func (c File) Add(file io.Reader) revel.Result {\n  return c.RenderJson(\"Success\")\n  }\n- Send a file >32MB with a POST.\n  The temporary file will now remain visible on Linux, and the error above will show on Windows.\n. > So messages can be taken from DB, not only from config. Is it your use-case?\nIn the long term yes. Right now I mostly do it, so I can fix minor annoyances in the builtin filter, and I have added dynamic reload of messages (might do a separate PR on that). I can replace the filter in the filter chain, but not the Message function.\nI considered exporting \"messages\", but just being able to replace the function makes it a lot more flexible. \nEither way the format of \"messages\" makes it very specific for this particular use case, and if doing a DB approach something like a \"map[string]map[string]string\" type would make more sense.\n\nDo alternative Message implementations still need parseLocale function.\n\nWell, they can do what they want (ie. just copy it if they need it). I think if people are going to implement their own filter, they are most likely just starting by copying i18n.go into their own project anyway.\nMy only real consideration was if the function should include RenderArgs, or something similar, but that makes it ugly, and there isn't really a need, since you can pass any number of parameters through \"args ...interface{}\" anyway.\n. The use case was replacing i18n with an auto-reloading one as well as setting locale through url path.\n. In our case, our main \"app\" page shows this difference:\n| (key) | Without Trim | With Trim | Size of org |\n| --- | --- | --- | --- |\n| Uncompressed | 91,175 | 80,422 | 88% |\n| Gzip, default | 16,061 | 14,789 | 92% |\nSo it saves about 8% bandwidth, and there is 12% less data for gzip to compress.\n. Well, it is in the main repo because the template engine isn't plugable. That is targeted to 0.13, but once that is done it should be fairly simple to extract the code into a separate module.\nIf it had to be done right now, it would be a complex filter along the lines of the compression filter, inserting itself as a Writer in the filter chain. That would make it much more complex and error prone, not really something I would see as an improvement.\n. @brendensoares - the \"BenchmarkRenderCompressed\" doesn't appear to apply compression, so you are not benchmarking compression ;)\n. Yes - since this is a custom filter, in theory the user could have inserted another filter that doesn't implement CloseNotifier, and I believe it is implementation specific, so some OS might not implement it. \nEither way the assertion is needed for the compiler.\n. Again, yes - if a custom filter has done the same replacement as the compress filter it might not.\n. AFAIK there isn't a case insensitive search that is more lightweight than this combination. Yes, it creates a string per line, but it should be possible for the compiler to see that \"t1\" never escapes the scope.\n. ",
    "zuoRambo": "rotate log file by date or size is a strong demand. so, the latest version (master branch) still don't support graceful shutdown?. I add github.com/revel/revel to vendor and add revel to $PATH,but when i run revel run my_app, i get the follow error\nbash\n~\n~ revel! http://revel.github.io\n~\nERROR 2017/08/09 15:52:22 revel.go:346: Failed to find Revel with error: cannot find package \"github.com/revel/revel\" in any of:\n    /usr/local/go/src/github.com/revel/revel (from $GOROOT)\n    /tmp/src/github.com/revel/revel (from $GOPATH)\nwhat's wrong? vendor is useless ?. @ptman @notzippy ,i can't understand why \"build.Import\" was not search vendor firstly?. @notzippy How to refactory my revel style test so i could get coverage report ?. I think the point is how to to define router match and HTTP Status Code 405.\nhow about the pseudo-code below\n```\nif match PATH\n    if match METHOD\n        do action\n    else\n        return 405\nelse\n    return 404\n. [Feature/domain routing #536](https://github.com/revel/revel/issues/536) ? It looks like is not releated to my idea. \ud83d\ude22. I think `revel.TRACE` `revel.INFO` `revel.WARN` `revel.ERROR` should keep.\nAnd seperate controller log and job log is a good idea! \ud83d\udc4d. Why revel don't use [graceful http](https://github.com/facebookgo/grace) to support graceful reload http server?\nAnd i think revel need [context](https://golang.org/x/net/context).\n@notzippy . didn't not merge into master?. @notzippy thanks and you have worked hard\uff5e The  `Master branch` build failed in travis-ci.. We could upgrade `go` version to *1.8*, so we can use `Shutdown` and `context`.go\nvar wg sync.WaitGroup\nsignalChan := make(chan os.Signal, 1)\nsignal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM)\ngo func() {\n    <-signalChan\n    ctx, cancel := context.WithTimeout(context.Background(), time.Second*time.Duration(Config.IntDefault(\"app.cancel.timeout\", 10)))\n    defer cancel()\n    Server.Shutdown(ctx)\n    runShutdownHooks(&wg)\n}()\n``. OK\uff0cthanks @notzippy \nFor graceful reload our application, we should catch the terminated signal and notify the server to finish the established request with timeout option, and notify our application which have some customized asynchronous jobs. . @notzippy I merge the latest master branch . @paritosh90 how do you installrevel`. ",
    "ggaaooppeenngg": "thx!\n. 40 func (t *RegisterTest) TestRegisterActiveCode() {\n 41         \n 42         var user models.User\n 43         defer engine.Delete(&user)\n 44         form := url.Values{\n 45                 \"user.Name\":            []string{\"testName\"},\n 46                 \"user.Email\":           []string{\"test@test.com\"},\n 47                 \"user.Password\":        []string{\"testtest\"},\n 48                 \"user.ConfirmPassword\": []string{\"testtest\"},\n 49         }\n 50         form.Add(\"user.Haha\", \"sadd\")\n 51         t.PostForm(\"/Account/PostRegist\", form)\n 52         user = new(models.User)\n 53         has, err := engine.Where(\"email =?\", \"test@test.com\").Get(user)\n 54         t.Assert(err == nil)\n 55         t.Assert(has)\n 56         t.Assert(user.ActiveCode != \"\")\n 57         t.Get(\"/Account/Activate/\" + user.ActiveCode)\n 58         t.AssertOk()\n 59         user = new(models.User)\n 60         has, err = engine.Where(\"email =?\", \"test@test.com\").Get(user)\n 61         t.Assert(has)\n 62         t.AssertEqual(nil, err)\n 63         println(user)\n 64         active := true\n 65         t.AssertEqual(true, active)\n 66         println(\"active code\")\n 67 }\nThis is piece of my code ,I use xorm as db orm. This code works, but If I change the models.User to point ,like user:=new(models.User) ,I will get this error, It seems error comes from the whole test func reflect,I am not sure\n. I am curious about the preparsing part,where is the detail code of the preparsing process?\n. @xpbliss Is there a way to set one intercept for more than one controllers? It seems I need to set the intercept one by one.\n. It seems I have an old document on hand...\n. ",
    "joecohens": "I could change it to it's own filter and make it available via de conf file.\n. Sure! Sorry I didn't saw the guide.\n. @brendensoares Hey sorry busy week, yep I'll make the changes.\n@pushrax Thanks! I'll add the POST method and validate the if _method is set and empty, to kill the request what do you think of 404 not found?\n. I could refactor this in some time to request.go and make a kind of wrapper of net/http get the request parse it an return the method intended, also this place would be great for the HeaderFilter and any other header options.\nIt would be great to have the folder for filters but I agree with @pushrax that should be a PR by it's own.\nAre you by any chance at the GopherCon?\n. I'm getting this error because the 405.\n``````\nServer Error:\nMethod not allowed: \nAdditionally, an error occurred when rendering the error page:\nTemplate errors/405.html not found.```\n``````\nWould you like me to make templates?\n. @brendensoares Ready! Let me know what you think.\n. :+1: \n. Like it, I'll change it.\n. I'm thinking on putting it below the RouterFilter on router.go since it modifies the route behaviour, and test in routes_test.go what do you think?\n. Thanks! I'll make the change.\n. You'r totally right.\n. Made the change, and I've also checked if is post request.\n. So sorry got exited!, I'm pushing the fix.\n. ",
    "uraza": "You mean because of the usage of backslashes on one side and slashes on the other side?\nThe path is wrong anyway: it should be \"D:\\dev\\go\\src\\github.com\\revel\\cmd\\revel\\package_run.sh.template\"\ninstead of\n\"D:\\dev\\go\\src\\cmd\\revel\\package_run.sh.template\".\n. ",
    "danbao": "Thanks, It is OK now.\n. ",
    "jsegura": "@brendensoares Is this going to be considerated for the next release?\n. I think that still there are some questions that don't deserve a issue on GH.\n. ",
    "k0kubun": "I see.\nI'll change this to a configurable optional feature later.\n. Thanks to accept the feature request.\nI've done it. fa1469a\nI added rebuild.eager option to enable this feature, and it is set to false by default.\n. > @k0kubun instead of rebuild.eager can we do watcher.eager? No need to add new root config attributes.\n\nAlso, is there a better word than eager? Seems odd. :)\n\nThat's true. Since this option is created to decide whether harness rebuilds eagerly or not, how about watcher.rebuild_eagerly?\n. I rebased to resolve a conflict but made CI failed. Sorry...\n\n@k0kubun or watcher.mode = \"normal|eager\"?\n\nThank you for nice suggestion! It seems more natural than my idea.\n. > Perhaps that was the old version?\nI think so. I fixed some error in edd4773, but still have some problems.\nhttp://godoc.org/gopkg.in/fsnotify.v1 and https://godoc.org/github.com/howeyc/fsnotify have many API differences. I have to change some implementation from an old version.\n. I changed the option to enable this feature. 79abc3f\nIf this change is OK, please merge this pull request :)\n. Thank you :heartbeat: \n. Nice method name e4dbe7f\n. That's true. It became hard to read.\nI splitted the logic into w.rebuildRequired() in d451f28ad1171df530a395abaaeafb244bae59cb\n. Yes, it was a very bad way indeed.\nThe reason of doing such a thing was to serialize listener.Refresh() calls, so I blocked its call by the same mutex in d451f28\n. It catches runtime error: invalid memory address or nil pointer dereference as follows if this filter is disabled with rebuild.eager true.\nI can't understand the reason well, but it seems that Refresh() has some roles except rebuilding and template loader needs Refresh() by this filter when given http request.\n2014/05/10 08:32:14 server.go:1094: http: panic serving 127.0.0.1:58042: runtime error: invalid memory address or nil pointer dereference\ngoroutine 11 [running]:\nnet/http.func\u00b7009()\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/net/http/server.go:1093 +0xae\nruntime.panic(0x398e20, 0x87b519)\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/runtime/panic.c:248 +0x106\nhtml/template.(*Template).Lookup(0x0, 0xc2100c70a0, 0xf, 0x0)\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/html/template/template.go:277 +0x27\ngithub.com/revel/revel.(*TemplateLoader).Template(0xc2100cb3c0, 0xc2100c70a0, 0xf, 0x2, 0x2, ...)\n        /Users/k0kubun/go/src/github.com/revel/revel/template.go:372 +0x77\ngithub.com/revel/revel.ErrorResult.Apply(0xc2100e82d0, 0xb12c00, 0xc2100de7e0, 0xc2100383c0, 0xc2100e81e0)\n        /Users/k0kubun/go/src/github.com/revel/revel/results.go:46 +0x231\ngithub.com/revel/revel.(*ErrorResult).Apply(0xc210100fe0, 0xc2100383c0, 0xc2100e81e0)\n        /Users/k0kubun/go/src/github.com/revel/revel/binder.go:1 +0xa6\ngithub.com/revel/revel.handleInternal(0xb12b90, 0xc2100bbbe0, 0xc2100ff270, 0x0)\n        /Users/k0kubun/go/src/github.com/revel/revel/server.go:44 +0x2e0\ngithub.com/revel/revel.handle(0xb12b90, 0xc2100bbbe0, 0xc2100ff270)\n        /Users/k0kubun/go/src/github.com/revel/revel/server.go:30 +0x184\nnet/http.HandlerFunc.ServeHTTP(0x4e56d0, 0xb12b90, 0xc2100bbbe0, 0xc2100ff270)\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/net/http/server.go:1220 +0x40\nnet/http.serverHandler.ServeHTTP(0xc2100db370, 0xb12b90, 0xc2100bbbe0, 0xc2100ff270)\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/net/http/server.go:1597 +0x16e\nnet/http.(*conn).serve(0xc210109080)\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/net/http/server.go:1167 +0x7b7\ncreated by net/http.(*Server).Serve\n        /usr/local/Cellar/go/1.2.1/libexec/src/pkg/net/http/server.go:1644 +0x28b\n. Oh, thanks!\n. ",
    "FrancisVarga": "+1\n. ",
    "diatmpravin": "@pushrax I felt same here, all lines above 28th are repeated from website.  \nI think small description of default directory structure of a generated Revel application will be valuable content in Readme. What you think? \n. cc @pushrax \n. ",
    "casualjim": ":+1: for this functionality\n. ",
    "birkirb": "Hello, hope you don't mind if I chime on this on a bit. I have a need for something like this and took a similar approach but used goagain to get the free spawn/fork for easy updates. I'm curious to know if there were any significant problems with the approach here or if the retargeting (#772) had different reasons.\nYou can take a peak at my try here:\nhttps://github.com/birkirb/revel/compare/v0.11.1.update\nI could chip in on this effort if there is an opportunity to do so.\n. @brendensoares Thanks, I can understand the need for consistent features across platforms.\nI am not that familiar with Windows programming. For zero-downtime restarts, would you implement a similar pattern as we have here with a Windows equivalent, or is that something that is far in the future of the project? Is the current effort focusing exclusively on graceful shutdowns?\nSince this feature is more or less required for my use case, and the windows feature isn't, I'm wondering how to best proceed. I don't want to step on your toes, nor maintain my own fork. Is there a way to modularize this behavior? Any other ideas or suggestions?\nLastly I didn't see significant conflicting changes in the develop branch. At least I could merge mine in there without major issues. Probably I'm missing something.\n. There it is! Thanks for your replies @brendensoares \nI'll look through the code and conversation there and see what comes out of it.\n. @anonx Thanks for the heads up. Agreed that a NewTestRequest method would solve it (did indeed look for one). In the end I wrote the function to bypass the test request and go directly to the suite's client. Will do for now, but will refactor after your change. Of course with a couple of Put methods actions most of the nice wrapper methods will be there. I'd love to chip in but I really need that graceful restart thingy so if I have time I'll look into that ;)\n. In our case we had a problem with Samsung Galaxy Ace, running Android v2.3.6 (Gingerbread). Seems like their HTTP library would try to unzip a null (empty body) or something like that and throw an exception. I saw some anecdotal evidence suggesting it was also on issue on other systems but don't have any details.  \nSince the body is already empty it seems like it shouldn't hurt to skip the compression.\n. Seems similar, although in that case it's that the controller action there is returning nil and not explicitly setting the content type etc. I've set the status and content type explicitly before returning in the cases where I use this.  HTTP standard stipulates there MUST not be a body on 204 and 304s, so again there is little point in trying to compress it.\n. @brendensoares New request opened in #888, please close when ready.\n. Yup, same goes for the status code, which would usually be set by the action so it's imperative the compression check is executed after that.\n. ",
    "jimmykuu": "Look over you app.conf file, check module.static=github.com/revel/revel/modules/static exist.\n. If possible, show your app.conf file's code where make error.\n. ",
    "mintzhao": "Thanks for your answer.\nAfter looking my project,I found that I define a new Section in app.conf before module.static.So maybe I changed the module.static's section.So the app can't find it.\nAfter I delete the new section,it looks like ok.\nMaybe you can improve it.\nThanks again and have a nice day.\n. My wrong app.conf:\napp.name=web\napp.secret=SECRET\nhttp.addr=\nhttp.port=9000\nhttp.ssl=false\nhttp.sslcert=\nhttp.sslkey=\ncookie.httponly=false\ncookie.prefix=REVEL\ncookie.secure=false\nformat.date=01/02/2006\nformat.datetime=01/02/2006 15:04\nresults.chunked=false\ndatabase\n[db]\ndb_driver=mysql\ndb_url=root:@/gomysql?charset=utf8\nlog.trace.prefix = \"TRACE \"\nlog.info.prefix  = \"INFO  \"\nlog.warn.prefix  = \"WARN  \"\nlog.error.prefix = \"ERROR \"\nThe default language of this application.\ni18n.default_language=en\nmodule.static=github.com/revel/revel/modules/static\n[dev]\nmode.dev=true\nresults.pretty=true\nwatch=true\nmodule.testrunner = github.com/revel/revel/modules/testrunner\nlog.trace.output = off\nlog.info.output  = stderr\nlog.warn.output  = stderr\nlog.error.output = stderr\n[prod]\nmode.dev=false\nresults.pretty=false\nwatch=false\nmodule.testrunner =\nlog.trace.output = off\nlog.info.output  = off\nlog.warn.output  = %(app.name)s.log\nlog.error.output = %(app.name)s.log\nAnd I already know that I defined a \"db\" section that destroy the default section.So cause an error.\n. ",
    "xoen": "Hi All, newbie gopher here, so bear with me.\nIt would also be nice to have easy access to the request/response body from within a filter.\nI wrote a couple of filters to log all the request and responses information to files and I found it more complicated than I expected (maybe also because I'm using Go for few weeks now).\nI've access to a lot of nice properties/methods like Request.Method, Request.RequestURI, Request.Referer and Response.Status but when it comes to get the request body (e.g. some JSON posted by the client) or the request response (the string about to be sent to the client) it gets \"interesting\".\nFor the request I have Request.Body which is an io.ReadCloser. Once I read from it, it get empty (so if I read it in a before filter when the controller action run, its content is empty). This means I had to read it, build a new io.ReadCloser with the content just read and set it to the Body. It would be useful in this case to have a method which return the request body string.\nFor the response body I managed to interpolate the revel.Response in a string (using \"%s\") but I didn't find any way to access the response body as string before it get sent to the client. So at the moment I just log something like {%!s(*simplejson.Json=&{map[meta:map[page:0 totalPages:2 ... - As you can see it's far from ideal.\nI see filters as a powerful and flexible way of extend Revel to do things that you didn't think about.\nMaybe it's just me and the fact that I'm new to Go, but access the request/response body as strings doesn't seem easy to me.\n. Hello @anonx, the high-level idea is to log the information about requests and responses to files for further investigation when something goes wrong.\nIn practice I had some troubles getting the response body before it get sent to the client.\nIn the controllers we call something like c.RenderJson(resp.Json) (the argument is a *simplejson.Json).\nThen in the interceptor, which run after the action, I'm trying to get this JSON so I can log it (even as string would be perfectly fine).\nCurrently a revel.Filter is an interface with an Apply method. Is there any way to get the response body from a filter/interceptor?\nPS: I know this is a ticket about improving the filter API. The reason why I commented here is because I think this is a use case someone else could have (get more information about the request/response without altering them).\n. Oh, noooo, I closed the issue by mistake! Sorry for this.\n. Ehehe, thanks (That button next to the \"Comment\" one keeps tricking me!)\n. Thanks for your help:\nSo:\n1. Nope\n2. I'm not quite sure because we're using Dokku and this buildpack. When I run the application locally I start it using $ revel run github.com/mycompany/myapp - It seems the buildpack is doing the same.\n3. A part from few routes there is also a module:testrunner directive.\n. I managed to fix the problem just now. What I did was remove module.testrunner = github.com/revel/modules/testrunner from the [staging] and [prod] parts of the app.config (because we would run the tests only in [dev] environment anyway).\nI'll deploy the other application to be sure everything is fine. I'll let you know ASAP.\nThanks very much for your help.\n. I successfully deployed the other app as well. It seems fine. So it looks like the problem is when you put this line:\nmodule.testrunner = github.com/revel/modules/testrunner\nin a non-dev part of the app.conf. Anyway, things seems to work on our staging server, hopefully I'll not have more problems when we'll promote the application to production :P\nDo you rekon we should close this or do you think we should keep this open to update revel to be more robust in this scenario?\n. It's actually interesting because, from what I've seen we check if the module.testrunner configuration is there, but we default to github.com/revel/modules/testrunner. So I'm not sure why the presence of that config would cause this behaviour.\n. FYI, I found a workaround: to explicitly set $GOROOT, $GOPATH and $PATH as dokku application config. But this wasn't necessary before. Very strange.\n. No problem ;)\n. ",
    "sxmad": "my step:\n1.revel new myapp\n2.revel run myapp\n3.open chrome,input localhost:9000,then the debug console show me the errors.\nI do nothing.\nwhen I comment \"c.Response.Out.Header().Add(\"X-Content-Type-Options\", \"nosniff\")\" in init.go.get the error too.\n. oh,when I access localhost:9000 in first time. I got a warring:\nWARN  2014/05/04 13:08:21 build.go:132: Cannot determine git repository version: exit status 128\n. Uncaught ReferenceError: $ is not defined (index):99\n(anonymous function) (index):99\nant the index:99 content is:\n    $('#toggleSidebar').click(function() {\n. ",
    "mcspring": "@brendensoares Yes! I'll do some refactor to make revel internal template work.\n. @brendensoares Should I do a new PR compacts with 0.12?\n. @brendensoares I need to modify revel for prod usage. This is a wrong PR. Please ignore it. Sorry for puzzled.\n. ",
    "tomsteele": "@iamjem for the leaking. I was referring to any sort of CORS functionality that may be in use in conjunction with this feature. If we have a route that supports CORS, we wouldn't want to return the token in a form/header for that request. Because then, in theory, an attacker would be able to grab a valid token from the response cross-site and possibly submit requests for non CORS routes. \nAdditionally, we should make sure that any sort of method override functionality transforms the the logical method prior to passing to this. Here is a good post where this has occurred in another framework http://blog.nodesecurity.io/post/60555138201/bypass-connect-csrf-protection-by-abusing.\n. For CORS it should be ok to check for the existence of the \"Origin\" header and if present, not populate the token.\n. ",
    "atomical": "What's the advantage of options as a map instead of a struct?\n. I started out deploying code with puppet but I knew that probably wouldn't last forever.  Next, I built a small ruby script that builds, copies over the files, and runs commands to deploy and restart the process.  What you describe sounds really interesting from an application deployment perspective, but I can't think how it would be a good fit for me because I run revel as a rack server with nginx.  With multiple rack servers I will be able to copy the new version and have a zero downtime deploy.  Is it possible to achieve zero downtime with your solution?\nOthers may be deploying revel without something in front of it, but I find the configuration and performance options (think achieving 100% with Google Pagespeed) necessary.\n. @brendensoares If I create a test section in app.conf where do I set the environment when I run tests?\n. Yes it did.  Thanks guys.\n. ",
    "thereallisa": "@pushrax, thanks! I made these changes. I'm closing this PR and opening a new one against the develop branch.\n. @brendensoares thank you!\n. ",
    "mark-adams": "Also, is there any reason that \"revel test\" can't just launch the app with a random unused port?\n. ",
    "oinume": "I removed sleep 30 of each revel test and got no failure, can't we remove that?\nhttps://github.com/revel/revel/pull/1025\n. @pedromorgan \n\nHey maybe u can add go 1.4 and 1.5 to the same patch..\n\nOK. How's this? https://github.com/oinume/revel/commit/2997152462a787fd69405dce33528edee14e0319\n. @brendensoares @pedromorgan \nCould you merge this pull-req? I believe that this pull-req will let travis-ci start up faster.\n. Somehow travis-ci produced a failure.\nCache TTL looks too short so I make it longer.\n. ",
    "richtr": "I couldn't find the page on the wiki (?) but could we add BaseApp to this list? It has lots of features I think beginners would find useful.\nThanks!\n. ",
    "goofcc": "http://gorevel.cn/products\n. God, who can solve this problem, and the authorization module!\n. @anonx The same code, the mac osx 10.10 can normally be thrown 500 Internal Server Error.\n. mac osx 10.10,In production mode, calling panic method is working properly, without throwing debug information:\nOops, an error occured\nThis exception has been logged.\n. @anonx ,on mac osx\uff1a\n\n\n\n\n. @anonx ,on win7 x64\n\n\n\n\n. @anonx ,In production mode, debug information should not throw.\n. revel run myapp prod:\nThere is no problem on mac, but in the win7x64 why it throws debugging information\n. ",
    "dbriemann": "I didn't find a way to make a pull request for the wiki page.. seems that is not possible on github? \nHowever you may add my latest Revel project if you like:\n- https://namesmith.io - Business Name Generator and Domain Name Search\nIt's all done with Revel. Great framework!\n. Ah ok. I assume the revel command does not automatically update the revel framework? Because I had an older version of revel in my Gopath.. ",
    "goors": "This is my github clone written in Go and Revel: https://murphy.rs.\n I will make it open source soon. Just to find some free time.\n. I solved this other way since my guess is that I can not access GorpController like that.\nSo I did this instead:\n\nrevel.TemplateFuncs[\"get_subcategories\"] = func(a int) []*models.RouteCategory {\n        rows, err := Dbm.Db.Query(`select * from RouteCategory where ParentCategory = ?`, a)\n        if err != nil {\n            panic(err)\n        }\n        var (\n            Id int\n            CategoryName string\n            IsActive int\n            ParentCategory sql.NullString\n            CategoryDescription string\n        )\n        defer rows.Close()\n        var subcategories []*models.RouteCategory\n        for rows.Next() {\n            err := rows.Scan(&Id, &CategoryName, &IsActive, &ParentCategory, &CategoryDescription)\n            if err != nil {\n                log.Fatal(err)\n            }\n            subcategories = append(subcategories, &models.RouteCategory{Id, ParentCategory, CategoryName, CategoryDescription, IsActive,})\n            log.Println(Id, ParentCategory, CategoryName, CategoryDescription, IsActive)\n        }\n        err = rows.Err()\n        if err != nil {\n            log.Fatal(err)\n        }\n        return subcategories\n    }\n\n. Never mind. I used {{append . \"moreScripts\" \"js/admin/index/index.js\"}} and so on. And so on.\n. Yes this is working. Thank you.\n. I got it:\n\nc.RenderArgs[\"routes\"] = routes\nc.RenderArgs[\"categories\"] = categories\nreturn a.RenderTemplate(\"Admin/Index.html\") \n\n. I got this. There is no need for  b, _ := json.Marshal(&users) part.\nSorry.\n. There you go: http://murphy.rs/nikola/revel-oauth2-restful\n. Do not convert your data to json. c.RenderJson(data) will do this for you. If you are converting your data in json and use c.RenderJson(data) you will get some base64 encoded string.\n@tommoholmes, this is not and issue. You should post questions like this on http://stackoverflow.com. @zhuharev answer to this.  When you do c.RenderJson(data) you are actually rendering/serving json to your html (json) output. For example:\n\nmp := map[string]interface{}{\n    \"key1\": value1,\n    \"key2\":value2, \n}\nc.RenderJson(mp)\n\nOf course you can render Gorp database results ans so on.\nFro example:\n\np, err := h.Txn.Get(models.SomeModel{}, id)\nif err != nil || p == nil {\n    return nil\n}\nc.RenderJson(p.(*models.SomeModel)) //c is you controller func (c CtrlName) someMethod() revel.Result{}\n\nAbove code will render results for sql \"SELECT * FROM SomeModel WHERE Id=id\" and you will see that results on you browser output.\nBut as I said you should first read docs (http://goo.rs/m9sgt).\n. I responded to your question: http://stackoverflow.com/a/32155463/1108279\n. So you are telling me every time I update app in prod I have to restart revel run app prod process?\n. Thanks for that. I will try to do that.\n. This build is working, but I do not see difference between that and revel run app prod. Both things are running on same port that i have to proxypass for domain name. It there something like wsgi for go as you have for python and apache?\n. Maybe I can do rewrite instead of proxypass  ?\nRewriteRule ^(.*)$ http://localhost:appport/$1 [P,L]\nWhat is better?\n. What about intellectual property or author rights? As far as I can see that is a big deal!\n. @jeevatkm How do you use this Minify in Revel? I have no idea where to put this and how to call it. Maybe in app/init.go (not working: getting some error runtime error: slice bounds out of range goroutine\n )? \nrevel.Filters = []revel.Filter{\nMinify,\n}. @jeevatkm I have add package filter and then add revel.Filters but i am getting empty view. \nNo idea why. I can see that init is never fired in filter package (i have put some log in it).. @jeevatkm no, i do not see any panic. . When I log c.Response.Out in func Minify(c *revel.Controller, fc []revel.Filter) {} i can see this output:\n&{0xc4202ce3c0 0xc42000bc00 {} 0x10ed820 false false false false 0xc420308180 {0xc4202462a0 map[] false false} map[Develop:[true] X-Frame-Options:[SAMEORIGIN] X-Xss-Protection:[1; mode=block] X-Content-Type-Options:[nosniff]] true 0 -1 0 false false [] 0 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0 0 0] 0xc420019110 0}\nBut view is empty. In controllers i use return c.Render() or something else?. When i disable m.AddFunc(\"text/html\", html.Minify) it renders page. But not with minified html.. @jeevatkm  xm, i am getting error now:\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x141fc9f]\ngoroutine 95 [running]:\ngithub.com/tdewolff/minify.(*M).MinifyMimetype(0x0, 0xc4202d5350, 0x9, 0x10, 0x186f540, 0xc420322000, 0x186ec40, 0xc420344558, 0x0, 0xc420330f40, ...)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:138 +0x4f\ngithub.com/tdewolff/minify.(*M).Minify(0x0, 0x15f42ba, 0x9, 0x186f540, 0xc420322000, 0x186ec40, 0xc420344558, 0x6, 0x15edd42)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:130 +0xce\ngithub.com/tdewolff/minify.(*M).Writer.func1(0xc4203c4db0, 0x0, 0x15f42ba, 0x9, 0x186f540, 0xc420322000, 0xc420344558)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:214 +0xa9\ncreated by github.com/tdewolff/minify.(*M).Writer\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:219 +0x1b4\n2017/05/04 00:10:51 reverseproxy.go:316: http: proxy error: EOF. This part of minify.go in this repo https://github.com/tdewolff/minify give me some error:\nm.literal[string(mimetype)]. Funny thing is that I can not figure out what that does.. @jeevatkm i am really sorry for badgering you but, no, deleted and again same error. this guy @ tdewolff told me \"Did you properly initiate M using https://github.com/tdewolff/minify/blob/master/minify.go#L68? Looks like literal has not been set.\". @jeevatkm  funny thing is that i do not see yet output of log in init func minify filter that you wrote.. @jeevatkm  i just removed everything to check out if init is not executed because of some error. xm, init never executes in filter. strange?. @jeevatkm finally i get to bottom of this and minifier works (i need only html), here is gist for your filter.\nI have put m := minify.New() in filter it self and remove init function. I have opend issue on revel for this init not executing in filter here: https://github.com/revel/revel/issues/1169\nFrom 2.6kb to 1.8kb. Nice :). @jeevatkm xm, i do not get it then , why it is not firing in filter .... doing another debug.. @notzippy yes, sorry for that one. stupid. i did not see it.\n@jeevatkm but when in init it is not working. same old error.\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x141fc9f]\ngoroutine 95 [running]:\ngithub.com/tdewolff/minify.(*M).MinifyMimetype(0x0, 0xc4202d5350, 0x9, 0x10, 0x186f540, 0xc420322000, 0x186ec40, 0xc420344558, 0x0, 0xc420330f40, ...)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:138 +0x4f\ngithub.com/tdewolff/minify.(*M).Minify(0x0, 0x15f42ba, 0x9, 0x186f540, 0xc420322000, 0x186ec40, 0xc420344558, 0x6, 0x15edd42)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:130 +0xce\ngithub.com/tdewolff/minify.(*M).Writer.func1(0xc4203c4db0, 0x0, 0x15f42ba, 0x9, 0x186f540, 0xc420322000, 0xc420344558)\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:214 +0xa9\ncreated by github.com/tdewolff/minify.(*M).Writer\n    /Users/johnny/projects/go/src/github.com/tdewolff/minify/minify.go:219 +0x1b4\n2017/05/04 00:10:51 reverseproxy.go:316: http: proxy error: EOF. @jeevatkm fcking ... stupid instead of m:= just m= sorry. now it works when in init.\n. When I do    for example [sr-RS] I got in log correct value from translation but view is the same. It keeps default value for en. \n. Translations only work if I put into my on app before:\nSo I am not sure that this is normal behaviour. \n. I have same problem:\nFailed to build app: Go Compilation Error (in ../immoreal/app/controllers/app.go:46): c.RenderArgs undefined (type App has no field or method RenderArgs)\ngo 1.8 and latest revel on Linux server(on OSX it works ok).. Hi, i do not know why would someone go on and change RenderArgs -> ViewArgs. Just stupid. Now i have like 10 projects, that need update. Just stupid. Can you please, keep old RenderArgs as well and do another release with that as well?. So questions stays the same, all of that stuff are really complicated and default locale is not working so you have to set cookie:\n```\nfunc (c App) Init() revel.Result {\ncookie, _ := c.Request.Cookie(\"lang\")\n\nif cookie != nil{\n    c.Request.Locale = cookie.Value\n}\n\nif len(c.Params.Query.Get(\"lang\")) > 0{\n\n    c.Request.Locale = c.Params.Query.Get(\"lang\")\n\n    expiration := time.Now().Add(365 * 24 * time.Hour)\n    cookie:=&http.Cookie{Name:\"lang\",Value:c.Request.Locale,Expires:expiration,}\n\n    cookie.Name = \"lang\"\n    cookie.Value = c.Request.Locale\n    c.SetCookie(cookie)\n    c.RenderArgs[\"currentLocale\"] = c.Request.Locale\n\n    return c.Redirect(c.Request.Referer())\n}\n\n\n\nreturn nil\n\n}\n``. I mean look at thisc.Rquest.Request` -> this does not exists as well? How do you access Http request?\nI mean mean, you took something good and break it!. Forget it, type populateCache struct {} and func (c populateCache) Run(){} must be outside of init. sorry.. Sure you can. You just need to add this to touter:\nGET     /app/views/App/*filepath                         Static.Serve(\"/app/views/App/\")\nAnd then in browser: http://localhost:9000/app/views/App/Message2.html\n. ",
    "codegangsta": "For the price, vimeo pro is a fantastic service!\nSent from my iPhone\n\nOn May 21, 2014, at 7:03 PM, Justin Li notifications@github.com wrote:\nThis would be really cool. Could maybe clear up some confusing bits and more clearly definite the structure and approach to developing a Revel app.\nI think YouTube would be fine.\n\u2014\nReply to this email directly or view it on GitHub.\n. Really high quality, fast encoding, awesome support for branding the player and pretty flexible embedding options. It's a steal for $9 a month \n\nSent from my iPhone\n\nOn May 22, 2014, at 7:09 PM, Brenden Soares notifications@github.com wrote:\n@codegangsta I assume that was your choice? How do you feel it compares to Youtube? Any highlights? Thanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "azr": "New in the place adding my 50c\nI believe the power of a framework resides in the flexibility/power of it's configuration.\nFor routing I would have done something like that :\n``` yaml\nconf/routing.yml\nrouting:\n  - app:\n        hosts:\n          - revel.dev:\n                port: 80 # == Default\n          - revel.github.io\n        routes:\n          - article: # <- routename\n                path: \"/articles/{category}/{id:[0-9]+}\"\n                GET.handler: Articles.Get # routename is get_article (method_name)\n                PUT:\n                    handler: Articles.Edit\n                    name: edit_article # would have been put_article\n                    schemes:\n                        - https # Default is [ http ]\n          - products:\n                path: \"/products\"\n                GET.handler: Products.Cget # routename defaults to get_products\n                routes: # subroutes of /products\n                  - product:\n                        path: \"/{key}/\"\n                        GET.handler: Products.Get\n                        POST.handler: Products.Edit\n                  - product_detail:\n                        path: \"/{key}/details\"\n                        GET.handler: ProductDetails.Get\n          - public:\n                host_prefix: static\n                path: \"/files\"\n                static_serve:\n                    directory: \"public/*filepath\"\n                    # serving everything from public on http://static.revel.github.io/files/\n                    # No cookiez !\n          - blog:\n                host_prefix: \"{blogname:[a-z]+}\" # myblog.revel.github.io , darn, no cookie ???\n                Get.handler: Blogs.Get\n          - tests:\n                path: /debug\n                import: testrunner\n  - backend:\n        hosts:\n            - admin.revel.github.io\n        routes:\n            import: admin\n```\nI'm pretty sure those dashes are not so useful in yaml + no yaml library supports having arrays of 'similar looking subsections'.\nBut I can already imagine logging with something like that ! You'd get super cool nice outputs :  datetime [revel:router][app.edit_article]  at=info method=POST path=/articles/revel_routing/0 host=revel.github.io port=80 scheme=https connect=2ms service=283ms status=201 bytes=  etc.\nI think that sort of routing would totally go with gorilla/mux if I may say.\n. I heard Trie routing was a good practice for perfs\n. Aaaaand what about toml ???\nhttps://github.com/BurntSushi/toml\n. I have done this gist of a router using toml\nCould be a good option too.\n. @brendensoares Totally agree, toml looks weird, and it doesn't even support import :(\n. Hey @pushrax thanks for your answer, I dispatch the 'real' issues !\nStill a newb here, I'll try to fully grasp revel too.\nPS:\nRegarding <environment>.yml file, that practice is not 12 factor compliant. ( last 2 paragraphs : http://12factor.net/config )\nEdit: I also need to know how to use env vars for config.\n. Okay !\n. ",
    "naoina": "FYI, I've added Revel to https://github.com/naoina/go-http-routing-benchmark.\n. ",
    "fuzzthink": ":-1: to YAML for me too.\nOne of the key thing drawing me to Revel is the simplicity of routes.  However, I do agree that better error messages and parsing (for syntax coloring in editors) is a must, but just not via YAML.  YAML style is just way too verbose and ugly. I would feel betrayed if YAML is forced upon if I have invested months in Revel (haven't yet, but about to).\n:+1: to @pushrax 's suggestion or something similar.\n. :+1: \n. ",
    "atrauzzi": "Late to the game, but :+1: For the suggestion made by @pushrax.  Works great in PHP's Laravel framework.  A delight to work in.\n. ",
    "imadha": "Thanks!  So I did some searching around the Google Groups to make sure I wasn't reinventing anything, and the most I could come up with some people using Bower/Grunt to manage their assets pipeline.  It seemed like the Revel team was against supporting these tools as an official solution to asset management and pre-processing, which I'd say I'm in agreement with.\nThere are two main approaches I see here:\nApproach 1: Independent Go Package and Revel Module\nIn a Revel project, one could include a module that imports some AssetHandler package that runs on init, intercepts any requests from \"/assets\" (or whatever is assigned in config) from revel.Server.Handler and passes it to the AssetHandler which will read from /assets (or whatever is assigned in config) in your project folder.\nThere would also be some sort of way to precompile+bundle assets for production so that the request isn't firing up the SASS/Coffee interpreter every time.\nIn addition, there would be helper tags built into revel.TemplateFuncs so that you could include your JS/CSS files with something like:\n{{stylesheet \"foo\"}}\nand the AssetHandler would be smart enough to know whether to use to compile from SASS/SCSS or use CSS file on disk based on the environmental settings.\nThis is pretty much what I have so far using the Train package I referenced, but not everything works as it should.  The project would include some heavy cleanup (probably not using the Train package, for starters), such as getting rid of Node and Ruby dependencies, subbing in some sort sort of Go wrapper for Libsass and maybe Otto to natively interpret the CoffeeScript into JS.\nBasically, this just means making my ideal plug-and-play AssetHandler come true and writing a module so that Revel users can just drop it into their app.\nApproach 2: AssetHandler controller\nThis approach is mostly similar except that it would use a controller so that one could setup a route like so:\nGET     /assets/*filepath                    AssetHandler.Serve(\"assets\")\nThe behavior would be the same, the AssetHandler would determine if the asset referenced has been compiled, send to the proper interpreter if not, and create a compiled version.  Separately, a watch process could run so that changes would be automatically precompiled on save (much like the \"Hot Code Reload\" feature).  Additionally, any asset compilation errors could be sent to the Revel error handler and displayed in a familiar helpful way.\nThis approach would include the same methods for manually pre-bundling assets and using template tag helpers but favors a more \"baked in\" approach.\nDo these approaches as I've explained them make sense?  Is there a preferred method? Anything I haven't mentioned, accounted for, or need to clarify?\n. It also occurs to me that these approaches aren't mutually exclusive, since I could theoretically do Approach 1 as a step to Approach 2.  \nAnywho, what do y'all think?\n. ",
    "tcfunk": "I wonder if this is something that could behave differently in dev mode as well, such that assets are recompiled on the fly in dev mode, but in production expects them to have already been compiled?\nThen functionality could be added to revel/cmd to manually run the asset compilation step before shipping the app. \nAlso I am curious how far along this is, as I would love to help.\n. Sorry this has been a full weekend for me, I could discuss this week sometime or next weekend possibly\n. ",
    "huacnlee": "You can use train like this.\ninit.go\n``` go\nfunc init() {\n  revel.Filters = []revel.Filter{\n        AssetsFilter,\n        revel.PanicFilter,             // Recover from panics and display an error page instead.\n        revel.RouterFilter,            // Use the routing table to select the right Action\n        revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n        revel.ParamsFilter,            // Parse parameters into Controller.Params.\n        revel.SessionFilter,           // Restore and write the session cookie.\n        revel.FlashFilter,             // Restore and write the flash cookie.\n        revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n        revel.I18nFilter,              // Resolve the requested language\n        revel.InterceptorFilter, // Run interceptors around the action.\n        revel.CompressFilter,    // Compress the result.\n        revel.ActionInvoker,     // Invoke the action.\n  }\ntrain.ConfigureHttpHandler(nil)\n  http.ListenAndServe(\":3000\", nil)\n  revel.TemplateFuncs[\"javascript_tag\"] = train.JavascriptTag\n  revel.TemplateFuncs[\"stylesheet_tag\"] = train.StylesheetTag\n}\n// Server /assets with [train]\nvar AssetsFilter = func(c *revel.Controller, fc []revel.Filter) {\n    path := c.Request.URL.Path\n    if strings.HasPrefix(path, \"/assets\") {\n        train.ServeRequest(c.Response.Out, c.Request.Request)\n    } else {\n        fc0\n    }\n}\n```\n. Do you want me to create a PR to develop branch?\n. #901\n. Sass looks like to be simply change to use Go lib, because there have libsass, But CoffeeScript is hard to do that.\nAnd train can compile asset files to public/assets, so we don't need install Node.js in production env.\n. What means RFC?\n. https://github.com/huacnlee/mediom\nThere have a example app use this feature, you can try it.\n. Just want output a log without any indent.INFO will indent two space by default.\n. @brendensoares You means don't want add SYSINFO?\n. Ok, I just removed SYSINFO, and now Revel default output looks like:\n\n. @brendensoares Yes, INFO have no prefixes.\n. @brendensoares \nThe important thing is add logs around the requests in server.go.\nRemove INFO prefix it for output tidy format.\n. :smile: \n. RequireUser just an use case.\nUse Filter to do this it too complex, and I do even want to let all action don't need return revel.Result like this:\ngo\nfunc (c Posts) Index() {\n    c.requireUser()\n    if !IsMember() {\n       // When call Redirect, redirect and stop here.\n       c.Redirect(\"/\")\n    }\n    topics := DB.FindTopics()\n    c.RenderArgs[\"topics\"] = topics\n    // Call render, and apply response\n    c.Render()\n}\nFunction list\n\nRender\nRedirect\nRenderError\nRenderTemplate\nRenderJson\nRenderJsonP\nRenderXml\nRenderText\nRenderHtml\nNotFound\nForbidden\nRenderFile\nRenderBinary\n. When I call Redirect, that means sure are I want to redirect page to another page, why do I need to do return?\n\nI know that use return will be let code readability, But why does it must be return a revel.Result type?\nrequireUser just a little use case\n``` go\n// Before\nfunc (c Posts) isOwner(t Post) revel.Result {\n    if t.UserId != c.currentUser.id {\n        return c.Forbidden(\"This is not yours.\")\n    }\n    return nil\n}\nfunc (c Posts) Edit() revel.Result {\n    p, err := DB.FindPost(c.Params.Get(\"id\"))\n    if r := c.isOwner(p); r != nil {\n        return r\n    }\n// Do render\nreturn c.Render(\"posts/edit.html\")\n\n}\n// After \nfunc (c Posts) isOwner(t Post) {\n    if t.UserId != c.currentUser.id {\n        c.Forbidden(\"This is not yours.\")\n        return\n    }\n    nil\n}\nfunc (c Posts) Edit() {\n    p, err := DB.FindPost(c.Params.Get(\"id\"))\n    c.isOwner(p)\n// Do render\nc.Render(\"posts/edit.html\")\n\n}\n```\nLet us write less code\n. ",
    "shawncatz": "This was resolved as part of #1138 . resolved by #1126. wouldn't we want the default to be true in production? Isn't that the intent of the change?\nDisabling this in prod works around the problem, but exposes those apps to potential issues (as mentioned in the referenced issues / prs). Makes sense\n-- \nShawn Catanzarite\n408-605-7744\nhttp://shawncatz.com/\nhttp://linkedin.com/in/shawncatanzarite\nOn February 28, 2017 at 12:16:00 AM, Jia Lu (notifications@github.com)\nwrote:\n\"A secure cookie has the secure attribute enabled and is only used via\nHTTPS\".\nI did not setup https in revel, but run revel behind nginx (SSL) in\nproduction mode. cookie.secure = !DevMode will introduce a issue.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1097#issuecomment-282972193, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABlbhty3nmoJ_s647BTEySLzIHWcqtVsks5rg9e_gaJpZM4J57YL\n.\n. didn't hear back from original contributor, closing in favor of #1141. as per comments above, the solution is to add an OnAppStart function to have access to RunMode and DevMode. @brendensoares @pedromorgan @jeevatkm I'm willing to help... I'd rather see more people added than fork and diverge. a fair question. \nthere hasn't been a code commit/merge to master in 9 months. \n@brendensoares doesn't seem to be super active on github. \n@jeevatkm appears to have started working on a different web framework go-aah/aah. \nand neither of them have responded to this issue. @brendensoares @jeevatkm @pedromorgan I appreciate the responses... my hope was that we could get more involved, so that others didn't feel the need to fork\nAs I said before, I'm willing to contribute. I'm relatively new to golang (about a year), but have 25+ years of programming experience.. I\u2019ll be there\n-- \nShawn Catanzarite\n408-605-7744\nhttp://shawncatz.com/\nhttp://linkedin.com/in/shawncatanzarite\nOn March 1, 2017 at 5:22:47 PM, notzippy (notifications@github.com) wrote:\n@shawncatz https://github.com/shawncatz @jeevatkm\nhttps://github.com/jeevatkm @pedromorgan https://github.com/pedromorgan\nand others, we have scheduled a meeting for tomorrow at 8pm PST, the room\nis https://appear.in/revelframework . Please join us.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1119#issuecomment-283526270, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABlbhkTuTtTgdEedlt3VklmWLF0CQutCks5rhhnZgaJpZM4L9Llg\n.\n. yeah agreed, think it's easier. @notzippy this will be fixed as part of your template engine work correct? That's currently slated for v0.15, so I'm going to move this to v0.15 as well. I think there's a larger project to go through and normalize all of the docs, but for v0.14 we can just push this out. close/reopen to force new build. I think the filename style (pg.html, etc) is a better choice and matches the way that rails handles preprocessors / templates. \nI would suggest if we're going to do this, that we rearrange them a bit. If a page is html, and uses pongo2, then the filename would be: index.html.pongo2 (I think the extensions should match the module name)\nThoughts?. is the order numbering necessary? Does the config file get interpreted non-deterministically (does the order in the config not correspond to the order in which it's interpreted into a config object)?. cool, thanks for the additional context. close / reopen to force new build. @notzippy can you take another look at this, I removed the unintentional additional dep. thought I already had, but must have missed something... should be up to date now... . yep. added the redis-cli info command. This removed 1.4 from the testing matrix, and that wasn't really discussed with anyone (I removed it just to create a change to force a build, I had intended on putting it back)... @brendensoares we should discuss which versions of go we want to support going forward. I need to validate that this actually fixes the original problem (DevMode not set before init() functions) before merging this. yeah, I'm seeing that now... I don't think we can guarantee anything on the app/init.go init() function, because of the way that go initializes things...\nAdded this to init() function in app/init.go\nrevel.OnAppStart(ExampleStartupScript)\n    fmt.Printf(\"DevMode == %t, RunMode == %s\\n\", revel.DevMode, revel.RunMode)\nand add the function to app/init.go:\nfunc ExampleStartupScript() {\n    // revel.DevMod and revel.RunMode work here\n    // Use this script to check for dev mode and set dev/prod startup scripts here!\n    revel.INFO.Printf(\"OnAppStart: DevMode == %t, RunMode == %s\\n\", revel.DevMode, revel.RunMode)\n}\nOutput: (look for # <<<)\nINFO  2017/03/19 16:58:18 build.go:190: Cleaning dir tmp\nINFO  2017/03/19 16:58:18 build.go:190: Cleaning dir routes\nINFO  2017/03/19 16:58:18 build.go:190: Cleaning dir tmp\nINFO  2017/03/19 16:58:18 build.go:190: Cleaning dir routes\nDevMode == false, RunMode == # <<<\nINFO  2017/03/19 16:58:19 revel.go:365: Loaded module testrunner\nINFO  2017/03/19 16:58:19 revel.go:365: Loaded module static\nINFO  2017/03/19 16:58:19 revel.go:230: Initialized Revel v0.14.0-dev (TBD) for >= go1.4\nINFO  2017/03/19 16:58:19 main.go:30: Running revel server\nGo to /@tests to run the tests.\nINFO  2017/03/19 16:58:19 init.go:58: OnAppStart: DevMode == true, RunMode == dev  # <<<. I'm actually going to reopen this, because I think it's better to have DevMode be derived from RunMode. so this change is just changing the way in DevMode is set... it is now derived from RunMode == \"dev\", instead of a hidden default value in the config.. nevermind, mode.dev is used to override run mode in application config... so this will need a bit more consideration.\nI think we should change it to just specify the mode directly (mode = dev, mode = prod), but we don't need to do that as part of v0.14. all of these changes were reviewed before, so I don't think we need to review in detail. @goors quick sed command:\nThis should work on MacOS or Linux, should be run from the root of your revel application:\nfor f in $(find . -type f -name \"*.go\" | grep -v \\/vendor\\/); do sed -i.bak 's/RenderArgs/ViewArgs/g' $f; done\nThis will leave .bak versions of every go file it finds, to remove them use the command below.\nGuessing you have your code tracked in git, so just be sure it's backed up.\nfind . -type f -name \"*.bak\" | xargs rm. yeah, probably my IDE trying to be smart, I'll remove. fixed. ",
    "tyro89": "weird that test is passing locally :/\n. I'll update the code today to address the comments once I find a free moment :)\n. Oh interesting, the previous design took into consideration that something else panicked after a committed transaction? Completely missed thinking about that possibility :)\n. My Go noobism is showing, thanks :+1: \n. I totally agree with that :)\n. ",
    "hwsoderlund": "Just realised it was my own mistake. I had not included the \"s\" with the end parenthesis. \n. FYI, PR submitted: #1344. PR #1344 has been merged to master. I guess this should be closed now. . I'll take a look and see what I can come up with. . Updated PR with test. Use the \"Hide whitespace changes\" option for easier viewing. . Ok, great. Thanks. Any chance this could also be merged into the 0.19 release? . Ok, that works for me. . NOTE: This is strictly unrelated to the current PR. It was broken, not sure why it has gone unnoticed. . ",
    "filewalkwithme": "Hi fellows!!\nWith current version, the test code below returns syntax error:\nfunc (self App) MailTest() revel.Result {\n    mailer := &mail.Mailer{Server:\"smtp.gmail.com\", Port:587, UserName:\"USER\", Password:\"PASS\"}\n    mailer.Sender = &mail.Sender{From:\"FROM_NAME <FROM_EMAIL>\", ReplyTo:\"REPLYTO_NAME <REPLYTO_EMAIL>\"}\n    message := mail.NewTextMessage([]string{\"TO_EMAIL\"}, \"Test Subject\", \"Test Body\")\n    if err := mailer.SendMessage(message); err != nil {\n    // Error\n    return self.RenderText(fmt.Sprintf(\"mail failed: %s\", err))\n    }\n    return self.RenderText(\"mail sent\")\n}\nmail failed: 555 5.5.2 Syntax error. p1smxyzvdp.17 - gsmtp\nBut, if we remove the FROM_NAME... \nmailer.Sender = &mail.Sender{From:\"FROM_EMAIL\", ReplyTo:\"REPLYTO_NAME <REPLYTO_EMAIL>\"}\nThe email will be sent with no returning errors.\nI checked the RFC 5321, which specify the Simple Mail Transfer Protocol and found this\nhttp://tools.ietf.org/html/rfc5321#section-3.3\n```\nThe  portion of the first or\nonly argument contains the source mailbox (between \"<\" and \">\"\nbrackets), which can be used to report errors (see Section 4.2 for a\ndiscussion of error reporting). \n(....) Normally, failures produce 550 or 553 replies. (....) \nHistorically, the  was permitted to contain more than\njust a mailbox; however, contemporary systems SHOULD NOT use source\nrouting (see Appendix C).\n```\nThat occurs at 'MAIL command'.\nNote, that the message header \"From:\" accepts the format 'FROM_NAME ', as described by http://tools.ietf.org/html/rfc5322#section-3.4\nThis message header is set in writeRecipient().\nSo, my code proposes that we continue using &mail.Sender.From, but now we can set the Sender Name without messing with the 'MAIL command'.\nHope that it helps. =]\n. Yeah!\n. Agree\n. Hmmm, maybe I'm just a little bit paranoid, but I'm thinking about the cases where the email addresses come from a non sanitized database (eg.: the address is stored as '& lt;sender@abc.com& gt;')\nIf we let \"& lt;\" and \"& gt;\" the mail will return syntax error...\nOr we should just let the user handle this?\n. Allright! I'll gonna change this, thanks!\n. ",
    "jordan-wright": "+1 for using the email package (though, I may be a little biased :wink:)\n. Let me take a look at those PR's. I've been swamped the past few months with other projects but I'll address them soon.\nRegardless, the core API should be stable. At this point, I won't introduce any breaking changes - and each of these PR's just seem to be convenience functions to add to the API.\n. ",
    "xpbliss": "in routes:\n```\nCatch all\n\n/:controller/:action                    :controller.:action\n```\n\nAnd in routes.go :\nfunc (_ tApp) Form(\n        ) string {\n    args := make(map[string]string) \n    return revel.MainRouter.Reverse(\"App.Form\", args).Url\n}\n. The question is:  file.close()  is executed before \"RenderFile\".  but after RenderFile,  when to do \"file.Close()\"?\n. IN intercept:\n    if revel.ContainsString(ExceptAct, act) { //ExceptAct:=[]string{\"User.Login\",\"App.Login\"}\n        return nil\n    }\nunderstand?\n. revel.InterceptMethod(checkAuth, revel.BEFORE). \n checkAuth()  is executed before  all action .\n. Thanks!\n. But the binder function ?\n. Why not give a sample?\n. some contents don't display, strange?\n. func (c App) Up(file []*os.File) revel.Result {\n//How to get  the  Extension of the the upload file, the uploaded file is no  extension?\n}\n. How to get the original file extension in Bind?\n. Why  not do a try?\n. return c.RenderTemplate(\"XCustomer/register.html\")\n. type User struct {\nApp\n}\n. the chrome result is:\nRequest Headers \nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:zh-CN,zh;q=0.8\nConnection:keep-alive\nCookie:eqap_FLASH=; eqap_SESSION=4824e38bbdf7d3f288aaa77d5c789e2c1542e24e-%00_TS%3A1411178895%00\nHost:localhost\nUser-Agent:Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.107 Safari/537.36\nResponse Headers \nContent-Length:23\nContent-Type:application/x-gzip\nDate:Sat, 20 Sep 2014 01:58:24 GMT\nSet-Cookie:eqap_FLASH=; Path=/\nSet-Cookie:eqap_SESSION=eb6d7bb9aa4edb4e9f6edc280fa6038ac6611f21-%00_TS%3A1411178904%00; Path=/; Expires=Sat, 20 Sep 2014 02:08:24 UTC\nX-Content-Type-Options:nosniff\nX-Frame-Options:SAMEORIGIN\nX-Xss-Protection:1; mode=block\n. Agree with @anonx\n. Although I don't express my view, @anonx do help me!\nThanks!\n. Thanks!\n. I only want RenderArgs[\"user\"]=nil after the cookies is expired.\n. thanks!\n. Other Suggestion:\n the log file should be split by date.\nsuch as 20141001.log,20141002.log, and so on\n. The myapp and myapp1are under the same directory, and have the same contents .\n. when i move the \"run.bat ,run.sh , myapp.exe \" into the src directory.   then change the run.bat \"myap.exe -importPath myap -srcPath %CD%\\src -runMode prod\" to the \"myap.exe -importPath myap -srcPath . -runMode prod\".\nand then all is ok.\n. i set up a revel server on my computer, and i visit http://127.0.0.1/app/login\nand i do as @anonx  says above.\nit alway is \"REVEL CSRF: Same origin mismatch. \"\nin\n func CsrfFilter(c *revel.Controller, fc []revel.Filter) {\nreferer, refErr := url.Parse(c.Request.Header.Get(\"Referer\"))\n    fmt.Println(\"c.Request.URL is:\",c.Request.URL,referer)   // c.Request.URL sometime is nil\nisSameOrigin := sameOrigin(c.Request.URL, referer)  // this always is false , why?\n. Solved it?\n. by using the 'revel build'\n. in app.conf :\nlog.warn.output  =  %(app.name)s/log/%(app.name)s.log\nlog.error.output =  %(app.name)s/log/%(app.name)s.log\nthen the above error raise up!  and if set it off , all is ok.\n maybe it's a bug for revel log ?\n. in app.conf\napp.name=eqap\n. yes,it is in default section\n. ``` ini\napp.name=eqap\napp.secret=some_secret_here\nhttp.addr=\nhttp.port=80\nhttp.ssl=false\nhttp.sslcert=\nhttp.sslkey=\ncookie.httponly=false\ncookie.prefix=eqap\ncookie.expires=10m\nsession.expires=10m\nformat.date=2006-01-02\nformat.datetime=2006-01-02 15:04\nresults.chunked=false\nresults.compressed=true\nlog.trace.prefix = \"TRACE \"\nlog.info.prefix  = \"INFO  \"\nlog.warn.prefix  = \"WARN  \"\nlog.error.prefix = \"ERROR \"\ntemplate.delimiters = \"[[ ]]\"\nThe default language of this application.\ni18n.default_language=en\nmodule.jobs=github.com/revel/revel/modules/jobs\nmodule.static=github.com/revel/revel/modules/static\n[database]\ndb.driver=mysql\ndb.dbname=eqap\ndb.user=root\ndb.password=root\ndb.host=127.0.0.1:3306\ndb.encoding=utf8\n[initParam]\ndispNumPerPage=20 \n[dev]\nmode.dev=true\nresults.pretty=true\nwatch=true\nlog.trace.output = on\nlog.info.output  = stderr #%(app.name)s/log/%(app.name)s.log\nlog.warn.output  = stderr\nlog.error.output =stderr\n[prod]\nmode.dev=false\nresults.pretty=false\nwatch=false\nmodule.testrunner =\nlog.trace.output = off\nlog.info.output  = off\nlog.warn.output  =off #%(app.name)s/log/%(app.name)s.log\nlog.error.output =off #%(app.name)s/log/%(app.name)s.log\n```\n. in app.conf :\nlog.warn.output = %(app.name)s/log/%(app.name)s.log\nlog.error.output = %(app.name)s/log/%(app.name)s.log\nIt is ok under windows,  And  it panic the above under Linux.   @anonx is right.\n. thanks!\n. thanks!\n. It must be do as the following. it's ok.\ngo\n    funcMap := template.FuncMap{\n        \"addOne\": revel.TemplateFuncs[\"addOne\"],\n    }\n    t, er := template.New(\"\").Funcs(funcMap).Parse(str)\nwhy not direct to using the {{addOne $num}}? any other ways?\n. sorry!\n\"read the file\"---> get the content from the file \"my.xml\"\n\"let's a template file\" -----parse the content and save to another file.\nas my mention the first above,then  revel always says \"template: :165: function \"addOne\" not defined.\nif then do the second above ,then it's ok.  if you save the first as a example, you'll find.\n. f:\\go_example\\src\\myap\\app\\tmp\\main.go:699: undefined: revel.TestSuites\nERROR 2015/03/26 16:34:06 build.go:247: Failed to parse build errors:\n # myap/app/tmp\nHow to do?\n. After i execute \"go get github.com/revel/cmd/revel\" again, it's ok.\n. good work!\n. Dear Revelers :\nIt has not been updated  for a long time.\nSome thing  should be  done!\n. Yes. Just for an inner using.\n. In the go web framework ,the revel's stars are near 6,000.  It is more any other go web framework.\nBut it is too slow to update.\n. why not update to revel 0.13?  @brendensoares\n. Good!\nBut the magic function in the revel, such as field , radio ,checkbox are modified  in module runner-Mei pongo2?\nAnd the pongo2 also has a minor modifications?\n. Thanks!\n. requestUrl := c.Request.URL.Path\nc.RenderArgs[\"yourUrl\"] =requestUrl\nmaybe c.Action?\n. In the app.conf ,\nSet results.compressed=true?\n. ",
    "ckrissun": "The exists method has the same problem. It should return an error too, not ignoring the error. So I fix it also.\n. ",
    "wb14123": "Could you test in your environment? My environment is:\nrevel: current master branch\ngo: go version go1.2.1 darwin/amd64\nOS: MacOS 10.9\n. Hi,\nIt seems that is a precision problem while a small number divided by 10000.0.\nI will close this.\n. Sorry. It is not true. It seems depend on the controller. I'll debug it and find which part is wrong.\n. Ah, I know. time.Now().Nanosecond() only returns the offset within a second.\nStupid problem. I'll open it.\n. ",
    "filipebarros": "I started now a new project with the command revel new my app, created a .godir file with only the name of the project (myapp) and deployed it to heroku and it still does not work. This is what appears in the heroku app:\n\nWhen deploying locally, it works correctly.\nThis is the log of the heroku deployment (no error)\n```\n-----> Fetching custom git buildpack... done\n-----> Revel app detected\n-----> Installing Go 1.2.1... done\n       Installing Virtualenv... done\n       Installing Mercurial... done\n       Installing Bazaar... done\n-----> Running: go get -tags heroku ./...\n-----> Discovering process types\n       Procfile declares types -> (none)\n       Default types for Revel -> web\n-----> Compressing... done, 62.8MB\n-----> Launching... done, v5\n```\nAny ideas?\n. To my surprise, this appears to be working now. After deploying the app 2 days ago, it wasn't working, but I accessed it again today and it worked. I also created a new app and deployed and it was working.\n. Ok, no problem\n. ",
    "se77en": "want this feature too:)\n. ",
    "radutopala": "I guess this is due to dep binaries not being forward compatible. Correct?\n. Once I moved back to go v1.2.1, everything went fine.\n. It happened with any Revel related commands.\n. ",
    "Heinoc": "well.I couldn't find the addr to download that package now...i found the addr was redirected to the gocode....shell u support me a way to get this package?thx!!!\n. eh.....I just try it by my phone.That could load the page...maybe the problem is caused by the network....always thank you!\n. ",
    "arvindkumarc": "Ok, my bad, the sections are always honored!\n. ",
    "cnaize": "My use-case like this:\n``` go\nfunc (c Pages) IndexPages() revel.Result {\n    if c.Params.Query.Get(\"page\") == \"\" {\n        c.Params.Query.Set(\"page\", \"1\")\n    }\npage, err := strconv.ParseFloat(c.Params.Query.Get(\"page\"), 64)\nif page < 1 || err != nil {\n    return c.NotFound(\"Page %v does not exist\", c.Params.Query.Get(\"page\"))\n}\n    ...\n\n}\n```\nFor example, if I receive something like:\nhttp://localhost:9000/pages?page=asdf\nI will render error with my incorrect page.\nSecond case: in my templates I have complex mathematics and as result I can have page index as int or as float64.\np.s.\nIf you need I can show my math module which works like Smarty's math\n. Yes, I'm working on pagination.\nI don't want:\ngo\nfunc (c Pages) IndexPages(page string) revel.Result {...}\nbecause in my template I have:\ngo\n<ul>\n    {{range $i := for .first_page (math . \".last_page + 1\")}}\n        <li {{if eq $curr_page $i}} class=\"current_page\" {{end}}>\n            <a href=\"{{url \"Pages.IndexPages\" ???}}\">$i</a>\n        </li>\n    {{end}}\n</ul>\nin this case $i is a float64 variable, but in general it's int.\nI know that I can do all my math in controller, but how front-end developer supposed to support my templates? In this case he/she supposed to edit my controller's code. This is bad idea. Any solutions?\n. It works! Thx!\n. thx\n. thx\n. @anonx thx, but is anyway to do this with code?\n. Thx, I will try\n. @anonx thx a lot, it works!\n. ",
    "LeightonWong": "@cryptix thanks, it works.\n. ",
    "paritosh90": "@brendensoares Have we come up with any solution on this.\n@pushrax The main file is generated dynamically at compile time in tmp. Can we change it without breaking process?\n. There was an issue in cloning of repository. Sorry for trouble.\nI am using Bunch (https://github.com/dkulchenko/bunch) for dependency management.. ",
    "bscott": "@seawatts This I believe should allow us to specify a syslog server and port as well. I would love to see this get merged soon. :)\n. ",
    "xiam": "Sounds like something I could do. At which revision of the https://github.com/revel/revel.github.io.git repo should I start?\n. ",
    "dragon3": "@brendensoares Thanks for your review. You're right!\nI fixed and pushed, so please check it.\n. Thanks!\n. I have a same problem with v0.11.0 ( master branch )\n```\n$ go test github.com/revel/revel\ngithub.com/revel/revel\n./errors.go:121: undefined: strconv\n./errors.go:123: e.Link undefined (type *Error has no field or method Link)\n./errors.go:123: undefined: strconv\nFAIL    github.com/revel/revel [build failed]\n```\nmissing import \"strconv\"?\n. oops!\nSorry! I will fix it soon.\n. ",
    "dermesser": "An easy way to do this is using a reverse proxy like Apache or Nginx. In that server, you can then configure how subdomains are routed, also between several Revel instances for example. Or you can rewrite the URL in the proxy so you have all websites in one Revel setup.\n. What do you mean by \"all responses\"? Gzip compression makes only sense on textual data, images can't really be compressed. Gzip compression for text/html/css/json/xml etc. can be enabled in Revel by setting results.compressed to true in the configuration file.\n. ",
    "jephir": "That solves the problem, thanks!\n. ",
    "mnapoli": "FYI we just released this at Piwik: https://github.com/piwik/github-sync\nStill in beta, testers welcome :)\n. ",
    "shelakel": "The reason why gorilla/sessions would leak memory is because it depends on the gorilla/context package that uses a map[*http.Request]map[interface{}]interface{} to store per request state. The ClearHandler from the context package removes the request entry from the global map so that it may be garbage collected.\n. ",
    "ready4god2513": "@brendensoares There is already a message lookup in revel. (http://revel.github.io/manual/i18n-messages.html)  This allows developers to ALSO have specific templates for different languages.  This can be seen in other popular frameworks as well (http://guides.rubyonrails.org/i18n.html#localized-views)\n. Absolutely rtl is a great use case.  And is something that I am actively working on.  So +1 on that from me.\n. Correct.  And that actually could be a much larger problem.  I would love to see this code changed (and am open to do so), but want to ensure from the owners that we should build to the systems capabilities not an implicit contract.\n. Awesome.  I will get started.  Thanks!\n. This is working out fantastic, but one problem is that the interface requires an uint64 on the decrement, whereas the redis spec allows for a signed 64 bit int (as the counter can go in to the negatives).  I can restrict the decrement to never hit below 0, but that adds a bit of complexity in that we will need to add a mutex and perform 2 calls to the server, one for a read and one for a write.  Thoughts?\n. That is the exact implementation of decrement currently -\n// Decrement contract says you can only go to 0\n// so we go fetch the value and if the delta is greater than the amount,\n// 0 out the value\ncurrentVal, err := redis.Int64(conn.Do(\"GET\", key))\nif err != nil {\n    return 0, err\n}\nif delta > uint64(currentVal) {\n    tempint, err := redis.Int64(conn.Do(\"DECRBY\", key, currentVal))\n    return uint64(tempint), err\n}\ntempint, err := redis.Int64(conn.Do(\"DECRBY\", key, delta))\nreturn uint64(tempint), err\nSo my only suggestion would to be to add a mutex in the rare case of a race condition.\n. Perfect.  I will check in to the implications of that and work through the suite.\n. I dug in a bit deeper to this issue.  It looks like it might be a bad idea, unfortunately.  There are two libraries that revel cache depends on that specifically require unsigned 64 bit integers.  https://github.com/robfig/go-cache/blob/master/cache.go#L166 as well as https://github.com/bradfitz/gomemcache/blob/master/memcache/memcache.go#L634\nI could always wrap the value and send them to the libraries as unsigned ints, but that is a call I don't feel comfortable making.  The difficult thing here is that the capabilities of redis, even as a cache, are vastly different than those of the other cache systems.\nOutside of those two libraries the change works well.\n. I am good with that solution.  Everyone on board with that?\n. @anonx Is there an ETA on getting this one pulled in?  Or a reason why it shouldn't be?\n. Ah, my bad @anonx \n. Thanks!\n. ",
    "rwese": "Today I updated go and now receive the same error mentioned here.\n\nGO Version: go version go1.11.1 windows/amd64\nsrc\\github.com\\revel\\revel\\server_adapter_go.go:135:79: undefined: syscall.SIGUSR2\n\nIf you need further details please let me know how I can be more verbose.\n@brendensoares could we reopen the issue?. Looks like the problem only occurs when the windows-cmd is used. (Windows 10, Version 1803)\nWhen I used the Git-Bash go get... it worked as expected.. #747 same problem. Guys, you can apply the patch from this PR #1380. ",
    "devshell": "Seems a typical web app for showing off a framework's coding efficiency is a blog with authentication, and authorization ala https://www.youtube.com/watch?v=53DF4pkeriU\n. ",
    "brentadamson": "I am new to Go, coming from Python (otherwise I'd attempt to add the feature myself ;). I am converting my existing website into Go.\n. @anonx: Some things are too large to fit in-memory and slight slowdown in speed is fine\n@brendensoares: Hopefully flexible enough to store text, json, HTML, etc. Similar to flexibility offered by Flask-Cache: https://pythonhosted.org/Flask-Cache/\n. ",
    "sqs": "Just saw this and increased the priority for revel builds, so they should finish sooner.\n. ",
    "sourcegraphbot": "\n\n\u00a0func harness.Build() (app *harness.App, compileError *github.com/revel/revel.Error)\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0func harness.Build() (app harness.App, compileError github.com/revel/revel.Error)\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0func harness.Build() (app harness.App, compileError github.com/revel/revel.Error)\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0var revel.MessageFunc  func(locale string, message string, args ...interface{}) (value string)\n\n\n\u00a0(*revel.Controller).Message(message string, args ...interface{}) (value string)\n\n\n\u00a0var revel.TemplateFuncs  map[string]interface{}\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0var revel.MessageFunc  func(locale string, message string, args ...interface{}) (value string)\n\n\n\u00a0(*revel.Controller).Message(message string, args ...interface{}) (value string)\n\n\n\u00a0var revel.TemplateFuncs  map[string]interface{}\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0package csrf  \n\n\n\u00a0package controllers  \n\n\n\u00a0package app  \n\n\n\u00a0package tests  \n\n\n\u00a0type controllers.App  struct\n\n\n\u00a0(*controllers.App).Before() github.com/revel/revel.Result\n\n\n\u00a0(controllers.App).Controller  *github.com/revel/revel.Controller\n\n\n\u00a0var revel.AppRoot  string\n\n\n\u00a0(*tests.AppTest).EmailWithAssertion(audience string) tests.PersonaTestUser\n\n\n\u00a0(*tests.AppTest).TestThatLoginPageWorks()\n\n\n\u00a0(*tests.AppTest).TestThatLogoutPageWorks()\n\n\n\u00a0(*revel.CompressResponseWriter).Close() error\n\n\n\u00a0(revel.CompressResponseWriter).CloseNotify() <-chan bool\n\n\n\u00a0func csrf.CsrfFilter(c *github.com/revel/revel.Controller, fc []github.com/revel/revel.Filter)\n\n\n\u00a0(revel.Error).Link  string\n\n\n\u00a0(*revel.Error).SetLink(errorLink string)\n\n\n\u00a0type revel.Expect  struct\n\n\n\u00a0type controllers.FileInfo  struct\n\n\n\u00a0(controllers.FileInfo).ContentType  string\n\n\n\u00a0(controllers.FileInfo).Filename  string\n\n\n\u00a0(controllers.FileInfo).RealFormat  string\n\n\n\u00a0(controllers.FileInfo).Resolution  string\n\n\n\u00a0(controllers.FileInfo).Size  int\n\n\n\u00a0(controllers.FileInfo).Status  string\n\n\n\u00a0controllers.GB  int\n\n\n\u00a0var app.HeaderFilter  func(c *github.com/revel/revel.Controller, fc []github.com/revel/revel.Filter)\n\n\n\u00a0var app.HeaderFilter  func(c *github.com/revel/revel.Controller, fc []github.com/revel/revel.Filter)\n\n\n\u00a0func revel.HttpMethodOverride(c *revel.Controller, fc []revel.Filter)\n\n\n\u00a0func controllers.InitDB()\n\n\n\u00a0func csrf.IsExempt(c *github.com/revel/revel.Controller) bool\n\n\n\u00a0controllers.KB  int\n\n\n\u00a0func csrf.MarkExempt(route string)\n\n\n\u00a0controllers.MB  int\n\n\n\u00a0(mail.Message).Date  time.Time\n\n\n\u00a0(mail.Message).MessageId  string\n\n\n\u00a0type controllers.Multiple  struct\n\n\n\u00a0(controllers.Multiple).App  controllers.App\n\n\n\u00a0(*controllers.Multiple).HandleUpload() github.com/revel/revel.Result\n\n\n\u00a0type tests.MultipleTest  struct\n\n\n\u00a0(tests.MultipleTest).TestSuite  github.com/revel/revel.TestSuite\n\n\n\u00a0(*tests.MultipleTest).TestThatMultipleFilesUploadWorks()\n\n\n\u00a0(*controllers.Multiple).Upload() github.com/revel/revel.Result\n\n\n\u00a0func revel.NewEmptyConfig() *revel.MergedConfig\n\n\n\u00a0type tests.PersonaTestUser  struct\n\n\n\u00a0(tests.PersonaTestUser).Assertion  string\n\n\n\u00a0(tests.PersonaTestUser).Audience  string\n\n\n\u00a0(tests.PersonaTestUser).Email  string\n\n\n\u00a0(tests.PersonaTestUser).Pass  string\n\n\n\u00a0(tests.PersonaTestUser).Received  time.Time\n\n\n\u00a0func csrf.RandomString(length int) (string, error)\n\n\n\u00a0func csrf.RefreshToken(c *github.com/revel/revel.Controller)\n\n\n\u00a0type controllers.Single  struct\n\n\n\u00a0(controllers.Single).App  controllers.App\n\n\n\u00a0(*controllers.Single).HandleUpload(avatar []byte) github.com/revel/revel.Result\n\n\n\u00a0type tests.SingleTest  struct\n\n\n\u00a0(tests.SingleTest).TestSuite  github.com/revel/revel.TestSuite\n\n\n\u00a0(*tests.SingleTest).TestThatSingleAvatarUploadWorks()\n\n\n\u00a0(*controllers.Single).Upload() github.com/revel/revel.Result\n\n\n\u00a0func revel.TestEmail(t *testing.T)\n\n\n\u00a0func csrf.TestExemptAction(t *testing.T)\n\n\n\u00a0func csrf.TestExemptPath(t *testing.T)\n\n\n\u00a0func csrf.TestExemptPathCaseInsensitive(t *testing.T)\n\n\n\u00a0func csrf.TestFormPostWithToken(t *testing.T)\n\n\n\u00a0func csrf.TestHeaderWithToken(t *testing.T)\n\n\n\u00a0func cache.TestInMemoryCache_GetMulti(t *testing.T)\n\n\n\u00a0func revel.TestLength(t *testing.T)\n\n\n\u00a0func revel.TestMatch(t *testing.T)\n\n\n\u00a0func revel.TestMax(t *testing.T)\n\n\n\u00a0func revel.TestMaxSize(t *testing.T)\n\n\n\u00a0func cache.TestMemcachedCache_GetMulti(t *testing.T)\n\n\n\u00a0func revel.TestMin(t *testing.T)\n\n\n\u00a0func revel.TestMinSize(t *testing.T)\n\n\n\u00a0func csrf.TestNoReferrer(t *testing.T)\n\n\n\u00a0func csrf.TestNoTokenInArgsWhenCORs(t *testing.T)\n\n\n\u00a0func revel.TestOverrideMethodFilter(t *testing.T)\n\n\n\u00a0func csrf.TestPostWithoutToken(t *testing.T)\n\n\n\u00a0func revel.TestRange(t *testing.T)\n\n\n\u00a0func cache.TestRedisCache_GetMulti(t *testing.T)\n\n\n\u00a0func csrf.TestRefererHttps(t *testing.T)\n\n\n\u00a0type revel.TestRequest  struct\n\n\n\u00a0(*revel.TestRequest).MakeRequest()\n\n\n\u00a0(revel.TestRequest).Request  *net/http.Request\n\n\n\u00a0(*revel.TestRequest).Send()\n\n\n\u00a0func revel.TestRequired(t *testing.T)\n\n\n\u00a0(*revel.TestSuite).AssertNotContains(s string)\n\n\n\u00a0(*revel.TestSuite).AssertNotEqual(expected interface{}, actual interface{})\n\n\n\u00a0(*revel.TestSuite).DeleteCustom(uri string) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).GetCustom(uri string) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).PostCustom(uri string, contentType string, reader io.Reader) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).PostFile(path string, params net/url.Values, filePaths net/url.Values)\n\n\n\u00a0(*revel.TestSuite).PostFileCustom(uri string, params net/url.Values, filePaths net/url.Values) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).PostFormCustom(uri string, data net/url.Values) *revel.TestRequest\n\n\n\u00a0func csrf.TestTokenInSession(t *testing.T)\n\n\n\u00a0func revel.ValidEmail() revel.Email\n\n\n\u00a0(*revel.Watcher).NotifyWhenUpdated(listener revel.Listener, watcher *gopkg.in/fsnotify.v1.Watcher)\n\n\n\u00a0(cache.RedisCache).Get(key string, ptrValue interface{}) error\n\n\n\u00a0(*revel.Router).Route(req *net/http.Request) *revel.RouteMatch\n\n\n\u00a0func mail.TestRenderPlainAndHtmlText(t *testing.T)\n\n\n\u00a0func harness.Build() (app *harness.App, compileError *github.com/robfig/revel.Error)\n\n\n\u00a0revel.REVEL_IMPORT_PATH  untyped string\n\n\n\u00a0func revel.ReverseUrl(args ...interface{}) (string, error)\n\n\n\u00a0(*revel.TemplateLoader).Template(name string) (revel.Template, error)\n\n\n\u00a0func mail.TestWithDefaultSender(t *testing.T)\n\n\n\u00a0(cache.RedisCache).Delete(key string) error\n\n\n\u00a0harness.ROUTES  untyped string\n\n\n\u00a0type harness.SourceInfo  struct\n\n\n\u00a0func revel.RouterFilter(c *revel.Controller, fc []revel.Filter)\n\n\n\u00a0(*revel.TestSuite).Get(path string)\n\n\n\u00a0(tests.AppTest).TestThatIndexPageWorks()\n\n\n\u00a0type revel.CompressResponseWriter  struct\n\n\n\u00a0func revel.NewErrorFromPanic(err interface{}) *revel.Error\n\n\n\u00a0(jobs.BookingCounter).Run()\n\n\n\u00a0harness.MAIN  untyped string\n\n\n\u00a0(cache.RedisCache).GetMulti(keys ...string) (cache.Getter, error)\n\n\n\u00a0func harness.TestProcessBookingSource(t *testing.T)\n\n\n\u00a0func revel.CompressFilter(c *revel.Controller, fc []revel.Filter)\n\n\n\u00a0(*revel.CompressResponseWriter).Write(b []byte) (int, error)\n\n\n\u00a0func harness.ProcessSource(roots []string) (*harness.SourceInfo, *github.com/robfig/revel.Error)\n\n\n\u00a0(revel.Session).Id() string\n\n\n\u00a0(controllers.App).Login(assertion string) github.com/robfig/revel.Result\n\n\n\u00a0(revel.ErrorResult).Apply(req *revel.Request, resp *revel.Response)\n\n\n\u00a0(*revel.Watcher).Listen(listener revel.Listener, roots ...string)\n\n\n\u00a0type harness.TypeInfo  struct\n\n\n\u00a0(cache.RedisCache).Decrement(key string, delta uint64) (newValue uint64, err error)\n\n\n\u00a0(cache.RedisCache).Set(key string, value interface{}, expires time.Duration) error\n\n\n\u00a0(*revel.TestSuite).PostForm(path string, data net/url.Values)\n\n\n\u00a0func cache.NewRedisCache(host string, password string, defaultExpiration time.Duration) cache.RedisCache\n\n\n\u00a0(cache.RedisCache).Add(key string, value interface{}, expires time.Duration) error\n\n\n\u00a0(controllers.TestRunner).Run(suite string, test string) github.com/robfig/revel.Result\n\n\n\u00a0func revel.SessionFilter(c *revel.Controller, fc []revel.Filter)\n\n\n\u00a0(*revel.TestSuite).Delete(path string)\n\n\n\u00a0(*revel.Watcher).Notify() *revel.Error\n\n\n\u00a0(cache.RedisCache).Replace(key string, value interface{}, expires time.Duration) error\n\n\n\u00a0(*revel.TemplateLoader).Refresh() *revel.Error\n\n\n\u00a0(controllers.Application).Login(username string, password string, remember bool) github.com/robfig/revel.Result\n\n\n\u00a0func harness.BenchmarkProcessBookingSource(b *testing.B)\n\n\n\u00a0(cache.RedisCache).Increment(key string, delta uint64) (uint64, error)\n\n\n\u00a0func harness.NewTypeExpr(pkgName string, expr go/ast.Expr) harness.TypeExpr\n\n\n\u00a0(*revel.TestSuite).Post(path string, contentType string, reader io.Reader)\n\n\n\u00a0(*revel.BinaryResult).Apply(req *revel.Request, resp *revel.Response)\n\n\n\u00a0(*revel.Field).ErrorClass() string\n\n\n\u00a0(*harness.Harness).ServeHTTP(w net/http.ResponseWriter, r *net/http.Request)\n\n\n\u00a0func mail.TestSend(t *testing.T)\n\n\n\u00a0var revel.TemplateFuncs  map[string]interface{}\n\n\n\u00a0func mail.TestRenderRecipient(t *testing.T)\n\n\n\u00a0revel.TEST_ROUTES  untyped string\n\n\n\u00a0type mail.Message  struct\n\n\n\u00a0func revel.NewRoute(method string, path string, action string, fixedArgs string, routesPath string, line int) (r *revel.Route)\n\n\n\u00a0type revel.WriteFlusher  interface\n\n\n\u00a0(*revel.Controller).SetAction(controllerName string, methodName string) error\n\n\n\u00a0type revel.Error  struct\n\n\n\u00a0func revel.Init(mode string, importPath string, srcPath string)\n\n\n\u00a0package main  \n\n\n\u00a0(*tests.AppTest).After()\n\n\n\u00a0(*tests.AppTest).Before()\n\n\n\u00a0(tests.AppTest).TestThatIndexPageWorks()\n\n\n\u00a0func controllers.Init()\n\n\n\u00a0type main.Command  struct\n\n\n\u00a0(main.Command).Long  string\n\n\n\u00a0(*main.Command).Name() string\n\n\n\u00a0(main.Command).Run  func(args []string)\n\n\n\u00a0(main.Command).Short  string\n\n\n\u00a0(main.Command).UsageLine  string\n\n\n\u00a0(*revel.TestSuite).MakeRequest(req *net/http.Request)\n\n\n\u00a0(*revel.TestSuite).MakeRequestSession(req *net/http.Request)\n\n\n\u00a0type main.LoggedError  struct\n\n\n\u00a0func revel.VaildEmail() revel.Email\n\n\n\u00a0(revel.WriteFlusher).Flush() error\n\n\n\u00a0(revel.WriteFlusher).Write([]byte) (int, error)\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0(*revel.TestSuite).Patch(path string, contentType string, reader io.Reader)\n\n\n\u00a0(*revel.TestSuite).PatchCustom(uri string, contentType string, reader io.Reader) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).Put(path string, contentType string, reader io.Reader)\n\n\n\u00a0(*revel.TestSuite).PutCustom(uri string, contentType string, reader io.Reader) *revel.TestRequest\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0(*revel.TestSuite).Patch(path string, contentType string, reader io.Reader)\n\n\n\u00a0(*revel.TestSuite).PatchCustom(uri string, contentType string, reader io.Reader) *revel.TestRequest\n\n\n\u00a0(*revel.TestSuite).Put(path string, contentType string, reader io.Reader)\n\n\n\u00a0(*revel.TestSuite).PutCustom(uri string, contentType string, reader io.Reader) *revel.TestRequest\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0package harness  \n\n\n\u00a0type harness.App  struct\n\n\n\u00a0(harness.App).BinaryPath  string\n\n\n\u00a0type harness.AppCmd  struct\n\n\n\u00a0(*harness.App).Cmd() harness.AppCmd\n\n\n\u00a0(harness.AppCmd).Cmd  *os/exec.Cmd\n\n\n\u00a0(harness.AppCmd).Kill()\n\n\n\u00a0(harness.AppCmd).Run()\n\n\n\u00a0(harness.AppCmd).Start() error\n\n\n\u00a0(*harness.App).Kill()\nShowing only the first ten definitions. View the rest on \u2731 sourcegraph.com\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0package mail  \n\n\n\u00a0type mail.Mailer  struct\n\n\n\u00a0(mail.Mailer).Auth  net/smtp.Auth\n\n\n\u00a0(mail.Mailer).Host  string\n\n\n\u00a0(mail.Mailer).Password  string\n\n\n\u00a0(mail.Mailer).Port  int\n\n\n\u00a0(mail.Mailer).Sender  *mail.Sender\n\n\n\u00a0(*mail.Mailer).SendMessage(messages ...*mail.Message) (err error)\n\n\n\u00a0(*mail.Mailer).SendTestMessage(basicServer string, messages ...*mail.Message) (actualcmds string, err error)\n\n\n\u00a0(mail.Mailer).Server  string\nShowing only the first ten definitions. View the rest on \u2731 sourcegraph.com\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0package jobs  \n\n\n\u00a0package app  \n\n\n\u00a0package models  \n\n\n\u00a0package controllers  \n\n\n\u00a0package tests  \n\n\n\u00a0package chatroom  \n\n\n\u00a0package tests  \n\n\n\u00a0package controllers  \n\n\n\u00a0package models  \n\n\n\u00a0package tests  \nShowing only the first ten definitions. View the rest on \u2731 sourcegraph.com\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0package csrf  \n\n\n\u00a0package controllers  \n\n\n\u00a0package app  \n\n\n\u00a0package controllers  \n\n\n\u00a0package controllers  \n\n\n\u00a0package controllers  \n\n\n\u00a0package jobs  \n\n\n\u00a0package db  \n\n\n\u00a0func csrf.CsrfFilter(c *github.com/revel/revel.Controller, fc []github.com/revel/revel.Filter)\n\n\n\u00a0var db.Db  *database/sql.DB\nShowing only the first ten definitions. View the rest on \u2731 sourcegraph.com\n\nView the full smart diff on \u2731 sourcegraph.com\nSettings\n. \n\n\u00a0(revel.RenderTemplateResult).Apply(req revel.Request, resp *revel.Response)\n\nView the full smart diff on \u2731 sourcegraph.com\nDisable sourcegraphbot for this repository.\n. \n\n\u00a0(controllers.Static).Serve(prefix string, filepath string) github.com/revel/revel.Result\n\n\n\u00a0(controllers.Static).ServeModule(moduleName string, prefix string, filepath string) github.com/revel/revel.Result\n\nView the full smart diff on \u2731 sourcegraph.com\nDisable sourcegraphbot for this repository.\n. ",
    "somenxavier": "Thanks, fixed.\n. ",
    "kishorevaishnav": "Hi @amlwwalker,\nApart from the above comment by @anonx has given, I would like to let you know that revel by default has a configuration in the conf/routes\n```\nCatch all\n\n/:controller/:action                    :controller.:action\n```\n\nwhich by default maps to the controller and the methods (action) to it. So mostly, you might not need if you have written the controllers & the action properly, else you need to add your configurations here.\n. @xpbliss if the problem still persists, please let me know your Revel version, Go version, and the run.bat file content, I might try to help you.\n. Really appreciated!!! @arahansa. Keep up the good work.\n. ",
    "amlwwalker": "Thanks guys. I will give this a shot\n. When I run the program I get this:\n~/Documents/go \ue0b0 ls src/github.com/revel/revel/samples/persona\napp      conf     messages public   tests\n ~/Documents/go \ue0b0 revel run github.com/revel/revel/samples/persona\n~\n~ revel! http://revel.github.io\n~\nINFO  2014/12/21 22:44:15 revel.go:326: Loaded module static\nINFO  2014/12/21 22:44:15 revel.go:326: Loaded module testrunner\nINFO  2014/12/21 22:44:15 run.go:57: Running persona (github.com/revel/revel/samples/persona) in dev mode\nINFO  2014/12/21 22:44:15 harness.go:165: Listening on :9000\nINFO  2014/12/21 22:44:19 revel.go:326: Loaded module static\nINFO  2014/12/21 22:44:19 revel.go:326: Loaded module testrunner\nINFO  2014/12/21 22:44:19 main.go:28: Running revel server\nGo to /@tests to run the tests.\nListening on :59852...\nINFO  2014/12/21 22:44:19 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:19 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:19 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:19 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:20 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:20 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:44:20 session.go:123: Session cookie signature failed\nThats before I even log in with persona.\nIn the browser I can see the \"Sign in with your email\". \nWhen I click on it and login it says the \"Verified\" message, however it takes me back to the login screen and in the terminal I see this:\nINFO  2014/12/21 22:45:29 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:45:30 session.go:123: Session cookie signature failed\nINFO  2014/12/21 22:45:30 session.go:123: Session cookie signature failed\nNo firebug or anything - I havent message about with anything as far as Im aware...\nP.S Im on a mac (OS Mavericks)\n. After log in being verified\n\n\n. I can still see the secret is still there, however I just ran the chat example and I also get:\n2014/12/22 10:46:54 session.go:123: Session cookie signature failed\nbefore i have even entered the chat room.\nSeems odd, is there any way I can improve the debugging here.\nTo test, I just started a brand new revel project with revel new helloworld then when I run that with revel run helloworld\n\u2718 \ue0b0 ~/Documents/go \ue0b0 revel run helloworld\n~\n~ revel! http://revel.github.io\n~\nINFO  2014/12/22 10:54:41 revel.go:326: Loaded module static\nINFO  2014/12/22 10:54:41 revel.go:326: Loaded module testrunner\nINFO  2014/12/22 10:54:41 run.go:57: Running helloworld (helloworld) in dev mode\nINFO  2014/12/22 10:54:41 harness.go:165: Listening on :9000\nINFO  2014/12/22 10:54:47 revel.go:326: Loaded module testrunner\nINFO  2014/12/22 10:54:47 revel.go:326: Loaded module static\nINFO  2014/12/22 10:54:47 main.go:29: Running revel server\nGo to /@tests to run the tests.\nListening on :63571...\nINFO  2014/12/22 10:54:47 session.go:123: Session cookie signature failed\nINFO  2014/12/22 10:54:48 session.go:123: Session cookie signature failed\nINFO  2014/12/22 10:54:48 session.go:123: Session cookie signature failed\nINFO  2014/12/22 10:54:48 session.go:123: Session cookie signature failed\nINFO  2014/12/22 10:54:48 session.go:123: Session cookie signature failed\nI also get the Session cookie failure - but there isnt any use of cookies in the basic template is there? I feel this is possibly outside of the Persona example??\n. OK I am using the Persona example, but I dont think the issue is limited to that one specifically. I can see the cookies are cleared. When I refresh the page I still get Persona asking me to login and i can see the cookies (in Chrome Resources view) are blank - but they exist.\nWhen I log in Persona says I am verified and returns me to the page of the example:\nIn login.persona.org cookie I just have \ncan_set_cookies - value = 1\nSession storage has nothing under https://login.persona.org\nLocal storage https://login.persona.org has this:\n\n. Right, sorry guys. When I delete the cookies indivually (before I used Chrome's \"delete cookies\" feature) it works perfectly. Thanks guys!\n. @pedromorgan and then what do you do HTML side? I.e {{ template ??? }}\n@anonx whats the best way to do this - I want a content developer to specify the filename that they have created but I dont want them messing with the template page it will fit into. This works perfectly if I specify the file myself but that slightly defeats the point of having a <section> that they can specify content for\n. It is created before starting the app. It is in a folder next to the Views directory. But I don't want to have to hard code it in myself\n. Sweet! Works like a charm! Thank you\n. Hmm strange...\nMy folder structure is like this\n\nIf I want to access an action in app.go, such as func (c App) Documents() revel.Result { I go to 127.0.0.1:9000/App/Documents and that works.\nIf I want to access the action func (c App) Sample() revel.Result { in sample.go, I think I should go to 127.0.0.1:9000/App/Sample but I get\n\nBoth are in package controllers\n. Right, ok... so that makes me wonder why it wouldn't be 127.0.0.1:9000/App/Module/Sample if its a seperate controller, but is in a subdirectory below the App controller.\nThe top of my Sample.go looks like this now:\npackage controllers\ntype Module struct {\n    *revel.Controller\n}\nfunc (c Module) Sample() revel.Result {\nWhen I go to http://127.0.0.1:9000/Module/Sample I get\n\nDo I need to initialise an instance of Module somewhere? I presume the instance of App is initialised somewhere but I can't find it\nEDIT: Ahh, I see in the documentation that each controller needs an Init() function on startup. I see also that in Init.go, the defined package is app. Is this related to the App controller by any chance?\n. Sweet! All is working. I thought it would recompile, but a restart did it\n. ",
    "Fyb3roptik": "Any headway on this?\n. Glad I found this one! For now the workaround is my PR in the CMD repo\n. Right but that was not getting through. It is blank. Please see my PR in the CMD repo to see what I am trying to say:\nhttps://github.com/revel/cmd/pull/68. Nevermind I found the issue. Please ignore, it was my own code.. Tried that already. Nothing seems to work. I can forward port 80 to 9000 and http works fine. When I use https its as if it isnt even getting there.. With http I do not even need Apache though, so you're saying I will need apache? That seems a little counter-intuitive. I do not want to use Apache. Also this is for a dev environment only and I would like to be able to specify an https port like I can with http. Is this not possible with Revel? If not is there a specific reason? I would very much like to never install apache or Nginx if I can help it.. I should reiterate I am on MacOS using Vagrant running Debian. It seems like 443 is not being forwarded properly or at all. I have to forward 443 to a DIFFERENT port other than 443 because Vagrant wont forward a port < 1024. so even if I proxy that back to 443 on the Debian server, I still have to run revel as root right?. ok nevermind I was able to get this dev oauth server working without https. it is fine since it is just my dev env. Right. I would like a way for all transactions through revel (http, database, etc) to be passed to NewRelic via their go agent if I add the api key to config. Not sure if that is doable but would be the best solution.. Yes please!!! Thanks!. Here is the tested working code!\n```\nfunc init() {\n    config := newrelic.NewConfig(os.Getenv(\"NEWRELIC_APP_NAME\"), os.Getenv(\"NEWRELIC_LICENSE\"))\n    app, _ := newrelic.NewApplication(config) // TODO Error check !!!\n    RelicFilter := func(c *revel.Controller, fc []revel.Filter) {\n      txn := app.StartTransaction(c.Action, c.Response.Out, c.Request.Request)\n      defer txn.End()\n      fc0 // Execute the next filter stage.\n    }\n// Filters is the default set of global filters.\nrevel.Filters = []revel.Filter{\n    RelicFilter,\n    OptionsFilter,\n    filters.FilterForApiDoc,\n    revel.PanicFilter,             // Recover from panics and display an error page instead.\n    revel.RouterFilter,            // Use the routing table to select the right Action\n    revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n    revel.ParamsFilter,            // Parse parameters into Controller.Params.\n    revel.SessionFilter,           // Restore and write the session cookie.\n    revel.FlashFilter,             // Restore and write the flash cookie.\n    revel.ValidationFilter,        // Restore kept validation errors and save new ones from cookie.\n    revel.I18nFilter,              // Resolve the requested language\n    HeaderFilter,                  // Add some security based headers\n    CacheControlFilter,            // Add cache control headers\n    revel.InterceptorFilter,       // Run interceptors around the action.\n    revel.CompressFilter,          // Compress the result.\n    revel.ActionInvoker,           // Invoke the action.\n}\n\n\n\nrevel.OnAppStart(startupFunctions)\n\n}\n```\n. Correct content type should be:\napplication/vnd.android.package-archive. Disregard this was not Revel's issue. I use Revel for an API that transacts millions of records daily. This framework is awesome and I have helped contribute to it! . We need a solution for people who use a service like Elastic Beanstalk which uses a CNAME instead of an IP. The IP gets regenerated if you rebuild the environment.. The issue is module name. module:v3.5 in this case. Any updates on this?. Did you see my comment above? Your test did not cover the bug at all. It is the module NAME that does not support the dot, not the route. @notzippy @brendensoares . Should we do \\ (Backslash) instead of a | (pipe)?. ",
    "RobertJGabriel": "Dont know if people have seen this project https://github.com/yvasiyarov/swagger\n@Fyb3roptik @brendensoares \n. ",
    "svalleru": "Turns out that revel command line tools were missing under my '/Users/myuser/Desktop/golang/src/github.com/revel/cmd/revel/' directory; worked just fine after adding 'em \nThanks @anonx , @brendensoares \n. ",
    "Gujie": "Hello!\nAny update on this? \nShould we just use the current CSRF module and just comment out this part for now?\nif !isSameOrigin {\n    c.Result = c.Forbidden(\"REVEL CSRF: Same origin mismatch.\")\n    return\n}\nAlso, is there any release date already planned for v0.13?\nThanks for the great work!\n. ",
    "tr0mb1r": "csrf still doesn't work?\n\nAnd result is:\n\n. @ptman I've this problem with the latest version of csrf.go. Yes, {{template \"header.html\" .}} worked. Thank you.. ",
    "danilopolani": "+1 for Origin mismatch on localhost @notzippy @brendensoares .\nCurrently I'm using NGINX reversing to localhost:9000 and c.Request.URL.Scheme /  c.Request.URL.Host in csrf.go (and in controllers) are always empty.\n@ptman how did you solve?. Oh, well thank you, maybe it's better to update the documentation, the structure example is misleading:\napp/\n    messages/\n        messages.en\n        messages.fr\n        .... Ahah no problem, I updated the comment, BTW thank you, I like revel, so we are ok I suppose (?) \nCan you check the other issue about cache with no expiration? Thank you! . ",
    "goodgravy": "@brendensoares the referenced documentation at http://revel.github.io/manual/testing.html has yet to be updated\u2014I don't believe this issue should have been closed\n. ",
    "ShawnXu": "Thanks for the help. Didn't know bytes.buffer. Anyways\n```\nfunc (c *App) Captcha() revel.Result {\n    id := captcha.New()\n    c.Session[\"captcha_id\"] = id\nvar buffer bytes.Buffer\ncaptcha.WriteImage(&buffer, id, 240, 80)\n\nc.Response.ContentType = \"image/png\"\nc.Response.Status = 200\n\nreturn c.RenderText(buffer.String())\n\n}\n```\nAbove works, as it serves the captcha image AND writes the session cookie.\nfunc (c Application) Captcha(id string) revel.Result {\n    c.Response.ContentType = \"image/png\"\n    captcha.WriteImage(c.Response.Out, id, 250, 250)\n    return nil // or return c.RenderText(\"\")\n}\nAbove serves the captcha image fine as well, BUT it doesn't write the session cookie.\n. ",
    "flamingtop": "Both bytes.Buffer and c.Controller.Response.Out seem to implement \"Write\", I wonder what difference does it make to \ncaptcha.WriteImage(c.Response.Out ...)\nor\nvar buffer bytes.Buffer\ncaptcha.WriteImage(&buffer ...)\n. ",
    "LorenzV": "@brendensoares I've read the tutorial and the manual. \nRevel doesn't need a built-in ORM, my problem is just that if you need to use your own ORM, starting devs will still not know how to use it with revel.\nMy knowledge of go isnt good enough at the moment to make docs. I started a week ago. Maybe when i finish my first app... It could be a great learning experience for me also.\nIf i would create docs, i would make sure every part of a certain topic is explained and contains atleast 1 snippet per struct, function or even function argument.\nThe topics i would make docs about are the ones that everyone need to make a webapp: \n- install + run\n- configuration\n- controllers\n- routing\n- models\n- Sessions\n- Cookies\n- Request data -- GET/POST/...\n- Responses (revel.Result) -- how to return html, json, downloads, ...\n- Templates\n- Logging\n-- Advanced --\n- ORM implementation\n- Authentication\n- Validations\n- Translations\n- Sending mails\n- Security XSS, CSRF\n- Websockets\n- Deploying revel\n-- Tutorials/Samples --\n- Revel + ORM (sample code for all the most common ORMs)\n- Ajax File uploads\n- SMTP mail from templates\n- Chat with authentication\n- Worker Queues\nIt's important for documentation to have common words instead of specific ones. Starting devs will have an easier time to find what they need & google'ing will be easier\neg:\ni18n -> Translations\nResults -> Responses (Although it's revel.Result, people still call it a Response and that's what they'll be searching for)\nParams -> \"Request data\"  & route params moved to \"controllers/routing\"\n. @pedromorgan I've compared it, and i really like the improvements.\nI like:\n- The visual update for the notes\n- Everything is more structured\n- More info is now bold or in another color\n- The list of functions added in the \"template\" section\n- i18n = renamed , i'd still prefer \"Translations\" though, but that's just my opinion\n- Menu looks better/cleaner\nI probably didnt see all the changes.\nI would add:\n- more colors to the code samples\n- More topics to the manual (Those from my prev. comment) , but that will prob. take alot of time\nI could definitely tell that i enjoyed reading your version more than the current one. Maybe it's because i dont really read the manual, i just use it to find what i want to know. and making visual changes like these makes it easier\n. @pedromorgan The only reason i want to add colors to the code samples is to make them more fun to read.\n. hmmmm i would try to look for other colors. Also, i think the old style of the notes was better. Im not such a fan of the gradient background :) and the h2 font looks too big for its container.\n. @pedromorgan maybe i'll do that. and being color blind might be an advantage because you're less likely to make things unreadable towards other color blind people ^^\n. I tried.. ^^\nBefore: http://puu.sh/e1Wa5/32fd8189a3.png\nAfter: http://puu.sh/e1W6v/38a07b0600.png\nIt's kinda annoying that the colors for the code samples dont see the difference between strings, functions and package names.\nI'm not a designer either. Just wanted to show my preferences. Also dont mind the note that i added there, it's just for showing the style.\nAnyway. I think the content of the manual is more important than the styling right now, but an update of it is always welcome ^_^\n. ",
    "benjamin-wss": "I actually done the stuff that you mentioned in your reply but it did not work. However, the solution is to actually do add this to the path as well: C:\\Go\\bin\\bin. Strange that it does this on windows but anyway, problem solved for me.\nPerhaps add this to your wiki and stuff. If you'd like I wont mind doing that for you as well.\n. Perhaps it is a GOPATH issue I guess and no it was not a typo. See below:\n\n\nAnyway, I got it working now despite the really strange thing and not having the bashrc to setup these things is maddening. I created a Ubuntu VM to play with Revel at home for now. Less painful and all that.\n. Haha, thanks. Nice framework. Hopefully this will be supported in Google App engine as well. \n. ",
    "dhananjayve": "i had tried but got following error\nC:\\Users\\dkvon>go get github.com/revel/cmd/revel\nC:\\Users\\dkvon>revel run github.com/revel/samples/chat\n'revel' is not recognized as an internal or external command,\noperable program or batch file.\nI am new in golang suggest me solution. ",
    "aftemark": "Windows 10 user here.\nInstructions appeared a bit confusing for me or just missed a step.\nIf you want revel work on clean go msi installer, you have to add this path(for default go folder) to PATH enviroment variable.\n\n. ",
    "deterok": "The problem is partially solved.\nNot been closed tag \"textarea\".\n. I couldn't find any errors.\n. ",
    "chengziqing": "run cmd is right\nrevel run myweb prod 9000\n. @anonx \n\nconsole display error:\ngoroutine 20 [syscall]:\nsyscall.Syscall6(0x7754a4d0, 0x5, 0xb0, 0xc0820a0878, 0xc0820a087c, 0xc082036120, 0xffffffff, 0x0, 0\nx0, 0x0, ...)\n        C:/Users/999119~1/AppData/Local/Temp/1/makerelease290899922/go/src/pkg/runtime/syscall_windo\nws.goc:72 +0x7f\nsyscall.GetQueuedCompletionStatus(0xb0, 0xc0820a0878, 0xc0820a087c, 0xc082036120, 0xffffffff, 0x0, 0\nx0)\n        C:/Go/src/pkg/syscall/zsyscall_windows_amd64.go:510 +0xd8\ngopkg.in/fsnotify%2ev1.(*Watcher).readEvents(0xc0820a4740)\n        E:/GOCODE/src/gopkg.in/fsnotify.v1/windows.go:381 +0xfb\ncreated by gopkg.in/fsnotify%2ev1.NewWatcher\n        E:/GOCODE/src/gopkg.in/fsnotify.v1/windows.go:46 +0x1c1\ngoroutine 21 [syscall]:\nsyscall.Syscall6(0x7754a4d0, 0x5, 0xd4, 0xc0820a0498, 0xc0820a049c, 0xc0820360f8, 0xffffffff, 0x0, 0\nx0, 0x0, ...)\n        C:/Users/999119~1/AppData/Local/Temp/1/makerelease290899922/go/src/pkg/runtime/syscall_windo\nws.goc:72 +0x7f\nsyscall.GetQueuedCompletionStatus(0xd4, 0xc0820a0498, 0xc0820a049c, 0xc0820360f8, 0xffffffff, 0x0, 0\nx0)\n        C:/Go/src/pkg/syscall/zsyscall_windows_amd64.go:510 +0xd8\ngopkg.in/fsnotify%2ev1.(*Watcher).readEvents(0xc0820095c0)\n        E:/GOCODE/src/gopkg.in/fsnotify.v1/windows.go:381 +0xfb\ncreated by gopkg.in/fsnotify%2ev1.NewWatcher\n        E:/GOCODE/src/gopkg.in/fsnotify.v1/windows.go:46 +0x1c1\n\nweb display error:\nApp failed to start up\nrevel/harness: app died\n. version 0.10.0:\nI think is fsnotify problem.\n-   \"github.com/howeyc/fsnotify\"\n-   \"gopkg.in/fsnotify.v1\"\n. I have solved. After anti-virus is good.\nThis morning,I set up a development in a new system,and does not appeat to the problem above.\n. PaxHeaders.0\n. If the client does not close tcp, the connection still exists.. when\napp.behind.proxy = true\nthan\ntimeout.read=90 \ndisable\uff1f. func (engine GoEngine) ParseAndAdd(baseTemplate TemplateView) error {\n--\n\u00a0 | // If alternate delimiters set for the project, change them for this set\n\u00a0 | if engine.splitDelims != nil && baseTemplate.Location() == ViewsPath {\n\u00a0 | engine.templateSet.Delims(engine.splitDelims[0], engine.splitDelims[1])\n\u00a0 | } else {\n\u00a0 | // Reset to default otherwise\n\u00a0 | engine.templateSet.Delims(\"\", \"\")\n\u00a0 | }\nI setting template.go.delimiters,but invalid.\nint code \"baseTemplate.Location() == ViewsPath\" ,not ==.when i debug.  I do not know\uff0cWhat else is set?. ",
    "5dao": "not delimiters  problem\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?.title?></title>\n</head>\n<body>  \n<?raw .cc?>\n<script type=\"x/rend\" x-rend=\"tempalte\">\n    <select><?raw .cc?></select>\n</script>\n</body>\n</html>\ngolang\ncc := \"<option>asdf</option>\"\n    return c.Render(cc)\nbrower html code is\nhtml\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>  \n<option>asdf</option>\n////////yes ,,this right\n<script type=\"x/rend\" x-rend=\"tempalte\">\n    <select>\"\\u003coption\\u003easdf\\u003c/option\\u003e\"</select>\n    /////////////????? why not   <option>asdf</option>\n</script>\n</body>\n</html>\nand my template.delimiters=<? ?>\n. Oh.thanks!. I will change my code way.\n. ",
    "netchtg": "I found some old comments ,so close it\n. ",
    "pbnjay": "Looks like just need a range check here:\n   https://github.com/revel/revel/blob/master/template.go#L479\nI can submit a PR later, I'm not set up to contrbute at the moment, but surely someone else can get this in.\n. Yeah, sorry on my phone right now but I believe it was my view func didn't\nhave a named parameter but I thought it did. The \"url\" helper didn't do a\nbounds check.\nSomething like:\nfunc (a *App) Thing() revel.Result {\n...\n}\nThen:\n{{url \"App.Thing\" 1234}}\nOn Jan 1, 2015 3:43 AM, \"anonx\" notifications@github.com wrote:\n\n@brendensoares https://github.com/brendensoares, the issue is {{url\n\"Controller.Action\" .arg1 .arg2 ...}} helper panics in case of incorrect\ninput rather than showing a user friendly error message.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/811#issuecomment-68482604.\n. Whoops I think anonx edited after my github email was sent. Knew I should have checked the site first...\n. Here's a minimal example for the base skeleton app:\n\n$ revel new noroutes\n$ vim noroutes/app/controllers/app.go\n```\npackage controllers\nimport (\n        \"github.com/revel/revel\"\n        \"log\"\n        \"noroutes/app/routes\"\n)\ntype App struct {\n        *revel.Controller\n}\nfunc (c App) Index() revel.Result {\n        return c.Render()\n}\nfunc init() {\n        revel.OnAppStart(func() {\n                log.Println(routes.App.Index())\n        })\n}\n```\n$ revel run noroutes\nHit up http://localhost:9000 in your browser and then you'll see:\n```\nERROR 2015/02/25 12:11:55 router.go:419: Failed to find reverse route: App.Index map[]\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x1f8182]\ngoroutine 16 [running]:\nruntime.panic(0x436c80, 0x70c244)\n    /usr/local/Cellar/go/1.3.1/libexec/src/pkg/runtime/panic.c:279 +0xf5\nnoroutes/app/routes.tApp.Index(0x0, 0x0)\n    /Users/jeremy/src/noroutes/app/routes/routes.go:15 +0x92\nnoroutes/app/controllers.func\u00b7001()\n    /Users/jeremy/src/noroutes/app/controllers/app.go:19 +0x2a\ngithub.com/revel/revel.runStartupHooks()\n    /Users/jeremy/src/github.com/revel/revel/server.go:126 +0x65\ngithub.com/revel/revel.Run(0xeeb7)\n    /Users/jeremy/src/github.com/revel/revel/server.go:100 +0x4ce\nmain.main()\n    /Users/jeremy/src/noroutes/app/tmp/main.go:108 +0xe08\n```\n. Yeah I figured this was an init() ordering issue, but I can't seem to find a way to address this easily.\nI could hack in an optional weight to the OnAppStart() call, or add a new func OnAppStartWeighted().\n. Actually... looking at the code @anonx linked to, when watching is enabled, MainRouter.Refresh() isn't called yet after the router is loaded from router.go:init() - so when the app init is called the routes are still empty. In fact running in \"prod\" mode on my example works perfectly without any changes.\nSo maybe the \"fix\" is as easy as preemptively calling MainRouter.Refresh() before adding to the watcher?\n. Doubt it. Routes still aren't loaded before returning in dev mode. Just need to pull the refresh above the its still, but can keep the err check.\n. Yup. Was on my phone so couldn't make the update. Coming in shortly\n. ",
    "lozandier": "I thought I replied through email; my apologies: I'm aware of the jwt package. I'm very early in my thoughts of using jwt and Revel. If I ever find a scalable, testable, and performant way of doing so, I'll consider contributing to the Revel docs. \n. ",
    "arahansa": "Oh, thank you on behalf of community member. \nI'll let you know the site address after development is almost completed\nI think Revel is a great framework. \nso.. Keep up the good work!\n. ",
    "yanlinpu": "I'm very sorry for that in holiday.\nwhen i want to test, i must copy the public folder in the testrunner to the local.\n\n. yes. \nthanks.\n. @anonx  thx\n. ",
    "xuanxu": "PR fixing this issue here: 891\n. @anonx done!: #891\nI'm closing this in favor of #891 \n. ",
    "CipherChen": "Thanks @anonx \nMy $GOBIN\n[note@Eleanor go_test_bin]$ echo $GOBIN\n/home/Binary/go_test_bin/\n[note@Eleanor go_test_bin]$ ls $GOBIN\ngocode  hello\nI'm sure I've added $GOBIN in $PATH, since\n[note@Eleanor revel]$ which hello\n/home/Binary/go_test_bin/hello\n[note@Eleanor revel]$ hello\nHello, Go examples!\nAnd I cann't find revel in the $GOBIN.\n. ",
    "pault84": "With the new docker beta. this could totally work on windows now.\nDocker is now \"supported\" on a windows environment. this would be pretty cool to have.!\n. Ok so i'm out of the woods but i still don't understand why i had to change all my redirects.\n. I tried both ways. routes.App.Index and /app/index  and (*App).Index\nroutes.App.Index() throws an error.. ",
    "evalphobia": "@brendensoares\nthank you for the instruction.\nI got some import errors to testing this,\nso I used master branch to test this.\n\nreproduce steps\nCreate new app,\n``` bash\n// clean\n$ rm -rf $GOPATH/src/foo/revel\n// create new app\n$ revel new foo/revel\n$ cd $GOPATH/src/foo/revel\n```\nAdd i18n messages,\n``` bash\n// add i18n message to index view\n$ sed -e 's@()@\\1{{ msg . \"found value\" }} and {{ msg . \"missing value\" }}@' $GOPATH/src/foo/revel/app/views/App/Index.html > /tmp/test_index.html\n$ diff /tmp/test_index.html $GOPATH/src/foo/revel/app/views/App/Index.html\n8c8\n<         It works!{{ msg . \"found value\" }} and {{ msg . \"missing value\" }}\n\n\n    <h1>It works!</h1>\n\n\n$ mv /tmp/test_index.html $GOPATH/src/foo/revel/app/views/App/Index.html\n// add translation\n$ echo 'found value = Hello!' >> $GOPATH/src/foo/revel/messages/sample.en\n```\nThen,\nbash\n// run app and access via browser\n$ revel run foo/revel\n$ open http://localhost:9000/\nIt shows Hello! and ??? missing value ??? below \u201cIt works!\"\ntest steps\nPrepare this commit,\n``` bash\n// retrieve data from this pull request\n$ cd $GOPATH/src/github.com/revel/revel\n$ git remote add pr git@github.com:evalphobia/revel.git\n$ git fetch pr\n// I cannot run app from develop branch,\n// $ git checkout -b feature/config-i18n-default-format  pr/feature/config-i18n-default-format\n// so using master branch for testing.\n$ git cherry-pick d7c0cc2\n```\nAdd i18n unknown value format,\n``` bash\n$ cat $GOPATH/src/foo/revel/conf/app.conf | perl -pe \"s@^(i18n.*)@\\1\\ni18n.unknown_format =  %s @\" > /tmp/test_app.conf\n$ diff /tmp/test_app.conf $GOPATH/src/foo/revel/conf/app.conf\n88d87\n< i18n.unknown_format =  %s \n$ mv /tmp/test_app.conf $GOPATH/src/foo/revel/conf/app.conf\n```\nThen,\nbash\n// run app and access via browser\n$ revel run foo/revel\n$ open http://localhost:9000/\nIt shows Hello! and *** missing value *** below,\nchanged the format from ??? %s ??? to *** %s ***.\nif you get invalid import path error, try below\nbash\n$ rm $GOPATH/bin/revel\n$ go get -u github.com/revel/cmd/revel\n$ revel run foo/revel\n\nIs this meets your requirement? \nthanks.\n. ",
    "sevki": "Sorry about that. Will do.\n. Steps to reproduce:\nWhat turned out to be the problem was, I was running in a mode in where mode.dev was enabled, testrunner module was in the routes but the testrunner thing was not in the conf file itself. \nThis arrangement worked fine if I did revel run app mymode but didn't work when I did app -runMode mymode -importPath app all I got were No matching route found: / errors.\nUpon more investigation I found out that the MainRoute.Routes were empty, in my case because it couldn't find the testrunnermodule in the coressponding section in the conf, but this could have been also due to a corrupt routes file -- which mine technically was -- due to some other error like a missing comma, illegal char or no like breaks, etc. \nIf not for anything this fixes the unchecked error which might even be consider a stylistic or best practices improvement which in my case also happened to help debug an error.\n. ",
    "DavidHunter": "I think we should forget about IRC meetings. Just use github issues and accept any improvements.\n. Their should be a repository for revelframework.com. So we can contribute to it.\n. I think this is suppose to target the develop branch\n. I am assuming this issue has been solved\n. We need more contributors. We just added more people to the project\n. @anonx I agree with you.\n. The contributing guidelines are at https://github.com/revel/revel/blob/master/CONTRIBUTING.md\n. My guess is that they forked it for versioning.\n. Robfig modified the forked version https://github.com/robfig/go-cache/commit/9fc39e0dbf62c034ec4e45e6120fc69433a3ec51\n. Does anyone use Revel in production?\n. @alkchr I meant use it in a high traffic website\n. You will need to ask brendensoares. If it was up to me I would delete that roadmap and pushback support for pongo2\n. ",
    "jinchizhong": "And, can anybody tell me: how to work around this issue. \nThank you.\n. Hi @brendensoares \nI change controllers/test.go to:\n```\npackage controllers\nimport \"github.com/revel/revel\"\ntype Test struct {\n    *revel.Controller\n}\nfunc (c Test) Index() revel.Result {\n    xxx := \"Test String\"\n    return c.Render(xxx)\n}\n```\nNothing is changed.\nBTW, the official demo is also cannot works good in my machine.\nHere are two warnings:\n2015/01/23 04:11:42 controller.go:96: No RenderArg names found for Render call on  134580909 /home/jcz/go/src/github.com/revel/revel/samples/chat/app/controllers/app.go  line 7 (Action Application.Index )\n2015/01/23 04:12:09 controller.go:96: No RenderArg names found for Render call on  134586543 /home/jcz/go/src/github.com/revel/revel/samples/chat/app/controllers/test.go  line 5 (Action Test.Index )\nrevel/revel/samples/chat/app/controllers/app.go is also work badly.\nIt must be 12 not 7 in revel/revel/samples/chat/app/controllers/app.go\n. Hi @brendensoares \nI'm very happy to tell you a message.\nI install another package in ubuntu that also provide go.\nAnd then I rerun the demo, everything is OK.\nI hope that can help you.\nsudo apt-get install golang\n. ",
    "xaionaro": "Confirm. I had the same issue. And it disappeared after updating golang in Debian (from 1.3.1 to 1.3.3) and rebuilding the project.\n. Sorry. It appeared again:\nERROR 2015/05/07 10:16:16 controller.go:97: No RenderArg names found for Render call on line 281 (Action Units.Index )\n. > feel free to re-open if this didnt work\nWell, I haven't such privileges in this project :)\n\nYou can use a common structure, but your common controller code must be in a package called controllers.\n\nI see, thanks. If this requirement is a feature (not a bug) then it's required to print it when somebody tries to do the same thing as me, IMHO. Otherwise it looks like a bug and eats time of a developer.. @lujiacn, doesn't help. The same error.. > I need this helper to bypass this issue: #1239 :)\nIt's not required anymore.. Doesn't work:\ngolang\nresponse := controller.Response.Out.Server.GetRaw().(*http.Response)\nINFO  19:46:51    app server.go:2753: http: panic serving 127.0.0.1:34062: interface conversion: interface {} is *http.response, not *http.Response\nMeanwhile on the page you suggested:\n\nhttp.Response.Out Is not the http.Response and is deprecated, you can get the output writer by doing http.Response.GetWriter(). You can get the http.Response from revel.Controller.Response.Out.Server.GetRaw().(*http.Response)`\n\nAnd there's no documentation:\n\nhttps://godoc.org/github.com/revel/revel#GoResponse.GetRaw\n\n:). No. I even don't know on which Controller.Action this going on. I was unable to repeat this by myself. I see this error only in production.. @notzippy where do I do that? There's no debugging information to understand where is the error.. @notzippy well, I don't see such:\ncontrollers$ grep -RIn revel.Result . | grep --color string | grep '*'\n./phones.go:155:func (c *Phones) ShowConfigFanvil(mac string) revel.Result {\n./app.go:529:func (c App) ChatMessageSentJson( /*token string, channelId string, userName string, text string*/ ) revel.Result {\nI could check every Action manually:\ncontrollers$ grep -RIn revel.Result . | wc -l\n260\nBut it can take too much time.\nI believe I use binding to a structure (which has a *string field inside) somewhere. But I don't see where it could be. IMO, revel should report something about which line actually caused the panic.\n\nIm going to reopen this because you are right it should be better logged when the error occurs\n\nThank you :). ",
    "munrocape": "@fellz \nIf you are using that buildpack, remove the procfile. \nAlso, do you deploy from the mygoapp/ dir? If so, I believe your .godir should be mygoapp and not github.com/fellz/mygoapp\nI deploy this project using that buildpack / .godir method. \n. ",
    "fellz": "```\n-----> Running: godep go install -tags heroku ./...\ngo build github.com/fellz/mygoapp/tests: no buildable Go source files in /tmp/build_2817461966e127c0d32d3351f5ea5892/fellz-mygoapp-59c4fc3/.go/src/github.com/fellz/mygoapp/tests\ngodep: go exit status 1\n!     Push rejected, failed to compile Revel app\n```\nStill no luck. Deleted Procfile. \nWell i guess Revel kind of special case Go app that need some configs to be build on Heroku i guess. That sounds pretty sad because i like go for it's simplicity and no magic but in this case ... \nIf we look at the log message\nno buildable Go source files in ... .go/src/github.com/fellz/mygoapp/tests\nBut there is a file app_test.go. I don't know how apps should be built when they are spread between dirs but i guess this not the valid way \n. Oh finally it works )) \nFixed that test file ( btw i changed because go test doesn't see any test files in test dir) \nRemoved Procfile\nAdded  github.com/fellz/mygoapp to .godir\nThis is valid config if anyone need this \nhttps://github.com/fellz/mygoapp\n. ",
    "franchb": "I have the same issue. .godir and Procfile - nothing helps...\nMaybe, there is any other issue with Golang app on Heroku?. Thank you, @notzippy \nI will post here if I solve this problem myself.\n. Sorry, the error was due to the presence of an internal error in the code. Everything is working!\nMy advice for next beginners -- try to log steps in your main code.. ",
    "pavanka": "for beginners -> if one does not want to detect loops, etc.\nhttps://github.com/pavanka/symwalk/\n. I found this patch while searching for symlink aware dir traversal. Thank you.\nThere are a few issues with this: I implemented an alternative code here: https://gist.github.com/pavanka/e22a432fd6487fc8e578\n. so walkFn is called twice on a symlinked directory.\n. consider a directory structure like \ntest\n\u251c\u2500\u2500 a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hello\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 hi\n\u251c\u2500\u2500 b -> a\n\u2514\u2500\u2500 hi -> a/hi\nideally the names of files one gives to walkFn should be:\ntest\ntest/a\ntest/a/hello\ntest/a/hi\ntest/b\ntest/b/hello\ntest/b/hi\ntest/hi\nbut this code always calls walkFn with fully resolved paths. making it less useful in the general case\n. this code cannot detect loops in the directory structure -> so if loops do exist it runs the risk of going into infinite recursion.\nfor that I wrote some loop detection code & another alternative implementation for the whole code. [it mostly copies from filepath.Walk]\nhttps://gist.github.com/pavanka/2cd9f21639446d53b7b6\n. ",
    "eric-gilbertson": "As to button placement, one solution would be to place them on both the left and the right. I think it is good to have them on the left since it provides a tight visual coupling between then test name and the run button. Also, it accommodates those who work out of page left. \nRow hover tooltips could be added but given the use of bootstrap styling the rows cannot be shrunk much more as they already use the \"xs\" buttons.\nIf there is interest on this approach I will check it into the modules repo.\n. I did try replacing the buttons with simple links and it does result in the saving of few more pixels per row. OTOH, I thought the presentation was less clear and that it was best to use a button because the click was invoking an action (as opposed to a view). Note that the condensed layout I checked in does already result in a vertical saving of approximately 30%. My $0.02 would be to keep the buttons for this iteration, but I can change back to links if that is the consensus. I would like to finish this issue so please let me know if you would like this change pushed to into modules and whether to use buttons or links. \n-Eric\n. ",
    "grsmv": "Yep, definitely. But io.Reader is not actually better solution to imitate sending a form, so maybe we still need PutForm method?\n\nOn Mar 16, 2015, at 07:34, anonx notifications@github.com wrote:\nHi, @grsmv. Thank you for your contribution. We have already had PUT method: https://github.com/revel/revel/blob/develop/testing/testsuite.go#L121\n781 is a related PR.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you. I'll close this and reopen #897\n. Really sorry about that. Once again reopened in #898 \n. \n",
    "huobazi": "+1\n. also js as rails \n. ",
    "runner-mei": "+1\n. https://github.com/yosssi/ace\n. I add pluggable template engine support.  https://github.com/revel/revel/pull/1003\nand a pongo2 template engine support. \n. I like it, it is useful.\n. this is a pull request.\n. My user change port of my app, but reinstall my app and will override config file, so I add hook to read port from the db if db is exists. \n. there are a patch in the here.\nhttps://github.com/runner-mei/revel/tree/plugin_template_loader\nIt is incompleted, but soon will be create pull request.\nTasks that are not completed\uff1a\n1. move pongo2 and haml to revel/modules\n2. add template pluging for revel/cmd\n. @xpbliss  Yes, such as field , radio ,checkbox are modified in module runner-Mei pongo2.\n\nmy field function code is https://github.com/runner-mei/revel_modules/blob/master/pongo2/app/filters_field.go\nmy field function domo code is https://github.com/runner-mei/revel_samples/blob/master/booking/app/views/application/register.html#L14\n\nYes, the pongo2 also has a minor modifications , pull request is https://github.com/flosch/pongo2/pull/102\nI hope template engine as a separate module, and you can import it as a module.  like this\n. @notzippy Yes, template engine is switching globally. \nDifferent templates are used in different modules, to my thinking, this is not a good idea, but it is possible. I add a mixed template engine to support it.\n. What do I need to do?. 404.html\n. it is ok.\n. or add new member. some app is develop with java playframework.\nsecret key is distribution in different configuration files, So I think  store them together in one place\n. playframework can custom load config file.\nI  do it by implement custom SessionFilter.. Can load config file by custom hook?. nice. why not use file extension name?\n.gohtml -> go template engine\n.pghtml - > pongo2 template engine\nor\n.go.html -> go template engine\n.pg.html - > pongo2 template engine\n. update github.com/revel/cmd ?. Changes since v0.13.0\nBreaking Changes\nrevel/revel:\n    change RenderArgs to ViewArgs PR #1135\n    change RenderJson to RenderJSON PR #1057\n    change RenderHtml to RenderHTML PR #1057\n    change RenderXml to RenderXML PR #1057\n\n. \u4e2d\u56fd\u4eba\u5427\uff0c\u77e5\u9053\u9632\u706b\u5899\u5427\uff0c\u4e0d\u77e5\u9053\u5c31\u522b\u505a\u7a0b\u5e8f\u5458\u4e86\u3002. PR #1205 is not resolve this issue\nmy patch  is https://github.com/runner-mei/revel/commit/3b296c31b9f4c9a8d30ca61adcda8630b1a64756. https://github.com/revel/revel/pull/1223 may have also been a little flaw.\nengine.Lookup will concurrency issue while call TemplateLoader.Refresh(), but it is unimportance.\n`go\n                if tmpl = engine.Lookup(langName); tmpl != nil {\n                    found = true\n                    break\n                }\n                if tmpl = engine.Lookup(name); tmpl != nil {\n                    found = true\n                    break\n                }\n. @notzippy #1223 may have also been a little flaw.  I has two patch.\nversion1: https://github.com/runner-mei/revel/commit/1e409652ef865b8227c660444f2abefd07ae809d it is changed base the #1223, but its performance is bad\nversion2: https://github.com/revel/revel/pull/1225. I rebase it with revel/develop branch.. I rebase it.. no issue. it is already exists on the develop branch.\nhttps://github.com/revel/revel/blob/develop/controller.go#L124. https://github.com/revel/revel/issues/1221. zap has a  https://godoc.org/go.uber.org/zap#AddCallerSkip Option, it is increases the number of callers skipped.. No, I waiting for your confirm. I will working it at this weekend. https://github.com/revel/revel/pull/1298\nit is incompleted.. @notzippy 1. zap is suck at route LogRecord to output target.\n2. I am busy before 2018-02-12,   I have Holidays to working with it after 2018-02-12,. I add it!. I add it!. utilLog.Error(\"Unable to read file\", \"file\", filename, \"error\", err)\nto\nutilLog.Error(\"Unable to read file\", \"file\", filename, \"error\", readErr)\n. ",
    "1lann": "Still happens for me with the latest release. It only happens when you have results.compressed = true in your app.conf file, otherwise it does ignore it.\n. Are you sure? For what reason?\npackage github.com/golang/net/websocket\n    imports github.com/golang/net/websocket\n    imports github.com/golang/net/websocket: code in directory /Users/jason/Workspace/Go/src/github.com/golang/net/websocket\n        expects import \"golang.org/x/net/websocket\"\nAlso github.com/golang/net is just a mirror of golang.org/x/net.\n. Seems to be related to golang/go#10484. Try changing your DNS?\n. I guess the problem here would be that there is a HTTP 500 Server Error with an empty body response returned if the controller takes too long to respond (ie. it timeouts). Perhaps a HTTP 504 Gateway Timeout should be produced instead, and possibly make it so reverse proxy errors render proper error pages.\nExample controller code:\n``` go\npackage controllers\nimport \"github.com/revel/revel\"\nimport \"time\"\ntype App struct {\n    *revel.Controller\n}\nfunc (c App) Index() revel.Result {\n    time.Sleep(3 * time.Minute)\n    return c.Render()\n}\n```\nYou may want to leave the page loading in the background, as it does take a long time to timeout.\n. You can change the HTTP headers to force fetch all pages which require authentication if this is really an issue for you. In most cases this is fine as the page doesn't actually have any functionality (no actions can be made) as it's just loaded from cache.\nThese are the HTTP headers you can use to deny caching of the page (you can also use meta http-equiv in your HTML):\nCache-Control: no-cache, must-revalidate\nPragma: no-cache\nHere's some sample code\nwhere 'c' is of type '*revel.Controller':\nc.Response.Out.Header().Add(\"Cache-Control\", \"no-cache, must-revalidate\")\nc.Response.Out.Header().Add(\"Pragma\", \"no-cache\")\n. Post code to reproduce this to help the developers debug this issue.\n. ",
    "nadeemc": "Just chiming in here. I vote with @notzippy that the use case here is for a filter. I implement something similar when providing a user object to my controllers.\nThis is an example filter.go file:\n``` go\nfunc init() {\n    revel.InterceptFunc(VerifyAuth, revel.BEFORE, &Dashboard{})\n}\nfunc VerifyAuth(c *revel.Controller) revel.Result {\n    authId := getCookieValue(c, \".auth\")\nvar u User\nvar err error\nif authId == \"\" {\n    err = errors.New(\"AuthId is not set.\")\n} else {\n    u, err = users.GetByAuthId(authId)\n}\n\nif err != nil {\n    if isAjaxRequest(c) {\n        return cr.RenderStatusCode(http.StatusUnauthorized)\n    } else {\n        return c.Redirect(\"/accounts/login/\")\n    }\n}\n\nuser := views.LayoutUser{\n    UserId:     u.UserId,\n    AuthId:     authId,\n    Name:      u.FirstName,\n    Email:       u.EmailAddress,\n}\nc.RenderArgs[\"User\"] = user\nc.Params.Set(\"authId\", authId)\n\nreturn nil\n\n}\nfunc getCookieValue(c *revel.Controller, cookieName string) string {\n    cookie, err := c.Request.Cookie(cookieName)\n    if err == nil {\n        return cookie.Value\n    }\n    return \"\"\n}\nfunc isAjaxRequest(c revel.Controller) bool {\n    acceptHeader := c.Request.Header.Get(\"Accept\")\n    return acceptHeader == \"\" ||\n        strings.Index(acceptHeader, \"/*\") == 0 ||\n        strings.Contains(strings.ToLower(acceptHeader), \"javascript\") ||\n        strings.Contains(strings.ToLower(acceptHeader), \"json\")\n}\n```\nThis would then be the corresponding dashboard.go controller:\n``` go\ntype Dashboard struct {\n    *revel.Controller\n}\nfunc (c Dashboard) Index(authId string) revel.Result {\n    // Access authId value from filter using \"authId\" parameter\n   // Access full user object\n  user := c.RenderArgs[\"User\"].(views.LayoutUser)\n\n}\n```\nWhile using RenderArgs isn't the most ideal approach, this does do what you're asking.\nI think a separate feature though would be to allow InterceptFunc() to not be called on some controller methods, i.e. AllowAnonymous()\nFor the time being to get around that, I use two controllers and then manually configure routes as needed.\n. Wouldn't the opposite approach also work?\nMost go applications compile to a single file with embedded templates. Here you're proposing that modules are antithetical to configuration and view files and should be editable at runtime. Personally I think the opposite is more inline with Go; compile configuration and views into the app and have a smaller set of deployed files.\n. Great examples. And I see what you mean by the original suggestions now. I was (more narrowly) thinking of build systems as the use case for compiling everything.\n. You're trying to get the pointer of the result when you do &Config.String(), that's why it's saying you're trying to use a single value when multiple are returned. Instead, change it to:\ngo\ndriver, _ := Config.String(\"db.driver\")\nDriver = &driver\n. The & symbol is what is assigning the memory reference, so you can remove that to get the original value:\n``` go\n// Assuming you've defined Driver somewhere in the file already\nvar Driver string\n// Read the config value\nvar found bool\nDriver, found = Config.String(\"db.driver\")\nif !found {\n    panic(\"db.driver was not defined in the config file.\")\n}\nfmt.Println(\"Read db.driver value: %s\", Driver)\n```\nYou don't need to do the found check if you don't want to, but it will help ensure the app doesn't try to run with an empty Driver value.\n. P.S. Don't put this logic inside an init() method directly, as revel may not have parsed the config file yet. Instead, set it up as follows:\n``` go\nimport (\n    \"fmt\"\n    \"github.com/revel/revel\"\n)\nvar (\n    Driver string\n)\nfunc init() {\n    revel.OnAppStart(func() {\n        var found bool\n        Driver, found = revel.Config.String(\"db.driver\")\n        if !found {\n            panic(\"db.driver is not defined in the config section.\")\n        }\n    fmt.Println(\"Using db.driver value from config: %s\", Driver)\n})\n\n}\n```\n. ",
    "xuxiangyang": "Thank you... I will try to use godeps. \n. ",
    "kaneshin": "@notzippy \nThanks for your reply!\nActually I just wanna stop running application by breakpoints because to verify code should be passed through.\nI also got the situation of GDB so far.\n- gdb: Wrong values for local variables\nSo, I'm giving up debugging with GDB now. :+1: \nThanks again for your time!!!\n. ",
    "mrichman": "@notzippy Is there any further info out there for debugging Revel with the IntelliJ Go plugin?\n. @jeevatkm It's not helpful because revel apps don't have a main entry point. They are invoked by the revel command. What command line would I pass to the plugin?\n. @jeevatkm Thanks! That worked perfectly. I had no idea about tmp/main.go.\n. ",
    "0kz": "Sorry for the late response, i've been busy making our revel app into production.  Basically it's  godep save -r ./... under the revel app's root path, and it will generate a Godeps folder.\n.\n\u251c\u2500\u2500 app\n\u251c\u2500\u2500 conf\n\u251c\u2500\u2500 Godeps\n\u251c\u2500\u2500 messages\n\u251c\u2500\u2500 public\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run\n\u2514\u2500\u2500 tests\nTo run the revel app, i use a custom script with the following content: \n``` bash\n!/bin/bash\nGOPATH=godep path:$GOPATH revel run www.example.com/myapp/portal \n```\nThere is one problem, the godep save doesn't pull all the content in revel/modules/testrunner, it just pull the  revel/modules/testrunner/app, so when the revel runs it won't start saying no route file found, and I have to get around this by git clone manually the github.com/revel/modules repo and remove the .git info. Other than this, so far so good. \n. \nAdding the lines doesn't help, besides it's a compile error. \n.  We use VPN, so the network is not an issue. I think it's a go version issue. The pprof.Trace support is added in go commit 690db9. And it does't appear in any go releases, including the latest  v1.4, v1.4.1, v.1.4.2 , but it does exit in master branch. Which means i should build go version from the master branch to git rid of this error. For now i will just comment out the line that invokes the pprof.Trace in godeps.\n. ",
    "luciomr": "Has anyone found a way to install and use revel with dep without having to add it to the ignored section in Gopkg.toml?. Did you get revel to work with dep? If so, could you share it, please? The documentation on this is quite scarce.. Hello. Thanks for the quick response. \n\n\nRun deps\n\n\nI don't understand what you mean by running deps. I did the following:\n- I created a Gopkg.toml file based on yours (attached at the bottom) in $GOPATH/src/MYAPP, but I removed those packages which I am not using.\n- I ran dep ensure in $GOPATH/src/MYAPP to get my dependencies installed in $GOPATH/src/MYAPP/vendor .\n- I tried running revel run MYAPP to no avail. The output I get is: /bin/sh: revel: not found.\nI am not sure of what I am missing here. \nMy Gopkg.toml looks like this (removed those packages in your example file which I am not using):\n```\nGopkg.toml example\n\nRefer to https://github.com/golang/dep/blob/master/docs/Gopkg.toml.md\nfor detailed Gopkg.toml documentation.\n\nrequired = [\"github.com/user/thing/cmd/thing\"]\nignored = [\"github.com/user/project/pkgX\", \"bitbucket.org/user/project/pkgA/pkgY\"]\n\n[[constraint]]\nname = \"github.com/user/project\"\nversion = \"1.0.0\"\n\n[[constraint]]\nname = \"github.com/user/project2\"\nbranch = \"dev\"\nsource = \"github.com/myfork/project2\"\n\n[[override]]\nname = \"github.com/x/y\"\nversion = \"2.4.0\"\nrequired = [\"github.com/revel/cmd/revel\"]\n[[override]]\n  version = \"0.19.0\"\n  name = \"github.com/revel/modules\"\n[[override]]\n  version = \"0.19.1\"\n  name = \"github.com/revel/revel\"\n[[override]]\n  version = \"0.14.1\"\n  name = \"github.com/revel/cmd\"\n[[override]]\n  version = \"0.19.1\"\n  name = \"github.com/revel/cron\"\n```\n. That last one did the trick. Thanks!. ",
    "EricYT": "fixed it! I put the websocket in a wrong directory and not go install it. \n. ",
    "gaochao1": "package golang.org/x/net/websocket: unrecognized import path \"golang.org/x/net/websocket\",perhaps was blocked by the firewall.\n\"github.com/golang/net/websocket\" is ok.\n. ",
    "russ168": "Before v0.12.0, even execute a long time task(took more than 10 minutes), it won't occur any problem. The browser can get the results finally. \n. ",
    "chqsark": "I'm having the same problem. In my case, I called a function which takes about 1min before redirecting it to the next page. Everything works fine until the redirection happens and it gives the http proxy EOF error. In the old version revel, everything was fine. \nIs there a way to set longer timeout threshold? \nAnother thing I noticed is that the same revel app runs a lot more quickly on my mac laptop than it does on a powerful linux server (ubuntu). In my app, there are some goroutines doing things concurrently. But I think that wouldn't be the reason for the speed difference. \nAny thoughts? Thanks!\n. @anonx, thanks a lot! it works well after I set the timeout to 0. \nThe speed issue is found to be a mysql insertion loop. It may have nothing to do with revel. However, I'm still figuring out why the speed is so fast on my mac but so slow on ubuntu. I am using prepare statement and database/sql package in golang, and Mysql is local. \n. ",
    "michaelbironneau": "I got the same problem in a stress test - a small proportion of requests produced this error when an upstream database was under stress, same fix as above worked to resolve the issue.\n. That's probably it. I'm using Windows 7, will re-test once #928 is resolved.\n. ",
    "ychartois": "Much better like that ;)\n. ",
    "tvvocold": "Well, You can check our FAQ and find some githubers here. \nAs you can see, G.P provide a HN-like comments platform for opensource project.\n. @pushrax \nWell, i don't think use GH issue traker for user's comment is a better way.\nIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.\n-https://guides.github.com/features/issues/\nGet/Post links/comments.\n-https://github.party/item?id=5\nIf you just don't like it (users comments/upvote), feel free to close this PR:)\n. ",
    "KidFeng": "@anonx Yes, this is whole content at controller/init.go:\n```\nimport (\n    \"github.com/revel/revel\"\n)\nfunc init() {\n    revel.TemplateFuncs[\"calcPage\"] = func(page int) (int, int) {\n        previous := page - 1\n        next := page + 1\n        return previous, next\n    }\n}\n```\n. and my env :\nRevel v0.12.0\ngo version go1.4 darwin/amd64\n. OK, I got it, Thank you @anonx\n. ",
    "avdept": "@anonx As far as i understood from revel doc, there is feature to call functions from html templates(besides those passed into view) ?\n. ",
    "vahid-sohrabloo": "@anonx  I added test. Why you add needs testting tag?\n. @anonx Thank you\n. I'm not Agree. people can use negative numbers.\n. maybe. do you have name suggest?\n. ",
    "bejayoharen": "Okay, I just copied your changes -- no testing. I don't really know how the revel config system works internally.\n. Okay: here's the pull request: https://github.com/revel/revel/pull/940\n. Will do.\n. I think 0 is the best default:\n1. The timeouts are very unintuitive. For example, if you set the write timeout to 1 minute, then the server will timeout if it takes longer than one minute to upload a file. This is because, in the meantime, while uploading, nothing has been written to the socket, so it closes the connection.\n2. Even large values could interfere with connections used for things like long-polling. (Why close a connect used for long-polling just because no data has gone through if you are still getting TCP keep-alives?) I think 0 is very sensible and sane for this use-case as well.\nI think it's better to not use defaults and instead rely on lower-level TCP timeouts, file size limits and so on.\n. @brendensoares For DoS, I would suggest adding the ability to set a minimum data rate, configure TCP timeouts, as well as the ability to limit request sizes (perhaps separate limits for both header and body), instead of socket read/write timeouts.\n. Correct: it serializes to memcache and redis (I believe using gob, not json), but it does not serialize when using the in-memory store. Rather it just keeps the objects around.\nI'm not really sure how to write a test case for this, but I've seen it in live code, and I've traced it back through the source to determine the difference in serialization.\n. ",
    "wangmingjob": "+1 I also met it\n. ",
    "niiamon": "That also doesn't work. What Driver := &driver does it so assign a pointer to driver, to Driver. What I want is the value contained in the variable, not the memory reference.\n. Thanks a lot. I've got it going properly right now. I'm still getting comfortable with Go.\n. ",
    "jmhodges": "The code in question: https://github.com/revel/revel/blob/0d091bfa31943267e4c3f3ffb3bec6082ec6b49f/revel.go#L186-187\n. Ping!\n. I've fixed up the branching issue.\n. Oh! This is on macOS 10.12 Sierra\n. ",
    "zhuharev": "You can show more code(html form and controller)?\n. 7 and 14 are identical to the line, remove one of them\n. c.RenderJson(data)\n. @tommoholmes what type of your data? if byte convert it to string: somevar :=  string(data) and render it: c.Render(somevar)\n. you can call direct revel.MainRouter.Refresh() for refresh all routes\n. ",
    "bertzzie": "Hello,\nI also have the same problem with Polymer.\n. @pedromorgan As per the HTML 5 Import standard here, particularly the fetching import part:\n\n\nFetch a resource from LOCATION with request's origin set to the origin of the master document, the mode to CORS and the credentials mode to same-origin.\nIf fetched response type is error or the response has a header whose name is Content-Disposition:\nAdd LOCATION and null to the import map and stop.\n\n\n\n\na HTML Import will failed if there's a Content-Disposition header. As far as I understand, revel will always sends down Content-Disposition for files served via Static.Serve (CMIIW). I think this might become a problem in the future, once more people use HTML Import in the client side. So I kind of agree that this could be categorized as bug.\nMaybe we need an option to set the Content-Disposition header by URL Pattern or something as the header is indeed really useful.\n. ",
    "PradheepShrinivasan": "@gtolle I am trying to deploy to heroku and i am unable to do so as there is version mismatch in the default build pack.Do you have any success deploying recently to heroku and if so can you share your instructions ?\n. ",
    "Gr1N": "+1 It would be very useful to have cover integration for revel framework.\n. ",
    "mindworker": "I just get started with Revel and it's great so far. But, please integrate coverage reports!\n. ",
    "skategui": "Do you have an idea if it's going to be possible to test the coverage and have a report of the test ? Of it's not something considered right now ... ? \nThanks\n. ",
    "roger-russel-dafiti": "Is there a solution to get coverage from revel test?. ",
    "abepetrillo": "Getting the same issue.\n. ",
    "before30": "I have same issues.. ",
    "tommoholmes": "what I mean. I have json data and I want to display json data to my Html\n. ",
    "gtrevg": "Just a quick comment -- I've been working with RAML for quite a while now and it's been pretty awesome.  There's ever growing support for the spec and I see more and more tools using it every day.\nThere's a number of RAML projects that are doing the same extraction and Server/Client skeleton generation from RAML definitions.\nAn additional benefit is that, when you are defining your input and output using JSONSchema which RAML fully supports, you could also auto generate the validation code for every endpoint.  Here's an example of that that I hacked together one afternoon for a talk:  https://github.com/gtrevg/golang-rest-raml-validation .  This takes advantage of the fact you can !include json schemas and examples.\nAgain, so far, using RAML has been pretty awesome.  It would be great to have a skeleton framework generated from a RAML spec.  That will speed up development tremendously.  Additionally, all your documentation will be up to date.\nThanks\n. ",
    "mrkaspa": "Solved using godeps\n. Great I would like to contribute, how can I do it ?\n. Great thx\n. ",
    "otiai10": "Third solution is here (but it seems a bit irrational)\ngo\nc.Params = &revel.Params{}\n. Thanks for comment.\nMy concern is the way to avoid ParamsFilter WARNs error occurred by using os.Rename.\n. ",
    "xiongxin": "when release v1.0?\n. ",
    "narita-takeru": "@pedromorgan Yes, Exactly!\nSorry, I'm not good at English.\nThank you your correction.\n. No longer necessary.\n. ",
    "wjc133": "@anonx Thx.   I met a new problem on my MacBook.\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/blog : too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/blog: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/group : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/group: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/group: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/user : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/user: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/member/user: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/note : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/note: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/note: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/notebook : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/notebook: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/notebook: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/oauth : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/oauth: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/oauth: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/share : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/share: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/share: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/leanote/leanote/app/views/user : open /Users/df/mygo/src/github.com/leanote/leanote/app/views/user: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/leanote/leanote/app/views/user: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/revel/revel/templates : too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/revel/revel/templates: too many open files\nERROR 2015/08/23 16:25:02 watcher.go:124: Failed to watch /Users/df/mygo/src/github.com/revel/modules/testrunner/app/views : too many open files\nERROR 2015/08/23 16:25:02 watcher.go:89: Error walking path: open /Users/df/mygo/src/github.com/revel/modules/testrunner/app/views: too many open files\nERROR 2015/08/23 16:25:02 server.go:127: Failed to listen: listen tcp :59420: socket: too many open files\nI tried many methods.But it doesn't work.\nHow to solve it?\n. @anonx OK! It works! Thank you very much indeed.\n. ",
    "onlyjob": "Please keep this bug open until fix is merged.\n. Five months later this is still an issue.  :(\n. Any progress please?\n. ",
    "ianterrell": "Requested pull into master by default and accident. Closing in favor of https://github.com/revel/revel/pull/986.\n. @notzippy Hello! I was simply going through my list of notifications and closing PRs which I thought were stale and undesired. If this is useful to you, please do use it.. ",
    "sadeghebadi": "We have Issues after this commit , When we send  data form in this structure , and want to bind this posted data from html form to map we get following error .\nhtml form data:\n<input name=\"invisible[32ffb9e6-92d2-11e7-b1bf-54a050de5eca]\" value=\"on\" type=\"checkbox\" >\nin Controller we want to bind in map:\nvar invisible map[string]string\nc.Params.Bind(&invisible, \"invisible\")\nthis error occurred;\nruntime error: slice bounds out of range\n998\ncommit : \nf8ae517\n@notzippy \n. ",
    "acegishniz": "i have this issue too. @notzippy\n```\nRuntime Panic\nruntime error: slice bounds out of range\n```\nstack trace: \n```\nCall Stack\n/home/acegishniz/gowork/src/github.com/vada/wedio/app/controllers/admin/CategoryController.go:267 +0xd8\ngithub.com/vada/wedio/app/controllers/admin.(CategoryController).PostBatchEdit(0xc420318680, 0xc420b057cd, 0x24, 0x0, 0x0)\n    :605 +0x81\nreflect.Value.call(0xb165a0, 0xc420318680, 0x4e13, 0xb1cdbd, 0x4, 0xc4203776c0, 0x1, 0x1, 0xa41660, 0xa41601, ...)\n    /usr/local/go/src/reflect/value.go:434 +0x5c8\nreflect.Value.Call(0xb165a0, 0xc420318680, 0x4e13, 0xc4203776c0, 0x1, 0x1, 0x0, 0x1, 0x0)\n    /usr/local/go/src/reflect/value.go:302 +0xa4\ngithub.com/revel/revel.ActionInvoker(0xc4203e7e10, 0xc420720508, 0x0, 0x0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/invoker.go:45 +0x632\ngithub.com/revel/revel.CompressFilter(0xc4203e7e10, 0xc420720508, 0x1, 0x1)\n    /home/acegishniz/gowork/src/github.com/revel/revel/compress.go:84 +0x9e\ngithub.com/revel/revel.InterceptorFilter(0xc4203e7e10, 0xc420720500, 0x2, 0x2)\n    /home/acegishniz/gowork/src/github.com/revel/revel/intercept.go:108 +0xee\ngithub.com/vada/wedio/app.glob..func2(0xc4203e7e10, 0xc4207204f8, 0x3, 0x3)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/init.go:200 +0x19b\ngithub.com/vada/wedio/app.glob..func1(0xc4203e7e10, 0xc4207204f0, 0x4, 0x4)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/init.go:192 +0x146\ngithub.com/revel/revel.I18nFilter(0xc4203e7e10, 0xc4207204e8, 0x5, 0x5)\n    /home/acegishniz/gowork/src/github.com/revel/revel/i18n.go:212 +0x2ff\ngithub.com/revel/revel.ValidationFilter(0xc4203e7e10, 0xc4207204e0, 0x6, 0x6)\n    /home/acegishniz/gowork/src/github.com/revel/revel/validation.go:269 +0x1b5\ngithub.com/vada/wedio/app/modules/revel-csrf.glob..func1(0xc4203e7e10, 0xc4207204d8, 0x7, 0x7)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/modules/revel-csrf/csrf.go:99 +0x333\ngithub.com/vada/wedio/app/filters.SkipCsrfForApiCall(0xc4203e7e10, 0xc4207204d0, 0x8, 0x8)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/filters/skipcsrf.go:18 +0x114\ngithub.com/vada/wedio/app/filters.RateLimiterFilter(0xc4203e7e10, 0xc4207204c8, 0x9, 0x9)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/filters/limiter.go:16 +0x78f\ngithub.com/revel/revel.FlashFilter(0xc4203e7e10, 0xc4207204c0, 0xa, 0xa)\n    /home/acegishniz/gowork/src/github.com/revel/revel/flash.go:50 +0x138\ngithub.com/revel/revel.SessionFilter(0xc4203e7e10, 0xc4207204b8, 0xb, 0xb)\n    /home/acegishniz/gowork/src/github.com/revel/revel/session.go:158 +0x126\ngithub.com/revel/revel.ParamsFilter(0xc4203e7e10, 0xc4207204b0, 0xc, 0xc)\n    /home/acegishniz/gowork/src/github.com/revel/revel/params.go:179 +0xb2\ngithub.com/revel/revel.FilterConfiguringFilter(0xc4203e7e10, 0xc4207204a8, 0xd, 0xd)\n    /home/acegishniz/gowork/src/github.com/revel/revel/filterconfig.go:211 +0x128\ngithub.com/vada/wedio/app/controllers/admin.glob..func1(0xc4203e7e10, 0xc4207204a0, 0xe, 0xe)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/controllers/admin/AppDashboardController.go:62 +0xcf\ngithub.com/revel/revel.RouterFilter(0xc4203e7e10, 0xc420720498, 0xf, 0xf)\n    /home/acegishniz/gowork/src/github.com/revel/revel/router.go:789 +0x2cc\ngithub.com/revel/revel.PanicFilter(0xc4203e7e10, 0xc420720490, 0x10, 0x10)\n    /home/acegishniz/gowork/src/github.com/revel/revel/panic.go:20 +0x94\ngithub.com/revel/revel.glob..func32(0xc4203e7e10, 0xc420720488, 0x11, 0x11)\n    /home/acegishniz/gowork/src/github.com/revel/revel/watcher.go:222 +0x7a\ngithub.com/revel/revel.handleInternal(0xe647a0, 0xc4203ed6c0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server-engine.go:145 +0x4d8\ngithub.com/revel/revel.(GoHttpServer).Handle(0xc4203cdd10, 0xe67b60, 0xc420193930, 0xc4203d6b40)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:101 +0x2ef\ngithub.com/revel/revel.(GoHttpServer).Init.func3(0xe67b60, 0xc420193930, 0xc4203d6b40)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:43 +0x48\nnet/http.HandlerFunc.ServeHTTP(0xc4203e4360, 0xe67b60, 0xc420193930, 0xc4203d6b40)\n    /usr/local/go/src/net/http/server.go:1726 +0x44\nnet/http.serverHandler.ServeHTTP(0xc4203f2000, 0xe67b60, 0xc420193930, 0xc4203d6b40)\n    /usr/local/go/src/net/http/server.go:2202 +0x7d\nnet/http.(conn).serve(0xc4203bfa00, 0xe68460, 0xc4202df340)\n    /usr/local/go/src/net/http/server.go:1579 +0x4b7\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2293 +0x44d\n. I have commented panic filter and update revel with `go get -u github.com/revel/cmd/revel\n`\noutput:\ngoroutine 147 [running]:\nnet/http.(conn).serve.func1(0xc420328280)\n    /usr/local/go/src/net/http/server.go:1491 +0x12a\npanic(0xa6f160, 0xc420010180)\n    /usr/local/go/src/runtime/panic.go:458 +0x243\ngithub.com/revel/revel.InterceptorFilter.func1(0xc4203fc1a0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/intercept.go:98 +0x7d\npanic(0xa6f160, 0xc420010180)\n    /usr/local/go/src/runtime/panic.go:458 +0x243\ngithub.com/revel/revel.bindMap(0xc420391ce0, 0xb1d2aa, 0x9, 0xe671a0, 0xa6c740, 0x16, 0xa28280, 0xc420295db0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/binder.go:436 +0x50f\ngithub.com/revel/revel.Bind(0xc420391ce0, 0xb1d2aa, 0x9, 0xe671a0, 0xa6c740, 0x195, 0xab37f321c9a7526, 0xe899c0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/binder.go:463 +0x7d\ngithub.com/revel/revel.(Params).Bind(0xc420391ce0, 0xa28280, 0xc420295db0, 0xb1d2aa, 0x9)\n    /home/acegishniz/gowork/src/github.com/revel/revel/params.go:100 +0x161\ngithub.com/vada/wedio/app/controllers/admin.CategoryController.PostBatchEdit(0xc4203fc1a0, 0x0, 0x0, 0x0, 0xc420b92aad, 0x24, 0x0, 0x0)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/controllers/admin/CategoryController.go:267 +0xd8\ngithub.com/vada/wedio/app/controllers/admin.(CategoryController).PostBatchEdit(0xc4203dd960, 0xc420b92aad, 0x24, 0x0, 0x0)\n    :605 +0x81\nreflect.Value.call(0xb111e0, 0xc4203dd960, 0x4e13, 0xb179f5, 0x4, 0xc4202d4e40, 0x1, 0x1, 0xa3cd00, 0xa3cd01, ...)\n    /usr/local/go/src/reflect/value.go:434 +0x5c8\nreflect.Value.Call(0xb111e0, 0xc4203dd960, 0x4e13, 0xc4202d4e40, 0x1, 0x1, 0x0, 0x1, 0x0)\n    /usr/local/go/src/reflect/value.go:302 +0xa4\ngithub.com/revel/revel.ActionInvoker(0xc4203fc1a0, 0xc42008c358, 0x0, 0x1)\n    /home/acegishniz/gowork/src/github.com/revel/revel/invoker.go:45 +0x632\ngithub.com/revel/revel.CompressFilter(0xc4203fc1a0, 0xc42008c350, 0x1, 0x2)\n    /home/acegishniz/gowork/src/github.com/revel/revel/compress.go:84 +0x9e\ngithub.com/revel/revel.InterceptorFilter(0xc4203fc1a0, 0xc42008c348, 0x2, 0x3)\n    /home/acegishniz/gowork/src/github.com/revel/revel/intercept.go:108 +0xee\ngithub.com/vada/wedio/app.glob..func2(0xc4203fc1a0, 0xc42008c340, 0x3, 0x4)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/init.go:200 +0x19b\ngithub.com/vada/wedio/app.glob..func1(0xc4203fc1a0, 0xc42008c338, 0x4, 0x5)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/init.go:192 +0x146\ngithub.com/revel/revel.I18nFilter(0xc4203fc1a0, 0xc42008c330, 0x5, 0x6)\n    /home/acegishniz/gowork/src/github.com/revel/revel/i18n.go:212 +0x2ff\ngithub.com/revel/revel.ValidationFilter(0xc4203fc1a0, 0xc42008c328, 0x6, 0x7)\n    /home/acegishniz/gowork/src/github.com/revel/revel/validation.go:269 +0x1b5\ngithub.com/vada/wedio/app/modules/revel-csrf.glob..func1(0xc4203fc1a0, 0xc42008c320, 0x7, 0x8)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/modules/revel-csrf/csrf.go:99 +0x333\ngithub.com/vada/wedio/app/filters.SkipCsrfForApiCall(0xc4203fc1a0, 0xc42008c318, 0x8, 0x9)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/filters/skipcsrf.go:18 +0x114\ngithub.com/vada/wedio/app/filters.RateLimiterFilter(0xc4203fc1a0, 0xc42008c310, 0x9, 0xa)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/filters/limiter.go:16 +0x78f\ngithub.com/revel/revel.FlashFilter(0xc4203fc1a0, 0xc42008c308, 0xa, 0xb)\n    /home/acegishniz/gowork/src/github.com/revel/revel/flash.go:50 +0x138\ngithub.com/revel/revel.SessionFilter(0xc4203fc1a0, 0xc42008c300, 0xb, 0xc)\n    /home/acegishniz/gowork/src/github.com/revel/revel/session.go:158 +0x126\ngithub.com/revel/revel.ParamsFilter(0xc4203fc1a0, 0xc42008c2f8, 0xc, 0xd)\n    /home/acegishniz/gowork/src/github.com/revel/revel/params.go:179 +0xb2\ngithub.com/revel/revel.FilterConfiguringFilter(0xc4203fc1a0, 0xc42008c2f0, 0xd, 0xe)\n    /home/acegishniz/gowork/src/github.com/revel/revel/filterconfig.go:211 +0x128\ngithub.com/vada/wedio/app/controllers/admin.glob..func1(0xc4203fc1a0, 0xc42008c2e8, 0xe, 0xf)\n    /home/acegishniz/gowork/src/github.com/vada/wedio/app/controllers/admin/AppDashboardController.go:62 +0xcf\ngithub.com/revel/revel.RouterFilter(0xc4203fc1a0, 0xc42008c2e0, 0xf, 0x10)\n    /home/acegishniz/gowork/src/github.com/revel/revel/router.go:789 +0x2cc\ngithub.com/revel/revel.glob..func32(0xc4203fc1a0, 0xc42008c2d8, 0x10, 0x11)\n    /home/acegishniz/gowork/src/github.com/revel/revel/watcher.go:222 +0x7a\ngithub.com/revel/revel.handleInternal(0xe5d7e0, 0xc4203fada0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server-engine.go:145 +0x4d8\ngithub.com/revel/revel.(GoHttpServer).Handle(0xc4203dbce0, 0xe60ba0, 0xc420978c30, 0xc420b28d20)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:101 +0x2ef\ngithub.com/revel/revel.(GoHttpServer).Init.func3(0xe60ba0, 0xc420978c30, 0xc420b28d20)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:43 +0x48\nnet/http.HandlerFunc.ServeHTTP(0xc4203ec500, 0xe60ba0, 0xc420978c30, 0xc420b28d20)\n    /usr/local/go/src/net/http/server.go:1726 +0x44\nnet/http.serverHandler.ServeHTTP(0xc4203ee100, 0xe60ba0, 0xc420978c30, 0xc420b28d20)\n    /usr/local/go/src/net/http/server.go:2202 +0x7d\nnet/http.(conn).serve(0xc420328280, 0xe614a0, 0xc420655c00)\n    /usr/local/go/src/net/http/server.go:1579 +0x4b7\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2293 +0x44d  section=system \nINFO  10:35:23    app reverseproxy.go:279: http: proxy error: EOF                    section=system \n```. I have tested on a sample code, and the problem is not solved.\nHere's my code:\ncontrollers/app.go:\n```\n[...]\ntype App struct {\n    *revel.Controller\n}\nfunc (c App) Index() revel.Result {\n    return c.Render()\n}\nfunc (c App) IndexPost() revel.Result {\nvar invisible map[string]string\nc.Params.Bind(&invisible, \"invisible\")\nreturn c.Redirect(routes.App.Index())\n\n}\n```\nviews/App/Index.html:\n``\n[...]\n        <form role=\"form\" action=\"{{urlApp.IndexPost`}}\" method=\"POST\">\n        <table>\n            <thead>\n            <tr>\n                <th> invisible</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td>\n                    <input name=\"invisible[46a9cb32-7081-11e7-83e4-663263313934]\"\n                           value=\"on\" type=\"checkbox\">\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <button type=\"submit\" name=\"submit\"> Submit</button>\n\n    </form>\n\n[...]\n```\napp/routes:\nGET     /                     App.Index\nPOST    /                     App.IndexPost\nAnd revel version command output on terminal:\n```\nDEBUG 12:58:16  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 12:58:16  revel template_engine.go:45: Registered template engine loaded         section=template go=nil LOG15_ERROR=\"Normalized odd number of arguments by adding nil\" \n~\n~ revel! http://revel.github.io\n~\nVersion(s):\n   Revel v0.19.0 (2018-02-06)\n   go1.7.4 linux/amd64\n```\nand the panic:\n```\nINFO  13:00:42    app server.go:2317: http: panic serving 127.0.0.1:60988: runtime error: slice bounds out of range\ngoroutine 47 [running]:\nnet/http.(conn).serve.func1(0xc42036cc00)\n    /usr/local/go/src/net/http/server.go:1491 +0x12a\npanic(0x83d660, 0xc420010180)\n    /usr/local/go/src/runtime/panic.go:458 +0x243\ngithub.com/revel/revel.InterceptorFilter.func1(0xc42022b040)\n    /home/acegishniz/gowork/src/github.com/revel/revel/intercept.go:98 +0x7d\npanic(0x83d660, 0xc420010180)\n    /usr/local/go/src/runtime/panic.go:458 +0x243\ngithub.com/revel/revel.bindMap(0xc420309860, 0x8b923d, 0x9, 0xac1e40, 0x83b820, 0x16, 0x806f40, 0xc4202f8390)\n    /home/acegishniz/gowork/src/github.com/revel/revel/binder.go:437 +0x50f\ngithub.com/revel/revel.Bind(0xc420309860, 0x8b923d, 0x9, 0xac1e40, 0x83b820, 0x195, 0x0, 0xc420030800)\n    /home/acegishniz/gowork/src/github.com/revel/revel/binder.go:464 +0x7d\ngithub.com/revel/revel.(Params).Bind(0xc420309860, 0x806f40, 0xc4202f8390, 0x8b923d, 0x9)\n    /home/acegishniz/gowork/src/github.com/revel/revel/params.go:100 +0x161\ngithub.com/acegishniz/my-app/app/controllers.App.IndexPost(0xc42022b040, 0xc4202f4b20, 0xc420126bc8)\n    /home/acegishniz/gowork/src/github.com/acegishniz/my-app/app/controllers/app.go:20 +0x78\ngithub.com/acegishniz/my-app/app/controllers.(App).IndexPost(0xc42002f248, 0x0, 0x0)\n    :29 +0x52\nreflect.Value.call(0x8a5540, 0xc42002f248, 0x1213, 0x8b442e, 0x4, 0x0, 0x0, 0x0, 0xc4202f8370, 0x13, ...)\n    /usr/local/go/src/reflect/value.go:434 +0x5c8\nreflect.Value.Call(0x8a5540, 0xc42002f248, 0x1213, 0x0, 0x0, 0x0, 0xc42002f248, 0x1213, 0xab7ca0)\n    /usr/local/go/src/reflect/value.go:302 +0xa4\ngithub.com/revel/revel.ActionInvoker(0xc42022b040, 0xc42037ead8, 0x0, 0x0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/invoker.go:45 +0x632\ngithub.com/revel/revel.CompressFilter(0xc42022b040, 0xc42037ead8, 0x1, 0x1)\n    /home/acegishniz/gowork/src/github.com/revel/revel/compress.go:84 +0x9e\ngithub.com/revel/revel.InterceptorFilter(0xc42022b040, 0xc42037ead0, 0x2, 0x2)\n    /home/acegishniz/gowork/src/github.com/revel/revel/intercept.go:108 +0xee\ngithub.com/acegishniz/my-app/app.glob..func1(0xc42022b040, 0xc42037eac8, 0x3, 0x3)\n    /home/acegishniz/gowork/src/github.com/acegishniz/my-app/app/init.go:49 +0x18e\ngithub.com/revel/revel.I18nFilter(0xc42022b040, 0xc42037eac0, 0x4, 0x4)\n    /home/acegishniz/gowork/src/github.com/revel/revel/i18n.go:212 +0x2ff\ngithub.com/revel/revel.ValidationFilter(0xc42022b040, 0xc42037eab8, 0x5, 0x5)\n    /home/acegishniz/gowork/src/github.com/revel/revel/validation.go:269 +0x1b5\ngithub.com/revel/revel.FlashFilter(0xc42022b040, 0xc42037eab0, 0x6, 0x6)\n    /home/acegishniz/gowork/src/github.com/revel/revel/flash.go:50 +0x138\ngithub.com/revel/revel.SessionFilter(0xc42022b040, 0xc42037eaa8, 0x7, 0x7)\n    /home/acegishniz/gowork/src/github.com/revel/revel/session.go:158 +0x126\ngithub.com/revel/revel.ParamsFilter(0xc42022b040, 0xc42037eaa0, 0x8, 0x8)\n    /home/acegishniz/gowork/src/github.com/revel/revel/params.go:179 +0xb2\ngithub.com/revel/revel.FilterConfiguringFilter(0xc42022b040, 0xc42037ea98, 0x9, 0x9)\n    /home/acegishniz/gowork/src/github.com/revel/revel/filterconfig.go:211 +0x128\ngithub.com/revel/revel.RouterFilter(0xc42022b040, 0xc42037ea90, 0xa, 0xa)\n    /home/acegishniz/gowork/src/github.com/revel/revel/router.go:790 +0x2cc\ngithub.com/revel/revel.glob..func32(0xc42022b040, 0xc42037ea88, 0xb, 0xb)\n    /home/acegishniz/gowork/src/github.com/revel/revel/watcher.go:222 +0x7a\ngithub.com/revel/revel.handleInternal(0xab9920, 0xc4202478c0)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server-engine.go:145 +0x4d8\ngithub.com/revel/revel.(GoHttpServer).Handle(0xc420229fb0, 0xabc6e0, 0xc42035e5b0, 0xc42037ca50)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:101 +0x2ef\ngithub.com/revel/revel.(GoHttpServer).Init.func3(0xabc6e0, 0xc42035e5b0, 0xc42037ca50)\n    /home/acegishniz/gowork/src/github.com/revel/revel/server_adapter_go.go:43 +0x48\nnet/http.HandlerFunc.ServeHTTP(0xc42023a9b0, 0xabc6e0, 0xc42035e5b0, 0xc42037ca50)\n    /usr/local/go/src/net/http/server.go:1726 +0x44\nnet/http.serverHandler.ServeHTTP(0xc420235280, 0xabc6e0, 0xc42035e5b0, 0xc42037ca50)\n    /usr/local/go/src/net/http/server.go:2202 +0x7d\nnet/http.(conn).serve(0xc42036cc00, 0xabcfa0, 0xc420367800)\n    /usr/local/go/src/net/http/server.go:1579 +0x4b7\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2293 +0x44d  section=system \nINFO  13:00:42    app reverseproxy.go:279: http: proxy error: EOF                    section=system \n``.Here is the screenshot of error:`\n\n. ",
    "wmh": "A test case already included in binder_test.go, is that enough as a simple example?\n. ",
    "peterkellyonline": "@pedromorgan Use case is when you want to return any Content-Type you want e.g. any from this list\nhttp://www.freeformatter.com/mime-types-list.html#mime-types-list\nA workaround in my code is to do the following\nc.Response.Out.Header().Set(\"Content-Disposition\", \"attachment;filename=\"test.eml\")\n    resp.WriteHeader(http.StatusOK, \"message/rfc822; charset=utf-8\")\n    resp.Out.Write([]byte(c.Data))\nBut a generic Custom Render method taking a ContentType param would be great. I had honestly forgot about this PR :)\n. ",
    "oherych": "@alkchr, Yes. It was created by revel new. I create new empty project i got same mistake\nMy Golang version\noherych@bukashka:~/go/src/bitbucket.org/bukorama$ go version\ngo version xgcc (Ubuntu 4.9.1-0ubuntu1) 4.9.1 linux/amd64\nI added debug code\n```\nfunc (c *Controller) Render(extraRenderArgs ...interface{}) Result {\n    c.setStatusIfNil(http.StatusOK)\nlog.Println(runtime.Caller(0))\nlog.Println(runtime.Caller(1))\nlog.Println(runtime.Caller(2))\nlog.Println(runtime.Caller(3))\n\n...\n```\nAnd I get\n2015/11/26 09:54:09 controller.go:90: 4413410 /home/oherych/go/src/github.com/revel/revel/controller.go 90 true\n2015/11/26 09:54:09 controller.go:91: 4315294 /home/oherych/go/src/github.com/revel/modules/jobs/app/controllers/status.go 10 true\n2015/11/26 09:54:09 controller.go:92: 4314767 /home/oherych/go/src/github.com/revel/modules/jobs/app/controllers/status.go 25 true\n2015/11/26 09:54:09 controller.go:93: 140642171997375  0 true\n/home/oherych/go/src/github.com/revel/modules/jobs/app/controllers/status.go  line:10\n9 : type Jobs struct {\n10: *revel.Controller\n11: }\n/home/oherych/go/src/github.com/revel/modules/jobs/app/controllers/status.go line: 25\n24: entries := jobs.MainCron.Entries()\n25: return c.Render(entries)\n}\n. ",
    "fereidani": "@alkchr  , good day ,\nyes , it can be but it raise human error factor in large programs with large set of controllers and routes,\nfor example developer accidently forgot to add this to one controller ,\nand other problem remains in multilayer authentication ,\nthe Next() method need to be coded once for a route subpath and there is no need to more coding and direct attention to security layer in next Controller level .\nit kinda give neat architecture to program and avoid repeating one action multiple times.\n. thank you it seems nice approach  ,\nbut i still think Next() provide more flexible request flow control and human error prevented solution to application ,\nit can even handle static file accesses base on route ,\nmany other route base ideas can be implemented easily ( logging , security , complicate request flow control )\nmaybe i have wrong idea in revel application design , is any way in revel to intercept a route instead of controller ?\nyou can check expressjs documentation http://expressjs.com/4x/api.html#app.METHOD .\ni'm not trying to make revel like express , i know they have very different design philosophy , but i think when some approach seems more stable , it worth to check it at least .\ni don't think it'll be to hard to implement , i can help , if community accept this proposal .\n. @alkchr thank you .\n. ",
    "douglarek": "@littlexiang thanks, revel build\n```\n~\n~ revel! http://revel.github.io\n~\nbuild [import path] [target path]\nBuild the Revel web application named by the given import path.\nThis allows it to be deployed and run on a machine that lacks a Go installation.\nWARNING: The target path will be completely deleted, if it already exists!\nFor example:\nrevel build github.com/revel/samples/chat /tmp/chat\n\n```\nmaybe [target path] should be an absolutely path; but IMO, revel should recognize a relative one.\n. ",
    "whidbey": "no,route config in file is more convinence I think.\n. ",
    "ziyouchutuwenwu": "ok, thank you\n. ",
    "fduxiao": "@xpbliss My current solution is writing {{set . \"action\" (url \"Users.Create\")}} in the template, but I think it should be decided when the app is compiled. c.Action has to take arguments but I can't give them because those data is post from another page so is there a good solution?\n. ",
    "dreadiscool": "Yes, it's in the app directory. The host OS is Windows 10, and the guest OS is Linux. I have /home/notroot/go/src/panel symlinked to /media/sf_Development/panel. I'm editing on Windows via Sublime Text. The shared directory appears to be working, but Revel isn't able to notice the changes\n. It's the latest version of Revel as of 2 days ago, and it's Go 1.5\n. @mattbaird Revel with symlinks and mounted directories appear to create all kinds of problems for the app lol\n. It looks like my original diagnosis was incorrect - it appears that Revel is somehow caching the old version of the document, and serving that instead. \nBasically, let's say I have a file \"file.js\" of length 10 bytes. If I update it, and append something - the file length becomes 12 bytes. Revel will display the first 10 bytes correctly, but the last 2 characters will be question marks in a black diamond.\nConversely, let's say that file.js was\n123456789\nThen, I replaced the document, and instead put in \"hello\", Revel serves me...\n12345 - as many characters as there are in \"hello\".\nFor some reason, this seems to survive a restart of the app as well (I am porting an application from Laravel to Revel, so a lot of these files pre-existed, which is why the problem did not crop up until now)\n. I found out the cause of the problem, and how to reliably reproduce it.\nRevel does not seem to symlinks - there is no \"old caching error\" when the Revel app is not symlinked. However, if you run a symlink (such was my setup, with $GOPATH/src/panel symlinked to /media/sf_Development) Revel seems to load the wrong file, causing what looks like poor caching. \nDeleting the symlink, and working in that directory itself fixes the problem. \n. After looking further, the problem also occurs for mounted directories the same way it occurs for symlinked files.\n. @pedromorgan \nMy GOPATH is /home/notroot/documents/go\nI have a Virtualbox shared directory mounted to $GOPATH/panel\nThe name of the revel app is panel. Any time I run via revel run panel, Revel appears to use the contents of the old file, but the length of the new file, for any files served with Static.Serve in the routes\nFor example, let's say $GOPATH/panel/public/js/panel.js first contained\nconsole.log('Hello, world');\nIf I update panel.js to say\n1234\nAnd then refresh the page, or restart Revel, this is the output that I'm given\ncons\nIt appears to be getting the correct length of the new file, but the contents are the old version of the file. If I make the new copy of the file longer than the original, e.g. I updated panel.js to say\n_console.log('Hello, world'); // Comment!\nThen, the response I'd get from the Revel server is\n_console.log('Hello, world'); (and then a bunch of null bytes)\nHowever, if I have not used a mounted directory, then it works fine.\n. Here's a video showcasing the problem, in case I didn't explain it clearly enough (it'd kind of hard to explain via words)\nhttps://shotr.io/BaiZq.mp4\n. I'm using Windows 10, with the guest os as Debian (Crunchbang)\n. Nice, thanks!\n. ",
    "archeious": "Thank you, that is exactly what I was needing.\n. ",
    "ColinChartier": "I didn't realize enabling ssl completely disabled http serving from revel; properly redirecting http traffic to https and then routing everything to 443 did the trick.\n. ",
    "protraf-paras": "Just realized, I was trying to import the wrong app file\napp2 was importing app1. My bad\n. ",
    "harryge00": "eh...it is because I installed two version of golang into the same directory...\n. ",
    "u007": "Im suggesting a .format support in http.go\n. Hi Pete,\nYes, . ext is the plan\nOn May 20, 2016 8:34 AM, \"Pete Morgan\" notifications@github.com wrote:\n\nAre us suggesting a .ext ?? in controller input ??\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/1045#issuecomment-220488767\n. I think it will be nice that we can set filter for both, but I'm actually\ntalking about filter for csrf that will only applies to HTML format or non\nstatic paths\nOn May 20, 2016 8:33 AM, \"Pete Morgan\" notifications@github.com wrote:\nIs this for static, or dynamic ??\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/1046#issuecomment-220488565\n. Yes I added my work around aka the manual if before running filter. Would\nbe nice if we have option to pass in file extension. But this will need the\n.ext in route to work as well\nOn May 20, 2016 1:34 PM, \"alkchr\" notifications@github.com wrote:\nit seems to apply header for static files as well such as images and css\nand js\nThat's due to the fact that in Revel static assets are served using Serve\naction\nhttps://github.com/revel/modules/blob/master/static/app/controllers/static.go#L45-L53.\nSo, there is no difference between static files and dynamic actions,\nactions take part in both cases.\nWhen implementing CSRF protection you can check whether current\nc.Controller.Action to make sure it is not equal to Static.Serve. Though,\nthis feels kind of hacky.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/1046#issuecomment-220521069\n. travis error?\ngithub.com/bradfitz/gomemcache/memcache\n # golang.org/x/sys/unix\n../../../golang.org/x/sys/unix/asm.s:8 6a: No such file or directory: textflag.h\ngithub.com/garyburd/redigo/internal\ngithub.com/garyburd/redigo/redis\ngithub.com/robfig/go-cache\nThe command \"go get -v github.com/revel/revel/...\" failed and exited with 2 during .\nYour build has been stopped.\n. \ud83d\udc4d \n. im suspecting my crash was due to gorp sql connection idle timed out.\nim currently testing it by setting\ndb.SetMaxIdleConns(0)\ndb.SetConnMaxLifetime(time.Minute) //1minute\n\nbut what is the recommended way to debug this type of issues on production?\nthe error seems very generic and does not show any crash?\nbut previous ive had similar issue with csrf plugin, with similar error.\nanyway to log the full stack errors by revel?\n. Hi,\nI found the crash was due to gorp using db/mysql connection idle issue. No\ncustom template function yet.\nOn 11 May 2016 10:27 pm, \"notzippy\" notifications@github.com wrote:\n\nIt does sound like you are missing some part of the error. Are you seeing\nthis message in the log file? Is there anything printed to stderr? If a\ntemplate function panics you will get a misleading error I think, do you\nhave any custom template functions?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/revel/revel/issues/1049#issuecomment-218475992\n. it did not happen on my machine cox im using it within 1 user,\nbut on production, it crashes with this in log\nError running: signal: broken pipe\n\ndoes this count as panic?\ni dont have any panic handler\n. maybe u can duplicate the issue if u initialize gorp mysql driver\nand then refresh the page, then shutdown mysql, and then refresh the page again\nmakesure the page has mysql queries\n. ",
    "cavaliercoder": "My recommendation with limited research into alternatives would be:\n- Allow users to create a .revelignore in the root of their revel project. This file contains one path glob pattern per line (e.g. node_modules/ or *.tmp)\n- When revel build is run (somewhere around revel/cmd/revel/build.go:L70), it will:\n  - check for the existence of the ignore file\n  - read each pattern by line\n  - instead of calling mustCopyDir, it would recursively iterate through each file path in the project root and test each glob pattern against each path. If none of the patterns match, the file is copied into the destination package\n  - child directories which match a pattern are not drilled into\n. ",
    "zllc": "thanks! It can run well now.\n. ",
    "1vn": "Getting the same problem after updating to v0.13 on Windows 10. Also tried removing all revel files and using \"go get\" again for revel/cmd and revel/revel but to no avail. \n. @jeevatkm same issue, unfortunately.\n. ",
    "mageddo": "@jeevatkm  Ok, the problem is that this build generate some files that are not compiled, is there anyway of compile everything inside the binary file?\n. Of course, for example the chat\nWhen I run \n$ revel build github.com/revel/samples/chat /tmp/chat-build prod\nIt generates the folow tree. This way my source code is exposed to the final user, I want that all files be compiled to the binary and no one source file be exposed, do you understand?\n.\n\u251c\u2500\u2500 chat\n\u251c\u2500\u2500 run.bat\n\u251c\u2500\u2500 run.sh\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 github.com\n        \u2514\u2500\u2500 revel\n            \u251c\u2500\u2500 modules\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 static\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 controllers\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 static.go\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 testrunner\n            \u2502\u00a0\u00a0     \u251c\u2500\u2500 app\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 testrunner.go\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 plugin.go\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 TestRunner\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u251c\u2500\u2500 FailureDetail.html\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u251c\u2500\u2500 Index.html\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 SuiteResult.html\n            \u2502\u00a0\u00a0     \u251c\u2500\u2500 conf\n            \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 routes\n            \u2502\u00a0\u00a0     \u2514\u2500\u2500 public\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 css\n            \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap.min.css\n            \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 github.css\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 images\n            \u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 favicon.png\n            \u2502\u00a0\u00a0         \u2514\u2500\u2500 js\n            \u2502\u00a0\u00a0             \u251c\u2500\u2500 bootstrap.min.js\n            \u2502\u00a0\u00a0             \u251c\u2500\u2500 highlight.pack.js\n            \u2502\u00a0\u00a0             \u2514\u2500\u2500 jquery-1.9.1.min.js\n            \u251c\u2500\u2500 revel\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mime-types.conf\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 templates\n            \u2502\u00a0\u00a0     \u2514\u2500\u2500 errors\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 403.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 403.json\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 403.txt\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 403.xml\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 404-dev.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 404.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 404.json\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 404.txt\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 404.xml\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 405.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 405.json\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 405.txt\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 405.xml\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 500-dev.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 500.html\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 500.json\n            \u2502\u00a0\u00a0         \u251c\u2500\u2500 500.txt\n            \u2502\u00a0\u00a0         \u2514\u2500\u2500 500.xml\n            \u2514\u2500\u2500 samples\n                \u2514\u2500\u2500 chat\n                    \u251c\u2500\u2500 app\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 chatroom\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 chatroom.go\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.go\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 longpolling.go\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 refresh.go\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 websocket.go\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 routes\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 routes.go\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tmp\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 main.go\n                    \u2502\u00a0\u00a0 \u2514\u2500\u2500 views\n                    \u2502\u00a0\u00a0     \u251c\u2500\u2500 Application\n                    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 Index.html\n                    \u2502\u00a0\u00a0     \u251c\u2500\u2500 footer.html\n                    \u2502\u00a0\u00a0     \u251c\u2500\u2500 header.html\n                    \u2502\u00a0\u00a0     \u251c\u2500\u2500 LongPolling\n                    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 Room.html\n                    \u2502\u00a0\u00a0     \u251c\u2500\u2500 Refresh\n                    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 Room.html\n                    \u2502\u00a0\u00a0     \u2514\u2500\u2500 WebSocket\n                    \u2502\u00a0\u00a0         \u2514\u2500\u2500 Room.html\n                    \u251c\u2500\u2500 conf\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.conf\n                    \u2502\u00a0\u00a0 \u2514\u2500\u2500 routes\n                    \u251c\u2500\u2500 public\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 images\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 favicon.png\n                    \u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jquery-1.5.min.js\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jquery.scrollTo-min.js\n                    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 templating.js\n                    \u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n                    \u2502\u00a0\u00a0     \u2514\u2500\u2500 main.css\n                    \u2514\u2500\u2500 tests\n                        \u2514\u2500\u2500 apptest.go\n. yes.. but I can't because it causes error  for today\n. The static files like .css, .html and .json can be on the src directory, not matter, the problem are only with the .go files, I can not leave they there\n. Of course @jeevatkm, thanks\n. @jeevatkm I've created the issue\n. Many thanks @ptman, so are the .go files not needed on this folder? They are generated only by convection?\n. @ptman Good, your command will be useful while the feature request is not developed.\n. @brendensoares Good pointer. Later I understood it, at principle I think that the are used \n. ",
    "SirGordon": "Just for other people with the same question.\n1. Create your project, for this example i will be using canonical \"revel new github.com/myaccount/my-app\"\n2. \"revel run github.com/myaccount/my-app\" to generate tmp/main.go - this file is needed by intellij\n3. Shutdown the running server\n4. Create project in intellij from existing sources\n5. Create run configuration and in \"Program arguments\" add \"-importPath github.com\\myaccount\\my-app -srcPath \\src -runMode dev\"\n6. Point \"File\" to <your gopath>\\src\\github.com\\myaccount\\my-app\\app\\tmp\\main.go\n7. In \"before launch\" add \"Run external tool\". There:\n   Program: <your gopath>\\bin\\revel.exe\n   Paramerets: build github.com/myaccount/my-app\nThis works for me on Windows 8. Edited my post to be more clear. Ah, i just needed to change my path to something inside gopath. ",
    "Venommmm": "When revel runs in dev mode and i change revel files in /gocode/src/myapp/app/controllers, revel doesnt see changes and doesnt reload itself. I guess it happens because i have a lot of files in /gocode/src/myapp/public, so the fsnotify runs out max possible number of files it can track for changes. Error log when i start in dev mode:\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/my_app/app : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/my_app/app/controllers : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/my_app/app/helpers : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/my_app/app/models : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/github.com/revel/modules/static/app : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/github.com/revel/modules/static/app/controllers : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/github.com/revel/modules/testrunner/app : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/github.com/revel/modules/testrunner/app/controllers : no space left on device\nERROR 2016/06/26 03:55:55 watcher.go:124: Failed to watch /home/ve/gocode/src/my_app/tests : no space left on device\n. ulimit -Hn 65536; ulimit -Sn 1024\nI found the command sudo sysctl -w fs.inotify.max_user_watches=100000 is the solution for me. So can large /gocode/src/myapp/public be the problem?\n. thank you, also used your code to implent tdewolf/minify, you're doing great work!\n. i need to add -ldflags \"s\" tag when revel build command runs. As i read before https://github.com/revel/cmd/issues/10 - its not possible to add custom tags, but is it possible to monkey revel package somehow to use it?\n. ",
    "sh8ker": "thanks.my Go version is 1.7 beta1\n. ",
    "acpower7": "Please ignore. \nAnswer in issue 284 \nhttps://github.com/revel/revel/issues/284\n. Thanks. One final issue.\nI'm trying to run the app from an executable.\nrevel build vagrant-revel-react /tmp/myapp\nThen when I go to the app/tmp file I hit:go run main.go\nI get the error: \nrevel.go:312: Failed to import  with error: import \"\": invalid import path\nAny help with this?\n. sorry but I can't find the run.sh & run.bat file....they don't exist in the tmp directory.\n. Very strange. myapp directory isn't created when I run that command, just the tmp. \nvagrant-revel-react:$ ls $GOPATH/src\n9fans.net       golang.org  **vagrant-revel-react**\ngithub.com      gopkg.in        \nvagrant-revel-react:$ revel build vagrant-revel-react /tmp/myapp\n~\n~ revel! http://revel.github.io\n~\nINFO  2016/07/25 19:35:19 revel.go:365: Loaded module static\nINFO  2016/07/25 19:35:19 revel.go:365: Loaded module testrunner\nINFO  2016/07/25 19:35:19 revel.go:230: Initialized Revel v0.13.1 (2016-06-06) for >= go1.4\nINFO  2016/07/25 19:35:19 build.go:179: Cleaning dir tmp\nINFO  2016/07/25 19:35:19 build.go:179: Cleaning dir routes\nINFO  2016/07/25 19:35:19 build.go:179: Cleaning dir tmp\nINFO  2016/07/25 19:35:19 build.go:179: Cleaning dir routes\nvagrant-revel-react:$ cd app/tmp/\ntmp:$ ls\nmain.go\ntmp:$ go run main.go \nERROR 2016/07/25 19:39:50 revel.go:312: Failed to import  with error: import \"\": invalid import path\nexit status 1\nAnyway I was just experimenting, i'll probably move on. \nthanks\n. ",
    "nikxliu": "@jeevatkm \nthanks for you reply.\nI removd the d:\\tools\\Go from the GOPATH properties.\nthe new GO ENV was \nD:\\tools\\workspace\\revel>go env\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=D:\\tools\\workspace\\go;E:\\worktools\\wassupport\\WASAUTO\\go;D:\\tools\\workspace\\revel;D:\\tools\\workspace\\beego;D:\n\\tools\\workspace\\bluemix\nset GORACE=\nset GOROOT=d:\\tools\\Go\nset GOTOOLDIR=d:\\tools\\Go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=1\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nBut the issue occured again.\nSo I try to remove other values from GOPATH\nLet it is \nC:\\Users\\Liuxuandong>go env\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=D:\\tools\\workspace\\revel\nset GORACE=\nset GOROOT=d:\\tools\\Go\nset GOTOOLDIR=d:\\tools\\Go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=1\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nIt did not work.\n```\nD:\\tools\\workspace\\revel>revel run myapp\n~\n~ revel! http://revel.github.io\n~\nINFO  2016/07/29 08:55:01 revel.go:365: Loaded module testrunner\nINFO  2016/07/29 08:55:01 revel.go:365: Loaded module static\nINFO  2016/07/29 08:55:01 revel.go:230: Initialized Revel v0.13.1 (2016-06-06) for >= go1.4\nINFO  2016/07/29 08:55:01 run.go:57: Running myapp (myapp) in dev mode\nINFO  2016/07/29 08:55:01 harness.go:170: Listening on :9000\nINFO  2016/07/29 08:55:13 build.go:179: Cleaning dir tmp\nINFO  2016/07/29 08:55:13 build.go:179: Cleaning dir routes\nERROR 2016/07/29 08:55:13 reflect.go:776: Unexpected! Code path is not in GOPATH: d:\\tools\\Go\\src\\github.com\\revel\\modul\nes\\testrunner\\app\nWARN  2016/07/29 08:55:13 reflect.go:94: Skipping code path d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nERROR 2016/07/29 08:55:13 reflect.go:776: Unexpected! Code path is not in GOPATH: d:\\tools\\Go\\src\\github.com\\revel\\modul\nes\\static\\app\nWARN  2016/07/29 08:55:13 reflect.go:94: Skipping code path d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nINFO  2016/07/29 08:55:13 build.go:179: Cleaning dir tmp\nINFO  2016/07/29 08:55:13 build.go:179: Cleaning dir routes\nINFO  2016/07/29 08:55:18 revel.go:365: Loaded module static\nINFO  2016/07/29 08:55:18 revel.go:365: Loaded module testrunner\nINFO  2016/07/29 08:55:18 revel.go:230: Initialized Revel v0.13.1 (2016-06-06) for >= go1.4\nINFO  2016/07/29 08:55:18 main.go:27: Running revel server\nERROR 2016/07/29 08:55:18 router.go:431: Route validation error (in d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner/\nconf/routes:1): revel/controller: failed to find controller TestRunner\npanic: Route validation error (in d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner/conf/routes:1): revel/controller:\nfailed to find controller TestRunner\ngoroutine 1 [running]:\npanic(0x8330e0, 0xc08215aad0)\n        d:/tools/Go/src/runtime/panic.go:481 +0x3f4\nlog.(*Logger).Panicln(0xc0820176d0, 0xc082069ac0, 0x1, 0x1)\n        d:/tools/Go/src/log/log.go:220 +0xc6\ngithub.com/revel/revel.init.4.func1()\n        d:/tools/Go/src/github.com/revel/revel/router.go:431 +0x480\ngithub.com/revel/revel.runStartupHooks()\n        d:/tools/Go/src/github.com/revel/revel/server.go:164 +0xec\ngithub.com/revel/revel.InitServer(0x923820)\n        d:/tools/Go/src/github.com/revel/revel/server.go:85 +0x2b\ngithub.com/revel/revel.Run(0xfcdc)\n        d:/tools/Go/src/github.com/revel/revel/server.go:137 +0x293\nmain.main()\n        D:/tools/workspace/revel/src/myapp/app/tmp/main.go:49 +0x460\n``\n. @jeevatkm \nI modify the methodimportPathFromPathin the fileD:\\tools\\Go\\src\\github.com\\revel\\cmd\\harness\\reflect.go`\nadd some additional output\n```\nfunc importPathFromPath(root string) string {\nfor _, gopath := range filepath.SplitList(build.Default.GOPATH) {\n    srcPath := filepath.Join(gopath, \"src\")\n    revel.WARN.Println(\"the root is :\",root)\n    revel.WARN.Println(\"the srcPath is :\",srcPath)\n    if strings.HasPrefix(root, srcPath) {\n        return filepath.ToSlash(root[len(srcPath)+1:])\n    }\n}\n\nsrcPath := filepath.Join(build.Default.GOROOT, \"src\", \"pkg\")\nrevel.WARN.Println(\"1the root is :\",root)\nrevel.WARN.Println(\"1the srcPath is :\",srcPath)\nif strings.HasPrefix(root, srcPath) {\n    revel.WARN.Println(\"Code path should be in GOPATH, but is in GOROOT:\", root)\n    return filepath.ToSlash(root[len(srcPath)+1:])\n}\n\nrevel.ERROR.Println(\"Unexpected! Code path is not in GOPATH:\", root)\nreturn \"\"\n\n}\n```\nAfter that I use the followed command rebuild the revel command .\ngo install github.com\\revel\\cmd\\revel\n```\nD:\\tools\\workspace\\revel>revel run myapp\n~\n~ revel! http://revel.github.io\n~\nINFO  2016/07/29 09:29:08 revel.go:365: Loaded module static\nINFO  2016/07/29 09:29:08 revel.go:365: Loaded module testrunner\nINFO  2016/07/29 09:29:08 revel.go:230: Initialized Revel v0.13.1 (2016-06-06) for >= go1.4\nINFO  2016/07/29 09:29:08 run.go:57: Running myapp (myapp) in dev mode\nINFO  2016/07/29 09:29:08 harness.go:170: Listening on :9000\nINFO  2016/07/29 09:29:10 build.go:179: Cleaning dir tmp\nINFO  2016/07/29 09:29:10 build.go:180: Cleaning dir111 tmp\nINFO  2016/07/29 09:29:10 build.go:179: Cleaning dir routes\nINFO  2016/07/29 09:29:10 build.go:180: Cleaning dir111 routes\nWARN  2016/07/29 09:29:10 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\app\nWARN  2016/07/29 09:29:10 reflect.go:767: the srcPath is : D:\\tools\\workspace\\go\\src\nWARN  2016/07/29 09:29:10 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\app\nWARN  2016/07/29 09:29:10 reflect.go:767: the srcPath is : E:\\worktools\\wassupport\\WASAUTO\\go\\src\nWARN  2016/07/29 09:29:10 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\app\nWARN  2016/07/29 09:29:10 reflect.go:767: the srcPath is : D:\\tools\\workspace\\revel\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : E:\\worktools\\wassupport\\WASAUTO\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\revel\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\beego\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\bluemix\\src\nWARN  2016/07/29 09:29:11 reflect.go:774: 1the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:775: 1the srcPath is : d:\\tools\\Go\\src\\pkg\nERROR 2016/07/29 09:29:11 reflect.go:781: Unexpected! Code path is not in GOPATH: d:\\tools\\Go\\src\\github.com\\revel\\modul\nes\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:94: Skipping code path d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : E:\\worktools\\wassupport\\WASAUTO\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\revel\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\beego\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\bluemix\\src\nWARN  2016/07/29 09:29:11 reflect.go:774: 1the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:775: 1the srcPath is : d:\\tools\\Go\\src\\pkg\nERROR 2016/07/29 09:29:11 reflect.go:781: Unexpected! Code path is not in GOPATH: d:\\tools\\Go\\src\\github.com\\revel\\modul\nes\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:94: Skipping code path d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner\\app\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\tests\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\tests\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : E:\\worktools\\wassupport\\WASAUTO\\go\\src\nWARN  2016/07/29 09:29:11 reflect.go:766: the root is : D:\\tools\\workspace\\revel\\src\\myapp\\tests\nWARN  2016/07/29 09:29:11 reflect.go:767: the srcPath is : D:\\tools\\workspace\\revel\\src\nINFO  2016/07/29 09:29:11 build.go:179: Cleaning dir tmp\nINFO  2016/07/29 09:29:11 build.go:180: Cleaning dir111 tmp\nINFO  2016/07/29 09:29:11 build.go:179: Cleaning dir routes\nINFO  2016/07/29 09:29:11 build.go:180: Cleaning dir111 routes\nINFO  2016/07/29 09:29:15 revel.go:365: Loaded module testrunner\nINFO  2016/07/29 09:29:15 revel.go:365: Loaded module static\nINFO  2016/07/29 09:29:15 revel.go:230: Initialized Revel v0.13.1 (2016-06-06) for >= go1.4\nINFO  2016/07/29 09:29:15 main.go:27: Running revel server\nERROR 2016/07/29 09:29:15 router.go:431: Route validation error (in d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner/\nconf/routes:1): revel/controller: failed to find controller TestRunner\npanic: Route validation error (in d:\\tools\\Go\\src\\github.com\\revel\\modules\\testrunner/conf/routes:1): revel/controller:\nfailed to find controller TestRunner\ngoroutine 1 [running]:\npanic(0x8330e0, 0xc082158ad0)\n        d:/tools/Go/src/runtime/panic.go:481 +0x3f4\nlog.(*Logger).Panicln(0xc0820156d0, 0xc082069ac0, 0x1, 0x1)\n        d:/tools/Go/src/log/log.go:220 +0xc6\ngithub.com/revel/revel.init.4.func1()\n        d:/tools/Go/src/github.com/revel/revel/router.go:431 +0x480\ngithub.com/revel/revel.runStartupHooks()\n        d:/tools/Go/src/github.com/revel/revel/server.go:164 +0xec\ngithub.com/revel/revel.InitServer(0x923820)\n        d:/tools/Go/src/github.com/revel/revel/server.go:85 +0x2b\ngithub.com/revel/revel.Run(0xc9e9)\n        d:/tools/Go/src/github.com/revel/revel/server.go:137 +0x293\nmain.main()\n        D:/tools/workspace/revel/src/myapp/app/tmp/main.go:49 +0x460\n```\nI found the followed message in the output.\nWARN  2016/07/29 09:29:11 reflect.go:774: 1the root is : d:\\tools\\Go\\src\\github.com\\revel\\modules\\static\\app\nWARN  2016/07/29 09:29:11 reflect.go:775: 1the srcPath is : d:\\tools\\Go\\src\\pkg\nthe word \"pkg\" is the root cause\nSo I modify the method in the file D:\\tools\\Go\\src\\github.com\\revel\\cmd\\harness\\reflect.go\nremove the word \"pkg\"\n```\nfunc importPathFromPath(root string) string {\nfor _, gopath := range filepath.SplitList(build.Default.GOPATH) {\n    srcPath := filepath.Join(gopath, \"src\")\n    if strings.HasPrefix(root, srcPath) {\n        return filepath.ToSlash(root[len(srcPath)+1:])\n    }\n}\n\nsrcPath := filepath.Join(build.Default.GOROOT, \"src\")\nif strings.HasPrefix(root, srcPath) {\n    revel.WARN.Println(\"Code path should be in GOPATH, but is in GOROOT:\", root)\n    return filepath.ToSlash(root[len(srcPath)+1:])\n}\n\nrevel.ERROR.Println(\"Unexpected! Code path is not in GOPATH:\", root)\nreturn \"\"\n\n}\n```\nI rebuild the revel command again and run the command revel run myapp\nNow it works.\n. My revel version:\nC:\\Users\\Liuxuandong>revel version\n~\n~ revel! http://revel.github.io\n~\nVersion(s):\n   Revel v0.13.1 (2016-06-06)\n   go1.6.2 windows/amd64\nI upload myapp which is my test app's name.\nrevel.zip\nAre you running in dev or prod mode?\nSorry I can not answer this question. \nBut I use the guide to install, create and run the revel app. I did not modify any configure file in the revel app. \n. @jeevatkm @brendensoares \nThank you very much.\nI remove the d:\\tools\\Go from GOPATH and re-install the revel.\nmyapp works.\n. ",
    "meroujanantonyan": "Low probability ? why? . ",
    "Warashi": "~~sorry this fails other place~~\nfixed\n. ",
    "matsch01": "Unzipping from the git bash resulted in the correct result:\ntar -xvzf myproject.tar.gz\n. Problem seems to be that dep is not pulling from master. It pulls the latest release. For revel/log15 that is v2.11 and for timeago it's v1.0.0-rc2.\nI tried editing the dep file to pull master, but apparently didn't do it correctly. Will try to figure it out.. Thank you for this.. Perfect. Thank you.. required = [\"github.com/revel/cmd/revel\"]\n[[constraint]]\n  name = \"github.com/lib/pq\"\n  version = \"1.0.0\"\n[[constraint]]\n  name = \"github.com/revel/revel\"\n  version = \"0.19.1\"\n[prune]\n  go-tests = true\n  unused-packages = true\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/log15\"\n[[constraint]]\n  name = \"github.com/revel/modules\"\n  branch = \"master\"\n[[override]]\n  name = \"github.com/revel/cmd\"\n  version = \"0.14.1\"\n  . Any update on this?. Yes. Thanks.. ",
    "lujiacn": "I met the same issue today. Everything works fine in dev mode, but in prod mode, flash not work, csrf not work (due to cannot read session).\nMy previous revel projects no same issue, any thing updated recently?\n@jeevatkm \n. issue due to revel.go, line 207\nCookieSecure = Config.BoolDefault(\"cookie.secure\", !DevMode)\nThe !DevMode should be value false.\n. go back to this issue.\nsince \"cookie.secure  = false\" is defined in app.conf. In revel, should respect config default value.\nCookieSecure = Config.BoolDefault(\"cookie.secure\", !DevMode)\nto\nCookieSecure = Config.BoolDefault(\"cookie.secure\", false)\n. \"A secure cookie has the secure attribute enabled and is only used via HTTPS\".\nI did not setup https in revel, but run revel behind nginx (SSL) in production mode. cookie.secure = !DevMode will introduce a issue.. PR#1102  to resolve this issue. no solution now, only way is include different template. I also struggled for some time on using \"define\" in template to render different content.\n. not sure how to use secure attribute in http.Cookie, but from the example below, for http request, if set secure as true, no cookie set.\nSo, if do not set CookieSecure, default value is false, not !DevMode, works for http. If set https, may be use CookieSecure \"true\"\n```\npackage main\nimport (\n        \"fmt\"\n        \"net/http\"\n        \"time\"\n)\nfunc answer(w http.ResponseWriter, r *http.Request) {\n        cookie := http.Cookie{Name: \"locality\", Value: \"here\",\n                Expires:  time.Now().Add(time.Hour),\n                HttpOnly: true, MaxAge: 50000,\n                Path: \"/\", Secure: true}\n        http.SetCookie(w, &cookie)\n        fmt.Fprintf(w, \"Yay\")\n        cooki, err := r.Cookie(\"locality\")\n        fmt.Fprint(w, cooki, err)\n        //http.Redirect(w, r, \"/\", http.StatusFound)\n}\nfunc main() {\n        http.HandleFunc(\"/\", answer)\n        err := http.ListenAndServe(\":8888\", nil)\n        if err != nil {\n                fmt.Println(err)\n        }\n}\n. What is next action? Just waiting for another couple of weeks?. @cyongxue, after set proxy, also need set .ssh/config to make git go through proxy. Check related document for ssh config with proxy.. trygo\npackage controllersHelpers\ntype controller struct {\n        revel.Controller\n        models.EventScope\n}\n. Thanks!. Hi notzippy,\nThanks for the actively update. But encounter some unexpected issues below: \n1. in file server.go\nline 80, address := HTTPAddr, addedgo\nif address == \"\" {\n    address=\"localhost\"\n}\n```\nthis update annoyed me for a while. Usually I did not fill in http.address in the conf file and make server listen to all request, but this changes make me must fill in ip or 0.0.0.0.\n\nafter do all modification for 0.18, I can run the server locally in prod and dev mode without issue. Via \"revel run project dev|prod\". But after compile and package the project via GOOS=linux GOARCH=amd64 revel package xxxx prod and transfer to linux server, the web server cannot return result, only return \"Return 0x0\" in the console. Check with the source code, seems related to appModule. In line 471, results.go file, println(\"Returned \", module). Not know any reason add appModule function? Please find error code below in dev mode, compiled package without GOPATH setting in server.\nReturned  0x0\nINFO  12:35:58    app server.go:2848: http: panic serving 123.456.78.20:2342: runtime error: invalid memory address or nil pointer dereference\ngoroutine 69 [running]:\nnet/http.(*conn).serve.func1(0xc420144320)\n    /usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:1697 +0xd0\npanic(0xa7fb20, 0xed0580)\n    /usr/local/Cellar/go/1.9.2/libexec/src/runtime/panic.go:491 +0x283\ngithub.com/revel/revel.(*Module).Namespace(...)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/module.go:62\ngithub.com/revel/revel.getRedirectURL(0xa5abe0, 0xb712f8, 0x0, 0x0, 0x0, 0xb, 0xc420313b38, 0x7d845d, 0xc42030a750)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/results.go:472 +0x271\ngithub.com/revel/revel.(*RedirectToActionResult).Apply(0xc4204e1bc0, 0xc42011f140, 0xc4202daf00)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/results.go:439 +0x56\ngithub.com/revel/revel.handleInternal(0xe94f20, 0xc420305f80)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/server-engine.go:147 +0x7ef\ngithub.com/revel/revel.(*GoHttpServer).Handle(0xc4202eda40, 0xe994e0, 0xc4203cc0e0, 0xc42011db00)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/server_adapter_go.go:101 +0x39e\ngithub.com/revel/revel.(*GoHttpServer).Init.func3(0xe994e0, 0xc4203cc0e0, 0xc42011db00)\n    /Users/i0040679/workspace/go_code/src/github.com/revel/revel/server_adapter_go.go:43 +0x48\nnet/http.HandlerFunc.ServeHTTP(0xc4202fe580, 0xe994e0, 0xc4203cc0e0, 0xc42011db00)\n    /usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:1918 +0x44\nnet/http.serverHandler.ServeHTTP(0xc42026dee0, 0xe994e0, 0xc4203cc0e0, 0xc42011db00)\n    /usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:2619 +0xb4\nnet/http.(*conn).serve(0xc420144320, 0xe9a120, 0xc42035c300)\n    /usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:1801 +0x71d\ncreated by net/http.(*Server).Serve\n    /usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:2720 +0x288  section=system. @notzippy Thank you. Same issue even using build and tar instead of package.. I close this issue, not related to revel, but my project code. revel will not point out the error code location if we use wrong c.Redrect format. (c.Redirect(Task.Index) --> trigger error but no project code location, should be c.Redirect(routes.Task.Index()).\nThanks you notzippy and sorry for the inconvenience caused.. update go to 1.92 and try again.. Thanks for the prompt action \ud83d\udc4d . how you defined your redirect route? If only use \"c.Redirect(App.Index)\" will introduce the error (but works fine before 0.18. The safe way is use \"c.Redirect(routes.App.Index())\", works before and after 0.18. Just need import app routes.. routes.App.Index() is format, you should using your own type and func names. If routes.App.Index() function throws error, check your defined controller and functions. it should return a url string.\n\nI noticed you run app in container, set http.address= 0.0.0.0 in app.conf to listen all ip address (coming).\nAnd another issue (0.18) is do not set \"result.compressed = true\" keep it false (default is false).. @notzippy Great! Thanks :). Without changing the server.go file, just input ip address in app.conf, http.address = 0.0.0.0, default is localhost (only listen localhost) if no http.address defined in app.conf. I have the same issue before (from 0.18):\nWhen using format below, will trigger the return 0x0 issue.\nreturn c.Redirect(Controller.Action)\nhave to update to format below to avoid the issue\nreturn c.Redirect(routes.Controller.Action())\nThe safe way is pass url string to Redirect(). \n. If consider backwards compatible, we can ignore this pull request. WARN 15:13:42 harness.go:170: No http.addr specified in the app.conf listening on localhost interface only. This will not allow external access to your application\ntry to define http.addr=0.0.0.0 ?. no very clear about the purpose. Now, Result is an interface, with Apply function. Just add more return types for more scenario?. ",
    "yogesh-bitsbridge": "thanx @brendensoares. I resolved the issue. Previously I installed Go with Gccgo compiler . Now I installed it with default Go compiler i.e. gc. It's working fine. \nby the way, I am using latest go version 1.7 and revel 0.13.1\n. ",
    "torden": "Which one version? my test env below\n- OS : 10.12 Sierra\n- Go : 1.7.4 drawin/amd64\n- Revel : v0.13.1\n\nwork fine. Hi,Do you want to \"application/json\" print out in every response header(including renderError).?. Not long ago, I sent email to @jeevatkm, however his reply yet until now.\nAs I knew, This project maintainer are @brendensoares, @pedromorgan @jeevatkm, \n31 PRs waiting for them. I hope they are come back here.. it could be your ISP(or network security guy) or Company is blocking the that url, \nplease try to open a URL in your browser. . https://travis-ci.org/revel/revel/builds/335974274\n--- FAIL: TestMemcachedCache_GetMulti (0.00s)\n    cache_test.go:240: Error getting str: revel/cache: key not found /. The difference between them as follow\nSTRICT : Not allow Invisible characters (control characters without tab, space, newline)\nNORMAL : Allow Invisible characters\nWelcome back~ @pedromorgan . ",
    "audathuynh": "Thank you very much for your answer.\nSincerely,\nD.. It is just a small project and I was able to compile it with Go 1.9.\nI searched on the web and I think there may be a problem with the parameter -i when revel calls go to compile my project.\nCould you please let me know the place where I can modify the source code of Revel so that I remove the parameter -i when Revel calls go compiler to compile my project?\nI can see /usr/local/go/bin/go build -i  ... in the below log.\nDEBUG 08:54:39  revel  build.go:150: Exec:                                     args=\"[/usr/local/go/bin/go build -i -ldflags -X mywebapp/app.AppVersion= -X mywebapp/app.BuildTime=2018-08-30T22:54:39Z -tags  -o /home/pi/gocode/bin/revel.d/mywebapp/app/tmp]\"\nThanks.. Thank you, @notzippy .\nThe bug has been fixed.\nIt is because Revel uses the parameter -i when it calls go to compile my web project.\nI just delete this line and I can compile my project.\n. ",
    "Steve-hyas": "You can proxy it through apache and mod_proxy\nServerName mysite.com\nProxyRequests Off\nProxyPreserveHost On\nProxyPass \"/\" \"http://127.0.0.1:9000/\"\nProxyPassReverse \"/\" \"http://127.0.0.1:9000/\"\n\n. Is your vhost like ?:\n<VirtualHost *:443>\n...\n\n. Generally for most sites you want to use a server to serve the static content of the site. Also with apache you will need to enable ssl using a2enmod ssl. ",
    "yarcowang": "@notzippy \nOh, no. What I suggested is event listener pattern, something like that:\n```\n// in some controller\nfunc doSomething() {\n    dispatch(new FooEvent(...)); // send to AbcListener::onFooEvent, and of cause, there's a relationship somewhere\n}\n// in the listener\ntype AbcListener struct {\n}\nfunc (t*AbcListener) onFooEvent() {\n   // do something when there's FooEvent\n}\n// another listener may also listen to the FooEvent\ntype EfgListener struct {\n}\nfunc (t*EfgListener) onFooEvent() {\n   // do something when there's FooEvent\n}\n```. Yes, similar like that.. ",
    "kgodwin": "Yeah, if this goes through the end of Feb without activity we probably need to fork this after this much inactivity. No offense to anyone but things like this need a certain minimum of activity to avoid death.. ",
    "kvfi": "Hey @notzippy, could you please specify the date. Is it March 2nd or 3rd?. ",
    "noway": "Reporing the same issue in #1137  (oh ah, seems like a duplicate)\nHappens for me under Arch Linux. Might be a regression under latest version of the templating engine?. Any work around for that?. @notzippy please read the topic carefully, I'm under Arch Linux and experiencing this problem.\n[type-bug-windows] is incorrect. At least Linux and windows are affected.\n@brendensoares \nSteps to reproduce:\n\nrevel new bug\nCopypaste this in views/App/Index.html:\n<script type=\"text/template\">\n    <% if(event.Type == 'join') { %>\n    <% } %>\n</script>\nSee view-source:http://localhost:9000/\n\nClarification. The issue happens (at least for me?) when the type attribute is not text/javascript. Seems to be rendering fine when type=\"text/javascript\" is present. Also renders ok when no type attribute is present at all. Not preferable workaround though because browser would try to execute the content in those cases.\nI venture a guess that it has something to do with special treatment of javascript script tags and potential workaround lays in using CDATA?. Even CDATA renders incorrectly in cases where javascript is not implied.\n<script type=\"text/template\">\n<![CDATA[\n    <% if(event.Type == 'join') { %>\n    <% } %>\n]]>\n</script>\nbecomes\n```\n\n&lt;![CDATA[\n    &lt;% if(event.Type == 'join') { %>\n    &lt;% } %>\n]]>\n\n```. Okay, this makes sense, thanks!. ",
    "victorcastro": "How did you fix it? \nDetails please. ",
    "funyug": "Oh sorry. My mistake. Is there a doc where i can know which all repos should be checked out for this to work? I ran into another undefined variable error after checking out config. ",
    "ismaelvacco": "Here to show the Action did that:\nfunc init() {\n    config := newrelic.NewConfig(os.Getenv(\"NEWRELIC_APP_NAME\"), os.Getenv(\"NEWRELIC_LICENSE\"))\n    app, _ := newrelic.NewApplication(config) // TODO Error check !!!\n    RelicFilter := func(c *revel.Controller, fc []revel.Filter) {\n        txn := app.StartTransaction(c.Action, c.Response.Out, c.Request.Request)\n        defer txn.End()\n        fc0 // Execute the next filter stage.\n    }\n// Filters is the default set of global filters.\nrevel.Filters = []revel.Filter{\n    revel.PanicFilter,  // Recover from panics and display an error page instead.\n    revel.RouterFilter, // Use the routing table to select the right Action\n    RelicFilter,\n    revel.FilterConfiguringFilter, // A hook for adding or removing per-Action filters.\n    revel.ParamsFilter,            // Parse parameters into Controller.Params.\n    // revel.SessionFilter,           // Restore and write the session cookie.\n    // revel.FlashFilter,             // Restore and write the flash cookie.\n    revel.ValidationFilter, // Restore kept validation errors and save new ones from cookie.\n    // revel.I18nFilter,        // Resolve the requested language\n    HeaderFilter,            // Add some security based headers\n    revel.InterceptorFilter, // Run interceptors around the action.\n    revel.CompressFilter,    // Compress the result.\n    revel.ActionInvoker,     // Invoke the action.\n}\n\n// register startup functions with OnAppStart\n// revel.DevMode and revel.RunMode only work inside of OnAppStart. See Example Startup Script\n// ( order dependent )\n// revel.OnAppStart(ExampleStartupScript)\nrevel.OnAppStart(InitDB)\n// revel.OnAppStart(FillCache)\n\n}. ",
    "xiaozi0lei": "@kekeoki Hi, kekeoki. Could you check the version of revel-cmd?\nIn my experience, I met this error message when I use the revel command version is less than 0.14.1.\nI guess the reason maybe go1.8 build command -X option is changed the format.\n```bash\nrevel v0.13.0 revel/cmd/harness/build.go #80\nversionLinkerFlags := fmt.Sprintf(\"-X %s/app.APP_VERSION \\\"%s\\\"\", revel.ImportPath, appVersi    on)\nrevel v0.14.1 revel/cmd/harness/build.go #87\nversionLinkerFlags := fmt.Sprintf(\"-X %s/app.AppVersion=%s -X %s/app.BuildTime=%s\",\nrevel.ImportPath, appVersion, revel.ImportPath, buildTime)\n```\nrevel v0.13.0 revel/cmd/harness/build.go Github link\nrevel v0.14.1 revel/cmd/harness/build.go Github link\nThe difference is that there is = character between app.AppVersion=%s in v0.14.1. This is satisfied go1.8 format. I guess. You can try it. This is solve my problem, but I recommand you to update the revel cmd version to v0.14.1.\nAny question, please feel free to contact me.. As the before comments said, you should update the revel/cmd repo to v0.14.0.\nI think the revel/revel version should be v0.14.0 in the official docker revel build.\nThis revel/revel version needs the same version with revel/cmd. \nIn the mean time, you should update your project revel variables based on v0.14.0 release note.\nGood luck!. // ReceiveJSON unmarshal the input streaming JSON data, returns map[string]interface{} type data.\n// To access this data we can use a type assertion to access map[string]interface{}. \n// Reference to [Decoding arbitrary data chapter] in https://blog.golang.org/json-and-go. I think a little clear. :). ",
    "dandee": "I've got the same error while using Glide and performing update after bumping up revel's version number. I fixed it by manually removing revel directories and letting Glide download them again fresh.. ",
    "0xrofi": "@notzippy This situation is not only params but also include route, binder, controller. So I don't know how to write this situation's test case... sorry.\n@pedromorgan Because first element of array is used to controller's arguments. So just like as I said above, Route parameters and Form parameters also can be overwritten with Query parameters. (Sorry for Get in I said above, it's a mistake of Query)\nproblem of #1095 isn't fixed yet and I think this patch fixes it.\nIf all params(Query, Form, Route and Fixed) need to append to array, I think that it should change the order of appending parameters (it's discussed in #503 ).\n. Alternatively I suggest here instead of this PR.\n```diff\n        // Copy everything into a param map,\n-       // order of priority is least to most trusted\n+       // order of priority is most to least trusted\n        values := make(url.Values, numParams)\n\n// ?query vars first\nfor k, v := range p.Query {\n// fixed vars first\nfor k, v := range p.Fixed {\n                values[k] = append(values[k], v...)\n        }\n// form vars overwrite\nfor k, v := range p.Form {\n// :/path vars append\nfor k, v := range p.Route {\n                values[k] = append(values[k], v...)\n        }\n// :/path vars overwrite\nfor k, v := range p.Route {\n// form vars append\nfor k, v := range p.Form {\n                values[k] = append(values[k], v...)\n        }\n// fixed vars overwrite\nfor k, v := range p.Fixed {\n// ?query vars append\nfor k, v := range p.Query {\n                values[k] = append(values[k], v...)\n        }\n```\n. \n",
    "yazamiko": "It works for me, guys. Thank you!. ",
    "galasky": "Ok thx !. ",
    "eloyucu": "OK!! no... thanks I want to update, and see if I get the same errors locally.. Thanks. Finally I solved the problem.. Upgrade the local version. It is the solution. :)\nIn this way you will see what is failing, and then change it.. http://stackoverflow.com/questions/43609169/revel-app-doesn%C2%B4t-compile-in-heroku. ",
    "kikanny": "Here's the trace. I ended up fixing it though....after reinstalling go 3-4 times...\n\n~\n~ revel! http://revel.github.io\n~\nINFO  2017/05/20 20:59:40 revel.go:365: Loaded module testrunner\nINFO  2017/05/20 20:59:40 revel.go:365: Loaded module jobs\nINFO  2017/05/20 20:59:40 revel.go:365: Loaded module static\nINFO  2017/05/20 20:59:40 revel.go:230: Initialized Revel v0.15.0 (2017-05-11) for >= go1.7\nINFO  2017/05/20 20:59:40 run.go:119: Running bookingapp (github.com/mycompany/go-bookingapp) in dev mode\nTRACE 2017/05/20 20:59:40 run.go:120: Base path: /Users/admin/go/src/github.com/mycompany/go-bookingapp\nTRACE 2017/05/20 20:59:40 run.go:124: Running in watched mode.\nTRACE 2017/05/20 20:59:40 template.go:198: Refreshing templates from [/Users/admin/go/src/github.com/revel/revel/templates]\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/403.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/403.json\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/403.txt\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/403.xml\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/404-dev.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/404.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/404.json\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/404.txt\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/404.xml\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/405.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/405.json\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/405.txt\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/405.xml\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/500-dev.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/500.html\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/500.json\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/500.txt\nTRACE 2017/05/20 20:59:40 template.go:256: adding template:  errors/500.xml\nINFO  2017/05/20 20:59:40 harness.go:175: Listening on :9000\nTRACE 2017/05/20 20:59:46 harness.go:132: Rebuild\nINFO  2017/05/20 20:59:46 build.go:192: Cleaning dir tmp\nINFO  2017/05/20 20:59:46 build.go:192: Cleaning dir routes\nINFO  2017/05/20 20:59:46 build.go:192: Cleaning dir tmp\nINFO  2017/05/20 20:59:46 build.go:192: Cleaning dir routes\nTRACE 2017/05/20 20:59:46 build.go:171: Exec: [/usr/bin/git --git-dir=/Users/admin/go/src/github.com/mycompany/go-bookingapp/.git describe --always --dirty]\nTRACE 2017/05/20 20:59:46 build.go:112: Exec: [/usr/local/bin/go build -i -ldflags -X github.com/mycompany/go-bookingapp/app.AppVersion=git-0fe4449-dirty -X github.com/mycompany/go-bookingapp/app.BuildTime=2017-05-21T00:59:46Z -tags gorp -o /Users/admin/go/bin/revel.d/github.com/mycompany/go-bookingapp/go-bookingapp github.com/mycompany/go-bookingapp/app/tmp]\nTRACE 2017/05/20 20:59:48 app.go:63: Exec app: /Users/admin/go/bin/revel.d/github.com/mycompany/go-bookingapp/go-bookingapp [/Users/admin/go/bin/revel.d/github.com/mycompany/go-bookingapp/go-bookingapp -port=52175 -importPath=github.com/mycompany/go-bookingapp -runMode=dev]. \n",
    "Acidic9": "Only one day ago I discovered what {{with .}} actually does and I'm not too sure if my isEmpty func is as necessary.\nIt's fine if it doesn't get merged because it may not be a necessity.\nThanks though.. But I thought the whole point of a session, is that it is not stored as a cookie on the client right? Only one cookie with a session ID is stored correct? Then all the session information is stored on the server-side program.\nIf I'm right about this, then doesn't it mean there is no restriction to the session value type?. Ah it's just en encrypted cookie? Good luck with making it stored server-side. You'd need the data to be written to a file so it can be remembered after server restarts right?\nAlso I'd be keen to spend some time working on revel if there are any features you'd like done.. ",
    "cyongxue": "\u4f46\u662f\uff0c\u6211\u7279\u610f\u5c06Shadowsocks\u7684\u81ea\u52a8\u4ee3\u7406\u5207\u6362\u5230\u5168\u5c40\u6a21\u5f0f\u4e86\uff0c\u8fd8\u662f\u8fd9\u6837\uff1a\n\u279c  github.com go get github.com/revel/revel\npackage golang.org/x/net/websocket: unrecognized import path \"golang.org/x/net/websocket\" (https fetch: Get https://golang.org/x/net/websocket?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\npackage gopkg.in/fsnotify.v1: unrecognized import path \"gopkg.in/fsnotify.v1\" (https fetch: Get https://gopkg.in/fsnotify.v1?go-get=1: net/http: TLS handshake timeout)\n\u96be\u9053\u4ee3\u7406\u4e5f\u6ca1\u7528\uff1f. \u4f46\u662f\uff0c\u6211\u7279\u610f\u5c06Shadowsocks\u7684\u81ea\u52a8\u4ee3\u7406\u5207\u6362\u5230\u5168\u5c40\u6a21\u5f0f\u4e86\uff0c\u8fd8\u662f\u8fd9\u6837\uff1a\n\u279c github.com go get github.com/revel/revel\npackage golang.org/x/net/websocket: unrecognized import path \"golang.org/x/net/websocket\" (https fetch: Gethttps://golang.org/x/net/websocket?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\npackage gopkg.in/fsnotify.v1: unrecognized import path \"gopkg.in/fsnotify.v1\" (https fetch: Gethttps://gopkg.in/fsnotify.v1?go-get=1: net/http: TLS handshake timeout)\n\u96be\u9053\u4ee3\u7406\u4e5f\u6ca1\u7528\uff1f\n\u539f\u59cb\u90ae\u4ef6\n\u53d1\u4ef6\u4eba:runnernotifications@github.com\n\u6536\u4ef6\u4eba:revel/revelrevel@noreply.github.com\n\u6284\u9001:\u5c0f\u7528cyongxue@163.com; Authorauthor@noreply.github.com\n\u53d1\u9001\u65f6\u95f4:2017\u5e746\u67087\u65e5(\u5468\u4e09)\u200720:50\n\u4e3b\u9898:Re: [revel/revel] can't go get revel (#1182)\n\u4e2d\u56fd\u4eba\u5427\uff0c\u77e5\u9053\u9632\u706b\u5899\u5427\uff0c\u4e0d\u77e5\u9053\u5c31\u522b\u505a\u7a0b\u5e8f\u5458\u4e86\u3002\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.. ",
    "wenjoy": "@cyongxue just use privoxy to enable proxy for iterm/terminal. Shadowsocks doesn't support that.\nps: forget what @runner-mei said. It's GFW's fault not ur's.. ",
    "Zen1024": "how to solve it?. ",
    "alexfromvl": "@notzippy  Hello. The problem arises when using the example https://revel.github.io/tutorial/firstapp.html and when creating a simple site from one main page.\nBy this error I was able to find this discussion https://stackoverflow.com/questions/36167200/how-safe-are-golang-maps-for-concurrent-read-write-operations. But it's not entirely clear how to rewrite the code so that you do not come to this error?\n. ",
    "daxorid": "I have reproduced this, on a site with normal traffic, but with some users running pentest scanning tools against it. For reasons.\nThe templateLoad() function in template.go:332 is extremely concurrency-unfriendly.\nI have hacked up an ugly workaround for this by wrapping all accesses of loader.TemplateMap inside mutex.Lock()/Unlock() calls until such time as the revel team addresses this.\nHope this helps.\n. Quick followup, the only thing google yields on this issue is a gist, but it doesn't appear to be linked to an actual issue:\nhttps://gist.github.com/zs14/1aa71de47986ba4056998ad3f5765717\n. ",
    "confirmTing": "My operating system is windows. @notzippy thank you\uff0c Before I encountered this problem, I updated the system time just fine. but now my system time update failed, i think the application should have nothing to do with system time. ",
    "Huholoman": "Yay, of course.. Thanks. :D. ",
    "AdamJacobMuller": "Thanks for the reply @brendensoares, appreciate the information and the very level-headed response.. ",
    "ryandavs": "I haven't used Revel but I have been watching its development since its early release. I am really looking forward to be using it in my company when it gets approved.\nHere's my version of \"13 Reasons Why\"... I think Revel rules?\n\n\nFamiliar (Rails-like)\nThe Rails, Grails, Code-Igniter, and similar Rails-like approach to MVC are not going anywhere. In fact, these frameworks have been flourishing without any sign of becoming the next \"legacy\" or abandoned framework. The reason is simple: that this pattern really works and it saves developers and companies time and money.\n\n\nConvention over Configuration\nI hate configurations. Period. I know we can't completely get away with configs, so I would tolerate a minimal configuration. Revel ticks that checkbox.\n\n\nIt's a framework\nAnd it means that as long as I follow certain rules, I don't have to deal with debates and dilemmas like project/code structure. Tell me to roll my own framework and I will tell you to go f*ck yourself.\n\n\nHot code reload\nI don't know about you, but you're a masochist if you love the idea of manually recompiling every time you change your code.\n\n\nDrupal no more - I have been detoxed and I'm free - never again\nOther existing Go Web frameworks, and even in Go's own doctrine, encourage a Drupal style of framework--that happy moments of your life where you define the routes, hundreds of routes, and point it to functions of your choice, yes hundred of functions to choose from. Just name your functions intelligently or else you will have to rely on your IDE's \"find\" feature (just pray that you won't have hundreds of search results). You know that happy moments where each developer organize his own functions (which php file to put it, and which folder to put this php file, and which other php files this function depends on), and what the heck is that route again, and you end up debating with your co-developers who has the best approach to follow, and the code review hell that follows, and that you need to convince the team lead that it's time to write a guide book because you've been scratching your head about this mountain of code mess, you need a guide book, a convention manual that nobody has time to read. Believe me, if you patterned your framework to be like Drupal and your website plus its internal management systems has grown to be bigger than a blog site, you would hate your job and you would curse the day you were born. Never again.\n\n\nToolkits like caching, validation, form processing, etcetera\n\nCaching\nTest Framework\nInternationalization\nRevel Jobs\nWebSocket support\nMore time for shopping and for my family\nMore time to watch Netflix' \"13 Reasons Why\"\n\n. ",
    "jimmy-go": "Hi @brendensoares, this is an old debate and I don't use revel anymore but clients of mine do. I did use it by 2 years so here are my two cents:\n\nWhy idiomatic Go?\nWell, my first time using go was simple and graceful (fucking awesome!!).\nThen I change to another job where they used revel. I feel like it was taking all the advantages from Go and making it feel like php/java :S.\n\n1.1. Imagine someone speaking bad english on purpose just because he feels it's fine. That's happens with idiomatic Go, the development team has made conventions, (and more!) in order to prevent headaches for newcomers and veterans.\n1.2 Framework vs toolkit. Having the chance of replacing some part of your code when needed is agile enforced. But when you hit the framework limits then you are in troubles. And that's the point about a framework, all eventually reach a limit on flexibility and backwards compatibility that tries to fix with next major releases.\n\n\nRevel hot reloading feels awkward.\nWhen using go build or go run you know when the code is compilable. \nBut with revel hot reloading it forces you to open some web browser (or run some curl command) just to know if it runs.\n\n\nTaking main.go from the developer's control is like removing a book's index pages.\nYou need a starting point in order to let the developer know what the project is all about.\nWhere can I view the overall structure of a revel project? Some people use app/init.go to kickstart third party connections. There is a revel way?\n\n\napp.conf TOML format is bad, really really bad.\nMakes the developer and devops team use 2 flags only to know what environment wants to run.\nCompare this 2 cases:\n\n\nmyBinary -config=dev.yml\nvs\n```\nmyBinaryRevel -config=app.conf -env=dev\nSome people even do this:\nmyBinaryRevel -config=app.conf -env=dev -db=someDbURL\n```\nWhen you open the config file you need a large monitor just to know what is going on.\nI don't say yaml is perfect but is more readable in less space and prevents developer mistakes when setting flags.\n\n\nRouter file in plain text.\nWhy can't I jump to function from my routes file? Because is taken away from the developer/IDE/text editor control and requires another dependency (revel) for parse and code generation in order to work.\n\n\nModules.\nIt's a nice feature but most developers merge all the backend functionality in one repo because they think easy equals better, but that means some module can crash the server and lower the uptime. Even worst some module can be taking all the system resources and leaving the principal part (the REST API) irresponsive.\n\n\nNewcomers think revel is the shit and is all Go can offer.\nI have seen too much people giving Go a try and using revel as his/her first framework. The problem with that (apart from 1-6) is that they feel confortable and don't give a try for other solutions. It can stops the developer curiosity from growing.\n\n\nSorry for been rude but these problems can be fixed as I see it.\nWhat can I say about how to made revel better?\n\n\nUse main.go for all the tasks that app.conf and routes file does.\n\n\nIf you really really want hot reloading then embed entr inside revel (a simple script can do the job too).\n\n\nMade clear in the wiki what CAN, CAN'T and NEVER will be revel used for.\n\n\nUse yaml or json or any other format that can be simple and don't have the TOML format issues.\n\n\nSome great value can come if you add gometalinter or similar to revel workflow.\n\n\nIt's easy to say do that I know, so thats why I will try to implement some of these features by myself and see if works.\nMy best regards.. ",
    "archit-gupta": "As i have added read write timeouts in app.conf so yes i think it should close the response before function returns thereby releasing the CLOSE_WAIT connections.\nPlease correct me if i am wrong.. ",
    "wariosolis": "You can use this.\nhttps://github.com/yujiod/wiki/blob/master/app/controllers/gorm.go\nOn your controller should use it as well\n```\npackage controllers\nimport (\n    \"fmt\"\n    \"github.com/revel/revel\"\n    \"gorm_issue/app/datasource\"\n)\ntype App struct {\n    *revel.Controller\n    GormController\n}\nfunc (c App) Index() revel.Result {\n    return c.Render()\n}\n```. Sorry, You will need the interceptors.\ninit.go\nfunc init() {\n    revel.OnAppStart(InitDB)\n    revel.InterceptMethod((*GormController).Begin, revel.BEFORE)\n    revel.InterceptMethod((*GormController).Commit, revel.AFTER)\n    revel.InterceptMethod((*GormController).Rollback, revel.FINALLY). @notzippy Please check the changes, I'll wait for your comments.. ",
    "dosaki": "Looks like the problem was that I was re-assigning DB to a new variable.\nInside datasource.go I should have \ngo\nvar DB *gorm.DB\n// ...\nfunc InitGormDB(user string, password string, host string, port string, database string, driverName string)\n {\n    var err error\n    DB, err = gorm.Open(driverName, user+\":\"+password+\"@tcp(\"+host+\":\"+port+\")/\"+database+\"?charset=utf8&parseTime=True&loc=Local\")\n    // ...\n}\nAlso DB wasn't a pointer to gorm.DB. ",
    "javasgl": "@robfig . ",
    "swrap": "The delimiters are not being used in the templates.\nThe following is in my app.conf\n~~~\ntemplate.delimiters=[[ ]]\ntemplate.go.delimiters=[[ ]]\n~~~\nWhen I run the application the templates are still is using \"{{ }}\" as the delimiters.\nVersion(s):\n   Revel v0.17.1 (2017-07-14)\n   go1.9.2 linux/amd64\n. ",
    "jansila": "hi guys, \nany progress on this? :). ",
    "vikram-rawat": "Thanks for replying so quickly.Thanks for your suggestion as well it worked like magic\nyou didn't tell me what to write on href= to redirect the page on www.google.com\nIt's just I have started to code recently and Chose golang to be my serverside programming and found revel being the easiest one so far. But I just don't like the documentation as it's written by someone who was trying to tell the basics quickly and let you learn through manual.\nInstead we needed someone who could write down everything slowly at least till you can connect the basic structure. After that manual would have been good. I mean it's hard to figure out which function or line is responsible for which action.\nNO offense I like your framework very much. But it's documentation not that much. it's clearly not for new coders or beginners.\nBut thanks for this framework anyways. Hope I am going to ping you a lot on gitter from now. :-). Just for guidance regarding documentation. Everything that I have learned is from building RShiny. Just take some time and check these links.\nhttp://shiny.rstudio.com/tutorial/\nor \nhttps://rstudio.github.io/shinydashboard/\nA person who knows nothing about anything can get started within a week without having to stumble on any pitfall.\n===========\nfootnote:- I am not comparing you to Rstudio they are different than you guys. You Rock too...\nIts just I believe the documentation should always be like this. Alwasy consider the person knows nothing. Because if he does he will skip it anyways.\nNot trying to be judgemental it's just a suggestion hope you wont take it the wrong way.. Thanks for replying. But why can't you just use a package like sqlx and integrate with revel. You don't have to reinvent the wheel you just have to collaborate.\nAnd can you please give a sample app based on what you just wrote. I am a new bee and have a hard time understanding multiple languages. But if i can read the code i will get it. Have you created anything like that? Please share the code. Naa i was not talking about front end. I was talking about something like. Describing driver and connection in app.conf file and then using it directly anywhere we like without much trouble or for loops. can this be done in revel. That will help people like me who create a lot of database app.\nI come from R background and starting golang for speed. I usually build dashbaords sort of things and  integrated Database functions would help me and people like me who interact a lot with database.\nKindly think about it. the M in MVC is equally important.\ncould you please implement something like this.. Thanks for the Help buddy.. ",
    "ajaychk": "Thanks,\n When this change will merge into master?\nThanks and Regards,\nAjay\nChipmonk\nOn Tue, Sep 26, 2017 at 8:38 PM, notzippy notifications@github.com wrote:\n\nClosed #1244 https://github.com/revel/revel/issues/1244.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1244#event-1265953354, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AcMz8b4xIeOGmNLVZ7Tho_v8__vpStlVks5smRNlgaJpZM4PjoJP\n.\n. Thanks,\nI will try that.\n\nThanks and Regards,\nAjay\nChipmonk\nOn Wed, Sep 27, 2017 at 9:11 AM, notzippy notifications@github.com wrote:\n\nSoon ?!? Just when I think it is good, I seem to find something else that\nis off :-(\nIf you are proficient in Go you can try switching to the develop branch\nfor all the revel repos in your gopath (src/github.com/revel/*) and see\nhow it goes for you. But there may be some bumps...\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1244#issuecomment-332400006, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AcMz8WrWW0ZBa6qHn5dbA_2t01A9TGSRks5smcPNgaJpZM4PjoJP\n.\n. \n",
    "jirawat050": "Sorry.Please close pull request . ",
    "sgreene570": "I have been using the official revel version.  I have only installed revel through\ngo get -u github.com/revel/revel and go get -u github.com/revel/cmd/revel .. Folder certainly exists and contains these files:\ndoc.go  format.go  handlers.go  logger.go  utils.go. Ah there it is, I should not have been using glide the way I was, my vendor folder was the culprit.   Thanks for the help!. ",
    "raphaelvigee": "I tried go 1.9 as well and it didn't work.... I purged my go install and now it works. Closing.. ",
    "efimovalex": "Thanks, that helped.. I had an issue with the GORM database while saving a struct.\nOn Wed, Dec 13, 2017 at 11:05 PM Paul Theunis notifications@github.com\nwrote:\n\n@efimovalex https://github.com/efimovalex what ended up being the\nissue? i'm having literally the same issue right now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1266#issuecomment-351521768, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AD10KStgA2lDVv3cbCKVpD439nvl0WVlks5tADwbgaJpZM4QhNVD\n.\n. \n",
    "cytown": "I read the source code, found the internal use is the same websocket with no change, but why it will get the difference result???\nReally confuse me...\n. Hi @notzippy, trust me, I won't make such mistake without modify the relative codes, I did modify them according to the new example/chat, and it will work, only when I refresh them, it will cause such system failure....\n. Yes, it works.. Thanks @notzippy . ",
    "gourlaa": "Ok perfect!\nThanks!. Ok thanks !!. Apparently that repo no longer exists :/\n=> https://stackoverflow.com/questions/49394841/cant-install-revel-on-macos-package-gopkg-in-fsnotify-v1-unrecognized-import. Ok they changed the location of the repo : https://github.com/go-fsnotify/fsnotify/blob/master/README.md\nChange your dependencies from github.com/go-fsnotify/fsnotify to github.com/fsnotify/fsnotify\nCould you release a new version of revel ?. I just did a pull request : https://github.com/revel/revel/pull/1324\nAs with Docker, we can't update anymore our application... Same for us. We have the same problem. ",
    "vinniyo111": "No updates on this?. ",
    "Zauberstuhl": "Ok I resolved it. For something like this\nGET     /stream                                 Stream.Index\nGET     /stream/:page                           Stream.Index\nI changed my controller to:\n```\nfunc (s Stream) Index() revel.Result {\n  return s.IndexPagination(0)\n}\nfunc (s Stream) IndexPagination(page int) revel.Result {\n[...]\n```\nand my conf/routes to:\nGET     /stream                                 Stream.Index\nGET     /stream/:page                           Stream.IndexPagination. ",
    "royburns": "got it\uff0cthanks. ",
    "megabait1212": "Yes,\nmodule.1.pongo2=github.com/revel/modules/template-engine/pongo2\nmodule.2.static = github.com/revel/modules/static\ntemplate.engines=pongo2,go. Maybe full debug help you \nDEBUG 19:47:42  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 19:47:42  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 19:47:42  revel module.go:190: Loaded module                             section=module\nDEBUG 19:47:42  revel module.go:190: Loaded module                             section=module\nINFO  19:47:42  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  19:47:42  revel    run.go:124: Running test (test) in dev mode\nDEBUG 19:47:42  revel    run.go:125: Base path:                                path=/home/vasily/go/src/test \nDEBUG 19:47:42  revel    run.go:129: Running in watched mode.                \nDEBUG 19:47:42  revel template.go:116: Refresh: Refreshing templates from        section=template path=[/home/vasily/go/src/github.com/revel/revel/templates] \nregistered factories map[string]func(revel.TemplateLoader) (revel.TemplateEngine, error){\"go\":(func(revel.TemplateLoader) (revel.TemplateEngine, error))(0x7d9550)}\n pongo2 \nERROR 19:47:42  revel harness.go:100: Template loader error                     error=\"Panic (Template Loader): Unknown template engine name - pongo2.\" \nDEBUG 19:47:42  revel harness.go:146: Rebuild Called                          \nINFO  19:47:42  revel  build.go:235: Cleaning dir tmp                        \nINFO  19:47:42  revel  build.go:235: Cleaning dir routes                     \nINFO  19:47:42  revel  build.go:235: Cleaning dir tmp                        \nINFO  19:47:42  revel  build.go:235: Cleaning dir routes                     \nINFO  19:47:42  revel   build.go:96: No vendor folder detected, not using dependency manager to import files\nDEBUG 19:47:42  revel  build.go:139: Exec:                                     args=\"[/usr/lib/go-1.9/bin/go build -i -ldflags -X test/app.AppVersion= -X test/app.BuildTime=2017-12-09T17:47:42Z -tags  -o /home/vasily/go/bin/revel.d/test/test test/app/tmp]\" \nDEBUG 19:47:43  revel     app.go:63: Exec app:                                 path=/home/vasily/go/bin/revel.d/test/test args=\"[/home/vasily/go/bin/revel.d/test/test -port=43837 -importPath=test -runMode=dev]\" \nDEBUG 19:47:43  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 19:47:43  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 19:47:43  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 19:47:43  revel module.go:190: Loaded module                             section=module\nDEBUG 19:47:43  revel module.go:190: Loaded module                             section=module\nINFO  19:47:43  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  19:47:43    app    main.go:28: Running revel server                    \nDEBUG 19:47:43  revel controller_type.go:64: Registered controller: App\\app            section=controller \nDEBUG 19:47:43  revel controller.go:523: RegisterController:Registered controller  section=controller controller=App\\app \nDEBUG 19:47:43  revel controller_type.go:64: Registered controller: static\\static      section=controller \nDEBUG 19:47:43  revel controller.go:523: RegisterController:Registered controller  section=controller controller=static\\static \nDEBUG 19:47:43  revel server.go:106: InitServerEngine: Found server engine and invoking  section=server name=go \nINFO  19:47:43    app  utils.go:134: Adding standard handler crit output stderr  section=system \nINFO  19:47:43    app  utils.go:113: Adding key map handler log.all.filter.module.app all output stdout  section=system \nINFO  19:47:43    app  utils.go:113: Adding key map handler log.error.nfilter.module.app error output stderr  section=system \nListening on.. localhost:43837\nINFO  19:47:43  revel harness.go:190: Listening on :9000                      \nINFO  19:48:22    app server-engine.go:165: Request Stats                             ip=127.0.0.1 path=/ method=GET action=App.Index namespace=App\\ start=2017/12/09 19:48:22 status=200 duration_seconds=0.0074565 section=requestlog \nINFO  19:48:22    app server-engine.go:165: Request Stats                             ip=127.0.0.1 path=/favicon.ico method=GET start=2017/12/09 19:48:22 status=404 duration_seconds=0.0001366 section=requestlog \nINFO  19:49:05    app server-engine.go:165: Request Stats                             ip=127.0.0.1 path=/ method=GET action=App.Index namespace=App\\ start=2017/12/09 19:49:05 status=200 duration_seconds=0.0067503 section=requestlog \n. \nIf I use a filename like index.html it shows like on the image. But if I change filename to the index.pongo2.html then it shows errors\nServer Error:\nTemplate Compilation Error (in /home/vasily/go/src/test/app/views/App/Index.pongo2.html:5): [Error (where: parser) in header.html | Line 5 Col 14 near '.'] Expected either a number, string, keyword or identifier.\nAdditionally, an error occurred when rendering the error page:\nTemplate Compilation Error (in /home/vasily/go/src/test/app/views/App/Index.pongo2.html:5): [Error (where: parser) in header.html | Line 5 Col 14 near '.'] Expected either a number, string, keyword or identifier. \nThe same error with shebang. DEBUG 20:47:38  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \n~\n~ revel! http://revel.github.io\n~\nDEBUG 20:47:38  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 20:47:38  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 20:47:38  revel module.go:190: Loaded module                             section=module\nDEBUG 20:47:38  revel module.go:190: Loaded module                             section=module\nINFO  20:47:38  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  20:47:38  revel    run.go:124: Running test (test) in dev mode\nDEBUG 20:47:38  revel    run.go:125: Base path:                                path=/home/vasily/go/src/test \nDEBUG 20:47:38  revel    run.go:129: Running in watched mode.                \nDEBUG 20:47:38  revel template.go:116: Refresh: Refreshing templates from        section=template path=[/home/vasily/go/src/github.com/revel/revel/templates] \nregistered factories map[string]func(revel.TemplateLoader) (revel.TemplateEngine, error){\"go\":(func(revel.TemplateLoader) (revel.TemplateEngine, error))(0x7d9550)}\n pongo2 \nERROR 20:47:38  revel harness.go:100: Template loader error                     error=\"Panic (Template Loader): Unknown template engine name - pongo2.\" \nDEBUG 20:47:38  revel harness.go:146: Rebuild Called                          \nINFO  20:47:38  revel  build.go:235: Cleaning dir tmp                        \nINFO  20:47:38  revel  build.go:235: Cleaning dir routes                     \nINFO  20:47:38  revel  build.go:235: Cleaning dir tmp                        \nINFO  20:47:38  revel  build.go:235: Cleaning dir routes                     \nINFO  20:47:38  revel   build.go:96: No vendor folder detected, not using dependency manager to import files\nDEBUG 20:47:38  revel  build.go:139: Exec:                                     args=\"[/usr/lib/go-1.9/bin/go build -i -ldflags -X test/app.AppVersion= -X test/app.BuildTime=2017-12-09T18:47:38Z -tags  -o /home/vasily/go/bin/revel.d/test/test test/app/tmp]\" \nDEBUG 20:47:39  revel     app.go:63: Exec app:                                 path=/home/vasily/go/bin/revel.d/test/test args=\"[/home/vasily/go/bin/revel.d/test/test -port=36435 -importPath=test -runMode=dev]\" \nDEBUG 20:47:39  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 20:47:39  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 20:47:39  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 20:47:39  revel module.go:190: Loaded module                             section=module\nDEBUG 20:47:39  revel module.go:190: Loaded module                             section=module\nINFO  20:47:39  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  20:47:39    app    main.go:28: Running revel server                    \nDEBUG 20:47:39  revel controller_type.go:64: Registered controller: App\\app            section=controller \nDEBUG 20:47:39  revel controller.go:523: RegisterController:Registered controller  section=controller controller=App\\app \nDEBUG 20:47:39  revel controller_type.go:64: Registered controller: static\\static      section=controller \nDEBUG 20:47:39  revel controller.go:523: RegisterController:Registered controller  section=controller controller=static\\static \nDEBUG 20:47:39  revel server.go:106: InitServerEngine: Found server engine and invoking  section=server name=go \nINFO  20:47:39    app  utils.go:134: Adding standard handler crit output stderr  section=system \nINFO  20:47:39    app  utils.go:113: Adding key map handler log.all.filter.module.app all output stdout  section=system \nINFO  20:47:39    app  utils.go:113: Adding key map handler log.error.nfilter.module.app error output stderr  section=system \n. I don't have more, now copied everything from console\nrevel run\nDEBUG 21:36:47  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \n~\n~ revel! http://revel.github.io\n~\nDEBUG 21:36:47  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 21:36:47  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 21:36:47  revel module.go:190: Loaded module                             section=module\nDEBUG 21:36:47  revel module.go:190: Loaded module                             section=module\nINFO  21:36:47  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  21:36:47  revel    run.go:124: Running test (test) in dev mode\nDEBUG 21:36:47  revel    run.go:125: Base path:                                path=/home/vasily/go/src/test \nDEBUG 21:36:47  revel    run.go:129: Running in watched mode.                \nDEBUG 21:36:47  revel template.go:116: Refresh: Refreshing templates from        section=template path=[/home/vasily/go/src/github.com/revel/revel/templates] \nregistered factories map[string]func(revel.TemplateLoader) (revel.TemplateEngine, error){\"go\":(func(revel.TemplateLoader) (revel.TemplateEngine, error))(0x7d9550)}\n pongo2 \nERROR 21:36:47  revel harness.go:100: Template loader error                     error=\"Panic (Template Loader): Unknown template engine name - pongo2.\" \nDEBUG 21:36:47  revel harness.go:146: Rebuild Called                          \nINFO  21:36:47  revel  build.go:235: Cleaning dir tmp                        \nINFO  21:36:47  revel  build.go:235: Cleaning dir routes                     \nINFO  21:36:47  revel  build.go:235: Cleaning dir tmp                        \nINFO  21:36:47  revel  build.go:235: Cleaning dir routes                     \nINFO  21:36:47  revel   build.go:96: No vendor folder detected, not using dependency manager to import files\nDEBUG 21:36:47  revel  build.go:139: Exec:                                     args=\"[/usr/lib/go-1.9/bin/go build -i -ldflags -X test/app.AppVersion= -X test/app.BuildTime=2017-12-09T19:36:47Z -tags  -o /home/vasily/go/bin/revel.d/test/test test/app/tmp]\" \nDEBUG 21:36:48  revel     app.go:63: Exec app:                                 path=/home/vasily/go/bin/revel.d/test/test args=\"[/home/vasily/go/bin/revel.d/test/test -port=38763 -importPath=test -runMode=dev]\" \nDEBUG 21:36:48  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 21:36:48  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 21:36:48  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 21:36:48  revel module.go:190: Loaded module                             section=module\nDEBUG 21:36:48  revel module.go:190: Loaded module                             section=module\nINFO  21:36:48  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  21:36:48    app    main.go:28: Running revel server                    \nDEBUG 21:36:48  revel controller_type.go:64: Registered controller: App\\app            section=controller \nDEBUG 21:36:48  revel controller.go:523: RegisterController:Registered controller  section=controller controller=App\\app \nDEBUG 21:36:48  revel controller_type.go:64: Registered controller: static\\static      section=controller \nDEBUG 21:36:48  revel controller.go:523: RegisterController:Registered controller  section=controller controller=static\\static \nDEBUG 21:36:48  revel server.go:106: InitServerEngine: Found server engine and invoking  section=server name=go \nINFO  21:36:48    app  utils.go:134: Adding standard handler crit output stderr  section=system \nINFO  21:36:48    app  utils.go:113: Adding key map handler log.all.filter.module.app all output stdout  section=system \nINFO  21:36:48    app  utils.go:113: Adding key map handler log.error.nfilter.module.app error output stderr  section=system \nListening on.. localhost:38763\nINFO  21:36:48  revel harness.go:190: Listening on :9000                        . if it helps, full app.conf\n```\n\nRevel configuration file\nMore info at http://revel.github.io/manual/appconf.html\n\nSets revel.AppName for use in-app.\nExample:\nif revel.AppName {...}\napp.name = test\nA secret string which is passed to cryptographically sign the cookie to prevent\n(and detect) user modification.\nKeep this string secret or users will be able to inject arbitrary cookie values\ninto your application\napp.secret = mAXEpa8CzG9deFytrD7bJvXzSkAowebC1j97EmHl6XLeaMDFGQG2mIQKsBIVFj1D\nRevel running behind proxy like nginx, haproxy, etc.\napp.behind.proxy = false\nThe IP address on which to listen.\nhttp.addr =\nThe port on which to listen.\nhttp.port = 9000\nWhether to use SSL or not.\nhttp.ssl = false\nPath to an X509 certificate file, if using SSL.\nhttp.sslcert =\nPath to an X509 certificate key, if using SSL.\nhttp.sslkey =\nTimeout specifies a time limit for request (in seconds) made by a single client.\nA Timeout of zero means no timeout.\nhttp.timeout.read = 90\nhttp.timeout.write = 60\nFor any cookies set by Revel (Session,Flash,Error) these properties will set\nthe fields of:\nhttp://golang.org/pkg/net/http/#Cookie\n\nEach cookie set by Revel is prefixed with this string.\ncookie.prefix = REVEL\nA secure cookie has the secure attribute enabled and is only used via HTTPS,\nensuring that the cookie is always encrypted when transmitting from client to\nserver. This makes the cookie less likely to be exposed to cookie theft via\neavesdropping.\n\nDefaults to false. If 'http.ssl' is enabled, this will be defaulted to true.\nThis should only be true when Revel is handling SSL connections. If you are\nusing a proxy in front of revel (Nginx, Apache, etc), then this should be left\nas false.\ncookie.secure = false\nLimit cookie access to a given domain.\ncookie.domain =\nDefine when your session cookie expires.\nValues:\n\"720h\"\nA time duration (http://golang.org/pkg/time/#ParseDuration) after which\nthe cookie expires and the session is invalid.\n\"session\"\nSets a session cookie which invalidates the session when the user close\nthe browser.\nsession.expires = 720h\nThe date format used by Revel. Possible formats defined by the Go time\npackage (http://golang.org/pkg/time/#Parse)\nformat.date     = 2006-01-02\nformat.datetime = 2006-01-02 15:04\nDetermines whether the template rendering should use chunked encoding.\nChunked encoding can decrease the time to first byte on the client side by\nsending data before the entire template has been fully rendered.\nresults.chunked = false\nThe default language of this application.\ni18n.default_language = en\nThe default format when message is missing.\nThe original message shows in %s\ni18n.unknown_format = \"??? %s ???\"\nmodule.1.pongo2 = github.com/revel/modules/template-engine/pongo2\nModule to serve static content such as CSS, JavaScript and Media files\nAllows Routes like this:\nStatic.ServeModule(\"modulename\",\"public\")\nmodule.2.static = github.com/revel/modules/static\ntemplate.engines = pongo2,go\n\nSection: dev\nThis section is evaluated when running Revel in dev mode. Like so:\nrevel run path/to/myapp\n[dev]\nThis sets revel.DevMode for use in-app.\nExample:\nif revel.DevMode {...}\nor in your templates with\n<no value>\nValues:\n\"true\"\nSets DevMode to true.\n\"false\"\nSets DevMode to false.\nmode.dev = true\nPretty print JSON/XML when calling RenderJSON/RenderXML\nValues:\n\"true\"\nEnables pretty printing.\n\"false\"\nDisables pretty printing.\nresults.pretty = true\nWatch your applicaton files for changes and automatically rebuild\nValues:\n\"true\"\nEnables auto rebuilding.\n\"false\"\nDisables auto rebuilding.\nwatch = true\nDefine when to rebuild new changes.\nValues:\n\"normal\"\nRebuild when a new request is received and changes have been detected.\n\"eager\"\nRebuild as soon as changes are detected.\nwatch.mode = normal\nWatch the entire $GOPATH for changes.\nValues:\n\"true\"\nIncludes $GOPATH in watch path.\n\"false\"\nExcludes $GOPATH from watch path. Default value.\nwatch.gopath = true\nModule to run code tests in the browser\nSee:\nhttp://revel.github.io/manual/testing.html\nmodule.testrunner = github.com/revel/modules/testrunner\nWhere to log the various Revel logs\nValues:\n\"off\"\nDisable log output.\n\"stdout\"\nLog to OS's standard output.\n\"stderr\"\nLog to Os's standard error output. Default value.\n\"relative/path/to/log\"\nLog to file.\nlog.all.filter.module.app = stdout    # Log all loggers for the application to the stdout\nlog.error.nfilter.module.app = stderr # Everything else that logs an error to stderr\nlog.crit.output = stderr              # Everything that logs something as critical goes to this\nRevel request access log\nAccess log line format:\nINFO  21:53:55 static server-engine.go:169: Request Stats                             ip=127.0.0.1 path=/public/vendors/datatables.net-buttons/js/buttons.html5.min.js method=GET start=2017/08/31 21:53:55 status=200 duration_seconds=0.0002583 section=requestlog\nlog.request.output = stdout\n\nSection: prod\nThis section is evaluated when running Revel in production mode. Like so:\nrevel run path/to/myapp prod\nSee:\n[dev] section for documentation of the various settings\n[prod]\nmode.dev = false\nresults.pretty = false\nwatch = false\nmodule.testrunner =\nlog.warn.output  = log/%(app.name)-warn.json    # Log all warn messages to file\nlog.error.output = log/%(app.name)-error.json   # Log all errors to file\nlog.crit.output = log/%(app.name)-critical.json # Log all critical to file\nRevel request access log (json format)\nExample:\nlog.request.output = %(app.name)s-request.json\nlog.request.output = log/%(app.name)s-requests.json\n```\n. I think the output is the same. I didn't see a big difference. Of course, maybe I am doing something wrong.\n`DEBUG 19:06:06  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \n~\n~ revel! http://revel.github.io\n~\nDEBUG 19:06:06  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 19:06:06  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 19:06:06  revel module.go:190: Loaded module                             section=module\nDEBUG 19:06:06  revel module.go:190: Loaded module                             section=module\nINFO  19:06:06  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  19:06:06  revel    run.go:124: Running test (test) in dev mode\nDEBUG 19:06:06  revel    run.go:125: Base path:                                path=/home/vasily/go/src/test \nDEBUG 19:06:06  revel    run.go:129: Running in watched mode.                \nDEBUG 19:06:06  revel template.go:116: Refresh: Refreshing templates from        section=template path=[/home/vasily/go/src/github.com/revel/revel/templates] \nregistered factories map[string]func(revel.TemplateLoader) (revel.TemplateEngine, error){\"go\":(func(revel.TemplateLoader) (revel.TemplateEngine, error))(0x7d9550)}\n pongo2 \nERROR 19:06:06  revel harness.go:100: Template loader error                     error=\"Panic (Template Loader): Unknown template engine name - pongo2.\" \nDEBUG 19:06:06  revel harness.go:146: Rebuild Called                          \nINFO  19:06:06  revel  build.go:235: Cleaning dir tmp                        \nINFO  19:06:06  revel  build.go:235: Cleaning dir routes                     \nINFO  19:06:06  revel  build.go:235: Cleaning dir tmp                        \nINFO  19:06:06  revel  build.go:235: Cleaning dir routes                     \nINFO  19:06:06  revel   build.go:96: No vendor folder detected, not using dependency manager to import files\nDEBUG 19:06:06  revel  build.go:139: Exec:                                     args=\"[/usr/lib/go-1.9/bin/go build -i -ldflags -X test/app.AppVersion= -X test/app.BuildTime=2017-12-11T17:06:06Z -tags  -o /home/vasily/go/bin/revel.d/test/test test/app/tmp]\" \nDEBUG 19:06:07  revel     app.go:63: Exec app:                                 path=/home/vasily/go/bin/revel.d/test/test args=\"[/home/vasily/go/bin/revel.d/test/test -port=39291 -importPath=test -runMode=dev]\" \nDEBUG 19:06:07  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 19:06:07  revel module.go:145: Sorted keys                               section=module keys=module.1.pongo2 \nDEBUG 19:06:07  revel module.go:145: Sorted keys                               section=module keys=module.2.static \nDEBUG 19:06:07  revel module.go:190: Loaded module                             section=module\nDEBUG 19:06:07  revel module.go:190: Loaded module                             section=module\nINFO  19:06:07  revel  revel.go:204: Initialized Revel                         Version=0.18.0 BuildDate=2017-10-30 MinimumGoVersion=\">= go1.6\" \nINFO  19:06:07    app    main.go:28: Running revel server                    \nDEBUG 19:06:07  revel controller_type.go:64: Registered controller: App\\app            section=controller \nDEBUG 19:06:07  revel controller.go:523: RegisterController:Registered controller  section=controller controller=App\\app \nDEBUG 19:06:07  revel controller_type.go:64: Registered controller: static\\static      section=controller \nDEBUG 19:06:07  revel controller.go:523: RegisterController:Registered controller  section=controller controller=static\\static \nDEBUG 19:06:07  revel server.go:106: InitServerEngine: Found server engine and invoking  section=server name=go `. I still waiting for any ideas how to fix it. Please advice.. Thank you now, it's working. And also, I knew a new log output. Thank you. Ok, thank you I will check. Thank you for your help. I decide to stay with Gorilla Schema. ",
    "pranay-1995": "@notzippy I have already installed revel on my system. So, how do you update revel with this patch merged?. ",
    "bityogi": "@lujiacn : That worked!. ",
    "GriffinMB": "Done, thanks!. ",
    "djtm": "Hi,\nas a hotfix I've tried: \n using /golang as gopath with a symlink (ENV GOPATH=/golang)\n using /lang as gopath with a symlink (ENV GOPATH=/lang)\n* adding the path so that /go/src/runtime/debug/stack.go is actually present.\nTo my surprise, both didn't help. Any further ideas at least for a hotfix?. @ralfthewise: Thanks a lot! Did you get it to work with minimal images?\nFROM golang:1.9-alpine AS builder\n...\nFROM alpine\nCOPY --from=builder /gopath/...backend/ /gopath/...backend/\nCOPY --from=builder /usr/local/go/ /go/\nRUN mkdir -p /usr/local && ln -s /go /usr/local/go\nStill getting the same error however...\n. ",
    "ralfthewise": "@djtm we were able to work around it with Dockerfiles starting off as such:\n```\nFROM golang:1.9.2                                                                                                                                                                                            \nMAINTAINER radar radar@radartools.net\nENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/gopath/bin\nRUN mkdir /gopath\nENV GOPATH=/gopath\nADD backend /gopath/src/github.com/foo/bar/backend\n...\n```. ",
    "slimina": "can not  post \uff0c HTTP ERROR 502. ",
    "duraki": "@Tagussan the watch checks for app/ directory changes and not example: messages or conf directories. Thats why you need to restart server when changing messages or routes.. ",
    "KirisameMarisa": "Thank you\uff01\nIt's easier to read than before:)\n. ",
    "samuelecat": "I've tested the same code under Linux Ubuntu Server 14.04, go 1.9.2, revel 0.18.0  => no issues.. Update: I've updated Go to the latest version 1.9.3 and the problem disappear. I can't tell if 1.9.3 has a fix or it was windows related.\n*I still see the escape characters:\n[36mDEBUG [0m\nregardless if log.colorize is set to true or false (it is present in every section of app.conf). ",
    "lokhman": "\nI still see the escape characters: [36mDEBUG [0m regardless if log.colorize is set to true or false (it is present in every section of app.conf)\n\n+1 I have the same issue on Windows. I have amended the code to match zero-length values and added extra test case. CI build fails due to some other irrelevant issue (probably requires redeployment).. ",
    "rikvdh": "I understand what you mean, but how do you handle/validate user input without losing form-data then.\nWhen I redirect the user the form-data is gone and users need to re-type the input, especially some bigger form can become very obnoxious to users when they need to re-type a few times.\nMy current solution is to set the view-vars to display the error as you described and omitting the .Flash.* because with your provided solution the flash variables remain and don't get removed and shall appear on the next page again.\nAlso you can never be sure that the next request handles the flash-message, perhaps you need to redirect again or whatever request that doesn't display the flash message to the user, the filter currently automatically drop all flash-messages, even when .Render isn't even called.. ",
    "phamthanhlam": "\nI using Windown 10 and golang version 1.9.4. I have not written any code yet. I only use the following command:\n\nrevel new github.com/lam/tmdt\nrevel rung github.com/lam/tmdt\nI run http://localhost:9000 . It work but link css error.\n\n. \n",
    "hwsong": "i have same issue on windows 10 / golang 1.9.2 or 1.9.4. Commenting out lines 171-174 in the revel / modules / static / app / controllers / static.go file then solves the problem.\ntested on Windows 10 / golang 1.9.4 and CentOS 7 / golang 1.9.4. ",
    "mighty-pirate": "I'd definitely like to try building something into revel but it might not be for a few weeks yet.\nIt could be worth namespacing the config per module, but that would mean that a module cannot override the base config at all. Though if overriding is possible, it could get messy with different modules conflicting with and overriding one another, so it would have to be used with caution. \nIt would probably make sense to have a base config file within the module for the defaults, called 'module.conf'. Then within the project using the module, use a config file for any changes to the defaults. This would be named using the identifer that was specified when importing the module so for modules.pages = github.com/username/module-name the config would be called 'pages.conf'.\nThe same would then apply to modules using modules. So in the parent module.conf you would have modules.child = github.com/username/child-module-name which would read the default module.conf from the child module and then the child.conf from the parent module.\nThe example I have given above probably wouldn't work very well unless config was namespaced and only accessible at the level the module was imported, and the module itself.  \nAnother issue which could arise is an infinite loop of importing modules. It could be solved with some logic that stops a module from importing a parent/grandparent/etc. This doesn't have to be included though, as a warning may suffice.. Thanks very much! I will give it a try and let you know soon :+1: \nIf it was possible to modify the revel.Config just after the config has been read in to memory, and before the main.go file was generated, would revel then do all the work?\nI was eventually going to fork Revel and add the module loading code into that, to allow submodules, along with a config module that I am going to build shortly. Which would make this is a non-issue, but for now, I am keeping it as a separate module. I expect that before I fork and pull request, it would be better to talk to a maintainer of the codebase, such as yourself.\nIf submodule loading isn't suitable for the revel codebase, then I was thinking that perhaps allowing a CodePath inside apps and modules for the build stage (perhaps a build directory), that the harness imports, which could be triggered by AddBuildEventHandler with HARNESS_BEFORE_BUILD and HARNESS_AFTER_BUILD events. These events would be triggered before and after main.go is generated.\nI expect this is probably very edge case stuff as most people who use Revel don't want to do anything until their app has started running, so maybe it is more work that it is worth.. The code for adding modules worked great, so thanks very much for that!\nTo register controllers, I generate a file similar to main.go, build it as a plugin, and then load the plugin into the app. This allows me to keep things pretty automated. The only annoyance is the duplicated code from revel/cmd/harness, but I can live with that :smile: \nThanks very much for your help :+1: . Yes, that does the job, thanks very much for the help :smile: . ",
    "Rukenshia": "Thanks a lot @notzippy, that seems to work just fine:\n```go\ntype sentryHandler struct{}\nfunc (s sentryHandler) Log(r log15.Record) error {\n    ctx, err := s.getCtxFromArray(r.Ctx)\n    if err == nil {\n        raven.CaptureError(errors.New(r.Msg), ctx)\n    } else {\n        raven.CaptureError(errors.New(r.Msg), nil)\n    }\nreturn nil\n\n}\nfunc (s *sentryHandler) getCtxFromArray(ctx []interface{}) (map[string]string, error) {\n    if len(ctx)%2 != 0 {\n        return nil, errors.New(\"Ctx array length is odd\")\n    }\nctxMap := make(map[string]string, len(ctx)/2)\n\nfor i, v := range ctx {\n    if i%2 == 0 {\n        key, ok := v.(string)\n        if !ok {\n            return nil, errors.New(\"Ctx key not a string\")\n        }\n        str, ok := ctx[i+1].(string)\n        if !ok {\n            return nil, errors.New(\"Ctx value not a string\")\n        }\n\n        ctxMap[key] = str\n    }\n}\n\nreturn ctxMap, nil\n\n}\nfunc init() {\n    // ...\n    logger.LogFunctionMap[\"sentry\"] = func(c logger.CompositeMultiHandler, options logger.LogOptions) {\n        c.SetHandler(&sentryHandler{}, false, logger.LvlError)\n    }\n}\n```\nIs there a helper function to convert the Ctx []interface{} back into a map? I'm currently doing this manually as you can see. But other than that it does what I want :). Hey! Sorry it took me so long to get back. These changes will work like a charm, thank you so much for that!. ",
    "vzool": "It is somehow similar, but not exactly like it.\nThe differences between current organization and proposed one is:\n- views & messages directories moved to be inside resources directory.\n- init.go file moved to bootstrap/init/web.go directory.\n- Added bootstrap/init/api.go to initialize the APIs.\n-  All generated routes moved to be in bootstrap/routes directory.\n- conf directory renamed to be config.\n- conf/route file moved to routes/web & routes/api.\n- tmp directory moved from app to be inside bootstrap directory.. After I dived more into the code, I discovered that init.go is made for the web access.\nSo, we need another one specific for the APIs.\nBecause, any great app needs an APIs with different initialization than the web need, I updated the differences and The Proposal structure above.. ",
    "nikolawannabe": "https://github.com/fsnotify/fsnotify/issues/118 Author claims to have removed that a long time ago.  Proper url linked in attached commit.. ",
    "alika": "Related issue https://github.com/go-fsnotify/fsnotify/issues/1. Seems this repo was just created today https://github.com/go-fsnotify. Which also corresponds to when my build started breaking when trying to go get github.com/revel/cmd/revel.. ",
    "Liangzx": "I use \"github.com/fsnotify/fsnotify\" run well. ",
    "yatuhashi": "Great! Thanks!. ",
    "gyurobenjamin": "put this into Gokpg.toml\ntoml\nignored = [\n  \"github.com/revel/cron\",\n  \"github.com/revel/modules\",\n  \"github.com/revel/modules/jobs/app/jobs\",\n  \"github.com/revel/revel\",\n  \"github.com/revel/revel/testing\",\n]. @luciomr Yes I did. Check my last comment. Before I closed the issue.. I can use directly the pod IP but not the service IP.. 0.0.0.0 and proxy did the job. ",
    "shaumux": "\nCRIT  20:46:56  revel watcher.go:78: Watcher: Failed to stat watched path      section=util path=/home/shaumux/go/mercury/src/bitbucket.org/dataemo/mercury/vendor/github.com/revel/revel/templates error=\"stat /home/shaumux/go/mercury/src/bitbucket.org/dataemo/mercury/vendor/github.com/revel/revel/templates: no such file or directory\" \n\nI get this error when I run in dev mode, but if I run in prod mode I don't get the error and works well.\nMy Gopkg.toml looks like this\n```\nrequired = [\"github.com/revel/cmd/revel\"]\n[[constraint]]\n  name = \"github.com/revel/modules\"\n  version = \"0.19.0\"\n[[constraint]]\n  name = \"github.com/revel/revel\"\n  version = \"0.19.1\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/xeonx/timeago\"\n[[override]]\n  branch = \"master\"\n  name = \"github.com/revel/log15\"\n[[override]]\n  version = \"0.19.0\"\n  name = \"github.com/revel/cmd\"\n[prune]\n  go-tests = true\n  unused-packages = true\n```\nI want to get this running without the ignore statements as I want to lock in versions, or is that not a good practice in Go? I'm new to go and revel.. ",
    "stuartkuentzel": "I'm having the same issue. Got it to work by adding the ignore array, but couldn't get it to work with the overrides. . @notzippy like @gyurobenjamin recommended above, added this to Gokpg.toml\nignored = [\n  \"github.com/revel/cron\",\n  \"github.com/revel/modules\",\n  \"github.com/revel/modules/jobs/app/jobs\",\n  \"github.com/revel/revel\",\n  \"github.com/revel/revel/testing\",\n]. ",
    "nelsoncaastro": "First of all, thank you so much @notzippy . It worked almost perfectly. I updated the .travis.yml as you instructed, also included postgres as the database service. I ran the build again and: \nThe command \"go test -v github.com/revel/revel/...\" exited with 2.\nThe command \"revel test    github.com/nelsoncaastro/amai dev\" exited with 0. \nWhich is so relieving, The actual thing i was trying worked for the first time, but only on windows and linux. In the MacOS X Environment it failed creating the database in postgres, I did little research and found this then modified the before_install of the .travis.yml to: \nbefore_install:\n  - ln -s $GOPATH/src/github.com/nelsoncaastro/amai $GOPATH/src/amai\n  - echo $TRAVIS_OS_NAME\n  - |\n    if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n      brew update && brew install memcached redis && brew services start redis && brew services start memcached\n      export PG_DATA=$(brew --prefix)/var/postgres\n      pg_ctl -w start -l postgres.log --pgdata ${PG_DATA}\n      createuser -s postgres\n      psql -c 'create database amai_development;' -U postgres\n      cat postgres.log\n    fi\n  - redis-server --daemonize yes\n  - redis-cli info\n  - |\n    if [[ \"$TRAVIS_OS_NAME\" != \"osx\" ]]; then\n      psql -c 'create database amai_development;' -U postgres\n    fi\nI'm extremly grateful with your help so far, I've achieved more than enough with successfully doing revel test    github.com/nelsoncaastro/amai dev but out of pure curiosity I have two questions:\n\nWhy did the go test -v github.com/revel/revel/... fail?\n\nLine 740\nThe command \"go test -v github.com/revel/revel/...\" exited with 2.\n1. This two errors who cause the buld to fail in the MacOS X Environment\nLine 2875\nERROR 03:22:21  revel  build.go:157: ../../jinzhu/gorm/dialects/mysql/mysql.go:3:8: cannot find package \"github.com/go-sql-driver/mysql\" in any of:\n    /Users/travis/.gimme/versions/go1.10.darwin.amd64/src/github.com/go-sql-driver/mysql (from $GOROOT)\n    /Users/travis/gopath/src/github.com/go-sql-driver/mysql (from $GOPATH) (   .    .    .    )\nLine 2920\nERROR 03:22:28    app    gorm.go:29: * LOG DEPRECATED * FATAL dial tcp [::1]:5432: connect: connection refused  section=deprecated \npanic: dial tcp [::1]:5432: connect: connection refused (   .    .    .    )\nThank you in advance!. ",
    "koreset": "@notzippy Thanks. Seems to work.. ",
    "shanshel": "I fix it\nthis command not working for me \"Windows 10\"\n@echo off\nMyapp.exe -importPath Myapp -srcPath %CD%\\src -runMode dev\nI just removed %CD% and it works\nRevelPOS.exe -importPath Myapp -srcPath src -runMode dev\n. ",
    "hinet": "I have the same problem. I suggest fixing bugs in Windows 10.. Why do I need sqlite3? I don't need it.. ",
    "golddranks": "Thanks. I send some clarifications to the documentation: https://github.com/revel/revel.github.io/pull/170. ",
    "Juancesar123": "OPTIONS request 404 not found. even though i will delete data using http.delete. ",
    "godlikemouse": "You may just need to add an options handler into your routes config file.  Especially if you're trying to do a CORS request.. ",
    "vdharashive": "Hi ,\nThis is for the POST request. post is done using gzip/DEFLATE and server side i need unzip the stream to json.\nThanks\nVinod D. thanks steve, Ill try this\nOn Tue, Oct 30, 2018 at 9:51 PM Steve notifications@github.com wrote:\n\nSo kind of like a pre-processor before the body is pulled out for binding.\nYou can do that with a filter http://revel.github.io/manual/filters.html\nlike\nrealRequest := controller.Request.In.GetRaw().(*http.Request)\nbuf, _ := ioutil.ReadAll(realRequest.Body)\nrdr1 := ioutil.NopCloser(bytes.NewBuffer(unpackBody(buf))) // note unpackBody would return the unziped body\nrealRequest.Body = rdr1 // OK since rdr1 implements the io.ReadCloser interface\nJust make sure the filter is called before the actionfilter is invoked\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1355#issuecomment-434367235, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABKdqaFREZmkBwe43IU8F6bOxrcSChV0ks5uqHx2gaJpZM4V8aAq\n.\n. \n",
    "spokzers": "It did give me a \ncan't load package: package github.com/revel/modules: no Go files in /home/spokzers/go_workspace/src/github.com/revel/modules\nBut when I did revel run -a myapp, it does work\nThanks. ",
    "dropski": "I still have a problem to run my app, same errors as above. Any idea how to run it?\nWARN  18:06:23 harness.go:175: No http.addr specified in the app.conf listening on localhost interface only. This will not allow external access to your application \nDEBUG 18:06:25  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go \nDEBUG 18:06:25  revel template_engine.go:45: Registered template engine loaded         section=template go=nil LOG15_ERROR=\"Normalized odd number of arguments by adding nil\" \nINFO  18:06:25    app  revel.go:170: app.conf: No mode found: {\"mode\":\"dev\", \"specialUseFlag\":false}  section=system \nERROR 18:06:25 harness.go:231: Could not start application              error=\"revel/harness: app died reason: exit status 1\". It won't help, but I figured it out, you have to create some new revel project revel new some_project and after that everything works fine with other projects - weird but helps\nAnd about version, I have latest.. ",
    "burnquist": "ihave some problems....\nbut i go get again on with go get github.com/revel/modules/static\nso next its works\nRunning run\nRevel executing: run a Revel application\nWARN  14:49:11 harness.go:175: No http.addr specified in the app.conf listening on localhost interface only. This will not allow external access to your application \nINFO  14:49:13    app     run.go:32: Running revel server                    \nINFO  14:49:13    app   plugin.go:9: Go to /@tests to run the tests.         \nRevel engine is listening on.. localhost:44345\n. ",
    "eenagy": "This is still a bug with the latest dependencies.. ",
    "xiuluo211314": "I get the same error with you, i used the latest version, but still get this error, is there solution ?Thanks\n`\nWARN  06:44:29 source_info.go:102: Type found in package: controllers, but did not embed from: revel.Controller name=...\nDEBUG 06:44:31  revel  server.go:27: RegisterServerEngine: Registered engine   section=server name=go\nINFO  06:44:31    app  revel.go:170: app.conf: No mode found: {\"mode\":\"dev\", \"specialUseFlag\":[]}  section=system\nRevel proxy is listening, point your browser to : 9000\nERROR 06:44:31 harness.go:233: Could not start application              error=\"revel/harness: app died reason: exit status 1\"\n`. ",
    "amitsharma8891": "I think no one is interested in solving this issue.. > This has been merged, let us know if the issue persists.\nAfter the fix, now it's working. \nThanks. ",
    "mrarrowb": "closing this issue. ",
    "MAF1N": "this one is still reproduced for Win 10 . ",
    "michaellee8": "Same here, when will same release happen?. ",
    "MikeZ87": "Dido! Hopefully soon!. ",
    "keithnyc": "Is there any workaround?. ",
    "bukku-yuda": "edit file server_adapter_go.go\nhttps://github.com/revel/revel/pull/1380/files\nplease remove \nimport syscall\nchange => signal.Notify(signalChan, syscall.SIGINT, syscall.SIGTERM, syscall.SIGKILL, syscall.SIGUSR2)\nback to => signal.Notify(signalChan, os.Interrupt, os.Kill)\n. ",
    "Laur1nMartins": "You also need to remove the \"syscall\" import :). ",
    "usk83": "I suspect this issue might be something related to https://github.com/revel/cmd/issues/149.. ",
    "lucastetreault": "Changing revel.Session from map[string]string to map[string]interface{} is super annoying. Now I'm forced to do type conversions all over my code. It's probably too late to argue against this change given that it has been merged... but if it were up to me I would put this back the way it was and provide convenience methods to marshal/unmarshal into the session.. ",
    "sinataghva": "Thanks, I'll try filters to see how it can be done.. Sorry for the delay, I was busy with other parts of the projet and had this issue on hold.\nI followed your suggestion and it worked !\nI copy the code here for future developers that might have the same issue.\nI first defined a filter:\n```\nvar SlackFilter = func(c *revel.Controller, fc []revel.Filter) {\nrealRequest := c.Request.In.GetRaw().(*http.Request)\nbuf, _ := ioutil.ReadAll(realRequest.Body)\nrdr := ioutil.NopCloser(bytes.NewBuffer(buf))\n\nc.Args[\"body\"] = buf\n\nrealRequest.Body = rdr\n\nfc[0](c, fc[1:])\n\n}\n```\nThen in the init() function of my controller I wrote this:\nrevel.FilterController(Slack{}).Insert(SlackFilter,revel.BEFORE,revel.ParamsFilter)\nThis way I added my filter just before the ParamsFilter and I did this only for the controller that receives Slack requests.\nI later acquire the body from c.Args[\"body\"] to calculate the HMAC hash value and compare it with the value that is provided in the header.. You're right, my bad. I updated my code.. ",
    "alwindoss": "@notzippy you are right it is failing in cloding the skeleton. Following is the output you asked for..\n```\n\nrevel new -a github.com/alwindoss/tetract -v                                                                                                                          \nINFO  14:34:20 command_config.go:140: Returned import path                     path=github.com/alwindoss/tetract buildpath=C:\\Drive\\Programming\\go                   \nRevel executing: create a skeleton Revel application                                                                                                                    \nINFO  14:34:20 command_config.go:243: Source root                              path=C:\\Drive\\Programming\\go cwd=C:\\Drive\\Programming\\go\\src gopath=C:\\Drive\\Progr\namming\\go                                                                                                                                                              \nINFO  14:34:20 command_config.go:257: Set application path                     path=C:\\Drive\\Programming\\go\\src\\github.com\\alwindoss\\tetract                     \nINFO  14:34:20 command_config.go:150: InitPackageResolver                      useVendor=false path=C:\\Drive\\Programming\\go\\src\\github.com\\alwindoss\\tetract     \nINFO  14:34:20   file.go:313: error opening directory: open C:\\Drive\\Programming\\go\\src\\github.com\\alwindoss\\tetract: The system cannot find the file specified.        \nINFO  14:34:20    new.go:213: Detected skeleton path                   path=git://github.com/revel/skeletons:basic/bootstrap4                                           \nINFO  14:34:20    new.go:245: Exec:                                    args=\"[git clone git://github.com/revel/skeletons C:\\Users\\userabc~1\\AppData\\Local\\Temp\\revel\\\n\\skeleton]\"                                                                                                                                                             \nCRIT  14:34:21    new.go:248: Abort: could not clone the  Skeleton  source code:                                                                                        \nCloning into 'C:\\Users\\userabc~1\\AppData\\Local\\Temp\\revel\\skeleton'...                                                                                                   \nfatal: Unable to look up github.com (port 9418) (No such host is known. )                                                                                                 \n\ngit://github.com/revel/skeletons:basic/bootstrap4 \n. @notzippy when i use the command you mentioned I get this error\nCloning into 'C:\\Users\\userabc~1\\AppData\\Local\\Temp\\revel'...\nfatal: Unable to look up github.com (port 9418) (No such host is known. )\n```\nhowever if I use https instead of git in the clone command it clones without issue.\nEx: git clone https://github.com/revel/skeletons C:\\Users\\userabc~1\\AppData\\Local\\Temp\\revel\\. ",
    "magoo": "Sure!\n```\n[[constraint]]\n  name = \"github.com/aws/aws-sdk-go\"\n  version = \"1.12.79\"\n[[constraint]]\n  name = \"github.com/google/uuid\"\n  version = \"0.2.0\"\n[[constraint]]\n  name = \"github.com/revel/modules\"\n  version = \"0.20.0\"\n[[constraint]]\n  branch = \"master\"\n  name = \"google.golang.org/api\"\n[prune]\n  go-tests = true\n  unused-packages = true\n``. Just added that and diddep ensure`, same error.\nI do suspect vendoring is where my problem lies. I just noticed that revel run invokes dep which I did not expect. It still does not find TestRunner and Static like my functioning build environment.\nRevel executing: run a Revel application\nWARN  12:57:44 source_info.go:102: Type found in package: controllers, but did not embed from: revel.Controller name=JSONResponse importpath=www-forecast/app/controllers foundstructures=Home,Forecast,Auth,Range,Sort,Estimate,Scenario,Rank, \nERROR 12:57:50  revel module.go:163: Failed to load module.  Import of path failed  section=module modulePath=github.com/revel/modules/static error=\"cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/Users/magoo/testgopath/src/www-forecast/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/go/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/Users/magoo/testgopath/src/github.com/revel/modules/static (from $GOPATH)\" \nINFO  12:57:50    app     run.go:29: Running revel server. Hmm. That path is not in my Gopkg.toml that I can see? How are you reasoning that it is there?\nTo answer: That path does exist in my \"good\" environment. It does not exist in my \"bad\" environment. \nIn fact: it gets deleted from the cloned repository after running revel run in the \"bad\" environment. Is that a result of dep managing the vendor folder? \n\nFirst I see modules/testrunner deleted\nThen, modules/static is deleted\nThen, modules/testrunner is created, with only testrunner.go.\n\nI can observe this by watching the modules folder in the osx Finder as revel run executes.\n. Same error after upping the version. But I'm noticing that dep ensure -update didn't place the root module.go file you mention. In fact, dep does not seem to be grabbing the updated modules from my $GOROOT. If I forcibly delete it from vendors and run dep again, it still grabs a version of modules without that root go file. This has to be the problem: But I don't understand the behavior here. Why is dep not vendoring the revel/modules from my $GOROOT?\nWARN  14:03:00 source_info.go:102: Type found in package: controllers, but did not embed from: revel.Controller name=JSONResponse importpath=www-forecast/app/controllers foundstructures=Estimate,Scenario,Forecast,Sort,Range,Rank,Home,Auth, \nERROR 14:03:07  revel module.go:163: Failed to load module.  Import of path failed  section=module modulePath=github.com/revel/modules/static error=\"cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/Users/magoo/testgopath/src/www-forecast/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/go/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/Users/magoo/testgopath/src/github.com/revel/modules/static (from $GOPATH)\" \nINFO  14:03:07    app     run.go:29: Running revel server                      \nCRIT  14:03:07  revel logger.go:195: NewRoute: Failed to find controller for route path action /public/*filepath?Static.Serve. I've also tried pinning the version go Gopkg.toml with version = \"=0.20.1\", yet it is still pulling in what looks like 0.20.0. I realize this is looking like a dep behavior but would love any insight to confirm what is going wrong.. OK progress. That finally brought modules.go into vendor, but brings about another error I can't quite decipher.\nError stack [utils.go:275 command_config.go:195 revel_container.go:90 revel_container.go:222 revel_container.go:182 run.go:123 revel.go:103 proc.go:195 asm_amd64.s:2337]\nERROR 16:42:40 command_config.go:196: Failed to import package                 error=\"exit status 1\" gopath=/Users/magoo/gopath GO-ROOT=/usr/local/Cellar/go/1.9.4/libexec output=\"Fetching sources...\\n\\nFailed to add the dependencies:\\n\\n  \u2717 nothing to -add, github.com/revel/modules is already in Gopkg.toml and the project's direct imports or required list\\n\\nadding dependencies failed\\n\" \nERROR 16:42:40  revel.go:104: Unable to execute                        error=\"Revel paths[error Failed to load module.  Import of path failed modulePath:github.com/revel/modules/static error:Module github.com/revel/modules/static was found outside of path /Users/magoo/gopath/src/github.com/revel/modules/static. ]\"\nFor reference, my .toml is updated per your feedback to:\n```\nrequired = [\"github.com/revel/revel\", \"github.com/revel/modules\"]\n[[override]]\n  version = \"0.20.1\"\n  name = \"github.com/revel/modules\"\n[[override]]\n  name = \"github.com/revel/revel\"\n  version = \"0.20.0\"\n[[constraint]]\n  name = \"github.com/aws/aws-sdk-go\"\n  version = \"1.12.79\"\n[[constraint]]\n  name = \"github.com/google/uuid\"\n  version = \"0.2.0\"\n[[constraint]]\n  branch = \"master\"\n  name = \"google.golang.org/api\"\n[prune]\n  go-tests = true\n  unused-packages = true\n```. Thanks for your patience on this. Deleted those folders, same error. \nFrom the app directory: \nrevel run -v\n```\nINFO  21:28:48 command_config.go:124: Checking import path /Users/magoo/gopath/src/www-forecast with /Users/magoo/gopath \nINFO  21:28:48 command_config.go:133: Updated import path                      path=www-forecast \nINFO  21:28:48 command_config.go:140: Returned import path                     path=www-forecast buildpath=/Users/magoo/gopath \nRevel executing: run a Revel application\nINFO  21:28:48 command_config.go:243: Source root                              path=/Users/magoo/gopath cwd=/Users/magoo/gopath/src/www-forecast gopath=/Users/magoo/gopath \nINFO  21:28:48 command_config.go:257: Set application path                     path=/Users/magoo/gopath/src/www-forecast \nINFO  21:28:48 command_config.go:150: InitPackageResolver                      useVendor=true path=/Users/magoo/gopath/src/www-forecast \nINFO  21:28:48 command_config.go:158: Vendor folder detected, scanning for deps in path \nINFO  21:28:48   file.go:346: Seeking app package                      app=www-forecast \nINFO  21:28:48   file.go:354: Seeking remote package                   using=www-forecast remote=github.com/revel/revel \nINFO  21:28:48 github.com/revel/modules/static revel_container.go:221: Missing module                            error=\"cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/Users/magoo/gopath/src/www-forecast/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/Cellar/go/1.9.4/libexec/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/Users/magoo/gopath/src/github.com/revel/modules/static (from $GOPATH)\" \nINFO  21:28:48 command_config.go:173: Request for package                      package=github.com/revel/modules/static use vendor=true \nINFO  21:28:48 command_config.go:175: Using dependency manager to import package package=github.com/revel/modules/static \nINFO  21:28:48 command_config.go:192: Go get command                           exec=/usr/local/bin/dep dir=/Users/magoo/gopath/src/www-forecast args=\"[/usr/local/bin/dep ensure -add github.com/revel/modules/static]\"\n(env removed)\npackage=github.com/revel/modules/static \nError stack [utils.go:275 command_config.go:195 revel_container.go:90 revel_container.go:222 revel_container.go:182 run.go:123 revel.go:103 proc.go:195 asm_amd64.s:2337]\nERROR 21:28:48 command_config.go:196: Failed to import package                 error=\"exit status 1\" gopath=/Users/magoo/gopath GO-ROOT=/usr/local/Cellar/go/1.9.4/libexec output=\"Fetching sources...\\n\\nFailed to add the dependencies:\\n\\n  \u2717 nothing to -add, github.com/revel/modules is already in Gopkg.toml and the project's direct imports or required list\\n\\nadding dependencies failed\\n\" \nINFO  21:28:48 build_error.go:18: Revel paths                              error=\"Failed to load module.  Import of path failed modulePath:github.com/revel/modules/static error:cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/Users/magoo/gopath/src/www-forecast/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/Cellar/go/1.9.4/libexec/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/Users/magoo/gopath/src/github.com/revel/modules/static (from $GOPATH) \" \nINFO  21:28:48 build_error.go:23: Stack                                    stack=\"[github.com/revel/cmd/logger/utils.go:275 github.com/revel/cmd/utils/build_error.go:22 github.com/revel/cmd/utils/build_error.go:36 revel/run.go:125 revel/revel.go:103 runtime/proc.go:195 runtime/asm_amd64.s:2337]\" \nERROR 21:28:48  revel.go:104: Unable to execute                        error=\"Revel paths[error Failed to load module.  Import of path failed modulePath:github.com/revel/modules/static error:cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/Users/magoo/gopath/src/www-forecast/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/Cellar/go/1.9.4/libexec/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/Users/magoo/gopath/src/github.com/revel/modules/static (from $GOPATH) ]\" \n```. Yes that path exists.\n```\n\u279c  static git:(master) \u2717 pwd\n/Users/magoo/gopath/src/www-forecast/vendor/github.com/revel/modules/static\n\u279c  static git:(master) \u2717 tree\n.\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 controllers\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 static.go\n    \u2514\u2500\u2500 model\n        \u2514\u2500\u2500 file_information.go\n3 directories, 2 files\n``.github.com/revel/modules/static` exists in my vendor path but not my $GOPATH.. ",
    "HaraldNordgren": "All Windows builds are failing. Not exactly sure why.. @notzippy Yup, see https://github.com/revel/cmd/pull/157.. ",
    "OhBonsai": "I got it ...  workPermits  is the MAX RUNNING JOB NUMBER.\nBut why use struct{} type channel?. ",
    "stumo": "My preference for doing this via config keys rather than writing my own function is it means I can still benefit from the rest of the built in support (e.g. not having to write my own code to point to different file names). If you'd accept the pull request, I'd rather add it into the \"standard\" way of doing this. ",
    "nevkontakte": "The failing test is this:\n=== RUN   TestMemcachedCache_TypicalGetSet\n--- FAIL: TestMemcachedCache_TypicalGetSet (0.00s)\n    cache_test.go:30: Error getting a value: revel/cache: key not found\n    cache_test.go:33: Expected to get foo back, got\nI don't think this has anything to do with my change, so probably a bad luck?. ",
    "otto-md": "Another related thing.\nI also tried this in my FINALLY Interceptor:\ngo\nfunc (c *App) RestoreVersionParam() revel.Result {\n    c.Response.Out.Header().Set(\"Location\", \"/foobar\")\n    return nil\n}\nBut this location header is overwritten here.\nWhen I read https://revel.github.io/manual/interceptors.html#intercept_times (under FINALLY) it says\n\nAfter an action has completed and the Result has been applied.\n\nI read this as the FINALLY interceptor would happen after the (r *RedirectToURLResult) Apply() so I could override the location. Shouldn't that be the case?. Hi, thanks a lot for looking at this.\nType checking the result is not enough I think, since I need to read the url of the redirect too, and that isn't exported.\nIn the end I ended up doing this:\ndiff\n func (r *RedirectToURLResult) Apply(req *Request, resp *Response) {\n+   // HACK: see https://github.com/revel/revel/issues/1418\n+   if req.URL.Query().Get(\"version\") == \"legacy\" {\n+       u, err := url.Parse(r.url)\n+       if err == nil {\n+           q := u.Query()\n+           q.Set(\"version\", \"legacy\")\n+           u.RawQuery = q.Encode()\n+           r.url = u.String()\n+       }\n+   }\n    resp.Out.internalHeader.Set(\"Location\", r.url)\n    resp.WriteHeader(http.StatusFound, \"\")\n }\nI can't see any other way of doing this right now.. ",
    "dmjones": "I also had this issue, but it was fixed when I updated my revel command with:\ngo get -u github.com/revel/cmd. ",
    "prewk": "Tried again, it works suddenly (without attempting to manually update anything). Output of revel version:\n```\nRevel executing: displays the Revel Framework and Go version\nRevel Framework :   0.21.0  (0.21.0 remote master branch)\nRevel Cmd   :   0.21.1  (0.21.1 remote master branch)\nRevel Modules   :   0.21.0  (0.21.0 remote master branch)\ngo version go1.11.5 darwin/amd64\n```\n\ud83e\udd37\u200d\u2642\ufe0f . ",
    "sgoldenb": "Yep that is what i used.\nThanks for having a look at it. \n. ",
    "reisraff": "updating: it works, but there are some ERRORS output.\n```\nGopkg.toml\n[[constraint]]\n  name = \"github.com/revel/modules\"\n  version = \"0.21.0\"\n[[constraint]]\n  name = \"github.com/revel/revel\"\n  version = \"0.21.0\"\n[prune]\n  go-tests = true\n  unused-packages = true\n```\n```\noutput\ngo_1     | Revel executing: run a Revel application\ngo_1     | ERROR 17:43:16  revel module.go:163: Failed to load module.  Import of path failed  section=module modulePath=github.com/revel/modules/static error=\"cannot find package \\\"github.com/revel/modules/static\\\" in any of:\\n\\t/go/src/app/vendor/github.com/revel/modules/static (vendor tree)\\n\\t/usr/local/go/src/github.com/revel/modules/static (from $GOROOT)\\n\\t/go/src/github.com/revel/modules/static (from $GOPATH)\" \ngo_1     | INFO  17:43:16    app     run.go:32: Running revel server                    \ngo_1     | INFO  17:43:16    app   plugin.go:9: Go to /@tests to run the tests.         \ngo_1     | ERROR 17:43:16  revel watcher.go:88: Watcher: Failed to stat watched path, code will continue but auto updates will not work  section=util path=/go/src/app/vendor/github.com/revel/revel/templates error=\"stat /go/src/app/vendor/github.com/revel/revel/templates: no such file or directory\" \ngo_1     | Revel engine is listening on.. 0.0.0.0:38045\ngo_1     | Revel proxy is listening, point your browser to : 9000\n```. Amazing, it works.. ",
    "lexxito": "Apart from adding -a after build command, I had to delete -srcPath \\src from the arguments to make it work. It would be nice to update that tutorial so people wouldn't be confused. . Yes, I am using Golang IntelliJ version from 2018.3.4. ",
    "SYM01": "Although it looks more concise, it may be confused when visiting https://example.com/?name[1024]=1, the developer will get a slice like []string{1} which indicate that name[0] == \"1\". . It looks better!\nOn Sat, Mar 9, 2019, 00:44 Steve notifications@github.com wrote:\n\nOK, so in this situation it would be best to ignore the parameter all\ntogether ? And likely a good idea to log the error.\n  if index > -1  {\n                    if maxIndex > maxIndexBound {\n                        binderLog.Error.Println(\"Invalid parameter index, ignoring parameter\",\"index\", maxIndex,\"key\",key)\n                        return\n                    }\n      if index > maxIndex {\n          maxIndex = index\n      }\n      sliceValues = append(sliceValues, sliceValue{\n          index: index,\n          value: Bind(params, key[:subKeyIndex], typ.Elem()),\n      })\n      return\n  }\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/revel/revel/issues/1424#issuecomment-470994517, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/Af5P0FzbSI0FZrf3dNZTLrw3DxnQpbThks5vUpNQgaJpZM4beFyg\n.\n. All right, I will make a new pr with a hotfix branch.. \n",
    "rps-repo": "Thanks for the quick reply.  controller.Response.Out.GetRaw().(*http.ResponseWriter) does not work. \ncontroller.Controller.Response.Out.GetRaw undefined (type revel.OutResponse has no field or method GetRaw)\n I tried controller.Response.Out.Server.GetRaw().(*http.Response) that I found from change logs and get the error: \nhttp.Response.Header is a field, not a method. oh, and I am using this package; https://github.com/go-oauth2/oauth2. Yes, it is there.  I can tell from the log that the Before method is being called but it is not stopping the request from completing as intended.  Unless I misunderstand how these work.  In the code below NOT VALID is shown in the log and I would expect \"that access token invalid\" would be sent back as the response but it does not.  My understanding was that any non nil value returned would stop the request from going forward.  Is that not the case?\nfunc (c AddressValidation) Before() (r revel.Result, a AddressValidation) {\n    var rq = c.Request.In.GetRaw().(*http.Request)\n    isValid, _, err := Validate(rq)\n    if isValid == false {\n        log.Println(\"NOT VALID\")\n        return c.RenderText(\"access token invalid\"), a\n    }\n    if err != nil {\n        return c.RenderError(err), a\n    }\n    return nil, a\n}. ",
    "thequux": "My guess is that the application may rely on the session expiring to log out idle users. Giving malicious clients the ability to extend their sessions (or even just use session cookies that they find lying around) has historically been the cause of quite a few vulnerabilities.\n. I completely forgot about that function. That's a much better choice.\n. ",
    "tgkokk": "Sure, I just added it.\n. Fixed (I guess you don't get a notification when a new commit is added to a PR).\n. ",
    "vieelblond": "yes I know. But without setting ViewPath, will always return  default value from app.conf, even if we set another ViewPath in TemplateLoader. I use this to generate the real templates for App/Views from another templates. \nThis allows  you to have separate folders with templates  (diffrent ViewsPath).\ngo\n   if splitDelims != nil && basePath == ViewsPath {\n           templateSet.Delims(splitDelims[0], splitDelims[1])\n   } else { \n           // Reset to default otherwise \n           ...\n   }\n. ",
    "greenimpala": "Should not be tagging yourself in the code. It is in the git blame anyway.\n. ",
    "albrow": "Unless you're dealing with a cluster of redis instances, parallelism won't help you much here because redis is single-threaded. What you really want to do is reduce round trip latency. You should use the MGet command from gosexy/redis which pipelines all the gets into a single round trip.\n. ",
    "namusyaka": "The controller (and AppController) value will be initialized for each request now, so that we should require large modifications to improve the further performance, I think.. Thanks. Done https://github.com/revel/revel/pull/1191/commits/6fdf79db19ccbe2e58e952a841e3dae056d4dec0. "
}