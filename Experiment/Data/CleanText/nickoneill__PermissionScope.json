{
    "nickoneill": "Fixed in 766b46fea4cbe8d31a7199a184a60c6b33e05347\n. This'll be hard for notifications!\n. Fixed (not for notifications) in 4ec7c7ea29af9b4d87e5a4b2bd1d5b4ebda7a6fb\n. Fixed in 1ebb131564a7e81a73a1eda83ffa8922f80edb42\n. In fact the only way to cancel!\n. @otymartin You can't remove the background close functionality at the moment. I would gate the permissions-required part of your app with a pscope dialog, before pushing your view controller that required permissions.\n. This should be resolved now. In use authorization is superseded by always authorization.\n. This seems to be a constant source of forks so might be wise to do this for v1\n. Oh, right. I'll make note of this in the readme.\n. Done\n. Yeah, this was fixed. Tested with the new background cancel switch.\n. This is great, thanks! I'll check it out this afternoon.\n. Thank you! I made a couple fixes that prevented the denied alert from showing, everything else was excellent though.\n. Fixed this in #34 from @TimothyChilvers \n. Just a couple fixes noted inline.\n. Oh, handy. I didn't know that.\n. Merged this in with a couple small changes.\nThe compiler complained when I didn't have notificationCategories: when making a PermissionConfig without the = nil in the initializer. It looks like you must include it to get that bonus feature of being able to leave it off.\nAnd one thing about the computed properties: stylistically, I leave the self. off unless it's being captured inside a closure for clarity. That being said, I don't do any [unowned self] yet in the closures.\n. I'm a bit confused by the suggestion here, a more clear plan for what problem this is fixing and how you plan do do it would be great.\nI am hesitant to change PermissionConfig if it means more work for the implementing user. Again, I'm not entirely sure what's being suggested but we should just do the right thing for the 90% case if at all possible.\n. Ah, ok! We could simply have a category optional on PermissionConfig and, if you require a category on notifications, you can set that to something non-nil. And we'll just use it during the notification request. None of the other config types would use it.\nI am not opposed to having the extra nil property on everything else for the sake of simplicity!\n. Looks good!\n. Thanks! This looks really good. I tweaked the language a bit and the notificationCategories assert.\n. Added a close button in 5312ef99fb53c7aea22ea1d0747e2aa4679b18ef\n. Added customization for the offset of this button. I'm happy with it now.\n. Thanks for the report! I'll check this out today.\n. Fixed this in 8a800f3, sorry for the wait!\n. Hey, this was fixed.\n. Sorry for the wait on this. I'll bring it in today.\n. Looks good!\n. I really like the look of the PermissionConfig stuff, feels much nicer. Let's get this stuff in before we play with more decoupling, I want to evaluate those changes separately.\nFor the HealthKit stuff... I'm OK with sending users to the same App Settings page for the moment, even if HealthKit isn't listed there. It's better than the alternative of just saying \"HealthKit needs to be turned on, go here and here and here\" in an alert. Can you link to any radars about this? It would be nice for each of us to file duplicates so they know we'd like this feature.\n. Can you be more clear on your first issue? I'm not certain I understand what you're saying.\n. Ah, I see. Let me play with the API a bit.\n. Ugh, such granularity.\nYour approach might be a good first shot. Some alternatives I was thinking about are:\n\u2022 breaking the health items up by read / share (one config, shows as two items)\n\u2022 breaking the health items up into individual data points to be requested (needs some other design for the buttons, they would still all be requested at once)\n\u2022 providing HealthKit as a convenience API only, not allowing it to be requested in the dialog with other items (it already provides a granular interface, little need to do the same thing again)\n. Did this in 13710e8\nAs for the Parse stuff... it probably just belongs in my main project for now.\n. Good catch!\n. Working this in #53 \n. Fixed\n. Fixed in #40 \n. hahhahahhaaahaaa\n. In all seriousness, I think it's less crazy to just manually adjust it to one of those three options.\n. Added this in 758fda7ce002de2131c982e8df9d1df5c6f73dee\n. I believe this was fixed with the viewControllerForAlerts fixes.\n. I'm thinking of a special-casing this, setting an NSUserDefaults token that lets us return .Unknown exactly once in this case and .Unauthorized otherwise.\n. OK, added a workaround in 5343fce\n. Just a reminder, good to close\n. Thanks for catching this! I'll pull it in later today.\n. All set, thanks!\n. Hey @bre7, I realized when doing the example app that it breaks if you create and use a pscope inline (cleaned up before the delegate gets to call back I'm guessing) rather than holding it in global or class scope.\nOther than changing the example to reflect this pattern (which I'll be doing soon), do you have any other ideas for ways we can mitigate this issue?\n. Yeah, I noted that zombies are probably an issue in #25. Better documentation it is!\n. Hi Linus, this should already occur based on fixes from #22. Are you still seeing a large dialog for just one permission?\nHow are you pulling PermissionScope into your project? I haven't updated the podspec in a bit so you might not be getting all the newest changes if you're using cocoapods. Grab it manually for all the newest stuff for now.\n. Or that :+1: \n. https://github.com/nickoneill/PermissionScope/commit/758fda7ce002de2131c982e8df9d1df5c6f73dee\n. This was resolved in #14. I'll make note of how to pull the newest stuff with cocoapods in the readme.\n. Thanks!\n. How does this behave if you have just one notification permission or multiple permissions where notification is one? \n. Can you explain a bit more of the flow with the observers that you've added? Seems like you've done more research into how to detect where the user is in the permissions flow and I'd like to know the details for how that works.\n. Awesome, thanks for the details. I'll pull this in soon.\n. Thanks!\n. Feel free to make a branch if you'd like to hack on it now. I'm going to wait for b2 before I start converting any of my projects.\n. SOON\n. This is in the swift2 branch for now.\n. Thanks @valentin7! I'll be looking into this more closely soon.\nIn the meantime, it looks like there are a few more debug printlns that are still in the code. And some extraneous whitespace that can be removed. You can set Xcode to automatically trim trailing whitespace in the Editor settings.\n. A couple things about this PR:\n- The conversion to types compatible with objc looks great! One exception though:\n- Converting the struct (value) types to classes (reference) may have unexpected repercussions. Have you looked into any situations where we mutate the data in those config objects? Structs will copy themselves when being assigned around, classes will simply all point at the same underlying data.\n- There are some \"other changes\" that I'm not clear on like the removal of appForegroundedAfterSettings. Why was this changed?\n- There's far too much whitespace addition/removal. Please don't add arbitrary whitespace (particularly empty lines, there's a \"trim whitespace\" option in Xcode) or remove empty lines elsewhere.\nA PR should be a succinct set of changes that are easy to review because they change only the code related to your stated goal (objc compatibility, in this case). When in doubt, check the final diff! With a few changes, we should have no problem bringing this in to the codebase.\n. This has been dealt with in #49 \n. Thanks @winzig! I do like this approach: making the callback closures public is the right direction since we can assume that you've looked into the API if you're writing your own UI and just want the unified request/status methods.\nI'll take a more thorough look soon and we'll get this merged in.\n. Thinking about this more today, we're still maintaining an instance of PermissionScope when making the now-public requestLocation / requestPhotos / etc. Does it make more sense to create a presentingViewController property during configuration (defaulting to self) and simply use that in show / showDeniedAlert / showDisabledAlert rather than adding it to every request method?\n. Great, I'll pull your changes in and then convert the presenting view controller to a property.\n. No worries, I haven't done any work on it yet.\n. Thanks again for this! If you have a chance to write up a quick example of how you use the non-UI version, please include it here or in the Readme.\n. Thanks @felix-dumit! I've never worked with bluetooth before but it seems this is similar to location in that you need to set a few plist values in the project to get the permission to show up.\nCan you add these requirements to the readme near the location information?\n. Thanks @felix-dumit, the readme and the status work look good! Let me know when you're done with your additions and we'll get this pulled in.\n. A couple things:\n- I like your lazy initialization of the manager! I'm going to try to pull that into the location manager too for #42 \n- Can you add the denied/disabled alert to requestBluetooth like the other permissions have?\n- Move kAskedForBluetoothString up into PermissionScopeConstants\n- Is there a reason to call requestBluetooth if askedBluetooth is true? Do we need to do the start/stop step before we can get the state from from the manager?\n- When setting a value with NSUserDefaults, always call synchronize afterwards to make sure the change is saved.\n. Thanks! This looks great now.\n. Yeah, I need to restructure the whole thing too. And do some more work on documentation.\n. Short single-pager with animated GIF (working on this!) plus either wiki or really good code documentation site... the cocoapods one looks nice: http://cocoadocs.org/docsets/PermissionScope/0.6/Classes/PermissionScope.html\n. This was done in #47 \n. Yep, I'll jump on one of these threads and see what's happening with the async request stuff in the next day or two.\n. Thanks for this! I'll be moving this stuff around into wiki pages soon.\n. Good idea, that's an excellent way of testing on device/sim without having to reset content and settings :/\n. Ugh. I'll do some testing when Xcode 7b3 comes out and file some radars if we can't.\n. Thanks!\n. Thanks for this! I imagine this is something we'd have to deal with for our planned UI testing in Xcode 7 down the line.\nCan you share what app you're using pscope for?\n. I'll push a new one out today with recent updates, there's a couple new things since the last release.\n. 0.7 is tagged, let me know if that works for you.\n. Thanks! This looks excellent, exactly what I was looking for from the other commit.\n- What was the issue with the closure stuff? I haven't done any work in objc with swift so I'm curious, I don't think I've heard of this particular issue.\n- Similarly to the other commit: I understand the need to convert the structs to classes, I'm slightly concerned about the value-to-reference change but I don't see any obvious implications unless you're holding onto the config objects after passing them to a pscope controller (which I can't think of a usecase for). Any thoughts on this @bre7?\n. After thinking about it some more, copying the config classes is probably overkill. We'll deal with it if we have a problem later.\nLet's move the closures to the usual syntax since we can't figure out why they were changed. Then this'll be ready to merge.\n. Didn't realize this was done. I'll merge this in later today. Thank you @felix-dumit!\n. Sorry for the wait, I'll be testing and doing a new cocoapods/carthage release soon so this'll be easier to get at.\n. Hey @Navideck-fotis, that's \"as designed\" for the optional permissions and one of the reasons I dislike the pattern. I'm aiming to get rid of marking these required/optional and just letting users do the right action in the completion block.\nFor you right now, I would mark them both as required and show the dialog as usual. Users can then either cancel out or approve one/both permissions. You can detect the settings the user picked in the completion block.\n. I agree @Navideck-fotis, in fact I do just that with notifications in one of my apps; every x days you get a prompt if not approved. I think this is an excellent chance to build this into the permissions display functionality while removing the misguided required/optional stuff.\nThanks for thinking through this with me! Please send over the motion stuff when you're ready, I believe @bre7 ran into some issues with detecting the different states so I'm interested in how you achieved it.\n. Required permissions are a totally unrelated different thing. If you need a required permission, just take some action to prevent a segue or dismiss a view controller in the cancel callback.\nI'm not sure how expiration times per-permission would work yet. Would it be useful to hide permissions that are already approved? This could have implications for non-remindable permissions too.\n. All permissions in the dialog are \"required\" now, there's an issue for reprompt (#52) and I'm not feeling the idea of removing permissions after they're approved. Doesn't seem like it achieves anything for users or developers. Feel free to open an issue for that if you'd still like to discuss.\n. @Navideck-fotis Open a new issue so we can keep track. I'd like to hear more about your thinking for how users would get into a state where they've only approved some permissions and are coming back through the same flow.\n. Removed the demands in swift2 a few days ago.\n. This looks good, thanks! Where was the flash being seen? Device or sim?\n. I like the way this is handled in #57 versus relying on the implementation in the app (which is what I think you're suggested?). It should be simple enough to duplicate the async detection similar to bluetooth. Fix that up and we can pull this in.\n. Thanks!\n. Yep, we'll have a branch for this soon. Let's track in #37.\n. Can you change this request for a new branch or does it have to go to an existing one?\n. Made a new swift2 branch, and you're also a collaborator now.\n. This is great, thanks!\nI wonder about a potential case where bluetooth takes a non-trivial amount of time to come back with the status but I haven't yet experienced a situation like that, so we're good! I'm going to recommend the Motion PR implement similar async fixes.\n. Thanks @evermeer, I'll look into adding this in.\n. Yeah, that was about as far as I got into the implementation too :)\n. Maybe I don't have this set up correctly @evermeer but this looks broken in the example project for me.\nI did the basics and let Xcode set up entitlements for me and requested the cloudkit permission, but the request screen is all over the place (see the screenshot below).\nAdditionally, the results callback is called with the other non-cloudkit permissions immediately, but never called with CloudKit. So if you had requested two other permissions that were allowed but CloudKit had not, the permissions dialog would never show and the API feedback would be incorrect.\n\nI still don't have a real clear idea for how we should handle these sorts of very asynchronous permissions requests. It seems to me that we either get into a situation where the dialog is displayed and jumps away when the cloudkit permission finally returns Authorized or we wait some longer period of time before showing the dialog which defeats the purpose if you require certain permissions in part of your app.\n. Yeah, I'm feeling a bit of pressure to get the Swift 2 stuff locked down for iOS 9. I'll move it to a cloudkit branch and pull it from this branch so we can keep things relatively stable.\n. I remember fixing a similar visual glitch for another permission in the past, I'll have to dig into some commits to remember what the issue was.\nI definitely like the .Pending status idea, @evermeer, particularly the repeated callbacks to authchange. I do think we should cater to the folks that just want to call show() and have us do The Right Thing as well. A property such as showsWithPendingItems that defaults to true would let users flip that switch without doing too much extra work.\n(Why should this default to true? I would rather people see the dialog and look at the docs to change behavior than try to use pscope and be unable because \"nothing shows up\", i.e. they have pending items and we defaulted to not showing them)\nFor discussion:\n\u2022 Should we hide immediately if a .Pending item turns out to be .Authorized and thus all items are authorized?\n\u2022 Should we cache this result for future performance? We already do this with notifications.\nThanks @bre7  for that fix, I missed that last part when I ripped cloudkit out.\n. Hi @owaves, glad to have you contributing.\nThe cloudkit stuff is still work in progress and probably a bit out of date compared to master at the moment. I think we can get rid of the dispatch_group stuff when we move to a pending status for cloudkit, but I haven't actually worked on it yet.\nI'm happy to accept a PR for changes to how the cloudkit branch works at the moment if you'd like to submit one, or you can take a stab at the proposed pending status. It's probably a couple weeks out before I'll have time to work on it myself.\n. Is there a requirement for bumping the deployment target to iOS 9?\nAlso, what's with all the whitespace changes in the last commit? Most of them seem like errors that Xcode makes when copy-pasting from somewhere else.\n. These items has been resolved in #60. Thanks for getting us moving in this direction.\n. Thanks!\n. I haven't seen this issue @TomMajor, any denied settings show in the \"general settings for this app\" for me.\nCan you be more specific about the system you're testing on and what permissions you're test with?\n. Another user just approached me separately saying that Photos is always denied to them, even without requesting the permission. The coincidence makes me think there's a status detection bug somewhere.\n. @TomMajor Have you actively denied these permissions or do they just appear that way automatically?\nWhat @bre7 is saying is that it jumps to the right place for some people. We both see settings for all these things listed on the page where \"show me\" takes you. The fact that it does not show up in that location for you and some other users is something we're trying to track down.\n. > I have denied them actively for testing.\nOk, so a different issue from the other user who was seeing denied photos permissions automatically.\nWe'll look into why the app settings page appears differently for you than it does for others.\n. Thanks for the testing @TomMajor. I'll do some more testing around this to see if I can reproduce any part of the problem.\nHowever, I'm really hesitant to say that PermissionScope is the root cause of this problem, particularly because so far it only applies to your device. Any other peculiarities that we should know about your setup?\n. Thanks for the follow up @TomMajor!\n. Thanks Kyle! Does this work the same as tags for the source? i.e. I have to make a new release for the archive to be picked up by the tools?\n. Knee-deep in swift2 refactoring... we'll definitely get this in for that release.\n. I'll gladly take a PR to put this in master/swift1.2 if you need it ASAP. I'm not sure how inconvenienced not having this makes people.\n. Just added this in 1.0.1. Give it a shot and let me know if it works for you @kylejm \n. OK, I attached a binary to that tag: https://github.com/nickoneill/PermissionScope/releases/tag/1.0.1\nI believe it's independent of the version checked in to the project root. Can you link me to the docs that describe how Carthage wants the file for CI?\n. Yeah, totally agree. Let me know if the current setup works and I'll do it for subsequent releases.\n. :+1: \n. Very nice, thanks for this. I'll be digging in and removing the demands stuff soon, it'll be nice to base that off this.\n. My fault, I didn't realize your last one wasn't ready to merge. Done now?\n. We were setting out notification tracking bit slightly too early here. Fixed in 9a65528\n. Can you clarify why you think the current system is bad? I'm still rather fond of it.\n. Oh I see what you're saying now.\nInstead, we can simply provide a permissionconfig protocol and break each service into a new file / struct / class. That way each one can provide its own initializer (HealthPermissionConfig(...)) and we can keep complex logic like the async stuff or the notification tracker in those separate files.\n. :+1: Let me know if you want to bounce any ideas off me, I'm interested in figuring out all the nitty gritty details too.\n. If you're more comfortable with Async, build it using that. We can always refactor to GCD which I'm pretty comfortable with.\n. Can't argue with this...\n. I'm not 100% on the use case here (I also haven't been dealing with CloudKit permissions much) but it sounds like our \"pending\" status support as mentioned in #58 will take care of this. Is that correct @evermeer?\n. The cloudkit stuff is still pretty wonky, I'm looking at it now.\n. Thanks @DanXMuc! Definitely a thing people want.\nI actually think I prefer the first approach. Why get mixed up with another custom class when a single property will do the trick?\nBut I agree, I don't see the benefit of creating a new function just for this. Can you make it lazy and use the inverse of whatever the normal button color is (even customized), but also customizable?\n. I think we're getting somewhat more complicated than needs be for this.\nNon-optional primary color property: give it the same default we have now.\nOptional alt-color property: if there's no value, give the inverse of primary. If there is a color, use it.\nForget the functions to set them, we're just going to do The Right Thing depending on which ones are set.\n. :+1: \n. Are we missing anything here? Everything looks pretty well documented to me.\n. It's very clear what happens when you add the same permission twice right now. In any other case, it's unclear. I prefer the clarity.\n@shonorio I suspect you'll have more success showing the permission once when users load this particular screen. Or, if you wanted to show it every tap, create it as a property on load and just .show() every time a tap occurs. No need to create/add the permission config every time a tap occurs.\n. Thanks for the offer @shonorio, the API for adding a permission config is good for now. I'll keep it in mind for a future release.\n. Thanks! Particularly for updating the ObjC example, that's very helpful.\nCan you explain how you used the newly public contentView to customize your implementation? \n. This is definitely related to how we plan on dealing with cloudkit as a whole (#58). I agree that something should indicate uncertainty when we display the dialog, this is the right direction to go for that.\nI added some thoughts there on how we should deal with this technically, this issue may be wrapped into that one if the solutions are converging as they seem to be.\n. Strict mode would be an OK first step here.\nSadly, I don't see HealthKit info on the app settings screen. We would have to link to Settings > Privacy Health (not possible at the moment) or into the Health app, Sources tab.\n. Thanks for the work @basememara, I'm not convinced that healthkit permissions belong in permissionscope because of 1) the incredible granularity of healthkit options vs the simplicity of pscope showing only three on/off permissions and 2) the lack of similar conveniences to the rest of the permissions (i.e. being able to direct users to the settings screen). I believe we can handle the HealthKit app store issues with cocoapods subspecs (though not sure if an equivalent features exists in carthage or swiftpm).\nIf we were going to add healthkit support, we'd have to figure out a graceful way to handle these issues before I would want to do any major work on it. Happy to read some suggestions but we have thought about it before and it doesn't seem to fit the model that well. Perhaps some API changes at WWDC will swing us in the opposite direction.\n. Nice catch, this is really helpful for users. I can only wonder why Apple doesn't do this themselves.\n. Good stuff. I'll take a look at the statuses issue too.\n. Yeah, this seems doable for the future. I'll have to see how many we can fit vertically, or if we should go horizontal with the permission items.\nThanks! Happy to see a PR with a wip if you're feeling adventurous.\n. :+1: \n. All set here.\n. :+1: \n. I was just approved for beta testing with the newest pscope code - afaik they want you to adhere to the guidelines for testflight as well as releases and this feels like something they would detect automatically. Are you sure it's not something else? An errant healthkit entitlement?\n. Ah, OK. Thanks for the tip. I'll work on this today.\n. The healthkit stuff is so unpolished right now, I feel OK with removing it from a 1.0.1 release @bre7.\n@gloparco If you don't ask for them, permissionscope doesn't load or call any HealthKit APIs. It's possible that the import statement was linking the HealthKit framework through. Definitely a good reason to split stuff into files/subspecs.\n. Please give 1.0.1 a shot with this. I've removed all mentions of HealthKit and we'll work it back in via subspec soon.\n. Was the dispatch_group_notify stuff specifically for HealthKit?\n. I was seeing some weirdness with notifications on this PR (approving the permission and then having it show as \"denied\" briefly) so I isolated the changes a bit more in 8c92068219cb5a50ae1e738e1442bc64f1d75f62. I'd still like to see the style changes included here in a PR.\n. Thanks @emaddoma! It looks like we can detect if bluetooth is on/off with the API but we definitely can't deliver the user to the right place in Settings to turn bluetooth on, only to the app's own page in settings.\nThat said, perhaps some better wording around the bluetooth status when requesting permissions would be nice.\n. Totally in agreement. I think this is a leftover from the cloudkit/healthkit stuff.\n. Thanks for catching these in the readme!\n. Thanks for the pr @rynecheow!\nIs there a benefit or difference from requesting this permission via the new iOS 9 method?\n. Oh, I didn't even realize the old address book items were deprecated in iOS 9. Yeah, we should definitely  start moving people over to this when possible.\n. This looks good @rynecheow, remove the .DS_Store files from this commit and we'll get it merged in.\n. Thanks! Definitely stick that line in your global gitignore too, nobody likes .DS_Store files :)\n. Use :head if it's important for you today. I'm going to review and test the new contacts framework PR and push a new version out to cocoapods tomorrow or Monday.\n. Sorry, you'll have to be more clear about the issue you're having here. Are you trying to get this from cocoapods or installing manually? I highly suggest the cocoapods installation instructions in the readme.\n. There's an example Objective-C project in the repo, it shows how to integrate and use PermissionScope in an ObjC context.\n. Thanks! :+1: I'll check this out.\n. Disabling the alert is the right thing to do for pscope, we have enough other messaging around it.\n. Merged the fixes that default this to off. If we need an option for this, it can be handled with #113.\n. This is only called if the peripheral state is Unknown which is exclusive of knowing if the peripheral is on/off. I don't see a huge issue here other than the error message, so punting this until we refactor bluetooth to pending status in #113.\n. @felix-dumit This commit (from issue #107) replaces the call to start/stop advertising with just creation of the bluetooth manager. This seems to request the permission just fine for me but I recall something about this in your original commit for bluetooth support. Was there some situation that required the start/stop calls?\n. Thanks for the feedback @felix-dumit, I'll check this out in the objc example.\nWe do have some plans to behave differently for async permissions requests, such as cloudkit. Maybe best to wrap the removal of waitingForBluetooth into that.\n. I just defaulted the bluetooth power alerts to off, this'll be in the next 1.0.2 release. The other two issues here are broken out into #132 and #133\n. Hey @chrisamanse, thanks for the patch.\nIs there a convention we're violating or possible error if we use parameters for switch statements? I don't think one usage is necessarily more clear than the other so I'm not sure what this PR accomplishes.\n. Great, thanks! And I'd say it's definitely possible for this code to produce weird error states behaving as such.\nI'll pull this in with some other PRs as soon as I get around to testing them.\n. Hey @kylejm, I have a few things to include in the next release, this'll definitely be one of them.\n. Hey @kylejm, we'll get 1.0.2 out the door this week. Sorry for the wait.\n. Sorry @kylejm, busy time of year. I'll work on this today and report back with what else needs to get done before we can get a release out the door.\n. I'm waiting to hear back on #125 with some updated changes. If that's resolved then we'll move ahead with 1.0.2 in the next day or so.\n. Hey @BryanRyczek, this is a known issue with PermissionScope right now (see #137), you can fix it immediately by using the --no-use-binaries option in Carthage. We'll fix it for our upcoming 1.0.2 release.\n. Should be set here with the proper 1.0.2 release.\n. Thanks @pedrovereza and @bre7!\n. Hey @AdventureOfMar, are you using this in an existing project? Keep in mind the dialog will only open if you have unaccepted permissions; it's automatically bypassed if all the permissions are already granted.\n. I'm not sure what the issue is. We could potentially narrow it down if you post the relevant code that you're using for permissionscope.\n. Give this a shot without the debugger, i.e. run it on a device without Xcode. See #61 for a case where \"show me\" links don't work with the debugger.\n. Hi @rlaferla, this particular message should only show when location services are disabled system-wide which is not a setting that will appear on the app-specific settings page (the only one we can link to in settings). Perhaps the text could be improved to indicate that location services are restricted system-wide?\nWe'd happily take a PR if you would like to improve the text in this case. Or you may simply override it in your own instance as per @bre7's instructions.\n. All set here. Please give it a shot and see if you like it @rlaferla!\n. Are you calling show from the main thread? If not, it's straghtforward to dispatch_async into main and call show from there.\n. It's difficult to know the source of this without more context for your code. This warning doesn't show up for everyone else so it's not completely obvious what you're doing differently.\nWhat does your main thread check say if you move it before the call to show?\n. Thanks for the PR, I'll check it out.\nI'm not real clear on which autolayout is happening on the background thread. The existing implementation has the setNeedsLayout() for permissionscope inside the dispatch_async block. Is this autolayout from your app that's happening on the background thread?\nI'll be the first to admit that the ObjC support doesn't get the most care around here but I'd be really surprised if this was an issue only for ObjC implementations.\n. If we're doing the .Pending status for cloudkit stuff (and I think that's our best option for async permission), this makes sense. We're always calling onAuthChange on the main thread, always immediately, and sometimes again once we've resolved an async permission.\n. Ignore the circleci stuff here, I was experimenting with testing. I'll get this merged in for 1.0.3.\n. Thanks @rlaferla!\n. You should still be asking for permissions contextually, as the app needs to access various components, rather than all the permissions upfront. The design supports this hypothesis by limiting the number of permissions you can request at one time to 3.\nYou can (and should) create a different instance of permissionscope when you're asking for different permissions and present those. To support this workflow, we support showing the status of already asked for permissions as \"disabled,\" \"denied\" or \"accepted.\"\n. > I think there may be a design improvement here. How about if PermissionScope had a dictionary of permissions and you could toggle which ones are displayed? The key for the dictionary being \"contacts\", \"location\", etc...\nI don't see the benefit of switching to this model when you can achieve the same thing with our current model by adding multiple instances of permissionscope to any view controllers you need them in. In general, relying on state management in a singleton like the app delegate is frowned upon.\n. Can you not build in ObjC? Warnings or errors?\n. Are these giving you trouble in Objective-C?\n. @rlaferla Let me know what issue you were solving with this and #117.\n. :+1: This'll look great on the readme, thanks!\n. Fixed in 9544e7405094791aa0fb09f06888e37c6d400e50\n. @ed-mejia You should be using the singlePscope.show() method, not requestNotifications()... unless you don't care about the UI.\n. Huh. I thought I had pushed a 1.0.2 version at some point... I'll figure out what to include for a new release today.\n. @ed-mejia I couldn't reproduce a problem where notifications were reporting the incorrect status, though I did encounter an issue where onAuthChange won't be called if notifications are already authorized.\nCan you test with :head and tell me if this is reproducible for you still?\n. Thanks for the excellent repro steps @ed-mejia, I can see the issue you're having now.\nCan you try again with the most updated pscope code? Use this in your podfile:\nruby\npod 'PermissionScope', :head\nAnd pod install again\nI tested with a fresh project and the issue appears with our 1.0.1 version and fixed in the upcoming 1.0.2. Please let me know if you see anything different.\n. Here's what I'm seeing with your project @ed-mejia:\n\u2022 First time run on a fresh sim: Unauthorized\n\u2022 Subsequent runs on sim with same bundle id: Authorized\n\u2022 First time run on sim with new bundle id (existing sim): Authorized\n\u2022 First time run on iOS 8 device: Authorized\n\u2022 First time run on iOS 9 device: Authorized\nI'm nearly ready to chalk this up to simulator weirdness (not the first time we've seen sim issues with permissions). It seems to work fine in plenty of other places. Care to run some of these and report your findings?\n. Alright, back to the drawing board then. I'll run through the code again and see if I can spot a race condition.\n. @ed-mejia We were going through the detectAndCallback cycle (requesting status from each of the permissions) in the notification observer callback which apparently isn't long enough after accepting permissions for that change to be reflected in currentUserNotificationSettings.\nI've moved the detectAndCallback cycle into an async block, similar to how we call it when you request via the UI. This resolved the issue that I was able to reproduce when I reset a simulator and installed fresh.\nLet me know if this fixes the issue for you. I'll be releasing a 1.0.2 beta shortly, or you can continue using :head to test.\n. Shit. Same deal with the test project and 1.0.2beta, I'll try again. At least we know where the issue is at this point.\n. @ed-mejia \nOpted for a slight different approach, now we just straight up delay 0.1s after finishedShowingNotificationPermission comes back from the permissions dialog. Please test and let me know what you find, it worked using your PermTest project and erasing simulators for me. I didn't update the tag so be careful when updating the pod, I couldn't get it to update to the newest commit (d232175e5865fd6d2a4b95b16da51f98415665ed) right away.\n. Awesome :) Releasing here soon...\n. Is there a particular case where this is called twice? It doesn't look like it happens always...\nAlso, I just merged this locally with #115 and it won't show the UI using the example app, just returns returned results [LocationInUse Unknown, Notifications Unknown, Contacts Unknown] for a fresh simulator.\n. OK, I'll deal with that one first, then I'll come back to figure out what's going on here.\n. I don't think that's the same issue as #125 - this was just me using the standard example project, not the special no UI case that we're dealing with there.\n. Thanks @winkelsdorf, I'll take a look at this. Possibly related to the new iOS 9 Contacts framework that was pulled in recently.\n. Yep, if you set the viewControllerForAlerts property to the presenting view controller, the dialog is presented in the proper hierarchy without the warning. Perhaps we should issue our own warning about this with the proposed solution.\n. @winkelsdorf I'm just getting around to finding a repro for this now. Is this the case where it crashes when you toggle the settings switch? If so, that's just how iOS works with the contacts permissions (with both iOS 8 and 9) - you get killed when your contacts permission changes.\n. I just tested viewControllerForAlerts as well and it actually presents behind the pscope window. Obviously not what we wanted. Did you see the correct behavior after that fix @winkelsdorf?\nJust for reference: we manually insert the pscope view into the top of the window view hierarchy which is why presenting on the app view controller shows behind the pscope view. Presenting from the pscope view controller gives the correct behavior but is 'discouraged' because the pscope controller isn't actually on the view controller stack. Potential fix: convert showing pscope to a modal view controller that's shown with presentViewController... with the UIModalPresentationOverCurrentContext style.\nThoughts @bre7 / @winzig (as the original viewControllerForAlerts author)?\n. Hey @denismars, that crash isn't something we can control. Any app will crash when toggling the Contacts permissions.\n. At this point I don't believe viewControllerForAlerts works as expected. I'm planning on removing it in 1.1 since no one else has weighed in.\n. Hey @winzig, It's not related to the Contacts crash, you can safely ignore.\nHere's what I was seeing when I set viewControllerForAlerts: the pscope UI showed up OK, but then clicking on a permission showed the native permissions alert behind the pscope window.\nNormally these native alerts are presented on top of the pscope view which works, despite giving a \"don't present view controllers on deteached view controllers\" warning (because I added the pscope view manually to the current view controller, not through the proper presentation).\nI think the correct thing to do here is modify pscope so that it's a view controller presented modally with that setting (the name is on the tip of my tongue...) that allows us to see to the view controller underneath, so it looks like the current implementation. We can customize the presentation with the animated transitioning API if necessary.\n. For clarity, I'm going to resolve this and create a new issue. I am fascinated that you haven't seen the same thing @winzig, but I'm sure I reviewed it when you made the original PR and I didn't see any weirdness then either.\nStill, avoiding this in the first place is the way to go!\n. Thanks @ReadmeCritic :)\n. Hey there @nmccann, thanks for the feedback.\nThe manual request methods are definitely the way to go here but I didn't even think people would use them in conjunction with the onAuthChange callback so behavior there is currently undefined. One should not have to addPermission before using the manual methods! We'll for sure fix this in an upcoming release. Related to #125.\n. Yep, the perils of working on software with a team! Some things are just assumed to happen :) We'll fix it up.\n. Thanks @vCrespoP @bre7 :+1: \n. Whoops, this is actually #106 already\n. Thanks!\n. Hey @jstheoriginal, I haven't seen this sort of behavior before. Where did you find the script to \"fix\" this issue?\nMost ways you can fetch this repo are not prebuilt, so the complaint about unsupported architectures may lay somewhere in your build process.\nHow did you download and integrate PermissionScope with your project?\n. Yeah, that was my suspicion as well.\n. Yes @jstheoriginal, but it should be building the framework from xcode, not just using a prebuilt framework it finds. I was under the impression that the framework zip for releases would only be used for test running by Carthage (and those archs should be fine for test running). Perhaps that has changed and Carthage is pulling the zipped framework for building now?\n@kylejm You seem to be our resident Carthage expert. Do you know if this is normal behavior for Carthage?\n. Great to hear @jstheoriginal, I'll keep this issue open until I can figure out how to prevent this from happening to other carthage users.\n. > so It's syncing my notification settings for the app\nIs that really a thing that happens? It does make some sense that it's related to iCloud, this is similar behavior that we see when incorrectly dealing with async permissions.\n. Thanks @sammy-SC!\n. @jstheoriginal Set your options for pscope once (addPermission, closeButtonTextColor, etc) in viewDidLoad. Then .show when you want to present.\n. Thanks for the PR @blender! This'll be released as part of 1.0.2\n. Thanks @blender! I'll bring this in soon.\n. Hey @afiq90, glad you figured it out. Let us know if you have any other questions.\n. Hey @testudorithm, in your project under Targets > Build Phases, is PermissionScope marked as a dependency?\n. Is this a manual integration as opposed to cocoapods or carthage?\nYou should add PermissionScope to the dependency list as well if it's manual.\n. I would highly encourage you to use one of the other integration options because they do the hard work for you.\nIf you must integrate manually like you're doing now, add the project as a dependency in your Build Phases, and make sure 'Code Sign on Copy' is checked in your Copy Files phase.\n. Oh, you just grab the framework rather than the project.\nInstead of using the framework, drag the permissionscope project file into your project and take the same steps. This'll build the framework and include it for you.\n. Hey @JanC, that's pretty strange! I noticed that if you remove that line adding the permission and just call show, you get an error related to not being able to find the permissionscope lib file. This might be related to how you integrated with Carthage? My small check seemed to indicate you followed the steps correctly but it doesn't seem like the library is being correctly copied into that sample project.\nAlso, we're in the process of fixing an issue where Carthage is pulling in old binary releases instead of the newest stuff. Try using this option first: carthage build --no-use-binaries and see if anything is resolved.\n. :+1: !\n. Thanks @Chiliec!\n. All set with this release! @felix-dumit, we'll tackle this for the next one.\n. This looks great, I like getting rid of the waitingFor trackers. What's the BeginAtCurrentState change do?\n. Ah, interesting. Thanks!\nDo you have a particular repro step for blocking the main thread so I can reproduce the issue and confirm the fix? I imagine it occurs with the bluetooth permission which I don't use pscope for frequently...\n. Thanks for the additional changes @felix-dumit, I'll review next time we set up a release.\n. Thanks for the followup @AdventuresOfMar, glad it's working for you.\n. Thanks for handling this @bre7 :)\n. :+1: \n. From the readme:\n\nYou must set these Info.plist keys for location to work\nUse NSLocationAlwaysUsageDescription or NSLocationWhenInUseUsageDescription where appropriate for your app usage. You can specify which of these location permissions you wish to request with .LocationAlways or .LocationInUse while configuring PermissionScope.\n. Thanks @pash3r, I'll pull this in but I'm not completely sure when we'll have another release at the moment. Please use :head in your podfile if you need this in the meantime.\n. Hi @retendo, some questions about the motivation for this:\n\nHow were you accessing this on a background thread where it was crashing? Does PermissionScope().statusLocationAlways() (or equivalent) not work for you?\nAnd please remove the jetbrains ignores. These should be in your global git ignore, not in the ignores for any project you use.\n. Can you send over an example that crashes when off the main thread? I'm interested if this is our own issue or something particular to native permissions requests.\nI totally get where you're coming from in terms of what should and should not be a static. I'm just not sure that shoehorning it in like this is the right solution when (if we can not crash) can do it just as well without.\n. I wouldn't attempt to remove the permissions based on what users have already accepted, but you should definitely reconfigure PermissionScope to only ask for the permissions that your app wants. If the user turns off a GPS feature in your app, simply don't configure PermissionScope with the location permission next time.\n. I don't think there's anything wrong with recreating the PermissionScope object on viewWillAppear in your case. The whole thing is very light and the impact of recreating it is probably negligible.\n. Thanks @chrismanderson, please use --no-use-binaries for now and we'll upload a new binary (or not! this process is getting frustrating) with the next release.\n. @chrismanderson No, just reuploading new binaries for Carthage when nothing has changed. Makes me rethink the benefits from having uploaded binaries in the first place.\n@bre7 We'd then be dependent on Travis to support new Xcode releases. I wonder if we can just rebuild with Xcode 7.3 and add to the old release?\n. OK, will give that a shot later today.\n. Thanks for uploading this @bre7! It's weird that I can't find a record of a changed release binary anywhere in github, right?\n. Ah, thanks for the tip @trozware! I'll work this into an upcoming release.\n. @yichengsun Yes - the crash isn't an issue with PermissionScope but as-designed for iOS. Changing certain permissions in the settings screen will terminate apps that have requested those permissions. This particular issue is related to fixing the warning only.\n. There is no solution @otymartin, this is expected behavior from the OS. The situation is unchanged from 12 days ago.\n. Hey @Navideck-fotis, thanks for reporting this. Does this occur whenever you request motion or just in some unusual cases?\n. I have a day scheduled for open source work early next week, I'll make all these changes and a new release then.\n. Thanks! Any idea how this impacts the display of the strings in the PermissionScope dialog? This definitely seems like it increases the character count by a bunch :)\n. @winkelsdorf I'm going to defer to you on which german strings should be included. I would rather keep a single list of German strings that we encourage people to use, I'm guessing that's more on the informal side but I don't know the standard for apps.\n. Thanks for this! We're going to swap this to a proper modal presentation at some point in time (#148) and it might be entirely resolved by that. If not, we'll tackle afterwards.\n. Thanks @VFUC! I'll check this out.\n. This is related... but I'm not sure it's a feature that we want. Let me get this straight, @quocan2812, you want to use UI-less methods for requesting the permission but then you want the alert UI if it's disabled?\nI think you've got to go in one direction or another here. Either you use the PermissionScope UI and get all the features, or you use the UI-less requests and write your own UI. It would be pretty easy to pull the alert code with the Setttings link out of the permissionscope code for your own use.\n. Hey @larsschwegmann, thanks for the PR. How does this compare to #162? I'm not really in a position to judge these kinds of changes.\n. Permissionscope doesn't manage the state of your app so we can't restore it to the state where you left off when changing something like contacts permission. Luckily this only occurs if a user denies contacts permissions and then has to re-enter settings to turn it on, not on the initial ask.\n. Possibly a similar case to #147? Looks like you're doing things correctly so likely some issue with the async motion request.\n. Hi @akofman - what were you hoping to animate and in what style?\n. Great, so this is going to be tightly coupled with the work in #148 to make the presentation a standard view controller. After that's done, you should be able to define your own transition animation delegate and do whatever animation you want.\n. That's great, thanks @akofman! I'll update this issue when we tackle #148\n. Thanks @akofman, I can see this being useful.\nHow are you accessing the pretty permission name used in the default deniedAlertTitle as permission.prettyDescription from your override?\n. Hi @aliess, if you don't want the denied re-show behavior, simply check for the status of each of your permissions before you call show() and don't call it if any of them are the denied status.\n. Thanks! I'll check this out next week when I'm back at work.\n. Hi @thomasgpeng, have you examined the ObjC example project?\n. You can try the code in issue #174 to get the Swift 3 syntax in the short term. We'll have an official swift 3 branch soonish.\n. Just fixed both of these on the swift3 branch, as well as some other issues.\nLet me know if this makes sense for a swapover:\n- push latest changes in master to swift2 again\n- tag a new 1.0.3 release/podspec for swift 2 in that branch\n- rebase swift3 on those changes\n- merge swift3 onto master\n- tag a new 1.0.4 release/podspec in master\nThat'll make sure people on swift 2 have the newest when using that branch.\nThe readme has been updated for swift 3. I might have to revisit the code samples (not the example projects, just in the readme) to make sure they're right.\n. Use the swift3 branch with cocoapods or carthage @ogezue \n. @bclubb The pod name is PermissionScope, not PromiseKit\n. Master is now swift 3 with version 1.1... I'm still fighting cocoapods to get the update pushed there\n. Should be done now, at version 1.1.1 after much fighting.\n. Thanks @Techprimate, this'll be great to pull in for UI testing.\n. I'm not sure how macOS support would work, asking for permissions really isn't an issue on the desktop. I have to admit I don't know much about the native tvOS permissions UI, let me know if you can elaborate\n. Sorry, not enough time or interest in supporting iOS 7 at this point.\n. Sorry @vijaysanghavi, apps cannot control or see the Mobile Data setting on a per-app or device level.\n. Thanks! A first version is better than nothing, I appreciate the effort \ud83d\udc4d \n. I really need to add this to the readme!\nThis is normal system behavior. If you toggle permissions from the settings screen, apps that have been approved or denied for this permission will be killed by the OS.\n. Hi @ventuz88, I'm happy to accept an italian strings file from you. Can you please modify this pull request to submit only an added strings file - it looks like you've removed a bunch of Objective-C code, changed a few file permissions, etc, etc.\n. Yes @ventuz88, if you look at the \"files changed\" tab you can see all the changes that are being proposed for this PR. That tab should have just the one new strings file added.\nI would suggest using a fresh fork/checkout of permissionscope, adding your file and make a PR out of that. I'm not sure how this current fork is integrated with your project, it seems like the other changes are related to your project versus pscope itself.\n. I haven't started this but I have started moving on getting the swift3 branch ready to be moved to master. Feel free to take a shot at UserNotifications based on that branch!\n. Hey @robbiet480, that happened occasionally in the iOS 9 simulator as well. I'll check if it's any more reliably broken in the new sim.\n. Hey there, any chance you can rebase this against master? Freshly swift3.\n. I'll check this out in the next few days @etartakovsky . Perfect, @ventuz88 - thanks!\n. Thanks @MaeseppTarvo, I'll add this to the readme. At the very least you should be able to add those string values and get past submission.\n@bre7 Perhaps it's really time to do subspecs for each permission :/ Not sure how Carthage could work similarly.\n. @yuvalt We're not even sure what's causing the requirement at the moment - is it just linking the frameworks or the presence of the code itself? Waiting for more information right now.\n. I'm filing a code-level support request in an attempt to get more information on the issue.\n. @yuvalt I'm interested in this approach but wary of asking people to create flags in build settings because it's not always straightforward. Can you think of another way to turn preprocessor definitions on and off?\n@emreavsar Your best bet in the short term is adding those plist items for the permissions that you're not using. Users will never see them until they're requested (which they never are) so no impact on your app.\n. They're not listed in the app settings until they're requested. The code hasn't changed, it's strictly a change in Apple's review process.\n. Hey friends, I got a suggested fix from Apple support, importing the framework is what causes the detection for API usage so give me your thoughts on this: each permission will have a single framework associated with it and you would have to import the framework specific to the permission that you're requesting, such as import PermissionScopeCamera, import PermissionScopeNotification, etc.\n. @bre7 I'm not convinced this is required... if we include many frameworks in a single podspec but don't import them anywhere, I've been given the impression that it will pass app review.\n. Yes @ValiDraganescu, you should file a radar. It appears your issue is not related to PermissionScope.\n. Thanks for the followup @emobtech, we're working on a better solution for the future.\n. Thanks @basememara, that seems like the thing to do right now if you don't want to fill in the plist items for permissions you don't use. Working on an alternate method for import right now.\n. That's the solution I think is best @h3smith, flags and subspecs seems a bit more complicated to use. @alanscarpa if you want to work on an approach, this is the right way to go.\n. Sorry @andrewkouri, I don't have the time to do this work myself at the moment. Happy to review a PR from you or @h3smith if you want to collaborate on the proposed solution.. Nope, no plans to fix this issue at the moment. I would see if there's a fork that implements the change you wanted.. I haven't heard of this before but it's not a surprising rule for the app store. By default PermissionScope should present your permissions as optional, i.e. if you cancel the dialog via the X button or tapping on the background, it should allow the user to continue.\nAre you overriding this behavior to force the notifications permission?\n. \ud83d\udc4d \n. I think it's worth bringing this in now, it will direct users to the right issue at the very least.\n. Look at the swift3 branch @LinusGeffarth.\n. @majidsaleem105 Have you tried specifying the swift3 branch for PermissionScope in your Podfile?I think your framework not found issue is related to not setting up the downloaded zip correctly, I would stick with cocoapods if you have that setup and (previously) working.\n. I'll have the swift3 stuff as a new release soon, I suggest you wait and try that again if the branch isn't working for you.\n. Please try again now, update your pod for master.\n. This strikes me as an integration issue @majidsaleem105, I suspect you may have messed with your project settings when switching to the download-zip-and-install. Is there a way you can revert back before you started messing with permissionscope, test updating to 1.1.1 (swift 3) and report back?\n. Thanks @nevinjethmalani, I'll catch this during the swift3 changeover\n. Swift 3 is released as the main version as of last week\n. Thanks for the note @pjebs. I usually encourage people to ask for notifications permission in the context of asking a user if they want feedback (i.e. after they post a comment \"do you want to be notified of replies?\") rather than entirely upfront. There's no great way for us to show a permissionscope dialog where just one permission is optional and users don't like being asked for notification permissions upfront either.\n. @AdventuresOfMar you can loop through the status for all requested permissions when each permission is triggered, as @bre7 suggests. I highly recommend you don't block entrance into a different view controller unless your app is fundamentally incompatible without permissions (such as camera + microphone for a video streaming app). In addition, Apple likes to reject apps that force the user to accept permissions such as notifications.\n. Thanks! Definitely working on #194 first but this is appreciated. I didn't realize how many language files we've gathered over the last few years...\n. Hi @Zornikachu, you should feel free to copy or extend the code in any way you see fit, there are no restrictions.\n. Thanks @dominikweifieg, this sounds reasonable. Can you add this to the docs as well?\n. Thanks @aleksandrshoshiashvili !. Thanks @max-potapov and @aleksandrshoshiashvili!. Thanks for the note @NinoScript, I'll leave this open until we come to a conclusion on if this is a supported use case. Do you want to link your fork here too?. Hah, this is a weird one. Thanks for sending a fix. If it wasn't clear before @rajubd49, please test on a real device. The simulator is not a reliable place for permissions testing.. Thanks @zshannon - one note though: instead of fatalError if you request the media permission on iOS < 10, the framework should communicate back that it's unavailable rather than producing an error.. Just a straight print with an informative message would be useful. Something that would catch someone's eye in the debug log :). Wow @timothycosta, thank you, this looks like quite a bit of work. I'll review and get back to you on your questions.. No, sorry. I'm busy right now and don't have time to work on this project.. Thanks @7jin16!. Have you flipped through usage of the framework with these strings? Can you post a few screenshots? I'm wondering how well they work line-wise.. As designed from Apple: https://github.com/nickoneill/PermissionScope/issues/160. No, I haven't had enough time to give this the attention it deserves and there are quite a few improvements to be made. Happy to accept the help if someone wants to organize a bit and plan to bring some PRs in.. Dunno, as the readme suggests, this is no longer supported.. This project is no longer supported.. This need to be a public initializer. Also give the notificationCategories a default value of nil so we're not required to say notificationCategories: nil in each new config.\n. Can you apply these computed variables in show and detectAndCallback where appropriate?\n. So much better!\n. Is there a benefit to if let _ over checking nil here?\n. Please do. Isolating these parts so we can do wilder stuff with each one to achieve proper feedback is the goal.\n. @bre7 Maybe I thought you meant something else with the decoupling mentioned before? At any rate, I agree. Let's bring this in before more changes.\n. ",
    "otymartin": "@nickoneill how can I disable this? For some use case like say snapchat, permissions MUST be granted for the app to be functional. I can hide the close button but how can I disable cancel from background overlay?\n. @nickoneill  is there a solution at this point or will it just always crash?\n. @nickoneill Yea it crashes while app is connected via USB but works fine on its own.\n. ",
    "bre7": "The text ? It's partially implemented, though not in code but rather using localization. Check https://github.com/nickoneill/PermissionScope/pull/12#issuecomment-96428580.\n. Is this still happening ? Didn't you add a GestureRecognizer to prevent it ?\n. Photos added. (#3)\n~~Bug: When Photos is requested, Microphone is taken into account. The button title says \"Photos\" but the triggered alert doesn't: \"Permission for Microphone was denied.\" (No mixup like before, not sure why it's happening)\nstatusPhotos() says Authorized but PHPhotoLibrary.authorizationStatus() states .NotDetermined...was working on an old verion~~ \n. Np, thanks for the fixes\n. #11\n. Since it's an optional it automatically receives a default value of nil. You can do the following:\n- PermissionConfig(type: .Notifications, demands: .Optional, message: \"test_message\")\nor\n- PermissionConfig(type: .Notifications, demands: .Optional, message: \"test_message\", categories: someSet)\n. Problem: Unable to add categories for notifications (\"Actionable/Interactive Push notifications\")\nSolutions: First comment. I'll try to think of a better way that doesn't include sub-classes\n. Cool, I'll add it later then\n. Keys for Localizable.strings:\n\n\"Allow Contacts\" = \"\";\n\"Allow Events\" = \"\";\n\"Enable Location\" = \"\";\n\"Allow Notifications\" = \"\";\n\"Allow Microphone\" = \"\";\n\"Allow Camera\" = \"\";\n\"Allow Photos\" = \"\";\n\"Allow Reminders\" = \"\";\n\"Allow Bluetooth\" = \"\";\n\"Allow Motion\" = \"\";\n//\n\"Contacts\" = \"\";\n\"Events\" = \"\";\n\"LocationAlways\" = \"\";\n\"LocationInUse\" = \"\";\n\"Notifications\" = \"\";\n\"Microphone\" = \"\";\n\"Camera\" = \"\";\n\"Photos\" = \"\";\n\"Reminders\" = \"\";\n\"Bluetooth\" = \"\";\n\"Motion\" = \"\";\n//\n\"Allowed Contacts\" = \"\";\n\"Allowed Events\" = \"\";\n\"Allowed Location\" = \"\";\n\"Allowed Notifications\" = \"\";\n\"Allowed Microphone\" = \"\";\n\"Allowed Camera\" = \"\";\n\"Allowed Photos\" = \"\";\n\"Allowed Reminders\" = \"\";\n\"Allowed Bluetooth\" = \"\";\n\"Allowed Motion\" = \"\";\n//\n\"Denied Contacts\" = \"\";\n\"Denied Events\" = \"\";\n\"Denied Location\" = \"\";\n\"Denied Notifications\" = \"\";\n\"Denied Microphone\" = \"\";\n\"Denied Camera\" = \"\";\n\"Denied Photos\" = \"\";\n\"Denied Reminders\" = \"\";\n\"Denied Bluetooth\" = \"\";\n\"Denied Motion\" = \"\";\n//\n\"Contacts Disabled\" = \"\";\n\"Events Disabled\" = \"\";\n\"Location Disabled\" = \"\";\n\"Notifications Disabled\" = \"\";\n\"Microphone Disabled\" = \"\";\n\"Camera Disabled\" = \"\";\n\"Photos Disabled\" = \"\";\n\"Reminders Disabled\" = \"\";\n\"Bluetooth Disabled\" = \"\";\n\"Motion Disabled\" = \"\";\n//\n\"Close\" = \"\";\n\"Hey, listen!\" = \"\";\n\"We need a couple things\\r\\nbefore you get started.\" = \"\";\n\"Permission for Contacts was denied.\" = \"\";\n\"Permission for Events was denied.\" = \"\";\n\"Permission for LocationAlways was denied.\" = \"\";\n\"Permission for LocationInUse was denied.\" = \"\";\n\"Permission for Notifications was denied.\" = \"\";\n\"Permission for Microphone was denied.\" = \"\";\n\"Permission for Camera was denied.\" = \"\";\n\"Permission for Photos was denied.\" = \"\";\n\"Permission for Reminders was denied.\" = \"\";\n\"Permission for Bluetooth was denied.\" = \"\";\n\"Permission for Motion was denied.\" = \"\";\n//\n\"Please enable access to Contacts in the Settings app\" = \"\";\n\"Please enable access to Events in the Settings app\" = \"\";\n\"Please enable access to LocationAlways in the Settings app\" = \"\";\n\"Please enable access to LocationInUse in the Settings app\" = \"\";\n\"Please enable access to Notifications in the Settings app\" = \"\";\n\"Please enable access to Microphone in the Settings app\" = \"\";\n\"Please enable access to Camera in the Settings app\" = \"\";\n\"Please enable access to Photos in the Settings app\" = \"\";\n\"Please enable access to Reminders in the Settings app\" = \"\";\n\"Please enable access to Bluetooth in the Settings app\" = \"\";\n\"Please enable access to Motion in the Settings app\" = \"\";\n//\n\"OK\" = \"\";\n\"Show me\" = \"\";\n//\n\"Contacts is currently disabled.\" = \"\";\n\"Events is currently disabled.\" = \"\";\n\"LocationAlways is currently disabled.\" = \"\";\n\"LocationInUse is currently disabled.\" = \"\";\n\"Notifications is currently disabled.\" = \"\";\n\"Microphone is currently disabled.\" = \"\";\n\"Camera is currently disabled.\" = \"\";\n\"Photos is currently disabled.\" = \"\";\n\"Reminders is currently disabled.\" = \"\";\n\"Bluetooth is currently disabled.\" = \"\";\n\"Motion is currently disabled.\" = \"\";\n//\n\"Please enable access to Contacts in Settings\" = \"\";\n\"Please enable access to Events in Settings\" = \"\";\n\"Please enable access to LocationAlways in Settings\" = \"\";\n\"Please enable access to LocationInUse in Settings\" = \"\";\n\"Please enable access to Notifications in Settings\" = \"\";\n\"Please enable access to Microphone in Settings\" = \"\";\n\"Please enable access to Camera in Settings\" = \"\";\n\"Please enable access to Photos in Settings\" = \"\";\n\"Please enable access to Reminders in Settings\" = \"\";\n\"Please enable access to Bluetooth in Settings\" = \"\";\n\"Please enable access to Motion in Settings\" = \"\";\n. Observation/Known bug: If status is disabled, PScope popup will be shown.\n. :)\n. np\n. @nickoneill: HK permission working (Don't use the example since you need to add the entitlement and link it to your account) on my last commit to the wip/health-cloud-kit branch. There's something we need to consider first:\n- What to do when the user asks for x types to share and y types to read ? Return .Authorized if all of them were ? What about SharingDenied and NotDetermined ? Link to the code\n\nAlso, that branch has a prototype of #71 by using PermissionConfig as a protocol (example here). I still think that we should improve decoupling. PermissionScope.swift shouldn't contain the request/success methods imo. A protocol based approach would be better (We still can't use structs because of ObjC...Unless someone wants to maintain a separate branch for ObjC compatibility)\nAnd one other thing, if the user taps \"Don't Allow\" on the HealthKit panel (not the system alert per se but the system modal vc to enable/disable each requested permission type) then it won't appear in the App's settings, by design (maybe a bug..There are radars about it). The user will have to go to Settings > Privacy > Health > App_Name to enable/disable each object, which we can't deeplink.\n. This one ?\n\nWhat to do when the user asks for x types to share and y types to read ? Return .Authorized if all of them were ? What about SharingDenied and NotDetermined ? Link to the code\n\nWell, when requesting HK access one needs to specify 2 sets: elements that the app will share (aka write) and read. So, when we want to return HK's status what should we do ?\n``` swift\nlet typesAuthorized = statusArray\n    .filter { $0 == .SharingAuthorized }\nlet typesDenied = statusArray\n    .filter { $0 == .SharingDenied }\nlet typesNotDetermined = statusArray\n    .filter { $0 == .NotDetermined }\nif typesNotDetermined.count == statusArray.count || statusArray.isEmpty {\n    return .Unknown\n} else if !typesDenied.isEmpty {\n    return .Unauthorized\n} else {\n    return .Authorized\n}\n```\nAs the code shows, at the moment Authorized is only returned when all of them are.\n. I guess one solution could be to add an extra flag to HealthPermissionConfig called strictMode. If strict is enabled, then Authorized would only be returned when all of them are. Otherwise, if at least one has SharingAuthorized, then return Authorized \nCode:\n``` swift\npublic func statusHealthKit(...) -> PermissionStatus {\n        guard HKHealthStore.isHealthDataAvailable() else { return .Disabled }\n    var statusArray:[HKAuthorizationStatus] = []\n    typesToShare?.forEach {\n        statusArray.append(HKHealthStore().authorizationStatusForType($0))\n    }\n    typesToRead?.forEach {\n        statusArray.append(HKHealthStore().authorizationStatusForType($0))\n    }\n\n    let typesNotDetermined = statusArray\n        .filter { $0 == .NotDetermined }\n\n    if typesNotDetermined.count == statusArray.count || statusArray.isEmpty {\n        return .Unknown\n    }\n\n    let typesAuthorized = statusArray\n        .first { $0 == .SharingAuthorized }\n    let typesDenied = statusArray\n        .first { $0 == .SharingDenied }\n\n    if strict {\n        if let _ = typesDenied {\n            return .Unauthorized\n        } else {\n            return .Authorized\n        }\n    } else {\n        if let _ = typesAuthorized {\n            return .Authorized\n        } else {\n            return .Unauthorized\n        }\n    }\n}\n\n```\n. I'll commit strictMode for now. Then we'll think about improvements\n. > all permission status\nconfiguredPermissions ? Make the computed variables public then ?\n\nAlso, a Parse extension to plop these all into a permission class unique by user id + installation id\n\nPermission class ?\n. There's no way to check for the permission status, only when requesting you are able to verify the error.code :cry: \nAlso, I think we need to assume the following (CMError codes):\n- Device supports motion activity (CMErrorMotionActivityNotAvailable will never occur)\n- App has necessary entitlements (CMErrorMotionActivityNotEntitled will never occur)\n. ~~First try. Compiler errors due to new associated values, can't tell the cause :S\nAlso, if we use associated values in enums there's no point using allValues since we don't have the parameters for them (?). And without associated values we have to use extra parameters on init like for notifications...which isn't ideal~~\n~~Associated values, extra init parameters or a better solution (plugin system using POO maybe?)~~\n. AutoLayout ? :D\n. Yeah.\nlet height = baseHeight + (labelHeight * count(configuredPermissions))\n. Reminder or bug ?\n. Linus, the notificationCategories parameter is optional, intended to be used when you want to use interactive/actionable notifications (Apple Docs).\nIf you are going to use notification actions:\n``` swift\nvar acceptAction = UIMutableUserNotificationAction()\n// Configure the user notification action\nvar actionCategory = UIMutableUserNotificationCategory()\nactionCategory.identifier = \"some_id\"\nactionCategory.setActions([acceptAction], forContext: UIUserNotificationActionContext.Default)\nlet pscope = PermissionScope()\npscope.addPermission(\n    PermissionConfig(type: .Notifications,\n        demands: .Optional,\n        message: \"We use this to send you\\r\\nspam and love notes\",\n        notificationCategories: Set([actionCategory])\n    )\n)\npscope.show()\n```\nelse use:\nswift\nlet pscope = PermissionScope()\npscope.addPermission(\n    PermissionConfig(type: .Notifications,\n        demands: .Optional,\n        message: \"We use this to send you\\r\\nspam and love notes\",\n    )\n)\npscope.show()\nAnother example (screenshots included): Notifications in iOS 8 Part 2\n. I made a mistake in the second example :( There's an extra coma after the message \n. What's the crash error ? \n. Is the var pscope stored in the view controller ? Or do you create it inside a function ? Try the first option. \n. Nope, I'll have a look tomorrow or monday though =S I noticed the same when I first downloaded the project, if you enable zombies it displays the cause.\n. Or use:\npod 'PermissionScope',  :head\n. Similar to #14, I'll have a look later if nick hasn't by then. \n. :P\n. Swift2 fixes added. If it weren't for ObjC compatibility, PermissionType enum would only be one line :/ \n. Single page readme or wiki ?\n. Added (wip/health-cloud-kit branch)\n. The following permissions should probably be in the next version since they require important changes to the API:\n- [x] HealthKit support\n- [ ] CloudKit support\n. Sadly UIT doesn't support interaction with system alerts as far as I know...It'll be probably added by the time GM is released.\n. I think you can interact with system alerts now. The recording feature does detect them at least.\nI've found something in the forums related to a UI testing (iOS9+) bug when interacting with system alerts: https://forums.developer.apple.com/thread/11574 but not sure if it stills hapenning.\n. I don't think there are any retention issues between Configs and PScope itself\n. They are all required atm (PermissionScope.swift#L848), since requiredAuthorized() and allAuthorized() return the same value.\n. Or at least offer such functionality as an optional setting.\n. Check #37. I might have a look later this week or next one unless someone pushes a branch. \n. oh =S My bad...I don't think I can create a new one, only contributors with write access can...Create the swift2 branch and I'll push a new PR \n. Status should be an async call then :P\n. What should we do when CouldNotComplete is returned ? Docs say that you should investigate the NSError returned so...Use throws ? Print the error ?\nQuick-dirty version done...Can someone test it ? Don't use the example app, but rather a new one since it requires entitlements on your App ID\nShould we add an observer for CKAccountChangedNotification ? Or is it the job of the dev to add it and use PScope's API to request if necessary ?\n\nPosted when the status of the signed in iCloud account may have changed.\nThe notification is sent by an instance of the CKContainer class. If there are no instances of the class, notifications are not sent. The notification may be sent on any thread or work queue. Use the accountStatusWithCompletionHandler: method to obtain the current account status.\n. Awesome, thanks for that @evermeer\n. > Click on the notifications button will give a prompt, when clicking on OK the button changes to \u2018Denied notifications\u2019. But I pressed OK so it should say that notifications are allowed.\n\nYeah, it's a bug being tracked in #69.\n\nWhen pressing on CloudKit you get the message \u2018please enable access to CloudKit in Setting\u2019 I think it would be nicer/clearer if the text was something like 'Please first login into ICloud in the Settings app\u2019\n\nIt's a system alert so there's nothing we can do other than present a new alert first ? Which isn't very nice.\n\nWhen going to the settings app and then returning to the app, PermissionScope will trigger the following Assert (L250)...\n\nWhere is the function showPermissionScope() being called from ? Because it sounds like you are trying to add a .Notifications permission again, maybe you added the call in viewDidAppear ?\n. > No, it's not a system setting, it's from this line:...\nOops, sorry about that. The message might need some rephrasing, @nickoneill will take a look later though imo it's fine. The only fix I can think of is using prettyDescription instead of the name itself.\n\nI do have another issue. After restarting the app it will immediately execute the callback with finished is true but only 1 element in the results while both are required. The element is for Notifications Authorized. I expect also an entry for CloudKit Authorized. (or a finished = false)\n\nNot sure why it's happening...I'll have a look later.\nUpdate: @evermeer I think I've found the problem, it was related to the computed variables (someone deleted the .Required) which is fixed in the healthkit branch. I'll merge it to cloudkit later.\n. > The workaround is calling the hide and then after 1 second the show. It would be nice if there was a method in PermissionScope to reinitialize everything. Do you want me to create a new issue for this?\nCreate a separate issue for it. That's the disadvantage of not having PScope as the observer itself.\nEverything else worked as expected using my branch ?\n. Mmmmh, it's probably a good idea to move CK to a new branch for the time being then.\n@nickoneill could you close it and open a new issue ? So we can tag it properly as a bug\n. > p.s. The current swift2 branch has a compile error. CloudKit was removed from a switch, but it's still in the Enum which makes the switch incomplete.\nFixed.\n. > I remember fixing a similar visual glitch for another permission in the past, I'll have to dig into some commits to remember what the issue was.\nOld issue: https://github.com/nickoneill/PermissionScope/issues/14. Fix https://github.com/nickoneill/PermissionScope/commit/8a800f303f391b127b93eea70e0a016539431f5d\n. Reopen if there's enough user interest\n. The only link that you can set corresponds to \"Settings/AppName\". There used to be a way to link to specific settings (using the  prefs:// URL scheme) but it doesn't work anymore and also I don't think it's allowed.\nAnd I concur with .@nickoneill, any permissions that you have denied should appear in the app's settings unless they are disabled system wide.\n. There seems to be a problem.\n\nAs I said, the right link would be Settings/Privacy/Contacts/AppName - screen 4\nbut this is not accomplished. I think this happens if the permission was denied from outside the app.\n\nRead my earlier comment. As you stated, you can't open Settings/Privacy/Contacts/AppName only Settings/AppName.\nIf you install the app for the first time and says \"Denied ...\" and you haven't denied any permissions from the app itself or using Settings then there's a bug on the status detection.\n. I haven't been able to reproduce it.\n@TomMajor could you try the swift2 branch just to be sure ? I've just tested it and the screen shows \"Contacts\" like it's supposed to.\n. No, Swift 2 requires Xc7\n   \n. Could you change the language to English and re-test ? Just to be sure.\n. > When I do the \"Show me\" link and change from there the permission from on to off or vice versa, sometimes xcode breaks\nIt's expected behavior since you just changed an app permission. The app is forced to restart I think.\n. Yeah, it was my bad actually since I added the code in the wrong branch ;D\n. Oops, wrong PR\n. Reopen if there's enough user interest\n. Not bad, but quite messy if we add Accounts and HealthKit since they require 3 extra parameters in total (2 new Sets for HK and a Dictionary for Facebook) :S\nWhich also would entail adding extra asserts to ensure those new parameters are !Optional for those specific permissions.\nSomething like:\n``` swift\npublic init(type: PermissionType, demands: PermissionDemands, message: String, \n    notificationCategories: Set? = .None,\n    facebookPermissions: [NSObject:AnyObject]?, healthTypesToShare: Set?,\n    healthTypesToRead: Set?) {\n    if type != .Notifications && notificationCategories != .None {\n        assertionFailure(\"notificationCategories only apply to the .Notifications permission\")\n    }\n\n    self.type = type\n    self.demands = demands\n    self.message = message\n    self.notificationCategories = notificationCategories\n\n}\n```\n. Indeed, cleaner code. I'll try this new solution with HealthKit this week.\nAre you going to release 1.0 as-is or wait for these new changes ?\n. I'm still thinking about the async requests, specially if using GCD (I'm still getting the hang of it) or Async which is a pretty nice wrapper.\nWould you mind adding third-party dependencies ?\n. > Instead, we can simply provide a permissionconfig protocol and break each service into a new file / struct / class.\nNo structs because of ObjC compatibility :/\nUPDATE: PermissionConfig is a Protocol for now\n. Changes commited and swift2 branch merged.\n@nickoneill I'll leave the PR merge to you in case you want to change something else.\n. Yeah, there were some cases which I wasn't sure how to handle...Hence the TODOs\n. Reopen if there's enough user interest (linked to HK)\n. The branch builds with no errors atm.\nIt's the other way around, see API Diffs:\nRemoved CGRect.offset(dx: CGFloat, dy: CGFloat)\nAdded CGRect.offsetInPlace(dx: CGFloat, dy: CGFloat)\n. ;) np\n. There's no need to create a new function.\nOther approaches: \n- add a new public variable with a default value of inverse color\n- subclass UIButton and add the same variable described above. \nImo the second solution is better. \n. There needs to be a second variable to store whether to use the inverse color or not. Otherwise there's no way to update it correctly with didSet (which will contain the same code as your function pretty much)\n. Yep :) sry I didn't check before. Delete 2894c01 then ?\n. Even shorter:\nswift\nbutton.backgroundColor = unauthorizedButtonColor ?? authorizedButtonColor.inverseColor\n. Could you delete the extra empty lines ? 28,30,32,291,293\n. I'll add the notes to the readme.\n. @felix-dumit @Navideck-fotis could either of you add doc for the CMMotion and Bluetooth related functions and variables ? Use VVDocumenter if you don't already have it.\n. Yeah, since I wasn't 100% sure about the workflow (CMMotion especially since I didn't implement any of it)\nBtw, use VVDoc's swift-2.0 branch but beware that Alcatraz updates it with the master branch every time you open Xcode \n. It's ok for now.\nMissing:\n- [x] showingNotificationPermission() L539\n- [x] notificationTimer L550\n- [x] finishedShowingNotificationPermission() L553\n- [x] triggerBluetoothStatusUpdate() L853\n- [x] detectAndCallback() L1267\n- [x] getResultsForConfig(:) L1296\n- ~~finish() L1139~~ function removed\n- [x] appForegroundedAfterSettings() L1224\nThey all have // TODO: Add doc comments\nUpdate: @nickoneill nice, they are all done now I think.\n. How to refactor the request methods to each Permission ? request needs to call different functions depending on the current status (e.g: .Unknown ---> detectAndCallback())\nSolution 1: Delegation\nself will be a parameter on every permission =S  ? Or set the delegate in addPermission(:)\nSolution 2: request() has closure parameters for each status\nswift\npublic func request(closure1, closure2, closure3) {\n        switch status() {\n        case .Unknown:\n            /// some code\n           closure1()\n        case .Unauthorized:\n           closure2()\n        case .Disabled:\n           closure3()\n        case .Authorized:\n            break\n        }\n    }\nReally messy...\nSolution 3: Use one closure\nswift\npublic func request(closure1) {\n       let currentStatus = status()\n        switch currentStatus {\n        case .Unknown:\n            /// some code\n           closure1(grantedResult)\n        default:\n           closure1(false)\n        }\n    }\nNo.\n\nPermissionScope will usually ignore .Authorized status and show alerts/call detectAndCallback() for the other cases.\n. Valid point...I guess that failing is the simplest solution to prevent mistakes. Updating the message could be another way.\n. Ty\n. Nice.\n~~Pending: Update README about new properties.~~ Done\nFix https://github.com/nickoneill/PermissionScope/pull/82/files#diff-6a54c2af707042d2afac7fd53538bb2dR38 if you can, it's the same comment as line 40\n. Nice catch ;D I'll have a look this week If I can but after #79 \n. No ETA since there are more important things that need to be implemented first (API rework, pending status, etc)\n. Reopen if there's enough user interest. HK would seem to be too complex for PS' scope.\n. ~~@evermeer test the new PR if you can and I'll merge it.~~\nDone.\n. You failed to set the correct keys in the plist so the assert failed, as intended. \n. Might be a good idea to check out OAStackView/TZStackView (UIStackView after PermissionScope drops support for iOS 8)\n. Force Portrait mode for PS' dialog ? http://stackoverflow.com/a/28220616/2124535\n. Yeah. That's how other libs usually update to a new swift version also.\nP.S: Nice banner :wink: \n. > You don't even have to make a swift12. branch unless you are planning to make updates to it.\nMakes it easier for others to fork though.\n. Ahh :( yeah, sub-specs seem to be the way to go. What about Carthage ? New xcodeproj per subspec ?\n. HK capability is off right ?\n. Yeah ;)\nRemove HK for now and push 0.9.1 ? (Remove the GCD code using groups, there's no need for that since we are going to add the Pending status)\n. Reopen the issue if the rejection turns out to be due to PScope\n. I added it for cloud kit but there's no need for it since we are going to set a pending status until onAuthChange is triggered \n. There's no need to even send the user to the Settings app, but rather to use the sliding control panel. You should check how MacID shows the alert, subtle yet visible and with a great UI. \n. Thanks, I missed some messages and also most of the new ones weren't localized\n. Those strings were already localized by Leshich in #103 which I've just merged. ~~README needs an update about all the keys.~~\nKeys updated in https://github.com/nickoneill/PermissionScope/pull/12#issuecomment-96428580\n. Nope, you just need to wait for @nickoneill to push the new version to CP. You could also add this to your podfile:\nruby\npod 'PermissionScope', :head\nUsing :head instead of a fixed version will always check out the master branch from the repo.\n. Paste your Podfile\n. As stated in the README, PermissionScope only supports iOS 8+. Your podfile has iOS7 set as the platform. \n. If I'm not mistaken, 1.0.2 will include some bug fixes: #125, #127...among others) I haven't had the time to check them out lately.\n. From the Apple dev forums:\n\nChanging Localization native development region in info.plist to United States instead of en\n\nUpdate: If everything works from the repo, there's no need for this issue anymore. Mentioned warnings/errors are the same as #127...Closing issue.\n. PRs are welcome.\nCheck the readme, under customization, last paragraph for instructions on strings customization. \n. Mmmmh, the only issue I can see is related to CloudKit (not present in the master branch though), as status/request methods require network requests. I guess it doesn't really matter for now, there are far more important things that need to be finished before adding CK back.\n. > I think there may be a design improvement here. How about if PermissionScope had a dictionary of permissions and you could toggle which ones are displayed?  The key for the dictionary being \"contacts\", \"location\", etc...\nThe problem is that some status methods require arguments\n. The message is related to the UI, I don't think it's right to send/store it when creating the Permission itself since it won't be used.\n\nHowever, I need to better understand what other required arguments there are. \n\nNotifications and Health (removed for the time being) for instance.\n. Closing for the time being.\n. Indeed there is. The API doesn't allow to set the titles but you can use localization. Check https://github.com/nickoneill/PermissionScope#customization, last paragraph for instructions.\n. Could you try it with a real device ?\n. Hi ed, Some additional questions:\n1. ~~Where you prompted by PScope to allow the permission ?~~\n2. Could you post a screenshot of Settings -> AppName ?\n. :sweat: yep, didn't even realize you were calling the request method directly...\nStill, I think there's a problem with the request methods (when the intent is to call them directly): case .Authorized: break implies no return so onAuthChange won't be triggered\n. ~~Request methods, currently don't trigger the onAuthChange closure...Only show() uses it. So, in order to return that info, we need to know whether request..() was called from show() or not and call onAuthChange if necessary~~\n. Yeah, ignore that last comment. Call statusNotifications() instead of requestNotifications() (after granting access) and post the result\n. Got it.\nCloudkit's getResultsForConfig + owaves fix fixed it. Check the new branch\nPENDING: show() isn't working\n. Once we get this sorted out, nick will probably push a new version. As I said before, this fix still needs some work since show() isn't working\n. Try\nswift\npscope.onAuthChange = { (finished, results) in\n    print(\"got results \\(results)\")\n    print(\"statusNotifications \\(self.pscope.statusNotifications())\")\n}\nIs it still Unauthorized and Authorized ? #126 fixes the issue related with direct calls iirc but show() won't work.\n. Flow:\ndetectAndCallback\n--> getResultsForConfig\n----> allAuthorized\n------> getResultsForConfig\n. > Also, I just merged this locally with #115 and it won't show the UI using the example app, just returns returned results [LocationInUse Unknown, Notifications Unknown, Contacts Unknown] for a fresh simulator.\nYeah, that's the problem with the fix: https://github.com/nickoneill/PermissionScope/issues/125#issuecomment-155255670\n. The problem in #125 was that results would say one thing, while statusNotifications would report another (the correct one).\nswift\nsinglePscope.onAuthChange = { (finished, results) in\n    print(\"got results \\(results)\")\n    print(\"statusNotifications \\(self.singlePscope.statusNotifications())\")\n}\nAnd also, show isn't working in this branch\n. Hi @ykobets, PRs are welcome. As stated in the README:\n\nPlease get in touch if you'd like to contribute a localization file for another language!\n\nLocalization is implemented using the keys located in files/English.strings. If you want to localize it to a specific language, clone it to your project and modify the content to your liking. (Keep in mind some keys are incorrect, as per #124)\nUpdate: If someone wants to submit a new translation, we'll add the loc folders. Closing issue for now.\n. request/status methods should include the necessary parameters then: e.g. notificationCategories for Notifications, etc.\n. Same as #124 \n. It looks like he downloaded the ...framework.zip from the release\n. Similar to #69 ? Should've been fixed.\n. Try again, but first reset the simulator. I'm not sure how can a permission be enabled/disabled in settings without using the iOS system alert.\n. Try disabling it and testing Notifications without it\n. Is the code that adds the permission in viewDidAppear by any chance ?\n. Paste the code that calls addPermission if u can \n. Closing the issue. If the problem persists, reopen.\n. Seems to be the same issue. You can't add the same permission twice. \n. Background mode shouldn't be enabled in the library. Add a note in the README, under extra-requirements-for-permissions\n. :hand: my bad\n. Because they are constants instead of variables :) Thanks for the heads up.\n. Np, back from my holidays btw :)\n. Thanks deada92 !\n. As the assert message says, you need to set up the proper keys.\n. You need to download it and add it to your project. Eg: http://www.raywenderlich.com/64401/internationalization-tutorial-for-ios-2014\n. Your own\nEdit: Closing issue for now\n. Yeah, the archive uploaded was built using swift 2.1 and there's a note in the readme about it. \n. > Travis CI can automatically upload assets to your git tags on your GitHub repository.\nCarthage auto-archive ?\nEdit: More info here https://github.com/facebook/ios-snapshot-test-case/issues/81 and Use travis-ci to upload your tagged prebuild frameworks\n. Yes, you can add a new archive to an old release \n. Archive uploaded. Warnings will be fixed in next version (pr #159)\n. True, there's no \"uploaded date\" in the release panel though it's part of the api https://api.github.com/repos/nickoneill/PermissionScope/releases/2512203.\nBTW, it's easier to use this tool to upload files to releases: https://github.com/aktau/github-release\n. Closing as PS isn't to blame for this issue\n. Note: Don't forget to update Keys (string files) \n. Same as #130 ?\n. Thanks :)\n. Hi tux,\nWhy not just call show() again ? PScope will just need to re-check the configured permissions' current status\n. That's related to Google Analytics & CocoaPods. I'm pretty sure they fixed that problem some time ago. Check stackoverflow. Just in case, be sure you have the latest version of CocoaPods.\nClosing the issue for now.\n. Couple of changes (minor):\n- Comment first() (located at https://github.com/nickoneill/PermissionScope/blob/master/PermissionScope/Extensions.swift#L38) since it's part of Swift 3 (http://swiftdoc.org/v3.0/protocol/Sequence/#func-first_).\n- Replace DispatchTime.now() + Double(Int64(0.1 * Double(NSEC_PER_SEC))) / Double(NSEC_PER_SEC) with DispatchTime.now() + .milliseconds(100) or DispatchTime.now() + 0.1\n. Comment the whole method for now.\n. @blwinters @jstheoriginal Related to SE-0112 I think: http://ericasadun.com/2016/08/01/geomapping-the-swift-change-log/\n. Can't seem to find the new offsetInPlace. offsetBy is the new non-mutating version and the only method with offset in it's declaration.\n. Only thing needed is to fix offsetInPlace. I'll submit the other fixes later. \n. Great. Only one minor detail: I think you can now use .normal instead of UIControlState() (e.g: button.setTitleColor)\nTypo: .now() + .milliseconds(100) != .now() + 1.0 (should be 0.1 but use .milliseconds for clarity)\n. Swift 3 related... E.g: where is now ,\n. Everything is Swift 3 related. Non-existent methods, etc. Try to fix them using the docs or wait for final PR\n. Swift 3 (Xcode 8.0 beta 6) branch committed. Closing PR\nruby\npod 'PermissionScope', :git => 'https://github.com/nickoneill/PermissionScope.git', :branch => 'swift3'\n. Check:\n- https://github.com/nickoneill/PermissionScope#unified-permissions-api\n- https://github.com/nickoneill/PermissionScope#calling-request-methods-directly\nMind the bugs (e.g: #130)\n. Check #174 which has the latest swift 3 changes\n. Check swift3 branch (compatible with Xcode 8 beta 6)\nTODO:\n- Replace UIControlState() with .normal\n- Recheck access control (open vs public). Class shouldn't be open (sub-classing makes no sense)\n. \ud83d\udc4d \n. Use master in your Podfile until a new version is released :)\nruby\n  pod 'PermissionScope', :git => 'https://github.com/nickoneill/PermissionScope.git'\n. Sub-modules until a new version is released ?\n. Not sure. I think the new version will be pushed using Swift 3\n. PRs are welcome. Not enough user interest for this permission atm so it might take a while.\n. Dupe #160 ?\n. New item in \"Known bugs\" and maybe add it to the issue template\nUpdate: Done\n. Have you printed the return values ? Might be an issue related to the UI instead (check #150 just in case)\n. Try returning the raw value then: AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo)\n. AVCaptureDevice.authorizationStatusForMediaType() is the recommended way as far as I remember.\nJust to be certain, you are using a device right ? Not the simulator.\n. One subspec per permission seems....too much. Isn't there a way to use weak linking like in ObjC ?\n. For now I'd suggest forking and removing unused permissions (or editing the Pods project) \ud83d\ude1e Not sure if there's a perfect solution to these problem\n. There are some issues in SO like these:\n\n[...] AdMob seems to have references to the Calendar so an app I have which uses ads, and does not use the Calendar itself, can't be submitted. Thanks Google!\n\nA possible \"solution\" (albeit hacky) would be to enter all the required keys in Info.plist (it's even suggested by AdMob's team: https://groups.google.com/forum/#!msg/google-admob-ads-sdk/UmeVUDrcDaw/HIXR0kjUAgAJ)\n. Yeah. The frameworks are being linked because of the import statements. \n. One Pod per permission ?\n. Meant subspec :D \n\n@bre7 I'm not convinced this is required... if we include many frameworks in a single podspec but don't import them anywhere, I've been given the impression that it will pass app review.\n\nInteresting. Guess we'll need to test it\n. Flags+Subspecs solution used by ISHPermissionKit: https://github.com/iosphere/ISHPermissionKit/pull/80/files\n. bash\npod deintegrate\npod update\n. Motion status is async iirc. Might be related to how PS' handles async permissions requests (#133)\nCould you submit a PR using isAuthorizedForRecording with availability checking ? (Since it's iOS 9+). The API is ambiguous though, it doesn't differentiate between unknown/unauthorized so we'd have to use the UserDefaults approach\n. The only callback available is triggered each time PS detects a status change.\n. ~~IIRC there was a callback named allAccepted or something like that~~\nCheck allAuthorized(_:): link\n. Looks great \ud83d\udc4d Not sure if it will be merged before #194  is fixed\n. Could you add a note in the readme (https://github.com/nickoneill/PermissionScope#extra-requirements-for-permissions section) about NSSpeechRecognitionUsageDescription ?\n. Here are the cliff notes on MIT: https://tldrlegal.com/license/mit-license\n\n. Related to #190. Fixed in #191\n. #191 hasn't been merged yet, hence its \"open\" status. \n. Please test using a real device \ud83d\udc4d. I didn't commit that part since using the variables would include an extra array loop (not that it matters since there are only 3 elements). I'll commit those changes if you want (tomorrow probably)\n. Just cleaner, imo at least.\n. That was my goal at first but I left the decoupling for another time.\nAccept the PR and then we refactor (It will break everything). Maybe rename PermissionCofig to just Permission (e.g.: NotificationsPermission instead of NotificationsPermissionConfig)\n. ",
    "mythodeia": "@nickoneill did you have a chance to look at it?\n. thanks for the support :+1: \n. ",
    "fotiDim": "@nickoneill @bre7 \nI have motion activity working all right. In fact I have submitted an app to the App Store with it. There are just a two bugs I want to look into. However as the project I was working on was in ObjC I used this pull request's code as a starter: https://github.com/nickoneill/PermissionScope/pull/49 . So I suggest that I hold on until you merge this one.\n. I will try to work on this in the following days.\n. @nickoneill Any news on the merge?\n. @nickoneill I am afraid that what you suggest will not work for my case. I am requesting permissions for Notifications and Motion (by the way I have motion ready for you). My app works fine without them. However I don't want to bug the user every time to allow these permissions. It would be highly annoying. \nInstead I might suggest that the dialog appear every 10 runs if the optional permissions are not accepted. iRate (https://github.com/nicklockwood/iRate) does something similar when requesting a rating from the user.\nEdit: A minor addition on my above suggestions. If all permissions are optional then the dialog should appear (every 10 runs or so) only if the user hasn't given a response for every permission (either accepting or denying). But if he has done so (e.g. denied all permissions) the dialog never appears again.\n. @nickoneill If I get correctly what you want to do is to be able to set a different \"expiration\" time for each permission. So if one of the dialog's permissions has expired (and state is unknown or denied ), then the full dialog appears (including non expired permissions). Am I right?\nYou have to take into account a scenario that someone wants to set one or more permissions as required. What would they set the timer to? I guess the answer would be 0.\n. What I mean by \"required\" is that I want the dialog to appear every time until the user accepts all permissions. I guess it would be equal to setting expiration to \"0\". As you said, handling the action is up to the developer to implement.\n\nWould it be useful to hide permissions that are already approved? \n\nI think is a very good idea! It has crossed my mind as well. Less UI bloat = More chances that the user hits the right button. I would make it optional though and up to the developer to enable.\n. It would be nice to give a property to enable removal of already approved permissions. I know I would use it in our app.\n. We also do it in Tunedeck. However I am not sure if this should go into Permission Scope. Some developers might want to setup more complex scenarios e.g. show the dialog if a certain screen is visited more than 10 times.\nPerhaps it's better to leave it up to the developer to implement as desired.\n. Sorry I forgot to answer about the flash issue. Indeed this was happening when the dialog should not appear (conditions met) because the motion status check was an async request. This gave the time to the dialog to appear momentarily and then disappear resulting in a flash effect.\nThe way I solved this was:\n- The initial position of the dialog before transitioning is outside the visible window\n- I set a few seconds delay before starting the transition\n@felix-dumit Do you experience the flash with my pull request?\n. @nickoneill Done!\n@felix-dumit Nice implementation! It should be bullet-proof this way.\nI did my testing and everything works the same for me as before.\n. I changed the deployment target setting to iOS 9 to see the deprecations warnings. Otherwise you are not warned. I should have changed the setting back probably.\nAbout the whitespace changes, I have been using the \"Structure > Re-Indent\" command from the Xcode's menu and this causes it. At least that's the behaviour in Xcode Version 7.0 beta 5 (7A176x).\n. @nickoneill This is what I 've been doing to the content view:\nobjectivec\n_multiPscope.contentView.backgroundColor = [UIColor darkBlueColor];\n_multiPscope.contentView.layer.borderColor = [UIColor darkBlueColor].CGColor;\nI just noticed the the ObjC example does not work as expected. If I use [NotificationsPermission new] it crashes looking for an init() method. If I use [NotificationsPermission alloc] it somehow understands it as ContactsPermission. This happens to every permission type. Any ideas what might be wrong? \n. Never mind. I just fixed it. The good old alloc/init did the trick. The problem was with NotificationsPermission which didn't carry an init() method but instead carried initWithNotificationCategories().\nI took the liberty to migrate every \"new\" call to alloc/init for consistency.\n. It happens every time. I guess nobody else tested motion or maybe they overlooked it.\nAs an additional safety measure maybe we could add a timeout to the waiting loop.\n. @nickoneill any updates on this?\n. Ping\n. ",
    "non-binary": "Please do.\n. :heart: \n. ",
    "LinusGeffarth": "Hey,\nThanks for the quick response!\nLook, as shown in the screenshot, it complains either way:\n\nWeird thing is that here it works (except crashing):\n\nThanks\n. Yeah I could think of that already, no problem. Thats why my code in the second image works ;)\nBut still, the app crashes when I use that code & then press the button or anywhere else\u2026\n. There is none, thats the problem. It only says \"(lldb)\":\n\n. Super cool! Thank you so much :)\n(creating it as global variable was the solution)\n. Oh ok, I used CocoaPods for PermissionScope 0.4 but I changed so many things :(\nI can't seem to find where you resize the contentView...can you tell me?\n. Cool, thanks :)\n. Cool, thanks :)\nAnd sorry, I did not see that one...\n. Alright, thanks for the support :)\n. ",
    "TimothyChilvers": "If you look at the last PR, this can be ignored and notification permissions works the same as the rest.\nSent on the run\n\nOn 5 Jun 2015, at 19:40, nickoneill notifications@github.com wrote:\nHow does this behave if you have just one notification permission or multiple permissions where notification is one?\n\u2014\nReply to this email directly or view it on GitHub.\n. When iOS presents a permission dialog, iOS resigns the App from active to show the dialog. The App becomes active after the dialog is dismissed. Using these notification observers, we can tell when a user has made a decision even if we don't get UIApplicationDelegate callbacks about notifications because the user tapped \"Don't Allow\".\n\nIf the user has already been presented with the dialog (Which we track with the user defaults store) then iOS won't show the dialog again. To cover this, we add the NSTimer to behave as if the dialog was dismissed. The NSTimer needs to be deactivated when iOS shows the permission dialog, hence the ResignActive observation.\nWhen the timer fires, or the iOS fires the BecomeActive notification on dismissing the permission dialog, we know for sure the state of permissions.\nThe UserDefaults storage is used to distinguish between \"Unknown\" and \"Denied\" - if it is not Authorised and the dialog has been shown (The defaults returns true), we know the user has previously denied the permission.\n. ",
    "valentin7": "Just deleted the remaining printlns! I think also the trailing whitespace. \n. ",
    "winzig": "Makes sense to me, especially if that approach is being taken for the other things needed for direct access (like the closures).\n. Oh, just saw your update. I made a similar change, but obviously it's not hard to fold in either way.\n. Works for me, thanks\n. Sorry, I just saw this thread now. I've not had any problems using viewControllerForAlerts, I'm reading through this discussion now and am not clear on how it pertains to the crash related to Contacts authorization? If you remove viewControllerForAlerts, how will we be able to call the request* methods directly, since if PS needs to show a view, it won't be able to put it into the hierarchy correctly, right?\n. Strange! I hadn't seen that behavior in our app (iOS 8/9) and we're doing mostly the direct request* calls. I have always felt the way I had proposed (setting that vc directly) felt a bit hacky, but seemed like a different solution would require more of a re-architecting of how this project works than I would have been comfortable suggesting. ;-)\n. ",
    "felix-dumit": "The string value with the reason in the plist is optional, but you have to enable the 'acts as Bluetooth accessory' background mode in capabilities.\nI'll add that to the readme later.\n\u2014\nSent from Mailbox\nOn Sun, Jun 21, 2015 at 1:45 PM, nickoneill notifications@github.com\nwrote:\n\nThanks @felix-dumit! I've never worked with bluetooth before but it seems this is similar to location in that you need to set a few plist values in the project to get the permission to show up.\nCan you add these requirements to the readme near the location information?\nReply to this email directly or view it on GitHub:\nhttps://github.com/nickoneill/PermissionScope/pull/40#issuecomment-113926940\n. I just noticed an issue with my current implementation. Even if the user rejects the system permission alert it will show up as allowed.\n\nSince iOS doesn't need a permission for bluetooth to run in the foreground, just by presenting the alert bluetooth will be powered on and it will detect that it was accepted.\nI don't know if there is any way to detect if the background permission was actually accepted.\n. Fixed the previous issue on d182b62.\nNow I'm looking at both the authorisation level for the permission as well as the current status of bluetooth (powered on, off).\n. I think I'm done then, everything is working as expected for me\n. Response to your remarks:\n- I think it's better because if the user is not interested in bluetooth we don't need to instanciate it\n- Ok I'll add it\n- Ok\n- Yes in order to get the status we need to trigger an event for it. The logic here is that if the user has already been asked for the permission we need to do this to poll the bluetooth status, otherwise we can wait until the user requests it by tapping the button\n- Ok I'll add that too.\n. Also just in case you run into it as well: If you go to the settings and toggle the bluetooth permission the app will get a sigkill event, but apparently this is expected behaviour and the app relaunches itself afterwards: https://devforums.apple.com/message/714178\n. The hackish way to re-request permissions on the device is to change the bundle id, we'd probably need to make a script to run the tests and also change the bundle in that case.\n. @nickoneill I'm not sure the issue with the closure, I ran without that part and it works as well. \nI can push a version without it, maybe @valentin7 can explain what the original issue was.\nRegarding the mutability, something I did in the example was to reuse the same config for notifications for the singlePscope and the multiPscope. What we can do just to be safe is to copy the config before adding to the internal array. What do you think?\n. Now that I'm integrating this into my app I'm also experiencing the flash issue with bluetooth.\nThe problem with bluetooth, and from what I saw, coremotion as well, is that to get the status you need to perform an async request. So when the show method is called the status is still .Unknown and therefore the alert is shown, but shortly afterwards (I found that for bluetooth about 10ms) the status is updated and the alert is dismissed (if previously accepted).\nI've been thinking of a few different ways to solve this. Would be great to have some feedback.\n- The first measure we can take is on the addPermission method, as soon as bluetooth or coremotion are added, we can trigger the status update - so there is some extra time from that point until show is called.\n- Then we can either do what is already done here - delay the alert by some time in order for all statuses to update, or we can modify the statusForBluetooth (and motion) methods so they become synchronous and therefore wait for the status to be updated. <- This would involve moving a significant part of the code to a background thread and maybe making some methods require completion closures.\n- We can also delay the alert while we are still waiting for either bluetooth or coremotion to complete. (instead of a fixed amount of time).\n. @Navideck-fotis I did not try it, but from the changes you made I'm fairly confident it would solve it.\nEdit: @Navideck-fotis  It didn't work for me with bluetooth. I ended up doing a different approach, I think it would be a good idea to do something similar for motion as well.\nYou can see my changes at #57\n. Didn't know VVDocumenter worked with swift :+1: \n@bre7 I checked and there are already docs for bluetooth, did you just want me to double check them?\n. Ok!\nOn Mon, Sep 14, 2015 at 9:30 AM, Tom Winzig notifications@github.com\nwrote:\n\nWorks for me, thanks\nReply to this email directly or view it on GitHub:\nhttps://github.com/nickoneill/PermissionScope/issues/95#issuecomment-140134950\n. The app was approved for test flight beta, but rejected for the store.\nI have not enabled health kit in capabilities.\n. I resubmitted. Will let you know the outcome \n. Update here: The app was still rejected and I'm appealing (been a month already :disappointed:) but it had nothing to do with HealthKit so we're good.\n. So I tested and it did work, but I could swear before by just instantiating the manager the system permission would not show up.\nFinally I remembered that when I was developing I was testing using the Objc-Example and that in fact is the issue here. \nBy running the swift example it works but not for obj-c. (I'm not sure why this is though)\n\nSo probably the best solution to fix #107 is to check in triggerBluetoothStatus if the manager is .PoweredOn otherwise wait for the update in peripheralDidUpdateState and only then start/stop advertising (if powered-on)\nAlso what concerns me a bit with this is the removal of the waitingForBluetooth because previously we could have the permission alert flash while the bluetooth status was still in process of going from .Unknown to .Authorized.\n. Sounds good. I was thinking maybe it would make sense to wrap the results of the status callbacks using a promise or future.\n. I have made some minor changes to my branch in order to get it to work with my app, mainly related to bluetooth, I'll push a PR so you can take a look and see if it's in the scope of this release\nEdit: #147 \n. We're still using the waitingFor but not on the main thread anymore. I think we'll only be able to remove them if we move to a completion/promise model for these async permissions.\nThe BeginAtCurrentState is to address a potential issue if the alert is in the process of animating when the permissions are determined to be all enabled and the alert is told to dismiss. This basically makes the animation start from the current point it is in the screen instead of where it would be at the end of the opening animation (effectively it cancels the previous open animation) \n. I spent a while wondering why the popup was never showing up in the example but the background modes were disabled :/\nAnyways, I tried to reproduce the error in the example but I wasn't able. \nI think what was happening though is that if the peripheralDidUpdateState took enough time to be called that show was called before it. It would then get stuck in that while loop and wouldn't allow the update state method to be called, since the BLE queue was main thread as well.\nI think in my app, since I call bluetooth methods on startup, and also show the permissions scope alert on startup, it could happen that show was called before BLE had updated.\nActually I found a way to simulate the issue. Wrap the contents of the peripheralDidUpdate inside a dispatch_after block with a delay of like 5s (the time starts counting when the app opens because as soon as the permissions are added it fires the bluetooth status update, not when the alert is shown). \nThe alert will never show.\nWith these changes the alert will show up after ~5s of startup.\n. @nickoneill I've recently updated this further because I had found another condition in which it would get stuck waiting for bluetooth to update.\nWith these changes all the waiting operations are guaranteed to be off the main thread.\n. @bre7 It's not for the library but only for the examples, it was already enabled for the swift example I enabled it for the objc-example to match that.\n. can we add the status() and request() methods every permission has here? \nThen move the methods to their classes? (probably better to split into separate files)\n. ",
    "kylejm": "Also just fixed the Code Signing Identity for distribution as it was set to use development identities.\nIn our case, this was breaking our CI as Carthage was looking for a development ID and couldn't find one because we only keep a distribution signing cert and key pair on it, which I imagine is very common on other CI serves. Building the release config should sign with distribution IDs.\n. No problem, pleasure! And thank you for the work on pscope! \nSorry for my poor writing on the comments above (which I've now corrected. The heat here in London must have got to me!)\nWe're trying it out in our app, Loot. :smile: \n. When do you think you'll make a new release? Perhaps a 0.6.1 so Carthage can see the improvements and corrects?\n. Cool, good stuff, thanks. Got a bit excited with the version number I wrote there (before editing). Ha!\n. Awesome, thanks! Will take a look tomorrow morning.\n. It's worked! Thanks!\n. No problem! No, you can add it to an existing release and Carthage will pick it up :tada: \n. No worries! If you need help, let me know. I love this project and I'm pretty certain we're going to be shipped in our application.\nIf you need extra owners for some stuff like this, holler at me.\n. I don't think I can PR adding files to tags, otherwise I would.\nNo worries :)\n. @nickoneill I just checked out 1.0.1 but it looks like there's not a PermissionScope.framework.zip attached\n\n. Ahhhh, I see. I didn't realise you'd put it in the project root :smile: \nI'm not sure if this works, but even if it did, it's not a good idea, since the .framework.zip is an artefact and therefore shouldn't be tracked by Git. It's also quite nice to have each .framework.zip attached to it's corresponding release tag. This allows you to quickly download and integrate with any version of the framework (via Carthage or not).\nCarthage docs say:\n\nCarthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a GitHub Release on your project\u2019s repository.\n\nIt's in their README under Archive prebuilt frameworks into one zip file towards the bottom.\n. Worked great :tada: \n. Thanks @nickoneill!\nFor anyone else having this problem, you can get around it by using:\nbash\ncarthage bootstrap --no-use-binaries\nto build Permission Scope with Xcode 7.1.\n. @nickoneill @bre7 it's been a long time since last release. Can one be expected soon? :)\n. Awesome, thanks @bre7! Any idea when we can expect 1.0.2? The bug fixed by #114 would be particularly nice to have. I was slightly confused by this, since I thought I'd fixed it with PR #100.\n. Sweet! Legend!\n. @blender this is because you don't have a distribution signing cert and key on your machine.\n@nickoneill I think we should change the signing identity back to be iOS Developer just in case any developers that don't have Apple Dev accounts want to use it\n. @nickoneill @bre7 how's it looking for looking for the next release?\n. Awesome, looking forward to it :blush: \n. @nickoneill this is a similar change to my PR for the same problem a little while ago: #100\nLooks good to me.\n. @nickoneill that's not the case with Carthage, it will always download the .zip attached to a release if it can. To stop this behaviour, use the --no-use-binaries option :blush:.\nHope you've found the fix @jstheoriginal :pray:. \n. HHELLLLL YYEAAAAHHHHH!\n\n. ",
    "shfishburn": "An iOS app ought to be implemented such that functionality degrades gracefully when a particular recommended permission is denied by the user. For example, if using a map with points of interest can only show user location with that permission granted, the map should still show but not be able to center on user location. That said, every so often, the app should remind the user that he or she is not taking advantage of all the app features due to the denied permission. That reminder should be able to be set based on various variables such as number of visits to the view that requires the permission and not every time the user ends up there. This would provide for a less annoying \"tap on the shoulder\" than pestering a user every single time they end up there.\nAn option might be to give the user a permanent opt out of the permission such as, \"Yes, I know I'm a stubborn user and the app isn't doing everything it can for me, but please top reminding me.\"\n. ",
    "evermeer": "Hi, I tried adding the Quick-dirty version to a project of mine using:\nruby\npod 'PermissionScope', :git => 'https://github.com/bre7/PermissionScope.git', :branch => 'wip/cloudkit'\nI just did a pull request to make it work in beta 6\n. I'm currently adding it to the demo at https://github.com/evermeer/EVCloudKitDao/tree/Swift2\nI will push it to GitHub when it works ok with beta 6. \n. I have been thinking about the  CKAccountChangedNotification. I think it should be implemented by the developer. This because he should probably also have to reset the interface to an initial state. (exit user specific screens) and there is a chance that it should be done before PermissionScope screen is shown. So the current callback functions might be too late.\nOr... Maybe PermissionScope could have an extra optional callback function that will be executed when it's detected that permissions could have been changed or should be reevaluated. that function could have a return value Bool that will control if PermissionScope should show again or not.\n. I found some issues with this version. I will do some more tests. \nMy test case:\n``` swift\n    func showPermissionScope() {\n        pscope.headerLabel.text = \"Setting permissions\"\n        pscope.bodyLabel.text = \"For optimal usage we need some permissions.\"\n    pscope.addPermission(PermissionConfig(type: .Notifications, demands: .Required, message: \"For if you want to receive notifications that people send directly to you\"))\n    pscope.addPermission(PermissionConfig(type: .CloudKit, demands: .Required, message: \"So that other users can find you\"))        \n    pscope.show({ (finished, results) -> Void in\n        print(\"TODO: results is a PermissionsResult for each config\")\n        if finished {\n            self.getUser()\n        }\n    }, cancelled: { (results) -> Void in\n        print(\"WARNING: PermissionScope was cancelled\")\n    })\n}\n\n```\nWhen running this on a simulator that was just reset:\n1. Click on the notifications button will give a prompt, when clicking on OK the button changes to \u2018Denied notifications\u2019. But I pressed OK so it should say that notifications are allowed.\n2. When pressing on CloudKit you get the message \u2018please enable access to CloudKit in Setting\u2019 I think it would be nicer/clearer if the text was something like 'Please first login into ICloud in the Settings app\u2019\n3. When going to the settings app and then returning to the app, PermissionScope will trigger the following Assert (L250):\nswift\nassert(configuredPermissions.filter { $0.type == config.type }.isEmpty, \"Permission for \\(config.type) already set\")\nThe log will show you this:\n\nassertion failed: Permission for Notifications already set: file PermissionScope.swift, line 250\n. Ah, ok, for now I will wait for #69 \n\nNo, it's not a system setting, it's from this line:\nswift\nlet alert = UIAlertController(title: \"\\(permission) is currently disabled.\",\n                    message: \"Please enable access to \\(permission) in Settings\",\n                    preferredStyle: .Alert)\nMaybe that line is a little to generic?\nAnother ah, I see, my bad.. The moment NSUbiquityIdentityDidChangeNotification is triggered I tried executing PermissionScope again without resetting it. \nI do have another issue. After restarting the app it will immediately execute the callback with finished is true but only 1 element in the results while both are required. The element is for Notifications Authorized. I expect also an entry for CloudKit Authorized. (or a finished = false)\n. Great!\nI now have it working in my demo app and pushed it to GitHub. I did create a workaround for reactivating PermissionScope in the event that the NSUbiquityIdentityDidChangeNotification was called the moment the PermissionScope screen was still open. The workaround is calling the hide and then after 1 second the show. It would be nice if there was a method in PermissionScope to reinitialize everything. Do you want me to create a new issue for this?\nSee the function reactToiCloudloginChanges in:\nhttps://github.com/evermeer/EVCloudKitDao/blob/Swift2/AppMessage/AppMessage/Controlers/RootViewController.swift\n. Besides the #69 and #73 issues everything worked as expected.\n. @nickoneill I have seen that screen 'glitch' before, but it's not consistent. It's always the last texts that is placed at the top of the screen. Maybe create a new issue for that? Or do you think it's Async/CloudKit related?\nHow I think you should handle async permissions:\n- When the .show is called loop through the permissions to fetch the status. (no matter if it's async or not)\n- Add a PermissionStatus called Pending which will be the default state.\n- When you have the status, then always call the authChange handler where the status of not completed permission checks will be Pending.\n- depending on that status decide if the permissions screen should show. (Pending will be a no show)\n- since the authChange is always called the developer using PermissionScope can decide what to do when the status is still Pending. \np.s. The current swift2 branch has a compile error. CloudKit was removed from a switch, but it's still in the Enum which makes the switch incomplete.\n. I already had given up hope that this would ever be implemented.\nCurrently I use a custom solution for requesting permissions.\nIt would still be nice if PermissionScope would implement this.\nWithout it it's not a complete solution for all possible permission questions.\n. Yes, that will work fine. I did the same with my repositories.\nYou don't even have to make a swift12. branch unless you are planning to make updates to it.\nOtherwise people can just use the version number in order to get the swift 1.2 compatible version\n. ",
    "owaves": "I'm kind of new to open source, so not exactly sure how to document this, but there is a problem with the 'getResultsForConfig' function and cloudKit.\nYou should use dispatch_group_enter / dispatch_group_leave instead of dispatch_group_async.\nThis is because the request for the CloudKit permission status has another asynchronous call inside of it (unlike the other permissions). Therefore the dispatch_group thinks the block is completed, when it actually has not.\nFor example, I am requesting Notifications and CloudKit, but as soon as I answer Notifications, it returns.\nI think this is what it should be \n``` swift\nfunc getResultsForConfig(completionBlock: resultsForConfigClosure) {\n        var results: [PermissionResult] = []\n        let group: dispatch_group_t = dispatch_group_create()\n    for config in configuredPermissions {\n     dispatch_group_enter(group)\n\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {\n                self.statusForPermission(config.type, completion: { status in\n                    let result = PermissionResult(type: config.type,\n                        status: status)\n                    results.append(result)\n                 dispatch_group_leave(group)\n                })\n        }\n    }\n\n    // FIXME: Return after async calls were executed\n    dispatch_group_notify(group,\n        dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {\n           print(\"returned results \\(results)\")\n            completionBlock(results)\n    }\n}\n\n```\n. ",
    "TomMajor": "iPhone 6 - iOS 8.4.1\nI am testing your PermissionScope-example sample app, permission \"contacts\" for example.\nThe permission is denied in the settings.\nThen I start your app - screen 1\nI tap \"Denied Contacts\" and then \"Show me\" - screen 2\nThe app jumps to the general settings for this app - which is a blank page - screen 3\nWhat should a user with limited knowledge on iOS settings do on this blank page? That is why I think this \"Show me\" link is rather confusing.\nAs I said, the right link would be Settings/Privacy/Contacts/AppName - screen 4\nbut this is not accomplished. I think this happens if the permission was denied from outside the app.\nFrom what I researched since I discovered that yesterday, it may not possible to jump to Settings/Privacy/Contacts/AppName in iOS 8 at all.\nBut then, I think hiding a false link would be better than jumping to a confusing place in settings.\nI hope you understand what I mean and can reproduce it.\nThanks for sharing your code.\nJust to repeat for clarity, the last screen would be the right one to jump to, where the user can change the permission, but it is not reached. \n   \n. Hello bre7,\nyes, I have read your comment and this is also what I have found so far, you can't open Settings/Privacy/Contacts/AppName.\nMy point is the \"Show me\" link, do you see? It jumps just to the wrong place. What should the user accomplish on this blank page? It is just confusing.\n. I have denied them actively for testing.\nThis happed in my app and confused the user later on (he could not remember that he did it or even the OS did it, or updates, I don't really know), so I was searching for solutions and found your project. But with the wrong \"Show me\" link, this will make the confusion of the user not easier (:\n. yes, I could test the swift2 branch tomorrow. Will swift2 branch work on xcode 6.4?\nAre you saying you don't get the blank page when you hit \"Show me\" on a (denied before) contact permission dialog? Could you please  post a screenshot how that page looks on your machine?\n. @bre7 thanks for the screenshots, with that I could see how it is supposed to work.\nI have done more tests with master branch, it is getting more confusing and the bug is more serious than I thought yesterday:\nI noticed today, that I have all my app settings listed twice on my iPhone 6, like here:\nhttps://discussions.apple.com/thread/6726557?start=0&tstart=0\nThis was not the case 2 days ago, so I suspected PermissionScope-example to have something to do with it.\nI did a reboot as in the link recommended, and my app settings list appeared normal, only once :)\nThen I opened xcode 6.4., build PermissionScope-example and let it run in debug mode on the real device.\nI tapped contacts, denied it, tap Show me, the first time now there was actually the toggle on/off switch in settings page for this app, so far so good.\nBut then I double tap home button (task manager) go back to PermissionScope-example and the app hangs. I press home button, go to settings and all app settings are listed twice again! From now on, the link \"Show me\" just goes to the blank page, like before. More serious bug than that is that it somehow corrupts the app settings, because they appear twice.\nAlso, I got this in xcode:\n2015-08-22 19:03:37.553 PermissionScope-example[194:3323] Presenting view controllers on detached view controllers is discouraged\n. no, nothing special about my setup that I would know of, just a regular iPhone 6 with iOS 8.4.1, German localization, xcode 6.4, Mac OS 10.10.5, just loading PermissionScope project, select real iPhone device as target, go to Product->Scheme and change to PermissionScope-example, hit Run.\nSomehow I think the bug is related to:\nafter first run, if I follow the \"Show me\" link, land in settings and then do the double tap and go back to the example app, this is the point where something goes wrong.\n. @bre7 yes, will do that.\nI could reproduce the PermissionScope-example hanging in Simulator (sometimes), but not the \"duplication\" of the app settings list.\nI saw something strange on testing on the simulator, please see the screenshot. When I do the \"Show me\" link and change from there the permission from on to off or vice versa, sometimes xcode breaks, but not with a real crash, but with \"signal SIGKILL\". I asume this could be the point where on the real device the duplicate app settings weirdness is happening, but this is just a guess.\n\n. Hello nickoneill, bre7 and YKSing\nsorry for the delay I was on vacation.\nI can confirm now that this bug seems to be related to running with the debugger. Without the debugger, I can't produce the bug anymore. So everything seems to be fine now.\nThanks for a great framework.\nTom\n. Hello bre7,\nwow, that was fast, thank you very much.\nI am new to CocoaPods, I did a \"pod update\", also a \"pod update \nPermissionScope\" in my project directory, but your/Leshich change from \ntoday does not show in my project.\nDo I miss something here? Sorry if this is a silly question. Asking \nGoogle told me that pod update should be the right thing to do.\nThanks,\nTom\nbre7 schrieb am 10.10.2015 um 23:51:\n\nThose strings were already localized by Leshich in PR #103\nhttps://github.com/nickoneill/PermissionScope/pull/103 which I've just\nmerged. README needs an update about all the keys.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nickoneill/PermissionScope/issues/104#issuecomment-147128606.\n. Thanks\n\nbre7 schrieb am 11.10.2015 um 00:57:\n\nNope: You just need to wait for @nickoneill\nhttps://github.com/nickoneill to push the new version to CP. You could\nalso add this to your podfile: pod 'PermissionScope', :head\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/nickoneill/PermissionScope/issues/104#issuecomment-147133349.\n. Did a manual update. Localization is working great now, thank you.\n. Hello nickoneill and bre7,\n\nI see my issue from last year made it to your readme :)  https://github.com/nickoneill/PermissionScope/issues/61\nI am in need of a short term solution for submitting an app, I don't want to fill out all privacy entries as I feel this is the wrong way and might be suspicious. I just need camera and photo library.\nWhat would be a recommend way to remove all unused permissions from your point of view?\nDelete the imports statements in the two files\nPermissions.swift\nPermissionScope.swift\nand then go thru each // MARK: section and remove it if not needed?\nWill this work or is there more to keep an eye on?\nThanks,\n. Thanks @basememara for the hints.\nOnce I commented out the imports and the //MARK sections I didn't need, it's pretty straightforward.\nThis way, only a few places are left where xcode complains.\nOnly two of them are really notable, one being the line\nswift\nwhile self.waitingForBluetooth || self.waitingForMotion { }\nwhere I was not really sure if just commenting it out would be ok, but I think so, and the other in \nswift\nfunc statusForPermission(_ type: PermissionType, completion: statusRequestClosure) {\nwhere I needed to add a default case\nswift\ndefault:\n  permissionStatus = .unknown\n. ",
    "YKSing": "@TomMajor\nRun the APP without Xcode debugger, it works perfect\n. ",
    "ohitsdaniel": "You're right, sorry. Was still using beta 5, upgrading to beta 6 now.\n. Check commit 14576ed for your approach, bre7. In that commit, I did exactly what you suggested. \n. Also thought about that, nickoneill. \nBut then the setAuthorizedButtonAppearance will be less clear, I think. Will implement it and add it to this branch.\nUPDATE:\nDone, check it.\n. Thanks bre7. Changed that line\n. As you were writing the comment, I was doing exactly that. :D\n. ",
    "shonorio": "Why addPermission has to fail I input same Permission more than one time? Why not just ignore the append action, or update the messasge? I'm coding a ViewControl where I check for PhotoPermission on every image tap. User can change a image never, ou do this 50 time just for fun. I created a check for statusPhoto before addPermission, but I think it's not necessary.\n. @nickoneill you have your reasons, It's was just one suggestion. You could use throws on 'addPermission' if you want be so strict, I can code this if ok for you.\n. ",
    "appinator": "@bre7 The strict mode you mentioned should work fine. I mean it is still able to deep link to the Settings.app with an alert if the user didn't give access to all HKSampleTypes.\nMaybe its possible to use the HK.framework status (optional or required) from the plist? \nIn case its required and a user denies access to all Samples she/he would get a alert telling him to allow it and deep link to Settings.app.\nIn case of optional it just shows \"HK denied\" like it does on other buttons.\nNot sure if this makes any sense or if its even possible.\n. ",
    "dukemike": "Can you provide an update on HealthKit integration or provide a reference to a branch where there is a partial implementation?\n. @basememara, unfortunately, HealthKit simply doesn't allow you to mimic PermissionScope-like features. I tried doing the same thing as I expect you have, but came to the same conclusion as @nickoneill that it needed ripped out. As he described, some major problems you'll run into are that:\n- HealthKit does not allow you to query whether or not read permissions have been granted, only whether or not write permissions have been granted.\n- Not all permissions that can be read can be written (so you can't really hack your way around it by requesting more permissions than you need).\n- iOS does not have a custom scheme to allow you to open the Health app, so there's no way to go to the Health settings for an app.\n. ",
    "basememara": "Hey thanks for the awesome library and to everyone here helping with the HealthKit stuff!\nI was sad to see HealthKit ripped out, although I understand about the App Store issues with non-HealthKit apps. Could it have been mitigated if we used compiler flags so the HealthKit API's don't get compiled into the app unless explicitly set?\nAlso, I couldn't find the ongoing work on the HealthKit support, many of the branches were deleted. Can we get a healthkit branch created to collaborate and create PR's against?\nI tried reconstructing the HealthKit support from fragmented code via old releases and snippets. It works successfully to request the right authorization, but it never recognizes if the authorization has been set thereafter; it always says Unknown authorization status. Plus the \"Show me\" button takes you to the wrong settings area of the phone that does not have the HealthKit settings.\nHere's what I got so far, let me know if I should create a PR for it:\nhttps://github.com/basememara/PermissionScope/tree/feature/healthkit-support\nAny ideas or plans on how we can revive HealthKit support?\n. I really appreciate the wisdom and sharing the battle scars. HealthKit is definitely a wildcard because of the security implications, and probably the new-ness of it. It's too bad since I realize the implementation is outside the scope of Periscope, it does fit within the idea of abstracting requesting authorization. \nPerhaps we should think of, instead of making HealthKit fit within the way how other permission requests work in Periscope, we should at least put in some helper utilities that can used at will as part of the unified API, such as snippets like this:\n```\n    /*\n    Requests access to HealthKit, if necessary.\n    /\n    func requestHealthKit() {\n        guard let healthPermission = self.configuredPermissions\n            .first({ $0.type == .HealthKit }) as? HealthPermission else { return }\n    switch statusHealthKit(healthPermission.healthTypesToShare, typesToRead: healthPermission.healthTypesToRead, strict: healthPermission.strictMode) {\n        case .Unknown:\n            HKHealthStore().requestAuthorizationToShareTypes(healthPermission.healthTypesToShare,\n                readTypes: healthPermission.healthTypesToRead,\n                completion: { granted, error in\n                    if let error = error { print(\"error: \", error) }\n                        self.detectAndCallback()\n                    })\n        case .Unauthorized:\n            self.showDeniedAlert(.HealthKit)\n        case .Disabled:\n            self.showDisabledAlert(.HealthKit)\n        case .Authorized:\n            break\n    }\n}\n\n```\nAlthough I can't addPermissions for HealthKit like other permissions, using a HealthKit abstraction utility would be really awesome. Just an idea to keep the hope alive in someway including HealthKit to alleviate the pains of permission requesting.\n. The PermissionScope instance is already configured for the user based on their settings (with or without GPS), but if the user changes their settings, then the PermissionScope instance is stuck on the old permissions.\nI am calling show in viewWillAppear to ensure the user always provides the right access for the user. That's when I'd like to re-configure PermissionScope based on the user's latest settings or leave it alone if the settings hasn't changed. I'm willing to kill the PermissionScope in viewWillAppear and recreate it with the latest permissions, but I'm having trouble figuring out when I should kill it instead of brute-force wiping the instance every time.\n. Cool thanks for the confirmation. I found one better than brute-force, in my settings screen I'm running this when the GPS setting is changed/saved by the user:\nswift\nif let controller = self.tabBarController?.viewControllers?[0] as? TimesController {\n  controller.permissionScope = nil\n}\nThen in the viewWillAppear in my TimesController, I'm recreating the PermissionScope instance if it is nil and dynamically adding the permissions back based on the latest user settings from NSUserDefaults. Works great!\nThanks again for the help and amazing library!!\n. Adding the privacy entries in the plist is definitely not a long-term solution. You would be misrepresenting your app in some way and you'll have more explaining to do with Apple. Also down the road who knows what those will be used for (maybe a popup like Android).\nI totally support using compiler flags, the code isn't in the compilation this way.\nSegmenting the code seems overkill for a relatively small lib. However, like @h3smith mentioned, there can be a core dependency and each permission would be a new, stand-alone library. I can see grabbing only notifications and bluetooth libs for example and leaving the rest; PermissionScope can be more of a suite of libs.\n. If I may chime in, yes this is what I did. I deleted all the import statements and removed what couldn't compile anymore.\nI only needed notifications so I adjusted the code accordingly and submitted it fine without all the privacy entries: https://github.com/basememara/PermissionScope/tree/feature/notifications_only\n. ",
    "cloudjanak": "Still issue\n. ",
    "harryworld": "+1 My app is landscape only\n. ",
    "gloparco": "In general this would be a good thing anyway - if your app doesn't use HealthKit, why should you be forced to include it?  Makes sense, no?\n. ",
    "emaddoma": "It's possible what I'm suggesting doesn't fit into the scope of your project.  I'm pretty sure that iBeacons are a part of Location Services, but don't actually work unless Bluetooth is turned on.  The actual permission for Bluetooth isn't even necessary for the user to grant to the app.\n. ",
    "rlaferla": "+1\n. Understood.  However, adding a button that takes the user to the app-specific settings page is not a bad option.  Yes, it doesn't take them to the system setting but it does open up the Settings app, shows them that location is disabled and they are a couple of taps away to fixing it (if they so desire.)  The current behavior means that the user has to press the home button, find the settings app, launch it and find the privacy settings.\n. Nice!\n. Yes.  It is being called from the main thread.  I am using ObjC and am checking if the user gave permission for contacts, and if contacts are not authorized, show is called.  I verified that isMainThread = 1 before show is called and 0 when in the block.\n. I just explained that.  It says that it's in the main thread BEFORE the call to \"show\" but not in the main thread in the block.\n. I think it's a bug in detectAndCallback() where the onAuthChange() is not being called on the main thread.\n``` swift\n    /*\n    Rechecks the status of each requested permission, updates\n    the PermisisonScope UI in response and calls your onAuthChange\n    to notifiy the parent app.\n    /\n    func detectAndCallback() {\n        // compile the results and pass them back if necessary\n        if let onAuthChange = self.onAuthChange {\n            self.getResultsForConfig({ results in\n                self.allAuthorized({ areAuthorized in\n                    onAuthChange(finished: areAuthorized, results: results)\n                })\n            })\n        }\n    dispatch_async(dispatch_get_main_queue()) {\n        self.view.setNeedsLayout()\n\n        // and hide if we've sucessfully got all permissions\n        self.allAuthorized({ areAuthorized in\n            if areAuthorized {\n                self.hide()\n            }\n        })\n    }\n}\n\n```\n. I tried submitting a fix but the CI server is complaining that there were no tests.  Please advise.  Also, do you agree with the fix and if so, can you submit it?\n. I don't think it's ObjC only.  I am using iOS 9.1 and that is using the Contacts API vs. the ABAddressBook api.  That could explain it but I haven't really looked.  In any case, I think it's good to ensure that callbacks are on the main thread.  In response to your other question, I was modifying the UI in the show block which is the onAuthChange() block.\n. I create one PermissionScope instance in the app delegate that is shared by the rest of the app.  During creation, permissions are added and it's at that time when the assert kicks in.\n. I like configuring the permissions once and calling up the dialog.  Perhaps, I can take a slightly different approach and create instances of each Permission in the app delegate and then add them to scope instances.  \nI think there may be a design improvement here. How about if PermissionScope had a dictionary of permissions and you could toggle which ones are displayed?  The key for the dictionary being \"contacts\", \"location\", etc...\n. Please elaborate.\n. Also, I think \"message\" should be an attribute of \"Permission\" rather than an additional argument when you add it to the scope.    In fact, the scope could be a dictionary and you could configure the message for each type (\"contacts\", \"location\", etc...) and whether or not it was enabled.  However, I need to better understand what other required arguments there are. \n. For one, localization and message consistency.  It is beneficial to configure the messages in one place (perhaps with some flexibility of having alternate messages - but that's an exception case).  Another is memory usage.\n. The class is importing Foundation but uses UIColor which is in UIKit and NOT in Foundation.\n. I don't remember exactly but yes I think it was a build issue.\n. I'm not sure why Swift isn't complaining but CGFloat requires UIKit and does not exist in Foundation.\n. Is there an alternative project to replace PermissionScope?. ",
    "rynecheow": "As AddressBook methods are deprecated on iOS 9 and Contacts framework is providing a more thread-safe way of accessing contacts - i think we should allow the framework to use the more preferred method for iOS 9 users.\nRef: https://developer.apple.com/library/prerelease/mac/documentation/Contacts/Reference/Contacts_Framework/index.html\n. Updated.\n. ",
    "onlyver": "OC is used through out all my project, and I haven't start use swift, I just follow your \"README\" , I can't found the reason ,can you give me some advice? thanks for your time to answer my question .\n. platform :ios,'7.0'\npod 'AFNetworking', '~> 2.6.0'\npod 'MJRefresh', '~> 1.4.1'\npod 'MagicalRecord', '~> 2.3.0'\npod 'GPUImage', '~> 0.1.7'\npod 'iRate', '~> 1.11.4'\npod 'PermissionScope', '~> 1.0'\npod 'SVProgressHUD', '~> 1.1.3'\nthis list  install fail ,and left the error \"[!] Unable to satisfy the following requirements:\n- PermissionScope (~> 1.0) required by Podfile\"\n. ",
    "cgst": "This seems to block PermissionScope.show() at\nwhile self.waitingForBluetooth ...\n. I've updated this to ask for bluetooth permissions without calling start/stop advertising, and without blocking the main thread.\nThe iOS Bluetooth permission dialog seems to trigger only once per bundle ID; restarting/reinstalling the app doesn't trigger it again.\n. ",
    "chrisamanse": "No, there's no error, however this is the way I see it: If the code uses functions as the value to be evaluated in switch statements, it will call that function every time it evaluates a case, thus, takes longer - not noticeably though (I just observed this by using breakpoints).\nFor example:\n``` swift\n    public func statusMicrophone() -> PermissionStatus {    \n      switch AVAudioSession.sharedInstance().recordPermission() {\n        case AVAudioSessionRecordPermission.Denied:\n          return .Unauthorized\n        case AVAudioSessionRecordPermission.Granted:\n          return .Authorized\n        default:\n          return .Unknown\n      }\n    }\npublic func requestMicrophone() {\n  switch statusMicrophone() {\n    case .Unknown:\n      AVAudioSession.sharedInstance().requestRecordPermission({ granted in\n        self.detectAndCallback()\n      })\n    case .Unauthorized:\n      showDeniedAlert(.Microphone)\n    case .Disabled:\n      showDisabledAlert(.Microphone)\n    case .Authorized:\n      break\n  }\n}\n\n```\nLet's say statusMicrophone() returns .Authorized. First, the switch statement will evaluate  the first case - if it's .Unknown, thus calling statusMicrophone() for the first time, then it will evaluate if it's .Unauthorized, calling statusMicrophone(), the second time, and so on. In this example, statusMicrophone() will run times.\nOn the other hand, if the return value of statusMicrophone() is stored in a local variable, the code would need to call statusMicrophone() only once.\nI just got used to this pattern since C++, and try to put return values of a function if it's going to get called more than once.\n. ",
    "blender": "@nickoneill any estimate on this? \nalso I'm getting this when building with carthage\n*** WARNING: Skipping build for \"iphoneos\" SDK because the necessary signing identity \"iPhone Distribution\" is not installed\nThanks for the great work!\n. yes, I don't have a distribution certificate. I agree with @kylejm , if possible please changed it to iOS Developer. \nThis is the only framework among the many I use (Alamofire, KeyChainAccess, ResearchKit, Swiftz) that requires a distribution certificate.\nI have opened an issue for this https://github.com/nickoneill/PermissionScope/issues/140\n. ",
    "BryanRyczek": "hey guys I am new to Carthage and PermissionScope is my first Carthage install.\nI am running Swift 2.1.1 and Xcode 7.2\nIn the top of my .swift file, I write 'import PermissionScope'  which autocompletes so I know the compiler is expecting its possible use. \nHowever, I get kicked this fatal error:\nAnimationTestingViewController.swift:11:8: Module file was created by an older version of the compiler; rebuild 'PermissionScope' and try again: Carthage/Build/iOS/PermissionScope.framework/Modules/PermissionScope.swiftmodule/arm64.swiftmodule\nReading this thread, am I right to guess that I just have to wait for a new, supported version of PermissionScope to be released?\nThanks for any help\n. ",
    "AdventuresOfMar": "Hi @nickoneill :) I am, first time building the app on my iphone 6 and the dialogs never appear. My xcode is xcode 7 with swift 2.1\n. Here's my code: https://gist.github.com/bre7/d447e5e62a07e3c631d8\nI think that I've been asking the wrong question. I completely looked over the show.pscope function and now getting the dialog to appear but, whenever I click the button to allow access to permissions or click on the show me button. I'm taken to the ios settings but the only thing that appears under allow access is cellular data\n   \n. Hmm, I'm not exactly sure that this is my issue. I've tried resetting my phone, deleting the app rebuilding, and running without the build strictly running on the device and still no luck. No matter what item I call to request permissions for i.e. contacts, location, photos, camera, microphone non of these items appear under Settings/AppName. The app name is correct but I'm not sure what I'm doing wrong.  I deleted the cocopod and reinstalled and still no luck either. When i download the zip from your repo everything works perfectly. A few errors that are being printed are as follows \n\n2015-11-03 16:17:31.463 Notice[2602:810922] _BSMachError: (os/kern) invalid capability (20)\n2015-11-03 16:17:31.464 Notice[2602:810922] _BSMachError: (os/kern) invalid name (15)\ngot results [Camera Unauthorized, Microphone Unknown, Photos Unknown]\n. Not sure what was happening but simply deleted and reinstalled pod, works perfectly thank you\n. \n",
    "ed-mejia": "Hi!...\nYes tested on real device, iPhone 6 iOS 9.1, same result.\n. Hi @nickoneill , I don't want to display the default UI, I want to use my own, so that's the reason to use requestNotifications() directly, in fact thats a feature according to the docs :tada: \n@bre7 That's weird despite the fact that initially returned Unauthorized it seems that was Authorized because notifications access was granted..\n\n. @bre7  I don't understand, onAuthChange is being called, and even I tap OK to allow permission the closure is called indicating that I did't granted.\n. swift\nsinglePscope.onAuthChange = { (finished, results) in\n    print(\"got results \\(results)\")\n    print(\"statusNotifications \\(self.singlePscope.statusNotifications())\")\n}\nConsole:\n\ngot results [Notifications Unauthorized]\nstatusNotifications Authorized\n\nShould I use this hack?\n. @bre7 Hey I tested the new branch and seems to be working correctly now for direct requests.\nIm using cocoapods, this fix is going to be merge into master? Im kind of lost how to update my project to include any update since the last release 1.0.1 is 26 commits ahead to master\n. Great, Thanks!!!! :+1: \n. Hi @nickoneill, I was able to recreate the issue again,\nUpdate pod from master, my pod config is just like:\nruby\npod 'PermissionScope', :git => 'https://github.com/nickoneill/PermissionScope.git'\nOn Simulator: Reset content and settings\nMy Controller code:\n``` swift\nclass PermissionsViewController: UIViewController {\n//MARK: Properties\nlet pscope = PermissionScope()\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    setupPermissions()\n\n}\n\n/// Private func to setup permission for this screen\nprivate func setupPermissions() {\n    pscope.viewControllerForAlerts = self\n    pscope.addPermission(NotificationsPermission(notificationCategories: nil),\n        message: \"We use this to send you\\r\\nspam and love notes\")\n\n    pscope.onAuthChange = { (finished, results) in\n        print(\"got results \\(results)\")\n    }\n}\n\noverride func didReceiveMemoryWarning() {\n    super.didReceiveMemoryWarning()\n    // Dispose of any resources that can be recreated.\n}\n\n@IBAction func enablePushNotifications(sender: RoundedButton) {\n    pscope.requestNotifications()\n}\n\n}\n```\nthe console output after granting the permission:\ngot results [Notifications Unauthorized]\n. @nickoneill  I don't think the fixed code is in the repository or I'm doing something wrong :confused:\nI just create a fresh new project to be sure:\nXcode 7.2, Apple Swift version 2.1.1\nMy pod file:\n``` ruby\nUncomment this line to define a global platform for your project\nplatform :ios, '8.0'\nUncomment this line if you're using Swift\nuse_frameworks!\ntarget 'PerTest' do\npod 'PermissionScope', :head\nend\n```\nrun pod install, console output:\npod install\nUpdating local specs repositories\nAnalyzing dependencies\nDownloading dependencies\nInstalling PermissionScope (HEAD based on 1.0.1)\nGenerating Pods project\nIntegrating client project\nOpened the project run and test again same console output after permission being granted:\ngot results [Notifications Unauthorized]\nI attached the project here:\nPermTest.zip\n. @bre7 Yes the results are:\ngot results [Notifications Unauthorized]\nstatusNotifications Authorized\n. @nickoneill  I just ran the project on an iPhone 6 iOS 9.2 for the first time and the results were not successful just after calling requestNotifications for the first time:\ngot results [Notifications Unauthorized]\nstatusNotifications Authorized\nSo it's not a simulator issue, if you call requestNotifications again the results are ok, but its wrong from the beginning.\n. I just tried to run the same project again with different bundle ids on the same device and the results were ok despite the fact the first time were wrong....\nI took another iPhone 6 and I ran the project again for the very first time on that device and the results were:\ngot results [Notifications Unauthorized]\nstatusNotifications Authorized\nSo at the very very first time the app runs on the device it returns a wrong value, considering that the request of permission is a one shoot in the very first life time of the app this issue really matters because there is only one chance to display the actual status of that request.\n. @nickoneill I used the test project that I attached here PermTest.zip .. updated Pod to head, run and still :sob: \ngot results [Notifications Unauthorized]\nI did simulator reset, change bundle identifier, no luck\nPD: Sorry I closed the issue by mistake.\n. Hey @nickoneill I can confirm that the onAuthChange callback is now returning the right value after authorising:\ngot results [Notifications Authorized]\n:tada: :smiley:\n. Any chance to have an official swift3 branch any time soon? \ud83e\udd14\n. I have a Swift-3 branch ready here if you want to have a look\n\nthis branch is a fork from jstheoriginal but with support for Beta 4\n. Good to know, I already update those too. \ud83d\udc4d \n. @deada92 in your pod file:\n\npod 'PermissionScope', :git => 'THE GIT URL', :branch => 'THE BRANCH NAME'\n. ",
    "winkelsdorf": "@nickoneill You're welcome! Sorry that I didn't had the time to fix/create a PR before leaving the office today. Yes, the new Contacts framework is likely the reason for the crash.\nDid you also notice the detached view controller warning at the very beginning of the console output? I know why but wondering if there is a better way to present the Dialog View.. Having a look at it later this week..\nCheers\n. Excellent idea, I would say just issue a warning and point to the best practice / correct way. \nThanks for the great implementation, I first read about this approach at NatashaTheRobot's Blog some month ago (iirc) and had this implementation on my list too :)\n. @nickoneill Sorry for the late reply. I'll implement this into a test project asap and have a look into it too. But from my point of view #148 is the safest thing to do.\n. Looks good to me :+1: \n. Maybe related to the project's \"Localization native development region\" in info.plist: http://stackoverflow.com/a/33465083/844907.\nAnyhow, I cannot comment on the above (\"en\" is the default and should work).\nFor me it looks like an iOS bug, it is trigger by UIApplication.sharedApplication().openURL(settingsUrl!) when invoked by a handler.\nNow the fun part, \"fixing\" it:\nCurrent Call:\nlet settingsUrl = NSURL(string: UIApplicationOpenSettingsURLString)\n    UIApplication.sharedApplication().openURL(settingsUrl!) // error raised with this call\nSolution: Explicitly invoke openURL on the main queue.\ndispatch_async(dispatch_get_main_queue()) {\n        UIApplication.sharedApplication().openURL(settingsUrl!)\n    }\nNot what I want to see when invoking openURL, but this actually fixes the warning \"for us\". It's likely still logged in the iOS Console Logs, but Apple's fault, Apple's log.\nEdit: Simplified fix.\n. +1 for the approach\n-1 for the character count and addressing users informally (\"Bitte aktiviere den Zugriff\" is informal, formally is \"Bitte aktivieren Sie den Zugriff\")\nProbably there's need to address the latter with two sets, like GermanInformal.strings and German.strings ;) ^^ While I don't think NSFormatter et al have a setting for being \"informal\".\n. Sorry for being late. \nI am totally fine with the current informal translation, so give it a go. Despite I don't have any numbers, I would say that more than 95% of the local Apps use informal language (2nd person singular).\n\ud83d\udc4d for the merge.\n. You're welcome! Ah yes, forgot about that.. Reference to this is kept in #148, closing this for now.\n. ",
    "denismars": "I can repo the same crash issue with both toggling the Contacts and the Bluetooth switches in the Settings. Changing the Notifications and Locations settings did not crash it - only the toggle switches seem to crash or terminate the app.\nBut before it crashes I see this error when the transition to the Settings app starts:\n_BSMachError: (os/kern) invalid capability (20)\n_BSMachError: (os/kern) invalid name (15)\nNot sure if this is useful to help debug this.\n. ",
    "ReadmeCritic": ":smile: \n. ",
    "nmccann": "Interesting - the \"calling request* methods directly\" section of the documentation indicates that onAuthChange should be set.\n. lol well thank you for the quick response :)\n. ",
    "jstheoriginal": "I used Carthage...so it is a .framework file. I wanted it to be simple to upgrade which is why i chose that route.  I guess I should just fork it and implement it that way instead?\n. this is what it shows in my Carthage folder:\nhttps://www.dropbox.com/s/uka1vaghhlfi7vw/Screenshot%202015-12-10%2012.35.25.png?dl=0\n. And thanks @nickoneill I just did the non-framework way and got it to build fine so i'll submit that version in my next test flight build.\n. (I ran a checkout for Carthage instead of build)\n. Maybe the issue was that I added it via Carthage when I was using a beta build of Xcode?\n. Some strange stuff happening still. I uploaded a new build to TestFlight and the new one still says DENIED NOTIFICATIONS with no Notification options in Settings, BUT the same build on the simulator is fine.  See two pics of same instance.  What could be the issue?\n \n. So pretty sure I'm a complete n00b and didn't know I needed to use a production push notification certificate for TestFlight builds :-1: so i believe that's what the issue is! We'll see.\n. I'm still having issues with this...\nthe first time i load the app it looks like the first screen of the two i posted above. If i click Allow Notifications, it doesn't present the actual iOS pop-up but the pscope pop-up goes away. If i then go to settings, it shows notifications are enabled. But then if i close the app and go in again, it pops up again with the second screen above and there are no notification settings in the Settings screen anymore. Any idea what might cause this to happen?\n. I think these issues may be linked to the fact that I'm also using iCloud sync...so It's syncing my notification settings for the app and then screwing it up/making conflicts?\n. yup...confirmed that that was the issue. it was syncing ALL iCloud NSUserDefaults instead of just select keys for my app. Bad bad bad. I've got it fixed now, so I think this can be closed.\n. I called my \"askForPermissionScope\" function from the completion block of a delegate, but on an asynchronous thread.  That might be it? I've moved it back on to the main thread to see if that fixes issues.\n. Originally I had:\n``` swift\nfunc accountDetailViewController(controller: AccountDetailViewController, didFinishAddingAccount account: Account) {\n    dataModel.addAccount(account)\n\n    dismissViewControllerAnimated(true, completion: {\n        dispatch_async(dispatch_get_main_queue()) {\n             self.askForNotificationPermission()\n        }\n    })\n}\n\n```\nHere's how I have it now to see if it fixes it (so far so good).\n``` swift\nfunc accountDetailViewController(controller: AccountDetailViewController, didFinishAddingAccount account: Account) {\n    dataModel.addAccount(account)\n\n    dismissViewControllerAnimated(true, completion: {\n        self.askForNotificationPermission()\n    })\n}\n\n```\nand this is the askForNotificationPermission function:\n``` swift\nfunc askForNotificationPermission() {\n        // Set up permissions for notifications\n        pscope.addPermission(NotificationsPermission(notificationCategories: nil),\n            message: \"Have every product link ready\\r\\nfor each new release!\")\n        pscope.closeButtonTextColor = UIColor.redColor()\n        pscope.headerLabel.text = \"Hey, Coach \ud83d\udcaa!\"\n        pscope.bodyLabel.text = \"Want to know when new\\r\\nproducts are added?\"\n    // Show dialog with callbacks\n    pscope.show( {\n        finished, results -> Void in // authorized\n        UIApplication.sharedApplication().registerForRemoteNotifications()\n        print(\"got results \\(results)\")\n        },\n        cancelled: { (results) -> Void in\n            print(\"notifications dialog was cancelled\")\n    })\n}\n\n```\n. Ah that makes sense! Will do.\n. I've had this crash happen again after making the change @nickoneill suggested.\nswift\nassertion failed: Permission for Notifications already set: file /Users/Justin/Dropbox/Programming/iOS/MyApps/BBLinks/BBLinks/Helpers/PermissionScope/PermissionScope.swift, line 301\nthis happened after \nswift\ngot results [Notifications Authorized]\ngot results [Notifications Authorized]\ndisplayed.\n. it\u2019s really strange\u2026i only add the notification in viewdidload.  but i\u2019ve tried to reproduce the crash and it doesn\u2019t happen again. it must be some sort of edge case\u2026\n\nOn Dec 15, 2015, at 8:38 PM, bre7 notifications@github.com wrote:\nSeems to be the same issue. You can't add the same permission twice.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/nickoneill/PermissionScope/issues/139#issuecomment-164967963.\n. Sounds good. \ud83d\udc4d \n. @bre7 Did you mean to just comment the first() extension out, or remove it completely?\n. Done like dinner.\n. @blwinters i saw that as well...it's a new issue that just arose in beta 4. I couldn't figure out how to correct it though, so hopefully it's just a property that's been hidden by mistake and will be fixed in beta 5.\n. good to know!\n. \n",
    "sammy-SC": "@nickoneill no problem, glad I could help. \n. ",
    "afiq90": "I figured it out by watching this video https://www.youtube.com/watch?v=OvDk5zXCFe8. thank you for great library. \n. ",
    "testudorithm": "no i add to project like this,\n\n. i get the framework in example project, and i add to embedded binaries also add Build Phases>Copy Files\n. \n\nWhen i try adding as a dependency, i does not see the framework in selection\n. Okay thanks :-)\n. ",
    "JanC": "That worked \ud83d\udc4cawesome!\ncarthage update --platform iOS --no-use-binaries\nthanks for the great library btw (Pantry as well \ud83d\ude09)\n. ",
    "mingmingsuper": "I'm use pod install\n. I want to use local language Chinese,I hope you help me,Thanks!\n. Thanks!\u53d1\u81ea\u7f51\u6613\u90ae\u7bb1\u5927\u5e08\n        \u57282016\u5e7401\u670814\u65e5 19:28\uff0cVladimir Babin \u5199\u9053:Because it's not a common phrase and you may change it as you want.\nlet pscope = PermissionScope()\npscope.headerLabel.text = \"\u563f\uff0c\u542c\u7740\uff01\"\n\u2014Reply to this email directly or view it on GitHub.\n. ",
    "chiliec": "Because it's not a common phrase and you may change it as you want.\nswift\nlet pscope = PermissionScope()\npscope.headerLabel.text = \"\u563f\uff0c\u542c\u7740\uff01\"\n. ",
    "SaifAlDilaimi": "ty for such a good api!\n. Any Plan to create a branch for this?\n. Can someone explain to me how I can use this PR?\n. Hey @ed-mejia,\nthx for the hint. I use xcode beta 6 and cocoapods 1.1.0.beta.1 and install it with:\npod 'PermissionScope', :git => 'https://github.com/jstheoriginal/PermissionScope.git', :branch => 'swift-3'\nI still have 51 errors of these:\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:19:42: error: function types cannot have argument label 'status'; use '_' instead\npublic typealias statusRequestClosure = (status: PermissionStatus) -> Void\n                                         ^\n                                         _ \n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:20:42: error: function types cannot have argument label 'finished'; use '_' instead\npublic typealias authClosureType      = (finished: Bool, results: [PermissionResult]) -> Void\n                                         ^\n                                         _ \n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:20:58: error: function types cannot have argument label 'results'; use '_' instead\npublic typealias authClosureType      = (finished: Bool, results: [PermissionResult]) -> Void\n                                                         ^\n                                                         _ \n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:21:42: error: function types cannot have argument label 'results'; use '_' instead\npublic typealias cancelClosureType    = (results: [PermissionResult]) -> Void\n                                         ^\n                                         _ \n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:548:47: error: expected ',' joining parts of a multi-clause condition\n        if let settingTypes = settings?.types where settingTypes != UIUserNotificationType() {\n                                              ^~~~~\n                                              ,\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:956:38: error: expected ',' joining parts of a multi-clause condition\n                if let error = error where error.code == Int(CMErrorMotionActivityNotAuthorized.rawValue) {\n                                     ^~~~~\n                                     ,\nAny idea why?\n. Ah, I was thinking the branch fixed the syntax.\nAnyway I have fixed some other syntax related to the UIColor calls. \nI'm getting now this.. can you help me again?\n```\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:241:21: error: value of type 'CGRect' has no member 'offsetInPlace'\n        headerLabel.frame.offsetInPlace(dx: -contentView.frame.origin.x, dy: -contentView.frame.origin.y)\n        ~~~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:242:21: error: value of type 'CGRect' has no member 'offsetInPlace'\n        headerLabel.frame.offsetInPlace(dx: 0, dy: -((dialogHeight/2)-50))\n        ~~~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:246:19: error: value of type 'CGRect' has no member 'offsetInPlace'\n        bodyLabel.frame.offsetInPlace(dx: -contentView.frame.origin.x, dy: -contentView.frame.origin.y)\n        ~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:247:19: error: value of type 'CGRect' has no member 'offsetInPlace'\n        bodyLabel.frame.offsetInPlace(dx: 0, dy: -((dialogHeight/2)-100))\n        ~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:250:21: error: value of type 'CGRect' has no member 'offsetInPlace'\n        closeButton.frame.offsetInPlace(dx: -contentView.frame.origin.x, dy: -contentView.frame.origin.y)\n        ~~~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:251:21: error: value of type 'CGRect' has no member 'offsetInPlace'\n        closeButton.frame.offsetInPlace(dx: 105, dy: -((dialogHeight/2)-20))\n        ~~~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:252:21: error: value of type 'CGRect' has no member 'offsetInPlace'\n        closeButton.frame.offsetInPlace(dx: self.closeOffset.width, dy: self.closeOffset.height)\n        ~~~~~~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:262:20: error: value of type 'CGRect' has no member 'offsetInPlace'\n            button.frame.offsetInPlace(dx: -contentView.frame.origin.x, dy: -contentView.frame.origin.y)\n            ~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:263:20: error: value of type 'CGRect' has no member 'offsetInPlace'\n            button.frame.offsetInPlace(dx: 0, dy: -((dialogHeight/2)-160) + CGFloat(index * baseOffset))\n            ~~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:283:27: error: value of type 'CGRect' has no member 'offsetInPlace'\n                    label.frame.offsetInPlace(dx: -self.contentView.frame.origin.x, dy: -self.contentView.frame.origin.y)\n                    ~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:284:27: error: value of type 'CGRect' has no member 'offsetInPlace'\n                    label.frame.offsetInPlace(dx: 0, dy: -((dialogHeight/2)-205) + CGFloat(index * baseOffset))\n                    ~~~~~~^~~~~ ~~~~~~~~~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:610:23: error: value of type 'DispatchQueue' has no member 'after'\n        DispatchQueue.main.after(\n        ~~~~~~~~~~~~~~^~~~ ~~~~~\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:955:18: error: contextual member 'main' has no associated value\n            to: .main()) { activities, error in\n                 ^\n/Volumes/SDIntern/Entwicklung/Apps/PrayForTheWorld/Pods/PermissionScope/PermissionScope/PermissionScope.swift:79:39: error: unable to infer closure type in the current context\n    lazy var defaults: UserDefaults = {\n```\n. okay thx\n. thank you \ud83d\udc4d \n. any progress?\n. ",
    "jimmyzzzzzzz": "Hi, thanks for the link explaining how localizable strings work.  However, my project has a different structure, I tried to follow the tutorial but it doesn't apply to my project.\nI have 2 projects in my workspace, one is Pods and the other is my own project. Should I put Localizable string it in Pods/PermissionScope or my own project?\n. ",
    "retendo": "I also added jetbrains product files to the .gitignore.\nSorry for not keeping this separate.\n. There are a few reasons for static status checking methods:\n- Creating an instance of PermissionScope does a lot of view stuff, which shouldn't be done on not-the-main-thread, otherwise you get undefined behavior which can result in crashes. (It did for me)\n- Most of the status checking doesn't need an instance, so why use one?\n- Status checking definitely doesn't need any view stuff to be performed.\n. ",
    "chrismanderson": "Keeping up with Xcode releases is frustrating? That's totally the first time anyone has ever said that. :grinning: \nThanks for that information, appreciate it.\n. ",
    "yichengsun": "@nickoneill I'm having the same issue where app crashes after any of the app permissions changes (have tried camera, microphone, and location) while the app is in the background e.g. after pressing \"Show Me\" on the showDeniedAlert. Same error message as @trozware. \nI've tried @winkelsdorf 's fix of invoking openURL on the main queue, but that only removed the console error. App still crashed. This is what my \"Show Me\" code looks like w/ the fix:\n``` swift\n        alert.addAction(UIAlertAction(title: \"Show me\".localized,\n            style: .Default,\n            handler: { action in\n                NSNotificationCenter.defaultCenter().addObserver(self, selector: Selector(\"appForegroundedAfterSettings\"), name: UIApplicationDidBecomeActiveNotification, object: nil)\n            let settingsUrl = NSURL(string: UIApplicationOpenSettingsURLString)\n            dispatch_async(dispatch_get_main_queue()) {\n                UIApplication.sharedApplication().openURL(settingsUrl!)\n            }\n    }))\n\n```\nI've also tried the localization \"en\" to \"United States\" fix in info.plist with no effect.\nAnything I am doing wrong?\nUpdate: App crash seems to be only with the debugger on. Running the app w/out debugger and switching permissions while it is in background will cause the app to not crash but restart.\n. gotcha\n. ",
    "quocan2812": "thanks for reply,\nyes I wrote code for my UI show alert when user not allow or disable this, and move it to setting, I open issue because I want to make your lib more comfortable, Thanks for all ^^\n. ",
    "larsschwegmann": "@nickoneill Oh my bad, I didn't check if there was already a PR updating that file. The changes made in #162 are fine and comparable to mine. I guess I'm closing this then. Merging his changes should be ok :)\nThanks for responding so quickly! PermissionScope is pretty awesome \ud83d\udc4d \n. ",
    "tuxtux59": "My problem is that show is called from a deep screen of the app ( like third or fourth screen) so I can't call show() again from a restart of the app due to haven't the previous behavior.\nI hope  this is understandable !\n. ",
    "akofman": "I mean, the dialog is sliding from top to bottom by default when appearing. I'd like to change this behaviour, like adding some bounce effect for instance,  or just disable it.\n. It sounds awesome :+1: Thanks for your reply.\nAnd by the way I'm implementing a Cordova plugin that wrap your work. It's in progress ... just to let you know : https://github.com/akofman/cordova-plugin-permissionScope\n. Hello,\nYep, I don't access it from the override value. I actually tested this case from request* methods and in this particular case it doesn't really matter because I can update the title before displaying the alert. But indeed I didn't think about the dialog :/\nDo you have any guidance about that ? Would it be better with something like a template string ?\n. Hello @nickoneill,\nI have updated/rebased this PR in order to give access to the permission.prettyDescription from the override title and message.\nAs an example now you can init the PermissionScope instance as following: \npscope.disabledAlertTitle = \"Hey ! %@ permission is disabled.\". Bump :). ",
    "jesster2k10": "I figured it out never mind\n. This can be closed. I didn't realize the other files were changed too.\n. I'm not sure anymore. I can try look for the code I used if you wish?. ",
    "aliess": "can you please show how did you solve this ?\n. ",
    "blwinters": "I've updated my local version of PermissionScope to adopt the changes in these commits and almost everything is resolved. However, I'm getting an error with line 955 of PermissionScope.swift: if let error = error where error.code == Int(CMErrorMotionActivityNotAuthorized.rawValue) {. The error message says, \"Value of type 'Error' has no member 'code'.\" Does anyone know what might be causing this? (I'm using Xcode 8 beta 4.)\n. ",
    "thomasgpeng": "@nickoneill Yes I have, but it only has an example of how to use the UI (which works great), not the permissions API as far as I can tell.\nThanks a lot for this library, btw.  Rejected permisisons are a huge issue for my app so I'm looking forward to implementing this.\n. ",
    "ogezue": "What is currently needed to run a swift 3.0 migrated project with PermissionScope?\n. Please merge this  - for warning free XCode projects :). So it is fixed but the cocoapods is not up to date?\n. ",
    "bclubb": "I'm trying \npod 'PromiseKit', :git => 'https://github.com/nickoneill/PermissionScope.git', :branch => 'swift3'\nbut getting [!] Unable to find a specification for 'PromiseKit'.\nIs there something obvious that I'm doing wrong with the podfile?  Great project.\n. Sorry, going through my podfile and updating for swift3.  Great project\n. ",
    "StuartMorris0": "Hey, I see you use an extension called localized which looks for localized string with the relevant text as the key. We will go with that. Thanks\n. ",
    "RafaelPlantard": "In a PodSpec file that is unavailable...\nI need put this dependence inside my personal cocoa pod.\n. Okay, I will use sub-modules, but do you have some date to new release?\n. ",
    "delebedev": "@nickoneill any chance to have this in master? It's 1 line change which is really essential for people who do not aim to use Swift 3 (yet)\n. ",
    "pjebs": "Unfortunately I don't have iOS 7 device to test it out on.\n. There seems to be some inconsistencies:\nI had denied camera in the past.\nWhen the popup comes up, I get taken to the Settings. I allow Camera and go back to app.\nThe app doesn't crash - BUT it doesn't detect that camera is now allowed.\nEven if I close popup and open it up again (NB: the app is never terminated), the popup still thinks Camera is denied.\nWhen I check settings app, Camera is definitely allowed.\nIf I restart the app, it correctly recognises that Camera is allowed.\nI'm using iOS 9\n. Printed them out from callback:\n[Camera Unauthorized, Notifications Unauthorized]\nI checked Settings app again - Camera definitely allowed\nAnd also app didn't crash when it got sent back.\nWhen I restarted app, it recognised Camera allowed.\n. By the way, it worked perfectly with Notifications permissions being allowed from settings app and the returning to App.\nI think it only crashes if permissions that app already had are denied from permissions app. That also makes more sense from a design perspective.\n. AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo) returns denied despite settings app showing Authorized.\nSo it's not the fault of PermissionScope. Perhaps AVCaptureDevice.authorizationStatusForMediaType(AVMediaTypeVideo) is not the best function to call to test camera permissions?\n. I'm using device.\nI double checked it. It is the recommended way - it seems to not get changed immediately for the app. Bug with Apple.\nEither way, the readme's known bugs section should be changed to reflect that app only crashes when a user reduces the permissions of app from what it already had.\n. Here's a twist:\nAll statements above were from tests on a iPhone 6 running iOS 9.\nThe app doesn't crash when the permissions scope is increased.\nI tested on iPad running iOS8.3. The app crashes when any permissions are changed, even if permissions are unambiguously expanded. So for camera permissions it is a moot point whether the app accurately detects the authorization when it returns.\n. I force the user to accept push notifications in order to proceed. In the callback, I was using finished. I guess I can't use finished anymore.\n. German is tough due to long words.\nPerhaps the button on top-right should have .sizeToFit().\nPerhaps the grant buttons should have:\nswift\n        button.setTitle(\"Allowed \\(prettyDescription)\".localized.uppercaseString, forState: .Normal)\n        button.adjustsFontSizeToFitWidth = true\n        button.minimumScaleFactor = 0.5\nPerhaps you can apply does methods to the label inside the button. Not sure if it exists for buttons.\n. The issue is I can't use the finished value because Notifications must be optional.\nI want to keep the Notifications permission in menu so if user grants it, it's a nice bonus. But if they don't, but they grant Camera and Microphone, I can then proceed.\nThe problem is after the show method, your library doesn't immediately call the callback. It waits for a change in authorization EXCEPT in the SPECIAL CASE that authorization is given to all and hence finished = true.\nMy suggestion is that it immediately calls the callback. That way if user has granted camera and microphone, at least  I can immediately test for it and proceed. I feel the special case is ad hoc\nI'm not sure if there are any backward incompatibilities but it does provide this extra use-case.\n. ",
    "vijaysanghavi": "You can try the same on iOS 7 simulator by downloading it in xcode.\n-------------------\nBest Regards,\nVijay Sanghavi\niOS Developer\nContact: +91-9987597775\n\"Logic will get you from A to B. Imagination will take you everywhere.\"\nhttp://vijaysanghavi.branded.me\nOn Thu, Aug 25, 2016 at 3:30 PM, pjebs notifications@github.com wrote:\n\nUnfortunately I don't have iOS 7 device to test it out on.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/nickoneill/PermissionScope/issues/183#issuecomment-242337327,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHbskpV0AEx_7jx8Z3PJk31EmzX2_ooNks5qjWezgaJpZM4Js5aY\n.\n. \n",
    "ventuz88": "Hi @nickoneill, the 86c2205 commit has only the italian strings file. I've downloaded yours and added only the .strings.\nI have to do something else? Sorry, but I'm a beginner with Github. :)\nThanks.\n. ",
    "deivitaka": "@jesster2k10 how did you solve this?. Never mind, thanks. It was renamed to offsetBy I think, however I got past that.. ",
    "robbiet480": "@nickoneill The example app is somewhat broken on iOS 10 simulator it seems. It looks like this:\n\n. @nickoneill done!\n. Closing this since Swift 3 is the new standard.\n. :+1: Also just had a build rejected for the same reason.\n. Agree with @bre7. This feels pretty bad to add all these keys to my Info.plist, especially since i'm not using any of these. I think i'm going to remove PermissionScope for the time being until a fix can be determined.\n@nickoneill I'd suggest putting a giant warning in the README. I have been waiting for my build for almost 2 hours and called Developer Support who also had no idea what was going on, and then thought to check my email which is when I found the problem. \n. If anyone needs it, I pushed a branch that's compatible with Swift 3/iOS 10 and uses the new UserNotifications framework. It only supports notifications and location. It's available here.\n. @nickoneill It's the presence of the code itself. I didn't remove any framework links and my builds passed. I bet that Apple is looking for the import statement or specific classes.\n. Shows how new I am to Swift \ud83d\ude3f. Sorry @nickoneill \n. @nickoneill What would the Podfile look like in that case?\n. Why not a subspec for each framework instead of an entire Pod?\n. @ValiDraganescu Is there another Pod that uses it? I had to really dig through all my Pods to find even the smallest mention of photos. Also, UIImagePicker will cause that error. I found UIImagePicker in PromiseKit as an example of unexpected libraries which may cause problems.\n. ",
    "jd230912": "@nickoneill Hey Nick. We wait for this one to be merged :) Can we do something to speedup the process?. ",
    "4np": "The code in the pull requests still uses some deprecated categories:\npod 'PermissionScope', :git => 'https://github.com/robbiet480/PermissionScope.git', :branch => 'swift3-ios10-usernotifications'\n. ",
    "sansari": "+1, seeing this as well.\nFeels really weird to be adding usage descriptions for permissions we don't even use (Apple is already so picky about exactly how one uses different capabilities/permissions, so it makes me a bit nervous to \"declare\" we're using all of these).\n. ",
    "h3smith": "While more work, perhaps the correct solution is a core cocoapod, with the logic for each individual permission in its own pod. Or, while hacky if you are building from source there are always preprocessor flags you could wrap around each permission. \n. They are performing static analysis and finding the calls for the specific permissions and noticing the lack of the description in the plist file. Nothing more than that and you aren't going to get around it. \n. The only solution is that preprocessor flags have to be defined for the build process. There really isn't a way around it. Sadly you can't #define at the top of the .swift file because that would take care of it and make it easier. \nBut, it'll allow you to pick and choose which support you want which could be seen as a huge plus instead of having everything in there... \n. We sort of \"butchered\" @nickoneill code to get the permission prompts working as we wanted. It was basically breaking each \"permission set\" into its own Framework. if you want to use \"Camera\" you had XYZCamera.framework and viola done. \n. ",
    "yuvalt": "I know it won't be the prettiest or swift friendly option -- but what about using preprocessor flag per type of permission and then having to include the list of preprocessors in the project file?\n. That's why I think preprocessing is the only way to go (need to be verified). So we can add a preprocessor definition like PS_INDIVIDUAL_PERMISSIONS and then PS_LOCATION, PS_CONTACTS etc... this way we can make sure that only the relevant code gets compiled. I can implement it quickly if people think it's the right approach.\n. @nickoneill I hear you, but that's the only thing I could think of. The user will need to define it under Build Settings -> Swift Compiler -> Custom Flags (it's not under Basic but rather under All). Painful. Anyway, all the could be optional and people can still just include all the descriptions in their Info.plist or just opt to use this. I'll be happy to issue a pull-request for this, if you're interested.\n. ",
    "MaeseppTarvo": "I think the problem is actually much Apple sided. I think that if you have whatever piece of line about some permission inside code it just detects it and check if it is allowed. So I think there is nothing to do.\n. ",
    "emreavsar": "also looking for a fix.\n. @nickoneill thanks for the quick answer. Yep this looks like the quick-fix for the moment. Are you 100% sure that they're not listed somewhere but only requesting? (App Store Entry, Settings etc.)?\nThanks anyway. Looking for the update mate!\n. ",
    "Panajev": "Sent from my iPhone\n\nOn 21 Sep 2016, at 02:20, Basem Emara notifications@github.com wrote:\nAdding the privacy entries in the plist is definitely not a long-term solution. You would be misrepresenting your app in some way and you'll have more explaining to do with Apple. Also down the road who knows what those will be used for (maybe a popup like Android).\nI totally support using compiler flags, the code isn't in the compilation this way.\nSegmenting the code seems overkill for a relatively small lib. However, like @h3smith mentioned, there can be a core dependency and each permission would be a new, stand-alone library. I can see grabbing only notifications and bluetooth libs for example and leaving the rest; PermissionScope can be more of a suite of libs.\n\n+1\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "ValiDraganescu": "I added the requested descriptions in my plist but I still get the error after the app processing starts in iTunes Connect\n. I think I've just found something interesting here. I added all the requested descriptions in my plist and still got rejected for the same thing. I removed PermissionScope from my pods and implemented my own permissions. Good thing it'a a new app and I only need location and camera access. \nNow, I implemented the location and camera access but I also had the photos gallery description in the plist file, I archived and pushed the app to iTunes. Now guess what, iTunes is complaining about this exact not used feature saying : \nThe app's Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.\nBut I'm sure it's there because I just put it there. \nI removed that description from my plist file and I'm pushing to iTunes as I write this, I'll keep you posted with what happens next.\nLater edit:\nNope, it's not that ....\n. @robbiet480, @seboslaw I am using UIImagePicker because I really need it :). I did all the setup, I added the description in the plist and still got the app rejected. I ended up removing my parts of my own code that was mentioning UIImagePicker and now the app has been approved. My app will not get public for a while now but still it would be great to test the camera functionality. I guess this is an iTunes bug or something, we should file a bug to Apple.\n. ",
    "seboslaw": "@ValiDraganescu are you using ReactiveCocoa? It also has a UIImagePicker binding that causes this rejection at the moment.\n. ",
    "Luccifer": "Hope I will not be rejected with so many permission descriptions in Info.plist. \nAnybody success AppStore release with bag of premission descriptions?\n. 5 minutes ago they take my build for review as well, waiting for results, will update this comment later after their response/approve \n. ",
    "emobtech": "@Luccifer Just got an update approved with all those permission keys with generic placeholders. No comments from review team. Hopefully they fix it in future Xcode's versions.\n. ",
    "alanscarpa": "@bre7 This seems like a solid solution to the issue.  I'd like to implement the same solution for this project and make a PR, unless  @nickoneill you have an alternate solution in the works?\n. ",
    "andrewkouri": "Any update on this?. ",
    "ghost": "I think I know the answer, but what's the status of this? I want to use PermissionScope in my project, but not if I have to include all of the parts in the Info.plist or if I have to fork the repo and edit files to just use the permissions I need. \nIf it sounds like I'm expecting someone to do it for me. I'm not. I just don't have the time to do the latter and I don't believe the former \"solution\" is viable.. ",
    "boywithk9": "@nickoneill Any update on this?. ",
    "jeffreyjackson": "@Luccifer did your app pass review with the extra unused description strings?\n@alanscarpa looking forward to a PR to address the subspecs\ncc @bobbyrehm. ",
    "majidsaleem105": "@nickoneill Yes, I specified swift3 branch for PermissionScope in my Podfile. I used cocoapods to set this up with my project and it was working perfectly fine for me. \nHere is my podfile contents:\n``` ruby\nsource 'https://github.com/CocoaPods/Specs.git'\nUncomment this line to define a global platform for your project\nplatform :ios, '10.0'\ntarget 'PTCK' do\n  # Comment this line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n# Pods for PTCK\n  pod 'Alamofire'\n  pod 'AlamofireImage'\n  pod 'PromiseKit'\n  pod 'SwiftyDB'\n  # pod 'PermissionScope'\n  pod 'PermissionScope', :git => 'https://github.com/nickoneill/PermissionScope.git', :branch => 'swift3'\nend\n```\nI made 2 changes in it:\n1. platform :ios, '10.0' [It was set as '9.0'.]\n2. # pod 'PermissionScope' [commented and added below line.]\npod 'PermissionScope', :git => 'https://github.com/nickoneill/PermissionScope.git', :branch => 'swift3'\nThanks for your help.\n. @nickoneill Any luck with this issue? Did you get a chance to take a look on this issue?\n. Thanks for the updates, I updated my pod file as you mentioned but unfortunately, it is still giving same error as I attached screenshot with my 1st message. Any suggestions?\n. Thanks Nathan for your reply. I followed your instructions but no luck. I don't understand the following warning with error. Am I missing something?\nWarning: Target 'PermissionScope' of project 'Pods' was rejected as an implicit dependency for 'PermissionScope.framework' because its architectures 'x86_64' didn't contain all required architectures 'i386 x86_64'\nError:\nld: framework not found PermissionScope\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n. ",
    "jbarmanet": "Until 10.3 the CMSensorRecorder workaround was working, but since the iOS 10.3 update it does not seem to work anymore, and return false even if the authorization was given\u2026 Any updates on this issue in PermissionScope?. ",
    "nitinalabur": "+1 . ",
    "marcelgoya": "Thanks \ud83d\ude00  No problem at all. I'm just not 100% sure if some of the translations are correct because I was using GTranslate ... \n. Cool! It's not much really :) \n. Sure, will do it later on today\n. It's already added as pull request. ",
    "dominikweifieg": "Sure, will do so tomorrow morning my time and add it to the pull request. Thanks!\n. ",
    "tedgonzalez": "Please link the fork, thanks!. ",
    "NinoScript": "Sorry, we have it in a private repo, but really, the only change is to make showAlert() public, I guess I'll do it here in GitHub, give me a minute. There you go: https://github.com/nickoneill/PermissionScope/pull/234. ",
    "rajubd49": "I'm also having problems in iOS 10.2 simulator. Contacts permission is denied automatically If I press enable button. Location permission enable button tap is not working. . Yes, it works on real device. But we don't always get the chance to test on real device. That's why I raised this issue. Anyway, thanks for your reply.. ",
    "zshannon": "Sure, how would you prefer that be done?. ",
    "timothycosta": "@nickoneill Did you ever get a chance to look at this?  If you have suggestions for how I can get bluetooth working again I'd be happy to take another stab at it.. ",
    "gabzsa": "@nickoneill any update on this? This change would be very useful.. ",
    "raymondCaptain": "My solution doesn't work.\nSee more #161 .. ",
    "Abreu0101": "The issue was a category that I created for PermissionScope (to some extra utilities). Just need to import CoreBluetooth in the Category header.. ",
    "CaptainYukinoshitaHachiman": "Well,I found that the example doesn't work on my Xcode,too.The same happens again.So maybe it doesn't support Xcode 8.3.1?. And I found it will only crash when allowing contacts and adding photos, and other permissions works well.. ",
    "AlekseiItr": "I will add new pull request with these changes. ",
    "gaming-hacker": "has anyone have a list of localizations available?. ",
    "apiapia": "\u662f\u771f\u7684circular\u5f15\u7528\u4e86 \uff01 CPU\u8d44\u6e90\u7adf\u7136\u591a\u8d70\u4e8620\u51e0M\uff01\n// FIXME:  on PermissionScope -> PermissionScope.swift \nusing weak var 07/08/2017\nweak var weakSelf = self\nviewControllerForAlerts = weakSelf\n\n\n. ",
    "royherma": "same for me, were you able to resolve?. ",
    "SandeepAggarwal": "@royherma Yes, I was able to use a workaround to solve this issue:\n//setOnAuthChange: is not being called (bug) so this workaround\n@weakify(permissionScope);\n    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidBecomeActiveNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note)\n    {\n             @strongify(permissionScope);\n            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), \n            dispatch_get_main_queue(), ^\n           {\n                  if ([permissionScope statusNotifications] == PermissionStatusUnauthorized || \n                  [permissionScope statusNotifications] == PermissionStatusDisabled)\n                {\n                        if (deniedOrDisabledBlock)\n                       {\n                             deniedOrDisabledBlock();\n                       }\n                }\n                else\n                {\n                       if (authorizedBlock)\n                       {\n                            authorizedBlock();\n                       }\n                 }\n           });\n             [[NSNotificationCenter defaultCenter] removeObserver:self];\n    }];. ",
    "max-potapov": "\"\u0440\u0430\u0417\u0440\u0435\u0448\u0435\u043d\u044b\" \u2013 typo in entire section.. \"\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\". \"\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\". \"\u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0430\". "
}