{
    "paramaggarwal": "Yes please! Right now its just a super simple drop-in component to get drag/drop functionality. Please feel free to raise a pull request that accepts custom styling.\n. v0.2.0 supports custom styling. Simply pass in children and all default styling will be removed. Thanks to @threepointone for suggesting how to do it.\n. Very useful enhancement. Thanks @toshipon! Will update the README.\n. It's not HTML, it's called JSX.\n. Fixed, sir.\n. This was introduced in PR #4, but I haven't gotten around to updating the README to reflect the change.\n. Closing as this is fixed.\n. That's right. The idea was that you would run whatever async method you have to upload your file inside the fileHandler(). But good point about not being able to run the example as is. You could suggest a PR, or will attempt a better way to do it later.\n. Closing as this is fixed.\n. Currently you can style it by passing a style prop.\n. That's right. Will keep this open and fix it sometime.\n. Thanks! Merged your PR, published as v1.0.1 (https://github.com/paramaggarwal/react-dropzone/releases/tag/v1.0.1)\n. Good ones. I'll change the file name to .jsx again, as was recommended in one of the other PRs.\n. Oops, I had missed it. Merged in, thanks!\n. Published to npm as v1.0.1 (https://github.com/paramaggarwal/react-dropzone/releases/tag/v1.0.1)\n. Good idea, would be great if someone could submit a PR.\n. Looks like only Chrome 21+ ever implemented support for folders. No other browser supports it, so unlikely to be part of this library. Closing.\nhttp://www.rajeshsegu.com/2012/08/html5-drag-and-drop-a-folder/\n. Closing this one. Will accommodate @nextminds note in the README so everyone can read.\n. Good idea, I'll update README with this feature and push to npm.\n. Closing as merged PR by @BDiehr.\n. I'm unclear about the issue you are facing. Can you try the suggestion in the error message?\n. Nice, this way people don't have to bother with a JSX transformer.\n. Nope, hasn't been tested across multiple browsers. Unfortunately this component is missing tests too.\n. Thanks @eventhough - so this library is IE10+.\n. Thanks! Merged in.\n. Good catch! Published as react-dropzone@1.1.1\n. Oh good idea, but usually on websites where I am able to drag and drop, I am also able to click - so I believe the default should be supportClick={true}.\n. Nice idea - would you like to document it in the README too?\n. Like!\n. How about if we expose a React ref as a property on <Dropzone>. So .getFileInput() on the component would return this.ref.fileInput. Fits in with React's method of keeping a reference and does not need any configuration.\n. Please correct me if I am wrong, but having a name field that other libraries can reference is only useful for the default browser input element and not the drag and drop behaviour right? This library is primarily for drag and drop use. Using a default input field does not require the use of this library?\n. @nickhudkins Yes, the example you give is perfectly valid when default input is used. But this library is uses HTML5 onDrop events which do not work as far as I know without normal form post uploads. The only reason there is an input element in this library is actually to support the scenario of a click and then a dropdown file selector.\nThe library won't work the other way round where you drag and drop a file and it becomes set on the input element and hence will not work with a simple browser form post action.\n. @nickhudkins But the component does not have a <form> wrapper around the <input> which means that simple browser form post anyways does not work.\nOverall, if there is a way to set the drag and dropped files as the value of the <input> field, then we can wrap it in a <form> within the component so that it can work with default browser form post! (and support the name field then)\n. Please don't rely directly on the input field, it only serves a secondary purpose to the primary drag and drop feature. If you need a more advanced input field, please directly create your own.\n. Going to create separate issues for each of these, and will leave this particular issue open for further suggestions.\nCould disabled state be handled purely with style? Or should it be something controlled with an HTML5 attribute.\n. Well there would be no concept of drag and drop on a mobile, folks! If you'd like file inputs on mobile, you can simply use an input field!\n. 1. Ideally the isDragActive state needs to be exposed out to parent with onDragStart on onDragEnd events of something similar. Then the style prop would be changed accordingly. This should be cleaner.\n2. Agree that the component updates continuously while onDrag is in progress. But relying just on this.state.isDragActive != nextState.isDragActive is prone to too many bugs. Going to wait for a better solution.\n. 1. In the PR, the parents gets access to the props and state object as parameters to the function sent as a prop - that doesn't sound right either. Sending separate styling for active and idle states might make more sense, especially if we could send an array to the style object and have the active style override idle style.\n2. Yes, the correct thing to do would be to setState selectively.\n. Added support for activeStyle in v2.0.1.\n. v2.0.1 introduces babel with npm run build.\n. Yes, this is fixed in #41 and published to npm as v1.2.2.\n. Please raise PR, I'll merge.\n. Merged, thanks!\n. @idolize Excellent thoughts. Merged in #39. Will spend some time and update this code to do the .npmignore, .gitignore mojo.\n. Going to leave this open, I would ideally like to use JSX in index.js, and then publish transpiled code on npm.\n. v2.0.1 introduces babel with npm run build.\n. Good one, thanks.\n. Published a patch release v1.2.1.\n. We are using the HTML5 onDrop attribute on the div tag. If that's the default behaviour, then so be it. I don't see a reason to modify default behaviour here.\n. Thanks! Published to npm as v1.2.2.\n. Just pass an empty this.props.style as {}, that should solve your problem. The rest is just default styling for the sake of having very little initial setup to try it out. It is meant to be overridden with a style prop.\n. I agree, could someone please raise PR with something like this, I'll merge. The idea being if either of style or className is set, then ignore the default styling.\njavascript\nvar style;\nif (this.props.style) {\n  style = this.props.style;\n} else if (this.props.className) {\n  style = {}\n} else {\n  style = {\n    width: this.props.size || 100,\n    height: this.props.size || 100,\n    borderStyle: this.state.isDragActive ? 'solid' : 'dashed'\n  }\n};\n. But to stye a component you'd need to specify either style or className and doing either of them would disable default styling in this case - isn't that what you expect here? Setting a separate flag like noDefaultStyles seems redundant here.\n. I think you misunderstood, when this.props.style is set, it completely overrides default styling, not merge.\n. @nickhudkins Thanks for debating this out. It's trivial to include one more prop, but its nice to question the need.\nHence suggesting the following here:\nvar style;\nif (this.props.style) {\n  style = this.props.style;\n} else if (this.props.className) {\n  style = {};\n} else {\n  style = {\n    width: this.props.size || 100,\n    height: this.props.size || 100,\n    borderStyle: this.state.isDragActive ? 'solid' : 'dashed'\n  };\n};\n. Just saying style={{}} seems fine.\n. Very true! I'll do that once I find some time. :)\n. No no, leave it open as an open task to complete!\n. Resolved via https://github.com/paramaggarwal/react-dropzone/pull/46\n. This is great, thanks!\n. @nickhudkins But the component does not have a <form> wrapper around the <input> which means that simple browser form post anyways does not work.\n. @nickhudkins The library is intended to be used as a drag and drop component. There is no clean way to make this work as a simple input field. I'll see if the dropped file can be set as the file on the input field itself. As if it was selected from the dropdown - then it would be pretty cool.\n. Closing as the primary feature of the library is drag and drop, and the input field is only to allow selection by clicking. To use with regular form POSTs, please directly use your own input field.\n. I didn't even know about such an API. Thanks!\n. Done. v1.2.4.\n. The discrepancy you are seeing is because this was added very recently here: https://github.com/paramaggarwal/react-dropzone/blob/master/index.js#L22-L23. This change is on master and not published to npm yet. Hence your code does not have this. \nI just published v1.2.3 to npm with the latest from master.\n. Yes there are a few things I want to touch up on this repo. Will leave this open.\n. Merged, thanks!\n. Nice, thanks!\n. Good one. This broke when JSX was removed from the library.\n. Please set via style instead: index.js#L113.\n. Yes, we need help with making this compatible on mobile!\n. Feel free to open a pull request!\n. Oops, hit the close button by mistake. \n. This library has no use on a mobile as there is no concept of drag and drop of files on mobile. To support file inputs, one can simply use a normal input tag. For this reason, I'll be closing this issue.\n. How about expose this.state.isDragActive instead in some way? And then manipulate the passed in style accordingly.\n. The cleanest pattern would be for the component to send stuff up to the parent via callbacks and then the parent can send updated props like style to the component.\n. Please use the onDragOver and onDragLeave prop function that you can pass - this is how the border setting is done internally - https://github.com/paramaggarwal/react-dropzone/blob/master/index.js#L33-L60\n. My main concern is that this change brings more switches and controls to an otherwise simple component. Hence against the idea of adding more props.\nAlso the React pattern is to have stateless components, pass data down using props, pass events up using callbacks and maintain as much state as possible at the very top level.\n. Thanks for understanding. Also with this PR, there would not have been a way to override the default styling then.\n. Thanks!\n. I tried this out and it did not work on mobile Safari for me.\n. I just realised - this library has no use on a mobile as there is no concept of drag and drop of files on mobile. To support file inputs, one can simply use a normal input tag. For this reason, I'll be closing this PR.\n. Yes, the accept prop was misleading. v2.0.1 removes support for it.\n. Yes, it works on input but no clear way to have it work on a dropped file. Will accept PRs if someone can figure it out.\n. Published v2.2.0 to npm from master.\n. Could you submit a PR? I don't have IE to look into this...\n. v2.0.1 removes any reference to dropEffect and effectAllowed as they don't work consistently across browsers.\n. Why so?\n. Ah ok, but this library is more for the drag and drop aspect than the input field itself. The input field is only as a fall back for somebody clicking instead of dragging and dropping.\nFor example if you did set required, it would still show up as empty when someone dragged and dropped a file. Similarly setting disabled in input still does not disable the drag and drop feature.\n. Please don't rely directly on input - it only serves a secondary purpose to the main drag and drop feature of this library. For anything more advanced pertaining to input, it would be better to directly create your own input.\nTo achieve features like required and disabled - you can keep state of whether some files were dropped on the zone and do validation there.\n. Ah you need to bundle this file and use it... Please run it via something like browserify, and use the output between your script tag.\n. Ah good catch. Could you remove the multiple=false bit - it's not needed.\n. Thanks!\n. Thanks!\n. Ah, good catch. Thanks for the fix!\n. This is great, thanks!\n. Please try the example where it uses file.preview.\n. Ah I see. This is fixed in the latest v2.1.0. It does not render the children inside input.\n. Ah yes, you could put your own function there - just a usage example.\n. Yes, you are right. @okonet could you please help out?\n. Thanks!\n. Thanks!\n. Thanks @marnusw @okonet \n. Done. npm v2.2.1.\n. Keeping this open to eventually support React 0.14.\n. Sounds good. Thanks a lot for all the help here. I added you as a contributor so that I don't slow you down. :)\n. @jking90 Open for PRs!\n. :+1: \n. Thanks! Merging this in. Would be great to mention it in the docs too!\n. Thanks\n. done react-dropzone@3.1.0\n. Looks good! (cc: @okonet)\n. Umm, I don't know how to do it. :stuck_out_tongue: I can share access for whatever you need for it!\n. It would be best if we could get this into https://github.com/reactjs. I believe we'll need to get in touch with the members there. Over the past year this has grown from 800 stars to over 3000 stars today - this very well needs to be a community project now.\n(cc: @acdlite @gaearon @ide @jlongster). Dear maintainers, could you please raise a request to transfer the repo to https://github.com/reactjs org - I am trying to help consolidate the react projects which are really popular into the community organisation.. I am also not sure how to do it... Try using the transfer link at the bottom of https://github.com/react-dropzone/react-dropzone/settings\n. I think they will need to approve it for the transfer to go through. So we might get to hear back from them around any requirements there might be.... Hi, please help me to understand here. The size prop being a number is completely fine. Its passed as is to be a CSS style property on width and height which is accepted way of specifying the same in React.\n. But its not HTML, its JSX.\n. Right, could you resubmit with the following instead?\njsx\n<Dropzone handler={this.fileHandler} size={200} message=\"Drag and drop a file here\"/>\nThanks for catching this!\n. This one looks like a problem to me. It means only if one gives a className prop, will it pick the passed-in style prop.\n. Please don't return here, as we need the this.props.onDragOver(e) to still be called always. Instead wrap \nthis.setState({\n  isDragActive: true\n});\ninside an if (effectAllowed === 'all' || effectAllowed === 'uninitialized')\n. Is .every available on all browsers? I have always used .map instead.\n. There is already a babel pipeline, so we can use anything.\n. ",
    "joscha": "This is still an issue. Version 1.0.1 brings a .js ending instead of a .jsx one again.\n. ",
    "mitselek": "And what about not matching brackets?\n. Cool,\nThanks, i will try it out.\nIm still puzzled about it working fine in github's read.me, tho :s\nOn Wed Feb 04 2015 at 1:15:55 PM Param Aggarwal notifications@github.com\nwrote:\n\nFixed, sir.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/paramaggarwal/react-dropzone/issues/6#issuecomment-72838145\n.\n. \n",
    "Pomax": "really? nice! Is adding a handleClick handler enough to get things working? (looking over the PR, don't have anything beyond a tablet available atm to try running code)\n. ah, based on https://github.com/paramaggarwal/react-dropzone/pull/4/files#diff-168726dbe96b3ce427e7fedce31bb0bcR36 it looks like it might be worth changing the selector to:\nvar node = e.target.querySelector(\"input[type=file]\");\njust to make sure the selection is guaranteed for a type=\"file\" input rather than \"any\" input.\nAlso probably better to replace https://github.com/paramaggarwal/react-dropzone/pull/4/files#diff-168726dbe96b3ce427e7fedce31bb0bcR96 with a style that's simply display: \"none\" rather than trying to move it off screen. Especially since position: \"absolute\" is actually relative to the first ancestor with an explicit positioning so that input element might be entirely visible on-page with this CSS =)\nFinal note: no need for the replacement in https://github.com/paramaggarwal/react-dropzone/pull/4/files#diff-168726dbe96b3ce427e7fedce31bb0bcR102 - in fact, since this isn't a submittable form, that should definitely stay a div (input elements don't need a form around them, and in this case the form element is actually semantically incorrect).\nHopefully I have some time to write a PR for on top of this soon (although if you get to it before I do, hurray =)\n. I'm currently using an analogue of this:\n```\n  fileHandler: function(file) {\n    var self = this;\nconsole.log(\"receiving\", {\n  name: file.name,\n  type: file.type,\n  size: file.size\n});\n\nthis.setState({\n  status: \"Uploading...\",\n}, function () {\n  var reader = new FileReader();\n  reader.addEventListener(\"loadend\", function(e) {\n    self.setState({ status: \"Processing...\" });\n    data = this.result;\n    self.processFileData(data, self.fileDataProcessed);\n  });\n  setTimeout(function() { reader.readAsDataURL(file); },250);\n});\n\n},\nprocessFileData: function(input, callback) {\n    // do something with \"input\" here\n    callback(false, { some: \"result\" });\n  },\nfileDataProcesssed: function(err, result) {\n    if (err) return console.error(err);\n    this.setState({\n      status: \"Done\"\n    });\n  }\n```\n. I'm sure, but if I want to rely on CSS because of automation (LESS compiled CSS, for instance), that is not a solution =)\n. I filed a PR with some tweaks that I found critically missing over on https://github.com/paramaggarwal/react-dropzone/pull/10, which also fixes this issue\n. any word on what you'd like with this PR? (I'd very much like to see it merged, the baked-in styling despite specifying my own className in 1.0.0 is still a big problem)\n. super, thanks so much!\n. good point, let me amend that\n. updated so that style is always props.style OR the hardcoded default, however, if a custom className is explicitly passed in, the styling has to come either from the passed in style, or from plain CSS/LESS/SASS/Stylus/whatever.\n. ",
    "InSuperposition": "The examples I have found, so far, only work in chrome.\nI'll continue to look into it, I probably just need to dive into the API a bit more.\nDemo\nCode\n. ",
    "JanCVanB": "@paramaggarwal @okonet I would love to be able to upload folders - does this change the reasoning behind not supporting folders? http://superuser.com/questions/909112/does-firefox-support-folder-upload\n. Great, let's move this conversation to #174 \n. and #134 \n. ",
    "okonet": "I believe we even have a JS only implementation for that in #174 but I might be wrong. Either way, I'd like some code issues be resolved before I merge, so help is appreciated.\n. Correction \u2191: It still uses DOM API, so more investigation is needed I think.\n. There is a PR in progress https://github.com/react-dropzone/react-dropzone/pull/616. @SylarRuby file a key issues as a separate issue. Delete button should be done in userland. This library allows you to put any content you want in it.\n. I'm closing this one. Seems all mentioned enhancements are implemented already. For new stuff please file separated issues with enhancement label.\n. https://github.com/okonet/react-dropzone/issues/112\n. I think it's not clear how it should behave on mobile. Each developer might want slightly different behavior. Or am I wrong? What is your thought on it? Mind doing a PR?\n. +1\nTo reproduce: \n1. Pass accept property\n2. Try to drop some file outside of allowed\nIt still allows dropping it. It should not.\n. I'm not sure that removing support for accept is a good idea... It is in the HTML5 standard https://developer.mozilla.org/en/docs/Web/HTML/Element/Input and it would be cool to have support for it.\n. Ok, I'll do that. Have a solution in place. But I don't think it is possible to make the dropzone react on this property before dropping.\n. I could not find any release notes to 2.1.0. What's changed?\n. Interestingly I get TypeError: can't convert undefined to object in Firefox after updating to 2.1.0\nWhat browser are you using?\n. But this one got fixed here: https://github.com/paramaggarwal/react-dropzone/commit/df6ed1290d007b7bf16fff81f79dfef0e0776046\nThe thing is that it never get released... I think @paramaggarwal should publish a new version to npm.\n. I've just checked 2.1.0 in Chrome 48 (Canary) and everything works as expected. Can you provide me with better steps to reproduce? What file did you use and what settings? Mind adding an example to github please?\n. Thanks. Seems like an issue to me. Mind filing it and I'll take a look soon.\n. Well, funny thing is that in Chrome it is items. I'll check for either one is defined.\n. Related to #123 \n. I've solved this by adding CSS pointer-events: none to the drag area.\n. I'd add as a part of the base style to the component. Less hassle for developers. Don't think this can break something. I also think there should be no prop for that.\n. Yeah, that sounds reasonable to me.\nSincerely yours\nAndrey Okonetchnikov \n@okonetchnikov \nhttp://okonet.ru \nOn 12. Oktober 2015 at 13:22:42, Marnus Weststrate (notifications@github.com) wrote:\n\nHmm, there is a slight snag with this strategy. Disabling pointer events on the base style \nmeans the drag events never trigger on the dropzone. So, the children have to be wrapped \nin an additional span or other component with the pointer-events: none style applied \nto that wrapper. Then the drag triggers on the dropzone, but none of its children.\nThere is also a further unfortunate result: If you include a button as a child which can \nbe clicked to open the file explorer, that button's pointer events are now disabled, \nmeaning no pop-up messages and no clicks. The pointer-events: auto style has to be \napplied to the button to fix this. Not the end of the world, but also not ideal considering \nthe pointer-events: none is hidden \"magic\" behavior.\nAnd, now this leads to further problems: When dragging over the button those events are \nnow bubbled to the dropzone who reacts to them again. This causes the hover active/inactive \nstate of the dropzone to become messed up. e.g. in my case when I drag off the button the \ndropzone remains in-active; only when you completely drag off it and then back over it \ndoes it activate again.\nPerhaps \"counting events\" per my initial could end up being more predictable?\n(And possibly better supported... For instance if IE implements File API in the future, \nbut still no pointer-events.)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/paramaggarwal/react-dropzone/pull/73#issuecomment-147368960 \n. Closes #75\n. The more I think about it, the more I believe it should not be used for a \"whole document is a drop zone\" case. I think it might break a lot of stuff.\n\nInstead, you probably should handle this on document level from your root component via componentDidMount method. \nI can imagine you could do only basic dragOver detection here and then render the dropzone component. WYT?\n. I think this is the only proper way: detect drag and mount the dropzone. I think this could be a special wrapper component, which one can attach anywhere in your component tree to provide such functionality additionally to the current one. Something like Dropzone.GlobalWrapper or similar. This approach could also solve the ref I guess?\nIf you feel like it, please submit a PR.\n. I assume this is an issue with Chrome not providing any information to dataTransfer object?\n. Can you guys create a PR for this one?\n. Seems legit to me for PR. If this fixes the issue I'm happy to merge it. \nRegards,\nAndrey Okonetchnikov\n\nOn 03.01.2016, at 10:34, Denis Elistratov notifications@github.com wrote:\nRe-checked it once again on different project. My previous statement was not fully correct.\nMy observations\n114 from @newsiberian actually introduces the bug in projects with react-dnd\nv3.2.2 does not have this bug in projects with react-dnd\nv3.2.2 has this bug in projects without react-dnd\nConclusion\nIit depends whether there is another onDragOver listener in the project.\nDND from apps works only if there is a onDragOver listener that mutates e.dataTransfer.\nAnother fix\nHere is what works for me on both my projects. I took the idea from dropzone 1.x:\nonDragOver(e) {\n     e.preventDefault();\n     e.stopPropagation();\n-    e.dataTransfer.dropEffect = 'copy';\n   return false;\n  }\n  But fix is too weird for PR. I hope someone will confirm/deny it or clarify what's going on.\n\u2014\nReply to this email directly or view it on GitHub.\n. @systemizer the reason is \u2014 there is no PR for that yet. Fancy to create it? If you're up to, please also add tests for this case.\n. I've just published https://github.com/okonet/react-dropzone/releases/tag/3.6.0 that should fix it.\n. I've solved this by adding a CSS pointer-events: none. Probably this should be done by the lib itself...\n. #73 \n. Well, I don't think you can do require('react-dom') with React 0.13, so this should be a major release either way. Or am I missing something?\n. Can we have it rewritten without using ReactDOM and findDOMNode?\n. I'll merge #84 if it's okay for everyone. \n. Ok cool. Closing this one in favor of #84 \n. Thanks! I'll try to commit something this week.\n. Yes, it will work with React 0.14 but this warnings are annoying. Thing will get broken by next release.\n. #84\n. We should thank @kumarharsh for that. \ud83d\udc4f\n. What browser are you using? Also what kind of file?\n. Please install the latest version. It should be fixed by now.\n. Reopen if it's not.\n. That's strange. I've just tested it and it worked fine. Can you provide me with a bit more info?\nSteps to reproduce? Which browser? What configuration are you passing on Dropzone component? Thanks.\n. Oh thanks for investigating! I'll make a fix ASAP and will release a new version.\n. Should be fixed in 2.2.3\n. This looks good. Can you please remove version bump from it? I'll do it myself. Thanks!\n. Yeah. I can take care of it\n. Sure. Go ahead and submit a PR\n. Since I don't use Radium and you didn't create a PR yet, I'll close it for now. Still would accept a PR for it.\n. Thanks for the link. This was an idea \u2014 to do it myself :)\n. I'm really not sure if this library should be concerned about other drop zones and I'd like to encourage composability React provides us with.\n\nCan you provide me with a bit more insight of how this can be looking in the code? \n. I agree it should be possible to override this behavior but we should provide some sane defaults that improve the UX. I'd say the second one + a prop that accepts a callback so the user can write his own logic? So, basically, the second option you have proposed + a default implementation that lives in the library?\nI believe that stuff like \"the user does not get the cool 'cannot drop here' icon.\" should be implemented by users itself since it's highly custom depending on the project/user needs so I'd choose the simplest solution from the point of this lib that just fixes that behavior.\n. Yes I'd for it. I'd name it onDropOutside for the consistency with other method names.\n. Simulate an event and add a spy on the document?\n. Do we need to support different events besides drop?\n. I think we should be good with just drop for now to keep things simple. What do you think?\n. @mwolson please use separate branches for these PRs so we can merge them independently. Thanks!. So what's the issue here? \n. Sounds legit. Please submit a PR!\n. v3.x is not compatible with React 0.13 on more levels (require calls, different packages etc) and I don't think it is worth trying to add compatibility for 2 versions. React 0.13 users should use v2.x instead.\n. You are right. I've updated peerDependencies in package.json. I'll update readme as well.\n. Done!\n. Why couldn't? What was the problem with submitting a PR?\n. This is looking awesome! I'm merging it now and will release a new version soon.\n. Please provide more info and exact issue you're having. Also, which version you are using. Just pasting output isn't very helpful here. \n. Which version are you using?\n. This will work in every modern browser, but will it if both window.URL and window.webkitURL will be undefined? I think the code should also check if key createObjectURL exist and that it's a type function, right?\n. Awesome! Can you please also update the README?\n. Cool! Thanks!\n. Yes, use accept prop to pass desired MIME types according to http://www.w3.org/TR/html-markup/input.file.html\n. README should inform about it\n. Thanks. At this point I think the next step should be tests\n. I'll release in an hour or so. \nYou're welcome to contribute to tests ;)\n. Published!\n. I was under impression that document && document.createElement should suffice for such check. Are you sure you're not using jsdom or something that mocks document?\n. @Stanback can you please submit a PR with the fix for node?\n. I'd like to see that fight in this one https://github.com/paramaggarwal/react-dropzone/issues/102 :facepunch: \n. Cool thanks!\n. Do you mind creating a pull request?\n. Yeah, it totally makes sense to me. Please submit your PR and we can discuss it from there. Thanks!\n. I've created #321 to discuss custom validators. Please jump in and give me your feedback.. Thanks!\n. That's awesome! Thanks!\n. I'm not sure what's the issue. If you pass false without curly braces then it's a string. \n. > using multiple=\"false\"\nThis is becuase you're passing a string instead of a boolean. You should pass multiple={false} or multiple for true.\n. Can you submit a PR?\n. Looking good! Thanks!\n. Hey! Any chance to do that soon? Would be cool to have a CI step, keeping in mind the recent count of PRs.\n. #132 \n. I've verified it with the latest version and could not reproduce. Please create an example where you can reproduce it.\n. I'm closing this one because of \n\nSylarRuby  wants to merge 9 commits into master from gh-pages\n\nPlease create a better a new PR with this fix or create a separate issue. Also it can be simplified by\n{this.state.files.map((file, idx) => <img key={idx} src={file.preview}...\n. This is outside of scope of this library and is React-specific detail which might change in the future.\n. I assume this should be as easy as rendering the <Dropzone> at the top of your app and styling appropriately (i.e. remove all styles from it?)\n. You're right. There is no reason for that. Can you submit a PR that fixes this?\n. Cool! Thanks!\n. 1. Did you set the ref on your <Dropzone> element as in example?\n2. I'll update the example to the callback version instead of string ref. See https://facebook.github.io/react/docs/more-about-refs.html\n. I've just tried the following example and everything worked fine so I'm closing this one for now. If you still having issues, please create a working example (separate repository or gist) so I can try it out quickly.\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dropzone from 'react-dropzone';\nconst style = {\n    borderWidth: 2,\n    borderColor: 'black',\n    borderStyle: 'dashed',\n    borderRadius: 4,\n    margin: 30,\n    padding: 30,\n    width: 200,\n    transition: 'all 0.5s'\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    backgroundColor: '#eee',\n    borderRadius: 8\n};\nclass DropzoneDemo extends React.Component {\nconstructor(props, context) {\n    super(props, context);\n    this.state = {\n        files: []\n    };\n}\n\nonDrop(files) {\n    console.log('Received files: ', files);\n    this.setState({\n        files: files\n    });\n}\n\nshowFiles() {\n    const { files } = this.state;\n\n    if (!files.length) {\n        return null;\n    }\n\n    return (\n        <div>\n            <h3>Dropped files: </h3>\n            <ul>\n                {\n                    files.map((file, idx) => {\n                        return (\n                            <li key={idx}>\n                                <img src={file.preview} width={100}/>\n                                <div>{file.name + ' : ' + file.size + ' bytes.'}</div>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </div>\n    );\n}\n\nopenAfter() {\n    new Promise((res, rej) => {\n        //Simulate a Async promise\n        setTimeout(() => {\n            res('ok');\n        }, 1000);\n    }).then(() => {\n        //call dropzone.open in then()\n        this.refs.dropzone.open();\n    });\n}\n\nrender() {\n    return (\n        <div>\n            <button onClick={this.openAfter.bind(this)}>Open...</button>\n            <Dropzone onDrop={this.onDrop.bind(this)}\n                      ref=\"dropzone\"\n                      style={style}\n                      activeStyle={activeStyle}>\n                Try dropping some files here, or click to select files to upload.\n            </Dropzone>\n            {this.showFiles()}\n        </div>\n    );\n}\n\n}\nReactDOM.render(, document.getElementById('example'));\nmodule.exports = DropzoneDemo;\n``\n. You forgot to bindthis.onSubmitLogintothis. @askbeka mind creating a PR for this?. @askbeka is this a separate issue or should I reopen this one? If it's not related, please create a new issue and a R that fixes it.. It would be great to have it in docs I think. PR?. I wouldn't mind a PR if you feel like it :)\n. Related: https://github.com/okonet/react-dropzone/issues/143#issuecomment-190301457\n. @wvance can you share the example with us? A gist or a PR against the README would be great! I also would like to include the gif as well.. @wvance ~~waiting for the PR!~~ I think at this point it would make more sense to create/examples`. Thoughts?. https://react-dropzone.js.org/. I've just tested it on http://okonet.ru/react-dropzone/ with multiple files and it worked just fine. This example uses v3.3.0\nHere is the code: https://github.com/okonet/react-dropzone/blob/gh-pages/browser.js#L50-L56\nIf you still having issues with this, please build a simple example so I can take a look. Also, which browser is affected? I've tested in FF and Chrome.\n. I'll close it for now.\n. this.state doesn't have files. You need the state of Dropzone\n. I have no idea but I assume Dropzone works fine? If this is the case, then please ask on StackOverflow or any other forums. \n. No, this is not how spread operator works. You can refer to the example page here: https://github.com/okonet/react-dropzone/blob/gh-pages/browser.js#L38\n. It show a list of files with previews (when available) for all dropped files. It doesn't do uploading or any processing. \n. Does it work for you on http://okonet.ru/react-dropzone/?\nHere is how it should look like:\n\nIf answer is yes, then there is a problem in your code and you should ask on StackOverflow or somewhere else. If it looks differently for you, then please post a screen video.\n. Yes, this is how it suppose to work. If you need another behavior, it's up to you to implement it that way.\n. Right. Should be implemented in the userland.\n. This library tries to be minimal and composable. Dropzone.js tries to solve too many use cases with too many options. . No, why would this library be concerned about the uploading process? You should implement this yourself.. I'm sorry, but it seem you better search on StackOverflow. This is an issue tracker related to dropzone component, which doesn't include any data fetching on its own. It's a user's responsibility to implement server communication. See https://github.com/okonet/react-dropzone#uploads\n. AFIK there is no delete option in this component. What are you referring to? Also, I don't know why it's not working with the image. This is also not a part of this component and should be implemented on your side. Please ask these questions on StackOverflow.\n. Thanks! I'll fix it ASAP\n. Should be fixed in 3.3.2\n. This is a duplicate of #112 . Do you mind providing a PR for this one?\n. BTW I prefer webpack but don't mind if you use browserify.\n. This was fixed in https://github.com/okonet/react-dropzone/pull/121 so I guess you need to update to the latest version.\n. I don't understand this. Can you describe what are you expecting and what's happening? Also, please add a jsfiddle with an example that reproduces your problem. \n. Okay I see. Do you mind filing a PR with the fix for that.\n. @vikalpgupta-birdeye I'm open for the PR if you know how to implement this.. @JonnyBoy333 the warning looks like a bug at our side because we switched to Promises (https://github.com/react-dropzone/react-dropzone/blob/a5b2885575bd2a562e6fef7325360fa2a8241654/src/index.js#L177) so we might need to persist the event before we call it here:\nhttps://github.com/react-dropzone/react-dropzone/blob/a5b2885575bd2a562e6fef7325360fa2a8241654/src/index.js#L208-L210\nCan you please report it in a separate issue with steps to reproduce and possible work on fixing it? Thanks!. Looks awesome! I think the react-dom is still missing in the externals. Did you check the build size?\n. Ok cool. I'll check out the deps.\n. This one should close #112 \n. Seems like a duplicate of #255?. Closing of inactivity. Hey! Good idea. Do you mind creating a PR for that? If you do, please create it against 4.0 branch and not master.\n. @rnicholus that's interesting. What do you think of #174?\n. In progress in https://github.com/react-dropzone/react-dropzone/pull/616. Hi. This is out of scope of this library. For help and question you should use stackoverflow. Thanks\n. react-dropzone uses https://github.com/okonet/attr-accept, which is, in turn, based on a standard https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#Attributes. If your case is faulty, please file an issue in attr-accept repository. Before you submit it, please check if it is really a faulty implementation. Also, PRs welcome!\nThanks!\n. BTW it supports file extensions as well: https://github.com/okonet/attr-accept/blob/master/test/index.js#L111-L136\n. This library doesn't support IE lower than 10. I will accept a PR if you choose to add a fix for it tho.\n. Hey! Thanks for your feedback. I'd like to improve docs and examples (#123) but don't have much time to do so. If you could help and update README that would be great. There is also #104 which is related to this behavior. onDropAccepted was added later and I didn't want to break the API by introducing it. But it seems like a good idea after all. So if you'd like to help on this, your PR is more than welcome!\n. Whatever you have time for now. Obviously removing code and changing API\nwill require much more work including adding tests and updating docs so I\nguess adding these methods to README would be good as well.\nThanks!\n. Yes, I think we should do that. \nIf you do, please create a PR against the 4.0 branch\n. That's awesome! Thanks! \nCould you please also add tests for it?\n. I'll close this one in favor of #156. Thanks for the contribution!\n. Is this still an active issue? Can someone create a PR to fix this?\nI'm closing it of inactivity for now.. Thanks!\n. There is inputProps prop that allows you passing additional props to input element. Should be in README of course. \n. Collapses? Can you make a screen video? Does it relate to the component? Sounds more as a OS issue with drag'n'drop and file input.\n. It is compatible per spec with IE10+ but as any open source project might still have issues and bugs.\n. @albertolive I've just tried to reproduce it on Win7 in IE10 without any luck. Check out http://okonet.ru/react-dropzone/ \nI'm also not sure what are you doing, since when the file dialog appears, it is modal so you have to choose a file with it, not by draggin it somewhere. Although I tried dragging it to the page, but browsers displays a mouse cursor suggesting this action isn't possible. Am I doing it wrong? \nPleas make a screen video of your issue and describe exact steps to reproduce it. I'm closing it until then.\n@tbutman does this related to this issue? If not, please file another one. Also, when filing it, please create a demo that I can quickly check out. I don't have much time to work on this ATM.\n. Duplicate of #138?\n. Let's start with tests here since I don't quite understand what's the issue is about from the given description. Mind creating a PR?\n. Just convert to whatever you want in the onDrop callback. It gets the files object from the browser. See https://github.com/okonet/react-dropzone/blob/master/src/index.js#L98\n. I'm not sure this is related to the component. The only place that might be related to this is here: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L92 and this is also a browser feature.\nI've found this StackOverflow article: http://stackoverflow.com/questions/29752779/how-can-i-preview-image-before-uploading-with-the-correct-orientation-with-javas\nI'd accept a PR that fixes it, but I'd rather keep the surface of this library minimal.\n. :+1: \n. https://react-dropzone.js.org/#full-screen-dropzone. Hey! Thanks for this PR. I think this should not be a prop on the dropzone but a decorator/HOC. In this case it would be easier to reuse the dropzone and add this new \"global\" behavior to it. So, basically, what I think of it that the above example should be implemented as a separate wrapper component so you can write something like this to aichive this effect:\njsx\n<DropzoneGlobal {...globalProps}>\n    <Dropzone {...props}>\n       <p>Drop here to upload...</p>\n    </Dropzone>\n</DropzoneGlobal>\nWhat do you think?\nAlso, we will need tests for this as well.\n. That's a good point. But I still don't like how much boilerplate your approach requires. What if we split the original Dropzone into 2 components: one (smart) that handles events and another (dumb) for rendering? In this case we could swap the dumb components dependeing on global prop or even allow custom renderers. ATM I don't like the API with inputProps and stuff at all. This will require more work and I'd add you as a contributor so you can commit directly to this repo. What do you think?\n. @aight8 I don't have time to work on it right now. So I'm happy to accept PRs. So if you feel you would like to work on the discussed solution \u2014 you're welcome.\n. I'm still working on the documentation for this but this can be achieved without introducing new props. See http://react-dropzone.netlify.com/#FullScreen. I'm not sure what the issue is. Why can't you wrap the whole app into the \ud83c\udfaf react-dropzone if you need this functionality?. I might be missing something so it would be helpful to see some real-life example. Can you share it here or make OSS?. Re wrapping the whole app into the \ud83c\udfaf React-dropzone: I don't see how this is ugly if the whole app of yours can accept files? Slack example is a perfect one and this is totally possible to do now with the current implementation.\nMy concerns about the global props:\n\nThe behaviour is very implicit and hidden in the tree somewhere in the app although the root level DOM element is the one who will receive events.\nWhat is gonna happen if you have multiple dropzone components with global prop set to true on a single page? There are no guarantees that this isn't gonna happen and I'm not sure how it will behave in this case. Lots of potential bugs are here IMO.\nYou don't have to modify the DOM tree nor remove dropzone from the React tree if it should be disabled on some routes. You can just do no do anything in the onDrop based on your route. \nI'll gladly accept a PR that will introduce disabled prop to the \ud83c\udfaf react-dropzone that will disable all event handling and thus UI updates for it.\n\nIf I'm still miss some edge cases, I'm all ears but I don't think you're convincing me to reopen this PR yet.. > toggling an app level property from fairly deep within the app - which feels weird.\nWell, that's why Facebook came up with flux architecture. This is very common in the React world.\n\nthe last one would override the others\n\nI'm not sure what you mean by that. Dropzone doesn't hold any state and will not know about \"others\" instances. This have to happen in the user land and this is fairly complex.\n\nwhich then becomes similar to just having a global prop.\n\nI think you're trying to push some of user's (i.e. developer's) responsibilities to this project which I think is a bad design-wise. Sorry, but till now this discussion wasn't convincing for me. If you feel strongly about it, you can make a fork and implement it the way you want but I believe I won't accept this to be part of the main repo.. @oyeanuj I've just merged https://github.com/react-dropzone/react-dropzone/pull/473 that implements disabled prop. I don't know. This issue tracker is for react-dropzone related issues. Please ask your question on StackOverflow.\n. Thanks for reporting it. Do you mind creating a PR with the fix for it?\n. Awesome! Thanks a lot!\n. Duplicate of #104 \n. I'll re-open this one since #104 is about more generic validation callback.\n. I'm on it. Thanks\n. Duplicate of #159 \n. Thanks! :+1: \n. It never was and never will be I think. It just not common for react libs to have React bundled into the dist build. Please use webpack/babelify.\n. PR?\n. Possible related to #180 \n@VladShcherbin what about the PR? Still gonna do it?\n. I'm open to any solution at this point. I also think that current implementation prevents using Dropzone inside of form element with submit handler, so I'd say, it's worth trying. I like the idea BTW and glad to help.\n. I'd rather skip a custom implementation of the :focus behavior -- this might end up very messy and on different platforms might then work differently.\n. I'm not doubting accessibility is important but implementing these features yourself isn't the best strategy from my experience. So I'm open to a standard-based solution that doesn't involve custom event handling etc.\n. @josh18 I've edited my initial comment that could lead to the confusion.\n. @VladShcherbin I like the first one better since we want to support inline styling not just CSS. Does it work with the hidden <input /> as well? Can you submit a PR with it?\n. Great! I'll try to find some time to work on this one but I'd appreciate a PR for it as well!\n. The more I think about it, the less I like the approach of providing these styles by this library. Following the \"React-way\" should allow easy composition. Having lot's of such decisions in the library will potentially break some use cases for many people.\nConsider the following example: you have a Dropzone around a <textarea>, like GitHub does. I believe it is the <textarea> you want to get be focused when you navigate with the keyboard and not the <input>. Same way, if you want to make the Dropzone look like a normal input, there should be an easy way of passing styles to the input element.\nI think, in the end, this should be done in the user-land, i.e. it should be a developer's job to provide accessible content inside the Dropzone. One exception, though, is the ability to style the input should be also provided. I think this is pretty easy and elegant solution that would not break anything.\nThoughts?\n. @josh18 I'd be happy to include your accessibility tips. I also think this lib could provide sane defaults out of the box (talking about aria-label for example) + a way to customize it.\nI'm still not sure how to tackle such a change. One of the pain points is also integrating this component with forms (redux-form or simple ones) since the implementation detail about the input is hidden. On the other hand, I realize most of the developers appreciate the ease of integration. Does anyone have an idea here?\nPS: Should \u2191 be a separate discussion?\n. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Duplicate of #255. Thanks! That's awesome.\n. I don't have much time but I'm happy to accept a PR. \n. Awesome! Thanks!\n. PR?. Please take a look at https://react-dropzone.js.org/ before proceeding. Is this clear enough?. Duplicate of #61 \nAre you talking about UMD build? I believe there are too few applications for stand-alone builds with React.\n. I'm not sure what the issue is and how is it related to the library. Can you create a more detailed explanation of what are you trying to achieve, steps to reproduce and a failing example? Thanks.\n. It doesn't look like an issue with the lib to me. I'm closing this issue and suggest you ask that question on Stack Overflow.\nAs a hint, try this.removeItem.bind(this, index)\n. Hey @aight8. What is this PR is about? I can't understand the purpose of it from the source code changes. Also, please add tests and update the README to reflect this change.\n. It should work: https://github.com/okonet/attr-accept/blob/master/test/index.js#L112 What are you having in files array? Might this be a browser issue?\n. Interesting... The file object looks good to me. \nCan you try using wildcard in the accepts attribute? *.png.\nI'll run attr-accept tests against your object. \n. So it's a OS / browser issue after all?\n. 3.5.0 could not fix it, so I assume it's OS-related inconsistency? Would be great if someone could create a reproducible example.\n. Doesn't anyone want to take this one and fix it?. Hey!thanks for the PR! Looking good. \nI noticed you changed the logic a bit that isn't covered with tests. Do you mind adding tests for cases when accepts isn't specified? If they will be green, I'm good to merge this. \nI'm also wondering if this one will require a major version bump because of this change. What do you think?\n. Yes but isn't it a breaking change? I mean for those who are relying on a wrong behavior it will break stuff.\n. I'll release a patch version\n. ~I'm not sure application/java-archive is a valid parameter. See the spec: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#Attributes~\nIt is a valid type. Not sure why it's not working on Win7, but this might be an issue with https://github.com/okonet/attr-accept, not dropzone.\nPlease file an issue there, but I'm not sure how to test it on windows though.\nI would just recommend to use *.jar instead.\n. Okay, so it's a browser issue after all. Use an extension pattern as a work around.\n. Hey!\nThat's truly awesome. I'd change a few things before merging it though. \n1. Can the directory walker function be a separate function?\n2. We need to cover it with tests\n3. Why is accept attribute is ignored. It should still work with directories IMO\n. Sorry I dropped a ball on the conversation.\nI've added some comments along the code.\n. Not sure how you would make changes to the existing PR that you don't own so go ahead and create a new PR. . @tmarshall that would be great!. @mfields-gpsw sorry for a long response time. Was busy on different other projects.\nI'm not sure about keeping the structure. This will break the API and will make iterating the files much more complex. What are the benefits? \nRe: structure \u2014 I think it's pretty easy to restore the folder structure from full or relative paths. \nI'd like to be convinced about this kind of change.. The more I think about it the more it appears to me that this functionality should not be the part of this repository but a separate npm package. This way it can be consumed by other libraries and frameworks. Thoughts?. Awesome!. Out of interest I've create a PR to see what's failing: https://github.com/okonet/react-dropzone/pull/447\nI'm wondering if this can be implemented in the userland?. https://github.com/react-dropzone/react-dropzone/pull/616. Hey! Thanks for you contribution! You don't need to use bind when using createClass. You could update the example to use class, but even in this case, this would be an anti-pattern. It's much better performance-wise to bind before and use the reference to the bound function in the render method to pass it down.\n. You could bind the method in the constructor:\n``` jsx\nclass MyComponent extends React.Class {\n    constructor() {\n        this.onDropCallback = this.onDrop.bind(this);\n    }\nonDrop() {\n}\n\n}\n``\n. Since I've no idea how you're bundling your application I can't give you any reposponse here. Looks like you forgot to include react to me. Either way, since it is not an issue with the lib, please consider asking this question on Stack Overflow.\n. Do you mind adding tests for it please? I'm ready to merge it as soon as we get it covered with tests. Thanks!\n. Nothing to apologise! Awesome work and thanks for contribution!\n. Can this be closed?\n. Thanks!\n. That's okay to have these \u2014 this means some dead code were eliminated. Or do you have any issues with the module after minifying it?\n. You can passstyleorclassName` \u2014 same way you would style any other React element.\nSee https://github.com/okonet/react-dropzone/blob/gh-pages/browser.js for example.\n. I'd also prefer to keep this issue tracker for issues, not questions. If you have questions, please ask them on StackOverflow.\n. Sorry for not answering on this. What do you mean exactly? If something not working?. Why do you think this is better than publishing source code and readme? What's the issue now?\n. I often look into source code of other libraries, esp when working offline.\nNot sure what issues you're having but not having .babelrc in just this one package won't solve the issue for you I guess.\n. That is just a coincidence in your case and it won't solve your issue. \nThat's all .babelrc files inside this package's node_modules:\nbash\n$ find node_modules -name '.babelrc' \nnode_modules/attr-accept/.babelrc\nnode_modules/babylon/.babelrc\nnode_modules/depcheck/.babelrc\nnode_modules/escope/.babelrc\nnode_modules/eslint-plugin-jsx-a11y/.babelrc\nnode_modules/estraverse/.babelrc\nnode_modules/jsx-ast-utils/.babelrc\n. Why are you transpiling installed packages in the first place?\nRegarding the package size: I don't think that transferring another 20KB is an issue, is it? By doing so I allow developers to look up the source code and tests for the package, which is often acts better as any documentation.\n. I'm not familiar with browserify so I can't help but it is definitively an issue with it. In webpack, you just exclude node_modules from babel loader.\n. And also manually add README and license and changelog. And babelrc and other required stuff in case someone wants to build from source.\nOn a serious note: I don't get the issue with publishing the source code of the package on npm and won't perform any actions until I'm convinced this is bad.\n. I've just deployed latest version to http://okonet.ru/react-dropzone/ and tested with Win7 in both IE10 and Chrome without any issues.\nCan your issue be related to this change? https://github.com/okonet/react-dropzone/pull/173\n. Your response does not answer my question...\n. Sorry, I don't follow. What 4.0.0? The latest version is 3.5.1. See https://github.com/okonet/react-dropzone/blob/master/CHANGELOG.md\n. Not now. Let's wait if Jest will allow something like this.. It works for me on Mac OS X 10.11 in Chrome 51.0.2704.106 (64-bit)\n\n. I've just published https://github.com/okonet/react-dropzone/releases/tag/3.6.0 with a possible fix for this one. Thanks @MaffooBristol!\n. See https://github.com/okonet/react-dropzone/pull/202\n. Fixed in #194 \n. Please update to v3.5.2\n. A follow up fix in #197 \n. Looks like this breaks the tests...\n. @nuc thanks for researching it. I've reported an issue to https://github.com/facebook/react/issues/7198. Let's see what they think about it. In the meantime, I'll skip the test and merge your PR.\nThanks again for contributing!\n. I've submitted a fix to the name regression to react: https://github.com/facebook/react/pull/7199\n. > Added two small tests for disableClick though.\nAwesome!\n. v3.5.2 is \ud83d\ude80  \nThanks @nuc!\n. Looks like not all props are removed...\n. @nuc that would be great!\n. Duplicate of #191?\n. Should be fixed in https://github.com/okonet/react-dropzone/releases/tag/3.6.0\n. Duplicate of #193 \n. You shouldn't compile sources from node_modules. Exclude them in your webpack config. \n. Also, in package.json the main field is set to the compiled JS file. \n. I'm not accepting feature requests since I don't have time to work on this library. But I'll be happy to merge a PR for this one. It sounds useful to me. Please don't forget to add tests before you submit it. Thanks!\n. Done in https://github.com/okonet/react-dropzone/pull/237. react-dropzone is a client-side library that enables a drag'n'drop interaction with files. It doesn't support any of uploading methods that you should implement yourself via callbacks.\n. I don't think you can do that. Instead, write your custom upload for the blob you get. \n. That's awesome! Thanks for contributing. To be honest, I think this should not be a part of the library but should live in a userland and this lib should allow it by providing a callback. Some users might want size validation but the other part might want to do something more complex or different. This doesn't scale ATM.\nMy idea was to have a callback function that users can pass along with other props and it should get called in onDrop function. I might get some time to work on it soon-ish, but if you feel like it, please go for it!\nDoes it make sense?\n. @lemuelbarango can you please also update the README?\n. Examples are using createClass that has auto-binding so this isn't needed. \nAlso for perf reasons this is an anti-pattern. You should add binding in the constructor if you use es2015 classes. \n. What you want is just passing the active state flag down the tree as a prop. PR?\n. It's totally possible to extend childrens props. I also like function syntax. It could do both I think. Please feel free to create a PR and let's discuss in it. . Might be a JS error? Did you look in to the console?\n. Unfortunately I don't have Windows machine, so if you can narrow down and fix a bug, I'll be gladly accept your PR.\n. Hey! I think the blog post is more appropriate for stuff like this. I could add a link into the README. \n. BTW I just saw this: https://css-tricks.com/image-upload-manipulation-react/?utm_source=javascriptweekly&utm_medium=email\n. Although it's okay for quick prototypes I don't believe this is good for real projects and I want to discourage this. Why someone would like to have a browser version? What's the advantage here?\n. I'm not sure I'm following. There is a dist/index.js if you install it from npm ~~but it doesn't work in the browser out of the box. Would this be enough for you or you want to make it UMD-compatible?~~\n. There is a dist in this package. You should use npm to install it. See README.md.\n. Hey! Would you like to submit a PR?\n. Seems like the compiled source is affected? But this isn't reproducible on the demo page afaik. Can someone post a steps to reproduce or even better create a repo?\n. We already doing this: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L4. It should be closed on latest version. . Not sure how this is helping to differentiate between different dropzones/inputs. Can you provide an example? Wouldn't it be better to solve in the user-land with, say, a list of file arrays?\nAlso, if you want me to merge this PR, please add tests for this change.\n. Also, please fix ESLint errors: https://travis-ci.org/okonet/react-dropzone/builds/152982259#L457\nYou can npm run eslint:fix to do so.\nNot sure how you managed to put these into the commit keeping in mind that I've lint-staged set up for this repository that should automatically fix such issues.\n. No, bower is basically a dead project at this time point. Just use npm install react-dropzone and add the dependency to your package.json\n. I'm not sure what's this issue is about. Can you provide more information of what is the expected behavior and what are you seeing? Is this happening because of this library? Or some of your code? Best way would be to create a separate isolated GH repo with your case + description of what is going on.\n. I've just tried it in Chrome Canary and latest Firefox and it worked fine with .pdf. Are you seeing in a specific browser?. Thanks for clarification. You can't get the file name during the drag. As a workaround you should use mime-types instead.. I'm open for PRs to the documentation or even implementation for this if someone up to.. Related to #459 #477 . I don't think this is in the library scope. Please ask the question on StackOverflow. Closing it here.\n. Please report this to attr-accept and provide your use case since I'm not sure what you mean exactly. \n. Also, I don't think your example is valid according to spec:\n\nA file extension starting with the STOP character (U+002E). (E.g.: \".jpg,.png,.doc\")\nA valid MIME type with no extensions\naudio/* representing sound files HTML5\nvideo/* representing video files HTML5\nimage/* representing image files HTML5\n. Please report it to the browser vendor. This library doesn't manipulate these values. \n. Hey! \n\nFirst of all, I'd like to thank you for your contribution. Can you explain how is that different from just passing the style={{height: 500}} as a prop? I can't see the difference now.\nI like that defaultStyle got separated from style, though. This change, although, made the let style redundant. This is why the Travis CI build fails. Please fix linting errors and I'm good to merge.\nBTW, did you do npm install after checking out the repo? Since in this case you should have gotten a pre-commit hook with linting.\n. Thanks for the explanataion. Honestly, I don't think having implicit styles is better. Imagine the default styles were changed in the next version. With your approach, it will be a breaking change that will affect lots of users. I even think that no default styles should be in the library itself and I think I'll make this change in the next version (if I ever find time to release it).\nThoughts?\n. Re: eslint \u2014 yes, this is what it says, no let for variables without reassign.\n. @id0Sch why would you prefer to depend on the lib's styles? There isn't much in there and I guess most people would like to style it their own they. But I'll give it some more thoughts.\n. I've created #221 so let's discuss there.\n. I've decided to close it for now since this will require some more consideration and investigation. Please see https://github.com/okonet/react-dropzone/issues/221 for the discussion.\n. See a discussion also here: https://github.com/okonet/react-dropzone/pull/220#issuecomment-243050289\n. @ajwagner777 the issue isn't old and still actual. Let me answer your questions:\n\nAdd a class to the container that would allow styling hooks for the different states (default, drag over, invalid, others?)\n\nThere is a way of styling the dropzone the way you want. There are actually a few several ways: you can use className or inline styles. So, if you're using a className it will ignore inline styles completely. There is no documentation on that but if you look at propTypes here: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L267-L272 you'll find all of them.\nI'll gladly accept documentations PRs since I don't have much time to work on this project now.\nThis issue is more about how should default styles be handled. I think the best way to handle that would be by providing some default styles as a separate export, that isn't applied by default. So, the styling, in general, should be done in the userland. As a fallback you can import default styles and apply them just to start quickly.\nThoughts?\n. @unbalanced wrote on the PR (https://github.com/okonet/react-dropzone/pull/220#issuecomment-243216577) so I'm moving it here:\n\nHey guys,\nI love to see components released with default look&feel. it easier to start using components that already has some default look.\nThe problem i see is that Inline-ing css in components makes it harder to reuse the component in different projects, since different projects usually means different sizes/colors/etc.. and some inline styles are just not possible to override (they are strong like !important)\nNote, it might not be the case here, but many components have more than just one div and thus the inline styles on child elements are not reachable to override like in DropZone and this is where inline styles suck the most.\nWe'll have a better developer-experience and a better overall-modularity by using className. \nIf we'll let the component-creator to set his default lock&feel and the reusing-developer to easily override css rules if needed by extending the default class of every html element that the component is creating.\nWDYT?\n. Awesome! Thanks!\n. \ud83d\udc4d\n. Why are you using it on mobile devices? It's not designed for them. And what do you except it to do?\n. > We are using React-Dropzone to handle all the file uploads. It works well with Cordova and iOS. \n\nI don't get it. How are you using dropzone on mobile devices? This library is built upon drag'n'drop API which doesn't exist on mobile devices.\n. I think in your case I wouldn't include the react-dropzone for the mobile version at all. Since you're creating a separate build (AFAIU) I think it's better just to conditionally include <input type='file'/> for mobile devices. \nI'll close this one since this lib isn't targeting Android or iOS if it's okay.\n. Great!\nYou can skip the line with eslint-disable-line. \nNot sure how to test this either. \n. @MaffooBristol can you fix the remaining ESLint error so I can merge it?\n. Thanks for opening this one. I'm actually not sure why the erasing is needed. It doesn't make a lot of sense to me since then you choose a new file/s from the dialog box it will set the value.\nI'm not the original author of this lib and will need to follow the code to understand this one by id opt for remind this line from the lib and release as a major version to guard in SemVer. \n. I think the proper way would be having the state decoupled from the input element so we don't rely on the browser implementation since it can be inconsistent + introducing a prop that reflect the mutability of it. So, basically, I'd suggest re-implementing the algorithm. We should ensure that the local component state is always in sync with the input state as well. Thought?\n. @Austio awesome! The benefit of doing it that way is also the testability. So, please don't forget to include tests.\n. Looking at their code https://github.com/enyo/dropzone/blob/master/dist/dropzone.js#L1109 I see that it's not a part of the standard, so I don't think this will be included. But you can borrow this code from them and implement your own size getter or use something like https://www.npmjs.com/package/browser-image-size.\n. Feel free to submit your fix as a PR. I don't think this is an issue with this lib rather than with the browser/device. Feel free to re-open if you have something to add here. Otherwise, I'd ask on StackOverflow or other forums.. You can pass a callback for the onDropRejected callback:\nhttps://github.com/okonet/react-dropzone/blob/master/src/index.js#L117\n. Tests are failing on CI.\n. Yeah, we are using jsdom and it doesn't have all browser APIs out of the box. You have to mock it I guess. \n. Can you please enable this https://github.com/blog/2247-improving-collaboration-with-forks so I can play around with it?\n. Closing it in favor of https://github.com/okonet/react-dropzone/commit/33813573 which is already been released in https://github.com/okonet/react-dropzone/releases/tag/v3.8.0. Looks like you forgot to bind this for onDrop. \nBTW you don't need the Container element. You can write:\njs\nexport default connect()(Dropzone);\n. js\nonDrop = files => {}\n. It should work as expected with CSS modules. Should be a bundling issue. Check if it is a string by logging it. \n. Thanks!. file is an object so I'm not sure how it can work on win/Linux. \nAlso, you are looking for onDropAccepted method. \n. Yes, that's correct if you haven't installed the wrong/incompatible version of react and react-dom packages.\n. This is how it looks for me after npm install react-dropzone:\nnode_modules/react-dropzone\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 dist\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 index.js.map\n\u251c\u2500\u2500 mocha-environment.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 test.js\n\u2514\u2500\u2500 webpack.config.js\n. This wasn't released yet and I'll release it as part of 4.0 which can take some time since there are many changes in there.\n. You can do with photos whatever you want. You'll get all required data in the callback function. It's then up to you how to handle it. \n. Please provide browser and lib version you're using. A repository with there I can reproduce the issue would also help. \n. Dropzone doesn't handle uploading. It will reject files that are too big though. Or am I missing something?\n. @teckore why are you passing it as a string? Or it is a wrong example here?\n. You can do it with onDropRejected callback\n. Same ay you'd use onDrop\nSee https://github.com/okonet/react-dropzone/blob/master/src/index.js#L117\n. Documentation PRs are welcome BTW\n. Right now it's not possible to say how big the filesize is until user drops the file. So, dropzone will act as it would accept it but when you drop it, it will reject the file.\nI don't know the way to overcome this and any help would be appreciated. I'm closing it since now it's working as expected.. What browser are you using? I'm using File API and here is the MDN article on that that uses type property. So I guess, the problem is that your browser doesn't deliver this information.\n. I definitively don't want this to be a part of this library, TBH :)\nBut I'm gladly accepting PRs to the README that make this clear.\n. This is the duplicate of #104 then\n. Is this a part of the standard. I'm sure I didn't see that <input type=\"file\"> accepts an array as accept attribute. Mind pointing to the spec?\nIf it is a part of the standard, I'm happy to accept a PR for https://github.com/okonet/attr-accept which implements this behavior in JS.\n. I've created an issue there: https://github.com/okonet/attr-accept/issues/3\n. Hmm? I'm not what you mean to be honest. \n. You'll have to implement this yourself using the onDrop callback. \n. Please use stack overflow for questions. This issue tracker is for issues of this module. Thanks!\n. Sure. Make a PR and I'll merge it! Thanks. \n. Awesome! Thanks!\n. I've just tested with Edge and everything works fine. Can you be more specific what steps to reproduce I need?\n. I can reproduce in IE11 though...\n. Yes, I think we could remove dropEffect in IEs for now. So if you can make a PR that would be great.\n. js\nonDrop: function (files) {\n   this.setState({\n        files: this.state.files.concat(files)\n   });\n}\n. @akkie I'm not sure we should change the signature of this method. In the described use case the onDrop method should be used to implement the custom logic. What we could do to make it simplier is to export filter function i.e. allow custom filters. See #104\n. BTW for your example of showing that some files didn't get accepted, it's not even needed to export anything. So you could do:\njs\nonDrop = (acceptedFiled, rejectedFiles) => {\n    if (rejectedFiles.length) {\n        // show message that some files were rejected\n    }\n    this.setState({\n        files: acceptedFiles\n    });\n}\n. I've released a new version: https://github.com/okonet/react-dropzone/releases/tag/3.7.0\n. Dropzone handles clicks and it will bubble the event up to its parents. \nhttps://github.com/okonet/react-dropzone/blob/master/src/index.js#L276\nYou should prevent the event going down the tree in your handler if you want to prevent this behavior.\n. im not quite sure about the behavior. Can you create an isolated example with a vanilla JS and DOM? We probably should stop propagation as you said. Mind creating a PR?\n. Yes, I'd do something like it. It would be great to get the isolated case in the end if not the PR with a the bug fix.\n. I've tried to add a test but the bug isn't really introducible. This is what I've used:\n```jsx\nit('invoke onClick only once', () => {\n      const onClickSpy = spy();\n  const component = TestUtils.renderIntoDocument(\n    <div id=\"content\" onClick={onClickSpy}>\n      <Dropzone>\n        <div>Click me</div>\n      </Dropzone>\n    </div>\n  );\n  const content = TestUtils.find(component, '#content')[0];\n  TestUtils.Simulate.click(content);\n  expect(onClickSpy.callCount).toEqual(1);\n});\n\n```\nInterestingly, even if I remove your fix, it is still 1. No matter where I simulate the click, it only triggers 1 call :/. I'm trying Enzyme today and will see if I can repro it on JSDom. Ill let you know. It's been fixed in https://github.com/okonet/react-dropzone/releases/tag/v3.8.0. Please upgrade. @pouu69 I'm not sure what you're saying. Is it still reproducible in 3.8? . disableClick={true} will disable the click event on dropzone. I'm not sure what you expect and what's the actual result you're getting so please create a repo where I can reproduce it. . You're probably right. Can you create a PR with the fix and a test for this please?. @weisjohn it should have been fixed in https://github.com/okonet/react-dropzone/pull/335. Are you certain it is the same issue?\nIf it's a different issue, please create a new GHI with a minimal root cause. Even better would be a PR that would fix it. \nThanks!. That's a bad advice since it will break click to open file dialog functionality AFAIK. Also it seems that it was resolved or is it still happening?. @LaustAxelsen the reason for me saying this is that I tried it and it broke something for me. I can't remember what was it though.\nI think this issue should be fixed in this package. Anyone?. Can someone create a reproducible example?. Can someone create a reproducible example here http://react-dropzone.netlify.com/ and paste code sample here?. I've spent some time on this one today and I still can't reproduce it the way the issue title says. Here is what I tried:\n```jsx\n {\n   console.log('parent')\n }}\n\n<Dropzone\n   disableClick={false}\n\n\n```\n\nThis is example code from one of the comments. If you paste it on https://react-dropzone.js.org, depending on disableClick prop being true or false you'll see either a file dialog or parent in the console but not both. I've tried the same code with CRA setup and the behavior was exactly the same. So, if you experience this issue, I still encourage you to create a minimal reproducible example as a GitHub repository and share it with me.\nAs for @kylepotts example, it's less trivial. I've tested the code you provided at https://react-dropzone.js.org/ and couldn't reproduce the issue with invoking twice. But I could reproduce it when checked out from GH locally! Looking at your example, it seems to be a different from the described here since you don't nest the button element in the Dropzone.\nChanging the example to the following (note how I nest a button in dropzone):\n```\nlet dropzoneRef1;\n <div>\n    <Dropzone ref={(node) => { dropzoneRef1 = node; }} onDrop={(accepted, rejected) => { alert(accepted) }}>\n      <p>Drop files here.</p>\n             <button type=\"button\" onClick={() => { console.log('this will execute twice'); dropzoneRef1.open() }}>\n      Open File Dialog\n  </button>\n    </Dropzone>\n</div>\n\n```\n(You can paste it into one of the example's code on https://react-dropzone.js.org/ to test)\nThis will open the file dialog twice but it will log once. That is expected behavior. Since by default Dropzone will open File Dialog when you click on it. See https://react-dropzone.js.org/#proptypes. If you don't want this behavior, you have to use disableClick prop on it.\n@kylepotts I think there is another issue that causes this but I don't understand what it is. I've tried to reproduce it on webpackbin: https://www.webpackbin.com/bins/-Km_p_Qa7aTNt4sn5PxC but it works as expected there. ~~~Any idea?~~~ \nThere is a React issue about this: https://github.com/facebook/react/issues/1691. @anuragCES let's fix the failing test before I do please.\n. Let me cut the release.\n. I'm not even sure this is the right choice for a custom UI like this.\nWhat is your proposal would be? Add a callback for each of onDrag* events? I think this would be possible.\nAnd looking at the blame e.stopPropagation(); doesn't seem to be required as far as I can say: https://github.com/okonet/react-dropzone/issues/74\nEither way, if can find a good solution that doesn't break existing use-cases I'm all for extensibility here. Just file a PR and don't forget tests.\n. I assume this can be closed since now react-dropzone implements all of the onDrop* hooks.. I like the approach! Shouldn't we always check if we are dealing with files and do nothing if not?\n. Makes sense. Can this be made into a PR with tests etc?\n. Any news on this one? Also, can we check if it also works with files from download bar of the Chrome? . One of the solutions to avoid the exception would be wrapping it in try ... catch block I guess.. It won't work in IE and Safari :/. It's probably doe to some browsers not reporting mime types. See https://github.com/okonet/react-dropzone/issues/276. PR anyone?. Does anyone wants to take over this and create a PR? I'm happy to re-open it.. Is this related to the browser? Can you try reproduce it without this module and react?\n. Is this related to https://github.com/okonet/react-dropzone/issues/241?\n. How can this be related to this module? We don't do anything fancy with the prop just setting it on the input element.\n. First of all thanks for your contribution and sorry, I dropped the ball on it. I'm still not sure the design of this feature is complete enough. For example, when trying to drop several files, each of this files can be rejected with a different reason. Question: what reason will be passed in this case?\nI was thinking about implementing custom validators and would like to discuss it in a separate issue here: #321. Closing based on #321 . Hmm, I think it's worth trying @bmueller-sykes \n. @bmueller-sykes please just update this PR. Please fix the code style the CI passes and it's good to merge.\n. See https://github.com/okonet/react-dropzone/releases/tag/v3.7.1\n. How could you select files that aren't comply to accept attribute?\n. It should not be possible. Please report to windows. I'll close it here. \n. I think Stack Overflow is a better place to ask such questions since this Issue tracker is for issues of this library. Thanks!\n. I'm working on it. Sorry for that.\n. Should be fixed in https://github.com/okonet/react-dropzone/releases/tag/v3.7.2. Sorry for the mess. I was switching to semantic-release and messed a few things up.\n. Duplicate of #261 \n. It's fixed in https://github.com/okonet/react-dropzone/releases/tag/v3.7.2 and 3.7.1 is deprecated.\n. I've just tried it with \n- Not reproducible in FF 47.0 \n- Not reproducible in latest stable Chrome\n- Reproducible in 49.0.2\nSo I believe this is a Firefox regression and would report it there.\n. I don't know how to fix that, keeping in mind we didn't change anything in the code. I'm open for a PR though.\n. What about dragcancel? Shouldn't it cover this case?. You're right, there is no such even. Never mind my message. I'd rather prefer this to be fixed in Firefox. Please file an issue at bugzilla.. Should be released in a few minutes. Thanks for the contribution!\n. There are different callback available: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L316 so you can hook in and react to different user actions as you wish. So I believe yes, you can implement anything you want.\n. Sorry, I can't give you an example. You can hire me to implement this though.\nEither way, you'll still need to handle global drag events on your own. See #149 \n. Duplicate of #209 \n. Thanks for the PR!\nTwo things before I'll merge it:\n1. The build fails due to some eslint errors. Please fix those.\n2. I think we'll need a test for this new code. It should cover the case you've described in #252. Can you please add it?\nBTW please do npm install \u2014 it will install lint-staged that should prevent eslint-broken commits.\n. Just as a hint: you should have seen these before the commit. This project has an integrated pre-commit hook. Do the npm install to get it installed.\n. @aaronbeall any updates on this PR? Do you think you will be able to add tests for this case?. > my quick research made it sound like you aren't expected to test a wrapping element with TestUtils\nI'm not sure what you mean by that. Can you elaborate please?. @aaronbeall I was able to repro the case in tests: https://github.com/okonet/react-dropzone/pull/309/files#diff-3d2fceb7429c5721d178682a76d75809R514\nI'm skipping the test for now but it is probably a good idea to move it to this branch and land as a part of this PR. Let me finish my work and let's update this one.. This turned out to be a bit trickier and required me to add onClick callback support so I'm fixing this in #312. Thanks for pointing out and your effort!. It can be set through inputProps as you already figured out so I'm closing this as invalid.\nIf you have a proposition of how to make it better, I'm all ears \ud83d\udc42 \n. I understand, and name should probably go away for consistency reasons.\n. > Unfortunately inputProps was not mentioned in the readme.\nYou're welcome to submit a PR that fixes that :)\n\nIs there some convention to use inputProps for these values\n\nNo, this is completely custom and made into the project to solves such issues.\n. I'm not sure about this one since I was hoping to avoid patching browsers in this library. Doing it will also require patching https://github.com/okonet/attr-accept or am I wrong?\nIs there even a list of such inconsistencies? Can you point me to it? Do you mind creating a PR that solves this issue?. I think documentation PR would also be helpful!. @Kepro @Kitanotori any news on the documentation PR? If you're about to do it, please do it against this branch: https://github.com/okonet/react-dropzone/tree/styleguide. @philippfrank docs are now in README and I'm working on the new styleguide ATM here: https://github.com/okonet/react-dropzone/pull/313 so you probably want to contribute to it.. @rodrigc It doesn't. Not sure what's your question is about.. I'm not sure this issue can be tackled right now. I realize this can be very annoying but it seems impossible to fix at this moment. If anyone have a suggestion \u2014 feel free to create a PR.. @Ondoher if you have a proposal for a robust and lightweight solution, I'm all ears. I think https://github.com/jshttp/mime-db has all the needed information but bundling this amount of code to the client app is just too much IMO.. @Ondoher first of all, I won't tolerate the demanding tone in this repository. You can demand something if you pay for it. This repository, although, says explicitly that everything provided here is for free and you're use it on your own risk. See the license file.\n\nYou have written software that fails to work properly on a common platform. \nThis is something that you should care about and try to fix.\n\nI don't think you understand how open source works. If it doesn't fit your needs, then don't use it. If you have a solution to this problem, then create a PR and we'll discuss it.\n\nOr at least provide the tools to put the caller in control of validation.\n\nYou can use onDrop callback for the validation. https://react-dropzone.js.org/#proptypes. No, there is no other recommendation as to use top-down approach. This is the idiomatic React and you should not rely on children in your component.\nI wouldn't care about perf issues in this case until you confirm you have some because of the bind.\nUsing ref will get you access to DOM node but this is not what you're looking for either way.\n. Yes, I understand that. And therefore in React you have this.state that you can modify when onDrop occurs.\n. That's because there is no such example.\n. Thanks!\nSince you owns the onDrop callback, you are free to access any variables you own in your component. Example could help to answer it better.\nI'm closing it since this issue tracker is not for help questions but for the library issues. Please use stack overflow for that.. I would assume it should work but the author of the PR mentioned it doesn't. So you can try and file the PR. I'd also like to see addEventListener there.. @imontiel any news on this one?. I don't know and this isn't in the scope of the library. Please ask this at StackOverflow.. It looks like the onDrop callback will be called with the event instance as an argument as well: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L127 \nYou can obtain the FileList instance from it I guess.. AFAIK React uses Proxy only in Dev mode. Use same way you would do with normal Event object: event.dataTransfer. @jcalfee thank you for your feedback!\nI also think it's out of the scope of this library and thanks to React's composition is easily done in userland. \nI also think that a feature like this will raise the complexity of the project. For example, if you have multiple dropzones on screen, which one should react to the onPaste event?. @jpdevries see my previous comment:\n\nI also think it's out of the scope of this library and thanks to React's composition is easily done in userland.. Hey @matanasa! You have created a second PR in the last few days. If you want to contribute, please work in your private branch and create a PR firstly when it's ready or you want to start a discussion. Thanks!. Thanks! I'm implementing it in https://github.com/okonet/react-dropzone/pull/309. @matanasa I'm not sure what you're doing but you shouldn't change version and add dist files to this repo. Also, before you submit your PR let's discuss it. There are a few open issues about full screen mode but I'm still not convinced it should be part of the lib.. See https://github.com/okonet/react-dropzone/issues/123#issuecomment-264332659 and https://gist.github.com/wvance/c052a57654ea943edee113a180598ab8 for example. Thanks! Mind creating a PR?. Please wait until I'll merge new tests branch so you can add the test case. Switching to enzyme.. You're passing a function that you own. Just make this function accept all needed parameters.. Here is an example:\n\njs\n<Dropzone onDrop={(accepted, rejected) => {this.onDrop(accepted, rejected, 'third')}}>\n  <p>Drop files here...</p>\n</Dropzone>\nand your function could look like\njs\nonDrop(accepted, rejected, myArgument) {\n  console.log(accepted, rejected, myArgument)\n}\nHope that helps.. Thanks! Yeah, those default styles will be removed soon.. Please add steps to reproduce since it's unclear what part isn't working. But afaik there are some inconsistencies in browsers regarding accept behavior. . I wasn't aware you can generate a preview for video files. This can be probably rewritten in a more supportive way. You're probably right about the disablePreview that this should be decided upon this.\nDo you mind creating a PR that will remove the second check?. There is #257 but I somehow think it's too coupled with the implementation. I would like to see a better proposal. Any ideas? Let's discuss in the PR. . Based on a discussion in #321 I'm closing this one.. The example is simplified of course, and the use case with the rejection reason should be handled by it as well (I open for suggestions here). I'm afraid that simple validations are often not enough and I want to keep the surface API of the library minimal.\nI realize the current approach is a simpler one, but coupling the lib with validation purposes tends to increase the number of props and different combinations of them which IMO leads to complexity.\nFor instance, https://github.com/enyo/dropzone is very popular but it tries to solve all use cases which leads to enormous amount of options: http://www.dropzonejs.com/#configuration-options . Yeah, this is what I was thinking about. What is your experience with the similar implementation?. Can you write down an example of how it would look like?\nRegarding the internal validation: yes, some validations could be included for compatibility reasons. The question is how the API should look like for simple extensions. \nLet's say, I'm implementing a dropzone that should only accept:\n\nPMG images\nSmaller than 2 MB\nLongest side is smaller than 500px\n\nIt seems like the onValidate is again too much bootstrap code and probably validation function should be file based?\nSomething like:\n```jsx\nfunction myValidator(file: File): Boolean {\n  const longerSide = file.dimensions  // calculate longer side pseudo-code\n  if (longerSise > 500) {\n    return false\n  }\n  return true\n}\nconst MyDropZone = (props) => {\n  return \n}\n```\nBut this will lack the reason information again :( I don't know a better way of providing rejection information without mutating the input as with the Promise but this again might be too much:\n```jsx\nfunction myValidator(file: File, props: Props) {\n  // Implement a function that returns a Promise?\n  return new Promise((resolve, reject) => {\n    if (longerSise > 500) {\n      reject(\"Reason for rejection\")\n    }\n    // Do whaterver you want with the file Object here\n    resolve(file)\n  })\n}\nconst MyDropZone = (props) => {\n  return \n}\n```\nThoughts?\n. Another frustration point is how accept works. Since it's built-in HTML5 feature we can display rejection on file mismatch ahead of file being dropped. This won't work with any validations (fileSize doesn't for instance) until the file is actually dropped. \nI don't know how to communicate this in a way it's more clear.. @kandros I think your confirmation use case could be solved with the Promise as well. What do you think?. @MichaelLeeHobbs my goal here is to not expand but even shrink the API. \nSo, just to make it clear, I 'm thinking about some generic way of adding a custom file-based validation before the onDrop method gets called. This validation step would be used internally as well to perform file type check etc. but I'd like it to me extendable so I could remove minSize and maxSize as props.\nSo basically I want to integrate what you do here https://github.com/MichaelLeeHobbs/dropzoneMVP/blob/master/dropZone/DropZone.jsx#L79-L88 into the library since it already has some validation step and calls onDrop with acceptedFiles and rejectedFiles. This should allow users to hook into the Dropzone's validation step and be able to alter those acceptedFiles and rejectedFiles based on their custom rules.\nRegarding the syntax, I'm not sure if callback or Promise is a better API here. Promises can be used to do some remote-type validation but they increase the complexity since now the onDrop is called in async way. Thoughts?. Yeah I even feel that there is no need for a separate function since this can and should be done in the onDrop callback. The question is if dropzone should still handle accept attribute and call the callback with 2 arrays instead of just one?\nI think it should since accept is the part of HTML5 and dropzone wraps <input> but stuff like size validation should go away in favor of custom validation. . Yes, thanks everyone for the feedback! I'll do that in the next major release since this will be a breaking change.. Hmm, it should have fail the test but it didn't \ud83e\udd14 . I'm closing this in favor of #332 . You're welcome to submit a PR that fixes it!. Related to #321 . Since you won't have the full information about your files before you drop them, this feature should be implemented in the onDrop callback as well.\nThe implementation is up to you but I imagine it's pretty straightforward since you're dealing with your own state.. Thanks! Can you please also add a test for that?. It's already released as 3.9.0. The reason is that it won't be supported by input element since it's not a standard AFAIK . @smeijer can you make a research and check if arrays will work with the input . Hmm, this seems very fragile to me. If React changes how this behaves this will break lots of code.\nWhy not just use strings as the standard prescribes? Seems very simple to just use .join(',') in your code. \nThanks for your effort but I really like this to stay in line with the standard which doesn't allow arrays.. Added documentation here: https://github.com/okonet/react-dropzone/blob/master/examples/Accept/Readme.md. This is your responsibility to implement in the onDrop callback. I'll also remove size validation from the upcoming major release so please be aware then upgrading. . This is the browser issue not this library since it uses HTML5 APIs. If you have an idea how to fix this please create a PR. . I don't have anything but I can do a research and work on this case an a paid basis. Write me an email if you're interested. . Awesome! Thanks!. First of all, thanks for your contribution. Please add a description of why you've created this PR.\nAlso from what I can see this is gonna break lots of UIs because of how button is styled in the browsers. Do you think we could do this with aria- tags somehow without changing the markup?. @forabi I think you could reset, but AFAIK there is no really reliable way of doing this. But I agree accessibility is an issue now. Just wondering if there are more backward compatible solutions.. Just FYI according to: http://caniuse.com/#feat=dragndrop\n\nIn Firefox, the dragstart event does not fire on button elements. This effectively disables drag and drop for button elements. . I've received a second PR that should fix this issue: https://github.com/okonet/react-dropzone/pull/340 and from looking at the code I prefer it since it introduces much less new code. What are your thoughts? Does the second one missing some edge-cases that aren't covered in tests?. Yes, can you please add a description of which exact problems it is solving?. @ryyppy do you want to help me this one?. #344 might be outdated but I'm still interested in merging it so after #468 is done, I'd love some help on this.. @SpainTrain what's the process for that? Can you help us with that?. Alternatively we could try reason and generate types from it. I know people who could help us with that. Is there an interest?. Seems stalled to me :/. Hey @aymericbouzy! Thanks for the PR. \n\nYou can see here how to extend props with the state here: https://github.com/okonet/react-container-dimensions/blob/master/src/index.js#L54 Mind doing something like this?\nAlso I'm wondering if it's a good idea to pass the whole this.state down the tree since if it will be extended or changed at some time point, it might break someone else's code. Probably this method act as proxy and map internal state to some generic argument names? Or at least we should probably explicitly filter out arguments we'd like to pass. What do you think?. > Totally makes sense to provide only the relevant parts of the state, but I wasn't sure which and how, that's why I suggested it this way ;) Should I rename the properties active and rejecting, or should I keep the same names?\nI'd keep same names for now on. Also, what in your opinion should be passed down?. @aymericbouzy amazing work! It made me think of something I'd like to start a discussion here for.\nI'm wondering if we should drop other ways of styling whatsoever and let users decide up on this. The problem right now is that it's impossible to style dropzone with all available methods like CSS-in-JS. For instance I don't think it's possible to style it with https://github.com/styled-components/styled-components ATM. \nThis means a breaking change but on the other hand, it will provide much cleaner API IMO. Just FYI I'm planning to drop default styles as of #221 in the near future either way which will also be a breaking change. I believe this PR could be a good transition to a better architecture.\nThoughts?. @aymericbouzy amazing work! The next version will be released automatically soon.. Yeah I saw it. Don't like having expressions in CSS though. . \n. \n. @DaZzz and @oliverturner thanks for contributions!\n@DaZzz I like it! What I'm not sure about is the pseudo-3d feel of it. Another concern is that it doesn't have no react resemblance in it. This is the concern also for my 1st version.\n@oliverturner it feels too noisy for me. Too many lines and different perspectives doesn't really help here IMO.. @oliverturner it's about the number of intersections :). I've tried some modifications of @oliverturner and @DaZzz ideas. Thoughts?. \n. \n. It seems that @DaZzz version is the favorite one. I like it as well and my only concern is that it lacks of \"dropzone\" sign in it which I'd like to keep. @DaZzz could you try something like https://github.com/okonet/react-dropzone/issues/343#issuecomment-277058556?. @kuzminadya this looks too similar to http://www.dropzonejs.com/ and I want to avoid this.. @DaZzz I like the original much more. This looks very cartoony for some reason :/ I guess that's because of 3D which I don't really like. How this gonna work with just one color (B&W for example)?. Another attempt of stylying the \"d\" letter:\n\n. @DaZzz can you provide me with the Sketch / SVG file for your original version? Probably a PR?. Nope. This can be closed. Thanks!. @ming-soon thanks for the PR! This is looking promising to me. Let's address feedback from @ryyppy and we're almost there I think.\nOne more concern is deprecating of some props. We should probably wait with this PR until next major release since I'd like to use https://github.com/Aweary/react-is-deprecated and I don't know how this will work with Flow. Ideas?. I wanted to remove style management before proceeding with this one. But it's taking too much time so I'd appreciate any help. @SaraVieira In both I guess since after removing style management this one will need to be updated. . Yes, please add the sketch file to the same folder. I'll take it from there. Thanks again for your contribution. . Thanks!. Please ask questions that aren't issues directly related to this library on StackOverflow.. 1. There is an ongoing discussion about allowing only files here #255 \n2. If you want to propose an enhancement, please create a PR and we'll discuss it from there.\n3. If there are other issues you want to report, create a separate issue for each of them with steps to reproduce and minimal examples.. I think this should be implemented as a separate component since it is coupled with the textarea/input by design.. this.setState is async in React. Try using a second argument which is a callback function to do the work.. https://github.com/okonet/react-dropzone/blob/master/README.md#reacting-to-user-input. Please note that I'll deprecate style and className props in next major release in favor of function that returns the component's children (as in README). I'll need to pass your styled children to the component. . Here is the working example: https://github.com/okonet/react-dropzone/tree/styleguide/examples/Basic\n\nI've tried this.onDrop.bind(this)\n\nThis should fix your problems.. the example I sent you is working. So it must be something with your code. Try to debug a minimal use case. . Hmmm. After some thought I even think that passing the whole dropzone' state to children isn't that bad idea after all. Will it solve this use case as well?. Hmm, how will you make the fileAccepted and fileRejected available during the drag? These can only be obtained in onDrop method due to some browser's limitations.. Well, it checks if all files are accepted based on accept prop. Most of the browsers still provide you with some meta-information on types of the draggable items which is used there.\nThe getDataTransferItems method itself is here to remove some cross-browser inconsistencies.. Re: Firefox was working as expected before. I'll need to check again.. I'm closing this of inactivity. Please feel free to reopen.. Mind creating a PR for that?. You're welcome to create a PR for that!. This should have been fixed in #450 . Is the second part of this issue a separate issue? If so, please create a separate issue for it with a detailed description and steps to reproduce. At the moment, I don't have enough capability to work on this lib so if you can fix it, please go ahead.. Looks like Firefox broke it. I believe it should be fixed in Firefox since it looks like they broke the HTML5 API. Fancy to submit a bug to them?. That's because it's not possible to get the size or anything but types during the drag. I'll remove the file size validation from the library API soon to remove this confusion.\nI don't think this is solvable ATM. Feel free to re-open and submit a PR with the fix if you know the solution. . I'm working on the new documentation that will reflect those changes. Default styles will be gone as well, so you will have to implement it either way. For now you can pass style={{}} to Dropzone as a workaround. . See \"Reacting to user input\" in the readme as well. . See \u2191. I was thinking about a component prop there you can pass any react component. In this case it will integrate well with any styling method I think. . Well, the warnings will go away as you migrate to the next version. I released warnings a bit earlier to make some time for people to start the migration but you're right \u2014 it might be hard to see where it is coming from. I'm open to any suggestions. . Thanks!\nThis project uses semantic release thus there is no change log. Instead it uses https://github.com/okonet/react-dropzone/releases\nAs for major version: I'll make a bump then I'll remove the deprecated props. Right now you still can use props so there is no breaking change. . @shwin7 you'll have to do it manually in the onDrop callback. Since the behavior of the validation outcome isn't clear and heavily depends on the project's needs, this is the proper way of doing it. So, basically, you'll end up doing something like:\njs\nonDrop = (files) => {\n  if (files.some(file => file.size >= MAX_SIZE)) {\n    this.setState({\n      error: `Some files exceed the ${ MAX_SIZE } limit.`\n    })\n  }\n}. @vict-shevchenko it will become even more declarative this way! Without backing features into the library you can create crazy applications. I don't want to explain all the implications here but trust me this is the right way to evolve :). @rijk not yet. You can still use those props though.. @killroy42 I'm trying to make the migration path easier in the future and I'm sorry it didn't work well for you right now. But you're welcome to help maintain this repo and make right decisions at the right time. I'm doing this in my free time and don't have an ability to predict all implications. \nDo you have any constructive feedback on how solve this better?. BTW the less helpful thing you can do is to come here and say how many hours of your life I've wasted by doing this free work.. No but you're welcome to implement one. Please checkout styleguide branch. . What is this suppose to fix? And why should this be Dropzone's concern? IMO this should live in the userland (ImagePreview component).. My concern is that it increases the lib size rather significantly for a tiny edge case. https://github.com/blueimp/JavaScript-Load-Image has this solved and probably should be used instead. . Another idea could be to implement the image preview component separately and include it as a part of the library. . Let's try this out and see how it feels. . I'm not sure what you mean by \"remove a file after dropping\". Please elaborate.. This should not be part of this library and should be implemented by you depending on your UI. . Sorry but I'm closing it since it's not really related to the library and it's not a bug. Please ask questions on StackOverflow. . I'm working on it in https://github.com/okonet/react-dropzone/pull/313\n\nthere are several things that are deprecated\n\nNone of them is deprecated yet but they will go away in the next major breaking release. That's why I suggest not to use them anymore.. Thanks for your PR!\n\nNew option allowGlobalDrops - if true - will allow dropped items to potentially take over the browser window\n\nNot sure how introducing the new prop will solve the #87. Why do you think this can be useful?. @mwolson great work on this PR! My question is if we even need a prop o control that behavior? I can't imagine when the browser default behavior would be desirable in case there is dropzone installed. Do you?\nSecond thing: can you add a test where multiple dropzones are being used on the same page and check if it still passes? Did you actually test in the real browser as well? I know this is very cumbersome at the moment.. Can you please rebase on top of master?. @mwolson just wondering if you also tries this example:\njs\nfunction dragover_handler(ev) {\n  console.log(\"dragOver\");\n  // Prevent default select and drag behavior\n  ev.preventDefault();\n}\nfrom https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop\nIt says it should prevent default browser behavior.. So even if this handler is on document? I'm just wondering if we can go away with just one handler on the document.. Gotcha! Thanks!. Since this isn't an issue with the library, I'm closing it. Please use StackOverflow for questions.. Thanks for reporting it. It seems like an issue. \nCan you please create a reproducible case on GitHub, WebpackBin or here: https://react-dropzone.netlify.com/#basic-example (in latter case please include the example's code here in comments). Duplicate of #243 and #329 . It looks similar to #362. Please feel free to investigate this issue and provide more details. I assume this is also a browser issue.. This is a known issue of HTML5 drag'n'drop implementation and currently can't be fixed AFAIK. If someone have an idea for a fix, please submit a PR and re-open the issue.. See the discussion here #364 . Thanks for the PR! Looks great to me. I originally #342 decided to not expose the whole state object but I can see how this can be beneficial.\nCan you please update the documentation? I think this change should be reflected in it.. Can you please resolve rebase on latest master (and resolve conflicts) and put the space back in the README and it's good to merge! \ud83d\udc4f . Please check out https://github.com/okonet/react-dropzone/tree/styleguide and let me know what you think.. Yes, generally from now on you should submit all docs PRs against it. But I don't think this one is needed since you'll get watch and all nice stuff from react-styleguidist. Right? . I'm closing this in favor of npm start that will start he styleguide server. #313 . Should it go to https://github.com/okonet/attr-accept?. Just FYI this behavior is fixed in Firefox 53+. Great! Can you create a new PR to merge it to master? Or is it there already?. Did you install it via npm? You seem to transpile the source of dropzone with your babel. You should exclude external libraries from your transpilation step.. Yeah, sorry for that. This is because we use some default values internally. This will go away soon.\nSee the related discussion as well #364 . See #364 . Help is always appreciated but now it's mostly about landing this https://github.com/styleguidist/react-styleguidist/pull/330 and finishing the \"design\". It won't be supported by the input element even if we'll implement it in JS. There is a part in the README re this.. I've just tested it and it works as expected with Mobile Safari on iOS 10 so I'm not sure what this suppose to fix.. SSR shouldn't be an issue. It would be great if you could reproduce this in an isolated env. I'll close this PR for now. Please open an issue if you can reproduce it outside of your project. A GH repo would be great.. https://github.com/okonet/react-dropzone/pull/364#issuecomment-282334432. Please ask this on StackOverflow.. Yes, a reproducible repository on GitHub would be a great start. A PR with a fix would be even better.. Closing of inactivity. Thanks for pointing to it. As I understand this should go to the documentation since \ud83c\udfaf react-dropzone doesn't manage dropped files by itself. do you mind to create a PR against styleguide branch?. Awesome! Thanks for this. That's awesome! Thanks for contributing.\nA few thoughts:\n\nYour code will still fail if accept prop isn't set: https://github.com/okonet/react-dropzone/blob/master/src/index.js#L210.\nWhich makes me think if we should we just use try ... catch block for createObjectURL or even better check if the method exists before calling it? I assume this will solve your issue as well?\nI think this is a breaking change and I think there might be use cases to show previews even if a file was rejected.. > I accidentally committed a yarn.lock. Is that fine?\n\nI can live this that :)\nThanks for the PR!. Duplicate of #401 . It would be great if you could submit a PR that implements it!. @DanielZhu submit a PR!. I would be happy to accept a PR!. Closing of inactivity. Good idea. It would be great to have something automated on CI, though.. I mean it would be amazing to generate and publish type definitions when the new version is published. I imaging this should be doable on CI step but I'm open for options.. Oh yeah it would be even better. Would be nice if you could work on it. . Hmm. Ideally we would provide types for both flow and TS. We have a branch with flow typings for the whole project. How hard is it to keep TS definition in alignment if we\u2019d switch to Flow?. Anyone wants to work on this?. Will it work with older React versions or this must be a breaking change?. Probably because of https://github.com/okonet/react-dropzone/blob/master/src/index.js#L378?\n@jochenberger mind creating a new PR that removes it as well?. I think chore commit type doesn't trigger a release. I'll create an empty commit with fix to trigger a build. Or rebase master \ud83d\ude31. Duplicate of https://github.com/okonet/react-dropzone/issues/161 (see the discussion there) + https://github.com/okonet/react-dropzone/pull/336\nCan you collaborate on them please?. Not sure what's happened but it seems this wasn't released. Investigating.. This seems to be a breaking change, right?. I think it makes sense to make a major version bump. The change you're proposing makes it more logical.. Don't worry about the version bump. I'll take care of this during the merge!. Hey @plee-nm I've just added some more examples. Could you please check you branch out, run npm start and test all the examples if they still work? Since you can live-change the examples, try out different states.. I'm looking at how it works now and it doesn't seem to be any breaking changes. We'll still call onDrop with the single file. I think it can be released as patch. Am I missing something?. Thanks for clarification. I think note is enough since we aren't breaking the API.. I'm not sure what you mean If you see a problem with the documentation, you're welcome to fix it.. Oh I got it. The reason for that is the automatically generated documentation with examples that can be found https://react-dropzone.netlify.com (for now, will probably move to .js.org). Please elaborate on \"doesn't work\". Best way to report issue is to create reproducible examples. \nIs a duplicate of #330 or #377?\nI'm closing this one since it's not following the issue template.. IMO such optimizations should live in the userland since they might lead to unexpected behavior. Dropzone component itself is very simple so it won't cost much to re-render. If the contents of it are complex, they have to be optimized.\nSaying that: if you have evidence that Dropzone render times is the bottolneck, I might consider a PR that would implement this. Please be aware that shallow comparison isn't working if you pass functions as callback (and not references to those functions) so this optimization probably won't have any effect for most of the users but additional check will downgrade the performance.. Hmm, should it be just updated to ^0.14.9? https://github.com/reactjs/react-redux/issues/669#issuecomment-293622657. @fritz-c do you think you could make final changes to this PR so I could merge it?. Closing in favor of #430. Thanks for your work on it.. That sounds like a good opportunity for a PR! Please feel free to create it and let's continue discussion there.. Closing of inactivity. What do you mean by that? What steps are needed to add support for it? AFAIK you can just use the npm package from there.. Closing of inactivity. Thanks again for your work on this! Appreciate that you jumped in to it.. Could you please try the official example and confirm if it's working or not working: https://react-dropzone.js.org/#opening-file-dialog-programmatically. Feel free to create a PR. Keep in mind those will be deprecated soon. Nothing really. This should be then done in onDrop callback. Search for a discussion about it. . @ncphillips here is the relevant discussion: https://github.com/okonet/react-dropzone/issues/321. I'm closing this one since props will be deprecated soon.. Not yet. Fancy to create one? See /examples. Already fixed it. Thanks!. It seems tests are failing and by looking at the code there is no coverage for it. Do you mind updating existing and adding new testet for this feature?. Can you show me an example of this async preview generation in code please. I think the direction is good but wondering how this will look like. . One concern about integrating this into the library is that this is only supported in Chrome. And since the library targets multiple browsers and platforms, I'm not sure this is appropriate behavior.\nAlso I remember there was a PR that was trying implementing this but when decided to go with a standalone library that could be then integrated with react-dropzone. https://github.com/okonet/react-dropzone/pull/174\nWhat do you think?. If it works in all modern browsers then it's definitely a good addition to this package!. It would be great to integrate with this module! \nCan you describe the problem in more details so I can take a look?. Thank for creating this PR! I'm trying to fix CI at the moment so after some changes and green tests this can be merged.\nDoes this change need tests be updated? Why are tests not failing now BTW?. Prettier should run in a pre-commit hook so those should be fixed automatically. Not sure why are they still failing.. We should re-think this as https://github.com/facebook/react/issues/1691 is closed. @kylepotts could you please rebase it on top of latest master or merge master in? It should not cause any conflicts but for some reason I don't see the button to do this in the UI.. Thanks for this!. No, the focus of this library is to remain as small as possible and focus on one thing \u2014 drag'n'drop files interactions. The mentioned feature is an image specific one and thus should be implemented by users. Thanks React composabilty it's straightforward to do so without introducing bloat to small libraries like this one. . You can process images on the client-side in the onDrop callback.. Here I try to explain why such features will never be part of this library: https://github.com/okonet/react-dropzone/issues/438#issuecomment-307031166. I like the proposal. Initially this library only had isDragActive and isDragRejected came later as a PR. I'm ready to accept such PR if you're ready to create it.\nI'm not totally sure about name proposals, though. It seems that willAnyFileBeAccepted is limiting too. What about willAllFilesBeAccepted? Same with rejected. Keeping in mind we want to push decisions to users as much as possible (API should allow to do anything!), I think we should replace isDragActive and isDragReject with something more generic like drag state and files validation state.\nThoughts?. @oyeanuj the only thing that can be validated now is the mime type using my implementation of https://github.com/okonet/attr-accept. I think that the 2 is much easier to implement and fits better into current code base. What the API will look like after that change?. I don\u2019t know what is missing. Someone has to implement this. I\u2019m not doing it in my free time for free :). Duplicate of https://github.com/okonet/react-dropzone/issues/276. Thanks for working on this!. I think this is isn't possible with web APIs. Safari supports that because it's a platform thing. If you know how to implement this, please feel free to reopen it and submit a PR.. I think this is a duplicate of https://github.com/okonet/react-dropzone/issues/131. If you have a solution for this, feel free to create a PR.. I'm closing this of insufficient information provided. Please provide a reproducible example, exact versions of node and nom you were using etc.. Hey! Thanks for opening it. Do you want to create a PR that will fix that?. I'm not sure, though, what this issue is about.\n\nThe issue was that the file list is small and text only so the user missed it.\n\nWhat is the file list?\nI'm closing this one of inactivity. Feel free to re-open.. Duplicate of https://github.com/okonet/react-dropzone/issues/409. This was done in https://github.com/okonet/react-dropzone/pull/410. Hmm, this actually makes sense to me. As I understand this will require to modify this line https://github.com/okonet/react-dropzone/pull/410/files#diff-1fdf421c05c1140f6d71444ea2b27638R85 and remove the second condition + update all related tests. \nAm I right?\nThis will be a breaking change, though. But I think this behaviour is more logical. Do you mind creating a PR for that?. @duro I'm not sure I'm following. The signature of the onDrop function looks like\njs\nfunction onDrop(acceptedFiles, rejectedFiles) {\n  // do stuff with files...\n}\nso it's up to you how you react if rejectedFiles are present.. This is not possible because of browser limitations (i.e. \"security\" reasons).. Hmm, I'm not modifying anything but preview property. See https://github.com/okonet/react-dropzone/blob/master/src/getDataTransferItems.js. @caseychoiniere it's not noise but a valuable feedback and I thank you for that. \nTo the issue: they probably work around it somehow. If you're eager to find out and implement it here, I'd be glad to accept a PR.. @caseychoiniere interestingly I have this duplicate issue saying\n\nbrowsers are hidding file path intentionally for security purpose.\ndon't bother trying to get the path, you can't get it\n\nSee https://github.com/react-dropzone/react-dropzone/issues/477. It seems like a Firefox browser issue. Can you please report this at bugzilla? Also, if you know how to fix this, PR is welcomed!. It\u2019s always master. Master is the latest version from the npm. We\u2019re using semantic release. . Not really, please investigate and let us know. Or, even better, submit a PR with a fix. Thanks for digging!. Thanks!. This shouldn't be the Dropzone concern. You can render anything inside the dropzone since it's just a decorator component to allow drag-n-drop functionality. @SaraVieira it's still WIP and I need some help on this one if you have time.. @headzoo looks like https://github.com/react-dropzone/react-dropzone/blob/e1f30525bf7b3d59efd1bf7bc6e8e2b81012340a/src/index.js#L291-L303 isn't being used in the branch.. @donysukardi I like the idea of stealing ideas from downshift. I already have similar approach in mind but I don't have time to finalize it. Feel free to help! Check out my branch and create a PR against it. It needs tests fixed, too. Thanks!. @donysukardi after looking at your PR #620 I don't think it's worth doing TBH. I think it's an unnecessary complexity. Instead, I'd suggest we create a prop on the root Dropzone component that would allow passing a pre-assembled input that would allow customizations but by default, our input would just be rendered inside the container with all required props. Thoughts?. Want to help?. Not sure but a review would be good already. Also let us know what you think of the API. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Great feature request. Do you want to work on this?. @kainanaina how is your question related to this issue?. Thanks @oieduardorabelo for working on this! This is now implemented in https://github.com/react-dropzone/react-dropzone/pull/473. Thanks for working on it!. See https://github.com/react-dropzone/react-dropzone/releases/tag/v4.1.0\nIt wasn't in /releases since I've moved the repo to another organization and some semantic-release functions was not working.. Would you mind creating a PR for this? Thanks!. Thanks!. I'm not sure what you're proposing exactly but I think this is a duplicate of #459 . I'm not sure how this example will help solving the issue. Some Dropzone functionality relies on file.path and might not work properly. See linked issue.\nIf you want to add something the README, please send me a PR.. Thanks for your questions. I think my main work at this stage is keeping track of open issues and incoming PRs, doing code reviews and discussing possible solutions to existing problems. \nI did las big chunk of work producing the new documentation web-site which is automatically deployed using Netlify. \nReleases are also being produced automatically using sematntic-release so it's crucial to understand the type of change PR is introducing before the merge (I use squash commit GitHub UI to write the final commit messages). See https://github.com/okonet/react-dropzone/releases\nI'm planning to create a separate GitHub organization for this project (should I call itdropzone?) to make contributions even easier.. @paramaggarwal I'm open for that. How hard would it be to get there?. Amazing points. I'll add the contribution guide to the readme. For now just do npm start. You could try to fix the first one. I dunno where it's coming from. The second one is by design. . @rkmarks @headzoo Invited!. @headzoo yes! I don't have time to go over all of them but I'd like to be included (but not insist) for the key API decisions. I'm still doing some coding (#42 for example) but would like to stop doing that :). @aganglada helping answering issues would be a great start I think!. @yrshaikh sure! it would be great if you could start by answering issues. @paramaggarwal I'm all for it. Where do I do that?. > You don\u2019t have the permission to create repositories on reactjs\nI can't transfer unless I'm part of that org :-/. Can someone add me as a contributor to /reactjs? cc (and sorry) @cpojer @gaearon @jlongster @knowbody @mxstbr. Okay I have invited anyone (I hope) who said he wants to contribute. If I have forgotten you, please let me know.. @divyenduz haha, there is room for everyone!. What\u2019s wrong with the build step now?. @TrySound I've added you as a collaborator but can we please focus on important stuff before we start optimizing bits? There are tons of PRs awaiting the review as well as issues. This is there help is mostly appreciated atm.. @johnrhampton invited you. Check your email.. Added both of you @karltaylor and @ChristianReifberger . @samueldervis invited. @rolandjitsu your call. I'd like to see as many people maintaining it as possible. I\u2019m not sure how \u201clooking for maintainers\u201d gives ppl this feeling. You are free to edit my initial message if you feel like it has to change. . https://react-dropzone.js.org/ works fine in Firefox 55.0.2 for me. If you have any particular details, please feel free to re-open.. Thanks!. Thanks!. Can you please rebase it on top of latest master?. Let's make this part of https://github.com/react-dropzone/react-dropzone/pull/468. Hey @SaraVieira I see you still using your fork (SaraVieira:master) to do the work. I've invited you to collaborate on this project. Did you get the invitation?. I would rather go with #468 and allow wrapping anything they want instead of providing props. If everyone agrees, I'll close this one.. I can't reproduce it with Safari Version 10.1.2 (12603.3.8). What version of Safari are you using. Please provide a screen video or more details on how to reproduce.. Thanks for working on it.\nI'm not sure about the solution, though. First of all, I don't like the introduction of the focus state and styles since this should be managed by the browser and CSS ideally.\nI'm wondering if something as simple as adding tabIndex={0} to the wrapper component would solve it...\n@SaraVieira thoughts?. Thanks for submitting it! Could you please add a relevant test for it?. @ianhowe76 CI build is failing. Can you please fix it? . Thanks @ianhowe76 for working on this!. @janusch this looks good to me. Please create a PR and try to add tests for this case please.. Thanks!. Why?. Yeah, open source hype contest in action \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude04 . > also to clarify you mean jsnext:main not js:next\nYes, sorry for the confusion.. Whoever will do this should do a research.. Related to size-limit: https://github.com/ai/size-limit/issues/8. @anajavi I don't know and I don't have much time these days so if you can create a complete PR, I'd appreciate that.. Yes. That's the browser's limitation that you can't set the input value for type=file AFAIK. For that reason you have to handle uploads manually and clean up after yourself. If you aware of a solution, please submit a PR.. @mattcarlotta it is always preferable to get a reproducible repository to save maintainer's time setting everything up.. It should be doing this already.. I just checked on the official documentation site and every example worked as expected on my iPhone using Safari and latest iOS 10. So if you experience problems I'll need a reproducible example in a separate GitHub repository. Thanks. . It works on https://react-dropzone.js.org in Safari 10.1.2. Please create a reproducible example that I can paste there and try or create a GH repository.. Well, that's why we need a minimal reproducible example. Often there issues caused by other code that is not related to the dropzone. . Hey. Probably we have missed them. Can you create a PR with a fix?. We will need to update the size-limit check since it is failing the build. . Thanks for working on it!. Hey! Thanks for using this open source software.\n\nCan you optimize the browser compatibility of dropzone?\n\nYou're welcome to create a PR with the fix for this issue. Either way please fill your issue accoring to the provided template. Issues that aren't following it will be automatically closed. I hope you understand.. I have no idea who made those type definitions. They aren't supported by this repository. So you might want to file this bug at the appropriate repository. Ideally, please submit a PR with the fix.. Reopening till the appropriate PR is merged.. The code coverage decreased. Also we should probably update the documentation.. ~~Tests~~ Coverage is still failing.. Can someone finalize and merge this?. @Schmitze333 would you consider finilazing this PR or do you want to create a new one?. In this case it\u2019s probably wise to branch off https://github.com/react-dropzone/react-dropzone/pull/468. @DeFuex could you please resubmit this one from a branch? Thanks!. Thanks for working on it!. Please rename the issue since it's violating code of conduct: http://todogroup.org/opencodeofconduct/. Thanks @SaraVieira for taking this one!. Thanks!. I'm not sure what this PR is doing. Looks like it's just passing a prop down. For that you can just use inputProps object and pass anything you want to the input attribute. In order to add a required prop to the dropzone we need error handling and rejection in case Dropzone is empty when it's required.\nAlso, due to the fact we hide input right now, it will probably not make any difference right now. Did you test this in the browser?. Some tests are failing. Please update tests so I can test this branch.. Thanks for reporting this one. I can confirm there is a bug. Interestingly we have a code that worked in FF as well so this is a regression (maybe even in Firefox). Can you please submit a PR to fix it?. Related code: https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js#L91-L94 and https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js#L125-L129. Thanks but no. I removed this on purpose since it made the library harder to adopt in some cases and introduced extra complexity for reasons etc. We had a discussion in #321 if you're interested.. I think this will become obsolete as soon as #468 is done, right?. @matttti for some generic cases, probably. But the goal is to be able to make the library as less concerned about the actual UI as possible and let developers decide.. I'm closing it in favor of #468 . @matttti there is no ETA on it since I don't have much time to work on it. Do you want to jump in and do it?. :tada: This issue has been resolved in version 6.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. > Please remove them from the bundle altogether. It is only useful for development of the module itself, not useful for developers using the library.\nYou're welcome to do this work. Submit a PR!. @rkmarks can you please write a summary of your changes and the goal of this PR so I can better understand the intent?. Does it affect the produced file size? If yes, lets update the size-limit config then? Otherwise LGTM!. Can you please rebase it on top of master, squash unnecessary commits (esp. with merge conflicts inside) and rename them. Please remove the small etc from them. Thanks!. Thanks for working on this! Let's start with fixing the failing CI, please.. I just tested with Version 63.0.3239.84 (Official Build) (64-bit) on High Sierra and everything works as expected.. Unless reproducible example is added, I consider this is not an issue.. No, no need for a PR. We had similar props before and they were removed because of too tight coupling with user's apps. See https://github.com/react-dropzone/react-dropzone/pull/364#issuecomment-284330207. Yes. Use onDrop callback. . Although I recognize this is as a bug, I can\u2019t accept not properly filled issues due to the lack of time. Please provide with a reproducible example or code and fill out the rest of the template and I\u2019ll reopen it. . See https://github.com/react-dropzone/react-dropzone/pull/468. I\u2019d be happy to merge your fix!. Fixed in https://github.com/react-dropzone/react-dropzone/pull/551. Just don't define accept and it will accept any file.. Could you probably split the cross-env and fix into 2 PRs? I\u2019m usually squash merge and prefer commits to be related to the stuff they implement. . Or, alternatively, please squash the comment into the previous fix commit and I\u2019ll rebase merge. If you prefer rebasing, please add a reference to the bug in the commit message. . @dennisroche thank you for doing this. I'd love if you could work on Contributing.md!. Thanks!. I\u2019m not sure what can cause this since we didn\u2019t change anything on how the component is being exported or built. Can someone investigate that?. Yeah we did here https://github.com/react-dropzone/react-dropzone/pull/510. It\u2019s hard to tell without looking at your code but looks like transpilation issue on your side with your Babel config. Please post how your babelrc looks like and how you import dropzone in your code. . I think the problem is that it doesn\u2019t get transpiled properly. You have to use umd build. Might be a problem with project\u2019s webpack setup. . Does anyone know what the root cause it and can PR the fix?. Seems also related to https://github.com/react-dropzone/react-dropzone/pull/556. Can you please send me a fix for that?. Looks like https://github.com/react-dropzone/react-dropzone/pull/556 introduced a regression. Would you be ready to help fixing it? Probably a null check will suffice. . I\u2019m traveling now but I\u2019ll check what\u2019s wrong here next week and get back to you. . Weird. Travis uses the versions from package.json so I doubt there is a version mismatch. Must be something else.. Have you tried running eslint --fix locally?. @rkmarks @thaddeusreid I just checked out the latest master and tried to commit some changes. eslint --fix did format it correctly (the way Travis CI would expect) so I'm not sure what's going on.\nPlease provide me with more details on how did you format the code so it was passing local checks but not the CI. One thing that can cause this is not latest dependencies being used. Please make sure you run yarn install before running eslint --fix . and lint-staged.. Please provide a PR with the fix if possible.. We'll also need tests that would cover that case.. I'm not sure I'm familiar with this hack. Is it somewhere in docs?\nAlso, what is the problem exactly it solves? Please update the PR description.. Yes, I agree. . Can you please try following the official way and check if it solves it?. Can you please add tests for this? Also, can you please investigate the addEventListener solution and why it doesn't work since I assume it would also solve the issue?. I'm the author of both packages so I don't see any reason for forking it. That said, I'll try to fix the build on attr-accept.. @amiiit what needs to be done to resolve this?. Please create a PR. I agree, nothing bad about having --save in the docs.. Please submit a PR if you want this to be fixed.. Ideally we\u2019d have a PR to close this instead of keeping it around. . It's a wrong project. Why are you referencing FAQ from dropzone.js?. Since dropzone doesn\u2019t hold the state itself for what files are in it it\u2019s possible I. The userland. In other words: You should implement this yourself.. The fact it's a valid MIME type isn't enough if browser doesn't support it. Does it work properly on simple input? As a work around you could use an extension instead of mime type.. It is not true. It create type=\"file\". See https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js#L376. That's amazing. I have a question: if we change the implementation of the library, how do we ensure that types are up-to-date? Can this be added to the test script so it runs automatically on CI. Also, please add tslint to lint-staged config.. Can someone else finish this up please?. Deploy should work now. If not please file an issue. Looks like a big. Can you please investigate and create a PR with a fix?. I\u2019m closing this unless we get a reproducible codesandbox. Yes, please!. I\u2019d be interested to see a solution with the small bundle size . Hmm, I\u2019m wondering if this can be optional somehow. Or dynamically loaded only if needed?. See related work at #616 and related issue #609 . I can't find the associated issue with the appropriate discussion on this one. Can you please link it here?. Feel free to work on it.. Since webpack remains a hard dependency I don\u2019t think it\u2019s a good thing to introduce new bundle tool to the tool chain. This will make project harder to maintain and contribute.. Let's not introduce rollup yet, please. If we going t switch to it, we should switch the whole build to it. Please be aware that it's using react-styleguidist for docs which uses webpack config.. > What's wrong with using both?\nI already replied: This will make project harder to maintain and contribute.\n\nYou should not care about complexity now. I will handle it.\n\nI care about that, though. Since I'm not familiar with the tools and I don't think that the added complexity is justified in this particular case.\n\nSure webpack is a tool of styleguidist here.\n\nWebpack is just fine for bundles, too. We're talking about several KBs of uncompressed code. And I believe we can optimize webpack build even further. Most importantly, GZiped this lib is at ~5 KB and I believe that rollup won't improve this number.. Since latest version of styleguidist doesn't rely on webpack config anymore and can use it internally, I think we should consider merging this rather than trying to migrate to Webpack 4.. ~~@TrySound can you please add some more information on how Rollup makes the UMD build smaller into the PR description?~~\nAh you did already \ud83e\udd26\u200d\u2642\ufe0f . That's not needed since the repo uses me eslint preset that already has prettier integrated. See https://github.com/okonet/eslint-config-okonet. Not ideal but let\u2019s go with this.. Great work! Thanks for fixing it!. @koretskiyav could you please take a look if https://github.com/react-dropzone/react-dropzone/issues/557 is related to this? Also, would be great if you could fill out the summary for the PR. \nThanks!. Thanks!. I\u2019ll merge it when the base branch is green. . Yep, that\u2019s why I wrote I\u2019m going to merge this after tests are not failing anymore :). Up. I will close this one in favor of previously done work that wasn't merged yet since it adds a test case. See https://github.com/react-dropzone/react-dropzone/pull/511. @rkmarks please feel free to merge. CI will release the new version according to the commit message.. Great work on this! I really like how it's shaping.\n\n[x] Please reformat the code so CI is green. It should have happen during the pre-commit hook. Did you skip it?\n[ ] The documentation needs to be updated to explain the change and we'll need example with reading directories.. Inviting @quarklemotion to review and comment. Also, it would be great to sync the release of the directories reader to fit the API.. I think the preview plugin should live in this repo. I\u2019d even say your plugin should probably too. I\u2019m not sure how much overhead setting up multiple packages would be, though. Yarn workspaces should solve it, right?. Totally makes sense to me. Let\u2019s keep thing simple for now and add your module to documentation. . I think the most important part we're missing is the documentation. Can you please add it and we could merge it as is. After that we could extract bits for preview.. @MarinaZadoyanchuk thanks!. Since this one is stalling, I decided to proceed and merge it. Anyone wants to work on the documentation? @quarklemotion do you want to add an example?. Thanks for taking this!. I believe this should be done in the user land so you could decide how to react on such drags.. Hmm, the more I think about it the more I tend to agree with you. Let's reopen and try to merge this one.. @rolandjitsu can you please resolve the conflicts and rebase on the latest master?. @rolandjitsu also I've thought and I think it's a breaking change after all. We'll change the behavior of how callback are being called internally so it might break some implementations that rely on previous one. There is nothing for you to do about it. I'll release it as a breaking change when it's done.. :tada: This PR is included in version 6.0.0 :tada:\n\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Looks like regression to me :( please investigate and create a PR if possible. . It can be indeed. . :tada: This issue has been resolved in version 6.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Have you seen https://github.com/react-dropzone/react-dropzone/pull/468?. I like the idea a lot. One question which I'm not sure is if we should expose the rendering of input to the user land since it's crucial for function. My ideas was to render it automatically inside the root element. How much do we want users to be able to customize it?. That's what my PR is doing now.. My question is more on a API part: do we need (and why) to allow rendering input anywhere outside of root element?. I disagree. It makes sense if the implementation can change. In case of dropzone a barely see a case where it\u2019s required to put input element somewhere else outside of root Dom Node at the moment. . Not sure how this is possible that the build has been working still if one of the deps increased? I don't want to block the PR, though. Please feel free to decide on your own if it's worth merging without addressing this.. @rkmarks can you tell why it was wrong initially?. As @Nodman mentioned, this is implemented. Probably the documentation can be improved. Please feel free to submit a documentation PR.. I agree. It's called basic for a reason.. This should be done in userland. File size validation will go away soon. . This kind of functionality should live in user land and can be easily added using onDrop callback. I'd love to accept an example if you're up to.. Hmm, probably we should have released as a breaking change indeed.. Does anyone wants to update the documentation to mention that?. So can this be closed?. Should we deprecate the release and release as a major to remove confusion?. Gotcha! Can you reference the PR here?. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Thanks for working on this!. Semantic release release a patch instead of the major version. I\u2019ll need to resolve this from my computer. . Please I beg you there is no need to apologize for absence in the open source world! It\u2019s an unpaid work we do in our free time. I\u2019m happy you\u2019re still around and doing your best to keep this project up to date! Thank you!. @tobilen can you work on ditching the sinon please? this is something I'd like to do but no time yet.. I\u2019m fine with a different PR! Thanks!. It should be released already. Okay, it's semantic-release issues again \ud83d\ude20 Trying to fix it now.. :tada: This issue has been resolved in version 5.1.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. @dan-lee can you add tests for this?. Hmm, I guess we can merge this and add tests later then.\nSent with GitHawk. > it would require installing the package for the plugin in question to import and use it.\nSo what\u2019s the problem with that?. @d-ivashchuk are you still working on this? I didn't see any PRs coming from you.. Ah I see it now. A reference to this issue would be great.... :tada: This issue has been resolved in version 6.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. > update from master\n@d-ivashchuk you already have done what @rkmarks was asking by clicking on \"Update branch\"\n. > The one with an id of ff887d2 is here just because I've messed up with git little bit\nJust wondering if you know about git rebase already?. @d-ivashchuk sorry I completely missed your replies. GitHub didn't notify me about them. Do you think you could finalize this PR this week so we can merge it. As a benefit you'd get closer to Hacktoberfest goal.. I think that\u2019s perfect! I\u2019m going to merge it. Thanks again for the help and pulling this off.. :tada: This PR is included in version 6.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 5.1.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.1.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Thanks!. :tada: This PR is included in version 6.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Go for it!. :tada: This PR is included in version 6.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. That\u2019s bummer. Does this mean the plugin we\u2019re using becomes incompatible with this fix? What would the fix for it look like?. I agree with the argument that users expect Files to be returned. Let's do the following:\n\nMerge and release this PR\nMake a PR for the current plugin for folders\nUpdate the documentation for the function signature to make it clear\nAdd a test (not sure this is not covered yet). :tada: This PR is included in version 6.0.2 :tada:\n\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. @rolandjitsu I've added you as a collaborator so you're free to merge this PR.. I\u2019m open to TS in this repo if you\u2019re up for it BTW. . And to 3. I think it\u2019s own repo is fine as long it is in this org . :tada: This PR is included in version 6.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.1.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Instead we should align TS config with this project's code standard (no semicolons). Can you do that?. Confirming. Can you please provide a fix for this?. We can't remove things like Promise since it's going to break other features. First way sounds legit unless it's going to break some other implementation. \nWe should call event.persist() and pass this instance to callbacks. This should allow calling whatever you want on it. \nPlease create a PR!. I believe there should be a better solution. Let\u2019s start with finding the root cause. I think that persist should work, correct? Let\u2019s find out why it doesn\u2019t. . :tada: This issue has been resolved in version 6.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. It's a duplicate for the ongoing work #468 . Can we automate this somehow? I wouldn't want to maintain this table when things are going to change.\nLike, taking this https://github.com/Nyalab/caniuse-api and generating the README update using mrm?. :tada: This PR is included in version 6.1.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.2.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.1.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 6.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.2.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. This isn\u2019t aligned with https://github.com/react-dropzone/react-dropzone/pull/468\nPlease let\u2019s focus on it and make it headless. . If you have time you could work on it. I might have time soonish to finish it though. You could check it out and help with tests and general direction. Comment on the Par directly please. . :tada: This PR is included in version 6.2.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 6.2.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Yes, we should remove it. I proposed to use a plugin (since we have the plugin architecture now) that we'd ship as the part of the package to support this.. :tada: This issue has been resolved in version 7.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 7.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Agreed, but documentation should reflect that. Also please add an example with previews since I believe that\u2019s a very common use case. . :tada: This PR is included in version 7.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Is this based on https://github.com/react-dropzone/react-dropzone/pull/468? . Nice! So you just squashed all commits into one?. Let me know when it\u2019s ready for review! Looking great so far. . I\u2019m still not convinced about the need of getRoptProps and getInputProps tbh but it\u2019s your call now. My proposal and initial direction was to make the dropzone inject input automatically into the root component. So basically Dropzone is the input and takes all of its props plus other props that are required for it to function. But I see how this also can be a bit ambiguous. . Could you please include #612 ?. LGTM then! Feel free to merge and release!. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Congratulations!. :tada: This issue has been resolved in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.1.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 8.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. I\u2019m wondering if the same can be auchived by preventDefault() on the event. I would propose to deprecate the disableClick if the same behavior can be aichived with an idiomatic JS and React. After the deprecation I\u2019d add an example on how to aichive this (with any event). We can also simply remove the prop and release a a major breaking version but if there is a way to do so gradually without introducing lots of maintenance I\u2019d go with it. Your call!. Yeah it should have been a feature one. You could force a release with an empty commit I think. Not sure tbh. :tada: This PR is included in version 8.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. I\u2019m not sure about this one. It says it s a feature release although it removes 2 features. It also says it\u2019s a non-breaking change there both removal change the API and this must be released as a major version. \nMoreover, I don\u2019t understand the motivation of doing so. Can you please explain it? \nAlso it feels like these changes should have been split into 2 separate PRs. Right now I\u2019m now sure what change is affect but what prop removal. . > Or I could have 2 separate commits instead of 2 PRs.\nI also would do two commits if I\u2019d be working alone. But putting two commits into one PR makes it harder to review and harder to understand the motivations.. :tada: This PR is included in version 8.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. I\u2019m not sure about this PR. Are you sure this code isn\u2019t executed? I think it\u2019s here to allow more control in the userland but I\u2019m not sure tbh. . Yes I see your point here but by looking at the code I see we are doing additional checks if we are dragging files etc which makes me suspicious. If you\u2019re sure it is not being used please feel free to proceed. Are all related tests removed as well?. :tada: This issue has been resolved in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. LGTM please merge and release as a breaking change. . :tada: This PR is included in version 8.2.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Oh I\u2019m so sick of how strict and fragile the semantic-release is :(. :tada: This issue has been resolved in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 9.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 9.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. It looks good to me. Some feedback:\n\nLet's not use shortcuts for common words. I noticed usage of cb instead of callback in the documentation. Also in code, I'd prefer using event instead of evt to remove any ambiguity\nGeneric examples could you some styles. Right now it's hard to tell if they work.\nJust by looking at code I doubt there is a lot of value to use hooks for the dropzone but since it's a hyped trend right now I guess people will demand it anyways :)\n\nI think it's good to merge after 1 is resolved. 2 can be done later and 3 is just an opinion ;). :tada: This PR is included in version 10.0.0 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Please take the lead on this project. I\u2019m grounded with kids and other projects atm :). :tada: This PR is included in version 10.0.4 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This issue has been resolved in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.1 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.2 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. :tada: This PR is included in version 10.0.3 :tada:\nThe release is available on:\n- npm package (@latest dist-tag)\n- GitHub release\nYour semantic-release bot :package::rocket:. Don't you use babel to compile the source? https://github.com/paramaggarwal/react-dropzone/blob/master/package.json#L7\nThe only thing is you'll probably need to add .babelrc with \"optional\": [\"runtime\"],\n. But it looks like it is supported by all modern browsers. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n. BTW I just realized this will not work because of arrow function. Do you mind using ES6 in your project? I could submit another PR with the complete solution.\n. Right, but not sure it will be transformed with current settings. Let me re-check and send a new PR.\n. I would not save bytes here and go for explicit naming: enterCounter or similar. Let minifier take care of byte shaving...\n. Yes, I'm aware of that. Thanks!\n. Wouldn't it be better to just use React.PropTypes.node?\n. The point of using webpack is to have the whole compiling pipeline set up with it. Otherwise it doesn't make any sense. Can you switch to webpack with uglify plugin instead of using uglifyJS directly?\n. I'd prefer to export UMD module since it seem to be the most widely supported.\n. Right now module being exported into lib so if you change it here you have to updated package.json as well.\n. In this case we won't need a .babelrc file I guess.\n. Is the indentation a bit off here?\n. It prevent UglifyJS from outputting a lot of warnings.\nAlso, we might want screw_ie8 option be set to true here (check the uglifyJS options to make sure the name is correct)\n. I'd prefer index.js?\n. Why not setting this to ./dist and removing it from filename?\n. In this case, let's just use .babelrc and remove query here.\n. Yes, when you use same babel config in different places, it's better to use beblrc or package.json files. If you want override it, this is how you do it. See this for example: https://github.com/mxstbr/react-boilerplate/blob/v3.0.0/webpack/webpack.dev.babel.js#L44-L47\n. You assign event listeners to some class methods that doesn't exist. This will not work I think.\n. Nevermind, the top of the file was collapsed :)\n. This will be called 2 times, if I understand it correctly. \nAlso, I don't like calling some function that returns nothing without arguments. This should be re-written to a something more testable and pure.\nSo, ultimately, this wrapup function should be a separate module (with its own tests) that takes files array as argument and returns files array with previews.\n. I also think this should be removed from the component code and made a separate module covered with tests.\n.  The accept should still be respected but on the file level IMO. Probably it should be called in the walker callback?\nBut maybe I'm wrong.\n. Since these variables aren't used here I'm wondering if it is better to use the last method with delete props from the cloned object here:\n```\nfunction MyDiv(props) {\nconst divProps = Object.assign({}, props);\n  delete divProps.layout;\nif (props.layout === 'horizontal') {\n    return \n  } else {\n    return \n  }\n}\n```\nSee https://facebook.github.io/react/warnings/unknown-prop.html\nWhat do you think? Mind updating the PR? Also, could you add a test that checks that these props aren't removed from the original this.props?\n. Let's re-write this as const divProps = { ...props }; for consistency.\n. Wouldn't file.inputName = this.props.name || ''; be better since name is always a String?\n. Why is that needed?\n. Should probably also check if it is a function Here for better guarding. \n. Probably. Leave it for now. This needs to be refactored for all places. FIY propTypes does not guard in runtime, that's why I think it's a good idea to check the type. \n. Why not just cancel bubbling in the event handler then? This looks like a hack to me. \n. Yes. This will do the same, isn't it?\n. The naming is inconsistent with the rest of methods. Also, I can't figure out from the name what's for native event it represents.\n. You should properly attach the event listener to the DOM node using addEventListener method. Also, you forgot to remove the listener in componentWillUnmount\n. Also, instead of creating a clojure here (event) => { handleOnCancel(event) } you could just pass the  this.handleOnCancel as a listener since it has the same signature.\n. What's this prop is about? You can't tell from the name what it is supposed to do.\n. Since it isn't a required prop, this will throw an error if it is not specified.\n. Same as with addEventListener, you should use removeEventListener here. What I don't get is, why are you removing it every time but adding just once?\n. Why did you remove that? I think it's good we test the build and not only the source files.\n. TBH I don't like adding these delays. It's some magic number that doesn't make much sense to me. Can you get rid of them?\n. Why are you sure it will be set already? I wouldn't rely on DOM as a data source. Better try doing this with the  internal state. This also should probably make the setTimeout call redundant.\n. Let's switch to ref={(node) => { this.dropzone = node; }} since in your example it will implicitely return.\n. This can be re-written as files.every(this.fileAccepted)\n. No problem! That's why code review is great :)\n. Please add this back and remove generated files from the repository. They will be generated and put on npm during the build phase.\n. That's weird. I would assume it can be the React that is messing around with the event listeners here... I could investigate further.\n. I've just noticed that https://github.com/okonet/react-dropzone/pull/250/files#diff-1fdf421c05c1140f6d71444ea2b27638R135 is using this but the method isn't bound to this class. Not sure if this part is covered by tests but it seems that this.props will be always undefined in this context. Or am I missing something?\n. I agree on using callback is safer\n. Yes, that makes more sense since we don't actually want to re-render when changing the value. Just to track it.\n. What's the reason for using Symbol here?. Since this isn't using this it should not be the instance method and can be static. I would move all this directory related code to a separate module (file). Plus we will need tests to merge this one.. I see, but we want the same code style for this one. Can you update your PR please?. It doesn't look like you need to expose this globally. Why not just use this function in test?. Should we pass children to this method and make it static?. You can return here instead of mutating the value.. Let's pass children to this function and remove this completely. In this case this method can be static.. If you're not using this in the method, you can extract it as a function outside of the class. Or you could use static keyword.. Let's try static for now. This can always be refactored.. e is event. Let's rename arguments to make them less ambiguous.. So you proposing to only use function and not React.cloneElement?. Why do you need this variable? It's an additional allocation that isn't needed. You can just return from if and in the end of this method.. return React.cloneElement(renderedChildren, props);. return children(props);. Let's rename props to something with more context. Right now it's easy to confuse with this.props. Why do you need this check? . I actually tend to agree on this. Let's stick to function for now and remove React.cloneElement. We'll need an updated README.md that will make this clear.. Yes, let's reuse React's type defs as much as possible.. I'm wondering how we should deliver flow types to npm so people can get advantage of them in their projects? @ryyppy I know you did this before.. Let's add return types everythere for such cases: function(arg: type): type {}. Can we somehow co-locate this with https://github.com/okonet/react-dropzone/pull/344/files#diff-1fdf421c05c1140f6d71444ea2b27638R367?. This should be a React node, isn't it?. Yes, please!. onDragEnter(e: Object): void?. Let's define the DataTransferItemType based on https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem and reuse it. Also this method return type is missing (:boolean). I think it would be interesting to also test that #active and #blank is removed in this case. So for each case we would like to ensure only one of these 3 possible divs is rendered.. Not sure if name \"Style\" fits well. Let's call it \"Reacting to user input\" or propose a better name.. Let's simplify the example. Please remove color from it and let's return some text in each of the cases just to illustrate it. . What about the case there window.File is undefined? Also, this will probably break SSR implementations.. I feel like we still want to reset this.enterCounter etc in this case.. .contains isn't implemented in most of the browsers yet AFAIK. I'd rather had this extracted to a util function with separate tests.. I'm confused by this part TBH. You're filtering something and then you push to the array and mutate it. Can this be a single operation instead? reduce for example?. Also here. This is very confusing to see 2 filters in a row with results overwriting each other. This can be rewritten like:\nthis.dragTargets =  this.dragTargets.filter(el => el !== e.target && this.node.contains(el));\nbut I'm wondering why do even need to assign it back to this instance variable if you're only concerned about the length of the array?\nWouldn't it easier to use Array.prototype.some or Array.prototype.any instead and not mutate it?. This will generate a new function each time. Instead, define a function outside of the scope and pass a reference to it.. Hmm, not sure I get this line. You're entering 2 times and leaving just 1 but asserts are passing? They shouldn't or am I missing something?. Makes sense! I think it's fine not to allocate too much memory and save some work later. Let's stick to it.. Should this be renamed to something like preventDropOnDocument with the default value of true? I think right the purpose of it is not clear enough.. Why do we need the dragover handler?. Hmm, I don't like how this looks TBH. Why not use event.stopPropagation instead?. Can you point me at what this does?. Please add a JSDoc comment for this function. I hardly understand what it does and why it's needed.. It's probably better to test in a separate it block with an appropriate description. Either way, shouldn't it test explicitly what handlers were attached?. ?. I wondering if this test should be that detailed. I think it will be enough to test that we've called the callback function for appropriate edge cases?. Wasn't it the separate issue?. Not sure what this is testing. What is innermost Dropzone?. Why can't we use event.stopPropagation for this?. Hmm, what this is doing?. Wait a minute, are you talking about nested Dropzones? Why would we support that? What's the use case?. Yeah, as I already asked \u2191 do we really need to support that case? It seems very edgy to me and the complexity it brings to the project doesn't seem worth it. What's the use case for it?. I don't believe the complexity that we need to bring in to support such a edge case is worth it TBH. Let's keep things simple as long as possible. When I was asking about multiple dropzones on the page I was referring to a use case with a list of dropzones for instance. Are you okay with that?. Interesting. I'll read but see my \u2191 comment.. Awesome!\n\nI think it might be surprising for someone who tries nesting to find that the parent still receives a drop event\n\nTBH I would be surprised if it wouldn't receive and fire the event :). The white space gone missing. This is why it's marked as changed. Can you please put it back?. Please remove this since it's handled by semantic release. Why do we need this explanation in the README? I think it's better be placed as a comment in the source code since users should not be concerned about this IMO.. destroyed -> destroy. leak -> leaks. don't need to preview -> don't need the preview. I'm wondering if we should display a warning at least in a dev mode? I think you could re-use invariant here and wrap it into process.env.NODE_ENV !== 'production' condition. Thoughts?. Makes me think if we should tackle the bigger problem in this PR: what if I want to disablePreviews based on file property. I was thinking about a callback that can be defined by the user that should return true or false. This way we could also use it to check if the method exists for this file instance and call it.\nThe problem here I think is that we mutate file by adding a new property to the object. But I'm wondering if this is an issue in this context.\nThoughts?. Cool, @ncphillips! Will you add it in this PR?. We have a deal! :). Sorry confused with another project where I use it. Yes, add it as a dependency please.. Hmm, I think it's okay to throw an error in development mode. Alternatively we could just use console.error in this case. What do you think is more appropriate?. Let's address the callback issue in a separate PR since IMO this is user responsibility to not to get to this state. I'd say console.error ahould do. for now. . Just disable this line with // eslint-disable-line no-console. Seems this isn't needed anymore? Please remove it.. Should this go to devDependencies and peerDependencies since it's React's dependency and not ours?. 1. Shouldn't it be aligned with https://github.com/okonet/react-dropzone/pull/410/files#diff-1fdf421c05c1140f6d71444ea2b27638R133?\n1. true is default argument, so you can skip it. 1. Let's remove negation from the variable name please\n1. This can be rewritten as !this.props.multiple || files.length > 1. Can allFilesAccepted be set accordingly before so this code remains intact?. Can this be rewritten with array destructuring?. Please split the comment into 2 lines. Can we still keep shoulds in tests?. Let's leave as is. Thanks for clarifying.. Let's make accept a required second argument and remove defaulting to this.props + provide it everywhere explicitly.. Can this code duplication be somehow removed? Let's introduce a new method that would handle this for both cases based on arguments.. By looking at this I think it would make more sense to put dragged file into state and calculate isDragActive and isDragReject in the render method since this is very cheap. Thoughts?. Same here, let's make the accept a required second arguement to make those functions pure.. Could this function be a pure one? Let's remove the dependency on this here and extract it from the class. There is no reason for it to be a class instance method.. I'd prefer a comparison like draggedFiles.length > 0 here and on the next line. I think it shows the intention better.. I know it's a nit peak but you're accessing length property 3 times in a row. Should it be extracted, you think?. I'll deprecate classNames soon and this will cause troubles in the future. Could we check props on children?. I'm wondering if we could just render some simple component with those props and then in the test check if it received the proper props. I think this is what we should test not the classNames \u2014 they are just implementation detail.. Somrthing like\njsx\nconst MyComponent = () => null\nso you can query it with enzyme.. Yeah, exactly! I think we could even use https://github.com/blainekasten/enzyme-matchers to make it less verbose.. https://github.com/blainekasten/enzyme-matchers#tohaveproppropkeystring-propvalueany. That's weird. I'm checking this out.. Try to get latest master or this commit: 4af134583be5eab3adb898f879879c25fa7ee517. I wonder if we could just mock the implementation to make synchronous as it was before. For this test suite it doesn't matter or am I missing something?. I see you moved it outside of promise resolve chain but I'm wondering if this will lead to a non-sync state where callback function will see no files?. Please consider using http://facebook.github.io/jest/docs/en/asynchronous.html#promises for tests here.. Please use file instead of f here. This should probably explain better what this example is demonstrating. What about Windows?. let { files, items } = evt.dataTransfer?. Why this assignment is needed? Can't see it being used anywhere.. Same here, seems the assignment isn't needed?. Windows Operating System :) Or is this just a name that is used internally?. Why is that?. Okay then.. Can you please extract this to a instance method to prevent from creating a new function each time?. I'm wondering if this can break some code that uses even handler on this ref. Also, this will create a memory leak when element is unmounted. Please use addEventListener and removeEventListener for this.. You're right. What about Jest helpers or async/await? Will this help?. Can this also go into a class method, please? Something called this.setRefs. Codecov says this line is uncovered by tests. Mind adding a test for it please?. I'd name it onInputElementClick instead.. I'm wondering now why you had to use refs to attache event listener? Was onClick in the inputProps not enough?. But I still don't get why you have chosen to use refs and DOM API instead of React's one.\nSomething like this didn't work?\njsx\n{\n  ...inputProps,\n  onClick: (evt) => { \n    evt.stopPropagation();\n    if (typeof inputProps.onClick === 'function') {\n      inputProps.onClick()\n    }\n  }\n}. I want to deprecate those props and would appreciate if you could update the example to check the size in the onDrop method. Feasible?. What about multiple images?. I'm wondering why. It should not as far as I understand. I thought that's a React bug but I could not reproduce it in isolation. Ideas?. var => const. This should still be accept prop since it improves UX \u2014 we can show in advance if it will be accepted or rejected.. var => const. Should we instead display errors in the UI using state?. If you're working with single file, please add multiple={false}. Should be 3000. 10000000 is less than 10MB. Let's replace it with 10 * 1024 * 1024 to make the intent more clear and add a comment.. Amazing! Thanks for the research!. Could you please add a comment referring to the issue and describing why this is needed?. Can this be rewritten as setTimeout(this.open, 0) you think?. Hmm, I think this isn't the semantic and this as () => this.open(). I meant to pass the reference to the function here.. Let's rename the prop to disabled to conform the DOM API: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button. After the prop is renamed, let's put it after the accept one using the shorthand notation.. Since this is only called in the constructor and it returns null, this won't react to the change of the prop. We'll need to add a test for this (change from disabled to enabled state and check that events are being fired).. My preset already has prettier so no need in this I guess. I might need to update it to the latest version, though.. AFAIK yarn add does --save by default. Why is this needed?. I really prefer function declarations for functions unless they are in the clojure. Can you live this that and make me happy again\u2122? ;). Why doing it on a separate line?. Should this also go to utils.js?. Consider adding it to your global gitignore. The syntax is quite misleading IMO. In that case I'd prefer createElement rather than JSX.\nAlso I'm doing some work in https://github.com/react-dropzone/react-dropzone/pull/468 that will make this simpler so if you could help me with this one instead it would be cool!. I'm wondering if there is any way this can be reduced?. Should we add size:why with the why mode?. We could try but let's do in a separate PR.. Yes, please!. I was playing around with size-limit and it seems it needs to be the source file in order for the lib to work correctly.. Can we remove this code duplication by using es5 and es6 as BABEL_ENV explicitly?. So here we'd add BABEL_ENV=es5. I'm also wondering if we should keep testing compiled targets. I know I'm the person who introduced that but with this PR it makes kind'a awful and I'm not sure it has enough value since Babel should be well-tested. Thoughts?. This should probably just change to the negation to make the new behavior explicit.. One question just popped my mind: do we still need stage-1 when using env preset? If so, what for?. I'd prefer we have 2 separate build scripts: build:umd and build:es to make the intent clear.\nbuild:umd would be NODE_ENV=production webpack. So here we could drop the NODE_ENV thing.. We don't need to format. prettier should take care of this. Did lint-staged run?. No I mean the whole test needs to be updated accordingly.. This says \"it should allow single files\" and the PR is \"fixing\" it.. .not.toEqual(1) => .toEqual(0)?. Also, I agree this looks better now so let's keep it, please.. I'm wondering if this code can be simplified. Also, should we this be the first check and if this doesn't pass, we should return earlier? As far as I understand it if (!multiple && this.state.draggedFiles.length > 1) we want to reject the whole drag operation. Correct?. Yeah, I think stage-1 was needed for rest-spread. I'm wondering how env will transpile it, though.. Not sure why did you rename the spy name. This is a bit misleading now IMO since it includes both accepted and rejected files.. If the file isn't accepted, when it should be rejected? Why is this test only updates the first value but not the second?. The test name is misleading. Did you try this out already? Doesn't look like it has been changed.. What is images[0].accept? files must be an array, right? Why did you change this line?. Why is this splice needed here if you already doing ...?. Is there also a test where you test that all files would end up in rejected?. Or why do you specifically test for single files here?. No, this is incorrect. Thanks for mentioning.. What happens if user have multiple dropboxes on a single page? . We should generate unique IDs here.. I'm wondering if label should become the main container instead of div? Will it have any styling implications?. > i thought the spread operator in javascript just turns items in an array to objects with a key: value pair? \nNo, this is not what spread is doing: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\nThere is no need in .splice(0) since it's literally what ... is doing. I'm not even sure we need ... in front of the first one \u2014\u00a0seems like a redundant code to me. Please check this.. Not sure about this one especially without a way to customize it. Please remove cursor styling for now to make it non-breaking change.. Is there a way to always render the same HTML but prevent clicking using JS?. I can't see those dependencies required anywhere? Why are they needed?. And this.. Any specific reason for switching from function to const. Same question here. Let\u2019s revert this file since I don\u2019t see any reason for it to change. Especially not in this PR. I don't know. The PR code looks more readable to me. Please add tslint to lint-staged config. I\u2019d prefer us using async await here instead of timeouts. . Or anything that\u2019s fits better from https://facebook.github.io/jest/docs/en/asynchronous.html#promises. For consistency sake, could you please add a semicolon here?. Should it instead remove display: none and use a different hiding technique? . Do you need to check for existence of style here? AFAIK, you can use ... with undefined value?. I believe @matuzo knows a better trick. . Can you update the code please?. Remove the (inputProps && part since it's not needed. ...inputProps.style should be enough if inputProps would be set to {} in defaultProps?. I'd propose to create an additional \"plugin\" called getDataTransferItemsWithPreview and move this code there. Ideally the core of this library should be not concerned about anything but drag'n'drop.\nI'd even go with a breaking change there since I believe most users don't need preview generation by default and it's a runtime cost and a potential memory leak.. Let's add a signature of the function here as a JSDoc to make it easier for plugins authors.. Please check out https://github.com/h5bp/html5-boilerplate/blob/7e74f27208ef6e62cda92057dfb853b51d3649dd/src/css/main.css#L121-L140. > require popups and dialogues to result from a direct user\u2019s action\nrequire popups and dialogues to originate from a direct user interaction (i.e. click).\n\n, in other cases, there\u2019s a good chance it\u2019s going to be blocked. So if you are calling dropzoneRef.open() asynchronously,\n\n. If you are callingdropzoneRef.open()asynchronously, there\u2019s a good chance it\u2019s going to be blocked by the browser.\n\nBesides, chances are it could be different in older versions. So try to omit it if possible\n\nSince implementations may differ between different browsers, avoid callingopenasynchronously if possible.. AFAIK the solution I proposed is battle tested in all modern browsers. In which browsers did you tests yours?. @Nodman I think exporting the default implementation + additional plugins is a way to go. Composition should be the right way of doing this. We should also add examples of how to achieve this. . Oh sorry I thought that is the propTypes. No, the way you did it is perfect! Thanks!. @marcofugaro okay let's go with your for now and see if people will report issues :). This is going to be generated by styleguidist. Let's remove it. This should move to examples. Those props aren't used and thus not needed there.. The only reason is the rollup config. @TrySound is it worth using imports?. They will go away in #468. This is added by install-peerdeps so I don't want to lock it. Same here. Node doesn't support this. Source code isn't node.. Please extract the check to a function or method and use it to make the code more DRY. getDataTransferItems is async now so I'm not sure it's going to work like this. Are tests passing?. I'm wondering if we should still allow firing callbacks via a flag? . Please rename to something more verbose like nonFileItems. I don't like imperative for loops TBH. Let's use Array.prototype.filter here. Same as before. \ud83d\udc4d . Use import here too and group with other imports?. It's not performance reasons but plugins. See https://github.com/react-dropzone/react-dropzone/pull/616. Combine 2 ifs?. Same here. Same here?. So this change made me wondering if hasFiles is going to break folder drop integration.. Folder drop is supported over plugins. See https://github.com/react-dropzone/react-dropzone/pull/616. To stay on the safe side, I'd propose to leave this part of code as is and do the check in the hasFiles since it's the only place where it's really relevant. Ideally, if you could help building an example with folders support, so we can test against it in the browser, would be even better. Let me know if you up to it and/or need any help with that. Thoughts?. This needs to go into devDependencies since it should not become part of the distribution package.. Can this be pushed below, please? It should be the last example since it's the most advanced one.. This is missing language. Please add jsx harmony here. This will enable syntax highlighting on GitHub and code editors.. It looks like this code didn't run through prettier before committing.  AFAIK it should have white spaces inside {}. We should display the folder structure here so the example is clear about what it implements. Does the plugin we're using supports that? If not, we should at least show full paths here.. Hmm, why is the map needed? Is this something coming from the plugin?. Since the html5-file-selector resolves with files already and this is what we expect according to https://github.com/react-dropzone/react-dropzone/pull/616/files#diff-1fdf421c05c1140f6d71444ea2b27638R97 I'm wondering if this is unnecessary to make it that explicit here.\nThis line can be replaced with \njsx\ngetDataTransferItems={getDroppedOrSelectedFiles}\nOn the other hand, this shows all possible hooking points for it.\nI'm not sure so please express your opinion on this one. What would you prefer seeing in the example? A shorter version or this one?. I tested the example and it works great. But the documentation still missing bits on the plugin architecture IMO. I would add more information about the architecture and emphasize the pluggable part. We would need to show function signature and an isolated example with promises IMO.. Keeping in mind my first comment I'm wondering if this should become a more generic name. Like \"Extending Dropzone\"? Or \"Custom getDataTransferItems\"?. Cool. The folder support example is in making so you might want to wait till it\u2019s merged so you can test better. . @d-ivashchuk no I mean the API part. Function signature etc. Your example is just one case of what's possible so we need to add this to the general docs (ideally this would live inside the component using JSDoc and styleguidist will extract this) but not to this example.. I think Extending Dropzone as a separate page and then sub-sections with different examples could work best.. Ideally these should be generated from code. If that's not possible then yes, let's use some tool. maintaining this will be madness!. What?. We need to upgrade styleguidist then?. The documentation PR #662 has been merged. . Why support render even?. Isn't this one going to render false if isDragAccept is false?. I didn\u2019t know this method exist. Thanks!. This removes an ability to plug different file parsers. Why?. This is a breaking change. It is a breaking change if the api has changed. . Question: why is this needed and can\u2019t we put it into afterEach for example?. Yes it\u2019s needed because of async get items. But the question still stands: can we remove the repetition and put it into afterEach?. cb -> callback. ",
    "ArtemBernatskyy": "+1. @lruckman thx, for those coming here from Google try this\naccept=\".csv,text/csv\". ",
    "dejongch": "Any chance anything happened with this? I could really use the ability to either accept all files in a folder if it is dropped or somehow know it is a folder and not accept it at all.. Any chance anything happened with this? I could really use the ability to either accept all files in a folder if it is dropped or somehow know it is a folder and not accept it at all.. Any chance anything happened with this? I could really use the ability to either accept all files in a folder if it is dropped or somehow know it is a folder and not accept it at all.. Any update on when this might be merged in?. ",
    "greenlaw110": "I am also curious on how to get it done\n. ",
    "nextminds": "It's the same as you would do with a file form field, but instead of getting the 'files' property from the field, you listen to the onDrop callback to handle the files. Simple explanation here: http://abandon.ie/notebook/simple-file-uploads-using-jquery-ajax\nThe onDrop provides you with an array of Files which you can then send to a server. For example, with SuperAgent as a http/ajax library:\njavascript\n    onDrop: function(files){\n        var req = request.post('/upload');\n        files.forEach((file)=> {\n            req.attach(file.name, file);\n        });\n        req.end(callback);\n    }\n```\nOr if you use a Flux architecture like me: for every file in the onDrop trigger an action, which will then call a function in your api-utils, which will then do the request like above, which will eventually trigger another action when complete or erroneous.\n. ",
    "tnrich": "Hey there, I'm using superagent and following the steps @nextminds outlined, but I'm having trouble getting file upload to work (in my case it's a .xlsx file).\nHas anyone else had success with this? Are there any tips to follow. I'm using express and the req.body is empty on the backend. \n. Happy to do it :) \n. ",
    "alex-dixon": "I was actually going to open an issue with the opposite concern. npm install gives me a js file, and I'm using gulp and Webpack. After adding the require in a JSX file and putting in the code for Dropzone component ,Webpack gave this error:\nERROR in ./~/react-dropzone/index.js\nModule parse failed: /projectdir/node_modules/react-dropzone/index.js Line 73: Unexpected token <\nYou may need an appropriate loader to handle this file type.\n| \n|     return (\n|       <div className={className} style={style} onClick={this.onClick} onDragLeave={this.onDragLeave} onDragOver={this.onDragOver} onDrop={this.onDrop}>\n|         <input style={{display: 'none' }} type='file' multiple ref='fileInput' onChange={this.onDrop} />\n|         {this.props.children}\n @ ./client/pages/addapet/Form.jsx 14:15-40\nWhether you get an error like this appears how you have React or React/Flux project set up. I fell into JSX to JS transpiling with gulp/webpack but there are other methods. Might be good to include instructions and/or accommodations as a result.\nI ended up just copying the contents of index.js from the dropzone module into a new JSX file in my components folder and that seems to have worked.\n. ",
    "joeyjmorales": "Hi @alex-dixon that is the same problem I encountered.  Perhaps misleading description given the file in node_modules has a .js but the code inside is in fact jsx format.  \nAlso using gulp (transform jsx, browserify) workflow and my work around was similar, to copy the jsx (.js) file to my local components folder and transpile it to jsx as if it were my own component so my browserify \"require\" paths work properly. \nWhat would work perfectly for my gulp worfklow is:\n1.) Change the existing index.js file to a index.jsx. \n2.) Transpile it from to js to jsx\n3.) Check in the result. \nThis would allow use directly from node_modules without having to jsx transpile in my build.  This removed hassles in copy/pasting that is necessary to respect the \"require\" paths needed for browserify.  \nThanks for helping clarify!\n. ",
    "Mr-Taco": "i am having the same issue. i am running react 0.14.2 with react-dropzone 3.0.0. I am not adding any refs myself, and when I remove the Dropzone component the error goes away so its origin is the Dropzone component. i have checked for multiple versions of react using \"npm ls react\" and got \n\"`-- react@0.14.2\". i deleted node_modules folder and reinstalled as well but no luck. any suggestions would be awesome\n. ",
    "trshafer": "+1\n. ",
    "BDiehr": "Thanks for merging!\n. ",
    "eventhough": "@paramaggarwal @fricke The File API doesn't work in IE9 or IE8.\nhttp://caniuse.com/#feat=fileapi\nDo you think it would be possible to add compatibility support for things like filesize? \nhttp://stackoverflow.com/questions/1832415/how-validate-file-size-using-html-and-javascript-on-client-side\n. @paramaggarwal can we add support to detect when a file is hovering over the dropzone? It would make it easier to add an effect.\nUpdate: took a closer look and the active class is added on dragover so please disregard this enhancement. thanks!\n. ",
    "aleemb": "The file.preview property can be specified as the image source: <img src={file.preview} />\n. Requested via PR https://github.com/paramaggarwal/react-dropzone/pull/13\n. Oops didn't realise I had already sent a PR for this some time ago.\n. ",
    "joaosamouco": ":+1: This would be nice. And not so hard to implement.\n. ",
    "fraserxu": "Sending a pull request!\n. ",
    "matiaslarsson": "Added pull request #29 to support setting multiple to false as @mikemintz also wished.\n. ",
    "timothyjlaurent": "Looks like this somehow breaks the onDrop functionality.\n. Argggh.... Dragging onto child elements causes the dragLeave event to fire. \n. ",
    "jackfranklin": ":+1: Change incoming!\n. @paramaggarwal all set :)\n. ",
    "wmartins": "Oh, sure! I will document it and submit another PR :-)\n. Here it is:\nhttps://github.com/paramaggarwal/react-dropzone/pull/32\n. I've been using this project for a while, and here are some things I'm missing:\n- Build instructions missing (there's any build scripts / build instructions to help people contribute with the project)\n- Demo not updated (the last update was in Feb 9)\n- Disabled state\n- Tests (as you said)\n- Browser compatiblity\nThat's it :-)\n. @paramaggarwal, I think it's better to have both, add disabled to the input and maybe add some basic styles (some classes are enough) to represent the disabled state. What do you think?\n. ",
    "ishumadan91": "We can do that but I would still suggest putting an inherent name field. Even if we don't make it configurable, and tell about it in the documentation will be fine. name attribute may be very much required and we should provide ease to those using the plugin. Also it complies with the html standards to have a name in an input field\n. ",
    "nickhudkins": ":+1: \n. If this was purely used for asynchronous file upload, then you are correct, because onDrop is called, and all the file handling can be done there. However, if you'd like to simply POST the form traditionally, assuming that on the backend you'd like to know what files are what, a named input is needed :)\nWhat COULD be done is another file input could be added, and the value could be set onDrop, but that seems awfully hacky.\nIf you take a look at this codepen:\nhttp://codepen.io/nickhudkins/pen/MwPrPJ\nyou'll see the file field has no name, which if you post some data, and take a look at:\nhttp://requestb.in/nvzb0mnv\nyou will see the file data is not coming through in a manner than could be used.\nGo ahead and fork the codepen, add a name field to the file field and you will see it works wonderfully.\n. Because the component does support clicking, we should avoid breaking the simple browser form post.\nAs far as drop goes, you are absolutely correct.\n. It is entirely possible that someone may want to inline NECESSARY styles (like hiding the file input, making sure it is 100% the size of the drop zone.... or something of that nature) while defining a className as a hook for a designer to add additional visual styles.\nIf this.props.style is merged with the default styles, then I must have knowledge of what styles are defined, so that I may override them, rather than exposing an API that says \"I dont care what styles are defined, please don't use them\" (noDefaultStyles prop)\nI'd like to see this implemented like @robmclarty suggested.\n. @paramaggarwal closing my computer now :(. I'm batting 0/2 today. Thanks for the clarification, and sorry for not looking into that deeper first.\n. True... so... I guess I am confused what you intended the use of this library to be. \nAs I see it it is an enhanced file input field, which could be used in a  and in that case, the name attribute is important.\nI guess my largest question for you is, what is the disadvantage of treating this as a semantic file input at it's core, and the additional functionality being just that, additional.\n. ",
    "mmmurf": "also perhaps have it respond to a tap on mobile to open the file dialog. \n. ",
    "lancetw": "Please support mobile :+1: \n. ",
    "1django": "mobile please!\n. Fair point.  I guess what I really want on mobile is a working file uploader that's easily styled and includes previews.  Which is probably at odds with the intention of dropzone/this lib.\n. Hey redenz, can you provide an example?  I tried your suggestion (div to button element) but then on click of the button, my entire page reloads.\nThanks.\n. ",
    "faergeek": "What about having a callback which filters out unaccepted files?\n. ",
    "SylarRuby": "Delete button for uploaded files (can be added easily no problem). React complains about key when file(s) uploaded.\n. @okonet Thanks\n. I agree with ^^\n. Strange. Ill have another go later\n. @okonet  Let me get this straight. Does your example shows more than one file when uploaded/dropped? For I am seeing just one.\n. ",
    "awli": "\nI'm not sure how much of a good idea exposing events to parents is, as this isn't a very React-like thing to do (i.e. have the data flow up to the parent). An alternative perhaps is to have a style and styleActive prop, but that might result in a large amount of duplication (for example, if the component is heavily styled but the change in the active state is only one or two properties).\nThat's fair, I guess that the update is not very expensive anyway as the DOM probably doesn't update regardless. An alternative is to modify the onDrag method to only call this.setState if the state has actually changed?\n. \n",
    "cassus": ":+1: for styling separate styling of base / active state. Either by using styleFunc or with style + styleActive.\nEven styleFunc is not that bad as the parent object already knows about the props, that is public API. If you make state.isActive also part of the public and stable API then I see no problem with using styleFunc.\nBut then the styleFunc signature can be simplified to styleFunc({isActive}) as the owner already knows about the props they are giving so that can be in the closure for styleFunc and the only exposed state would be isActive. This would also make the public API surface explicit.\nEven with styleFunc I'd still need onDragStart and onDragEnd as I might want to change the styling of the parent component as well. Only having styleFunc would make me use it as kind of an event handler and that's not good. These should be separate concerns.\nThis makes me argue for having style and styleActive for the simple use cases and onDragStart and onDragEnd when the parent needs to know for some reason. styleFunc would unnecessarily increase the API surface.\n. ",
    "velveteer": "Looks like this commit will resolve it: https://github.com/paramaggarwal/react-dropzone/commit/8bcf347f8f1b5dd6c8ad2498b978772e3ff351dc\n@paramaggarwal Will we be seeing a new release soon?\n. ",
    "jonathanhudak": "I can confirm this also. Using Chrome Version 43.0.2357.132 (64-bit)\n. https://github.com/paramaggarwal/react-dropzone/pull/45 Thanks!\n. ",
    "idolize": "From the Browserify docs:\n\nNow (that you have added a transform field to package.json) when somebody require()s your module, (the transform) will automatically be applied to the files in your module without explicit intervention by the person using your module.\n\nIs this really necessary here?\n. Thanks for merging! Glad I could help. Let me know whenever you get a chance to update the version on npm.\n. ",
    "crobinson42": "+1 for publishing/shipping consumable module to npm. Run the build then publish to npm. \n@paramaggarwal I'm curious why this isn't the case already?\n. Ahh! I forgot about that github feature, thanks @thaddeusreid . ",
    "themuvarov": "it was eventually fixed here https://github.com/paramaggarwal/react-dropzone/commit/8bcf347f8f1b5dd6c8ad2498b978772e3ff351dc\n. ",
    "robmclarty": "I reacted the same way as @googamanga; I had already setup CSS for the element where I was putting Dropzone, and then when I hooked up the library, all those styles got overridden by hard inline styles. Not at all what I was expecting.\nPassing an empty object solves the above problem, but tbh it looks extremely ugly and non-intuitive. I think the default shouldn't require adding weird empty object notation.\n<Dropzone\n  className=\"dropzone-files\"\n  style={{}}\n  ref=\"dropzone\"\n  onDrop={this.onDrop}\n  onClick={this.selectFiles}></Dropzone>\nI understand wanting to have a useable \"out of the box\" experience, but this makes the library harder to use in the real world. I doubt a production app would ever use the defaults. As a result, I suggest making these styles the exception (e.g., by passing in some kind of flag) rather than the rule. The default should be no inline styles imho.\n. I added a pull request with some changes to handle this in a better way (imho). It retains the original functionality (because having a good \"out of the box\" experience is valuable) while adding a few new features to offer greater control for those who need it.\nI think that listening for className isn't necessarily optimal as a user may want to use a mix of both inline styles and class styles. It also doesn't make it obvious what's happening (i.e., that the default style object is being disabled, or not).\nIf the intention is to \"render the Dropzone component without the default style object\", then imo this should be made more obvious: for example by explicitly declaring a noDefaultStyles flag. With such a flag set, my expectations would naturally be that my Dropzone element will have no CSS applied to it whatsoever that I didn't add myself, which helps with customizing it ;)\n. @paramaggarwal you're right that this is simpler. I was originally concerned about the user not being able to define both a custom className and a custom style prop used in conjunction. Your suggestion handles this case. Therefore I don't believe the extra noDefaultStyles prop is necessary.\nI've updated my pull request to reflect this line of thinking such that 1) if a style prop exists, use that, 2) if no style prop exists, but a className prop exists, use an empty object for style, and 3) if no style or className props exist, use the default style object.\n. I've removed the noDefaultStyles prop in preference of detecting the existence of either the style or className props to decide if the default styles should be applied.\n. ",
    "Sapphire64": "@paramaggarwal But to know that it makes any effect you need to check sources. Maybe we should at least mention it somewhere?\n. Ok, closing this one :)\n. ",
    "voronianski": "@paramaggarwal updated\n. @paramaggarwal :wink: thanks!\n. @paramaggarwal when do you plan to bump npm version?\n. @paramaggarwal updated, thanks!\n. ",
    "djkirby": "Gotcha thanks for the quick response!\nIt would be nice, though, for the README to mention the supportClick, accept, and multiple props. I can try to update later when I get some free time. \n. ",
    "prakhar1989": "Ah yes! Totally forgot about that. Thanks for the quick turnaround. :+1: \n. ",
    "redenz": "Changing the component from a div to a button seems to make mobile work\n. Sent a new PR.\n\nOn Aug 27, 2015, at 12:59 PM, django-emerge notifications@github.com wrote:\nHey redenz, can you provide an example? I tried your suggestion (div to button element) but then on click of the button, my entire page reloads.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/paramaggarwal/react-dropzone/issues/53#issuecomment-135492859.\n. Try this one - I noticed the same thing the other day.  I changed it back to a div but enabled TouchEvents and used the onStartTouch to trigger it.  Appears to be working\n. \n",
    "esseb": "@paramaggarwal how about desktop touch screens? I could always use media queries to fall back to a normal input element on mobile, but I need to support larger touch screen devices also. I can't easily use media queries because those device could potentially have a larger viewport than desktops.\n. ",
    "justinhoward": "I don't understand the reasoning \"no use on mobile\". Most sites are responsive, not mobile-only. They need to support both desktop and mobile. By not supporting mobile, you force the fallback implementation on the developer. That is not a trivial workaround. If the reasoning is that it's too hard, then fine, but there definitely is a use.\n. @okonet Thanks for your response. I have to apologize. I did some tests, and it seems everything already works how I expected. Clicking the dropzone on iOS/Android opens the file browser as expected. The original text of this issue made me assume otherwise. Sorry for wasting your time.\nI guess the next step above that would be to replace the UI or messaging when on a platform that does not support drag-and-drop. However, you're right that it would be hard to anticipate developers expectations for how that would work, and might be beyond the scope of this component.\n. ",
    "ravloony": "Thanks for the reply!\nHow about a dragActiveStyle prop which would apply only when this.state.isDragActive is true?\n. Isn't that two way data flow? I'd say it's cleaner for the component to manage it's own state, rather than asking the parent to update a prop on an event. If the parent is always going to update the style when the drag happens, then why not put that logic in the component itself?\n. Ok, fair enough! Thanks for your time!\n. ",
    "tikotzky": "for reference in order to get this behavior right now you need to do something like\n```\n    getInitialState() {\n        return { isActive: false };\n    },\nhandleDragOver() {\n    this.setState({ isActive: true });\n},\n\nhandleDragLeave() {\n    this.setState({ isActive: false });\n},\n\nhandleDrop() {\n    this.setState({ isActive: false });\n},\n\nrender() {\n    return (\n        <Dropzone\n            onDrop={this.handleDrop}\n            onDragOver={this.handleDragOver}\n            onDragLeave={this.handleDragLeave}\n            className={this.state.isActive ? 'uniqueClassName' : '')}>\n    );\n}\n\n```\nthis pr would allow you to instead do\nrender() {\n        return <Dropzone activeClassName='uniqueClassName'}>;\n    }\n. Thank You!\nWill you be publishing a new version to npm soon?\n. I'm trying to understand what this block of code is doing.\nI see it came from here but I'm sure exactly why its needed.\n. ",
    "iansinnott": "@okonet Can you  confirm that the pull request works in 2.1.0? I get an error coming from the attr-accept module when I drag a file onto the dropzone:\nUncaught TypeError: Cannot read property 'toLowerCase' of undefined\nSpecifically the error is generated on line 21: https://github.com/okonet/attr-accept/blob/master/src/index.js#L21\nThe issue seems to be that the variable file is not an instance of File but instead is an instance of DataTransferItem, which has no name property.\n. What version works for you? Given the error that was getting thrown in my console it seems that it's a matter of being able to handle the file var bing an instance of DataTransferItem as opposed to File. I'm also not sure if this changed in a recent version of react-dropzone.\nOn Thu, Oct 8, 2015 at 1:40 AM, Andrey Okonetchnikov\nnotifications@github.com wrote:\n\nI could not find any release notes to 2.1.0. What's changed?\nReply to this email directly or view it on GitHub:\nhttps://github.com/paramaggarwal/react-dropzone/issues/57#issuecomment-146459550\n. If it helps, I've been using the lib on Chrome 48 (Canary).\n. Of course. I'll see if I can repro in a fresh git repo with the bare minimum of dependencies. Thanks for the help @okonet \n. \n",
    "svagi": "Well, how do you add some custom attributes to input tag? For example if you want to add required or disabled attrubute, or anything else... How can I achieve that?\n. ",
    "dtirer": "Ah I see.  Thanks for your help\n. ",
    "appleboy": "@paramaggarwal Done!\n. ",
    "quietcodes": "If rejectClassName is not defined, it is adding an \"undefined\" class, which seems like an oversight.\n. ",
    "tkiethanom": "Yes, I am using file.preview. In my example {filesMarkup} creates the <img> tag with file.preview as the src. This works fine when it is outside of the <Dropzone> tags. However when I put it inside the <Dropzone> tag it complains the DOM has been mutated. \n``` javascript\nrender(){\n    let filesMarkup;\n    if (_.isEmpty(this.props.App.files) === false ) {\n        filesMarkup = this.props.App.files.map((file) =>\n          \n            );\n    } else {\n        filesMarkup = '';\n    }\nreturn (\n    <Dropzone onDrop={(files) => this.handleFileUpload(files) } multiple={false}>\n        <div>Try dropping some a file here, or click to select a file to upload.</div>\n        {filesMarkup}\n    </Dropzone>\n);\n\n}\nhandleFileUpload(files){\n    const { dispatch } = this.props;\n    dispatch(fileUploaded(files));\n}\n``\n. When I inspect the React elements after an upload it looks like its trying to put antag inside of anwhich is probably the problem. Which makes sense since` is actually an input. \nHere is the error:\nUncaught Error: Invariant Violation: processUpdates(): Unable to find child 1 of element. This probably means the DOM was unexpectedly mutated (e.g., by the browser), usually due to forgetting a  when using tables, nesting tags like , , or , or using non-SVG elements in an  parent. Try inspecting the child nodes of the element with React ID .0.0.1.0.0.$=14.0.\n. This deprecation warning appears in the console because I believe the function was moved to ReactDOM in the latest version of React v0.14. \n. I was using v2. This is resolved by updating to v3. Sorry for the issue.\n. ",
    "reggi": "Was this just shorthand to show you can put any callback here?\n. k thanks!\n. ",
    "micsumner": "I believe this bug was introduced in commit d4d0867\n. Ah, yep, I found this on Safari and Firefox. \n. ",
    "marnusw": "Thanks for the tip @okonet! I'll check it out and close this if it solves my problem.\n. So @okonet's suggestion does indeed solve my problem. :smile: IE still does not support pointer-events, but at the moment that doesn't matter since it doesn't support File Drag&Drop either.\nI think I will update this PR to include an addition to the docs to help others who might encounter this problem.\nOr, we could just add this style rule automatically within the component; and if there might be some reason to not always do that allow disabling it with a prop. What do you think @paramaggarwal & @okonet?\n. Hmm, there is a slight snag with this strategy. Disabling pointer events on the base style means the drag events never trigger on the dropzone. So, the children have to be wrapped in an additional span or other component with the pointer-events: none style applied to that wrapper. Then the drag triggers on the dropzone, but none of its children.\nThere is also a further unfortunate result: If you include a button as a child which can be clicked to open the file explorer, that button's pointer events are now disabled, meaning no pop-up messages and no clicks. The pointer-events: auto style has to be applied to the button to fix this. Not the end of the world, but also not ideal considering the pointer-events: none is hidden \"magic\" behavior.\nAnd, now this leads to further problems: When dragging over the button those events are now bubbled to the dropzone who reacts to them again. This causes the hover active/inactive state of the dropzone to become messed up. e.g. in my case when I drag off the button the dropzone remains in-active; only when you completely drag off it and then back over it does it activate again.\nPerhaps \"counting events\" per my initial fix could end up being more predictable?\n(And possibly better supported... For instance if IE implements File API in the future, but still no pointer-events.)\n. Thanks @okonet, I've reverted to the event counting implementation and it seems to work quite well in both Chrome and Firefox without any side-effects. If you approve of these changes, @paramaggarwal, I think this is ready to be merged.\n. Done, thanks.\n. I'll do that! Thanks.\n. Of course, forgot about that just now. Fixed...\n. ",
    "tony99nyr": "+1 @paramaggarwal Excited to give this a try.\n. Can we get a npm version patch npm publish with this fix please? xD\n. ",
    "JonathanWi": "Hey I'm having an issue with the pointer-event strategy: I want to achieve a full-body dropzone that only display when the file is over the body of the page. I so have my dropzone in position fixed above all content, which causes the content below to not be clickable anymore.\nI then apply the pointer-events: none to the container in order to be able to click below, with the caveat that the dropzone doesn't work from here.\nWhat's the solution here @marnusw @okonet ?\nThanks a lot\n. Thanks for your comment, sorry for getting back to you so late! \n\nThe more I think about it, the more I believe it should not be used for a \"whole document is a drop zone\" case. I think it might break a lot of stuff.\n\nI think you summed up my issue here, I might not have chosen the right component for the job. For a while I switched to (React Dynamic Dropzone)[https://github.com/overthinker29/react-dynamic-dropzone], an unmaintained fork of your repo. What's interesting is that it tackles the issues mentioned above by generating the dropzone on drag over, so, while the listener is always here, you don't need any pointer-events hack. The downside being that \u2014 because the input file is generated on the fly \u2014 I lose access to the open() function, the click being unable to look for the ref that is not created.\nDo you have any idea how I could fix this? I hope I'm being clear enough, and thanks a lot for your time!\n. ",
    "nanot1m": "Same issue in Chrome 45 on OS X El Capitan\n. ",
    "newsiberian": "The same issue on Linux. I've tried to drop images from kde dolphin and from krusader to Firefox, Chromium, but onDrop event never reached.\n. Only after these changes:\nonDragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\nI was able to go into the onDrop(). Btw, there was a PR #37. Why this code was removed?\n. ",
    "Lendar": "It's a bit weird but  #114 actually introduced that bug.\nFor the reference, scenario:\n\n\nOpen react-dropzone 3.3.0 at http://paramaggarwal.com/react-dropzone/\nDrop a music file from iTunes\n\nExpected: Dropped files files appears\nResult: nothing appears (except the state when you drag over). onDrag isn't fired\nChrome Version 49.0.2593.0 dev (64-bit)\nOS X 10.11.2 El Capitan\n\nI had to revert the fix (I want to 3.2.2) to get iTunes + dropzone working again.\nAny ideas what to check? Also, http://gaearon.github.io/react-dnd/examples-dustbin-multiple-targets.html (native file) works currently with my chrome and OS X.\n. Re-checked it once again on different project. My previous statement was not fully correct.\nMy observations\n\n\n114 from @newsiberian actually introduces the bug in projects with react-dnd\n\nv3.2.2 does not have this bug in projects with react-dnd\nv3.2.2 has this bug in projects without react-dnd\n\nConclusion\nIit depends whether there is another onDragOver listener in the project.\nDND from apps works only if there is a onDragOver listener that mutates e.dataTransfer.\nAnother fix\nHere is what works for me on both my projects. I took the idea from dropzone 1.x:\ndiff\n   onDragOver(e) {\n     e.preventDefault();\n     e.stopPropagation();\n+    e.dataTransfer.dropEffect = 'copy';\n     return false;\n    }\nBut fix is too weird for PR. I hope someone will confirm/deny it or clarify what's going on.\n. Would be happy if @pcrumm or @nanot1m tried both original fix and my fix to see if it works for their projects.\n\nOriginal:\n\nnpm i react-dropzone@3.3.0\n\nAnd mine:\n\nnpm i lendar/react-dropzone#fix-osx-apps-dnd\n. ",
    "systemizer": "Hey,\nAny reason why this wasn't merged in? I having the same problem, and using Lendar's branch fixes it. I'm happy to open a PR with the same change if that's what you need.\nthanks,\nrob\n. ",
    "yoni-tock": "Brilliant! Worked for me too\n. :+1: \n. ",
    "seyar": "same issue on chrome 48 on Mac\n. Solved. @yoni-tock specify accept and className param. \n. ",
    "pukapukan": "@okonet is right.  I was naively thinking react-dom would be compatible with previous versions of react.  I'll close this one as @okonet said - it'll be a major release to upgrade to react add dependency to v0.14.  Cheers\n. Lovely go ahead please\n. If you are storing file in S3, you can use S3 item creation event to trigger Lambda to auto orient image using gm.\n. ",
    "newoga": "FYI, just left a comment on a line. this.refs.fileInput should actually return the DOM node in 0.14.0. It's possible we are unnecessarily using the findDOMNode method. This is described here: https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#dom-node-refs\n. Do we actually need ReactDOM here?\nWe should test to see if this.refs.fileInput is enough... That way this project doesn't have a dependency on ReactDOM\n. Okay cool :)\n. ",
    "wgoh": "turns out it was referencing React wrongly and I had to add a React dependency in gulp's package.json.\n. ",
    "bobiblazeski": "Glad  to hear that you plan upgrade soon.\nI've just upgraded to 0.14.0 and I got below warning\nWarning: React.findDOMNode is deprecated. Please use ReactDOM.findDOMNode from require('react-dom') instead. \nbeside that components seems to works well.\n. Warning is gone many thanks  @kumarharsh \n. Works great, many thanks.\n. ",
    "willdady": "+1\n. ",
    "manosim": "Any updates on this one? Thanks for the awesome work so far :smile: \n. Thanks @okonet ! Works great! No more warnings :+1: \n. ",
    "kumarharsh": ":smile: \n. Alright\n. Although there should be another commit on the 2.x branch, which changes the dep from\n\"react\": \">=0.13\"\nto \n\"react\": \"^0.13\"\nor something similar, because although the 2.x branch does work with 0.14 as of now, things may change later, and the >= does not offer any guarantee of compatibility whatsoever.\n. ",
    "IndexOf": "file *.docx, browser chrome build 46\n. ",
    "amureki": "@okonet thanks for fast reply.\nOS X, Chrome Version 46.0.2490.71 (64-bit)\nJust added example from readme and tried to upload image file there: https://monosnap.com/file/iFw73PX7Ans3JZuFt8QnbqN4n2AJx3.png\npackages.json includes:\n\"attr-accept\": \"~1.0.2\",\n\"react-dropzone\": \"^2.2.2\",\nBut if I npm install attr-accept@1.0.1 all goes well on same code.\n. ",
    "PCreations": "In version 1.0.2 of attr-accept, I have to explicitly get the 'react-attr' key. So the require statement need to be var accept = require('attr-accept')['react-attr']; instead of just var accept = require('attr-accept');.\n. ",
    "ir-fuel": "This is quite straightforward to do yourself.\nsee: http://stackoverflow.com/questions/6756583/prevent-browser-from-loading-a-drag-and-dropped-file\n. ",
    "akkie": "I would like to provide a pull request tomorrow. Would it be useful to provide a prop which lets the user define different dropzones, even if these dropzones are not handled by this component. I think otherwise it can cause inconsistency with other components. By default it would only handle the dropzone handled by the component. Maybe this could be implemented with an event handler prop? Something like onOutsideDrop? The function gets the target or event passed and it must return true if the drop was outside and false if it was inside.\nSo I think we have three possibilities:\n- a prop which accepts a list of ID's\n- a prop which accepts a event handler which acts as a filter\n- opt-out from the feature so that the user can implement it self\nI would prefer variant two. What do you think?\n. I think the problem with this feature is that there exists no general solution. If we implement this solution without the check of the dropzone, then it can be the case that a drop into the dropzone doesn't work. And if we implement this solution then the user does not get the cool 'cannot drop here' icon. \nSo maybe the solution depends on the need of the user. I'm not sure if this feature should be implemented directly into this component or if the code should be implemented by the user itself.\n. OK, also this solution with the callback I'd suggested? Do you have a better idea for the callback name?\n. OK, I'll provide a fix. Do you have an idea how this could be tested?\n. OK I'll try it :+1: \n. What do you think about something like this?\n``` js\ncomponentDidMount() {\n  this.enterCounter = 0;\n  this.handleDropOutside();\n}\nhandleDropOutside() {\n  const defaultEvents = ['dragover', 'drop'];\n  const defaultCallback = function(e) {\n    e = e || event;\n    e.preventDefault();\n  };\nlet outsideHandler = {events: defaultEvents, callback: defaultCallback};\n  if (this.props.onDropOutside) {\n    outsideHandler = this.props.onDropOutside.call(this);\n  }\nconst events = outsideHandler.events instanceof Array ? outsideHandler.events : defaultEvents;\n  const callback = outsideHandler.events instanceof Function ? outsideHandler.events : defaultCallback;\n  for (let i = 0; i < events.length; i++) {\n    window.addEventListener(events[i], callback , false);\n  }\n}\n```\nA user can then pass a function like:\njs\nfunction() {\n  return {\n    events: ['dragenter', 'dragover', 'drop'],\n    callback: function(e) {\n      if (e.target.id != 'my-dropzone') {\n        e.preventDefault();\n        e.dataTransfer.effectAllowed = \"none\";\n        e.dataTransfer.dropEffect = \"none\";\n      }\n    }\n  };\n}\nIt's also possible to override only the events or the callback handler.\njs\nfunction() {\n  return {\n    events: ['dragenter', 'dragover', 'drop']\n  };\n}\nTo disable the functionality a user must pass an empty event list:\njs\nfunction() {\n  return {\n    events: []\n  };\n}\nWhat do you think?\n. It seems so. The SO answers use all dragover and drop. And another uses also dragenter.\n. Is there something I can help here to get this merged? This would help me to use this component in a redux friendly way.\n. @anuragCES This feature doesn't work if the file dialog will be opened with the open method, because the state isFileDialogActive will not be set.\n. Currently the method open does open the file dialog. This works, but the onFileDialogCancel cannot work because the isFileDialogActive variable will only be set to true in the onClick method.\nYou must change the onClick method to:\njs\nonClick() {\n  if (!this.props.disableClick) {\n    this.open());\n  }\n}\nAnd the open method to soemthing like this:\njs\nopen() {\n  this.setState({isFileDialogActive: true});\n  this.fileInputEl.value = null;\n  this.fileInputEl.click();\n}\n. There is also a problem with this setState call. The second parameter passed to the setState function must be a callback. You pass the result of a function. Therefore the browser shows an error like:\ninvariant.js:38 Uncaught Invariant Violation: setState(...): Expected the last optional `callback` argument to be a function. Instead received: Object (keys: type, visible).\nhttps://facebook.github.io/react/docs/component-api.html\n@anuragCES Do you provide a fix for these both issues?\n. Yes, it can break code, because the onDrop method gets always called now. Previously it was only called if all files were accepted. So I think a major release would be the best. \nI think it may also be useful to pass the accepted files as second parameter to the onDropRejected function. So a user could display an error message like \"2 files from 8 couldn't be uploaded\". What do you think?\nWith this addition, every method gets now all files passed.\n- onDrop(passedFiles, rejectedFiles) => Gets always called and is useful to handle custom behavior\n- onDropAccepted(files) => Gets called if all files are accepted and is useful to handle the success state\n- onDropRejected(rejectedFiles, passedFiles) => Gets called if any of the files will be rejected and is usefull to handle the failed state\n. I've updated the pull request and I've changed only the style issue. Let me know if I should also implement the suggested onDropRejected behavior. \n. Yes, you are right. I thought it would be useful for the sake of consistency. But I'm also fine with the current implementation. Anyway the filter option should be implemented into another pull request.\n. Great :+1: \n. Damn! I would exactly change this line, but I've forgot it.\n. The fileAccepted method is bound to the class and the props also. This works as expected it's also covered through the test.\n. You could also write:\njs\nthis.setState({ isFileDialogActive: true }, () => {\n  this.fileInputEl.value = null;\n  this.fileInputEl.click();\n});\nI'm not sure which is the better approach\n. ",
    "mwolson": "I filed PR #373 to implement this. It's necessary to listen to both drop and dragover. I kept it very simple: the caller gets to decide whether they want to install the document hooks to prevent outside drops, and this is done by default. Any further customization could easily be done by passing allowGlobalDrops and having callers install those two document hooks themselves. Let me know what you think.\nIf you want both this and the other PR I filed today, they're both in my master branch with conflicts resolved.\nCC: @tonymet. None of the workarounds proposed in the Firefox bugtracker are any good, since they happen on a drop() event, and not on dragEnter events. Until they fix it upstream, we should at least make it look like all attachments are accepted while dragging, which brings us to parity with Safari (which doesn't support file types on drag items at all). A false positive is better than a false negative here. PR #382 implements this.. Pushed the requested changes, ready for another round of review.. Finished removing the handling of nested dropzone components and squashed the previous work. I added a test case to describe the current behavior, which is that both dropzones will fire onDrop() events.. In this PR, there are some addEventListener calls for drop and dragover. The new prop controls whether those get installed. When installed (this happens by default, false case) these hooks make the entire browser window an allowable drag-and-drop target, but don't do anything with the drop. This overrides the default browser behavior of navigating to the dropped item.. I'd be OK with removing the prop if you want, since the default browser behavior is definitely not desirable.\nI've tested it in a real browser (Firefox and Chrome, not yet IE/Edge) with a single dropzone. I'll add a unit test with multiple dropzones shortly.\n. One possibility for why we might need a prop in the future: if the user has 1000+ very granular dropzones for some reason, they may want to install the global document handling only once. But I don't know how probable it would be for someone to do that.. After testing, the document drop handler is capturing events meant for Dropzone components, will need to handle targets of components that have gone away during re-render, and parent Dropzone components need special handling to reset their state when child Dropzone components get a drop. Going to work further to address these before proceeding with a merge.. Handled child/parent drops in 4b2d86b on my other PR.. Rebased this on top of my other branch since there's starting to be unavoidable overlap. Finished addressing all of the remaining issues with both PR's. Removed WIP status - ready for another look.. Finished one round of changes, still need to split out parent/child nesting, will do later today.. Finished rebasing this on top of the other updated PR, so there should be no more handling of nested components (except for the new tests which document the current behavior).. Sure thing, finished the rebase onto master. @okonet that example prevents default browser dragover behavior, but only for drags on top of that div. It doesn't do anything for drags on the rest of the document, so we still need the document handlers.. Both handlers are needed - take either away and the feature stops working.. Based on http://caniuse.com/#feat=dragndrop , it seems like Safari can't display a rejected status on dropzones until they support dataTransfer.items. Currently only Chrome supports it.. The styleguide branch seems good so far. Do you want me to target the PR against that branch instead of master?. In this case, the workaround is for dragEnter only, while attr-accept is more generic, so react-dropzone would probably be the best place for it. Until Firefox 53+ is actually released, I'd need to keep a forked copy around, so it's up to you.. I pushed c56d2a6 to this branch in my repo to add a comment.\nWhen Firefox 53 comes out, they will start to pass correct MIME types, and that x-moz-file type will hopefully never be seen again.. OK, filed PR #388 for that. I'll change it to be:\njs\nif (this.dragTargets.indexOf(e.target) === -1) {\n  this.dragTargets.push(e.target);\n}. What you suggested seems fine, will implement:\njs\nthis.dragTargets =  this.dragTargets.filter(el => el !== e.target && this.node.contains(el));. OK.. We want to make sure that even if the browser sends us duplicate dragEnter events for the same element, which it might, we'll still handle it correctly without the dragTargets list growing too large. It would also be possible to make the dragEnter just be a simple push and rely on the filter in dragLeave to remove any duplicates later, up to you.. preventDropOnDocument seems fine. If dragover is not provided, dropped items will still take over the browser window, because the browser doesn't consider a div with only a drop event (and no dragover) to be a valid drop target.. The problem is that the parent needs to know whether some child has already fired an onDrop() callback. If a child has fired, reset the dragActive/dragReject/dragTargets state and don't fire onDrop(). If a child has not fired, reset the state and do fire onDrop().\nIf we used event.stopPropagation(), the parent would never receive the event, so its state would remain active, and the render of the parent would still be styled with dragActive=true after a drop on the child.\nThe order is like:\n1: Document drop handler (if installed via preventGlobalDrops=true)\n2: Child drop handler\n3: Parent drop handler\n.  Normally event objects that React passes to event handlers are structurally reused, like:\njs\ndelete e.target;\nAnd then put in a pool. If another event comes in, they'll get removed from the pool and sent to another handler.\ne.persist() will keep that event out of the pool, so we get our own copy of it, and can mutate the event by adding the __dropzoneChildHandledThis property. When I tried to do this without an e.persist() call, React would throw a warning to the browser console.\nFurther reading: https://facebook.github.io/react/docs/events.html. OK I'll add JSDoc. I'll split this into its own describe block I think, with multiple it steps.. The problem is that there's no way to fire an event on document using Jest. So if we didn't manually exercise it here, we wouldn't get test coverage. And it's useful to make sure that we don't call e.preventDefault() in the case where the drag event is meant for one of our dropzones - because if we did call e.preventDefault() in that case, the dropzone would not get the event.\n1: document onDrop() <-- calls e.preventDefault() -->\n2: dropzone instance onDrop() <-- doesn't get event now -->. The innermost dropzone is the child Dropzone component. The outermost dropzone is the parent Dropzone component.. Yeah it's nested Dropzones. An example would be: an instant messenger UI where dragging over an entire messaging window will show an overlay modal, and then you may potentially be able to drop into one or more large icons to indicate whether to send the attachment immediately or compose a message to go with it, with a default behavior of \"compose\" if the user drops into the modal itself and misses the icons.. OK. I don't immediately need nested dropzone support for my own use case yet, but might in the future. I think it might be surprising for someone who tries nesting to find that the parent still receives a drop event, but it's hard to predict whether anyone will actually want to do that. I'll go ahead and remove it from the 2 PR's and stash the changes somewhere; maybe it could be a separate PR by itself later if needed.\nI tested the sibling case manually, and it works fine. A single user drop gets fired like:\nevent chain 1: sibling 1 document drop: <-- this isn't me, e.preventDefault() -->\nevent chain 2: sibling 2 document drop: <-- don't call e.preventDefault() -->\nevent chain 2: sibling 2 dropzone instance: <-- receives event -->. ",
    "minotaurrr": "When disabled is set <Dropzone disabled /> and user drops a file into the dropzone browser default behaviour will kick in. Any idea how to prevent this?\n@okonet @mwolson . ",
    "rolandjitsu": "@minotaurrr bind the drop events on the parent element and prevent default there if dropzone is disabled.. @heshamelmasry77 please use SO for such questions as this sort of functionality is not handled by this lib.. @nofearOnline should be as easy as <Dropzone accept=\".stl\" />.. @nofearOnline you get that error because there is no such property on the dropzone component. You can just slice the list of accepted files in the on drop cb.. onDrop emits a js array, so use .slice(0, maxItems):\n```js\nclass Basic extends React.Component {\n  onDrop = acceptedFiles => {\n    const files = acceptedFiles.slice(0, 10) // 10 max files\n  }\nrender() {\n    return (\n      \nTry dropping some files here, or click to select files to upload.\n\n    );\n  }\n}\n. @beausmith You'll need to disable click on the dropzone element. Just add the `{onClick}` handler and prevent default:jsx\n\n    {({getRootProps}) =>  evt.preventDefault()})} />}\n\n```\nIf that will not work, please make a reproducible example so we can look into it.\n. @brianac see o174pv349 for a fix. At the moment, this is the only way to make this work.\nI guess the label click already triggers a click on the input, and we also do the same from our onClick() handler, hence the open twice.\nI'll reopen and see if we can do anything to improve this.. Could be helpful to open a new issue with a bit of description and a reproducible example because it's hard to figure out from all the comments what the issue is.. @sbaechler please provide a reproducible example (on codepen, codesandbox, etc.), otherwise we cannot help you. I'm using this lib with Jest and I have no issues.. @sbaechler could it be that you have the typings from @types/react-dropzone instead of the ones that are hosted with this lib?. I see, it's possible they do, that might need a bit more investigation though,. Does anyone know who is maintaining these types? And if we could instead host them in this repo?. @TLadd I understand. I wonder if it would be difficult to have both TS and Flow types in the same repo ... Do you have any idea if this is possible at all?. @TLadd I am a maintainer \ud83d\ude04 But I plan on moving the current code to TS, which means the TS typings that currently are separate will be gone. So I'm not sure how the flow types would work with the new TS code \ud83d\ude15 . Is anyone still gonna work on this? And if so, how will this play with TypeScript? Because I plan on migrating the current codebase to TS after https://github.com/react-dropzone/react-dropzone/pull/717.. @okonet what do you think, should we close this PR?. @rxmarbles ok. We already have TS typings, but I also have started working on migrating the current codebase to TS.. @ggarcia92 please provide a reproducible example as the basic example works just fine in Chrome 71.0.3578. Or at least the version you're using.. @okonet is this still the case? Or can we lock and close this issue and update the docs?. @okonet This has been active for a year or so. My only concern is that we shouldn't give ppl the impression that there is no further development on the lib. Otherwise I agree with you.. Ok, it must be just me then \ud83d\ude04 I'm good, no need to change anything.. @Grantlyk yes \ud83d\ude04 But you're always welcomed to contribute if you wish.. @pedroapfilho and @salman1995 you're free to contribute at any time.. @merric there was an attempt in https://github.com/react-dropzone/react-dropzone/pull/700, but we first have to finish https://github.com/react-dropzone/react-dropzone/pull/468.\nI might have some time this coming month to continue what @okonet started.. @yebrahim I'm using react-scripts-ts and import Dropzone from 'react-dropzone'; works without any issues (make sure you have the allowSyntheticDefaultImports flag enabled in tsconfig.json).\nTypings are now baked in this package, in case you use the ones from @types.. @okonet fair enough :) I guess I'll start working on it.. @TrySound there's also componentWillReceiveProps which is deprecated with 16.3 and will be removed. Why are you closing this issue?. Sure, see component-lifecycle-changes.\nWhile that is not a breaking change, it will log a deprecation warning.\nIt might be easier to migrate incrementally rather than when breaking changes occur after n version releases.. @TrySound oops, sorry. This project does not have that, it was #428 that uses it.. @ralexrdz here you go: using-third-party-plugins.. Well, from the description (Simple HTML5-compliant drag'n'drop zone for files ...) I assumed this lib handles file drag 'n' drop, so it made sense to avoid a behaviour where the user can select a piece of text and drag 'n' drop it.. @okonet yes. I'll do that as soon as I'm done with my cup of coffee \ud83d\ude04 . Let me know if there's something else I need to do to get this merged.. I'm seeing a couple of syntax errors as well in the console:\ntext\nError: Minified React error #152; visit https://reactjs.org/docs/error-decoder.html?invariant=152&args[]=StateHolder for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \n...\nSyntaxError: await is only valid in async function\nI wonder if it's related.. I'm looking into it as well.. I think I found the issue, I'll make a PR soon with a fix.. @xuefanzhang I'm afraid that there is not much we can do on our side to fix this. As I explained in https://github.com/react-dropzone/react-dropzone/issues/653#issuecomment-429525418 and as @ilovett pointed out in his comment, this is a problem with inconsistent behaviour of file selection in mobile browsers as the accept property is proxied to the input directly.\nI'm closing this, but feel free to reopen if you think you may have found a bug caused by this lib.. Without a reproducible example it is hard to tell what you're experiencing. It would be nice if one of you could make a codepen or something which illustrates the issue (using the latest version).. @lsadam0 I think react-dnd can also handle file drag and drop, is there a reason why you use both libs?\nIn any case, it is difficult to tell what is the cause of the issue, or if there is one, if there's no example illustrating the described behaviour.. @lsadam0 ok, well thanks for taking the time to try.\nIn any case, I'm closing this issue since the behaviour cannot be reproduced. If anyone can provide an example, please feel free to reopen.. @rNiall you do not drop files from the explorer that was opened in the browser window. You can either drop a file from a separate file explorer window or click and select.. @rNiall that's intentional, see https://github.com/react-dropzone/react-dropzone/pull/551.. I can confirm that the cb is called when selecting files as well (besides when it's canceled). @frontalicious-martijn would you mind making a PR with a fix?\nMost likely it happens at index.js#L285. You just need to check if {acceptedFiles} on the state is not empty and only if it is we invoke the cb.. @shogan94 This is not something that can be controlled by this lib. We use <input type=\"file\"> under the hood which has limited control over what you're describing.\nThere is a capture attr which can be used to indicate that capture of media directly from the device's sensors using a media capture mechanism is preferred, but every mobile browser may behave differently and I don't think it's gonna help in your particular situation.\nIf you're using react native, you have a few options that may provide better support:\n\nreact-native-document-picker\nreact-native-image-picker\nreact-native-file-selector\n\nI'm closing this issue as there is not much we can do about it. Feel free to reopen if you find resources that indicate this can be fixed on our side. \n. @stefanocastriotta I've also just tested on an iOS simulator with iOS 12 and 11.4 and there are no issues in Safari.\nI've also just tried it out on SauceLabs with a real iOS device and Chrome and still no issues.\nYou could use the Chrome remote debug tools to debug the page running on your device and see if there are any errors there. That might give us a hint at what's going on.. Closing this as I cannot reproduce.. @fabian-hiller I just tested this on Android, seems to work just fine (no view reload).\nI think this is an issue with the iOS web view or the way that the instagram app handles it.\nI'm afraid that there isn't much we can do from our side. The logic we have in place should already prevent the default behaviour (see src/index.js#L177).\nIf you want to help and illustrate the issue, you could try setting up a repo with a simple iOS app with a webview and load the react-dropzone page and check if the same happens there.. @sbaggott this is more of a browser limitation today. Not all browsers (including Safari) apply the spec, hence the problem you're experiencing.\nIt seems that in Safari, there is no way to get the files or items (from DataTransfer) during the dragenter, dragleave and dragover events, therefore, we cannot apply any styling correctly.\nThough, no accept/reject styles should be applied at all. I've just tested in Safari 12 on macOS and I can confirm that this is not the case and it seems to be a bug.\nI'm working on a fix for displaying no accept/reject style in Safari.. @carlosjunod please read the browser limitations section. And see ryj9lmz27q to illustrate the workaround.. @okonet do you think we could get this merged?. @chobo2 to answer your questions:\n\nIf you're referring to a limit on how many files can be dropped, there isn't such a feature (see proptypes for all available options). This lib does not read the files, so theoretically it should be ok to drop many files, but it's the user's responsibility to batch process the files.\nAs far as I know, folder API is only available in Firefox and Chrome (through a plugin, not baked into this lib) and it's a draft\nI don't follow what you're asking \ud83d\ude15 \n\nFor folder support, you need to use file-selector now. See dropzone-for-folders section, should be working just fine in Chrome.\nWhat you get in the drop callback is a list of File objects with an additional property {path} which is populated with the full path in case of a file that has been inside a folder.\nI'm closing this now. Reopen if you think you found some issues.. This should have been fixed with https://github.com/react-dropzone/react-dropzone/pull/678.. Closing this as it seems to be fixed. Reopen if the issue persists.. @okonet note that the folder drop example is not going to work because the plugin that it's used to illustrate this case does not return a list of native File objects.\nThe only viable option I see here is to extend the native File object and add the additional props, but this is something that the plugin author would need to do.\nAlternatively, I could make another plugin which would do just that.. Pretty much. We could add a specific check for the object type the plugin returns (see Html5FileSelector.js#L71), but I think that would be a mistake.\nI think that plugins should comply with the type signature that this component requires for getDataTransferItems() (as illustrated in #673). \nIn any case, allowing plugins to return any kind of objects might cause some confusion for users as they would probably expect the callbacks (onDrop(), etc.) to be called with File (FileWithPreview) objects which they then can upload to a server (as an example).\nSo I guess we could either:\n\nmake plugins comply with the same type signature for getDataTransferItems() and I could make another plugin which would do that (or make a PR for the current one)\nor expose isFileList() as a property (under some other name) which the plugin would also have to provide.. @chobo2 see https://github.com/react-dropzone/react-dropzone/pull/682. It has been fixed by providing a different plugin library.. I think there might be a simpler fix for this. I don't have Edge to test this out, but I think that it should suffice to just call isFileList(fileList) at index.js#L196 and return if it's false.\n\n```js\nconst acceptedFiles = []\nconst rejectedFiles = []\nif (!isFileList(fileList)) {\n  return;\n}\nfileList.forEach(file => {\n``. @jare-talend could you make sure that coverage doesn't drop? It's probably the newif` that was added, but you can see the problem when running the tests locally.. And make sure to rebase your local branch from master as there has been some changes merged recently which conflict with yours.. @jare-talend there are still some conflicts, could you update your branch using rebase so we can merge this?. @jare-talend I'd advise squashing all your commits into a single commit (including rebase from upstream), otherwise we cannot easily merge your PR as it seems to be missing some changes.. @okonet this should cover the plugin issue and folder support.. @okonet do you think we could get this PR and https://github.com/react-dropzone/react-dropzone/pull/673 (after I rebase it) merged?. @okonet to answer your questions:\n\nIn essence, it does achieve everything that the other lib did with some slight differences:\na. It's written in TS (makes it easier to maintain typings)\nb. It returns native File objects patched with a {path} property\nc. Provides es5 bundles (besides cjs, umd and es)\nc. I chose to make a different lib because I thought it would be much faster to do so than make a PR with all the things + making releases\nDo you mean replace the current default getDataTransferItems() with the one provided by the lib?\nI am not against that, do you think it would be better to be in its own repo given that it's written in TS? And perhaps move it to this repo later on when/if this repo would also be written in TS (I think it would be a good idea and would help with maintaining typings)?. @okonet thanks a bunch, I appreciate that.. Ok, I will move the lib to this org and make sure the auto publish from Travis still works. I'm open to work on migrating to TS, but later on when I have more time on my hands.. You should not be linting dependencies' code. Could be because your tslint config is not ignoring node_modules. Try adding:\njson\n\"linterOptions\":  {\n  \"exclude\": [\n    \"node_modules/**\"\n   ]\n}\n\nThere is also https://github.com/palantir/tslint/issues/3623 which reports somewhat similar behaviour.\nIn any case, I'm closing this as it does not address any specific issue.. I've tested the fullscreen example in Chrome 70.0.3538.54 on macOS and the events are triggered. This was an issue before https://github.com/react-dropzone/react-dropzone/pull/678 was merged and released, I don't think it's an issue anymore.\nI'm closing the issue. @christiannwamba feel free to reopen and provide a reproducible example if you think this is still an issue.. @sumthief You're right, event propagation will not work as expected due to the async logic within each of our internal callback fns.\nRemoving the use of promises is not an option at the moment as it is the only way to allow 3rd party plugins to asynchronously read through a dir tree.\nAt the moment the easiest way to fix this is to do what you described, use stopPropagation() internally (maybe enabled via a property flag).\n. @sumthief would you give https://github.com/react-dropzone/react-dropzone/pull/701 a try and let me know if it fixes the issue you describe? If you checkout that PR and run the examples, there is already one illustrating nested dropzones where the child stops event propagation to the parent.. @sumthief sorry about that \ud83d\ude44 Glad it helps though.. @claudiuchetan could you open a new issue and provide some reproducible example?. @rxmarbles  how's it going with this one? Do you still plan on continuing the work on it?. I'm trying to setup SauceLabs with some basic e2e tests, if it works out, that should give us a list of supported browsers.. Fixed in https://github.com/react-dropzone/react-dropzone/pull/690.. @MrLeebo you're welcome to make a PR for this \ud83d\ude09 . @pantharshit00 I think you need to enable the allowSyntheticDefaultImports in your tsconfig. But maybe we should keep the previous import style for backwards compatibility.. Duplicate of https://github.com/react-dropzone/react-dropzone/issues/640.. @okonet ok. So what you're saying is that we should remove all style and class management and pass on state to the children render fn?\nIs anyone working on that PR or should I continue work in this PR?. @okonet I'm closing this one then. I'll take a look at the other PR and leave some comments there if it's necessary.. @hornta yes, there is a reason.\nIt is used for the plugin API which allows users to provide their own impl. of getting the files from the drag event (and some APIs are async, see .file()).\nBut it's there mainly to support folders, see .readEntries() and the file-selector plugin.\nI think that promises are widely supported today and there are very few exceptions where they're not supported.\nWith that in mind, we cannot simply remove the usage of promises. Though, it might be a good idea to at least mention this in the docs.\nThere is a pending PR which addresses the browser support, perhaps @rkmarks could also mention the APIs that we use and what would need to be polyfilled.. @DougWoodCDS glad you managed to find it. But true, there is no example of showing a preview. Perhaps it might be a good idea to add one or mention this.. @supertopoz I have just tried the basic example from our docs page and I cannot reproduce the behaviour you're describing.\nAs for the label, we're currently working on https://github.com/react-dropzone/react-dropzone/pull/468 which changes the way the dropzone is used and will consequently allow users to have their own input with whatever else they need.. @okonet done, I've added an example of how to generate previews.. @Miteshdv changing the cursor based on whether a file is accepted or not would confuse users, because you could have many files amongst which just one is rejected. Then you also have clients that do not use a pointer (touch devices).\nI think as it is right now is just fine.. As I mentioned in https://github.com/react-dropzone/react-dropzone/issues/649, if react-dnd stops event propagation on the drag event, the dropzone will not react.\nI'd avoid using these 2 libs together as you can achieve more or less the same functionality with react-dnd as well.\nBut it would also be helpful if you could provide a code sample on codepen or somewhere which illustrates this issue.. @leenyburger Could you share an example? The previews example at react-dropzone.js.org seems to work just fine.\nAre you actually doing a copy paste of the example and running in your env?. @leenyburger no worries, glad you figured it out.. One last thing, would please make sure you commit message follows the conventional commit spec?. @susuwatari2 for these sort of questions, I would go to stackoverflow and ask there for help. This lib does not handle any parsing or requests to a server. You get the list of files, it's up to you to handle the rest according to your needs.\nPerhaps this is a good starting point.. @seanpascoe feel free to make a PR.. Yes it is.\nOn Thu, Nov 29, 2018, 18:58 Andrey Okonetchnikov <notifications@github.com\nwrote:\n\nIs this based on #468\nhttps://github.com/react-dropzone/react-dropzone/pull/468?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/717#issuecomment-442911145,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOaYXuXCcO9fFWNyJhCMHpoJ5RVYpks5u0BJPgaJpZM4Y5i5X\n.\n. I cherry picked and updated the rest of the tests and made sure the latest\nchanges are still there. But I'm still working on it, will finish probably\nnext week.\n\nOn Fri, Nov 30, 2018, 19:37 Andrey Okonetchnikov <notifications@github.com\nwrote:\n\nNice! So you just squashed all commits into one?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/717#issuecomment-443280463,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOR2Pko94JfpX6NQeEdIKXCIN3pYtks5u0WzzgaJpZM4Y5i5X\n.\n. @okonet will do. Same here, I'm not so sure about those two. Do you have something else in mind?. @okonet I understand. But I think this change gives users a lot more flexibility. Let's see how users react to this change and if it turns out it's not received very well we'll think of a different way to handle this.. @okonet please see the /examples/Styling/Readme.md file in this PR, I have included the examples for styling with inline styles or styled-components. @mike1808 you're welcomed to make a PR and address this issue if you don't mind.. @mike1808 see examples.. @seanpascoe please change the commit type to docs: replace spread .... We don't want to make a release for this as nothing in the lib changed.. @justincrich I think the events are registered, it's probably something else going on there. Most likely some layout issue (something in the iframe is overlapping your DZ element).\n\nI'll take a look and see if I can help, but this is not really a dropzone issue.\n~~If you checkout https://codesandbox.io/s/2v04kz611r, you'll see that with a simple <iframe>, everything seems to work as expected. So it must be something within the yt player that captures events and stops propagation or positions some element above everything. Hard to tell, but I'll try to see if I can find what's causing this.~~\nScratch that, it behaves the same with any iframe \ud83d\ude04 \nI'd take a look at capture-click-on-div-surrounding-an-iframe, same thing applies to drag/drop events.\nBut in short, there is not much we can do from our side to prevent such behaviour. So I'd suggest using a different UX to handle file drop that avoids the drop area being on top of the iframe.. Still working on this \ud83d\ude04 . @thegreatercurve that'd be nice. But we should move to converting the component to a functional one and use the new react hooks API before that.\nI think I will soon start working on the hooks part. After we have a PR and merge it, if you're still interested, you can definitely help out with moving to TS.. @thegreatercurve maybe you could help with https://github.com/react-dropzone/react-dropzone/pull/688 meanwhile.. Waiting for the official release of hooks before starting on this.. Oh, that was just yesterday. I read the blog on 16.7 and they mentioned that we should not expect that the next release will have them.\nI guess we can get started with this soon.. @chobo2 please see https://github.com/react-dropzone/react-dropzone/pull/551.. @chobo2 if you read one of the comments there:\njs\n// The file dialog on Chrome allows users to drag files from the dialog onto\n// the dropzone, causing the browser the crash when the file dialog is closed.\n// A drop effect of 'none' prevents the file from being dropped\nMeaning that we do not allow files to be dropped while you have the file dialog opened. I hope it's more clear now.. @chobo2 that might have been fixed in newer versions, but it seems to have been the case for Chrome 63.\nWe could revisit this, but having both the file select window opened and dragging/dropping a file on it seems quite odd to be honest. . @chobo2 I'll try to see if Chrome still crashes in this case, if not, I guess we can revert the current behaviour.\n@yurykornilov no worries. I haven't used windows in quite a while, so I'm not familiar with its ux.. @chobo2 see https://github.com/react-dropzone/react-dropzone/pull/725, tested in latest Chrome and there seem to be no issues now. Please test it as well and let me know if you encounter any issues.. @chobo2 it seems like you're experiencing the same as https://github.com/react-dropzone/react-dropzone/issues/727, with 8.0.0 you need to provide a fn as children. Please refer to the docs for examples.. @chobo2 please see the dropzone-for-folders example.. @chobo2 I can confirm it works in Chrome, latest version. You might be dropping outside the dropzone area (which in the example is just above the text).. @b0gd4n if you check the v8.0.0 release, you'll see a note on the breaking change.\nFurthermore, all examples have been updated to reflect the new changes.. @Shubham-S-Yadav I don't have Safari 11 on hand, but I just tested on Version 12.0.2 (12606.3.4.1.4) on same macOS version and the dropzone works as expected as far as I can tell.\nOn a side note, this lib does not handle any uploads.. @Shubham-S-Yadav true, I just tried it using saucelabs and it seems like drag 'n' drop does not work. Might take some time to investigate this issue using saucelabs.. @jordiponsllaurado no, it is not possible because I have tested the latest versions of major browsers and all examples work as expected.\n@karensg please open a new issue and provide a reproducible example illustrating your issue.. @jordiponsllaurado there shouldn't be any difference, unless the modal prevents some events. As I mentioned before, please open a new issue and provide an example illustrating the issue.. @Shubham-S-Yadav https://github.com/react-dropzone/react-dropzone/pull/733 should fix the issue you described in Safari 11. Will be merged and released soon.. This seems like the required children fn is not provided, that's what the error is about. The basic example works as expected, so there must be something that you're missing.\n. @StefanoSega yes, that's expected. You're required to provide a child fn and apply at least the props from getRootProps() on the jsx element that your child fn returns. E.g.:\njs\n<Dropzone onDrop={acceptedFiles => console.log(acceptedFiles)}>\n  {({getRootProps}) => (\n    <div {...getRootProps()}>\n      <p>Drop files here, or click to select files</p>\n    </div>\n  )}\n</Dropzone>\n@RosenTomov if you don't share a repo or something I cannot help. All the examples at react-dropzone.js.org work as expected as far as I can tell.. @b0gd4n I'd refer to stackoverflow for such questions. But in any case, you control the state of your own component, so you can easily remove any files. So in the example with previews, you'd have a method similar to the following:\njs\nclass DropzoneWithPreview extends React.Component {\n...\n// call this method on some event where you render the thumbnails\nremoveFile(file) {\n  this.setState(state => {\n    const index = state.files.indexOf(file);\n    const files = state.files.slice(0);\n    files.splice(index, 1);\n    return {files}; \n  });\n}\n.... @steverecio as you can see in releases, the breaking change was only introduced in 8.0.0, so you can continue using the lib as you did previously.. @sitompul of course, use https://github.com/react-dropzone/react-dropzone/tree/v{x.y.z} where {x.y.z} is replaced with the version you're looking for, e.g.: https://github.com/react-dropzone/react-dropzone/tree/v6.2.3.. @vieira that was added to improve accessibility.\n@KevinAsher's comment should work, and it should not break accessibility. But this is probably a bug, and we should only capture the keyboard events if the dropzone element is in focus.\nI'm going to look into it and see what can be done to keep the accessibility features but not break in the scenario you describe here.. @vieira please try https://github.com/react-dropzone/react-dropzone/pull/731 and let me know if the issues you have persist.. @AbdelhafidFutureTrendz this is not related to react-dropzone. Please refer to stackoverflow for such questions.. You'd have to be more descriptive with this. This lib only checks the ext. or mime type as given by the accept property and rejects/accepts the files based on that.. @hirokimoto please see attr-accept and open an issue there as this lib uses it internally to validate the mime type or file ext.. @danielesalvatore the onDropRejected cb is only called when one of the files does not meet the accept property requirements (see src/index.js#L189).. @jschill would you mind making a PR for this and adding some tests?. I can confirm this, will investigate some time next week.. Fixed in https://github.com/react-dropzone/react-dropzone/pull/742.. @Brandonprs please provide a reproducible example (codepen or plunker should suffice).. @Brandonprs is this issue still valid? Or did @padrisimo's suggestion work for you?. It would be helpful if someone would setup a codepen or something to illustrate the issue, otherwise is not easy to tell what the root of the issue is.\n@ARChilton the error means that the node ref is not set, so you might be overriding {refKey}. That's why it's be helpful to reproduce that error in a codepen.. @ShrawanBK someone just opened a similar issue a few days ago, https://github.com/react-dropzone/react-dropzone/issues/743. With v8.0, you need to provide a fn as child.. @slikts while dropping files from the file dialog is allowed, it is a weird thing to do.\nThe expected behaviour is that you select the files and just hit the open button (or whatever is called) of the file dialog. Or you drag and drop from a file explorer window onto the dropzone area.\nI think that the drag events are not triggered while the file dialog is opened (each browser may behave differently) and I'm afraid that there isn't much that we can do to change that.. @slikts feel free to make a PR.. @mxstbr would you mind changing the commit message to align with conventional commit?. @jschill there's one test failing.. @ARChilton the dragEffect was removed to allow drag/drop while the file select window is opened.\nI'm not sure it's necessary to add back that property, I think you could easily achieve the same result by just styling the dropzone.\n```js\nconst style = {\n  cursor: 'copy'\n};\n\n  {({ getRootProps, getInputProps, isDragActive }) => (\n      \n\n\n  )}\n\n``. @ScottAgirs I'm not sure I follow what you're trying to do. Thethis.onDrop()` fn that's illustrated there would be your own function, so you can pass whatever you want to it.\nAs for the dropzone onDrop, the 3rd argument is the drop event, see src/index.js#L186. @ScottAgirs I'm gonna close this issue for now. If you provide more context and an example of what you're describing, I'll be happy to reopen.. @capaj you're welcome to make a PR.\nBut it's just easier to let the user know that the file(s) was rejected because of one of those 3 reasons and then the user would have to ensure that the requirements are met. We also don't want to pull in more dependencies (bytes).\nOtherwise you have to manage the rejection reasons as there might be multiple for one file (too large + wrong mime type, etc.) and that just adds complexity.. @eoghanmccarthy you need a render fn as child since v8. See the docs.\n@leoc if you want fullscreen, just wrap the whole app in the dropzone. That should do the trick. I use it in a similar way. But it's true, the example it's misleading.. @leoc I see, I don't think that using the context API is necessary, unless your child components are deep down the DOM tree. You can pass the dropped files as props to your child components.\nEven using the context API would not be so bad, if done properly, it should not clutter your code.\nFurthermore, I think that binding drag events to the document would probably bring a whole lotta of trouble, especially if there are other libraries biding to the same events on the document.\nIt also feels odd that some child component binds events on a parent component (except some rare cases).\nTherefore, I'm honestly not keen on adding such a change, but if the community feels like it is necessary, I would not oppose it.. Ok, I'm closing this for now.. @okonet that's is true, but it could be the same for onClick, onFocus and onBlur. So do we also remove the disableClick prop and close this PR?. @okonet no, I agree. It will require less maintenance to deprecate the prop and just have an example on how to achieve the same result using idiomatic js/react.. @jonahgreenthal that is expected behaviour.\nYou are not dragging a file, per say, you are dragging an html element (if you look at the data transfer item type, it's text/html), and we intentionally ignore those types because this lib only handles files from your system.\nI think react-dnd might have what you need.. That's probably a bug or Safari reports that as a file type. I will investigate this tomorrow.. That seems to be the case, Safari reports the drag item type as file.\nFrom MDN, it seems like the recommended type for such drag items is text/uri-list, which means we would ignore such items. But Safari (and perhaps other browsers) decided to add the file type as well.\nI'm working on figuring out what to do about this, but in principle, we'd like to only handle files with this lib and ignore other types (links, html elements, etc.).. @jonahgreenthal unfortunately, Safari seems to be the only browser that can get the file data when an image is dropped from a different browser window.\nI have tried using FileSystemFileEntry.file() which just throws in Chrome and Firefox. I also tried DataTransferItem.getAsFile() which returns null.\nBottom line, we will not be able to add support for this at the moment, unless we find some new APIs or tricks to achieve the same behaviour as Safari has in Chrome, Firefox and Edge.\nIt's possible that the other browser might follow suit and support this behaviour in the future, but I wouldn't keep my hopes up.\nIf you find anything that might help, we'll reopen this issue.. @jonahgreenthal I think that examples/other/native-files should cover drag 'n' drop for files. Though, I doubt that it will behave any different for your use case (besides Safari). Let me know if react-dnd will work for you.. @jonahgreenthal thanks for letting me know. Let's hope that APIs will evolve in the future (or get fixed) and allow for such behavior across browsers.. @cuongduong257 I'm not sure I follow what you're trying to do. Please provide a proper example to illustrate your issue.. Closing this. Feel free to reopen if you provide an example illustrating your issue.. @okonet it seems that refactor commits do not get released. What should we do about this?. @okonet I guess we'll release this with the next bug fix. I'm working on figuring out what to do about #755 as it seems Safari is reporting the drag item type as file, so there will be a PR soon.. @goodoldneon You're right, it should not appear unless the user uses it. But this prop will be removed and it should not be the case anymore.. > I\u2019m not sure about this one. It says it s a feature release although it removes 2 features. It also says it\u2019s a non-breaking change there both removal change the API and this must be released as a major version.\nIt is a feature because we add folder support by default. Users do not have to import another library to be able to drag 'n' drop folders anymore.\nBut true, even though removing onDragStart should have no impact on any other apps, ppl might have added this prop anyway.\nI will add a breaking change comment in the commit.\n\nMoreover, I don\u2019t understand the motivation of doing so. Can you please explain it?\n\nFirst of all, onDragStart is never being called, because this event is only triggered on elements that are dragged. And that is not the case for the dropzone.\nSecondly, I added folder support by using the file-selector lib so that users do not have to do it themselves.\nLastly, users can still provide their own file aggregator, that feature hasn't changed. Both tests and examples are still there.\n\nAlso it feels like these changes should have been split into 2 separate PRs. Right now I\u2019m now sure what change is affect but what prop removal.\n\nMaybe. Or I could have 2 separate commits instead of 2 PRs.. Ok, I'll make 2 PRs \ud83d\ude04 . Closing this, will open separate PRs.. @okonet From dragstart, this event is either triggered for an element that is being dragged, or if a child of the element that has the event listener is dragged. Either way, for a dropzone, this will never be the case.\nFurthermore, since the dropzone is now headless and we do not have any logic that affects the functionality of this lib in the cb, users can simply attach the onDragStart to the element they render as root:\njsx\n<Dropzone>\n    {({getRootProps}) => <div {...getRootProps({onDragStart: evt => console.log(evt)})}/>}\n</Dropzone>. @okonet maybe we need some more users to test this and confirm. So I won't merge this PR for now.\n@rxmarbles can you also check that {onDragStart} cb is never called when drag 'n' drop of files occurs?. Hmm, it did not release as breaking change. Maybe it's because I did not add the colons after BREAKING CHANGE?. Should be fixed with https://github.com/react-dropzone/react-dropzone/pull/767.. @jdmg94 I've already started working on migrating to hooks in feat/hooks.\nIf you'd like to help, you can contribute to the PR that I was planning to do once I update all the tests.. @paulmichaelxd I think your issue is that you're using <Paper> as dropzone. As far as I know, the {ref} prop on that component will not work (and we need it), but you can use {...getRootProps({refKey: 'innerRef'})} to fix it.\nLet me know if that works for you.. @paulmichaelxd Hmm, maybe try opening an issue with mui or ask on SO using the mui tag.\nIn any case, I will close this issue as it's not specific to this lib.. Hmm, this might be because of the way it's bundled. I'll check and let you know.. @NunoCardoso we cannot reproduce this on react-dropzone.js.org. When the dropzone is in focus, opening the file select dialog with keydown events (SPACE/ENTER) works just fine.\nYou will have to provide a reproducible example, otherwise we cannot help you.. @goodoldneon right, that's because you're overriding the ref that getRootProps() sets.\nCan you describe what is your use case? Maybe we need to think about exposing the ref somehow.. @goodoldneon Yeah, I saw it now \ud83d\ude04 \nWell, the docs are a bit vague, to be honest. So I should probably be more specific about the fact that you cannot bind a ref to the same node where the dropzone is bound.. @NunoCardoso this will change anyway in the next major version.\nWe're working on using the hooks API. You will also be able to get the ref to the dropzone and input elements with the new release.\nI will close this now, but please let me know if you have any other issues.. This will be resolved in https://github.com/react-dropzone/react-dropzone/pull/767. The property will be removed.. @barbalex this feel like an issue with file-selector and not with dropzone. But I have a feeling it has been resolved in https://github.com/react-dropzone/file-selector/commit/e5ecce836a4bc8a51059fe21426d1290bb5d2bb8.\nIf you think the issue is still unresolved, please open an issue there.. Right now it's set to ^0.1.8, so it should pick up on the latest fixes if you run the install command again (make sure to ignore the package lock files).\nBut it will be updated in a next version.. Doing this on react-dropzone.js.org works just fine (the basic example shows the file you dropped).\nSo I'm not sure what you're experiencing. Please provide an example on codesandbox or some other tool.. @sstur lets hold off with this until I will make a PR for upgrading to hooks, we might just not need this at all.. Furthermore, findDOMNode is deprecated in strict mode.. > I do know that findDOMNode is deprecated, but there isn't really a more elegant solution to this kind of imperative DOM stuff. Considering findDOMNode doesn't have any performance implications it seemed like a good tradeoff to get a working PR for this fix now and then deal with finding a viable replacement for findDOMNode when such a thing makes sense. (If you know of a viable alternative for findDOMNode for this use case, please do let me know)\nI see. I don't fully understand what the issue is so I cannot really have an opinion on this. Though, you can use refKey (getRootProps({refKey: 'domRef'})) to customize how the ref is set, but I suspect that this won't help.\nI will try react-native-web to see what the problem is.\n\nFor the moment, for me to get Dropzone to work with react-native-web projects I basically need to fork this repo and make the above changes because I don't think this can be worked around in userland (correct me if I'm wrong).\n\nYes, that's not acceptable. I am confident we can fix this on our side.\n\nWhat if we use createRef and pass that ref to the render function for the consumer of this library to decide how to get it to the dom node.\n\nWell, the PR with the hooks uses createRef(), so it might be an option if there isn't a more elegant way.\n\nThe obvious big downside to this is that it is a breaking change to the public API of react-dropzone and for something that can easily be accomplished with findDOMNode.\n\nPerhaps there's a way to be backwards compatible.. Using a functional component for MyView would actually solve the problem, but you're right, this composite comp. might be from some other lib.\nI just added a test case and I'm trying to find a solution for it, hopefully by not using findDOMNode as for ppl using strict mode it might be a problem.. The thing is, we cannot use findDOMNode() as it will definitely be problematic for users using strict mode, and it won't really work when users use <Fragment> and return more than 1 node.\nSo the proper solution would be to expose a ref to the DOM node from within the composite component and tell dropzone what key to look for:\n```jsx\nclass MyView extends Component {\n  render() {\n    const { children, innerRef, ...otherProps } = this.props;\n    return (\n      \n{children}\n\n    );\n  }\n}\n\n  {({ getRootProps }) => (\n    \n      Or Drop Here\n    \n  )}\n\n```\nSee l50rj41k7m for a working example.\nOf course, using a functional component would avoid all these issues (and there's no reason not to use one as react provides hooks for managing state and life cycle):\njsx\nfunction MyView(props) {\n  const { children, ...otherProps } = props;\n  return (\n    <div  {...otherProps}>\n      <span>{children}</span>\n    </div>\n  );\n}\nAnd lib maintainers should handle the scenario where ppl want to get a hold of the DOM ref for the component they build (e.g. material-ui uses innerRef to set DOM refs and provide convenience components to use ref directly).\nBottom line is, I don't really see a way we can fix this from our side without introducing an unnecessary breaking change.. Great. Try it out and let me know how it feels.\nOn Fri, Mar 1, 2019, 12:40 Andrey Okonetchnikov notifications@github.com\nwrote:\n\n@okonet approved this pull request.\nLGTM burn I didn\u2019t try it yet.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/772#pullrequestreview-209543722,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOesb62JzQH0OBJG2U2emF6F0nU9mks5vSRGjgaJpZM4bYybC\n.\n. Note to self, use useReducer() for managing the state returned by the hook instead of using unstable_batchedUpdates() to batch state updates.\n\nAnd add a note about upgrading the build deps in the commit message.. @okonet got it. Just did 1. 2 I guess so, I will do it later, unless someone else wants to do it. I agree with 3, but let's give ppl the option to use either way.. @rxmarbles please see #772.. @rxmarbles no worries. Well, I needed to upgrade react-styleguidist to latest in order to use react hooks, but that also required upgrading everything else (webpack, babel, etc.).\nMaybe I should have added that in the commit message \ud83e\udd14 . Hmmm, the document object is also used by the hook, so it's strange that it's not an issue there. Could you provide a minimal example on codesandbox.io or some repo I can clone and run?. @emjaksa could you create a repo and share that?. @chill5018 thanks.\n@gauravtiwari that will get coverage down as it's not easy to test in Jest. So we need a more elegant solution. I'll take a look tomorrow, or you're welcome to make a PR with a solution that wouldn't affect coverage.. @Chris533 working on it. There's another error, besides the one reported here and I'm trying to track it down.. This particular issue should be fixed now in #779. Please try it out and let me know if you encounter any other issues related to SSR.. Will investigate and let you know if this is an issue on our side.. Sorry, I cannot seem to be able to test this on SauceLabs and I do not have a Windows machine. Could you pinpoint where the problem happens and what is your current setup (some code sample or reproducible example on codesandbox)?. There are definitely some problems with some of the examples (APIs that are not supported in IE11), but I'm not sure what the problem is with the drag events, I will try again on SL, maybe I'll manage to replicate the problem.. One thing to note is that file-selector makes use of Array.from() which needs to be polyfilled in IE11.\nBesides that, I'm having some trouble testing drag 'n' drop behavior on SauceLabs (cannot drag drop anything, anywhere). Could use some help from someone who has a Windows machine and IE11, because it probably has nothing to do with dropEffect.. You can still use class components, the <Dropzone> is still exported, see class-components. Otherwise v9.0.0.. I think it's related to https://github.com/react-dropzone/react-dropzone/issues/775.. @okonet just tested if the fix works and there seems to be no more problems. Let me know if it's ok to merge.\nP.S. I think we should eventually add some integration tests to ensure this won't break in the future.. @okonet sure thing. Good luck \ud83d\udc4d . @dimroc thanks for reporting this.\nThe fullscreen example was removed because it was misleading, as some users thought it meant they can drag 'n' drop on the document.\nIf we introduce {disableClick} we ought to do the same for all other events (focus, blur, keydown and drag events).\nUsing preventDefault() would not work because it will introduce other issues (e.g. parent dropzones would also pick up on it and stop the expected behavior), that's why I resorted to stopPropagation(). But I haven't thought of this scenario when I did it and it is indeed a problem.\nI'll give this a thought and try to fix it as soon as possible.. @localjo please see index.js#L594 and utils/index.js#L77. There is also an example illustrating exactly what you're describing.. I'm on my phone, but one thing to note is that v10 requires react v16.8\n(also react-dom).\nI will be back from holiday next week and I will take a look at all the\nreported issues.\nOn Mon, Mar 11, 2019, 17:34 miroslavkremenovic notifications@github.com\nwrote:\n\nOk, I'll be clearer. Problem is not happening in my non-minified source.\nOnly when i build app ( on staging for example).\n\nI'm using node v10.0.0 (npm v5.6.0).\nreact-dom v16.4.0, react v16.7.0\nLink for the error decoder is\n   https://reactjs.org/docs/error-decoder.html/?invariant=307\n   My app crashed on several pages and i figure out it is because of\n   dropzone ( it was only thing that all pages had in common), also my last\n   change in code was upgrading dropzone to v 10.0.0. When I install again\n   9.0.0 version, the problem was gone.\n\nI apologize for being unclear before.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/issues/784#issuecomment-471589684,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOQTvJZYldNdByTVAIC3kQIgIx4rzks5vVnd8gaJpZM4boNIZ\n.\n. I think lastEffect is an internal react error, see this SO and facebook/react#14014. In any case, the error is not a direct cause of this lib, so I'll be closing the issue.. Thanks for your effort, but there is already a PR which addresses\nthis issue.\n\nOn Mon, Mar 11, 2019, 23:23 Kai Hotz notifications@github.com wrote:\n\nchange document.createElement('input') to React.createElement('input')\nWhat kind of change does this PR introduce?\n\n[x ] bugfix\nfeature\nrefactoring / style\nbuild / chore\ndocumentation\n\nDid you add tests for your changes?\n\nYes, my code is well tested\n[x ] Not relevant\n\nIf relevant, did you update the documentation?\n\nYes, I've updated the documentation\n[x ] Not relevant\n\nSummary\nDoes this PR introduce a breaking change?\nOther information\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/react-dropzone/react-dropzone/pull/785\nCommit Summary\n\nFix document is not defined\n\nFile Changes\n\nM src/utils/index.js\n   https://github.com/react-dropzone/react-dropzone/pull/785/files#diff-0\n   (4)\n\nPatch Links:\n\nhttps://github.com/react-dropzone/react-dropzone/pull/785.patch\nhttps://github.com/react-dropzone/react-dropzone/pull/785.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/785, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOWHcR_1YCiozvDKRvXniSqYPDDd_ks5vVslNgaJpZM4bpl1g\n.\n. There is already a pending PR for this. Please check the issues and PRs\nbefore creating new ones.\n\nOn Tue, Mar 12, 2019, 12:48 Pavel Prichodko notifications@github.com\nwrote:\n\nWhat kind of change does this PR introduce?\n\nbugfix\nfeature\nrefactoring / style\nbuild / chore\ndocumentation\n\nDid you add tests for your changes?\n\nYes, my code is well tested\nNot relevant\n\nIf relevant, did you update the documentation?\n\nYes, I've updated the documentation\nNot relevant\n\nSummary\nI am using react-dropzone in a Next.js application. After upgrading to\nversion 10, I started getting this error.\n[image: Screen Shot 2019-03-12 at 11 37 53 AM]\nhttps://user-images.githubusercontent.com/14926950/54194461-9b351b00-44bc-11e9-8987-d60c29de6a71.png\nAfter looking through the diff, I noticed that check about document\nexistence in utils was for some reason removed. After putting it back,\neverything started working again.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/react-dropzone/react-dropzone/pull/786\nCommit Summary\n\nfix: server-side rendering build\n\nFile Changes\n\nM src/utils/index.js\n   https://github.com/react-dropzone/react-dropzone/pull/786/files#diff-0\n   (5)\n\nPatch Links:\n\nhttps://github.com/react-dropzone/react-dropzone/pull/786.patch\nhttps://github.com/react-dropzone/react-dropzone/pull/786.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/786, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/ABaUOU58XPsFJNN2koZAWquEZAfG25Smks5vV4XygaJpZM4bqmDJ\n.\n. @okonet Yes it is, it seems to cause some issues in IE11. You can find it in the PR description and the commit message.. Strangely, when I tested on IE11 on a lambdatest vm, I saw no errors about the dropEffect. Will investigate and fix soon.. @okonet sorry, I accidentally requested your review. I meant to type someone else's name \ud83d\ude04 . Please see class-components example; the child of the <Dropzone> needs to be a render fn.. @carpben see v10.0.0. It's documented as a breaking change. Upgrading react from 16.7 to 16.8 should not be an issue as far as I know.. Will make an update in the coming days, thanks for pointing it out.. @jpcodeforit next time you open an issue please use the provided template.\n\nThis lib doesn't do any file uploads to a server, it simply provides you with the files that you dropped onto the dropzone or selected. It is up to you to implement the upload logic.. Hmm, I'm just trying to figure that out, but the only possibility is to wait for the promise to resolve before doing anything in these onDrag* callbacks. Is there any reason why this is now async?. Folder drop is not something that is in the official spec as far as I know.\nSo, in my opinion, supporting this could be a risk if it will never be supported natively.. Fair enough. I'll try to make these changes and add an example within the next few days.. Great. I moved the filtering logic in the hasFiles fn, but I also made sure that the default getDataTransferItems only returns File objects (by using getAsFile on the item).\nShould also work with folders as the fn in the https://github.com/react-dropzone/react-dropzone/pull/662 example will only return File objects which we expect to get.. Actually, all you need here is:\njs\nif (\n  !isFileList(fileList) ||\n  (isIeOrEdge() && evt.dataTransfer && !isFileList(Array.from(evt.dataTransfer.items)))\n) {\n  return\n}\nEverything else in the PR can be removed. And you need to fix one of the preview test cases.\nI'd also add some tests for this use case to ensure everything works as expected when IE/Edge is used.\nI tested this in Edge 17/16 on SauceLabs.. I'm not so sure that we should reject in this case, because what you actually dropped are not files (technically Edge says they are, when in fact they are urls). I think we should only reject when the accepted mime type does not match with the files that are dropped.. I also think you need more tests as coverage has dropped.. You're also missing the first !isFileList(fileList):\njs\nif (\n  !isFileList(fileList) ||\n  (isIeOrEdge() && evt.dataTransfer && !isFileList(Array.from(evt.dataTransfer.items)))\n) {\n  return\n}\nWith the above, the other isFileList() which guards for the onDrop cb becomes redundant and can be removed.. We could rename this test case to should not generate previews for non-File items. Rename this to should not call onDrop* callbacks in Edge for non-File items.. If you check caniuse/whatwg (DataTransfer, DataTransferItemList and DataTransferItem), the numbers are a bit different. I think it would be a good idea to have the same numbers as whatwg. And maybe add some links to the APIs.. There is a test case (should invoke inputProps onClick if provided) which checks the onClick() behaviour, could you update the test to reflect your changes (cb is called with evt)?. Actually, this still does not have any guarantee that the cb fn will be called after the state is set (.setState() is async).\nWhat you want is to have the onDrop* cb fns called in the .setState({...}, () => /* call the onDrop* fns here */) cb fn \ud83d\ude04\nAlso, add a test for this.. Could you also add a test for your scenario?. Hmm, that is a good question. You need to replicate the behaviour you explained:\n\nMount the component\nAdd a spy on the .setState() method\nAdd the {onDrop} prop with your cb\nSimulate a drop evt\nUnmount the component inside your cb (using enzyme .unmount() on the mounted component)\nCheck if .setState() was called after your cb\n\nSomething along those lines.. We still need to keep the option to invoke .open() using a ref as some users may not use the render fn.\nSo keep the old example and add another to illustrate what you have added.. Bind the open fn to the context of the dropzone.. I think this happens for some other examples as well, would you mind checking that and update it accordingly?. Sorry, I missed that \ud83d\udc4d . No, I just missed that, it's been a long day \ud83d\ude04 . Move this to the 'behavior' test suite.\n. Could you add a test for this change?. @ibc actually the tests are right alongside the source files. So you should be looking at src/index.spec.js. I think there are plenty of tests there to illustrate how everything works.\nAnd from the root of the project, after you installed the npm packages, just run yarn test/npm test or jest --watch.. Let's also make sure that coverage doesn't drop. If you run yarn test/npm test, you should see which lines are not covered (ignore two lines: one in utils#L54 and setTimeout(this.open.bind(this), 0) in the main file).. We could use the new React createRef() here and for the input below.. I think it would be useful to add the code for managing focus as I had in #700 (tabIndex, onFocus, onBlur and onKeyDown for reacting to space and enter).. And tabIndex: {-1} if we add the logic for managing focus I mentioned in my prev comment.. If we manage focus, let's also add a isFocused/inFocus property.. I think the jsdoc syntax for params is:\njs\n/**\n * @param {Object} props\n * @param {Function} props.getInputProps\n ...\n */. I think you could use a relative link here.. True, I did not take that into account \ud83d\udc4d . Good point, it was in the prev PR, didn't think to remove it.. Nope, it seems to not render false.. Please add tests for these 2 functions as well.. It is not, from a functionality pov, because nobody can use this prop. It never gets called unless the dropzone itself is being dragged.\nBut syntacticly speaking, you're right, it is a breaking change.. It does not. Users can still use their own thing. The only difference is that now we use the file-selector fn by default.. I think it was introduced by you or someone else. Without it, tests will fail. It's probably because of the file aggregation which happens async.. Will try it and update if it does.. Nope, it does not work if I move flushPromises() to afterEach.. @okonet so, what do you think, should we merge this?. ",
    "10xLaCroixDrinker": "It seems clunky to require className to use activeClassName. I don't need a generic className on my implementation, just an activeClassName.\n. ",
    "ripitrust": "Thanks for your reply\nI think the docs should be updated then, to avoid confusion\n. great\nthanks for your work\n. ",
    "DimitarChristoff": "similar issues described here https://github.com/FineUploader/fine-uploader/issues/990 etc and links to chromium bugs relevant. \n. done && merged upstream changes. I have kept the const/let and es2015 style imports as per my branch though it makes little difference. renamed options to inputAttributes = {} \n. ",
    "jenil": "Hey @paramaggarwal can you push these changes to npm as well? \n. ",
    "geminiyellow": "@okonet ok, what about this?\n. ",
    "HenriJ": "Sure thing\n. ",
    "adrianmaurer": "Yes please :+1: \n. When can you tag the release?\n. ",
    "anomaly44": "same problem here, I am using react-dom somewhere\n. @Stanback yes, this works indeed\n. I've switched some things around, and it works better now, has a better experience. I still seem to be having trouble on iphones though. But that's probably a safari problem on it's own. Thanks for this package!\n. instead of using the file locations to later upload the file, I process the files immediately when they are dropped in, using the canvas and FileReader. And i save the processed files in an array, and I upload the processed data later. I hope this makes sense :)\njavascript\nonDropAccepted(newfiles) {\n    newfiles.map(img => {\n      const reader = new FileReader();\n      reader.readAsDataURL(img);\n      reader.onload = (event) => {\n        const dataUrl = event.target.result;\n        const image = new Image();\n        image.src = dataUrl;\n        image.onload = () => {\n          this.props.addPicture(resizeImage(image, 1600, 1200));\n        };\n      };\n    });\n    this.setState({ showNotAcceptedError: false });\n  }\n```javascript\nfunction resizeImage(image, maxWidth, maxHeight, quality) {\n  const canvas = document.createElement('canvas');\nlet width = image.width;\n  let height = image.height;\nif (width > height) {\n    if (width > maxWidth) {\n      height = Math.round(height * maxWidth / width);\n      width = maxWidth;\n    }\n  } else {\n    if (height > maxHeight) {\n      width = Math.round(width * maxHeight / height);\n      height = maxHeight;\n    }\n  }\ncanvas.width = width;\n  canvas.height = height;\nconst ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, width, height);\n  return canvas.toDataURL('image/jpeg', quality);\n}\n```. I didnt have a mac available for testing so can't say for sure, but switching from onDrop to onDropAccepted might be what solved the problem.. ",
    "Stanback": "Someone else may be able to explain it more accurately, but it seems that V8 in NodeJS differs from that of browsers in how the ReferenceError exception is handled. In node, an uncaught ReferenceError crashes the process, while most browsers apparently ignore it or are not looking in global scope. A simple check such as if (document) ... on an undeclared variable will result in the exception.\nA workaround is making use of the typeof operator, which doesn't throw the exception:\nconst supportMultiple = (typeof document !== 'undefined' && document && document.createElement) ?\n  'multiple' in document.createElement('input') :\n  true;\n. @okonet Looks like @bruno12mota beat me to it: https://github.com/paramaggarwal/react-dropzone/pull/103 :+1: \n. ",
    "yargalot": "Just wanna chime in and say yeh just had this issue with the new release :+1: \n. ",
    "bruno12mota": "Sorry @Stanback was needing it for Relax so decided to PR it :smile: \n. ",
    "mull": ":+1: just ran into this\n. Thanks for the swift response @okonet!\n. ",
    "jeron-diovis": "For now I'm just asking about these changes. If you have no objections about them, I will submit a PR.\n. ",
    "YannPl": "is this issue abandoned, I would like to have this option too =)\n. ",
    "h8rry": "+1 on validating size\n. ",
    "thecaddy": "+1\n. ",
    "stueynet": "This would be pretty handy. Really would help to match this with the server limitations otherwise stuff just fails.\n. ",
    "MichaelLeeHobbs": "Here's how I validated for anyone finding this.\n```\n  const Preview = (props) => (\n    (props.file) ?\n      \n\n : {props.text}\n  );\nconst TWO_MiB = 2097152;\n  export class ImageDropZone extends React.Component {\n    constructor(props) {\n      super(props);\n      this.maxSize = props.maxSize ? props.maxSize : TWO_MiB;\n      this.maxWidth = props.maxWidth ? props.maxWidth : 3000;\n      this.maxHeight = props.maxHeight ? props.maxHeight : 3000;\n      this.text = props.text ? props.text : Drop image here. Max ${this.maxSize} and ${this.maxWidth}px by ${this.maxHeight}px;\n  this.state = {\n    file: null\n  }\n}\n\nonDrop(files) {\n  if (files.length === 0) {\n    Bert.alert('No files found!', 'danger');\n    return;\n  }\n  let file = files[0];\n\n  if (file.size > this.maxSize) {\n    Bert.alert(`File: ${file.name} size: ${file.size} > max: ${this.maxSize} bytes`, 'danger');\n    return;\n  }\n\n  var image = new Image();\n  image.addEventListener(\"load\", () => {\n    if (image.width > this.maxWidth) {\n      Bert.alert(`File: ${file.name} width: ${image.width} > max: ${this.maxWidth}px`, 'danger');\n      return;\n    }\n    if (image.height > this.maxHeight) {\n      Bert.alert(`File: ${file.name} width: ${image.height} > max: ${this.maxHeight}px`, 'danger');\n      return;\n    }\n    this.setState({\n      file: file\n    });\n  });\n  image.src = window.URL.createObjectURL(file);\n}\n\nrender() {\n  return (\n    <Dropzone multiple={false} onDrop={this.onDrop.bind(this)} accept=\"image/*\">\n      <Preview files={this.state.files} text={this.text}/>\n    </Dropzone>\n  );\n}\n\n}\n```\n. I've been contemplating this for close to an hour. The question is where do you stop? Do you keep library simple and have it do one thing well and let the users handle calls to validation among other things or do you start expanding. I could think of a long list of useful features: validation, transformer(aka zip or image processing), uploader(think slingshot), progress bar, etc. Here is an example of how we are using it in an MVP project: https://github.com/MichaelLeeHobbs/dropzoneMVP \nI'd keep it simple return (err, result) let the library users handle the rest. If the errObj is not null/undefined then call the onError function otherwise call the onDrop function.\n{error}, {acceptedFiles: [[file, msg]], rejectedFiles: [[file, msg]]}\nIf error  is undefined/null you pass the result obj to the onDrop, otherwise pass both to onError. \nIf you want to go deeper. onValidate > onTransform > onDrop > onUpload(onStart, onAbort, onDone, onProgress, onError). Then rename the project to Ultimate Drop Zone :-). @okonet As others have suggested leave it to custom validation and maybe update the doc's with some example of how to do validation.. ",
    "jitchavan": "using multiple=\"false\" OR multiple={this.props.multiple}, multiple option not disabling for me. \n. ",
    "xabikos": "On top of that would be useful to render the id in the corresponding hidden input in order to connect it with a label.\n. ",
    "at0g": "\nCan you submit a PR?\n\nok - will do\n. @okonet - Updated with your feedback, also added a couple more tests and removed the relative path to babel from npm test.\nLet me know if you have any other amends.\ncheers\n. ",
    "SamvelRaja": "Added the option to select only Folders based on the onlyFolders option, available only for chrome 21+\n. ",
    "afgarcia86": "This helped me resolve the warning I was getting. I would consider updating the readme \n. ",
    "cheton": "It did work! Thanks!\n. I just added a simple test. You can do the verification again. Thanks.\n. ",
    "bfwg": "I did set the ref as in the example.\nWhat I'm trying to do is user has to login to upload. So the open() has to called in side a then or a callback.\nThis is what I tried: once I put open() outside of then() it works fine but if I put it inside then, it is not working.\n. I'm sorry as this might be annoying.\nMine look like this but dropzone is not opening when I try to call this.props.submit(); Which is onSubmitLogin() in Main Component but everything else is firing except this.refs.dropzone.open();.\n``` js\nconst {\n  RaisedButton,\n  Card,\n  CardActions,\n} = require('material-ui');\nconst Login = React.createClass({\n  onFormSubmit(e) {\n   axios({\n      method: 'post',\n      data: {email: email, password: password},\n      url: ${SERVER_HOST}/login,\n      withCredentials: true,\n    })\n    .then(response => {\n      if (response.status !== 200)\n        throw new Error('Error');\n      else {\n        //The call back from parent component\n        this.props.submit();\n      }\n    })\n    .catch(error => {\n      this.setState({error: error});\n    });\n },\nrender() {\n    return (\n      \n\n\n\n\n\n\n    );\n }\n});\nconst Main = React.createClass({\n  onSubmitLogin: function() {\n    //Call dropzone but will not open.\n    this.refs.dropzone.open();\n  },\nrender() {\n    return (\n      \n\n\n\n\n\n    );\n  }\n});\n```\n. Hi, I just checked I did bind in my code \njs\nsubmit={this.onSubmitLogin.bind(this)}\nand it's still not working.\nThe weirdest thing is that everything else fires inside onSubmitLogin but dropzone\njs\nonSubmitLogin: function() {\n    //working\n    this.setState({\n      loginDialogOpenFlag: false,\n    });\n    console.log('submit', username);\n    //working\n    Relay.Store.update(\n      new ChangeUserStatusMutation({\n        username,\n        user: this.props.User,\n    }));\n    //not working\n    this.refs.dropzone.open();\n  },\n. ",
    "askbeka": "Not working when disableClick set to true. ",
    "bbthorntz": "@okonet sorry to comment on a closed issue, but I've also encountered this problem.\nStrangely, setting a longer delay in the setTimeout method of your example reproduces the problem. For example, increasing it from 1000ms to 3000ms.\nPlease see https://codesandbox.io/s/n7o91o9310 for a reproducible case.. @Nodman ahh, that\u2019s it. Thanks for the info! Like you said, we realised it was probably better to rework the UI.. I've been searching for an official documentation to link to but I can't find anything. It's strange that browsers (at least, Google Chrome) don't display a console warning to notify users that the event was blocked for security.. ",
    "Nodman": "@bbthorntz For security reasons browser blocks all the popups and dialogues that was opened not directly by user interaction, or those which were opened programmatically but with a delay not greater than 1000 ms. \nIf 1000ms dealy is your usual case, then you probably want to rework  UI/UX flow somehow to prevent this, because I am pretty sure that there is no good workaround for this\nHere some proofs . @okonet  good point, I'll do it!. Strange indeed, Mozilla showing little notification about popup blocking while Safari and Chrome are staying silent.\nI also wasn't able to find any docs on this, just some stack-overflow posts :(. @kroltan I was not able to reproduce this (tried both firefox and chrome). Can you please provide more information on your environment, like React versions?. Hi! Unfortunately, react-dropzone does not provide that kind of functionality, you need to use something like react-image-crop or similar.. I did builds, both with 1.0.3 and 1.1.3, npm size shows same values:\n5.57 KB for dist/index.js\n3072 B for dist/es/index.js\n\ud83e\udd14. Hi, thanks for submitting this PR!\nI am a bit confused about this because you can access onChange event via onDrop prop, no need to pass onChange into inputProps.\nCould you please explain more?. Thanks for the explanation!\nBut onDrop callback does provide an event as third argument\nhttps://github.com/react-dropzone/react-dropzone/blob/d12f9f615f2d908a1c8d6e268701026b4fc7917c/src/index.js#L187\n. Please see #554 . It\u2019s not clear to me about how getDataTransferItemsWithPreview  should be separated into an additional plugin. In the previous implementation, we use to have disablePreview prop which would enable/disable preview generation, so if we will take this code away, how would the user be able to generate previews with a plugin? I mean, importing plugin and passing it as getDataTransferItems will replace original function with all the core functionality, in this case, we should also export default getDataTransferItems plugin so the user can make a composition of those, or maybe add an additional prop that will take function to invoke with file list after getDataTransferItems ?\nSorry if I am missing something!. ",
    "simpixelated": "\nfull body dropzone\n\n:astonished: that would be awesome! What would be the \"right\" way to do this in React? It looks like react-modal (in componentDidMount) appends a new element to the bottom of the body which serves as the overlay. Could do something similar for <Dropzone>.\nEDIT: I see you mentioned putting <Dropzone> at the top of the app and disable all styling in #119. I think that's less than ideal.\n. I started working on this, but I'm fairly new to React so I got stuck with implementation. Here's what I have so far: https://github.com/okonet/react-dropzone/compare/master...simpixelated:full-body\nIt works as a proof of concept: when <Dropzone> is mounted, it attaches listeners to the document and will render <DropzonePortal> at the bottom of the page, which gets displayed as an overlay on dragenter of the body.\nThe problem I'm running into is how to inherit/share all of the functionality of Dropzone without just straight copying and pasting. Plus, I'm not quite sure if the original Dropzone should still be used, or if DropzonePortal should instead inherit it's props and render it's children. Or is there a way to move/copy the Dropzone element to the body during a React lifecycle event, instead of using another component entirely (like DropzonePortal)?\nLet me know if you have any suggestions. Thanks!\n. ",
    "bogas04": "Can someone give an example of uploading using fetch API ? \n. ",
    "wvance": "If I understood the \"full body dropzone right\" I implemented it with React Redux by: \n\nWrapping my entire app in the Dropzone component\nOverwrote the inline styles by passing in an empty style object\nAdded a global Redux state to true when with onDragEnter was hit and false to when onDragLeave was called. \nConditionally added a div in react using the global Redux state as described above. It works beautifully! \n\n\n. Here's the gist, I'll do a PR on the README later as well. https://gist.github.com/wvance/c052a57654ea943edee113a180598ab8\n. ",
    "Tushant": "I am in the same boat.\n. It is still the same\nvar RenderPhotos = React.createClass({\n    getInitialState: function () {\n        return {\n          files: []\n        };\n    },\n```\nonDrop: function (files) {\nthis.setState({files:files})\n   // var req = request.post('/upload');\n   // var data = new FormData();\n   //    files.forEach((file)=> {\n   //        data.append('file', file);\n   //    });\n   //    console.log('data is',data);\n   //    req.send(data);\n   //    console.log('req is',req);\n   //    req.end((err, res) => {\n   //      if (err) {\n   //        console.log('error', err);\n   //      } else {\n   //        console.log('success', res);\n   //      }\n   //    });\n},\nrender: function () {\n  return (\n       \nPhotos can bring your space to life\nAdd photos of spaces to give more insight of your space \n\n\n\nTry dropping some files here, or click to select files to upload.\n\n\n        <div className=\"row\">\n          {this.state.files.length > 0 ?\n          <div className=\"col-md-4\">\n            {this.state.files.map((file,id) => <li className='col-md-4' key={id}>\n                            <img src={file.preview} width={100}/>\n                            <div>{file.name + ' : ' + file.size + ' bytes.'}</div>\n                        </li> )}\n          </div> : null}\n        </div>\n        <div className=\"row continueBtn text-right\">\n            <button className=\"btn how-it-works pull-left\" onClick={this.props.previousStep}>Back</button>\n            <button className=\"btn how-it-works\" onClick={this.nextStep}>Next</button>\n        </div>\n  </div>\n\n);\n},\n```\n});\n. this does not show any files in template but is shown on console.\nvar RenderPhotos = React.createClass({\n    getInitialState: function () {\n        return {\n        };\n    },\n```\nonDrop(files) {\n    console.log('Received files: ', files);\n    this.setState({\n        files: files\n    });\n},\nshowFiles() {\n    var files = this.state;\n    console.log('files',files);\nif (!files.length) {\n    return null;\n}\n\nreturn (\n    <div>\n        <h3>Dropped files: </h3>\n        <ul className=\"col-md-4\">\n            {\n                files.map((file, idx) => {\n                    return (\n                        <li key={idx}>\n                            <img src={file.preview} width={100}/>\n                            <div>{file.name + ' : ' + file.size + ' bytes.'}</div>\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    </div>\n);\n\n},\nrender: function () {\n  return (\n       \nPhotos can bring your space to life\nAdd photos of spaces to give more insight of your space \n\n\n\n                Try dropping some files here, or click to select files to upload.\n            \n            {this.showFiles()}\n            \n\nBack\nNext\n\n\n  );\n},\n```\n});\n. I think there should be const {files}=this.state.files in showFiles().That worked for me.But still the images are not further added instead replaced by the current one.\n. I am down in the mouth.It might be me doing wrong.I am sorry I am giving up.\n. It happens like in the video but right away after dropping the files if I want to add some more then the previous images will be replaced by current one.\n. Sorry I thought I was doing wrong.It is superb for me now. I love this component.\nThanks\n. OK thanks but why delete option is not working ? Also when i try to add image one by one then the image is replaced by the current one instead of adding further.\n. #124 This issue is same as i am having.\n. ",
    "approots": "I guess not really the scope of dropzone. \n. @AVEmedia - You can register the \"progress\" event listener on an XMLHttpRequest.\nvar xhr = new XMLHttpRequest();\nxhr.upload.addEventListener(\"progress\", function(evt){\n  if (evt.lengthComputable) {\n    var percentComplete = evt.loaded / evt.total;\n    console.log(percentComplete);\n  }\n}, false);\n//...\n\nNote that fetch doesn't support upload progress.. ",
    "oeddyo": "Also need this feature. Any tips how shall I go and implement on my end? (new to react world)\n. ",
    "benbonnet": "hmm\u2026 no bad but i first expected to have the options/events promoted by dropzone.js. I might be wrong thinking it's related maybe\nThat is, where do you consider user land starts ?. ",
    "AVEmedia": "Ya but shouldn't there at least be a callback function that we can have access to in order to handle our own custom progress handling? I didn't see this callback listed.. ",
    "heshamelmasry77": "so how you implemented it . ```\nonDrop={acceptedFiles => {\n                    // do nothing if no files\n                    let handleDropImages;\n                    if (acceptedFiles.length === 0) {\n                      return;\n                    } else if(acceptedFiles.length > 5){ // here i am checking on the number of files\n                      return notify('maxImages'); // here i am using react toaster to get some notifications. don't need to use it \n                    }else {\n                      // do what ever you want \n                    }\n              }}\n\n.\nonDrop={acceptedFiles => {\n                    // do nothing if no files\n                    let handleDropImages;\n                    if (acceptedFiles.length === 0) {\n                      return;\n                    } else if(acceptedFiles.length > 5){ // here i am checking on the number of files\n                      return notify('maxImages'); // here i am using react toaster to get some notifications. don't need to use it \n                    }else {\n                      // do what ever you want \n                    }\n              }}\n\n. this is how you guys do it\nonDrop={acceptedFiles => {\n                    // do nothing if no files\n                    let handleDropImages;\n                    if (acceptedFiles.length === 0) {\n                      return;\n                    } else if(acceptedFiles.length > 5){ // here i am checking on the number of files\n                      return notify('maxImages'); // here i am using react toaster to get some notifications. don't need to use it \n                    }else {\n                      // do what ever you want \n                    }\n              }}\n\n```. ",
    "dduugg": "solved by upgrading npm\n. ",
    "magalhas": "I've just confirmed it :+1: \n. ",
    "vlindhol": "As I said, I don't have access to a development environment (I'm at work). Might take a look at it at home some day if I have the time, although it might take a while!\n. I'm not very experienced with the Javascript dev stack so hopefully I did everything right :smile: \n. Made the tweaks mentioned in your feedback! Note: I also turned on source map generation, is that wanted default behaviour? The uglified file and source map are both placed in \"dist\" now.\n. Adding react-dom to the externals didn't change the build size. As far as I can see it is not referenced anywhere else so webpack doesn't include it even if it is a dev dependency. Can that dependency be removed, or should it be made an official dependency?\n. Actually the testing framework still uses it, I couldn't figure out how to give the babel parameters directly to mocha.\n. In other words it might be better to go back to just using .babelrc, I thought webpack needed the parameters specified in webpack.config.js but that does not seem to be the case. I'll update the PR.\n. ",
    "markbgh": "I'm experiencing this as well. When I upload a file by clicking on the Dropzone, it works fine, but dragging a file into the Dropzone doesn't change the value of the hidden input, and therefore it doesn't work if you're doing a non-ajax submission (like in a Rails form, for example), because it looks to the hidden input to figure out which file to upload.\n. ",
    "ihgrant": "As far as I can tell, it's not possible to set the files property on a file input using javascript, so this is not a bug in react-dropzone.\nThe way I ended up working around this issue is by submitting the form using fetch, and storing the files that were dropped in state and adding them to a FormData instance created from the form, e.g.:\n```js\n    onDrop(acceptedFiles, rejectedFiles, e) {\n        this.setState({\n            files: acceptedFiles,\n            filesWereDropped: !e.target.files || e.target.files.length === 0\n        });\n    }\n    onSubmit(e) {\n        e.preventDefault();\n        let formData = new FormData(this.formRef);\n    if (this.state.filesWereDropped) {\n        /* if the file input has no files, check state for files and add\n         * those to the form data. This is necessary because dragging\n         * and dropping does set the files property of the file input,\n         * and it is not possible to set it from javascript for\n         * security reasons.\n         */\n        this.state.files.forEach(file => {\n            formData.append('myfiles', file, file.name);\n        });\n    }\n\n    // then POST your formData!\n}\n\n. @micchyboy237, not possible, as I explained above. It's a limitation put in place by browsers for security.. Yeah, things have changed in the 2.5 years since I wrote that! You can probably save off a reference to the target and then use it in setState, e.g.js\n    onDrop(acceptedFiles, rejectedFiles, e) {\n        const target = e.target;\n        this.setState({\n            files: acceptedFiles,\n            filesWereDropped: !target.files || target.files.length === 0\n        });\n    }\n``\nOr, as the warning says, calle.persist()` before setState.. ",
    "vikalpgupta-birdeye": "@okonet This is still an issue, dragging and dropping a file on dropzone does not update the filelist object, whereas in normal implementation of input type file dragging and dropping a file updates its corresponding filelist data. Please look into this.. ",
    "micchyboy237": "So did anyone fix this issue?. ",
    "JonnyBoy333": "@ihgrant In your solution to this problem above, you have the third property in onDrop that is the event. In my testing I am having problems accessing the target prop from the event. Whenever I try to do this I get warnings in the console and ultimately a Cannot read property 'files' of null error.\nThe warning reads like index.js:2178 Warning: This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the property \"target\" on a released/nullified synthetic event. This is set to null. If you must keep the original synthetic event around, use event.persist().\nHow did you get around this?. @okonet Looks like someone has already filed this issue in #646. I will track it over there.\nEdit: In the meantime is there any other way that I could use to tell if a file was dropped in or attached via clicking the box other than accessing the target object? I'm stumped on this one.. I'm also experiencing this same error trying to access the target prop on the event. Using version 5.0.1.\npublic onDrop(acceptedFiles: File[], rejectedFiles: any, e: any) {\n    this.setState({\n      file: acceptedFiles[0],\n      filesWereDropped: !e.target.files || e.target.files.length === 0  // <--- problems\n    });\n  }. ",
    "Lucretius": "@okonet Any idea as to when this PR is going to get merged?  The outdated babel configuration causes ReferenceErrors (Using removed Babel 5 option) for newer webpack projects.\n. I see this is an old issue, but I just pulled down the latest react-dropzone, and I am using CSS modules in my project.  I was able to confirm that CSS module support appears to work just fine, if you felt like you wanted to close this issue.. ",
    "husa": "The exception is thrown\nindex.js:113 \nUncaught TypeError: Failed to execute 'createObjectURL' on 'URL': No function was found that matched the signature provided.\ndroppedFiles array is empty.\n. @aight8 Would be good to remove document listeners in \"componentWillReceiveProps()\" if \"fullscreen\" property changes.. @okonet yeah, I will, later today \ud83d\udd53 . @okonet btw, are there any plans for release in the nearest future? at least minor.... Awesone \ud83d\udcaa . ",
    "cedricvidal": "+1\n. ",
    "janajri": "Also, seeing this when dragging an image between chrome tabs.. ",
    "ruiwei": "+1. The bug still exists on MacOS/FF.\nBrower: Firefox v58\nOS: MacOS\nreact-dropzone: v4.2.7 . ",
    "lakshmantgld": "Does adding \"webkitdirectory\" to inputprops allow directory upload ?\n. the input tag for directory upload should be like this \n\nso , I tried adding inputProps object, overriding the  input Attributes.\nvar inputAttributes = {\n      type: 'file',\n      style: { display: 'none'},\n      multiple: true,\n      onChange: this.onDrop,\n      webkitdirectory: true,\n      mozdirectory: true,\n      msdirectory: true,\n      odirectory: true,\n      directory: true\n    };\nBut this doesnt work. Correct me if I am wrong.\n. ",
    "wdhorton": "It doesn't work that way because React currently whitelists allowed attributes, and webkitdirectory and directory aren't currently whitelisted. See this issue for discussion.\n. A workaround I'm using until it gets fixed on the React side is to call setAttribute on the input in componentDidMount.\n. ",
    "rnicholus": "You don't want to use webkitdirectory anyway. One good reason why this file input attribute didn't catch on is that it's potentially dangerous. All files/directories are processed on the UI thread, and this can very easily lock up the browser.\nTo do this correctly you'll need to make use of the Filesystem API to handle dropped directories, which is a dead W3C spec that only Chrome and Blink-Opera implemented. If a folder is dropped in a Filesystem API-supported browser, the DataTransfer object on the drop event will contain an items pseudo-array property. Each entry will either be a FileEntry or a DirectoryEntry. For the latter, you'll need to parse all items in the directory, each of which will be a FileEntry or a DirectoryEntry, and so on. That's only the tip of the iceberg though. It's quite challenging to handle all of this properly, especially since it is all callback-based (this was implemented before the promise spec) and requires use of the DirectoryReader object, which is also non-standard at this point.\n. ",
    "Keepcase": "+1\nI would love to see this feature get implemented.\n. ",
    "SpencerCDixon": "Has folder uploading support been added by chance?. Is there is a reason this PR isn't merged?  What else needs to be done to add in folder upload support? Can I be of any help?. Excellent thank you @quarklemotion for working on this.  Looking forward to the merge :)  \ud83c\udf7b . @mfields-gpsw @okonet any updates on if dir support will be added?. ",
    "manodupont": "So its not released yet ....?\nWell I mean, is this working actually ? Cause i can see the \"multiple\" properties in the version i used but even though i used it, i can se only one file dropped, which is the folder itself. Or maybe i dont know how to use it ?\n<Dropzone className=\"dropzone\"\n                  onDrop={this._handleFileDrop.bind(this)}\n                  multiple={true}\n                  disableClick={true}>\nIs that correct ?. ",
    "leefsmp": "Is there a way to prevent user to drop a folder? ... I only want to allow dropping files. Thanks btw!. ",
    "CrocoDillon": "@leefsmp did you figure this out? I also want to prevent dropping folders.. @damianobarbati based on this answer on StackOverflow we use this:\njs\nconst isFolder = file => file.type === '' && file.size === 4096\nHope that helps! We didn't see different sized though.. @damianobarbati interesting, is it a multiple of 4096 by any chance? The SO answer mentions file.size % 4096 === 0, worth a shot I guess. If you figure out whether or not this works let me know please :). ",
    "user7of4": "Great component. Any chance D&D of folders will be completed, or D&D of .zip to folders?. ",
    "Sifogiannos": "in \"onDop\" function before \"setState\" you can check each file object specificly. \nI have seen that in the \"File\" object, has a propery \"size\" and \"type\".\nI my Linux (Ubuntu 16.04 and Chrome Version 63.0.3239.108 (Official Build) (64-bit))  i see that the size of a folder item always has the value=4096 and type=\"\", so you might can check for those properties and asume that if a \"File\" has those values its a folder and do not add it in your setState.\nBut all this is my asumptions haven't check in on Windows or Mac if the values are the same.\nAlso you must be careful that if a file does not has extension or has filesize 4096 if will block it too.\nSorry for bad English. ",
    "damianobarbati": "@leefsmp @CrocoDillon did you find a way to prevent/detect folder dragging? \nIn Chrome I always see different sizes for dragged folders (which do not match files in the dragged folder size).. @CrocoDillon on Chrome (at least v71.0.3578.98 on MacOS) this can't work because I don't get 4096 as size for dropped folders, be careful!. @CrocoDillon nope, 160 bytes.\n\n. ",
    "ttyao": "so the preview of video doesn't work, right? I understand it is probably out of scope, but it is very related and just want to check if you have had encountered this when you are developing this.\n. ",
    "ffxsam": "@ttyao The magic of Google: http://stackoverflow.com/questions/14516947/how-to-preview-the-video-file-that-user-wants-to-upload-on-the-website-php-fii. ",
    "djanosik": "Ok, I see where the issue is. dataTransfer.items do not have name property. Therefore it is not possible to compare file extensions and it will reject all file types.\n. ",
    "nofearOnline": "how can I accept only .stl files?. thanks. I have one more question: how can I limit the number of files?\nI tried to use maxFiles = {1} and eventHandlers = maxfilesexceeded : function(file) { this.removeFile(file) } but they both did not work and bring the warning: React does not recognize the eventHandlers prop on a DOMelement, and React does not recognize the maxFiles prop on a DOM element.. @rolandjitsu what do you mean by slice? how can I 'slice' the list?. ",
    "lujck": "Solve problems in Internet explorer 9?. ",
    "luisrudge": "I just found out about onDropAccepted. IMO, this behavior is totally counter intuitive and there's no docs about this :( I think the onDrop method should be triggered only with valid files\n. You want a PR to remove onDropAccepted or for improving docs?\n. but are you good with me removing onDropAccepted and onDropRejected?\n. Ok! I'll try to do this today\n. ",
    "nqbao": "To clarify: if i replace the input tag with simple text then there is no issue at all.\n. Thanks @NervosaX i will give it a try\n. It is  better but still very laggy, when you hover into the inner element of DropZone.\n\n. ",
    "NervosaX": "I get this error as well, though no input inside.\n``` javascript\n\n{this.state.dropEnter ? (\n    <div>Drop image here</div>\n) : (\n    <div>\n        <Icon value=\"photo\" />\n        <div>Click to select an image or drag one here</div>\n    </div>\n)}\n\n\n```\n. This works around the issue by just not using the dropzone dragLeave, instead using a wrapper div.\n@nqbao This might help you.\n``` javascript\n\n\n    {this.state.dropEnter ? (\n        <div>Drop image here</div>\n    ) : (\n        <div>\n            <Icon value=\"photo\" />\n            <div>Click to select an image or drag one here</div>\n        </div>\n    )}\n</Dropzone>\n\n\n```\n. Further developments. If using > IE11, you can use the following to fix the above issue:\nscss\n.dropzone {\n  * {\n    pointer-events: none;\n  }\n}\n. ",
    "romkri": "\n\nDragOver(e){\n      if(this.dragTimer) clearTimeout(this.dragTimer);\n      var me = this;\n      this.dragTimer = setTimeout(function(){\n          me.setState({drag:false});\n      },100);\n\n     e.preventDefault();\n     this.setState({drag:true});\n}\n\n. ",
    "silvenon": "The solution is: image/*, but it can also be a comma delimited list of MIME types if necessary.\n. ",
    "moffsugita": "https://github.com/react-dropzone/react-dropzone/issues/391. ",
    "albertolive": "When I say collapses, I'm referring that the browser stops responding. Ok, I'm gonna make a screen video to show you. \n. ",
    "mantagen": "Hi, has anyone else experienced this? Am considering using react-dropzone on a project but if it is not compatible with a modern browser in windows 10 then won't be able to use it.\n. ",
    "tbutman": "I've found that on IE10 the onFileSelect callback that I pass to the onDrop prop of my Dropzone component is being fired immediately when I click on the dropzone (or open it via this.refs.dropzone.open() ). The component works as expected on all other browsers.\n. ",
    "sercanov": "+1 with @albertolive \nI'm having issue with Windows 10 + Chrome, tried on 3 different machines. Works fine on macOS.\nonDrop event is not fired when file dragged and it freezes the tab.\n<Dropzone accept='application/json' onDrop={this.onDrop}>\n. Its related to accept='application/json' , removed it and it works fine now.\n. ",
    "sonaye": "What could possibly cause this to happen? is there a way around it where we can keep enforcing json files only?. Just got a bug report stating that this occurs only on Windows 10 Chrome.. ",
    "bgeihsgt": "We have run into this on Windows too. The underlying problem is that the incoming file has a type of ''. \nOn Windows, the browser relies on OS file associations to properly set MIME types https://stackoverflow.com/questions/1201945/how-is-mime-type-of-an-uploaded-file-determined-by-browser -- if there isn't a default program set/file association set, the browser just shrugs its shoulders and doesn't set a MIME type. That then fails the accept filter on the Dropzone component, yielding a no-op.\nI wonder if a good alternative to accept would be to also have an optional extensions prop that only accepts certain file extensions. There's no real risk there given the MIME type is determined by the extension anyway. Thoughts?. ",
    "johisco": "Hmmm don\u00b4t know if this is stilll an issue! But Im running in to something similar... I've created an electron app that uses react-dropzone. \nIt works perfect on mac, but on windows I doesn't seem able to drop a file in the dropzone i only get the forbidden icon as I hover over the drop area with a file? Any thoughts ?\n. ",
    "RamAtDatanchor": "\nHmmm don\u00b4t know if this is stilll an issue! But Im running in to something similar... I've created an electron app that uses react-dropzone.\nIt works perfect on mac, but on windows I doesn't seem able to drop a file in the dropzone i only get the forbidden icon as I hover over the drop area with a file? Any thoughts ?\n\ndid you find any solution @johisco - I see this on Electron on Windows, electron on Mac has no problem whatsoever\n. If you are running the electron app as administrator, it won't allow you drag and drop. Thats the case with any windows application like mspaint. I built the electron package as a normal user in non-adminstrator powershell and the built application did allow me to drag and drop.\nIts not the problem with the electron but with how Windows separates administrative and non administrative process. ",
    "cgodkin": "Hi Okonet,\nAfter looking at the code, I think I see what's wrong here.  I think that isDragActive and isDragReject are set correctly only with Chrome because, as you mention in the comments, onDragEnter() gets the transfer info only on Chrome.  On Firefox or IE 11, dataTransferItems will be empty which causes allFilesAccepted() to always return true.\nI think it would be a good idea to recompute isDragActive and isDragReject inside onDrop() so that the rejectStyle is correctly applied in the next render.  What do you think?\nThis is a great little package.  Thanks a lot for publishing it.\n. ",
    "tmarshall": "Ran into this as well, will put up a PR\n. going to open this off a different branch, so i can do another batch of commits\n. > I'm also wondering if this one will require a major version bump because of this change. What do you think?\nSeems like a patch to me, since it is resolving an interaction, as to how the developers expect it to happen. Though it depends on your perspective\n. @okonet test added\n. @okonet from that perspective yes :)\n. > Why is accept attribute is ignored. It should still work with directories IMO\nIt prevents you from selecting a directory because the directory is not of the correct type (at least in Chrome, which I was testing on)\n. So after selection, I leave it up to this library's type check to determine if it's valid (which I tested and it works once #173 is in)\n. > Can the directory walker function be a separate function?\nWhich function? Do you mean https://github.com/okonet/react-dropzone/pull/174/files#diff-1fdf421c05c1140f6d71444ea2b27638R166 ?\n. I will update this PR with the latest we are using. We have forked it in our own repo, and it has changed slightly over time. But it could either be merged in or used as reference for a secondary PR.. PR updated. We use this version of the code heavily at BetterView, and have processed ~240k uploads via the module, so I'm fairly confident that the walker portion is working well. Though I had to carry that logic back into this branch, so hopefully no errors were introduced.\nThere should probably be some tests added around the dir walking, as well.. @quarklemotion i have been slacking on this - let me know if there is anything i can do to help. This was carried over from the BetterView coding style. Since symbols are unique, the are used in this manner to mimic private methods.. ",
    "lonelydatum": "Maybe this example might help:\nonDropHandler(files) {      \n      var file = files[0]\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        console.log(event.target.result);\n      };\n      reader.readAsDataURL(file);\n}. ",
    "camrongodbout": "I was just curious because Dropzone.js added a fix for this on the client side about 29 days ago. No worries, I understand if we want to keep this as minimalist as possible.\nFor anyone who finds this in the future what I'm going to do is just use https://github.com/blueimp/JavaScript-Load-Image in the onDrop and it automagically reorients the image based on the exif.\n. ",
    "Andriy-Kulak": "@camrongodbout can you explain how you ended up the JavaScript-Load-Image package in React? if I follow the package instructions and add the package as a script tag in index.html file, then I cannot use loadImage because it is undefined in my specific component. Also, I cannot import the package in my Component properly. Any quick tips would be greatly appreciated!. ",
    "manoj-makkuboy": "@Andriy-Kulak I created a wrapper for that purpose. $ npm install fix-image-rotation. I am using it along with react-dropzeon in the onDrop function. It uses javascript-load-image internally.. ",
    "pavelpashkovsky": "@Andriy-Kulak you can use this repo: (https://github.com/blueimp/JavaScript-Load-Image)\nnpm i blueimp-load-image\nthen:\nimport loadImage from 'blueimp-load-image';. ",
    "lounsbrough": "@manoj-makkuboy - fix-image-rotation doesn't work in IE11.. ",
    "siegesmund": "Figured it out... thanks for a great library!\n. Hey @kristjanmik,\nI don't remember precisely why I was having this problem but I remember that I was using the request library, and switching to a raw XMLHttpRequest solved the problem. In all likelihood, there's an option to pass to request to fix this, but I've stuck to using XMLHttpRequest.\nThe essence of it is this:\n```\nconst xhr = new XMLHttpRequest();\nxhr.upload.addEventListener('progress', updateProgress);\nxhr.upload.addEventListener('load', transferComplete);\nxhr.open('put', url, true);\nxhr.setRequestHeader('Content-Type', 'multipart/form-data');\nxhr.send(file);\n```\nfile is simply an object in the files list from onDrop.\nurl is a signed url created using the aws-sdk.\nupdateProgress and transferProgress are callbacks to track the upload progress. You can omit these lines without affecting the file upload.\n. ",
    "kristjanmik": "@siegesmund care to share your approach?\n. Thanks @siegesmund. I found out a good approach to do this as well. \nClient:\n``` javascript\nimport request from 'superagent'\nrequest\n  .put(url)\n  .set('x-amz-acl','public-read')\n  .send(file)\n  .on('progress', e => {\n    console.log('Percentage done: ', e.percent);\n  })\n  .end((error, res) => {\n    if(error) return console.error('error',error)\n    if(res.statusCode !== 200) return console.error('Wrong status code')\n//...success\n\n});\n```\nAnd the server that generates the url:\n``` javascript\nimport AWS from 'aws-sdk'\nimport mime from 'mime'\nvar bucket = new AWS.S3({\n  params: {Bucket: 'yourbucket.foo.com'},\n  region: 'eu-west-1' , signatureVersion: 'v4'\n});\nkey = 'someuuid.png'\nvar params = {\n    Key: key,\n    Expires: 3600, //sec\n    ContentType:mime.lookup(key),\n    ACL:'public-read'\n};\nreturn new Promise( function(resolve,reject){\n  bucket.getSignedUrl('putObject', params, function(err, url) {\n    if(err) return reject(err)\nreturn resolve(url)\n\n})\n}).then( (url) => console.log) //the url to use\n```\n. ",
    "richardzyx": "It seems that using @kristjanmik method on the client side does successfully put object to the S3 presigned url, but S3 somehow won't return any header with useful data such as eTag. Anyone has a fix for this? Is it another CORS related issue?. ",
    "olalonde": "Just submitted a PR that helped me achieve this: https://github.com/okonet/react-dropzone/pull/150\n. I expected this PR would meet resistance :) With the approach you described, how would the parent component fire the drag events on Dropzone?\nI could also implement this as a completely separate component but there'd be a lot of shared logic with this one (except maybe for the render method). I know this extends the original intent of Dropzone since it's not totally self contained nor idiomatic React, but there's no easy way to get global drag and drop other than using the DOM directly.\n. Oh got it, that would indeed make things cleaner. In fact the render part in my opinion should be left entirely to the user with maybe a default styled component in case the wrapper component has no child. I'm not sure I'll have time to work on this but could maybe give it a stab this weekend.\n. @oyeanuj it's been a while but I think I just used the PR I had originally submitted https://github.com/okonet/react-dropzone/pull/150/files. Thx @tkh44 @okonet \n. What class methods that don't exist? You mean document.addEventListener? This code works in Chrome but there might be a better cross browser solution?\n. ",
    "mikecousins": "I'm pretty interested in this as I have a need for this same functionality. Any idea what way you guys are leaning and what the timeline is yet?\n. Beautiful, thanks for the quick work.\n. ",
    "aight8": "Is this project death?\n. No. How you want to achieve this? The file select dialog don't support this. Count the acceptedFiles array and show whatever you want when it's bigger than max_files_allowed.. ",
    "oyeanuj": "@okonet I tried to use the method suggested in examples but ran into a major issue. It works only when you enter the dropzone (which can be a small part of the page), since only then can you drop it anywhere. In comparison, the solution offered in this PR might be a cleaner way of making the document as the drop-target. Thoughts?\n@olalonde What did you end up doing finally to achieve the functionality?. @okonet Right, that was my first impulse as well but it gets messy quickly. Here are the things that were not clean about that -\n\n\nFirstly, the module which actually requires dropzone might be nested fairly down in the hierarchy, so you have to communicate with the App-level dropzone somehow (redux or context, or something).\n\n\nThen, often times you might have other components using dropzone which might not require this functionality or might have other differing props being passed to dropzone. So, either you have that dropzone under the app-level dropzone, or you again communicate somehow to the app-level dropzone.\n\n\nThis is also true when you just need a click-to-open button (for which I am using dropzone) - we again then run into a dropzone inside the app-level dropzone.\n\n\nThen, there are times when some other component might be using onDrop handler, and one has to ensure that event is not propagating further.\n\n\nEssentially, it wasn't clean and fraught with issues. \nI totally understand if you think this should be a userland feature (although folks would be duplicating the logic), but fwiw, I think the solution proposed here seemed the cleanest.. @okonet Sorry I missed your above message. A real-life example is Slack - if you drag a file onto any part of Slack (including the left/right side-bar), Slack detects a drag is happening and you can drop it anywhere in the window - it automatically binds it to conversation that you are in. This is where global prop is helpful. A contrasting example is say Google Drive, where the drag or drop has to be in a specific area/component.\n@mrichmond Sorry, I am not sure I am following correctly - are you suggesting that the global prop is not needed in your case? If so, I agree. I think the global prop is helpful when you want the whole window to listen to drag or drop events - and want that to be declared at the component level, rather than the App level.. @mrichmond Got it, thanks for clarifying. I think we are both in the same boat, with same concerns then.. @okonet I think the distinction that you are missing is not that the \n\nif the whole app of yours can accept files\n\nbut that the whole window can accept files when on a certain screen. In other words, when you are lets say creating a new channel on Slack, dragging or dropping files doesn't do anything. But when you are in a channel conversation, then it activates. \nIn this scenario, with current Dropzone's functionality, it would mean that you are toggling an app level property from fairly deep within the app - which feels weird.\n\nTo your questions, some thoughts - \n\n\nWhat is gonna happen if you have multiple dropzone components with global prop set to true on a single page? There are no guarantees that this isn't gonna happen and I'm not sure how it will behave in this case. Lots of potential bugs are here IMO.\n\n\nDo you think this can be solved with the idea that the last one would override the others - similar to how one expects with variable assignment. In most cases, this is probably going to be by accident, and for cases where this is by design, I assume developers can build solution on top of it - like they would if they weren't using Dropzone.\n\n\n\nYou don't have to modify the DOM tree nor remove dropzone from the React tree if it should be disabled on some routes. You can just do no do anything in the onDrop based on your route.\n\n\nI'll gladly accept a PR that will introduce disabled prop to the \ud83c\udfaf react-dropzone that will disable all event handling and thus UI updates for it.\n\n\n\nI think the bigger problem is that the logic for enabling/disabling can become complicated and forces your root level to know a lot of internal component logic or detail or use Redux state to globally enable/disable - which then becomes similar to just having a global prop.. @okonet thanks, will check it out. Even though we have disagreement on the solution, appreciate you having the discussion!. @afgomez @okonet Just checking to see the status of the PR? Do you see it being merged soon?. @okonet @femesq It seems like to determine isDragActive, we are already checking if all the files are going to be accepted which seems very similar to the logic we have in onDrop. So, if instead of using files.every, we instead use a files.reduce, we could very well separate the files being dragged into accepted and rejected. And in terms of browser support, maybe we support it only for browsers that give this information - in which sense it is as reliable as, and as consistent with isDragActive.\nDo you think it makes sense to pass which files are going to be accepted/rejected (not the ones already accepted/rejected which a user can access from state)? \nIn my usecase, I am looking to show the user which of their files are going to be rejected as they drag, even before they drop it.. @femesq Hmm.. it seems that bug mentioned in Firefox in that thread seems to have been fixed in Firefox 53.\nAlso, if there are other browser quirks other than the Firefox bug, then that would imply that isDragActive or isDragReject are also unreliable - has that been your experience?. @okonet Thanks for the response. I am open to other ways of solving it as well.  Couple of more different options - \n\n\nThe most flexible would be passing individual files and a validateFile method so that they can make those check themselves?\n\n\nRun the check on all files and separate them into two arrays, say, acceptableFiles, rejectableFiles?\n\n\nAlso,\n\nI think we should replace isDragActive and isDragReject with something more generic like drag state and files validation state.\n\nCould you elaborate more?. ",
    "mrichmond": "I've been quietly watching on the sidelines for several months on this issue, but I'll jump in here. I completely agree with @okonet and I believe I have a similar use case. A global flag would be a huge feature for me. @oyeanuj, I'll do my best to generally describe my use case and please ask for any clarification you'd like. For what it's worth... of course I can make it work as is... but it's very dirty and I really don't like how shapes the dom tree. For my application I don't really much need a visual representation of the drag area in most cases. I have a nav bar at the top of my application with an upload button that triggers the dropzone upload. I have multiple routes in my application... something like:\n/route1 // enable nav with upload button & enable window drag and drop (no ui)\n/route2 // enable nav with upload button & DISABLE window drag and drop (no ui)\n/route3 // DISABLE nav with upload button & enable window drag and drop (no ui)\n/route4 // DISABLE nav with upload button & DISABLE window drag and drop (no ui)\n(new use case route I'm adding right now to my application:)\n/route5 // DISABLE nav with upload button & enable window drag and drop & display drag and drop ui feedback\nRight now my app looks something like this:\n<Router>\n  <App>\n    <Upload>\n      <Dropzone>\n       <div id=\"dropzone\">\n        <main>\n          <Nav>\n            <nav>\n            <UploadButton>\n             <button />\n            </UploadButton>\n            </nav>\n          </Nav>\n          <Page1>\n            <section>\n              <p>Hello World!</p>\n            </section>\n          </Nav>\n        </main>\n        <input type=\"file\" />\n       </dv>\n      </Dropzone>\n    </Upload>\n  </App>\n</Router>\nThis mean in my App.js I'm wrapping my nav and page in an upload component which I don't really like. Now my Upload component is loosly coupled to my Upload component and if I am on a route like \"route4\" where I don't need uploading then I have some really weird logic in my App to conditionally wrap my nav and page and also my dom tree will change. I also don't like that my <main> is wrapped in a <div> ... ew. I would greatly prefer to do this:\n<Router>\n  <App>\n    <main>\n      <Upload>\n        <Dropzone global>\n          <div id=\"dropzone\">\n            <input type=\"file\" />\n          </div>\n        </Dropzone>\n      </Upload>\n      <Nav>\n        <nav>\n          <UploadButton>\n           <button />\n            </UploadButton>\n            </nav>\n          </Nav>\n          <Page1>\n            <section>\n              <p>Hello World!</p>\n            </section>\n          </Nav>\n        </main>\n       </dv>\n      </Dropzone>\n    </Upload>\n  </App>\n</Router>\n. @okonet thanks for considering this and if you want to chat more about it please let me know. I'm considering cloning the PR from @oyeanuj for now...\nTL;DR ... Wrapping my entire application in a dropzone div is pretty lame ...\n<body>\n  <div id=\"dropzone\">\n    <main>\n        <nav>...</nav>\n        <section>...</nav>\n    </main>\n    <input type=\"file\" />\n  </div>\n</body>. @oyeanuj I think we are asking for the same thing. I'm saying that while technically I can achieve the net end result with the \"solution\" from @okonet and it does \"work\" it's ugly and I'm itching to refactor it because it feels like the current implementation is not at all optimal. I really don't like wrapping my application in the dropbox component. It feels completely backwards to me. My Upload component (using react-dropbox) shouldn't wrap my nav and page. I just don't want to push my components through the dropbox component. If I decided that I don't need uploading on a particular route then I need some unusual logic in my app that inherently changes my dom tree between pages. That just feels so wrong to me.. Yup... and @olalonde got the ball rolling with his PR. I think just a few tweaks and it's there, but that's just my $0.2 on the matter.. I'd have to pull this down and test it... but I don't think you want to necessarily return null here. If global (or whatever the property is called) is specified I'd still like to render the dropzone div with the input. If preventing the output is a requirement for you, I'd suggest separating that into another property. I can certainly see a use case for having a drop area with content that changes whenever a file is dragged over the entire window.. ",
    "kngroo": "Sorry to revive this, but I'm running into an issue that seems to be related to the topic of this thread.\nI am trying to use dropzone to wrap the root component that sets out the layout of my whole application.\nex:\n<RootComponent>\n  <DropZone>\n    <Header />\n    {props.children}\n    <Footer/>\n  </DropZone>\n</RootComponent>\nIf I wanted to include a button in my child component that has a <button onClick={e => dropzoneRef.open() } />, there is no way to obtain the dropzoneRef without calling something like findDOMNode or passing the prop down multiple layers, or keeping it in a redux store.\nI attempted to fix it by removing <DropZone> from the root component and putting it inside my child components, and applying appropriate styles to the .file-drop class to cover the entire window. \nex:\n<ChildComponent>\n  <DropZone \n    style={{position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', zIndex: 1}}\n    ref={el => dropzoneRef = el} />\n  {components}\n</ChildComponent>\nThe problem with the above approach is that if you want Dropzone to detect the drag event, you need to set the z-index so that the Dropzone container div is in front of all my other child components. This prevents interaction with the other components in the children.\nIf there were something like a global prop that binds the drag event listener to the document, the above approach would work.\nThoughts?. ",
    "ivanbara": "Never mind, i noticed that onDrop not only sends files, but also the event, i can catch it and pass it to fetch api.\n. Hi @jamestwiggle \nYou can find my implementation on my github page\nCheck these:\n(client) handleSubmit(e) in DropZonePlace.js and (server) router.post('/upload',  (req, res)... in uploads.js\nI couldn't get this to work with Multer so I just used fs to stream the file from temporary path to my given path.\n. ",
    "sandysaders": "@ivanbara how did you make it work? I'm having a bit of trouble trying to get something similar working but no luck yet. Did you also use multer to process the image in the backend? Im having trouble getting the image to the backend, not exactly sure whats going wrong.\nIf you don't mind helping me out on SoF for some points heres a link:\nhttp://stackoverflow.com/questions/37473634/uploading-images-with-fetch-to-express-using-multer\nor here on github:\nserver.js\n``` js\nvar storage = multer.diskStorage({\n        destination: './public/users',\n        filename: function (req, file, cb) {\n            switch (file.mimetype) {\n                case 'image/jpeg':\n                    ext = '.jpeg';\n                    break;\n                case 'image/png':\n                    ext = '.png';\n                    break;\n            }\n            cb(null, file.originalname + ext);\n        }\n    });\nvar upload = multer({storage: storage});\napp.use(upload.single('photo'));\napp.post('/uploadUserImage', function (req, res) {\n    console.log(JSON.stringify(req.body.photo)) // form fields\n    console.log(req.photo) // form files\n    console.log(req.file) // form files\n    res.send(req.body.photo);\n});\n```\nclient.js\njs\n    function uploadImage (image) {\n      var formData = new FormData();\n      formData.append('photo', image);\n      fetch('http://localhost:8080/uploadUserImage/', {\n        method:'POST',\n         body: formData\n      });\n    }\n. @mikejonas I'm trying to get something similar working but no luck yet. If you don't mind helping me out on SoF for some points heres a link:\nhttp://stackoverflow.com/questions/37473634/uploading-images-with-fetch-to-express-using-multer\nor here on github:\nserver.js\n``` js\nvar storage = multer.diskStorage({\n        destination: './public/users',\n        filename: function (req, file, cb) {\n            switch (file.mimetype) {\n                case 'image/jpeg':\n                    ext = '.jpeg';\n                    break;\n                case 'image/png':\n                    ext = '.png';\n                    break;\n            }\n            cb(null, file.originalname + ext);\n        }\n    });\nvar upload = multer({storage: storage});\napp.use(upload.single('photo'));\napp.post('/uploadUserImage', function (req, res) {\n    console.log(JSON.stringify(req.body.photo)) // form fields\n    console.log(req.photo) // form files\n    console.log(req.file) // form files\n    res.send(req.body.photo);\n});\n```\nclient.js\njs\n    function uploadImage (image) {\n      var formData = new FormData();\n      formData.append('photo', image);\n      fetch('http://localhost:8080/uploadUserImage/', {\n        method:'POST',\n         body: formData\n      });\n    }\n. @mikejonas I get the following response from the server:\n\nThe undefined seen in the image is the req.file. For some reason it is undefined.\nHowever It doesn't get placed in the location specified in multer('./public/uploads'). What do you think I should do to manipulate/access the file because I also need to compress and resize images with sharp.\n. ",
    "xMartin": "This got introduced in 3.3.3.\n. Thanks!\n. ",
    "Mistereo": "It seems to me that this will not work for browsers (without commonjs/requirejs environments).\n. ",
    "j-san": "You're welcome :smile: \n. ",
    "vladshcherbin": "@okonet sure, will do today\n. @okonet hey, I've tried to do it, but we need to show the active state somehow with css (as you press tab  key and want to see it becomes active).\nWe can use + selector, but this way we need to make sure input element is placed before the styled element.\n. @arjshiv you can set the opacity, but the item (input element) will produce white space inside the dropbox element (width + height of the element).\nBut it's not the main problem - you need to show the user that the dropbox element gets focused. To do this - you can add a class when input is focused or use css selector.\n. Probably an easy solution can be smth like this:\n``` js\nconst dropzoneClassName = classNames('dropzone', { focused: this.state.isFocused })\n\n\n\n```\nAnd the input element can be set to 0 / 0 (width / height) and 0 opacity.\n. @arjshiv sure, go for it. I tried some time ago, but unfortunately didn't end up with successful tests setup.\nWould be great if you'll try to solve it ;)\n. @arjshiv @okonet  here is a simple dropbox component I'm using in my apps and a small demo.\nIt toggles the focused class and works as described above. Maybe it can help to do similar thing here.\n. @okonet I've used two solutions:\n1) Using input onFocus & onBlur events (when input is focused / blurred, the focused class is toggled)\njs\n<Dropzone className={giveMeTheClass}>\n  <input onFocus={addFocusedClass} onBlur={removeFocusedClass} />\n</Dropzone\n2) Using just css selector (but it needs markup changes)\njs\n<Dropzone>\n  <input />\n  <div className=\"dropzone-box\" />\n</Dropzone>\ncss part\ncss\ninput:focused + .dropzone-box {\n  border-color: blue;\n}\nBoth of them worked for me, though I didn't test them on phones, tablets, IE.\nNot sure, if there is a better solution or which one is the best. I've seen the first solution (focus trick) in other element libraries.\n. Personally, I also ended with using the first solution - no need for a dropzone-box element and is easy to implement (just toggle a class with a name from props).\n. @okonet I tried to setup on local previously, but failed with the tests setup. The needed steps: \n- input onHover / onBlur events\n- dropzone onHover / onBlur props (for custom events)\n- add a focused state with default false\n- toggle focused state in input handle events\n- add dropzone prop for a focused class\n- add this class to dropzone\n- add inline styles for focused state\n- input has to be visible, my css for it is\ncss\ninput {\n  display: block;\n  width: 0;\n  height: 0;\n  border: none;\n  opacity: 0;\n  overflow: hidden;\n}\n. @josh18 you can look at the source code to see, how active, rejected and default styles are handled.\nBasically, if you provide your classes or styles- it will you them, if you don't provide anything - will use default ones.\n. I'd choose border-color / outline or something, that doesn't need browser prefixes. Actually, since currently there is no such feature, any styling will be good as it can easily be changed later.\n. It depends on the personal taste, I actually never rely on default library styles. The real answer is - the person with the PR will have to decide this for us :)\n. ",
    "arjshiv": "Naive question:, but can we useopacity: 0 instead of display: none ? That should create an element on the stacking context which should be clickable and tabbable http://stackoverflow.com/a/742324\n. @VladShcherbin Thanks - that's helpful. I'll try and see if I can take a crack at it later this week if you and @okonet are open to it\n. @VladShcherbin yeah that's exactly the kind of thing I had in mind\n. @okonet I just started using this. We are using inline styles, and I thought that the default styling (with the dashed border) was very helpful in the initial integration. From a UI perspective, the one thing that would make it even easier is if it has a default activeStyle when you drag something in.  People with larger apps will probably override it anyway, but default active styles will make it even more of a plug'n'play experience for devs who want to get it done quickly.\nI'm happy to help where required on this. Great project, would love to contribute! \n. Same question as @yasuf here. Happy to help in any way I can but would love to get more clarity on the actual ask.. ",
    "josh18": "What if we just add tabindex=\"0\" to the outer div, add a listener for onKeyPress and then filter for Space / Enter?\n. It is a pretty important feature for usability, without it keyboard only users won't be able to use it. What part are you thinking could get messy? Seems pretty straight forward to me.\n. Ah ok I see what you mean. However adding enter / space input seems to be pretty common.\nExample 1\nExample 2\nAnd of course tabindex is well supported.\nI'm not such a fan of the adding classes option as the default focus (e.g. glow on Chrome) won't work so I think you would either have to set a focus style or trust that a user is going to set a custom focus style. I guess that's the same if you use the + selector.\nAnother possible option is to use a <button> instead of a <div> and then just reset all the styles on the button, not sure I would recommend that though.\n. What's the plan on creating focus style for the dropzone div? For example if you add a focus class what style would you use for .dropzone.isFocused? Create a custom style? Or just leave it blank and rely on the user to add a custom style?\nIIRC browsers don't necessarily have the same default focus style and Firefox doesn't have any, instead it just uses the default focus style of the OS you are using.\n. Sorry I probably wasn't very clear with my question, I mean what css properties are you going to use for the default styles? For example in Chrome the default for :focus is outline: -webkit-focus-ring-color auto 5px;.\n. Wouldn't you want it to be consistent with the default browser styles though? Otherwise there's a high chance it is going to be different from all the other focus styles on the page.\n. Good point, I didn't think about having multiple controls inside (though in your example I think you would want both focusable).\nLetting the developer add styles to the file input seems like a good idea to me. If possible maybe you could also let them add attributes so they can add things like onFocus and aria-label?\nThe only problem with this approach is that I think lots of developers will either forget or ignore the accessibility part. Maybe if these changes go through I can write up some accessible examples to remind them and help them get started? Do you think that would be helpful?\n. Sorry I don't quite understand what you are meaning, can you expand on this?\n\nsince the implementation detail about the input is hidden\n\nAlso I just realised you can already edit the input via inputProps which is really useful, maybe one of the changes we make is split up overridable (style, aria-label) and non-overridable props (ref, onChange, etc).\n. Maybe just add a bool property defaultStyles to turn the styles off / on? Of course if they have it turned on and add in their own styles then their own styles would take priority. I personally would have it off by default and then just make it really obvious in the docs that it is an option.\n. Yeah I saw the tests are failing but I'm not sure why, MouseEvent is a valid API, maybe something needs to be added to mocha-environment.js to make it pass?\n. It should already be enabled?\n. I just copied the previous callbacks style, example :https://github.com/okonet/react-dropzone/blob/master/src/index.js#L53-L55\nAlso not sure if checking is a function is necessary due to it being checked in propTypes?\n. Otherwise the click bubbles up and triggers the DropZone click event again. Example: https://jsfiddle.net/8c13nd2y/\n. You mean like adding onClick: (e) => { e.stopPropagation(); } here? https://github.com/okonet/react-dropzone/blob/master/src/index.js#L207-L214\n. Unfortunately not (that's what I tried first), the onClick that happens there is a synthetic React event so e.stopPropagation doesn't work on it. See: http://stackoverflow.com/a/24421834/1661462\n. ",
    "forabi": "I think this can be solved with the following steps: \n1. use a root element of type button instead of div\n2. allow tabIndex on dropzone props.\n3. add onClick prop on root with a value of this.open.. @okonet I added a description of the changes and explained why aria-* does not solve the problem.\nBreaking UIs is still a concern though, can we \"reset\" the button style somehow so it looks exactly like a div?. Turns out it's not a good idea. I had a case where I needed to place a button inside a dropzone and nested buttons are not valid HTML.. ",
    "luisfuertes": "I have this code:\n<form>\n  <input />\n  <Dropzone ref={\"dropzone\"}>\n      <button type=\"button\" onClick = { (e) => { e.preventDefault(); this.refs.dropzone.open(); } } />\n  </Dropzone>\n</form>\nThe problem is when i press enter with input focused, onClick dropzone button is trigered. But if move button out of Dropzone, it isnt happens.\nI don know if it is related with this issue. Sorry if not. ",
    "phoenixbox": "I will make a PR on the gh-pages branch also :)\n. ",
    "treylon": "Any updates on this?\n. ",
    "peeinears": "+1. I think this would be really great.\n. ",
    "littlebee": "+1  I think you underestimate how many applications are using react without using browserify or webpack, or as is our case, using AMD.   . ",
    "shapkarin": "I can't fire onClick inside loop of this.state.files \nis that issue or my bad react skills ?\n. ",
    "davey-h": "You are absolutely right, it seems to be a Chrome issue. Is there something documented on Chrome specific that I missed?\nFor reference this is the files list\n[\n   {\n      FilelastModified:1462117336000\n      lastModifiedDate:Sun May 01 2016 11:42:16GMT-0400 (EDT)\n      name:\"picard-facepalm.png\"\n      preview:\"blob:http%3A//localhost%3A3000/248462f3-31b5-4249-bda4-72683789066e\"\n      size:688312\n      type:\"image/png\"\n      ...\n   }\n]\n. Unfortunately adding the wildcard doesn't fix the issue for chrome and it also breaks the hidden <input> as I think you plug the accept directly in and the input accept doesn't recognize wildcards. \nAre you able to replicate the issue or is there something unique happening at my end?\n. I don't think that addresses my issue. I use OSX and the latest Chrome. My issue is related to using file extension and not by specifying the MIME type\n. Actually, it might be an OS issue. Just tested on Linux with no issue. That or 3.5.0 fixed it. Either way, I think this can be considered closed\n. Yes, it is an OS-related inconsistency. Just checked back with OSX and can still reproduce.\n<Dropzone\n    accept={this.props.accept}\n    multiple={false}\n    className=\"form--dropzone\"\n    activeClassName=\"form--dropzone--active\"\n    rejectClassName=\"form--dropzone--reject\"\n    onDropAccepted={this.setUploadSuccess}\n    onDropRejected={this.setUploadFail}>\nand what is being passed down: accept: \".cdxml\"\nOn OSX, rejectClassName is being called even with an acceptable file is being dropped while Linux is recognizing the extension and showing activeClassName appropriately\n. ",
    "mirague": "What is your Chrome version?\n. ",
    "abimelex": "Using accept: 'text/csv' does also not work here on windows computers with any kind of browser and version. Have it on OSX is no problem...\n. ",
    "martin-svk": "Using the MIME types instead of file extensions solved this proplem for me. \nWith file extensions it worked on firefox but not on chrome. Same OS -> Ubuntu.\n. ",
    "qrpike": "Having this problem\nOS: macOS High Sierra\nBrowser: Chrome Version 62.0.3202.62 (Official Build) (64-bit)\nI drag in a .sketch file, and have *.sketch as the wildcard, but it adds the reject class, and the type key of the file object is \"\". . ",
    "rxmarbles": "I'll have some time tomorrow to work on this. Though might have something w/ attr-accept npm module. Not sure. I'll dig in. Hey @rdjpalmer I unfortunately haven't had a chance to fix this, i've been busy w/ projects at work. If you have the time you are more than happy to take this off my hands \ud83d\ude04 . I'm not sure about the others but I am not familiar enough w/ Typescript to know how to resolve this. If anyone is familiar they can submit a PR referencing this issue. . @seberik Correct, the issue was closed due to inactivity as mentioned by the stale bot. You can continue to work on your fix and make a PR whenever you can :). Also there was additional work done previously and may have to update from the most recent version of react-dropzone. @rolandjitsu I think it's not worth the effort and agree it should be closed. However if we do want to some form of typing we could look to switch to typscript. Ah yes totally forgot about that \ud83d\ude02. Sweet. Look forward to reviewing that PR.. @michaelsync the reason this was closed as this wasn't really an issue. More just a question for guidance.  However in your consuming component you can create a function that removes the file from state. Also you can add a ref to the react-dropzone component so you can get to the state of the dropzone component and remove the file from the state there. i have attached a gist of something i used in one of my components. \nhttps://gist.github.com/rkmarks/3316914da046aa1b92930c32fb9cc644. @gauravcm30 are you using react-fastclick as well? Not familiar w/ that library however I am not sure if that is particularly needed for this component to work in iOS devices. can you provide more context? . @fredehh are you using the official examples or is this something your wrote? If so can you provide a repo we can duplicate the issue from?. @fredehh thank you for the information. However there seems to be more going on under the hood of your component. Can you attach a a link to your repo that has this code so I can clone and review? . @meteorplus i just went to the official examples in my chrome browser on my Android phone and did not have to click 3 of 4 times for it to access my apps for files. Tried it as well on the Samsung internet browser and could not duplicate. \ud83e\udd14. @meteorplus just did on my iPad, on Safari. No problem. Even tested it on Safari 6.1 and didn't have that problem w/ the examples. @meteorplus it's possible do you know which version you were using?. @yoDon @SaraVieira I can confirm the same w/ FF 55, appears to have been resolved. I would also be happy to help maintain. I've used this library in a few places now would be honored to keep it up to date and contribute back to it \ud83d\ude01 . Please let me know if you need additional bodies @okonet . @paramaggarwal I can see about making that request. \n. Would that make a request to them or just simply transfer it? I've looked at the ReactJS org site and couldbt find a contact email.. Ah makes sense. I do not have permission unfortunately. Only @okonet has owner perms I believe. @knowbody sorry this has been delayed do you know of any admins I can reach out to? I would be happy to discuss w/ them to see if this can be moved. @gondar00 perfect, i would recommend starting w/ reviewing the issues and seeing if there is anything you can contribute to :). I'm in consensus with everyone on this. @piercefreeman I too was unable to duplicate this issue and I am on Safari Version Version 10.1.2 (12603.3.8). After viewing the video it seems to be strange bug. Also can you provide the Safari version? . @Sergey901509 can you provide an example of the code you are using to duplicate this issue? also provide the version you are running as well? . @aliciacatalina the fix for this issue is in v4.2.3. Can you upgrade your version and try again?. @okonet i'll work on this as I've gotten to work w/ webpack quite often at my currently job. . also to clarify  you mean jsnext:main not js:next? couldn't find anything on js:next. no worrires :) should have a PR up in a few days. got tied up this weekend. Sweet! thanks for providing that update @mattcarlotta . @zhangyanyan1002 I am unable to duplicate your issue. can you provide more information please. i.e what  browser you're using, what this.onDrop is doing, etc.. @dsznajder I just tested the official examples on Safari 6.1 and was not able to duplicate the issue. Can you provide more details on what exactly you are doing to duplicate the issue? . Can you provide a repo w/ the code you are using so I can review to duplicate? . @okonet should we pin this then since we have no idea when that PR is submitted/merged? or do you know which it is from that repo? \n. @codeaid thanks for the update! will close . @DeFuex looks like tests are still failing on your updates. Glad to hear that worked @alex-cory \ud83d\ude01 . similar workaround has been uncovered in #328 closing this issue. Closing issue as you can pass the required field on the inputProps. I agree w/ @okonet you can pass the required to the inputProps if that is what you are attempting to accomplish or do you have something more in mind @rafacianci ?. It looks to have stalled @rohit-ravikoti if you are familiar w/ the fix you can open a PR as well. @izadmehr are you still working on this? if so can you please fix the failing tests so we can test this branch. \n. This sounds like a great way to contribute :). @smeijer @NtwariJoshua all PR's are welcome for this . sorry @okonet i've been busy lately. the idea here is to use Uglify plugin on webpack to remove console lines and reduce our module only on production builds. Though this is definitely a WIP. got any advice on best to proceed? . @okonet i know you've been a bit busy but do you mind reviewing my comment above. any advice would be appreciated \ud83d\ude09 . @okonet can you please re-review when you have a chance. Thank you!. tried to rebase and squash but doesn't appear to work properly, i've destroyed my repo and will try again.. @ngryman do you have a repo we can use to duplicate the issue that you are getting? . @masterwendu I was not able to duplicate on my firefox viewing it through a simulator w/ the mentioned versions above. Can you provide any further debugging to support this issue?. @Lindstrom1989 I was not able to duplicate this issue on my iPad using safari with the example with multiple accept types from react-dropzone.js.com. . @vshvydky I was unable to duplicate this issue using the examples from https://react-dropzone.js.org/ on my chrome browser w/ that version. can you provide the code you are using to duplicate this issue?. @jianliangzhao hmm i won't be able to test that. Can you provide further details/errors/logs of events to show that they are not firing? . @Zakerius I did something like this in my own component for a project at work. You can definitely submit a PR to see if this something that can be utilized by others. Though I think it would probably be best to handle that in the component that is consuming the react-dropzone. . the dropzone itself supports onClick however in your consuming component you can use event handling however you please. I do not see this being something usable for all use cases. closing. I apologize if its misconstrued. I'm merely stating that for most use cases, if not all, a single click is all that is necessary and being that this component is being designed to be very customizable once consumed it makes sense for the consumer to create the logic for what they are hoping to accomplish. However, if you would like to still see if your request is something others are willing to accept please submit a PR and we would be happy to review. . @ktalebian I believe @moosch is correct you can overwrite the onDrop function to handle your use case. . LGTM. I believe this was fixed when we fixed the webpack builds. Though I would like to see if any others are coming across this issue still. . @okonet new PR w/ cleaner git history :). @okonet file reverted. @okonet ready for merge/review. To be honest @thaddeusreid I did the same for my contribution. It might have something to do w/ the way lint-staged is setup. I'll look into that. nice work though! \ud83d\udc4d . It is an interesting fix, however I think we should stay inline w/ the webpack documentation which is that if you are going to use react as a script vs in your bundle we should be splitting our component externals the way the stack overflow answer provided\nexternals: {\n  \"react\": {\n    root: 'React',\n    commonjs2: 'react',\n    commonjs: 'react',\n    amd: 'react'\n  }\n}\nthat way when webpack creates the bundle to should look for each of those and use the one accessible\n@okonet what do you think?. @coopersamuel do you have a repo I could duplicate this on? . I know it does it by default as of npm5 however since this repo is also usable in older npm versions I believe it is fine to leave the docs showing npm install --save for clarity. @okonet what is your opinion? . closing as this was fixed in #578 . @garima-birdeye I was looking into this issue and it may be a browser related issue based on OS. I tested on chrome and was able to duplicate, but on firefox the type was there. I also tested on safari and could not duplicate this issue as well. You may want to report that to chrome so they can fix it for mac OS builds.. Judging based on your accept you are using the incorrect mime type for XML please review\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types for proper xml mime types. @leantorres73 I was unable to duplicate this issue using the basic examples on my Ubuntu desktop w/ a 30kb jpg file. Do you have any source code that we can review to see where you may be having this issue? also please add which version of react-dropzone you are using. . I was able to duplicate this and I've tagged it as a bug. If you are able to see where the issue is please provide a PR and update tests as necessary but I think this has something to do w/ the attr-acceptmodule.\n. @nzwnabdulwahid you can override on the onDrop method w/ your own method that has the logic to  handle this. Similar to what I have done on another component wrapping dropzone\n```\nonDrop(acceptedFiles, rejectedFiles) {\n    const accepted = this.state.acceptedFiles.slice(0);\n    let error = null;\n    acceptedFiles.forEach((file) => {\n      const exists = accepted.some(f => f.name === file.name && f.size === file.size);\n      if (!exists) {\n        accepted.push(file);\n      } else {\n        error = this.props.duplicateError;\n      }\n    });\nif (rejectedFiles.some((file) => file.size > this.props.maxSize)) {\n  error = this.props.maxSizeError;\n} else if (rejectedFiles.some((file) => file.type !== this.props.accept)) {\n  error = this.props.acceptTypeError;\n}\n\nthis.props.onChange(accepted);\nthis.setState({\n  acceptedFiles: accepted,\n  error: error\n});\n\n}\n```\nIn this manner I am allowing my component to handle an array of uploads to attach to the state of the component.  also since this isn't really an issue I am going to close this but feel free to add comments if you need more help :). @Victor502 I know the component works just fine w/ Safari 11.0.3 as I can view the click event. I'm wondering if there is an issue w/ High Sierra. Can you provide your code if this is custom or are you using the examples? . @marekolszewski when it comes to react and forms the action has an event that is triggered like an onChange you would probably want to do an e.preventDefault() in your action function or if you are not using the action by doing action=# that should prevent a full page reload.. @reemtariqq can you provide the browser, OS, and react-dropzone you are using please? I was unable to duplicate w/ the examples on chrome v65 in MAC OS.. Hey @dant00ine can you also provide the browsers you are testing this in? I was not able to duplicate this issue w/ the default examples and the disableClick worked just fine.. sounds like a perfect way to contribute \ud83d\ude04 . @patrick91 have you had a chance to review and make changes per @okonet req? Hoping to get this added for typscripting. nice work!. I think this size is much more acceptable compared to the previous commits. I think we should be fine w/ just updating the size config @okonet do you agree? . @holzfelix it should be able to as long as it is listed as a valid mime type here \nhttps://www.iana.org/assignments/media-types/media-types.xhtml. This would probably have to be done above the parent to listen to events from the DOM when you drag a file on to the browser. Which I think is what Google does as well from looking at the dev tools on gmail. closing issue as this is not an issue of the component. . Have you tried upgrading your version and testing it out? You are a whole major version behind and would be difficult to troubleshoot. . sounds like a good contribution :) do you mind opening a PR about it ?. @eluchsinger i was unable to duplicate this issue using the example code though i was on 61.0b6. also keep in mind the browser you are in is a beta version and this is intended for stable versions for all browsers. I believe that is indeed the correct way to handle this browsers tend to differentiate a bit. Closing this issue but if it is still not working w/ the workaround will reopen. @okonet @WickedAlice looks like tests are still failing. I re-ran the build just to be safe and make sure it wasn't something on travis-ci. Mind taking a look and see what could be causing it to fail? . So comment is mostly for @WickedAlice then lol :). @kliu4 you should be able to pass your own styles in props or even wrap the component in a div that is customized w/ css. Yeah same here, did it just yesterday. Which makes me wonder if something else node_module wise increased in size recently?. @okonet i could not tell why the sizes were different. actually for me even when i installed a previous version the size was the same as my change. not sure \ud83e\udd37\u200d\u2642\ufe0f . @theGABS seems like a handy feature would you like to submit a PR about that ?. Not sure this issue belongs in this repo. Closing this issue. Actually the basic example should be just showing how the drag and drop feature w/ react works. In reality this should be it's own example on how to handle multiple files. Can you please update this PR to show multiple file uploads on a new example?  . I do not believe we support IE9 as it is no longer supported by MS. It should be supported on IE11, Edge, Chrome, FF and Safari. @okonet i apologize for missing the review i was at my companies annual conference all week and just blanked afterwards all things code wise \ud83d\ude05 . @raviredd please provide additional details in your issue so we can review . I've located the issue however it is not an issue with react-dropzone but an issue in attr-accept and reference this issue. I will open up an issue w/ that repo as I believe I have an idea of where this issue occurs. . @tomjn did you try bumping to 5.x.x ? i believe there were some fix for event listeners there that might solve your problem. \nhttps://github.com/react-dropzone/react-dropzone/pull/628 related PR. @lawreyios can please be more specific? I'm not familiar w/ Facebook Web View. @ThomasPnt I was not able to duplicate this issue using the basic dropzone on the test ones at https://react-dropzone.js.org/. Are you using custom code asscoiated? if so can you attach a snippet of the code or repo where I could take a look?. @erkeElzhan you should be able to override the onDrop function of the dropzone to be able to convert your files to base64. doing a simple google search i came upon this https://stackoverflow.com/questions/18650168/convert-blob-to-base64/42038379. I am closing this issue for now since this is more of needing help than an actual issue. . are you using this in mobile native or web? . Looking at your request I see 2 Content-Type and the other is lowercase which could be what is conflicting and why you are seeing the strange characters.. I just ran the test page through an html validator and did not come across this error. https://validator.w3.org/nu/?doc=https%3A%2F%2Freact-dropzone.js.org%2F. I do not know what this issue is for? I just ran the test page through and it did not give me the same error https://validator.w3.org/nu/?doc=https%3A%2F%2Freact-dropzone.js.org%2F. Do you have an example site you are working with?. Can you provide a snippet of your code you are using that this is happening? That should still apply with the version you are on. . @d-ivashchuk can you update from master please \ud83d\ude04 . closing this for now as I can confirm the same works. If this continues to be an issue please reopen this issue. @chobo2 the main page https://react-dropzone.js.org has demoable examples of what the component can do. Not sure how to demo what it cannot do but open to suggestions to what can be changed from the README to help with that :smile: . Hey @rolandjitsu its going. hadn't had a lot of time to tackle it due to work projects. I'll see about trying to get this one knocked out this week \ud83d\ude04 . yeah i can see about adding that to my PR for updating docs.. @sitompul you can review the README at it's particular release to view the documentation.. @jschill can you provide a working example of it breaking in React-like libs? curious of your use case. Haven't seen this breaking in other libs. . sure I should be able to get to that this weekend. if that's ok? just got tied up this week with work. Sorry about that @rolandjitsu thought that was only moving to hooks \ud83d\ude05. I'll give it a review tonight . good call out! I missed that on my initial review. @DeFuex why is this test commented out? . Can you format these back? seems a bit quirky out of line w/ the prop. Sorry just a nitpick. I agree with that @okonet. We should be looking to move any promises to async await where we can. . no it would just need to be added like so ```jsx harmony. ",
    "rdjpalmer": "@rkmarks did you get anywhere with the fix for this? I've just been in the scenario of having to fix our usage of text/csv seeing as it doesn't work on windows, and now I'm getting the issue described here. Happy to help with the fix if needed /cc @okonet . @rkmarks sure, I can pick this up on Monday. Did you do any investigation at all? Could you or @okonet point me in the direction of where best to look? \ud83d\ude05 . So I'm thinking this has to do with how isDragReject is being set:\nhttps://github.com/react-dropzone/react-dropzone/blob/ccb859f1eaa43683952bc4f3d4b6d3283a8582a8/src/index.js#L310-L311\nas per the documentation, we're unable to read the file name mid-drag, only the mime-type. So in cases where we have an accept that isn't a mime, filesCount > 0 will be true, and isDragAccept will be false because of how attr-accept validates the mimes:\njsx\n    return acceptedFilesArray.some(type => {\n      const validType = type.trim()\n      if (validType.charAt(0) === '.') {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase())\n      } else if (/\\/\\*$/.test(validType)) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '')\n      }\n      return mimeType === validType\n    })\nhttps://github.com/okonet/attr-accept/blob/master/src/index.js#L24-L33\nMy initial thoughts are to check what kind of accept prop we have (mime or extension) and include that in the setting of isDragReject, something like:\n```jsx\nconst acceptIsMime = /\\/*$/.test(this.props.accept)\nconst isDragReject = acceptIsMime && filesCount > 0 && (!isDragActive || !isMultipleAllowed)\n```\nMaybe the test for what kind of accept we have should actually live in fileAccepted?\nHow do we feel about this solution?\n/cc @rkmarks / @okonet . ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. This issue has been automatically marked as stale because it has not had recent activity in the past 60 days. It will be closed if no further activity occurs. If the problem persists please comment here to bump your issue. Thank You - React Dropzone Maintaners\n. ",
    "lruckman": "Shouldn't a combination of mime's and extensions in the accept list address this?. ",
    "alexeygolev": "Any progress on merging this?\n. ",
    "hank7444": "ok, I found the issue, onDrop is now called only if all files are passing the accept,\nI commented my accept and it worked\n. my accept is java .jar file, it not works on window 7 but mac is OK :(\naccept=\"application/java-archive\"\n. it seems valid \nhttps://en.wikipedia.org/wiki/JAR_(file_format)\n. ## mac chrome\n\nwindow 7 chrome, it type is empty\n\n. OK, I will try it, thx a lot!\n. I can't upgrade to 4.0.0 by npm, it newest version is 3.5.1 on npm \nwaiting release \n. ",
    "mfields-gpsw": "I'd like to help move this along to being merged - would it be better to create a new PR based on this one with the suggested changes, or make a PR with improvements to the bettervu branch to eventually be incorporated into this PR?. An update on this work - it was not as straightforward as I expected.  I found some bugs and browser compatibility issues that are taking a while to resolve.  I also am trying to decide if the getDataTransferItems function should return a hierarchical data structure for acceptedFiles and rejectedFiles rather than a simple flat array?  This would allow clients to know the folder names and structure of the dropped files, and this seems like something valuable to expose.  Any thoughts or suggestions on this?. Have been busy writing tests for the new npm module - nearly ready to publish the first version and integrate with react-dropzone: https://github.com/quarklemotion/html5-file-selector. Hi @SpencerCDixon I have some refinements coming to the html-file-selector repo based on a production roll-out and testing of this code for several weeks.  I expect I should have that module ready for integration by the end of next week.  I think the new PR to integrate this with react-dropzone should be fairly straightforward and will follow soon after.. ",
    "quarklemotion": "@SpencerCDixon FYI, I'm working on addressing these issues to get this PR merged over at https://github.com/quarklemotion/react-dropzone/tree/bettervu-upload-directories-rebased - I have rebased these changes on master and am currently working on modularizing the folder upload code and adding some tests.. @okonet I agree about the separate module, and I have the folder drag/drop code nearly ready to rock (works on latest chrome, firefox, and edge).  I'll create a new npm module for this and then a react-dropzone PR to integrate it.. @davidmoconnor @barmaglot92 sorry I've been out of touch on this work - recently had a job transition that has limited the amount of free time I've had.  I'll be working on this over the weekend and hope to make some good progress.. FYI, I have made an initial integration attempt using the separate module approach (using html5-file-selector module) here https://github.com/quarklemotion/react-dropzone/tree/quarklemotion/folder-drag-drop-support.  There are lots of failing tests that I need to address.. FYI, I'm working on a parallel effort to integrate folder uploads with react-dropzone.  I've been working on the https://www.npmjs.com/package/html5-file-selector module and now have it published to npm with some updates.  The code is very similar to what has been added here, but does have some improvements based on several months of production usage and this module has it's own suite of tests, which require a substantial amount of test setup code.  I'm happy to collaborate if you want to try using the html5-file-selector module in this PR.  I originally created that module after attempting a similar react-dropzone PR a while back and we realized that this code could be valuable for other projects and maybe was not best directly incorporated in react-dropzone.. @okonet @veerabio I'm open to removing the mime-db dependency from html-file-selector.  I added that after some real-world use showed that some browsers (IE, maybe one other?) did not report the mime-type of dropped files correctly via the HTML5 file APIs, hence the need to derive the mime type based on the file extension.  This was over a year ago and browser support for these APIs may now be good  enough to remove that mime-db crutch.. @okonet yeah I think making the full mime DB lookup optional makes sense.  I have time to work on this later this week - I was thinking of adding a second optional options object parameter to getDroppedOrSelectedFiles where the mime DB could be passed in as an injected dependency.  Will post here when I have the new version published!. FYI, I've updated html5-file-selector to have the mime-db dependency removed.  I added a minimal mime-type mapping for several very common files.  I'm planning to do some testing to see if any latest versions of modern browsers still have this bug to evaluate making html5-file-selector configurable to do full mime-db lookups in a future version.\nThe bundle impact of html5-file-selector is now much lower:\nhttps://bundlephobia.com/result?p=html5-file-selector@2.0.1. @veerabio I made one more update to trim down the html5-file-selector size (removed babel-runtime dependency).  I just published v2.1.0 with this change which brings the npm module size down to 1.9kb minified!\nhttps://bundlephobia.com/result?p=html5-file-selector@2.1.0\nI'm hoping that will bring the total react-dropzone size to under the current limits?. @okonet this implementation makes sense to me.  I like the use of Promise.resolve(this.props.getDataTransferItems(evt)) which allows for both synchronous and async implementations of props.getDataTransferItems.  With the implementation in this pull request, I don't think there are any changes required to html5-file-selector to support this plugin interface - the getDroppedOrSelectedFiles(event) exported function can be used as the getDataTransferItems prop.  I'm happy to add a new exported function getDroppedOrSelectedFilesWithPreview(event) to the file selector module if everyone thinks that is the best place to locate this wrapper function to provide preview support?. @okonet Ah, I see - I think that could make sense to convert react-dropzone to multi-package.  Were you thinking that the folder drop plugin package would be a small wrapper of html5-file-selector, or html5-file-selector would move into the react-dropzone repo?  One thing to consider is that the file selector module was built to support both dropzones and file input fields, whereas react-dropzone only cares about the dropzone support.  There are other projects using the file selector module, and I want to make sure they can continue to use it.  As for multi-package setup, I haven't used yarn workspaces before, only lerna, but happy to help with this effort!. I attempted something similar in html5-file-selector (manually setting the file.fullPath to the actual nested path), but ran into errors with immutability of File objects with one browser - can't remember which one.  So I ended up wrapping the File object in a wrapper so that this data could be reliably passed back to the client code.. please update to \"^2.0.1\" to reduce the bundle size impact\nhttps://bundlephobia.com/result?p=html5-file-selector@2.0.1. ",
    "frenberg": "My vote would go towards keeping the structure, as you're suggesting.. ",
    "caseychoiniere": "I also agree that keeping the structure is ideal. Definitely useful. . @TroyWolf You can use the regular Dropzone.js to create your own React component. It only took me about 30 minutes and it supports drag and drop of folders out of the box. FYI. . More info on your setup? I'm importing like import Dropzone from \"react-dropzone\" and it's working fine for me.. Not a fan of the \"React\" logo based design. Cool idea but it looks like an eye. I like the downward arrows into the target design best. And I think @DaZzz version is pretty rad. My $.02. I think this is just the difference between using an input or a dropzone. When files are dropped the webkitRelativePath or fullPath doesn't seem to be included. I was able to confirm this by building my own drag and drop. Although I swithced to using Dropzone.js and built a component using that. When dragging and dropping a folder, they include the fullPath property. Not sure how they're accomplishing this though.  I apologize for the noise here. Closing this issue.. I'm pretty sure that issue #477 is just referring to single files and not directories. I believe that Dropzone.js retrieves the full path only when dropping folders into the dropzone. They use webkitGetAsEntry() to get directories and then directory.createReader() and directory.readEntries() which returns the files and directories including a fullPath property. \nSo I think this doesn't really fall under the scope of react-dropzone as you've said in past issues that \"this functionality should not be the part of this repository but a separate npm package\" issue #174 \nI think that is where I ran into the problem in the first place. I was using some code from @mfields-gpsw @quarklemotion which didn't seem to include the webKitRelativePath or fullPath props. \nI think if users want this functionality they should consider using (or applying the code to react-dropzone) open source code from Dropzone.js or from a simple library like Uppie.js\nDropzone.js does this:\njavascript\nDropzone.prototype._addFilesFromDirectory = function(directory, path) {\n      var dirReader, errorHandler, readEntries;\n      dirReader = directory.createReader();\n      errorHandler = function(error) {\n        return typeof console !== \"undefined\" && console !== null ? typeof console.log === \"function\" ? console.log(error) : void 0 : void 0;\n      };\n      readEntries = (function(_this) {\n        return function() {\n          return dirReader.readEntries(function(entries) {\n            var entry, j, len;\n            if (entries.length > 0) {\n              for (j = 0, len = entries.length; j < len; j++) {\n                entry = entries[j];\n                if (entry.isFile) {\n                  entry.file(function(file) {\n                    if (_this.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                      return;\n                    }\n                    file.fullPath = path + \"/\" + file.name;\n                    return _this.addFile(file);\n                  });\n                } else if (entry.isDirectory) {\n                  _this._addFilesFromDirectory(entry, path + \"/\" + entry.name);\n                }\n              }\n              readEntries();\n            }\n            return null;\n          }, errorHandler);\n        };\n      })(this);\n      return readEntries();\n    };. ***Edit: Looks like my original comment did get posted \nOh man, I just spent time to write a relevant response to this but then navigated away from the page and lost my work before publishing the comment. So here's the short version.\nThe webKitRelativePath property is only available when you have the webkitdirectory attribute set on your input or when using the directory reader in the HTML5 File API to read directories from a dropped folder on the dropzone. \nIt seems like this functionality is beyond the current intended scope of react-dropzone.\nIn the past you have said that this functionality should be part of a separate npm package and not part of react-dropzone. #174 \nI know that @quarklemotion had tried to roll his own directory handling script and was going to publish an npm package. I actually tried using his script and this is where I ran into this problem in the first place. Not sure why webKitRelativePath isn't exposed there but there are other viable options available to people. It seems like quarkelmotions script should always include the path because of this method here. \nI had success using Dropzone.js to just make my own React component in about 30 minutes and it handles directories out of the box. If this doesn't work for others they could try applying (open source) code from Dropzone.js (Relevant Code Here) or from another open source library like Uppie.js  to react-dropzone in there own project to get the functionality they need. \nAnyways, hope this helps some folks.. ",
    "PylypchukKhrystyna": "Hi!\nCould you tell me plaese , is it possible to detect the folder onDragEnter event?. ",
    "saidkholov": "So what is the state of this PR? Is it going to be merged soon?. ",
    "davidmoconnor": "Any update on when this will be available? I'd really like to be able to use this feature in something i'm building! . ",
    "barmaglot92": "Hello? When do you plan merge this pr? I really need it!. Hi, i introduced new FS api for directories upload. getDataTransferItems now return Promise intead of File[]. Wait for comments.. @okonet \nI don't write tests now because i want to discuss way to implement this feature before.\nI try to save current way of getting all files at once but alternative way to insert the logic of getDataTransferItems function into Dropzone class. For example we able to call addFile method for adding new File in FileSystemEnty.file callback and render() will be called for every new file.. It will allow to render preview asynchronously for every file (If we need to scan directory)\nBut im not sure with this solution.. I'll write the tests for current realization soon. @okonet \nI decide to not implement \"I try to save current way of getting all files at once but alternative way to insert the logic of getDataTransferItems function into Dropzone class\" bacouse it doesnt anything well for us now.\nUTests implemented, but i wait for you comment about solution.\nFor instance onDragEnter and onDrop use async getDataTransferItems then i need wait for setState (in promise callback):\ndropzone.simulate('drop', { dataTransfer: { files } })\n      getDataTransferFiles({ dataTransfer: { files } }).then(() => {\n        expect(dropRejectedSpy.callCount).toEqual(1)\n        expect(dropRejectedSpy.lastCall.args[0]).toEqual([...files])\n        dropzone.simulate('drop', { dataTransfer: { files: images } })\n        getDataTransferFiles({ dataTransfer: { files: images } }).then(() => {\n          expect(dropRejectedSpy.callCount).toEqual(1)\n          dropzone.simulate('drop', { dataTransfer: { files: files.concat(images) } })\n          getDataTransferFiles({ dataTransfer: { files: files.concat(images) } }).then(() => {\n            expect(dropRejectedSpy.callCount).toEqual(2)\n            expect(dropRejectedSpy.lastCall.args[0]).toEqual([...files])\n          })\n        })\n      })\nIt seems pretty bad, but i don`t know solution..\n. Although this API is experimental, it works in all modern browser now ex (EDGE, FF), but i implement it with checking if browser support it (webitGetAsEntry exists) otherwise in will be works like before.\nNow i work with tests, try to refuse from callback hell due to setState in Promise.. @quarklemotion Hi.\nI see it also return promise. Obviously we must use your package, but common problems were with test Dropzone Component with setState inside promise callback:\ndropzone.simulate('drop', { dataTransfer: { files } })\n      getDataTransferFiles({ dataTransfer: { files } }).then(() => {\n        expect(dropRejectedSpy.callCount).toEqual(1)\n        expect(dropRejectedSpy.lastCall.args[0]).toEqual([...files])\n        dropzone.simulate('drop', { dataTransfer: { files: images } })\n        getDataTransferFiles({ dataTransfer: { files: images } }).then(() => {\n          expect(dropRejectedSpy.callCount).toEqual(1)\n          dropzone.simulate('drop', { dataTransfer: { files: files.concat(images) } })\n          getDataTransferFiles({ dataTransfer: { files: files.concat(images) } }).then(() => {\n            expect(dropRejectedSpy.callCount).toEqual(2)\n            expect(dropRejectedSpy.lastCall.args[0]).toEqual([...files])\n          })\n        })\n      })\nI played with jest.runAllTimers/Ticks but didnt get result. But now don't sends any param to cb functhis.props.onDragEnter.call(this, evt)` ... You are right, i will fix it. What are windows in this context ?. yes... i'l remove styleguide point for this feature because it work at all cases. It's path to file that i generate by hand, it's not depends on OS). Dropzone.onDragEnter now work with async getDataTransferItems, how can i mock it with sync variant in test?). ",
    "TroyWolf": "My react-dropzone users want/need to be able to upload entire folder structures rather than just files. I am eagerly watching this topic.. ",
    "nowseemee": "Hi schneck,\nin my case this error only occurs when i do an npm install inside node_modules/react-dropzone-component\n. ",
    "mikejonas": "I got a solution over here http://stackoverflow.com/questions/37222718/image-uploading-how-to-get-the-right-format-of-image-data-for-server-side-proc . The module works great! \n. ",
    "seppo0010": "Uhm, I'm sorry then. I tried this example (with a modification since I was using babel (like in this example) and it didn't work without the bind. What do you recommend me in this case? should I use bind or is there another alternative? Thanks\n. Thanks.\n. ",
    "Stas-Buzunko": "Hello. The same error. Try to use it in shopify store, so I included index.js file from dist folder and uploaded to shopify as asset.\nSelected line is react-dropzone, you can see above React included. What could be the issue?\n\nHere is the error I get:\n\nAnd here is the line that error points to.\n\nHow can I fix it?\n. Also tried to use browserify with dist/index.js and include to index.html as asset, as a result I get \n\"Uncaught ReferenceError: Dropzone is not defined\" when I try to render it.\n. ",
    "chrisbuttery": "My apologies @okonet. Added!\n. ",
    "brianac": "Yeah just thought I'd let you know. Although in hindsight there probably isn't a whole lot you can do about it\n. ",
    "futpib": "This was related to a parent label somehow in my case. See this answer: https://stackoverflow.com/a/52227434/4477664. ",
    "beausmith": "Yeah, I just ran into this too. If there is a label associated to the dropzone file input, then clicking the label will cause the browser file select dialog to appear twice.\nHaving labels associated with inputs is useful for web accessibility. I feel like this is a fix worth making. . @rolandjitsu - Thanks for the suggestion. I just tried it, but unfortunately this solution blocks the click-to-choose-file feature completely.\nI will post a reproducible example.. @rolandjitsu Here is a reproducible example showing how wrapping a label around the input (valid html) causes the browser's file picker to be triggered twice:\nhttps://codesandbox.io/s/j2z5j2n519\nSimple repro\u2026 Wrap Dropzone <input> in <label> tag:\njs\n<Dropzone onDrop={acceptedFiles => console.log(acceptedFiles)}>\n  {({ getRootProps, getInputProps }) => (\n    <label {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>Drag 'n' drop some files here, or click to select files</p>\n    </label>\n  )}\n</Dropzone>. ",
    "ayozebarrera": "I'm not having any issues. \nBut if there's some unreachable code I think you should delete it from your scripts.\n. ",
    "mathieudutour": "It is publishing the readme anyway. But why do you want to make everybody download the source, the travis file, etc.?\n. Also I'm having a weird bug because the .babelrc is included\n. it actually does\n. this is the only library which is publishing the .babelrc (over 30ish libraries i'm using)\n. It does solve my issue: \nUnknown plugin \"add-module-exports\" specified in \".../node_modules/react-dropzone/.babelrc\" at 0, attempted to resolve relative to \".../node_modules/react-dropzone\" while parsing file: .../node_modules/react-dropzone/dist/index.js\n. Because it's the only one requiring the add-module-exports plugin.\nAnyway, I'll just continue to rm the .babelrc file on post install and download a twice as big module...\n. I'm not transpiling, that's the weird thing. But I guess it's more a browserify/babelify issue than react-dropzone.\n\nRegarding the package size: I don't think that transferring another 20KB is an issue, is it? By doing so I allow developers to look up the source code and tests for the package, which is often acts better as any documentation.\n\nThat's one way to look at it. The other way is that we end up with gigantic node_modules directories which could be a lot smaller. \nBut it's not a big deal for me, I have a good connection.\n. ",
    "tleunen": "If you wanted to let developers see the source files as well, you could easily just push src and dist then ;)\n. ",
    "mrzou": "@nikbelikov Hi, I have the same problem before. But resoled it later. It's not the problem of DropZone Component. Maybe you misunderstood that. The onDrop event is listening div element instead of input. So you only get files from onDrop props\nonDrop: function (files) {\n    console.log('Received files: ', files);\n},\nThat is it!\n. ",
    "nikbelikov": "Thanks!. ",
    "tocttou": "This seems to be a bug with Chrome actually as I am unable to see any files upload here as well: http://sarink.github.io/react-file-drop/demo/\nBut everything works in FF here as well.\n. Yeah I confirmed it to working for others in Chrome/Chromium on lInux. Its an issue with my chrome install. Sorry to bother you. Thanks.\n. ",
    "eladlevy": "Any workaround for this?\nI have the same issue with Google Chrome 51.0.2704.106. It happens when I drag the file from the bottom download bar that appears after you download a file.\n. Possibly.  I wasn't sure if he was talking about the same drag scenario\n. Yes. still reproducible with the latest version of Chrome 52.0.2743.116 (64-bit)\n. So apparently the weird fix in #74 solves this issue\nadding this line:\ne.dataTransfer.dropEffect = 'copy';\n. ",
    "MaffooBristol": "Should be fixed whenever this is merged in: https://github.com/okonet/react-dropzone/pull/225\n. I don't think this is necessarily related to #191, but I think it is definitely an issue. The standard Dropzone.js library works fine when dragging from the downloads bar, but react-dropzone doesn't work.\nChrome 52.0.2743.116 (64-bit), Mac 10.9.5\n. Great, just needs to be PRed then!\n. Any best practice for tests, @okonet?\nCheers\n. Weird:\n61:5  error  Assignment to property of function parameter 'e'  no-param-reassign\nGetting the feeling eslint has got a bit confused about this one?\n. Okay, I tried it out myself and it doesn't work \ud83d\ude2b \nI thought I would do the PR from the previous suggestion as I had assumed it would work, but it hasn't...\nBack to the drawing board?\n. I lie! It does work, was my own stupidity ha.\n. @okonet Done, should be building now.\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e!\n. ",
    "OlivierCo": "\nSame here. can you fixe it please?\nActually, it is a good practice to put remaining props into a variable.\nThe spread operator can be used to pull variables off props, and put the remaining props into a variable.\n. ",
    "nuc": "@okonet It seems that in the new react version, the name attribute is always present:\nhttps://esnextb.in/?gist=b0122d98b384e9143eadfd558228be45\nSo I'm not sure if that failing test makes sense anymore.\n. Sure, will do!\n. There was no need to add test for disablePreview, since that case was already covered in the current test: disablePreview is used inside onDrop which happens after we delete the property in render.\nAdded two small tests for disableClick though.\n. Should be ready now! :)\n. Interesting, I encountered only the disablePreview and disableClick.\nI can prepare a small patch tomorrow if you want.\nCheers\n. @okonet Added additional PR. Cheers!\n. ",
    "elado": "Thanks for the PR, @nuc. I'm still seeing Unknown prop``onDropAccepted``on <div> tag. ... in div (created by Dropzone)\n. ",
    "blaenk": "Thanks! Sorry for the noise, I hadn't realized something went wrong in my webpack config.\n. ",
    "anuragCES": "Added a PR for this issue. Kindly review. https://github.com/okonet/react-dropzone/pull/237\n. @okonet \nThank you reviewing the PR.\nI have made code review changes. Kindly review. https://github.com/okonet/react-dropzone/pull/237\n. @okonet \nThank you for your feedback.\nI have changed the code as per your review. Also, I have added tests for possible scenarios. Kindly review and share your thoughts.\nAlthough, as per your suggestion regarding adding an event listener. I was unable to add it on document.body or document. If you could help me it would be of great help.\nThank you.\n. @okonet \nThanks \ud83d\udc4d \n. @okonet \nFresh npm install do not have /dist directory in-turn causing an issue.\nKindly suggest.\n. @okonet \nIt worked, It was an overlook from my end.\nThank you for helping out.\n. @okonet \nonFileDialogCancel event invokes when I provide direct reference to src/index.js. However, it fails when used through /dist. Could you confirm the same?\nThank you.\n. @okonet \nSure, please take your time. I will continue to use my forked version of it. Thank you again.\n. @akkie I'm using this.refs.dropzone.open() method to open the file dialog. Is this you're referring to?\nCould you give a try referencing - \"react-dropzone\": \"https://github.com/anuragCES/react-dropzone\"\nin you package.json?\nLet me know if this works for you.\n. @akkie \nThank you for your feedback.\nSure, I will raise a PR for the same.\n. @okonet @akkie \nHere's the PR - https://github.com/okonet/react-dropzone/pull/253\n. This PR is referenced from the conversations at - https://github.com/okonet/react-dropzone/pull/237\n. @okonet \nPlease go ahead with the code review.\nThank you.\n. @okonet \nThanks for pointing it out.\nIt passes test cases now.\n. @okonet @akkie \nThank you for your feedback.\nopen() {\n    const { fileInputEl } = this;\n    this.setState({ isFileDialogActive: true }, () => {\n      fileInputEl.value = null;\n      fileInputEl.click();\n    });\n  }\nThis causes infinite loop since the fileInputEl.click() make the open method to called again.\nShall I change the isFileDialogActive to be class variable rather than a state. I can change the usage from this.state.isFileDialogActive to this.isFileDialogActive everywhere.\nNeed suggestions?\n. ",
    "anorudes": "+1\n. ",
    "prabhu": "Great PR. I disagree. This should be part of the library. Callback for customising max and min size is frankly an overkill.\n. ",
    "lemuelbarango": "Yeah I can\nOn Aug 29, 2016 3:57 AM, \"Andrey Okonetchnikov\" notifications@github.com\nwrote:\n\n@lemuelbarango https://github.com/lemuelbarango can you please also\nupdate the README?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/okonet/react-dropzone/pull/202#issuecomment-243057123,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHDW6zHm0k6Mdz7wyqfi2cDQPjOsuBfBks5qkpDTgaJpZM4JUPVx\n.\n. \n",
    "albertkawmi": "@lemuelbarango @okonet thanks for this. Will this update be published on npm?\nedit: apologies, just realised last change was only 3 days ago...\n. ",
    "Sonblind": "Ah, that makes sense. Thanks\n. ",
    "aymericbouzy": "What you suggest makes more sense. I'll look into this, I'll keep you posted.\n. Now that I have more experience with React, it seems to me that you cannot pass them as prop : children are rendered before Dropzone renders, it's too late to pass props to them. You could rather use something like context, but it doesn't seem designed to do that. \nreact-virtualized uses a nice syntax I think. In this situation, it would allow to have this situation : \njsx\n<Dropzone onDrop={this.onDrop}>\n  {(active) => {\n    if (active) {\n      return <ActiveDropzoneContent />\n    } else {\n      return <InactiveDropzoneContent />\n    }\n  }}\n</Dropzone>\nI find it very readable, and not very difficult to implement. I can do a PR if you approve allowing such syntax (on top of the current one).\n  . oh I didn't know about React.cloneElement, sure I can do something like this :) Thanks for pointing that out! Should I discard the function altogether, or provide both methods?\nTotally makes sense to provide only the relevant parts of the state, but I wasn't sure which and how, that's why I suggested it this way ;) Should I rename the properties active and rejecting, or  should I keep the same names?. Please tell me if you're requesting more changes \ud83d\ude42. I was also quite uncomfortable with having to do this : \njsx\n<Dropzone style={{}} onDrop={this.onDrop}>\n  Drop a file\n</Dropzone>\nIt's simply weird ...\nI think you should have a way for users to opt in for the default style in an easy way, such as : \njsx\n<Dropzone default_style onDrop={this.onDrop}>\n  Drop a file\n</Dropzone>\nBut having a component that only handles the \"dropping\" part, and leaves the \"styling\" part to the user totally makes sense to me.\n. Thanks for sharing CSS-in-JS ! I didn't know about it, and it looks really amazing \ud83d\ude03. You may review my code.. Thanks ! it's not much :) Feel free to ask me for other features if you need. I'll tell you if I can do it.. @okonet Related to CSS-in-JS : have you seen react-css-components ? https://github.com/andreypopp/react-css-components It looks very promising too ! syntax looks clearer to me.. Can you explain \"making it static\"?. Is that what you mean? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static. Ok. I can do both, tell which you prefer ;) In my opinion, static makes more sense (that way it is scoped, etc), but it's an advanced feature of Javascript, so it makes it less readable for beginners. I'll do whichever you think is best.. In my opinion, doing this is bad. It may break some people's code (if they had components with isDragActive prop for instance). I think we should remove this step.. React.cloneElement doesn't like null argument. so if you provide a function, the props will not be added to the children. In case some people start mixing together the two syntax, it might seem weird to them ... But you can decide that you should chose between the two syntaxes.. additionalProps ? . That's what I'm suggesting indeed. Feel free to tell me if you disagree :). Ok I'm removing it then and refactoring. I'll also suggest an update on the README.md.. ",
    "TylerYang": "Yes, there was no error message in the console and the component worked great actually, except the new tab. \n. ",
    "imdragonet": "https://github.com/RubaXa/Sortable/issues/985. ",
    "hajime-moto": "It's for a Scala.js project. I'm using SBT to build the project and I'm not using webpack or browserify hence the reason for the dist package request :) \nI usually see a dist folder in all JS projects so I thought I should ask. But if it's not a good practice then I will try compile it locally with webpack.\n. ",
    "AntiFish03": "A committed dist/* would be very helpful for people using bower with a non node backend (and not using webpack or browserify).\nI checkout resources during deploy (instead of them being checked into the repo) the advantage is that no one gets the bright idea to change the vendor scripts, the downfall tends to be the attitude that you have\n\nAlthough it's okay for quick prototypes I don't believe this is good for real projects\n\nand because I can't just go into the react-dropzone package folder and run webpack ( well I could but it would only run locally as it is never committed)\nThe idea behind this is a 3rd party library is not the primary purpose of a project it is a component, or utility and as such there is no reason that a 3rd parties code should be checked into the project repo.  Its a similar philosophy to Ruby and bundled gems or PHP and composer.\n. ",
    "fpayer": "I can't seem to track down the code responsible for causing the warnings. The link in the warning doesn't seem to show any example applicable for this lib. \n. ",
    "tomprats": "I'm running into this issue as well but it looks like Dropzone is using PropTypes in the correct way. I can't figure out why the warning is being generated.\n. ",
    "XXChester": ":+1: \nI've run into this issue as well and Javascript is not my strong point so not sure how to fix it.\n. ",
    "topgun743": "Seems like no one interested in removing this warning in source code or doing some fix for it there. \nIt is really frustrating to watch lots of red lines in console. I am using react v 0.14.7 and version of react-dropdown is 3.6.0\n\n. OK, I used the source code of react-dropzone (src/index.js) directly in my app and now the warning not showing anymore. Not sure why.\n. ",
    "avidant": "All you need to do is import PropTypes from 'prop-types'; in index.js and recompile. Would it be possible for this to be added @okonet?. ",
    "code-shoily": "Sorry wrong repo, my bad.\n. ",
    "zivl": "how this issue closed? is there a solution? was it solved in a later version of react-dropzone. ",
    "EazyServer": "found it!\n. ",
    "ValYouW": "Hi,\nThe problem arise when using file extension in the accept field instead of mime type.\nIf I have this: <Dropzone accept=\".svg,.jpg,.jpeg,.gif,.png\"> and I drag a \".jpg\" file, it will get rejected while dragging, but get accepted onDrop.\nReason:\nonDragEnter event won't give us the file name while onDrop will give us the file name, and the attr-accept library supports both mime type and file extensions, so when validating onDragEnter it attr-accept will reject it, and when validating onDrop attr-accept will accept it - hence the inconsistency.\nDon't think much can be done here which is a bummer... unless there is some way to get the file name onDragStart/Enter/Over\n. ",
    "xsburg": "@okonet, I think it should be mentioned in the docs in the way it's noted about cross-platform MIME. In fact, the comment about MIME naturally steers you towards using file extensions in accept as the most reliable thing and then you just stumble upon this vague bug. It took me drilling down into the code to realize what the problem is.. ",
    "charliematters": "You are correct - my example is wrong. Sorry!\nEven with the comma in the string, I can't get the active class to get set, so I will try it out and include some sample code\n. Ok, after further inspection my issue is that the file name is not being passed to the accept library (causing the accept library to fail). \nSlight complication is that the error appears on an older version of Chrome, which I can't replicate outside of work, so I will close this defect.\n. ",
    "id0Sch": "when i set height:500 as a prop the dashed border disappeared since my style replaced the default style.\nfrom my experience with external react components, override is better than replace.\nright now my component that wraps dropZone looks like that:\n``` javascript\nconst dropZoneStyle = {\n    width: '100%',\n    height: 100,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst AddPackage = ({Upload:{file}, addFiles})=> {\n    return (\n        \n\n                {file ?\n                    \nselected file\n\n                </div>\n                :\n                <Dropzone multiple={false} style={dropZoneStyle} onDrop={addFiles}>\n                    <h4 style={{textAlign: 'center'}}>Click / Drop Apk file here</h4>\n                </Dropzone>\n            }\n        </CardText>\n        <Divider/>\n        <CardActions>\n            <FlatButton label=\"clear\"></FlatButton>\n            <FlatButton primary={true} label=\"upload\"></FlatButton>\n        </CardActions>\n    </Card>\n);\n\n};\n```\nthe\nconst dropZoneStyle = {\n    width: '100%',\n    height: 100,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nwith my PR is would be \nconst dropZoneStyle = {\n    width: '100%'\n};\nregarding the style var\nshould i just do\nconst {style} = rest ?\n. well, you do have a point - I agree.\nYou could instead of removing the default style not apply it as a default but to export it maybe, so users can choose to depend on it or implement their own.\nso we could do import {DropZone, defaultStyle} from 'dropzone'\nwhat do you think?\naboust eslint - i'll fix it when we'll decide if my PR is actually needed :)\n. Well, in some cases you just want an out-of-the-box lib that just works without having to configure stuff.\nIn my case I wanted to use the default style but just change the height.\nmaybe to best solution is really to remove the default style and just have an example in the readme that shows the default style\n. great, close this for now?\n. ",
    "unbalanced": "Hey guys, \nI love to see components released with default look&feel. it easier to start using components that already has some default look.\nThe problem i see is that Inline-ing css in components makes it harder to reuse the component in different projects, since different projects usually means different sizes/colors/etc.. and some inline styles are just not possible to override (they are strong like !important)\nNote, it might not be the case here, but many components have more than just one div and thus the inline styles on child elements are not reachable to override like in DropZone and this is where inline styles suck the most. \nWe'll have a better developer-experience and a better overall-modularity by using className. \nIf we'll let the component-creator to set his default lock&feel and the reusing-developer to easily override css rules if needed by extending the default class of every html element that the component is creating.\nWDYT?\n. ",
    "ajwagner777": "I hate to bring up a potentially old issue, but this issue is an important one to me (and possibly a deal breaker).  We are building a rather large app, and I would really prefer to keep the styling consistent with the rest of the app's branding.  I would propose the following:\n- Add a class to the container that would allow styling hooks for the different states (default, drag over, invalid, others?)\n- Add a prop that can conditionally remove the inlined styles\n- Add some documentation to README \nThis preserves current functionality for current users, and allows for much better styling.  I am happy to submit a PR to this effect.  Just wanted to make sure this was okay before putting in the work.\n. What I ended up doing was exactly what you said; I looked at the propTypes and noticed that you could give it a activeClass and rejectClass.  Then I paired that with style={{}}, and got what I needed.\n. ",
    "domhede": "Cordova takes the app and packages it as a Native App.  Since it uses the webview the app should behave just like a mobile browser.\nWe are using React-Dropzone to handle all the file uploads.  It works well with Cordova and iOS.  Now the only issue for Android is on 4.4.2.  It seems that this OS has some know issues.  It seems like nothing I do can make work, so I was just reaching out to see if you'd had any experience with it.\nAt the moment the best option seems to use Crosswalk instead of the native webview.  Only issue now is that the app crashes when the camera dialog begins.\n. We are using the drag and drop function on Desktop and on mobile we just have the file input field render as a button.\nMaybe we need to rethink our approach.\n. ",
    "Austio": "@okonet i'm thinking that it is mimicing native browser functionality.\nIf you add a file input to chrome html page\n<input type=\"file\" name=\"document\">\nThen follow these steps\nInitial value of document\n$(\"[name='document']\").value\n\"\"\nSelect Add and attach a file\n$(\"[name='document']\").value\n\"C:\\fakepath\\File jpeg.jpg\"\nClick to add a document but select cancel\n$(\"[name='document']\").value\n\"\"\n. @okonet i like that, looks like we are all busy but if i get a couple hour opening at night will whip up a PR for this.\n. ",
    "GuillaumeCisco": "I'm also concerned by this behavior.\nLet's put a multiple select in a page. A user can select one or multiple files with a first action.\nWith a second action, he should be able to add one or multiples files to the current added files, but currently, files are overwritten.\nIt is really annoying, I've just spent 3 hours on this issue, thinking it was related to another code part.\nDo we have further information about the \"cancel\" click option as @Austio told about.\nI don't really know how to handle it :S\n. Reading W3C RFC : http://w3c.github.io/html/sec-forms.html#file-upload-state-typefile\n```\nUnless the multiple attribute is set, there must be no more than one file in the list of selected files.\nIf the element is mutable, then the element\u2019s activation behavior is to run the following steps:\nIf the algorithm is not allowed to show a popup, then abort these steps without doing anything else.\nReturn, but continue running these steps in parallel.\nOptionally, wait until any prior execution of this algorithm has terminated.\nDisplay a prompt to the user requesting that the user specify some files. If the multiple attribute is not set, there must be no more than one file selected; otherwise, any number may be selected. Files can be from the filesystem or created on the fly, e.g., a picture taken from a camera connected to the user\u2019s device.\nWait for the user to have made their selection.\nQueue a task to first update the element\u2019s selected files so that it represents the user\u2019s selection, then fire a simple event that bubbles named input at the input element, and finally fire a simple event that bubbles named change at the input element.\nIf the element is mutable, the user agent should allow the user to change the files on the list in other ways also, e.g., adding or removing files by drag-and-drop. When the user does so, the user agent must queue a task to first update the element\u2019s selected files so that it represents the user\u2019s new selection, then fire a simple event that bubbles named input at the input element, and finally fire a simple event that bubbles named change at the input element.\nIf the element is not mutable, it has no activation behavior and the user agent must not allow the user to change the element\u2019s selection.\n```\nIf I understand what it is written here. We should be able to add/remove files.\nFurthermore, clicking the 'Cancel' button should not set the value to null\n. ",
    "sunshinesanty": "Thank you this awesome component, makes life a lot easier. but this issue of not able to clear the input field on click is hitting us hard when we are using it on mobile devices using Windows phone 8.0 , I know this is legacy OS but still is supported within our organization.\nThe issue is with IE 11 and below, when we upload a file and choose camera to take a photo and upload, the users can upload the first photo, but the subsequent one can only be be done after we select some other file.\nThis is since the camera always outputs photo with the same name.\nAny ideas, hints, suggestions will help a long way.\nThank you.. ",
    "Arturszott": "What kind of device do you have? I've found out that non chrome device custom browser do not support multi upload.. ",
    "duong": "thank you for your answer, \nsorry for my missing description, for now I still have this issue.  Currently on my android device when upload popup  shown. There are some image folders open such as Photos, Image, application, gallery, facebook photo, one driver photo etc. When I click on photos folder and choose 2 pictures, then click done button, There was only image uploaded, please see the followings screenshots on my device.\nplease take a look and give me a advice, thanks \n\n\n\n. I''m now using Sony Experia with android version 6.0.1. I could not fix this by my self. ",
    "indianscout": "Exactly what I'm looking for :+1:\n. ",
    "ayxos": "I solved it using setState from the parent class. Thanks!\n. ",
    "Sigura": "Please just add first commit\n184e99494cb65d63db63ddc891fd15cb7cc130d4\n. done\n. please close this request,\nand please accept new request #267\n. done )\n. could you please-please-please-please make release with those changes? ,)\n. ",
    "jinxac": "Yup looks like I missed it \ud83d\ude1e . Works fine after binding this. Thanks a lot.\n. ",
    "seenickcode": "@anomaly44 , could you cite how you got it to work?  It seems for me dropping in jpg images doesn't work on Safari yet it works on other browsers.. Ok I'll try this out. But my issue was the 'onDrop' function's\n'acceptedFiles' parameter was always an empty array for Safari and JPGs\n(not PNGs).  Did you experience this problem as well?\nOn Wed, Jan 18, 2017 at 9:23 AM, anomaly44 notifications@github.com wrote:\n\ninstead of using the file locations to later upload the file, I process\nthe files immediately when they are dropped in, using the canvas and\nFileReader. And i save the processed files in an array, and I upload the\nprocessed data later. I hope this makes sense :)\nonDropAccepted(newfiles) {\n    newfiles.map(img => {\n      const reader = new FileReader();\n      reader.readAsDataURL(img);\n      reader.onload = (event) => {\n        const dataUrl = event.target.result;\n        const image = new Image();\n        image.src = dataUrl;\n        image.onload = () => {\n          this.props.addPicture(resizeImage(image, 1600, 1200));\n        };\n      };\n    });\n    this.setState({ showNotAcceptedError: false });\n  }\nfunction resizeImage(image, maxWidth, maxHeight, quality) {\n  const canvas = document.createElement('canvas');\nlet width = image.width;\n  let height = image.height;\nif (width > height) {\n    if (width > maxWidth) {\n      height = Math.round(height * maxWidth / width);\n      width = maxWidth;\n    }\n  } else {\n    if (height > maxHeight) {\n      width = Math.round(width * maxHeight / height);\n      height = maxHeight;\n    }\n  }\ncanvas.width = width;\n  canvas.height = height;\nconst ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, width, height);\n  return canvas.toDataURL('image/jpeg', quality);\n}\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/okonet/react-dropzone/issues/235#issuecomment-273412209,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEoOU_G-QQ0Bh-9VtZkLGrVz4RJkGcQks5rTcvpgaJpZM4J_5Ws\n.\n. I deleted the library from node_modules, removed the version from\npackage.json and ran npm install again.  It upgraded to a higher version\nand then it worked again.\n\nOn Tue, Jan 10, 2017 at 1:18 AM, Alexey Kislyakov notifications@github.com\nwrote:\n\n@seenickcode https://github.com/seenickcode i have same issue how did\nyou get it work? thanks\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/okonet/react-dropzone/issues/320#issuecomment-271495907,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEoOXPQTzydXymEo3V-41eC7rl2DYXrks5rQyK3gaJpZM4Lepnu\n.\n. \n",
    "mbaroukh": "ok, sorry. My fault.\nI was using DropZone in a stateless component.\nThe message was clear but I though that  was the component. Ilt was a stateless wrapper that encapsulate  on ly project.\n. ",
    "teckore": "Using Google Chrome Browser, and the version of dropzone I am using is 3.5.3\nCurrently I am using it as follows: \n<Dropzone onDrop={this.handleOnDrop} multiple={false} maxSize={500000}>\n                         <div style={styles.innerbox}>drop and drag files here</div>\n                      </Dropzone>\nI want to set it so that anything greater than 500kb does not get uploaded.\n. It's an odd issue. When I set it as maxSize=\"500000\" on my local machine, it let me upload the file. However, I have a buddy that used that same format and it restricted the upload for him.\n. ",
    "th3fallen": "~~this is not working as expected for me either, i have set my maxSize at 200 to test and no matter the size of the image i drop it still calls the ondrop method or am i missing something?~~\nwasnt passing size props down :(\n. @DimitriMikadze here's a real world example of how i used it\n```\nonDrop = (file) => {\n    this.setState({ savingAvatar: true });\n    this.props.uploadAvatar(this.props.user, file[0])\n      .then(res => {\n        if (!isUndefined(res) && res.error) {\n          this.setState({ savingAvatar: false });\n          return this.props.errorNotice('There was an error uploading avatar!', { duration: 3000 });\n        }\n        this.setState({ savingAvatar: false });\n        return this.props.successNotice('Avatar upload complete!');\n      });\n  }\nonDropRejected = () => {\n    return this.props.errorNotice('Maximum file upload size is 2MB');\n  }\nrender() {\n    return (\n      \n\n```\n. ",
    "DimiMikadze": "Dropzone is just rejecting files that are larger then specified in maxSize. I think it would be more user friendly to give some error message regarding size\n. can you explain how to use it, can't find info regarding that function, thanks!\n. thanks!\n. ",
    "aaronbeall": "I'm using Chrome. A colleague saw the same issue in Chrome but also tried a different browser (I think FireFox) and saw different behavior. Again, the type is only missing for certain files in Chrome. This seems to be a known limitation of the File API. Disappointing!\nSo the question for this library, I suppose, is whether you want to deal with this problem in any helpful way. For example right now the implementation of accept is not reliable cross-browser. You could provide a post-drop file-extension filter which would work cross browser (this is what we're doing manually.) Otherwise it should just be noted that accept cannot be relied on for all file types in all browsers. Sniffing out that compatibility matrix and adjusting behavior is probably not something you want to do. :)\n. Yeah I feel you. :) It would be helpful and not necessarily specific to anything if the component had a few options for validation (like validate-trigger: drag | drop and accept-extensions: Array), or a custom validation hook. As it is we're not able to use the built-in validation feature. I'll work on an enhancement and possibly submit a PR.  \ud83d\udc4d \n. A few more observations:\n- If I replace the <Dropzone> with equivalent content <div><input/></div> the problem doesn't exist. Only when I use <Dropzone> does it happen.\n- The problem happens for onClick but not onMouseOver. \n- If I delete the Dropzone rendered <input> from DOM (using chrome elements inspector) clicking no longer causes two events.\n. I'm not sure I understand. Bubbling shouldn't result in multiple events.... you're saying that because Dropzone has an onClick handler that causes two callbacks to fire on the parent? \n. I think this is the problem:\nhttps://github.com/okonet/react-dropzone/blob/master/src/index.js#L182\nYou are calling click() on the input from an onClick handler, the input click event bubbles so you end up with two onClick callbacks getting fired (one for the user's click, one for the input.click()). \nSimilarly for the drag event handlers such as onDragStart you explicitly call props.onDragStart but the original event will bubble to the parent so you end up invoking the parent callback a second time:\nhttps://github.com/okonet/react-dropzone/blob/master/src/index.js#L41\nI think in both cases Dropzone should stop propagation or not explicitly invoke the callback and let bubbling work. \n. Sure I'll give this a shot next week.\n. @okonet Looking into this. Just curious about the workflow (I don't maintan any libraries myself), how do you go about visually testing this? Do you just create a separate project and add react-dropzone as a dependency?\n. As far as an isolated case, a fresh project (using create-react-app) with this code:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dropzone from \"react-dropzone\";\nReactDOM.render(\n   console.log(\"click\", e)}>\n    \nClick me.\n\n,\n  document.getElementById('root')\n);\n```\nGives this output when you click the dropzone:\n\nNotice the first event target is input and the second event target is div.\nIf I stop the input event from propagating by modifying Dropzone rendering of the input to this:\n<input\n  {...inputProps/* expand user provided inputProps first so inputAttributes override them */}\n  {...inputAttributes}\n  onClick={e => e.stopPropagation()}\n/>\nThen I just get the single div click as expected. I think this is the right way to handle it, I can't think of any case you'd expect to see the input click event, since this is basically an implementation detail of how Dropzone spawns the browser file picker dialog. I'll add a PR for this change.\nAs for the drag events firing twice, that does not happen in the above simple test, so I'll have to dig deeper to find out why that was happening in my real app. Maybe nothing to do with Dropzone.\n. You need to simulate the click on the inner div (or possibly the inner Dropzone though I'm not sure that's an accurate test since it's not a DOM element.) I couldn't work out how to do it, all my attempts to select the inner element with TestUtils led to invariants about trying to find the wrong thing, or simply gave me 0 results.. Hm. Does my original example not exhibit the behavior for you? It could be that simulate click doesn't behave the same (intentionally?) as a real DOM click. It's certainly a weird test case: testing the behavior of a wrapping component when the component under test is put inside it.... I ran npm install and npm build and I don't see the errors... what do I need to run to see these errors?\n. Ah I see it running npm run eslint:src\n. I tried to add this test:\n```\n      const onClickSpy = spy();\n  const component = TestUtils.renderIntoDocument(\n    <div onClick={onClickSpy}>\n      <Dropzone className=\"dropzone-content\" />\n    </div>\n  );\n\n  const content = TestUtils.findRenderedDOMComponentWithClass(component, 'dropzone-content');\n  TestUtils.Simulate.click(content);\n  expect(onClickSpy.callCount).to.equal(1);\n\n```\nHowever this gives me Invariant Violation: findAllInRenderedTree(...): instance must be a composite component apparently because you can't use this with a DOM element.\nSo I tried this:\n```\n      const onClickSpy = spy();\n  const WrappedDropzone = () => (\n    <div onClick={onClickSpy}>\n      <Dropzone className=\"dropzone-content\" />\n    </div>\n  );\n\n  const component = TestUtils.renderIntoDocument(\n    <WrappedDropzone />\n  );\n\n  const content = TestUtils.findRenderedDOMComponentWithClass(component, 'dropzone-content');\n  TestUtils.Simulate.click(content);\n  expect(onClickSpy.callCount).to.equal(1);\n\n```\nWhich throws: Error: Did not find exactly one match (found: 0) for class:dropzone-content. \nAny tips?\n. Yes I should have seen the ESLint pre-commit errors but I edited it straight on Github after messing around with things locally... which was silly. :) But at least now I know Github doesn't run the pre-commit scripts.\n. I got stuck on that test in my last reply and haven't been able to circle back to figure out how to workaround the TestUtils limitation... my quick research made it sound like you aren't expected to test a wrapping element with TestUtils. \ud83d\ude16 . This: https://github.com/facebook/react/issues/4692\nI'm not sure that's the issue but that was as far as I got.... ",
    "Philin-Anton": "hello when can we expect a new version of npm module with these changes?\n. ",
    "maps82": "Sorry, this was too fast. I see you can do it with onDropRejected \ud83d\udc4d \n. ",
    "bmueller-sykes": "Sorry; just circling back to this. I'm happy to attempt to a pull request for this, but the only solution that works appears to be to just remove the \"dropEffect\" line, so the PR wouldn't be all that broad in scope. However, i didn't know if dropEffect was crucial to the library in any way that I simply cannot see, so I was reluctant to make a move.\n. Okay, will do! It'll be my first PR on a public library, so be gentle if I don't get the process quite right the first time. (-;\n. okay. PR created.\n. Okay, I've updated my branch. It seems to work with the try/catch. What's the correct procedure here? Close this pull request and open a new one?\n. Agreed. I'll give it a spin tomorrow\nOn Oct 23, 2016, at 15:56, Andrey Okonetchnikov notifications@github.com<mailto:notifications@github.com> wrote:\nHmm, I think it's worth trying @bmueller-sykeshttps://github.com/bmueller-sykes\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/okonet/react-dropzone/pull/258#issuecomment-255613824, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ALq2W00kHbtqnIKwJ5PHdUfOZZN2QTE0ks5q28nTgaJpZM4KdVIQ.\n. I updated the code on my fork. I think all I had to do was add a comment in the catch{} statement. lml if there's anything more I need to do.\nThanks!\n. ",
    "skotfred": "IE is often very picky about missing semicolons at the end-of-line in javascript,  that problematic line is missing one.\ne.dataTransfer.dropEffect = 'copy'. ",
    "SpudNyk": "This issue has regressed and now happens again in IE 11. I'm getting the error on an enterprise network so my guess would be something in the security policy for windows prevents the setting of the flag, wrapping the line with try catch seems to fix it.\nI just tried on a plain windows 10 + IE 11 install and I don't get the error there, only difference would be lack of the group security policy.. ",
    "macrozone": "This change is in the documentation, but there was no release on npm.\n. sorry @alexkerber , i forgot a backtick should say: you can lay a <input type=\"file\" /> above the drop-zone. ",
    "pouu69": "i have same issue , but not working yet\n. already upgrade v3.8.0. I am already version 3.8.\nbut not working click event.\nThis is the same situation as the above issue.\n. ``` javascript\n<div\n    className=\"block-img-wrapper\"\n    onClick={this.changeRootSlide}\n\n<div>\n    <Dropzone\n        multiple={false}\n        className=\"block-dropzone\"\n        disableClick={true}\n        accept=\"image/*\"\n        ref='dropzone'\n        style={styles.dropzone}\n        onDrop={this.html5FileHandling}\n\n        <div className=\"trigger\">\n        </div>\n    </Dropzone>\n</div>\n\n\n```. \n",
    "ghost": "With current fix an IconMenu from MaterialUI stopped working properly as it is not hiding after clicking on a DropZone.\nI deeply believe that e.stopPropagation() shouldn't be invoked when disableClick is true.. for .doc, .docx i am not able to get the file type, in the file object returned from the dropzone i'm getting file type as empty (type=\"\")\n\n And when i give mime-type extension (\"application/msword\") of .doc type to \"accept\" parameter of drop zone, it was not accepting .doc type files.\n. Going forward will there be a way to style the outermost div created by Dropzone  component?\nForexample, if I want to pass height: 100% to the enclosing div how can I do that? I followed the advice in \"Reacting to user input\" but I still need to pass the style={{height: '100%'}} to Dropzone. \n. I have the same issue on google chrome. The onClick event is working, but the dialog is not opening.\n It's woking on Firefox.\nGoogle chrome Version 55.0.2883.87 (64-bit)\nreact-dropzone version 4.2.3. ",
    "weisjohn": "I'm having this issue as well, using 3.11.0. . ",
    "LaustAxelsen": "Just add a pointer-events: none; css-rule on the dropzone DIV dom-node.. that fixed it for me.. @okonet it does not break click to open file dialog functionality. The bug is still happening, just tried it yesterday on v3.13.1. \nI know it sounds way off and ugly with the css-fix, but the alternative for me is that the \"open dialog\" hit's twice - where the first file selection is dropped.. ",
    "fetzig": "Same issue here. Newest version. Use dropzone in a semantic-ui project, and the <Dropzone> node triggers 3 times the click event - opens the file dialog - reloads the page.\nBehaviour seems consistent across browsers. Use newest release (3.11).\nIt's obviously an edge case, thus reproducing this bug might headache on its own.\nI will try to find the time and make a proper Bug Report and maybe PR.\nMy current assumption is, this happens when Dropzone has children like input/button/a. Clicking these results in bubbling the event upwards, and for some reason this results in multiple click events. First event handled properly by <Dropzone>, and others bubble further up.. fixed my bug. really obvious, sorry for the noise:\n<Dropzone\n    multiple={false}\n    className=\"dropzone\"\n    activeClassName=\"dropzone-active\"\n    onDrop={this.onDrop}\n    onDragEnter={() => this.setState({ isDragging: true })}\n    onDragLeave={() => this.setState({ isDragging: false })}\n    ref={(node) => { dropzoneRef = node; }}\n    >\n        <Button\n            onClick={(e) => {\n                e.preventDefault(); // --> without this onClick fires 3 times\n                dropzoneRef.open();\n            }}>\n            <Icon name=\"upload\" />Click here\n        </Button>\n</Dropzone>. ",
    "kylepotts": "I am also getting this same issue. Version 3.13.1. Even with e.preventDefault(). @okonet https://github.com/kylepotts/react-dropzone-bug-example\nJust do the normal npm install npm start. First dropzone will console.log twice. Second dropzone will console.log once. \n```\nimport React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nlet dropzoneRef1;\nlet dropzoneRef2;\nclass App extends Component {\nrender() {\n    return (\n      \n { dropzoneRef1 = node; }} onDrop={(accepted, rejected) => { alert(accepted) }}>\n          Drop files here.\n\n { console.log('this will execute twice'); dropzoneRef1.open() }}>\n          Open File Dialog\n      \n { dropzoneRef2 = node; }} onDrop={(accepted, rejected) => { alert(accepted) }}>\n        Drop files here.\n\n { console.log('this will execute once');}}>\n        Open File Dialog\n      \n\n    );\n  }\n}\nexport default App;\n```. I've created a bugfix here https://github.com/okonet/react-dropzone/pull/437. It should still respect the onClick event in inputProps if that is set. . @okonet I updated that PR for ya. \nI didn't look through all the tests but currently tests fail because of a linting issue. \nhttps://github.com/okonet/react-dropzone/blob/master/src/index.spec.js#L834\n/Users/kyle.potts1/Downloads/gh/react-dropzone/src/index.spec.js\n  834:32  error  Delete `\u00b7(`      prettier/prettier\n  846:18  error  Delete `\u23ce\u00b7\u00b7\u00b7\u00b7)`  prettier/prettier\nI can fix that in this PR too if you'd like. . @okonet PR updated and test case added. Everything looks green on my end. . @okonet Merged latest master in should be good now. . Good point. I'll update that. . Can do. . I needed to extend on onClick of the input element to stop event propagation. . I'll give that way a try and report back. . I tried this \njs\n    return (\n      <div\n        className={className}\n        style={appliedStyle}\n        {...divProps /* expand user provided props first so event handlers are never overridden */}\n        onClick={this.onClick}\n        onDragStart={this.onDragStart}\n        onDragEnter={this.onDragEnter}\n        onDragOver={this.onDragOver}\n        onDragLeave={this.onDragLeave}\n        onDrop={this.onDrop}\n        ref={this.setRef}\n      >\n        {this.renderChildren(children, isDragActive, isDragReject)}\n        <input\n          {...{\n            ...inputProps,\n            onClick: evt => {\n              evt.stopPropagation()\n              if (typeof inputProps.onClick === 'function') {\n                inputProps.onClick()\n              }\n            }\n          }}\n          {...inputAttributes}\n        />\n      </div>\n    )\nHowever I still got the double click, and the test I created for this also failed. . @okonet https://github.com/facebook/react/issues/1691\n\nHi there, it's been around 1.5 years passed, any plan on this issue? There are several cases in our team that we need to prevent the event bubbling of inner components. The workaround for us is painful: to drill down the target element and adding addEventListener to stop propagation there, then we have to care about the clean up, remove the listener when unmount.\n\nIssue is still active as of May 17 this year. This seems like a bug in react and overloading the event handlers might be the only way to avoid this bug?. ",
    "TigerWolf": "I am also getting this on 3.13.2. I only have text as a child of the Dropzone element.. ",
    "hoodsy": "@okonet I'm still experiencing this \u2013 the \"Choose File\" dialogue appears twice. If I exit after the first dialogue, no file is uploaded.\nEDIT: Worked around this by adding onClick={e => e.preventDefault()} to my Dropzones. ",
    "jasan-s": "adding this did not help onClick={e => e.preventDefault()}. ",
    "twelve17": "I also got the \"Choose File\" dialog twice, but only if the <input> and the <div> have other elements between them (I am using Grommet):\n<div {...getRootProps()}>\n            <Box align=\"center\" pad=\"large\">\n              <Label size=\"small\">\n                <input {...getInputProps()} />\n                Drop an image or click to select a file to upload.\n              </Label>\n            </Box>\n          </div>\nIf I modify the above code like this, then I only get one upload dialog:\n<div {...getRootProps()}>\n            <input {...getInputProps()} />\n            <Box align=\"center\" pad=\"large\">\n              <Label size=\"small\">\n                Drop an image or click to select a file to upload.\n              </Label>\n            </Box>\n          </div>. ",
    "stipsan": "Would be neat with a new release as we're facing this issue after moving to react-router@v4 \ud83d\ude04 \n. Thanks!\n. ",
    "damon-kreft": "It's the only good quality component we can find with the promising longevity a project like ours requires (based off the repo popularity and your/contributors great active maintenance). Besides... with our small modifications, it is working almost ideally.\nYeah exactly; allowing users to hook into all onDrag* events as they would any element with the additional ability to disable react-dropzone's default behaviours (essentially the same as event.preventDefault() for native browser behaviour).\nI appreciate your willingness to allow the extensibility. Expressing this makes contributing a lot easier without worrying the PR and work you've done will just sit there for a lifetime (which happens a lot).\n. ",
    "akinnee-gl": "Yes, the main issue is that if you drag a link or image from elsewhere on the page over the dropzone, the dragover class is still added, which is confusing to the user.\n. ",
    "jochenberger": "And probably, onDrop should not be called with an empty files array in that case.\n. As of https://github.com/okonet/react-dropzone/pull/332/commits/76abf268a259b8a8d1ca8bb8dd4bffb42160a15d, you have to disablePreview or you'll get the TypeError mentioned in #162.. I'd rather fix the underlying issue. Can't we just check if file.kind === 'file'? See https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind. react-dropzone works with 15.5 alright, it just causes some warnings.. See  #405. See https://www.npmjs.com/package/prop-types#compatibility. The relevant change is not in 3.12.3 AFAICT.. See https://www.npmjs.com/package/prop-types#how-to-depend-on-this-package. ",
    "ps-aux": "Any news on this ? Facing the same problem.. ",
    "Mangatt": "Any progress on that? I'm using Dropzone with React DnD and it causes some trouble.\njavascript\nFailed to generate preview for file DataTransferItem {kind: \"string\", type: \"application/json\"} \nTypeError: Failed to execute 'createObjectURL' on 'URL': No function was found that matched the signature provided.\nMy accept attribute is even set to image/*, but that is ignored for some reason in this case. . ",
    "omryr": "is there any solution to this? I cant find a way to prevent dropping DOM elements into the dropzone. ",
    "tention": "The solution on top does not seems to work on Firefox.\nThere is one additional field available in Firefox event for onDragEnter, mozSourceNode. It would be null if it's dragged from file instead of element on the page.\nAdding (dt.mozSourceNode === null) to the IF statement makes it works for Firefox.\nonDragEnter={(event) => {\n          const dt = event.dataTransfer;\n          console.log(dt);\n          if (!(\n            (dt.types &&\n              (dt.types.indexOf ? dt.types.indexOf('Files') !== -1 : dt.types.contains('Files'))) ||\n            (dt.mozSourceNode === null)\n          )) {\n            this.setState({ isDragActive: false });\n          }\nI'm getting the following in Chrome/Opera after dropping a page element on the dropzone too. Anyone manage to find a fix?\nFailed to generate preview for file DataTransferItem {kind: \"string\", type: \"application/json\"} \nTypeError: Failed to execute 'createObjectURL' on 'URL': No function was found that matched the signature provided.\nEDITED: Since I don't need the preview generation, having disablePreview removed the above error for me.\nWould be great if there's a permanent fix for this.. ",
    "joaoreynolds": "First off, this is such an awesome library.\nSo I found a pretty easy way to replicate this same error message without having other draggable dom elements on the page. I can get the same error to occur if I drag a chrome shortcut button onto the dropzone as well. I'm not sure how my users are getting this error to happen, but every once-in-a-while Sentry reports the error. I can only guess users are dragging random things onto the dropzone that should be ignored.\nThe good news is the state isDragActive recovers back to false when that happens (where before it would say active).. ",
    "rasco": "Well one part of the problem is this:\nThe preview creation (window.URL.createObjectURL(file)) is done on all files, regardless whether they are accepted or not. \nShouldn't previews only be created for accepted files? . ",
    "josh-stevens": "So I have a use case where I actually want to accept drag and dropped images from the page itself. I'll be investigating whether or not the object dragged from the page itself can be used with this library since it's not coming from the user's filesystem. So I'm glad there was never a PR to fully prevent this. ",
    "SourceCipher": "The only solution for now is to disable disablePreview and displaying your images in base64. @okonet I viewed the pull you linked but I have no idea how do I configure to avoid this error? . Calling component with <Dropzone.default></Dropzone.default> instead of <Dropzone></Dropzone> solved my problem, but I am not confident about this tho. ",
    "ashok-sc": "So is the conclusion that there's no easy way to disable Drag 'n drop on the Dropzone component? I really need this for my use case... This is weird. I had the opposite problem. When I used import * as Dropzone from 'react-dropzone'; I got that runtime error. Using import Dropzone from 'react-dropzone'; fixes it though.\n. This is coming to bite us now as our production environment because our prod env doesn't like the import * as Dropzone from 'react-dropzone'; import. The way we're solving this is by removing all the type definitions. @asaarnak you're right that the type definitions are broken. Please someone help.. The work around is to get rid of the type definitions and use import Dropzone from 'react-dropzone';. This is how we got it to work for now. It's not ideal.. This seems related. When I import Dropzone as stated above:\n@benbayard :\n\nA note: in TS you should not import React-dropzone with * as imports. This module is exported as common JS in its source. You should use import Dropzone = require('react-dropzone);\n\nI get the following error in at runtime:\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object.\nChanging the import to import Dropzone from 'react-dropzone'; fixes the runtime error, but now I get the compile error: \nTS1192: Module '\"/Users/ashokraju/src/sc/caas-app/node_modules/@types/react-dropzone/index\"' has no default export.\nWhat's happening here?. Thanks @FlayaN ! Will give that a shot.. Thanks @Lexanius . I'm going tor evert to 4.1.3 for now. Hopefully this issue is resolved soon for latest version.. ",
    "codewithsk": "@josh-stevens Any luck with your use case? . ",
    "yuri-sakharov": "I also solve this problem as proposed @akinnee-gl\nonDragOver = e => {\n        const types = e.dataTransfer.types;\n        const hasFilesInEvent =  types && types.length === 1 && types[0] === 'Files';;\n        if (!hasFilesInEvent) {\n            return;\n        }\n        this.setState({ isDragActive: true });\n    };\ndon't miss\n```\nonDrop={files => {\n    if ( files.length === 0 ) {\n        return;\n    }\n// handle files dropped here\n\n}}\n`\nalso this solution relevant for `onDragEnter`. Hi,\nwhen will be merge or will be better solution?. simpler to add `if (!files || !files.length)` add remove this `if (this.fileInputEl != null) {`. for me more readable this version\nif (this.isFileDialogActive) {\n                setTimeout(() => {\n                    const { files } = this.fileInputEl;\n                if (!files || !files.length) {\n                    this.isFileDialogActive = false;\n                }\n                if (typeof onFileDialogCancel === 'function') {\n                    onFileDialogCancel();\n                }\n            }, 300);\n        }\n\n``. no need one more if and what about case withfiles undefined`. ",
    "Rc85": "Checking if files.length in onDrop worked for me. Why do we need the check the onDragOver() event?. ",
    "afilp": "I think that the \"Support for image URL dropping\" (https://github.com/react-dropzone/react-dropzone/issues/349) would be very powerful! You mentioned there that we should follow that enhancement in this issue.\nIs it relevant though? This issue is about \"preventing\" an image URL from being dropped-in, while we would like to have the opposite: Allow the appearance of an image that comes from a URL being dragged.\nShould this be a different issue?\nThanks!. ",
    "ganapativs": "+1\n. ",
    "andschdk": "I guess it could be related but not sure.\nFound a pen and quickly modified it to use accept=\"text/csv\".\nCheck it out here: http://codepen.io/anon/pen/NbGvMw (no react, no dropzone)\nIn IE text/csv does not force you to choose a CSV file. I guess it isn't a valid MIME type. It is supported in decent browsers though.\nIt looks like it is something with this module \ud83d\ude15 \n. ",
    "Kitanotori": "It's a platform issue. Same problem with Firefox and Chrome on Windows. react-dropbox needs to do some corrections to the file types provided by browser. Related to https://github.com/okonet/react-dropzone/issues/276\n. ",
    "abury": "I'm getting this as well. It's happening with every browser on Windows when trying to select a CSV file.\nRemoving the accept prop fixed the issue. ",
    "kandros": "LGTM. > For example, when trying to drop several files, each of this files can be rejected with a different reason. Question: what reason will be passed in this case\nas shown here https://github.com/okonet/react-dropzone/pull/257/files#diff-1fdf421c05c1140f6d71444ea2b27638R130 the reason of failure gets injected to the file itself\nso in this.props.onDropRejected.call(this, rejectedFiles, e) the rejected files array have reasons \n. I don't know, I believe simple validation like file-size and file-type is better as it is now, handled by the library and based on props, for more complex validation you can already handle all of them in the onDrop function, where you have access to the files array already.\nThe example is not actually exposing the failure reasons.\nwhat showed in #257 adding the failure reasons to the file reference, and export a reason lookup-table (to match rejected files with a filter function) looks more intuitive \n   . oh I see now, I tried to implement something and totally came up with the same solution, basically onValidate will pass [ acceptedFiles, rejectedFiles ] to the current implementation of onDrop right?. Looks good to me, passing  [ acceptedFiles, rejectedFiles ] instead of a list of validation functions  makes it easier to handle errors or a per file basis instead of relying on the library\nwhat about array of errors to each rejectedFile? so that we can handle multiple errors on a single file and push our internally\nwe could validate internally  minSize,maxSize and accept, if props are present, would really like to avoid doing this manually\n. Comments made me rethink about the validations, even simpler one should be done by the user, all we need is a function before onDrop that passes files to onDrop, without distinguishing accepted and rejected anymore. ",
    "NekR": "@bmueller-sykes does try...catch around that line prevents the error? I suppose it should.\n. ",
    "meff34": "Hello!\nWatched for this PR in last four days, and it was merged! Hoorray!\nTell me, please, when this PR is gonna be included in release? \nIt's so hot question for my project.\n. ",
    "alexgzhou": "i can change the file type in the prompt files select window on purpose, although normal users would not do that, anyway it might not be a problem at all in real use cases.\n. \nit is possible, but you can leave it, since barely no one would change the file select filter in real use case.\n. ",
    "sandervanhooft": "Hi @mitchconquer,\nI saw your repost at stack overflow, with no answers.\nDid you solve this issue? If so, how?\nI'm experiencing exactly the same. . @okonet Thanks for that suggestion.\nThat parameter returns a Proxy object (logged to console). Any clue how to process that into a FileList object?. ",
    "ghoshnirmalya": "I'm also experiencing this error.. ",
    "mitchconquer": "Hi, @ghoshnirmalya and @sandervanhooft I posted my findings on Stack Overflow here. I hope they help you!. ",
    "acaceres-convey": "Hey guys I have a question similar to this one...\nwhen i drop a file i don't get the file path...\nall i get is \nlastModified: 1471436812784\nlastModifiedDate: Wed Aug 17 2016 07:26:52 GMT-0500 (Central Daylight Time)\nname: \"AATDB\"\npreview: \"blob:http://localhost:3000/6b3e96a2-93f9-4107-b539-e244104d2acf\"\nsize: 4840\ntype: \"\"\nwebkitRelativePath: \"\". ",
    "aziaziazi": "@acaceres-convey from https://react-dropzone.js.org/:\n\nWarning: On most recent browsers versions, the files given by onDrop won't have properties path or fullPath, see this SO question and this issue. If you want to access file content you have to use the FileReader API.. \n",
    "xswordsx": "Working with 3.7.2 - confirmed. Thanks for the quick fix.\n. ",
    "danieloliveira079": "As far as I can see there is an issue related to babel-plugin-add-module-exports.\nPossible it is not been detected due to Travis CI is using cached node_modules folder.\nRunning npm run build I got this error saying that add-module-exports is missing.\nAfter installing it manually I managed to build the project and got the dist folder correctly.\n. ",
    "imontiel": "So there is no fix? I'm getting this on 49.0.1 as well.\n. I think the problem is the focus event doesn't actually work on document.body consistently. It is a special global event that should be attached to the window.\nIE supports focus on almost every element, while FF and Chrome only support it for form elements and the window.\nI'll submit a PR when I get a chance to verify that it actually works.. ",
    "georgevs": "Hi, I saw the same problem and after some digging can confirm it looks like a Firefox for Windows issue.  I updated to the latest Firefox at the moment (version 53.0.3) and tried a simple test: https://jsfiddle.net/Georgevs/9qu263z4/\nDrag something in and out the drop target and you can see that the \"dragleave\" event is very inconsistent when crossing the right border - sometimes is fires, most of the times it does not.  The issue is reproducible 100% in Firefox 53.0.3 on Windows 10/8, and NOT reproducible on Firefox on macOS Sierra.  The issue is not reproducible with Chrome, IE 11, Edge, or Safari.\nMy speculation will be that because of this issue the Dropzone callback function is not called promptly which causes the react components to not update.\nIt has been quite a lot of time since the last post here.. did Firefox confirmed the issue?. Is dragcancel an event? I don't see it in the DnD API, nor react-dropzone API.\nI managed to bail out from the stuck Dropzone by intercepting dragstart and dragend on the document and managing an internal this.state.isDragActive. This extra state is combined with the Dropzone callback own parameter isDragActive to compensate for the missing call on dragleave in Firefox Windows. The solution is not ideal as this only happens when the user releases the mouse compared to when it leaves the Dropzone but it seems to work... for now :). Here is a the best candidate for a solution I could figure out... Not sure if it makes sense to be integrated in react-dropzone (..maybe conditionally until Firefox fix their issue)\n```\nimport { bindAll } from 'lodash';\nimport React, { PropTypes } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Overlay from './Overlay';   // whatever\nexport default class FileDropZone extends React.Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  isDragActive: false,\n  isDropActive: false,\n};\nthis.dropTargets = [];\nthis.timer = null;\n\nbindAll(this, [\n  'handleDragEnd',\n  'handleDragEnter',\n  'handleDragLeave',\n  'handleDragOver',\n  'handleDragStart',\n  'handleDrop',\n  'handleTimerTick',\n]);\n\n}\ncomponentDidMount() {\n    // Firefox on Windows exhibits a defect (propbably regression)\n    // where the 'dragleave' event is often not emitted if the mouse exits the browser window\n    // straight from the drop zone. Try it on https://jsfiddle.net/qas495cz/\n    // This causes the dropzone to appear stuck since the callback is never called with isDragActive set to false.\n    // An issue had already been filed: https://github.com/okonet/react-dropzone/issues/265\n    // This workaround adds an additional state to bail out from the stuck drop zone when the user releases the mouse.\n// drag source events...\ndocument.addEventListener('dragstart', this.handleDragStart, false);\ndocument.addEventListener('dragend', this.handleDragEnd, false);\n\n// drop target events...\ndocument.addEventListener('dragenter', this.handleDragEnter, false);\ndocument.addEventListener('dragover', this.handleDragOver, false);\ndocument.addEventListener('dragleave', this.handleDragLeave, false);  // this is the flaky event!\ndocument.addEventListener('drop', this.handleDrop, false);\n\n}\ncomponentWillUnmount() {\n    document.removeEventListener('dragstart', this.handleDragStart);\n    document.removeEventListener('dragend', this.handleDragEnd);\n    document.removeEventListener('dragenter', this.handleDragEnter);\n    document.removeEventListener('dragover', this.handleDragOver);\n    document.removeEventListener('dragleave', this.handleDragLeave);\n    document.removeEventListener('drop', this.handleDrop);\n// release any references/resources held (unlikely)\nif (this.timer !== null) {\n  clearInterval(this.timer);\n}\nthis.dropTargets.length = 0;\n\n}\nhandleDragStart() {\n    this.setState({ isDragActive: true });\n  }\nhandleDragEnd() {\n    this.setState({ isDragActive: false });\n  }\nhandleDragEnter(event) {\n    // occasionally as the mouse crosses elements on the page\n    // the new target drag enter comes before the old target drag leave\n    // which can be wrongly interpreted as no drop target\n    // unless drop targets are maintained as a set\n    this.dropTargets = this.dropTargets.filter((target) => target !== event.target).concat([event.target]);\n    if (!this.state.isDropActive) {\n      this.setState({ isDropActive: true });\n      this.timer = setInterval(this.handleTimerTick, 1000);\n    }\n  }\nhandleTimerTick() {\n    if (this.timeout <= Date.now()) {\n      this.resetDropActive();\n    }\n  }\nresetDropActive() {\n    if (this.timer !== null) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n    this.dropTargets = [];\n    this.setState({ isDropActive: false });\n  }\nhandleDragOver(event) {\n    // dragover is fired every few hundred milliseconds while a drop is active\n    // if dragover is NOT received for about a second, we may consider dragleave was lost\n    this.timeout = Date.now() + 1000;\n  }\nhandleDragLeave(event) {\n    this.dropTargets = this.dropTargets.filter((target) => target !== event.target);\n    const isDropActive = (this.dropTargets.length > 0);\n    if (this.state.isDropActive && !isDropActive) {\n      this.resetDropActive();\n    }\n  }\nhandleDrop() {\n    this.resetDropActive();\n  }\nrender() {\n    return (\n      \n        {({ isDragActive }) => {\n          return (\n            \n              {this.props.children}\n            \n          );\n        }}\n      \n    );\n  }\n}\nFileDropZone.propTypes = {\n  className: PropTypes.string.isRequired,\n  children: PropTypes.any.isRequired,\n  uploadFiles: PropTypes.func.isRequired,\n};\nFileDropZone.defalultProps = {\n  uploadFiles: () => {},\n};\n```. ",
    "artsx": "Thank you for your reply, \nCan you give me any example pls ? \nI've do :  \nonDragEnter(){\n      return(\n        <div className=\"dropZone\">\n          <div className=\"dropZoneContent\">\n            <h3>DRAG & DROP</h3>\n            <p>import your file</p>\n          </div>\n        </div>\n      );\n    }\nBut I dont know how bind this function for to have a render with div\n. It's ok, I've found my misstake -> i've forget .bind(this)\nNo thank you, I shouldn't pay for help while there are sites like StackOverflow or people to help debug.\nThank you for this wonderful plugin anyway!\n. ",
    "DanielRuf": "Right, saw it afterwards but at least it is not consistent to only set the name when we also have to set the id because this is used for labels. I hope you understand my point of view.\nBut the inputProps way is ok for us.\n. Right. \nUnfortunately inputProps was not mentioned in the readme.\nIs there some convention to use inputProps for these values or where does this come from? Because many React components implement inputProps but I find no general documentation about inputProps in React.\n. ",
    "SengitU": "Please see #411 for this issue.. ",
    "Kepro": "this should be only problem with Windows... i don't think @okonet  need change something, or just add some documentation for watch about that :) . ",
    "erinknight242": "I am seeing this issue as well; I have mine set to accept: \"text/csv, application/vnd.ms-excel\", which works fine for drag/drop, but when I open the file browser, it is preset to the type \"Microsoft Excel 97-2003 Worksheet\", which shows no matching items in the selected folder (that does have csv items), making the user change the file type to \"All Files\" to see the available items. Would love to avoid this extra step, and have it automatically be on \"All Files\", is that possible?. ",
    "philippfrank": "@okonet I'd be happy to enhance the docs about that. What are the docs. README? gh-pages branch? . It turns out that IE Edge (WIN10, fresh VM from https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/) won't set a mime type at all. file.type is just an empty string and dropped files are rejected. \naccepts=\"text/*,\" (note the comma) is a workaround but it would be nice if one could provide a custom function which can be used to perform additional checks, e.g. whether the file extension is csv.. @okonet I updated the comment. ",
    "flybayer": "I'm seeing the same thing as @philippfrank in Electron (Chrome) on Win10 VM. No MIME type at all \ud83d\ude22 . ",
    "rodrigc": "@okonet just for my knowledge, how does drop zone determine the mime type?  Is it calling some OS specific function?\nThanks.. I did some debugging using the Javascript debugger in the Chrome browser, and learned the following.   When doing a file upload, okonet/react-dropzone gets an event from the browser, which gives it a File object:  https://developer.mozilla.org/en-US/docs/Web/API/File\nThe File.type member of this object should be populated, but in some cases on Windows, it is empty.\nIt is the responsibility of the browser to populate this value, and okonet/react-dropzone just takes whatever the browser gives it.   The question is why is this behavior differing on Windows?\nI would need to look in the browser's source code to verify how this works.\nThis StackOverflow article has a good description for how browsers on Windows determine\nthe mime type:\nhttps://stackoverflow.com/questions/1201945/how-is-mime-type-of-an-uploaded-file-determined-by-browser\nOn Windows, there is a combination of looking up a hardcoded list,\nand also looking in the registry to determine the mime type..  @srikanth-pmap I bet you don't have Microsoft Word installed on your system, which is why uploading a file with .doc or .docx extension returned an empty value for File.type.\nI would suggest that you look in the registry for HKEY_CLASSES_ROOT.doc and HKEY_CLASSES_ROOT.docx, and see if there is a value for Content Type.\nIf you are able, install Microsoft Word, and then look at those registry values again.. ",
    "irae": "@flybayer Electron does not count as Chrome. They have same rendering engine (roughly, but this kind of rich information with OS interactions is precisely the portions Electron don't re-use from Chromium). Electron is a very active project, I bet you can file a bug for them to take a look, or even file a PR if you have the time to fix it yourself.. ",
    "readeral": "Glad to see you're on this - bit of a bummer to see it's at a roadblock.\nSome cursory reading indicates this will continue to be a pain long term, due to what MIME types are typically used for: \"Browsers often use the MIME-type to determine what default action to do when a resource is fetched.\" and Windows will always want to drive toward their own applications. I think the best we can do is develop a list of all valid MIME entries for each platform, maybe a whole new project that can be an optional dependency in react-dropzone for smoothing over these issues. I agree that patching browser/platform issues should be kept out of this library.. ",
    "Ondoher": "There needs to be a solution to this, maybe a generic wildcard that will accept anything, or a file extension check. This just does not work on Windows with .json files. \nMy only solution may be to rewrite an entire chunk of functionality, or fork the repository.. Let me try this another way. You have written software that fails to work properly on a common platform. This is something that you should care about and try to fix. Or at least provide the tools to put the caller in control of validation.. I understand open source, and I was not trying to be disrespectful, but when your response to a pretty fundamental problem appears to be, \"then why don't you fix it,\" that response is not really helpful. \nI had already looked at your docs, and here is what it says:\n\"Mime type determination is not reliable accross platforms. CSV files, for example, are reported as text/plain under macOS but as application/vnd.ms-excel under Windows. In some cases there might not be a mime type set at all.\"\nAn acknowledgement of the problem is nice, but there is nothing there that tells me how to solve it. \nNow, if I understand what you're saying, rather than responding to onDropAccepted, I instead respond to onDrop, then I can look at both the accepted and rejected file lists, and do my own validation instead, that's a viable solution for me. Not ideal, but viable.\nThank you. Yes, windows is just plain messed up in this respect. It does a poor job matching file extensions to mime types. You can edit the registry to make it work, but this is obviously not a practical solution. To solve my problem I just stopped using that event to validate the file type.. ",
    "RXminuS": "@Ondoher The point of Open Source is to avoid making \"Feature Requests\" and always make a \"Pull Request\". Even if it's a crappy implementation, or not finished...or even just inline comments with TODO items in places where you think a fix needs to be added.\nIt's much easier as a maintainer to comment on the seed of a solution and you'll get a much more positive response. @okonet (and others) have done a fantastic job providing a piece of open source code that solves a lot of headaches for a lot of people and your tone (even though probably not intentionally disrespectful) can really demoralise a maintainer. \nBeing a maintainer doesn't mean that you're a Q&A and code-for-free service. So he's not responsible for telling you how to fix it...WE are.\nSorry for hijacking the thread like this but it just really upset me too.. ",
    "leonardopavanello": "Hello, this is closed but I have a similar issue than @Ondoher. \nMaybe the Dropzone could accept a new prop to allow a custom acceptFile function \"acceptFileValidator\" or \"acceptFileChecker\" \n. ",
    "Nithendra": "HI, i am trying to upload \".tab\" file but it is not allowing me. . can i upload some custom file extension if yes please share you knowledge  . ",
    "export-mike": "Yeah I now have a basic check for the extension.\nPseudo code:\n```js\n< ... accept=\"\" onDrop={file => {\n if(!file.name.endsWith('.csv')) { this.setState({ rejected: true }) }\n // doSomething();\n} >\n```. ",
    "soundwire": "Thanks @okonet, \nJust to clarify that my objective is to collect the data from a large form (including multiple dropzone fields) when it submits.\nI am not looking to access the DOM in order to perform something, \nbut rather to have a nicely organized object with all the data captured from each field in the form. \n. From the examples i've seen the dropped files are handled under a single property inside state\ni.e. this.state = { files: [] }. \nI didn't find an example of having this.state = { dropzone1: [], dropzone2: [], etc. \n. ",
    "codecov-io": "Current coverage is 84.55% (diff: 0.00%)\n\nMerging #294 into master will not change coverage\n\ndiff\n@@             master       #294   diff @@\n==========================================\n  Files             2          2          \n  Lines           123        123          \n  Methods          19         19          \n  Messages          0          0          \n  Branches         29         29          \n==========================================\n  Hits            104        104          \n  Misses           19         19          \n  Partials          0          0\n\nPowered by Codecov. Last update b2a4486...22bca77. ## Current coverage is 84.55% (diff: 100%)\nNo coverage report found for master at 62645e7.\nPowered by Codecov. Last update 62645e7...f3357c0. ## Current coverage is 84.55% (diff: 100%)\nMerging #305 into master will not change coverage\n\ndiff\n@@             master       #305   diff @@\n==========================================\n  Files             2          2          \n  Lines           123        123          \n  Methods          19         19          \n  Messages          0          0          \n  Branches         29         29          \n==========================================\n  Hits            104        104          \n  Misses           19         19          \n  Partials          0          0\n\nPowered by Codecov. Last update 95d6323...87dd929. ## Current coverage is 84.55% (diff: 100%)\nMerging #306 into master will not change coverage\n\ndiff\n@@             master       #306   diff @@\n==========================================\n  Files             2          2          \n  Lines           123        123          \n  Methods          19         19          \n  Messages          0          0          \n  Branches         29         29          \n==========================================\n  Hits            104        104          \n  Misses           19         19          \n  Partials          0          0\n\nPowered by Codecov. Last update 95d6323...8e9c18b. ## Current coverage is 95.45% (diff: 100%)\nMerging #309 into master will increase coverage by 10.90%\n\ndiff\n@@             master       #309   diff @@\n==========================================\n  Files             2          3     +1   \n  Lines           123        132     +9   \n  Methods          19         20     +1   \n  Messages          0          0          \n  Branches         29         31     +2   \n==========================================\n+ Hits            104        126    +22   \n+ Misses           19          6    -13   \n  Partials          0          0\n\nPowered by Codecov. Last update 5510a45...fa3a5a9. ## Current coverage is 84.55% (diff: 100%)\nMerging #311 into master will not change coverage\n\ndiff\n@@             master       #311   diff @@\n==========================================\n  Files             2          2          \n  Lines           123        123          \n  Methods          19         19          \n  Messages          0          0          \n  Branches         29         29          \n==========================================\n  Hits            104        104          \n  Misses           19         19          \n  Partials          0          0\n\nPowered by Codecov. Last update 57be449...b0d918c. ## Current coverage is 95.58% (diff: 100%)\nMerging #312 into master will increase coverage by 0.13%\n\ndiff\n@@             master       #312   diff @@\n==========================================\n  Files             3          3          \n  Lines           132        136     +4   \n  Methods          20         20          \n  Messages          0          0          \n  Branches         31         32     +1   \n==========================================\n+ Hits            126        130     +4   \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update 5f41589...ef3b56e. # Codecov Report\nMerging #313 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #313   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.33% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a1fd449...6324ecd. Read the comment docs.\n. ## Current coverage is 95.58% (diff: 100%)\nMerging #322 into master will not change coverage\n\ndiff\n@@             master       #322   diff @@\n==========================================\n  Files             3          3          \n  Lines           136        136          \n  Methods          20         20          \n  Messages          0          0          \n  Branches         32         32          \n==========================================\n  Hits            130        130          \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update 4d40ce5...a992a9d. ## Current coverage is 95.65% (diff: 100%)\nMerging #326 into master will increase coverage by 0.06%\n\ndiff\n@@             master       #326   diff @@\n==========================================\n  Files             3          3          \n  Lines           136        138     +2   \n  Methods          20         20          \n  Messages          0          0          \n  Branches         32         33     +1   \n==========================================\n+ Hits            130        132     +2   \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update ee86ca9...596bc96. ## Current coverage is 95.65% (diff: 100%)\nMerging #327 into master will not change coverage\n\ndiff\n@@             master       #327   diff @@\n==========================================\n  Files             3          3          \n  Lines           138        138          \n  Methods          20         20          \n  Messages          0          0          \n  Branches         33         33          \n==========================================\n  Hits            132        132          \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update 9bfaf12...7fd339a. ## Current coverage is 95.65% (diff: 100%)\nMerging #329 into master will not change coverage\n\ndiff\n@@             master       #329   diff @@\n==========================================\n  Files             3          3          \n  Lines           138        138          \n  Methods          20         20          \n  Messages          0          0          \n  Branches         33         33          \n==========================================\n  Hits            132        132          \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update 86fe2c5...aea40a9. ## Current coverage is 95.65% (diff: 100%)\nMerging #332 into master will not change coverage\n\ndiff\n@@             master       #332   diff @@\n==========================================\n  Files             3          3          \n  Lines           138        138          \n  Methods          20         20          \n  Messages          0          0          \n  Branches         33         33          \n==========================================\n  Hits            132        132          \n  Misses            6          6          \n  Partials          0          0\n\nPowered by Codecov. Last update 61261b0...76abf26. # Codecov Report\nMerging #338 into master will decrease coverage by -51.91%.\nThe diff coverage is 33.33%.\n\n```diff\n@@             Coverage Diff             @@\nmaster     #338       +/-\n===========================================\n- Coverage   95.65%   43.75%   -51.91%   \n===========================================\n  Files           3        3             \n  Lines         138      144        +6   \n  Branches       33       35        +2   \n===========================================\n- Hits          132       63       -69   \n- Misses          6       81       +75\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 38.28% <33.33%> (-56.81%) | :x: |\n| testSetup.js | 33.33% <\u00f8> (-66.67%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0c206c...7e9a169. Read the comment docs.. # Codecov Report\nMerging #340 into master will increase coverage by 0.15%.\n\n```diff\n@@            Coverage Diff            @@\nmaster    #340      +/-\n=========================================\n+ Coverage   95.65%   95.8%   +0.15%   \n=========================================\n  Files           3       3            \n  Lines         138     143       +5   \n  Branches       33      34       +1   \n=========================================\n+ Hits          132     137       +5   \n  Misses          6       6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| testSetup.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| src/index.js | 95.16% <100%> (+0.07%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0c206c...9a46d7c. Read the comment docs.. # Codecov Report\nMerging #341 into master will not impact coverage.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #341   +/-\n=======================================\n  Coverage   95.65%   95.65%         \n=======================================\n  Files           3        3         \n  Lines         138      138         \n  Branches       33       33         \n=======================================\n  Hits          132      132         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0c206c...0a04b43. Read the comment docs.. # Codecov Report\nMerging #342 into master will increase coverage by 0.12%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #342      +/-\n==========================================\n+ Coverage   95.65%   95.77%   +0.12%   \n==========================================\n  Files           3        3            \n  Lines         138      142       +4   \n  Branches       33       34       +1   \n==========================================\n+ Hits          132      136       +4   \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 95.23% <100%> (+0.15%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 457bff1...f43403d. Read the comment docs.. # Codecov Report\nMerging #344 into master will decrease coverage by -0.69%.\nThe diff coverage is 95.74%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #344      +/-\n==========================================\n- Coverage   95.65%   94.96%   -0.69%   \n==========================================\n  Files           3        3            \n  Lines         138      139       +1   \n  Branches       33       35       +2   \n==========================================\n  Hits          132      132            \n- Misses          6        7       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/getDataTransferItems.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| src/index.js | 94.3% <95%> (-0.78%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 457bff1...7ab772b. Read the comment docs.. # Codecov Report\nMerging #346 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #346   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1b08a4f...0fc9e6d. Read the comment docs.\n. # Codecov Report\nMerging #347 into styleguide will not change coverage.\n\n```diff\n@@             Coverage Diff             @@\nstyleguide     #347   +/-\n===========================================\n  Coverage       95.65%   95.65%         \n===========================================\n  Files               3        3         \n  Lines             138      138         \n  Branches           33       33         \n===========================================\n  Hits              132      132         \n  Misses              6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 95.08% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32dc34b...33e8199. Read the comment docs.. # Codecov Report\nMerging #359 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #359   +/-\n=======================================\n  Coverage   95.77%   95.77%         \n=======================================\n  Files           3        3         \n  Lines         142      142         \n  Branches       34       34         \n=======================================\n  Hits          136      136         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6179110...c182345. Read the comment docs.. # Codecov Report\nMerging #364 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #364   +/-\n=======================================\n  Coverage   95.77%   95.77%         \n=======================================\n  Files           3        3         \n  Lines         142      142         \n  Branches       34       34         \n=======================================\n  Hits          136      136         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 95.23% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6179110...518360d. Read the comment docs.. # Codecov Report\nMerging #473 into master will increase coverage by 0.58%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #473      +/-\n==========================================\n+ Coverage   97.28%   97.87%   +0.58%   \n==========================================\n  Files           3        3            \n  Lines         184      282      +98   \n  Branches       45       81      +36   \n==========================================\n+ Hits          179      276      +97   \n- Misses          5        6       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.75% <100%> (+0.71%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update acfa1b8...3ed4a15. Read the comment docs.\n. # Codecov Report\nMerging #482 into master will not change coverage.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #482   +/-\n======================================\n  Coverage    96.9%   96.9%         \n======================================\n  Files           3       3         \n  Lines         194     194         \n  Branches       48      48         \n======================================\n  Hits          188     188         \n  Misses          6       6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 96.64% <66.66%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3718610...2f88024. Read the comment docs.\n. \n",
    "aprilandjan": "This is still a problem because overriding onfocus cause other problems (for example, node-webkit window focus event rely on document onfocus attribute so when using React-Dropzone my previous listener bind for nw is lost). . ",
    "kof": "Probably out of scope for the dropzone.. sure\n. \ud83d\udc4d . ",
    "jpdevries": "Could maybe make the dropzones focusable by keyboard and only the currently focused one responds to the event. Not sure if it is relevant to this PR but I was looking for an option to tell Dropzone not to add any opinionated inline style. \nThis worked\njs\n<Dropzone onDrop={this.onDrop} style={{}}>\n   <p>YOLO</p>\n</Dropzone>. ",
    "dorsha": "Just noticed there is an existing PR for the same issue. Closed.. ",
    "vandiced": "This is closed but the only answer is \"You're passing a function that you own. Just make this function accept all needed parameters.\" - can you give a code sample? If I pass a parameter to my \"function that I own\" for the onDrop event it overwrites the 'files' parameter with my parameter and this is a no no..... ",
    "westlinkin": "Sorry, I found the solution, just set accept to audio/x-m4a, audio/* instead of audio/*, safari on mac can accept m4a files. ",
    "ewittle": "Never mind, I passed the received file object into a reader, and it works. Apparently ignorance on my part on how the HTML drag and drop interface functions. I got thrown off that there is nothing in the console.log output that appears to provide a way to read the file.. You would need to provide more details on what you're trying to do, what your code looks like, and what issues you're seeing.. ",
    "tarim": "Hi @ewittle ,\nI have same issue here,  I try to submit(blob parts only) via form(redux form). But, I cannot get it. can you help me please?\nThanks,\n. ",
    "MidnightP": "Looks like this is the same issue. However, there is no talk of Readers.. @ewittle I am attempting to read the dropped file with a FileReader before placing it in the redux store and sending it to the server. However, the events on the reader never trigger and I can't find out why not. Hope you can help.\n```javascript\nfile               // received in my onDrop handler of the react-dropzone component\nfile instanceof Blob === true\nfile instanceof File === true\nvar reader = new FileReader()\nreader.onLoad((e) => {\n    console.log(e)\n})\nreader.readAsText(file)\n```\nLooking at the documentation and many posts on stackoverflow, this should be right.\nThe reader indeed changes to { readyState: 1, result: \"\" } but does never continue to readyState 2 nor does it ever trigger any events. \n. ",
    "firaskrichi": "Yup makes sense! Thanks man. ",
    "greenkeeper[bot]": "Version 14.1.0 just got published.\nUpdate to this version instead \ud83d\ude80 \n. ## Version 15.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 15.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.3.0\nFeatures:\n\nadd extensions option to DllReferencePlugin\nadd warningsFilter to UglifyJsPlugin to hide warnings selectively\nadd extractComments to UglifyJsPlugin to move kept comments into separate file (i. e. LICENSE file)\nvalidate relative and absolute paths in configuration\nvalidate stats options\nallow to match on compiler (name in configuration) in rules\n\ni. e. allows to specify different rules for extract-text-webpack-plugin or html-webpack-plugin\n\n\nAllow to pass multiple entries via CLI\nPerformance improvements\nCommonsChunkPlugin give errors on incorrect options\nadd module.strictExportPresence to make missing export an error instead of warning\nCompiler emits watch-close event when the watcher is closed\nAllow additional compress options in UglifyJsPlugin\nempty chunk numbers are not flags in every chunk, this improves caching invalidation\n\nBugfixes:\n\nOccurrenceOrderPlugin now counts occurrences correctly\nFix cheap-source-maps when combined with ES Modules (lines were offset)\nWatcher now detects file deleting correctly\nResolve output path if relative output path is given via CLI\nHandle stack traces in errors correctly\nSome usages of System now generate valid code i. e. System.global\nDynamic property names are now parsed and can contain webpack stuff (i. e. imports)\nEmpty enviroment variables are now supported in the EnvironmentPlugin\n(Maybe) Fixes chunk loading in IE when script is cached\n\n\n\nCommits\nThe new version differs by 487 commits .\n\n46dc08e 2.3.0\n01c06de Merge pull request #4527 from webpack/bugfix/issue-4472\n23e1f7c install Promise early in chunk cache\n0c137cb Merge pull request #4521 from chicoxyzzy/patch-1\n98ea823 Merge pull request #4503 from eirikurn/empty-env-variables\n0058a2e Use ts-loader instead of deprecated typescript-loader\n3e787ea Merge pull request #4502 from webpack/TheLarkInn-patch-1\n335ce5f Merge pull request #4471 from SteveMieskoski/increase-coverage-for-AutomaticPrefetchPlugin\nfadafb2 Merge pull request #4504 from timse/do-not-merge-empty-chunks\na9972a3 Merge pull request #4505 from rouzbeh84/hotfix/hotlinking-examples-index\na5272e8 hotlink examples in readme\nd67e125 fix up tests\nd7ae9ad do not incorporate chunks without modules\n003cef9 EnvironmentPlugin: Support empty env variables\n7db849d Update README.md\n\nThere are 250 commits in total. See the full diff.\n\n. ## Version 2.3.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 9 commits .\n\n4b9b660 2.3.1\nd1cf8b4 Merge pull request #4538 from webpack/feature/error-emit-warning\nec46a0d Merge pull request #4539 from mp4096/master\n18566a1 Fixed link to the Traceur repo in README\n751fd9b add stack to non-Error error emitted\nb1acb2e Merge pull request #4537 from webpack/bugfix/newline-validation\n49ccf44 Merge pull request #4536 from webpack/bugfix/issue-4532\n10c44e5 fix extra newline in validation\n915c150 fix bug in MinChunkSizePlugin\n\nSee the full diff.\n\n. ## Version 2.3.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.3.2\nBugfixes:\n\nFix performance issue with cheap-source-maps\nFix a line offset issue with cheap-source-maps\nAllow lowercased drive letters as absolute paths (not recommended)\nImprove some error reporting\n\n\n\nCommits\nThe new version differs by 9 commits .\n\n6b209b1 2.3.2\n88f2833 Merge pull request #4567 from webpack/bugfix/cheap-source-map\n3fca75e Merge pull request #4565 from webpack/dx/error-description-output-path\nc226077 update webpack-sources dependency to fix a bug\n2fe82af Suggest course of action\n56d09ab Merge pull request #4533 from michael-ciniawsky/schema\nb5451ef Merge pull request #4564 from webpack/bugfix/cheap-source-map\n22c771f update webpack-sources dependency to avoid performance issue\nc390700 fix(schema/absolutePaths): make absolute paths case insensitive\n\nSee the full diff.\n\n. ## Version 2.3.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.3.3\nBugfixes:\n\nfix progress in multi compiler\n\n\n\nCommits\nThe new version differs by 2 commits .\n\nba24c1b 2.3.3\n956f618 Fix ProgressPlugin for multi compiler caused by ES6 refactoring\n\nSee the full diff.\n\n. ## Version 2.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.4.0\nHighlighted Features:\nimport() now allows to configure a chunk name\n \nrequire.ensure has a error callback\nrequire.ensure([], () => {\n    require(\"a\");\n}, err => {\n    console.error(\"We failed to load chunk: \" + err);\n}, \"chunk-name\");\nFeatures:\n\nupdate to acorn 5\nresolve context is provided to resolver\nadd warningsFilter to stats options to filter warnings\nadd __webpack_chunkname__ to ExtendedAPIPlugin\nsupport string chunk ids\nadd NamedChunksPlugin which allows to set chunk id, i. e. to chunk name\nallow to provided different watch options for multiple compilations\nadd error handler callback to require.ensure\nadd chunk name option for import()\n\nBugfixes:\n\nmain flag for HMR is set correctly\nignored modules are now context-agnositic\nrecorded paths are now platform-agnositic\nfix for local AMD modules which wrap commonjs\nerros now print more detailed message when logged\nfix missing SourceMaps for non-entry chunks after rebuild\nvariables now hoist in scope\n\n\n\nCommits\nThe new version differs by 252 commits .\n\n0cbd8fd 2.4.0\nab22702 Merge pull request #4507 from ts-webpack/refactor/clean-code\ne787452 Merge pull request #4700 from webpack/bug/future-var-declaration\n98153f5 Merge pull request #4706 from webpack/test/parser-coverage\n52f2daf add test cases and fix a bug\ne4b8833 improve code coverage\n3afe67d add parser prewalking to capture scope\n0990915 spacing\nd8a8bd3 deprecate string option instead of removing it\ndbc40e8 Merge pull request #4698 from simon04/examples-source-map\n0ef0581 Add example demonstrating all source-map variants\na822784 Merge pull request #4696 from webpack/bugfix/parser-refactoring\nba3688a fixes misstake while es6 refactoring, add support for other variable declarations\n07f6281 fix: typos and variables/function misuse\n52055ba refactor: dead code elimination\n\nThere are 250 commits in total. See the full diff.\n\n. ## Version 2.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.4.1\nBugfixes:\n\nFix scope analysis in function declarations\n\n\n\nCommits\nThe new version differs by 3 commits .\n\nbd75356 2.4.1\nfb698e4 Merge pull request #4710 from webpack/bugfix/prewalk-function-decl\n619cf31 prewalk a function declaration\n\nSee the full diff.\n\n. ## Version 2.5.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.5.0\nBugfixes:\n\nadd hashSalt to schema\nwebpack's source code no longer contains sourceMappingURL, which caused issues with some tools\nAdded missing semicolon in dll-imported modules\nDllPlugin manifest is smaller (not pretty printed)\nCommonsChunkPlugin in async mode doesn't extract from initial chunks\n\nFeatures:\n\nallow placeholders in the BannerPlugin\nadd option to disable the module trace in stats\n\n\n\nCommits\nThe new version differs by 81 commits0.\n\nbf3652b 2.5.0\ncd1cd29 Merge pull request #4815 from webpack/bugfix/extract-async-initial\nb45588b CommonsChunkPlugin in async mode doesn't select initial chunks\n8bab88c Merge pull request #4814 from webpack/test/move-entry\na244879 add testcase for moving entry modules into the commons chunk\n85dc98f Merge pull request #4813 from JLHwung/perf/date-now\n6afc397 perf: use Date.now() instead of new Date().getTime()\n94d0641 perf: use Date.now() instead of +new Date()\nc91ba49 Merge pull request #4791 from deificx/master\n94ba75f Merge pull request #4794 from ndresx/disable-manifest-json-pretty-print\n84ea1ff added error to stats.moduleTrace test name to trigger test cases corretly\n8ad4386 test cases for stats.moduleTrace option\n958156a moduleTrace added to webpackOptionsSchema.json\nde87f93 Disable manifest.json pretty print\n4131013 rename stats.stackTrace to stats.moduleTrace\n\nThere are 81 commits in total.\nSee the full diff\n\n. ## Version 2.5.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.5.1\nBugfixes:\n\nFix crash when error happens while watching\nFix hoisting of exports\n\n\n\nCommits\nThe new version differs by 5 commits0.\n\nad2f68f 2.5.1\n4fd545b Merge pull request #4828 from satazor/patch-1\nb0c45da Fix _done function not dealing with compilation being undefined\n7bc08e1 Merge pull request #4816 from webpack/bugfix/hoist-immutable-export\na952bb9 change some magic numbers to hoist exports\n\nfalse\nSee the full diff\n\n. ## Version 2.6.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.6.0\nFeatures:\n\nadd webpackMode comment option for import()\nadd output.chunkLoadTimeout\n\nBugfixes:\n\nfixed providing webpackChunkName for import() with expression\nfixed parsing of destructing in assignment\nfixed some edge cases when parsing declarations\n\n\n\nCommits\nThe new version differs by  commits.\nSee the full diff\n\n. ## Version 2.6.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.6.1\nBugfixes:\n\nPromise is now only needed when loading chunk, not in initialization\nvariable injection in require.ensure is now working again\nbetter comment message when no export found (output.pathinfo)\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n7cfd2c4 2.6.1\n5ec15f8 Merge pull request #4927 from webpack/bugfix/require-ensure-var-inject\nda08b89 fix variable injection in require.ensure\n0dd0830 Merge pull request #4923 from webpack/bugfix/promise-later\n09d9533 Use Promise only when chunk load is triggered\nae389b0 Merge pull request #4918 from marzelin/master\n08615a2 change description when no static exports found\n\nSee the full diff\n\n. ## Version 3.0.0-rc.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.0-rc.1\nBugfixes:\n\nCLI args --display-modules and --display-optimization-bailout now work as expected\nScope Hoisting + class now works correctly\nScope Hoisting + namespace exports works correctly\ndeprecation for Module.chunks now works correctly\n\n\n\nCommits\nThe new version differs by 132 commits.\n\n2e8b77d 3.0.0-rc.1\nae5cb84 Merge pull request #5024 from webpack/bugfix/scope-hoisting-ns-object\n8c78089 fix lint error\nac92de5 update example\n9060137 generate nicer names\n9b58b7a generate correct namespace objects\n9b8c40b Merge pull request #5015 from webpack/bugfix/module.chunks\n1de873c Merge pull request #5014 from webpack/bugfix/renaming-class-scope\n7a0c776 Merge pull request #5013 from webpack/bugfix/cli-args\nc0bf82c fixes incorrect deprecation\n1c538f9 fixes #5000\ne343164 fix issue with --display-modules and --optimization-bailout\n3d65329 3.0.0-rc.0\n3455d7b update examples\n463eeb5 Merge pull request #5007 from webpack/next\n\nThere are 132 commits in total.\nSee the full diff\n\n. ## Version 3.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.0\nChanges from 2.6.1 to 3.0.0\nFeatures\n\nnode_modules no longer mangle to ~ in stats [breaking change]\ntimeout for HMR requests is configurable\nadded experimental Scope Hoisting (webpack.optimize.ModuleConcatenationPlugin)\nsome performance improvements\nadded output.libraryExport to select an export for the library\nsourceMapFilename now supports [contenthash] [breaking change]\nmodule.noParse supports functions\nadd node: false option to disable all node specific additions\n\nBugfixes\n\nadd workaround for breakpoints in eval source maps (chrome)\navoid creating redundant connections in chunk graph\nenable chunk modules in stats by default\nadd special behavior when using CommonsChunkPlugin with only async option\nerror is shown when hot-only HMR fails\nfixed a few issues with weird stats output [breaking change]\nfixed a bug in occurrence order plugin [breaking change]\noptimization plugins now only affect the current compilation [breaking change]\ncontext now also include index files [breaking change]\nrequire.resolve evaluate truthy [breaking change]\nimport order no longer adds to hash\nHashing for RawModule fixed\n\nInternal changes\n\nchild compilations get records and cache assigned (they need a unique name) [breaking change]\nSet is used for Child.modules, Module.chunks, Reason.chunks [breaking change]\nuglifyjs-plugin is moved into separate repository\n\nChanges from 3.0.0-rc.2 to 3.0.0\nBugfixes\n\nfix duplicate dependencies in ConcatenatedModule\nHashing for RawModule fixed\n\nInternal changes\n\nuglifyjs-plugin is moved into separate repository\n\n\n\nCommits\nThe new version differs by 44 commits.\n\nbf4ec9c 3.0.0\n9feda63 Merge pull request #5028 from webpack/feature/externalize_uglify_plugin\n49d6e38 Merge pull request #5086 from webpack/ci/node-8\n3dcb133 OSX test on node.js 8\nf4b8785 Merge pull request #5012 from webpack/TheLarkInn-patch-1\nd26c402 chore(deps): upgrade uglifyjs-webpack-plugin deps to get latest webpack-sources so tests pass\n3da4f3e Merge pull request #5085 from jbellenger/jbellenger/rawmodule-hash\n8c9dc14 fix RawModule hashing\nc2c5d73 Update README.md\n316d4b9 Merge pull request #5084 from timse/remove-duplicate-code\nae18552 update test case with changed hash due to less clutter in dependencies\nfc20348 unite iteration through modules into one loop\n083843e remove code that pushes arrays of dependencies into dependencies\nab636b0 Merge pull request #5075 from andreipfeiffer/master\n3b3449c Refactor: use const for non reassignable identifier\n\nThere are 44 commits in total.\nSee the full diff\n\n. ## Version 3.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.1.0\nFeatures:\n\nAllow different library names for UMD\nSupport for passing a defined identifier as this in a IIFE\nUse the new resolve performance option cacheWithContext: false by default when it's safe\nSupport array of functions as configuration\nadd sortModules to Chunk which is required in extract-text-plugin to support webpack 3\n\nBugfixes:\n\n! with truthy webpack identifier will evaluate correctly\nassets and dependencies are preserved in concatenated modules\nFix some internal usage of deprecated APIs\n\n\n\nCommits\nThe new version differs by 95 commits.\n\n4bb3018 3.1.0\n7e757cd Merge pull request #5194 from webpack/feature/hoist_regex_literals\n2879fb3 Merge pull request #5225 from hulkish/feature/added-chunk-sortModules-method\n5f08aa4 removed default params for node 4\ncadf9f7 added sortModules method to Chunk class\n70b7d2f fix(sp): spelling mistake in const name\n0ab36c4 Merge pull request #5196 from AndersDJohnson/multi-compiler-functions\n2eccb19 Merge pull request #5081 from KTruong888/4099_es6_refactor_lib_hot_module_replacement_plugin\ne365b2e Merge pull request #5210 from ematipico/master\n7913789 Merge pull request #5220 from liuyuanyangscript/master\n15becbd README.md bugfix\n2ccc1fd Changed statement 'var' to 'const'\na589a6c Merge pull request #5183 from kahwee/patch-1\nc2fa5d4 feat(perf): remove unneded regexp escape\n987a9f3 feat(perf): hoist final regexp\n\nThere are 95 commits in total.\nSee the full diff\n\n. ## Version 3.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.2.0\nBugfixes:\n\nfix duplicate entries in SourceMaps.\ncall imported functions with correct context.\nsupport strictThisContextOnImports in ConcatenatedModules.\nfix a bug which prevents parsing arguments for imported function calls when using strictThisContextOnImports.\nsupport nested .call() renames of this.\nfix typeof with require.resolve(Weak).\nfix hashing with ConcatenatedModules.\n\n\n\nCommits\nThe new version differs by 27 commits.\n\nd005990 3.2.0\n67c17a6 Merge pull request #5234 from webpack/bugfix/source-map-duplicate\n85ffe1e add test case\n5a64498 Merge pull request #5260 from ljqx/iife-nested-this-properties\na6c8362 Merge pull request #5261 from webpack/bugfix/import-context-strict-this\n6842d50 Call imports with the correct context.\n12a1352 [Parser] rename this in .call(this)\nbcde519 Merge pull request #5082 from KTruong888/4099_es6_refactor_lib_compiler\nedd6228 fix linting\n79926b3 - Edit PR to use normal functions again due to \u2018arguments\u2019 not working with arrow functions\n4266ab8 - Fix compiler test as discussed in PR\n13bc80b - Put Watching as a property on Compiler rather than a static method\n6dffcca - Remove \u2018self\u2019 references from lib/Compiler and use more arrow functions instead\n4378c92 - Add more tests\nbfd5ed9 - Fix linter issues\n\nThere are 27 commits in total.\nSee the full diff\n\n. ## Version 3.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.3.0\nFeatures:\n\nHMR logging now displays an expandable shorter module id.\n\nBugfixes:\n\nFix refactoring typo this.compiler.compiler is not a function\nNormalModule source can be cache between compilations (performance for incremental builds)\nwebpack now also watches when missing directories are added (i. e. when a module was missing and is installed)\n\n\n\nCommits\nThe new version differs by 23 commits.\n\n5b119e7 3.3.0\nb128db1 Merge pull request #5290 from webpack/bugfix/caching-module\na064968 Merge pull request #5297 from webpack/bugfix/watch-missing-directories\n329a805 add test case for error recovery while watching\nb4c74b2 allow watch cases to have errors per step\nf3ddcdd upgrade watchpack\ne72c3b2 missing dependencies could be files too\nc1a0244 store hash in depndencyTemplates Map instead of comparing identify\n981fd23 Merge pull request #5253 from rrharvey/feature/hmr-module-names\nb093f02 only group HMR module updates if name contains loaders\n6c5dc1b respect log level in HMR client log groups\nd312022 Merge pull request #5269 from huangc28/fix-compilerjs-error-undefined-compiler\n6c0e452 Fix typo that causes \"TypeError: this.compiler.compiler is not a function\" since compiler is undefined.\n95c7fa4 Merge pull request #3103 from kutyel/master\n43f967c Adjust style to es6 :tada:\n\nThere are 23 commits in total.\nSee the full diff\n\n. ## Version 3.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.4.0\nFeatures:\n\nImproved optimization bailout messages\nNamedModulesPlugins and HashedModuleIdsPlugin work now properly with delegated modules (DllReferencePlugin) and externals.\nadd --config-name option to choose a config by name for compiling a part of the config\nImproved error message when parsing in ModuleConcatenationPlugin fails\nUpgrade a lot of dependencies\nChild compilation names are not relative in stats\n\nBugfixes:\n\nFix setting boolean options in configuration (profile, bail)\nFix \"uncatched\" exception in HMR runtime code\nFix two cases where ModuleConcatenationPlugin crashes (missing internal name)\n\nConcatating delegated modules (from Dlls)\nreference to the default export of the root module\n\n\nFix --module-bind-pre and --module-bind-post\n\nPerformance:\n\nPerformance improvements in\n\nSourceMapDevToolPlugin\nAggressiveSplittingPlugin\nNormalModule variable injection\nParser\nRecordIdsPlugin\nStats\n\n\n\n\n\nCommits\nThe new version differs by 88 commits.\n\nc8732c8 3.4.0\nd1619d4 Merge pull request #4856 from matthewmeyer/hashDependantModuleIds\nb159ec2 Merge pull request #5180 from webpack/feature/improve-module-concat-bailout-messages\n32264b8 Merge branch 'master' into feature/improve-module-concat-bailout-messages\n4b12c56 Merge pull request #5369 from webpack/bugfix/scope-hoisting-dll\n440b5df use original request as libIdent for delegated modules\n35c8097 Make sure it's a real module when choosing for ModuleConcatenation\nd4f3bc3 Merge pull request #5150 from webpack/test/benchmark\nbb0f41a Merge pull request #5362 from webpack/deps/minor-updates\n544fee4 fix lint problem\n3598359 update stats test for larger file\n378ad46 update all dependencies to latest compatible version\n008ac78 Merge pull request #5353 from webpack/deps/extract-text-webpack-plugin\nee358bd Merge pull request #5351 from webpack/deps/supports-color\n91332b6 Merge pull request #5356 from webpack/deps/i18n-webpack-plugin\n\nThere are 88 commits in total.\nSee the full diff\n\n. ## Version 3.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.4.1\nBugfixes:\n\nfix incorrect warnings about exports when using the DllReferencePlugin\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n1f064bc 3.4.1\n8f4a9d2 Merge pull request #5375 from webpack/bugfix/delegated-exports\n9dbed73 integrate the delegated module better into the exports flagging process\n\nSee the full diff\n\n. ## Version 3.5.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.0\nFeatures:\n\nadd stats.excludeAssets to allow to filter assets in list (@ldrick)\nadd import(/* webpackMode: \"weak\" */ \"module\") to try to load a module without network request (@faceyspacey)\nadd 4. argument to require.context which is the context mode. Can be false, \"eager\", \"lazy-once\", \"weak\" and \"async-weak\". (@faceyspacey)\nrequire.resolveWeak now support expressions (@faceyspacey)\ngenerate only a single require for modules references in scope-hoisted modules (ModuleConcatenationPlugin)\n\nBugfixes:\n\nkeep correct import order when using the ModuleConcatenationPlugin\nGenerate shorter, more readable identifiers in ConcatenatedModule\n--help output is flushed before process exit (@esbenp)\nexit code is reliable reported for CLI validation error (@polomsky)\nstats options are now validated by schema (@esbenp)\nfixes problem when using the CommonsChunkPlugin in async mode without name argument\nfixes description of --resolve-extensions (@tomek-d)\nfixes has no internal name when using dependency variable in root of scope-hoisted modules (ModuleConcatenationPlugin)\n\nExamples:\n\nadd an example for dll + app (@aretecode)\n\n\n\nCommits\nThe new version differs by 68 commits.\n\n75a8ffe 3.5.0\nafa28c0 Merge pull request #5453 from webpack/bugfix/import-order-scope-hoisting\na569764 Merge pull request #5457 from tomek-d/resolve-extensions-typo\n0b8023a fixes #5096\n29d1336 Fixed bug in --resolve-extensions parameter documentation\n39051df update example\n7619c43 generate more pretty names for nested concatenation\n6607cfa remove ordering in ModuleConcatenationPlugin\n2bbbf50 Merge pull request #5437 from esbenp/fix-help-output-test-5345\n9f5bffa beautify\n334c1c4 remove unused variable\n8835751 fix conflict handling\n7099fcc update stats test case\nb77a52b add reserved words to avoid syntax errors\n16a5831 use old new Buffer api for node 4\n\nThere are 68 commits in total.\nSee the full diff\n\n. ## Version 3.5.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.1\nBugfixes:\n\nfix invalid syntax when using non-number ids with Scope Hoisting\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n5be9593 3.5.1\n43d877f Merge pull request #5460 from webpack/bugfix/stringify-concated\nb05b49b fix invalid generated code with scope hoisting and non-number ids\n\nSee the full diff\n\n. ## Version 3.5.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.2\nBugfixes:\n\nfixes stack overflow with circular dependencies (ModuleConcatenationPlugin)\n\n\n\nCommits\nThe new version differs by 12 commits.\n\n25302e5 3.5.2\nf04f066 Merge pull request #5471 from webpack/bugfix/stack-overflow-concat\n54fbfe0 Merge pull request #5467 from moschan/refactor-entry-option-plugin\nfb0ca64 Merge pull request #5466 from hzoo/patch-1\nb06d69f rollback travis to precise dist\nbc67522 fixes stack overflow with circular dependencies\n9a87824 Refactor \"EntryOptionPlugin.js\"\n4805027 add fix command for eslint\n0059bcf Merge pull request #5458 from samccone/sjs/remove-function-redeclare\na2601c3 update examples\n1869688 fix building of examples\n8b3772d Remove function redeclaration.\n\nSee the full diff\n\n. ## Version 3.5.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.3\nBugfixes\n\nfixes a name conflict with the ModuleConcatenationPlugin\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n4b2b1ad 3.5.3\n4430af4 Merge pull request #5487 from webpack/bugfix/issue-5481\nb7c3491 Merge pull request #5485 from webpack/bot/inactive\ne1bfecf Merge pull request #5486 from webpack/bot/pr-pending\n0e73a24 also generate a new identifier for interop name\n0ad5d21 Wait for CI not pending until reporting CI status\n72420fa mark and close inactive issue after half a year\n\nSee the full diff\n\n. ## Version 3.5.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.4\nBugfixes\n\nWarnings and errors contribute to hash, which shows stats on warning-only change\nHMR: avoid crash when calling accept handler on disposed module\nHMR: disable Scope Hoisting for modules using HMR\nrestore backwards compatibility of ConcatenatedModule (@kisenka)\n\nFeatures:\n\nAdd option to limit the number of parallel processed modules (parallelism)\n\n\n\nCommits\nThe new version differs by 22 commits.\n\n990563f 3.5.4\n2475c6a Merge pull request #5506 from webpack/bugfix/concat-hmr\n0ea37a5 Disallow Scope Hoisting when using HMR\n287d587 Merge pull request #5480 from kisenka/concatenated-module-in-3.5-compat\n3d272ac fix: restore modules property of ConcatenatedModule (fixes #5477)\n7a36951 Merge branch 'master' of https://github.com/webpack/webpack into concatenated-module-in-3.5-compat\n839915c Merge pull request #5501 from webpack/bugfix/hash-watch-warnings-errors\n93af585 fix stats tests\n3820157 fix lint problem\n0925a9d Merge pull request #5502 from webpack/feature/limit-processed-modules\n09c34cf remove hash from stats test with error\n930c019 fix validation output test\nf9bf8a9 Limit the number of parallel processed modules\n7905bf5 Warnings and Errors contribute to hash\nf7bcba7 Merge pull request #5500 from webpack/bugfix/hmr-disposed-handler\n\nThere are 22 commits in total.\nSee the full diff\n\n. ## Version 3.5.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.5\nBugfixes:\n\nfixes a bug where modules where incorrectly removed from chunks resulting in call on undefined errors (can happen when using externals and CommonChunkPlugin)\nModules no longer loose __esModule flag on incremental build with ModuleConcatenationPlugin\n__esModule flag is now only set when needed with the ModuleConcatenationPlugin\n\n\n\nCommits\nThe new version differs by 5 commits.\n\nef6ab68 3.5.5\n6bdd9dc Merge pull request #5535 from webpack/bugfix/incremental-concat-compat\nf75418f Merge pull request #5534 from webpack/bugfix/incorrect-graph\nc5deb59 set compatiblity flag correctly even after incremental build\n99c2706 Ensure that graph structure stay consistent\n\nSee the full diff\n\n. ## Version 5.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nVersion 5!\n[breaking] Refactor img-has-alt rule into alt-text rule\n[breaking] Rule onclick-has-role is removed. Replaced with no-static-element-interactions and no-noninteractive-element-interactions.\n[breaking] Rule onclick-has-focus is removed. Replaced with interactive-supports-focus.\n[new] - Add rule media-has-caption rule\n[new] - Add ignoreNonDOM option to no-autofocus.\n[new] - Add rule no-interactive-element-to-noninteractive-role\n[new] - Add rule no-noninteractive-element-to-interactive-role\n[new] - Add rule no-noninteractive-tabindex\n[new] - Configs split into \"recommended\" and \"strict\".\n[enhanced] - Configuration options added to no-static-element-interactions and no-noninteractive-element-interactions. Options allow for fine-tuning of elements and event handlers to check.\n\n\nCommits\nThe new version differs by 85 commits0.\n\nca876d2 5.0.0\nbb8dc4d Update CHANGELOG for v5.\n24b6193 Refactor img-has-alt to alt-text (#220)\n5be6cd6 Merge pull request #221 from jessebeach/docs--no-noninteractive-element-interactions\n68931f3 Add a case for interaction handlers on table cells to no-noninteractive-element-interactions\n6be5eab Merge pull request #218 from jessebeach/options-for-interactive-element-rules\nacb6f31 Adding documentation to interactive rule docs\n71299a0 Convert options to object from array\ned0074d Responding to review comments; remove unnecessary assignment\nf91fa08 Add options to element interaction rules\na36d8b0 Merge pull request #210 from jessebeach/no-noninteractive-tabindex\n1b063ce Responding to feedback about test schema definition\n48c1890 Fixing lint errors.\n35370e0 Adding tag and role config overrides to no-noninteractive-tabindex rule.\naca0eab Adding no-noninteractive-tabindex to README\n\nThere are 85 commits in total.\nSee the full diff\n\n. ## Version 5.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nNode <4 support\nSwapped Array.includes for array-includes polyfill to support node versions <4\n\n\nCommits\nThe new version differs by 3 commits0.\n\nbf0ac6a 5.0.1\nfb8c626 Upgrade all dependencies.\nfb5b87a Fix: backward compatibility with node.js v4 and v5. (#231)\n\nfalse\nSee the full diff\n\n. ## Version 5.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nResolve Flow issues\nExplicitly import flow types to resolve flow failures in consuming projects.\n\n\nCommits\nThe new version differs by 7 commits.\n\n4230a69 5.0.2\na2e4cb1 Update CHANGELOG\nd70ac7d [fix] - Resolve flow issues by explicitly importing types (#243)\n9971241 Update README with explanation recommended/strict (#238)\nc156644 Add missing README.md doc for media-has-caption (#237)\nc16fa00 Polyfill missed Array.includes in test helper. (#233)\n47b1306 Add linting to all directories and fix errors.\n\nSee the full diff\n\n. ## Version 5.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nInclude flow directory in published package\nfor explicit imports in v5.0.2\n\n\nCommits\nThe new version differs by 3 commits.\n\nfab40fe 5.0.3\nf894304 Update CHANGELOG\n58b34a6 Remove flow from .npmignore (#244)\n\nSee the full diff\n\n. ## Version 20.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 20.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 20.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 20.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 19.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 19.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 20.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 18 commits .\n\n9157d41 Update docs/changelog.md and set new release id in docs/_config.yml\n17e735d Add release documentation for v2.1.0\n90a5d8e 2.1.0\ndb6e03b Update Changelog.txt and AUTHORS for new release\na3eebd9 Build package as part of postversion step\nfd79000 Fix GitHub asset URL\n6a7c801 Redesign the template (#1339)\n354c84c Merge pull request #1337 from timcosta/add_called_immediately_before_after\na957ef3 update spy names across four tests\n3aa9919 [feature] adds spy.calledImmediatelyBefore and spy.calledImmediatelyAfter\ne401337 Merge pull request #1331 from mroderick/remove-next-release-from-docs\naf504b9 Remove documentation of the 2.x pre-releases\n8bec6dd Remove @next instructions from documentation\nfc749fa Merge pull request #1333 from eauc/master\n2058030 Add missing space from deprecated message (#1334)\n\nThere are 18 commits in total. See the full diff.\n\n. ## Version 2.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 40 commits0.\n\nf7ff840 Update docs/changelog.md and set new release id in docs/_config.yml\n59a7a34 Add release documentation for v2.2.0\n37676e8 2.2.0\nb35d217 Update Changelog.txt and AUTHORS for new release\n0127365 Merge pull request #1363 from greena13/master\n4fe0a73 Flatten structure of getWindowLocation()\n38e3ec4 Fix matchers.md in v1.17.6 and v1.17.7 releases. (#1379)\n3d4bc16 Merge pull request #1364 from blacksun1/add-custom-promise\n7ac4f60 Fixes for pull request comments\n25bfde0 Added docs for usingPromise\n0a3518f Added usingPromise method to sandbox.\n17edad7 Added usingPromise method to stub.\nc5bc9ab Merge pull request #1359 from kevincennis/kce/fix-1066\nc633202 Merge pull request #1320 from ashirley/master\n17c2639 Merge pull request #1366 from GProst/master\n\nThere are 40 commits in total.\nSee the full diff\n\n. ## Version 2.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nFeature: stub accessors in sandbox\n\nAllow stubbing of accessors with and without sandbox (#1416)\nadd throwsArg(index) to stubs (#1319)\nFix: forEach() requires 'this' argument (#1356)\nOnly reset history when calling resetHistory()\n\n\n\nCommits\nThe new version differs by 34 commits.\n\n64d51be Update docs/changelog.md and set new release id in docs/_config.yml\nd4b30b0 Add release documentation for v2.3.0\n8d64248 2.3.0\ne137139 Update Changelog.txt and AUTHORS for new release\n55dc491 Merge pull request #1416 from lucasfcosta/refactor-sandbox-stub\nfb514cf Merge pull request #1415 from mroderick/style-improvements\n06bf652 Merge pull request #1414 from mroderick/add-related-libraries-to-how-to-page\n746de3f Force fenced code blocks to use smaller font\n1602e00 Improve styling of h4\n46fd81b Remove deprecation warning from tests for old API\n454e0fd Add missing final dot to sandbox docs\n0ea3e17 Add docs for stub.value\nc89fb21 Deprecate stubbing sandbox value in favor of value behavior\ndbefd45 Name restore function on stubNonFunctionProperty\nfe3b9ac Add related libraries section to How To page\n\nThere are 34 commits in total.\nSee the full diff\n\n. ## Version 2.3.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n Make calledAfter symetric with calledBefore\n\nMake calledAfter symetric with calledBefore (#1407)\n\n\n\nCommits\nThe new version differs by 8 commits.\n\n94f422c Update docs/changelog.md and set new release id in docs/_config.yml\n69bf8f2 Add release documentation for v2.3.1\neee4564 2.3.1\n0dc2505 Update Changelog.txt and AUTHORS for new release\n36c6cdc Merge pull request #1407 from lucasfcosta/simmetric-callAfter\n5301cc1 Merge pull request #1420 from mroderick/remove-issue-397-test\n05e2d11 Remove test for issue 397\nc94d00a Make calledAfter symetric with calledBefore\n\nSee the full diff\n\n. ## Version 7.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n7.1.0\n\ud83d\ude80 New Feature\n\nUpdate to support webpack 3 (#471) (Joe Lencioni)\nlook for babel options in package.json and .babelrc.js (babel 7) (#465) (Thomas Sileghem)\nWatch configuration files. (#460) (Evilebot Tnawi)\nYou can now change the babel config while webpack watch or dev-server is running and webpack will correctly recompile all files with babel.\n\n\ud83d\udc1b Bug Fix\n\nOnly base cache identifier on babel options from package.json (#468) (Daniel Tschinder)\n\n\ud83d\udcdd Documentation\n\nRemove outdated examples. (Daniel Tschinder)\n\n\ud83c\udfe0 Internal\n\nupdate eslint-config-babel to version 7.0.0 (#469) (greenkeeper[bot])\nupdate lint-staged to version 4.0.0 (#470) (greenkeeper[bot])\nAdd prettier eslint plugin (#466) (Daniel Tschinder)\nAdd node 8 to test matrix (#467) (Daniel Tschinder)\nUpgrade find-cache-dir to 1.0 and cross-env to 5.0 (#457) (Daniel Tschinder)\n\n\n\nCommits\nThe new version differs by 13 commits.\n\nd249119 7.1.0\nea9b4d4 Update yarn.lock\n7986787 chore(package): update eslint-config-babel to version 7.0.0 (#469)\nee40748 chore(package): update lint-staged to version 4.0.0 (#470)\n66784e4 Update to webpack 3 (#471)\n8544ffa Only base cache identifier on babel options from pkg.json (#468)\nea2eafa Add prettier eslint plugin (#466)\n4548169 Add node 8 to test matrix (#467)\nd8b73c0 fix(resolve-rc): look for babel in package.json and .babelrc.js (#465)\n8d96c1f Remove outdated examples.\n91f2658 Fixed: watch configuration files. (#460)\nde2d3f3 Upgrade dependencies\n37e63e3 Upgrade find-cache-dir to 1.0 and cross-env to 5.0 (#457)\n\nSee the full diff\n\n. ## Version 7.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n7.1.1\n\ud83d\udc1b Bug Fix\n\nDo not read .babelrc for cache identifier when babelrc=false (#483) (Russ Tyndall)\n\n\ud83d\udcdd Documentation\n\nUpdate README.md for webpack 3.x (#476) (Pierre Neter)\n\n\ud83c\udfe0 Internal\n\nUpdate eslint to the latest version \ud83d\ude80 (#482) (greenkeeper[bot])\nchore(package): update husky to version 0.14.0 (#475) (greenkeeper[bot])\n\n\n\nCommits\nThe new version differs by 6 commits.\n\n5953fcf 7.1.1\nf3cacd9 Update yarn.lock\n0815f48 Update eslint to the latest version \ud83d\ude80 (#482)\naefe583 Do not read .babelrc for cache identifier when babelrc=false (#483)\nc8924f3 chore(package): update husky to version 0.14.0 (#475)\n6063373 Update README.md for webpack 3.x (#476)\n\nSee the full diff\n\n. ## Version 0.18.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.18.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.18.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 7.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv7.0.1\nFixed\n\nFix jsx-curly-spacing allowMultiline option being undefined in some cases (#1179 @fatfisz)\nFix jsx-curly-spacing newline with object literals bug (#1180 @fatfisz)\nFix prop-types to not mark class static function as valid propTypes definition (#1174)\nFix prop-types crash with Flow spread operator (#1178)\nFix void-dom-elements-no-children crash on faulty createElement detection (#1101)\nFix require-default-props error message for quoted props (#1161)\n\nChanged\n\nUpdate dependencies\nDocumentation improvements (#1173 @luftywiranda13, #1192 @markus-willems)\n\n\n\nCommits\nThe new version differs by 22 commits0.\n\n7ca9841 Update CHANGELOG and bump version\n9ce4d85 Merge pull request #1192 from markus-willems/pr/prop-types-docs\n660790b fix for wrong rule syntax. no-unused-prop-types instead of react/no-unused-prop-types in docs\n227fcf3 fix for wrong rule syntax. prop-types instead of react/prop-types in docs\naf68f88 Fix require-default-props error message for quoted props (fixes #1161)\nf7fb96b Fix void-dom-elements-no-children crash on faulty createElement detection (fixes #1101)\nf111e45 Merge pull request #1180 from fatfisz/fix-newline-with-object-literals\n3743e6d Add additional test with flow annotations to prop-types\n1ced710 Fix no-unused-prop-types crash with Flow spread operator (fixes #1178\n1534bdb Fix the newline with object literals bug\n159d0e5 Update rules to match changes in comments attachement in ESLint 4.0.0\n1b5743f Update tests to pass parserOptions globally\n0a2c510 Fix indent errors\n1bcaee0 Update .eslintrc config for ESLint 4.0.0\ndd10133 Fix prop-types crash with Flow spread operator (fixes #1178)\n\nThere are 22 commits in total.\nSee the full diff\n\n. ## Version 5.3.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv5.3.2\n\nFixed: Update docs links to the site insted of GitHub\n\n\n\nCommits\nThe new version differs by 1 commits.\n\nf787650 Fix: Update docs links to the site insted of GitHub\n\nSee the full diff\n\n. ## Version 5.4.0 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv5.4.0\nNew features\nUI refresh\nWelcome our refined UI! More consistent and clean:\n\n\ud83e\udd8a This is the first part of the planned improvements and a base for upcoming plugin API, see #426 and #354 for more details \u2014 we need your feedback there \ud83d\ude80\n\ud83c\udf55 Thanks to @SaraVieira and @n1313 for help! \u2764\ufe0f\nProps & methods are hidden by default\nUse the new config option showUsage to restore the old behavior.\nBug fixes\n\n\nCrash when using a defaultProp that is not listed in props (#437 by @ankri)\n\n\nIsolated examples inside sections\n\n\nIssues with position: relative (#441)\n\n\nUgly isolated example link (#235)\n\n\n\n\nCommits\nThe new version differs by 32 commits.\n\n426f08d Changelog: \ud83d\ude80\nf4b589a Changelog: \ud83d\ude80\naaa9895 Docs: Tweak description in readme\nd93e450 Refactor: Simplify code preview delay\n0f4f961 Refactor: codeKey \u2192\u00a0codeRevision\nc8c7eeb Fix: Fix isolated examples inside sections\nc001dd5 Merge branch 'ui'\n9879c97 Fix: Pass section name to examples\n8048121 Fix: Remove extra margin before paragraph\n190dc4c Fix: Move anchor link to a component header\n0dcd26f Fix: Less distracting button outlines\n2ea0e04 Docs: Add note about getComponentPathLine\ncb7da6c Refactor: Tweak examples UI\nebfd2e4 Refactor: Extract table to separate component\n08f4b91 Feat: Hide props & methods by default\n\nThere are 32 commits in total.\nSee the full diff\n\n. ## Version 5.4.1 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv5.4.1\n\nFixed: Pass showUsage option to the frontend\n\n\n\nCommits\nThe new version differs by 35 commits.\n\n26a45bf Fix: Pass showUsage option to the frontend\n64c5bc0 Docs: Update link to the cookbook\n77ad62d Docs: Add Code of Conduct\n426f08d Changelog: \ud83d\ude80\nf4b589a Changelog: \ud83d\ude80\naaa9895 Docs: Tweak description in readme\nd93e450 Refactor: Simplify code preview delay\n0f4f961 Refactor: codeKey \u2192\u00a0codeRevision\nc8c7eeb Fix: Fix isolated examples inside sections\nc001dd5 Merge branch 'ui'\n9879c97 Fix: Pass section name to examples\n8048121 Fix: Remove extra margin before paragraph\n190dc4c Fix: Move anchor link to a component header\n0dcd26f Fix: Less distracting button outlines\n2ea0e04 Docs: Add note about getComponentPathLine\n\nThere are 35 commits in total.\nSee the full diff\n\n. ## Version 5.4.2 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv5.4.2\n\nFixed: Styles of the last column (close #481)\nFixed: Isolate input placeholder styles (#481)\nFixed: Margins in usage tabs\nFixed: Render Para as div instead of p because it may have another p inside\n\n\n\nCommits\nThe new version differs by 42 commits.\n\n07cf4d1 Fix: Styles of the last column (close #481)\n262d5f0 Fix: Isolate input placeholder styles (#481)\n0aa1f48 Fix: Margins in usage tabs\nccd3730 Fix: Render Para as div instead of p because it may have another p inside\n0b87867 Docs: Add note about Create React App\nb913dcb Chore: Remove npm list from Travis config\n4a9b296 Chore: Yarn \u2192\u00a0npm 5\n26a45bf Fix: Pass showUsage option to the frontend\n64c5bc0 Docs: Update link to the cookbook\n77ad62d Docs: Add Code of Conduct\n426f08d Changelog: \ud83d\ude80\nf4b589a Changelog: \ud83d\ude80\naaa9895 Docs: Tweak description in readme\nd93e450 Refactor: Simplify code preview delay\n0f4f961 Refactor: codeKey \u2192\u00a0codeRevision\n\nThere are 42 commits in total.\nSee the full diff\n\n. ## Version 1.4.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ## Version 1.4.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ## Version 1.4.3 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n. ## Version 1.4.4 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n. ## Version 4.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.1.1\n\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798) (Teddy Katz)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795) (Victor Hom)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797) (Teddy Katz)\n03213bb Chore: improve comment explanation of indent internal functions (#8800) (Teddy Katz)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n1df6a01 4.1.1\n79a4482 Build: changelog update for 4.1.1\nf307aa0 Fix: ensure configs from a plugin are cached separately (fixes #8792) (#8798)\n8b48ae8 Docs: Add doc on parser services (fixes #8390) (#8795)\n0d041e7 Fix: avoid crashing when using baseConfig with extends (fixes #8791) (#8797)\n03213bb Chore: improve comment explanation of indent internal functions (#8800)\nd2e88ed Chore: Fix misleading comment in ConfigCache.js (#8799)\n\nSee the full diff\n\n. ## Version 4.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.2.0\n\ne0f0101 Update: fix indentation of nested function parameters (fixes #8892) (#8900) (Teddy Katz)\n9f95a3e Chore: remove unused helper method from indent (#8901) (Teddy Katz)\n11ffe6b Fix: no-regex-spaces rule incorrectly fixes quantified spaces (#8773) (Keri Warr)\n975dacf Update: fix indentation of EmptyStatements (fixes #8882) (#8885) (Teddy Katz)\n88ed041 Build: Turnoff CI branch build (fixes #8804) (#8873) (Gyandeep Singh)\n72f22eb Chore: replace is-my-json-valid with Ajv (#8852) (Gajus Kuizinas)\n7c8de92 Docs: Clarified PR guidelines in maintainer guide (#8876) (Kevin Partington)\nd1fc408 Docs: Update CLA link in Contributing docs (#8883) (Calvin Freitas)\n931a9f1 Fix: indent false positive with multi-line await expression (#8837) (\u859b\u5b9a\u8c14\u7684\u732b)\n3767cda Update: add no-sync option to allow at root level (fixes #7985) (#8859) (Victor Hom)\n1ce553d Docs: Fix wording of minProperties in object-curly-newline (fixes #8874) (#8878) (solmsted)\nf00854e Fix: --quiet no longer fixes warnings (fixes #8675) (#8858) (Kevin Partington)\nb678535 Chore: Add collapsible block for config in ISSUE_TEMPLATE (#8872) (Gyandeep Singh)\n1f5bfc2 Update: Add always-multiline option to multiline-ternary (fixes #8770) (#8841) (Nathan Woltman)\n22116f2 Fix: correct comma-dangle JSON schema (#8864) (Evgeny Poberezkin)\n676af9e Update: fix indentation of JSXExpressionContainer contents (fixes #8832) (#8850) (Teddy Katz)\n330dd58 Chore: fix title of linter test suite (#8861) (Teddy Katz)\n60099ed Chore: enable for-direction rule on ESLint codebase (#8853) (\u859b\u5b9a\u8c14\u7684\u732b)\ne0d1a84 Chore: upgrade eslint-plugin-eslint-plugin & eslint-plugin-node (#8856) (\u859b\u5b9a\u8c14\u7684\u732b)\n0780d86 Chore: remove identical tests (#8851) (Teddy Katz)\n5c3ac8e Fix: arrow-parens fixer gets tripped up with trailing comma in args (#8838) (\u859b\u5b9a\u8c14\u7684\u732b)\nc4f2e29 Build: fix race condition in demo (#8827) (Teddy Katz)\nc693be5 New: Allow passing a function as fix option (fixes #8039) (#8730) (Ian VanSchooten)\n8796d55 Docs: add missing item to 4.0 migration guide table of contents (#8835) (\u859b\u5b9a\u8c14\u7684\u732b)\n742998c doc md update: false -> false (#8825) (Erik Vold)\nce969f9 Docs: add guidelines for patch release communication (fixes #7277) (#8823) (Teddy Katz)\n5c83c99 Docs: Clarify arrow function parens in no-extra-parens (fixes #8741) (#8822) (Kevin Partington)\n84d921d Docs: Added note about Node/CJS scoping to no-redeclare (fixes #8814) (#8820) (Kevin Partington)\n85c9327 Update: fix parenthesized CallExpression indentation (fixes #8790) (#8802) (Teddy Katz)\nbe8d354 Update: simplify variable declarator indent handling (fixes #8785) (#8801) (Teddy Katz)\n9417818 Fix: no-debugger autofixer produced invalid syntax (#8806) (Teddy Katz)\n8698a92 New: getter-return rule (fixes #8449) (#8460) (\u859b\u5b9a\u8c14\u7684\u732b)\neac06f2 Fix: no-extra-parens false positives for variables called \"let\" (#8808) (Teddy Katz)\n616587f Fix: dot-notation autofix produces syntax errors for object called \"let\" (#8807) (Teddy Katz)\na53ef7e Fix: don't require a third argument in linter.verifyAndFix (fixes #8805) (#8809) (Teddy Katz)\n5ad8b70 Docs: add minor formatting improvement to paragraph about parsers (#8816) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 38 commits.\n\n5ea79dc 4.2.0\nb19ee3f Build: changelog update for 4.2.0\ne0f0101 Update: fix indentation of nested function parameters (fixes #8892) (#8900)\n9f95a3e Chore: remove unused helper method from indent (#8901)\n11ffe6b Fix: no-regex-spaces rule incorrectly fixes quantified spaces (#8773)\n975dacf Update: fix indentation of EmptyStatements (fixes #8882) (#8885)\n88ed041 Build: Turnoff CI branch build (fixes #8804) (#8873)\n72f22eb Chore: replace is-my-json-valid with Ajv (#8852)\n7c8de92 Docs: Clarified PR guidelines in maintainer guide (#8876)\nd1fc408 Docs: Update CLA link in Contributing docs (#8883)\n931a9f1 Fix: indent false positive with multi-line await expression (#8837)\n3767cda Update: add no-sync option to allow at root level (fixes #7985) (#8859)\n1ce553d Docs: Fix wording of minProperties in object-curly-newline (fixes #8874) (#8878)\nf00854e Fix: --quiet no longer fixes warnings (fixes #8675) (#8858)\nb678535 Chore: Add collapsible block for config in ISSUE_TEMPLATE (#8872)\n\nThere are 38 commits in total.\nSee the full diff\n\n. ## Version 4.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.3.0\n\n91dccdf Update: support more options in prefer-destructuring (#8796) (Victor Hom)\n3bebcfd Update: Support generator yields in no constant condition (#8762) (Victor Hom)\n96df8c9 Fix: Handle fixing objects containing comments (fixes #8484) (#8944) (Brian Schemp)\ne39d41d Docs: Make peerDependencies package.json snippet valid JSON (#8971) (Sam Adams)\na5fd101 Fix: duplicated error message if a crash occurs (fixes #8964) (#8965) (Teddy Katz)\nf8d122c Docs: trailing commas not allowed in json (#8969) (Scott Fletcher)\nd09288a Chore: Use output: null to assert that a test case is not autofixed. (#8960) (\u859b\u5b9a\u8c14\u7684\u732b)\ne639358 Update: add question to confirm downgrade (fixes #8870) (#8911) (Toru Nagashima)\n601039d Docs: fix badge in eslint-config-eslint readme (#8954) (Teddy Katz)\n3c231fa Update: add enforceInMethodNames to no-underscore-dangle (fixes #7065) (#7234) (Gabriele Petronella)\n128591f Update: prefer-numeric-literals warns Number.parseInt (fixes #8913) (#8929) (Kevin Partington)\n846f8b1 Docs: Clarified that core PRs require issue in maintainer guide (#8927) (Kevin Partington)\n55bc35d Fix: Avoid shell mangling during eslint --init (#8936) (Anders Kaseorg)\n10c3d78 Chore: fix misleading indent test (#8925) (Teddy Katz)\nfb8005d Update: no-restricted-globals custom error messages (fixes #8315) (#8932) (Kevin Partington)\na747b6f Chore: make minor improvements to indent internals (#8947) (Teddy Katz)\n1ea3723 Update: fix indentation of parenthesized MemberExpressions (fixes #8924) (#8928) (Teddy Katz)\n9abc6f7 Update: fix BinaryExpression indentation edge case (fixes #8914) (#8930) (Teddy Katz)\n0e90453 Docs: Fixing broken cyclomatic complexity link (fixes #8396) (#8937) (Chris Bargren)\na8a8350 Chore: improve performance of indent rule (#8905) (Teddy Katz)\n764b2a9 Chore: update header info in indent (#8926) (Teddy Katz)\n597c217 Fix: confusing error if plugins from config is not an array (#8888) (Calvin Freitas)\n3c1dd6d Docs: add description of no-sync allowAtRootLevel option (fixes #8902) (#8906) (Teddy Katz)\n933a9cf Chore: add a fuzzer to detect bugs in core rules (#8422) (Teddy Katz)\n45f8cd9 Docs: fix verifyAndFix result property name (#8903) (Tino Vyatkin)\n1a89e1c Docs: Fix always-multiline example in multiline-ternary docs (#8904) (Nathan Woltman)\n\n\n\nCommits\nThe new version differs by 28 commits.\n\n2874d75 4.3.0\n1c83662 Build: changelog update for 4.3.0\n91dccdf Update: support more options in prefer-destructuring (#8796)\n3bebcfd Update: Support generator yields in no constant condition (#8762)\n96df8c9 Fix: Handle fixing objects containing comments (fixes #8484) (#8944)\ne39d41d Docs: Make peerDependencies package.json snippet valid JSON (#8971)\na5fd101 Fix: duplicated error message if a crash occurs (fixes #8964) (#8965)\nf8d122c Docs: trailing commas not allowed in json (#8969)\nd09288a Chore: Use output: null to assert that a test case is not autofixed. (#8960)\ne639358 Update: add question to confirm downgrade (fixes #8870) (#8911)\n601039d Docs: fix badge in eslint-config-eslint readme (#8954)\n3c231fa Update: add enforceInMethodNames to no-underscore-dangle (fixes #7065) (#7234)\n128591f Update: prefer-numeric-literals warns Number.parseInt (fixes #8913) (#8929)\n846f8b1 Docs: Clarified that core PRs require issue in maintainer guide (#8927)\n55bc35d Fix: Avoid shell mangling during eslint --init (#8936)\n\nThere are 28 commits in total.\nSee the full diff\n\n. ## Version 4.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.4.0\n\n89196fd Upgrade: Espree to 3.5.0 (#9074) (Gyandeep Singh)\nb3e4598 Fix: clarify AST and don't use node.start/node.end (fixes #8956) (#8984) (Toru Nagashima)\n62911e4 Update: Add ImportDeclaration option to indent rule (#8955) (David Irvine)\nde75f9b Chore: enable object-curly-newline & object-property-newline.(fixes #9042) (#9068) (\u859b\u5b9a\u8c14\u7684\u732b)\n5ae8458 Docs: fix typo in object-shorthand.md (#9066) (Jon Berry)\nc3d5b39 Docs: clarify options descriptions (fixes #8875) (#9060) (Brandon Mailhiot)\n37158c5 Docs: clarified behavior of globalReturn option (fixes #8953) (#9058) (Brandon Mailhiot)\nc2f3553 Docs: Update example for MemberExpression option of indent (fixes #9056) (#9057) (Jeff)\n78a85e0 Fix: no-extra-parens incorrectly reports async function expressions (#9035) (\u859b\u5b9a\u8c14\u7684\u732b)\nc794f86 Fix: getter-return reporting method named 'get' (fixes #8919) (#9004) (\u859b\u5b9a\u8c14\u7684\u732b)\nd0f78ec Docs: update rule deprecation policy (fixes #8635) (#9033) (Teddy Katz)\n5ab282f Fix: Print error message in bin/eslint.js (fixes #9011) (#9041) (Victor Hom)\n50e3cf3 Docs: Update sort-keys doc to define natural ordering (fixes #9043) (#9045) (Karan Sharma)\n7ecfe6a Chore: enable eslint-plugin/test-case-property-ordering (#9040) (\u859b\u5b9a\u8c14\u7684\u732b)\nad32697 Upgrade: js-yaml to 3.9.1 (refs #9011) (#9044) (Teddy Katz)\n66c1d43 Docs: Create SUPPORT.md (#9031) (Teddy Katz)\n7247b6c Update: handle indentation of custom destructuring syntax (fixes #8990) (#9027) (Teddy Katz)\ncdb82f2 Fix: padding-line-between-statements crash on semicolons after blocks (#8748) (Alexander Madyankin)\n3141872 Chore: remove unnecessary eslint-disable comments in codebase (#9032) (Teddy Katz)\n0f97279 Fix: refactor no-multi-spaces to avoid regex backtracking (fixes #9001) (#9008) (Teddy Katz)\nb74514d Fix: refactor RuleContext to not modify report locations (fixes #8980) (#8997) (Teddy Katz)\n31d7fd2 Fix: inconsistent indent behavior on computed properties (fixes #8989) (#8999) (Teddy Katz)\n3393894 Fix: avoid reporting the entire AST for missing rules (#8998) (Teddy Katz)\nb3b95b8 Chore: enable additional rules on ESLint codebase (#9013) (Teddy Katz)\n9b6c552 Upgrade: eslint-plugin-eslint-plugin@0.8.0 (#9012) (\u859b\u5b9a\u8c14\u7684\u732b)\nacbe86a Chore: disallow .substr and .substring in favor of .slice (#9010) (Teddy Katz)\nd0536d6 Chore: Optimizes adding Linter methods (fixes #9000) (#9007) (Sean C Denison)\n0a0401f Chore: fix spelling error. (#9003) (\u859b\u5b9a\u8c14\u7684\u732b)\n3d020b9 Update: emit a warning for ecmaFeatures rather than throwing an error (#8974) (Teddy Katz)\nd2f8f9f Fix: include name of invalid config in validation messages (fixes #8963) (#8973) (Teddy Katz)\nc3ee46b Chore: fix misleading comment in RuleTester (#8995) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 33 commits.\n\na113cd3 4.4.0\n181bd46 Build: changelog update for 4.4.0\n89196fd Upgrade: Espree to 3.5.0 (#9074)\nb3e4598 Fix: clarify AST and don't use node.start/node.end (fixes #8956) (#8984)\n62911e4 Update: Add ImportDeclaration option to indent rule (#8955)\nde75f9b Chore: enable object-curly-newline & object-property-newline.(fixes #9042) (#9068)\n5ae8458 Docs: fix typo in object-shorthand.md (#9066)\nc3d5b39 Docs: clarify options descriptions (fixes #8875) (#9060)\n37158c5 Docs: clarified behavior of globalReturn option (fixes #8953) (#9058)\nc2f3553 Docs: Update example for MemberExpression option of indent (fixes #9056) (#9057)\n78a85e0 Fix: no-extra-parens incorrectly reports async function expressions (#9035)\nc794f86 Fix: getter-return reporting method named 'get' (fixes #8919) (#9004)\nd0f78ec Docs: update rule deprecation policy (fixes #8635) (#9033)\n5ab282f Fix: Print error message in bin/eslint.js (fixes #9011) (#9041)\n50e3cf3 Docs: Update sort-keys doc to define natural ordering (fixes #9043) (#9045)\n\nThere are 33 commits in total.\nSee the full diff\n\n. ## Version 4.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.4.1\n\nec93614 Fix: no-multi-spaces to avoid reporting consecutive tabs (fixes #9079) (#9087) (Teddy Katz)\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n0d9da6d 4.4.1\n1ea9a6c Build: changelog update for 4.4.1\nec93614 Fix: no-multi-spaces to avoid reporting consecutive tabs (fixes #9079) (#9087)\n\nSee the full diff\n\n. ## Version 6.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.1\n\nFixed: Clean lib directory before compilation\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n5f39100 Fix: Clean lib directory before compilation\n4d423a8 Chore: Revert version name for semantic release after manual 6.0.0 release\n9181f75 Chore: Update deps of basic example\n\nSee the full diff\n\n. ## Version 6.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\na31b7b5 Fix: Render null and undefined defaultValues as code (#556)\n\nSee the full diff\n\n. ## Version 6.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.3\n\nFixed: Hide empty path line (#558)\n\n\n\nCommits\nThe new version differs by 2 commits.\n\nb7b2dc4 Fix: Hide empty path line (#558)\nea39082 Chore: Update basic example deps\n\nSee the full diff\n\n. ## Version 6.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\nf0e99ee Fix: Only use primary style for top level sections (#555)\n\nSee the full diff\n\n. ## Version 6.0.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n7e1dba4 Fix: Support to enable HMR for component dependencies (#557)\nbd24b6c Chore: Fix basic example deps\n\nSee the full diff\n\n. ## Version 6.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.6\n\nFixed: Read showCode option from the right place\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n8028986 Fix: Read showCode option from the right place\n\nSee the full diff\n\n. ## Version 6.0.7 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n5c07e81 Fix: Disable isolation for global CodeMirror styles\n\nSee the full diff\n\n. ## Version 6.0.8 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n63b3369 Fix: Fallback to not formatting defaultProps (#564)\n689280f Docs: adding static setting injection example to updateExample() (#563)\n\nSee the full diff\n\n. ## Version 6.0.9 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n7bc9424 Fix: Support config theme overriding top level theme properties (#566) (#571)\ndf1a321 Docs: Add Fela example\n\nSee the full diff\n\n. ## Version 6.0.10 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.10\n\nFixed: Pass devtool webpack option in dev mode (#569)\n\n\n\nCommits\nThe new version differs by 1 commits.\n\ndebcc48 Fix: Pass devtool webpack option in dev mode (#569)\n\nSee the full diff\n\n. ## Version 6.0.11 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.11\n\nFixed: Lock jss-isolate version because of a regression in the latest patch release\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n02d0cc2 Fix: Lock jss-isolate version because of a regression in the latest patch release\n\nSee the full diff\n\n. ## Version 6.0.12 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n8c5a07a Fix: Update syntax in an example inside \u201cAdd examples to this component\u201d\n9eab767 Chore: Update deps, fix styles for sections examples\n\nSee the full diff\n\n. ## Version 6.0.13 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n23474a7 Fix: Fix parsing of error about webpack loaders\n\nSee the full diff\n\n. ## Version 6.0.14 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nfea4170 Fix: Migrate to react-codemirror2 (#574)\n9b531e3 Docs: Add css-loader example to require option docs\n4da12a4 Docs: Explain how require option works\n\nSee the full diff\n\n. ## Version 3.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 15 commits.\n\n1e33b74 Update docs/changelog.md and set new release id in docs/_config.yml\n3e0fe34 Add release documentation for v3.1.0\n24207cd 3.1.0\n94e262d Update Changelog.txt and AUTHORS for new release\naf6348c Merge pull request #1519 from fatso83/sandbox-wrong-config-passed\nf8b4ea1 Update sandbox docs\n127aafc Add missing docs on sandbox config change\ncacd10d Fix relative links\n1f2d2e3 Merge pull request #1515 from sinonjs/create-factory-functions\n75ad693 Merge pull request #1516 from fatso83/1512-sandbox-stub-props-on-prototype\nb4a3f42 Fix regression on sandbox.stub(obj,protoMethod)\nece1ee5 Add regression test case\n6648f1b Use new sandbox and fake server factory functions in documentation\n4c2aa41 Add factory functions for sandbox and fake server\nec74e94 Add support for passing a function to stub.throws(...). (#1511)\n\nSee the full diff\n\n. ## Version 3.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nAdd stub#resolvesThis\n\nFix #1521 by caching references to Array.prototype.filter (#1523)\nFix #1368 by adding stub#resolvesThis (#1517)\n\n\n\nCommits\nThe new version differs by 15 commits.\n\nf1d6e75 Update docs/changelog.md and set new release id in docs/_config.yml\nf6374e8 Add release documentation for v3.2.0\n1b81ec6 3.2.0\naea2654 Update Changelog.txt and AUTHORS for new release\n81c23fb Merge pull request #1523 from fatso83/1521-stub-array-filter-fails\n052a2d0 Add requirements to pull request template\n56ca580 Cache other references to Array.prototype.filter\n531f872 Cache reference to filter in stubbing calls\n3df68a7 fixes issue #1368 by adding stub#resolvesThis (#1517)\n6689cab Merge pull request #1522 from sinonjs/centered-readme-header-with-logo\nbe66ebb Fix \"npm based CDNs\" link\nb005f1d Contered header with logo in readme\n996d502 Merge pull request #1520 from fatso83/jsdelivr\nb376dcf Add hints on using CDNs in docs and README\n3ad5e05 Add props for default file in CDN delivery\n\nSee the full diff\n\n. ",
    "mkuipers": "The preview attribute used to be available for all types of files. By rolling back to 3.6.0, I was able to regain the preview functionality, but it would be nice if in future versions we could have the functionality back.. >Can you please update the spec file as well so it corresponds this behavior. Also, should this be considered a breaking change?\n~Doesn't really seem like a breaking change - seems like a bugfix for something that we'd expected to have been caught by the spec failure.~\nNevermind that argument, I misread your comment.  Nonetheless, I can't imagine a scenario that this would be a breaking change for anyone.. ",
    "alexeyk": "@seenickcode i have same issue how did you get it work? thanks. ",
    "mistadikay": "My opinion: react-dropzone (and components in general) should do one thing and do it good. So, I propose to leave validation to the outside world and keep only native stuff like 'accept'. I use react-dropzone and I validate everything separately (both sync and async validation) and it works just fine.. > I think it should since accept is the part of HTML5 and dropzone wraps  but stuff like size validation should go away in favor of custom validation.\nYes, I totally agree. \ud83d\udc4d . ",
    "rrhvella": "I think it makes sense to leave the validation to the user.. ",
    "josephecombs": "here's some boilerplate I wrote to validate image dimensions in case anyone needs it:\n```\nconst onDrop = (accepted, rejected) => {\n  let errors = [];\nif (rejected.length > 0) {\n    errors.push('Image is over 10 MB and is therefore rejected.');\n  } else {\n    if (accepted[0].type !== 'image/jpeg') {\n      errors.push('This image is not a jpg and is therefore rejected.');\n    } else {\n      var acceptedImg = accepted[0];\n      var image  = new Image();\n      image.addEventListener('load', function () {\n        if (image.width !== 2500) {\n          errors.push('This image must be exactly 2500 pixels wide.');\n        } else if (image.height !== 3000) {\n          errors.push('This image must be exactly 3000 pixels wide.');\n        }\n    // display errors or do success thing\n    if (errors.length >= 0) {\n      alert(errors.join(', '));\n    } else {\n      alert('client side validations passed');\n    }\n  }.bind(this));\n  image.src = acceptedImg.preview;\n}\n\n}\n};\n```\n. @okonet is there a example somewhere in the docs with onDrop being used to validate dropped files?. Sure. Hopefully I will do this today.. alright I updated it to not use the prop you want to deprecate.  IDK about changing this example to handle multiple files though.  My use case is only one file at a time.. ",
    "nealoke": "@okonet I would, but really have no idea how it works, even when clicking on pull request \ud83c\udf35 . I am a developer trust me.... For peeps wanting it now: input element types. ",
    "tarr11": "This fixed it. \nimport * as Dropzone from 'react-dropzone';\n. If you are using module: 'esnext' in tsconfig, then you can use import Dropzone from 'react-dropzone';. ",
    "dupski": "We've also come across an issue in this area today.\nTo get our tests running in Node with ts-jest (Jest & typescript), we have to use:\nimport * as Dropzone from 'react-dropzone':\nHowever when that code is built with webpack (v2 currently), we have to use Dropzone.default at runtime client-side to get a reference to the actual component. It seems webpack (or typescript?) does not correctly detect the default export for some reason.\nWe currently do not use @types/react-dropzone. I'm going to give those a shot later this week and will report back if that helps :). ",
    "asaarnak": "Look like a issue with old type definitions: https://github.com/react-dropzone/react-dropzone/issues/520. ",
    "Southclaws": "Getting this too now, if I import * as Dropzone from \"react-dropzone\"; then React complains about Dropzone as a function is not valid as a react component. If I try any other combination of import methods, I just get compile errors (import {Dropzone}, import ..., import Dropzone, etc...)\nIs there any quick workaround? What was the last working version?. ",
    "jurosh": "Hi guys, shuldn't be this reopened ? looks like there is still issue - or you get it working without workaround ?\n@ashok-sc that would probably work, but just with not strictly configured typescript. Otherwise when you delete typings file, you cannot import module without error.\n. ",
    "goloveychuk": "@dupski \nsolution:\n1) make all imports import * as Dropzone from 'react-dropzone/dist/index';\n2) add react-dropzone.d.ts\nreact-dropzone.txt\nThis is because \nhttps://github.com/react-dropzone/react-dropzone/blob/master/package.json#L4-L5\nwebpack using module, typescript main. \nIn first file we have export default, on second - module.exports = {}\nWhy typescript using main? I guess because of https://github.com/goloveychuk/ts-jest/blob/master/src/utils.ts#L208-L213\nNot 100% sure.\n. ",
    "YGKtech": "I'm facing this issue too, the problem has not been resolved and this issue should be reopened.\nCurrently the only way I've been able to use this in typescript is to not install the @types definiton, change my tsconfig.json to allow implicit any statements, then import it as import * as Dropzone from 'react-dropzone'; and reference the component as <Dropzone.default>\nThis is a lot of hassle to go through for a single component, and the workaround isn't documented anywhere.. @jdcas89 : only thing that comes to mind would be to ditch the typings and change your tsconfig to allow you to use it as a black box.  I don't even know for sure if that would work, it's just the only thing I can think of off the top of my head for that sort of environment.. ",
    "oBusk": "Workaround for those in desperate need seems to be\n react-dropzone@4.1.X and \n@types/react-dropzone@4.1.X.\nImport as \ntypescript\nimport * as Dropzone from 'react-dropzone';. ",
    "jdcas89": "This still doesn't work out of the box. Even-though the typings are available from the package. The only thing that worked was what @goloveychuk suggested. This won't work if you have a CI/CD pipeline that installs directly from npm. Any suggestions?\n. ",
    "nickhaughton": "This is still an issue. @goloveychuk's solution worked, but it's far from ideal.. ",
    "sbaechler": "@tarr11 Please reopen this issue. It is still not possible to use the library with the provided types in a node environment (such as Jest).. @ralic I created a minimal repo and there it actually worked.\nhttps://github.com/sbaechler/react-dropzone-repo\nI guess I have to dig deeper into our app and check what we have differently. . No, there is nothing in the yarn.lock. However, our project configuration is based on react-scripts version 1 while the test repo used version 2.. So I found the issue: Wepack is importing the module from 'dist/es/index.js' while Jest is importing from 'dist/index.js' since it is a node app. Of course the commonJS module does not have a default export.\nIf I import directly from 'dist/es' I lose the type definition.\nI guess react-app 2 is using a smarter build chain for Jest.. ",
    "smeijer": "@okonet , how about adding a test? React seems to transform the array to a string itself.. With a commit like this; you don't even need to depend on React parsing the attribute. \nAlthough, I don't understand why you call it fragile; as it's just as \"fragile\" as depending on the React SyntheticEvent, I do understand you don't want to support this. \nI'll just use a wrapper for this functionality:\n```js\n// dropzone.js\nimport Dropzone from 'react-dropzone';\nexport default ({ accept, ...props }) =>\n  ;\n```\n. But event.stopPropagation is really dirty. You should never have to call stopPropagation. Because this prevents other things. Like click away a modal, close dropdown menu's, catch scroll events. Click on the DeleteFileButton (example above) should close the dropdown menu in a navigation bar. When the button isn't propagating it's click, the dropdown will never receive the event, and thereby never close.\nstopPropagation is simply saying \"stop all the things you're doing, just do this, and only this\". While preventDefault is more asking to not run the default behavior. Yes, it's more work, because you should check on some places if the default behavior is being prevented. But that's exactly the point.\nThere is no opt-out when you stopPropagation, you're effectively killing other event handlers.\nIf I didn't make my point; Please, don't use stopPropagation, ever.. @stalebot, the issue still needs to be resolved.. @stalebot, the issue still needs to be resolved.. @stalebot, the issue still needs to be resolved.. This bot is frustrating. . ",
    "sankargorthi": "I've debugged this as best as I can; the problem could be that the attr-accept utility doesn't get the file out of the DataTransferList to check the file extensions.. @ming-soon ~~it might be too tiny in the gif, but the two files are of image/jpg type as shown in the console log.~~\nI assumed that a valid accept in the drag-drop API is a comma separated list of file extensions. How would I specifically pick file extensions?. @ming-soon that didn't seem to help either... https://github.com/sankargorthi/react-webpack-babel\n```jsx\n<Dropzone accept=\"image/jpg,image/png\"\n    className={styles[\"drop-zone\"]}\n    activeClassName={styles[\"drop-zone-active\"]}\n    rejectClassName={styles[\"drop-zone-reject\"]}\n    multiple={false}\n    onDrop={this.onDrop}\n\n  <div>Drop your files here</div>\n\n\n```\n\nNow files with .jpeg and .jpg get rejected (both in the UI and in the accepted list)\n.png files were accepted though.. ",
    "DonovanCharpin": "Same issue on my side.. ",
    "ming-soon": "The accept must be a valid MIME type according to input element specification, for example application/pdf, image/*, audio/aiff, audio/midi.. @sankargorthi You can pass a comma separated list of multiple file extensions to accept as following:\naccept=\"image/gif,image/png\"\nThen it will accept both gif and png files, but not jpeg or other files.. @sankargorthi The valid MIME type for .jpeg files is image/jpeg, not image/jpg.\nhttp://stackoverflow.com/questions/33692835/is-the-mime-type-image-jpg-the-same-as-image-jpeg. We can use SyntheticDragEvent to be more specific.\nhttps://github.com/facebook/flow/blob/v0.35.0/lib/react.js#L349. @okonet I think we should use the File type based on https://developer.mozilla.org/en-US/docs/Web/API/File. This can be HTMLInputElement.. @okonet By default, the preset react includes the transform-flow-strip-types plugin. And right now it is not possible to disable a specific plugin from preset, AFAIK.\nhttp://stackoverflow.com/questions/33707189/is-there-an-option-to-disable-a-plugin-in-babel-when-using-a-preset. ",
    "ScoutsOut": "So is this issue resolved?\n. ",
    "bradbirnbaum": "Thanks - that makes sense.   I ended up doing it on my own and also removing our use of maxSize. ",
    "foobar8675": "sorry @caseychoiniere , operator error. . ",
    "huxubin": "even if upload 50 images or less , this often happens !. I try to upload with input file, it fails. As you say this is most likely browser issue not this library. Do you have any fit ployfill to solve this?. ",
    "emplums": "Hey @forabi happy to collaborate on this - I'd like to use dropzone as well but need it to be keyboard accessible. Can you explain where you are stuck with this PR?. ",
    "holloway": "The <input type=file> is only display:none for visual reasons, right? So why not just put it in a container div whose width:0,height:0,overflow:hidden? That way it would still be keyboard navigable.. I believe this is the core issue... https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html#mocking-refs-for-snapshot-testing. ",
    "SaraVieira": "@okonet This can be closed. @okonet why hasn't this been merged? . In this or style management?\nOn Mon, 21 Aug 2017, 21:46 Andrey Okonetchnikov notifications@github.com\nwrote:\n\nI wanted to remove style management before proceeding with this one. But\nit's taking too much time so I'd appreciate any help\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-dropzone/react-dropzone/pull/344#issuecomment-323848565,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABALdWjzjbxstzpn_hyQW38YcJ9rR3Ptks5saeywgaJpZM4L2OOm\n.\n. @okonet This can be closed. @okonet This can be closed. @okonet This can be closed. Hello @yoDon ,\n\nThis appears to be fixed in firefox 55 , can you please confirm too ?\n\n. I'm going to close this, feel free to reopen if it still happens to you. @okonet This can be closed. @okonet This can be closed. @okonet This can be closed. @okonet This can be closed. Hello @sharma-varun ,\nCan you please provide more details ?\nI can run it in firefox 55.0.2\n\n. closes #435. @okonet All fixed \ud83d\ude04 . This can also close all the @greenkeeperio-bot pr's :D . @okonet All done. @okonet Sorry I have been really busy , I'll get on this tomorrow \ud83d\ude1e. @headzoo @okonet I'm okay with closing this one. @piercefreeman I can't reproduce this either \ud83d\ude15. Can we use bundlesize instead ? @okonet . Nvm , this one has a why and bundlesizse doesn't , I was saying bundlesize because it's the one I use the most \ud83d\ude1d\nI'll create a quick PR to add this\n@okonet \n. But you won \ud83d\ude15. @dsznajder Can this be closed ?. Thanks for the PR!\nCan you walk me through what the other changes are? . Hello @DeFuex,\nWhen that one gets approved we will merge this then :). Hi @puffstream ,\nSo the problem is that you called us guys and there are also a couple of girls doing open source \ud83d\ude1d\nI adjusted the title :)\nAbout your issue I created this code sandbox that uploads gifs:\nhttps://codesandbox.io/s/5y84ylr8r4\nCan you explain your issue with a demo ?. No problem and a bummer you need to change options \ud83d\ude41\nCan I close this? \u263a\ufe0f. Because I forgot to delete it \ud83d\ude22 . Insteresting , didn't know !\nMy life is a lie :p . Does it have the plugin and the extend ?. yeah , sure but that one is not a function , just and if statement :p . Habit ! Fixed \ud83d\udc4d . Yeah , I'll pass it. Done !\nDidn't know that was a thing :o. Good idea! . Want me to work on trying to get this smaller a little? . I'm gonna do the why and merge this then, cool? . @okonet Done ! Just gonna wait for the ci. ",
    "buob": "Not sure why codecov thinks I'm losing coverage, I'm adding quite a few more LOC of tests than actual code. \ud83d\ude1e . @okonet Is there any update on this?  Is there something I need to change to make this a merge candidate?  I assumed at the time of submitting codecov was acting up, but if it's an actual problem I have, let me know. \ud83d\udc4d. Hi @okonet!  My impetus for opening this PR was actually more that in Safari if you drag a DOM element (i.e. an image on the page) over the target, it triggers the drag active class.  The other PR doesn't address that.\nI'm happy to investigate the other approach for the dropping portion though, it certainly is cleaner. \ud83d\udc4d. ",
    "seberik": "@okonet Why did this become closed, is it just inactivity or is there activity in some other PR? I would be happy to continue working on a fix for this issue as we solved it with a onDragStart workaround. The problem is that we have a html5-drag-and-drop (react-dnd with react-html5-backend) component inside of the dropzone component to allow images to be uploaded and sorted. When users sorts the uploaded images react-dropzone calls onDropRejected with a dataTransferItem of type \"application/json\".. I encountered this issue to when using it with react dnd. It seems the issue occurs when adding and removing a dropzone from the dom immediately after a user drops a file. . ",
    "pcgilday": "@okonet - Is anyone already working on this? I'm happy to do this if help is still wanted.\nEDIT: I just saw the convo in https://github.com/react-dropzone/react-dropzone/pull/344, so I'll look at https://github.com/react-dropzone/react-dropzone/pull/468 and https://github.com/react-dropzone/react-dropzone/pull/344 to see if I can help out in any way there.. @okonet and @janusch I opened https://github.com/react-dropzone/react-dropzone/pull/517 to add the check that was suggested. I can't consistently reproduce the issue either, but when I did encounter it I came to the same solution of adding this check to make sure the ref actually exists. . ",
    "SpainTrain": "Have you considered adding defs to flow-typed rather than exporting (https://github.com/flowtype/flow-typed/tree/master/definitions/npm)?  The main benefit is that flow-typed definitions are scoped to flow versions.  This allows a library consumer to move to a new flow version before its library(ies) do and vice versa.  Otherwise, as an app developer, it is quite possible to get stuck where you either cannot upgrade your libraries or cannot upgrade flow due to version conflicts.\nIt is also easy to get started with flow-typed definitions because flow-typed will stub out libraries when installed.  If this option sounds interesting, we could start to flesh out our stubs and open PRs on https://github.com/flowtype/flow-typed/tree/master/definitions/npm. I would like to reiterate the significant benefit of using flow-typed rather than having definitions in the npm package (https://github.com/react-dropzone/react-dropzone/issues/339#issuecomment-338329809) - libdefs are scoped to a compatible range of flow versions.  This is critical for a library consumer while flow is still pre-1.0 and in flux.  Another benefit I didn't mention previously is that the flow-typed maintainers are very helpful in PRs for improving types defs and adding tests.  \nRegarding having both ts and flow defs, this is very doable and somewhat common.  For a basic example of this, check out react-with-separator.  Below is a link to a ts project that I ported to flow-typed, which required very little change.  While this example uses a ts def file, the porting process is the same whether the source is native ts or uses a def file because flow-typed generates its stubs from the transpiled javascript.  For less trivial examples, AFAIK most of the major ecosystem libs have defs for both (e.g., Redux, etc.).\n\nreact-with-separator (ts) https://github.com/LinusU/react-with-separator/blob/master/index.d.ts\nreact-with-separator (flow) https://github.com/flow-typed/flow-typed/blob/master/definitions/npm/react-with-separator_v1.x.x/flow_v0.72.x-/react-with-separator_v1.x.x.js\n\nI am not actively using dropzone but may be in the near future, at which point I will go ahead and add defs to flow-typed if they aren't yet there (I find it much easier to type a lib I am actively using than attempting to do so cold).. ",
    "TLadd": "There is a definition for react-dropzone in flow-typed now: https://github.com/flowtype/flow-typed/blob/master/definitions/npm/react-dropzone_v4.x.x/flow_v0.53.x-/react-dropzone_v4.x.x.js.. I added the types to flow-typed initially, but I switched over to using Typescript since. Given that they haven't been updated for several major versions, I don't think anyone is maintaining them currently.. Sure, it would have to be this repo though (the ts definition is already here: https://github.com/react-dropzone/react-dropzone/blob/master/typings/react-dropzone.d.ts). The other option is to update flow-typed. Just depends on if the react-dropzone maintainers want to have them here or not. Obviously makes it easier to ensure the types are kept up to date, but adds a maintenance cost.. ",
    "ekropotin": "\nThere is a definition for react-dropzone in flow-typed now: https://github.com/flowtype/flow-typed/blob/master/definitions/npm/react-dropzone_v4.x.x/flow_v0.53.x-/react-dropzone_v4.x.x.js.\n\nThere are types for version 4.x while the recent version on NPM is 7.0.1.. ",
    "afgomez": "Mmm, I just checked, and I think this is a duplicate of #338 . Sorry, I don't have time to look into it :(\nI'll close the PR\n. ",
    "DaZzz": "One more option \ud83d\udc4b \n\n. @okonet actually react resemblance is what I didn't fully like in second version. Do we really need that? It kinda feels like some sort of react-conf or some new variation of react (like preact, or react-native). Take a look at react-router for instance or react-dnd. They don't try to use original react logo in any way. I think when you pair your logo with the name of the repo it is already enough. However the logo does tell a bit more about the functionality of the package which I believe a good attribute. \nAs for 3d. I think the logo I designed doesn't try too much to appear 3d but this slight detail makes it more finished. Here is the comparison:\n\nAlthough I'm ok with both of them. \ud83d\ude04 . \n. \ud83d\ude05 \n\n. I tried similar approach at first but white pointy angle inside central circle is killing it. Maybe just something like this?\n\n. @okonet was not sure about the folder for logos. Decided to make logo folder similar to react-router repo. What do you think? Should I include sketch files in the same folder or what? \ud83e\udd14 . ",
    "oliverturner": "\n. @okonet I've always seen the React logo as inherently 3D (the lines describing axes of rotation around a nucleus) so I the shift in perspective isn't there for me. Also, I take your point about the perception of noise, but it has no more lines than yours :P\nFair feedback though: I really should stick to the day job!. \ncouldn't help it.... I'm leaning towards a variant of @DaZzz version myself. Strong work \ud83d\udc4d . ",
    "danfernand": "I love the d letter one or the carrots to the circle. Love the library!. ",
    "kuzminadya": "Check this please\n\n. ",
    "theodorosploumis": "Is this issue still active? I could help with this if you like. I am not a professional logo designer but I like creating logos and graphics for open source projects. Should I proceed?\nThanks in advanced!. ",
    "capaj": "@rolandjitsu you can't have both flow and typescript in the same project. \nI'd say close this PR and move on with typescript. TS has become the standard for typing in JS community. Even projects like yarn or jest which were the biggest pushers of flow migrated to TS.. ",
    "samageloff": "Left a PR here, with a proposed fix: https://github.com/okonet/react-dropzone/pull/352. ",
    "amshim": "I still don't quite understand. I want to change how the input box looks even when there is no user input.\nIf you are deprecating style and className, how are we supposed to change how it looks?. ",
    "alexkerber": "@macrozone: What do you mean with lay the above? Create a div above the dropzone dz-clickable?. Ah awesome @macrozone! Works perfect!. It just stoped working :/ Someone that have the same issue?. ",
    "abbasfreestyle": "Thanks @okonet but this isn't working.\nThe states are being passed through into onDrop() with bind. But setState does not update the actual state.\nthis.state.files in render() is still unchanged and still remains empty no matter how many times i add a file.\nBut weirdly this.state.files show the previous file data INSIDE onDrop() function only. Thanks @okonet \nI've tried it again today and for some reason it's decided to work. I've implemented the bind, using the exact same code that failed the other day.\nI think it might be a react issue, I know the code should have worked that day and now it's working today. Very strange!\nThanks for your help. It's working, so closing issue.. ",
    "itsashis4u": "This may be because of setState being async in nature, you can use callbacks in setState. ",
    "femesq": "Not sure if I've got your idea, since now we only have {isDragActive, isDragReject} on DropZone's state...\nBut if you meant to include other vars (available on onDrop method), I think it would solve:\n```javascript\nonDrop(e) {\n    const { onDrop, onDropAccepted, onDropRejected, multiple, disablePreview } = this.props;\n    const fileList = getDataTransferItems(e, multiple);\n    const acceptedFiles = [];\n    const rejectedFiles = [];\n// ...... keep everything else....\n\n// Reset drag state\nthis.setState({\n  isDragActive: false,\n  isDragReject: false,\n  acceptedFiles: acceptedFiles,\n  rejectedFiles: rejectedFiles\n});\n\n}\n```\nand them:\njavascript\nclass Dropzone extends React.Component {\n  static renderChildren(children, isDragActive, isDragReject) {\n    if (typeof children === 'function') {\n      return children(...this.state);  //    <= Sending entire state to children\n    }\n    return children;\n  } \nMaybe we could even send fileAccepted function down to children, so that we can verify why any file was rejected (file's size ou type):\njavascript\n    // Reset drag state\n    this.setState({\n      isDragActive: false,\n      isDragReject: false,\n      acceptedFiles: acceptedFiles,\n      rejectedFiles: rejectedFiles,\n      fileAccepted: this. fileAccepted,\n      fileMatchSize: this. fileMatchSize\n    }); \nPS.: After writing this, it seens too over... I wouldn't mind re-writing those one-line-function again... Kind of too much specific use-case.... \ud83d\ude14\nYou are right... I haven't made the tests before proposing this... Sorry about that..\nReading the code, it made me believe that the getDataTransferItems function call on lines L57 and L104 were equivalents.\nHave tested now, and the result are very different (using Chrome@56.0.2924.87).\nNow I've got confused... \nWhat does getDataTransferItems on L57 do, exactly? \n. It is interesting, because although I can't debug it in browser's inspector (DataTransferItemList has only length property, which is 0), it still works (telling me the file I'm dragging is not allowed when it is not). [Chrome]\nIn Firefox, DataTransferItem items on DataTransferItemList has more visible properties: \njavascript\nkind:\"file\",\ntype:\"application/x-moz-file\"  /// No matter which kind of file I drag\nIn this case, Firefox rejects files that should be accepted... I checked that attr-accept uses the type property...\nSeens like there is no robust way of achieving this while dragging...\nActually, this strategy can lead to false-negative Rejects..\nDoes it deserve a note on Docs?. #362 . The problem I saw is that we can get false-positive results, as you can see in #362.\nFor my usecase, that is not possible. Also having cross-browser inconsistency wouldn't be good for my product, so I gave up this pre-drop checking.... I haven't gone much deeper since then..  Neither tested on enough browsers\nto confirm a wider problem..\nBecause of that bug the feature of my product that uses drop-zone have\ndropped this pre-drop checking... Will try it again soon...\nOn Thu, Jun 8, 2017 at 9:22 PM, Anuj notifications@github.com wrote:\n\n@femesq https://github.com/femesq Hmm.. it seems that bug mentioned in\nFirefox in that thread seems to have been fixed in Firefox 53.\nAlso, if there are other browser quirks other than the Firefox bug, then\nthat would imply that isDragActive or isDragReject are also unreliable -\nhas that been your experience?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/okonet/react-dropzone/issues/356#issuecomment-307262196,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABz8lFFbrFdqXUWx61DbbKn7I335eXGmks5sCJBFgaJpZM4ME2On\n.\n. \n",
    "tswaters": "There seems to be some timing problems here with Edge as well.\nWe have onClick that basically does setState({error: null}) and  onDropRejected that setState({error: 'some string'}) -- we're seeing the onClick fire multiple times, even after onDropRejected -- so the error never causes a re-render with the message.\nI'll see if I can't put together a PR for this.. My mistake, after reading this a bit closer I've got a separate issue, I'll create a different ticket for that.. FWIW, I think dropping of folders will not be possible to fix.  \nUnder current APIS, the inconsistency results from, I think, the  DND spec being ambiguous on how to deal with directories.... all it says is \"files\" -- ctrl-F on that document for directory returns 0 results.  \nWhen dragging a directory most browsers report a single file (or multiple, if multiple directories selected), each \"file\" has a size of 0.  In IE11, it returns an array of 0 for files.\nEhh, having said that there are newer apis we might be able to hook into to get at directories (FileSystemAPI), but the support is not very good: http://caniuse.com/filesystem/embed. Welp.  Turns out those unrelated style fixes that happened automatically broken travis....  \nedit:   I used npm to install dependencies, not yarn.  I think there was likely an upstream change to prettify that caused this to fail......  I'll sort this out tomorrow.. Sure.  The formatting fail was due to using npm instead of yarn for the install.... the automagical eslint --fix did it in a pre-commit hook.  I've fixed up the rest of it.. Dangit.  I'll look into this CI failure shortly... in the middle of other things.  Stay tuned!\nedit - ah... passing the function by reference loses the this binding inside open.  It needs a bind call for that to work properly.. No problem, thanks for the review!. Oops!  Yea, you're right that is totally incorrect.... I'll fix this shortly.. ",
    "tymochko": "Order of method called works fine now.\nBut can still reproduce this one\n\nAlso, if user drag'n'drops folder into Dropzone - File is created with size: 0 in all browsers except IE11, where it is not created at all.. I also experience lack of drag-n-drop on newer versions. Current working version is 5.1.1.\n\nBy the way, some of earlier 6.x.x versions have drag-n-drop but active color is not visible.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #361 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #361   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0bcc23...9e2295f. Read the comment docs.\n. # Codecov Report\nMerging #371 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #371      +/-\n==========================================\n+ Coverage   95.77%   95.91%   +0.14%   \n==========================================\n  Files           3        3            \n  Lines         142      147       +5   \n  Branches       34       36       +2   \n==========================================\n+ Hits          136      141       +5   \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 95.41% <100%> (+0.18%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 399a5a4...57feb98. Read the comment docs.. # Codecov Report\nMerging #373 into master will increase coverage by 1.62%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #373      +/-\n==========================================\n+ Coverage   95.91%   97.54%   +1.62%   \n==========================================\n  Files           3        3            \n  Lines         147      163      +16   \n  Branches       36       39       +3   \n==========================================\n+ Hits          141      159      +18   \n+ Misses          6        4       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.27% <100%> (+1.85%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77a2de9...77ec500. Read the comment docs.. # Codecov Report\nMerging #380 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #380   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       39       39         \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.27% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 91d9156...cdf9ed0. Read the comment docs.. # Codecov Report\nMerging #381 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #381   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       39       39         \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdd28de...2104d3a. Read the comment docs.. # Codecov Report\nMerging #382 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #382   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       39       40    +1   \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.27% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdd28de...06cd3e9. Read the comment docs.. # Codecov Report\nMerging #385 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #385   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fac1513...8ade68e. Read the comment docs.\n. # Codecov Report\nMerging #387 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #387   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       40       40         \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2c579a...e649fe7. Read the comment docs.. # Codecov Report\nMerging #388 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #388   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       40       40         \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.27% <\u00f8> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ddf13f8...bdc826f. Read the comment docs.. # Codecov Report\nMerging #392 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #392   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       40       41    +1   \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.27% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40f81a5...8592457. Read the comment docs.. # Codecov Report\nMerging #393 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #393   +/-\n=======================================\n  Coverage   97.54%   97.54%         \n=======================================\n  Files           3        3         \n  Lines         163      163         \n  Branches       40       40         \n=======================================\n  Hits          159      159         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40f81a5...886c947. Read the comment docs.. # Codecov Report\nMerging #400 into styleguide will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nstyleguide     #400   +/-\n===========================================\n  Coverage       95.77%   95.77%         \n===========================================\n  Files               3        3         \n  Lines             142      142         \n  Branches           34       34         \n===========================================\n  Hits              136      136         \n  Misses              6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 05cdf6b...6dd5675. Read the comment docs.. # Codecov Report\nMerging #401 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #401      +/-\n==========================================\n+ Coverage   97.54%   97.59%   +0.04%   \n==========================================\n  Files           3        3            \n  Lines         163      166       +3   \n  Branches       40       41       +1   \n==========================================\n+ Hits          159      162       +3   \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.33% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 02e1416...82a21f7. Read the comment docs.. # Codecov Report\nMerging #405 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #405   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ff35e14...d5c680c. Read the comment docs.. # Codecov Report\nMerging #406 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #406   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0649ac7...9339e02. Read the comment docs.. # Codecov Report\nMerging #406 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #406   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.33% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0649ac7...9339e02. Read the comment docs.. # Codecov Report\nMerging #410 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #410      +/-\n==========================================\n+ Coverage   97.59%   97.63%   +0.04%   \n==========================================\n  Files           3        3            \n  Lines         166      169       +3   \n  Branches       41       41            \n==========================================\n+ Hits          162      165       +3   \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.41% <100%> (+0.08%) | :arrow_up: |\n| src/getDataTransferItems.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a7042f...b90171b. Read the comment docs.\n. # Codecov Report\nMerging #411 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #411   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4e12701...a561d40. Read the comment docs.\n. # Codecov Report\nMerging #412 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #412   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e3a109c...00dee55. Read the comment docs.\n. # Codecov Report\nMerging #413 into master will not change coverage.\nThe diff coverage is 96.33%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #413   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/getDataTransferItems.js | 100% <100%> (\u00f8) | :arrow_up: |\n| testSetup.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/index.js | 97.41% <96.03%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b83d38d...21e4090. Read the comment docs.\n. # Codecov Report\nMerging #415 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #415   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e822db2...35f1cee. Read the comment docs.\n. # Codecov Report\nMerging #416 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #416   +/-\n=======================================\n  Coverage   97.59%   97.59%         \n=======================================\n  Files           3        3         \n  Lines         166      166         \n  Branches       41       41         \n=======================================\n  Hits          162      162         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04bb052...f7fc635. Read the comment docs.\n. # Codecov Report\nMerging #417 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #417   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72a9d93...20ddac4. Read the comment docs.\n. # Codecov Report\nMerging #421 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #421   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7238dd...3c9ca8f. Read the comment docs.\n. # Codecov Report\nMerging #422 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #422   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7238dd...a614236. Read the comment docs.\n. # Codecov Report\nMerging #422 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #422   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b7238dd...a614236. Read the comment docs.\n. # Codecov Report\nMerging #423 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #423   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c0020d...8ac158f. Read the comment docs.\n. # Codecov Report\nMerging #423 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #423   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c0020d...8ac158f. Read the comment docs.\n. # Codecov Report\nMerging #424 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #424   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c0020d...3ebc891. Read the comment docs.\n. # Codecov Report\nMerging #426 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #426   +/-\n=======================================\n  Coverage   97.63%   97.63%         \n=======================================\n  Files           3        3         \n  Lines         169      169         \n  Branches       41       41         \n=======================================\n  Hits          165      165         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update edb1f0a...a77e4c4. Read the comment docs.\n. # Codecov Report\nMerging #427 into master will increase coverage by 1.18%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #427      +/-\n==========================================\n+ Coverage   97.63%   98.81%   +1.18%   \n==========================================\n  Files           3        3            \n  Lines         169      169            \n  Branches       41       42       +1   \n==========================================\n+ Hits          165      167       +2   \n+ Misses          4        2       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 98.7% <100%> (+1.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8109d48...aad025a. Read the comment docs.\n. # Codecov Report\nMerging #430 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #430   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       41       42    +1   \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.41% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4af1345...d10405f. Read the comment docs.\n. # Codecov Report\nMerging #434 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #434   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 16d9b72...6c3b683. Read the comment docs.\n. # Codecov Report\nMerging #437 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #437      +/-\n==========================================\n+ Coverage   97.64%   97.76%   +0.11%   \n==========================================\n  Files           3        3            \n  Lines         170      179       +9   \n  Branches       42       43       +1   \n==========================================\n+ Hits          166      175       +9   \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.56% <100%> (+0.14%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a5e703...5951d53. Read the comment docs.\n. # Codecov Report\nMerging #437 into master will decrease coverage by 0.47%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #437      +/-\n==========================================\n- Coverage   97.64%   97.17%   -0.48%   \n==========================================\n  Files           3        3            \n  Lines         170      177       +7   \n  Branches       42       43       +1   \n==========================================\n+ Hits          166      172       +6   \n- Misses          4        5       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 96.91% <87.5%> (-0.51%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85b0635...e2e0a7c. Read the comment docs.\n. # Codecov Report\nMerging #441 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #441   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85b0635...4c8ad60. Read the comment docs.\n. # Codecov Report\nMerging #442 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #442      +/-\n==========================================\n- Coverage   97.64%   97.63%   -0.02%   \n==========================================\n  Files           3        3            \n  Lines         170      169       -1   \n  Branches       42       41       -1   \n==========================================\n- Hits          166      165       -1   \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| testSetup.js | 100% <0%> (\u00f8) | :arrow_up: |\n| src/index.js | 97.41% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7c3df4...9932ae6. Read the comment docs.\n. # Codecov Report\nMerging #442 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #442   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7c3df4...a0e8d2f. Read the comment docs.\n. # Codecov Report\nMerging #443 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #443   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f0bcc23...3e02db0. Read the comment docs.\n. # Codecov Report\nMerging #444 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #444   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6f3a0cd...7fae154. Read the comment docs.\n. # Codecov Report\nMerging #444 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #444   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6f3a0cd...7fae154. Read the comment docs.\n. # Codecov Report\nMerging #445 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #445   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eba635...1c7783b. Read the comment docs.\n. # Codecov Report\nMerging #445 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #445   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eba635...a65e03d. Read the comment docs.\n. # Codecov Report\nMerging #446 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #446   +/-\n=======================================\n  Coverage   97.64%   97.64%         \n=======================================\n  Files           3        3         \n  Lines         170      170         \n  Branches       42       42         \n=======================================\n  Hits          166      166         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8eba635...d6d613b. Read the comment docs.\n. # Codecov Report\nMerging #451 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #451   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.56% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b740ef2...8dd2aff. Read the comment docs.\n. # Codecov Report\nMerging #462 into master will decrease coverage by 0.48%.\nThe diff coverage is 92.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #462      +/-\n==========================================\n- Coverage   97.76%   97.28%   -0.49%   \n==========================================\n  Files           3        3            \n  Lines         179      184       +5   \n  Branches       43       45       +2   \n==========================================\n+ Hits          175      179       +4   \n- Misses          4        5       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.04% <92.85%> (-0.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f6d0c7...90ff095. Read the comment docs.\n. # Codecov Report\nMerging #463 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #463   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f6d0c7...257dce9. Read the comment docs.\n. # Codecov Report\nMerging #465 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #465   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfb48e7...5b1f5f1. Read the comment docs.\n. # Codecov Report\nMerging #467 into master will decrease coverage by 0.48%.\nThe diff coverage is 92.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #467      +/-\n==========================================\n- Coverage   97.76%   97.28%   -0.49%   \n==========================================\n  Files           3        3            \n  Lines         179      184       +5   \n  Branches       43       45       +2   \n==========================================\n+ Hits          175      179       +4   \n- Misses          4        5       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.04% <92.85%> (-0.52%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cfdc897...83b9ce2. Read the comment docs.\n. # Codecov Report\nMerging #468 into 4.0 will decrease coverage by 0.91%.\nThe diff coverage is 93.18%.\n\n\n```diff\n@@            Coverage Diff             @@\n4.0     #468      +/-\n==========================================\n- Coverage   97.76%   96.85%   -0.92%   \n==========================================\n  Files           3        4       +1   \n  Lines         179      159      -20   \n  Branches       43       49       +6   \n==========================================\n- Hits          175      154      -21   \n- Misses          4        5       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 100% <100%> (\u00f8) | |\n| src/index.js | 96.4% <92.3%> (-1.16%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f6d0c7...dd328d0. Read the comment docs.\n. # Codecov Report\nMerging #469 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #469   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfb48e7...4afb67f. Read the comment docs.\n. # Codecov Report\nMerging #469 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #469   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfb48e7...4afb67f. Read the comment docs.\n. # Codecov Report\nMerging #471 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #471   +/-\n=======================================\n  Coverage   97.76%   97.76%         \n=======================================\n  Files           3        3         \n  Lines         179      179         \n  Branches       43       43         \n=======================================\n  Hits          175      175         \n  Misses          4        4\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfb48e7...a44adbe. Read the comment docs.\n. # Codecov Report\nMerging #473 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #473      +/-\n==========================================\n+ Coverage   97.76%   97.81%   +0.04%   \n==========================================\n  Files           3        3            \n  Lines         179      183       +4   \n  Branches       43       44       +1   \n==========================================\n+ Hits          175      179       +4   \n  Misses          4        4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.61% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cfdc897...04fb53d. Read the comment docs.\n. # Codecov Report\nMerging #476 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #476   +/-\n=======================================\n  Coverage   97.28%   97.28%         \n=======================================\n  Files           3        3         \n  Lines         184      184         \n  Branches       45       45         \n=======================================\n  Hits          179      179         \n  Misses          5        5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.04% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cf76683...46089a4. Read the comment docs.\n. # Codecov Report\nMerging #478 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #478   +/-\n=======================================\n  Coverage   97.28%   97.28%         \n=======================================\n  Files           3        3         \n  Lines         184      184         \n  Branches       45       45         \n=======================================\n  Hits          179      179         \n  Misses          5        5\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d08eabd...37d612e. Read the comment docs.\n. # Codecov Report\nMerging #478 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #478   +/-\n=======================================\n  Coverage   97.28%   97.28%         \n=======================================\n  Files           3        3         \n  Lines         184      184         \n  Branches       45       45         \n=======================================\n  Hits          179      179         \n  Misses          5        5\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d08eabd...37d612e. Read the comment docs.\n. # Codecov Report\nMerging #483 into master will decrease coverage by 0.46%.\nThe diff coverage is 97.22%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #483      +/-\n==========================================\n- Coverage    96.9%   96.44%   -0.47%   \n==========================================\n  Files           3        3            \n  Lines         194      197       +3   \n  Branches       48       51       +3   \n==========================================\n+ Hits          188      190       +2   \n- Misses          6        7       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 96.49% <100%> (-0.16%) | :arrow_down: |\n| src/utils/index.js | 95.45% <95.45%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20b0650...a73bac8. Read the comment docs.\n. # Codecov Report\nMerging #484 into master will increase coverage by 2.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #484      +/-\n==========================================\n+ Coverage   96.44%   98.47%   +2.03%   \n==========================================\n  Files           3        3            \n  Lines         197      197            \n  Branches       51       51            \n==========================================\n+ Hits          190      194       +4   \n+ Misses          7        3       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 98.83% <100%> (+2.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8c99df...4f521db. Read the comment docs.\n. # Codecov Report\nMerging #489 into master will increase coverage by 0.5%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #489     +/-\n=========================================\n+ Coverage   96.44%   96.95%   +0.5%   \n=========================================\n  Files           3        3           \n  Lines         197      197           \n  Branches       51       51           \n=========================================\n+ Hits          190      191      +1   \n+ Misses          7        6      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <100%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8c99df...7a180d9. Read the comment docs.\n. # Codecov Report\nMerging #491 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #491   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5471a5...1e5821f. Read the comment docs.\n. # Codecov Report\nMerging #493 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #493   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dccb796...99d1661. Read the comment docs.\n. # Codecov Report\nMerging #498 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #498   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 82cb91d...6a03669. Read the comment docs.\n. # Codecov Report\nMerging #504 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #504   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 70c8fc3...111b2c5. Read the comment docs.\n. # Codecov Report\nMerging #505 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #505   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b15fecb...c9187bd. Read the comment docs.\n. # Codecov Report\nMerging #506 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #506   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a45f31...f31fd06. Read the comment docs.\n. # Codecov Report\nMerging #510 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #510   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d270e5...151aa0f. Read the comment docs.\n. # Codecov Report\nMerging #511 into master will decrease coverage by 0.47%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #511      +/-\n==========================================\n- Coverage   99.01%   98.54%   -0.48%   \n==========================================\n  Files           3        3            \n  Lines         204      206       +2   \n  Branches       59       60       +1   \n==========================================\n+ Hits          202      203       +1   \n- Misses          2        3       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 98.85% <66.66%> (-0.57%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afaf401...0da1637. Read the comment docs.\n. # Codecov Report\nMerging #515 into master will decrease coverage by 0.47%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #515      +/-\n==========================================\n- Coverage   96.95%   96.48%   -0.48%   \n==========================================\n  Files           3        3            \n  Lines         197      199       +2   \n  Branches       51       52       +1   \n==========================================\n+ Hits          191      192       +1   \n- Misses          6        7       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 96.53% <66.66%> (-0.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1d270e5...e459f5f. Read the comment docs.\n. # Codecov Report\nMerging #517 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #517   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1fd768b...4649ee9. Read the comment docs.\n. # Codecov Report\nMerging #519 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #519   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 24c6ce5...64053c0. Read the comment docs.\n. # Codecov Report\nMerging #524 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #524   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 913bc97...a22f068. Read the comment docs.\n. # Codecov Report\nMerging #528 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #528   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.07% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 913bc97...a356bba. Read the comment docs.\n. # Codecov Report\nMerging #532 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #532   +/-\n=======================================\n  Coverage   96.95%   96.95%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       51       51         \n=======================================\n  Hits          191      191         \n  Misses          6        6\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 913bc97...3a45fb7. Read the comment docs.\n. # Codecov Report\nMerging #534 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #534      +/-\n==========================================\n- Coverage   99.49%   99.48%   -0.01%   \n==========================================\n  Files           3        3            \n  Lines         197      196       -1   \n  Branches       54       54            \n==========================================\n- Hits          196      195       -1   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 95.23% <100%> (-0.22%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d31ed38...51a1729. Read the comment docs.\n. # Codecov Report\nMerging #537 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #537      +/-\n==========================================\n+ Coverage   96.95%   96.98%   +0.03%   \n==========================================\n  Files           3        3            \n  Lines         197      199       +2   \n  Branches       51       53       +2   \n==========================================\n+ Hits          191      193       +2   \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.1% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 67ffd7c...8b2921b. Read the comment docs.\n. # Codecov Report\nMerging #544 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #544   +/-\n=======================================\n  Coverage   96.98%   96.98%         \n=======================================\n  Files           3        3         \n  Lines         199      199         \n  Branches       53       53         \n=======================================\n  Hits          193      193         \n  Misses          6        6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 97.1% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ccb859f...65ea9e6. Read the comment docs.\n. # Codecov Report\nMerging #546 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #546      +/-\n==========================================\n- Coverage   99.49%   99.49%   -0.01%   \n==========================================\n  Files           3        3            \n  Lines         199      197       -2   \n  Branches       53       53            \n==========================================\n- Hits          198      196       -2   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f83cd5...31e2b1f. Read the comment docs.\n. # Codecov Report\nMerging #547 into master will increase coverage by 2.51%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #547      +/-\n==========================================\n+ Coverage   96.98%   99.49%   +2.51%   \n==========================================\n  Files           3        3            \n  Lines         199      199            \n  Branches       53       53            \n==========================================\n+ Hits          193      198       +5   \n+ Misses          6        1       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (+2.89%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ccb859f...962068c. Read the comment docs.\n. # Codecov Report\nMerging #551 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #551   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       53       54    +1   \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6a63749...02628a8. Read the comment docs.\n. # Codecov Report\nMerging #552 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #552   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       53       53         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 141539e...c1adf7b. Read the comment docs.\n. # Codecov Report\nMerging #553 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #553   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       54       54         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 70ac399...5083861. Read the comment docs.\n. # Codecov Report\nMerging #555 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #555   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       54       54         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 223b946...1cd8cb6. Read the comment docs.\n. # Codecov Report\nMerging #556 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #556      +/-\n==========================================\n- Coverage   99.49%   99.48%   -0.01%   \n==========================================\n  Files           3        3            \n  Lines         197      196       -1   \n  Branches       54       55       +1   \n==========================================\n- Hits          196      195       -1   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8e4ae3f...fd5d5d9. Read the comment docs.\n. # Codecov Report\nMerging #558 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #558   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       54       54         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d31ed38...be194be. Read the comment docs.\n. # Codecov Report\nMerging #561 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #561      +/-\n==========================================\n+ Coverage   99.48%   99.49%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         196      197       +1   \n  Branches       55       56       +1   \n==========================================\n+ Hits          195      196       +1   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0eb69bb...296a75b. Read the comment docs.\n. # Codecov Report\nMerging #564 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #564   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d4e7763...a768f74. Read the comment docs.\n. # Codecov Report\nMerging #565 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #565      +/-\n==========================================\n+ Coverage   99.48%   99.49%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         196      198       +2   \n  Branches       55       54       -1   \n==========================================\n+ Hits          195      197       +2   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0eb69bb...7b5a0bf. Read the comment docs.\n. # Codecov Report\nMerging #568 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #568   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e62340...5ddab51. Read the comment docs.\n. # Codecov Report\nMerging #569 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #569   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e62340...dc83ae0. Read the comment docs.\n. # Codecov Report\nMerging #571 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #571   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 252253d...628f135. Read the comment docs.\n. # Codecov Report\nMerging #573 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #573   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4530afb...5488320. Read the comment docs.\n. # Codecov Report\nMerging #574 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #574   +/-\n=======================================\n  Coverage   99.49%   99.49%         \n=======================================\n  Files           3        3         \n  Lines         197      197         \n  Branches       56       56         \n=======================================\n  Hits          196      196         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4530afb...d143ea3. Read the comment docs.\n. # Codecov Report\nMerging #578 into master will decrease coverage by 0.46%.\nThe diff coverage is 88.88%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #578      +/-\n==========================================\n- Coverage   99.49%   99.02%   -0.47%   \n==========================================\n  Files           3        3            \n  Lines         197      205       +8   \n  Branches       56       60       +4   \n==========================================\n+ Hits          196      203       +7   \n- Misses          1        2       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 96.42% <100%> (+0.97%) | :arrow_up: |\n| src/index.js | 99.42% <66.66%> (-0.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c84078...e73ce8e. Read the comment docs.\n. # Codecov Report\nMerging #591 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #591   +/-\n=======================================\n  Coverage   99.05%   99.05%         \n=======================================\n  Files           3        3         \n  Lines         211      211         \n  Branches       60       60         \n=======================================\n  Hits          209      209         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b65625d...861fe0b. Read the comment docs.\n. # Codecov Report\nMerging #595 into master will decrease coverage by 0.48%.\nThe diff coverage is 97.84%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #595      +/-\n==========================================\n- Coverage   99.02%   98.54%   -0.49%   \n==========================================\n  Files           3        4       +1   \n  Lines         205      274      +69   \n  Branches       60       75      +15   \n==========================================\n+ Hits          203      270      +67   \n- Misses          2        4       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <100%> (\u00f8) | :arrow_up: |\n| src/utils/Html5FileSelector.js | 97.05% <97.05%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72abe1d...ae6716f. Read the comment docs.\n. # Codecov Report\nMerging #601 into 4.0 will increase coverage by 1.26%.\nThe diff coverage is 98.09%.\n\n\n```diff\n@@            Coverage Diff             @@\n4.0     #601      +/-\n==========================================\n+ Coverage   97.76%   99.02%   +1.26%   \n==========================================\n  Files           3        3            \n  Lines         179      206      +27   \n  Branches       43       60      +17   \n==========================================\n+ Hits          175      204      +29   \n+ Misses          4        2       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 96.42% <96.42%> (\u00f8) | |\n| src/index.js | 99.42% <98.7%> (+1.86%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dfb48e7...36eee4a. Read the comment docs.\n. # Codecov Report\nMerging #603 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #603   +/-\n=======================================\n  Coverage   99.02%   99.02%         \n=======================================\n  Files           3        3         \n  Lines         205      205         \n  Branches       60       60         \n=======================================\n  Hits          203      203         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72abe1d...b5fdc72. Read the comment docs.\n. # Codecov Report\nMerging #606 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #606   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.41% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d7846a1...d4d97cb. Read the comment docs.\n. # Codecov Report\nMerging #608 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #608   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afaf401...2701b64. Read the comment docs.\n. # Codecov Report\nMerging #611 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #611      +/-\n==========================================\n- Coverage   99.02%   99.01%   -0.01%   \n==========================================\n  Files           3        3            \n  Lines         205      204       -1   \n  Branches       60       59       -1   \n==========================================\n- Hits          203      202       -1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.41% <100%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72abe1d...a0ae02f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (feature/remove-style-management@fa10135). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@                        Coverage Diff                         @@\nfeature/remove-style-management     #612   +/-\n==================================================================\n  Coverage                                   ?   96.85%         \n==================================================================\n  Files                                      ?        4         \n  Lines                                      ?      159         \n  Branches                                   ?       49         \n==================================================================\n  Hits                                       ?      154         \n  Misses                                     ?        5         \n  Partials                                   ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fa10135...0263e36. Read the comment docs.\n. # Codecov Report\nMerging #613 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #613      +/-\n==========================================\n+ Coverage   99.01%   99.02%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         204      206       +2   \n  Branches       59       60       +1   \n==========================================\n+ Hits          202      204       +2   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afaf401...5c2aa2e. Read the comment docs.\n. # Codecov Report\nMerging #615 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #615   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.41% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 221263e...f174b13. Read the comment docs.\n. # Codecov Report\nMerging #616 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #616      +/-\n==========================================\n+ Coverage   99.01%   99.02%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         204      205       +1   \n  Branches       59       59            \n==========================================\n+ Hits          202      203       +1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 96.42% <\u00f8> (\u00f8) | :arrow_up: |\n| src/index.js | 99.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 28526fe...de79247. Read the comment docs.\n. # Codecov Report\nMerging #617 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #617   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f66b75...2fa793a. Read the comment docs.\n. # Codecov Report\nMerging #619 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #619      +/-\n==========================================\n+ Coverage   99.05%   99.09%   +0.04%   \n==========================================\n  Files           3        3            \n  Lines         212      222      +10   \n  Branches       60       64       +4   \n==========================================\n+ Hits          210      220      +10   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.44% <100%> (+0.01%) | :arrow_up: |\n| src/utils/index.js | 97.05% <100%> (+0.63%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 343d41f...39e79f4. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (feature/remove-style-management@7ec6070). Click here to learn what that means.\nThe diff coverage is 92.5%.\n\n\n```diff\n@@                        Coverage Diff                         @@\nfeature/remove-style-management     #620   +/-\n==================================================================\n  Coverage                                   ?   96.85%         \n==================================================================\n  Files                                      ?        4         \n  Lines                                      ?      159         \n  Branches                                   ?       49         \n==================================================================\n  Hits                                       ?      154         \n  Misses                                     ?        5         \n  Partials                                   ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils.js | 100% <100%> (\u00f8) | |\n| src/index.js | 96.4% <91.42%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7ec6070...fe5abee. Read the comment docs.\n. # Codecov Report\nMerging #621 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #621   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41f00de...72b326d. Read the comment docs.\n. # Codecov Report\nMerging #623 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #623      +/-\n==========================================\n+ Coverage   99.01%   99.03%   +0.01%   \n==========================================\n  Files           3        3            \n  Lines         204      208       +4   \n  Branches       59       60       +1   \n==========================================\n+ Hits          202      206       +4   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.43% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d12f9f6...4cc7fc1. Read the comment docs.\n. # Codecov Report\nMerging #625 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #625   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.41% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d12f9f6...ca0a0a0. Read the comment docs.\n. # Codecov Report\nMerging #628 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #628      +/-\n==========================================\n+ Coverage   99.02%   99.02%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         205      206       +1   \n  Branches       59       60       +1   \n==========================================\n+ Hits          203      204       +1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da18e76...2787e18. Read the comment docs.\n. # Codecov Report\nMerging #632 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #632   +/-\n=======================================\n  Coverage   99.01%   99.01%         \n=======================================\n  Files           3        3         \n  Lines         204      204         \n  Branches       59       59         \n=======================================\n  Hits          202      202         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41f00de...93f9f76. Read the comment docs.\n. # Codecov Report\nMerging #641 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #641   +/-\n=======================================\n  Coverage   99.02%   99.02%         \n=======================================\n  Files           3        3         \n  Lines         205      205         \n  Branches       59       59         \n=======================================\n  Hits          203      203         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 71a54ad...96ee13a. Read the comment docs.\n. # Codecov Report\nMerging #642 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #642   +/-\n=======================================\n  Coverage   99.02%   99.02%         \n=======================================\n  Files           3        3         \n  Lines         206      206         \n  Branches       60       60         \n=======================================\n  Hits          204      204         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 739c182...523089e. Read the comment docs.\n. # Codecov Report\nMerging #643 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #643      +/-\n==========================================\n+ Coverage   99.02%   99.04%   +0.01%   \n==========================================\n  Files           3        3            \n  Lines         206      209       +3   \n  Branches       60       60            \n==========================================\n+ Hits          204      207       +3   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <\u00f8> (\u00f8) | :arrow_up: |\n| testSetup.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f9fc440...6cad586. Read the comment docs.\n. # Codecov Report\nMerging #645 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #645   +/-\n=======================================\n  Coverage   99.02%   99.02%         \n=======================================\n  Files           3        3         \n  Lines         206      206         \n  Branches       60       60         \n=======================================\n  Hits          204      204         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| testSetup.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 25852bb...54ccca9. Read the comment docs.\n. # Codecov Report\nMerging #651 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #651   +/-\n=======================================\n  Coverage   99.04%   99.04%         \n=======================================\n  Files           3        3         \n  Lines         209      209         \n  Branches       60       60         \n=======================================\n  Hits          207      207         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a886fe...c4488ea. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a5b2885). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #654   +/-\n=========================================\n  Coverage          ?   99.04%         \n=========================================\n  Files             ?        3         \n  Lines             ?      209         \n  Branches          ?       60         \n=========================================\n  Hits              ?      207         \n  Misses            ?        2         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5b2885...f8830af. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a5b2885). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #655   +/-\n=========================================\n  Coverage          ?   99.04%         \n=========================================\n  Files             ?        3         \n  Lines             ?      209         \n  Branches          ?       60         \n=========================================\n  Hits              ?      207         \n  Misses            ?        2         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.42% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5b2885...73dffe9. Read the comment docs.\n. # Codecov Report\nMerging #657 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #657      +/-\n==========================================\n+ Coverage   99.04%   99.05%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         209      211       +2   \n  Branches       60       60            \n==========================================\n+ Hits          207      209       +2   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.43% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8ad99a7...eab68eb. Read the comment docs.\n. # Codecov Report\nMerging #662 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #662   +/-\n=======================================\n  Coverage   99.05%   99.05%         \n=======================================\n  Files           3        3         \n  Lines         212      212         \n  Branches       60       60         \n=======================================\n  Hits          210      210         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b33ea28...8fd1c15. Read the comment docs.\n. # Codecov Report\nMerging #663 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #663   +/-\n=======================================\n  Coverage   99.09%   99.09%         \n=======================================\n  Files           3        3         \n  Lines         222      222         \n  Branches       64       64         \n=======================================\n  Hits          220      220         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9f7e09c...05d6d51. Read the comment docs.\n. # Codecov Report\nMerging #667 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #667      +/-\n==========================================\n+ Coverage   99.05%   99.05%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         211      212       +1   \n  Branches       60       60            \n==========================================\n+ Hits          209      210       +1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.43% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b04bde...134462c. Read the comment docs.\n. # Codecov Report\nMerging #671 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #671   +/-\n=======================================\n  Coverage   99.09%   99.09%         \n=======================================\n  Files           3        3         \n  Lines         222      222         \n  Branches       64       64         \n=======================================\n  Hits          220      220         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60d995e...b1e7562. Read the comment docs.\n. # Codecov Report\nMerging #673 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #673   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files           3        3         \n  Lines         217      217         \n  Branches       63       63         \n=======================================\n  Hits          213      213         \n  Misses          3        3         \n  Partials        1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 78d8eed...03c039d. Read the comment docs.\n. # Codecov Report\nMerging #678 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #678      +/-\n=========================================\n+ Coverage   99.09%   99.1%   +<.01%   \n=========================================\n  Files           3       3            \n  Lines         222     224       +2   \n  Branches       64      66       +2   \n=========================================\n+ Hits          220     222       +2   \n  Misses          2       2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.22% <100%> (+0.16%) | :arrow_up: |\n| src/index.js | 99.44% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f836d38...8ff9970. Read the comment docs.\n. # Codecov Report\nMerging #680 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #680      +/-\n==========================================\n+ Coverage    99.1%   99.11%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         224      225       +1   \n  Branches       66       68       +2   \n==========================================\n+ Hits          222      223       +1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.45% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f016c8d...b176011. Read the comment docs.\n. # Codecov Report\nMerging #682 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #682   +/-\n======================================\n  Coverage    99.1%   99.1%         \n======================================\n  Files           3       3         \n  Lines         224     224         \n  Branches       66      66         \n======================================\n  Hits          222     222         \n  Misses          2       2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5d7211...f180def. Read the comment docs.\n. # Codecov Report\nMerging #683 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #683   +/-\n=======================================\n  Coverage   99.11%   99.11%         \n=======================================\n  Files           3        3         \n  Lines         226      226         \n  Branches       68       68         \n=======================================\n  Hits          224      224         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.45% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b6aab86...44d95d7. Read the comment docs.\n. # Codecov Report\nMerging #684 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #684   +/-\n======================================\n  Coverage    99.1%   99.1%         \n======================================\n  Files           3       3         \n  Lines         224     224         \n  Branches       66      66         \n======================================\n  Hits          222     222         \n  Misses          2       2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5d7211...af78037. Read the comment docs.\n. # Codecov Report\nMerging #688 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #688   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         216      216         \n  Branches       65       65         \n=======================================\n  Hits          215      215         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9968ca8...4692948. Read the comment docs.\n. # Codecov Report\nMerging #690 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #690   +/-\n=======================================\n  Coverage   99.11%   99.11%         \n=======================================\n  Files           3        3         \n  Lines         226      226         \n  Branches       68       68         \n=======================================\n  Hits          224      224         \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.45% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f37fb5b...9d59799. Read the comment docs.\n. # Codecov Report\nMerging #692 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #692      +/-\n==========================================\n+ Coverage   99.11%   99.11%   +<.01%   \n==========================================\n  Files           3        3            \n  Lines         225      226       +1   \n  Branches       68       68            \n==========================================\n+ Hits          223      224       +1   \n  Misses          2        2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.45% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e9ff52...f832692. Read the comment docs.\n. # Codecov Report\nMerging #693 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #693   +/-\n=======================================\n  Coverage   99.11%   99.11%         \n=======================================\n  Files           3        3         \n  Lines         225      225         \n  Branches       68       68         \n=======================================\n  Hits          223      223         \n  Misses          2        2\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d6cc063...ea65c15. Read the comment docs.\n. # Codecov Report\nMerging #694 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #694   +/-\n=======================================\n  Coverage   98.15%   98.15%         \n=======================================\n  Files           3        3         \n  Lines         217      217         \n  Branches       63       63         \n=======================================\n  Hits          213      213         \n  Misses          3        3         \n  Partials        1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.43% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5fedd14...49a0d9a. Read the comment docs.\n. # Codecov Report\nMerging #695 into master will decrease coverage by 0.95%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #695      +/-\n==========================================\n- Coverage   99.11%   98.15%   -0.96%   \n==========================================\n  Files           3        3            \n  Lines         226      217       -9   \n  Branches       68       63       -5   \n==========================================\n- Hits          224      213      -11   \n- Misses          2        3       +1   \n- Partials        0        1       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 99.43% <100%> (-0.02%) | :arrow_down: |\n| src/utils/index.js | 90.9% <100%> (-6.32%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd99719...1dcd832. Read the comment docs.\n. # Codecov Report\nMerging #699 into master will increase coverage by 1.38%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #699      +/-\n==========================================\n+ Coverage   98.15%   99.54%   +1.38%   \n==========================================\n  Files           3        3            \n  Lines         217      219       +2   \n  Branches       63       64       +1   \n==========================================\n+ Hits          213      218       +5   \n+ Misses          3        1       -2   \n+ Partials        1        0       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (+0.56%) | :arrow_up: |\n| src/utils/index.js | 97.14% <100%> (+6.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb26403...0f20a1c. Read the comment docs.\n. # Codecov Report\nMerging #700 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #700      +/-\n=========================================\n+ Coverage   99.54%   99.6%   +0.06%   \n=========================================\n  Files           3       3            \n  Lines         219     254      +35   \n  Branches       64      80      +16   \n=========================================\n+ Hits          218     253      +35   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4578f1b...21fb046. Read the comment docs.\n. # Codecov Report\nMerging #701 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #701      +/-\n==========================================\n+ Coverage   99.54%   99.55%   +0.01%   \n==========================================\n  Files           3        3            \n  Lines         219      225       +6   \n  Branches       64       66       +2   \n==========================================\n+ Hits          218      224       +6   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 14e6b67...996615c. Read the comment docs.\n. # Codecov Report\nMerging #702 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #702   +/-\n=======================================\n  Coverage   99.54%   99.54%         \n=======================================\n  Files           3        3         \n  Lines         219      219         \n  Branches       64       64         \n=======================================\n  Hits          218      218         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4578f1b...6fde6ba. Read the comment docs.\n. # Codecov Report\nMerging #707 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #707   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         216      216         \n  Branches       65       65         \n=======================================\n  Hits          215      215         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a93e426...8237c9a. Read the comment docs.\n. # Codecov Report\nMerging #708 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #708      +/-\n==========================================\n- Coverage   99.55%   99.53%   -0.02%   \n==========================================\n  Files           3        2       -1   \n  Lines         225      216       -9   \n  Branches       66       65       -1   \n==========================================\n- Hits          224      215       -9   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd65863...33014b9. Read the comment docs.\n. # Codecov Report\nMerging #712 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #712   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         216      216         \n  Branches       65       65         \n=======================================\n  Hits          215      215         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ff2b615...2b7b217. Read the comment docs.\n. # Codecov Report\nMerging #717 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #717      +/-\n=========================================\n- Coverage   99.53%   99.5%   -0.03%   \n=========================================\n  Files           2       2            \n  Lines         216     203      -13   \n  Branches       65      72       +7   \n=========================================\n- Hits          215     202      -13   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 97.5% <100%> (+0.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9968ca8...4063844. Read the comment docs.\n. # Codecov Report\nMerging #719 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #719   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         216      216         \n  Branches       65       65         \n=======================================\n  Hits          215      215         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3575922...1a48136. Read the comment docs.\n. # Codecov Report\nMerging #725 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #725      +/-\n=========================================\n- Coverage    99.5%   99.5%   -0.01%   \n=========================================\n  Files           2       2            \n  Lines         203     201       -2   \n  Branches       72      71       -1   \n=========================================\n- Hits          202     200       -2   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 37306d9...330eed7. Read the comment docs.\n. # Codecov Report\nMerging #725 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #725      +/-\n=========================================\n- Coverage    99.5%   99.5%   -0.01%   \n=========================================\n  Files           2       2            \n  Lines         203     201       -2   \n  Branches       72      71       -1   \n=========================================\n- Hits          202     200       -2   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 37306d9...330eed7. Read the comment docs.\n. # Codecov Report\nMerging #731 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #731      +/-\n=========================================\n+ Coverage    99.5%   99.5%   +<.01%   \n=========================================\n  Files           2       2            \n  Lines         201     203       +2   \n  Branches       71      72       +1   \n=========================================\n+ Hits          200     202       +2   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8e3ad1...7f93f6e. Read the comment docs.\n. # Codecov Report\nMerging #731 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #731      +/-\n=========================================\n+ Coverage    99.5%   99.5%   +<.01%   \n=========================================\n  Files           2       2            \n  Lines         201     204       +3   \n  Branches       71      74       +3   \n=========================================\n+ Hits          200     203       +3   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8e3ad1...6cf7de1. Read the comment docs.\n. # Codecov Report\nMerging #733 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #733   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d4ee298...fdf4909. Read the comment docs.\n. # Codecov Report\nMerging #733 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #733   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d4ee298...fdf4909. Read the comment docs.\n. # Codecov Report\nMerging #737 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #737   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ed0a82...e7735e0. Read the comment docs.\n. # Codecov Report\nMerging #737 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #737   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ed0a82...e7735e0. Read the comment docs.\n. # Codecov Report\nMerging #742 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #742   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ed0a82...f824214. Read the comment docs.\n. # Codecov Report\nMerging #742 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #742   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ed0a82...f824214. Read the comment docs.\n. # Codecov Report\nMerging #747 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #747   +/-\n======================================\n  Coverage    99.5%   99.5%         \n======================================\n  Files           2       2         \n  Lines         203     203         \n  Branches       72      72         \n======================================\n  Hits          202     202         \n  Misses          1       1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdc8e71...768b79e. Read the comment docs.\n. # Codecov Report\nMerging #748 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #748      +/-\n==========================================\n+ Coverage   99.51%   99.53%   +0.02%   \n==========================================\n  Files           2        2            \n  Lines         205      217      +12   \n  Branches       73       77       +4   \n==========================================\n+ Hits          204      216      +12   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 98.07% <100%> (+0.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9d9d0b...bb30fc0. Read the comment docs.\n. # Codecov Report\nMerging #748 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #748      +/-\n==========================================\n+ Coverage    99.5%   99.53%   +0.03%   \n==========================================\n  Files           2        2            \n  Lines         203      217      +14   \n  Branches       72       77       +5   \n==========================================\n+ Hits          202      216      +14   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 98.07% <100%> (+0.57%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 615bb72...4303957. Read the comment docs.\n. # Codecov Report\nMerging #751 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #751      +/-\n==========================================\n+ Coverage    99.5%   99.51%   +<.01%   \n==========================================\n  Files           2        2            \n  Lines         203      205       +2   \n  Branches       72       73       +1   \n==========================================\n+ Hits          202      204       +2   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 615bb72...d388884. Read the comment docs.\n. # Codecov Report\nMerging #754 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #754   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db88425...e247ac6. Read the comment docs.\n. # Codecov Report\nMerging #754 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #754   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db88425...e247ac6. Read the comment docs.\n. # Codecov Report\nMerging #757 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #757   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db88425...0f1531e. Read the comment docs.\n. # Codecov Report\nMerging #757 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #757   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db88425...0f1531e. Read the comment docs.\n. # Codecov Report\nMerging #758 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #758      +/-\n=========================================\n- Coverage   99.53%   99.5%   -0.04%   \n=========================================\n  Files           2       2            \n  Lines         217     201      -16   \n  Branches       77      71       -6   \n=========================================\n- Hits          216     200      -16   \n  Misses          1       1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.56% <\u00f8> (-0.52%) | :arrow_down: |\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1402362...e6f0424. Read the comment docs.\n. # Codecov Report\nMerging #759 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #759   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1402362...5474ec4. Read the comment docs.\n. # Codecov Report\nMerging #759 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #759   +/-\n=======================================\n  Coverage   99.53%   99.53%         \n=======================================\n  Files           2        2         \n  Lines         217      217         \n  Branches       77       77         \n=======================================\n  Hits          216      216         \n  Misses          1        1\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1402362...5474ec4. Read the comment docs.\n. # Codecov Report\nMerging #760 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #760      +/-\n==========================================\n- Coverage   99.53%   99.52%   -0.02%   \n==========================================\n  Files           2        2            \n  Lines         217      212       -5   \n  Branches       77       75       -2   \n==========================================\n- Hits          216      211       -5   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1402362...26bbf78. Read the comment docs.\n. # Codecov Report\nMerging #760 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #760      +/-\n==========================================\n- Coverage   99.53%   99.52%   -0.02%   \n==========================================\n  Files           2        2            \n  Lines         217      212       -5   \n  Branches       77       75       -2   \n==========================================\n- Hits          216      211       -5   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1402362...26bbf78. Read the comment docs.\n. # Codecov Report\nMerging #761 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #761      +/-\n==========================================\n- Coverage   99.53%   99.51%   -0.03%   \n==========================================\n  Files           2        2            \n  Lines         217      206      -11   \n  Branches       77       73       -4   \n==========================================\n- Hits          216      205      -11   \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.56% <\u00f8> (-0.52%) | :arrow_down: |\n| src/index.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3655a0d...8c266c0. Read the comment docs.\n. # Codecov Report\nMerging #767 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #767   +/-\n=======================================\n  Coverage   99.51%   99.51%         \n=======================================\n  Files           2        2         \n  Lines         206      206         \n  Branches       73       73         \n=======================================\n  Hits          205      205         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2fc6e06...c31e06e. Read the comment docs.\n. # Codecov Report\nMerging #767 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #767   +/-\n=======================================\n  Coverage   99.51%   99.51%         \n=======================================\n  Files           2        2         \n  Lines         206      206         \n  Branches       73       73         \n=======================================\n  Hits          205      205         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2fc6e06...c31e06e. Read the comment docs.\n. # Codecov Report\nMerging #771 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #771   +/-\n=======================================\n  Coverage   99.51%   99.51%         \n=======================================\n  Files           2        2         \n  Lines         206      206         \n  Branches       73       75    +2   \n=======================================\n  Hits          205      205         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d74cd1...f95e90e. Read the comment docs.\n. # Codecov Report\nMerging #771 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #771   +/-\n=======================================\n  Coverage   99.51%   99.51%         \n=======================================\n  Files           2        2         \n  Lines         206      206         \n  Branches       73       75    +2   \n=======================================\n  Hits          205      205         \n  Misses          1        1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d74cd1...f95e90e. Read the comment docs.\n. # Codecov Report\nMerging #772 into master will increase coverage by 0.48%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #772      +/-\n========================================\n+ Coverage   99.51%   100%   +0.48%   \n========================================\n  Files           2      2            \n  Lines         206    186      -20   \n  Branches       73     57      -16   \n========================================\n- Hits          205    186      -19   \n+ Misses          1      0       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 100% <100%> (+2.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d74cd1...22459f2. Read the comment docs.\n. # Codecov Report\nMerging #772 into master will increase coverage by 0.48%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #772      +/-\n========================================\n+ Coverage   99.51%   100%   +0.48%   \n========================================\n  Files           2      2            \n  Lines         206    177      -29   \n  Branches       73     57      -16   \n========================================\n- Hits          205    177      -28   \n+ Misses          1      0       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n| src/utils/index.js | 100% <100%> (+2.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d74cd1...88a6ae5. Read the comment docs.\n. # Codecov Report\nMerging #774 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #774   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5398f44...f70af80. Read the comment docs.\n. # Codecov Report\nMerging #774 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #774   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    188         \n  Branches       62     62         \n=====================================\n  Hits          188    188\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0bb8203...1038947. Read the comment docs.\n. # Codecov Report\nMerging #778 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #778   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5398f44...af69203. Read the comment docs.\n. # Codecov Report\nMerging #778 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #778   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5398f44...af69203. Read the comment docs.\n. # Codecov Report\nMerging #779 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #779   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     58    +1   \n=====================================\n  Hits          177    177\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 027dd51...911515d. Read the comment docs.\n. # Codecov Report\nMerging #779 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #779   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    188         \n  Branches       61     62    +1   \n=====================================\n  Hits          188    188\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb9f1e3...4487188. Read the comment docs.\n. # Codecov Report\nMerging #786 into master will decrease coverage by 0.55%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #786      +/-\n==========================================\n- Coverage     100%   99.44%   -0.56%   \n==========================================\n  Files           2        2            \n  Lines         177      179       +2   \n  Branches       57       60       +3   \n==========================================\n+ Hits          177      178       +1   \n- Misses          0        1       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.22% <66.66%> (-2.78%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 027dd51...4d159e4. Read the comment docs.\n. # Codecov Report\nMerging #786 into master will decrease coverage by 0.55%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #786      +/-\n==========================================\n- Coverage     100%   99.44%   -0.56%   \n==========================================\n  Files           2        2            \n  Lines         177      179       +2   \n  Branches       57       60       +3   \n==========================================\n+ Hits          177      178       +1   \n- Misses          0        1       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/utils/index.js | 97.22% <66.66%> (-2.78%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 027dd51...4d159e4. Read the comment docs.\n. # Codecov Report\nMerging #788 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #788   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 027dd51...6cb930c. Read the comment docs.\n. # Codecov Report\nMerging #788 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #788   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 027dd51...6cb930c. Read the comment docs.\n. # Codecov Report\nMerging #789 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #789   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74b3a95...b6c0371. Read the comment docs.\n. # Codecov Report\nMerging #789 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #789   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    177         \n  Branches       57     57         \n=====================================\n  Hits          177    177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74b3a95...b6c0371. Read the comment docs.\n. # Codecov Report\nMerging #790 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #790   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    188   +11   \n  Branches       57     61    +4   \n=====================================\n+ Hits          177    188   +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 387ba90...3d2f792. Read the comment docs.\n. # Codecov Report\nMerging #790 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #790   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         177    188   +11   \n  Branches       57     61    +4   \n=====================================\n+ Hits          177    188   +11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 387ba90...3d2f792. Read the comment docs.\n. # Codecov Report\nMerging #792 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #792   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    188         \n  Branches       62     62         \n=====================================\n  Hits          188    188\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 758ec11...0a69c42. Read the comment docs.\n. # Codecov Report\nMerging #792 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #792   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    188         \n  Branches       62     62         \n=====================================\n  Hits          188    188\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 758ec11...0a69c42. Read the comment docs.\n. # Codecov Report\nMerging #793 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #793   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    189    +1   \n  Branches       62     62         \n=====================================\n+ Hits          188    189    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 758ec11...28ffd66. Read the comment docs.\n. # Codecov Report\nMerging #793 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster   #793   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           2      2         \n  Lines         188    189    +1   \n  Branches       62     62         \n=====================================\n+ Hits          188    189    +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| src/index.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 758ec11...28ffd66. Read the comment docs.\n. \n",
    "releaf": "Hopefully this gets some traction. Please feel free to add some clarity around the issue if you can. \nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1342057. ",
    "jisaacks": "Got it. Makes total sense. Thanks for the quick response. . ",
    "cephirothdy2j": "Heeding the deprecation warnings, this morning I went into my project and changed my implementation of the dropzone component. However, given the absence of style, activeStyle and rejectStyle props, the component falls back to an inline-styled box. If I want to roll my own custom dropzone UI, how should I be handling this?\nBefore (3.10.0) and after (3.11.0 re-implemented) screenshots attached.\n\n\n. Thanks. I guess I'll stick with 3.10.0 until those are ready.\nP.S. love the plugin! Thanks for maintaining it.. ",
    "danyim": "I'm also seeing these deprecation warnings after upgrading without a clear alternative. How can you use a function as children to override the default styling?\n Prop className is deprecated. Use function as children to style dropzone and its contents..\n",
    "kachkaev": "Hi @okonet,\nJust curious: is there any way to disable deprecation warnings in >3.11? I did replace the child component with a function in 3.11, removed className and activeClassname, so my component started looking like this:\njs\n<Dropzone onDrop={this.onDrop.bind(this)} multiple={false}>\n{({ isDragActive }) => (/*...*/)}\n</Dropzone>\nDespite that, the console showed me the following:\nProp maxSize is deprecated and will be removed in the next major release\nProp minSize is deprecated and will be removed in the next major release\nAdding style={{}} as you suggested above, created another warning:\nProp style is deprecated. Use function as children to style dropzone and its contents.\nI understand that the new version is WIP, just raising this because the warnings are a bit distracting. It feels tempting to get rid of them, but there seems to be no way to do so. I spent over an hour trying to investigate where they were coming from, and finally found this discussion.\nIf Dropzone is a dependency of a dependency, investigation may take even longer. An example of such case is https://github.com/OlegIlyenko/graphiql-workspace/issues/5#issuecomment-283588414.\nThanks for working on Dropzone and for your recent efforts to make its API even cleaner!. ",
    "oshalygin": "Really awesome project @okonet , thanks for all the hard work on it.\nA few suggestions:\n The new release should have a major version bump(semver) if there are props that are deprecated.\n Errors should be thrown for props that people are using that are deprecated, giving them an easy way to identify whats going on.\n* Those of us that haven't upgraded to the latest version(IE 3.X.X), shouldn't see the warnings.\nThe consumers of this component should be referencing the CHANGELOG.md which should indicate the deprecated props and give them some indication of what they should be using instead.\nJust a few suggestions, totally open to helping as well, but I rather know whats accepted before submitting a PR :)\nThanks again @okonet . ",
    "shwin7": "Hi @okonet \nIf maxSize and minSize are deprecated, how will size validation be done? Thanks.\n. Sure, that makes sense. Thanks for your response!. ",
    "leyyinad": "So there's no way to ged rid of the maxSize/minSize warnings right now, because if I don't set them, their defaults will be automatically applied, right?\nIf I remove the now deprecated className prop, The component will add hardcoded styles which I won't be able to remove. I strongly vote for only adding deprecation warnings for props that actually can be unspecified.. I'm sorry, this is already discussed here #364. ",
    "vict-shevchenko": "Hi! I really enjoyed existing declarative way of working with Dropzone. Are you planning to keep it?\nWhat problems solve(benefits give) switching to styling as function as a children?. ",
    "rijk": "@okonet is the documentation up to date with the 'new' way of doing things?. Yeah, don't take it personal, @okonet . Obviously we really like your work, otherwise we wouldn't be here using it! . ",
    "killroy42": "Deprecation warnings aren't really useful if you cannot actually fix the behaviour. I only just started using this component and never used any of the deprecated features, and still get warnings about things I do not control. Normally that only happens if there is a bug in the component itself relative to third party library deprecations. Only mentioning it as I also spend several hours until I found this and if you multiply this by all the people not commenting on it, that's a lot of lost work, likely more then without that warning.. Well, as I mentioned, avoid unavoidable deprecation warnings. Something is only really deprecated if there is an alternative to the functionality, or if the functionality is removed. In this case, it appears there is an alternative but not 100%, such that the warnings become unavoidable. Using the \"new syntax/api\" should simply not cause the warnings. I know you added warnings to help, but in this case you may have been better of without the warnings. After all, you spend time adding them as well. So it's not just affecting other users, but yourself as well. I'm not posting here to give you a hard time. I'm posting here to give you awareness that your good intentions with the thorough warnings may be misguided. I ONLY posted, since somebody else posted the same issue, and often times maintainers will not act unless there is a critical mass response. As I start using this component, I will happily contribute if it serves my use case.\nThanks for your efforts and time, and don't take github comments personal. That way lies madness!. ",
    "samlogan": "I hear you and get your motivation to keep things minimal. However, I am using Dropzone on a recent project and images uploaded on a mobile device were rotating incorrectly in the preview. After checking the issue log I found this where you mentioned you would accept a PR that fixes it. Feel free to close this if you feel it is not Dropzone's concern. IMO I would like this to work out of the box.. I like the sound of making the preview a separate component. I can create a new PR with this added. No stress, will let you know how it goes. ",
    "mustafawm": "Hi @okonet, I was referring to this addRemoveLink. Basically, once you drop a file on the box, a hyperlink will/can be displayed to allow the user to remove that file from the queue.\n\n\nThe displaying of the link is optional of course, and does not have to appear on the dropping area. It's just a prop on the file.\n. ",
    "malimccalla": "Anyone else who might want to do this I solved it by doing the following\nonDrop(files) {\n    files.forEach((file) => {\n    const audio = document.createElement('AUDIO');\n    audio.src = file.preview;\n    audio.addEventListener('loadedmetadata', () => {\n       console.log(audio.duration);\n    });\n  }\nNot sure if this is the right way to do it but it works for what I'm doing\n. ",
    "muhilham": "do you know how to get video duration if file is in .avi format? . ",
    "RaulTsc": "Let me know if you need any help with pushing this forward towards a release.. ",
    "archieherbias": "Having the same problem. It seems there are several things that are deprecated:\nstyle\nclassName\nmaxSize\nminSize\nThere is still no clear documentation yet for this one.. @kekeoki : There is an onDrop function which is triggered when files are selected. It receives two parameters: accepted and rejected, they are both arrays.\nYou can have a preview with the files that you selected. For example you selected one file, you can have its preview url by calling accepted[0].preview\nHope that makes sense :+1: . ",
    "Sammyjroberts": "Sorry, I didn't do a good job of explaining.\nReally what I want to do is take the file and drop it into a variable (use file reader to load it), you can go ahead and close this if you want.. ",
    "leogiertz": "Happens with 3.11.0 for me.. Ugh, wrong button.. I was just pondering how to test it properly. Not sure I have a good idea of how.. @rolandjitsu It was a bit trickier than I expected and the test doesn't cover all of the different possible scenarios, but it checks that we're not calling setState after the onDrop callback. Thanks for the suggestion!. ",
    "kamas06": "+1\nSame happens in IE11. ",
    "morulus": "I'm glad you found this useful.\n\nCan you please update the documentation?\n\nOf course. Done. But I do not understand why first string in readme marked as changed. Mystic.. Very strange, I did not delete this white space. I'll try to find it.. ",
    "wbecker": "I'm just found that I'm having this problem as well - only on windows though. I thought babel didn't transpile modules by default?. could you solve this @jasonzhouu ? . ",
    "RagingKore": "@okonet Hi, I'm having the same issue and my babel file is configured to ignore modules \n``` json\n{\n  \"presets\": [\n    [\n      \"es2015\",\n      {\n        \"loose\": true,\n        \"modules\": false,\n        \"useBuiltIns\": true\n      }\n    ],\n    \"stage-2\",\n    \"react\"\n  ],\n\"env\": {\n    \"production\": {\n      \"presets\": [\n        \"react-optimize\"\n      ]\n    },\n    \"development\": {\n      \"compact\": false,\n      \"plugins\": [\n        \"react-hot-loader/babel\",\n        \"transform-react-jsx-source\"\n      ]\n    }\n  }\n}\n```\nAm I missing something here?\nThanks. ",
    "elliotrock": "@okonet you mention \"You should exclude external libraries from your transpilation step\" but give no example of how to do this. You mention this in the documentation a well. Could you please add thank you.. The solution as an example:\nAdd: exclude: /node_modules/\nmodule: {\n        loaders: [\n            {\n                test: /\\.js[x]?$/,\n                loader: 'babel-loader',\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                loader: 'css-loader'\n            }\n        ],   \n    }. ",
    "figalex": "I'm trying to do server side rendering on a component using react-dropzone and I get this same error. I already added exclude: /node_modules/ and still have this issue. Any idea what could I be doing wrong?. ",
    "nnnikolay": "I use parcel and had the same issue, to solve it I  added into .babelrc following line \n\"ignore\": [\n    \"node_modules\"\n  ]\nand it's solved the problem. @ksaitor Try to remove node_modules and run npm i having mentioned config in the folder. I'm not was it config changes or reinstallation all the modules. But now I don't have it.. @ksaitor you're right, I've opened a bug in parcel repo\n  . ",
    "ksaitor": "@nnnikolay i'm on parcel as well. Did this:\n{\n  \"presets\": [\"env\", \"react\"],\n  \"ignore\": [\n    \"node_modules\"\n  ]\n}\nbut it did not solve the issue \ud83d\ude22  How did you solve it?. @nnnikolay  \ud83d\ude1e  same\u2026 I'm on node v8.4.0 btw\u2026. ",
    "jeremy-dimasuay": "Piggybacking off of this example, here's an example if you need/want to individually exclude react-dropzone:\n```\n{\n    test: /.jsx?$/,\n    include(filepath) {\n        if (filepath.includes('react-dropzone')) return false;\n    return true;\n}\n\n}\n```. ",
    "felds": "@okonet how are the docs going? do you want any help?. ",
    "martinratinaud": "Hi and thanks for your answer.\nIn my project, click on safari leads to no action. In fact this.fileInputEl.click(); does not produce anything. My project uses Server Side rendering which may cause this problem.\nFeel free to close this PR if nobody gets the same problem as I do and thanks for your time.\n. For the record, I found a solution.\nI was using react-starter-kit which used fastclick. This must have been the problem as when I switched to react-fastclick it worked \nSee this PR https://github.com/kriasoft/react-starter-kit/pull/1198\nThanks. I put this here because all dropzone component I found get the same problem with safari mobile and I found this important and relevant to tell potential users that this component does work in all cases.. ",
    "stevemao": "Fixed. Thanks :). ",
    "ncphillips": "I am not sure if the first point holds. When I modified the source and ran it in my application it seemed to work, even though I don't set accept.\nThat said try-catch might be the right thing to prevent API breaking change. How would you like to handle this kind of error in the catch?\nEdit:\nCatch block is empty with comment, matching existing code. I accidentally committed a yarn.lock. Is that fine?. I can definitely help with this. Just waiting on the go-ahead.. I believe @andy-ms originally created that typing. Really? What will replace them?. Thanks @okonet . I definitely think that's a good idea. Silent failures are annoying.. A cool idea. \nFor my own selfish reasons\u2013we have a feature release Friday that's waiting on this bug fix\u2013I'm not super eager to take on this behaviour at the moment.\nIt could be part of a follow up PR though!. Yup!. What do you mean by  \"re-use invariant\"?\nI don't see it in the project anywhere.\nI can include https://www.npmjs.com/package/invariant. So, using invariant actually breaks the test I added: 'it should not throw an error when failing to build a preview'.\nI'm not sure this is the right use-case for invariant.\n. I think console.error or console.info during development would be more appropriate then throwing an error.\nWith that said, we could provide a onPreviewFailure callback so the parent component could handle it however they saw fit. For example, they might want to display an error message to the user.. ES-Lint is cranky. . woops!. ",
    "DanielZhu": "@ncphillips I want to upgrade react to 15.5.x as well.... ",
    "andy-ms": "Nope, it was created by @matdube, @LynxEyes, and @goblindegook, all I did was move the file.. ",
    "jeremejevs": "Why not keep open and mark with help-wanted instead?. It's actually probably best to keep the typings in DefinitelyTyped after all. See this discussion in redux-thunk for some pros and cons: https://github.com/reduxjs/redux-thunk/pull/180#issuecomment-387660405 Long story short, unless the target project is written in TypeScript itself, cons of co-location outweigh the pros.. Honestly, don't know. The typings themselves are pretty simple, almost copy-paste of Flow, but then there are also tests. Why do you want to provide types? As mentioned in that tweet, DefinitelyTyped has a lot going for it: https://twitter.com/drosenwasser/status/981722403033309185. ",
    "patrick91": "I might work on this this weekend, I'm using react dropzone in TS project :). @okonet what do you mean?. @okonet ah I see, well once we have the typings in this repo there's no need to publish another package for them, so when a user installs react-dropzone they will receive the latest typings automatically (since they will come with the npm package). Hope it makes sense[1]\nWe did this on Styled Components, see here: https://github.com/styled-components/styled-components/blob/master/package.json#L5\n[1] This probably makes more sense :) https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html. I'm definitively going to add the TSC compilation to the test script, so we can make sure we have valid typescript files.\nMaking sure that types are up to date won't be easy, I don't think there a way to manually check that. @rkmarks just done :). this is done, I'll be testing the PR on a project and update it as soon as I find any issue. ",
    "andrevenancio": "I just pulled from npm version 3.12.3 and on the src folder there's still React.PropTypes instead of PropTypes...\nAs you can see: https://registry.npmjs.org/react-dropzone/-/react-dropzone-3.12.3.tgz. Not sure if that's the reason. shouldn't I have the exact same code I see here on the master branch on github when I pull that tgz file from npm? I've pulled it, and the src/index.js still has React.PropTypes\nmaybe you guys forgot to build to the dist folder?. ",
    "michaelsync": "Why was this closed? I am looking for something similar to this example http://reactdropzone.azurewebsites.net/example/ .. (e.g. adding a 'remove file' link. ). I tried what @FlayaN suggested but it doesn't work. \nPackages\n```\n- \"@types/react-dropzone\": \"^4.1.0\",     ### in DEV\n- \"react-dropzone\": \"^4.2.3\",\n```\nCode \nimport * as Dropzone2 from \"react-dropzone\";\nconst Dropzone: any = Dropzone2;\nrender() {\n    return (\n        <div >\n          <Dropzone>\n          </Dropzone>\n        </div>\n        );\n  }\n`\nIt gave this error \"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.\". @benbayard \nI am using esnext (module) and es6 (target)\nI downgraded the packages as below. and those versions work for me. \n```\nreact-dropzone\": \"4.1.3\",\nDEV -- \n\"@types/react-dropzone\": \"^4.1.0\",\n```. ",
    "plee-nm": "@okonet Yeah it is a breaking change.  What are your thoughts on adding the extra files on drag to the rejected files or all the files as rejected if it is multiple?  Not sure how everyone feels about this but I don't want to have the user experience of a drop of N number of files and it only picking one and saying it is valid.  \nWe can do this as breaking change or we can add another config like allowMultipleDrop and default it to true.  Setting it to false would show the error class on drag and show any extra files as rejected files.  Or we label it as a breaking change and bump the major version.  Thoughts?  I can submit a PR with these changes.  . @okonet I would push for just making a breaking change, the code will be cleaner and I think the behavior is better for the end user.  Also the breaking change would only affect users using multiple=false and it can be easily documented in a change log.  . Alright great I'll submit a pr with these changes.. @okonet I just pushed the changes needed to add extra files to rejected when multiple is set to false.  Please let me know what the process is for a major version bump.  . @okonet Just ran through the all the examples, looks like everything is working.  . @okonet it is kind of a gray area because it is fixing undefined behavior.  Making it a major would make sure no one that is relying on the undefined behavior is broken.   Patch or Major I would have some kind of release note saying:  when multiple=false on a multiple file drag it will now show the reject styles/class and add any extra files to the rejected files.  . Not sure what this means exactly.  I just pushed a change so let me know if I need to update it.. I removed the negation with the new changes.. Change acceptedFiles to a let so it can be redefined and then do something like \nconst [accepted, ...rejected] = acceptedFiles;\nrejectedFiles.push(...rejected);\nacceptedFiles = [accepted];\nOr just leave it as it is?. ",
    "beezischillin": "the current documentation does not mention anything related to what props your component accepts, including the maxSize bits. If that could be rectified, it would probably helpful for people in the future.\nThank you for your work!. ",
    "joedski": "As noted in https://github.com/enyo/dropzone/issues/669 this seems to be a Chrome/Chromium (and Opera?!) issue.\n- Issue in Chromium Bug Tracker (Listed as WontFix...)\n- Thread on Google Products thinger about Chrome. ",
    "RickyMarou": "yes i was on 14.8 but updating to 14.9 fixes this. Thanks for taking the time to address this.. ",
    "fritz-c": "I ended up finishing the project that used this, so I'm afraid I don't have time to invest into it now.. I modified the code to do just that. Check it out and see if it fits your expectations.. ",
    "Dzixxx": "+1 for disable. ",
    "MV88": "Hello,\nMy workaround was changing a bit the style of the div parent:\npointer-events: IsDisabled ? \"none\" : \"auto\" \nwhere IsDisabled is a boolean flag\n. ",
    "Tom-Bonnike": "Oh, didn\u2019t see I needed to do the test change elsewhere. Sorry. If the way I\u2019ve done it is fine I\u2019ll just amend my commit.. Is this fine?. ```javascript\nconst DummyChildComponent = () => null;\nconst dropzone = mount(\n  \n    {props => }\n  \n);\ndropzone.simulate('dragEnter', { dataTransfer: { files } });\nexpect(dropzone.find(DummyChildComponent).props().isDragActive).toEqual(true);\nexpect(dropzone.find(DummyChildComponent).props().isDragReject).toEqual(false);\nLike this? (it does work).\nMissing file extension for \"jest-enzyme\" (import/extensions)\nimport 'jest-enzyme';\n```\n?  \ud83d\udc40. ",
    "gauravcm30": "@okonet Hey did you get any solutions for this problem?? Please share solution I am also facing the same.\nThanks for reply. @rkmarks  Thank you for your reply. I am not using react-fastclick, downgrade the react-dropzone version to 3.7.3  works perfectly fine for me.. ",
    "fredehh": "@okonet I have the issue without fastclick. When the button to open dropzone (as in the tutorial) nothing happens. This is for android (webview).. @rkmarks  It corresponds to the code in the example. The issue is that it does not work in my webview android application. It seems that the refDropzone.open does not work.\n```\nconst FileUploadZone = ({onUpload, accept, ...props}) => {\n  let refDropzone;\nreturn (\n    \n onUpload(files[0])}\n        multiple={false}\n        disableClick\n        ref={(node) => { refDropzone = node; }}\n        accept={accept}\n      >\n        {i18next.t('button.dragDrop')}\n refDropzone.open()}>{i18next.t('button.orSelect')}\n\n\n  );\n};\n```. ",
    "x5engine": "@fredehh you code works perfectly well done dude :). @rkmarks  just try it out on ios or android and you will have to click 3 or 4 times to open the files list on your phone. @rkmarks bro try it on safari or iOS ;). @rkmarks sorry then so I think I was using an older version or something had to do this workaround to make work but happen when have a div with test inside the component so may be that's different?. ",
    "danjebs": "@okonet I realise that there are places to process images as such.\nI was suggesting that this be added as a built-in feature because it would be useful for myself and (judging by the thread on Enyo's DropZone) many other developers. It's in the name of making this a better piece of software.\nI get that you are busy and are probably flooded with feature requests, but I'm urging that you consider including this. Or, perhaps there are good reasons why it is not included, but they aren't immediately clear. Nor have I seen any implementation pointers that work with this specific package, either here or on SO.\nAt any rate, I'll figure out how to do it...but I don't think I'm the only one wondering.. OK thanks for clarifying, that makes sense.\n\nOn 9 Jun 2017, at 12:06 am, Andrey Okonetchnikov notifications@github.com wrote:\nHere I try to explain why such features will never be part of this library: #438 (comment) https://github.com/okonet/react-dropzone/issues/438#issuecomment-307031166\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/okonet/react-dropzone/issues/439#issuecomment-307150214, or mute the thread https://github.com/notifications/unsubscribe-auth/AMKltUfdfKHupGDu_zYFVvWQOND0XZjmks5sCBwDgaJpZM4Nz03u.\n\n\n. ",
    "rodrigovidal": "What is missing?. ",
    "ktalebian": "What's the status of this? . ",
    "beckend": "This PR and line https://github.com/react-dropzone/react-dropzone/blob/8dd2affcec0206b31bf6dccaba31bf5f422661f8/src/index.js#L204\nbroke onclick for safari.\nRemoving the settimeout fixed it for safari.. @mrharel because i don't really know how to repro it, i decided to workaround the issue, workaround:\n```javascript\n/*\n * Bug with react-dropzone where onClick does not fire on safari correctly\n * https://github.com/react-dropzone/react-dropzone/issues/502\n * This component was made to fix that\n /\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ReactDropzone from 'react-dropzone';\nexport default class Dropzone extends Component {\nstatic mapBlockingFileDialogBrowsers = {\n    EDGE: true,\n    MSIE: true\n  };\nstatic propTypes = {\n    ...ReactDropzone.propTypes,\n    browserName: PropTypes.string.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    rootProps: PropTypes.any\n  };\nhandleSetRefDropzone = (ref) => {\n    this.refDropzone = ref;\n  }\n// basically a modified clickhandler from react-dropzone\n  handleOnClick = (evt) => {\n    const {\n      browserName,\n      disableClick,\n      onClick\n    } = this.props;\nif (disableClick) { return; }\n\nevt.stopPropagation();\n\nif (onClick) {\n  onClick.call(this.refDropzone, evt);\n}\n\nif (this.constructor.mapBlockingFileDialogBrowsers[browserName]) {\n  // in IE11/Edge the file-browser dialog is blocking, ensure this is behind setTimeout\n  // this is so react can handle state changes in the onClick prop above above\n  // see: https://github.com/react-dropzone/react-dropzone/issues/450\n  setTimeout(this.refDropzone.open.bind(this.refDropzone), 0);\n\n} else {\n  this.refDropzone.open();\n}\n\n}\nrender() {\n    // eslint-disable-next-line no-unused-vars\n    const { browserName, disableClick, onClick, rootProps, ...passedProps } = this.props;\nreturn (\n  <div {...rootProps} onClick={this.handleOnClick}>\n    <ReactDropzone {...passedProps} disableClick ref={this.handleSetRefDropzone} />\n  </div>\n);\n\n}\n}\n```. This is going to rather hard to recreate in a repo, I integrated the plugin deep in our closed source codebase. Going to close this since i will not pursue a deeper debug for now.\nHowever, in our codebase, the file dialog can never be opened with the setTimeout, it never failed without the setTimeout. . ",
    "mrharel": "I have the same issue as @beckend, on mobile iOS the user needs to click double tap on the drop zone to open the file system. removing the setTimeout fix it. can somebody check it?. @beckend or you can just go back to version react-dropzone\": \"3.13.3\" before this fix was done, and see if someone will fix it soon. \nThanks for sharing this code, i will give it a try. . ",
    "chenfengyanyu": "I have the same promble. @CarlosUvaSilva do you save it ?. @CarlosUvaSilva Thank you very much, i got it!. ",
    "CarlosUvaSilva": "@chenfengyanyu \nonDropGeneral = (currentGeneralPhoto) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = (event) => {\n        this.setState({\n          generalPhotos: this.state.generalPhotos.concat([{ base64: event.target.result }])\n        });\n      };\n    }\n  } . @ndiyansah I've posted my solution on top. That last part saves the base64 in an array because I had more than one dropzones. If you only have one you can remove the concat and it will save it has a simple string. ",
    "ndiyansah": "hey how can i use base 64 in my code for integration that function. ",
    "taikn": "Nevermind, seems to be browser/OS limitation. This issue is still present for me on v4.2.13 IE11 ( Windows 10 ). Having the same issue on iOS safari 10, file dialog opens only every other click. I am using dropzone the way described in the docs (hook). The same behaviour can be seen, when opening https://react-dropzone.js.org in IE11 and trying any of the examples listed there (eg. one with Previews).. This seems to be related to file-selector. Please see here: react-dropzone/file-selector/issues/9. ",
    "ggarcia92": "Hi @taikn I am using chromium browser and I have the same issue. Instead when I tried with Firefox it works. I think this issue should be reopened as Selecting multiple files doesn't work on Chrome. Hi @rolandjitsu thanks for your answer but it works, thanks and apologies. Regards. ",
    "dyelax": "This isn't exactly a duplicate of #409. That issue is talking about the css class showing. This works fine for me. I'm suggesting that when multiple files are dropped and multiple=false, none of the files should go to accepted (all of them should be rejected), while currently one of the files that are dropped will still be accepted. ",
    "DeFuex": "Hi @dyelax @okonet , seems like the problem is on that specific line here \nif (!multiple) {\n      // if not in multi mode add any extra accepted files to rejected.\n      // This will allow end users to easily ignore a multi file drop in \"single\" mode.\n      rejectedFiles.push(...acceptedFiles.splice(1))\n    }\nit seems like this behaviour was added on purpose, but with the changed css styling in ticket #409 this seems more like a bug due to the described behaviour of you @dyelax ....if wished i create a PR and set rejectedFiles.push(...acceptedFiles.splice(0)), then every file in multiple=false mode should be declined. i tested it with react dev tools in the browser.\nEdit: ok, seems like that splice(0) is not the solution...if set 0 it doesnt work on single file uploads, but anyways. ill try to fix it.. Hi @duro, the correct behaviour of mutliple=true and multiple=false should actually be fixed now in #511 ....the reason why it isn't merged yet is because currently there is mutable behaviour with the arrays handling accepted and rejected files, which should be actually immutable (...cause reasons)\nCan you further clarify what you mean with your points? Do you mean something like a third flag option that allows a user to drop files which could be accepted and rejected as drops depending on a \"type\" they have? This sounds like an extra feature to me... @okonet . is it possible to label this pr with the #hacktoberfest label? \ud83d\ude04  . @rkmarks yep, gonna work on it this week. Hi @SaraVieira ...i accidentally forgot to make a different branch for pr #511 and therefore i have everything from my master branch (which is on PR #511 ) in this PR. Hopefully shouldn't be a problem though. . hi, since the multiple=false option shouldn't allow a single file to be uploaded on a multiple file drop this test case is not necessary i guess -> should allow single files to be dropped if multiple is false\ni think the test just needs to be applied correctly, sry. sure \ud83d\ude05 , but i think i actually put it in line. you mean like expect(rejected.length).not.toEqual(2) ?. im not sure about the test case here, but should both, accepted and rejected be like this? expect(accepted.length).toEqual(0)\n      expect(rejected.length).toEqual(0). that would also be my logical understanding. i can try it out though and change it if necessary.. Working on it now, if (!multiple && this.state.draggedFiles.length > 1) doesn't work, but changing it to if (!multiple && this.state.draggedFiles.length === 1) works, since the length has to be exactly 1 to be accepted as 1 file drop and rejecting multiple file drops, gonna push it when i got my head around the jest test cases. apparently 15 tests are failing now, just because of this change. . taking it back, it doesn't work at all, that's why tests are failing, gonna let it as it is. sry, gonna change it back with the next commit.. gonna change the test according to its behaviour. gonna change it back. changing the test name according to its behaviour. cause a single file should be rejected when a multiple drop is done with the multiple boolean set on false. As i understand it that's what is tested now.\nTo the first comment, i could change expect(rejected.length).toEqual(1) to expect(rejected.length).toBeGreaterThanOrEqual(1) then every case would be checked here. And then i would change the name of the test case to should reject files on multiple drop if multiple is false. i thought the spread operator in javascript just turns items in an array to objects with a key: value pair? and as i found out splice used with 1 argument is a little hacky? (not sure though)\nEDIT: \nIn rejectedFiles.push(...acceptedFiles.splice(1)) the spread operator adds every element after index 1 to the rejected array and keeps the first element in the acceptedFiles array. \nIn rejectedFiles.push(...acceptedFiles.splice(0)) starting from index 0, every element from the acceptedFiles array gets cut out and added to the rejectedFiles array.. nevermind, i added a test case for rejected files on a multiple file drop if multiple=false. ",
    "duro": "On top of this, there also seems to be a miss match in behavior with multiple=true\nRight now, if I have multiple=true, and some of the files I drop are OK by my accept settings, but some are not, the acceptable files are sent to onDrop, and the rejected files are not.\nAs far the passed props isDragAccept and isDragReject goes, there is no way to accurately display this to the end user.\nRight now the way it works is that if any of the files are rejected, isDragReject === true and isDragAccept === false. But that's not exactly what is happening.\nWhat I would prefer to see if that there be some way, before the drop actually happens, to present this visually to the end user (since I think it's fine that they may have mistakenly included an unacceptable file, but some that were acceptable).\nIn this case I would expect either isDragAccept and isDragReject to both be true, that way I can message to the user that their drop will go through, but some of the files will be rejected.\nBut right now, I end up messaging to them that their selection is rejected, even though if they actually did drop, some of the files would pass through.\nAm I making sense? It's late here. \ud83d\ude34\n. @okonet The main problem I'm running into is that there is no way to know if there are both accepted and rejected files until the user has finished the drop. I want to be able to warn the user that they have some rejected (and some accepted) files on dragEnter before they release the mouse and onDrop is triggered.. @DeFuex AND @okonet You may want to see my comment here:\nhttps://github.com/react-dropzone/react-dropzone/issues/458#issuecomment-352173234\nIt may be relevant to the work you are doing here. ",
    "stas-lesiuk": "@okonet What is the actual state of this issue? Is it merged? Asking because when I clone repo and run npm start, the active state is PRESENT of Safari, however, when I add use react-dropzone as a dependency in my project, activeStyle & activeClassName doesn't work on Safari. I've tried with different versions of package, but didn't succeed.. @okonet What is even more strange is that when I clone the 'react-dropzone' repo and adjust my import statement to 'react-dropzone/src', then the active state works on Safari perfectly as well. Could you tell me which library version is used on those official examples?. Well what I mean is which version of react-dropzone is used on master? Can I get it via npm? Using npm show react-dropzone versions I see a bunch of versions, with major starting on 0.1.0 and up to 4.2.12, so I tried with every major version, but the activeClassName didn't work on Safari. However, it did work when I copy the files from cloned repo & use them directly, not as a node module. If that's not a version issue, do you have any idea what may cause that?. ",
    "anthonyraymond": "Not a react-dropzone issue. Microsoft Edge does not support hints at this point....\nStackOverflow answer\nMicrosoft issue\n@okonet This can probably be closed.. I was asking if you could add an example of filereader api in the readme. Because new browsers version dont set the property path on file objects anymore.\nTo avcess file content youu must now use the filereader api.. Actually it's not really for solving anything.\nIn one of my apps, i need to read the content of dropped files, on previous browsers version i was using fs.readFileSync(file.path).\nBut new browsers versions prevent usage of file.path (probably for security reasons). The new solution to access file's content is to use the FileReader API.\nThe issue was more about adding a warning in the readme that file should be accessed with filereader API in the onDrop() callback.\nNot sure i could open a PR soon, but i'll try to do when i'll get some time.. @okonet Just created a PR #481 . ",
    "headzoo": "I like the idea here, because the first thing I do anytime I use this component is remove the default styles.\nOne thing I noticed was this bit of code here:\njs\n// Remove custom properties before passing them to the wrapper div element\nconst customProps = [\n  'acceptedFiles',\n  'preventDropOnDocument',\n  'disablePreview',\n  'disableClick',\n  'onDropAccepted',\n  'onDropRejected',\n  'onFileDialogCancel',\n  'maxSize',\n  'minSize'\n]\nconst divProps = { ...rest }\ncustomProps.forEach(prop => delete divProps[prop])\nTake a look at how I handle this in other projects, like here:\njs\n<div {...objectKeyFilter(props, Alert.propTypes)}>\nThe general idea is getting a list of keys from Dropzone.propTypes  instead of maintaining a separate list in customProps. That way you don't have to remember to update customProps anytime the component props are changed.. I find myself using this component every couple of months. So I'd be happy to help as well.. Thanks for the invite. Presumably you need help maintaining the library, including fixing bugs, keeping up with browser API changes, and handling PR, and you will still be guiding its development? I'm happy to help.. I agree using createElement() would be the way to go. The change is straightforward if @SaraVieira needs me to finish what she started. The original issue ( #357 ) has been marked as stale.. Thanks for the detailed report. I'm setting up a new app with create-react-app now and seeing if I can find the bug.. Thanks again for providing so much detail. I setup a dummy app using create-react-app and so far everything works as expected. The app redirects to the new post after submitting the form. But of course I've only created a simple dummy app.\nI've pushed the dummy app to a repo and sent you an invite. Can you update the form/reducers/actions/etc to better reflect how your app works so we recreate the problem? I'll pull your changes and try again.\nhttps://github.com/headzoo/dropzone-test. Thanks @mattcarlotta. This was one of the most thorough bug reports I've seen a while. I'm almost disappointed the bug turned out to be a false alarm!. ",
    "donysukardi": "I attempted to write the render function the primitive way with prop getters pattern, i.e. leaving the actual rendering to user, ala downshift so that we don't render unnecessary div.\njs\n<Dropzone onDrop={this.onDrop.bind(this)}>\n  {({ getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject }) => (\n    <div {...getRootProps()}> { /* We can fit styled-components perfectly here */ }\n      <input {...getInputProps()} />\n      <p>Try dropping some files here, or click to select files to upload.</p>\n    /div>\n  )}\n</Dropzone>\nThe code can be found here - https://github.com/donysukardi/react-dropzone/blob/a5bc55d6e569d4f95d2ae860c051556635e6ebc5/src/index.js#L303-L323. Sure. Let me work on that! :D. Any ETA for this to be merged?. Sure.. How could I help? Fire away \ud83d\udd25 . I'm pretty satisfied with this API. Perhaps we should release some beta and/or RC (react-dropzone@next) and let people use it so that we can get more feedback.. Yes. In fact this builds on top of that. The bare minimum way to render a Dropzone component would be\njsx\n<Dropzone onDrop={this.onDrop}>\n  {({ getRootProps, getInputProps }) => (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <p>Try dropping some files here, or click to select files to upload.</p>\n    </div>\n  )}\n</Dropzone>\nThis leaves the rendering responsibility to users and Dropzone just provides prop-getters and states - https://github.com/donysukardi/react-dropzone/tree/feature/primitive-dropzone#render-prop-function.. We could either render the input for them,\njavascript\nrender() {\n  // ...\n  return (\n    <Fragment>\n      <input {...inputProps} />\n      {renderFn(/* renderProps */)}\n    </Fragment>\n  )\n}\nor pass input to the render function so that user can render that somewhere inside the root component\njavascript\nrender() {\n  // ...\n  return (\n    renderFn({\n      input, // this is the input node with all the necessary props\n      /* other renderProps */\n    })\n  )\n}. No, we don't. It's just that it's nice to put the implementation details to userland. Ref: https://medium.com/merrickchristensen/headless-user-interface-components-565b0c0f2e18\nSo I'm leaning more towards the second approach.. @okonet How I see it is that users will create their own Upload component using react-dropzone once and use it in their applications.\nSo, having the flexibility to define where to put the input is very useful and important as it won't cause any conflict in styling as we'll be leaving it totally to the users.\n@vladp i'm not sure how we could use react-dropzone with react-native though as the API used is very browser specific. you'd probably be better off creating a whole new component that's specific to react-native.. ",
    "drblmb": "This is actually an issue I wrote, but submitted while signed in on a different computer and account.. I think I understand now what is happening.  I had my button onClick() which called open() inside the children of DropZone.  Since DropZone already has a click event, it was processing two click events.. ",
    "maasha": "I have limited experience with Javascript and have no insight into how react-dropzone works - it should surely be something quick to do for someone who have her mind wrapped around the code already. I'd be happy to test. . ",
    "kainanaina": "Where can I find information about minimal browser support?. ",
    "jacksonrayhamilton": "Thanks @oieduardorabelo for adding this!  And just in time, as our product just started needing this functionality, as well.  :smile: . @okonet Can we expect a release with this feature soon?. Ah, missed that.  Thanks!. ",
    "oieduardorabelo": "hey @okonet,\n\nI've moved the compose fn to the render and added tests for the react lifecycle updates\nI also exposed disabledStyle and disabledClassName, you know, stylesss! (maybe the default opacity isn't a good idea? anyway, up to you)\nupdated with upstream master. \n",
    "dominic-p": "Done. See #476.. ",
    "yasuf": "specifically what do you do here? I'm assuming its reviewing PRs and merging them and releasing new versions, I'd like to know more about what it would involve. ",
    "khrizt": "I'd love to contribute, is there a quick start guide or something? I've cloned the repo but I'm not sure how to check issues or try the library. I'm using the library in my project and I know how to use it but I'm not sure if I can develop using this repo or I need to create some wrapper repo to render the library.\nAnother thing is it better to fork the repo and work on my own?. I've got a couple of warnings / errors installing and running from the cloned repo:\n\nWarning: ReactTestUtils has been moved to react-dom/test-utils. Update references to remove this warning.\n\nand\n\nFailed to generate preview for file bad_val TypeError: Cannot create property 'preview' on string 'bad_val'\n\nIs there anything I can do to fix it\u00bf. ",
    "aganglada": "I'm super happy to help maintaining this awesome package. I've already try your case in IE 11 and it seems like redirecting to the file itself, is that alright? https://react-dropzone.stackblitz.io/ seems like onDragOver is not really making any effect in IE 11 . ",
    "hubgit": "If you're still looking for maintainers, I can probably help.\nI think the first priority is removing the class name handling, leaving that to the children, as that'll remove a lot of complexity.. ",
    "yrshaikh": "If you are still looking, I would want to help.. ",
    "knowbody": "@okonet I'm only a member there so you need to ask someone who's an admin, sorry\n. ",
    "denizs": "I'd absolutely loved to contribute! \ud83d\udc4d . ",
    "benmonro": "I'm happy to help. this component is kick ayuss.. ",
    "tvelev92": "I am interested in contributing. ",
    "divyenduz": "@okonet : If there is room, you can invite me as well. I use react-dropzone at multiple places and will be able to contribute back. . ",
    "gondar00": "@okonet I am interested in contributing. ",
    "TrySound": "@okonet I would like to improve build step.. There are a couple of problems I could solve.. I'll do my best.. @horacioh Am I blind or this library already uses babel-preset-env for a long time?\nhttps://github.com/react-dropzone/react-dropzone/blob/master/.babelrc#L4-L16. Actually there isn't any breaking changes in react 16.3. Breaking changes happens only in major releases. Even deprecation warnings will happen since 16.4.. @okonet The only thing I see can be changed is migrating to createRef api which will save a couple of lines. But since it will be a breaking change let's don't touch it yet. There's nothing deprecated in the code. I guess this issue is not relevant anymore.. @rolandjitsu Can you point me where exactly?. @rolandjitsu I know about lifecycles. Point to the code in this project where you see componentWillReceiveProps. I can't find it.. That's why I suggested my collaboration. I can support both tools. And it's not so hard to support them, specifically rollup.. I care about my dependencies and would like to optimise them as much as it possible for end developer (myself).. Also I tend to simplify toolchain so you won't have any problems with it.. What's wrong with using both? Sure webpack is a tool of styleguidist here. I won't touch it. Rollup is a tool for better bundles quality. You should not care about complexity now. I will handle it.. Gzip is not enough. Why you don't care parsing cost?. This complexity is temporary. Also rollup config is dead simple since you have an example and will be even simpler after a couple of PRs.. Let's just keep this PR open for a while.. Friendly ping.. Please, prefer normal caret version.. Same here. It's better to know which version you use. yarn upgrade-interactive --latest will let you upgrade easier.. Maybe it's easier to disable these rules at all?. But source code is also esm. What's the problem?. ",
    "johnrhampton": "@okonet, I use this library in multiple projects and would be thrilled to help maintain it. It has been a huge help to me and would love to pay that forward. If you are still looking for assistance maintaining the repo, please let me know.. ",
    "karltaylor": "Would love to come on board as collaborator \ud83d\udc4d. ",
    "ChristianReifberger": "Hi, if there is still help needed I'd like to contribute. I've used React-Dropzone a few times already, recently for a project for a client and it worked great. ",
    "edisonchee": "If you still need help, I'd love to contribute.. ",
    "samueldervis": "@okonet  If you still need help, I'd love to contribute.. ",
    "Jiasm": "Maybe I can help you, That's a awesome project.. ",
    "needcaffeine": "@okonet I use this library extensively, and would love to contribute if you're still accepting maintainers.. ",
    "Grantlyk": "Did you people find a new maintainer?. ",
    "pedroapfilho": "I've implemented this library on almost every company I worked, so if you guys still want something, I would be happy to help!. > @pedroapfilho and @salman1995 you're free to contribute at any time.\nYa! I know! 'll create some PRs (I do have some workarounds on some projects to make it work as expected), its just because there was this quote on the documentation, so I came here to offer... hahaha. ",
    "salman1995": "@okonet  If there is room, you can invite me as well.. ",
    "sharma-varun": "I am using react-dropzone, its working fine in Chrome but in Firefox 55.0+ it's not getting rendered at all.. Its working on Firefox 55.0.1 but not in 55.0.2, for 55.0.2 it doesn't even load the component into the dom and its just an empty div.. I was able to solve and run in Firefox.\nThanks. ",
    "GHermet": "Thanks for the link ! turns out we used the skip snapshot regex from the storyshot API as it was not needed. ",
    "ZakTax": "Hi @holloway I am experiencing same error but can't figure out the right createNodeMock.\nThe createNodeMock example at Storyshots starts me at the following:\ncreateNodeMock: (element) => {\n      if (element.type === TextareaThatUsesRefs) {\n        return document.createElement('textarea')\n      }\n    },\nI've tried:\ncreateNodeMock: (element) => {\n      if (element.type === DropzoneComponent) {\n        return document.createElement('div')\n      }\n    },\nand \ncreateNodeMock: (element) => {\n      if (element.type === DropzoneComponent) {\n        return document.createElement(DropzoneComponent)\n      }\n    },\nNeither work, not sure where to go next. Can you help me find a solution?. @uosl yes! thanks :). ",
    "uosl": "@ZakTax \nThe following works for me.\njs\n    createNodeMock: element => {\n      if (element.type === 'input' && element.props.type === 'file') {\n        return document.createElement('input')\n      }\n      return null // to make eslint happy\n    },\n. ",
    "piercefreeman": "@okonet Thanks for looking into this.  I've slightly edited the reproduction steps to make it easier to recreate.  I've also uploaded a video with a demo.\nhttps://ufile.io/4dtol. ",
    "Konsada": "Was this ever resolved?. ",
    "merric": "all of the tasks for this have been closed automatically. How come no progress here?. ",
    "ianhowe76": "Created PR: https://github.com/react-dropzone/react-dropzone/pull/489. Added tests. ",
    "zxlin": "To second this post, users of this lib are also warned to install prettier due to it being a peer-requirement in eslint-plugin-prettier which should be a react-dropzone dev-dependency.\nWarning message:\nnpm WARN eslint-plugin-prettier@2.2.0 requires a peer of prettier@>= 0.11.0 but none is installed. You must install peer dependencies yourself.\nThanks!. ",
    "Sergey901509": "of cource:\n this._onDrop(files)}\n              multiple={true}\n              className={styles.dropzone}\n              activeClassName={styles.over}\n            >\n_onDrop(files) {\n    try {\n      if (files.length !== 1)\n        throw new Error('Need to update only 1 file'); <-- here is error. files.length equals 0 when I upload only 1 file\n     /**/\n  }. ",
    "janusch": "Hey,\nI had a similar issue with drag'n'dropping a file in IE11.\nIt turns out that this.node in index.js is null at the time of the drop in IE11.\nAdding a simple check to the onDocumentDrop method fixes it.\nonDocumentDrop(evt) {\n    if (this.node && this.node.contains(evt.target)) {\n      // if we intercepted an event for our instance, let it propagate down to the instance's onDrop handler\n      return\n    }\n    evt.preventDefault()\n    this.dragTargets = []\n}\nCan someone with more knowledge of react-dropzone tell if this is a legit PR?\nCheers. Hey, thank you for the swift reply.\nI'll have to investigate this a bit further. I could not re-create the bug with the official examples. So it must be a special case, maybe due to filetype, or something else? I'll try to create a test-case for it.. @seberik that was as well my impression. Probably due to the use of refs. In that case I do not think this is a fault of react-dropzone, and should rather be fixed by keeping the component in the dom, where they are used.\nPlease correct me if I am wrong ;). ",
    "GramovichAlexandr": "hello\nwhen do you plan to close this issue?. @pcgilday \nthanks for your reply. ",
    "aliciacatalina": "I think this issue is still present, I'm running v4.2.1 and testing in Sauce Labs with IE11 Win 10 causes the same result of firing 2 requests : \"one with an empty file, the second with a normal file.\". ",
    "anajavi": "Isn't the jsnext:main superseded by \"module\"?\nhttps://github.com/rollup/rollup/wiki/pkg.module. Here's a quick test I made: https://github.com/anajavi/react-dropzone/commit/767cdf67f6fad19eed3b7f7713cc6a176d86fd37\nI just quickly tested that it works with my application. My production build went down a couple of kilobytes with this. \nI'm not familiar enough with react-dropzone to send a PR. So if somebody wants to pick this commit and make a PR, I don't mind.. What would be needed besides https://github.com/anajavi/react-dropzone/commit/767cdf67f6fad19eed3b7f7713cc6a176d86fd37 for pull request?\nI checked and jest can't test es2015 without transforming modules with babel. Size-limit seems to work out of the box with this build.. The problem with that is that then we have to prepend every script in package.json with either one. This is because if babel does not find BABEL_ENV, it will use NODE_ENV. The only thing babel does for default is to use \"development\" env if none is specified.\nAnd the second problem that I just checked is, that the variable doesn't pass to second command on line. For example this one causes babel to build with \"development\" env, which makes commonjs modules:\n\"build:es\": \"BABEL_ENV=es echo test && babel ./src --out-dir ./dist/es --ignore spec.js\"\nActually the current master branch has problem too, this line builds with correct NODE_ENV, but jest is run with empty NODE_ENV causing the test target to be in src:\n\"prepublish\": \"NODE_ENV=production npm run build && jest\"\nI know it is ugly to define the same line several times, but there doesn't seem to better options available until babel 7. Babel 7 has js config in .babelrc.js, where these settings can be merged.. I tested building with babel 7. Here's a config that works with it:\n```javascript\n//.babelrc.js\nconst configs = {\n  \"es5\": {\n    \"presets\": [\"env\", \"react\", \"stage-1\"],\n    \"plugins\": [\"add-module-exports\"]\n  },\n  \"es6\": {\n    \"presets\": [[\"env\",{ \"modules\": false }], \"react\", \"stage-1\"]\n  }\n}\nmodule.exports = function(api) {\n  if(api && api.cache) api.cache(false)\n  return \"es6\" === process.env.BABEL_ENV ? configs[\"es6\"] : configs[\"es5\"]\n}\n```\nFunnily enough, with Babel 6 the following .babelrc lets us use the new config.\njavascript\n{\n  \"presets\": [\"./.babelrc.js\"]\n}\nHowever, I had lots of strange caching problems with Babel 6 before arriving with this config. Also, the new config API is not documented anywhere yet.  It is probably too brittle to use now.\n. Is there still something to address, or can this be considered complete?. I have recently had my share of broken npm dependencies.\nOne still had Flow types in transpiled output, other one was published as an application not a commonjs nor umd module. And one had React embedded in output, making it kind of big..\nSo I am pro target testing at the moment :). I have never used that preset. The documentation of env says:\n\"Without any configuration options, babel-preset-env behaves exactly the same as babel-preset-latest (or babel-preset-es2015, babel-preset-es2016, and babel-preset-es2017 together).\"\nI think that the stage-1 is only needed, if there is some code that depend on current stage-1 propositions.\n. I'll do this and get back to you. env preset does not yet transpile object-rest-spread. I am using the following:\nplugins: [\"transform-object-rest-spread\"]\nI think that makes it more definitive.. ",
    "mattcarlotta": "Looks like it doesn't matter if Redux has other inputs. Just Dropzone alone triggers the refresh...\nCreated a stripped down dummy form that mimics the react-dropzone \"basic\" example. You can see that it hits my API, saves to the uploads folder, then instead of redirecting, it just refreshes the form:\nhttps://youtu.be/FB2R9MmR-6A\nDummyForm.jsx\n```\nimport { map } from 'lodash';\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Dropzone from 'react-dropzone';\nimport { addNewPost } from '../../actions/postActionCreators';\nclass DummyForm extends Component {\n    state = { files: [] };\nhandleFormSubmit = formProps => {\n    const fd = new FormData();\n    fd.append('file', formProps.file[0]);\n\n    this.props.addNewPost(fd);\n};\n\nrender() {\n    const { handleSubmit, pristine, reset, submitting } = this.props;\n    return (\n        <div className=\"form-container col-xs-12\">\n            <h1>Dummy Form</h1>\n            <hr />\n            <form onSubmit={handleSubmit(this.handleFormSubmit)}>\n                <Field name=\"file\" type=\"file\" component=\"file\">\n                    <Dropzone\n                        onDrop={files =>\n                            this.setState({\n                                files\n                            })}\n                    >\n                        <p>\n                            Try dropping some files here, or click to select files to\n                            upload.\n                        </p>\n                    </Dropzone>\n                </Field>\n                <h2>Dropped files</h2>\n                <ul>\n                    {map(this.state.files, ({ name, preview, size }) => {\n                        return (\n                            <span key=\"imageFromDrop\">\n                                <li>\n                                    <img src={preview} alt={name} />\n                                </li>\n                                <li>\n                                    {name} - {size} bytes\n                                </li>\n                            </span>\n                        );\n                    })}\n                </ul>\n                <button\n                    type=\"submit\"\n                    className=\"submit btn btn-primary partial-expand rounded\"\n                    disabled={submitting}\n                >\n                    Submit\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"clear-values btn btn-danger partial-expand rounded f-r\"\n                    disabled={pristine || submitting}\n                    onClick={reset}\n                >\n                    Clear\n                </button>\n            </form>\n        </div>\n    );\n}\n\n}\nexport default reduxForm({\n    form: 'dummyForm'\n})(\n    connect(null, {\n        addNewPost\n    })(DummyForm)\n);\n``. Problem has been resolved! The problem was the create-react-app was automatically refreshing because of a new file being added to a monitoredpublic/uploads` folder. Anything gets added to it, the CRA refreshes the app. 3 days of debugging and it finally hit me while I was walking my dog that this could cause the refresh...\nFor those who may run into the same issue, here's a way to temporarily disable the auto reload...\nhttps://github.com/facebookincubator/create-react-app/issues/2519#issuecomment-318867289\nFor those who want to reproduce the redirect/error for themselves, here's a stripped down app with API:\nhttps://github.com/mattcarlotta/dropzone-test/tree/dropzone-redirect-problem\nTo install and run:\n- You must have monogDB community edition installed\n- You must add an empty uploads folder to: client/public (ex: dropzone-test/client/public/uploads)\n- While at the root of the dropzone-test folder: npm i\n- CD into the client folder: npm i\n- CD back to the root of the dropzone-test folder: npm run dev to start instances of mongoDB, the front-end app and the API.\nTo reproduce the redirect error:\n- Navigate to blog (will attempt to load any submitted posts)\n- Click on the \"Create a Post\" button\n- While at the form, upload an image that is relatively large\n- Fill out the remaining fields with any text\n- Click the Submit button\nFor those who want a solution to the problem (note: the above example will still not work in production due to the CRA's compiling for production methods. The solution below addresses this issue.):\nhttps://github.com/mattcarlotta/dropzone-test\nTo install and run:\n- Same steps as above, except create a public folder at the root folder and inside that folder create an uploads folder. (ex: dropzone-test/public/uploads)\nSolution:\n- Inside client/.env.development there's a REACT_APP_API variable\n- Images are now loaded via this variable:  <img src={process.env.REACT_APP_API + image.path} alt={image.name} /> which will point to: http://localhost:5000/public/uploads/example.png in client/src/blog/renderPosts.jsx\n- Express serves these files via an app.js static controller:\napp.use('/public', express.static('public'));\nIn short, the problem is NOT with react-dropzone, but with the create-react-app in conjunction with where files are saved once uploaded. My apologies!\n. ",
    "zhangyanyan1002": "Chrome browser\nThe onDrop method uploads and stores successful uploaded picture information\neg\uff1a\n  onDrop(files) {\n    const { dispatch } = this.props;\n    dispatch(actionEditCompanyImgUrlsSuccess(files));\n    this.setState(\n      files,\n    );\n  }. As long as you set the accept= \"image/\" property, this problem occurs. If you don't set it, it's normal, but I need to upload the picture\uff0cThis happens in IOS phones. Yes, I tried some IOS phones, and they all had the same problem. Thank you, but I still have this problem after updating. As long as the accept= \"image/\" is set, the IOS phone will not open or open very slowly.@JohannLai. ",
    "JohannLai": "I got the same problem too, use the official example directly, but sometimes it doesn't respond when clicked, sometime I clicked many time , and then it will respond, my brower is Chrome.. I change to fixed it , now I know than when I click the DropZone,  it will enter onInputElementClick function, and then the file dialog dont open.  I think is  this line does't work this.fileInputEl.click();. I use another computer to test , it work ! \nthe same environment.\nthat is so trange. ok , when I update to the latest Chrome , everything work well.\nBut the chrome that was downloaded three months ago had compatibility issues\nHope fix this problem \n@zhangyanyan1002  thanks. ",
    "dsznajder": "Component just not opening the dialog window for upload. Even if I provide a ref callback to this, also on Chrome with this ref dialog window is opening twice.. I cannot, I've already handled this by checking if a browser is a safari and opening by ref as in the example. Probably this was misread on documentation, sorry for troubling You. :). Yeah sure :). ",
    "benbayard": "A note: in TS you should not import React-dropzone with * as imports. This module is exported as common JS in its source. You should use import Dropzone = require('react-dropzone);. This module is not exported in a way where you actually have es6 exports. You need to use a commonjs import. The typescript types are correct. @promgamer what is your tsconfig? . esnext does not support commonjs imports, unfortunately. If you're not doing webpack code splitting, I would recommend instead have module be node. . ",
    "codeaid": "My updated TypeScript definitions were merged into DefinitelyTyped almost two weeks ago as you can see in the pull request referenced above. They're currently live on https://www.npmjs.com/package/@types/react-dropzone.\nThis issue can be closed as resolved.. ",
    "FlayaN": "@ashok-sc It seems like the typescript-definition is still wrong.\nI got it to work using:\n\"@types/react-dropzone\": \"4.1.0\",\n\"react-dropzone\": \"4.1.3\nEither you can change typing locally\nrow 51 in index.d.ts \nexport = Dropzone; => export default Dropzone;\nBut that will get overwritten of course..\nSo I instead added this when I import the module:\nimport * as Dropzone2 from \"react-dropzone\";\nconst Dropzone: any = Dropzone2; // @types/react-dropzone 4.1.0 exports wrong\nAnd this works both in typescript and runtime... ",
    "promgamer": "Same as @michaelsync here... Did someone managed to solve this?\nAlso, tried to import \ntypescript\nimport Dropzone = require('react-dropzone');\nbut I get ReferenceError: Dropzone is not defined. @benbayard\njson\n{  \"compilerOptions\": {    \"outDir\": \"build/dist\",    \"module\": \"esnext\",    \"target\": \"es5\",    \"lib\": [\"es6\", \"dom\"],    \"sourceMap\": true,    \"allowJs\": true,    \"jsx\": \"react\",    \"moduleResolution\": \"node\",    \"rootDir\": \"src\",    \"forceConsistentCasingInFileNames\": true,    \"noImplicitReturns\": true,    \"noImplicitThis\": true,    \"noImplicitAny\": true,    \"strictNullChecks\": true,    \"suppressImplicitAnyIndexErrors\": true,    \"noUnusedLocals\": true  },  \"exclude\": [    \"node_modules\",    \"build\",    \"scripts\",    \"acceptance-tests\",    \"webpack\",    \"jest\",    \"src/setupTests.ts\"  ]}. @michaelsync tried that already, doesn't work here.... For those wondering, I've found in typescript github that this behaviour was a bug that was fixed on v2.6! :smile: My problem was that I was using v2.5.3. ",
    "Schmitze333": "Is this still active? Otherwise, I would get it a try... I'd need the described behavior, too.. Still don't know yet... since the PR is very old, I am thinking about starting out from the current master. If so, I'll open a new PR and link the relevant issue. I will go over it on Friday and start with some examination. I will decide then. . I decided to start a new PR and branch from the current master.\nPlease, see https://github.com/react-dropzone/react-dropzone/pull/641. ",
    "alex-cory": "I fixed it. Submitting PR. Just kidding. I only needed to update to your latest release! :p . ",
    "dnish": "Closed, related to https://github.com/react-dropzone/react-dropzone/issues/276. ",
    "innov89": "Sorry its not clear as to what conduct I've violated? Or maybe provide some examples, thanks!. @SaraVieira Thanks for fixing..\nWe're using your library along with this one - https://github.com/jerryshew/react-image-cropper/issues/20 and looks like the issue is on their side with Canvas, Canvas doesn't support gifs. So we're looking at our options.. much appreciated for the speedy reply and sandbox :)\nGood work!. Thanks!!. ",
    "oyvindym": "Got the exact same bug. \nAlso, if I import Dropzone using import * as Dropzone from 'react-dropzone'; I get the following error when mounting the component:\ninvariant.js:42 Uncaught Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.\nUsing following package versions:\n{\n    \"@types/react\": \"16.0.14\",\n    \"@types/react-dom\": \"16.0.1\",\n    \"@types/react-dropzone\": \"4.1.0\",\n    \"react\": \"16.0.0\",\n    \"react-dom\": \"16.0.0\",\n    \"react-dropzone\": \"4.2.1\",\n    \"typescript\": \"2.5.3\",\n    ...\n}. @Lexanius Thanks, that did it. The issue still stands though, for v4.2.1. ",
    "Lexanius": "@oyvindym This solution works for me only with version 4.1.3\nmaybe \"module\": \"dist/es/index.js\", let the type file not working but it is only my opinion.\nSee:\nhttps://github.com/react-dropzone/react-dropzone/compare/v4.1.3...v4.2.1. ",
    "izadmehr": "As I found out the only way to fix this is using a label with for attribute. This label should be the parent of the children. By this change, there is no need to triggering the click event manually.. The for attribute worked just on label, we can't change it to div. I check it, it adds no more styling. For having more than one drop-zone, the id and for attribute removed, and input moved to the label as a child.. ",
    "pdomaleczny": "Hey, I am also having this issue on Safari 10.X version. Despite that it works on all browsers. I am using react-dropzone with 4.2.0 version. ",
    "libasoles": "Could you please guys try the demos in the page to confirm if it also happens there?\nhttps://react-dropzone.netlify.com/#proptypes\nI'm using v4.2.1, and it works great in linux. But my client reports that when he opens the dialog in chrome, it scrolls to the top of the page. I have no way to reproduce that. . ",
    "zwallacedev": "For anyone having trouble with this... I was having trouble determining why my iOS was not responding to touch events. It turns out that the original dropzone package that this was forked from only handles click events, but does not handle touch events. To enable these touch events as click events, you need to add the needsclick CSS class to your code.\nExample:\n```\nimport 'react-dropzone'\nexport default class className extends ReactComponent {\nrender() {\n    return  someFunction}/>\n  }\n}\n```\nNot entirely sure if this is related to @libasoles , but I believe this could help the original post. Here is the original post I found discussing this issue: https://github.com/enyo/dropzone/issues/935. ",
    "d33con": "I've got some strange behaviour here. In my app the file upload box opens and drag and drop works in Chrome and Edge but not in Firefox 60.0. However the examples page does work with drag and drop and the file upload box opens in Firefox.\nI'm using 4.2.9\nAny ideas?. ",
    "rafacianci": "No... it was just that....\nI didn't see the inputProps before....\nthank you..\nI'm gonna close the issue.. . ",
    "rohit-ravikoti": "Hi,\nIs this being worked on? We are having the same issues where our users can't select files on ios 10.1 devices.. ",
    "kurtfurbush": "I've been trying to debug this for a while but keep getting \"too much recursion\" debug errors in Firebug.\nIt seems that the onDragEnter event is possibly not happening before onDragLeave (as it does in Chrome) when moving from parent > child and vice-versa, which means this.dropTargets list doesn't correctly contain the \"other\" element (pushed in onDragEnter), which causes onDragLeave to continue and set isDragActive to false.. ",
    "bologer": "Issue is relevant, any ideas how to patch it?. onDragLeave() is not being fired as well when I move file to dropdown area and then move it away.\n. ",
    "andygock": "I'm also experiencing this issue, Firefox 64.0, does anyone have any solutions on this?. ",
    "matttti": "ah yes, indeed. I didn't see #468. Is there plan when it's gonna be incorporated?\nHowever, in my opinion the approach here may be more straightforward for common cases than using HOCs as children.. ",
    "iojichervo": "Calling event.stopPropagation() on elements inside ReactDropzone will prevent the file dialog from being shown.. ",
    "ntwarijoshua": "I had the same issue any solutions on this yet?. ",
    "ibc": "So, basically if disableClick is set to false, the onClick prop becomes useless. And it's disableClick is true, then a click always open the file selector.. Hi @rkmarks here a PR to fix and improve this issue:\nhttps://github.com/react-dropzone/react-dropzone/pull/694. Thanks for merging. Could I know when a new NPM version is published?. Hi @rolandjitsu, I'm checking typings/tests to learn how to add a test, but I do know where the \"actions\" or \"asserts\" are written. May I have a short explanation please?. ok, thanks, will try.. Here you have the requested tests :). Can you help me understanding which new lines are not covered by the tests? Obviously the lines in red here are covered in the tests.. I mean, I can remove empty lines (and make the code less readable) and get \"less uncovered\" lines, but I don't think that makes more sense.... ",
    "ngryman": "Hey @okonet, I know you're probably busy, I just would like to have some insights about this one as it forces me to explicitly bring a dependency I shouldn't have. Thanks!. Unfortunately it's a private repo.. ",
    "masterwendu": "@rkmarks Thank you for looking into my issue. I am sorry I found it. It was related with the android permissions. It was not allowed to add photos from firefox.. ",
    "jianliangzhao": "The drag & drop from file system stopped working for me completely. I am running Chrome Version 62.0.3202.94 (Official Build) (64-bit) on Mac High Sierra 10.13. ",
    "lukejpreston": "never mind you have a disableClick I didn't read the docs close enough. ",
    "dant00ine": "Anyone else having trouble getting disableClick to work?. Sorry it's been a while to come back to this, but I still can't avoid this problem.\nEven with the simplest code for the dropzone, clicking anywhere, including on an image preview, will trigger the file upload dialogue. I don't even understand how there would be any connection there??\nI can reproduce on FireFox and Chrome. I'll see if I can reproduce in an online repo somewhere.\n```\n                  \n                    <div className=\"photo-preview-area\">\n                        {\n                            this.state.product_images &&\n                            this.state.product_images.map( (img, idx) =>\n                                <li key={img.name}>\n                                    <span onClick={() => {this.removeImage(img.name)}}>X</span>\n                                    <span>{idx++}</span>\n                                    <img src={img.preview} />\n                                    <p className=\"photo-preview-caption\">{img.name}</p>\n                                </li>\n                            )\n                        }\n                    </div>\n\n```. ",
    "cd17822": "@dant00ine +1. ",
    "mihaimartalogu": "In case anyone stumbles upon this after searching for how to disable opening the file dialog when clicked (but keep the dropzone active), the solution is to stop the event propagation in onClick.\nHowever, this needs to be done on the element that gets the root  props, not on the Dropzone itself, i.e.:\n```javascript\n<Dropzone\n  ...\n  // not here\n\n event.stopPropagation()\n    })}\n```\n\n   .\n",
    "noudadrichem": "The package supports file upload on click, you want me to rebuild this whole functionality because my feature request is not relevant?\nsad..\n. I'm just requesting that the function that currently runs onClick can also run at onDoubleClick. As you're saying yourself the package is being designed to be very customizable. \nJust a request. haha \ud83d\ude1d. ",
    "felixveysseyre": "Sorry, I did not test nor respected commit messages.\nI will create a new Pull Request.. ",
    "moosch": "I'd think that was something to be handled by your onDrop function. ",
    "gtRfnkN": "@htrongnam This looks like you use the default ref property to get the reference to the styled component. But instead, you should use the innerRef to get the element inside of the styled component: https://www.styled-components.com/docs/advanced#refs. ",
    "christianbirg": "innerRef is also not working. Stuck at the same point. ",
    "alexcroox": "This works for me\n```\nimport React from 'react'\nimport Dropzone from 'react-dropzone'\nimport styled, { css } from 'styled-components'\nconst DropZone = (props) => (\n  \n    {({ isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles }) => (\n      \n        Drop files here\n      \n    )}\n  \n)\nconst DropZoneContainer = styled.div`\n  height: 400px;\n  border: 2px dashed #2c67d8;\n  padding: 30px;\n${props => (props.isDragActive) && cssborder-color: green;}\n`\nexport default DropZone\n```\nThe key was style={{}} on the Dropzone element to stop it from applying it's own default styles outside of my DropZoneContainer. ",
    "santiagogustavo": "@alexcroox works flawlessly for me, thanks!. ",
    "dennisroche": "PR up. \ud83d\udc4d . Also included is a fix to allow the project to be built/tested on Windows using cross-env. . comment added. \njs\n    try {\n      // The file dialog on Chrome allows users to drag files from the dialog onto\n      // the dropzone, causing the browser the crash when the file dialog is closed.\n      // A drop effect of 'none' prevents the file from being dropped\n      evt.dataTransfer.dropEffect = this.isFileDialogActive ? 'none' : 'copy' // eslint-disable-line no-param-reassign\n    } catch (err) {\n      // continue regardless of error\n    }. sure. splitting the pr and i'll do the rebase with bug ref. \nwe should create a CONTRIBUTING.md . rebased as requested. split xplat changes to https://github.com/react-dropzone/react-dropzone/pull/553. @okonet I'll kick off a Contributing.md PR. ",
    "gdepina": "@okonet Hi all, thank u for collaborating on this fantastic component, i have a similar issue my app is isomorphic and when i try to render from server i have same issue because node does not interprets imports, maybe was a problem with building?.\nI will investigate more to give a more accurate answer.\n. ",
    "mojadev": "import * as Dropzone from 'react-dropzone';\nworked for me. I digged a bit deeper, for me the problem was that I used ts-jest without         \"allowSyntheticDefaultImports\": true,\nin the tsconfig.json - that doesn't seem to work with react-dropzone. \nTL;DR: Add `\"allowSyntheticDefaultImports\": true to the tsconfig when using ts-jest :) \nFor some reason, this worked with the normal webpack build, but not when using jest:\npublic render() {\n        return <div>\n            <Dropzone>\n                Click here or drop ableton projects\n            </Dropzone>\n        </div>;\n}\nwas compiled to:\nthis.__proto__.render.toString()\n\"render() {\n        return React.createElement(\"div\", null,\n        React.createElement(react_dropzone_1.default, null, \"Click here or drop ableton projects\"));\n        {\n        }\n    }\"\nthe extra [default] breaks it in this case, as this is undefined. I'll check my build config once more, but if someone stumbles over this issue it might be helpful. \n. ",
    "niksosf": "I have the same \nReact.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: object. problem. and I use \njs import Dropzone from \"react-dropzone\";\nThis problem occurs immediately after I started using code splitting with Webpack. It affected a few other libraries such as redux-saga as well. \nas @mojadev said, using  solves it (same thing with redux-saga) . ",
    "sedge": "This issue seems to have broken dependant packages, like react-dropzone-s3-uploader. . ",
    "kildem": "I have the same\nas @mojadev said, using  solved the problem, but only on client side, on server rendering it throw error:\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.. @gtwilliams03 No, it isn't a good fix form me. I have client and server rendering.\nAs temp fix I build a local implementation of drag and drop. ",
    "gtwilliams03": "Not sure if this helps track this down, but if I run local, I need to use <Dropzone.default /> to avoid the above React.createElement: type is invalid error. \nIf I deploy to production (i.e., webpack), I need to render only <Dropzone /> to avoid the error.\n@mojadev @kildem Maybe this is a temporary fix for you?. @kildem Not a good fix for me either, FWIW.  I need to remember to swap <Dropzone.default /> and <Dropzone /> every time I deploy.... ",
    "rajdee": "@SourceCipher @kildem @okonet I fixed this issue by disabling module transformation by the Babel.  I.e. in .babelrc:\njs\n    \"presets\": [\n        [\n            \"env\",\n            {\n                \"modules\": false\n                ....\n            }\n        ]\n]. ",
    "MastroLindus": "I have the same issue using meteor and typescript.\nI didn't find a proper solution yet, but the previous version that didn't use default export used to work perfectly. ",
    "StaceC": "Same issue with Jest, Webpack, Electron and Typescript. Works fine in production, just Jest that seems to fail.\nWarning: React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\nUsing import Dropzone from 'react-dropzone';\nChanging to * and .default doesn't seem to help either.\nWill keep searching though - very useful package.. ",
    "sarfata": "Same issue for me. I can fix it by adding \"allowSyntheticDefaultImports\": true but then that breaks other things in my app.\nSo for now this is my fix:\n/* tslint:disable-next-line */\nlet Dropzone = require('react-dropzone')\nif ('default' in Dropzone) {\n  Dropzone = Dropzone.default\n}. ",
    "dmikheev": "For me it was webpack's ModuleConcatenationPlugin that apparently removed __esModule definition in react-dropzone files in development mode.\nBut I decided to turn off babel module transformation as @rajdee suggested, because it's better for webpack's tree shaking and to continue using concatenation plugin.\nAlso as I'm using TypeScript I had to change it's module to \"ES6\", moduleResolution to \"Node\", disable esModuleInterop and enable allowSyntheticDefaultImports.. ",
    "jpetitcolas": "After trying several described methods, I ended up using:\njs\nimport * as Dropzone from 'react-dropzone/dist/index';. My bad. We probably lose the prop somewhere on our side. Sorry for the noise! Great project by the way! :+1: . ",
    "yebrahim": "+1. If you're, like me, using create-react-app with Typescript, there's no way I can find around this problem. I can't even try any of the solutions above. :(. Thanks @rolandjitsu, that did work.. ",
    "dmt0": "For future googlers: that's what fixed it for me:\nhttps://github.com/webpack-contrib/webpack-serve/issues/208#issuecomment-403326541. ",
    "koffmoff": "I still have the same problem. But importing like this works:\nts\nlet Dropzone = require(\"react-dropzone\")\nif (\"default\" in Dropzone) {\n    Dropzone = Dropzone.default\n}. ",
    "Kazimirkas": "\nI still have the same problem. But importing like this works:\nts\nlet Dropzone = require(\"react-dropzone\")\nif (\"default\" in Dropzone) {\n    Dropzone = Dropzone.default\n}\nonly this workaround worked for me. Im using ts-jest. I had \"Element type is invalid: expected a string (for built-in components)\" problem. \n",
    "Joroze": "I can confirm, I\u2019ve found this issue as well and hopefully we can get a quick fix.\nEDIT: This seems to be fixed in v4.2.7 \ud83d\udc4d . ",
    "carmouche": "I'm also still seeing this issue in Chrome 65, Mac OS, using v 4.2.9.. I just found that it only happens when I have more than one dropzone on the component.\nIf I have only one dropzone in the component, dragging works as expected even after cancelling the browse dialog.\nIf i have 2 or more on the page, only the last instance of the dropzone works as expected.  The others will not allow dragging once the browse dialog has been cancelled.\nI will try to look into the source code and see why this is the case! \n. Still working on a solutiuon, but:\nI narrowed it down to line 52 in src/index.js\ndocument.body.onfocus = this.onFileDialogCancel\nThis statement causes the this.onFileDialogCancel to be attached to the onfocus event, but the body focus listener is overwritten by each instance of the component.  It causes this.fileInputEl to only ever refer to the last dropzone element when it is is referenced inside of that function.  It's likely this is why #575 is not working as well.. I'm seeing the same issue in 4.2.9 . ",
    "caedmon": "I'm seeing this too, MacOS, Chrome 64, v 4.2.9.\nIf I take out the change made for chrome 63 in 70ac399fd760d5b69d55f9cd8f335d76d9a5ba12 it works fine.  Is it possible the problem that was solving has been fixed in Chrome?  Or maybe the problem was windows only?. ",
    "j18s": "Can you please let us know when this issue will be fixed? It would be great help. ",
    "sesh": "@okonet I don't have enough knowledge of this package to help out with a fix at the moment. There is also a simple workaround that other people can use going forward.. ",
    "dan-lee": "Our build also fails with the following diff in the snapshots\ndiff\n-   <Dropzone\n+   <t\n       acceptStyle={\n    \u00a0  Object {\nI guess this came in by now providing ES builds: https://github.com/react-dropzone/react-dropzone/commit/1fd768b2a95d53dadc8c746cb83a373bbe312ab5\nI am not entirely sure what's going on, but the name of the class seems to get minified/transpiled?. I submitted a PR which should fix this issue: https://github.com/react-dropzone/react-dropzone/pull/657. Not sure if I missed something though. > On further review, is it not needed in onDragStart, onDragOver, onDragLeave, and onClick\nOh so the only place should be onDrop then, I guess? I just adjusted all the places where getDataTransferItems 'manipulated' the event.\n\nAlso I would push the persist call further up, ideally with the preventDefault and stop propagation calls\n\nFair point! Will change it. @okonet I really would love to! But this behaviour doesn't seem to be reflected in the unit tests. The event is always populated with dataTransfer, which in practice it shouldn't. I tried a lot of things, but couldn't find a way to break it.. ",
    "thaddeusreid": "After upgrading from 4.2.6 to 4.2.7 I also experienced test failures on a project.\nChanging the find argument from a string\njs\n...\ncomponent.find('Dropzone')\nto the component module got them passing.\njs\nconst Dropdown = require('react-dropzone');\n...\ncomponent.find(Dropzone);. Using macOS/Google Chrome (version 63.0.3239.132), this error is reproducible when you click on the Dropzone element, select an image, let it upload, then render a preview. The console error appears:\nindex.js?00e3:298 Uncaught TypeError: Cannot read property 'files' of null at eval (index.js?00e3:298)\n(anonymous) @ index.js?00e3:298\nsetTimeout (async)\nonFileDialogCancel @ index.js?00e3:296\nAbout to create a PR\n. Hmm, looks like TravisCI is failing on a lint error that the \"precommit\": \"lint-staged\" will correct even when I am intentionally committing the lint changes TravisCI wants to see. . Strange. The eslint phase of the TravisCI build asks for one thing:\n/home/travis/build/react-dropzone/react-dropzone/src/index.js\n  401:10  error  Replace `\u23ce\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7...divProps\u00b7/*\u00b7expand\u00b7user\u00b7provided\u00b7props\u00b7first\u00b7so\u00b7event\u00b7handlers\u00b7are\u00b7never\u00b7overridden\u00b7*/\u23ce\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7` with `...divProps\u00b7/*\u00b7expand\u00b7user\u00b7provided\u00b7props\u00b7first\u00b7so\u00b7event\u00b7handlers\u00b7are\u00b7never\u00b7overridden\u00b7*/`        prettier/prettier\n  415:12  error  Replace `\u23ce\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7...inputProps\u00b7/*\u00b7expand\u00b7user\u00b7provided\u00b7inputProps\u00b7first\u00b7so\u00b7inputAttributes\u00b7override\u00b7them\u00b7*/\u23ce\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7` with `...inputProps\u00b7/*\u00b7expand\u00b7user\u00b7provided\u00b7inputProps\u00b7first\u00b7so\u00b7inputAttributes\u00b7override\u00b7them\u00b7*/`  prettier/prettier\nYet when I manually change my local file to match what Travis is expecting, the precommit script in package.json applies an eslint --fix to undo my change. Seems like there must be a version mismatch between my local and TravisCI.\nHere are my local versions of eslint and lint-staged:\nbash\n$ ./node_modules/.bin/eslint --version\nv4.16.0\n$ ./node_modules/.bin/lint-staged --version\n4.3.0. @okonet yes.\neslint --fix  it styles the code like this:\njavascript\n{\n  ...divProps /* expand user provided props first so event handlers are never overridden */\n }\nwhile TravisCI wants this:\njavascript\n{...divProps /* expand user provided props first so event handlers are never overridden */}\nThis is so dirty... I removed \"precommit\": \"lint-staged\", from my local package.json so that I could commit the lint style TravisCI wanted... and now it's passing.. @okonet Ahh, that's the problem. I installed dependencies with npm install.\nI can see the same results as TravisCI after removing node_modules, yarn install, and yarn run eslint:src.\nJust a habit of mine to use npm over yarn. Thanks for the merge \ud83d\udc4d \n. I found the Releases tab meet my needs: https://github.com/react-dropzone/react-dropzone/releases Maybe you've already seen it and are yearning for more :). I am also seeing an app-crashing error after upgrading to v10.\nSome additional details:\n- react/react-dom@16.8.3\n- webpack@3.2.3\nThe react-dropzone component loads just fine when loading my app without minification. To reproduce the error, bundle the app and minify it. When the component is loaded the app will crash (white screen) and throw an error in console:\napp.04245da74f0362e33719.js:145 TypeError: Cannot set property 'lastEffect' of null\n    at ti (app.04245da74f0362e33719.js:145)\n    at ni (app.04245da74f0362e33719.js:145)\n    at Object.useEffect (app.04245da74f0362e33719.js:145)\n    at useEffect (app.04245da74f0362e33719.js:129)\n    at L (app.04245da74f0362e33719.js:121)\n    at E (app.04245da74f0362e33719.js:121)\n    at Ko (app.04245da74f0362e33719.js:145)\n    at app.04245da74f0362e33719.js:145\n    at Xa (app.04245da74f0362e33719.js:145)\n    at Ha (app.04245da74f0362e33719.js:145)\n    at Ss (app.04245da74f0362e33719.js:145)\n    at qs (app.04245da74f0362e33719.js:145)\n    at xe (app.04245da74f0362e33719.js:145)\n    at wn (app.04245da74f0362e33719.js:145)\nHappy to share more details as needed.\nEdit: Work-around is to downgrade to v9.0.0, no more crashing.. ",
    "timothyallan": "My heart says yes, my multiple project deadlines say probably not :) . ",
    "aaayumi": "I found out that I have to use a specific version. The latest version didn't include disabled property. The version I use was v4.1.0.. ",
    "Jkettler": "If anyone else finds themselves here, they should also try adding the disableClick property. From reading @aaayumi it sounds like he was making the same mistake I was (assuming disabled would disable both clicking and dropping).. ",
    "franckamayou": "Updated the PR description. Let me know if this is clear enough.. Sure thing, I'll let you know when I update the PR then. I've updated the PR, tested and verified that it works with my application.. ",
    "alexeychikk": "@okonet Could you review my PR, please? We use several ReactDropzone instances in our company so this fix is very important to me.. ",
    "amiiit": "@okonet any updates on this? It seems like attr-accept is already fixed in the last release v1.1.2. But react-dropzone still depends on the older v1.0.3. Do you think just updating the dependency here would work?\nEDIT:\nOkay, I could solve it for now by making webpack ignore node_modules. Hopefully this is information is useful for anyone else that might encounter the same issue. ",
    "Baskerville42": "sorry, the problem was with ref mocking\nfunction createNodeMock(element) {\n  if (element.type === 'input') {\n    return {\n      addEventListener() {},\n      removeEventListener() {},\n    };\n  }\n  return null;\n}. ",
    "thoja21": "Commit #561 fixed this issue for me. Closing.. @rkmarks @coopersamuel - is this essentially the same issue I reported in  #570 ? I'm not familiar with how React Router works but I was getting that same error if the DropZone control was removed from the DOM before setTimeout in onFileDialogCancel had finished. @coopersamuel I can't see this happening in the snippet you added though?. @coopersamuel Thanks, useful to know. Sorry didn't twig that history.push('/results'); would route - whoops..... @coopersamuel #561 fixed this issue for me. Can you confirm the latest release fixes this problem for you too?. ",
    "coopersamuel": "@rkmarks i can't get you access to the repo, but it shouldn't be hard to reproduce. Here's a snippet\n<Dropzone onDropAccepted={(accepted) => {\n                           submitFile(accepted);\n                           history.push('/results'); // <= throws the error\n                           //setTimeout(() => {history.push('/results')}, 250); // <= workaround\n                     }} \n</Dropzone>. @thoja21 yes, probably a similar situation. What don't you understand about the snippet? history.push('/somewhere'); will route to another location within the application via React Router, thus removing control from dropzone. Also, similar to your situation, I've solved this with a delay of 250 milliseconds - looks like it takes that long for onFileDialogClosed() to run. ",
    "gregorianisch": "Same here, please fix asap if possible. Thanks! . ",
    "viniciusdacal": "this and #557 are related. Will try to open a PR with the fix.. ",
    "jaredkirkley": "bump. ",
    "Tomisiak": "Looks like this issue still appears in Firefox browser on Windows and Mac OS. Tested on latest version.. ",
    "gonmercado": "I can confirm that too @sadokmtir, the simplest dragdrop example will fail to drag and drop any file on Edge 41.16299.15.0, Windows 10 and react-dropzone version 4.2.8\nUpdate: If I go to https://react-dropzone.js.org/ the demo component with edge, it doesn't work there too.\nUpdate 2: I've tried with another Edge of a different laptop and it did work both, example and my code, so it has to do something with some configuration of Edge.\n. ",
    "dmoli": "Sorry, I thought it was the same project.\nThanks!. ",
    "hazemyth": "So, is this possible with React-Dropzone?. Okay, thanks for the quick reply.. ",
    "garima-birdeye": "@rkmarks  This only happens if we have MS office installed in MAC and then in any browser (be it chrome, safari or any other.)\nchrome version : Version 63.0.3239.132 (Official Build) (64-bit)\nsafari version : Version 10.1.1 (12603.2.4)\nMAC version : 10.12.5 (16F73)\ndropZone verison : 4.1.3. ",
    "Ionut-Milas": "I'm having the same issue uploading docx files on Chrome with Windows 10.\nOn MAC works just fine. ",
    "koos303": "If I save an existing Excel file as File Format ''Strict Open XML Spreadsheet (.xlsx)\" it works with file type application/vnd.openxmlformats-officedocument.spreadsheetml.sheet. ",
    "michaelmerrill": "I believe we should reopen this issue. Many plist files are exported as .xml. If we accept only \"application/xml\" then no files are return via onDrop(). If we accept \"text/plain\" then .xml is not selectable as a filetype. Meaning the only way we can register plist.xml files are by accepting all files. Here is a stack overflow thread about this topic. \nOne possible solution is to accept a mime-type of \"text/xml\" which many files are still exported as. Thoughts?. ",
    "leantorres73": "Yeah sorry I think it was a folder permission issue... I was trying to upload from my \"pictures\" folder. I copied the file to another folder and it worked. I also saw in gmail when I tried to attach the same picture that I get a message saying \"this image is 0 bytes\" . \nThanks for the help. ",
    "Victor502": "We've found that it does have to do with High Sierra, it works with our clients that have El Capitan, and earlier versions of High Sierra. Also, I'd like to mention, you can upload a .zip file just not an image file.. ",
    "softmarshmallow": "USE\nimport Dropzone from 'react-dropzone'\nDONT USE\nimport {Dropzone} from 'react-dropzone'\n. ",
    "reemtariqq": "i'm using windows 10 and latest version of react-dropzone. we managed to solve this issue by adding the extension and mime types in the acceptedfile prop as following \n.csv , .xlsx . ",
    "eric-nodes": "hi, same for me, on chrome v65, windows 7 pro. ",
    "horacioh": "great! working on this :)\nis there any Contribution guidelines?. ",
    "veerabio": "Pull-request https://github.com/quarklemotion/html5-file-selector/pull/2 should fix the one failing test. @okonet, @quarklemotion the reason the package size has increased from 5KB to 30KB  is because, the html5-input-selector uses the mime-db. Using the mime-db can fix issues like bug #582 but it comes at the cost of package-size. I can pull in the code from https://github.com/quarklemotion/html5-file-selector directly into react-dropzone make the necessary changes to keep the package size small. Please suggest.. @okonet please see my other pull-request #595 . Below is the package size with the new version:\n  dist/index.js\n  Package has exceeded the size limit\n  Package size: 31.68 KB\n  Size limit:   5.5 KB\ndist/es/index.js\n  Package has exceeded the size limit\n  Package size: 8.81 KB\n  Size limit:   3 KB. are you asking about the https://github.com/react-dropzone/react-dropzone/pull/595/commits/ae6716f3da99ffd28c9a462663479f34a3eb3e3c . this was a bug i found while using react-dropzone with folders. you can drag text and drop in the dropzone in which case the entry is null which causes issues. I made the same pull request to https://github.com/quarklemotion/html5-file-selector/pull/3. This can be acheived with https://github.com/veerabio/react-dropzone/commit/23cc5765ac67718c3f615333258c98c022fe95f7 \nis this acceptable?. @okonet @rkmarks I prefer async/await as well, but in this case I think there is nothing to 'await' on. I will explore how I can do this, please suggest if you can think of a way. @okonet this was the way to make it 'await' thus allowing the stub to resolve before doing the assertions. ",
    "aodinok": "Ok, now after going thru already opened PRs I see that I'm not first \ud83e\udd23\nGuys looks like it highly demanded feature, why not finalize together one of the already opened PRs which is closest to finishing this feature?. ",
    "zanisis": "i want adding question, maybe possible if drags disabled ?.. ",
    "arelaxend": "It is useful for the user because he can see in advance where is the dropzone area! Is this what you mean ?. ",
    "sweelemk": "no, i dont update my version, but i looked example https://react-dropzone.netlify.com/#styling-dropzone and tested - the result is the same. I tested with version 4.2.9 and all work. Thx. ",
    "MareliBasson": "@rkmarks sure, i'm willing to try . I'm still quite junior when it comes to JS, so I'll see if I can figure out.. ",
    "stclairdaniel": "It also doesn't trigger the rejectStyle prop's styles. This would be a really great fix.. This should definitely still be looked at.. I decided to try implementing this myself but running into some issues. The problem is that the max and min size props were only being checked in the onDrop method to determine to accept or reject the files - they were not being used in the render method to control the styles. I tried to add the fileMatchSize check into fileAccepted, but it appears that I can't actually get the file size in getDataTransferItems inside onDragEnter - the dataTransfer.items list somehow doesn't contain actual files - if I call item.getAsFile() I get back null. Not sure if this is a browser quirk, but I can't seem to get around it. Does anyone know how to get the file size of file currently being dragged before it's dropped? If we can't do that, we can't resolve this ticket.. ",
    "eluchsinger": "@rmarks The bug described here is also present in the example with Firefox 60.0.1.\nJust drag a .PNG file over the text of that example and the styles will disappear.. ",
    "marcofugaro": "@okonet added the styles for the input, but I had some troubles with the position: relative; on the container.\nI updated the tests inserting position: relative; inline, did I do it right? Could it be more elaborate? Thanks. The only technique of hiding I found that still pops up the required notifier is opacity: 0.0001 and pointer-events: none. At least in chrome.\nThen I set a \ncss\nposition: absolute;\ntop: 0;\nleft: 0;\nbottom: 0;\nright: 0;\nto align the required warning to the dropzone.\nWhat do you think?. Yea, it works fine with undefined, I tested even in safari:\n\n. @okonet what do you mean? Update the code how?. oh sure thing, sorry it was not clear. @okonet it shows the tooltip, but it doesn't work with the positioning of the tooltip, in some browsers the tooltip is down, other up (safari), this is an example on safari:\n\nWith my solution the appear fine because of the position: absolute, like it was a normal input.. @okonet Chrome, safari and firefox. I have no easy access to edge but I'm sure it works just fine. Sure thing!. ",
    "Mickyfen17": "Hey @nazarposhta, I just ran into this issue today, it seems to also be happening in Firefox. \nThe way I got around it was by using accept: \"audio/mp3, audio/mpeg\".\nIt looks like Safari and Firefox use the MIME audio/mpeg whilst Chrome prefers audio/mp3.\nThis post helped me https://stackoverflow.com/questions/10688588/which-mime-type-should-i-use-for-mp3\nHopefully this will help you, if this issue still exists for you.. ",
    "koretskiyav": "@okonet I can not reproduce this problem myself, both before this fix and after. ",
    "MarinaZadoyanchuk": "Ok, I'm going to write a usage of getDataTransferItems soon.. I have described it in the propTypes section, should I describe it here too?. ",
    "arunchouhan163": "Please merge this PR. ASAP.\nThanks.. ",
    "ralexrdz": "I'm not succeding implementing getDataTransferItems. Do you have a example I can follow?. @rolandjitsu thanks a lot. It was the Promise / async I was missing ;). ",
    "safeimuslim": "oke thx. ",
    "jare-talend": "I try the latest version and the onDragEnter isn't more triggered when i drag a file from my file system.\nWe can reproduce this on the demo page.\n\nWe should get Drop files... message when the user starts to drag a file in the DropZone. ",
    "vladp": "if Input element is exposed as @donysukardi  suggests, would that help in integrating this component with react-native , (and other JS-based setups where there is no notion of a root browser window))\n. ",
    "theGABS": "Hi, I can try. Need some times to implement it.. ",
    "tobilen": "sure! the onDrop callback does not provide an event as argument, only an array of selected files. i want to get the actual FileList object that's provided as part of the event, because i can use it in turn to set the files/dataTransfer attribute on other inputs (see https://stackoverflow.com/a/47522812).\ni also like all of our interactable components to have the same interface (i.e. onChange prop with event as argument).\nI might create another PR in the future to add an onChange prop to react-dropzone itself, which always provides a change event as first argument, regardless of whether files were selected via drop or file dialog. But i figured the change proposed in this PR is a good first step.\nBut without looking at my specific use case, the actual issue i see in the current implementation is that the point of an escape hatch like inputProps is to give direct access to the underlying element. Currently any change event is being overwritten. That's why i checked bugfix and not feature.. the problem is actually not solved by making the test async when using react 16 / enzyme 3. To demonstrate, here is a react-dropzone version with updated dependencies: https://github.com/react-dropzone/react-dropzone/pull/645\nas you can see, the tests in question are all red. I'd appreciate any help, but will take a look myself in the next couple of days. https://github.com/react-dropzone/react-dropzone/pull/645/commits/0651264c87eb83fe64ec68ec47e130058fb1fca1 fixes the issue. this will be closed automatically once you merge the PR \ud83d\ude04 \ni don't think a new major release is warranted. Functionally, everything worked fine. its just the tests that needed some love.. solved by #645 \nalready did a couple comments ago though. you also get a specific close message here when merging a PR with the closes or fixes keyword, indicating that it was solved via this PR \ud83e\udd13 . as a side note, the nested Dropzone component behavior test block is kind of messy, with stuff leaking into each other deliberately. i tried to clean it up a but, but ideally we replace sinon with jest spies and reset them in between tests ( https://jestjs.io/docs/en/configuration.html#clearmocks-boolean ). Can do, but i would do it in a different pr. i was able to get rid of a lot of setTimeout calls, which feels pretty good!. ",
    "xuefanzhang": "bump. ",
    "ilovett": "https://openradar.appspot.com/36726477. ",
    "josephfrazier": "Hmm, I can try, but I'm not sure of the best way. If https://github.com/react-dropzone/react-dropzone/commit/ccb859f1eaa43683952bc4f3d4b6d3283a8582a8 had a test, I would have adapted it. What do you think?. ",
    "jeffal": "Thank you for this change, I believe this will also solve https://github.com/react-dropzone/react-dropzone/issues/485 without the need to create a node mock.. ",
    "Alekseykua": "Bump. ",
    "slikts": "Ideally this should be done using browserslist.. The behavior works in other libraries with Edge, so it's possible technically. This has been discussed in the issues linked to #725 (like #723), the take-away being that users don't differentiate between file explorer windows and open dialogs. #725 specifically enables this behavior, but appears to have missed Edge, so I'd urge you to reopen this issue. I'll look to try to make a PR for it shortly.. It turns out that Edge blocks all async tasks except for the drop events, so the issue on this library's side was that the onDrop handler uses Promise.resolve(...).then(...), which means it queues a microtask that only gets called after the dialog closes. Other browsers also block async tasks while the dialog is opened, but only the tasks that were queued before it was opened. Adding an ugly workaround like this allowed the onDrop handler to finish executing while the dialog is open in Edge:\njs\n    const resolve = isIeOrEdge()\n      ? value => ({\n          then(onFulfilled) {\n            onFulfilled(value)\n          }\n        })\n      : Promise.resolve\nHowever, it appears React's rendering is also async, so this approach doesn't solve the issue, and the dropped files don't appear before the dialog is closed. In sum, this issue may be unsolvable if React is used for rendering, unless there's a way to coax React to render synchronously.. ",
    "danielweck": "Same observation. We are sticking to version 4.2.11 for now.. ",
    "racingrebel": "I would also like to request this feature.\nI can make a contribution to address this if you would like @okonet .. ",
    "dfsq": "This would be very convenient.. ",
    "danadn": "What about sharing the workaround @RaphaelRegnier please?. ",
    "conor-kelleher": "@RaphaelRegnier I'd also very much appreciate hearing about your workaround for this. ",
    "RaphaelRegnier": "Hello @okonet and sorry for taking so long. Here is a video sample of what I built using dropzones : \nhttps://www.useloom.com/share/8ad3082bec7c4d7abe0d5ef8cc561db7\nIn this demo you can see : \n1) I'm adding one file in the first dropzone, then 2 others but the limit is set to 2 so you get an error.\n2) I'm dragging a file on the second dropzone by dropping it.\n3) I'm adding 2 files to the third dropzone, with a max number of files that is set to 4\nYou can click on the trash icon to delete your item, once you click on the form submit button, it disables the dropzones while uploading the files. If you reload the page, we disable the dropzones and display a message saying we got all your files already.\nHere's a gist of these custom dropzones, it could be refacto but eh, it has been working fine for a while :)\nhttps://gist.github.com/RaphaelRegnier/797015e23a64e8959182528646b46954\n. ",
    "asfordmatt": "Related to this PR: https://github.com/react-dropzone/react-dropzone/pull/616\nWe've been able to get our tests passing by adding async/await similar to the above PR. ",
    "loopmode": "I don't think this is a react-dropzone issue, but rather an issue with webpack 4 or your specific setup..\nI just tried out with react@16.4.2, react-dropzone@4.3.0 and webpack@3.8.1 (create-react-app), and it works just fine.\nAlso, the code does a perfectly normal export default and it's up to the consumer or env to interpret it correctly.\nAbout the linked change in webpack behaviour: I think that's about import() as a function, and not about import as a statement.\n(import('react-dropzone').then(({default: Dropzone}) => { ... }) or const {default: Dropzone} = await import('react-dropzone');. ",
    "elrumordelaluz": "oops, stale\u2026. ",
    "ddela-cr": "I'm also trying to figure out how to upload stl files. When I drop a .stl file, the type is empty. According to #597, it should work.\n\n. @raviredd i've been looking for a fix for this. Have you figured out how to make it work?. ",
    "tomjn": "Switching to 4.2.* in npm and rebuilding fixes that issue, so this is an issue in 4.3.x. @rkmarks changing to 5.* and rebuilding reproduces the error. v5.0.1 specifically:\njson\n    \"react-dropzone\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/react-dropzone/-/react-dropzone-5.0.1.tgz\",\n      \"integrity\": \"sha512-v2bwYi5zQkUTuY5e1NHacaPUgPjN9XqyAsCy5B07ZVWS8HMzqp+uvn91NT3INwdUU1yiEC7uJp57XD8tmkTh6A==\",\n      \"requires\": {\n        \"attr-accept\": \"^1.1.3\",\n        \"prop-types\": \"^15.5.7\"\n      }\n    },. I tried something similar to fix that issue, it didn't work but I think the problem was I didn't do it in all the places you did :). On further review, is it not needed in onDragStart, onDragOver, onDragLeave, and onClick? Also I would push the persist call further up, ideally with the preventDefault and stop propagation calls. ",
    "ml242": "I was looking just at this moment regarding this same issue, and found that if I rolled back to   \n\"react-dropzone\": \"4.2.13\",\nmy app worked as it used to.. @nfantone - thanks for digging around for that. I had pinned the library to the earlier commit but I'll keep an eye out for your change.. ",
    "nfantone": "Experiencing the same here.\nAlso, the example on the docs, as it's currently written, seems to be wrong.\n```jsx\n<Dropzone\n  accept=\"image/png\"\n\n{({ isDragActive, isDragReject, acceptedFiles, rejectedFiles }) => {\n    if (isDragActive) {\n      return \"This file is authorized\";\n    }\n    if (isDragReject) {\n      return \"This file is not authorized\";\n    }\n    return acceptedFiles.length || rejectedFiles.length\n      ? Accepted ${acceptedFiles.length}, rejected ${rejectedFiles.length} files\n      : \"Try dropping some files.\";\n  }}\n\n```\n\nSince isDragActive is always true, regardless of whether the file will be rejected or accepted, the message shown on drag will always be \"This file is authorized\".\n. After taking a look at the source code, the problem turned out to be fairly simple to spot: renderChildren is calling the render function passing in a shallow copy of its inner this.state; however, while initialized as empty arrays ([]), neither acceptedFiles nor rejectedFiles are ever updated in the state.\nThis here is the faulty commit, which landed in v4.3.0.. @Emidomenge There is. You can either use isDragAccept instead of isDragActive or you can just re-arrange the order in which the conditionals are written. Or both, to make it cleaner.\n```js\n<Dropzone\n  accept=\"image/png\"\n\n{({ isDragAccept, isDragReject, acceptedFiles, rejectedFiles }) => {\n    if (acceptedFiles.length || rejectedFiles.length) {\n      return Accepted ${acceptedFiles.length}, rejected ${rejectedFiles.length} files;\n    }\n    if (isDragAccept) {\n      return \"This file is authorized\";\n    }\n    if (isDragReject) {\n      return \"This file is not authorized\";\n    }\n    return \"Try dropping some files.\";\n  }}\n\n``. @kristofferh FYI, I fixed this issue by addingthis.setState({ acceptedFiles, rejectedFiles })on theonDrophandler after L220 ofsrc/index.js`. I'm using a fork with this patch (cc. @Emidomenge @ml242). @okonet https://github.com/react-dropzone/react-dropzone/pull/667. Many thanks for the prompt input and release, @okonet!. \n",
    "Emidomenge": "I noticed this bug on the documentation as well. And I immediatly came here to check if someone reported this issue, haha.\nEDIT:\nI rollbacked to version \"4.2.13\", I still have the same issue which is the fact that I never see the rejected label displayed when I'm dropping an incorrect file.\nIs there a workaround ?. ",
    "kristofferh": "@nfantone Cool. I haven't had a chance to look into the issue, but if your patch fixes it I'm sure the maintainers would love a PR.. ",
    "AlexandrLi": "Hey, guys! When do you plan to release this fix? I'm currently implementing a feature that highly depends on this and it's kinda blocker for me.. > It should be released already\nJust checked npm-registry and it shows the last publish date - 17 days ago. Could you double check, please? Did you change the version of the package after this fix?. ",
    "henkiejan": "I'm using Google Chrome version 68.0.3440.106 and dropping files on the test dropzones at https://react-dropzone.js.org/ isn't working for me.. ",
    "rNiall": "For me, the same behavior as @henkiejan mentioned. Tested on Chrome Version 68.0.3440.75 (Official Build) (32-bit) & Version 69.0.3497.100 (Official Build) (64-bit)\nUPD: Seems that drag and drop functionality (without actions which @ThomasPnt mentioned) breaks for me since react-dropzone@4.2.4 (last working version @4.2.3) version. Tested with basic example with React 15.6.2 on chrome\nUPD2: This behavior appears only if you open file explorer by click on dropzone If you manually open file explorer and then 'drag and drop' all works perfectly fine. (so may be when you open explorer by clicking on dropzone you might just open files). But it's still a bug I think because all stuff worked on @4.2.3) . @rolandjitsu  Step to reproduce drag and drop lack.\n1. Open https://react-dropzone.netlify.com/\n2. Use any of examples.\n3. Left-mouse click on dropzone to open file explorer from browser.\n4. Try to drag-n-drop file from opened explorer.. @rolandjitsu Of course.\nI just mentioned that It works on @4.2.3. And newer versions lost this ability. @rolandjitsu Thanks for explanation. Now I see. ",
    "lsadam0": "For those experiencing this bug: Are you also using the react-dnd library?  The presence of HTML5Backend from react-dnd-html5-backend breaks react-dropzone, the onDrop event never fires\nEdit: @rolandjitsu In my case, this behavior was introduced in v6.2.4 w/ fd65863a0539c10cf3decd2b59b32c67e517dea0 . <= v6.2.3 works fine with the presence of react-dnd's HTML5Backend. @rolandjitsu Yep, react-dnd can also handle file drop.  There's no good reason we need to use both libs, it was just a decision made prior to my time on the project and I was trying to avoid re-writing that portion at the moment.  \nI understand, I can't provide an example. I did debug for a bit but did not spend enough time to find the resolution.  Honestly, I would have spent less time if I had just taken the plunge and relied solely on react-dnd :) .  Thanks!. ",
    "dbelay22": "The same here on Chrome /  MacBook Pro / Dropzone v4.2.11. ",
    "LangdalP": "I accidentally submitted this to the upstream repo. My plan is to temporarily use this fix until we can submit an issue or a better PR.. ",
    "Spenhouet": "@rkmarks sure\nFileBox.tsx:\n```\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport UploadIcon from '@material-ui/icons/CloudUpload';\nimport FileIcon from '@material-ui/icons/InsertDriveFile';\nimport 'src/components/FileBox.css';\nconst defaultState: State = { openSnackBar: false, disabled: false, files: [] };\ninterface State {\n  openSnackBar: boolean;\n  disabled: boolean;\n  files: any[];\n  errorMessage?: React.ReactElement;\n}\ninterface Props {\n  filesLimit: number;\n  fileSizeLimit: number;\n  setFiles: (files: any[]) => void;\n}\nexport default class FileBox extends React.Component {\n  constructor(props: any) {\n    super(props);\n    this.state = defaultState;\n  }\nonDrop = (acceptedFiles: any[], rejectedFiles: any[]) => {\n    let oldFiles = this.state.files;\n    const filesLimit = this.props.filesLimit;\noldFiles = oldFiles.concat(acceptedFiles);\n\nif (oldFiles.length <= filesLimit) {\n  this.setState(\n    {\n      files: oldFiles\n    },\n    this.changeButtonDisable\n  );\n  this.props.setFiles(oldFiles);\n}\n\n};\nonDropRejected = () => {\n  };\nchangeButtonDisable = () => {\n    if (this.state.files.length >= this.props.filesLimit) {\n      this.setState({\n        disabled: true\n      });\n    } else {\n      this.setState({\n        disabled: false\n      });\n    }\n  };\nremoveFile = (file: any, fileIndex: number) => () => {\n    const files: any = this.state.files;\n    // This is to prevent memory leaks.\n    window.URL.revokeObjectURL(file.preview);\nfiles.splice(fileIndex, 1);\nthis.setState(files, this.changeButtonDisable);\nthis.props.setFiles(this.state.files);\n\n};\npublic render() {\n    const previews = this.state.files.map((file, key) => {\n      let avatar: React.ReactElement = (\n        \n\n\n      );\n  return (\n    <Grid item={true} key={key}>\n      <Chip key={key} avatar={avatar} label={file.name} variant=\"outlined\" onDelete={this.removeFile(file, key)} />\n    </Grid>\n  );\n});\n\nreturn (\n  <div>\n    <Dropzone\n      multiple\n      onDrop={this.onDrop}\n      onDropRejected={this.onDropRejected}\n      className=\"dropZone\"\n      acceptClassName=\"stripes\"\n      rejectClassName=\"rejectStripes\"\n      accept=\".pdf\"\n      maxSize={this.props.fileSizeLimit * 1000000}\n      disabled={this.state.disabled}\n    >\n      <Grid container={true} direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={16}>\n        <Grid item={true}>\n          <UploadIcon className={'uploadIconSize'} />\n        </Grid>\n      </Grid>\n    </Dropzone>\n    <Grid className=\"fileList\" container={true} direction=\"row\" spacing={8}>\n      {previews}\n    </Grid>\n  </div>\n);\n\n}\n}\n```\nFileBox.css:\n```\n.uploadIconSize {\n  width: 51px !important;\n  height: 51px !important;\n  color: #5c5c5cbb !important;\n}\n.dropzoneText {\n  color: #5c5c5cbb !important;\n  text-align: center;\n}\n.dropZone {\n  border: dashed;\n  border-color: #5c5c5cbb;\n  cursor: pointer;\n}\n.stripes {\n  cursor: pointer;\n  border: solid;\n  border-color: #5c5c5cbb;\n  background-color: #5770532f;\n  background-size: 150% 100%;\n}\n.rejectStripes {\n  cursor: pointer;\n  border: solid;\n  border-color: #5c5c5cbb;\n  background-color: #974f4f5b;\n  background-size: 150% 100%;\n}\n.fileList {\n  padding-top: 4px;\n}\n```\n. @rkmarks Okay, that seems to be a different issue. With accept=\".pdf\" also pdf files will be rejected. Therefore always only the reject style is used.. @rkmarks Sorry, I found out I did define the accept parameter wrong.\nInstead of \".pdf\" I should have used \"application/pdf\".. ",
    "d-ivashchuk": "I will work on that!. I've managed to get plugin API working but only in isolated create-react-app environment.\nCode below works as expected, but I am struggling to make it work with styleguidist while I think it would require installing the package for the plugin in question to import and use it.\n```\nimport React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { getDroppedOrSelectedFiles } from 'html5-file-selector';\nclass FolderExample extends React.Component {\n  constructor() {\n    super();\n    this.state = { files: [] };\n  }\nonDrop(files) {\n    this.setState({\n      files\n    });\n  }\nrender() {\n    return (\n      \n\n\n              getDroppedOrSelectedFiles(evt).then(list =>\n                list.map(({ fileObject, ...rest }) => fileObject)\n              )\n            }\n            onDrop={this.onDrop.bind(this)}>\n            Try dropping a folder here.\n\n\n\nDropped files\n\n            {this.state.files.map(f => (\n              \n                {f.name} - {f.size} bytes\n              \n            ))}\n          \n\n\n    );\n  }\n}\n\n```. If that is not a problem I will make a PR so you can check how it looks then :). @okonet sure, I\u2019ve made a PR day ago \nSent with GitHawk. I am quite new to PRs, @rkmarks can you explain in a couple of words what exactly I need to do\ud83d\ude00thanks!. @okonet ok, will work on that in the evening!. I've tried to cover all the requested changes in commit be2a4fc. The one with an id of ff887d2 is here just because I've messed up with git little bit :). >> The one with an id of ff887d2 is here just because I've messed up with git little bit ...\n@okonet kind of, but I\u2019ve never worked with git repos that are dynamically changing before so I am still learning some thing. This one happened when my branch fell behind with the master and I needed to update my forked branch before pushing changes.. @okonet don't worry, I thought the same and anyway wanted to ping you on this tomorrow:) I will do my best to finish it\n. @okonet I am not sure I am doing the right thing, so have a look at the last changes please. I've rearranged the structure of Extending Dropzone section so it contains subsections and added a little bit of info to the Plugin Architecture. As far as I can see now, getDataTransferItems prop which is where we plug our functions already has function signature and is there in docs. Maybe I understood something wrong, if so, it would be great if you could elaborate a little bit.. I am happy to help! If you have some other tasks that need some help, feel free to ping me!. @okonet  I am not sure about this one. Shall I just add <!-- language = JSX Harmony --> at the top of this file? It is the only thing I found for setting language explicitly, is it right?\n. @okonet No, you are right it's redundant. @rkmarks Thanks!\n. I couldn't find anything to display folder structure in the plug-in, so I will add full paths of dropped files for now so that it's clear what plug-in is responsible for.. For me the explicit example is more about readability and understanding the code at once. It took me some time before I managed to understand how everything works, and my example reflects that I think. I\u2019ve tried to make it self explanatory but of course if we explain the plugin architecture in docs, and how everything works under the hood there is no need of such explicitness.. Yes, I agree, one of those names would be more suitable. But at the same time I think people are looking for solving specific problem when they are reading docs so I would suggest making a section \u201cExtending Dropzone\u201d and introduce some subsections to it like the one with Dropzone that accepts folders. I deem it more logical while all the value of libraries lies within the simplicity of use in every particular use-case, maybe after we can also think of other examples and add more subsections to make the info flow more pleasant. What do you think?. Do you mean that we need to explain what the plugin does(how it makes folder processing possible) and how the returned value(list of files in the folder) is then used in Dropzone component utilizing promises? I may think not that deep but in the light of my comment regarding naming maybe we could overload this component users little bit less with how it works and emphasize more what it solves. But anyways I think both variants are possible and docs can also contain info on the architecture.\nIf you want me to add it I think I need a little explanation of what you mean by function signature and isolated example though . ",
    "theCuriousOne": "Hi @shashanksheela \nI am using 2 dropzones and both are working ok:\n this.handleFileSelect('content1', file)} name=\"content1\" className=\"dropzones\" multiple={false} accept={allowedExtensions}>\n                                            {contentChild1}\n                                        \n this.handleFileSelect('content2', file)} name=\"content2\" className=\"dropzones\" multiple={false} accept={allowedExtensions}>\n                                            {contentChild2}\n                                        \nMaybe you are missing the \"name\" attributes?\nIf you share some code it would be more useful :). ",
    "frodestorhaug": "It  seem to be a problem with mini-css-extract-plugin, so I will investigate that.. ",
    "chobo2": "Ah, ic they are scattered part of the documentation thought they where more like static representations.. @rolandjitsu \nSorry bit confused, from the issue you linked to it would seem that it was identified and fixed?. @rolandjitsu \nhmm weird, as other dropzone like products(like the one in onedrive) does not suffer from this bug in chrome.\nAlso for whatever reason the block that was setup for dropzone is not 100% bullet proof as if a user drags and drops enough time it eventually it just works.. @rolandjitsu \nYea it seems odd to me as well, but my users are trying to do this.  One pulled me over and was like \"I am trying to drag and drop and it's not working\".\nI honestly never thought of doing it like that as I just thought it was not possible but from what seen my users do people think it should be something they can do.\n. @rolandjitsu \nI upgraded from react-dropzone from 7.0 to 8.0 and now it does not work\n\"react-dropzone\": \"^8.0.1\",\n\n```\nUncaught TypeError: children is not a function\n    at Dropzone.render (:8080/main.js:68141)\n    at finishClassComponent (:8080/main.js:63404)\n    at updateClassComponent (:8080/main.js:63366)\n    at beginWork (:8080/main.js:64034)\n    at performUnitOfWork (:8080/main.js:66060)\n    at workLoop (:8080/main.js:66099)\n    at HTMLUnknownElement.callCallback (:8080/main.js:50419)\n    at Object.invokeGuardedCallbackDev (:8080/main.js:50457)\n    at invokeGuardedCallback (:8080/main.js:50506)\n    at replayUnitOfWork (:8080/main.js:65513)\n14:59:47.002 :8080/main.js:64432 The above error occurred in the  component:\n    in Dropzone (created by Formik)\n    in div (created by Formik)\n    in form\n    in Unknown\n    in Form (created by Formik)\n    in Formik (created by PartComponent)\n    in PartComponent (created by inject-PartComponent-with-domainStores-uiStores-routingStore)\n    in inject-PartComponent-with-domainStores-uiStores-routingStore (created by Route)\n    in Route (created by withRouter(inject-PartComponent-with-domainStores-uiStores-routingStore))\n    in withRouter(inject-PartComponent-with-domainStores-uiStores-routingStore) (created by AddInventoryComponent)\n    in AddInventoryComponent (created by inject-AddInventoryComponent-with-domainStores-uiStores)\n    in inject-AddInventoryComponent-with-domainStores-uiStores (created by Route)\n    in Route (created by withRouter(inject-AddInventoryComponent-with-domainStores-uiStores))\n    in withRouter(inject-AddInventoryComponent-with-domainStores-uiStores) (created by Route)\n    in Route (created by MemberAreaComponent)\n    in Switch (created by MemberAreaComponent)\n    in div (created by MemberAreaComponent)\n    in div (created by MemberAreaComponent)\n    in MemberAreaComponent (created by inject-MemberAreaComponent-with-domainStores-uiStores-routingStore)\n    in inject-MemberAreaComponent-with-domainStores-uiStores-routingStore (created by Route)\n    in Route (created by withRouter(inject-MemberAreaComponent-with-domainStores-uiStores-routingStore))\n    in withRouter(inject-MemberAreaComponent-with-domainStores-uiStores-routingStore) (created by Route)\n    in Route (created by App)\n    in Switch (created by App)\n    in App (created by inject-App-with-domainStores-uiStores)\n    in inject-App-with-domainStores-uiStores (created by Route)\n    in Route (created by withRouter(inject-App-with-domainStores-uiStores))\n    in withRouter(inject-App-with-domainStores-uiStores)\n    in Router\n    in Provider\nConsider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.\n```. @rolandjitsu \nYep, that was my problem, I guess it was changed how that area works from 7 and 8.\nThe drag and drop from file dialog now work. \nHowever drag and drop folders no longer work for me, I am not sure if this has changed as well as in 7.0 and can't really verify as the example doc one does not seem to work.. @rolandjitsu \nYep that is the example that I checked out and when I try to drag a folder into that area. Nothing happens.. @rolandjitsu \nOk, yea I see it is working just seems I got to be very precise in the example where I drop.\nI will look at the example and change my code accordingly.\nThanks!. ",
    "robjtede": "I am experiencing this regression after upgrading to v6.0.1 from v5.1.1.. Probably related to #676 . sorted in v6.0.2. ",
    "sumthief": "I think there are 2 ways to solve this:\n1) We can do force event.stopPropagation in all react-dropzone's handlers.\n2) We can remove Promise to make possible event.stopPropagation from custom handlers. But this can broke compatibility with external plugins such as https://github.com/quarklemotion/html5-file-selector.. Also I can prepare MR but I need advice which way we should implement. I prefer the first way because I think that each Dropzone should have atomic logic and shouldn't impact on other Dropzones but I can be wrong.\n@okonet I would like to hear your opinion about this problem.. I've checked onDrop handler and it's already contains event.persist() but it doesn't work.\nAs you know React uses custom event dispatching system (see executeDispatchesInOrder in https://github.com/facebook/react/blob/master/packages/events/EventPluginUtils.js). And it handles events which have stopped propagation. So it should handle our event correctly. But I've set debugger in react-dropzone's onDrop handler and also set debugger in my custom handler. And I got this chain:\n1. debugger in react-dropzone's onDrop for child dropzone\n2. debugger in react-dropzone's onDrop for parent dropzone\n3. debugger in custom handler\nLooks like Promise just resolves after second dispatch was invoked.\nSo if we can't remove Promise in handlers then maybe we can introduce new prop (by default it'll be set to false) which will conditionally invoke evt.stopPropagation in all handlers? Or maybe I'm thinking wrong and there is other solution?. I've mistaked in previous message: persist works fine.\nI'll try to explain my vision of problem one more time. Usage Promise causes that code which located in .then will be executed after all callbacks registered in call stack (that's how JS event loop works). You can check it by evaluating this code in console:\n``javascript\nconst logNum = num => {\n  console.log(sync log: ${num});\n  Promise.resolve(true).then(() => console.log(async log: ${num}`));\n};\nfor (let i = 0; i < 3; i++) {\n  logNum(i);\n}\n``\nIn my previous message I've add link on React event's subsystem which makes event dispatch for all registered targets in cycle. So I want to say that usage Promise in react-dropzone event listeners brokesevent.stopPropagation` because it violate order of callbacks execution.\n\nHope it helps to clarify it.\nMaybe it's not the best solution to use dropzone in dropzone and we should strict to nest it. Otherwise we should provide at least one way to allow stop event propagation. And If we can't dispose of usage Promise in event listeners then I see only one way.. @rolandjitsu I've started preparing PR but you've made it faster :1st_place_medal: \nYeah, it looks great and fixes my issue. ",
    "claudiuchetan": "Unfortunately, this change (checking for isPropagationStopped) causes some issues in other cases.\nI tried to integrate react-dropzone in a Dialog component from https://developer.microsoft.com/en-us/fabric#/components/dialog . \nBoth DragOver and Drop events are being stopped by this isPropagationStopped check.. ",
    "pantharshit00": "I did that just now, but many people use create-react-app-ts and it does add that option by default so you may get reports like this now and then so I'd recommend you to make it backward compatible and break it in v7. ",
    "navarroaxel": "The bug was introduced in v6.1.3 with a fix for the issue #668. The function isDragDataWithFiles fails when the file is selected with a file browsing dialog instead of drag and drop.\nTested on Chrome v70.. ",
    "DougWoodCDS": "never mind. I discovered the 'preview' property. wasn't mentioned in the docs.. ",
    "rphly": "Can confirm, I switched back to react-dropzone@6.2.4 and it worked fine again.. ",
    "ryanjyost": "I also experienced @supertopoz's issue outline above, using v8.0.0 and latest v8.0.3.\nIt seems to only occur if clicking a button in the Dropzone that triggers the open method, and disableClick=false. \nSo one should set disableClick=true if using a button to open the file dialog, it seems.\nNot sure if it's good UX or worth supporting the case of being able to open the file dialog by clicking a button in the Dropzone AND the Dropzone area itself, at the same time?. ",
    "leenyburger": "@rolandjitsu My mistake, I am transition to React and was still running Dropzone.js which was causing my error. . ",
    "lizzbanalagay": "Sorry I didnt mean to open this issue. ",
    "seanpascoe": "While you're at it, why not just use a forEach for the cWU?\ncurrent:\ncomponentWillUnmount() {\n    // Make sure to revoke the data uris to avoid memory leaks\n    const {files} = this.state;\n    for (let i = files.length; i >= 0; i--) {\n      const file = files[0];\n      URL.revokeObjectURL(file.preview);\n    }\n  }\neasier to read:\ncomponentWillUnmount() {\n    // Make sure to revoke the data uris to avoid memory leaks\n    this.state.files.forEach(f => URL.revokeObjectURL(f.preview))\n  }. @rolandjitsu didn't see the examples in the readme, but just found the examples folder. Sorry, yea I'll do that. . @rolandjitsu done, sorry bout that. . ",
    "chasestarr": "hey folks - could you use any help here? this feature would be great for my project. ",
    "mike1808": "@rolandjitsu I didn't find docs in the repo to make the change.. ",
    "thegreatercurve": "@rolandjitsu need any help with this if you haven't already started? Been using this package a while, and keen to contribute!. @rolandjitsu sounds like a plan. Likewise, let me know if you need a hand with that or any other issue. Happy to help out.. ",
    "SimenB": "Hooks have been released? https://reactjs.org/blog/2019/02/06/react-v16.8.0.html. ",
    "yurykornilov": "This behavior is very confusing. Mail clients, facebook, Jira, dropzone.js don't have such problem.. @rolandjitsu \nI'm sorry for my opinion. The file select window and a window of the file manager look the same for users. But from one I can drag and from another not. . ",
    "Shubham-S-Yadav": "@rolandjitsu Yes I've checked on latest versions too it works very well with latest safari versions but it is not working for versions before 11.1. And by upload I mean to say Drag & Drop Functionality. @rolandjitsu Yes, Thank you for considering this issue, and also for providing this wonderful library.. Thank you for providing these updates \u263a\ufe0f. ",
    "jordiponsllaurado": "@rolandjitsu is it possible that it's also happening with Chrome? \nI'm having the same issue but using latest Chrome version on a mac.. For us it also fails in Firefox and the Dropzone is inside a modal too. @rolandjitsu did you tested if Dropzone it works for major browsers  inside a modal also?. ",
    "karensg": "Same problem with Chrome. I have several uploads on the website. The only that does not work is the one in the modal of https://material-ui.com/\nWorks well With Firefox though.. ",
    "warlock257": "I'm getting errors too. I simply installed it, imported it, and put in < Dropzone > tags. The console spits out this:\n```\nUncaught TypeError: children is not a function\n    at Dropzone.render (index.js:474)\n    at finishClassComponent (react-dom.development.js:14899)\n    at updateClassComponent (react-dom.development.js:14863)\n    at beginWork (react-dom.development.js:15716)\n    at performUnitOfWork (react-dom.development.js:18750)\n    at workLoop (react-dom.development.js:18791)\n    at HTMLUnknownElement.callCallback (react-dom.development.js:147)\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:196)\n    at invokeGuardedCallback (react-dom.development.js:250)\n    at replayUnitOfWork (react-dom.development.js:17998)\n    at renderRoot (react-dom.development.js:18909)\n    at performWorkOnRoot (react-dom.development.js:19812)\n    at performWork (react-dom.development.js:19722)\n    at performSyncWork (react-dom.development.js:19696)\n    at interactiveUpdates$1 (react-dom.development.js:19984)\n    at interactiveUpdates (react-dom.development.js:2267)\n    at dispatchInteractiveEvent (react-dom.development.js:5081)\nrender @ index.js:474\nfinishClassComponent @ react-dom.development.js:14899\nupdateClassComponent @ react-dom.development.js:14863\nbeginWork @ react-dom.development.js:15716\nperformUnitOfWork @ react-dom.development.js:18750\nworkLoop @ react-dom.development.js:18791\ncallCallback @ react-dom.development.js:147\ninvokeGuardedCallbackDev @ react-dom.development.js:196\ninvokeGuardedCallback @ react-dom.development.js:250\nreplayUnitOfWork @ react-dom.development.js:17998\nrenderRoot @ react-dom.development.js:18909\nperformWorkOnRoot @ react-dom.development.js:19812\nperformWork @ react-dom.development.js:19722\nperformSyncWork @ react-dom.development.js:19696\ninteractiveUpdates$1 @ react-dom.development.js:19984\ninteractiveUpdates @ react-dom.development.js:2267\ndispatchInteractiveEvent @ react-dom.development.js:5081\nindex.js:1452 The above error occurred in the  component:\n    in Dropzone (at upload.js:20)\n    in div (at upload.js:18)\n    in Main2Upload (at App.js:103)\n    in div (at App.js:134)\n    in div (at App.js:124)\n    in App (at src/index.js:7)\nConsider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.\nfunction.console.(anonymous function) @ index.js:1452\nlogCapturedError @ react-dom.development.js:16489\nlogError @ react-dom.development.js:16524\nupdate.callback @ react-dom.development.js:17499\ncallCallback @ react-dom.development.js:11592\ncommitUpdateEffects @ react-dom.development.js:11632\ncommitUpdateQueue @ react-dom.development.js:11622\ncommitLifeCycles @ react-dom.development.js:16779\ncommitAllLifeCycles @ react-dom.development.js:18160\ncallCallback @ react-dom.development.js:147\ninvokeGuardedCallbackDev @ react-dom.development.js:196\ninvokeGuardedCallback @ react-dom.development.js:250\ncommitRoot @ react-dom.development.js:18365\ncompleteRoot @ react-dom.development.js:19894\nperformWorkOnRoot @ react-dom.development.js:19817\nperformWork @ react-dom.development.js:19722\nperformSyncWork @ react-dom.development.js:19696\ninteractiveUpdates$1 @ react-dom.development.js:19984\ninteractiveUpdates @ react-dom.development.js:2267\ndispatchInteractiveEvent @ react-dom.development.js:5081\nindex.js:474 Uncaught TypeError: children is not a function\n    at Dropzone.render (index.js:474)\n    at finishClassComponent (react-dom.development.js:14899)\n    at updateClassComponent (react-dom.development.js:14863)\n    at beginWork (react-dom.development.js:15716)\n    at performUnitOfWork (react-dom.development.js:18750)\n    at workLoop (react-dom.development.js:18791)\n    at renderRoot (react-dom.development.js:18876)\n    at performWorkOnRoot (react-dom.development.js:19812)\n    at performWork (react-dom.development.js:19722)\n    at performSyncWork (react-dom.development.js:19696)\n    at interactiveUpdates$1 (react-dom.development.js:19984)\n    at interactiveUpdates (react-dom.development.js:2267)\n    at dispatchInteractiveEvent (react-dom.development.js:5081)\n```. ",
    "RosenTomov": "Writing this kinda late and I'm half asleep, I've copied/pasted the basic example and still getting the same error.  \nI went in that dist/es/index.js to see what's going on.\nHere's some code from dist/es/index.js ~ln.366\n```{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          multiple = _props.multiple,\n          disabled = _props.disabled;\n      var _state = this.state,\n          isDragActive = _state.isDragActive,\n          isFocused = _state.isFocused,\n          draggedFiles = _state.draggedFiles,\n          acceptedFiles = _state.acceptedFiles,\n          rejectedFiles = _state.rejectedFiles;\n  var filesCount = draggedFiles.length;\n  var isMultipleAllowed = multiple || filesCount <= 1;\n  var isDragAccept = filesCount > 0 && allFilesAccepted(draggedFiles, this.props.accept);\n  var isDragReject = filesCount > 0 && (!isDragAccept || !isMultipleAllowed);\n\n  return children({\n    isDragActive: isDragActive,\n    isDragAccept: isDragAccept,\n    isDragReject: isDragReject,\n    draggedFiles: draggedFiles,\n    acceptedFiles: acceptedFiles,\n    rejectedFiles: rejectedFiles,\n    isFocused: isFocused && !disabled,\n    getRootProps: this.getRootProps,\n    getInputProps: this.getInputProps,\n    open: this.open\n  });\n}```  . @rolandjitsu Ok, I'm sorry. Turns out that I had a second obscure Dropzone in my code, which was causing this.\n\nAfter adding the properties, it works perfectly.  Feel free to close the issue. \nexample with the Dropzone, I forgot about:\n```\n // old\n  handleFileDrops(accepted, rejected)}\n    multiple\n    maxSize={8000000} \n    className={styles.uploadButton}\n  />\n// new\n  \n    {({ getRootProps, getInputProps }) => (\n      \n\n\n    )}\n  \n```\n. ",
    "StefanoSega": "same issue passing a JSX element as the children. ",
    "sitompul": "is there a way to access the old documentation? @rolandjitsu . ",
    "KevinAsher": "As a workaround (might break accessibility), just stop event propagation on input:\n```JSX\n e.stopPropagation()}\n/>\n`. ",
    "vieira": "Hello @rolandjitsu,\nThanks for the quick response!\nI can confirm #731 fixes the issue I experienced. Thanks a lot!. ",
    "hirokimoto": "Thanks for your reply @rolandjitsu \nLet me elaborate the issue that I have experienced.\nWhen you add accept=\"video/*\", I think all types of video files should be acceptable.\nBut it does not accept FLV extension's video when I put accept=\"video/*\".\n. ",
    "danielesalvatore": "@rolandjitsu Thank you very much for you reply!. ",
    "jschill": "isPropagationStopped is also in the code\nhttps://github.com/react-dropzone/react-dropzone/blob/d4ee298e119c11f2087859dece66cd43642a6e15/src/index.js#L76. After some reading I see React has its own implementation[1] of isDefaultPrevented/isPropagationStopped. It broke on my machine since I'm using Preact, that doesn't have those fancy props. I will have to check if isDefaultPrevented/isPropagationStopped exists and fall back on defaultPrevented vs cancelBubble.\n[1] https://reactjs.org/docs/events.html. @rxmarbles My use case is Preact + react-dropzone. react-dropzone use props specific to react's synthetic events.\n\nI've fixed it in a fork:\nhttps://github.com/jschill/react-dropzone/commit/721af2cbf7356da5caf5105564c21c05ea21387d. Sure. Someone will have to help me out with how you write your tests though.. @rolandjitsu You're right! Sorry about the delay fixing this.. ",
    "Studio384": "I am experiencing the same error be it with different tracebacks:\nTypeError: _this.node.contains is not a function[Meer info] 8 bundle.js line 20986 > eval:102:37\n    Dropzone/_this.onDragLeave/_this.dragTargets< index.js:96\n    filter self-hosted:312:17\n    Dropzone/_this.onDragLeave index.js:95\n    callCallback react-dom.development.js:149\n    invokeGuardedCallbackDev react-dom.development.js:199\n    invokeGuardedCallback react-dom.development.js:256\n    invokeGuardedCallbackAndCatchFirstError react-dom.development.js:270\n    executeDispatch react-dom.development.js:561\n    executeDispatchesInOrder react-dom.development.js:583\n    executeDispatchesAndRelease react-dom.development.js:680\n    executeDispatchesAndReleaseTopLevel react-dom.development.js:688\n    forEachAccumulated react-dom.development.js:662\n    runEventsInBatch react-dom.development.js:816\n    runExtractedEventsInBatch react-dom.development.js:824\n    handleTopLevel react-dom.development.js:4824\n    batchedUpdates$1 react-dom.development.js:19260\n    batchedUpdates react-dom.development.js:2150\n    dispatchEvent react-dom.development.js:4903\n    dispatchEvent self-hosted:1018:17\nAnd:\nTypeError: _this.node.contains is not a function[Meer info] bundle.js line 20986 > eval:48:25\n    Dropzone/_this.onDocumentDrop index.js:42. ",
    "fanixk": "I'm experiencing the issue only when using styled-components to style my Container.\n(styled-components v3.4.10). ",
    "Brandonprs": "@rolandjitsu working on it, sorry. Having issues getting the Dropzone component to render properly in CodePen.. Still an issue, though I spent some time trying to get the Dropzone component working (in CodeSandbox, CodePen, etc.) without luck, so I gave up for a while. It's not a huge pressing issue for us though I understand it's something I'll need figure out eventually.. @skystar0227 That fixed my issue! I think my issue with the CodeSandbox was the material UI components.\n@rolandjitsu I imagine we can close this issue as it seems to be specific to Material UI?. ",
    "padrisimo": "\nI'm experiencing the issue only when using styled-components to style my Container.\n(styled-components v3.4.10)\n\nRemember, if u use styled-components u may pass a custom refKey like {...getRootProps({ refKey: 'innerRef' })} instead of  just {...getRootProps()} and all this problems should be solved.\n. ",
    "skystar0227": "I saw the same error with Material UI.\nFor my case, @padrisimo's comment is useful to solve it.\ngetRootProps() seems to provide an attribute ref or an attribute with a name specified with refKey.\nBut almost all Material UI's components cannot receive ref directly. It may be just ignored.\njsx\n<MUIComponent {...getRootProps()} /> {/* Error: 'ref' won't work */}\nMaterial UI provides an interface component RootRef to pass a attributeref to a child component. This is an offical way.\nSo my solution is the following:\njsx\nconst { ref, ...rootProps } = getRootProps();\n<RootRef rootRef={ref}>\n  <MUIComponent {...rootProps} />\n</RootRef>\nThere may be simiar solutions if you are trying to use getRootProps() as attributes for a component which cannot receive ref.. ",
    "ARChilton": "I get this message as well (no Material UI included in my bundle). I find it shows up if I drag over multiple times, it is fine at first then the console message appears. DropZone still seems to work even after the message.\n\n.. You were right it was the ref. I am using Emotion to style my components and so the ref needed to be innerRef just like the example here: https://github.com/react-dropzone/react-dropzone#custom-refkey\nThank you for pointing me in the right direction.. I thought that too, however even with the cursor always set to copy it only shows the default cursor when dragging. I can change other css properties such as the border colour but for some reason not the cursor.\nWith the workaround I am using, I can still drag and drop when the file select window is open, both from that window and elsewhere.. ",
    "emilpriver": "files or info*. ooooh, That explains everything. Sorry for the inconvenient and thanks!. ",
    "mAAdhaTTah": "Dropzone's child needs to be a function in 8.0+, not an element.. ",
    "iwarner": "Closed the added ...dropped was the issue - doh !. ",
    "mxstbr": "You should be able to rebase-and-merge to change the commit message!. ",
    "ScottAgirs": "\n@ScottAgirs I'm gonna close this issue for now. If you provide more context and an example of what you're describing, I'll be happy to reopen.\n\nhey @rolandjitsu, thanks a lot for your reply, I must have missed the previous one.\nI figured it out, the issue turned out to be not with React-Dropzone, but with my basic JavaScript knowledge, hah. \nI needed to declare the props in the onDrop() function, before actually passing and using them inside the onDrop() and it looks like this (in case someone else stumbles upon this:\n```\nonDrop = async (acceptedFiles, rejectedFiles, newFunction) => {\n    // do stuff with your files and the newFunction\n    ..\n    newFunction(acceptedFiles, rejectedFiles)\n    .. \n  };\n..\n <Dropzone\n              onDrop={(acceptedFiles, rejectedFiles) =>          \n                this.onDrop(acceptedFiles, rejectedFiles, newFunction)\n              }\n              ..\n            >\n\n```. ",
    "eoghanmccarthy": "After updating to v8.0.4 this morning the fullscreeen doesn't work with me either.\nconst MyFullscreenDropzone = ({ children }) => {\n    return (\n        <Dropzone\n            disableClick\n            onDrop={files => console.log('on drop')}\n            onDragEnter={onDragEnter}\n            onDragLeave={onDragLeave}\n            multiple={false}\n        >\n            {children}\n        </Dropzone>\n    )}\n};. @rolandjitsu Great, thanks :)\nconst MyFullscreenDropzone = ({ children }) => {\n    return (\n        <Dropzone\n            disableClick\n            onDrop={files => console.log('on drop')}\n            onDragEnter={onDragEnter}\n            onDragLeave={onDragLeave}\n            multiple={false}\n        >\n            {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps()}>\n                    <input {...getInputProps()} hidden />\n                    {children}\n                </div>\n            )}\n        </Dropzone>\n    )}\n};\n. ",
    "leoc": "@rolandjitsu Thanks for your feedback! I currently use react-router to display various different nested components. I thought about adding a context that would keep the configuration of the dropzone for child components to adjust the dropzone at root level accordingly. But I have the feeling that this would clutter the code. The dropzone is only needed for one or two \"pages\" right now.\nA fullscreen flag sounds nice in theory. Having the whole browser viewport as a dropzone whereas the component itself still resides in a subcomponent. I don't know.\nWould you merge something like the aforementioned PR #521 if it was updated?. Thank you for the feedback. For now I have chosen a big enough dropzone.\nI will check a context solution when I have the time and add an example here.. ",
    "jonahgreenthal": "So the fact that it works in Safari is just a complete coincidence/accident?. That's unfortunate; it was super useful to me when it worked. I'll look at react-dnd\u2026but if you're willing to make this package support that functionality across browsers, I'd sure be grateful. Thanks!. Okay, thanks for the info. I was not able to get this working with react-dnd, though I admittedly didn't spend all that much time on it. If you happen to know specifically how to do it (e.g., you know a particular tutorial that covers file uploads with react-dnd) that would be great, but I understand that's not your job :-) Thanks for looking at this.. Thanks. That's just like Dropzone: it works in Safari (to drag and drop an image from another browser window), but not Chrome.. ",
    "goodoldneon": "The default prop for disableClick is false, which means the deprecation warning appears unless disableClick is explicitly set it to null. I'd think a deprecation warning shouldn't appear if the deprecated prop isn't specified. Is this behavior expected? . I had the same issue. It happens when you put {...getRootProps()} and a ref on a descendent of <Dropzone>. The getRootProps() function returns an object that contains a ref, so putting your own ref on that same element overrides it.\nCodepen with the problem and solution. Sorry, I edited my comment before you finished your response. I don't think you guys need to change anything, besides maybe warning about this in the docs.\n[EDIT]\nWhich you do in the \"Custom refKey\" section. I should read the docs more carefully!. ",
    "paulmichaelxd": "@rolandjitsu Thanks for your response!\nUnfortunately, adding the refKey: 'innerRef' gave me some console error about refs not working on function components.\nHowever, simply wrapping my <Paper> component with <div {...getRootProps()}> fixed the issue. Thanks!. ",
    "jmaslin": "Example of what is happening for me:\n(Most of it is just the Mac loading wheel because Chrome has frozen -- not visible in video apparently)\n\nIt should be noted I was unable to reproduce this on other devices with the same environment. Same issue persisted across browsers/incognito/restarting on my device.. Nevermind, this is happening to me on other file uploads as well.. ",
    "NunoCardoso": "Sorry for not answering your question, @rolandjitsu .\nThat is correct, I have the Dropzone inside a Droppable from react-beautiful-dnd because reasons :), and I add a ref. Still, changing the line to if (this.node && !_this.node.isEqualNode(evt.target))  works. You have to double check however if that leads to lost functionality somehow.\nLet me know if you need a sample of my React component to reproduce the error and double-check the fix. . ",
    "barbalex": "Thanks, that seems to be the issue.\nBut then would it not be necessary to explicitly update the file-selector dependency in react-dropzone and publish a new release to stop breaking usages that depend on the path being the full path?. If I get this correctly https://github.com/react-dropzone/file-selector/commit/e5ecce836a4bc8a51059fe21426d1290bb5d2bb8 was published with v1.9.0 6 days ago. I updated react-dropzone yesterday (repeatedly, using v0.8.2 and v0.9.0) and it did not output full paths. \nSo it seems to me that there is additional action necessary from users - beyond just updating - to prevent updating to react-dropzone v0.8.2 or 0.9.0 from breaking behaviour.\nIn other words: quickly publishing a new version might save a bunch of other users from running into issues.. This is still an issue in v10.0.4. Need to remain on v8.1.0. $ yarn list --pattern file-selector\nyarn list v1.13.0\n\u2514\u2500 file-selector@0.1.11\nDone in 3.56s.\nSo it seems that https://github.com/react-dropzone/file-selector/commit/e5ecce836a4bc8a51059fe21426d1290bb5d2bb8 was not the solution. Also I now do not believe any more that file-selector is the reason as I have tried:\n\"resolutions\": {\n    \"file-selector\": \"0.1.6\"\n  }\n...and the error still occurs (also with all versions up to 0.1.11). ",
    "darekchynek": "Have same issue, with the same version of react-dropzone and Windows 10 (Google Chrome 72.0.3626.119 ). \nOpen method works correctly - onDrop don't launch when You drop file.. We're using React Dnd with react-sortable-tree. . ",
    "alfaslash": "@ppi-mzl are you used React DnD?. @darekchynek This problem in React DND https://github.com/react-dnd/react-dnd/issues/457. ",
    "ppi-mzl": "\n@ppi-mzl are you used React DnD?\n\nYes we are using react-dnd and using the fork / nmp Package of @silvainSayduck  instead fixes the issue.\nSo this is not a bug in react-dropzone but react-dnd. Maybe this should be mentioned in the documentation since this seems to be a common error.. Wrapping the Dropzone in a ConnectDropTarget which accepts NativeTypes.FILE works also.. ",
    "sstur": "Note: there doesn't seem to be any relevant tests to update.\nNote2: there seems to be failing tests on master, unrelated to this PR.\n\n. \"upgrading to hooks\" \ud83c\udf89\ud83c\udf89\ud83c\udf89Awesome!\nI do know that findDOMNode is deprecated, but there isn't really a more elegant solution to this kind of imperative DOM stuff. Considering findDOMNode doesn't have any performance implications it seemed like a good tradeoff to get a working PR for this fix now and then deal with finding a viable replacement for findDOMNode when such a thing makes sense. (If you know of a viable alternative for findDOMNode for this use case, please do let me know)\nFor the moment, for me to get Dropzone to work with react-native-web projects I basically need to fork this repo and make the above changes because I don't think this can be worked around in userland (correct me if I'm wrong).\n. One random thought in regards to a more elegant solution than findDOMNode.\nWhat if we use createRef and pass that ref to the render function for the consumer of this library to decide how to get it to the dom node.\nExample:\njs\n<Dropzone onDrop={this.onDrop}>\n  {({getRootProps, rootRef, isDragActive}) => {\n    return (\n      <MyAwesomeComponent\n        {...getRootProps()}\n        domRef={rootRef}\n      >\n        {\n          isDragActive ?\n            <p>Drop files here...</p> :\n            <p>Try dropping some files here.</p>\n        }\n      </MyAwesomeComponent>\n    )\n  }}\n</Dropzone>\nIn the above case, MyAwesomeComponent would be responsible for passing the rootRef to the appropriate underlying dom element.\nThe obvious big downside to this is that it is a breaking change to the public API of react-dropzone and for something that can easily be accomplished with findDOMNode.. > \"you can use refKey (getRootProps({refKey: 'domRef'})) to customize how the ref is set\"\nThis might actually be helpful in producing a workaround, I'm exploring that possibility now.\n\n\"I don't fully understand what the issue is so I cannot really have an opinion on this.\"\n\nI'll try to provide you a minimal reproducible case on CodeSandbox. This will help me better define the issue also.\nI'll post back here with what I come up with.. Here's a minimal reproducible case on code sandbox:\nhttps://codesandbox.io/s/13q0k860p3\nNote that if you open your dev console and try to drag a file over the dropzone, you'll see this exception:\n\nThis test case shows the problem without using React-Native-Web (to better keep the test case minimal and reduce potential complexity).\nA reasonable initial reaction might be that \"MyView\" component should allow ref passthrough, but keep in mind that in real-life it's likely that MyView component is provided by a library (such as RNW) and not written by us, so we have little control over what it does with refs.. > \"we cannot use findDOMNode() as it will definitely be problematic for users using strict mode\"\nSeems that this is a blocker, and likely not much we can do about it.\n\n\"the proper solution would be to expose a ref to the DOM node from within the composite component and tell dropzone what key to look for\"\n\nYes, this is ideal.\n\n\"lib maintainers should handle the scenario where ppl want to get a hold of the DOM ref\"\n\nAgreed, this makes sense. I'll see if I can get react-native-web to add support for such a thing, although I suspect there are other libs/use-cases where we don't have the luxury of a perfect API.\n\n\"Of course, using a functional component would avoid all these issues\"\n\nI'm not entirely sure this is true. I don't believe that functional components automatically forward a ref (see screenshot A below, taken from this). In fact, I think the same solution you mentioned above (\"the proper solution would be to expose a ref to the DOM node\") applies to a functional component equally as to a class component (please correct me if I'm wrong).\nFor now, I'll consider this an unsolvable problem, without the library authors providing the appropriate API for ref forwarding. I'll post back here if I can think of any universally acceptable solution. Thanks again for looking into this!\nScreenshot A:\n\n. No, a React element won't really tell you what the browser is capable of, it's just a plain object afterall. The result of React.createElement('input') will look like this:\njs\n{\n  $$typeof: Symbol(react.element)\n  props: {}\n  type: \"input\"\n}\n. ",
    "emjaksa": "@rolandjitsu I can't provide an example because online code editors don't do server side rendering. . @rolandjitsu sorry, didn't think of that but looks @chill5018 create one for me. Thanks. ",
    "chill5018": "I am seeing the same error after upgrading react-dropzone. Not sure if this helps, but here is the stacktrace I am getting. \n\n. https://github.com/chill5018/next-react-dropzone-demo Here you go @rolandjitsu . ",
    "gauravtiwari": "useEffects are run after a component is mounted, which is safe for SSR however, the code above gets parsed by the browser on the page load and that's the cause of the error. Adding a guard clause that checks for DOM would solve the problem. \nThis is the cause of the issue: \n```js\n// Change\nexport const supportMultiple = 'multiple' in document.createElement('input')\n// TO\nexport const supportMultiple =\n  typeof document !== 'undefined' && document && document.createElement\n    ? 'multiple' in document.createElement('input')\n    : true\n```\nHappy to make a PR. ",
    "Chris533": "It doesn't work, 10.0.0, with next, . ```\nimport dynamic from 'next/dynamic'\nconst DynamicComponentWithNoSSR = dynamic(() => import('../components/hello3'), {\n  ssr: false\n})\nfunction Home() {\n  return (\n    \n\n\nHOME PAGE is here!\n\n  )\n}\nexport default Home\n```\nThanks, I user this finger out.. ",
    "KaiHotz": "Just change \nexport const supportMultiple = 'multiple' in document.createElement('input')\nto\nexport const supportMultiple = 'multiple' in React.createElement('input')\nand  the problem should be solved. In case you don't want to import React in utils/index.js just move supportMultiple to src/index.js  since it is just used there. Wouldn't  it be enough  to just change \ndocument.createElement('input')\nto\nReact.createElement('input')  ?. Ok thanks, makes sense. I hope you can merge this soon and release :). ",
    "ethanmick": "Same issue here, 10.0.0 on next@latest.. ",
    "wheredoesyourmindgo": "I'm still getting the same error with 10.0.2. Maybe I'm missing something? Using the useDropzone hook with Next.js. A demo repo illustrating the problem when the index page is loaded (via SSR) can be found at demo-repo. ahh. I see. Thx @Dakkers .. ",
    "Dakkers": "@wheredoesyourmindgo this wasn't fixed in 10.0.2 (check the changelog). you could use the branch @rolandjitsu made and try it out. ",
    "Yaxian": "@Chris533 , it helps me, thx.\n@Dakkers try this:\n```\nimport dynamic from 'next/dynamic';\nconst Dropzone = dynamic(() => import('react-dropzone'), { ssr: false });\nconst App = () => {\n    return (\n       \n            {({ getRootProps, getInputProps }) => (\n                \n\n\n\n\n                        uploading files\n                      \n\n\n\n            )}\n       \n    );\n}\n```. ",
    "bcobra": "i was able to get it to work downgrading to 8.0.4. There seems to be an issue with the drop effect =copy on the newest version causing a promise rejection if i remember correctly . ",
    "jinguenee": "The same situation.\nI think dropEffect issue. ",
    "zifahm": "I get a document not defined Error after updating to 10.0.0. It doesn't seem like I'm using getDataTransferItems anywhere. \nI'm using Nextjs. ",
    "Kmaschta": "Err, I should learn to read. The Dropzone is still documented below the hook. Sorry for that!. ",
    "localjo": "I think in order to be able to disable on the Dropzone parent from triggering on the input, while still being able to manually trigger clicks on the input with open() the onClickCb should be changed to check if propagation has been stopped;\nconst onClickCb = useCallback(evt => {\n    if (!isPropagationStopped(evt)) { \n      if (isIeOrEdge()) {\n        setTimeout(openFileDialog, 0)\n      } else {\n        openFileDialog()\n      }\n    }\n  }, [inputRef])\nThen you could do this to disable clicks;\n<div {...getRootProps({ onClick: e => e.stopPropagation() })}>\nAs it is right now, I have no way of disabling clicks but still manually opening the file browser.. It seems that this does not stop events from getting forwarded to the input;\n<div {...getRootProps({ onClick: e => e.preventDefault() })}>\nHowever this prevents the input from opening at all;\n<input {...getInputProps({ onClick: e => e.preventDefault() }))} />\nSince forwarding an event from a parent to the child is not standard JS behavior, I think there needs to be a way to stop it.. Judging by that example, my suggestion should work;\n<div {...getRootProps({ onClick: e => e.stopPropagation() })}>\n            <input {...getInputProps()} />\n...\nBut this still forwards the click from the Dropzone to the input.. Hmm... now it's working. I must have had my wires crossed somewhere. I've been struggling with this all morning. Sorry for the confusion.. ",
    "wmertens": "@miroslavkremenovic your error is very vague. You should click on the link it shows in the error to know what the minified error is, and ideally you should figure out what the error really is in your non-minified source. \nThis is not a product you pay for to get support, we should all help to improve it and okonet is spending his probably rare spare time keeping it all under control. So you are expected to report errors so that they cause the least amount of wasted time for others.\n(note I'm not a dev here, just pointing out how open source works). ",
    "miroslavkremenovic": "Ok, I'll be clearer. Problem is not happening in my  non-minified source. Only when i build app ( on staging for example).\n\nI'm using node v10.0.0 (npm v5.6.0).\nreact-dom v16.4.0, react v16.7.0\nLink for the error decoder is https://reactjs.org/docs/error-decoder.html/?invariant=307\nMy app crashed on several pages and i figure out it  is because of dropzone ( it was only thing that all pages had in common), also my last change in code was upgrading dropzone to v 10.0.0. When I install again 9.0.0 version, the problem was gone.\n\nI apologize for being unclear before.. ",
    "carpben": "I understand. NPM even declares it right after installing. \nHowever, since React 16.8 is relatively new, and installed in a minority of projects, I'd recommend adding a comment in the installation section of the documentation. I don't mind submitting a PR. . ",
    "benjaminmock": "It's used as an html attribute, so it has to be quoted as every other html attribute, too.\n. Error: Parse Error: Line xxx: XJS value should be either an expression or a quoted XJS text\n. ",
    "tkh44": "Sounds good.  I was just using the same style as in the source.\n. ",
    "ryyppy": "What exactly is an event ? apparently you want to express an object that has a event.dataTransfer attribute and a event.target attribute... why not make this explicit? . what kind of Function is this? Make this explicit!\nE.g. onClick: (elementId: string) => void. you need to define onClick as a property type in the class body, to make this flow understand the this.onClick... . I guess e is a DOM element... you can leverage the internal flowtype libdefs, which define exactly this: Element as defined here: https://github.com/facebook/flow/blob/master/lib/dom.js#L939. okay, so it will be onDragStart(e: Event) then :-). hm,... depends on your dependencies... if there are no dependencies, it's easier to consume... otherwise we should publish separate libdefs on flow-typed for now. ",
    "masylum": "\u261d\ufe0f . ",
    "b0gok": "@okonet https://github.com/okonet/attrccept is invalid link and https://github.com/okonet/attr-accept is valid. Is it correct change?. ",
    "bebraw": "I think we might be able to generate the tables with markdown-magic. Nicer to maintain.. How new style do you prefer here?. Maybe ES6 import instead?. I mean, code style (state to class, new style binding).. Likely worth doing in a separate PR, yeah. No need to fix yet.. ",
    "mcmillhj": "definitely, sorry I missed it on the first pass.. @rolandjitsu test is now updated.. ",
    "MrLeebo": "This is the ref example, I updated it to use the modern React.createRef() API instead of the callback API (to encourage best practices) but the callback API still works. Are you suggesting they be split up into two different files?. It is being bound in the constructor.. OK. Found another case. ",
    "andys8": "No, because the content will be under https://react-dropzone.netlify.com, too, and the link would be broken.. "
}