{
    "insin": "I just haven't given much thought to how each piece could be made customisable yet - suggestions welcome.\nThe biggest problem I foresee is resolution of custom dependencies for karma, webpack and babel both locally and in a CI environment.\n. @bebraw This is how you can get the setup you want via nwb.config.js as of the next commit I'm trying to land:\njs\nmodule.exports = {\n  // ...\n  karma: {\n    frameworks: ['mocha', 'chai', /* other stuff from karma-chai-plugins */],\n    plugins: [\n      require('karma-chai-plugins')\n    ]\n  }\n}\nYou'd just npm install karma-chai-plugins (or whichever plugin you're using) and have it in your own project's devDependencies (Mocha and PhantomJS are already provided by nwb)\n. Yup, that's the driver for me too, consolidating my development tools into nwb and making my entire ESLint setup be a one-package deal too.\nEdit: Karma config is now available in v0.1.0-beta.1\n. Done in the 0.1 branch\n. How about being able to specify an HTML file as an entry point, parsing it for linked resources and generating a Webpack config from it, sort of like a cross between https://github.com/substack/html-inline and webpack/webpack#536?\n. Should we also do this with webpack config for consistency? I'd like it if plugin support could just be a deep merge of a config object!\nBefore:\njs\n{\n  define: {\n  },\n  loaders: {\n    //...\n    extra: [\n    ]\n  }\n}\nAfter:\njs\n{\n  webpack: {\n    define: {\n    },\n    loaders: {\n      //...\n      extra: [\n      ]\n    }\n  }\n}\n. I have one eye on webpack-merge until I've figured out exactly what we need - e.g. would we ever need to be able to replace lists instead of appending, or pass null or some sentinel to indicate a property should be deleted, or even just  being able pass an update spec like react-addons-update.\n. On second thoughts, using a boolean for umd lets us keep and document all the options for optional features in the default config file, should someone change their mind later.\n. Yes, I've just not done any of that myself before, which is why it isn't in the initial version - this is extracted from about 6 of my projects which had near-identical configuration.\n. Thinking about this a bit more, the details of these tasks are irrelevant to what nwb does, and making a choice on your behalf on some of those details will make it less appealing to some.\nAn earlier version used to also include its own ESLint settings, which would make it a non-starter for many people.\nAre there any standalone tools people can install - which specifically deal with these tasks - which you'd recommend?\n. Closing this are there are no current plans to integrate these kinds of tools  but will document using them if there are recommendations which look good.\n. Reference commit from react-heatpack: https://github.com/insin/react-heatpack/commit/6108dbe409f6f7fd7dbf6d910f61d57d5cad007e\n. Reference for what we'll have to do behind the scenes to keep supporting Babel 5 style loose: 'all' config: https://github.com/bkonkle/babel-preset-es2015-loose/blob/master/index.js\n. Here's the start of a potential solution for Babel 6's npm2 problem for nwb: https://github.com/insin/deduped-babel-presets\n. Working on it in the next branch, using #31 as a reference, but haven't had time to create anything commit-worthy yet.\n. Implemented in 0.12.0\n. Created: https://github.com/insin/react-nwb-github-issues\n. A guide with some more advanced setup tips: https://medium.com/@matt.krick/a-production-ready-realtime-saas-with-webpack-7b11ba2fa5b0\n. See also:\n- https://github.com/rangle/react-redux-starter\n- https://github.com/mxstbr/react-boilerplate\n- https://github.com/olahol/reactpack\n. Adding a way to either add extra things to the top level webpack config or to receive the generated config for final tweaking yourself is the nuclear option - it's so powerful that I don't want to add it until absolutely necessary.\nFor this one, I'm thinking that loaders in nwb.config.js should be able to define a config object which gets added to the top-level webpack config object with a pre-configured prop per loader (which loader plugin modules can configure for non-built ins which support this).\ne.g. hypothetical customisation of a loader provuded by an nwb-stylus plugin:\n``` js\nvar nib = require('nib')\nmodule.exports = {\n  type: 'react-app',\n  loaders: {\n    stylus: {\n      config: {\n        use: [\n          nib()\n        ]\n      }\n    }\n  }\n}\n``\n. Which version of Node.js are you using?\n. We currently require Node.js >= 4.0.0 [because ofqs`](https://github.com/hapijs/qs/issues?q=const) and I didn't even realise that.\nI'll reopen this and add it to the 0.4 milestone since we should call that out - if people want support for earlier versions, we could always drop the qs version if they ask for it.\nJust while I'm here, I'm only testing with npm 2 since I use Node 4.2.x. I haven't fgured out a good way to test nwb commands rather than the code they use yet. If we can figure that out, we can run tests with npm 2 and 3 on Travis.\n. Looks like we need to stop running karma via execSync if we want to more easily test that projects are created with working tests.\nEdit: only if we want to include that in code coverage\n. We're now only using execSync to run babel and rimraf: aef5d0e412563d798dd915e05ad1e3f6cef183c2\n. We're now doing this\n. Looks like npm pack only includes sub-dirs for the react-app template.\nInvestigating now.\n. It looks like npm is reading the files config from each template's package.json and applying it when packaging nwb itself. Fix coming shortly.\n. This is fixed in the npm package for 0.4.1.\nThe source of the problem isn't fixed, will do that later.\n. NP, thanks for the bug report :+1: \n. PR for copy-template-dir: yoshuawuyts/copy-template-dir#6\n. The codemod thing is just an out-there idea (I haven't even written any codemods yet) until we have some concrete use cases. I'm imagining something like you having a bunch of route configuration generated which conforms to a particular convention, then a new version of react-router has a change which affects the convention in some way.\n. This is too big in scope for an nwb issue, ended up putting ideas related to it here: https://medium.com/@jbscript/a-future-for-react-development-tooling-be3bd4554a88. Do you have any info on what usage is like for npm 2 vs 3? I'm assuming most people on Node.js < 5 will still be using the default npm 2 for a while, and intend to support both while there's still significant usage of npm 2. (Babel 6 is going to be problematic there, though).\nI've already dealt with some 2 vs. 3 local install issues, though it's been a while since I last tested with npm 3, so I guess I need to start by adding Node.js 5 to the CI builds first.\nIs there anything else you commonly encounter helping people upgrade?\n. A Node 5 / npm3 build is now running on Travis\n. Create new issues for new preprocessor requests :smirk_cat: \n. What does the use case of setting your own babel stage and enabling loose mode look like with Babel 6? i really liked how simple this was with Babel 5 since all the transforms were included, but I suspect we could support the same configuration UI with more work behind the scenes.\n. @cafreeman Could you add the issues you're having to #12?\nI'm using nwb in projects at work which use vanilla Node.js 4 LTS, which comes with npm2. I don't currently need to upgrade to Babel 6 and I'm not willing to make install time, size and performance unacceptable with npm2 in order to do so.\n. @tomchentw do you know if anyone has made alternative babel@6 preset modules which provide presets in an npm2-friendly manner?\nI was wondering if it would be feasible to have one module which depends on every single plugin, offers a bunch of entry points for the different presets, and includes all the plugin module dependencies in its own dependencies so they don't get duplicated underneath it. Would be interesting if it could also handle a loose mode entry point for each preset, so current nwb stage and loose config could be as simple as it currently is.\nIf that's now possible, I'd rather have nwb make a clean, explicit break from npm2 than offer terrible installation time, size and performance.\n. That looks like good news :)\nMy approach to avoiding that was potentially going to be creating a new package which depends on all the babel plugins, uses its own package.json to manually deduplicate where possible and gives you entry points for using them using Babel 5-style stage numbers and also entry points equivalent to using loose: 'all'.\nI may still do this as we need to manage that somewhere anyway.\n. On second reading, it seems this bug gave npm3 users the npm2 experience w.r.t. babel-runtime when this particular dependency scenario occurred, so it won't improve things with npm2.\nThis PR looks like it handles the way I want to use loose config for plugins, linking it here for later reference: https://github.com/babel/babel/pull/3331\n. Thanks for the PR @geowarin, it was really handy when getting started with the Babel 6 work, but there ended up being way more I discovered I wanted to do and it turned into a massive commit in the end.\n. Could nwb subsume react-heatpack if this was added?\nserve-react  could configure webpack to use a dummy entry file in the same way to allow for rendering of exported components and React elements, which covers heatpack's other antry module use cases for quick prototyping.\nThe bundling command could check whether or not a top-level render() is being called in the entry module and include the dummy module if not,  to support bundling anything we can serve.\n. Implemented in 0.11.0.\nreact-heatpack is now deprecated.\n. Defaulting to public/index.html allowed us to:\n1. Not have to decide where the HTML gets generated in, because it's static\n2. Make it easy for people to use static assets by putting them in the public/ directory\nGuess we need to make some decisions now\n. inject is now enabled by default in html-webpack-plugin@2\n. Looks like this won't be as easy as hoped:\n- npm-install-loader doesn't (currently) support imports inside CSS (perhaps not that common a scenario for detecting new deps)\n- created an issue based on initial experimentation with auto-install-webpack-plugin: renke/auto-install-webpack-plugin#2\nSee ericclemmons/npm-install-loader#5 for discussion of this topic.\n. D'oh, dumb callback misuse on my part - will merge and release a fixed version this evening\nThanks for the PR, and especially for including a new test case\n. Time to sort out some proper testing for npm3\n. I didn't expect dependencies to be pulling in babel-runtime, so I think that blows my approach of using aliases to make v5 of it resolvable from the app out of the water.\n. I'm unable to replicate this locally in Linux, with any combination of local and global installation using Node 5/npm3, but I'm going to change the approach for getting a hold of babel-runtime to use webpack's fallback feature in any case.\n. This depends on #34, as we'll need to generate HTML with the correct file names\n. Closing in favour of #73 \n. @jantimon thanks for the heads-up. Is there a changelog anywhere of what's breaking/new/changed in 2.x?\n. Sounds great :)\n. Included in v0.8.0\n. it's not possible at the moment because I wasn't sure how to best expose tweaking of the plugins nwb already manages via its different build configs to the user, but adding support for providing extra plugins might not take much effort.\nnwb would need to pass its version of webpack to your config so you can use the plugins it ships with, so how does the following look as a speculative nwb.config.js config API?\n``` js\nvar MyConventionResolver = {\n  // ...\n}\nmodule.exports = function(deps) {\n  return {\n    type: 'react-app',\n    plugins: {\n      extra: [\n        new deps.webpack.ResolverPlugin([MyConventionResolver])\n      ]\n    }\n  }\n}\n```\n. I was trying to reduce the amount of nesting needed for config when there wasn't as much of it , probably over-influenced by writing the initial documentation with code examples code per config item.\nIt does need to be made more consistent, along the lines of Karma config, which all lives under a kaema prop.\n. Fixed in f573bf87e11e3b8d31942e845300137a5d6fd5a1\n. There's currently nothing configured for server-side React because I haven't written anything beyond experimental apps which run on both sides yet, so I don't know what's required in terms of Babel, Webpack (and Karma?) tooling to support them.\nPointers to any conventions which are emerging around tooling support needs would be welcome.\n. Webpack serving config uses devtool: '#eval-source-map', but reading around (jedwards1211/meteor-webpack-react#40, gaearon/react-transform-boilerplate#23) and experimenting it seems like we'll need to switch to 'eval' to get the correct filename to display in the redbox view.\nEdit: redbox seems to be part of the problem - if I switch to 'source-map', redbox points to the built file but Chrome's console stack trace points to the correct line in the original source, while Firefox shows built filenames and line numbers in both redbox and its console.\nIf I switch to 'eval' Chrome and Firefox show the correct filename in redbox and their console, but the line number isn't the original. Looks like this is about as good as it'll get cross-browser, given that you know the error happened in render():\n\n\n. Source maps work for me in Firefox 43.0.4 in Debugger > Sources, showing the transpiled code with nwb serve and the original source with nwb build, but not in console stack traces either way.\n\n\n. Yup, should be doable.\n. > I'd love it there was some way of performing linting checks/fixes\nDo you have an example of how you'd llike to use this?\ne.g. I currently manually install my own ESLint setup then tweak my package.json scripts like this...\njs\n  \"scripts\": {\n    \"build\": \"npm run lint && nwb test\",\n    \"lint\": \"eslint src test\",\n    \"test\": \"nwb build && nwb test\"\n  },\n...but I'd like to get more examples of how people are linting stuff before adding something which tries to call your linting setup to nwb.\nThis is something I want to do eventually anyway, as called out in the docs: https://github.com/insin/nwb/blob/master/docs/Introduction.md#not-currently-considered\n\na build where the output is minified\n\nWhich type of project is this for, and which built files?\nOnly the lib/ and es6/ builds and one of the umd/ build files in npm module projects should be unminified at the moment.\n\nAlso being able to specify a custom project template when using new and init would be great.\n\nTechnically, this should just be a case of letting you configure the directory which gets copied by copy-template-dir.\nDo you have an example of a custom template you'd like to use so I can try something out with it?\n. That's what I'm doing in the apps I use nwb in at work, just calling nwb in npm scripts for the client build and writing other scripts as usual for everything else.\n. Closing this as there are no plans to extend commands right now - use npm scripts.\n. Not requiring a config file unless you need one to tweak the default setup is something I'm working towards from another direction.\nThis is why the generic build, serve, clean and test commands are the only ones which are currently documented - you can actually call any command in the commands/ dir, but most of them won't work at the moment without a config file, and there are some I haven't even tried :smile_cat: \nI haven't thought much about the details yet, but eventually nwb should only complain about a missing config file if it can't determine which project type it's dealing with, so it's likely the generic commands will always require one.\n. type is currently required because I started with support for multiple project types which use the same build commands and am working backwards from there, since the reason I initially created nwb was to avoid having to duplicate the build tooling for my React apps, React components and other npm modules.\nreact-heatpack is geared towards quick no-config development, but isn't capable of creating builds. For running non-React apps without setting up any config, the equivalent it should be possible to support in the future would be something like:\necho \"const es6 = in => console.log('here')\" > main.js\nnwb serve-web-app main.js\nOnce a way to only require a config file for generic build commands has been implemented as part of #32 it should be easy enough to implement the above.\n. Thanks for the PR - I think if nwb goes for something like this, it will be more along the lines of the project templates described here, as I don't want to end up with more boilerplate which leaves the user hanging when it needs to be updated.\n. Is the version of nwb you're using installed globally or locally?\nWhich versions of Node.js, npm and nwb are you using?\n```\nnode -v\nnpm -v\nif nwb is installed globally\nnwb -v \n```\nWhich modules are installed in your project?\nnpm ls --depth=0\nDo you have any other potential sources of Babel config in your project, such as a .babelrc?\nAlso, please try setting the DEBUG environment variable to nwb before running to see what your generated config looks like:\n```\n*nix\nexport DEBUG=nwb\nWindows\nset DEBUG=nwb\n``\n. Not at all, and thanks for raising it - I think nwb could have prevented that being an error using Babel's hiddenbreakConfig` option, plus I needed to write something like the above post to be added to the CONTRIBUTING doc, so that's 2 useful outcomes from this issue :+1: :+1:\nDo you have an example of your project layout and the bit of config from the .babelrc file which triggered this so I can create a test fixture to try a breakConfig fix against?\n. Closing this as the underlying issue will be fixed in #63 and CONTRIBUTING.md has been updated with a self-debugging checklist.\n. I've not made any reusable components which depend on a stylesheet preprocessor before, so I don't know the best way to go about this - pointers to projects which have this kind of build set up would be welcome :smile_cat:\n. Looking at some other libraries I've used before.\n- react-select publishes a dist/ dir containing compiled CSS, with less/ and scss/ dirs if you want to use a preprocessor.\n- react-widgets publishes a dist/ dir containing compiled CSS, with lib/less/ dirs if you want to use  a preprocessor.\nI wonder if you can have a stylesheet as an entry module in Webpack.\nThat would be one approach to setting up a style build, if so.\n\nNeither of these require styles directly from components - I'm wondering what a build setup for that looks like.\nThe only project I have which includes its own styles is react-octicon, which publishes a css/ dir and uses require('../css/Octicon.css') to avoid having to do any sort of CSS build, as that will resolve successfully from src/ and lib/.\nCurrently, if you require CSS from a component, nwb's UMD build will generate a main.css bundle under umd/. This is pretty much by accident - I only noticed it when I checked out the umd/ dir which gets published for react-gridforms. \n. @hackingbeauty has a component we can use as a test case for React component projects which import their own style and also use a CSS preprocessor:\nhttps://github.com/hackingbeauty/youtube-autocomplete\n. Possibly some useful information in webpack/webpack#170\n. Thanks @Chrisui - nwb already has a pipeline set up for CSS loading which is also capable of chaining on  any CSS preprocessors it finds installed in nwb-* packages - this issue is more about how we can deal with extracting that CSS when building a React component to publish to npm, so people using components with nwb don't have to set up a webpack config, or tweak their own to handle CSS preprocessing for dependencies.\n. This won't work for certain types of config (karma plugins, extra webpack plugins, top-level config like nib for Stylus), but I'll have a look at how fiddly it would be to add.\n. If you don't need to change the defaults, the next version will allow you to skip config altogether as long as you use the react-app-specific commands directly (documentation TBD!)\n. Not planning to do this now.\n. The loader id for the css-loader used along with sass-loader would be sass-css - changing scss in your example to that should make it work.\n\nThis is a bit fiddly, so it should really be documented explicitly in each plugin's README rather than relying on people finding the right doc in the nwb repo.\n- [ ] Document style loading pipeline config in CSS preprocessor plugin READMEs\nThis uses sass as an example: https://github.com/insin/nwb/blob/master/docs/Plugins.md\n. An example of this has been added to the docs.. Thanks for the PR, but I will defer making this change until Webpack 2 is out of beta\n. No particular reason, I didn't know that plugin existed, but would prefer to use the built-in feature of Webpack.\n. Is there a common workflow for that? Happy to add a per-repo command to make it easier.\n. This should be added to the docs now that we have working examples, thanks for those.. webpack.extra config in nwb@0.8 would let you pass this extra config, but I think proxy is for webpack-dev-server, not webpack itself.\nnwb currenly uses its own simple Express server rather than webpack-dev-server, as I wanted the nice error overlays you get with webpack-hot-middleware but wasn't aware of a way to use it with webpack-dev-server.\n. http-proxy-middleware can be added to devServer.js for this, then we can support proxy config in the config file.\nFor reference, here's how webpack-dev-server does this: https://github.com/webpack/webpack-dev-server/blob/658280d8c497053877aec50974766d66d9b9def1/lib/Server.js#L135\nPRs are welcome, as implementing this isn't a priority for me right now (the apps I'm currently developing either serve up the API via Node.js (so I use nwb's middleware on the same server ) or will be hitting external APIs using CORS when deployed, so I don't need to proxy requests).. This looks perfectly cromulent as an initial way to add proxy support.\nProviding an object can act as \"advanced mode\", giving you complete control over proxy middleware settings.\nSuggestions:\n\naccept new top-level devServer config and put proxy under that, as there are more things we can make configurable.\nassume the proxy is enabled when devServer.proxy config is present and truthy, instead of needing an enabled flag.\n\n\nFuture work while I've been braining this (will create new issues for these):\n\nSupport configuring proxy as a string (simple mode), providing a URL all unresolved requests will fall back to. This involves a bit more work on nwb's side than advanced mode (check out create-react-app's start script for an example).\nShould express middleware also configure a proxy for you?\n\n\nFor development I alias the bin scripts (and bump the patch version in package.json to .99 or something so it's easy to check if you're using an alias) - don't forget to run npm run build or npm run build:watch:\n```sh\nBash\nalias nwb=\"node ~/repos/nwb/lib/bin/nwb.js\"\nCmder\nalias nwb=node C:\\Users\\Jonny\\repos\\nwb\\lib\\bin\\nwb.js $*\n```\nEdit: added this to CONTRIBUTING.md.. 21f57ba implements this in the next branch by switching to using webpack-dev-server. You can now configure Webpack Dev Server for this in v0.17. Hmm, that might be caused by this change to createKarmaConfig.js. I removed the Babel polyfill as I was only intending to use it to patch Function.prototype.bind() for PhantomJS 1.x:\nhttps://github.com/insin/nwb/commit/d9677e39f7468e99e55e29ae420fcb183c512638#diff-12a91575bde19ee7675c83307d7357e8\nDo you have something I can reproduce the error with?\n. As of v0.8, you can provide webpack.extra config in nwb.config.js which will get merged on top of the webpack configuration nwb creates:\njs\nmodule.exports = {\n  // ...\n  webpack: {\n    extra: {\n      devtool: '#inline-source-map'\n    }\n  }\n}\n. You can import CSS to have Webpack manage it: e.g. https://github.com/insin/react-router-form/tree/master/demo/src\n. Officially: nothing, it's now just a three letter command which is easy to type.\nThe \"n\" used to be \"npm\", but I didn't think it would be ok to use the name of another product as part of its name.\n. Replace the scaffold with your own ES5 code, there's hardly anything in there.\n. Thanks for this. There's another check in installer.js which modules with periods in their names won't pass.\n. Sounds like an npm issue. This module isn't a direct dependency of nwb. Searching for that error message brings up a bunch of the same reports for different projects - nuking node_modules/ and starting from scratch seems to be the solution if this happens to you. I've not encountered it personally.\n. Do you have a .babelrc somewhere in your project's path or your home directory?\n. Closing for now - please reopen if this is still an issue with newer versions (could it be related to the sudo? Thought it was ideal to avoid using it for global npm stuff). I don't understand the use case - Gatsby already provides its own workflow and tooling.\n. Use karma.tests in nwb.config.js to change that: https://github.com/insin/nwb/blob/master/docs/Configuration.md#tests-string\n. This won't work in nwb 0.8.x, as it uses npm-install-webpack-plugin@2 , which doesn't support resolve config.\nI've checked that it works in the upcoming version of nwb, which uses npm-install-webpack-plugin@3 - you'll have to avoid the --auto-install flag until then if you want to use resolve.\n. It'll auto-close when 0.9 is merged into master\n. As per the Versioning section in the README, 0.x releases may contain breaking changes - check the release notes for 0.9.0 for breaking changes and upgrade instructions\n. Demo app builds currently fall back to using a default, basic template.\nIt wouldn't take much to have demo builds check for demo/src/index.html (in keeping with the src/index.html convention for React/web apps) and use that instead if present.\n. This wasn't intended for demo builds, but adding webpack.plugins.html config to your nwb.config.js with a template property which points to your custom demo template might just work.\n. Plugin config was moved up to the top-level webpack object a while back for convenience - thanks for the example solution.. You're probably safer doing this outside of nwb, just using it in devDependencies and scripts - the project templates are there solely to provide a workflow for getting started quickly with entry points in the right place, they're not really the main point of nwb.\n. Thanks for the PR\n. Duplicate of #72\n. Please create another issue if this is still happening to anyone with more recent versions. The new and init commands are there solely to provide a default \"it'll do\" workflow, so I'm not keen on adding more config around them unless it's essential - thanks for offering a PR, but no thanks on this particular change.\nnwb uses 0.x.y versioning and defines its own semantics for what these versions mean because I don't think its API (in the form of nwb.config.js) can be considered stable until it moves to the current version of Babel - that might even involve dropping support for npm2, although I want to avoid that if possible :disappointed:\n. This plugin depends on Babel 6 #12 \n. Implemented in 0.12.0\n. Let's not.. Use Babel 5's  stage: 0 config to enable the experimental proposals it supports: https://github.com/insin/nwb/blob/master/docs/Configuration.md#babel-object\n. I fixed this in the test async/await project by adding babel-runtime@5.8.29 to its dependencies - I'll add a note about this for npm3 users before releasing the next version.\n. Which version of React are you using? babel-runtime is no longer a transitive dependency as of unknown version of fbjs.\nInstalling any version of babel-runtime greater than the one nwb pins to should result in broken production builds in my experience - are you seeing that too?\n. Try deleting the cache for your Travis build, as it looks like it's failing in the pre-install setup.\nThere's nothing that specifically needs to be done in nwb itself to support React 15, but there are currently issues if you use npm3 and your project uses optional: ['runtime'] Babel config (see #101) \nI was going to make 0.10 a quick release to install React 15 by default for new projects until this tripped me up.\n. There are a number of places where src/ and src/index.js are hardcoded, so just using extra probably isn't enough for now.\nWill look into making this properly configurable.\n. Closing in favour of #115 for tracking making this configurable - thanks for the example real-world config, will come in useful when testing the feature.. How about webpack.compat config which makes all the necessary config tweaks for you?\njs\nmodule.exports = {\n  webpack: {\n    compat: {\n      enzyme: true,\n      sinon: true\n    }\n  }\n}\nI was also considering scanning package.json and automtically adding tweaks for known-incompatible libraries, but it seems a bit too magical.\nThe version of React also affects which tweaks you need to make for enzyme, so we might need to scan package.json anyway.\n. Implemented in 388e8bf6e84e41fe8fb91b73f9531c6dec4ed4f1\n. - [ ] Use an environment variable to enable validation of every webpack config nwb generates\n  - [ ] Enable this when running nwb's test suite, to verify that config generated with no configuration and with the configuration nwb allows with everything but extra in its webpack config is valid\n- [ ] If the user hits the config escape hatch by providing webpack.extra config, always run validation on the generated webpack config\n. No need for this any more with Webpack 2. create-react-app's implementation PR, for reference: https://github.com/facebookincubator/create-react-app/pull/189\n. Fixed in v0.15. Idea for this after looking at React Cosmos' integration docs - what if we added some modules under config/ with the name of the basic commands nwb supports which just generates the webpack config for that command (using nwb.config.js to determine the project type) and exports it?\nThen integration with cosmos might look something like:\njs\n// cosmos.config.js\nmodule.exports = {\n  webpackConfigPath: 'nwb/config/serve',\n  // ...\n}. Other potential simplifications:\n- Don't require the query key for loader config tweaks, as it's the most common thing to change - special-case include and exclude if they're provided (doe this clash with any load query settings?)\n- Apply postcss config to the default style pipeline if an Array is given.\njs\n  webpack: {\n    define: {\n      __GAPI_KEY__: JSON.stringify('YOURAPIKEY')\n    },\n    html: {\n      mountId: 'root',\n      title: 'The Cinnamons'\n    },\n    loaders: {\n      css: {\n        modules: true,\n        localIdentName: '[hash:base64:5]'\n      }\n    },\n    postcss: [\n      require('precss'),\n      require('autoprefixer'),\n      require('cssnano')\n    ]\n  }\n. All implemented in a25ac149b24a59be1ffb8708d423623e31d9812f and aaf7ef7c2ec90ac325f1fde57e88f452272f307a\n. This is going to need to be done soon for maintainability purposes!\n. Remembering why I hardcoded all the entry points - they end up in 3 different configurations of webpack config (path, object with path, array of entry points) and the same type of command is used twice for different things in one of the project types.\nNotes:\n```\nNeed custom entry for:\ntype       command               data needed                            common entry point\n  ----       -------               ------------------------------------   ------------------\n  app        Serve React App       (path, ends up in an array)            webpackServer()\n  app        Build React App       (object - property names the bundle)   webpackBuild()\n  app        Serve Web App         (path, ends up in an array)            webpackServer()\n  app        Build Web App         (object - property names the bundle)   webpackBuild()\n  component  Build Component UMD   (path)                                 webpackBuild()\nSeparate custom entry for?\ncomponent  Serve Component Demo  (path, ends up in an array)            webpackServer()\n  component  Build Component Demo  (object - property names the bundle)   webpackBuild()\nDon't need custom entry for:\nModule Build\n  Tests\nA problem:\nReact component modules use webpackBuild() twice\nSolutions?\nPass an extra options argument to it?\nwebpackBuild() - entry from build config passes through to\n  createWebpackConfig() - looks doable!\nDoes this solution fix anything else?\nwebpackServer() - entry is created in createServerWebpackConfig(),\n   passed to createWebpackConfig() - looks doable!\nIn both cases, we need to know whether or not we're building a demo (to use\na different piece of user config for custom entry?)\nNew options argument: options = {demo: false}?\n``\n. Of course! Command line arguments!\n. No particular reason, happy to drop the other implementation in if it works in older IE.\n. It looks like we need to create our own instance ofchalk- itsenabled` flag is global and something seems to be disabling it.\nSee chalk/chalk#46\n\n. Whoops, forgot I had ericclemmons/npm-install-webpack-plugin#52 patched locally in my nwb repo.\n\n. First thoughts:\nI've tried to avoid nwb needing to have React in dependencies (which is why redbox-noreact exists)\n\nSecond thoughts:\nWhy?\n\nFirst thoughts:\nShut up.\nEnzyme has a peerDependency on React, which makes it problematic to include in a global install of nwb (and for a local install when using nwb for non-React projects, which will generate peerDependency installation or warnings depending on your version of npm).\n\nSecond thoughts:\nWhy is it problematic for a global install?\nSo what if non-React projects pull in another few React dependencies?\nThere are already a bunch of React-specific dependencies - shouldn't these be split out into a separate nwb-react module which gets included in React project skeletons?\n\"babel-plugin-react-display-name\": \"2.0.0\",\n    \"babel-plugin-react-transform\": \"1.1.1\",\n    \"react-transform-catch-errors\": \"1.0.2\",\n    \"react-transform-hmr\": \"1.0.4\",\n    \"redbox-noreact\": \"1.1.0\",\n\nFirst thoughts:\nHaving different versions of React installed locally and globally opens up the possibility of having two different versions of React in play - a global Enzyme dependency will resolve nwb's version of React first.\n\nThird thoughts:\nIs this really an effective way to find out why you've done things the way you've done them and if you've really done the work to validate your own assumptions?\nGet some sleep\nTo be continued....\n. Enzyme now requires you to configure an adapter rather than needing Webpack workarounds when importing it in your tests: https://github.com/airbnb/enzyme/blob/master/docs/installation/react-16.md. This should tell you what the features are and also serve as a guide to the defaults and how you can change them, e.g. publicPath defaults to '/' so needs to be tweaked if your app will not be served at the root, or needs to be completely path-independent.\n. Implemented in 0.12.0\n. Thanks!\n. @developit is there anything in the code in the Gist below which would specifically be incompatible with preact-compat?\nhttps://gist.github.com/insin/45b7f66e01628601c0cc6b79767b0e4f#file-app-js\nTrying the --preact flag in the next branch with it and am getting this:\n\n. :+1: got it working, but I had to fiddle with preact-compat's package.json in node_modules/ and delete its own installed version of preact to make it use my app's preact@beta, and for that not to be peer invalid (with npm2):\njson\n  \"peerDependencies\": {\n    \"preact\": \"* || ^5.1.0-beta.20\",\n    \"proptypes\": \"*\"\n  },\n  \"dependencies\": {\n    \"preact-render-to-string\": \"^2.6.1\",\n    \"preact-svg\": \"^1.6.0\"\n  },\nA dependency should usually be in either peerDependencies or dependencies/optionalDependencies, but not both as the latter will make it install its own version and the * version not matching prerelease versions makes it a pain when you need to be on the bleeding edge :smile_cat: \n. webpack.loaders is for tweaking the configuration of nwb-managed loaders.\nTry using webpack.extra - this will be merged into the generated webpack config:\njs\nmodule.exports = {\n  type: 'react-app',\n  webpack: {\n    extra: {\n      module: {\n        loaders: [\n          { test: /\\.html/, loader: 'html' }\n        ]\n      }\n    }\n  }\n}\n. You're welcome!\nAdded this as an example to the docs in 986e0ca too.\n. files config in package.json controls what gets published to npm.\nWhen you're tweaking it, you can run npm pack first to check what npm will publish when you run npm publish.\n. For a component nwb build is just using babel to transpile everything from src/ into lib/ - webpack isn't involved.\nThis sounds like #58, which is something I've not done much with or or figured out a good solution for.\n. You would need to configure babel-loader to process those files (default is to exclude all of node_modules/), so you'd use webpack.loaders to configure the default babel-loader.\nAssuming Webpack does what you want when you have both exclude and include config, something like:\njs\n{\n  webpack: {\n    loaders: {\n      babel: {\n        include: /node_modules[\\\\\\/]react-components/\n      }\n    }\n  }\n}\n. I think you might need to explicitly include src/ when using include, as the default config is based on excluding node_modules/.\nhttps://webpack.github.io/docs/configuration.html#module-loaders\n. Fixed in v0.11.1\n. Thanks for the PR - this was caught separately while editing the docs for 0.12, so this change is already in.\n. Let's not.. Yes, useful, but also difficult to get to from where nwb is now.\n. Closing this as I don't think it's suitable for nwb, as I'd rather make something configurable than have to eject.. Basic type checking was expanded in 6f918baae90e2502f3fb0e47f88ae61612207d34, not sure about going deep on validating party options, though.\nnwb pins version numbers, so it's feasible, but adds more maintenance overhead.. Webpack 2 uses module from package.json to pick up an ES6 modules build, so we should keep this feature and also add it when doing #110\nSee https://github.com/facebookincubator/create-react-app/issues/183#issuecomment-235172954 \n. This isn't needed any more - React now publishes development and production bundles. Sweet - that detail will be hidden from the end-user pov when it happens.\nThis is one of the main features I was looking forward to Webpack 2 for, can't wait to use it without having to upgrade first  :+1: \n. On second thoughts, this defeats the purpose of the react command, which is to not need a project to get started\n. Thanks for the PR, it's not something I feel strongly about either way and it's trivial for the user to change if they want to, so I'll leave it as is for now.\n. Implemented in 0.12.0.\n. Tried this and it seems too jumpy due to the number of modules involved - the progress bar keeps jumping backwards as it discovers the load of new modules to be imported.\n. Done in 19ed479dcce0c3f34a71e742e7e7b3be5c80fe70 and efa1507e310654c4ee41b9d19f5ccaf872196086\n. Argh, this is one of those fiddly bits of config that you have to play with, where I'm not sure exactly why Webpack does what it does.\nI'm not seeing the same behaviour in create-react-app when I tweak this config as I am in nwb, potentially caused by nwb's vendor bundle (also potentially due to the way nwb creates its vendor bundle).\nThe change here might just be to document that setting allChunks: true will shave a bit off your bundle in certain scenarios.\n. I wouldn't be averse to that, sounds reasonable.\nWe probably also need something to disable wrapping of propTypes with an environment check, as some people have use cases where they want to use propTypes in production (e.g. React Bootstrap uses them to mask props, someone building a UI lib with nwb might want to do likewise).\nStill not sure of the cleanest way to configure all these off-toggles for default features. I added a polyfill toggle to the top-level config object to prevent the new default polyfills being added, wondering how ugly that gets as you increase the  number default features you can turn off.\n. What do you think of making these all command-line feature toggles?\nWe already have some precedent with --preact (enable experimental build), --install (enable experimental dev tooling), --fallback (enable fallback serving for HTML5 History apps) and --reload (toggle a downstream feature on), none of which have any config file equivalent as being command line args lets you try them without any commitment (and you can add them to your package.json scripts if you decide you always want them).\nPotential new toggles:\nreact-component projects:\n- --no-demo[-build]- turn demo build off\n- --no-[wrap-]proptypes - turn propTypes environment check wrapping off\nreact-app/web-app projects:\n- --no-polyfill - turn off inclusion of default polyfills (replacing polyfill: false config, which can only ever have that value) polyfilling affects serving, build and testing, so it gets to be a special case, as you'd have to use --no-polyfill in every command for consistency\n- --no-vendor[-bundle] - turn off automatic vendor bundle for anything from node_modules (replacing vendorBundle: false config, which can only ever have that value)\n. Webpack should be replacing any process.env.NODE_ENV expressions in your code with \"test\", as:\n- Node's NODE_ENV is forced to test during test runs\n- The  current value of Node's NODE_ENV is injected into your code with DefinePlugin\nThis will only work if your code uses the literal expression process.env.NODE_ENV, not if it does something like pulling out process.env into a variable and trying to access NODE_ENV from that, or destructuring it out, for example.\nYou won't see any of your Node.js environment variables in process because your tests are being bundled up by Webpack and run in a browser. If you have any process references hanging around after process.env.NODE_ENV is replaced, Webpack will actually inject a shim for process from node-libs-browser.\nDo you have some example code I could use to try to replicate this if none of the above helps? :smile_cat: \n. Assuming you have eslint, eslint-loader and whatever plugins you need installed, plus an .eslintrc, it should be something like this:\n```js\nvar extraWebpackConfig = {\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        enforce: 'pre',\n        loader: 'eslint-loader',\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\nmodule.exports = {\n  webpack: {\n    extra: extraWebpackConfig\n  }\n}\n```\nWe would also need a way to disable use of NoEmitOnErrorsPlugin, which nwb could do automatically if ESLint support is added and enabled.. Created https://github.com/MoOx/eslint-loader/issues/153, which would allow nwb to manage the ESLint dependency for you in a way which supports global usage.. It looks like this module has published untranspiled ES6 to npm, which as far as I'm aware isn't supported by UglifyJS yet.\nNot that it seems to make a difference in this case, but is the extra target config value valid?\n. Do people generally compress code for Electon apps? It should be possible to disable use of uglify if Node >= v4 is the target anyway.\n. That's the default logging output for Webpack's stats object - we'd need to provide access to it or be able to configure a custom logging method - this is all nwb is currently doing:\nhttps://github.com/insin/nwb/blob/4c2121c01f18577695c155357706aceae289cb1e/src/webpackBuild.js#L42-L62. I use the history fallback middleware in different places depending on whether or not it's a development or production build being served.\nThe fallback middleware just changes the incoming request path to /index.html, so you need to have it before you either use nwb middleware (which serves /index.html) or static middleware.\nI don't have any examples handy, but I can provide one when I get into work on Monday if you've not cracked it by then :smile_cat: \n. They should work once nwb is upgraded to use React Hot Loader v3 (#99)\n. As of v0.16.0 you can pass a --no-hmre flag to nwb serve... commands to disable use of React Transform-based HMR patching so you can implement your own.\nClosing this in favour of the RHL v3 issue.. In any case, it will be... :sunglasses: configurable.\n. Added in v0.13.0. Which version of nwb, project type and config do you have?\nIf I create a new react-component project with nwb 0.12, this src/index.js...\njs\nexport {default as MyModule} from './mymodule'\n...gets transpiled to this in lib/index.js:\n``` js\n'use strict';\nexports.__esModule = true;\nvar _mymodule = require('./mymodule');\nObject.defineProperty(exports, 'MyModule', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_mymodule).default;\n  }\n});\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n``\n. I think global nwb should be changed to either warn or refuse to run if it doesn't match the required version in package.json.\n. Closing this resolved issue and creating #176 for the change to nwb\n. Looks like I forgot to enable passing areload` option to the middleware.\n. Dupe of #171 \n. I need to pull the documentation for this out into the README for each preprocessor plugin- it's currently hiding at the bottom here:\nhttps://github.com/insin/nwb/blob/master/docs/Plugins.md#implementing-css-preprocessors\nTL;DR: change the prop in your webpack.loaders config from css to 'sass-css'.\n. serve commands take an argument for the entry point to your app and build commands take the entry point and ouput directory - does this give you want you need?\ne.g.\nnwb serve-react-app dist/index.js\nnwb build-react-app dist/index.js build\n(You must pass the second arg to a build command if your source is in dist/, as dist/ is the default output directory and will be deleted prior to building!)\nCheck out the individual command docs here: https://github.com/insin/nwb/blob/master/docs/Commands.md#project-type-specific-commands\n. Closing in favour of #115. No, as I don't need this right now, I just want to try it when I have time/motivation to do so.\nPRs are welcome.. Thanks for the research and examples @RakanNimer - my preferred approach (long-term) would be to turn both the current Karma/Mocha setup and Jest integration into testing plugins which follow the nwb approach of generating config (configurable via nwb.config.js) and calling the tools for you, passing the config.\nWe can then make testing a question when creating a new project, install the appropriate plugin and generate skeleton tests.\nLast time I checked, the only thing which seemed to be missing to support this was that you couldn't pass Babel config directly to Jest, rather it had to be in a .babelrc file.. @loklaan ooh, that looks good. Any hacking goes as long as it can stay under the hood.. @loklaan thanks for looking at this and the other stuff you're doing. I've made you a collaborator so you can have at it, as I'm at a bit of a low ebb time/motivation-wise at the moment.\n\n\nInquirer is currently used in createProject.js for component/module projects.\n\n\nFun. I guess this means needing to make a proper decision on plugin architecture. My initial implementation for CSS preprocessors assumed plugins would export an object with properties providing configuration for extension points nwb supports, so plugins don't have either responsibility or free reign to modify config.\n\n\nHow about having a basic test scaffold which gets used unless the project type you're creating can provide a specific scaffold for the type of testing plugin you're using (details TBD)?. If react-flexbox-grid is the only CSS you're importing from node_modules/ you could configure the css-loader in the default vendor-css-pipeline loader like this:\n\n\njs\nmodule.exports = {\n  webpack: {\n    loaders: {\n      'vendor-css': {\n        modules: true\n      }\n    }\n  }\n}\nI haven't encountered dependencies asking for a specific loader setup like this before, so nwb doesn't currently provide a way to say \"also create an additional style loading pipeline with this configuration\", it just has a single loader pipeline for all CSS required from node_modules/.\n. You can now configure custom stylesheet rules since nwb v0.16.0, which allows you to provide a unique rule per dependency if you need it.\nSee the Stylesheets docs.. Fixed in v0.14.0. Is this in a production build? Could you provide some more details to replicate this?\nThere are known issues with Webpack's sourcemaps (e.g. https://github.com/webpack/webpack/issues/2145)\n. Not sure what's happening here, as nwb also uses cheap-module-source-map when running a development server.. Fixed in v0.13.0. The best way is usually to install from npm and use require() or import to import from node_modules.\nnpm install materialize-css\nIn index.js:\nimport 'materialize-css/dist/css/materialize.min.css'\nWith the jQuery import do you want to expose it globally (equivalent to using a <script> tag) or just import it for use in a module?\n\nIf you have manually-managed files you want to include via index.html, you can put them in the public/ directory, which will be served via the development server and copied to dist/ when you build.\n. Thanks for the bug report - I assume if we pass the arguments as a separate array instead of hardcoding them into the command to be executed, Node should handle escaping them properly. Will give it a go soon.\n. Are there any apostrophes in the path to the new project directory?\nSounds like another place we should be passing command arguments properly instead of creating a command string which also contains arguments.\n. Yes, definitely, I suppose that makes #203 a dupe of this, but I haven't used offline-plugin or the alternatives so don't know the pros and cons of each.\nWe can tweak entry config at any stage when we've detected that a feature has been enabled, be it cli options/user config or whatever.. Thanks for the PR.\nGo away, coveragebots!\n. You can use NODE_ENV to determine when tests are being run and provide different config - here's an example config:\nhttps://github.com/insin/react-yelp-clone/blob/nwb/nwb.config.js\n. The .jsx extension isn't supported by nwb.\nCHANGES.md for v0.12.0 has instructions for adding it if you want to use .jsx files.. Have your index.js re-export all the components then you can do import {Box} from 'myPackage'.\nHere's an example of React Bootstrap doing this: https://github.com/react-bootstrap/react-bootstrap/blob/master/src/index.js\nIf the project using myPackage is also using nwb, you can use babel.cherryPick config to transform those imports into individial imports.\nOnce Webpack 2 lands you will get this behaviour for free - it should use the build from es/ and only bundle the components you actually use when importing this way.. Closing as a duplicate of #58 - v0.13.1 added a --copy-files flag to enable copying non-JS files over to es/ and lib/. You need a -- argument to delimit arguments for npm and arguments for the command:\nsh\nnpm run build -- --copy-files\nAdding it to your scripts as suggested is the way to go if you're always going to be using it.. nwb just creates a regular Webpack config for you.\nSet a DEBUG env variable to nwb and an NWB_TEST env variable to true before starting the dev server to see what it generates.\ndevtool config should go in webpack.extra, but it doesn't seem to make a difference.. Here's a potential issue - it looks like webworkify-webpack-dropin is looking for generated __webpack_require__() calls which use integer modules ids:\nhttps://github.com/Ambroos/webworkify-webpack-dropin/blob/master-v1/index.js#L62\nnwb generates a Webpack config which uses NamedModulesPlugin in dev mode (so it's easy to see what's hot-reloading) and HashedModuleIdsPlugin for production builds (for stable module ids), both of which will generate __webpack_require__() calls which use double-quoted strings.. Yes, should be doable - what does Inferno need in terms of Babel config for development serving and prod builds?\nThe React support is mostly just commands in src/commands/ which set up some React-specific settings for either building or serving, and some support in src/createBabelConfig.js.\nInferno support should just be a case of having commands which set things up simlarly, plus support for any extra Babel config required and a skeleton for Inferno apps in templates/.\nThings could be modularised more to allow extra project types as plugins (and implement all the existing ones as plugins), but I haven't needed that or had the time to work out the fiddly bits yet, so it's currently \"no abstraction is better than the wrong abstraction\", with a lot of duplication in src/commands/, . Oh, cool, if there's a similar compat package I can add --inferno to the next branch later this evening.. Webpack isn't used when building a component to lib/ and es/ for publishing, we just transpile from src/ using Babel.\nI would suggest using a top-level directory for static resources, adding it to package.json files config so it gets published and using relative paths from src/ to it so the same relative paths work from lib/ and es/. Doing it this way will also require users of your component to use webpack and have appropriate file-loader configuration in place.\nThe best way to do this is still an open question, this is just what's worked for me when publishing components which needed to import static resources, which I've done very little of.. Try removing the leading slash from what you're passing to path.resolve(). Any thoughts on what should be in the default unit test?\nI just have the simplest thing that will work as we have a DOM available via PhantomJS.. I think this should be documented under karma.plugins instead - I've used require() throughout the docs to avoid having to explain Karma's magic importing, as the mixture of strings and require()-ed modules nwb supports is already fiddly to explain.\nI found Karma's magic imports flaky while developing nwb, so I've avoided them since - it might just be that they don't support plugins being passed as absolute paths to a module, rather than module names which can be resolved from the cwd.\nI also haven't tried this to make sure it works with modules managed in the users's own app, this is a suitable project.:\n\n[ ] Test against https://github.com/insin/react-yelp-clone/tree/nwb. I wanted its name to be easy to type (so short) and meaningless \ud83d\ude38 \n\nIt also has partial support for Inferno and Preact (apps and compat builds) in v0.13, and will have first-class support for them equivalent to React in v0.14.\nI was thinking maybe renaming to React All The Things (ratt) at some stage (perhaps calling that 1.0) but @threepointone just called dibs on rat-based tooling names.\nI love the idea of having a ratt run command.\n\ud83e\uddc0 \ud83d\udc00 . Closing this for now, as there are no plans to rename in the immediate future.. Fixed in v0.14.0, nwb/express now supports all app types. Fixed in v0.14.0. Fixed in v0.14.0. Eep: https://twitter.com/nicdex/status/818606636919095296. The babel-core error is a bit weird, not sure what's happening there. I would try uninstalling and reinstalling nwb from scratch first to make sure all dependencies are there.\nIs there any extra configuration in your nwb.config.js file?\nDoes anything look out of place in the generated Webpack config if you set a DEBUG=nwb environment variable?\nDoes your project structure much different from what nwb's skeleton app creates? It looks like you're running serve from a nested directory.\nA relevant change in 0.13 could be that we now specify the path to babel-runtime when creating Babel config, so it would be useful to see what that gets set to using debug output.. Which type of project is this? Can you provide your nwb.config.js?\n\nNotice that I removed global nwb and running the command from node_modules, is that the correct way of running if there is no global nwb installed?\n\nIf you use nwb in npm scripts, it works both ways - a local install creates node_modules/.bin/nwb and npm puts node_modules/.bin on the path when running scripts, alternatively you can call node_modules/.bin/nwb directly.. Does v0.13.6 fix this?\nhttps://github.com/insin/nwb/releases/tag/v0.13.6. Closing as fixed.. D'oh! Thanks for the PR. My favourite kind of Pull Request - thanks!. This is a nice bit of polish - I like it.. Aww yeah, thanks for this and the other PRs you've submitted, trying to get a chunk of time to go through them so we can get these landed.. One thing I need to add to CONTRIBUTING.md is that significant changes are usually done in the next branch and there are a bunch of changes in there around async and spinner management which will conflict here, do you mind resubmitting against that branch?. This probably is a good place to do that, then we can have a separate install function which handles choosing between nwb and yarn, and manages the spinner stuff etc, so the caller just has to provide a list of modules to be installed.. build-react and serve-react are used by src/bin/react.js - they're named that way because you don't need to set up a react app to use them, just point at an entry module.. @ntwcklng apologies for digging a big hole under the work you did on this - I needed an install function which could check for resolvable dependencies while implementing inferno build, as this was a blocker for being able to bundle a module which exports a component, but it turned out generic enough to use everywhere else.\nI'm also almost done rewriting most of createProject.js to remove synchronous bits and reduce duplication, as it became a copy and paste mess as I added more project types. \nIn places you find synchronous stuff or lots of copy and paste in nwb it's usually just me being lazy because I needed it to work now rather than having to deal with figuring things out properly, but I've finally been in the mood to fix things recently due to diving into Preact and Inferno.\nLet's see where the dust settles after v0.14.. I think we should do this when/if we drop the react-transform Babel plugin in favour of the latest React Hot Loader, which AFAIK supports patching methods defined as class properties for binding.. I moved away from SVG badges because this is what they look like if you specify a reasonable minimum font size in your browser config:\n\nI've opened https://github.com/badges/shields/issues/848 to see if there's something which can be done to fix this.. D'oh, thanks \ud83d\udc4d . Fixed in v0.15. # Making Style Rules Configurable\nWebpack style processing rules created by nwb chain together style-loader, css-loader, postcss-loader (configured with Autoprefixer by default) and an optional style preprocessor loader provided by an nwb plugin.\nThese are configured appropriately for development serving and for builds (using ExtractTextPlugin), while also allowing each loader's options to be configured\nCurrent\nBy default, one rule is created for CSS in your app (exclude: /node_modules/) and one is created for CSS imported from node_modules/ (include: /node_modules/). You also get 2 rules for every style preprocessor plugin being used, with the same include/exclude config.\nThese are configurable using a naming convention in webpack.rules config which allows you to uniquely target each loader in each default rule.\ne.g. css-loader can be configured differently in each rule using  css, vendor-css, sass-css, vendor-sass-css, etc.\nNext\nFor nwb v0.16 we would like to make it possible to configure your own style rule setup and provide configuration for the individual loaders chained by the rule at the same time. \nExample use case: use CSS modules for CSS from a particular directory but use global CSS for everything else.\nExample use case: providing the specific rule setup a dependency from node_modules/ needs, such as react-toolbox.\nBackwards Compatibility\nOption 1: Same by default. If you don't define webpack.styles (placeholder name), you will get the same default config as nwb <= v0.15 with the usual ability to configure the rules and loaders using unique id props in webpack.rules. This is consistent with the approach nwb normally uses in that upgrading shouldn't break things by default, but should work and log deprecation warnings.\nOption 2: Break, with new defaults. If you don't define webpack.styles (placeholder name) you will get a default style pipeline which treats all imported CSS/Sass/Less/Stylus files the same. If not in v0.16, it should become the new default in v0.17.\nYou should also be able to configure something like styles: 'back-compat' (placeholder name and value) for a couple of releases to explicitly enable the old default config with a deprecation warning.\nStyle Rule Config\nWhat should the object configuring a single style rule look like?\nWe need the following values to create rules:\n```js\n// Style processing configuration object format\n// One of these maps to creation of a single Webpack rule\nlet styleConfig = {\n  // Either 'css' or the the id of a style preprocessing plugin\n  // e.g. 'sass' if you're using nwb-sass\n  type: 'css',\n// Loaders chained in the style rule can have their configuration tweaked\n  // using an object under a prop matching their name.\n  loaders: {\n    style: { /.../ }\n    css: { /.../ }\n    postcss: { /.../ }\n    // When using a preprocessor, its loader can also be configured\n    // sass: configure sass-loader, including plugins (type: 'sass', using nwb-sass)\n    // less: configure less-loader, including plugins (type: 'less', using nwb-less)\n    // stylus: configure stylus-loader, including plugins (type: 'stylus', using nwb-stylus)\n    sass: { /.../ }\n  },\n// For convenience, we will take 'style', 'css', 'postcss' and preprocessor\n  // loader config and move it into the loaders format above when processing\n  // user config if a loaders prop doesn't exist.\n// Example of configuring css-loader to use CSS modules\n  css: {\n    modules: true,\n    localIdentName: (\n      process.env.NODE_ENV === 'production'\n        ? '[path][name]-[local]-[hash:base64:5]'\n        : '[hash:base64:5]'\n    )\n  }\n// All other properties passed will be added to the Webpack rule, so\n  // all top-level rule config can be provided here - see module.rules in\n  // https://webpack.js.org/configuration/ for all possibilities.\n  include: path.resolve('src/components'),\n// Support for custom rules? Maybe next release.\n  // What if a use: prop could be used to configure additional loaders?\n  // Passing the names of loaders managed by nwb could be detected to allow\n  // mixing them with custom loaders, similar to what we do for reusing Karma\n  // plugins managed by nwb when creating Karma config.\n}\n```\nSpeculative Example Configs\nCSS modules for one directory, global CSS everywhere else\njs\nmodule.exports = {\n  webpack: {\n    styles: [\n      {\n        type: 'css',\n        include: path.resolve('src/components'),\n        css: {\n          modules: true,\n          localIdentName: (\n            process.env.NODE_ENV === 'production'\n              ? '[path][name]-[local]-[hash:base64:5]'\n              : '[hash:base64:5]'\n          )\n        }\n      },\n      {\n        type: 'css',\n        exclude: path.resolve('src/components')\n      }\n    ]\n  }\n}\nVariant: an object is provided and its properties are the type, rule configs under it can be an object or a list of objects.\njs\nmodule.exports = {\n  webpack: {\n    styles: {\n      css: [\n        {\n          include: path.resolve('src/components'),\n          css: {\n            modules: true,\n            localIdentName: (\n              process.env.NODE_ENV === 'production'\n                ? '[path][name]-[local]-[hash:base64:5]'\n                : '[hash:base64:5]'\n            )\n          }\n        },\n        {\n          exclude: path.resolve('src/components')\n        }\n      ]\n    ]\n  }\n}\nTODO: react-toolbox example. Implemented in v0.16.0. Thanks!. Damn, just checked the changelog and looks like that was the original reason I disabled it.. Oh, I didn't know about ProvidePlugin, would rather only include them when needed like that, always up for slimming the current ones down if possible too.\nFor now you can use --no-polyfill to exclude them, or create a config file and use polyfill config.. What's the benefit of moving to this preset? The features in the es2017 preset are already included in the stage-3 preset and won't be removed from stage-3 until Babel 7 (https://github.com/babel/babel/issues/5117).\nLooking at that issue I can see some other changes which are required to nwb's current Babel config:\n\n[ ] should only be using the es2016 preset if use of a stage-x preset is disabled by user configuration, as the exponentiation operator transform is currently being duplicated.\n[ ] should also use the es2017 preset if use of a stage-x preset is disabled by user config, as stage-3 currently contains everything in es2017. I've asked if duplicated plugins can cause problems in the linked issue.\n\nIf it's not an issue then I agree it would be easier to just manage one preset instead of multiple es2XXX presets.. nwb is now using babel-preset-env, which babel-preset-latest was deprecated in favour of. Looks like using babel-preset-env will cause issues creating minified builds if you configure it for modern browsers, as UglifyJS doesn't currently support ES6.  You'd need to use its harmony branch, as documented here: https://github.com/webpack-contrib/uglifyjs-webpack-plugin. nwb is now using babel-preset-env, as babel-preset-es20XX is deprecated. Tried to repro this with nwb v0.14.1 based on your screenshot, but I couldn't with this directory layout and CSS (being imported from src/index.js):\n\ncss\n@font-face {\n  font-family: 'FontAwesome';\n  src: url('../fonts/fontawesome-webfont.eot?v=4.7.0');\n  src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.7.0') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff2?v=4.7.0') format('woff2'), url('../fonts/fontawesome-webfont.woff?v=4.7.0') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.7.0') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n\nWhat does your directory layout under src/ look like?\nCould you provide a sample of the the CSS file which is trying to reference the font?\nIs hireplace-styles.css being directly imported by a JavaScript module or @import ed from another CSS file?. What does the CSS look like?\n\nThe error message shows ../fonts/, but based on your directory structure the path from hirepalace-styles.css to the fonts should be ./fonts/.. Fixed in v0.15. Thanks!. nwb uses babel-plugin-istanbul for coverage instrumentation - being able to manually specify files in your own project to exclude from coverage just isn't a use case I'd accounted for, so I'd need to make that configurable.\nOut of curiousity, what's in your polyfills.js? If you could load polyfills from a dependency, they wouldn't show up, as node_modules/ is excluded by default.. On second thoughts, karma.testDirs config should be usable for what you want to do, having just looked at how it's used.\nIt's named as if it must specify directories, but it doesn't have to - if provided, this config is only ever used to configure babel-plugin-istanbul's exclude option.\nTry this in nwb.config.js, substituting the correct path:\njs\nkarma: {\n  testDirs: ['src/path/to/polyfills.js']\n}. That's connect-history-api-fallback's dot rule, which is on by default. This could be disabled or made configurable if needs be.. Closing this in favour of #304 which has details on how it will be configurable in v0.17. Oof, that's a bug.\nWe're calling getUserConfig() to determine which type of project the middleware is being used in without properly mocking out the arguments object.. Fixed in v0.14.2.. cssPreprocessors is for implementing your own plugin module, you don't need to use it, just install nwb-sass;\nsh\nnpm install --save-dev nwb-sass\nPut config for it under a sass prop under webpack.loaders in nwb.config.js:\njs\nmodule.exports = {\n  webpack: {\n    loaders: {\n      sass: {\n        config: {\n          data: '@import \"_variables\"',\n          includePaths: [path.resolve(__dirname, \"src/styles\")]\n        }\n      }\n    }\n  }\n}. Fixed in v0.14.3 - thanks!. Thanks, will merge this when I have time to cut a bugfix release. New stylesheet docs have examples and try to spell it out. Looks like this is because we can no longer provide CommonJS interop when using ES modules in Webpack 2.\nThis change in index.js should fix it, will update the app skeleton template with it now:\ndiff\n function init() {\n-  let App = require('./App')\n+  let App = require('./App').default\n   root = render(<App/>, document.querySelector('#app'), root)\n }. Fixed in v0.15.3 - thanks for the bug report!. It's already configured for Preact apps by default so you can reuse existing React components without any config, so try removing your webpack.aliases config.\nThis default setup is currently only mentioned in the Quick Development guide, so I need to document it for nwb too.\nThe error is caused by preact-compat having a module entry in its package.json which results in Webpack 2 pulling in some untranspiled ES6 which UglifyJS can't handle (see #244).\n. Thanks, and enjoy \ud83d\ude0b \nClosing in favour of #247, which contains actionable outcomes from this issue - I hadn't thought to add a config hint for this case, which could have told you this was already handled when you configured these aliases yourself.. You should also change the commands being run in package.json scripts, replacing inferno with react - the config generated for the nwb serve-inferno-app is unsuitable for React apps.\nIf you want to do quick experiments switching between React, Inferno and Preact I'd recommend using the global react, inferno and preact commands instead - these commands will also handle installing missing core dependencies for you.. That won't work because the config generated for inferno-app will transform JSX into Inferno.createVNode(...) calls rather than React.createElement(...) calls.\ninferno-compat assumes you have some code ready for use in a React app and provides a React-compatible API with an Inferno implementation under the hood.. Not sure how this would have worked in 0.14.x either - could you show your full, modified index.js?\nPresumably the Inferno is not defined error is coming from the Inferno.render() call?\nThis might be related to using a newer version of https://github.com/infernojs/babel-plugin-inferno, which changed how it imports createVNode.. Sorry, I've no idea what's going on there - I'm assuming this is related to something webworkify does?. If you're using webworkify somewhere, it will still do what it's doing without the alias.\nIt looks like it assumes module names won't have double quotes in them, as that's why the error output you posted is invalid:\nmoduleId: \"./node_modules/css-loader/index.js?{\". Looks like this should wait until Babel 7: https://github.com/babel/babel/pull/5442. Is this just for static files which are being imported to be handled by Webpack?\nThis should configure all the default url-loaders appropriately (using the rule ids from here):\njs\nmodule.exports = {\n  webpack: {\n    rules: {\n      graphics: {name: '[name].[ext]'},\n      svg: {name: '[name].[ext]'},\n      jpeg: {name: '[name].[ext]'},\n      fonts: {name: '[name].[ext]'},\n      video: {name: '[name].[ext]'},\n      audio: {name: '[name].[ext]'}\n    }\n  }\n}\nI could also add additional config to allow you  to configure the default url loader settings, which would take care of all of these in one go.. extractText and extra should get you the rest of the way.\njs\nmodule.exports = {\n  webpack: {\n    extractText: {\n      filename: '[name].css'\n    },\n    extra: {\n      output: {\n        filename: '[name].js',\n        chunkFilename: '[name].js'\n      }\n    }\n  }\n}. What's the use-case for needing un-hashed filenames, if you can tell me?\nThis is potentially something which could be controlled by adding new higher-level convenience config if it would be generally useful, e.g.\njs\nmodule.exports = {\n  webpack: {\n    hashFilenames: false\n  }\n}. In production builds:\n\nThe react-prod Babel preset will be used (which contains the react-remove-prop-types transform)\nJS and CSS filenames will have hashes in them\nHashedModuleIdsPlugin (short, hashed version of module path) will be used instead of NamedModulesPlugin (module name === its path) \nOutput will be minified/uglified \n\nThere isn't currently a way to disable use of the react-prod Babel preset for app builds.\nI can add a flag for this if you need to disable it.. TL;DR: sass-pipeline owns the include/exclude config - configure those there:\njs\nmodule.exports = {\n  rules: {\n    'sass-pipeline': {\n      exclude: /sketch-web-components/\n    },\n    'sass-css': {\n      modules: true\n    }\n  }\n}\n\nIt looks like you're trying to configure one of the use-cases I intend to explicitly support in #223 - using CSS modules on only part of a project.\nUnfortunately, you currently only get two rules to configure for CSS by default and two for each style preprocessor plugin you use - one for your app's own styles (sass-pipeline, which has exclude: /node_modules/ by default) and one for styles imported from dependencies (vendor-sass-pipeline, which has include: /node_modules/ by default). Currently you will have to configure one of these to enable CSS modules with appropriate  include/exclude settings and configure the other one's include/exclude settings to handle all other stylesheets.\n\nThis was something which pickled my brain a bit when converting to Webpack 2...\n\nWebpack 2 now has you provide `rules` instead of `loaders`, but when you're only using a single loader, it lets you use shorthand notation which makes the rule is synonymous with the loader, which looks just like it did with Webpack 1.\n\nChaining loaders in Webpack 1 was a hack - you provided a big string with multiple loaders in it. This is no longer the case in Webpack 2, which has first-class support for rules which chain multiple loaders specified using the new `use` connfig, which takes an Array of loaders.\n\nFor style pipelines, you now have 2 truly separate parts - the rule, which owns the `include`/`exclude` config and a list of loader objects which own `loader` + `options` config. Style pipeline rules in nwb are given a `-pipeline` id, `css-pipeline` and `vendor-css-pipeline` are set up by default and style preprocessor plugins get their own pipelines set up - `sass-pipeline` in this case.\n\n. Amazing timing, I literally just ran nwb new to create an app to try to repro this \ud83d\ude39 . It might be worth adding a check that the first argument to nwb serve-* commands is resolvable and having an explicit failure if not.\ne.g. if you do cp -R src/ test/ in a fresh React app, npm start test would work, as test/index.js will be resolved.. This isn't supported at the moment - adding support for replacing the default loader with your own loader or use config seems like a nice way to go, which should make your first attempt using webpack.rules.svg work.\n\nSomething else I've been keeping for when someone asks for config which can't be made declarative is passing the generated config to a function to allow you to manuallymake whichever changes you want. Combined with allowing default rules to be disabled by passing false, this would look like:\njs\nmodule.exports = {\n  webpack: {\n    rules: {\n      svg: false\n    },\n    config(config) {\n      config.module.rules.push({...})\n    }\n  }\n}. On second thoughts you might be able to override the loader config for the default .svg rule, but I'm not sure what Webpack will do with the default options configured for url-loader.\njs\nmodule.exports = {\n  webpack: {\n    rules: {\n      svg: {\n        loader: 'svg-inline-loader?classPrefix!image-webpack-loader'\n      }\n    }\n  }\n}\nI'm still going to add support for replacing loader with your own loader (dropping the default options/using yours instead) or use config, though.. That's a bug right there.\nQuick workaround which will also work after I fix this - add an empty options object to your svg config. The code which moves top-level options into an options object for you (causing this bug, as it's not excluding loader) won't run then.\nI have a bunch of free time coming up in about 7 hours, so will be able to tackle upgrading to use config then. I'm in the middle of a major refactor this might get in the way of, so looking to knock this change out quickly.. The next release will be after #223 lands.. Fixed in v0.16. Released as v0.16.0. Thanks for the PR, but it's been superceded by using webpack-dev-server as of 21f57ba, which now handles setting up proxying when given devServer.proxy config.. Thanks for the PR, this looks good - could you please point this at the next branch instead?. Do you have an example use in mind?\nLooking at its docs, I'm not sure what the use case for confippet within nwb would be - most of the the build config (to provide working baseline config for each command) nwb uses internally and the user config it supports (other than the escape hatches for merging/tweaking webpack config) map directly to specific pieces of configuration generation code which have made toggleable or configurable.. Closing this as there are no plans to use it in nwb for now - it looks more like something I'd use in my own Node.js stuff so thanks for pointing it out.. Thanks for the PR - could you please point this at the next branch instead?. On second thoughts, this should be released soonish if it's affecting CI builds.. Yes, this is something which would be easy to flag off in the appropriate serve command(s) by only including the react-hmre preset if args.hmre isn't false, which would allow you to add a --no-hmre flag to your scripts to opt out.. Yeah, that's buggy -the next release should be coming soon, a fix for that logic will be included in it.. It's done this way to reduce the chance of the same version of nwb installed at different times getting broken or having its behaviour changed by changes in one of the development dependencies listed in its dependencies.\nWe're still at the mercy of transitive dependencies specified using a version range (which is still npm's default behaviour) publishing a broken version- e.g. a patch version change in acorn recently broke webpack and fixed it in another patch version soon after - but it's better than nothing.\nSince nwb is a development dependency, it's ultimately up to users if they want to use npm shrinkwrap or yarn for reproducible builds though.\n(Version ranges are an npm thing, though - semver doesn't specify them). It looks like Flow no longer requires the weird stub file config it needed last time I looked at it (\ud83c\udf89) , so the create-react-app instructions should work for React apps, as the Babel preset for React currently includes Flow plugins:\n\n\nRun npm install --save-dev flow-bin.\nAdd \"flow\": \"flow\" to the scripts section of your package.json.\n2.5. Run npm run flow -- init to create a .flowconfig\nAdd // @flow to any files you want to type check (for example, to src/App.js).\n\n\n\nThe latest release of Babel now includes a separate flow preset - we could also add new babel.flow config to enable use of this preset for all project types.\n\nWe could add a question or flag to the project creation process which would enable adding the extra bit of babel config in nwb.config.js, adding a flow script to package.json when generating it and installing the flow binary.\n\nI was also thinking about what an nwb-flow plugin module could do (handle the flow preset dependency and the flow binary dependency, trigger addition of the new bit of Babel config) but I'm not sure if it's worth it.\n. Are you passing a --copy-files flag when running the build command?\n\nIf you have non-JavaScript files in src/ which you want to be copied over when building, such as CSS files, pass a --copy-files flag.\n\nThe webpack section of the config file is only used when creating a UMD build - the part of the build which creates the es/ and lib/ build is just using Babel's CLI.. Looks like ProvidePlugin is the way to go.. @LukeIvie here's an example project: https://github.com/insin/nwb-examples/tree/master/bootstrap-web-app. The runtime transform doesn't deal with instance methods, this is from its docs:\n\nNOTE: Instance methods such as \"foobar\".includes(\"foo\") will not work since that would require modification of existing builtins (Use babel-polyfill for that).\n\nYou would need handle polyfilling String.prototype.includes() yourself.. As of v0.18.4 you can use a --webpack.debug flag for this. Is there anything interesting in the npm install logs from your build? This looks like some sort of failure to install phantomjs-prebuilt.. Thanks for reporting this - default node_modules/ caching will be removed from the project skeletons in the next release.. https://github.com/insin/nwb/blob/next/docs/FAQ.md#what-does-nwb-stand-for. Try deleting node_modules cache config from your .travis.yml config.\nSee https://github.com/insin/nwb/issues/271#issuecomment-281725990. I can replicate this locally.\nOne of the suggestions in this issue was to use require.context, which made tests run for me locally:\ntests.webpack.js\njs\nvar context = require.context('./tests', true, /\\.test\\.js$/)\ncontext.keys().forEach(context)\nnwb.config.js\nmodule.exports = {\n  // ...\n  karma: {\n    testContext: 'tests.webpack.js'\n  }\n  // ...\n}\nYou could also use webpack.extra config to play around with the value of devtool config when process.env.NODE_ENV === 'test' - nwb uses cheap-module-inline-source-map by default.. Me looking at https://github.com/how-to-react, @stephenwf: \ud83d\ude2e\ud83d\ude2e\ud83d\ude2e\nWould the proposal in https://github.com/insin/nwb/issues/112#issuecomment-346020207 help here?\nOnly just saw your comment above and create-nwb-webpack-config is pretty much what I was thinking of for nwb/config/{serve,build,test}, but I'll refactor the internals where needed to try to make it more pleasant.. I can do something to associate a name with each plugin for config purposes similar to the way webpack loader config works, which should make it easier to flag them off.. Do you mind re-doing these as separate PRs against next without the merge commits?\n--no-html support is now a single line change to src/appConfig.js (plus a line for docs in cli.js and Commands.md next to --no-vendor)\nsrc/createServerWebpackConfig.js is now set up with a hmrURL variable which is ready for providing a full HMR path in.\nYou've already done the work for these, so I'd rather you get the commit credit for them, as you're a first time contributor and I have a bad habit of undermining PRs in the next branch.. What does the generated Webpack config show if you set a DEBUG = nwb environment variable before running?. I've had similar thoughts about nwb exposing a way to run some of the tooling it's already managing dependencies for  - e.g. I have to add and manage Babel and MochadevDependencies to transpile and test server code when I'm using nwb for Express middleware and client building/testing in the same project.\nTo whet the appetite:\nnwb babel run ./scripts/tool --config=./scripts/tool.nwbconfig.js\nnwb babel transpile src/ lib/ --config=server.nwbconfig.js\nnwb mocha something something\nI'd also add support for using babel-preset-env as part of this, as it's what I use for Node.js code.. @coryhouse Sure, here's the react-auto-form demo using its UMD build in a Codepen:\nhttps://codepen.io/jbscript/pen/qmzgoX. Should really add that to the libraries section of the component guide. Thanks for the PRs, aiming to cut a release of whatever's in master on Thursday morning (AEST). Can you provide a repro repo so this is easier to test?\nI use the middleware for hot-reloading development at work with no problems, so a full repo allows me more easily compare a working configuration with a broken one.. A sample of your client app's entry point and how you write components would be useful too, in that case, as nwb is still using (the now-deprecated) https://github.com/gaearon/react-transform-hmr\nKeeping a keen eye on https://github.com/facebookincubator/create-react-app/pull/2304 too, as Dan Abramov has the hot reloading bug again \ud83d\ude38 . Thanks, will have a look. @Racle - it's not patching the component because you're defining render like this:\njs\nrender = () => {\nI don't think React Transform HMR knows how to deal with this, or isn't looking for this way of defining it, as you don't need to bind render to the instance.\nIt works if you define render like this instead:\njs\nrender() {\n\nSomething else I noticed based on a console error - you don't need the <script src=\"index.js\"></script> in your index.html, as HtmlWebpackPlugin handles inserting <script> tags to load the app.\nYou also might not need app.use(express.static('public')) when using nwb's middleware, as CopyPlugin should be serving the contents of public/ from memory when that directory exists.\nI'm totally stealing that // THIS IS POTENTIALLY OK comment for future use, too \ud83d\ude39 . Is there a repo I could use to repro this?. Thanks, looks like need to explicitly check for build errors after running a build instead of relying on Webpack calling back with an error (which must be reserved for genuine build failures, not completion with build errors).. Not enough info to know what you're asking about - could you expand?. Monorepo looks \ud83d\udc4c\nHow painful will it be to call a halt to development at some point to get it rebased against master?\nI've avoided plugin abstractions so far because you don't know if you've messed up until you've really dug into implementation. Will have some time tomorrow to have a proper look.. Moving towards being able to register commands in next instead of just using module names in the filesystem.\nThe build-${type}[-app].js and serve-${type}[-app].js commands are now just calling the same functions and passing a different config module in.. If your tweak to the Webpack config works you're all set. The aliases config won't be going away any time soon and it's a standard Webpack feature.\nSince you have full access to the Webpack config you might even be able to configure it such that you don't need to symlink the common/ dir - e.g. you could tell Webpack to also look specifically in common/ for any modules it can't resolve normally.\nCheck out the example in the resolve.modules docs: https://webpack.js.org/configuration/resolve/#resolve-modules\nDo you think this would be something worth calling out in the docs for anyone looking for a similar setup?. Thanks for the thorough investigation and the repro repo \ud83d\udc4d\nWill drop use of md5-hash in this case, as it looks like Webpack 2 now does what you'd expect with chunk hashes.\nIt also used to be the case that if you just changed some extracted CSS, the chunkhash of JS emitted from the same chunk would also change. I'm not seeing that any more and I can confirm Workaround 1 works for me as for you.. D'oh, I did this separately when I saw the deprecation warnings while updating dependencies - sorry! \ud83d\ude1e . modules (and other loader options) being moved into an options object is intended so you don't have to have another level of nesting in your config to tweak loader options.\nloader was incorrectly being moved into the options object - this has been fixed in the next branch.. See #310. Don't have the time for an ETA \ud83d\ude3c . You could publish your own version of the next branch temporarily:\n```\ngit clone https://github.com/insin/nwb.git\ncd nwb\ngit checkout next\nnpm install\nnpm run build\nset package.json name to @yournpmusername/nwb and version to whatever you want\nnpm publish --access public\n```\nI'd do it but I have limited time for open source and am in the middle of something I want to get finished while I have time today.. This should be fixed in v0.16.0. You couldn't configure this before because nwb was running its own dev server, but as of 21f57ba it's now using webpack-dev-server, which can be configured with top-level devServer config:\njs\nmodule.exports = {\n  devServer: {\n    historyApiFallback: {\n      disableDotRule: true\n    }\n  }\n}\nThis will be fixed when next is merged back into master for release.\n. This should be fixed in v0.17. Should be fixed by 35fe4cf07a, will release a fix this evening. nwb uses https://github.com/kevlened/copy-webpack-plugin to copy the contents of public/ to the output folder, which adds the files to be copied to Webpack's in-memory filesystem, which is what's being served by by webpack-dev-middleware when you run the dev server.\nAs such, anything in public/ should be available under / when running the dev server, so try /my-static-script.js.. I've just spotted that we're not creating the CopyPlugin config for serving the demo, only when building it.\nI can add this to the next branch, which will be almost ready for release when I finish updating outdated dependencies.. I agree that preact-cli should own the global preact command.\nHow about nwb preact [run|build]?. Happy to let copying files yourself as part of your build process be the solution here, as --copy-files is a terrible hack for the unsolved problem of distributing stylesheets.. I also hit this while working on v0.15.8, but the Webpack version bump in the release fixed it for me.\nHave you tried a re-install of your node_modules if you're using npm3? Non-determinism!. Do you have a repo I can use to reproduce this locally?. Every loader involved in handling styles had a major version bump since 0.15.x so I'll trawl the changelogs and issues to see if anything sticks out.. Thanks for the investigation @evilebottnawi. Does anyone have a sample repo I can use to reproduce this?. According to https://github.com/postcss/postcss-loader/issues/258, ident is needed again for postcss config to work.\nnwb no longer adds this as I thought recent versions of Webpack automatically handled passing options properly, but I guess not, as @import url(~@blueprintjs/core/dist/blueprint.css); works once I add an ident to postcss-loader's options.. Fix released in:\n- v0.17.3 (default version) - Webpack 2, works in npm2 if you're stuck on it\n- v0.18.4 (nwb@next) - Webpack 3, updated dependencies, new features, doesn't work in npm2 yet due to Webpack plugin peerDependencies). Nice catch, thanks!. @seanofw  \u2026now :D. The app is running in a browser, so you'll have to use whatever APIs are available there.\nWhat are you trying to do? If there's some data you need in your app from your server's filesystem, you'll have to come up with a way to  bundle it or create an API to access it.. The testing docs are about showing you what nwb's default test setup allows you to do in terms of where you put tests, which libraries are available by default, and how to change the testing setup to your liking via config, but they don't assume you know anything about what you're doing in the tests themselves.\nI'd be happy to add a section up top with suitable resources for that if people have recommendations.\nExample tests and projects for real React example code are shown in the React App guide and React Component guide, which we should link to from the testing docs as a next step. They're also a more suitable place to expand on the different testing approaches once nwb has built-in support for them.\ne.g. I'd like to be able to include Enzyme by default for shallow render testing support (#119), provide a way to enable use of Jest as your main test runner and for snapshot testing (#173) and something else for end-to-end testing (#138). Pass a --copy-files flag in your build script:\n\nIf you have non-JavaScript files in src/ which you want to be copied over when building, such as CSS files, pass a --copy-files flag.\n\n\n[x] Move that somewhere more prominent than the last paragraph here: https://github.com/insin/nwb/blob/master/docs/Commands.md#nwb-build\n[x] Add to Feature Toggles section here: https://github.com/insin/nwb/blob/master/docs/guides/ReactComponents.md#feature-toggles. The <script> in the generated HTML is the Webpack manifest, presumably things going south in the vendor bundle means module ids it's trying to access when the app runs aren't there.\n\nWhich dependencies do you have installed? By default, anything imported from node_modules/ goes into a vendor bundle. Wondering if a build with NODE_ENV=development set in your environment will reveal more.. I just enabled a Node 8 build in one of my projects and npm 5 doesn't seem to have installed dependencies, only devDependencies \ud83d\ude15 \nhttps://travis-ci.org/insin/react-router-form/jobs/239249175. Still seeing the same issue here with Node 8.1.0 / npm 5.0.3 on Travis. Following the issue trail on the PhantomJS issue leads me to npm/npm#16896. You can disable the default rules for these files with this config:\njs\n{\n  webpack: {\n    rules: {\n      graphics: false,\n      jpeg: false,\n      svg: false\n    }\n  }\n}. nwb is switching to Webpack Dev Server for the dev server in the next release, after which you'll be able to use devServer.https = true config for this.. That config works for me, just added this nwb.config.js alongside a standalone React thing I was playing with and built it. Are you including it in your exported config correctly?\n```js\nvar ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin')\nmodule.exports = {\n  webpack: {\n    extra: {\n      plugins: [\n        new ScriptExtHtmlWebpackPlugin({defaultAttribute: 'async'})\n      ]\n    }\n  }\n}\n```\nIn dist/index.html:\nhtml\n<script type=\"text/javascript\" src=\"/app.eec805e3.js\" async></script></body>. Looks like having the wrong version of Webpack can be a cause of this and storybook might be a factor, see this similar issue in create-react-app: facebookincubator/create-react-app#2352. You can add add additional polyfills as dependencies and import them before you kick your app off.\nE.g. if you add core-js as a dependency, adding import 'core-js/fn/array/from' to the top of src/index.js should do the trick. Individual module polyfills are available too.. This is cool - thank you!. v0.17.0 switched to Webpack Dev Server for nwb serve... comands - it looks like its client doesn't like the configuration we pass it when customising the host or port. Fix coming soon.. Fixed in v0.17.1 - thanks for reporting this!. Are you passing a --single flag to serve?. The easiest thing is probably to just import them so webpack will handle them:\njs\n<img src={require('./image.jpg')}/>\nDoes this work for what you're trying to do?\nAlternatively if there are some static files you just want to get served and copied when building, you can create a demo/public/ directory and put them there.. It's not a dumb question if you know about it, seems like we should have a couple of paragraphs in the docs to point out how you use static resources in Webpack/how webpack builds a graph of assets.\nWhich docs did you refer to? There are a couple of places this info should probably go.. Thanks!. Should also add --title support too. The middleware only handles requests which can be serviced by the Webpack development watcher - if your app needs an /index.html fallback in production you'll need to use other middleware for that yourself anyway, so also configure it for local development.. D'oh, nice spot and thanks for the fix PR. This is a bug with not passing along details of your installed nwb-* plugins when creating config for the dev server.\nIf you just want default handling for any imported .less stylesheets you can leave the less property out completely.. Fixed in v0.17.2. CSS Modules are still handled by css-loader for .less stylesheets, so try changing that inner less: {modules: true... to css: {modules: true.... nwb uses ExtractTextPlugin to extract CSS in builds.\nAccording to these issues you can't extract usable styles:\n\nhttps://github.com/webpack-contrib/extract-text-webpack-plugin/issues/25\nhttps://github.com/webpack-contrib/style-loader/issues/49\n\nIf you need to disable use of ExtractTextPlugin in builds, I could add setting webpack.extractText config to false as a way of disabling it.. If it used to work and the stylesheet was in a split chunk you could try webpack.extractText = {allChunks: false} config - the default was changed to true a while back to avoid pulling the style-loader runtime into every build.. hmre is specifically for disabling use of React Transform and reload is used to configure webpack-hot-middleware's client - doing this would involve adding another option to skip using webpack-hot-middleware and its client entirely:\n\nhttps://github.com/insin/nwb/blob/035b93d38241ee0c67bf54c18963011d9b98b513/src/expressMiddleware.js#L79-L81\nhttps://github.com/insin/nwb/blob/035b93d38241ee0c67bf54c18963011d9b98b513/src/createServerWebpackConfig.js#L24-L34\n\nThe following is a bit of a mess at the moment, it was only added to allow Karma tests to disable HMR and can't be configured externally yet. I think we need a single flag to disable all this stuff:\n\nhttps://github.com/insin/nwb/blob/035b93d38241ee0c67bf54c18963011d9b98b513/src/createWebpackConfig.js#L533\nhttps://github.com/insin/nwb/blob/45529647d25e79ad5c6e02aca7eb2100b28d6693/src/createKarmaConfig.js#L204\n\nIt should also flip this to false by default:\n\nhttps://github.com/insin/nwb/blob/f0d445e3adb71650b3728ad87e37815e094caef1/src/devServer.js#L21. nwb currently assumes it's being run from the project root and looks for package.json to check if you have any nwb-* plugins installed.\n\nRunning ./node_modules/.bin/nwb from the root instead should work.. Webpack rule config goes in webpack.rules. Try:\njs\nmodule.exports = {\n  webpack: {\n    rules: {\n      babel: {\n        test: /\\.jsx?/\n      }\n    },\n    extra: {\n      resolve: {\n        extensions: ['.js', 'index.js', '.jsx'],\n      }\n    }\n  },\n  type: 'react-app',\n}. You're welcome!. This could be awkward to implement, as we're just running Babel's CLI: https://github.com/insin/nwb/blob/master/src/moduleBuild.js\nIt'd be easy to add a --watch option and pass that along to the Babel CLI, except:\n\nwe run Babel twice: once for a CommonJS build in lib/ and once for an ES Modules build in es/. If your app is using Webpack, it could be using either of these depending on your config. We also run it synchronously.\nBabel no longer supports passing the path to a .babelrc to use, so we temporarily write it to the root of your component project, which prevents running 2 builds at once.\n\nFor 2., we could try writing the .babelrc to a temporary directory and spawning the Babel CLI process with the temporary directory as its working directory. For this to work we'd have to ensure every path in the .babelrc is absolute. This is already true of the Babel config nwb creates itself, but we'd also have to try to resolve the absolute paths to any custom presets or plugins the user has configured in nwb.config.js.\nOnce 2. is solved, we could support having a --watch option and change moduleBuild.js to spawn both Babel builds in parallel, passing a --watch option to it.. This would need to be configurable at project creation time, as main and module in package.json need to point at lib and es.. The opinions prettier lets you configure are the same ones I removed the original ESLint config to avoid forcing on people, so I think adding it to the templates would make them a bit too opinionated.. https://github.com/insin/nwb/blob/master/docs/FAQ.md#what-does-nwb-stand-for \ud83d\ude39 . Thanks!. Looks like the config gets passed through ok, need to investigate further. It turns out the --open part is handled by Webpack Dev Server's CLI, which we're not using - we'd need to use opn to implement opening the browser ourselves in the onServerStart callback in nwb's src/devServer.js module.. Think we need to roll back to using preact/devtools again.\nIt seems like preact/debug expects {exported preact module}.options.vnode to always be a function, which doesn't seem to be the case in the current distributed version.. Do you have an example of the custom stylesheet rule configuration you tried? webpack.styles configuration is intended for this exact use case.. From having used Angular and angular-cli recently, no, everything which would need to be added would be completely Angular-specific and I'm not interested in writing or maintaining it.. Should revisit this as of #412 - UglifyJsPlugin 1.x has an option to extract license comments to a separate file.. Oh, nice - we're already using fs-extra, so that looks like a good option, indeed.. You can disable uglify by configuring webpack.uglify = false.\nUglification of ES6+ will work in nwb v0.21 (see #412). You can get this output by configuring the default Mocha reporter's maxLogLines:\njs\nmodule.exports = {\n  karma: {\n    extra: {\n      mochaReporter: {\n        maxLogLines: 1\n      }\n    }\n  }\n}\n```\nSTART:\n  Calculator\n    \u00d7 should fail\nFinished in 0.015 secs / 0.001 secs @ 13:01:21 GMT+1000 (E. Australia Standard Time)\nSUMMARY:\n\u221a 0 tests completed\n\u00d7 1 test failed\nFAILED TESTS:\n  Calculator\n    \u00d7 should fail\n      PhantomJS 2.1.1 (Windows 8 0.0.0)\n    Expected true to not exist\n``. Thanks for the PR!. It looks likecss-loader'spostcss-modules-scopedependency updated the major version ofpostcss` it relies on in a minor release:\nhttps://unpkg.com/postcss-modules-scope@1.0.2/package.json\nhttps://unpkg.com/postcss-modules-scope@1.1.0/package.json\ncss-loader has an issue for updating to PostCSS 6, but as per that issue it's also being completely rewritten, so not sure of the appropriate fix for this, or when css-loader changes will land.. Thanks for the PR!. Merged, thanks. Generally, I'd consider any webpack config in nwb.config.js to be there for the demo build (more convenient importing if you have a bunch of modules in src/).\nSince src/ is just getting transpiled directly to es/ and lib/ by Babel I'd avoid depending on any Webpack-specific features which won't be supplied by the consumer of your module (other than handling CSS provided and imported by dependencies, which is reasonable enough for the convenience it brings).\nGetting Babel to rewrite your cleaner requires to relative requires which will work in the published version would be the way to go if you want that, but AFAIK there are a number of different plugins for that and I don't have experience with any of them.. Which versions of all the React packages and Enzyme are you using?\nThe hooking stuff was about the nwb react command trying to handle all render() calls, so shouldn't affect this.\nThis should have been the only relevant change but now that Enzyme 3 is out, it's not even in the Enzyme guide docs I took it from: https://github.com/insin/nwb/commit/5172ccdc2a6b1f4bf11dcb7a98f552ea332c2c3c. No problem, I'm going to back out the change anyway and mark the enzyme compat stuff as deprecated now that Enzyne 3 is out and supports all versions of React.. @quorak check out the React docs on JavaScript Environment Requirements, adding core-js as a dependency and importing the polyfills you want in your entry module is the easiest way to go.\nNot sure what Babel config that is, looks like some of the old Babel 5 stuff \ud83d\ude38 . This is what it's complaining about in react-docgen/dist/utils/getMemberValuePath.js:\n```js\nvar LOOKUP_METHOD = {\n};\n```\nComputed property names are ES6 and the current version of UglifyJS being used by Webpack can't handle ES6, so it's causing the minified build to fail.\nIn the meantime, you can disable the minified build by adding a top-level uglify: false to your nwb.config.js.. Babel isn't run on dependencies, only on your own code.\nThis won't work until either Webpack switches to an ES-compatible version of UglifyJS or we switch to Rollup (#316) for bundling libraries.. Closing as a dupe of #412 - uglifying ES6 will work in nwb v0.21. Currently it assumes single entry, and I haven't really looked into what would be involved for multi-entry.\nPersonally I've never built a multi-entry app with webpack, so I don't have anything to play with - do you have an example of a multi-entry project I could look at?. Thanks!. Not currently, the version of UglifyJS being used by Webpack doesn't support ES6.. Closing as a dupe of #412 - uglifying ES6 will work in nwb v0.21. I haven't built one before so I don't know which config changes would be required.\nI'd be happy to add support for it if you have any pointers.. That's really useful, thanks @brumm \nI might be writing an Electron app soon so I'll see what could potentially be integrated into nwb as a new project type which gives you a starter template and handles the base config differences.. Fixed in 6aea316798200d3764af8a977dcf60c84ed62f49. Webpack 4 is dropping support for Node.js 4: webpack/webpack#6064. webpack-dev-middleware v2 has dropped support for Node.js 4: https://github.com/webpack/webpack-dev-middleware/pull/233. It looks like it's now exporting an ES6 interop-style module instead of exporting MyComponent directly, as it works if I change it to React.createElement(MyComponent.default).\nI don't think the webpack config for this was changed when upgrading to Webpack 2 and beyond, so will look into what changes are needed.\nI've also been considering switching to Rollup for component UMD builds (#316 ) so this might be a good opportunity to investigate properly.\nThanks for the repro repos, made this so easy to investigate!. Looks like we need to add libraryExport: 'default' to the config: https://github.com/webpack/webpack/issues/3929. Thanks @xtuc \ud83d\udc4d \nThe babel-preset-env docs say it won't include the stage-x plugins - I would definitely use babel-preset-env for that instead if it supported passing a stage number.. True, will need to come up with an alternative way to allow specification of individual plugins for nwb.. For component libraries/web modules, we should ensure export extensions are enabled independently of stage presets #364 . Istanbul fix for Babel 7 compat (tests currently generate Unable to process function body node type: ArrowFunctionExpression warning messages): https://github.com/istanbuljs/istanbuljs/pull/125. Branch for Babel 7 work: https://github.com/insin/nwb/tree/babel7\nOnly 2 errors! https://travis-ci.org/insin/nwb/jobs/328192310 (But many things are actually broken when you try, e.g. babel-plugin-react-transform doesn't work any more)\nI think I the first one might be an issue with Babel 7 - if you're extending a builtin (we can remove the hacks in the constructor once this works) and using @babel/preset-env with loose: true config and targeting Node.js 4 as we are, the inheritsLoose helper seems to conflict with the wrapNativeSuper helper:\n```js\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.proto = superClass;\n}\nfunction _wrapNativeSuper(Class) {\n  if (typeof Class !== \"function\") {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  if (typeof _cache !== \"undefined\") {\n    if (_cache.has(Class)) return _cache.get(Class);\n    _cache.set(Class, Wrapper);\n  }\n  function Wrapper() {}\n  Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writeable: true, configurable: true } });\n  return _sPO(Wrapper, _sPO(function Super() {\n    return _construct(Class, arguments, _gPO(this).constructor);\n  }, Class));\n}\n```\nThis works if you change the line which sets the constructor in  inheritsLoose to Object.defineProperty(subClass.prototype, 'constructor', {value: subClass});\nSecond error is testing a new Inferno app, no idea yet:\nModule build failed: TypeError: Property arguments[1] of CallExpression expected node to be of a type [\"Expression\",\"SpreadElement\",\"JSXNamespacedName\"] but instead got \"JSXIdentifier\"\nEdit: this seems to be related to JSX in the entry module?. Found the issue with using react-hot-loader and verified that it works locally when you hard-code a constant instead: https://github.com/gaearon/react-hot-loader/issues/807. Since stage-X presets are being removed, I propose adding a new babel.experimental flag to nwb's config, with settings equivalent to some/quite (default - current stage 2 plugins and above plus export-default-from) and all/very (all experimental plugins).. @babel/plugin-transform-runtime has removed its moduleName option - nwb relied on this for global usage and for quick development commands, as it allowed the plugin to generate imports with the absolute path to the babel-runtime in nwb's dependencies.\nERROR  in ./demo/src/index.js\nModule build failed (from C:/Users/Jonny/repos/nwb/node_modules/babel-loader/lib/index.js):\nError: [BABEL] C:\\Users\\Jonny\\repos\\nwb-manual-testsuite\\react-component\\demo\\src\\index.js: The 'moduleName' option has been removed. @babel/transform-runtime no longer supports arbitrary runtimes. (While processing: \"C:\\\\Users\\\\Jonny\\\\repos\\\\nwb\\\\node_modules\\\\@babel\\\\plugin-transform-runtime\\\\lib\\\\index.js\")\nWith the moduleName option removed, the runtime can no longer be resolved as this dependency is being managed by nwb, away from the working directory and not in require() scope:\nERROR  in ./demo/src/index.js\nModule not found: Error: Can't resolve '@babel/runtime/helpers/esm/extends' in 'C:\\Users\\Jonny\\repos\\nwb-manual-testsuite\\react-component\\demo\\src'. It looks like you might be using an older version of nwb - you shouldn't see these warnings in 0.19.1 and above.\nThe current version is 0.20.0 - try updating your package.json with that and check if there have been any breaking changes which will affect your project since the version you're currently using.. No problem \ud83d\udc4d . Just spotted the version - this was fixed for #290 in v0.17. I've not used React Native, so I don't know what would be involved in that - do you have any examples of components which do this?. There's a --copy-files flag you can use for this - those docs could do with some headers to make the flags stand out more.. Hopefully this is a little easier to find now. You can use karma.extra to add any arbitrary extra stuff to be merged into the generated config.\nI should also add the same config function escape hatch that's available for Webpack config for Karma config, which would allow you to edit the generated config programmatically.. You need to define the full expressionDefinePlugin will replace with the given value, so try 'process.env.REACT_APP_MY_ENV_VAR': JSON.stringify('test') instead. I've created a Webpack feature request for this, as it would be nice for everyone if output.libraryExport automatically exported the default export when a library's entry module is using ES2015 modules instead of having to configure it:\nwebpack/webpack#6097\nFaiing that, alternative courses of action are:\n\nAdd support for some new configuration under the umd config object in nwb.config.js to tell nwb how you're exporting your library (low effort)\ne.g. umd.exports, which can be default or named and is used to set Webpack's output.libraryExport appropriately\ne.g. umd.entry, which allows you to provide a separate entry module for UMD builds which must export default\nAdd comments to src/index.js in the react-component and web-module project templates to document that you must export default or the UMD build won't work by default, with directions to the appropriate configuration options if you'd rather use named exports because default.\nSwitch nwb over to Rollup for UMD builds (high effort, need to investigate Rollup properly and its plugin ecosystem for parity with features available in current Webpack build, such as aliases and defining replacements of certain expressions)\n\nIt's not ideal, but in the meantime you should be able to use webpack.extra or webpack.config() in nwb.config.js to override output.libraryExport when performing a UMD build.. You'll need to use the Hot Module Replacement API to manually accept HMR requests.\njs\nif (module.hot) {\n  module.hot.accept('./someModule', () => {\n    // Do stuff\n  )\n}\nThe web-app template doesn't contain any default HMR code because it doesn't know what your app is going to to (whereas React projects use a Babel plugin to accept HMR requests and Inferno/Preact projects contain some default HMR code to re-render the app).. Thanks!. Yeah, I should have some time to cut one tomorrow.. D'oh, thanks for the PR!. Webpack isn't involved in creating lib/ and es/, we're just running the Babel CLI.\nStyles work as expected in the demo because that's using Webpack (that's also why you'll get a CSS bundle in the umd/ directory, which was accidental!).\nThe only component I've published CSS alongside uses vanilla CSS in a top-level css/ directory and the component module imports it using ../css/, so it works from es/, lib/ and src/ (and depends on the user having a bundler which supports that).\n\nWe can probably make nwb do whatever needs to be done to support publishing compiled stylesheets to npm, but I don't know what the common practices are for that, so any pointers would be welcome.\nWe already have postcss available as a transitive dependency, so nwb could use it to compile stylesheets (and the nwb Sass, Stylus and Less plugins could expose a new method to use them to compile).\nIf we have some solid use cases, we can figure out what needs to be done, so we need answers to things like:\n\nWhere do the source stylesheets live and where do they get compiled to?\nIs compiled CSS imported from JavaScript modules or is including it an exercise for the user?\nShould we bundle all the CSS together or create individual CSS files?\nWhat about common styles for multiple components?\nIs there a Babel plugin which can handle renaming imports from e.g. import './MyComponent.scss' to import './MyComponent.css', assuming that's the output from compiling individial stylesheets?\nDoes Webpack support stylesheets as entry points? It would be nice to use its existing preprocessor -> postcss -> css stack instead of having to wire things together ourselves.\n. Here's a Babel transform which would replace extensions for stylesheet preprocessors with .css:\n\nhttp://astexplorer.net/#/gist/d45675e8ea4a1dd4908a2a9207619470/4101ea12322f2d8dca668c1f85dddc57eabfbb87. To summarise some of the above, is this a desirable outcome for React component/library builds?\n```\n(Where components import same-named stylesheets)\nsrc/             (es|lib)/\n  A.js             A.js\n  A.scss   ==>     A.css\n  B.js             B.js\n  B.scss           B.css\n                 umd/\n                   my-library.js\n                   my-library.css\n                   my-library.min.js\n                   my-library.min.css\n```\nWhat about if it's using CSS modules? https://github.com/michalkvasnicak/babel-plugin-css-modules-transform?. Some of the devServer options are only used by webpack-dev-server's CLI, which nwb isn't using, so you currently you have to pass a --port option to the nwb serve command instead.\ndevServer config is available when nwb is starting the server, so we can can also add support for using devServer.port if it's configured. . Should be later today, there are some dependency updates I want to include as well.. Does this work?\nnpm install -g --unsafe-perm nwb. Do you mean the output in lib/ and es/? Currently, it's expected that if you're using a module in an app, it will handle minification as part of its build process.\nIf/when nwb switches to using Rollup for npm module builds (#316) we may look at adding support for development/production bundles where one of the bundles is minified.. > I read the documentation again and figured out that I had to use the public/ folder, which is pretty nice.\nThis is a bug - we're currently conditionally enabling the CopyPlugin based on the presence of a public/ dir, but it should also be added if the user configured something in webpack.copy.. Webpack's own validation won't even allow publicPath to be null, so this is the right fix.\nThanks for the PR.. @hanford Yes, a PR would be most welcome \ud83d\ude38 . TIL prepare will also run on npm install,  which is a bit surprising:\n\nhttps://docs.npmjs.com/misc/scripts#prepublish-and-prepare\nhttps://github.com/npm/npm/issues/10074\n\nShould we make this prepublishOnly instead?. Nice, thanks!. Created a CSS-importing example here: https://github.com/insin/nwb-examples/tree/master/react-app-antd\nIt should also be possible to use the Less version too using nwb-less and nwb's support for configuring stylesheet preprocessors - will have a look at that when I get some time.. The example has been updated to show both regular CSS and Less with modified vars, plus it's now linked to from the Ant Design docs: https://ant.design/docs/react/use-with-create-react-app#Source-code-and-other-boilerplates. I've added something to the FAQ:\n\nhttps://github.com/insin/nwb/blob/master/docs/FAQ.md#how-can-i-debug-using-vs-code-when-running-an-app-with-nwb\n\nSearching around, there doesn't seem to be a way to debug tests which are being run in PhantomJS via Karma in VS Code yet:\n\nhttps://github.com/iradul/vscode-phantomjs-debug/issues/1. I couldn't get any of the configs which use Karma customLaunchers config with a --remote-debugging-port Chrome flag to work.\n\nThis simpler one which launches a headless browser against the Karma debug.html page works for me, though you have to click reload in the debug toolbar after setting breakpoints and making code changes:\nhttps://stackoverflow.com/a/49176250/6760. This is currently only in master, not released yet. Does that mean CRA 2.0 is running eslint on code imported node_modules/? That doesn't seem right, but I can't see any relevant open issues in the CRA repo.. It looks like projects created with create-react-app@next don't use react-scripts@next (the test project I created used react-scripts@1.1.2), so it doesn't have this change which excludes node_modules from eslint checking.. > The offending code is then in the nwb module es directory, not in node_modules.\nAh, I missed the significance of the monorepo part - is there a way to configure it so CRA uses your-module/src instead of letting webpack hit package.json and picking up the module build from es/? I hadn't considered how this would work in monorepos.. Looks like this was already fixed in v0.22.0\n```sh\n\u03bb nwb v\nv0.22.0\n\u03bb nwb new\nusage: nwb new [inferno-app|preact-app|react-app|react-component|web-app|web-module] \n```. The mini-css-extract-plugin docs have some guidance on this:\nhttps://github.com/webpack-contrib/mini-css-extract-plugin#minimizing-for-production. umd.entry config is only available from v0.23.0 onward, which isn't released yet.\nUpdated the docs to indicate that.. Did you try installing it from npm?\nThe example component in their React docs works for me.\nExample repo: https://github.com/insin/nwb-examples/tree/master/video.js-component\nDemo: https://determined-lumiere-53d9c7.netlify.com/. If the font file is getting copied over ok, what does the generated CSS in your dist/ dir look like?\nCreated an example project to try this and it seemed to work ok (in nwb v0.21.5 and the latest v0.23.0) - am I doing anything different?\nRepo: https://github.com/insin/nwb-examples/tree/master/importing-fonts\nLive version: https://laughing-joliot-0d61f4.netlify.com/. It doesn't look like there's anything wrong with your published package: https://unpkg.com/sticky-react-table/\nFrom the stack trace, it looks like an issue with the ESLint setup in the project you're trying to use it in.. Which version of webpack does npm ls --depth=0 show you?\nThe minimum required version for this plugin is 4.4 and nwb@0.23.0 is using webpack@4.16.5.. Put it in your devDependencies instead.. That's because the default config for webpack.extractCSS puts a contenthash in the filename for production builds and we now always run UMD builds in production mode because Webpack 4's new mode defaults produce code in development mode which isn't suitable for publishing as a UMD build.\nYou can disable the contenthash by overriding the extractCSS.filename config:\njs\nmodule.exports = {\n  webpack: {\n    extractCSS: {\n      filename: '[name].css'\n    }\n  }\n}\n\nNote: creation of extracted CSS files as part of UMD builds has always been a complete accident \ud83d\udc31 . > Do you know what that is about? Is one supposed to be minified and the other not?\n\nIt's the combined output of 2 set of Webpack stats for which checking if there were duplicates was never a consideration.\n\nAlso, is the reason for the default of having a content hash in production but not during dev to allow for browser caching to work out of the box?\n\nYes. this is the the intended use case when using nwb to build apps - the content hash in the filename should only change when the file's contents change.\nThe config for this was just never turned off when using nwb's Webpack config generation to generate config for creating UMD builds.. It'd be easy enough to allow this to be configured by passing an argument - the demo build stuff is a bit hard-codey as it was extracted from my component projects a few years ago and hasn't had much love since.. Closing as https://github.com/insin/nwb/issues/483 has the details. This is similar to #524, as any args config will have been added to serverConfig by this point, so it should only be checking serverConfig at this point - I should be able to fix both at the same time.. I'll be releasing a final Babel 6 version of nwb soon after I have a look through issues from the last few months, just upgraded all the non-Babel dependencies in master \ud83d\udc4d . Does setting webpack.extractCSS config to false do what you want?. Looks like you're right, thanks for the report \ud83d\udc4d . Suggest making the scope an optional part of the same RegExp instead:\n/^(@[^/]+\\/)?nwb-/. ",
    "bebraw": "\nThe biggest problem I foresee is resolution of custom dependencies for karma, webpack and babel both locally and in a CI environment.\n\nI would expect it would be up to the custom testing package to deal with the karma and such bits (about 10 deps or so).\n\nI just haven't given much thought to how each piece could be made customisable yet - suggestions welcome.\n\nI would need two hooks: test and test-unit. Let's say we have nwb.config.js, I would expect it would look something like this:\n``` javascript\nimport nwbKarmaMocha from 'nwb-karma-mocha';\n// the functions are factories so you can customize them further\n// they return execution instructions for nwb\nexport default {\n  test: nwbKarmaMocha.test(),\n  testUnit: nwbKarmaMocha.testUnit()\n};\n// obviously export default nwbKarmaMocha would work\n// but I want to show the basic mapping\n```\nBoth of these cases would need to have control over execution. I expect each hook needs to return your webpack base template so they can customize it.\nI think something like this would be a starting point and it doesn't seem overly complex to me.\n. @insin Cool. I would love to start porting my component boilerplate to use nwb once you feel it's stable enough. I think just getting the test setup to work through nwb might be a small win.\nI imagine I would just push the Karma bits to a package of their own and glue nwb and that together at the boilerplate to keep it maintainable. The problem with my current solution is that even in the best case it's just a snapshot. As a result updating projects is a chore. Ideally you would just bump nwb + related packages and that's it.\n. @insin Ok, cool.\nLet me know when you want me to give it a go. I'm a little busy right now (a couple of weeks) but I'll get to it as they payoff is so good. :+1:\n. Maybe webpack-merge would work for your use case? It allows you to extend configuration (arrays/objects) in a logical manner. I've used this scheme in Antwar and it works quite nicely. It also cuts down special logic from your side altogether once you understand the rule.\n. @insin Good point! Before extending webpack-merge I will want to see a concrete use case to warrant the feature. But let's keep an eye on this. :+1:\n. ",
    "andreypopp": "I'm interested in adding linting to webpack workflow. One of the idea I have and partially implemented (see https://github.com/andreypopp/prefetch-context-webpack-plugin) is to reuse webpack cached/watched fs and run elsint against it.\nThen it would be cool to expose lint diagnostic messages via some interface (CLI , TCP) so IDEs (vim also) could you them.\n. ",
    "mukeshsoni": "ok, thanks! will try it out.\n. ",
    "DenysStoianov": "@insin What about this article? http://www.2ality.com/2015/12/babel6-loose-mode.html\n. ",
    "TimonVS": "What's the progress on this issue? Is there something I can do to contribute?\n. It's really focused on styling, but how would I configure the loaders used for JavaScript? Or SVG?\nI'm not a huge fan of the custom schema, I'd prefer to stay as close to the Webpack schema as possible.. Thanks @insin. In my case I wanted to exclude a linked module (sketch-web-components) from being compiled with CSS Modules option turned on.\nI fixed it with the following config:\njs\nmodule.exports = {\n  webpack: {\n    define: config.globals,\n    rules: {\n      'sass-pipeline': {\n        include: path.resolve(__dirname, 'src')\n      },\n      'vendor-sass-pipeline': {\n        include: /sketch-web-components/\n      },\n      'sass-css': {\n        options: {\n          modules: true\n        }\n      },\n      'sass-postcss': {\n        plugins: postcssPlugins\n      },\n      'vendor-sass-postcss': {\n        plugins: postcssPlugins\n      }\n    }\n  }\n}\nBut I suspect this is some weird issue that happened because I linked the package.. Ugh, I was really tired yesterday so I made a stupid mistake (I ran npm start test instead of npm run test).. I tried that, but instead of overriding the loader it gets merged in the options.\n. Do you have a timeframe for when support will be added? I'm willing to help.. ",
    "anakinjay": "v0.12.0\n. upgrading to latest node fixed it for me.  Sorry, I don't use node haha, my bad. \n. ",
    "VinSpee": "thanks so much! Amazing response time hahaha :-)\n. \ud83d\udc4d\ud83c\udffc\ud83c\udffc\ud83d\udc4d\ud83c\udffc all is well. thanks!\n. ",
    "geowarin": ":+1:\nHow do you imagine codemods would work? A bit like yeoman sub-generators?\nI like the idea of auto updating to the latest version of the code but that sounds like a tricky problem.\nUnless every plugin takes a special care of not updating the same files as the others.\nUpdating index.js, for instance, would probably generate a lot of conflicts.\n. I realised I did not know what a codemod was.\n@vramana just wrote a tutorial on the subject.\nI figured it could be useful to leave that here if other people want to help out but are just as ignorant as I am :smiley: \n. The travis build is broken with npm 2 (you should probably clear the cache) but it works on my machine (tm)\nWith npm 3, the assertions on the node modules present after nwb new failed because of the flat package structure.\nFor some reason, karma no longer likes being run in /tmp so I had to change that.\n. Hi @insin.\nYou are right, the user config part was totally left out by this PR.\nI rebased and modified the getUserConfig function so it works with babel 6.\nEssentially, the stage is now a preset and not a babel property so we have to extract it out of the user config. Cool side-effect: selecting a babel stage with nwb becomes simpler than with vanilla babel :smile: \nI amended the tests for them to reflect a real usage with babel 6. \nTell me what you think.\n. Please clear the travis cache to make the build pass!\n. Hi @cafreeman! This PR was a work in progress.\nIt needs rebasing, I haven't taken care of it for months!\nI guess @insin is keeping it around for the future.\n. Why not supporting the babel-plugin-module-alias out of the box with an alias property?\nalias: {\n   'images': './src/images'\n}\n. The reason I tend to use the babel plugin is that it will also work in tests.\nBefore #41, it was not possible to use the plugin I think. I will give it a shot now.\n. You can change the babel stage in nwb.config.js\n. ",
    "vramana": "@geowarin Thanks for pinging me. \n@insin I agree with your what you are saying. We can build a next-gen ember-cli (with react instead of ember ofc) that truly understands our application structure with the help of codemods.\n. ",
    "ryanflorence": "Yeah, I'd love to just add a file into routes and my app hot reloads with the new route. I'm not sure how to do it w/o some codegen, and I like to avoid codegen ... not prepared to defend that stance though.\n. ",
    "brysgo": "About the codemods, I created a wrapper around jscodeshift that could help of you want to update code in generators. brysgo/jscodemigrate\n. ",
    "tomByrer": "\nattempt to update the code to the latest version when libraries change?\n\nThat's helpful, though sometimes I'd prefer to manually confirm updates, like when there are breaking changes, or want to revert the updates if my tests fail.\n. sw-precache has more stars & forks.\noffline-plugin is more recently & frequently updated.\nPreact CLI uses sw-precache now. but Preact's website uses offline-plugin  \ud83d\ude06 \nAny news adding one of these?. ",
    "cafreeman": "@geowarin Is this still blocked by the travis cache or is there a larger overriding issue? Just ran into the limitations of babel 5 and came looking for this exact issue\n. @insin My issues actually were related to presets, but I ended up figuring out how to tweak the nwb.config file to configure babel 5 appropriately and now everything works great.\n. To be clear, if there's work I can do to help support an existing effort to allow for custom templates, I'm happy to help out if someone can point me in the right direction.\n. ",
    "joshwcomeau": "Just my two cents, but I think babel 5 is a better choice for now. Babel 6 has issues with decorators.\n. Awesome, thanks @insin! Will try that.\n. First, thanks so much for the quick and detailed reply =).\nBewilderingly, it works just fine today. I must've been doing something wrong; I forgot about how definePlugin replaces the term itself, so it makes total sense that other environment variables don't exist.\nAppreciate the support! Closing the issue.\n. Ah, I just realized this is a duplicate of https://github.com/insin/nwb/issues/128. Sorry! \n. Hi @insin,\nThanks for the quick reply :)\nSo yeah, polyfills.js is for ES5/ES6 array methods like find, every, isArray. After opening this issue I realized that indeed I should probably make it its own dependency; that way developers can choose whether to include it or not, if they're only targeting modern browsers.\nIt winds up being really tiny (<1kb gzipped), but I like the idea of my library being as lean as possible, so I'll likely do that :)\nThanks for the tip about testDirs. I saw it, but assumed it worked the same as testFiles. I'll give it a try tonight, and report back on whether it worked or not, for anyone else who runs into a similar issue.. This did indeed solve my problem with no unintended side effects :D\n\nThanks for your quick response (and for working on a solution so quickly! I like karma. excludeFromCoverage).\nClosing, because I no longer need support :). ",
    "tomchentw": "I'd love to see nwb adapt babel@6. Since there are many major packages that only supports babel@6, e.g. babel-plugin-lodash, and babel@6 also provides better interfaces for plugins as well. Let me know if there's anything I can help to make this happen.\n. @insin FYI, today's news, you may want to try out babel@^6.8.0 since it seems to reduce lots of dependencies.\nhttps://github.com/babel/babel/releases/tag/v6.8.0\n. ",
    "slmgc": "@insin not sure if update to babel 6 is a great idea ATM because it has an issue with parent constructor calls in IE < 11, check it out: https://phabricator.babeljs.io/T3041\n. @tomByrer, why it's a bad idea: http://www.jongleberry.com/semver-has-failed-us.html\n. @insin I also experienced this issue with broken babel-runtime, installing v5.8.38 fixed it.\n. @insin react@15.1.0. Yeah, looks like you are right: babel-runtime@5.8.38 fixed the issue with development build, but broke the production build. Adding babel-runtime@5.8.29 to the project fixed the issue, thanks!\n. @insin great! I'll test other implementation with old IE.\n. @insin strangely enough, I can't reproduce this issue anymore. Nevertheless, switching to a more popular EventSource polyfill library seems like a good idea. I've checked it in IE9, works fine.\n. ",
    "kentcdodds": "Great! It does :dancer: \n. ",
    "ericclemmons": "I'm hoping that it could support CSS because Webpack converts CSS to JS, but I need to experiment more.\nDon't worry, we'll get it figured out (@renke or myself).\n. Oh man, I hate that rule.  I disable it wherever I can, since it causes a lot of duplication for it to work correctly between every single project :(\n. @insin I'd love to know a better approach to logging in that plugin!\n. @insin I'd recommend resolving #110 first, although my example worked with Webpack 1, though with slightly more confusion.\n. ",
    "codecov-io": "Current coverage is 93.20%\n\nMerging #36 into master will not affect coverage as of 8d70c8a\n\ndiff\n@@            master    #36   diff @@\n=====================================\n  Files           24     24       \n  Stmts          427    427       \n  Branches         0      0       \n  Methods          0      0       \n=====================================\n  Hit            398    398       \n  Partial          0      0       \n  Missed          29     29\n\nReview entire Coverage Diff as of 8d70c8a\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.49%\nMerging #52 into master will decrease coverage by -0.48% as of 073bfd8\n\ndiff\n@@            master     #52   diff @@\n======================================\n  Files           24      24       \n  Stmts          415     415       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit            390     388     -2\n  Partial          0       0       \n- Missed          25      27     +2\n\nReview entire Coverage Diff as of 073bfd8\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.94%\nMerging #53 into master will decrease coverage by -0.03% as of f9d21ce\n\ndiff\n@@            master     #53   diff @@\n======================================\n  Files           24      24       \n  Stmts          415     413     -2\n  Branches         0       0       \n  Methods          0       0       \n======================================\n- Hit            390     388     -2\n  Partial          0       0       \n  Missed          25      25\n\nReview entire Coverage Diff as of f9d21ce\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.97%\nMerging #64 into master will not affect coverage as of 38b82ff\n\ndiff\n@@            master     #64   diff @@\n======================================\n  Files           24      24       \n  Stmts          415     415       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            390     390       \n  Partial          0       0       \n  Missed          25      25\n\nReview entire Coverage Diff as of 38b82ff\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.06%\nMerging #85 into master will not affect coverage as of aa244c2\n\ndiff\n@@            master     #85   diff @@\n======================================\n  Files           24      24       \n  Stmts          455     455       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            428     428       \n  Partial          0       0       \n  Missed          27      27\n\nReview entire Coverage Diff as of aa244c2\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 94.15%\nMerging #90 into master will not affect coverage as of 82003da\n\ndiff\n@@            master     #90   diff @@\n======================================\n  Files           24      24       \n  Stmts          428     428       \n  Branches         0       0       \n  Methods          0       0       \n======================================\n  Hit            403     403       \n  Partial          0       0       \n  Missed          25      25\n\nReview entire Coverage Diff as of 82003da\nPowered by Codecov. Updated on successful CI builds.\n. ## Current coverage is 93.97%\nMerging #123 into master will not change coverage\n\ndiff\n@@             master       #123   diff @@\n==========================================\n  Files            26         26          \n  Lines           498        498          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            468        468          \n  Misses           30         30          \n  Partials          0          0\n\nPowered by Codecov. Last updated by 241feb2...d987af9\n. ## Current coverage is 94.01%\nNo coverage report found for master at 9d9e886.\nPowered by Codecov. Last updated by 9d9e886...97aefaf\n. ## Current coverage is 90.14% (diff: 100%)\nMerging #143 into next will not change coverage\n\ndiff\n@@               next       #143   diff @@\n==========================================\n  Files            11         11          \n  Lines           487        487          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            439        439          \n  Misses           48         48          \n  Partials          0          0\n\nPowered by Codecov. Last update 20e7c3a...4613d2c\n. ## Current coverage is 84.59% (diff: 76.92%)\nNo coverage report found for next at 5b3042a.\nPowered by Codecov. Last update 5b3042a...00cc18d. ## Current coverage is 82.41% (diff: 100%)\nMerging #169 into master will not change coverage\n\ndiff\n@@             master       #169   diff @@\n==========================================\n  Files            13         13          \n  Lines           688        688          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            567        567          \n  Misses          121        121          \n  Partials          0          0\n\nPowered by Codecov. Last update 9ab8f14...10f2ac3\n. ## Current coverage is 82.41% (diff: 100%)\nMerging #175 into master will not change coverage\n\ndiff\n@@             master       #175   diff @@\n==========================================\n  Files            13         13          \n  Lines           688        688          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            567        567          \n  Misses          121        121          \n  Partials          0          0\n\nPowered by Codecov. Last update 9789f94...5616253\n. ## Current coverage is 82.41% (diff: 100%)\nMerging #184 into master will not change coverage\n\ndiff\n@@             master       #184   diff @@\n==========================================\n  Files            13         13          \n  Lines           688        688          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits            567        567          \n  Misses          121        121          \n  Partials          0          0\n\nPowered by Codecov. Last update 85af7f4...30efd82\n. ## Current coverage is 81.79% (diff: 29.16%)\nMerging #197 into next will decrease coverage by 3.77%\n\ndiff\n@@               next       #197   diff @@\n==========================================\n  Files            13         13          \n  Lines           693        736    +43   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits            593        602     +9   \n- Misses          100        134    +34   \n  Partials          0          0\n\nPowered by Codecov. Last update f453389...17452cc. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a753131). Click here to learn what that means.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #198   +/-\n=========================================\n  Coverage          ?   82.41%         \n=========================================\n  Files             ?       13         \n  Lines             ?      688         \n  Branches          ?        0         \n=========================================\n  Hits              ?      567         \n  Misses            ?      121         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a753131...2059311. Read the comment docs.. \n",
    "jantimon": "Not yet - the main different is the way how the template is compiled.\nIt uses a webpack child compiler with lodash templates instead of blueimp templates.\nAs it uses loaders it is now able to move and hash assets and include partials.\n. ",
    "stevesouth": "Looks fine, although why don't you have it under webpack.\njavascript\nmodule.exports = function(deps) {\n  return {\n    type: 'react-app',\n      webpack: {\n       plugins: [\n          new deps.webpack.ResolverPlugin([MyConventionResolver])\n         ]\n       }\n     }\n  }\n}\n. ",
    "cpsubrian": "I wrote and use a tool similar to nwb for my projects, though its much less configurable (I only need to support my own stack). As an aside, I'm investigating switching to nwb and just contributing any missing features. Less work for me in the long term :)\nAnyhow, for my server-side rendering needs all I do is have my CLI output the babel config as JSON and then I import it in the app like so:\nrequire('babel-register')(\n  JSON.parse(require('child_process').execSync('hipley --babel-register'))\n)\nThe babel config that gets spit out has full absolute paths for all preset/plugins/etc, since my tool is installed globally (just like nwb).\n. To elaborate: that lets me require all my ES6 front-end code into the backend and do the server-side rendering however I like. In my case that means react-router matching on the URl and a custom data-loading layer.\n. ",
    "mikkelwf": "Any update on this..?. Any eta on release..?. Ok.. \ni'm struggling with getting svg's to load inline, it doesn't seem to work with the current setup... got it mostly solves.. \nseems like the starterkit i used had som f'ed up ways of including css.. \n. Sure.\nI used the example from Stylesheets.md and modified it:\n// Custom stylesheet rule configuration\n    styles: {\n      // The 'css' property is used to configure rules for vanilla CSS files\n      css: [\n        // Create a rule which uses CSS modules for CSS imported from src/components\n        {\n          include: path.resolve('src'),\n          // Configuration options for css-loader\n          css: {\n            modules: true,\n            localIdentName: '[name]__[local]___[hash:base64:5]'\n          },\n          postcss: {\n            plugins: [\n              require('postcss-for')(),\n              require('postcss-import')({\n                path: ['src']\n              }),\n              require('postcss-cssnext')(),\n              require('postcss-normalize')()\n            ]\n          }\n        },\n        // Create a catch-all rule for all other CSS stylesheets\n        {\n          exclude: path.resolve('src')\n        }\n      ]\n    },. @Kirk-Wang thanks, but i cannot really see how you load css from /node_modules anywhere.... @insin I managed to hotfix my problem by using inline webpack loaders in my files\nhttps://github.com/css-modules/css-modules/issues/164\nBut it still doesn't solve the main issue :(. I was on react 15.6.1 and enzyme 2.9.1..\nBut i managed to upgrade my setup to react 16 and enzyme 3, and now everything works..\nSo i'm closing this issue since i think it only applies to my (now previous) setup.\nSorry to bother :). Babel 7 is a dependency for new react fragments --> https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html. I read the documentation again and figured out that I had to use the public/ folder, which is pretty nice.\nTo avoid this confusion for other, might I suggest to add a note to the documentation that states that the additional patterns only work if you at least copy one file from the public/ folder?. ",
    "amarandon": "This may be related to https://github.com/webpack/webpack/issues/1194\nEdit: In fact I cannot get any source map to work with Firefox. I tried command-line uglify and babel. I guess I need to dig into https://github.com/mozilla/source-map but the temptation to not bother and just develop with Chrome is quite high :)\n. Yes it's a Firefox issue, talking about it to the developer: https://twitter.com/alex_marandon/status/686514228572864512\nRedbox is a different issue. I suppose it's fine to close this one.\n. ",
    "viniciusbo": "I ended up adding some new build steps to package.json for bundling and editing build step:\njson\n{\n  \"scripts\": {\n    \"bundle:js\": \"babel --presets es2015 --plugins transform-react-jsx src/**/*.js | uglifyjs -c > dist/bundle.js\",\n    \"bundle:css\": \"cleancss src/css/* --skip-rebase > dist/bundle.css\",\n    \"build\": \"nwb build && npm run bundle:js && npm run bundle:css\"\n  }\n}\nWhat do you guys think about that? Is there any better way of doing this?\n. ",
    "oeb25": "I think I'm going to let this rest then. I'm curious tho, why is type required? In my head the optimal setup would look like this\nbash\n$ mkdir app\n$ cd app\n$ echo \"<html><body><script type=\\\"text/javascript\\\" src=\"main.js\"></script></body></html>\" > index.html\n$ echo \"const es6 = in => console.log('here')\" > main.js\n$ nbw\nServer listening on port 3000\nNo config no, and close to no setup! Not sure if that is the goal of the project tho, just sharing my thoughts :)\n. ",
    "yhsiang": "Ok! Thank you for response! :)\n. ",
    "hackingbeauty": "Hey Jonny, thanks for the tip and sorry to waste your time.  I had a .babelrc file one directory above my nwb project.  There was no issue with nwb.  Thank you for helping me out.\n. Hey, I believe this issue is a false alarm.  The npm module I was requiring makes use of the 'net' and 'tls' npm modules which I believe comes by default with Node.  \nHowever, when building front-end npm components, you need to require these modules manually.\nSorry about that.\n. I'm having the same issue.  When publishing a component made with nwb, how do you package styles written in SASS?  Has this been resolved?\n. ",
    "chrisui": "Using webpack the best way to go about this would probably be to use a loader chain such as style!css!sass for your .scss imports which would allow you to simply import and use the styles within your React components in the following manner:\n``` javascript\nimport styles from './button.scss';\nexport default props => \n```\nHere are the respective loaders:\n- style-loader\n- css-loader\n- sass-loader\nThe style-loader will handle hot-loading during development and bundling the outputted styles (these get compiled into your component module) at production build time.\n\nBonus: I would strongly recommend using the modules option  for the css-loader so that you ensure your CSS is correctly scoped and will never clash with external code.\n\nGoing a step further...\nThe most flexibility for an end consumer of your component would be to provide a way to optionally pass different classes to use for various parts of your public component. This would require you to distribute your CSS separately rather than bundled in your component module (you can do this at build time with the extract-text-webpac-plugin) and leave the loading/styling strategy up to the end user. For more on this I'd recommend reading around react-themeable.\n. ",
    "kristojorg": "Did anybody ever figure out how to import a css file in a js file such that it is build by webpack and included in the lib? . +1. ",
    "caseybaggz": "@insin I have a library with multiple components that source their own .css files. I just ran the build and published it to find that it seems the app only pulled in what I have in the main src/index.js file - nothing outside of that. In dev mode, it works like a charm - only production destroys it.\nIs there a way to fix this? We have around 1k downloads thus far and we have a major update that we just posted.\nHere's the repo for you to dig into. All the components are located in src/modules:\nhttps://github.com/whiplashmerch/whiplash-ui-library. Thanks for addressing this so quick @insin \ud83d\udc4d. Can this be closed since we now have the config settings? Seems to work fine for me?\nnwb.config:\ncompat: {\n    enzyme: true\n }. @insin that did the trick. \ud83d\udc4d\nThanks!. Haven't read the docs in a hot minute and didn't realize there was an option for this in weback.config. I'm a n00b.. FYI, I went ahead and update our library since the build works fine but Travis is just giving us a failing pill due to this issue. :(. @insin unfortunately, it's not a Travis problem as the test's fail to run locally. Additionally, we use yarn vs. npm so we aren't caching the node_modules in our .travis.yml.\nI have cleaned both the yarn and npm cache and it's still failing to run (locally).. @insin I went ahead and deleted node_modules and re-installed everything, now I'm getting this locally and on Travis:\nSTART:\n(node:2478) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\n<--- Last few GCs --->\n[2478:0x2d94ad0]    37785 ms: Mark-sweep 1385.2 (1448.1) -> 1384.7 (1457.6) MB, 133.3 / 0.0 ms  allocation failure GC in old space requested\n[2478:0x2d94ad0]    37905 ms: Mark-sweep 1384.7 (1457.6) -> 1384.7 (1458.1) MB, 112.2 / 0.0 ms  allocation failure GC in old space requested\n[2478:0x2d94ad0]    38069 ms: Mark-sweep 1384.7 (1458.1) -> 1384.7 (1431.1) MB, 151.9 / 0.0 ms  last resort \n[2478:0x2d94ad0]    38264 ms: Mark-sweep 1384.7 (1431.1) -> 1384.7 (1423.1) MB, 194.7 / 0.0 ms  last resort \n<--- JS stacktrace --->\n==== JS stack trace =========================================\nSecurity context: 0x2a9f2e226729 <JS Object>\n    0: builtin exit frame: parse(this=0x2a9f2e21a859 <a JSON with map 0x2a99053d9>,0x3374bb902201 <Very long string[2632208]>)\n    1: sourceMapData [/home/travis/build/whiplashmerch/whiplash-ui-library/node_modules/karma-sourcemap-loader/index.js:12] [pc=0x29e18a12f76](this=0x239521697d61 <JS Global Object>,data=0x3374bb902201 <Very long string[2632208]>)\n    2: inlineMap [/home/travis/build/w...\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n 1: node::Abort() [node]\n 2: 0x12b288c [node]\n 3: v8::Utils::ReportOOMFailure(char const*, bool) [node]\n 4: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [node]\n 5: v8::internal::Factory::NewRawOneByteString(int, v8::internal::PretenureFlag) [node]\n 6: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n 7: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n 8: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n 9: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n10: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n11: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n12: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n13: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n14: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n15: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n16: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::SlowScanJsonString<v8::internal::SeqOneByteString, unsigned char>(v8::internal::Handle<v8::internal::String>, int, int) [node]\n17: v8::internal::Handle<v8::internal::String> v8::internal::JsonParser<false>::ScanJsonString<false>() [node]\n18: v8::internal::JsonParser<false>::ParseJsonValue() [node]\n19: v8::internal::JsonParser<false>::ParseJsonArray() [node]\n20: v8::internal::JsonParser<false>::ParseJsonValue() [node]\n21: v8::internal::JsonParser<false>::ParseJsonObject() [node]\n22: v8::internal::JsonParser<false>::ParseJsonValue() [node]\n23: v8::internal::JsonParser<false>::ParseJson() [node]\n24: v8::internal::Builtin_JsonParse(int, v8::internal::Object**, v8::internal::Isolate*) [node]\n25: 0x29e16884167\nAborted (core dumped)\nerror Command failed with exit code 134.. You can find the code relevant to this issue in our current update-travis-yml branch as well:\nhttps://github.com/whiplashmerch/whiplash-ui-library/tree/update-travis-yml. @insin adding in the test.webpack.js config worked! Thanks for the help brotha. \ud83d\udc4d. ",
    "xijo": "@caseybaggz Did you solve this issue? I'm attempting to build a similar UI lib, but I can't get the style include working. I added the whiplash ui lib, but the styles are missing as well. How do you use it in production?. ",
    "hwrod": "My solution was to use node-sass-chokidar + npm-run-all instead of nwb-sass. \nI put my SCSS in /src/styles/src, and updated my package.json to automatically generate importable .css files:\n\"scripts\": {\n    \"start\": \"npm-run-all -p watch-css start-js\",\n    \"start-js\": \"nwb serve-react-demo\",\n    \"build\": \"npm-run-all build-css build-js\",\n    \"build-css\": \"node-sass-chokidar src/styles/src -o src/styles\",\n    \"build-js\": \"nwb build-react-component --copy-files\",\n    \"watch-css\": \"npm run build-css && node-sass-chokidar src/styles/src -o src/styles --watch --recursive\",\n  },\n  \"devDependencies\": {\n    \"node-sass-chokidar\": \"^0.0.3\",\n    \"npm-run-all\": \"^4.1.2\",\n    \"nwb\": \"0.21.x\",\n    \"react\": \"^16.2.0\",\n    \"react-dom\": \"^16.2.0\",\n  },\nSimply run yarn start or yarn build as normal. \nYou can now import CSS files directly with no hassle, even though you just edit the SCSS files:\n// Spinner.js\nimport React from 'react'\nimport styles from './styles/spinner.css' // spinner.css available in ES/lib/UMD builds!. @LukeIvie See my solution at https://github.com/insin/nwb/issues/58#issuecomment-359526389. ",
    "sotojuan": "Got it, it was just a suggestion. I'm working on a toy project and using nwb and I just have 'react-app' on mine so I thought it'd be nice to just put that in package.json.\n. ",
    "brumm": "Ah, so close. Thank you!\n. You seem to have a .babelrc file at ~/Dropbox/Sandbox/.babelrc, containing a presets key, which is new to babel 6 and not recognized by babel 5.\n. Dang, I should probably have spotted this myself. Thanks for pointing me in the right direction!\n\nNot that it seems to make a difference in this case, but is the extra target config value valid?\n\nYeah, it's just not documented (yet?)\nhttps://github.com/webpack/webpack/blob/314c897682b556845fea36d329de8016d1740900/lib/WebpackOptionsApply.js#L154\n. Awesome! I tried to do this via the individual options mangle: false and compress: false but that didn't work.\n. I'm having the same problem and output as @sgentile on v0.12.2 when running the server via nwb serve.\nProduction builds are working fine.\n. @reitmaster maybe this can help in the meantime: https://github.com/brumm/nwb-electron-starter. Hey @insin, I just did my semi-regular round of updates: https://github.com/brumm/nwb-electron-starter/commit/52a44341943edca245cd046a0847fca0d814f35b. ",
    "jvitela": "In my case it worked with 'vendor-sass-css':\nnwb.config.js:\nmodule.exports = {\n  type: 'react-app',\n  webpack: {\n    loaders: {\n      'vendor-sass-css': {\n        modules: true,\n        localIdentName: '[hash:base64:5]'\n      }\n    }\n  }\n}\n. ",
    "clauderic": "Is this still up to date? I've tried a few different ids (sass, sass-css, sass-style, etc.) but can't seem to get it to work. In case this helps someone else landing here, here's how I got it to work:\n./jest.transform.js\njs\nmodule.exports = require('babel-jest').createTransformer({\n  presets: ['es2015', 'react', 'stage-1'], // or whatever you need\n});\n\"jest\" entry in package.json:\n\"transform\": {\n  \"^.+\\\\.js$\": \"<rootDir>/jest.transform.js\"\n}. ",
    "bharatari": "This project has since been upgraded to Webpack 2 so make sure you're using the new Webpack 2 configuration format: webpack.loaders has been renamed to webpack.rules. Also, make sure you have nwb-sass installed in your project.\n```\nmodule.exports = {\n  webpack: {\n    rules: {\n      'sass-css': {\n        modules: true,\n        localIdentName:  '[hash:base64:5]'\n      },\n    }\n  }\n}\n```. ",
    "dmitriz": "Thanks, I'm really surprised it looked up the tree, given the answers from one of babel's maintainers: https://www.reddit.com/r/javascript/comments/40pag0/the_sad_state_of_entitled_web_developers/cyw9hi9\nSeems to work now but still a bunch of files not found inside build folder that was never created.\n. ",
    "dtinth": "This is what I did for redux-send.\nnpm install --save-dev gulp gulp-gh-pages\nNo gulpfile involved! Just a one liner shell script:\njson\n  \"scripts\": {\n    \"gh-pages\": \"node -e \\\"require('gulp').src('demo/dist/**/*').pipe(require('gulp-gh-pages')())\\\"\"\n  },\n. Happy new year! :D. ",
    "novascreen": "i just tried this, but wanted to see if i could find a way that doesn't rely on gulp\nfor me this worked:\nnpm install --save-dev gh-pages\nAnd in package.json:\n\"scripts\": {\n  \"deploy\": \"gh-pages -d demo/dist\"\n}\nI could take a stab at a PR for this if you're interested. I just found your project yesterday and i really enjoyed creating my first React component with it :+1: \nI guess this could be another question after the jsNext question? If you would add this i'm assuming the default should be no?\n. here is what i did:\n- create a styles.css in my demo/src folder\n- wrote my global styles like this:\ncss\n  :global body {\n    font-family: Arial;\n  }\n- wrote my classes as usual:\ncss\n  .demo { color: green }\n- imported styles in index.js:\njsx\n  import styles from './styles.css'\n- added classes to JSX:\njsx\n  <div className={styles.demo}>Hello Demo</div>\nhope that helps a bit\n. @jorrit yes, modules need to be enabled in the config:\nhttps://github.com/novascreen/react-columns/blob/master/nwb.config.js. ",
    "revolunet": "would be great to have @novascreen solution in the default template\n. The gh-pages can take up to 10 minutes to update.\nLooks like the transitions are there too now. this is what i have atm : \ncss\n.rating .rating-icon{cursor:pointer;position:relative;display:inline-block}.rating.disabled{opacity:.5}.font-size-0{font-size:0!important}.font-size-0-5{font-size:.5rem!important}.font-size-1{font-size:1rem!important}.font-size-1-5{font-size:1.5rem!important}.font-size-2{font-size:2rem!important}.font-size-2-5{font-size:2.5rem!important}.font-size-3{font-size:3rem!important}.font-size-3-5{font-size:3.5rem!important}.font-size-4{font-size:4rem!important}.font-size-4-5{font-size:4.5rem!important}.font-size-5{font-size:5rem!important}.font-size-5-5{font-size:5.5rem!important}.font-size-6{font-size:6rem!important}.font-size-6-5{font-size:6.5rem!important}.font-size-7{font-size:7rem!important}.font-size-7-5{font-size:7.5rem!important}.font-size-8{font-size:8rem!important}.font-size-8-5{font-size:8.5rem!important}.font-size-9{font-size:9rem!important}.font-size-9-5{font-size:9.5rem!important}.font-size-10{font-size:10rem!important}.font-size-10-5{font-size:10.5rem!important}#demo .html-entities-rating{font-size:2rem}#demo .MuiFormControl-root-1{min-width:8em}#demo .rating .rating-icon>span>span{-webkit-transition:color .15s;-o-transition:color .15s;transition:color .15s}#demo .rating .rating-icon .display-icon{-webkit-transition:width 50ms;-o-transition:width 50ms;transition:width 50ms}#demo .rating .rating-icon .background-icon>span{color:#494949}#demo .rating .rating-icon .background-icon.highlight>span{color:#ffd34c}#demo .rating .rating-icon.active .display-icon>span,#demo .rating .rating-icon.half .display-icon>span{color:#db9f33}#demo .rating .rating-icon.highlight .display-icon>span{color:#ffd34c}\n/*# sourceMappingURL=demo.c79dc9cc.css.map*/\nalso, the hash in the filename should prevent any cache issue. Looks like we must not include the plugins key in nwb.config.js.\nWorks for me : \njs\nmodule.exports = {\n  type: 'react-component',\n  npm: {\n    esModules: true,\n    umd: false\n  },\n  webpack: {\n    html: {\n      template: 'src/index.html'\n    }\n  }\n}\nyou can get the default template from https://github.com/insin/nwb/blob/master/templates/webpack-template.html\nnwb v0.12.2\n. This worked for me : \n.babelrc\n{\n  \"presets\": [\"es2015\", \"react\", \"stage-0\"],\n  \"plugins\": [\"transform-class-properties\"]\n}\npackage.json\njson\n\"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"coverage\": \"jest --coverage\",\n    \"coverage:watch\": \"jest --coverage --watch\",\n},\n\"jest\": {\n    \"moduleNameMapper\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)(\\\\?.*)?$\": \"<rootDir>/__mocks__/fileMock.js\",\n      \"\\\\.(css|less)$\": \"identity-obj-proxy\"\n    }\n  }\n__mocks__/fileMock.js\njs\nmodule.exports = 'test-file-stub';\nand i use it with storyshots : \nshots.test.js\njs\nimport initStoryshots from 'storyshots';\ninitStoryshots();\nNow all refs, findDOMNode and such dont work.... Same issue here when running nwb serve-react-demo\n. ",
    "leanne1": "I've written up how to publish to GitHub pages here: https://notesfromthefrontend.wordpress.com/2016/11/16/publish-a-react-nwb-project-to-github-pages/\n. ",
    "tnrich": "@insin has the docs for doing this been published yet? Thanks!. @insin , any movement on this? Is flow useable with nwb currently?. I'd like a top level, out of the box, typescript support option. :) . I'm also hitting this issue with the latest nwb v0.16.3\nThanks for the hard work @insin :)\n. @insin any update on this? None of the newer versions work for me..\nHere is the offending line of css:\n@import url(~@blueprintjs/core/dist/blueprint.css);\n. I think a simple one would be the base nwb setup for a react component plus yarn install @blueprint/core and then in the demo/index.js file have a require of @import url(~@blueprintjs/core/dist/blueprint.css);\n. Thank you!!. Hmm mysteriously that issue seems to have gone away. \nI was able to fix another unrelated issue where the routes weren't showing up by setting React Router to use HashRouter instead of BrowserRouter. Probably because github pages doesn't support sub-routes?\nCheers!. Hey @insin thanks for getting back to me. I implemented your extractCSS option \nmodule.exports = {\n  webpack: {\n    extractCSS: {\n      filename: '[name].css'\n    }\n  }\n}\nand a main.css is now being made. I am just wondering, it appears the UMD build is outputting 2 main.css's with the same name: \n\nDo you know what that is about? Is one supposed to be minified and the other not?. Also, is the reason for the default of having a content hash in production but not during dev to allow for browser caching to work out of the box?\nprocess.env.NODE_ENV === 'production' ?[name].[contenthash:8].css: '[name].css'. Hmm looks like it might just be specific to that specific font, Ubuntu Mono.. I'll look into it more and let you know.. whoops... spelling error! I was trying to load\n/* font-family:  \"Ubunto Mono\"; */\ninstead of:\n/* font-family:  \"Ubuntu Mono\"; */\ncuh-lassic!. Here's the full error message: \nERROR  in ../ve-sequence-utils/lib/index.js\nModule build failed (from ./node_modules/babel-loader/lib/index.js):\nError: Couldn't find preset \"es2015\" relative to directory \"/Users/taoh/Sites/ve-sequence-utils/lib\"\n    at /Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/options/option-manager.js:293:19\n    at Array.map (<anonymous>)\n    at OptionManager.resolvePresets (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/options/option-manager.js:275:20)\n    at OptionManager.mergePresets (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/options/option-manager.js:264:10)\n    at OptionManager.mergeOptions (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/options/option-manager.js:249:14)\n    at OptionManager.init (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\n    at File.initOptions (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/index.js:212:65)\n    at new File (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/file/index.js:135:24)\n    at Pipeline.transform (/Users/taoh/Sites/openVectorEditor/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\n    at transpile (/Users/taoh/Sites/openVectorEditor/node_modules/babel-loader/lib/index.js:50:20)\n    at /Users/taoh/Sites/openVectorEditor/node_modules/babel-loader/lib/fs-cache.js:118:18\n    at ReadFileContext.callback (/Users/taoh/Sites/openVectorEditor/node_modules/babel-loader/lib/fs-cache.js:31:21)\n    at FSReqWrap.readFileAfterOpen [as oncomplete] (fs.js:235:13)\n @ ./demo/src/StandaloneAlignmentDemo.js 31:23-51\n @ ./demo/src/index.js\n @ multi ./node_modules/nwb/polyfills.js (webpack)-dev-server/client?http://localhost:3344/ (webpack)/hot/only-dev-server.js ./demo/src/index.js. ",
    "sconstantinides": "@novascreen's solution works but renaming /demo to /docs might be simpler and more obvious. Or allowing this as a nwb config.. ",
    "RavenHursT": "So this worked.. initially... \nhttps://ravenhurst.github.io/react-flex-rating/\nYou can see my publish-demo script here: https://github.com/RavenHursT/react-flex-rating/blob/master/package.json#L21\nBut now I've made some updates... and while my gh-pages branch reflects those changes after running publish-demo again, the page still doesn't.\nFor example.. \nI have these transitions in the compiled css https://github.com/RavenHursT/react-flex-rating/blob/gh-pages/demo.c79dc9cc.css: \n\nBut the css on the generated GH-page looks like an old version w/o the transitions: https://ravenhurst.github.io/react-flex-rating/demo.c79dc9cc.css\nIs there some kind of caching or something keeping me from seeing the changes? \n. Nope.. I did this yesterday, and the transitions still aren't there... also.. there's a min-width on the dropdowns to keep the labels from wrapping that aren't there either... \ud83e\udd14. Ok.. weird.. you are correct!\nWhat's odd now, is how the classnames on the elements are now totally different!\n\nLocally.. running the demo, the markup looks like this.. the class names are all different.\n\nNo wonder why the css isn't getting applied properly!. @insin is this feature something that can be configured/implemented w/ the current architecture of nwb?  Seems like there's a good amount of people trying to do this w/ components, but not much in the way of answers.... :-/. FYI... changing everything back to default index.* works just fine.\nWould like to have custom filenames, however... That could possibly work... Will that work if I decide to make my demo into a hosted GitHub-page?. ",
    "alx": "Found how to solve this issue by adding webpack.extra inside nwb.config.js after reading the Configuration documentation: https://github.com/insin/nwb/blob/master/docs/Configuration.md#extra-object \nmodule.exports = {\n  ...\n  webpack: {\n    extra: {\n      module: {\n        noParse: /node_modules\\/json-schema\\/lib\\/validate\\.js/\n      },\n      node: {\n        console: true,\n        fs: 'empty',\n        net: 'empty',\n        tls: 'empty'\n      }\n    }\n  }\n}\n. ",
    "cpunion": "Currently I resolved with middleware, I added a http-proxy. Not cleanly.\n. ",
    "CrisLi": "Do we have a better solution for this requirement?  I think a proxy to the API server is a common requirement for development react app.. ",
    "grahamlyus": "@insin I have a working version of this by adding a top-level proxy object to the user config, such as:\nproxy: {\n      enabled: true,\n      path: '/api',\n      options: {\n        target: 'http://localhost:8999',\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    },\nIn devServer.js the proxy path and options are simply passed to the middleware:\nif (proxy && proxy.enabled) {\n    app.use(proxy.path, require('http-proxy-middleware')(proxy.options))\n  }\nI can make a pull request if you think this is a good approach.\nIncidentally, what is your local workflow like when making changes to the nwb package? \nI had to keep commenting out the version check in cli.js, and I don't know if it's because I'm using yarn, but I had to build nwb, clear yarn's cache and remove and reinstall nwb using a file:/path-to-nwb each iteration. There must be a better way :). Added #259. 1 Test fails, but it also fails locally for me when at v0.15.5.\nThanks for the tips on development. I think my pain stems from having nwb local to my project instead of globally, so the alias trick didn't help when running the npm start script for my project for instance. I also tried npm link, but that also was problematic as it still runs in the context of the local nwb package, so I got errors loading autoprefixer in my postcss config.. Done. Glad to help. Thanks for your work!. I added it to my project. I believe the only changes I made were:\npackage.json scripts (my script should probably run build first):\n\"stats:analyzer\": \"webpack-bundle-analyzer dist/stats.json dist\",\npackage.json devDependencies:\n\"stats-webpack-plugin\": \"^0.4.3\",\n    \"webpack-bundle-analyzer\": \"^2.2.3\",\nnwb.config.js webpack plugins:\nplugins.push(new StatsPlugin('stats.json', {chunkModules: true}))\n. @broncha Perhaps BundleAnalyzerPlugin conflicts with StatsPlugin? Personally I prefer to run the stats analysis on an on-demand basis, as my build is already quite long.\nStatsPlugin should output stats.json in the dist folder, unless you have changed it.\nPerhaps you can paste you entire package.json and nwb.config.js if it's still not working. ",
    "13860120868": "Is there any plan to accept #256 to master branch?. Is there any plan to accept this PR into master? We have to use proxy for development.. ",
    "vitkon": "this bit of code caused and issue:\nexport function hasChild(child, component) {\n    const newChildren = React.Children.toArray(child);\nfor (const newchild of newChildren) {\n    if (newchild.type && newchild.type === component) {\n        return true;\n    } else if (component === typeof newchild) {\n        return true;\n    }\n}\nreturn false;\n}\nI refactored it a bit and the issue has gone, hence I closed the issue.\nMight be worth adding polyfill back.\n. ",
    "jfaissolle": "Great ! Thanks a lot !\n. ",
    "bpugh": "Thanks! That works. Sorry for the obvious question. Closing.\n. ",
    "ghost": "Newb?\n\nA term used to describe a inexperienced gamer/person/etc. Unlike a noob, a newb is someone who actually wants to get better.\n. This is great for having external HTML... \nI'm trying to add external css/js files (bootstrap framework FYI) to the template html. seems like it doesn't get picked by nwb.\n\nAny suggestion on how to add css frameworks?\nThanks.\n. With = I'm getting build error... had tried that at first\n`Unexpected token (4:19)\nexport default class extends React.Component {\n  static propTypes = {\n    components: React.PropTypes.array.isRequired,\n    events: React.PropTypes.array.isRequired,\n  } . This can be closed... Babel stage is configurable from nwb.config.js file.\n\ud83d\udcad \n. I installednpm install babel-runtime@5.8.38to my project that is consumingnwband it resolved it.\nCan't we just increase the version innwb?\n. Noticed that, but surprisingly I was experiencing the issue with v5.8.29, sincenwbis using the same version. v5.8.38 (the latest by today) is ok.\n. npm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! phantomjs-prebuilt@2.1.14 install:node install.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the phantomjs-prebuilt@2.1.14 install script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above. I am having this issue when try to install nwb globally. ",
    "Fenntasy": "I was just researching on my own but you're quick :p\nIt doesn't work with v3 of the plugin? I'm not sure how to test it on my own but the match query from the v3:\njavascript\nvar matches = /Cannot resolve module '([@\\w\\/\\.-]+)' in/.exec(err);\nshould work with period (I tested the regex).\n. ",
    "maslianok": "@insin No, I don't.\nOS X El Capitan\nnode@4.2.1\nnpm@3.3.12\nI don't have any global package.\nSteps to reproduce:\nsudo npm install -g nwb // Success\nnwb new react-app datalabs // Success\ncd datalabs // Success\nnwb serve // Error\n. The same error for \nnode@5.8.0\nnpm@3.7.3\n. ",
    "calebmer": "Are there any plans to develop a feature like this?\n. Did you mean static propTypes = {} (with =, not :)?\nDisclaimer: not a core team member.\n. ",
    "ap13p": "Nice! Thanks.\nCan leave this issue opened until the upcoming version?\n. ",
    "coveralls": "\nCoverage remained the same at 94.066% when pulling 22ebbc7de8f163e29e041c457a41d319e96ba885 on supasate:devserver-listen-to-specified-hostname into 87c919dc9294bc436dc760e10decaaf17ac996da on insin:master.\n. \nCoverage remained the same at 94.159% when pulling aa64d00c8f654a783fc3f987016b1bea6ca26ef4 on marcelometal:patch-1 into 5c0671b102e542e384e1ba41b6d64e05be2dfc48 on insin:master.\n. \nCoverage remained the same at 93.976% when pulling d987af9b79c7cbfebeffe280913a9c09fc1c662a on evnbr:master into 241feb209120bae5411c858ec5d88328b82c8d5c on insin:master.\n. \nChanges Unknown when pulling be1024a4f0c2ecae5cf0dfdf2dacf99f59822674 on karlll:patch-1 into * on insin:master*.\n. \nCoverage remained the same at 90.144% when pulling f5e129df8d8fdee09d65630fd6b5f528b38bd490 on gotdibbs:performance-tweak into 20e7c3aa0ba68b5f84ee059a67c54003a8f79bce on insin:next.\n. \nCoverage remained the same at 82.413% when pulling 10f2ac38bff1b4aa7b18f2fa5669e1e1a7853a1d on npmcdn-to-unpkg-bot:npmcdn-to-unpkg into 9ab8f145f2e8035f9db6f03ba5ad8e3d48356ef4 on insin:master.\n. \nCoverage remained the same at 82.413% when pulling 5616253e9caf515851df9bd8aa0fec4ee25dfeac on react-run-component into 9789f9451d9a8bb160cd5877419186116dfd893e on master.\n. \nCoverage remained the same at 82.413% when pulling 30efd820880baf95f5a3368ebf7a13f225756ac1 on dlmr:patch-1 into 85af7f42a738b867584951f53083f3ca5b36c9d4 on insin:master.\n. ",
    "supasate": "Just notice that it's already in issue #50 and is supported in the next branch.\n. ",
    "chprasad": "Thanks. That helps. Will use the upgrade instructions.\n. ",
    "jimniels": "FWIW, I had to specify the demo folder in my config to get this to work (nwb version 0.20.0), i.e.\njs\nmodule.exports = {\n  webpack: {\n    html: {\n      template: 'demo/src/index.html'\n    }\n  }\n}. Thanks for the comments on this. I found myself in a similar situation and used the webpack.config() option to solve my problem.\nHowever, FWIW, from my perspective, a umd.entry file would be ideal, as it would provide me a separate place to define my UMD build.. So after looking at this issue more (and a little insight from @cuth) it appears that my lack of understanding was coming from the fact that the umd/ build was being built by webpack while the es/ and lib/ builds were only using babel.\nA workaround to this that allowed me to make version info available in all src/ files in such a way that it would become static text after all three builds (umd, commonjs, and es) was to use babel-plugin-inline-replace-variables. This allowed me to do:\njs\n// nwb.config.js\nimport packageJSON from \"./package.json\";\nmodule.exports = {\n  babel: {\n      plugins: [\n        [\n          \"inline-replace-variables\",\n          {\n            __VERSION__: packageJSON.version,\n          }\n        ]\n      ]\n    }\n}\nAnd then in any src/ file I could do:\n// MyComponet.js\nrender() {\n  return(\n    <div>{__VERSION__}</div>\n  )\n}\nAfter running nwb run build, this resulted in all three builds having the version number from package.json as static text in the built files, i.e. conceptually something like\n// MyComponet.js\nrender() {\n  return(\n    <div>3.0.4</div>\n  )\n}. ",
    "jorrit": "CSS modules don't work out of the box for me, did you add something to webpack @novascreen ?. ",
    "lachlanjc": "In your index.html file (I would recommend deleting the above configuration and instead putting your template html file at src/index.html, unless you truly need something special), add this code:\nRight before the closing </head> tag:\nhtml\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/css/materialize.min.css\u201d>\nRight before the closing </body>:\nhtml\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js\"></script>\nThat should prevent the /template routing issues and CORS error.\nDoes that help?\n. @insin Thank you SO much! Was totally stuck there. I really appreciate it \ud83d\ude0a\n. @appjitsu Heroku is really not the best place to host an nwb project. nwb produces a set of static files, and Heroku is for apps with dynamic servers on the backend, not static files to run in a browser. Instead, you can push to GitHub Pages, Amazon S3, Firebase Hosting, etc. For example: in one of my projects, I use the gh-pages package and an npm script to deploy my site: https://github.com/lachlanjc/nrafunded/blob/master/package.json#L10\n. ",
    "tofagerl": "Different way to look at it: Where can I find the exact script that gets run through Karma. I.e., the one webpack and babel produce for the tests? \n. ",
    "tomitrescak": "Hi, any progress on this? I would love to have this working. Would be fantastic;) I know there Is a bit more configuration around v3, but totally worth it;)\n. Here is the answer:\njs\nmodule.exports = {\n  babel: {\n    plugins: ['jsx-control-statements']\n  },\n  webpack: {\n    loaders: {\n      babel: {\n        test: /\\.jsx?/\n      }\n    },\n    extra: {\n      resolve: {\n        extensions: ['', '.js', '.jsx', '.json']\n      },\n      node: {\n        process: false\n      }\n    }\n  }\n}\n. I even tried adding the fallback-history api and no luck.\n```\nimport * as historyAPIFallback from 'connect-history-api-fallback';\n...\napp.use(historyAPIFallback()); // still no luck\n```\n. Thanks! Yes moving it before the middleware deifnitely helped.\n. Is there any way I can achieve it now? I've tried to modify my webpack config to reflect the v.3 requirements, but it seem the previous version keeps kicking in.\n. Good news, I'll wait for the release. Currently running webpack-middleware to handle this. The last remaining thing is to include Hot-Reload v.3 and you're gonna have a lot of happy puppies running around ;)\n. What worked for me was changing the devTool to \"source-maps\".\nWhat works is only \"source-map\" (super slow) or \"cheap-source-map\" (a bit faster), or \"eval\" what does not provide too much source mapping.\nAll you need to do is to pass the devTool value to webpack config (sorry I post the whole thing so you get the idea). The source-map-loader is there as I use typescript and it allows me to source-map further to my typescript sourcemaps, so if you are in pure JS you can ignore this.\n``` js\nconst path = require(\"path\");\nmodule.exports = {\n  babel: {\n    plugins: ['jsx-control-statements']\n  },\n  webpack: {\n    hotMiddleware: {\n      reload: true\n    },\n    loaders: {\n      babel: {\n        test: /.jsx?/\n      }\n    },\n    extra: {\n      module: {\n        preLoaders: [\n          { test: /.js$/, loader: \"source-map-loader\", exclude: [/node_modules/]  },\n          { test: /.jsx$/, loader: \"source-map-loader\", exclude: [/node_modules/]  }\n        ]\n      },\n      devtool: 'cheap-source-map', // 'source-map', //cheap-eval-source-map\n      resolve: {\n        extensions: ['', '.js', '.jsx', '.json'],\n        alias: {\n          client: path.resolve(__dirname, 'dist/client'),\n          server: path.resolve(__dirname, 'dist/server'),\n          shared: path.resolve(__dirname, 'dist/shared')\n        }\n      },\n      node: {\n        process: false\n      }\n    }\n  }\n}\n```\n. Try \nwebpack: {\n    extra: {\n      devtool: 'cheap-source-map'\n    },\n    html: {\n      favicon: 'vendors/favicon.ico'\n    }\n  }\n. I can confirm this behaviour. The only way to make sourcemaps work is to turn no \"devtool\": \"source-map\". None of the \"cheap\" methods except for \"eval\" seem to work.\n[EDIT] 'cheap-source-map' seems to work as well.\n. ",
    "codeart1st": "Yeah support for pure components would be really nice. ",
    "scherebedov": "@insin, Thank you!\n. ",
    "BurntCaramel": "Ah great that fixed it! Thanks for your help! And thanks for the great tool!\n. Actually testing this more, it seems nwb clean-app works but npm run clean with \"clean\": \"nwb clean-app\" does not.\n. ",
    "jide": "What's up ? (can't wait !) :). Should this be closed per #159 ?. ",
    "alesdotio": "Sorry for bumping, but has there been any progress on this? Are there any workarounds?. ",
    "developit": "\ud83c\udf82\n. You are a gentleman and a scholar.\n. @insin Sorry for the delay - use preact@beta (currently 5.x), this is fixed there.\n. Ah totally yeah, I need to remove it from optionalDependencies. Will try to tonight. Though I'm likely release preact 5 as the new mainline this week so the problem should go away. \n. @insin Removed optionalDependencies from preact-compat and released as 1.10.0.\n. @insin ws-precache seems fitting here. I've been using OfflinePlugin, but I have been toying with switching to ws-precache since it's easier to extend via sw-toolbox.\nRegarding your JSX pragma import question, I'm always happy to support either import preact from 'preact' and import { h } from 'preact'.  Personally I prefer the latter, since I tend to favor specific imports over property bag imports, but that's just my opinion \ud83d\udc4d \n. Sweet! I should have caught that in the docs!. so scholarly lol. ",
    "arddor": "I guess you misunderstood my question / problem. Maybe an example can clarify it:\n+-- src\n   +-- components\n       +-- button\n            |-- button.js\n            |-- button.scss\n       +-- card\n   +-- sass\nIn my structure button.js imports the style from button.scss with css modules.\nNow I want to share those components private, therefore in which project needed I import that module direct from github. I like to use ES6 with the import statements. To simplify it I thought I could nwb build and get ES5 javascript and either CSS or SCSS files. However I get:\n+-- lib\n   +-- components\n       +-- button\n            |-- button.js\n       +-- card\nAs you see after nwb buildthe scss files are missing and there is also no inline styling (it's still require('button.scss')). \nI see two ways how I could solve my problem:\n- Not build it and import the ES6 code, however it throws errors (I assume because it doesn't understand the ES6 imports and the node_modules is excluded). I therefore tried in the project where I import the code \nbabel: {\n    include: /react-components/\n },\nto also process the ES6 of the module but it gives errors.\n-  Build, but somehow get the scss files along (currently they are removed).\nI would be thankful for help with either of the two possible solutions\n. Ok. How about the first solution? I leave everything as in src/. In a project where I need my react-components I install it from git and  transpile the code in node_modules/react-component. How would you do that in nwb? \nI tried: \nbabel: {\n    include: /node_modules\\/react-components/\n },\nBut I get parse failed Unexpected token in the /src of the project which imports react-components (not in node_modules/react-components)\n. Ok thank you. It still gives an error, but I guess I will eventually figure it out. However what confuses me is that the error is in src and not in node_modules/react-components\nERROR in ./src/index.js\nModule parse failed: /Users/User/WebstormProjects/test/src/index.js Unexpected token (6:7)\nYou may need an appropriate loader to handle this file type.\nSyntaxError: Unexpected token (6:7)\n. It works now thank you\n. ",
    "jswxwxf": "I also want to know how you resolve this issue!!!. I'm using --copy-files option:\nnwb build-react-component --copy-files. ",
    "lukeivie": "@insin are there any new solutions to this problem? I am still trying to figure out how to package styles written in sass/scss to the final build. Thanks man!. @insin I'm a bit new to all of this, how would I go about using ProvidePlugin with NWB to get this set up? I'm having the same problem currently.... @insin thank you so much! That's perfect.. ",
    "ntwcklng": "An awesome alternative for hosting static website is now. You can install it via npm install -g now and simply run npm run build && now /dist inside your project folder. (Example)\nMore information: https://github.com/zeit/now-cli. Do you want to include jest in nwb test --jest or move the dependency directly to the template and run tests via \"test\": \"jest\"?\nFor example:\n__test__/App-test.js:\n```javascript\n// Exclude css and svg from test\njest.mock('../src/react.svg', () => 'react-svg')\njest.mock('../src/App.css', () => 'app-css')\nimport renderer from 'react-test-renderer'\nimport React from 'react'\nimport App from '../src/App'\nconst renderedApp = renderer.create()\ndescribe('Renders without errors', () => {\n  it('Renders correctly', () => {\n    expect(renderedApp.toJSON()).toMatchSnapshot()\n  })\n})\n```\n.babelrc:\njavascript\n{\n  \"presets\": [\"es2015\", \"react\"]\n}\nAnd 4 more modules: jest, react-test-renderer, babel-preset-es2015 and babel-preset-react. @baixiaoji jest.mock removes the specified files from the test pipeline. See: https://facebook.github.io/jest/docs/jest-object.html#jestmockmodulename-factory-options. @insin can i tackle this? I would also refactor the install-app-functions into one generic function and pass the deps via an array. \nhttps://github.com/insin/nwb/blob/master/src/utils.js#L73-L98. Sorry for the messed up commits.... @insin are you still interested in this interactive menu?. Added an install-spinner:\n\n. Thanks Jonny, contributing to this project is so much fun, i really love it!\nOkay, i will dive right into this. New PR: #214 . \n. --> #214 . Maybe this PR is also a good place for #204?. Okay. \nI noticed that src/commands/build-react.js isn't used anywhere. Should we ditch it or make it an alias for build-react-app?. @insin i see you already created a new install function, so this PR is needless. Is there anything else i can help you with?. Okay, i will close this PR for now \ud83d\udc4d . Maybe we should create a new constant for every projectType with a pretty name?. with that, its possible to create projects with spaces inside their names. ",
    "Restuta": "I use this in prod and there is little caveat. Just setting alias won't improve performance, it also should be added to 'noParse' and to make it work with reactDom or Router imports loader has to be used:\n/* tells webpack to skip parsing following libraries\n     requires use of \"import loader\" for certain modules, based on https://github.com/christianalfoni/react-webpack-cookbook/issues/30\n    */\n    noParse: [ pathToReact, pathToReactDom, pathToReactRouter ], \n    loaders: [{\n      test: pathToReactDOM,\n      loader: 'imports'\n    }, {\n      test: pathToReactRouter,\n      loader: 'imports'\n    }, {....\nAlso useful for https://github.com/facebookincubator/create-react-app/issues/164\n. ",
    "taion": "I misread the Chromium issue (https://bugs.chromium.org/p/chromium/issues/detail?id=611328) BTW. It's actually supposedly fixed in Chrome 52, which is the current stable.\n. ",
    "jdalton": "Eventually I'll split babel-plugin-lodash out into a legit generic cherry-pick plugin :)\n. ",
    "gotdibbs": "I'm totally aware this is a debatably trivial change, but wanted to submit a spike just in case you agreed that this approach is the more correct default. I completely understand if you want to decline in favor of the flexibility querySelector offers. So cheers :beers: either way! :)\n. ",
    "loklaan": "I like your reasoning for cli toggles vs config file options.\nThanks for the validation and going ahead to implement it!\n. @insin Ran into that last issue you mentioned. Here is how you can do it.\nhttps://gist.github.com/loklaan/3b4990f0f66a0103f34029829009e417\nVery succinct example with hard imported babel presets, but you get the picture! \ud83d\ude04 \nYou may also be able to use the transform option, but it's been awhile since I've touched this stuff... http://facebook.github.io/jest/docs/configuration.html#transform-object-string-string. I'm keen to chip away at this one. Would be great to grab some scope from you.\nSo from the looks of it, the intended experience goes like:\n\nUser prompt at nwb init, to choose a testing framework (jest/karma)\nnwb will know\nwhat to install\nwhat config to to put in nwb.config.js (if there would be any. ie karma plugins)\nthe files to scaffold for chosen framework\n\nI think this would involve:\n\nImplementing a user prompt.\nI don't think there is currently one in any of the commands. Got a module preference?\nPulling karma out into a plugin, and the same for jest.\nDeciding how to move forward with scaffolding.\n  Do we want to have the karma/jest scaffold templates in nwb, or in the plugins?. @insin Cheers!\n\nGood to know where you're at motivation wise at the moment \u2013 I'll try not to drag you into stuff.\nI've carved out time for this next week, but I could be testing ideas on the weekend too.. @dearfrankg We'll resolve this by sharing the babel config with jest.\nThis coming Friday is devoted to getting Jest into nwb. \ud83d\udca5  Should have something ready to test for the weekend.. @dearfrankg Just re-read your comment - sorry, you were referring to non-code files and I missed that. We'll do something internally, similar to the suggestion made on \"Using Jest with Webpack\" page.. Not this Friday, but Monday*. Hey @baixiaoji you should head over to the Reactiflux community for hands on help with Jest problems.\nEveryone here has been very helpful so far, but it's not on-topic.\nCheers!. Hey just to let everyone know, I can no longer put time into implementing this issue (through #292).\nI don't want this to come off negative to nwb, because it's actually great. So, to be open about the reason...\n\nAwhile ago I started building ontop of nwb for an company-internal tool. It was around the time I picked up this issue to implement Jest as a plugin for nwb. The internal tool now encapsulates other tools, like storybook and jest. It's at a point now where I'm using nwb fill one gap: generating webpack configs. That part is a hack, and it's clearly not what nwb was solely made for. I'll be replacing it soon, which means I won't have any vested interest in nwb.\n\nIf anyone here would like to pick up the issue (I still think it would be very very cool for nwb), then reply in this thread or in #292. I could give some pointers, and insin can get some eyes on whos showing interest.\n\ud83d\udc4d  peace out. It'd be great to move towards a plugin arch for reducing dependencies one might need to run their own nwb instance. :+1: :sparkles:\nSomething that I see might help you manage the growth in plugins / similar code is to put nwb and all the plugins under a single repo and use a tool like lerna to manage the inter-dependencies / publishing. I don't know if you've done this with any other projects before, but from experience it's very liberating to suddenly only have to deal with a single repo in an otherwise well modularised codebase. I can help more on this if you're interested.. Example of the project restructured to monorepo, managed with lerna. Not many changes, since tooling is only really needed for the nwb cli so far and not the plugins which are just configs. If that changes, then the linting and transpile tools would need to be lifted into the root of the project.\nhttps://github.com/loklaan/nwb/tree/monorepo-refactor\nDon't mind if you reject the suggestion - it's unsolicited after all.. Thanks!. @insin Hmm I probably should have opted this into insin:next. My bad.. Dug deeper into the requirements of the dynamic side of a nwb plugin arch. I've updated the PR summary to reflect the requirements, namely the api proposal code example.\n@insin Could I get some feedback if you got some time? I've gathered that you had some ideas about the API from before. It may be a bit involved to give help, sorry, but it'd be goooood before I jump into implementing \ud83d\udca5 . No I get that - early optimisation.\nIt wouldn't be so bad, but it'd likely be cleaner to replay my steps from the beginning with newest master.\n\nMove package into subdir packages/nwb\nCopy the root dir's package.json and lerna.json from this PR, because they have already tackled CI problems afair\nUse lerna to import git histories of the styling plugins\n...I think that's all the steps.\n\n. I'm jumping off of this issue. I'll leave it to insin to close, since it might be valuable for posterity.. Hello!\nYou should be able to override the default webpack rules for style loaders (css-pipeline & vendor-css-pipeline) in nwb.config.js.\nFor reference, here is the code for where the default rules for css are being configured.\nRef counts are likely too niche a case to add as a high level option in the nwb config, sorry, but it's great that you've brought it up for posterity.\nLet me know how it goes! In the meantime, I'll close the issue.. Sorry that you're frustrated, but this should be configurable. We won't be added new flags for nwb-config.js for this case.. I've replied to #300 - hopefully it'll help with overall understanding of how to override existing parts in the rules pipelines.. It looked like you were suggesting adding a custom flag to use css-loader/useable over css-loader.. modules is a loader option for the css-loader. This is how options work for rules in the nwb-config.js - they get treated as options for the loader.\nThere is no option for style-loader; you simply replace it with a different loader.\nReplacing the loader prop in webpack.rules.style with style-loader/useable should have replaced the default style-loader... If that isn't the case, would you mind opening another issue for it? (this is 100% how we should be configuring your case). That's unexpected - loader should be overridable. Could you make another issue for that? We can track progress in there rather than here.. Hey thanks for making the issue.\nThis is already supported, but not implicitly. You've got to set the following in the config:\njs\nmodule.exports = {\n  webpack: {\n    extra: {\n      resolve: { root: \"./src\" }\n    }\n  }\n}\nI personally use aliases for my projects. You may want to look into it.. You're right, this is essentially a bug. I think it should be part of nwb, rather than require the user to define the chrome-launcher as an explicit plugin.\nThanks for going to the effort of making the PR, and the awesome explanation!\nI'm concerned about the 2x instance thing though... Was this always the case, before adding the /Chom/ test?. I went down the same path - doesn't dupe the config, so not sure what would cause it. Anyway, it's not directly related so I won't block this any longer.\nLGTM. @michaelsbradleyjr I'd be great to output a warning when they don't use a valid prefix.\nIf you're to own this issue, I'll be willing to lean on your opinion. Your explanations and reasoning have been great.. @michaelsbradleyjr Wow, nice discovery. I hope it becomes default in upstream karma \ud83d\udc4d .\nWould you mind updating the docs on the master branch? I'll be sure to merge it in asap.. Under the karma intro paragraph with a \"Note:\" prefix, would be great. Thanks for getting confirmation. Resolved by #298. Nice one, thanks for doing that!\nFYI I'll be squashing the commits.. Merge in 7805932. Resolves #297. Hello!\nTypescript is great, but not everyone uses it. It likely won't be added as a high level option in nwb for some time, unless @insin falls for it \u2764\ufe0f \ud83d\ude09 .\nFor now, you should be able to add the typescript loader to nwb.config.js to achieve integration in a project.\nLet me know how it goes. I'll close the issue for now.. Have you tried setting the below?\njs\nmodule.exports = {\n  webpack: {\n    rules: {\n      \"sass-css\": {\n        options: {\n          modules: true\n        }\n      }\n    }\n  }\n}\nHere are the docs for configuring plugins like nwb-sass.. Thanks for going to the effort to make this issue - details are :100:.\nI can't get around to jumping into an issue like this atm, but I'll dump some notes so I can get into it later (or ideally @insin will jump in).\nNotes:\n side effect of changing split chunks isn't being reflected by a changed app bundle hash (it is staying the same, yet hash of split chunks change)\n cache busting is broken because of above\n what are the cons of removing md5-hash (was brought in to initially make cache busting better..)\n does webpack 2 tree shaking even work :\\ ?\nRelated issues for reference:\nwebpack-md5-hash\ncreate-react-app\nwebpack\nrelated nwb issue. @viankakrisna Great point!\nLooks like the tests also need updating though. Could you fix those up?. Affected tests are in tests/commands/build-test.js\nThe tests expect displayName to be part of the compiled code. This check isn't relevant for code that was compiled from Classes. They should be removed.. Looks like tests failed because of eslint.\nBe sure to run npm run test locally to catch stuff like that.. I've tried to replicate, but no bingo - no error.\nThat package is definitely on the public npm registry... are you using a registry mirror / proxy?\nDoes npm info @insin/extract-text-webpack-plugin give you a 404 as well?. @kamarajuPrathi From the paste, it doesn't look like you typed @insin/extract-text-webpack-plugin.\nAlso honestly, I'm not sure how much I can help with this - it is almost definitely a problem with your environment. I'd suggest just trying a bunch of different things. I'll close this later issue today.. Thank's for filing an issue and picking this up!\n@insin If you inspect the 0.15.7 tgz, you'll see that createWebpackConfig.js was built without the correct extract-text dep. Any idea how this could have happened?. Seems to be a non-breaking space in there - it should be removed.\nDon't need to mention that userPolling is not documented well - it isn't directly related to the recommended fix (but I appreciate that you found this not-well documented option! kudos).\nDon't need to mention the macOS version (macOS starts at 10.12 afaik).\n. Reviewed this yesterday - didn't submit the review until today, sorry.. ",
    "kabriel": "Would really like to see this, or at least a guide showing how I could add this via the nwb config.. @insin How would I now run just a linter step? I want to run the linter as part of the CI/CD pipeline so I would want something like the following in my package.json right?\n\"scripts\": {\n    \"lint\": \"nwb lint\"\n}\nOr is there another way? This would need to terminate with a proper error code so the CI pipeline can respond correctly.. +1 I would also like to change the loader used for svg.. Thanks so much for the quick reply! Going to try this out.. ",
    "xuopled": "The PR MoOx/eslint-loader#183 been merged @insin. \nCould we hope a default config with prettier and react plugins?\n.eslintrc\n{\n  \"parser\": \"babel-eslint\",\n  \"plugins\": [\n    \"prettier\",\n    \"react\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"prettier\"\n  ]\n}. I have also a problem with this UglifyJS version with the react-element-to-jsx-string lib. See here\n@insin There is an es6 version of UglifyJS2 on the harmony branch. \nCould you consider use it?\n. It looks promising \ud83d\udc4d . @revolunet Adding a .babelrc does not work with some nwb use cases.\nFor example nwb build-react-component need to write a temporary .babelrc during build so the build crash if you have one.\nThis is what I did:\njest.transform.js\njavascript\nmodule.exports = require('babel-jest').createTransformer({\n  presets: [\"es2015\", \"react\"],\n  plugins: [\"transform-object-rest-spread\"],\n});\njest.config.js\njavascript\n\"transform\": {\n  \"^.+\\\\.js$\": \"<rootDir>/jest.transform.js\"\n},\npackage.json\njson\nscripts\": {\n    \"test\": \"jest --config jest.config.json --no-cache\",\n    \"test:coverage\": \"npm test --coverage\",\n    \"test:watch\": \"npm test --server\",\n}\nSolution found here\n. Install jest-css-modules\nshell\nyarn add jest-css-modules --dev\nAdd it to your jest config:\njs\n  \"moduleNameMapper\": {\n    \"\\\\.(css)$\": \"<rootDir>/node_modules/jest-css-modules\"\n  }\nIt resolves css parsing problems for me. Do you use special config for your jest?. Try to follow the documentation:\nhttp://facebook.github.io/jest/docs/webpack.html. If you use css modules, maybe this issue can help you: https://github.com/facebook/jest/issues/1220. Instead of define lint-staged config in package.json, you can define a .lintstagedrc with:\n{\n  \"*.js\": [\n    \"prettier --no-bracket-spacing --no-semi --trailing-comma=es5 --write\",\n    \"git add\"\n  ]\n}. Sorry, duplicate with https://github.com/insin/nwb/issues/67. Ok my bad, thank you very much for answer and sorry for this issue. ",
    "walliski": "@insin Is there any progress on this matter? I agree with you that some kind of linting would be nice to have, if not to check style, to only detect common pitfalls in the code.. ",
    "SpaceK33z": "This may also be a good point to update webpack-dev-middleware to the latest version.\n. ",
    "bjrmatos": "logs are configurable in webpack-dev-middleware but not exposed to user configuration right?\n. ",
    "jstralko": "Hello Tom, \nI'm trying to get webpack to resolve jsx when building the bundle file but getting the following erorr when running:\nnwb serve --reload\nModule build failed: ReferenceError: Unknown plugin \"jsx-control-statements\" specified in \"base\" at 3, attempted to resolve relative to \"/Volumes/Source/TheOutlaws/ui/neo/src\"\n    at /Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/options/option-manager.js:177:17\n    at Array.map (native)\n    at Function.normalisePlugins (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/options/option-manager.js:153:20)\n    at OptionManager.mergeOptions (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/options/option-manager.js:245:36)\n    at OptionManager.init (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/options/option-manager.js:383:12)\n    at File.initOptions (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/index.js:223:65)\n    at new File (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/file/index.js:140:24)\n    at Pipeline.transform (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\n    at transpile (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-loader/index.js:14:22)\n    at /Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-loader/lib/fs-cache.js:145:18\n    at ReadFileContext.callback (/Volumes/Source/TheOutlaws/ui/neo/node_modules/nwb/node_modules/babel-loader/lib/fs-cache.js:28:23)\n    at FSReqWrap.readFileAfterOpen [as oncomplete] (fs.js:324:13)\n @ multi main\nAm I missing a dependency or doing something wrong.  Here is my full nwb.config.js file:\nmodule.exports = {\n  type: 'react-app',\n  babel: {\n      plugins: ['jsx-control-statements']\n  },\n  webpack: {\n    loaders: {\n      babel: {\n        test: /\\.jsx?/\n      }\n    },\n    extra: {\n      devtool: '#inline-source-map',\n      resolve: {\n        extensions: ['', '.js', '.jsx']\n      },\n      node: {\n        process: false\n      }\n    }\n  }\n}. Thanks for the help.  This is exactly what I was looking for.  Thank you for all your work on nwb.. Thank you very much!. ",
    "kmamykin": "AWS seems to have added webpack support recently\nhttps://github.com/aws/aws-sdk-js/blob/ee4148330a38d51f7806b7e014b11c9c0be3a5c5/CHANGELOG.md#260\n. ",
    "vpezeshkian": "Yes that's right, I created new component just to test that and you are right...\nBut for my components it still does that. I removed es6 and lib and rebuild it again.\njavascript\n  \"devDependencies\": {\n    \"nwb\": \"0.12.x\",\n    \"react\": \"15.3.x\",\n    \"react-dom\": \"15.3.x\"\n  },\nThis is what mine outputs\n``` javascript\n'use strict';\nvar _interopRequire = require('babel-runtime/helpers/interop-require')['default'];\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _myModule = require('./my-module');\nexports.Workspace = _interopRequire(_myModule);\n``\n. My bad,nwb buildis using globally installednwbwhich was on version0.11.\nUpgraded and issue got fixed.\n. any progress here?nwb serveandnpm startboth don't work for me\n. Since I use nwb react project , can I put that config innwb.config.js` ?\nUpdate\nI have the following webpack config in nwb.config but still not working:\njavascript\n  webpack: {\n    devtool: 'cheap-source-map',\n    html: {\n      favicon: 'vendors/favicon.ico'\n    }\n  }\n. Yes I have customized materialized js, so I guess npm module wouldn't be option for that.\nSince I'm putting js libs in /public/js might as well put the css there /public/css.\nThanks. \n. I have faced this issue today and I did some debugging, it turns out \"for me\" that rimraf does not handle paths with spaces...\n. Yes exactly, the HLS stream  is transcoded differently, ids vs string.\nSo is there any way to tackle this? HLS videos can't be played if using nwb?. IMO delivered components must be in complete form and users must not do any extra work to use them, nor they have to have \"appropriate\" environment to use them.\nI was thinking to copy statics to es and lib... I'd like to be able to use Copy Webpack Plugin but it seems like it's being discarded during build process...\njavascript\nextra: {\n      devtool: 'source-map',\n      plugins: [\n        new CopyWebpackPlugin([\n          { from: 'src/images', to: 'es/images' },\n          { from: 'src/images', to: 'lib/images' }\n        ])\n      ]\n    }\ncan you help me set up this plugin and use it in build ?\nThanks. . After copying static images to es and lib dist folders, I am receiving new error from gulp and/or browserify.\njavascript\nevents.js:154\n      throw er; // Unhandled 'error' event\n      ^\nSyntaxError: Unexpected character '\ufffd'\nIt seems like webpack and browserify really can't be used in conjunction.. One thing I noticed just now which is not good is that modules are required with absolute path with ./node_modules/nwb/lib/bin/nwb.js build and also ./node_modules/nwb/lib/bin/nwb.js build --set-env-NODE_ENV=production\n```javascript\nvar _extends2 = require('/Users/{my-user-name}/projects/{my-project}/node_modules/babel-runtime/helpers/extends');\nvar _extends3 = _interopRequireDefault(_extends2);\nvar _classCallCheck2 = require('/Users/{my-user-name}/projects/{my-project}/node_modules/babel-runtime/helpers/classCallCheck');\nAnd more...\n```\nNotice that I removed global nwb and running the command from node_modules, is that the correct way of running if there is no global nwb installed?. Yea, this is a bug I believe in 0.13.x. \nSo I decided to try one more time with globally installed nwb, now the output is pointing to where global nwb is installed\njavascript\nvar _extends2 = require('/usr/local/lib/node_modules/nwb/node_modules/babel-runtime/helpers/extends');\nvar _extends3 = _interopRequireDefault(_extends2);\nvar _classCallCheck2 = require('/usr/local/lib/node_modules/nwb/node_modules/babel-runtime/helpers/classCallCheck');\nAnd more...\nEDIT\nYea, now I'm sure... reverted back to 0.12.2 and it's producing the correct code.\njavascript\nvar _extends2 = require('babel-runtime/helpers/extends');\nvar _extends3 = _interopRequireDefault(_extends2);\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\nAnd more...\nand also Jenkins build was successful too.\nThanks.. Yoohoo, yes, this new release v0.13.6 seems to fix the issue. but fyi I'm pasting my nwb config, this project is a react component which I inject in other projects as dependency...\njavascript\nmodule.exports = {\n  type: 'react-component',\n  babel: {\n    stage: 0,\n    runtime: true\n  },\n  npm: {\n    esModules: true,\n    jsNext: true,\n    global: '',\n    externals: {\n      'react': 'React'\n    },\n    umd: false\n  },\n  webpack: {\n    aliases: {\n      'webworkify': 'webworkify-nwb'\n    },\n    extra: {\n      devtool: 'source-map'\n    },\n    html: {\n      favicon: 'vendors/favicon.ico'\n    }\n  }\n}. I removed that alias and was still getting the blob error. \nI removed import './main.css' from component.js and it started to work...\n. Good Sir, thanks for getting back to me.\nOne of those points you mentioned breaks my react module which uses videojs-contrib-hls. I'm suspecting more in 3-rd point.  HashedModuleIdsPlugin vs NamedModulesPlugin. I suggest making them consistent as some third party plugins/libraries break when building for prod...  or to have flag for each one. \nThere is a thread going on in videojs-contrib-hls that in it we have raised this issue, the issue is basically to support webpack along with browserify. \n. ",
    "equinusocio": "Thanks!\n. ",
    "malixsys": "loaders: {\n      'sass-css': {\n        modules: true,\n        localIdentName: '[name]__[local]__[hash:base64:5]'\n      }\n    }. ",
    "petehouston": "any progress on this?\n. ",
    "rakannimer": "For future reference, adding jest to a nwb app is straightforward. Check out this gist for a walkthrough.\nI could add to docs until I or someone here has time to submit PR ?. ",
    "dearfrankg": "@loklaan update...\nI used clauderic's method to get Jest working\nconfigure package.json with:\n\"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"coverage\": \"jest --coverage\",\n    \"coverage:watch\": \"jest --coverage --watch\"\none problem encountered is:\n\nthe jest.transform.js file is configured for minimal features.   It does not support importing .css, .svg, etc.\n\n. ",
    "SammyIsra": "Looking forward for Jest on nwb! \nIn the meantime, anyone has an example of how the setup with Jest would look like? Or a step by step on what to do, and why? I haven't done much with Jest before, a bit of this is going over my head. . I ended up circumventing this issue by having the following line in the Travis YAML file:\nbefore_install:\n  - npm install nwb\nTo make sure it is installed before it is needed.. I was not, I just tried that and it worked. Thank you for helping with the small issue! \nRunning serve --single ./demo/dist made it work as I was hoping it would.. ",
    "baixiaoji": "\njest.mock('../src/react.svg', () => 'react-svg')\njest.mock('../src/App.css', () => 'app-css')\n\n@ntwcklng \nIt's can solve the problem,but I don't know what it meaning? and the docs told me to write the \n\"moduleNameMapper\": {\n      \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\": \"<rootDir>/spec/__mocks__/fileMock.js\",\n      \"\\\\.(css|scss)$\": \"<rootDir>/spec/__mocks__/styleMock.js\"\n    }\nin the package.json,but it's doesn't work ,but you code in the test file is work !! can you tell more about the meanning of your code ,THX. @ntwcklng \nwhy I write the moduleNameMapper config to  stub out resources,but when I npm run test,it's err\n```\n  \u25cf Test suite failed to run\nC:\\workFile\\bigdream\\ToLearn\\selfapp\\src\\index.css:1\n({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,global,jest){.hovered{\n                                                                                         ^\n\nSyntaxError: Unexpected token .\n\nwhy it load the css file?. @xuopled \nI add the `jest-css-modules`,then it err\n FAIL  .\\Link.react.test.js\n  \u25cf Test suite failed to run\nCannot find module '../../package' from 'node.js'\n\n  at Resolver.resolveModule (node_modules/jest-resolve/build/index.js:179:17)\n  at Object.<anonymous> (node_modules/babel-core/lib/api/node.js:60:16)\n\n. I don't know what is the special config,but I add the\n \"moduleNameMapper\": {\n    \"\\.(css)$\": \"/spec/node_modules/jest-css-modules\"\n  }\nthen has the early err\n C:\\workFile\\bigdream\\ToLearn\\selfapp\\src\\index.css:1\n    ({\"Object.\":function(module,exports,require,__dirname,__filename,global,jest){.hovered{\n                                                                                             ^\nSyntaxError: Unexpected token .\n\n```\n. ",
    "vamsiampolu": "Thanks, @insin, the library also has a peer dependency on babel-polyfill:\nhttps://github.com/roylee0704/react-flexbox-grid/blob/master/package.json\nI like the idea of having CSS modules switched on by default. I am currently using material-ui which means that the config will work for me now but if I were to include a module like react-bootstrap which uses global css would I have to add additional config in extra  for it.\n. ",
    "tbillington": "Got this issue too. @tomitrescak code fixed it.. ",
    "zs-zs": "I have this issue too. For me, \"cheap-source-map\" produces a lot of gibberish transpiled code.\nWhat worked for me is:\nwebpack: {\n    extra: {\n        devtool: 'inline-source-map'\n    }\n}\nWith this setting, I don't see any transpiled code, I can set breakpoints, etc.. Hi @jvega, it's possible if you tweak the Karma config using extra - for example:\nmodule.exports = {\n    type: 'react-app',\n    karma: {\n        browsers: ['IE8'],\n        extra: {\n            customLaunchers: {\n                IE8: {\n                    base: 'IE',\n                    'x-ua-compatible': 'IE=EmulateIE8'\n                }\n            }\n        },\n        plugins: [\n            require('karma-ie-launcher')\n        ]\n    }\n}\n. ",
    "ingro": "Same problem here, only source-map or inline-source-map produce a readable and accurate output but they are super slow. A little bit curious though, since I came from create-react-app and there sourcemaps where working with the faster 'cheap-module-source-map', maybe this should be just a babel config issue?. ",
    "MethodGrab": "Looks like the same issue as (or at least related to) #177 ?\n. ",
    "SHAPPY0": "Hi, \nI am also facing the same issue. I have some custom JS files which is used for design the HTML template. and I guess these  files would not be available in npm module. \nAnd I put the JS files in/public/js even its not working.\nPlease help me\nThanks. ",
    "ronaiza-cardoso": "Hi, I have the same issue, when I run my lib on demo mode the css is imported, but when I publish the package the css is not exported. I'm using this lib import 'react-table/react-table.css';. ",
    "isaacs": "Rimraf handles spaces just fine.\nThe bug here is that you're passing a string to exec, you're not calling spawn with an array of arguments.\nConsider if you had a file called foo bar with a space.  If you call rm foo bar on the shell, it's going to remove the files foo and bar.\nIn Node.js, if you call var childProcess = spawn('rm', ['foo bar']) then that's going to pass foo bar as a literal argument to the rm process.\nBut if you call exec('rm foo bar') then it's going to pass the string \"rm foo bar\" as an argument to sh like spawn('sh', ['-c', 'rm foo bar']) and it's going to fail.\nYou should really almost never be passing strings from userland or the filesystem directly into a command like this.  It's almost always a security vulnerability.  For example, I could publish a module with a file named some-file\\ndo-something-evil and your program would happily execute the shell script: \nsh\nrm some-file\ndo-something-evil\nand then evil things would happen and I'd have control of your machine.\nSince rimraf can be used as a module, and this script is in JavaScript, there's no need to execSync it.  Just require() it and use the function.\n. ",
    "stowball": "Nope, no apostrophes. The path was ~/Documents/Git\n. ",
    "NekR": "@insin I think it's more like this blocks #203 since PWAs are more than just SW :-) I'll try to write pros and cons here of different libs today.. Okay, here are some pros/cons I wrote a while ago: https://github.com/facebookincubator/create-react-app/issues/192#issuecomment-235095536\nOther thing, probably not mentioned there is that sw-precache and its wrappers for webpack work very bad with webpack-dev-server and probably some other things. The reason is that it sw-precache doesn't use webpack's built-in mechanism to output files, but rather just write it to the file system. This obviously couldn't work normally with dev-server since it uses in-memory file system.\nOther pros of offline-plugin:\n More downloads: 210k month vs ~30k month sw-precache\n sw-precache/sw-toolbox are kind of deprecated. Google still supports them, but they work on \"new kind of ServiceWorker tools\" which aren't even nearly ready for production. \nOther cons of offline-plugin:\n It isn't being done by Google\n It has a bit fewer functionality than sw-precache\n* ??? something else\n/cc @developit. ",
    "ralphsmith80": "Has anyone validated this? Maybe I'm not using it as expected, but it doesn't seem to be working.\nI've got nwb \"version\": \"0.15.6\" installed and my goal is to be able to produce a library of react components using less for styling. The demo app is working, but it's blowing up in production because the less file is not present. I've also tried just using css with no success.\nHere's what my setup looks like using just css:\nindex.js\n```javascript\nimport Error from './components/error/Error'\nexport {\n  Error,\n}\n```\n./components/error/Error.js\n```javascript\nimport React from 'react'\nimport './error.css'\nconst Error = (props) => {\n  return (\n    \n{props.title}\n{props.message}\n\n  )\n}\nError.defaultProps = {\n  title: 'Data Access Error',\n  message: 'The data required for this page is not currently available.',\n}\nexport default Error\n```\n./components/error/error.css\ncss\n.error {\n  color: rgba(0,0,0,0.87);\n  display: flex;\n}\n.error__section {\n  margin: 1rem 0.75rem 0.5rem;\n}\n.error__header {\n  font-size: 1.5rem;\n}\nAnd this is what the container/parent App looks like.\nApp.js\n```\nimport React from 'react'\nimport {render} from 'react-dom'\nimport { Error } from 'my-react-components'\nlet App = React.createClass({\n  render() {\n    return (\n      \n\n\n    )\n  }\n})\nrender(, document.querySelector('#root'))\n```\nFinally here's the build commands I've tried using to build the react component library. I expect the first one to work based on the docs\n\nnpm run build --copy-files\nnpm run build --copy-file=css\nnpm run build --copy-file css\n\nThe end result is that no css (or less) files are present in /lib/components/error/ and as you would then expect I get the following error when building App.js\nbash\nmy-react-components/lib/components/error/Error.js\nModule not found: ./error.css\n. ",
    "ianbrode": "@ralphsmith80 build command doesn't pass it to nwb.\nyou gotta edit your package.json script so it calls something like: \"nwb build-react-component --copy-files\". ",
    "a-eid": "npm run build -- --copy-files has not effect. still getting the same error about not finding the css file.. ",
    "vpowers": "@insin I'm having the same issue as @vpezeshkian.  How could I specify environment in the nwb.config file?  Looking to see if I force it to production env, and see if this will resolve my issue with the webworkify-webpack-dropin.  Or is there a way to force using the HashedModuleIdsPlugin, within the webpack.config, in any environment?  . In case someone comes along and needs to support videojs-contrib-hls in a react app using nwb, I have forked @Ambroos webworkify-webpack-dropin to support the variance in webpack and nwb bundled code:\nhttps://github.com/vpowers/webworkify-nwb\nFollow the instructions in this comment but use the module above instead.\nYou can find example usage here:\nhttps://github.com/vpowers/simple-react-app. ",
    "trueadm": "That sounds good. Once I get some time I can work on getting an Inferno template and setting up the config. We could also add --inferno a bit like --preact so it uses inferno-compat package to do the same things.. Yep, use inferno-compat@beta23, you will also need to ensure inferno@beta23 is in there too :) thanks man!. Thanks mate :). ",
    "chadoh": "Why was this closed? It still seems to be an issue. @insin . ",
    "zomars": "@insin \n\nWebpack isn't used when building a component to lib/ and es/ for publishing, we just transpile from src/ using Babel.\n\nIs there a way to let the build process copy the assets to the the lib folder, and let the parent (which uses it's own file-loader) handle it?. Nevemind, I've just found out about the --copy-files flag. I'm such an idiot.. ",
    "codeinabox": "@insin is there anything I need to fix or change in my PR?. ",
    "sbehrends": "Now I understand why this was not working \ud83d\ude1e . ",
    "mlusetti": "Sure but all the other stuff it provides makes it a better fit, especially the deterministic way of handling deps.. ",
    "gaearon": "Note you need a Symbol polyfill for it.. Sounds like this should be a CRA bug report instead?. ",
    "feimosi": "The benefit is that every year you get the correct features enabled without any need to modify Babel's config. And I don't think duplication of plugins is an issue for Babel, correct me if I'm wrong.. ",
    "wmertens": "It will make server side code maybe a little faster, and slightly easier to debug.. Well, in my project I use it to configure build targets, aliases, plugins,\nloaders, dll list, \u2026 as well as application configuration, all in a way\nthat is easy to override by environment.\nOn Tue, Feb 14, 2017, 3:06 PM Jonny Buchanan notifications@github.com\nwrote:\n\nDo you have an example use in mind?\nLooking at its docs, I'm not sure what the use case for confippet within\nnwb would be - most of the the build config (to provide working baseline\nconfig for each command) nwb uses internally and the user config it\nsupports (other than the escape hatches for merging/tweaking webpack\nconfig) map directly to specific pieces of configuration generation code\nwhich have made toggleable or configurable.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/insin/nwb/issues/261#issuecomment-279715244, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADWlkxMMmbnWBN-pxBXx5ba-M4s52YPks5rcbSVgaJpZM4L9HLX\n.\n. You can actually run polyfill.io locally :) https://github.com/Financial-Times/polyfill-service#running-locally\n\nI'm thinking about https://philipwalton.com/articles/deploying-es2015-code-in-production-today/ to make 2 bundles, one for modern browsers and one for older, and just use the babel-preset-env auto-polyfilling technique\u2026. ",
    "gbozee": "Attached below is my directory structure\n\nI am importing the css file from the index.js file.\n```import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport './public/hirepalace-styles.css';\nReactDOM.render(\n  \n\n,\n  document.getElementById('root')\n);``. Yeah that was the problem. I needed to put thecss` file in a subdirectory. I am not in charge of creating the css so didn't want to have to change the path. Thanks for the insight. . ",
    "jvega": "that was fast, regards. well, until cssnano gets updated, using explicit :local solve the error. ",
    "viankakrisna": "how about adding an entry point for DLL? I've done it like this in this CRA PR https://github.com/facebookincubator/create-react-app/pull/1651/files\nSo we bundle any import in src/index.dll.js. @loklaan it has something to do with .displayName, isn't this should be handled by babel? or es6 class components don't have this by default in nwb? https://travis-ci.org/insin/nwb/jobs/226561810#L2319-L2325 not really sure how to fix the tests . lint errors fixed, but i got these errors \n\nI think it's because the ordering of OSX filesystem is different. Should I add a commit to sort the arrays before comparing? or open another PR?\n. ",
    "dimensi": "Thx for answer. . ",
    "balazs4": "Sorry for the wrong commit message....the fix is for the inferno and not for preact. ",
    "quentin-sommer": "Perfect :). Seems like it's even better than I thought! Thanks for this project, by the way. It's exactly what I was looking for and it's been a pleasure to use up to now, I can edit the doc if you want!. Sounds good, this way people know right away they're using nwb and might discover others command (react, inferno eg) by running nwb, thing that we wouldn't have with nwb-preact. ",
    "KatSick": "But as far as i understand, you aliasing 'react' -> 'inferno-compat'. Isn't it ?. I'm confused. Why it working in 0.14.x ? I have large project in nwb, and its great!  But i always use react imports to easy fallback to react from inferno. I can't use it in 0.15.x?\nMany thanks for your support. My full index.js\n```\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nlet root;\nfunction init() {\n  const App = require('./App');\n  root = ReactDOM.render(, document.querySelector('#app'), root);\n}\ninit();\nif (module.hot) {\n  module.hot.accept('./App', () => window.requestAnimationFrame(() => init()));\n}\n``. Is there any updates on this ?. Is there any updates ? Have troubles with HMR in my app too. Is there any workaround i can apply right now ?. @insin how to use--no-hmrewithapp.use(require('nwb/express')(express, { reload: true }));` ?\ni tried app.use(require('nwb/express')(express, { hmre: false })); but it not working. @insin i fix it with app.use(require('nwb/express')(express, { hmre: true, hmr: true, reload: true  })); since i see in source code hmre: !options.hmr || !options.hmre, in expressMiddleware.. Many thanks. ",
    "dlmr": "Hi! \ud83d\udc4b \nI'm one of the developers behind a project that shares some similar ideas and ambitions as nwb, https://github.com/rocjs/roc, and it has been designed from the ground up as a plugin based system, focusing on solving this type of problem. \nNow I'm not exactly sure what you are looking for in terms of API or functionality but a possible option would be to use Roc as the underlaying foundation to make this type of architecture possible in an easy way, that is the core of Roc (you would not need to use the entire existing ecosystem). Roc provides a way to add/modify cli commands, add/modify settings, shared dependencies, integration points in terms of an event system and much more. I would be happy to help in adopting it if this sounds interesting, and if you decided to go another route it might be some useful lessons and ideas to share here.\n. ",
    "kylesheely": "Thanks. This helps. Any way to do the same for js and css?. Much appreciated!. My built assets are tracked in a separate cvs-like source control system and it would be painful to manage them with changing filenames. I suspect it's a fairly unique use-case.. ",
    "ekwonye-richard": "I have a workaround which worked out for me. I included the loader inside my component.\n. ",
    "brentatkins": "Thanks!. ",
    "DrummerHead": "@tnrich I just integrated flow using the instructions above and it \"just works\". ",
    "eMarek": "Am I the only one who is getting these errors after running npm run flow?\n```\nError: node_modules/nwb/templates/react-component/_package.json:5\n  5:   \"main\": \"lib/index.js\",{{esModulesPackageConfig}}\n                              ^ Unexpected token {\nError: node_modules/nwb/templates/web-module/_package.json:5\n  5:   \"main\": \"lib/index.js\",{{esModulesPackageConfig}}\n                              ^ Unexpected token {\n```\nI can not figure it out why flow goes into node_modules and runs checking there.. Not sure why I didn't think about this solution. It works. Thank you!. ",
    "ggregoire": "@eMarek same. I added the following to my .flowconfig:\n[ignore]\n.*/node_modules/nwb/.*. Actually it's probably because the `react-component` project include [`babel-preset-react`](https://babeljs.io/docs/plugins/preset-react/), which includes `babel-preset-flow`.\n\nClosing since it's not directly related to nwb.. ",
    "bebbi": "And if you add flow for a web-module check this: https://github.com/insin/nwb/issues/461. I've missed this too, it sounds like a reasonable addition, any reason why this didn't make it to be merged?. Thanks! Yes, i was hoping to do a slight cleanup incl. saving unnecessary code for an app and thought I could use the uglify options to trigger bundling as well, my misunderstanding.. It may be related to CRA@next introducing monorepo support, and there, being able to source code from below its own root. The offending code is then in the nwb module es \ndirectory, not in node_modules.. @gaearon I don't know enough details, filed here because it seemed that es modules should satisfy the imports on top requirement.\nI'll file it at CRA instead.. ",
    "sberney": "There's a webpack flow plugin out there that I would rather use. It's very inconvenient to run \"yarn flow\" manually every so often. With the webpack plugin (nwb uses webpack) it's not required to constantly re-run.. Yeah, I'm here at nwb because create-react-app doesn't support creating libraries, only html web apps. If nwb can't live rebuild the library I'm working on, only the demo, it's not doing what I need it to.\nI know webpack can watch files, and babel cli also has a watch option. It might be complicated, but it would be great if we could somehow get this feature!. ",
    "pedrocostadev": "Ok, my bad... I forget that. Thanks. ",
    "LeoDT": "maybe https://webpack.js.org/plugins/provide-plugin/ could help.. ",
    "broncha": "and how do you generate stats.json!!. @grahamlyus I have this, but npm run build does not generate stats.json\nplugins: [\n  new StatsPlugin('stats.json', {chunkModules: true}),\n  new BundleAnalyzerPlugin({generateStatsFile: true, analyzerMode: 'disabled'})\n]. ",
    "mcolburn": "Here is the raw log from Travis.  I don\u2019t see any issues reported regarding phantomjs-prebuilt:\n```\ntravis_time:end:3a0ead40:start=1487780030497369524,finish=1487780031918178975,duration=1420809451\n\u001b[0K\u001b[32;1mSetting up $PATH\u001b[0m\n$ export PATH=$HOME/.yarn/bin:$PATH\ntravis_fold:start:install\n\u001b[0Ktravis_time:start:0840754e\n\u001b[0K$ yarn\n\u001b[2K\u001b[1G\u001b[1myarn install v0.20.3\u001b[22m\n\u001b[2K\u001b[1G\u001b[2m[1/4]\u001b[22m Resolving packages...\n\u001b[1G\u001b[0K\u001b[2K\u001b[1G\u001b[2K\u001b[1G\u001b[2m[2/4]\u001b[22m Fetching packages...\n\u001b[2K\u001b[1G\u001b[33mwarning\u001b[39m fsevents@1.1.1: The platform \"linux\" is incompatible with this module.\n\u001b[2K\u001b[1G\u001b[34minfo\u001b[39m \"fsevents@1.1.1\" is an optional dependency and failed compatibility check. Excluding it from installation.\n\u001b[2K\u001b[1G\u001b[2m[3/4]\u001b[22m Linking dependencies...\n\u001b[2K\u001b[1G\u001b[33mwarning\u001b[39m \"react-addons-update@15.3.2\" has incorrect peer dependency \"react@^15.3.2\".\n\u001b[2K\u001b[1G\u001b[33mwarning\u001b[39m \"react-dom@15.3.2\" has incorrect peer dependency \"react@^15.3.2\".\n\u001b[2K\u001b[1G\u001b[2m[4/4]\u001b[22m Building fresh packages...\n\u001b[2K\u001b[1G\u001b[2m$ echo 'done'\u001b[22m\ndone\n\u001b[2K\u001b[1GDone in 56.21s.\ntravis_time:end:0840754e:start=1487780031924515962,finish=1487780088434397143,duration=56509881181\n\u001b[0Ktravis_fold:end:install\n\u001b[0Ktravis_time:start:00104dc0\n\u001b[0K$ npm test\n\nioc-liturgical-react@0.0.8 test /home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react\nnwb test-react\n\n\u001b[31mError running command: Path must be a string. Received null\u001b[39m\nTypeError: Path must be a string. Received null\n    at assertPath (path.js:7:11)\n    at Object.extname (path.js:1431:5)\n    at phantomJSExePath (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/karma-phantomjs-launcher/index.js:19:12)\n    at Object. (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/karma-phantomjs-launcher/index.js:104:12)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.require (module.js:497:17)\n    at require (internal/module.js:20:19)\n    at getKarmaPluginConfig (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/createKarmaConfig.js:144:18)\n    at createKarmaConfig (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/createKarmaConfig.js:164:31)\n    at karmaServer (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/karmaServer.js:25:53)\n    at testReact (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/commands/test-react.js:13:29)\n    at cli (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/cli.js:246:3)\n    at Object. (/home/travis/build/OCMC-Translation-Projects/ioc-liturgical-react/node_modules/nwb/lib/bin/nwb.js:31:21)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3\n```\n\nOn Feb 22, 2017, at 10:45 AM, Jonny Buchanan notifications@github.com wrote:\nIs there anything interesting in the npm install logs from your build? This looks like some sort of failure to install phantomjs-prebuilt.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/insin/nwb/issues/271#issuecomment-281707625, or mute the thread https://github.com/notifications/unsubscribe-auth/ABRbySa3tldeED6an9F5-dYjuug1Dy5Yks5rfFgogaJpZM4MIyij.\n\n\n. I solved the problem by removing the following from my .travis.yml:\ncache:\n  directories:\n    - node_modules\nAfter this resulted in a successful build on Travis, I added the cache back in, and pushed to Git again.  The build failed again.  So, I removed the cache directive again, repushed, and the build passed.\nFor now, I will not use the cache directive in the .travis.yml.  \nIt is unclear to me whether this is an issue regarding nwb.  It doesn't seem to be.  Do you want me to close it?\nThanks for your help!\n. ",
    "stephenwf": "Heres an example of a vanilla NWB install (0.19.1) with storybook installed:\nhttps://github.com/how-to-react/nwb-storybook\nThe commit that gets it working is here:\nhttps://github.com/how-to-react/nwb-storybook/commit/2d86666bca48a5688e25ab98f220a125716ce832\nIf you're just interested in getting the webpack configuration, you'll find that here:\nhttps://github.com/stephenwf/create-nwb-webpack-config\nhttps://www.npmjs.com/package/create-nwb-webpack-config\nQuick note: this will only get you the configuration used in the nwb build-{config.type} command, but should be easily fork-able if you want more.\n(Very similar process for styleguidist: https://github.com/how-to-react/nwb-styleguidist). Ah I see, so the webpack config in that example uses something like require.resolve(...) to get the path to the file. That would be ideal. I did run into a few issues with storybook, it didn't like the chunking webpack plugins. (https://github.com/how-to-react/nwb-storybook/blob/master/.storybook/webpack.config.js). Not sure if there is a standard way to filter webpack plugins, but that would be useful too\n. ",
    "kylemh": "@insin do you have any plans on changing how nwb exposes/shares it's configuration? We're creating a PoC using NWB for a UI library, and we're gonna try using the above solution to keep Storybook in configuration parity with NWB, but I'd feel a lot safer if configuration was overridable like it is with Storybook and Next (passing the default config as an overridable parameter in the configuration file).. With that setup my storybook isn't matching the babel configuration that nwb is using.. If changes are made by overriding key-value config pairs in nwb.config, they're not easily shared in a palatable format for Storybook (who is looking for .babelrc or a custom Webpack config if necessary).\nImagine that I want to be able to use some stage-2 feature that NWB doesn't have out of the box. As it stands, I have to duplicate code via nwb.config and then in .storybook/.babelrc\nAlso, it's not a devDependency if it's part of my CI process and deploys a built Storybook instance.... ",
    "alzalabany": "it work out of the box \njust use\n```\nnpm i -g @storybook/cli\nnwb new react-component nameOflib\ncd nameOflib\ngetstorybook\n```` \nthis will install and start storybook @ 6006 port :). \ud83d\udc4d \ud83d\udcaf  . @kylemh should that be a problem ? given storybook is a dev dependency anyway. this is so important to me too. since i'm using yarn workspace and split every part of my app into libraries, most of the time i'm working in 2+ library at same time. and yarn workspace symlink all packages in your monorepo to single node_module, so its very slow and not logic to run whole nwb build twice every time a single line in a file changes :/. i agree, i can help with this if its accepted. ",
    "longoria": "OK, found out the problem, I just wasn't grokking the docs on the vendor- prefix right. I now have this working:\nmodule.exports = {\n  type: 'react-app',\n  babel: {\n    plugins: ['transform-flow-strip-types', 'syntax-dynamic-import']\n  },\n  webpack: {\n    rules: {\n      css: {\n        modules: true,\n        camelCase: true,\n        localIdentName: '[hash:base64:5]'\n      },\n      'vendor-css': {\n        modules: true,\n        camelCase: true,\n        localIdentName: '[hash:base64:5]'\n      },\n      postcss: {\n        plugins: [\n          require('postcss-cssnext')()\n        ]\n      }\n    }\n  }\n}\n. ",
    "modsoussi": "Found the issue. Should be \n'sass-style: {\n   sass: {\n      data: '@import \"_variables\";',\n      includePaths: [path.resolve('src/styles')]\n   }\n}\ninstead of what's on the docs. Semicolons are important.. ",
    "m-torin": "I made my project multi-component by looking at the Semantic UI style... https://github.com/Semantic-Org/Semantic-UI-React/blob/master/src/index.js. ",
    "mklemme": "@torinagrippa thanks for the reference. Should help with the bulk export. How did you set up the compiling for multiple components? What do I have to change in the nwb.config file? https://github.com/insin/nwb/blob/master/docs/guides/ReactComponents.md#build-configuration. @01taylop I wasn't able to get this project working but am using https://github.com/FormidableLabs/builder-react-component. ",
    "hoodsy": "@torinagrippa I'm using Aphrodite for CSS-in-JS and have had difficulties importing font files.\nHave you all been able to import custom font files to use in the demo page?. ",
    "01taylop": "@mklemme Did you have any luck creating your react component library?. Thanks, might use that for the next project.\nI have found the solution in Configuration.md, you need to set the babel stage to 1 in the nwb.config.js file:\n\nif you want to use export extensions in your app, you should set stage to 1\n\nmodule.exports = {\n  babel: {\n    stage: 1\n  }\n}. Ahh, of course. I didn't even think to try that on Friday, works perfectly. Thank you.. ",
    "TarikHuber": "Is it possible to create a library my-component where you could do something like\njs\nimport { Component1 } from 'my-component/part1'\nimport { Component2 } from 'my-component/part2'\nimport Component3  from 'my-component/part3/Component3  '\nimport MainComponent from 'my-component'\nHaving everything in a single index.js makes that file huge. By slitting everything in own folders would make the usage much more structured. A great example is Material-UI\nIn they docu they recommend to use \"folder\" way of import.\n\nIn the docu:\n\nNotice that in the above example, we used:\njs\nimport RaisedButton from 'material-ui/RaisedButton';\ninstead of\njs\nimport {RaisedButton} from 'material-ui';\nThis will make your build process faster and your build output smaller. For a complete mapping of Material-UI components to import, see /src/index.js inside the Material-UI npm package root directory.\n. Hi @semako-kouye ,\nUnfortunately no. I'm also still using the lib. It would be great if this would be supported. It is great for code splitting.. ",
    "semako-kouye": "@TarikHuber did you find a way to do this?\nSo far I am doing \nimport Component1 from 'my-library/lib/Component1';\nBut I wish I could do\nimport Component1 from 'my-library/Component1';\nHi @insin, is this use case supported? Or should we copy from the lib folder after building  (and update main in package.json) ?. ",
    "treshugart": "Implemented in fork while awaiting PR: https://www.npmjs.com/package/@treshugart/nwb.. Closing because PR was merged. Thank you!. Implemented in fork while awaiting PR: https://www.npmjs.com/package/@treshugart/nwb.. Closing because PR was merged. Thank you!. This is duplicated from below. I haven't tested the implications of sharing that earlier on (probably above this line) on the output, but happy to try if you think it's better to push this above.. ",
    "IljaDaderko": "\ud83d\udc4d + 1, same issue on osx and chrome (not tested elsewhere), terminal and browser both log change events yet nothin on page reloads / changes. Using reload option like app.use(require(\"nwb/express\")(express, { reload: true })); doesn't seem to work either.\nThis happens in fresh nwb react build using hello world example.. @insin can't provide full repo as it is private, but here is server.js that uses the middleware:\n```\nconst express = require(\"express\");\nconst compression = require(\"compression\");\nconst app = express();\nconst nwb = require(\"nwb/express\");\n// Disable X-Powered-By header for security reasons\napp.disable(\"x-powered-by\");\n// Set port\napp.set(\"port\", process.env.PORT || 3000);\n// Production specific config\nif (process.env.NODE_ENV === \"production\") {\n  // gZip\n  app.use(compression());\napp.use(express.static(\"dist\"));\napp.get(\"*\", (req, res) => {\n    res.sendFile(${__dirname}/dist/index.html);\n  });\n} else {\n  app.use(nwb(express));\n}\n// Start the app\napp.listen(app.get(\"port\"), error => {\n  if (error) return console.error(error.message);\n  console.log(\ud83d\udea8 Server started at: port: ${app.get(\"port\")});\n  console.log(\ud83c\udf43 Enviroment: ${process.env.NODE_ENV}\\n);\n});\n```\nlet me know if there are other places you need to examine, will do my best to post snippets here. In general hot reloading appears to work, i.e. browser receives and logs events in console, there are outputs in terminal, yet nothing changes visually on a page until manually refreshed.  . Sure, here they are:\nApp.js\n```\nimport React, { Component } from \"react\";\nimport PushNotificationIOS from \"./components/PushNotificationIOS\";\nclass App extends Component {\n  render() {\n    return ;\n  }\n}\nexport default App;\n```\nPushNotificationIOS.js\n```\nimport React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport anchor from \"../assets/anchor.svg\";\nconst slide = keyframes0% { opacity: 0; transform: translateY(-20px); }\n  100% { opacity: 1; transform: translateY(0); };\nconst SContainer = styled.divwidth: 300px;\n  border-radius: 15px;\n  background-color: rgba(236, 236, 236, 0.9);\n  overflow: hidden;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n  color: #424242;\n  opacity: 0;\n  transform: translateY(-40px);\n  will-change: transform, opacity;\n  animation: .4s ease .3s forwards ${slide};;\nconst SHeader = styled.div`\n  background-color: rgba(255, 255, 255, 0.85);\n  padding: 6px 33px;\n  letter-spacing: 1px;\n  position: relative;\n&::before {\n    content: '';\n    width: 18px;\n    height: 18px;\n    background-color: #4db7c3;\n    background-image: url(${anchor});\n    background-size: auto 80%;\n    background-position: center;\n    display: block;\n    position: absolute;\n    left: 9px;\n    top: 7px;\n    border-radius: 3px;\n  }\n&::after {\n    content: \"now\";\n    position: absolute;\n    display: inline-block;\n    right: 12px;\n    font-size: 10px;\n    opacity: 0.8;\n    top: 9px;\n  }\n`;\nconst SContent = styled.divpadding: 10px 15px;\n  opacity: 0.8;\n  font-size: 14px;;\nconst SFooter = styled.divfont-size: 10px;\n  opacity: 0.8;\n  padding: 0 15px 7px 15px;;\nclass PushNotificationIOS extends Component {\n  render() {\n    return (\n      \nLoot\n\u20ac7.80 ~ \u00a36.20 Spent\nPress for more\n\n    );\n  }\n}\nexport default PushNotificationIOS;\n```. @insin as a side note, my components are standard react classes with normal render i.e.\n```\nclass Button extends Component {\n  static propTypes = {\n    children: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  };\nrender() {\n    const { children, onClick, ...props } = this.props;\n    return (\n      \n        {children}\n      \n    );\n  }\n}\n```\nAnd development is not using static\n```\nconst express = require(\"express\");\nconst compression = require(\"compression\");\nconst app = express();\n// Disable X-Powered-By header for security reasons\napp.disable(\"x-powered-by\");\n// Set port\napp.set(\"port\", process.env.PORT || 3000);\n// Production specific config\nif (process.env.NODE_ENV === \"production\") {\n  // gZip\n  app.use(compression());\napp.use(express.static(\"dist\"));\napp.get(\"*\", (req, res) => {\n    res.sendFile(${__dirname}/dist/index.html);\n  });\n} else {\n  const nwb = require(\"nwb/express\");\n  app.use(nwb(express));\n}\n// Start the app\napp.listen(app.get(\"port\"), error => {\n  / eslint-disable /\n  if (error) return console.error(error.message);\n  console.log(\ud83d\udea8 Server started at: port: ${app.get(\"port\")});\n  console.log(\ud83c\udf43 Enviroment: ${process.env.NODE_ENV}\\n);\n});\n```\nSo I am still confused to why any sort of reloading won't work. Again all events seem to be received fine in console, just nothing updates on screen. I wonder if react 16 could be an issue? \ud83e\udd14 Although I am not using nothing fancy like returning components in array etc.. EDIT: this index file is produced by yarn build inside /dist\nThis is full index.html file\n```\n<!DOCTYPE html>\n\n\n\n\n\n\n\ntest\n<link href=\"https://fonts.googleapis.com/css?family=Lato:400,700,900\" rel=\"stylesheet\">\n\n\n\n\n!function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var r=window.webpackJsonp;window.webpackJsonp=function(t,u,c){for(var i,a,f,p=0,l=[];p<t.length;p++)a=t[p],o[a]&&l.push(o[a][0]),o[a]=0;for(i in u)Object.prototype.hasOwnProperty.call(u,i)&&(e[i]=u[i]);for(r&&r(t,u,c);l.length;)l.shift()();if(c)for(p=0;p<c.length;p++)f=n(n.s=c[p]);return f};var t={},o={4:0};n.e=function(e){function r(){i.onerror=i.onload=null,clearTimeout(a);var n=o[e];0!==n&&(n&&n<a href=\"new Error(\" title=\"Loading chunk &quot;+e+&quot; failed.\">1</a>),o[e]=void 0)}var t=o[e];if(0===t)return new Promise(function(e){e()});if(t)return t[2];var u=new Promise(function(n,r){t=o[e]=[n,r]});t[2]=u;var c=document.getElementsByTagName(\"head\")[0],i=document.createElement(\"script\");i.type=\"text/javascript\",i.charset=\"utf-8\",i.async=!0,i.timeout=12e4,n.nc&&i.setAttribute(\"nonce\",n.nc),i.src=n.p+\"\"+({0:\"Home\",1:\"NotFound\",2:\"vendor\",3:\"app\"}[e]||e)+\".\"+{0:\"2f290079\",1:\"09db38fa\",2:\"9f4bb598\",3:\"e637b463\"}[e]+\".js\";var a=setTimeout(r,12e4);return i.onerror=i.onload=r,c.appendChild(i),u},n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:t})},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,\"a\",r),r},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p=\"/\",n.oe=function(e){throw console.error(e),e}}([]);\n\n\n```. Will drop list of dependencies below, strange thing is that I am able to start it on my local machine, yet once accessed via browser served from my server this error happens. Is there a chance code splitting could mess with this?\n\"dependencies\": {\n    \"compression\": \"^1.6.2\",\n    \"express\": \"4.15.3\",\n    \"react\": \"16.0.0-alpha.12\",\n    \"react-dom\": \"16.0.0-alpha.12\",\n    \"react-helmet\": \"5.1.3\",\n    \"react-loadable\": \"^3.3.1\",\n    \"react-router-dom\": \"^4.1.1\",\n    \"sanitize.css\": \"^5.0.0\",\n    \"scrollmonitor\": \"^1.2.3\",\n    \"styled-components\": \"2.0.0\"\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"7.2.3\",\n    \"eslint\": \"^3.19.0\",\n    \"eslint-config-airbnb\": \"15.0.1\",\n    \"eslint-plugin-babel\": \"^4.1.1\",\n    \"eslint-plugin-import\": \"2.3.0\",\n    \"eslint-plugin-jsx-a11y\": \"5.0.3\",\n    \"eslint-plugin-react\": \"7.0.1\",\n    \"nwb\": \"0.16.3\",\n    \"offline-plugin\": \"4.8.1\",\n    \"prop-types\": \"15.5.10\",\n    \"shipit-deploy\": \"^2.4.0\"\n  },. EDIT: it looks like vendor file is not present at all after CI build (ci now has same settings as my local machine) yet one builds it fine and other doesnt. @insin I think this is prob related to new npm as well, trying to install nwb globally results in error below:\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! phantomjs-prebuilt@2.1.14 install: `node install.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the phantomjs-prebuilt@2.1.14 install script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.. Didn't realise this existed, getting issues with invalid object from following image-webpack-loader config\nmodule: {\n        rules: [\n          {\n            test: /\\.(gif|png|jpe?g|svg)$/i,\n            loaders: [\n              \"file-loader\",\n              {\n                loader: \"image-webpack-loader\",\n                query: {\n                  progressive: true,\n                  optimizationLevel: 7,\n                  interlaced: false,\n                  pngquant: {\n                    quality: \"65-90\",\n                    speed: 4\n                  }\n                }\n              }\n            ]\n          }\n        ]\n      },\nnot entirely sure why it's invalid?. Fixed, had rules section within extra\n. Tried using: https://github.com/numical/script-ext-html-webpack-plugin\nwebpackProd = {\n    extra: {\n      plugins: [\n        // -- custom html-webpack-plugin options ---------------------------- //\n        new ScriptExtHtmlWebpackPlugin({\n          defaultAttribute: \"async\"\n        })\n      ]\n    }\n  };\nbut doesn't seem to have any effect. I re-tried, turns out I had to update something in js files for this to take effect. All working fine now :). Not sure if related, but re-compiling takes good 10 seconds to complete as well. Was trying to re-route \"*\" to index.html file in public folder, worked with prod, but only history fallback middleware did the trick in dev, thank you :). ",
    "Racle": "Here is full test app. Server and client side code. Just run yarn install or npm install and then npm run start-server. Might have some leftovers, its stripped down from what i've used.\nhttps://lonke.ro/tmp/nwb_test.zip. ",
    "alex-pex": "I don't have a repo to share, but here is what I do : \nin index.js:\n```js\nimport renderApp from 'umbra/render';\nimport 'umbra/styles/material-theme.scss';\nimport 'umbra/styles/bootstrap-theme-vendor.scss';\nimport 'umbra/styles/bootstrap-theme-core.scss';\nimport 'aaa';\n// eslint-disable-next-line no-restricted-properties\nrenderApp(document.getElementById('root'));\n```\nThen : npm run build && echo \"it's alright\" and I get : \n```\n\u221a Cleaning app\n\u00d7 Building React app\nFailed to compile with 1 error.\nERROR  in ./src/index.js\nModule not found: Error: Cannot resolve module 'aaa' in (...)\n @ ./src/index.js 13:0-14\nit's alright\n```\n. ",
    "kirill-konshin": "Bump!. Bump. First of all, I've found a bug #300 Custom CSS rules are not applied on SASS/LESS rules.\nBut the saddest part for my case is that useable styles are enabled by using different loader: style-loader/useable, it's not an option parameter...\nSo when I set {style: {loader: require.resolve('css-loader/useable'}} I get:\n[ { loader: '/boilerplate/node_modules/style-loader/index.js',\n    options: \n     { loader: '/boilerplate/node_modules/style-loader/useable.js' } },\nI agree that it is a niche use case, but it's very useable if you need to swap skins in real time, so you remove one style tag and add another one.\nP.S. There is an unpredicted behavior, the following two configs produce same results: \ncss: {options: {modules: true}}\ncss: {modules: true}\nShould I create a separate bug for that too?. If you're OK then I can pass a new flag for that. Should be a very simple change.... What do you mean by saying \"this should be configurable\" together with \"won't be added new flags\"? In simple CLI mode there's no access to resulting Webpack config which I could post-process...\nRegarding #300 \u2014 got it, thanks.. Yes, I was hoping that we can add something like module option for style pipeline. Something like useable: true would fit.. I see, OK, option is not 100% semantic for the case. Setting the loader should be a better way.\nSomething like this:\njs\n{\n  style: {\n    loader: require.resolve('css-loader/useable',\n    options: {module: true}\n  }\n}\nBut as I mentioned earlier, everything from style and style.options goes as options.. Created #303.. It works. Although it's a bit confusing... . Is there any progress? We are considering to move our React stack to NWB and this issue is a roadblock.... How to install it? I tried npm i nwb@next and it did not work... Since your sources are compiled to lib dir I can't just install GitHub branch, or can I?\nWhat would be the correct config? This one should work?\n{\n  style: {\n    loader: require.resolve('css-loader/useable'),\n    options: {modules: true}\n  }\n}. Any plans to release a new NPM version?. What's the ETA?. Sad... okay, as I said, we're waiting specifically for the fix of at least loaders... can you release 0.16-beta.1 for example? )\nIs there any way how I can help with that?. Got it, thanks.. Confirmed.. I tried to do the following, but it did not help:\njs\nmodule.exports = function() {\n    return {\n        webpack: {\n            extra: {\n                devServer: {\n                    historyApiFallback: {\n                        disableDotRule: true\n                    }\n                }\n            }\n        }\n    };\n};\nI also tried rewrites from the above-mentioned link instead of disableDotRule, seems that extra.devServer is ignored.... Yes, I did removed node_modules and made complete reinstall.. I am using NPM version 4.3.0. Webpack version is 2.6.1. I have also upgraded nwb-sass to 0.8.0 but the issue persists.. After long debug I have figured that the issue occurs because of CSS import from SCSS file:\n```scss\n@import \"~react-datetime/css/react-datetime.css\";\n.rdt {\n    // stuff\n}\n```\nSurprisingly, it works w/o extension:\nscss\n@import \"~react-datetime/css/react-datetime\";\nAs I said, it used to work with 0.15.6.. > you can't extract usable styles\nTotally makes sense\nPreviously it used to work w/o extra config... but if you can add a way of disabling this, please go ahead.\nI think that webpack.extractText: false|null should be just enough: a strict check that if it's defined and is falsy then disable the plugin, but undefined will just use default config.. Yep, that's the case, it is working with allChunks: false. That's a very bad change, it's backward incompatible... I understand the rationale, but still...\nIn any case, I hope to see a setting to completely disable the extract text plugin because for useable styles case it is useless. . What will be the ETA of change?. Fix confirmed.. Yes of course I am aware of \u2014port CLI param, but it\u2019s not always convenient. It would be great if config will be respected ). Wow that was fast! Thanks! When to expect NPM release?. Found a weirdest bug on version 0.21.3.\nWhen I run with exports.devServer.port = '8080' I get:\nSomething is already running on port 8080.\n? Would you like to run the app on another port instead? (Y/n)\nNotice that port 8080 is in the message. I double checked http://localhost:8080 and $ lsof -i tcp:8080 \u2014 there's nothing running.\nBut when I do nwb serve-react-app --port 8080 everything just works even without changing the config :) how weird.... ",
    "cguedes": "@loklaan Thanks for your feedback. I missed that part in the documentation. . ",
    "michaelsbradleyjr": "One thing I'll note:\nany entry in customLaunchers which uses Chrome (or ChromeCanary or Chromium) for its base results in 2x instances of that browser running the tests, or the tests run twice in the same browser... it's not entirely clear, and it doesn't matter whether it's in headless mode or not. I hunted for hours trying to figure out what's causing the duplication, but at this point I think it's a bug in karma-chrome-launcher. I don't think the bug is in nwb nor karma itself, as I cannot get the same behavior with a custom launcher based on PhantomJS.. I realized today that I could alternately achieve support for Chrom...-based customLaunchers by manually including plugins: ['karma-chrome-launcher'], under karma: in nwb.config.js, no need to modify the nwb library. So, I can close this pull request, but I'll wait for your input as I'm unsure whether the approach I took earlier still has merit.\nEven so, the problem of 2x instances for customLaunchers remains. I spent a little more time reviewing the nwb and karma-chrome-launcher sources, but it's not clear to me what could be causing the double-runs.. I experience the 2x instance problem with a fresh npm-install of nwb, i.e. one that doesn't include my changes.\nHere's the karma section of my nwb.config.js:\njs\nkarma: {\n        browsers: ['Chrome_headless'],\n        extra: {\n            customLaunchers: {\n                Chrome_headless: {\n                    base: 'ChromeCanary',\n                    displayName: 'Headless Chrome Canary',\n                    flags: ['--headless',\n                            '--disable-gpu',\n                            '--remote-debugging-port=9222',\n                            'http://localhost:9876/']\n                }\n            },\n            usePolling: false\n        },\n        plugins: ['karma-chrome-launcher']\n    }\nSince I've manually included the launcher plugin under extra:, the base: 'ChromeCanary' setting works properly; without spec'ing the plugin, the plugin won't get loaded per nwb's strict  indexOf matching on 'Chrome' and karma will exit-error since it doesn't know to what 'ChromeCanary' refers. Nothing new in that regard, just restating for clarity.\nIn single runs (npm test), ~99% of the time only one instance is invoked; only one time I saw a single run manifest the 2x instance behavior. When doing npm run test:watch, about ~99% of the time 2 instances are invoked; I've never seen more than 2 and only rarely the invocation of 1 instance.\nI wish I had some clue as to why it's happening \u2013 I burned a few hours at least trying to find some \"gotcha\" in nwb, karma and karma-chrome-launcher, wherein it's obvious that a customLauncher browser is getting \"duplicated\" in the final config, such that 2 get launched, but I couldn't find anything like that.. Were you able to reproduce the 2x instances bug on your end?\nThat aside, I'm wondering if my solution (which you merged) is a little too brittle. If someone wanted to make a customLaunchers: entry with a 'PhantomJS' base, they'd run into the same kind of problem regarding the plugin not being loaded, unless they manually include it. Furthermore, matching on a string fragment like 'Chrom' or 'Phant' is a bit arbitrary \u2014 what if someone used one of the valid Chrome bases (Chrome, ChromeCanary, Chromium) or the PhantomJS base but chose  a name for their custom launcher that didn't contain the \"obvious\" prefix. The error message they'd receive wouldn't be of much help. Documentation can help in this regard, but perhaps a better solution would be to check whether a user-supplied custom launcher indicates a base that's valid with respect to the plugins that nwb makes available by default (but doesn't load by default).\nI can experiment in that regard, but wanted to get your thoughts first.. Okay, so it seems that on macOS, usePolling is getting set to true at runtime:\nhttps://github.com/karma-runner/karma/blob/master/lib/config.js#L318\ntracking it back with blame:\nhttps://github.com/karma-runner/karma/commit/66f50d7e584d4cbde820e70746be3f3378440fa8\nThat commit was about 3 1/2 years ago, and it seems that non-polling file watching on macOS works fine now, i.e. since I set usePolling to false and the autoWatch facility is picking up changes and w/ low impact on CPU usage, as I noted previously. I'll leave the karma maintainers a note.. Filed an issue yesterday with karma-runner/karma:\nhttps://github.com/karma-runner/karma/issues/2669. What do you think is the best approach? Should I include a note under the extra heading?. See #298.. Revisions submitted.. Okay, will revise and push another commit later today.. ",
    "MillerGregor": "For anyone looking... \nI tried this and found this config to work for me.\nAdded dependencies, added tsconfig.json and tslint.json and converted the index.js files in src and demo/src to .tsx\nnwb build and serve both work, but serve lost its hot-reload.  It does watch and re-transpile, but needs a page refresh.\n. I didn't get that deep with typescript and nwb.  I ended up building up an odd boilerplate with react-native-web and chose to go with flow for now.. ",
    "drager": "@Gregor1971: How do you do for build-react-component?. @haldunanil: I did not.... ",
    "kamarajuPrathi": "@insin Can you check this ?. @loklaan below is the error i get when doing info \n. C02LQEB1FD57:~ kprat1$ npm info @insin/extract-text-webpack-plugin\nnpm ERR! Darwin 15.6.0\nnpm ERR! argv \"/Users/kprat1/.nvm/versions/node/v6.9.0/bin/node\" \"/Users/kprat1/.nvm/versions/node/v6.9.0/bin/npm\" \"info\" \"@insin/extract-text-webpack-plugin\"\nnpm ERR! node v6.9.0\nnpm ERR! npm  v3.10.8\nnpm ERR! code E404\nnpm ERR! 404 Not found : @insin/extract-text-webpack-plugin\nnpm ERR! 404 \nnpm ERR! 404  '@insin/extract-text-webpack-plugin' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it (or use the name yourself!)\nnpm ERR! 404 \nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, http url, or git url.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/kprat1/npm-debug.log. Never mind I could install I had my company npm.. made it public it worked , but failed during creation of react app . Will close this . ",
    "jongold": "I'm getting the same error. ",
    "feelic": "Thanks for your very quick reply ! however, this does not sem to work over here \nmy html file looks like this:\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"/my-static-script.js\"></script>\n  </head>\n  <body>\n    <div id=\"demo\"></div>\n  </body>\n</html>\nDoes the copy of public/ happen the same way for components and apps created with nwb ?\nIs there anything specific to add to nwb.config.js to enable it ?\nWhere should public/ be located:\n /public/,\n /demo/public/,\n* or /demo/src/public/ ?. The public folder is copied in demo/dist/ in build-demo.js\nbut it does not seem to do it in serve-react-demo\nmaybe I missed something. great, thanks :) !. ",
    "evilebottnawi": "Related to css-loader and postcss-loader(little) https://github.com/postcss/postcss-loader/pull/234#issuecomment-305027605. ",
    "seanofw": "I caught it 'cuz I tried using it, and it exploded.  Didn't take long to find the cause, though.\nI would appreciate knowing when the fix is pushed into the npm registry, so that I can update my local builds to stop using my temporarily-hacked copy of nwb.. ",
    "pogonik": "Yep, just realized how stupid I was. Sorry...one of those moments...\"what! impossible! it has to work!\", but then you remember what you're doing.\nTnx. ",
    "ansumanshah": "+1 for this\nWould like to help get this in, how would you suggest we proceed?\n. ",
    "cnolimit": "That worked Great! thanks for the help  @insin \ud83d\udc4d . ",
    "mmintel": "Oh yeah thanks, didn't find that one! Moving storybook to last dependency resolved this error.. ",
    "GeorgioWan": "Thanks for merged! :blush:. ",
    "axelboc": "Awesome, thanks for the quick fix and release!. ",
    "rudfoss": "I apparently stumbled over a config that works.\n```\nconst path = require('path');\nconst nodeModulesPath = path.resolve('./node_modules');\nconsole.log('node modules path', nodeModulesPath);\nmodule.exports = {\n  type: 'react-component',\n  npm: {\n    esModules: true,\n    umd: false\n  },\n  webpack: {\n    autoprefixer: {\n      browsers: [\n        '>1%',\n        'last 4 versions',\n        'Firefox ESR',\n        'not ie < 9', // React doesn't support IE8 anyway\n      ].join(', '),\n      flexbox: 'no-2009'\n    },\n    rules: {\n      'sass': {\n        loader: 'sass-loader',\n        options: {\n          includePaths: [nodeModulesPath]\n        }\n      }\n    }\n  }\n}\n```. wow, did NOT know about that, but in retrospect I guess I should have.\nThanks for the the tip and the AWESOME tool! Sorry for polluting the issues here with such a dumb question :P. Cool, I was looking in and around the webpack configuration. Primarily around the devServer here https://github.com/insin/nwb/blob/master/docs/Configuration.md#devserver-object \nI also followed links through to webpack and express and was trying to configure express directly to serve from a static folder. Not entirely sure where it should go though, maybe somewhere around the webpack loaders?. ",
    "Sharlaan": "+1. How about going directly to Node 8.9 LTS ?\nThis version of Node seems to support everything except modules still under flag --expermimental-modules\nDoing so would allow NWB to ship fully transpiled version in lib/, while native untranspiled in es/ ? (at exception of import/export). ",
    "DethAriel": "@insin I would go a bit further than that and make the default entry point just 'src/index'. \nWhy? Simple - we use nwb in TypeScript environment, and have an src/index.tsx. I envision someone could have src/index.ts instead, and hardcoding all of that just doesn't make any sense. Maybe at some point people will start embracing esm extension. Just let webpack handle it, hardcoded extensions make it harder.. ",
    "nizarl": "I agree. How can we customize build output folders and paths? . That is interesting. Will take time to update then maintain the folk. Alternatively, would you be able to make the fix and create pull request? . ",
    "codejamninja": "I've not heard from nwb ever. I'm possibly going to fork the project so I can get the features I need.. Hmmm, ok I'll just have to fork it and maintain my own branch then. I wish this was more modular and I could do this with a plugin, but oh well.. Maybe there should be direct support for angular\nhttps://github.com/insin/nwb/issues/362. #379 . I created a pull request for it at https://github.com/insin/nwb/pull/378. @bebbi, I have no idea why it wasn't accepted.. I created a pull request for this at #377 . I just created a pull request for this at #382. Thanks. This project isn't really being developed anymore. It was great while it lasted. Use Parcel JS. https://parceljs.org. ",
    "oluckyman": "@insin Thanks!\nI want the same behavior as in css: global for node_modules and modules for local files.\nI\u2019ve updated the nwb version and make that config:\nwebpack: {\n    styles: {\n      css: [\n        {\n          include: [path.resolve('src'), path.resolve('demo')],\n          css: {\n            modules: true,\n            localIdentName: '[local]__[hash:base64:5]',\n          },\n        },\n        {\n          exclude: [path.resolve('src'), path.resolve('demo')],\n        },\n      ],\n      less: [\n        {\n          include: [path.resolve('src'), path.resolve('demo')],\n          less: {\n            modules: true,\n            localIdentName: '[local]__[hash:base64:5]',\n          },\n        }, {\n          exclude: [path.resolve('src'), path.resolve('demo')],\n        },\n      ],\n    },\n  },\nIt throws no error anymore, but seems it does not work.\nimport styles from './styles.less'\nconsole.log(styles) // {}\n. It works! thanks a lot!. ",
    "javadbat": "I can't believe you still don't let us disable hot reload and just watch for a change\n. ",
    "klzns": "A possible workaround is:\ndiff\n- \"build\": \"nwb build-react-component\",\n+ \"build\": \"nwb build-react-component && rm -rf es/**/__mocks__ && rm -rf lib/**/__mocks__ && rm -rf es/__mocks__ && rm -rf lib/__mocks__\",. ",
    "ernieyang09": "it works!!\nthanks for support!!. I got a client-view site & a manage system at the same domain.\nThey both use same oauth or session model but with a lot of different npm modules.\nI think it's more reasonable to build in one project with two entries instead of two projects.\n. ",
    "loganvolkers": "Does anyone have a workaround to make this work by modifying nwb.config.js for example?. Sounds difficult. Luckily the projects for my use cases are small, so using\nnodemon and re running the whole build is good enough.\nFor larger projects I could see that getting slow though.\nOn Jan 26, 2018 8:07 PM, \"Jonny Buchanan\" notifications@github.com wrote:\n\nThis could be awkward to implement, as we're just running Babel's CLI:\nhttps://github.com/insin/nwb/blob/master/src/moduleBuild.js\nIt'd be easy to add a --watch option and pass that along to the Babel\nCLI, except:\n\nwe run Babel twice: once for a CommonJS build in lib/ and once for\n   an ES Modules build in es/. If your app is using Webpack, it could be\n   using either of these depending on your config. We also run it\n   synchronously.\nBabel no longer supports passing the path to a .babelrc to use, so\n   we temporarily write it to the root of your component project, which\n   prevents running 2 builds at once.\n\nFor 2., we could try writing the .babelrc to a temporary directory and\nspawning the Babel CLI process with the temporary directory as its working\ndirectory. For this to work we'd have to ensure every path in the .babelrc\nis absolute. This is already true of the Babel config nwb creates itself,\nbut we'd also have to try to resolve the absolute path to any custom\npresets or plugins the user has specified in nwb.config.js.\nOnce 2. is solved, we could support having a --watch option and change\nmoduleBuild.js to spawn both Babel builds in parallel, passing a --watch\noption to it.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/insin/nwb/issues/351#issuecomment-360958168, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABGn3jDYj3rCCokEAhQEQKKG8AekLJb2ks5tOqDlgaJpZM4Obg00\n.\n. \n",
    "muhammadtarek": "Is there a workaround if the es/ build is disabled? . @redbmk Thanks for the workaround, you saved me a lot of time switching between the editor and the terminal. ",
    "redbmk": "As a workaround, I installed nodemon as a dev dependency and added a build:watch script to package.json:\nnodemon -w src -x 'rm .babelrc &> /dev/null; nwb build-react-component --no-demo'\nYou'd just need to tweak this to use whatever nwb script and flags you need.\nThen you can just run yarn build:watch or npm run build:watch.. Nice, that did the trick! Thanks @insin. I kept searching for json in the docs and didn't see anything. I think it would have helped me if instead of\n\nsuch as CSS files\n\nit said\n\nsuch as CSS or JSON files\n\nMaybe adding some more examples would help other people.. Awesome, thanks for the quick update!. ",
    "gondalez": "haha great, I can sleep tonight thanks @insin \ud83d\ude05 . ",
    "jacobhummel": "Seeing this same issue. When running a new Preact app.\nUncaught TypeError: Cannot read property 'call' of undefined\n    at Object../node_modules/preact/debug.js.options.vnode (debug.js:44)\n    at h (preact.esm.js:85)\n    at init (index.js:13)\n    at Object../src/index.js (index.js:20)\n    at __webpack_require__ (bootstrap 62a4c64785a02ffa7484:669)\n    at fn (bootstrap 62a4c64785a02ffa7484:87)\n    at Object.0 (preact-name.svg:1)\n    at __webpack_require__ (bootstrap 62a4c64785a02ffa7484:669)\n    at ../../../usr/local/lib/node_modules/nwb/node_modules/ansi-html/index.js.module.exports (bootstrap 62a4c64785a02ffa7484:715)\n    at app.js:719. ",
    "Kirk-Wang": "@mikkelwf https://github.com/Kirk-Wang/old-ie-react-starter/blob/master/nwb.config.js. ",
    "Kerumen": "Or maybe the good option would be to empty the dir, as create-react-app does.. Ca I submit a PR for this?. ",
    "reviewher": "@jamrizzi the documentation covers the HTML loader: https://github.com/insin/nwb/blob/master/docs/Configuration.md#extra-object\n```js\nmodule.exports = {\n  type: 'react-app',\n  / webpack.extra is the escape hatch/\n  webpack: { extra: {\n  /* standard mantra for html loader */\n  module: {\n    rules: [\n      {test: /\\.html$/, loader: 'html-loader'}\n    ]\n  }\n\n} }\n};\n```. ",
    "rguderlei": "The --unsafe-perm option does the trick. See  https://github.com/Medium/phantomjs/issues/707. ",
    "daoxxx": "Thank you.\nAs a newbie, I didn't know what Phantomjs is needed for, so i moved to create-react-app.. ",
    "abdurrahmanekr": "I've solved that issue by using NODE_ENV=development nwb build-react-app command. But, when the NODE_ENV is equal to production it doesn't work (NODE_ENV=production). How can I do production build ?. I've solved that issue. I've realized what is the error when I visited to error link. Here is the error that is caused:\nElement type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\nI have a structure as below:\n\u251c\u2500\u2500 LeftSideView.js\n\u251c\u2500\u2500 ShortcutsView.js\n\u2514\u2500\u2500 index.js\nindex.js:\n```javascript\nimport LeftSideView from './LeftSideView';\nimport ShortcutsView from './ShortcutsView';\nexport {\n    LeftSideView,\n    ShortcutsView,\n}\nShortcutsView:javascript\nimport React, { Component } from 'react';\nexport default class ShortcutsView extends Component {\n    render() {\n        return (\n            \n\nTest\n\n\n        );\n    }\n}\nLeftSideView:javascript\nimport React, { Component } from 'react';\nimport {\n    ShortcutsView,\n} from './'\nexport default class LeftSideView extends Component {\nrender() {\n    return (\n        <div>\n            <ShortcutsView />\n        </div>\n    );\n}\n\n}\nIf I import the ShortcutsView as you can see above. It's value has been `undefined`. But I've changed that importing type as below. As a result it works properly:javascript\nimport ShortcutsView from './ShortcutsView';\n```\nI've no any idea how it works in development mode \ud83e\udd14. I'm sorry, I wasn't knowing that nwb has to 'extra' configuration. I've just found it :). ",
    "dharric": "When I do a search for the ShortcutsView import I get exactly the same two entries. What precisely is the change you made?. ",
    "imagine10255": "also is this https://github.com/react-boilerplate/react-boilerplate/issues/2518\ntry !?. ",
    "zsherman": "same issue here, any thoughts @insin?. Ah brilliant, thanks @insin!. seems like this issue was fixed? https://github.com/mishoo/UglifyJS2/issues/448. If babel is running before uglification, why would we be encountering this problem?. ",
    "hamza-hajji": "I'd also like to know, this has probably been brought up before, @insin. ",
    "dan-kez": "I am also having the same issue.\nEdit: I have created a one off webpack config that has my aliases in it. Unfortunately that also did not work.\nEdit 2: It looks like this plugin does work for the lib directory but has no effect on the es directory.\nmy nwb config:\n```JS\nconst path = require('path');\nmodule.exports = {\n  type: 'react-component',\n  npm: {\n    esModules: true,\n    umd: {\n      global: 'KlaviyoStyleReact',\n      externals: {\n        react: 'React',\n        reactdom: 'ReactDOM',\n      },\n    },\n  },\n  babel: {\n    plugins: [\n      'jsx-control-statements',\n      ['babel-plugin-webpack-alias', { config: './webpack.config.js' }],\n    ],\n  },\n  webpack: {\n    rules: {\n      babel: {\n        test: /.jsx?/,\n      },\n    },\n    extra: {\n      resolve: {\n        extensions: ['.js', '.jsx', '.json'],\n      },\n      node: {\n        process: false,\n      },\n    },\n    aliases: {\n      Components: path.resolve(__dirname, 'src/Components'),\n      Constants: path.resolve(__dirname, 'src/Constants'),\n      Assets: path.resolve(__dirname, 'src/Assets'),\n      Utils: path.resolve(__dirname, 'src/Utils'),\n    },\n  },\n};\n```\nmy webpack config (added this so eslint would be able to find my aliases)\n```JS\nconst path = require('path');\nconst extendedNwbWebpackConfig = require('./nwb.config').webpack;\n// Minimal Webpack config to supply to Eslint.\n// This is not actually used by NWB but instead mirrors\n// the resolve and loader rules.\nmodule.exports = {\n  resolve: {\n    modules: [path.resolve(__dirname, 'lib'), 'node_modules'],\n    extensions: extendedNwbWebpackConfig.extra.resolve.extensions,\n    alias: extendedNwbWebpackConfig.aliases,\n  },\nmodule: {\n    rules: [\n      {\n        test: /.jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n      },\n    ],\n  },\n};\n``. Looking into it more, thebabel-plugin-webpack-alias` explicitly exits if the callee is not a require statement.\nhttps://github.com/trayio/babel-plugin-webpack-alias/blob/master/src/index.js#L139\nI'm going to open up an issue over there to see if there is a way to expand the plugin to support es6.. I've had luck running the following as my build step. I've stopped trying to use the copy plugin.\nnwb build-react-component --copy-files && rm -rf es/**/__mocks__ && rm -rf lib/**/__mocks__ && rm -rf es/__mocks__ && rm -rf lib/__mocks__. ",
    "hbar-digital": "I'm experiencing the same issue.. ",
    "mapreal19": "\nGetting Babel to rewrite your cleaner requires to relative requires which will work in the published version would be the way to go if you want that, but AFAIK there are a number of different plugins for that and I don't have experience with any of them.\n\nI was able to make it work with: https://github.com/tleunen/babel-plugin-module-resolver. @alexghi sure.\nThis is how nwb.config.js looks:\nmodule.exports = {\n  type: 'react-component',\n  npm: {\n    esModules: true,\n    cjs: false,\n    umd: false,\n  },\n  babel: {\n    plugins: [\n      'flow-react-proptypes',\n      ['module-resolver', {\n        'root': ['.'],\n        'alias': {\n          'components': './src/components',\n          'lib': './src/lib',\n        },\n      }],\n    ],\n  },\n...\n}\nIn this case you could access your components or lib files. E.g. import Popup from 'components'. ",
    "alexghi": "@mapreal19 could you provide a snippet of your config?. ",
    "quorak": "what is the best way to include these. I tried:\n{\n  babel: {\n    env: {\n      'targets': {\n        'browsers': [\n          'last 2 versions',\n          'safari >= 7',\n          'android >= 4.4',\n          'ie >= 9'\n        ]\n      },\n      'debug': true,\n      'include': ['es6.map', 'es6.set', 'es7.array.includes']\n    }\n  }\n}\nbut it does not help. . ",
    "etc1208": "Would it be possible to allow custom configuration for the demo servers? same question. ",
    "coryhouse": "Ah! Easy change. :) Thanks for the quick reply! \ud83c\udf89. ",
    "xtuc": "I'll subscribe to this issue, let me know if you have any issue when upgrade to Babel 7.\nBtw you seem to rely on babel-preset-stage-*, I would recommend you using babel-preset-env instead.. Sorry I forgot to say that instead of the stage-x presets it's better to use the individual proposal/syntax plugins. For example for destructing: babel-plugin-transform-destructuring.\nStage presets are subject to breaking changes quite often since proposal are moving. . babel-preset-env: { target: \"current\" } will make the trick since it will transpile whatever features you used against the current Node environment.. We indeed changed the way extending a native class works, and it seems to be broken in loose mode as you mentioned.\nEdit: after playing around with some code, I just go what you was saying. You will need to remove the constructor hack yes.\nThe second bug sounds strange to me, could you please maybe open an issue on the inferno preset? . ",
    "ugeng": "Hi, @insin! Thank you for your great work at nwb!\nDid I understand correctly that babel7 isn't supported yet?\n. ",
    "tgreen7": "Any updates on this? Will nwb be adding support for babel 7?. Ok I think I found the proper way to do this:\nwebpack: {\n    extra: {\n      module: {\n        rules: [\n          {\n            test: /\\.md$/,\n            use: [\n              {\n                loader: \"html-loader\"\n              },\n              {\n                loader: \"markdown-loader\",\n                options: {\n                  /* your options here */\n                }\n              }\n            ]\n          }\n        ]\n      }\n    }\n  }. I just found the options to turn off the wds consoles by adding \ndevServer: {\n    clientLogLevel: \"warning\"\n  } \nto the nwb.config.js. Still havent found a way to turn off the hmr consoles.. Found it in the docs. https://github.com/insin/nwb/blob/master/docs/FAQ.md#how-can-i-use-react-hot-loader-instead-of-react-transform. ",
    "adam-digirati": "In case anybody having the same issue, I ended up using the webpack html-loader plugin and import the required files as a string.\nmodule.exports = {\n  type: 'web-module',\n  npm: {\n    esModules: true,\n    umd: false\n  },\n  webpack: {\n    extra: {\n      module: {\n        rules: [{\n          test: /\\.html$/,\n          exclude: /node_modules/,\n          use: {loader: 'html-loader'}\n        }]\n      }\n    }\n  }\n}\nAnd instead of refferring the contents from \nwindow.__html__['expected.html']\nsimply used\nimport expectedHTML from './expected.html';\nThis solves the problem for the original example above. Also, it seems to be a much more elegant solution. But still, it would be great if we could add 3rd party karma preprocessors to the nwb config.. Thanks. I failed to spot thekarma.extra.. ",
    "ev-dev": "Webpack 4 = ~60-98% build time improvements over 3, needless to say looking forward to the update. ",
    "trevorhalvorson": "Thanks, it's working as expected.. ",
    "kesla": "Amazing! Appreciate it a lot!. Saw that 0.21.0 is out!. ",
    "AMorgaut": "I just found the Loki tool that may be another option. ",
    "Fi1osof": "Still waiting for.... ",
    "bluce1017": "More info:\nDemo/dist/*.css looks like this:\n.button-container__src-styles__hQ8y-{display:-webkit-box;display:-ms-flexbox;display:flex}.button-12345__src-styles__2O_vv{padding:8px 16px}\nBut both /es/.css & /lib/.css have:\n`.button-container {\n    display: flex;\n}\n.button-12345 {\n    padding: 8px 16px 8px 16px;\n}\n`\nIs webpack/postcss not supported for lib/es builds? Is there a way to enable it?. Sorry for leaving this open, I eventually decided upon using https://www.styled-components.com/ in my project which negated the need for postcss. Styled components works with both the demo and the published libraries.. ",
    "Carr1005": "I have encountered a similar issue today, but not sure if @ivanasetiawan has the same one?\nIn my situation, the output just mentioned that :\ntar (child): bzip2: Cannot exec: No such file or directory\nCause I'm using a very minimal docker debian base image, so I don't have bzip2 that tar need to uncompress .bz2 file for installing phantomjs-prebuilt.\nSo I just install it and everything goes cool.\napt-get install bzip2\nFull related error information :\n```\nroot@32f0ad0b58ca:/# npm install -g nwb\nnpm WARN deprecated nodemailer@2.7.2: All versions below 4.0.1 of Nodemailer are deprecated. See https://nodemailer.com/status/\nnpm WARN deprecated node-uuid@1.4.8: Use uuid module instead\n/usr/bin/nwb -> /usr/lib/node_modules/nwb/lib/bin/nwb.js\n\nuws@0.14.5 install /usr/lib/node_modules/nwb/node_modules/uws\nnode-gyp rebuild > build_log.txt 2>&1 || exit 0\nphantomjs-prebuilt@2.1.16 install /usr/lib/node_modules/nwb/node_modules/phantomjs-prebuilt\nnode install.js\n\nPhantomJS not found on PATH\nDownload already available at /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2\nVerified checksum of previously downloaded file\nExtracting tar contents (via spawned process)\nError extracting archive\nPhantom installation failed { Error: Command failed: tar jxf /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2\ntar (child): bzip2: Cannot exec: No such file or directory\ntar (child): Error is not recoverable: exiting now\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\nat ChildProcess.exithandler (child_process.js:199:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:920:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:230:5)\n\nkilled: false,\n  code: 2,\n  signal: null,\n  cmd: 'tar jxf /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2' } Error: Command failed: tar jxf /tmp/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2\ntar (child): bzip2: Cannot exec: No such file or directory\ntar (child): Error is not recoverable: exiting now\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\nat ChildProcess.exithandler (child_process.js:199:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:920:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:230:5)\n\n/usr/lib\n`-- (empty)\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/nwb/node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nnpm WARN babel-plugin-inferno@3.3.1 requires a peer of inferno@3.x but none was installed.\nnpm ERR! Linux 4.4.27-moby\nnpm ERR! argv \"/usr/bin/node\" \"/usr/bin/npm\" \"install\" \"-g\" \"nwb\"\nnpm ERR! node v6.12.3\nnpm ERR! npm  v3.10.10\nnpm ERR! code ELIFECYCLE\nnpm ERR! phantomjs-prebuilt@2.1.16 install: node install.js\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the phantomjs-prebuilt@2.1.16 install script 'node install.js'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the phantomjs-prebuilt package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node install.js\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs phantomjs-prebuilt\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls phantomjs-prebuilt\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /npm-debug.log\nnpm ERR! code 1\n``` . ",
    "ivanasetiawan": "OK after trying many things.. I solved this error by uninstalling yarn. . ",
    "dnfield": "Any chance you could make Phantom a peer dependency?  I'm behind a proxy at work and cannot install PhantomJS.\nAs a temporary workaround I create a dummy executable in /usr/local/bin but it's not ideal.  I'd like to be able to have my team install this and not need to fake having Phantom installed (or have Phantom installed at all):\n```\n!/bin/bash\necho 2.1.1\n```\nAnd then npm i -g --unsafe-perm nwb\nAt some point they're supposed to fix what's blocking Phantom for us, but it'd be nice to not strictly require it to use NWB's other functionality. ",
    "jbadeau": "Please make phantom a peer dependency. . ",
    "useless-stuff": "Reading other issues related to sass I've found a way :)\nwebpack: {\n        rules: {\n            \"less\": {\n                options: {\n                    modifyVars: { \"@primary-color\": \"red\" }\n                }\n            }\n        }\n    }\nSorry :). ",
    "A11oW": "What about, if create task for nwb like as 'demo', which will be compile styles through webpack?. ",
    "smurrayatwork": "I'm having similar issues, here. @insin Any thoughts/comments on this issue? Thanks!. ",
    "samrith-s": "I'm struggling with this as well. I have a table component which heavily relies on CSS to style itself. So, I would like a way to package the stylesheet (SCSS) with the ES and Lib.. Hey @insin, thanks a lot for the reply. The problem was indeed with out ESLint setup.\nFor the record if anybody else faces this problem in the project which uses your package, you might wanna check if the project uses eslint-plugin-import.\nIf it does, just add your package in the import/core-modules of your .eslintrc file like so:\n\n. ",
    "aviskarkc10": "This might solve your problem #486 . ",
    "hanford": "@insin wasn't sure if I was supposed to base off of the next branch or master, I can redo the PR on next if master was incorrect.\nCheers! \ud83c\udf7b. ahh, whoops! .. updated. ",
    "ammmze": "I've currently got this PR targeting master. I was gonna target next (like the PR default comment mentions), but that looks like it hasn't been updated since june last year.. ",
    "RaedsLab": "Thank you very much, the CSS version works! \nI'm overriding some less variables with ant, and would really appreciate your help getting less to work. . Thank you this works perfectly.. ",
    "NiklasRosenstein": "I'd rather it would not call Git at all if I don't tell it to, or have an option to turn off Git. \ud83d\ude2f . ",
    "manglobe": "use nwb build-react-component --copy-files?. ",
    "iatzmon": "This issue seems to be specific to my project configuration, I tried to create a new nwb app and managed to configure the plugin without any issues. Ok, I managed to resolve the issue. The problem happened because I'm using aliases, and was caused by this issue: https://github.com/babel/babel/issues/3969. \nThe solution was to require the plugin in the config file and pass it to the babel config instead of passing it by name.\n{\n    ...\n    babel: {\n        \"plugins\": [require(\"babel-plugin-emotion\")]\n    }\n    ...\n}. ",
    "u0078867": "Node version: 6.9.4\nnpm version: 3.8.9\nUsing on Windows 7 64-bit\nOlder nwb versions give the same problem.. ",
    "nmccready": "This is released and happening from npm .. ",
    "marek-baranowski": "+1. ",
    "r20": "I updated node to v8.11.1 and npm to 6.0.0 and now it works.. ",
    "pr0da": "Nvm, I've just installed the latest version and configured it in the nwb.config.js under babel/plugins. . ",
    "kirakik": "@AquiGorka did you figure out a way around this?. ",
    "AquiGorka": "@kirakik I did not and in the end used create-react-app which has built-in support for env vars.. ",
    "fc": "In your nwb.config.js file, use the extra option to add webpack's environment plugin:\n```\nconst webpack = require(\"webpack\");\nmodule.exports = {\n  type: \"react-component\",\n  npm: {\n    esModules: true,\n    umd: {\n      global: \"SomeApp\",\n      externals: {\n        react: \"React\"\n      }\n    }\n  },\n  webpack: {\n    extra: {\n      plugins: [\n        new webpack.EnvironmentPlugin({\n          BLAH: \"aha\"\n        })\n      ]\n    }\n  }\n};\n```\nIn the above example, access it as process.env.BLAH\nYou should be able to have dynamic env vars if you do\nprocess.env.NODE_ENV === 'production' ? {secretKey: '....'} : {}\nReference:\nhttps://github.com/insin/nwb/blob/master/docs/Configuration.md#extra-object\nIf you wanted to use dotenv, you could also use it like so (untested):\n```\nimport dotenv from 'dotenv';\n/ etc /\nnew webpack.EnvironmentPlugin({\n  ...dotenv.config().parsed\n}),\n\n```\nOr checkout the dotenv webpack plugin:\nhttps://github.com/mrsteele/dotenv-webpack. \nIf I change the browser to ChromeHeadless in nwb.config.js that solves it and maybe solves it for someone else...\nkarma: {\n    browsers: [\"ChromeHeadless\"]\n  },. Keeping this open since I am still running into issues and it seems like this should be configurable but not clear how to get it to work ?.... ",
    "lean": "same issue here. Yes, it is a blocker. So I will try your suggestion.\nThanks. ",
    "haani104": "@lean If the above is a blocker for you, I suggest you look into other options for creating React library. Like this one https://github.com/transitive-bullshit/create-react-library. ",
    "haldunanil": "@drager Did you ever resolve this?. I was able to resolve it using TypeScript's own compiler. Essentially, I replaced my build config, which was:\n\"build\": \"npm-run-all build-css build-min-css build-js\",\n...\n\"build-js\": \"nwb build-react-component --no-demo --copy-files --keep-proptypes\",\nwith this:\n\"build\": \"npm run clean:ts && npm run build:all\",\n...\n\"build:ts\": \"tsc\",\n\"build:all\": \"npm-run-all copy:css-to-lib build:ts\",\nI also configured a tsconfig.json file that the tsc command uses when building the output. That one looks like this:\n{\n  \"compilerOptions\": {\n    \"outDir\": \"build/lib\",\n    \"module\": \"commonjs\",\n    \"target\": \"es5\",\n    \"lib\": [\"es5\", \"es6\", \"es7\", \"es2017\", \"dom\"],\n    \"sourceMap\": true,\n    \"allowJs\": true,                    // todo: make this false when all .js files have been converted to .ts/.tsx\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\",\n    \"rootDirs\": [\"src\"],\n    \"forceConsistentCasingInFileNames\": true,\n    //    \"noImplicitReturns\": true,    // todo: enable this when all .js files have been converted to .ts/.tsx\n    //    \"noImplicitThis\": true,       // todo: enable this when all .js files have been converted to .ts/.tsx\n    //    \"noImplicitAny\": true,        // todo: enable this when all .js files have been converted to .ts/.tsx\n    //    \"strictNullChecks\": true,     // todo: enable this when all .js files have been converted to .ts/.tsx\n    \"removeComments\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"noUnusedLocals\": true,\n    \"declaration\": false,               // todo: make this true when all .js files have been converted to .ts/.tsx\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\n    \"node_modules\",\n    \"build\",\n    \"build/lib\",\n    \"scripts\",\n    \"es\",\n    \"lib\",\n    \"tests/**\",\n    \".storybook/**\",\n    \".idea\",\n    \".html\",\n    \"src/**/*.test.js\",\n    \"src/**/*.test.ts\",\n    \"src/**/*.stories.js\",\n    \"src/**/*.stories.ts\"\n  ]\n}\nI omitted the css stuff above for brevity, let me know if this helps!. ",
    "farminf": "Thank you it was usefull. ",
    "motleydev": "So dumb. :) I saw the minified css file and it looks more or less ok. I decided to grab a chunk that had my font-face declarations to get a closer look and reformat it. I had changed my editor syntax highlight to scss so that I could better view my postcss rules. What I didn't realize at the time was that when I was adding comments with scss as the \"language\", it was using double-slash style, which then broke my stylehseet. :) Sorry for the confusion.. ",
    "patrickmcelwee": "I am still getting this issue with nwb v0.23.0, because it seems the mini-css-extract-plugin is still not working on 4.16: https://github.com/webpack-contrib/mini-css-extract-plugin/issues/69#issuecomment-413974708\nI think releasing a version with the latest version of webpack is the way to fix this.. ",
    "lsmoura": "I think this is what you need...\n\nCreate your app repository using nwb new ....\nInstall dependencies. For example: yarn add material-ui\nInstall devDependencies for non-production: yarn add --dev nwb\nBuild your app\nBundle your app in a deployable manner: yarn build -- your files will be inside the dist/ folder.\n\nIf anyone wants just the files and dependencies (no nwb) just do yarn install --production. If someone uses your package as a module, this will work as well. On the other hand, if someone is going to use your repo to improve the source and testing and re-building, a regular yarn install will install everything you need (nwb included).\nHope that helps.. $ nwb --help\nOutput highlight:\nOptions:\n    -f, --force   force project creation, don't ask questions\n    --es-modules  enable or disable (--no-es-modules) an ES modules build\n    --no-git      disable creation of a Git repo with an initial commit\n    --react       version of React to install for React apps & components\n    --umd=<var>   enable or disable (--no-umd) a UMD build\n. a plain nwb created project does not simply copy the css files. it bundles and minifies them. If you're using import 'file-name-here.css'; or require('file-name-here.css'); it will render the same output: dist/app.hash.css.\nHave you changed anything on your nwb config files?\nNo require function should exist on the final bundled dist/app.hash.js file.. the peerDependencies are not installed by default. It just warns the requiring component that it needs that dependency to be installed by someone.\nNow, if you want to have an external dependency not added on your bundle (this has nothing to do with peerDependencies directly, btw), you can just tell webpack to do so. Add the configuration in the webpack.extra on nwb.config.js file. In the following snipped, i'm adding uniqid to external dependencies:\nmodule.exports = {\n  type: 'react-app',\n  webpack: {\n    extra: {\n      externals: 'uniqid',\n    },\n  },\n};\nIn this case, you'll need to provide uniqid some other way to the app, as a global variable in window.uniqid. Maybe by using a umd import?. If you really don't want your new project to be a git repo, you can just delete the .git folder, and probably the .gitignore file as well.\nAlso, check this out. @AndyOGo Check my comment on this thread. You can entirely disable the creation of the git repo.\nEdit:\nWe're editing our answers faster then expected!. ",
    "benyitzhaki": "the tests seem to fail regardless of the change. ",
    "MichaelDeBoey": "This one is already in master and can be closed. ",
    "mikhuang": "Glad you resolved your issue. It might be useful for others if this could be closed?. ",
    "craigfo": "Resolved using filename: process.env.NODE_ENV === 'production' ? '[name].[hash:8].min.js' : '[name].js'\nPlease delete this question.. ",
    "fedemar": "Nevermind the issue, I had to import from compiled files inside dist folder like so import pica from 'pica/dist/pica';. ",
    "thefreymaster": "I'm having the same problem.  . ",
    "paschalidi": "This issue is a: Question / support request\n<!-- TROUBLESHOOTING\nThese checks might help you diagnose whether something is wrong with nwb or your setup:\n\nInstalled `nwb` globally with version `v0.23.0`\nInstalled `npm` globally with version `6.4.1`\nInstalled `node` globally with version `v8.10.0`\n\nModules are installed in your project\n```\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY @babel/core@^7.0.0\n\u251c\u2500\u2500 @vivy/vivy-components@0.0.5\n\u251c\u2500\u2500 babel-eslint@8.2.6\n\u251c\u2500\u2500 babel-loader@8.0.4\n\u251c\u2500\u2500 babel-plugin-rewire@1.1.0\n\u251c\u2500\u2500 babel-plugin-transform-decorators-legacy@1.3.5\n\u251c\u2500\u2500 eslint@4.19.1\n\u251c\u2500\u2500 eslint-config-airbnb@16.1.0\n\u251c\u2500\u2500 eslint-config-prettier@2.9.0\n\u251c\u2500\u2500 eslint-plugin-import@2.14.0\n\u251c\u2500\u2500 eslint-plugin-jsx-a11y@6.1.1\n\u251c\u2500\u2500 eslint-plugin-prettier@2.6.2\n\u251c\u2500\u2500 eslint-plugin-react@7.11.1\n\u251c\u2500\u2500 fetch-mock@6.5.2\n\u251c\u2500\u2500 i18next@11.9.1\n\u251c\u2500\u2500 i18next-browser-languagedetector@2.2.3\n\u251c\u2500\u2500 jest@23.4.1\n\u251c\u2500\u2500 json5-loader@1.0.1\n\u251c\u2500\u2500 mkdirp@0.5.1\n\u251c\u2500\u2500 nwb@0.23.0\n\u251c\u2500\u2500 pako@1.0.6\n\u251c\u2500\u2500 prettier@1.13.7\n\u251c\u2500\u2500 prop-types@15.6.2\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY react@16.4.1\n\u251c\u2500\u2500 react-dom@16.4.1\n\u251c\u2500\u2500 react-hot-loader@4.3.3\n\u251c\u2500\u2500 react-i18next@8.0.7\n\u251c\u2500\u2500 react-redux@5.0.7\n\u251c\u2500\u2500 react-router@4.3.1\n\u251c\u2500\u2500 react-router-dom@4.3.1\n\u251c\u2500\u2500 react-test-renderer@16.4.1\n\u251c\u2500\u2500 rx-connect@0.7.0\n\u251c\u2500\u2500 rxjs@5.5.11\n\u251c\u2500\u2500 scrypt-async@2.0.0\n\u251c\u2500\u2500 styled-components@3.3.3\n\u251c\u2500\u2500 text-encoding@0.6.4\n\u2514\u2500\u2500 webpack@4.16.1\n```\n\ntrying to import a simple `.json` file in my `src` but getting error when `webpack` compiles \n```\n ERROR  in ./src/file.json (./node_modules/json-loader!./src/file.json)\nModule build failed (from ./node_modules/nwb/node_modules/babel-loader/lib/index.js):\nSyntaxError: Unexpected token, expected ; \n\n  1 | {\n> 2 |     \"\"example: {\n    |                         ^\n  3 |         \"title\": \"example\",\n\n``` \n\nI know `webpack >=2` should be able to habdle `.json` files out of the box so I am a bit confused.\n.",
    "benhowes": "I can see the contribution guide is out of date - it looks like it should say that PRs should be opened against master rather than next.\nas far as I can tell, nothing is happening with this project, so I'm not updating this for now, but I'd be more than happy to get this fixed up if there is a good chance of getting it merged. Thanks. ",
    "bjankord": "I'm seeing the following vulnerabilities listed developing a new react component with nwb.\n\n. ",
    "ArminTaheri": "Also getting these alerts:\n\nvulnerabilities.txt\n. ",
    "bwalsh": "Issue was on my side.  Resolved by commenting out \n//registry.npmjs.org/:_authToken=XXXXX\nin ~/.npmrc. ",
    "AndyOGo": "@Ismoura\nThank you for your answer.\nYeah, that's correct. In fact that is what I did, just delete .git/ folder.\nBut I would really rather like to have it as an opt-in option \ud83d\ude4f \n~~May I ask where this behaviour is documented, I couldn't find it at a first glance?~~\nEdit:\nWau you just where a second quiecker than me^^\nVery good to know about --no-git flag, thanks a lot:). @lsmoura \nhaha, thanks a lot, nice to chat with you. ",
    "okonuskan": "For anyone having similar problems, my issue was that I had an older version of React in packages.json in a parent directory. I assumed nwb had its own version of React built in, but it turns out it uses the React version that is available in the folder (or parent folder).. ",
    "bakedbean": "Yes that was the answer, I meant to come back here and post that and forgot, thanks for the followup. ",
    "everscending": "According to https://iamturns.com/typescript-babel/, babel will transpile .ts files if --extensions '.ts' is passed to the babel-cli, but unfortunately not settable in .babelrc.  So webpack really needs to be in the mix to make this work.. ",
    "StevenLangbroek": "Rather than removing, why not test whether you get the expected default configuration?\n. "
}