{
    "TimOliver": "Hi there nishan!\nUm... do you have a screenshot? I'm not exactly sure what you're trying to do here. The crop view works off one UIImage, but there are 2 UIImageView elements inside the crop view that display it.\n. Sorry guys. I'm not exactly sure what you're trying to achieve here. :/\nYou can reset the cropping/rotation settings by tapping the white button in the very middle of the toolbar. \nThe main function of this view controller is to crop/rotate images, so if you want to apply filters to them, I'd recommend looking at Instagram's model of having a separate view controller to apply filters to the already-cropped image. Given how complex this thing ended up becoming, trying to apply filters to images inside this view controller might be kind of messy. ;)\nIn any case, if you've already got it somewhat working, I'd love to see that! Please consider uploading a sample app showing that off. And as always, I'm happy to review and potentially merge any pull requests you send my way!\nThanks!\n. Oops! Sorry about that! I was playing with exporting crop settings and forgot to include a new class in the example project. Try it now! :)\n. I was considering this sort of the feature, under the name of 'fine-grain rotations'. It's something I'd love to have, but it wasn't feasible for me to add.\nThe problem is that introduces a new layer of complexity that I wasn't sure how to handle. If you look at the Photos app, when you rotate an image with the wheel, the crop view is smart enough to zoom the image in, so the box still stays within the bounds of the image, and when you swipe around, the box only allows scrolling in that the box still stays inside the image. There's some pretty epic math going on there.\nThe main problem I couldn't figure out was how you could get a scroll view to constrain its scroll bounds to a rotated image. One of my colleagues suggested it might be a simple matter of rotating the whole scroll view, but that would require some testing, and may not even work.\nAnyway, the crux of the matter is that while it'd be a really cool feature to have, I don't really have a need for it in my own use case for this library, and so it's not worth me spending the time researching, implementing and debugging this.\nIf anyone else thinks they know how to implement this, feel free to contribute a PR (But ONLY if it behaves like the iOS 8 Photos app). In the meantime, I'll leave this issue open.\n. Oh! Thanks for the heads-up on that library! I hadn't seen that one before.\nHrmm, I just downloaded it and had a play with it. It certainly allows fine-grain rotations, but the image isn't inside a scroll view, so you can't drag it around. That in itself is very easy to implement, but it's only the first part of the puzzle for the sort of feature we're talking about here.\nI'm pretty sure the solution involves actually rotating the UIScrollView as a whole, and adjusting the contentSize to match the bounds of the cropping box somehow. This is opposed to the '90-degree' feature in there already as that actually just rotates the image view, but leaves the rest of the view untouched.\nIt probably just needs a lot of experimentation and playing around with a UIScrollView to work out how it behaves when it's rotated, but that's sadly something someone else is going to have to try out.\n. I'm going to close this off, since I'm probably not going to get the chance to implement it.\nLike I said above, I'm pretty sure this is simply just a matter of applying a rotation to the transform property of the UIScrollView. After breaking down Apple's own cropper, I now think they actually did implement theirs in the traditional sense, where they've actually got a hole in the dimming view. This is opposed to my implementation where a clipped copy of the image is being displayed over the image view.\nIf this is the case, then it would mean having to basically scrap the entire implementation of this cropper view and rewriting it from scratch, sadly something I don't have time for.\nIf you're still interested in trying to write one yourself, I wish you all the best of luck! :)\n. Awesome! Thank you so much for that, Bas! :)\n. Glad to hear you're enjoying the library, Francis! Thanks a lot!\nOh! Woah! I thought __block and __weak were the same! Oh dear.\nNicely spotted! Thanks a lot for fixing that for me!\nBlimey. I think I need to go back and read up on memory management again... ^_^;\n. Awesome! Thank you so much for that!\n. Is it just Portuguese-BR that's just borked? Or is it other languages too? I can't imagine all of the other languages have been broken in Carthage all this time and no one else has noticed.. Hi Retso!\nOh... no that's no presently possible in the current implementation, sorry. \nIt would be relatively simple to implement though. You'd just need to modify the view controller class, and the toolbar class to properly expose some properties in order to control hiding the buttons and setting an initial aspect ratio.\nI'm a bit too busy to do it right now, sorry, but if you feel like trying it out yourself, I'll happily accept a pull request. :)\nThanks!\n. Hahah thanks a lot guys!\nI'll leave this issue open to remind me to actually add proper support for this. :)\n. Hi guys! The ability to lock the crop view to a specific aspect ratio has now been merged in from another contributor. Hopefully it works for you. :)\n. Hi Ray!\nThanks a lot! I'm glad you've found this library useful!\nAwww, bugger! Yep, I think I just found what you've outlined here. Nicely found.\nAlright. I'll have to have a play with it and see if I can resolve these issues. Thanks for the heads-up!\n. Oh! Thanks a lot for that! :)\n. Awesome! Thanks for that!\n. Hi Arjun! Glad you're enjoying the app!\nOh dear! I remember seeing that once or twice during development in the simulator, but never on the device. I did a bit of research just now and it looked like it's an issue that arrises if a memory warning occurs.\nHow big is the image you were trying to crop?\n. Hrmm, and what was its pixel resolution? When you're manipulating it in the crop controller, it gets decompressed into raw pixel data, which can take up a lot more memory than what's on disk.\nI might have to look into making the controller a bit more memory efficient. Or if worse comes to worse, you can always downscale your images before sending them to the crop controller.\n. Aw. That's absolutely tiny. That shouldn't be causing any memory issues. :S\nI'm not sure then. Is it happening reliably each time you use the cropper?\nAnd, just in case, are you doing any rotations to the image?\n-Tim\nOn 5 August 2015 at 13:20, ArjunSa786 notifications@github.com wrote:\n\n750X1334 resolution.i was pick image in image picher controller and pass\nto image in cropview.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/11#issuecomment-127859974\n.\n. Hrmm... there's literally none of my code in that call stack. I wonder what's going on. :S\n. Oh! That actually did it! I didn't think to look there; I was looking at my actual layout code to try and figure out what was going on. I can't believe I completely missed that.\n\nAnyway, I've updated it in the repo now (I elected to use the image.scale property instead of 1.0f just in case). Please give it a try and tell me if it's working for you now (And I'll reopen this issue).\nThanks again!\n. Can you please paste the code you wrote to present the view controller here?\nI originally added cropRegionInsets since I was considering adding a navigation bar at the top and this was to define the maximum bounds of the cropping view. That being said, no matter what the region insets are, it shouldn't mess with the aspect ratio.\n. Closing this off as it was never followed up.\n. Oh wow! I hadn't realised that.\nThank you so much for that! :)\n. Thanks for the post!\nErm, okay. That's a bit weird. Can you please post the code you're using to present the view controller so I can see that for myself?\nThanks a lot! I'm really busy right now, so depending on how complex this issue is, I don't think I can help out much at the moment.\n. What the heck? I've never seen that before. :S\nWhat version of iOS is that? And how are you presenting the view controller onscreen (ie navigation controller)?\n\nOn 12 Sep 2015, at 8:02 AM, iori57 notifications@github.com wrote:\nI'm getting a weird header bar that appears at the top of the view controller when using this library. It appears both in simulator (iphone 4,5,6 regardless) as well as real device (tested on iPhone 6 plus).\nHere's the screenshot of portrait view that causes image and crop border to be not aligned:\nAnd here's a screenshot of landscape view that causes the 'Done' button to be blocked:\nAnyone facing the same issue?\nMeanwhile I will try to debug this on my side as well.\n\u2015\nReply to this email directly or view it on GitHub.\n. Ahhhh, yep! That would certainly do it. XD\n\nI never intended the view controller to be pushed to a UINavigationController, so I never tried that out. \nAhaha, yeah, Katsumi's PEPhotoCropEditor is designed to work with a navigation bar running along the top, just like the older system cropper did in iOS 6. But since this one keeps all of its logic in a toolbar along the bottom, it made sense to keep this one exclusively modal (As any navigation bars would be empty).\nThat's a good idea! I'll definitely have to add some instructions to the README. I might also see if it's worth adding some additional logic to disallow the view controller from being pushed onto a navigation controller.\nThanks a lot for that! I'm glad you're finding this library useful! :)\n. Hi @Thanhktm!\nThanks a lot! I'm glad you're enjoying using my crop view controller library! :)\nAt the moment, it doesn't do any image resizing; it simply crops an image and returns the cropped version. \nIf you want to clamp the overall size of the image, you can simply resize it yourself after it's been returned from the crop view controller (I do this in one of my own apps). I was considering adding resizing, but I think that's sort of outside of the scope of what this controller does.\nThere's a category here that you can add to your code that'll make clamping your image size as easy as one extra line of code. https://github.com/AliSoftware/UIImage-Resize\nGood luck!\n. Hi Ahan!\nHrmm, okay. What size do you want to set it to specifically? Would this be better solved by setting an initial aspect ratio, or do you need an explicit size?\nThe default crop box is set up in the layoutInitialImage method inside TOCropView, so if you can add some hooks to interact with the crop box each time after that one is called, that SHOULD let you do it.\n. Um. Hang on. So you want to make a specific subregion of the image selected by default?\nUm, I'm still not sure of what effect you want to create, but setting the cropBoxFrame property only specifies the placement of the crop box as it appears on-screen, in no relation to the position to the actual image.\nThe image itself is controlled by the contentOffset and contentZoom properties of its parent UIScrollView.\n. Closing this as it has gone unreplied for nearly 3 weeks.\n. Hi Chris!\nOh! Thanks a lot for that anyway! Adding Carthage support has been on my todo list, but I hadn't found time for it yet.\nLet me know when/if it's ready to go and I'll gladly merge it in. :)\n. Hi @Ramev282!\nThanks for the bug report. I've heard there's a few glitches here and there with the system that constrains the aspect ratio.\nUnfortunately, I'm going to be ridiculously busy for the next few weeks, so I'm not going to have any time to diagnose/fix the issue for a little while. If you've got some time, feel free to have a look at it yourself. If you can fix it before I can, feel free to file a PR! :)\n. Fixed! :grin: \nLet me know if you find any other bugs!\n. Hi! Not at the moment, but it would be really easy to add. It's just a matter of adding a new external property to override the internal value.\nIf you're up for it, feel free to make the modifications yourself and then file a pull request! :)\nThanks!\n. In PR https://github.com/TimOliver/TOCropViewController/pull/32, the Done button in the toolbar has now been exposed, so you should be able to do this now.\nLet me know how it goes!\n. Done! Thanks for that! :)\n. Thanks a lot for the messages Ro, but in future, please do not spam all of my accounts with the same message. Especially for something that is not even a bug. ;)\nSorry, but I don't have time to update the UIActionSheet right now. I had a quick look, but given how greatly the API logic with UIActionSheet's successor, UIActionController differs (blocks and delegates), in order to add that, as well as maintain support for UIActionSheet (As I'm still using this library for an iOS 7 app), I'll need to significantly refactor that area.\nI added pragma mark statements to suppress the warnings for now. It's not elegant, but UIActionSheet won't be going anywhere for a while still. I'll be needing to do a pass on this controller to enable split screen support at some point, so I'll do it at the same time. \nIn any case, if there's anything else you want to contribute, feel free to add it yourself and file a pull request.\n. Haha sorry guys! I wanted to test it first before I merged it. \nThat looks great! Thanks a lot! :)\n. Done. XD\nhttps://github.com/TimOliver/TOCropViewController/commit/2cbd7110806a3b6e14d8d030fdc348088ffcafda\n. Hey! Thanks for that, but I think just blindly setting the transparency to always on is a bit wasteful. I deal with a lot of JPEG images that simply don't have an alpha channel, so it would be overkill if their cropped output did.\nIt would be smarter if you detected whether the image had alpha beforehand (https://github.com/mbcharbonneau/UIImage-Categories/blob/master/UIImage%2BAlpha.m) and then changed the transparency setting in response to that.\n. I'll do it. ;)\n. Hey Desmond! I've updated the pod to v1.1.1 now. Try it again, and if it doesn't work, let me know what it's saying!\n. Thanks a lot for that guys! I've merged that branch in, so locking the crop view to a specific ratio is now possible!\n. Seems good to me!\nIf there's a specific language not working for you, let me know!\n\n. Hmm, are you able to confirm it's not working in the demo app? I wonder if this is a localization problem, or a dynamic framework problem with Carthage.. Blimey! What a giant PR.\nI just had a play with it. Looks like you folks implemented a lot of the 'niceties' of a UIViewController library that I didn't bother to.\nI might rename some of those method names/rewrite some of the documentation, but thanks a lot for that! :)\n. Hi Simon!\nThanks a lot! Haha yeah, I think I went through about 4 of them on CocoaControls myself before I decided it might be worth building my own.\nSadly, at the moment, it doesn't support locking the crop box to only rescale along certain axes. That being said, given the aspect ratio code in there, I don't think it would be too hard to add.\nI'm sadly a bit too busy to take on adding feature requests for now, but if you feel like giving it a try and submitting a PR, please let me know! :)\n. Hi Duncan!\nThanks a lot! I'm glad you've found my cropper view controller to your liking! :)\nHmm... that's an interesting scenario. Sadly, at the moment, it doesn't allow any explicit option to choose between 4:3 or 3:4 mode; it automatically picks the appropriate option depending if the image is taller or wider.\nIt should be relatively trivial to expose that setting as a configurable property of the library. Feel free to give that a shot and let me know how you go! :)\n-Tim\n. Sadly not. The toolbar is currently only configured to display along the bottom, or along the side when the view controller's view is wider than taller.\nIt shouldn't be too hard to add though. If you'd like to create that, I'm glad to accept pull requests! :)\n. Awesome! Thank you so much for that! :)\n. Um.... sorry. I'm a bit confused as to what you're asking.\nYou want to crop an image to 16:9 even if the user doesn't edit it at all...?\n. Hmm, have you tried setting the defaultAspectRatio setting? That'll force all images to be clamped to the preset you choose.\nI'm happy to hear you're enjoying my library, but I sadly don't have the time to provide specialised support.\n. Awesome! Thanks a lot for that! :)\n. I would love to have that feature! But sadly, in retrospect, I think I that architectural design I went with for this version of the controller makes that impossible.\nThis controller handles the cropping region by overlaying a second copy of the image on top of the dimming view, that's clipped to the size of the cropping box. I'm pretty sure the Apple one just does it the traditional way, with 4 separate copies of the dimming view creating a 'hole' over a single instance of the image. Having 2 sets of images turned out to be more of a pain than I realised since I discovered I can't rotate the UIScrollView and still have the foreground image line up. :(\nIf that's the case, then I'd need to pretty much re-do the whole lot from scratch to implement fine-grain rotations.\nIt's something I'd definitely be interested in trying out for a potential version 2.0, but I don't have any time/plans to do that any time soon.\nIf you want to give it a try yourself using parts from this view controller, you've got my full support. :)\n. Thanks for doing this!\nErr, but is there any point to this if the ability to rotate images in different directions isn't exposed in the TOCropViewController? What was your goal for this exactly? :)\nThanks!\n. Thanks for that! I'll merge it in for now, but I might clean up the handling of the isArabic state before I publish it to CocoaPods. :)\n. Thanks a lot for that! I just incorporated those changes.\nThat being said, I did change a few things:\n1. I made the clockwise button optional, and off by default. This is mainly since I don't think the majority of users (including me in my own use case) need two rotation buttons.\n2. I moved the clockwise button to the far right of the panel, since I think separately those two icons looks slightly more visually confusing (The goal is their placement also helps indicate their direction)\nLet me know if you need me to do anything else!\n. Hi @anuj77!\nThanks a lot for that! I'm glad you like the look of my library!\nUmmm, not at the moment... The cropper lets you choose a specific aspect ratio to clamp to, but no explicit size limiting yet.\nThat's definitely a good idea though. I'll leave this issue open to remind me to add that at some point.\nIf you feel up to it, feel free to try adding it yourself!\n. Thanks for the feedback!\nI'm still swamped, so I've got no time to look into this myself. Feel free to try it yourself and file a PR! :)\n. Hi @harishchopra86! Thanks a lot! Glad you're liking it!\nNope, nothing yet sorry! I've been incredibly busy helping my company launch a new thing as of late, so I've only now gotten a chance to start looking at my open source libraries again.\nI'm interested in doing this one for the challenge, but there's still a few nitty gritty implementation details to work out:\n- What is required to calculate the minimum size the crop box can be when the user resizes it.\n- What is required to calculate the maximum zoom a user can pinch-in.\n- What happens when the screen rotates.\nHonestly, if anyone else wants to try adding it, that would be a huge help. :)\n. Thanks @harishchopra86! Glad you like the look of it! :)\nHaha yeah, you're right in all of those points; what I was referring to was the actual code logic necessary to enforce those types of constraints. It shouldn't be much code... but it's all math. XD\n. Oh jeez. Thanks a lot for that Tristan!\n. Sorry guys! I'm in San Francisco for WWDC week so I'm not really available online (beyond Twitter) for a while, but I'll try to chime in really quickly.\nSo I originally designed the rotation feature to match the same feature in iOS Photos.app as much as possible. The feature is pretty much constrained to a single method, - (void)rotateImageNinetyDegreesAnimated:(BOOL)animated clockwise:(BOOL)clockwise and it's pretty straightforward.\n1. A snapshot of the visible portion of the image is made and saved a to a new view.\n2. Pretty much every other view on screen is hidden.\n3. The snapshot view is added, and animated to rotate 90 degrees.\n4. When the animation is complete, the appropriate calculations are made to match up the scroll view with the rotated snapshot view, the scroll view is updated, and then cross-faded back in.\nThere's probably two ways to go about doing this:\n1. The quick and nasty way\nAfter the current animation completes, call [TOCropView setAspectRatio: animated:] to make the aspect ratio reset itself back to the previous value. \n2. The better, but harder way\nThe better way would be to completely re-implement how the animation works. It would probably require having the snapshot view clipped by a container view and animating it inside there. That being said, depending on the aspect ratio of the image itself, and the aspect ratio of the crop box, it could require some pretty extreme zooming in and out of the image, as well as offsetting the image in order to make it fit to the new crop view.\n\nObviously, I want to make sure the quality of this controller doesn't dip, so I'd prefer number 2, but if people really want this feature, option 1 might be a good stopgap.\nI'll just throw it out there; while I've thought a bit on how to best go about implementing this, I don't have any plans to implement it myself. This controller already meets all of the requirements for my use case and I need to focus all of my free time on that (It's been far too long since its last update).\nA PR for this is more than welcome, but if you do, please test it very thoroughly to make sure it doesn't break anything else. :)\n. > Hello Tim,\nI think rotation should be done on the image alone in all cases, I mean even if the aspect ratio is not locked. If you try the default picture editor in iOS 10, you can see that when rotation is done, it is done on the image alone without rotating the cropping rectangle.\n\nIn my case, the user needs to pick an image for printing using a fixed aspect ratio, it is not possible to rotate the image while keeping the cropping fixed.\n\nHi @Kumait!\nI checked again to make sure it hasn't changed and it hasn't. In iOS 10, the cropbox rotates with the image. This is the native behavior of the Photos.app cropper as well. :)\nThis is actually the use-case I need in my own app. I've got scans of book covers, and the original idea of this library was so you can cut out the front cover. When the whole image is 90 degrees rotated, it makes sense that the crop box rotates with the element you already sized. \nIt's definitely obvious this is a much-desired feature. I've learned a bit more about Core Animation in the past months, so I might be able to add it as an optional property. I was strapped for time in the first half of this year, but things are flattening out now. I'll see if I can do it at some point soon. :). Oh wow! Blimey! Nicely caught! Thanks for that!\n. I'll try and do that in an hour or so. :)\nOn 28 January 2016 at 15:55, huang-kun notifications@github.com wrote:\n\nHi Tim\nWhen will you update the cocoapods ?\n\n\u5728 2016\u5e741\u670828\u65e5\uff0c14:13\uff0cTim Oliver notifications@github.com \u5199\u9053\uff1a\nOh wow! Blimey! Nicely caught! Thanks for that!\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/pull/53#issuecomment-176041285\n.\n. Umm, I can't find anything wrong with that one... that's supposed to be working as intended. The idea is that the counter clockwise button is visible by default, but the clockwise one needs to be expicitly made visible via a setting.\n\nI'll test it some more later, but for the time being, I just pushed the Pod!\n. Oops. I probably should have checked that. Thanks!\n. Um... isn't that an app-level permission?\nIf you go into the Settings app, and find the settings for this app, there should be a toggle to enable access to the Photo Library in there!\n. I'm not sure if that's even possible: http://stackoverflow.com/questions/33362113/how-to-force-ios-permission-prompt\nIn any case, it's beyond the scope of this library. Sorry about that. :)\n. Yeah... it only ever asks once until you delete the app and install it again.\nThe only way to change it without deleting the app is via the Settings app.\n. You can't rely on the behaviour of the simulator. The device is where it counts. ;)\nI can't help sorry. This is a system level thing; not my library level.\n. What's it doing exactly?\nI don't think I can provide tech support for this library remotely. Sorry!\n. Closing as this issue appears abandoned! Sorry!\n. Awesome! Thanks for that!\n. Thanks a lot! :)\n. I'm going to cry my innocence in that I copied that from a PR someone else wrote. XD\n. Thanks!\n. Hi Tony!\nThat's probably happening because you're trying to set the aspect ratio\nbefore the view has been set up.\nIf you move that line to under the 'presentViewController' line, it SHOULD\nhopefully work. :)\n. Good to hear you got it working in the end! :)\n. Answer - Not inside this controller. \nAre you asking that the image itself needs to be 130x600 before it's passed to the controller? If so, that might be better off as logic performed inside your app beforehand. :)\n. That's definitely not possible in the current version of this library. But it would be pretty easy to add. Feel free to submit a PR! :)\n. Thanks for the PR! :)\n. Haha glad you like my library!\nLike I said on my blog, you can't insert a UIImage that has a size of 0x0 or else Core Animation becomes sad. At some point, I'll see about trying to make it a bit smarter in being able to cope with nil images at the time of creation.\nThanks a lot!\n. Awesome! Thanks for that!\n. Hi @YIFanH!\nHaha sorry, I have no idea how Apple implemented that auto-crop feature in the Photos app. I'm curious about it too, but I'm not even sure what it's doing to the photo to get that information.\nSorry! :(\n. Oh hang on! I spoke too soon!\nIt's a Core Image filter! Go to the Core Image Class Reference Page and there's a method called [CIImage \nautoAdjustmentFiltersWithOptions:]. One of the options you can pick is kCIImageAutoAdjustCrop.\nGood luck!\n. Oh! Nicely spotted @jtmilne! I don't know when or how that happened!\nI just fixed it and pushed a new release. Let me know if that's fixed it for you! Thanks!\n. Oh blimey. Okay. This library is feeling more like a delicate house of cards with every commit. XD\nAlright. I just pushed a new version that should hopefully have fixed that. Let me know how you go!\n. Awesome! Thanks for reporting it to me! :)\n. That should be pretty easy! The 'non-dimmed' part of the image is being displayed in a separate view (called the foregroundContainerView) so if you just modify the mask/roundedEdges of that view, you should automatically get the effect.\nI just tried it and got this. \n\nSadly the effect breaks the moment the crop region stops being a square, so it would need a bit of tweaking depending on your requirements.\nGood luck!\n. Done! :)\nHave a play with it in the new updated example app!\n. Thanks for that! Can you please upload the original image here for me to test?\n. Haha oh okay! I hadn't even gotten around to trying it yet. Thanks for that!\nThat being said, is there anything I can do on my end to try and prevent this bug? Or was the problem entirely in your own code?\n. Hi! Thanks for the report.\nI'm not sure how to reproduce this problem though. Can you please record a video of the bug (You can use QuickTime Player to record from an iOS device's screen), and post it here?\nThanks!\n. Thanks for the video! That helped a lot!\nHmm, is aspect clamping on there? I found a bug that would lock the zoom size of the scroll view if clamping was on, and you hit the rest button last week. I've already fixed that one.\nPlease try downloading the absolute latest version of this library and see if it's fixed for you there. :)\n. Awesome! Thanks for that ! :)\n. Thanks for the issue! Wrong in what way?\n. Uhhh, why are you embedding TOCropView into another view and not simply using TOCropViewController?\nI never intended for TOCropView to be used outside of TOCropViewController, and so it relies on functionality in TOCropViewController itself in order to perform its layout properly. If you embed it in another view controller without this functionality, it may not work properly.\nI'd recommend just using TOCropViewController and changing its theme to match the design you want. If you still want to embed it in another view controller, you'll have to go through the TOCropViewController class and copy out the necessary logic for your own view controller.\nSorry!\n. Ahh! I found out how to reproduce it. Sorry about that!\nI just fixed it. Thanks for reporting it! :)\n. Hi! Thanks for the report!\nThis warning can't be helped. It's printed by the system when performing the alpha fade animation on the UIVisualEffectView instance that creates the blurry effect outside the region of the crop box. While the warning itself says the effect will look broken, it looks absolutely fine to me. Unfortunately, since it's on the system level, it can't be suppressed.\nHowever, I did a bit of research, and discovered there's actually now an official way to perform the animation in iOS 9, that creates a blurry animation effect similar to dragging down on the iOS Home Screen to open Spotlight (i.e., the blur radius expands instead of a static crossfade). \nI've since modified the library to use this animation method on iOS 9, and the console warning has gone away. It will, however, still appear if the device in question is running iOS 8.\nThanks a lot for the help!\n. Haha no problems! Thanks for reporting it! I was going to ignore it forever!\nUh-oh. Really? It SHOULD still be happening in iOS 8. It won't happen in iOS 7 since UIVisualEffectView wasn't available then, so it's using a normal UIToolbar instead.\nI might need to test that again... XD\n. It's not possible. \nI really would like the fine-grained rotation capability like in the iOS 8 Photos app, but it's too complicated. Due to the layer composition of this view controller, I get the feeling it would be necessary to rewrite the whole thing from scratch in order to support it. :(\nSorry.\n. Um. Sorry, I don't quite follow here. Can you please post a video?\nSometimes, depending on how big the image you're cropping is, a delay can't be helped. But it might be possible to refine the cropping logic to defer that sort of heavy operation until it's absolutely necessary.\n. Closing this. If you want to follow it up, please re-open and post a video.\n. Thanks a lot for the PR! :)\nHmmm, I had a quick play with it. I like the idea (That actually fits into the demo app quite well!), but I think it might be a bit overkill. \nIt would probably be a bit more natural feeling if the previous crop zone is only shown when you push the controller initially, but that's the extent of it. At the moment, if you tap the reset button, it'll take you back to that crop region, which doesn't seem right. It would be more appropriate if tapping the reset button after that reset the whole canvas so the user could then set their new cropping size.\nSorry to ask this, but could you possibly modify the PR to do this? It should also mean a lot less code is necessary as well. :)\n. Awesome! Looks good to me! Thank you so much for that @raho! :)\n. Hi!\nThere's already an issue tracking that feature request: https://github.com/TimOliver/TOCropViewController/issues/46\nThere's no mechanism for it at the moment. I'm considering adding it when I get a moment, but feel free to file a PR if you want! :)\n. Closing this off since I'm not really sure what this issue it about (The warning message? Or some lag somewhere?)\nIf you want to re-open it, please upload a video of the issue you're describing. Thanks!\n. There's a PR in progress now that's aiming to add this sort of functionality. I still need to review it. :)\n. Added in the latest update!\nThe API is cropController.cropView.initialCroppedImageFrame. I'm considering exposing it through the TOCropViewController class itself, but that's good for now. :)\n. Feel free to file a PR! :D\n. With huge props to @mamaral, this is now implemented. :D \n. Thanks for that! I just left some feedback. This can probably be much more simplified than it currently is. Please check that out and let me know what you think. :)\n. Alrighty. I had a long play with it, and it looks like it's working well! I'll merge it in now.\nI still think this whole 'init with last known settings' system could be optimised a bit better (It seems inefficient to put all of this stuff in layoutInitialImage), so I'm going to have a play with it myself to optimise it.\n. Thanks again for the PR! :)\n. Haha thanks for that! I just added it. :)\n. I think this is the same feature request as https://github.com/TimOliver/TOCropViewController/issues/87! :)\n. Thanks for the issue! I just tested it myself in the simulator and it looks fine!\n\nCan you please upload the image you're having this problem with for me to test?\n. I had a really quick play with it to see if I could come up with an acceptable way for it to be pushed onto a navigation controller.\nGive the latest version a try. :)\n. Thanks a lot for that Alexander!\nI was actually planning on doing this a bit of a different way. I was thinking of actually making a proper 'style' for circular portrait mode, because it means you can ditch a lot of the additional set-up if you know the aspect ratio can never change. Also... that API wording might be a little confusing because a 'circular' aspect ratio isn't really technically possible!\nI'll merge it into a local branch and change it slightly before I merge it in. :)\n. Alrighty. I actually ended up modifying this a lot more than I thought (actually had quite a bit of fun), and I just merged my changes in.\n- I used a CAShapeLayer mask instead of cornerRadius since I discovered the corner radius feature doesn't produce a perfect circle (probably the iOS 7 rounding effect)\n- I made the circular cropper a deeply integrated mode that disables the grid overlay, and behaves a little differently than the normal cropper in most cases.\n- I also added a delegate that clips the resulting image to a circle too. :)\nJust before signing off, thanks again for submitting a PR @alibasta, but please do test them a little more thoroughly before submitting. :) I discovered this PR was broken if you tapped the 'reset' button, or even just presented it while the device was in landscape mode. \nThat being said, I could have easily broken it myself, so feel free to test it out yourself and see what you think! :)\n. Um, sorry. What?\nAre you asking the same thing as https://github.com/TimOliver/TOCropViewController/issues/51?\n. Closing this with the assumption it's the same request as #51! Let me know if otherwise! :)\n. Haha thanks Kim! I'm glad you like the library!\nYep! That was on purpose. There were still a few bugs and APIs I was changing that I didn't want to commit to CocoaPods just yet.\nI just finished setting all of that up, and pushed a new version to CocoaPods. :)\n. Thanks for the PR!\n. Aha. That's a regression from the circular crop work I was doing. I was afraid that had happened, but I hadn't had time to do a proper hands-on test yet.\nThanks a lot for fixing it! :)\n. Excellent! I was thinking about the best way to go about implementing this and you did pretty much exactly how I had it in mind.\nThanks a lot for that Mike! :)\n. Haha thanks for that!\n. I think this is a duplicate of https://github.com/TimOliver/TOCropViewController/issues/51. :)\n. Haha fair enough! It might also be worth adding the nonnull type annotation to the input arguments as well (Also something on my TODO list!)\nThanks!\n. Haha fair enough! Thanks for that!\n. No. Not at present. Sorry.\nThis seems like it's basically a duplicate of #46. Feel free to go in there and explain exactly what your use case is and how you'd expect this feature to work in the code. :)\n. Hi @OrWest! Thanks a lot! I'm glad you're enjoying the library!\nOh dear! Hmm okay then. Are you presenting the view controller from a UINavigationController? The status bar automatically hides itself if the view controller is presented modally, but for the time being, I made it visible when pushed from a UINavigationController since hiding it forces the navigation controller to do a -20 point slide animation upwards which breaks the controller.\nIt's possible to fix this, but it will be a matter of carefully timing the presentation transition so the status bar is visible until the animation has completed, and then hidden while the offset the navigation controller introduces is compensated.\nSadly, it's not as easy as you might imagine, but if anyone wants to give it a shot, I'd gladly accept a PR for it. :)\n. Failing that, I could also just make it so the crop box edges are slightly lower when it detects there is a UINavigationController parent. That would be much easier, and would fix this issue too. :)\n. Thanks for fixing that bug in - (void)setRotateClockwiseButtonHidden:(BOOL)rotateClockwiseButtonHidden!\nBut the fact that the clockwise button is being shown in circular mode is intentional. :)\n. Ohhhhh! I see why you were having trouble in #104 now. Your app's Info.plist has UIViewControllerBasedStatusBarAppearance set to NO, so it's deferring back to the iOS 6 way of handling the status bar.\nIf that's the case, you could probably make this a lot more automatic without having to actually expose a manual property for it.\nYou could instead make the controller initially check if UIViewControllerBasedStatusBarAppearance in the Info.plist is set to NO, and if so, to then defer back to the old UIApplication APIs.\nPlease note that those APIs were also deprecated in iOS 9, so it'll probably also be necessary to surround them with warning suppressions as well.\nWhat do you think of that?\n. Closing this since it seems to have fizzled out. Please re-open if you would like to integrate my requested changes. :)\n. Hi Patel! \nThanks a lot! I'm glad you've found my crop controller useful! :)\nHmmm, okay! How are you saving the images to disk exactly? Are you saving them as PNG, or JPG?\nThe circular crop mode exports the images transparently clipped via their alpha channel. So as long as the images are saved as PNG, it SHOULD just work.\nThat being said, if WhatsApp does any file conversions on its own (i.e., it converts images from PNG to JPG before it uploads), then the alpha data will be lost, and the surrounding area of the image will be black.\nIf this is the case (i.e., PNG is a no-go in WhatsApp), then you could get your app to take the UIImage generated from the crop controller, and then use Core Graphics to generate a new UIImage where the image is overlaid on top of a solid colour of your choice to get rid of the alpha transparency.\nI hope that helped! :)\n. Yeah, I think you should be able to bridge it to Swift without too many issues. :)\nIf you think it should support Swift to a larger degree than a simple bridging header, please update this issue with the information I requested in the issue template and reopen. Thanks! :)\n. Oh cool! Thanks for that! :)\n. :+1:\n. Hi @Sander-Kornev! Thanks for the issue! Oh dear, sorry I caused a regression in your app!\nWoah. Yeah? What did that look like exactly? Did you take out the 'Cancel' and 'Done' buttons in the toolbar too? Can you post a screenshot of what it used to look like?\nYep! I'm happy for you to file a PR that adds a property called navigationBarHidden to explicitly unhide the navigation bar in this controller.\nFor quality purposes, two things I'd want:\n1. When the navigation bar is visible, 'Cancel' is removed, and (Assuming this fits your design) 'Done' is move to the top right side of the navigation bar.\n2. Make sure the navigation bar matches the theme of the crop controller (i.e., it can't be the default white. :) )\nThank you so much for taking the time to ask me before starting a PR. I really appreciate that. :D \n. Cool. Let me know when that PR is ready. :D\n. Thanks for reporting the issue!\nI've never heard of that issue before so I looked it up on Stack Overflow and found an interesting response: http://stackoverflow.com/questions/32656288/function-signature-specialization-crash-in-swift\nFrom the looks of that, you should have received more crash information than just those two lines.\nCan you please post the full stack trace? Also, can you post the section of your code that actually goes to present the crop controller?\nThanks!\n. Ping. :D \n. Closing due to inactivity. Feel free to re-open if you still need help!\n. Ahh okay then! XD\nNope. I still have no idea sorry. There's quite a bit of information on Google if you do a search with some of those keywords: https://forums.developer.apple.com/thread/22194\nIt seems like some kind of linking issue with your project. Unfortunately, I don't think there's anything I can do on my end for that. Sorry!\n. Nope. This library is for images only. Video editing would be something completely different. Sorry! \n. Thanks for that! I didn't even know you could turn those into warnings! :)\n. Oh dear! Okay, I see what you're trying to do now.\nI never designed TOCropView to allow its image to be switched (I didn't really even intend for it to be used outside of the TOCropViewController class!) so as far as I know, it can't handle that.\nProbably the quickest and easiest thing to do is to create a new TOCropView from scratch whenever the user taps a new image in the collection view. Since this is a user initiated action, this isn't a bad compromise and there shouldn't be any visible performance hits.\nBeyond that, it would be necessary to add the image-swapping functionality to TOCropView itself.\n. I'm going to close this issue now. Feel free to re-open it if you need additional help. :)\n. Hi @judepereira! Thanks a lot! I'm glad you're enjoying it!\nNope. I have no clue what could be causing that. The cropper only performs snapshotting when you're performing a rotation of the image, but it sounds like you're getting the error too early for it be an issue with that.\nI did a quick Google search for the issue and it looks like it might actually be a bug in Apple's photo picker code: http://stackoverflow.com/questions/25884801/ios-8-snapshotting-a-view-that-has-not-been-rendered-results-in-an-empty-snapsho\nCan you confirm that? Are you getting the issue when interacting with a photo picker?\n. Hmm, I'm really not sure then. I'm using it as a CocoaPods dependency in my own shipping app and I'm not getting that issue.\nI think we might need to leave this one until we can actually establish this is an issue being caused by this particular library, and if so, what part of the code is actually doing it. :)\n. Hi there! Hmm, that issue usually occurs if you provide the crop controller with an incorrectly formatted (/empty) UIImage object (i.e., you can trigger it by just inputting [UIImage new] into the class's init method). The issue usually happens when either the height or width properties of the image are 0.0f.\nI've been wondering how to cope with these sorts of instances (i.e. whether putting in an assert or simply more checks), but I haven't decided yet.\nFor now, I'd just recommend that you verify the UIImage instance you are providing to the controller before you create and present it. \nIf you find out that this issue is being caused by something else, please let me know. :) Thanks!\n. I just pushed a new tag, so HOPEFULLY this is now resolved. Please let me know if it isn't. :)\n. Thanks for the feature request!\nI just tested it to be sure. The Photos app doesn't do double-tap zooming after you've tapped the 'Edit' button. It only allows that when you're viewing photos normally and not when editing photos (which is what this library is modelled off).\nI'd rather not diverge from the expected system functionality where possible since that will reduce how intuitive the library is to users. Additionally, zooming to a CGPoint (as opposed to a CGRect) is actually a relatively tricky operation, so it would require a fair bit of work and testing to properly integrate into this library.\nIf you want, feel free to implement it yourself as an optional property, and file a PR! :)\n. Hi @jbrozena22!\nThis was done intentionally, in this specific line of code involving cropping the UIImage:\nreturn [UIImage imageWithCGImage:croppedImage.CGImage scale:[UIScreen mainScreen].scale orientation:UIImageOrientationUp];\nThe reason for this is to ensure the resulting image is properly configured for display on the Retina Display points/pixels system of the iOS device. Without setting the scale value to 2 on Retina devices (or 3 on iPhone 6/6s/7 Plus), trying to display any of those images without manually accounting for that results in the image being rendered at 1x, which looks blown up.\nTo work out the actual physical pixel size of an image represented by UIImage, it's best to do it like this:\nCGSize imageSize = CGSizeMake(image.size.width * image.scale, image.size.height * image.scale);\nI hope that answered your question! :)\n. Oh awesome! Thanks a lot for that @brandonscript! I hadn't tried it on iOS 10 yet!\n. Hey @Mazorati! Thanks for reporting this!\nUm. Wow! I'm not sure why that could be happening then. This sounds like something weird happening with the types in Swift. Since they're only being offset by a single point, it seems like an integer/floating point mismatch to me. :/\nMaybe one thing to possibly try:\nlet CARD_WIDTH_MULT:CGFloat = 9.0\nlet CARD_HEIGHT_MULT:CGFloat = 5.0\nExplicitly forcing the values to decimal values might help. Let me know if that works for you. :)\n. Hi! No worries! :)\nHmm, can you send that image? I can only really test it easily in Objective-C, but I'd like to test it out in the demo app to see if I can replicate it. :)\n. I had a play with the custom aspect ratio feature and noticed there were some floating point errors being introduced (A value was -0.5 when it was expected to be 0.0). I've pushed a new version fixing those issues. Please give that one a try and see if it fixed the issues for you. :)\n. Um, what do you need exactly? The CGRect value of the image region when you cropped with the circular mode enabled?\n. Alright. I just double-checked the code. Yes, if you implement the - (void)cropViewController:(TOCropViewController *)cropViewController didCropImageToRect:(CGRect)cropRect angle:(NSInteger)angle; method, even when circular cropping is enabled, you'll get the appropriate CGRect of the area that was cropped. :)\nI hope that helped!\n. Thanks a lot @Mazorati! Glad you're enjoying the library.\nYou're not the first to ask about this. ;) The original issue asking about this was #3, but like I said in there, it's out of the scope of this library. It would require a huge amount of research, rewriting and testing.\nSorry!\n. It should just work if you drop it in add an Objective-C bridging header! :)\nAt some point, I'l see if I can improve the API design to make it more 'Swifty' as well.\n. @osmanyildirim It's really not possible to 'expect' anything of a free open source project. ;)\nIf you desperately require native Swift 3 support, feel free to implement it yourself. :D \n. I had a bit of a play with adding better Swift interoperability with this project. Short of doing a complete refactor of the method names using NS_SWIFT_NAME, I THINK that's about as much as we can do.\nIf you can think of anything else it needs to make Swift interop better, please file a PR. :)\n. Hmmm... I've never seen it behave like that before. I've been playing with it heavily on my iPhone 7 running iOS 10, and while I've seen other glitches, the panning  code has still been fine.\nI just pushed version 2.0.8 to fix those iOS 10 bugs, so it might be worth updating and trying that version. \nBeyond that, I'll need some more information. What is the view controller structure you've got when you push this controller on top of it?\n. Haha! Oh jeez. I wouldn't have picked that. \nOh well. Thanks for letting me know!\n. Hi @erickva! You were on the right track with making the animation controller return nil, but one other thing you had to do was specify the modalTransitionStyle of the controller itself:\nTOCropViewController *cropController = [[TOCropViewController alloc] init];\ncropController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;\nI just pushed a new version that will disable the animation controller if the style is set to vertical, so if you update to that one, all you should need to do is add that extra line of code. :)\nI hope that helped!\n. No worries! Glad I could help! :) Enjoy!\n. Um. What's your particular use-case here? Why do you want an initial zoom size?\nIt's not possible to manually constrain the controller to an explicit point/pixel size. There's an issue tracking a minimum size ( #46 ) and one tracking a completely locked size ( #68 ), but I don't have time to add/test any new features at the moment.\n. Hmmm, okay. \nWell you can use the - [TOCropViewController imageCropFrame] property to set an initial crop value for the image. You could then combine it with a clamped aspect ratio to ensure the user can only generate an image of that shape, and then resize it to the appropriate size yourself afterwards. :)\n. Hi! You can set aspectRatioLockEnabled = YES and resetAspectRatioEnabled = NO to make it that the user can't ever resize or reset the crop box's aspect ratio. You can then use customAspectRatio to manually set the ratio you need. :)\n. No worries!\n. Not at the moment sorry. That's all hard-coded. \nIt'd be pretty trivial to expose those properties and then control them from your own code though. :)\n. Cool! Good to hear you came up with a usable solution then.\nIf you ever want to make this an official part of the project, feel free to file a PR. :)\n. Cool! Thanks for that! :)\n. Oh dear! Can you please post that picture here so I can try it myself?\nAlso, I did a bunch of layout fixes with the aspect ratio very recently, please make sure you're on the latest version of this library. :)\n. Thanks for that! Aha! It was a legit bug. One of the optimisations I'd made to when the crop controller presented on screen had disabled the initial call to re-layout images that had aspect ratios set in advance.\nI've fixed it and pushed a new CocoaPods release. Please download it and see if that's working for you now.\nAs for the image size, when you crop an image, it sets the appropriate Retina display scale on the image so it'll display correctly on your device's screen (270*2 = 540), so it's image.size property is in points, not pixels. The raw pixel size is how you expect it. :)\n. Gonna take a leap of faith here and assume it was fixed. :) Please re-open if otherwise. XD\n. Thanks for the PR @mathaeus, but it's not necessary. :)\nIf you try it in the demo app, selecting an image from the photo picker will always result in self.scale being equal to 1. The idea here is to make sure the proper Retina Display screen scale is set, so if you apply it to a UIImageView, it'll render at the proper size for the display. If the scale value of an image is 1, it'll look blown up and blocky on Retina devices.\nWe could change it to self.scale, but if the user wanted to display the image after that, the onerous would be on them to perform the transform, which I think could cause confusion. :)\n. It doesn't. It adjusts the scale of the resulting cropped image. This is so it can be dropped into a UIImageView and will render properly without any extra effort. :)\n. Displaying a UIImage is not a narrow use case. :)\nBut I'm curious, what is breaking by changing the scale value exactly? What do we gain if we export it as a 1.0 scale constantly? If you export it to disk after the fact, it'll still be the same pixel size. Changing the scale isn't modifying the image data at all.\n. Um, it's working fine for me! In both the sample app, as well as installed via CocoaPods in one of my apps.\nThere's no such file as TOCropViewController Resources.bundle in this project. Can you please provide some more information on how you've actually tried to integrate this library into your app?\n. What happened? :)\n. @yagneshGingercube Haha okay. Can you please explain what the problem was? Is there anything I can do to avoid it?\n@codingtomato Why are you using '~> 1.1.3' in your pod file? We're up to v2.0.11 now. :)\n. Someone else just reported a similar issue, but they were able to resolve it themselves: https://github.com/TimOliver/TOCropViewController/issues/135\nI use this library in one of my own apps and I'm not having any trouble with integrating it via CocoaPods, so there's not a lot I can do to help, sorry. \nMake sure your CocoaPods is up to date, you've run pod update, and if worse comes to worse, de-integrate and run pod install again. :)\n. Hmm, I'm getting the feeling this is a CocoaPods specific issue, and not one unique to this library.\nI Googled that error message and discovered that apparently clearing Xcode's Derived Data folder will fix it.\nhttp://stackoverflow.com/questions/7339600/object-file-format-unrecognized-invalid-or-unsuitable-xcode-error/33108691#33108691\n. Cool! Sounds like that fixed the issue. :)\nThat's because it doesn't. The property was renamed to 'aspectRatioLockEnabled'. You might need to go through and review your implementation code since the API may have changed a bit.\nIn any case, the crash is gone, so I think this issue is resolved. :)\n. Hmmm..... this is really weird. This seems to be entirely an issue with the way CocoaPods is installing the library. I can't replicate it on my own machine so there's not much I can do.\nIf you're actually able to reliably reproduce this issue, it might be best to report this as an issue to the CocoaPods repo.\n. Oh yeah, it's fine! Of course! (You'll need to test to make sure it actually still works though)\nThe only downside to that is if you do another CocoaPods update, the problem will come back again.\n. Hi @luosch! Thanks for the PR!\nHrmmmm..... I'm usually really skeptical of using the kCAFilterTrilinear filtering setting on layers that are inside scroll views. There's usually a really unacceptable frame drop on older devices at unpredictable times when (I'm assuming) it generates the mipmaps.\nThat being said, I had a play with your PR on my iPhone 7 Plus, my iPad Pro, and then on an iPad mini 2, and I didn't notice any frame dropping. It's possible it's doing the resampling before the view controller is presented, in which case, this would be one of those rare cases where this would actually be an acceptable use of it inside a scroll view. :)\nSo I'll cautiously accept this PR for now. But I might need to add a disclaimer that I'll need to revert it if I discover it's causing any major performance hits down the line. ;)\nThanks!\n. Thanks for the PR, but it already has NSPhotoLibraryUsageDescription in there! :D \nhttps://github.com/arno608rw/TOCropViewController/blob/42c89884400ad2b00b64b720d5f4c732280d211a/TOCropViewControllerExample/Info.plist#L25\n. Hi! I just tested it and it was fine for me. When you say 'Does not work for you', what is it actually doing?\n. Hmm, I quickly tried it inserting your code into the sample app, and it worked fine for me.\n```\n    TOCropViewController *cropController = [[TOCropViewController alloc] initWithCroppingStyle:self.croppingStyle image:image];\n    cropController.delegate = self;\n    cropController.customAspectRatio = CGSizeMake(16.0, 9.0);\ncropController.aspectRatioLockEnabled = YES;\ncropController.aspectRatioPickerButtonHidden = YES;\ncropController.resetAspectRatioEnabled = YES;\ncropController.rotateButtonsHidden = YES;\ncropController.rotateClockwiseButtonHidden = YES;\n\n```\n\nI did some fixes for the aspect ratio about a month ago. Have you downloaded the latest version?\n. Haha glad I could help! Don't forget to always check you're running the latest version! ;D\nEnjoy!. Hi! Have you done a pod repo update recently? :)\n. That's a super old version of CocoaPods! Try updating it, and then running pod update  instead of pod install. :)\nEither way, this isn't an error that's fixable within this library, so I'm closing this issue. Good luck! :)\n. No worries! If you still get the issue, try looking around the CocoaPods repo to see if there's anything else you might need to do. :)\n. Thanks for the PR! Um, but that seems to be a really unnecessary thing to do.\nThe image property of TOCropViewController is the input image. It's not transformed at all since you input it in the constructor. In the code sample you've provided, you've pretty much completely bypassed the entire crop view controller to gain access to the UIImage cropping category.\nIf you want the cropping functionality of that category, you should be able to move that functionality to another class that exposes it to Swift properly.\nThere's definitely a better way to do this; one that doesn't involve adding more imports to the public header. Sorry!. Hi @davidseek!\nThe delegate logic is called here if you want to check it out: https://github.com/TimOliver/TOCropViewController/blob/master/TOCropViewController/TOCropViewController.m#L775\nOnly one delegate method is called. If you set more than one, only the first one in this conditional list is called. Those two delegate methods are basically the same, except one will provide you with a cropped version of the image, and the other will only provide you with a CGRect of where the user cropped the image.\nI hope that helped!\n. No worries! Sorry about that! I probably should indicate in the documentation that only one method is called, or maybe even review that policy on only executing one of the delegate callbacks. I wanted to avoid calling the one that provides the UIImage since it's a very heavy operation to generate that.\nOn that same note, I probably should look at refactoring those delegate methods so they look a bit nicer in Swift 3 too! XD\nGlad I could help!. So the CGRect you get back in that delegate method is the position and size of the crop region that the user selected, in the coordinate space of the original image. If you want, you can take that CGRect and then crop the original image you provided to the crop view controller on your own.\nThe second delegate method is more of a convenience method. It does the cropping internally and then provides you with the cropped image, as well as the CGRect it used to produce that cropped image.\nSo, if you absolutely need a UIImage of the cropped region at the time the delegate is called, use the delegate method that provides the image. If you just want the CGRect so you can save it and do your own cropping later, use the other one. :). Hi @naveenkumard! Thanks for the issue!\nSorry, I don't have any plans to change the way the toolbar renders its items. It uses icons instead of text in landscape mode because the text would have to be scaled down really small to fit in a toolbar that's only 44 points horizontally wide.\nIf you want, feel free to play with toolbar code and file a PR if you come up with a way that gets around this problem. :). G'day Brandon! \nHahah oh blimey, a Swift version? What would that entail exactly? Would you be considering actually rewriting the whole lot in Swift? Or just making a Swift wrapper so the majority of the Objective-C stuff is obfuscated from your app's level? (One of my colleagues has done something like that before: https://github.com/Roobiq/RBQFetchedResultsController)\nIf you're considering just encapsulating the lot in a Swift wrapper, that would be really nice to have here on the main branch. But if you're thinking of building a completely separate one, it might be best to keep the two separate since I don't think I could maintain two separate copies (But I'd be happy to add a link in the read me). :). Thanks for the PR!\nI love the idea of being able to explicitly disable certain sides of the crop box.\nBut the other two features: scaleWhenMoveCropFrameCenter and the crop box sizes don't make sense to me. I just tried them in the demo app and they felt strange to use. What are the reasons for adding those?. Thanks for the PR, but this seems to break too much of the default functionality. \nAdditionally, while it might be needed for your app's needs, a lot of this functionality doesn't make sense to me (Like disabling the zooming when you make the crop box smaller), and seems counter-intuitive to what's been established in the Photos.app cropper.. Hi @mxyolande! Thanks for the issue!\nAh. Yep! I see it. The crop controller isn't realizing it's at the mazimum zoom level. It's trying to align the picture to the assumed new zoom center, but the zoom box isn't changing. The Photos app accounts for this by simply re-enlarging the box.\nI'll definitely need to fix this. I'm not sure when I'll get time to though, sorry.. Alrighty. I just pushed a new version that will disregard changing the scroll view offset if the zoom scale of the image is already maxed out. It could probably use a bit more refining, but at the very least it behaves a lot nicer than before.. Yep! The library can be built to a framework! It was necessary for Carthage support.\nYou should be able to build a copy of the framework and then import it into your project.\n\n. Please do not ignore my message template. I need a lot more information than that before I can help.\nPlease fill out exactly what's happening in this issue. :). Um, are you installing it manually, or as a CocoaPods dependency then?\nSorry, I'm not sure if there's anything I can do to help!. Thanks for the issue @tkato0909! I'm glad you like the library!\nHmm, I tried to be a bit clever with the way the delegate system worked. It was assuming you'd only ever implement one delegate method, and it would disregard the others. This has definitely caused some confusion.\nI just pushed a new version that changes it so all delegates will be called if they are implemented. Please update your version and let me know if that fixes it.\nThanks!. I'm going to assume this was resolved. Feel free to re-open if you need anything else. :) Thanks!. Awesome! Good to hear! Thanks a lot! :). Hey @alexsanderkhitev \nCool! Thanks for that! I love the kinds of issues that solve themselves. \nAhh that's good to hear. I wouldn't have known what to do otherwise. The images in the view controller itself are just normal UIImageView objects, so they shouldn't break on their own.. Hi @keshiim! Can you post the image you're using here?. Hmm, I just tested that photo in the demo app, running on my iPhone 7 Plus, iOS 10.3. It worked fine for me!\n\nUnless there are specific steps I need to follow, it sounds like you're just using an older version of the library. Please go back and review the issue template (without deleting it this time) and make sure you're running the latest version. If not, please re-open this issue and explain in exact detail your setup and steps to reproduce. :)\nThanks!. Ahhh okay. Yeah, you need to run pod update to pull new versions from CocoaPods. I mentioned that in the issue template. ;)\nGood to hear it works!. Sorry. This is not enough information to be able to help. \nPlease go back and fill out the issue template that was provided when you created this issue. At the very least, some code samples and more information about your app would be very helpful.\nThanks!. Ah, yeah they should be. Thanks for that!. Um. What Icon files? Where are they coming from? \ud83d\ude31. Thanks for the issue! But this is a duplicate of #51. It's up for grabs if you'd like to try and implement it yourself. :)\n. Thanks for following the issue template @Mikael491!\nHmm, this looks like the same issue as #160. Please be aware that the delegate methods have the Swift renaming macro, so make sure you're implementing the right method name.\nI'm not too sure if all this works on Swift 2.3. Considering it's been completely dropped from Xcode 8 at this point, I'd definitely recommend updating to Swift 3 ASAP. :). Ahh okay. Cool! Thanks for letting me know!\nHmmm.... that sounds like an interesting issue. Yeah, as far as I can tell NS_SWIFT_NAME is targtted at Swift 3, so it might not work for Swift 2.3. (Granted Swift 2.3 is completely dead at this point. You should definitely consider migrating to Swift 3 soon! ;) )\nI just merged a PR that introduces closure blocks as opposed to the delegate which could also help here.. Hi @bishtpradeep!\nHmm, I designed this controller to be presented as a modal view controller, so embedding it in other controllers isn't 100% supported.\nIf you're using a standard UITabBarController and a UINavigationController, you should be able to make the crop view controller a child of the navigation controller and then make that a child of the tab bar controller. The toolbar will remain on the bottom as long as the controller is in portrait mode (But it's hardcoded to move to the side in landscape).\nYou might need to modify some of the code of the split view controller to get this working how you want. Let me know if you have any feedback on how we might be able to improve the split view controller for these sorts of circumstances.\nGood luck!. Thanks for the question @boyfox! This sounds like a duplicate of https://github.com/TimOliver/TOCropViewController/issues/68.\nAt the moment, the controller doesn't publicly deal with exact pixel values; it works with aspect ratios, and determines pixel sizes based on the size of the final crop box frame against the original image's size.\nI'm usually recommending that at the moment, you just set the aspect ratio to the size you want (eg 1:1 for squares) and then downscale or upscale the resulting crop image on completion.\nI don't have the time to add additional features to this library at the moment, but feel free to explore the code and see if you can come up with a way to implement it. :)\nI'm going to close this as it seems like a duplicate. If you think this request is actually different from #68 (Or #46), feel free to re-open. :)\nThanks!. Hi @bartlomiejn! Thanks for the issue!\nHmm, I recently added the NS_SWIFT_NAME Swift redefinitions to the delegate methods in order to make them more Swifty. \n```objc\n@protocol TOCropViewControllerDelegate \n@optional\n/\n Called when the user has committed the crop action, and provides \n just the cropping rectangle.\n @param cropRect A rectangle indicating the crop region of the image the user chose (In the original image's local co-ordinate space)\n @param angle The angle of the image when it was cropped\n /\n- (void)cropViewController:(nonnull TOCropViewController )cropViewController didCropImageToRect:(CGRect)cropRect angle:(NSInteger)angle NS_SWIFT_NAME(cropViewController(_:didCropToRect:angle:));\n/**\n Called when the user has committed the crop action, and provides \n both the original image with crop co-ordinates.\n@param image The newly cropped image.\n @param cropRect A rectangle indicating the crop region of the image the user chose (In the original image's local co-ordinate space)\n @param angle The angle of the image when it was cropped\n /\n- (void)cropViewController:(nonnull TOCropViewController )cropViewController didCropToImage:(nonnull UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle NS_SWIFT_NAME(cropViewController(_:didCropToImage:rect:angle:));\n/**\n If the cropping style is set to circular, implementing this delegate will return a circle-cropped version of the selected\n image, as well as it's cropping co-ordinates\n@param image The newly cropped image, clipped to a circle shape\n @param cropRect A rectangle indicating the crop region of the image the user chose (In the original image's local co-ordinate space)\n @param angle The angle of the image when it was cropped\n /\n- (void)cropViewController:(nonnull TOCropViewController )cropViewController didCropToCircularImage:(nonnull UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle NS_SWIFT_NAME(cropViewController(_:didCropToCircleImage:rect:angle:));\n/**\n If implemented, when the user hits cancel, or completes a \n UIActivityViewController operation, this delegate will be called,\n giving you a chance to manually dismiss the view controller\n/\n- (void)cropViewController:(nonnull TOCropViewController )cropViewController didFinishCancelled:(BOOL)cancelled NS_SWIFT_NAME(cropViewController(_:didFinishCancelled:));\n@end\n```\nI'd recommend double-checking your method names and make sure they match up with the Swift method names defined there. The inconvenient thing about delegate methods is if you name them wrong, they won't trigger any warnings (since they're valid methods on their own) but they simply won't get called by the view controller.\nLet me know if you're still having trouble with this! I'm trying to think of other ways to make this controller a bit nicer to work with in Swift.\nThanks!. Hey @bartlomiejn! Thanks a lot! Glad you're enjoying my library. :)\nCool! That's certainly a great way to get around this issue. I've been considering trying to make a proper Swift wrapper to sidestep these kinds of issues but that still wouldn't have worked for Swift 2.3\nI've merged your PR and I'll cut a new CocoaPods release soon. Thanks! :). Hi @anirudhsmarttechnica! Can you please create a new issue and follow the template to provide as much detail as you can about the issue you're having?. Hi @gutierrezralph!\nHmm, I'm not sure how well this library integrates with Xamarin. When the 'Done' button is tapped, it calls the method doneButtonTapped inside the view controller itself.\nYou should be able to expose that method and then hook it up to your own button. Good luck!. Hi @cupnoodle! Oh cool! Thanks so much for taking the initiative to tackle one of the feature requests people were asking for! :)\nHmm, I think there might be an easier way to do this. :)\nI added a property to the TOCropView view itself called cropRegionInsets, that (while untested!) should let you add some padding to the top of the crop view itself in order to insert the label  over the crop view, without having to modify the crop view's existing frame at all.\nWould you like to have a play with that, or shall I?. Thanks for the PR @cupnoodle! I finally got around to reviewing it. XD\nYeah that looks good! I might have a quick play with it to streamline it a bit, but I can definitely merge it in now. :). Hi @sahabe1! \nI'm sorry, but I can't help with this question in this current state as there's not enough information. Please go back and fill out the issue template that was provided in the issue submission form with as much information as you can. :)\nThanks!. Yep! There's a property on TOCropViewController itself you can use to set the crop box aspect ratio:\nobjc\n/**\n A CGSize value representing a custom aspect ratio, not listed in the presets.\n E.g. A ratio of 4:3 would be represented as (CGSize){4.0f, 3.0f}\n */\n@property (nonatomic, assign) CGSize customAspectRatio;. Hi there! Hmm, which language were you setting the device to? Was it one supported by TOCropViewController?. Hi @yYaniv. Uh. Thanks for the PR, but what exactly are you actually trying to do here? \ud83d\ude05. I'm sorry. But I can't accept this.\nThe main issues for this include:\n It breaks iOS 7 support.\n It's not clear what functionality is being added here. There's no documentation.\nPlease file an issue discussing what you're trying to do here, and we can revisit this later. :)\nThanks!. Sorry for the delay @kekearif! Thanks for that! :). Hi!\nHmm, if you don't care about animating it, you could just set the angle property on TOCropViewController. If you want to animate it, the easiest thing to do would be call - (void)rotateImageNinetyDegreesAnimated:(BOOL)animated clockwise:(BOOL)clockwise on the TOCropView twice.\nIt probably wouldn't be too hard to extend the rotation animation logic to handle 180 degree. Feel free to file a PR! :)\nIn future, please do not delete the issue template. It would be nice if I could get more information on what your specific use-case is. :). Hi! That's been requested and discussed here already: https://github.com/TimOliver/TOCropViewController/issues/51\nIt's not possible at the moment. The rotation feature mirrors the same functionality as the Photos app where the crop box rotates with the image. A PR is welcome if you want to try adding it yourself. :). Thanks for the PR @gredman!\nHaha it's probably fine. Travis is pretty finicky whenever a new version of Xcode comes out.\nThat all looks fine to me. Thanks again!. Hi there! The example app includes sample code demonstrating how to set the aspect ratio to a square:\n```\nTOCropViewController *cropController = [[TOCropViewController alloc] initWithCroppingStyle:self.croppingStyle image:image];\n    cropController.delegate = self;\n// -- Uncomment these if you want to test out restoring to a previous crop setting --\n//cropController.angle = 90; // The initial angle in which the image will be rotated\n//cropController.imageCropFrame = CGRectMake(0,0,2848,4288); //The\n\n// -- Uncomment the following lines of code to test out the aspect ratio features --\n//cropController.aspectRatioPreset = TOCropViewControllerAspectRatioPresetSquare; //Set the initial aspect ratio as a square\n//cropController.aspectRatioLockEnabled = YES; // The crop box is locked to the aspect ratio and can't be resized away from it\n//cropController.resetAspectRatioEnabled = NO; // When tapping 'reset', the aspect ratio will NOT be reset back to default\n\n// -- Uncomment this line of code to place the toolbar at the top of the view controller --\n// cropController.toolbarPosition = TOCropViewControllerToolbarPositionTop;\n\nself.image = image;\n\n//If profile picture, push onto the same navigation stack\nif (self.croppingStyle == TOCropViewCroppingStyleCircular) {\n    [picker pushViewController:cropController animated:YES];\n}\nelse { //otherwise dismiss, and then present from the main controller\n    [picker dismissViewControllerAnimated:YES completion:^{\n        [self presentViewController:cropController animated:YES completion:nil];\n    }];\n}\n\n```\nIn future, please make sure to fill out the issue form correctly. Please do not just leave the default template in there. :). Thanks for the issue @cooerson!\nI just tried it in the example app (Added the line cropController.rotateClockwiseButtonHidden = NO;) and it worked fine for me.\nCan you please give me more information on what you're trying to do? Some sample code would be great. :D . \nAgain, works fine for me.\nHmm, you might have found some weird edge case. Can you please post the code you're using to present the controller?\nI'm very busy at the moment, so if this is a bug, I won't have time to fix it. I'd very much appreciate a PR in that case. :). Yep! @drougojrom is correct! Thanks for that! :)\nIt might be best to make a Swift example project as well.... Hi @drougojrom! Cool! Glad to hear you were able to make use of the library in several projects. :)\nHmmm, interesting! What is your use case for that exactly? Would the rectangle need to be resizable? Or locked in place like the circle mode?\nIt might be a bit tricky. Since the crop view controller relies on the image's own sizing, you'd have to specify the corner radius as a fraction instead of a discrete number.. Thanks for the PR @kimjg! :D . Thanks for the PR @gavin-tang! Looks good to me! :). Hey @colinhumber! Thanks so much for bringing this to my attention!\nI just added some extra code to disable iOS 11's smart 'safe area' mechanism, so this SHOULD be fixed now.\nCould you please download the last copy of master and see if it's fixed for you?\nThanks!. Awesome! My pleasure! Thanks so much for confirming it for me! :). Sorry for the delay @chris-doclily! Thanks for that! :D . Hey @shardul89! Thanks for the issue and for filling out the form completely.\nThat's a fantastic idea! I'd never thought about making this library a share extension component.\nWhat are the APIs that it's using that can't be used in the share extension?. Thanks for the extremely thorough PR @shardul89! I think you're actually the first to test everything works properly down to the split screen and the rotations!\nI'll merge it in so you can start using it now, but I might have a play with the share extension target. I can probably make it a bit lighter (It's not necessary to have a blank storyboard for that) and give it a bit more context. :)\nThanks again!. It probably isn't necessary to do this part. The frame value returned by the delegate already accounts for the rotation, so I don't think it's necessary to perform any translations on the crop box frame.\nIf you just make sure to apply the rotation before applying the crop box frame, it should be okay to remove this. :)\n. ",
    "cherishloveyou": "i think he need  do/undo!\n. ",
    "debug29": "I will try to make it, as i said, i'm not a huge iOS developer. But why not try :smiley: . If i make it, i reply in this issue.\n. Thanks, i'll take a look.\n2015-06-25 8:31 GMT+02:00 Tim Oliver notifications@github.com:\n\nOh! Thanks for the heads-up on that library! I hadn't seen that one before.\nHrmm, I just downloaded it and had a play with it. It certainly allows\nfine-grain rotations, but the image isn't inside a scroll view, so you\ncan't drag it around. That in itself is very easy to implement, but it's\nthe first part of the puzzle for the sort of feature we're talking about\nhere.\nI'm pretty sure the solution involves actually rotating the UIScrollView\nas a whole, and adjusting the contentSize to match the bounds of the\ncropping box somehow. This is opposed to the '90-degree' feature in there\nalready as that actually just rotates the image view, but leaves the rest\nof the view untouched.\nIt probably just needs a lot of experimentation and playing around with a\nUIScrollView to work out how it behaves when it's rotated, but that's\nsadly something someone else is going to have to try out.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/3#issuecomment-115123311\n.\n\n\nFlorian COULON\nSkype : fcoulon1\nTel Perso : 06.76.48.50.53\nE-mail : f.m.coulon@gmail.com\n. ",
    "kronik": "Maybe SWImageRotation might help to simplify logic?\n. ",
    "BasThomas": "My pleasure :)\n. ",
    "BrunoVillanova": "Thank you for the great work on this project!\n. ",
    "adrianodiasx93": "@TimOliver & @BrunoVillanova \nHere seems that Portuguese-BR is still not working.\nI am using this lib in my swift project as a carthage dependency (linking the binary and importing it on code). I tried the last release and the master. Something I might be forgetting?. @TimOliver, it seems that Portuguese-BR is not working.\nI am using the lib in my swift project as a carthage dependency.\n. ",
    "LewisTheobald": "Hi @retsohuang, I've just stumbled on this for a Swift project I'm working on and wanted something very similar. I created a new method in the view controller:\n``` objective-c\n- (void)setInitialAspectRatio {\n// Create the aspect ratio\nCGSize aspectRatio = CGSizeMake(1.0f, 1.0f);\n\n// Set the aspect ratio\n[self.cropView setAspectLockEnabledWithAspectRatio:aspectRatio animated:false];\n\n// Set the button as active\nself.toolbar.clampButtonGlowing = true;\n\n}\n```\nAt the end of 'viewDidLoad' just fire that off:\nobjective-c\n[self setInitialAspectRatio];\nThen under the 'resetCropViewLayout' method, put the same:\nobjective-c\n[self setInitialAspectRatio];\nIf you open TOCropToolbar, find the five rows starting with '_clampButton' and comment them out (that'll remove the button from showing altogether if you want it removed).\n. ",
    "retsohuang": ":+1: \n. ",
    "vladcomp": "I just did more or less the exact same thing as @LewisTheobald.  However, it seems as though rotateImageNinetyDegreesAnimated does not respect the aspectLockEnabled property and will reset the aspect ratio when rotating.  \nSo I went a little deeper and created a property called fixedAspectRatio.  Then put the following code in both  -viewDidLoad and -rotateCropView.\nif (!CGSizeEqualToSize(fixedAspectRatio, CGSizeZero)) {\n    [self.cropView setAspectLockEnabledWithAspectRatio:fixedAspectRatio animated:NO];\n}\nTo hide the display of the clamp and reset buttons, I added properties/methods for those buttons analogous to the existing -setRotateButtonHidden in TOCropToolbar.\n. ",
    "ArjunSa786": "hi tim thanks for reply\nimages size is 1.9 MB \n. 750X1334 resolution.i was pick image in image picker controller and pass to image in cropview.when i click done button it will happen .\n. No, i am not doing any rotation,it will come 4 times each of 10 using crop. and when i click done button also show in log -----<<<>>>>   is being asked to animate its opacity. This will cause the effect to appear broken until opacity returns to 1.\n. iMAGE RESOLUTION (3264.0, 2448.0)  orientation 0 scale 2.000000 and returncropped image resolution is {6528, 4892} \nwhen convert into byte 1203580 bytes  using\n              let imageData = UIImageJPEGRepresentation(image, 0.0)\nany idea reduse size but not dimension ?\n. [self.image croppedImageWithFrame:cropFrame angle:angle] when call this method dimention is double. how to change?\n. hi  lori57\nplease change UIImage+CropRotate.m file\n- (UIImage *)croppedImageWithFrame:(CGRect)frame angle:(NSInteger)angle\n  {\n  UIGraphicsBeginImageContextWithOptions(frame.size, YES, 1.0f);\n    {\n  }\n  }\nhope it help\n. ",
    "iori57": "My app is crashing as well when trying to crop a very large image. The image is 3.3MB in size and with resolution 3264x2448 which is a photo taken using iPhone 6 plus. If I don't reduce the crop area but use the full size and press the Done button, half of the time it will crash the app with error 'Received memory warning.' Sometimes I can even see the white apple logo after the crash but the device is not restarting, it just go back to home screen :)\nI have uploaded a sample image that i used here:\nhttps://dl.dropboxusercontent.com/u/9307455/largeimage.zip\n. I figured the cause of the problem, the problem was because I thought that the way to use this library is the same as your colleague Kishikawa-san's PEPhotoCropEditor :)\nHis code example suggested us to present the view controller as such:\nUINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:controller];\n [self presentViewController:navigationController animated:YES completion:NULL];\nHowever, doing the same while using your library will cause the issue above. I figured that the navigationController was causing the problem so actually we don't need that. This is sufficient:\n [self presentViewController:controller animated:YES completion:NULL];\nTested and works wonderfully. You have trully written the best image crop library for iOS that I have came across. Brilliant work!\nJust a suggestion: Would be of great help to others to put a code example on how to initialize and use the library on the first page, like how Kishikawa-san did it :)\nMillion thanks!\n. ",
    "bejo": "np! thx for the great pod! :)\n. ",
    "arvindkumar-gr": "You can use the below code to start with custom rect. \n```\npragma mark - Image Picker Delegate -\n\n(void)imagePickerController:(UIImagePickerController )picker didFinishPickingImage:(UIImage )image editingInfo:(NSDictionary )editingInfo\n{\n    [self dismissViewControllerAnimated:YES completion:^{\n        self.image = image;\n        TOCropViewController cropController = [[TOCropViewController alloc] initWithImage:image];\n        cropController.delegate = self;\n        [self presentViewController:cropController animated:YES completion:nil];\n        cropController.toolbar.clampButtonHidden = YES;\n        cropController.toolbar.rotateButtonHidden = YES;\n        [cropController.cropView setAspectLockEnabledWithAspectRatio:CGSizeMake(1.74f, 2.20f) animated:NO];\n    }];\n}\n```\n. \n",
    "ahanmal": "@arvindkumar-gr That's interesting. I didn't think about modifying the cropView directly. But, doesn't that only change the aspect ratio, and not set a starting origin for the cropView?\nI've been trying to do it with the following: \nframe.origin.x = floor((self.baseCropBoxFrame.origin.x/self.imageSize.width)*bounds.size.width*0.5f);\n    frame.origin.y = floor((self.baseCropBoxFrame.origin.y/self.imageSize.height)*bounds.size.height*0.5f);\n    frame.size.width = floor((self.baseCropBoxFrame.size.width/self.imageSize.width)*bounds.size.width);\n    frame.size.height = floor((self.baseCropBoxFrame.size.height/self.imageSize.height)*bounds.size.height);\n    self.cropBoxFrame = frame;\nWhere baseCropBoxFrame is passed in during initialization and the one I want the crop frame to be. However, while it does adjust the crop frame, it's not the one I want. It has a different aspect ration. @TimOliver any reasons for the 0.5f? Where is the origin that I should be making the crop frame in terms of? Thanks!\n. ",
    "ChrisSchneider": "Sorry for the unintentional PR, this is not ready yet\n. ",
    "codehearted": "Pulled PR because the example code has been hardcoded to use a specifc aspect ratio, for testing purposes. A proper full update would include an example that can switch to use fixed or variable aspect ratio. When time permits..\n. ",
    "AbiramiBala": "Can you help me to do the following..\nafter selecting an image if the done button is pressed without editing the photo, then the image should change to its default size/frame as 16:9 and it should be displayed on the first view controller....\nie:  want to crop an image to 16:9 even if the user doesn't edit it at all..\nPlease help me to do it as soon as possible\ni am a beginner to ios objective c, so please help me to grow up.....\ni was trying my level best, but i couldn't do as above... i've attached the project i did.... please do find it...\nImage Croping.zip\n. yes....it should be done when the user click done button even if the user doesn't edit it at all... or the image (any image from different size) should automatically changed to its default size as 16:9 when it opened itself.....   \ni was trying my level best, but i couldn't do as above... i've attached the project i did.... please do find it...\nImage Croping.zip\nand thank you for the project... it is very much helpful to me.... and i am a beginner to ios objective c, so please help me to grow up.....\n. hi...... im waiting for your reply........\n. ",
    "sammy-SC": "@siong1987 awesome, i am actually going to use your fork.\n. Hello,\ncheck out this fork https://github.com/siong1987/TOCropViewController/tree/default-aspect-ratio\nit adds lock ration functionality.\n. ",
    "Sander-Kornev": "So am I. Vote for this merge as well.\n. Agree, required feature for me as well.\nAdded pull request with the feature https://github.com/TimOliver/TOCropViewController/pull/60\nYou may use my branch until the pull request is merged.\n. I am sorry for misinforming you.\nYes, you are right, my pull request doesn't fix it completely, it just makes aspect ratio initially horizontal if aspect ratio is locked, but not prevent it from being rotated further.\n. Hi @TimOliver !\nThanks for the answer.\nHere is how my two screens look like.\n\nProbably you imagined it in another way.\nI'll try to make the PR soon.\n. ",
    "JordanRoPo": "i just reopened / restarted the project and it fixed it. not really sure what i did...\n. ",
    "hydyy": "nice :P \n. ",
    "zobnec": "Yeah.I also want how to lock it!\n. ",
    "morizotter": "Sorry, carthage is not supported yet. I misunderstood.\n. ",
    "Urkman": "I created a pull request... Just take a look\n. ",
    "huang-kun": "Hi Tim\nThe main reason is adding an option to make the crop tool flexible.\nIt doesn\u2019t have to change the default behavior, but I really shouldn't providing a fixed orientation this way. I can\u2019t use TOCrop with the counterclockwise rotation for specific demand. I think it\u2019s better provide an another API which doesn\u2019t change the default action but it can provide counterclockwise rotation if you call -rotate90degree with clockwise parameter. So easy to acheve that.\nI haven\u2019t to add any API to the controller because the way I perform the different rotation is by subclassing and overriding. So I did this without changing the source controller. It\u2019s a fantastic cropping tool. I made my best to only provide the flexible rotation and prevent the bugs for releasing this version.\nJack Huang\nOriginal Message\nSender:Tim Olivernotifications@github.com\nRecipient:TimOliver/TOCropViewControllerTOCropViewController@noreply.github.com\nCc:huang-kunjack-huang-developer@foxmail.com\nDate:\u661f\u671f\u56db, 1\u6708 21, 2016\u200709:48\nSubject:Re: [TOCropViewController] The first version of introducing clockwiserotation. (#42)\nThanks for doing this!\nErr, but is there any point to this if the ability to rotate images in different directions isn't exposed in the TOCropViewController? What was your goal for this exactly? :)\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. Hello Tim\nWell, after working the most of the daytime, I made the clockwise rotation button down to the toolbar alongside with the default (counterclockwise) rotation button. It works with both horizontal and vertical toolbar layout.\nJack Huang\nOriginal Message\nSender:Tim Olivernotifications@github.com\nRecipient:TimOliver/TOCropViewControllerTOCropViewController@noreply.github.com\nCc:huang-kunjack-huang-developer@foxmail.com\nDate:\u661f\u671f\u56db, 1\u6708 21, 2016\u200709:48\nSubject:Re: [TOCropViewController] The first version of introducing clockwiserotation. (#42)\nThanks for doing this!\nErr, but is there any point to this if the ability to rotate images in different directions isn't exposed in the TOCropViewController? What was your goal for this exactly? :)\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. This pull request is about adding a new rotation button directly into project. Here is a summary of changes:\n1. Add a new rotation button to TOCropToolbar UI.\n2. Add a new rotation API to TOCropView for providing both clockwise and counterclockwise rotation of image.\n3. Change the fixed internal implementation of image rotation method by making it compatible with new rotation.\n4. Encapsulate the TOCropToolbar button's frame calculation and make it more accurate and reusable for both horizontal and vertical toolbar layout.\nThese changes deserve a version update.\n. Hi Tim\nSome suggestions you may want to know from my point of view.\n1. I modified the internal properties for adding new rotation. Each kind of rotation should be combined with a control (button) in this app and the only rotationButton from original TOCropToolbar seems not good. So I used two new properties to replace the old rotationButton and this change make more sense. Since the internal structure of TOCropToolbar has changed, for developers who visit the \u201c_rotationButton\u201d from outside of TOCropToolbar will definitely hit a crash because the original ivar didn\u2019t exist any more. We may not be responsible for this kind of crash because the \u201c_rotationButton\u201d is not declared public, but I did change the public block property \u201crotateButtonTapped\u201d to other two new block properties. You might want to also redeclare \u201crotateButtonTapped\u201d property and make it\u2019s setter and getter pointing to the default counterclockwise action so people whoever used \u201crotateButtonTapped\" will not see no compile error. (OR NOT)\n2. Have you (or other contributors) ever thought re-designign parts of TOCropViewController\u2019s architecture that providing the ability for other developer to customize the layout of the default crop view and control ? For a lot of reasons and specific demands, we can not just use without customizing (e.g. make button\u2019s image different or prefer the toolbar on the right side in landscape mode or maybe speed up the crop-zoom animation, etc). In my project, I also use DBCamera (https://github.com/danielebogo/DBCamera) to capture image. This camera project is an example that provides a way for developers to customize the default camera even subclass their camera view. I bet people can custom TOCropViewController from lots of approaches, however these are not official APIs and not introduced on README. (OR NOT if TOCrop is not designed that way from beginning)\n3. At the end of Feb, I need to continue work on my project binding with this fantastic cropping tool and I got a multi-cropping gesture support request (Using two fingers to manipulate the crop box frame) which is not supported on TOCrop by now. Honestly I haven\u2019t looked at the gesture codes in detail from TOCrop, but I will see what I can do for that. Any interesting ?\nOriginal Message\nSender:Tim Olivernotifications@github.com\nRecipient:TimOliver/TOCropViewControllerTOCropViewController@noreply.github.com\nCc:huang-kunjack-huang-developer@foxmail.com\nDate:\u661f\u671f\u65e5, 1\u6708 24, 2016\u200722:10\nSubject:Re: [TOCropViewController] JK generic rotation (#45)\nThanks a lot for that! I just incorporated those changes.\nThat being said, I did change a few things:\nI made the clockwise button optional, and off by default. This is mainly since I don't think the majority of users (including me in my own use case) need two rotation buttons. I moved the clockwise button to the far right of the panel, since I think separately those two icons looks slightly more visually confusing (The goal is their placement also helps indicate their direction)\nLet me know if you need me to do anything else!\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Tim\nWhen will you update the cocoapods ?\n\n\u5728 2016\u5e741\u670828\u65e5\uff0c14:13\uff0cTim Oliver notifications@github.com \u5199\u9053\uff1a\nOh wow! Blimey! Nicely caught! Thanks for that!\n\u2014\nReply to this email directly or view it on GitHub.\n. There is a mistake on setRotateClockwiseButtonHidden: implementation on TOCropToolbar.m\n\nMistake:\nif (_rotateClockwiseButton == NO)\nFix:\nif (_rotateClockwiseButtonHidden == NO)\nUnfortunately, my MacBook is out of power and I can not pull request recently. Please fix it when you have time and don't forget the cocoapods updates.\nThanks\n\n\u5728 2016\u5e741\u670828\u65e5\uff0c16:06\uff0cTim Oliver notifications@github.com \u5199\u9053\uff1a\nI'll try and do that in an hour or so. :)\nOn 28 January 2016 at 15:55, huang-kun notifications@github.com wrote:\n\nHi Tim\nWhen will you update the cocoapods ?\n\n\u5728 2016\u5e741\u670828\u65e5\uff0c14:13\uff0cTim Oliver notifications@github.com \u5199\u9053\uff1a\nOh wow! Blimey! Nicely caught! Thanks for that!\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/pull/53#issuecomment-176041285\n.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n\n",
    "trr-amsiq": "Sounds great!! I'll be happy to see how you implement it, always good with new ideas. :)\nI am having a hard time getting the localization to work out of the box. I need to create a .strings file in the Cocoapods project before my project takes your localization.strings files in count. Any idea why?\n. It is expected!\nYou also have to set:\ncropViewController.toolbar.clampButtonHidden = true\nbut this is broken in version 1.2.1\nIt will be fixed in the next version.\nI've fixed it in the following fork:\nhttps://github.com/trramsiq/TOCropViewController.git\nadd this to your podfile instead:\npod 'TOCropViewController', :git => 'https://github.com/trramsiq/TOCropViewController.git', :branch => 'master'\n. As I see it, it is still rotating with the picture... Am I wrong?\n. @TimOliver \nThe bug is on line 124 \nself.toolbar.rotateClockwiseButtonHidden = self.rotateClockwiseButtonHidden && !circularMode;\nshould be\nself.toolbar.rotateClockwiseButtonHidden = self.rotateClockwiseButtonHidden && circularMode;\nand line 926\nif (self.rotateButtonsHidden == NO) {\nshould be\nif (_rotateClockwiseButtonHidden == NO) {\n. ",
    "imack": "This is definitely something I could use as well. My biggest issue with PEPhotoCropEditor was a lack of minimum crop support.\n. ",
    "harishchopra86": "Hey @TimOliver ,\nThanks for the amazing cropping code. Did you got chance to implement the minimum image size limit?\nThanks.\n. Hi @TimOliver \nI had a look into https://realm.io and it is a revolutionary product. Below are my inline thoughts over the image size implementation points:\nWhat is required to calculate the minimum size the crop box can be when the user resizes it.\n- I think minimising the size of crop box should be allowed until the image's size(height OR width) is greater then the crop box's size. As soon as the image's height OR width reaches cropbox's size then no more resizing should be allowed.\nWhat is required to calculate the maximum zoom a user can pinch-in.\n- Maximum zoom should depend on the quality of the image. While zooming if an image's resolution becomes same as the crop box resolution then zoom should be disabled OR you can provide a constant to set maximum zoom scale. \nWhat happens when the screen rotates.\n- If the screen rotates then image and crop box should get resized but their aspect ratio should remain same.\nRegards,\nHarish\n. ",
    "AnubhaTrantor": "Hi @TimOliver,\nI am facing one problem by using this code that is Zoom scale limitation. I want to fix zoom scale because when I zoom my image then it is reduced from actual required image size.\nFor example :- If I require my image to fit in size 300_450 so I have given crop box with 2:3 aspect ratio and can crop the image in it. But I can keep zooming the image and the zooming is not restricted and at last I get image of very small size like 50_75, etc. So, is there any mechanism by which I can stop image zoom when the image size has reached the minimum size OR Dropbox size. Please advise.\nRegards,\nAnubha\n. ",
    "Tarpsvo": "Thank you!\nI made my own fix by editing the source code and removing the button entirely, as I have no intention of toggling it back on at this moment in time.\nLooking forward to the release where it will be fixed.\nCheers. :+1: \n. Fixed it in pull request #58 \n. ",
    "tristanrichard": "Just looked in the comments and apparently setting lockedAspectRatio should hide the clamp button... \nTim can you confirm that?\nI've created a pull request that hides the clamp button if lockedAspectRatio is true\n. ",
    "mamaral": "+1 on this - I tried it myself, but this is a bit more in-depth than some of my other changes, so I fear I'd break something else unless I spend some more time learning how this is all architected. Any plans on doing this, or ideas on how to tackle this @TimOliver?\n. No problem!\n. :) \ud83d\udc4d \n. np, thanks for the sweet lib!\n. ",
    "brod-ie": "@TimOliver Any update on this?\n. ",
    "ChekistNSK": "Thank you very much!!!\n. ",
    "gbarnett-cs": "I'd be fine with the \"quick and nasty way\" - wouldn't it need to re-lock the aspect ratio as well, since it appears that the lock is removed post-rotation?\n. ",
    "Algonrey": "Has anyone been able to do this correctly? i'm in the same situation...\nthanks!. ",
    "kumait": "Hello Tim, \nThanks for the reply.\nYou are right, iOS rotates the cropping rectangle along with the image, I noticed that after posting my comment. However, manual gesture-based rotation rotates the image alone.\nI am glad that you intend to implement this feature, I look forward to seeing it in next version.\nKind regards,. ",
    "avijitnagare": "Even i am not \"Don't Allow\"still i am not getting this \"Would like to access your photos\" for first time install app.also delete and reinstall app still not getting \"Would like to access your photos\" pop up\n. I am getting \"Would like to access your photos\" this pop up on simulator but not on device. any help?\n. Did any try on device ? \n. ok thanks. Try to ask to Stack Overflow\nOn Tue, Feb 2, 2016 at 9:23 PM, Tim Oliver notifications@github.com wrote:\n\nYou can't rely on the behaviour of the simulator. The device is where it\ncounts. ;)\nI can't help sorry. This is a system level thing; not my library level.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/55#issuecomment-178650829\n.\n. \n",
    "ReadmeCritic": ":wink: \n. ",
    "hansemannn": "Fixed in https://github.com/TimOliver/TOCropViewController/pull/72\n. Fixed in https://github.com/TimOliver/TOCropViewController/pull/72\n. ",
    "Minitour": "Hi Tim, thanks for the quick reply!\nThe following suggestion didn't work and result in the same error:\npresentViewController(controller, animated: false, completion: nil)\nself.controller.cropView.setAspectLockEnabledWithAspectRatio(CGSizeMake(4, 1), animated: false)\nHowever, This code did work and displayed the cropView size as expected:\npresentViewController(controller, animated: false, completion: {\n            self.controller.cropView.setAspectLockEnabledWithAspectRatio(CGSizeMake(4, 1), animated: false)\n        })\n. ",
    "ghost": "Try this code if predefined ratios are okay with you.\nSwift\ncropViewController.defaultAspectRatio = .RatioSquare\ncropViewController.aspectRatioLocked = true\nself.presentViewController(cropViewController, animated: true, completion: nil)\nPredefined ratios are defined in TOCropViewControllerAspectRatio.\nSwift\npublic enum TOCropViewControllerAspectRatio : Int {\n    case RatioOriginal\n    case RatioSquare\n    case Ratio3x2\n    case Ratio5x3\n    case Ratio4x3\n    case Ratio5x4\n    case Ratio7x5\n    case Ratio16x9\n}\n. I tried your code with Xcode and it worked without any problem:\nSwift\nfunc presentCropViewController(image: UIImage) {\n    let cropViewController = TOCropViewController(image: image)\n    cropViewController.delegate = self\n    cropViewController.aspectRatioLocked = true\n    presentViewController(cropViewController, animated: true, completion: nil)\n    cropViewController.cropView.setAspectLockEnabledWithAspectRatio(CGSizeMake(4, 1), animated: true)\n}\nIt is also working if you call setAspectLockEnabledWithAspectRatio method in the completion handler, but there is a delay before the aspect ratio you set is applied.\n. Thank you, much appreciated. Will be testing tomorrow and post my comments.\n. If the picture has become a circle, it will be more perfect\n. ",
    "minikool": "thank sir it work \n. okay sir thank you so much\n. ",
    "tiviti": "Thanks Oliver. We want the output image to fixed at 600x130, hence we want\nthe user to be able to move the 600x130 rectangle over the image to crop it\naccordinaly\nOn Sat, Feb 27, 2016 at 5:55 AM, Tim Oliver notifications@github.com\nwrote:\n\nAnswer - Not inside this controller.\nAre you asking that the image itself needs to be 130x600 before it's\npassed to the controller? If so, that might be better off as logic\nperformed inside your app beforehand. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/68#issuecomment-189573235\n.\n\n\nIlan Kasan\n. ",
    "emilypriddy": "I was wondering something along the same lines but it would limit the user to using only the square aspect ratio.\n. ",
    "pedro380085": "\ud83d\udc4d \n. ",
    "YIFanH": "@TimOliver \nThanks for your reply, I uesd the lines and vanishing point feature to find the rotate angle, but the results is is different with the ios. I guess the ios only used the lines feature,So i make the  special image which only have some lines,but can not find a simple rules to find angle\u3002\n. ",
    "jtmilne": "Good news is that bug is fixed and the clockwise rotation icon is now showing up. Bad news is it seems to have introduced a new bug. Now when you rotate the aspect ratio is lost. I have a locked aspect ratio of square. Before it kept the locked aspect ratio when rotating. Now it loses the aspect ratio and reverts to the original image ratio when the image is rotated. \n. Problem solved. Thanks! \ud83d\udc4d \n. ",
    "faceyspacey": "awesome thanks man! I only need a square, so I should be good. \n. ",
    "alibasta": "Hi guys.\nI've added a pull request for this feature:\nhttps://github.com/TimOliver/TOCropViewController/pull/92\n. ",
    "OrWest": "Here you are.\n\n. I think I have found what happened. I has changed logic of transition in my app. I have pushed your controller and after cropping push next controller. I changed it today to presenting and it has fixed all bugs.\n. Sorry to trouble you. This issue should be closed.\n. I think you should write to ReadMe about using your controller only through call presentViewController, not push to navigation to avoid bugs.\n. Earlier I show Cropper via Push in UINavigationController, but this method has a lot bugs) So, I show Crop via presenting modally. But status bar hasn't hide if I set View controller-based status bar appearance to NO in info.plist. I think this key decline calling of - (BOOL)prefersStatusBarHidden which tell to hidden status bar)\nNow, I inherited of TOCropViewController and overrode two methods:\n- (void)viewWillAppear:(BOOL)animated {\n[[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationSlide];\n[super viewWillAppear:animated];\n}\n- (void)viewWillDisappear:(BOOL)animated {\n[[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationSlide];\n[super viewWillDisappear:animated];\n}\n. #106 \n. ",
    "sakshiGoel26": "Hello,\nPFA: Shared Video\nTOCropViewController_ReloadIssue1.zip\n. Yeah Thanks.. It worked. :) \n. ",
    "yongseongkim": "After cropping and rotating, out of photo range. \njust show black screen with white grid overlay view.\nAnd one more rotating, original image matched white grid overlay view size shows. (not cropped image)\n\n\n. Oh... It is not customizing problem.\nIt also happen in TOCropViewController.\nJust play your crop view controller example.\nFirst, crop smaller than original image.\nSecond, just rotate twice(180').\nI don't know why many people don't say this bug.\n\n. Oh I also want it.\n. It does not support rotate.\n. I applied below steps first.\n1. rotate 2. crop\nBecause the delegate returns frame after rotate and crop (you said).\nBut there are some bugs. It points wrong location.\nSo I tried changing steps.\n1. crop (frame before rotate)\n2. rotate\nit's working well. So I selected this way.\n. ",
    "d3ce1t": "Thank you very much for your quickly fix :).\nI've just tested it on Simulator from iOS version 7 to 9 and I can confirm that aforementioned warning no longer appears in either of the tested versions. I would have expected to appear in 7 and 8 after your words. But it doesn't. So maybe something else has been changed?. Anyway, I only mention to put it in your knowledgement.\nThank you again for your great work!\n. ",
    "andrea-86": "No, problem, this is just a great job.\nAndrea Nenci\n2016-05-06 19:14 GMT+02:00 Tim Oliver notifications@github.com:\n\nIt's not possible.\nI really would like the fine-grained rotation capability like in the iOS 8\nPhotos app, but it's too complicated. Due to the layer composition of this\nview controller, I get the feeling it would be necessary to rewrite the\nwhole thing from scratch in order to support it. :(\nSorry.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/81#issuecomment-217502348\n. I do not know if could do with rewrite everything from scratch because\nunfortunately, given my gaps in iOS development, I still have not fully\nunderstood your code and how it manages the two display levels. Hacking\nwith iphone and with the last few models of Android (Samsung edge S7) I\nhave an idea on how to handle this. According to me only the bottom-view\nlayer contains a canvas and the image while the crop layer, when displayed,\nis nothing more than a window to the one below. The image is rotated (and\nclimbing to not let blacks holes in the canvas) and redesigned on the\ncanvas (the dimensions of the layer and of the canvas remain the same\nthere).  keeping track of the scale factor and using the dimensions of the\nlayer of crop proportionate to the size of the image then go to make the\nfinal image crop. Do you think is the right way?\nThanks for the advice and congratulations for the job you've do.\n\nAndrea Nenci\n2016-05-09 13:11 GMT+02:00 Andrea Nenci andrea86.nenci@gmail.com:\n\nNo, problem, this is just a great job.\nAndrea Nenci\n2016-05-06 19:14 GMT+02:00 Tim Oliver notifications@github.com:\n\nIt's not possible.\nI really would like the fine-grained rotation capability like in the iOS\n8 Photos app, but it's too complicated. Due to the layer composition of\nthis view controller, I get the feeling it would be necessary to rewrite\nthe whole thing from scratch in order to support it. :(\nSorry.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/81#issuecomment-217502348\n. \n\n",
    "raho": "Thanks for checking the PR. \nI modified it as you suggested - the code is simpler now ;)\n. ",
    "farhansyed9": "There's nothing visually going on that's wrong, just when I press done, it\nsays that error message on the console.\nOn Tuesday, May 17, 2016, Tim Oliver notifications@github.com wrote:\n\nClosing this off since I'm not really sure what this issue it about (The\nwarning message? Or some lag somewhere?)\nIf you want to re-open it, please upload a video of the issue you're\ndescribing. Thanks!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/85#issuecomment-219916893\n\n\nFarhan Syed\nFounder of BrandSpace\n. @TimOliver  how should i go about deintegrating? pod update didnt work for me. \n. @TimOliver I de-integrated it then i did a pod install and still doesn't work. \n. I noticed in my project I dont have the info.plist like there is shown in the TOCropViewController on Github. \n. i deleted the Derived Data folder, and the initial error is gone and now this error is appearing:\nNo visible @interface for 'TOCropViewController' declares the selector 'setAspectRatioLocked:'\n. @TimOliver Ohh didn't realize, its because I'm on the newer version.\nAppreciate your advice and time!\n. @TimOliver alright so now after i looked over the API and I changed the necessary errors. \nI am back to square one. Same error i had in the beginning. \n``/Users/USER/Library/Developer/Xcode/DerivedData/APPNAME-cqrknuczxqiiuxcvjlupnrmizjox/Build/Products/Debug-iphonesimulator/TOCropViewControllerBundle.bundle: bundle format unrecognized, invalid, or unsuitable\nCommand /usr/bin/codesign failed with exit code 1`\n`CodeSign /Users/USER/Library/Developer/Xcode/DerivedData/APPNAME-cqrknuczxqiiuxcvjlupnrmizjox/Build/Products/Debug-iphonesimulator/TOCropViewControllerBundle.bundle\n    cd /Users/USER/APPNAME/Pods\n    export CODESIGN_ALLOCATE=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/codesign_allocate\n    export PATH=\"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\nSigning Identity:     \"-\"\n/usr/bin/codesign --force --sign - --timestamp=none /Users/USER/Library/Developer/Xcode/DerivedData/APPNAME-cqrknuczxqiiuxcvjlupnrmizjox/Build/Products/Debug-iphonesimulator/TOCropViewControllerBundle.bundle`\n\n``\n. @TimOliver So what I ended up doing, and I want to make sure this is okay with you is i ended up deleting theTOCropViewController-ToCropViewControllerBundlethat was located underPods` target \nand now my application builds successfully \n\n. Is it okay that I deleted the bundle as I showed above? Just want to make\nsure.\nOn Thursday, November 3, 2016, Tim Oliver notifications@github.com wrote:\n\nHmmm..... this is really weird. This seems to be entirely an issue with\nthe way CocoaPods is installing the library. I can't replicate it on my own\nmachine so there's not much I can do.\nIf you're actually able to reliably reproduce this issue, it might be best\nto report this as an issue to the CocoaPods repo\nhttps://github.com/CocoaPods/CocoaPods.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/136#issuecomment-258120813,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJI091CifqQv4PwGx3lMoDIcYVpB7arGks5q6chJgaJpZM4KniU_\n.\n\n\nFarhan Syed\nFounder of BrandSpace\n. ",
    "anamba": "Sorry about that, somehow I managed to miss the fact that there are already strings for Korean. I would still suggest changing \"Square\" to \"\uc815\ubc29\ud615\" to match what Apple uses.\n. ",
    "BeetLab": "Well, i was presenting it inside navigarion controller and everything worked fine, cause i needed status bar. Does it offense now?\n. I just realized that\n. ",
    "huangxuan518": "I need no matter how to rotate the picture, gridOverlayView is guaranteed for the horizontal 1:2 ratio, rather than the horizontal 1:2, rotation for the vertical into the 2:1, meaning that only the rotation of the picture, the clip box does not rotate\n. ",
    "KimDarren": "@TimOliver Thank you for your work, Tim!\n. ",
    "krishnadubagunta": "Hi, I'm sorry I couldn't reply. I was in vacation. \nUndefined symbols for architecture arm64:\n  \"_OBJC_CLASS_$_TOCropViewController\", referenced from:\n      Easy_Note.ViewController.presentCropController () -> () in ViewController.o\n      function signature specialization <Arg[0] = Dead> of Easy_Note.ViewController.viewWillAppear (Swift.Bool) -> () in ViewController.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nThis is what the total error is. \n. Sure thanks.\n. ",
    "NiteshKhandal": "ok , no problem i have solved my issue... :)\n. ",
    "judepereira": "I don't think that's affecting me. I haven't begun integrating the photo picker yet. That's the weird part - nothing changes in my code, but just introducing the pod triggers this warning.\n. Hmm alright. Thank you :)\n. ",
    "cooler333": "???\n. ",
    "Pe-te": "realized it's in the example code, but you can't delete issues here :)\n. Ah okay, didn't see the editing mode because we're using the circular cropping style. There it's more like a viewer, so would make sense in my opinion .. at least I tried a double tap when I wanted to zoom into the image.\nIn another project we let the scroll view handle everything, but not sure my objective c voodoo is strong enough, so I'll leave the swift code here hoping it helps the person who tries to implement it:\n`\nclass ImageZoomViewer : UIScrollViewDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.scrollView.minimumZoomScale = 1.0\n        self.scrollView.maximumZoomScale = 2.0\n    }\n```\noverride func viewWillLayoutSubviews() {\n    super.viewWillLayoutSubviews()\n    self.scrollView.zoomScale = self.scrollView.minimumZoomScale\n}\n@IBAction func tapOnImageDetected(recognizer: UITapGestureRecognizer) {\n    if self.scrollView.zoomScale == self.scrollView.maximumZoomScale {\n        self.scrollView.zoomScale = self.scrollView.minimumZoomScale\n    } else {\n        self.scrollView.zoomScale = self.scrollView.maximumZoomScale\n    }\n}\nfunc viewForZoomingInScrollView(scrollView: UIScrollView) -> UIView? {\n    return scrollContainer\n}\n```\n`\nOfc, once I have more time, I will try to do that myself, but no promises. :)\n. ",
    "knutigro": "Hi, I also have had lots of these crashes recently. In my opinion it would be easier to have an exception thrown by TOCropView that explains the reason for the crash, instead of having this crash being handled by UIKit. Also the NSAssertion is only thrown on Debug mode and this crash happened so far only on production mode in my app so a NSException would be better in my opionion.\nI would be happy to throw in a pull rquest for this if you like.\n/Knut. ",
    "jbrozena22": "On further investigation, if I upload the cropped image to S3 I see that the dimensions are correct and what you would expect, so the underlying image dimensions aren't getting changed by this tool.\nSo why then this code:\nfunc cropViewController(cropViewController: TOCropViewController!, didCropToImage croppedImage: UIImage!, withRect cropRect: CGRect, angle: Int) {\n        image = croppedImage;\n        print(\"width\", image?.size.width)\n    }\nresults in printing a width that is exactly half what I would expect?\n. ",
    "Mazorati": "The problem was in arguments CGSize(width: CARD_WIDTH_MULT, height: CARD_HEIGHT_MULT).\nlet CARD_WIDTH_MULT:CGFloat = 9\nlet CARD_HEIGHT_MULT:CGFloat = 5\nWhen i change to CGSize(width: 9, height: 5) everything works, but problem still exists!\n. Hello! Thanks for fast responding!\nI just change:\ncontroller.customAspectRatio = CGSize(width: 9.0, height: 5.0)\nCropRect result: (0.0, 170.0, 2487.0, 1388.0) - the same issue :(\nor\ncontroller.customAspectRatio = CGSize(width: Double(9.0), height: Double(5.0))\n(342.0, 589.0, 1459.0, 815.0) - in this case, for example, should be (342.0, 589.0, 1467.0, 815.0)\nThe only way i think to solve this is to crop again after TOCropController did crop :)\n. @TimOliver This problem occurs with any image. Just create ImageView with aspect ratio 9:5 and put there an image from didCropToImage action and see that it does not bound this imageView rect. So the aspect ratio is incorrect - not 9:5.\nBasically, this problem occurs when you change the cropping area. If you do not change - it all works well.\n. @TimOliver perfect! Thanks!\n. Thanks @TimOliver !\nHow about in order to make the ability to crop a picture with external region? Or can you help me to do this? (Some tips)\nSome thing like this:\n\n. ",
    "akovalov": "I'm using TOCropViewController in Swift 3 project via cocoapods, working good no errors.\n. This project is written in Objective-C and there is no need to make changes in code (or rewrite it completely in Swift) to use it in Swift 3 or other Swift version code, because Objective-C and Swift files can coexist in a single project. So if you use it via CocoaPods then 'Basic Implementation' example from Readme in Swift will look like:\n```\nimport TOCropViewController\nfunc presentCropViewController() {\n    let image: UIImage = ... // Load an image\n    let cropViewController = TOCropViewController(image: image)\n    cropViewController.delegate = self\n    present(cropViewController, animated: true, completion: nil)\n}\nfunc cropViewController(_ cropViewController: TOCropViewController!, didCropTo image: UIImage!, with cropRect: CGRect, angle: Int) {\n    // 'image' is the newly cropped version of the original image\n}\n```\nIf you copy source to Swift project than check out 'Importing Objective-C into Swift' section here https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html and then use like example above.\n. I like to use CocoaPods and didn't want to copy source code into project and edit them. \nSo I've come up with quick simple customization.\nIf anybody needs it https://gist.github.com/akovalov/6784e526ee273decefa7a21312066a1a.\nThanks for really nice component.\n. ",
    "osmanyildirim": "We expect swift version please # @akovalov :) :) :)\n. ",
    "MaStarJi": "Dear. Tim.\nI solved the problem.\nIt\u2019s been crushed with other library called CCBottomRefreshControl. I\u2019v just deleted that library then everything\u2019s OK.\nThank you for your consider anyway :)\n. ",
    "erickva": "You are a Legend! Thank you.\n. ",
    "bhushans": "The particular use case is to have an image of a particular size been cropped when we display it to the user, so the user can just move the crop frame on the image and focus on the image part they want to crop.  Not able to pin point to an exact pixel at a starting point is ok, but having a fixed crop frame is essential for my use-case.\n. Hi Tim,\nHow would I set the clamped aspect ratio and also how I ensure that the\nuser is not able to change the crop frame size.\nBhushan Shah\nOn Wed, Oct 5, 2016 at 10:18 PM, Tim Oliver notifications@github.com\nwrote:\n\nHmmm, okay.\nWell you can use the - [TOCropViewController imageCropFrame] property to\nset an initial crop value for the image. You could then combine it with a\nclamped aspect ratio to ensure the user can only generate an image of that\nshape, and then resize it to the appropriate size yourself afterwards. :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/130#issuecomment-251869317,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB-7swgDm8tdG9df_udm-UUacAqJlRc6ks5qxISngaJpZM4KPaND\n.\n. Thanks a lot.\n\nBhushan Shah\nBhushan Shah\nOn Oct 6, 2016 9:03 AM, \"Tim Oliver\" notifications@github.com wrote:\n\nHi! You can set aspectRatioLockEnabled = YES and resetAspectRatioEnabled\n= NO to make it that the user can't ever resize or reset the crop box's\naspect ratio. You can then use customAspectRatio to manually set the\nratio you need. :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/130#issuecomment-252008577,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB-7s7-zicokQwzuV3gMp0iUxux5LU5pks5qxRu7gaJpZM4KPaND\n.\n. \n",
    "adinertia": "Thanks for reply. \nI update library 4 days ago, i can update it again now if you mybe made some changes in this 4 days. \nHere is the picture of 720 x 540 that couse problem with ratio to 270 x 270 (not 540x540 if is possible) and also couses frame view like posted picture 1 above. And also original picture of picture1.\nThanks for helping out!\n720x540\n\nand original\n\n. ",
    "fabb": "Modifying the scale of the image to be cropped is not a nice behavior of this library, and should be separated from cropping.\n. That's what I meant.\n\nThis is so it can be dropped into a UIImageView and will render properly without any extra effort.\n\nI understand that, but that doesn't have anything to do with cropping (non-ui), but with displaying (ui). It's tailored to a very narrow use case. The user of this lib might not want to display the image in a UIImageView in the way you did in the example.\nWhen doing any operations on an UIImage I expect the scale to be untouched.\n. No, not exporting it with 1.0 constantly, rather with the scale the input image had ;-)\nActually we found a bug in our application code due to the behavior of this lib as we expected the scale to stay the same, but that's of course our fault and not yours ;-)\nNote that the scale of an UIImageView might not be the same as the mainScreen scale, it can be tweaked for performance or other reasons. Also the scale is probably only helpful, when displaying the UIImageView with its intrinsic size, or is it?\nEither way, no worries, we'll just fork this (very good) library, thanks for making it open source. \n. ",
    "codingtomato": "Hi! I also get the same error when building with simulator in Xcode 8.1 .  But it's OK when I run my app on my phone.   Before Xcode 8.1 all going well. The problem occurred when I just updated my xcode to 8.1 and nothing changed with my project. Below is the detailed information provide by Xcode\uff1a\n\nI guess there my be some problem with using Cocoapods.But I have no idea about where is error.  Here is my Podfile:\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\npod 'TOCropViewController', '~> 1.1.3'\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\nThanks a lot!!\n. ",
    "yagneshGingercube": "Thanks for quick reply \nI have installed SDK via cocoa pods . I am using latest version of TOCropViewController SDK . I am using it since last year . It was working excellent so far \nYesterday i installed latest version of XCODE . While compiling with latest xcode , i got an error . I am getting this error only when i am running in iPhone Simulator not on device .\nThanks a lot \n. I think you should add directory named 'Resources' in your prototype app and use SDK with Cocoapods to reproduce this issue .\nI am not sure but i think renaming 'Resources' directory in your SDK might solve the issue . \nThanks \n. I fixed the issue \n. I have deleted localization folders from Resources Group (Removed reference) and Added them back into same \"Resources\" group . \n\n\nBefore deleting files , I observed that group icon was shown in blue color instead of default yellow color.  I guessed there can be issue reference with these localization folders. So I decided to remove reference those localization folders and add them back again. And Luckily , it worked . TOCropViewController is working again . I am able to build , run my source code in device as well as iPhone simulator . Also I am able to archive build too . \nOverall Its working excellent for me now . \nNote : Make sure to delete derived data before building project \n:)\n. ",
    "arno608rw": ".* - *\n. ",
    "yigitserin": "When I go into crop view controller, the crop rectangle's ratio is equal to image's ratio. I will provide screenshots later.\n. First I am going the provide the whole code.\nAnd a link to example image I am working with\nSo here is what it looks like. When I set it to cropVC.aspectRatioPreset = .Preset16x9, it opens like this:\n\nHowever, when i set to: cropVC.customAspectRatio = CGSizeMake(16.0, 9.0) it opens like this:\n\nHope we can find a solution for this.\n. Ahh, I have been using 2.0.7 version. After update it works fine. Thanks!. ",
    "taojigu": "0.38.2\n. Thank you very much\n. ",
    "CodeEagle": "\nIf you want the cropping functionality of that category, you should be able to move that functionality to another class that exposes it to Swift properly.\nyeah, this is what i want.\nI install it using Cocoapods before, it show that method, but with Carthage, nothing. \n",
    "davidseek": "Yes. It did. Thank you... So all I needed to do was to delete the other function... damnit. That would have saved some time xD. Okay so - just to know if I get your right - the better practise would be to take the CGRect and put it onto an Image myself instead of taking the Image from the second func?. Thanks for the clarafication. ",
    "brandonscript": "Well, to be honest, what I end up doing depends completely on what my requirements are. I'll have to do some technical validation and investigation before I make that call. Whatever I decide, I'll let you know here! (Fair warning, it'll be a while before I get this far \ud83d\ude09). ",
    "lianghanzhen": "Thanks for your great work!\nscaleWhenMoveCropFrameCenter = NO is used to prevent crop frame scale to match the screen size.. ",
    "krish-dev": "thanks @TimOliver . I'm closing this issue.. ",
    "VijaylaxmiH": "I have added the TOCropViewController, as instructed in the GitHub, after\nadding and installing the Pod, its giving me error like use of undeclared\ntype TOCropViewControllerDelegate, even though i have imported the same\nBridging-Header.h file\nThank You,\nVijaylaxmi.\nOn Mon, Jan 23, 2017 at 10:07 PM, Tim Oliver notifications@github.com\nwrote:\n\nPlease do not ignore my message template. I need a lot more information\nthan that before I can help.\nPlease fill out exactly what's happening in this issue. :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/148#issuecomment-274540246,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALiKjcmcJOicGsUOBBktPF4v7zdlyp5Pks5rVNdNgaJpZM4Lq6tP\n.\n. I have installed it using CocoaPods, not manually,\nOk, thank you\n\nThank You,\nVijaylaxmi.\nOn Tue, Jan 24, 2017 at 12:25 PM, Tim Oliver notifications@github.com\nwrote:\n\nUm, are you installing it manually, or as a CocoaPods dependency then?\nSorry, I'm not sure if there's anything I can do to help!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/148#issuecomment-274724629,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALiKjRSuSycdQSikFgAgMT6n6RNaZD49ks5rVaBEgaJpZM4Lq6tP\n.\n. \n",
    "taixhi": "Hi, thank you for this. This resolved my issue, keep up the great work! Thank you \ud83d\udc4d . ",
    "alexanderkhitev": "the problem is not in your framework, I just asked a question on stackoverflow http://stackoverflow.com/questions/42110228/uialertcontroller-has-a-wrong-position-after-dismiss-another-uiviewcontroller. @TimOliver Sorry, it was my fault, I did not know what imageManager.requestImage block is called twice. Once again I'm sorry for your trouble.. ",
    "keshiim": "absolutely\n\n. @TimOliver Thanks. I download project from Github, not use Cocoapods. So I got a old version. . ",
    "haroonalpha": "Sir, check the updated comment and code plz.. ",
    "floriangbh": "I also have this warning with Carthage :) \nMaybe not include with the latest version ? . ",
    "Mikael491": "another note: cancel delegate method works fine. @xrayman I'm using Swift 2.3...apologies for not mentioning that\nOn Wed, Apr 5, 2017 at 1:15 AM, xrayman notifications@github.com wrote:\n\nSeems like you are writing in swift. Are you using Swift 3? Then delegate\nmethod signature should look like this: func cropViewController(_\ncropViewController: TOCropViewController, didCropToImage image: UIImage,\nrect cropRect: CGRect, angle: Int). Pay attention to that underscore right\nafter opening bracket\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/157#issuecomment-291787850,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANN1K3DkFxBUD6u0fDlvovG9rv1HAVcjks5rs02ngaJpZM4Mznc6\n.\n\n\n-- \nMikael Teklehaimanot\nSoftware Engineer\nw. Personal Webpage http://mikaelteklehaimanot.me\ne. mikael.engineer@gmail.com\n. @TimOliver @xrayman Solved this issue by forking library and making modifications. Specifically, the NS_SWIFT_NAME was throwing off the respondsToSelector (maybe because the NS_SWIFT_NAME is for current swift version? Im on 2.3) but now works with my pod pointing to my fork and commit! Rather than the selector in didCropToImage if statement, I call the obj-c delegate version. Can also be an issue with the way the NS_SWIFT_NAME didnt match the obj-c delegate as my didFinishCancelled delegate was firing. \nAgain, really appreciate the library, it is very nice!\n. ",
    "xrayman": "Seems like you are writing in swift. Are you using Swift 3? Then delegate method signature should look like this: func cropViewController(_ cropViewController: TOCropViewController, didCropToImage image: UIImage, rect cropRect: CGRect, angle: Int). Pay attention to that underscore right after opening bracket. ",
    "bartlomiejn": "Hey @TimOliver, thanks for the lib, great work!\nI've actually checked the source code for the library. I didn't have the time to check that, but this might be an issue with Swift 2.3. For some reason my delegate implementation doesn't respond to TOCropViewControllerDelegate selector calls. I'm using the method signatures suggested by autocompletion and I've also checked the NS_SWIFT_NAME definitions for correctness. \n. I've implemented callbacks that work along the delegate invocations on a forked repo. Opened a PR here: https://github.com/TimOliver/TOCropViewController/pull/161 @TimOliver. ",
    "anirudhsmarttechnica": "TOCropViewController whose view is not in the window hierarchy!??????\n. ",
    "cupnoodle": "@TimOliver Welcome! Thought I would contribute a bit since I am using TOCropViewController at work frequently too.\nThanks for the suggestion! I overlooked this property previously, my bad \ud83d\ude05\nI have used cropRegionInsets in this new commit instead of modifying crop view existing frame.\nCheers!. ",
    "sahabe1": "is it possible to set cropper overlay in 2:3 ratio. ",
    "funkenstrahlen": "I just realised this can be fixed by setting\ncropViewController.resetAspectRatioEnabled = false. ",
    "mowebkrunal": "Hi, yes right away I will do that in future and yes I did this without animation and it works awesome.. Oh ok. Thanks. I will do that in future when I get enough time.. ",
    "gredman": "Sorry, not sure what's going on with the travis build -- my change shouldn't effect the test target at all.... ",
    "veekay123": "Thanks a lot :)\nOn Sun, Jun 25, 2017 at 7:59 AM, Tim Oliver notifications@github.com\nwrote:\n\nClosed #173 https://github.com/TimOliver/TOCropViewController/issues/173\n.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/TimOliver/TOCropViewController/issues/173#event-1137618425,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AcS9yq6qk3dp0h5KE3M7wjE86Wkgr9r_ks5sHcYWgaJpZM4OEOrm\n.\n\n\n-- \nThanks and Regards,\nVineeth Krishnan V\niOS Dev Team\n[image: Webandcrafts] http://www.webandcrafts.com/\n. ",
    "cooerson": "\n. @TimOliver Sorry, my mistake! This bug is in the circularMode. \ud83d\ude0a  \ud83d\ude02  \n@trr-amsiq Thanks, that's it. But there is no need to modify line 926? \ud83d\ude0a  . ",
    "drougojrom": "@srosman8026 , for example\n```\nextension YourVC : TOCropViewControllerDelegate {\n    func openCrop(image: UIImage) {\n        let crop = TOCropViewController(croppingStyle: .circular, image: image)\n        crop.delegate = self\n        present(crop, animated: true, completion: nil)\n    }\nfunc cropViewController(_ cropViewController: TOCropViewController, didCropToCircleImage image: UIImage, rect cropRect: CGRect, angle: Int) {\n    cropViewController.dismiss(animated: true, completion: {\n        self.updatePhoto(image: image)\n    })\n}\n\nfunc cropViewController(_ cropViewController: TOCropViewController, didFinishCancelled cancelled: Bool) {\n    cropViewController.dismiss(animated: true, completion: {\n\n    })\n}\n\n}\n```\n. @TimOliver , I have the separate swift project, a small one, just for demonstration. Can upload it on the separate repository or add inside of your project.\nI can open a new issue for that.. It can be like circle mode, in my case, it is completely fine. ",
    "sundeepvig": "\nI have manually dragged the folder into the project .. the build fails and gives the following errors: A parameter list without types is only allowed in function definition on this line of code : - (void)setup { __weak typeof(self) weakSelf = self;\nAny help would be highly appreciated!\nNote : The example project works when I download and run it .. when I pull the code into my app, we see this error.. ",
    "colinhumber": "@TimOliver Yup, that's working great! Thanks for the quick fix!. ",
    "shardul89": "@TimOliver I have made few changes into the project and now it supports Main app + Share Extension both. Ping me if you have any doubts in the above PR.. "
}