{
    "Eilon": "Do you need a project.json for this? Also I'm not sure how to run unit tests in K builds right now... maybe @davidfowl has ideas?\n. :shipit: \n. :shipit: \n. Minutes a couple of tpyos, :shipit: \n. Yeah what MVC did certainly worked but there are likely better approaches. The problem with MVC's approach is that it worked exclusively with .NET's built-in resource management system, which not everyone uses. I think having that as a default is probably fine - though we should discuss with the engineering team before doing that. A more flexible approach would be to have the user specify a delegate that returns the string - that way they can plug in whatever resource loading code they want.\n. General note: Would be good to put a little more info in the commit description (and the PR) description. E.g. why are we removing what we're removing?\n. @gblmarquez we are working on allowing code contributions to this project but unfortunately it's not an option right now. But please do share your thoughts on this and perhaps it is something we can collaborate on in the very near future.\n. @tugberkugurlu these ASP.NET vNext components can run on full .NET Framework as well so as a partial story you might be able to get things more easily running in that scenario. And then at the same time perhaps investigate what it would take to get RavenDB and MongoDB clients working on CoreCLR. In some experiments that we've done it turns out that some components are super easy to port: sometimes as simple as changing a few assembly references and maybe #ifdef-ing one or two lines. Of course, some components are a bit more involved to port...\n. @MaximRouiller we are not planning on building this provider at this time, so no updates. If anyone wants to work on it I think we'd be happy to collaborate on the design.\n. @MaximRouiller email me at elipton-AT-microsoft.com and I'll get you in touch with the right folks.\nIt would certainly be a separate package because everything is a separate package :smile: But as far as where it would ship, we should talk about that.\n. Looks like @MaximRouiller is going to take crack at this. Thank you!\n. Note from an email discussion:\nIf Identity has content that can be displayed to end users (i.e. people visiting a site built using Identity) then we need to add a feature to Identity to allow app developers to customize the text. We had this in MVC where some of the validation messages would be displayed to end users and we had a pattern to allow an app developer to load their own resource strings. See this property as an example: http://msdn.microsoft.com/en-us/library/system.web.mvc.html.validationextensions.resourceclasskey(v=vs.118).aspx\nBTW I\u2019m not suggesting we exactly follow MVC\u2019s example because it was rather restrictive. I\u2019m sure we can do better by having a user do it more dynamically and programmatically somehow.\n. The describer thing sounds pretty interesting. I still recommend waiting a bit before working on this because we have some discussions that will soon happen with the CLR team on how loc will work in this new world in general. Some of those decisions could affect some details on this.\n. Yeah this name is ummm... yeah... it leaves something to be desired. Can we come up with a better name fairly soon?\n. I'd really like to not see that name in a template. We did a lot of great naming work for alpha so we should try to keep the bar pretty high.\n. DI will never pass in null. You can instead take in IEnumerable<IFoo> and you'll get back 0 or more instances of the item. Not sure that's what we want here though.\n. @ajcvickers hmm what I stated was indeed my understanding of the system - or at least part of the minimum contract that needed to be supported. It could very well be a bug that it doesn't.\n. I don't think I'd say there is any known technical problem - but it certainly stands out as being \"not like the others.\" At the moment these are the only concrete classes that are put into DI by a framework component. Is there any reason to not have interfaces for these?\n. Agreed.\n. CLA is confirmed.\n. We are closing this issue because no further action is planned for this issue. If you still have any issues or questions, please log a new issue with any additional details that you have.. @HaoK can you pull this after reviewing? (No CLA issue.)\n. Note: This change currently depends on the volatile feed because Coherence hasn't run. That's why AppVeyor is failing.\n. I think most repos don't bother with still having an exception, with the expectation of NotNull being implemented. I think the few cases where they're left is where perhaps some tests or whatever already assume the check will be there and we don't want to modify the tests.\n. @HaoK FYI we're most likely going to drop [NotNull] and use manual null checks the Old School way.\n. @divega Oh sorry the attributes we might want to stay in projects where we want to continue using them, but we'll still need to add explicit null checks and throws.\n. Token: vf79kttspnblh2hx\n. :shipit:\n. Back to @HaoK :smile: \n. @blowdart - this is a pretty old bug. Do we plan to fix in 2.1.0? If not, recommend moving to 2.2.0 or closing.. @blowdart / @HaoK / @divega - this bug is ~1.5 years old, should we just close it?. That's actually not the reason to change it, but we should most likely change it (the current code definitely won't work as-is).\nPlease https://github.com/aspnet/Entropy/pull/93#issuecomment-180047517.\n. @calebnelton can you squash into one commit?\n@HaoK can you review?\n. @calebnelton looks pretty squashed to me :smile: \n. @MaximRouiller I'd like two tickets to your next performance, kthxbye!\n. I have no strong opinion on this, as long as it's not in wwwroot :smile: \n. Merged, but please have a look to ensure the metadata is good.\n. :shipit: \n. Time has pretty much run out, so please get in whatever you can; the rest will have to wait.\n. :shipit: \n. Hi folks, we had a meeting about this and we think the best fix is the template fix because that's where the underlying bug is. The problem is in the template's authentication flow with OAuth providers and about what happens when the flow stops (or has a problem) part way through the process.\nMaking a change in the framework itself would almost certainly regress other behaviors such as the protection against infinite redirects in case of certain failed/partial authentication scenarios.\nAs such, I am closing this bug here and we'll make the template change as part of https://github.com/aspnet/Templates/issues/660.\nAnyone encountering this issue can use option (3) described at https://github.com/aspnet/Identity/issues/915#issuecomment-238939350 to implement the fix themselves within their app.\n. @gdoron good point, I'll get an announcement posted!\n. Yeah this is cool, @troydai feel free to merge.\n. This appears to be a dup of https://github.com/aspnet/Security/issues/1044, which is already fixed in the patch branch, so I'm closing this issue.. @ajcvickers I added you to a thread about this.. @bricelam sorry I don't know the reason (the email thread doesn't explain it). But we're getting this on the right radars to get to a resolution ASAP.. @HaoK can you create a standalone repro project and upload to GitHub? Seems like it should be easy to repro?. @HaoK / @ajcvickers - needed for preview2, or revisit in 2.1.0-rc1? @ryanbrandenburg - does your work with ApiCheck cover everything here anyway?. I think the new packages, such as the UI ones, should get empty baselines.. (That way we know it needs to be checked, but there will be no breaking changes detected, because everything is an 'add'.). Re: The existing breaking changes. I would vote to avoid the breaking change, because it doesn't seem worthwhile. But please work with the mgr/PM to resolve it one way or another.\nWe will update to the final 2.1 shape after we ship 2.1. I don't think we need https://github.com/aspnet/Identity/issues/1712 to track it because it will be a bulk update of all baselines. (That's why we want the empty baselines - so we know what to update.). Ah, you know what, maybe it isn't.. https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/breaking-change-rules.md#members\n\nMembers\n\u2713 Allowed\n...\nIncreasing the visibility of a member that is not virtual\n. So these are fine - just add the breaking change exceptions and then I think log a bug in the BuildTools repo to improve ApiCheck's behavior.. I thought empty baselines are fine because the tool will run, but will always pass. Then when we finish 2.1.0 and start on 2.2.0 we will update all the existing baselines (even if empty) to 2.1.0-RTM.. Yes we have to do that anyway for every repo.. One of the goals here is to at least standardize on the OpenID Connect (OIDC) protocol. That makes it a lot easier to swap out the back end. If you started with one backend and need to switch to another, you still have to figure out how to migrate your data (that's nearly always true anyway), but at least the app's frontend shouldn't need to change.. Any further work planned in 2.1.0-preview2?. @ajcvickers / @blowdart - move to RC1/RTM? Or 2.2.0?. Not trying to push either way, just reminding that time is running out \ud83d\ude04 . @javiercn do you have an update on this?. Any work here for preview2?. @HaoK this bug is marked as 2.0.1, but the PR was to dev. Should this bug be in 2.1.0, and we need to log a separate bug for 2.0.1?. (Re-opening just to make sure this doesn't get lost.). @1amirjalai maybe @HaoK can help if there's a possible workaround. We'll have a feed with the patch packages on them for people to test hopefully this week. I'll provide details here when that's available.. @chadwackerman2 we're working on getting a build of the 2.0.1 patch out to our MyGet feed but we're having some infrastructure issues. I will update all the 2.0.1 issues with package feed details when we have it ready.. This patch bug is approved for the 2.0.x patch. Please send a PR to the feature/2.0.1 branch and get it reviewed and merged. When we have the rel/2.0.1 branches ready please port the commit to that branch.. @kinosang we're working on setting up a feed for the upcoming 2.0.x patch that will have this fix.. Hi, we have a public test feed that you can use to try out the ASP.NET/EF Core 2.0.3 patch!\n\nTo try out the pre-release patch, please refer to the following guide:\n https://github.com/aspnet/Announcements/issues/274 (info)\n https://github.com/aspnet/Home/issues/2254 (discussions and questions)\nWe are looking for feedback on this patch. We'd like to know if you have any issues with this patch by updating your apps and libraries to the latest packages and seeing if it fixes the issues you've had, or if it introduces any new issues. If you have any issues or questions, please reply on this issue to let us know as soon as possible.\nThanks,\nEilon\n. This patch bug is approved for the 2.0.x patch. Please send a PR to the feature/2.0.1 branch and get it reviewed and merged. When we have the rel/2.0.1 branches ready please port the commit to that branch.. Hi, we have a public test feed that you can use to try out the ASP.NET/EF Core 2.0.3 patch!\nTo try out the pre-release patch, please refer to the following guide:\n https://github.com/aspnet/Announcements/issues/274 (info)\n https://github.com/aspnet/Home/issues/2254 (discussions and questions)\nWe are looking for feedback on this patch. We'd like to know if you have any issues with this patch by updating your apps and libraries to the latest packages and seeing if it fixes the issues you've had, or if it introduces any new issues. If you have any issues or questions, please reply on this issue to let us know as soon as possible.\nThanks,\nEilon\n. @HaoK can this bug be closed?. Hi, it looks like you are   posting on a closed issue/PR/commit!\nWe're very likely to lose track of your bug/feedback/question unless you:\n\nOpen a new issue\nExplain very clearly what you need help with\nIf you think you have found a bug, include detailed repro steps so that we can investigate the problem.. @danroth27 do we have a pointer to the current state of this?. As in, completely hide the wiki? I can do that. It'll mean any existing links to it will be broken. Are you ok with that?. Wiki is gone.. I think this is the reason: https://github.com/aspnet/Identity/blob/dev/.travis.yml#L17-L23. Yes we ought to tweak the list of branches there (and remove old bogus ones). But please in dev only because we don't want to cause spurious builds in the patch branch.. @HaoK / @ajcvickers - can one of you take a look and merge? Seems ok to me.. @HaoK you're the expert, you tell us \ud83d\ude04 . Yeah seems like a good idea.. Is the issue here that the DefaultUI is modifying MVC settings to make sure that it will work? That seems reasonable to me.\n\nIs there any other issue being discussed here?. > ability to configure the application as they wish\nThey absolutely are. Last person to change an option wins. The user's customizations of options should come last.. Ah, fair point, I did not realize that.\nHowever, if this option isn't set, the UI won't work, right? So why would you want to disable it and use the UI?. @javiercn - Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n[x] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit). @javiercn that sounds great, thanks! BTW you need to put a link in the \"TODO\" above.. Given that the Identity UI package pretty much just has stuff from our templates, you can use https://github.com/aspnet/templating/blob/dev/src/THIRD-PARTY-NOTICES as a starting point. Please trim out any references to 3rd party libs that aren't there (note: some of these libs are just part of other libs, such as HTML5 Boilerplate being included in Bootstrap). Also, make sure the versions are exactly the same, or else we gotta problem.. @javiercn do you have an update on this? 8 days since last action. Flaky tests are killing us.. @javiercn sounds good, I moved this item to 2.1.0, but let's keep an eye on it.. @javiercn ?. @javiercn ?. Yeah closing as a dup of https://github.com/aspnet/Identity/issues/1636, it looks the same.. No tag helper currently exists for this. If we add one, we can consider it. Here's the related issue: https://github.com/aspnet/Mvc/issues/6782. The new feature still doesn't exist yet, so this can probably sit in some future milestone.. From @rustd on February 18, 2016 19:2\n\n\n\nThe user should not get an Associate form when they login.\n. FYI this bug is from 2015... so take that into account.. @aguacongas thanks for the PR! @ajcvickers / @HaoK  - does this look good to merge?. @ajcvickers / @HaoK - can you review & merge? Looks alright to me.. Oh actually I guess there's a conflict now, so might need to hand-edit something.... @javiercn can you help answer this?. @baseless if you can show the stack trace of the exception that would also be helpful. Thanks!. From @pranavkm on March 28, 2018 19:11\ncc @blowdart \\ @HaoK . From @blowdart on March 28, 2018 19:13\nIt's possible, it's not something we provide in the box\nFor prebuilt things I suggest looking at Identity Server or openiddict. . So... is the suggestion to just add AllowAnonymous to the two pages that should allow anonymous?. OK so a 2-line fix? That should be easy in RC1.. Sounds like the HTML <title> tag is missing some data because it's not in ViewData maybe?. @javiercn - please take a look at this high priority flaky test issue.. @javiercn - please take a look at this high priority flaky test issue.. What does \"one off\" mean? Can it not fail again in the same way? Was there a bug that was fixed?. Ah OK then we can keep this closed because we were having general network issues at around that time.. @mkArtakMSFT - can you assign? Call stack looks related to Razor Pages.. @HaoK can you do an initial investigation here? Seems unlikely to be Identity-specific, so we need to figure out what the real issue is here.. @natemcmaster - do we know when we might get beefier VSTS agents?. Go for it. If it's not still fixed the bot will do the needful.. @HaoK - I looked around and unsurprisingly, FileSystemWatcher on its own doesn't really throw OOM errors, so presumably some other scarce system resources. Based on issues https://github.com/dotnet/corefx/issues/12435 and https://github.com/dotnet/corefx/issues/11622 it looks like this might have to do with just having too many simultaneous FileSystemWatcher instances.\nCan we maybe limit the concurrency of tests in this repo to avoid these issues? Or something like that?. @mkArtakMSFT - please assign.. @javiercn ? @pranavkm ?. Can we dig into that a bit more? Are we assuming determinism of MSBuild when perhaps that is an invalid assumption? Can we get in touch with those folks to try to understand this better?. @HaoK do we want this in 2.2 and master (3.0)?. @mkArtakMSFT can you assign?. @mkArtakMSFT - ping. This will almost certainly fail again if it uses external network. I recommend adding a retry sooner rather than later (but perhaps not critically urgent).. @blowdart by all means.. Hi @josejmoran would it be possible for you to share the app on GitHub so we can investigate?\nYou might be able to enable more diagnostic information by running dotnet build -clp:PerformanceSummary from the command line. That will emit additional timing information about where time is spent.. I think this actually is a breaking change because changing log category names can change behavior in an app that is filtering messages!\nBut, this code was clearly just wrong, so I think this is fine \ud83d\ude04 . @blowdart I think that would be a good idea.. Closing unnecessary dependency update. See https://github.com/aspnet/Infrastructure/issues/84 for details.\n. Closing unnecessary dependency update. See https://github.com/aspnet/Infrastructure/issues/84 for details.\n. Microsoft.AspNetCore.Identity depends on Microsoft.Extensions.Identity.Core, so they are not the same thing, but both are used in ASP.NET Core Identity.. Please merge ASAP so that commits don't cause conflicts.. @javiercn - it looks green now. Is this good to merge?. @HaoK - please merge ASAP.. Do we need another bug opened to track the 3.0 work where we want to see if we can just make this all work?\ncc @ajcvickers . @HaoK please investigate.\n. @HaoK please investigate.. @HaoK - please merge ASAP.. @HaoK / @ajcvickers - the PR looks good to me.. Might as well split these out into one top-level class per file.\n. Should we just have this throw NotImplementedException for now? Otherwise this kind of worries me...\nAnd we can log a bug to track implementing it.\n. @pranavkm you are officially a :trollface: :smile: \n. Is there a reason we need to do anything at all? Is there a downside to throwing an exception?\n. Can we #ifdef the unit tests? I want to make all our code is always @GrabYourPitchforks -approved (Levi).\n. Ultimately, I defer this kind of thing to @GrabYourPitchforks in terms of whether it's OK to have it checked in. But then ultimately it's up to you if you just don't want to do it at all just yet :smile: \n. Any reason for these methods to be virtual? How could someone override this with any other implementation?\n. I see. The very concept of \"uppercase and lowercase\" does not apply to most languages, though. Should there instead be a password complexity verification service, of which we have but one default implementation? And then someone else can just go plug in their own implementation that does whatever they want? I'm not sure these specific virtual methods are very useful on their own because they're already far too culturally-specific.\n. I chatted with @divega and I think it's fine to leave for now - I'm sure we'll later revisit our extensibility story.\n. This class sounds like a \"Util\" class, which is an anti-pattern (\"junk pile\"). Would a more specific name be something like IdentityResultAssert with these methods?\n. Style: Would it be easier to read with each attribute on one line?\n. This test isn't actually using the input parameter :smile: \n. A unit test should be testing only one thing. This could probably be structured as a Theory test with flags to control which behaviors are expected.\n. The test name should be clearer about what it is testing and what it is expecting to happen. (I think a few other tests could have their names polished a bit too.)\n. I think we're starting to build up several of these other assertion helpers. I'd love for someone to volunteer to aggregate some of these into a new library that all our tests can use...\n. Tpyo :smile: \n. File name has a tpyo :smile: \n. We generally bracket each attribute in its own square brackets so that they are more easily copy-pastable. Might want to do a pass on these to clean up.\n. This always kind of bugged me. The type is IUserNameStore yet it's about email addresses... and none of the API names say anything about email. Do we want to clarify that for once and for all? Are usernames required to be email addresses?\n. Now that's a big relief, thanks!\n. Is this one of those \"do we store 'data' in the DI container\" cases? If so, should we? If not, what am I missing? :smile: \n. 1. Should this be const or static readonly?\n2. If static readonly then should the value be typeof(DefaultAuthenticationTypes).Namespace + \"Application\"?\n. Can these checks be replaced with [NotNull] attributes on the parameter?\n. Yes, a fascinating subject indeed :smile: BTW this is not a blocker for me right now at all. I'm sure at some future point in time we'll have to review everything we ever put into DI and rationalize it.\n. The error could potentially be better when the DI system throws, because the DI system will presumably have more context available. E.g. it might say \"<XYZ_Inject> could not construct an object of type 'Baz' with parameters of type 'Qux, Quux, Quux' because there is no registered object of type 'IBanana'\". If we get everything directly from the service provider and that throws then the error would presumably be more obscure, e.g. \"<XYZ_Inject> has no registered object of type 'IBanana'\".\n. MVC team has been experimenting with StyleCop, including having a bot that runs it when you submit a PR (before you even push). I'm fine with people experimenting with it like this - I'm sure we'll want to standardize it at some point. Ultimately StyleCop is just about... style... and I think having a consistent style is currently more important than automating it, but for anyone wanting to have it automated that is fine with me.\n. Should change login to log in while you're at it :smile: \n. @enghch yes and I think that was a bug! Which is part of the reason to use nameof() :smile: \n. Correct. Logs need to use our own custom string formatting to be useful.\n. Nice.\n. https://github.com/aspnet/Identity/commit/ebd6ed7d94e59c3d9154528888956da4b318fa93\n. https://github.com/aspnet/Identity/commit/f4b2548565b2ae7161ae3630cc6375b0dd41e3d2 :rage: \n:smile: \n. I'll keep messing it up until the SHA hash spells out a word that expresses how silly I feel :smile: \n. MVC has participated in more patch releases than other projects.. Remove?. Not sure how this stuff works in general, but does this stuff need more null checks? Can section be null here?. Please check this whole repo for all instances of this \ud83d\ude04 . Ah, very nice then!. Yeah in the past we didn't ship patches of these, so no point starting now. Less stuff to deal with.. Why is it setting it here, and then again a few lines later?. Also what case-sensitivity does this search need?. Need to figure out what should be here. Both the year and the \"app name\" are probably not what we want to ship.. Need to figure this out.. Recommend using explicit property names for this anonymous type to avoid breaking it if anything gets renamed. That is, do new { id = XYZ, code = code }. I think @jbagga was cleaning up all the bogus ApplicationExceptions, so we'll need to make sure we have the latest and greatest code in here.. @DamianEdwards had a discussion with the CDN people. I don't recall the conclusion.. Interesting - I assume all these id's are added for testability so you can find the elements? Seems a'ight to me.. Is there like an Assert.NotEmpty or something?. FYI to others: this is due to a limitation in ApiCheck; these are not actual breaking changes.. The notices file needs to be within the NUPKGs. But not in the generated project template or otherwise visible when this NUPKG is installed in a project.. Consider using nameof(T) by passing in a {1} into here.. Works for me.. Actually, can we add a comment here that explains why we did it, and links to the test failure issue?. Right, the min files were useless. And at one point they were literally garbage! Garbage, I tell you!. Since we're changing things, can you change this to Set up (verb)?. Should revert this change.. ",
    "HaoK": "I was actually just testing out how to create a pull request, hence I didn't add anything other than the directory.  The DI change is an actual change I want to make :)\n. pushed to dev\n. Changes are already in\n. @GrabYourPitchforks Switched to DataProtection instead of Rfc2898 now, can you review?\n. :shipit: \n. @Eilon Updated with fixes from PR\n. Looks like this is already in, from PRs lke this https://github.com/aspnet/XRE/pull/1210/files\n. Done\n. We should not be turning 'read' operations into 'write' operations automagically.\n. We can probably do this in the context of SignInManager now if desired\n. Dupe of https://github.com/aspnet/Identity/issues/52\n. Its protected virtual now\n. This seems like an RC task\n. This was a bug specific to the 2.0.0 release\n. MVC did something like this:\nhttp://weblogs.asp.net/imranbaloch/archive/2013/03/31/localizing-default-error-messages-in-asp-net-mvc-and-web-form.aspx\n. Dupe of this https://github.com/aspnet/Identity/issues/86\n. There are no sync extensions in K\n. We are keeping the entity\n. Merged as part of another PR\n. InMemory store now uses the core poco classes, so there is no longer any InMemory versions\n. Moved IdentityUser pocos to Core\n. :shipit: Will this cause any issues with Dev12 VS? (Do I need to install new tooling?)\n. :shipit: \n. https://github.com/aspnet/Identity/commit/d827b9fff2b2648935d4297c98a986766eb6ee8e\n. Fixed in latest bits\n. AddUserManager/RoleManager used Scoped by default\n. looks much nicer! :shipit:\n. This has been reenabled\n. Tracking with https://github.com/aspnet/Identity/issues/110\n. This was due to the default constructor which has been removed\n. Not going to add any special support for this after discussion\n. No support for case sensitive indexes is coming\n. Fixed in https://github.com/aspnet/Identity/pull/162\n. :shipit: \n. This pull request replaces this one https://github.com/aspnet/Identity/pull/61\n. :shipit: \n. @alexsandro-xpt You can always extend and plug in your own custom ClaimsIdentityFactory, the idea is to make it easier to use the default implementation.  Role claims(permissions) is what we are looking at currently.\n. Fixed in https://github.com/aspnet/Identity/pull/109\n. Decided against this for now from previous discussions\n. Tracked by https://github.com/aspnet/Identity/issues/102\n. Fixed\n. This works for me on latest bits now\n. :shipit: \n. Currently have test hole without the round trip tests, no coverage for when navigation properties aren't loaded\n. Added some tests for these as part of 5d29d11ccb8b0973c4448903ad9ab985234b957c\n. Tracking with https://github.com/aspnet/Identity/issues/120\n. SignInManager actually owns the complexity around signing in (lockout, two factor, password expiration).  The UserManager itself has all of the lower level apis (including lockout), but SignInManager exposes APIs that weave all of the complexity into things like PasswordSignIn, ExternalSignIn, TwoFactorSignIn etc.\n. Fixed https://github.com/aspnet/Identity/pull/88\n. Fixed https://github.com/aspnet/Identity/pull/88\n. Updated with new design that's portable friendly, IAuthenticationManager abstracts what Owin sign in does, so alternate impelementations will just work if they implement the corresponding interface.  HttpAuthenticationManager just calls existing Context apis.  Also added two factor support back to ensure the new design works.\n. Moved to new PR\nhttps://github.com/aspnet/Identity/pull/100\n. :shipit:\n. Dupe of https://github.com/aspnet/Identity/issues/70\n. tracking via https://github.com/aspnet/Identity/issues/120\n. https://github.com/aspnet/Identity/issues/117\n. Break this down into specific features that are missing for tracking, this is too vague\n. Mostly fixed in https://github.com/aspnet/Identity/pull/109\nFile specific bugs for mores specific missing functionality for tracking purposes\n. Dupe of: https://github.com/aspnet/Identity/issues/62\n. https://github.com/aspnet/Identity/issues/122\n. Current thinking is to do something fairly similar how Resx/ResourceManager works.\n1. IdentityResult no longer contains error strings, instead it will contain a list of FailureCodes (which are constants defined by identity mapping to things like DuplicateUserName, PasswordMismatch, etc)\n2. There will be a IdentityFailureDescriber service which generates error strings from the codes, we can provide the default implementation which will be the strings we have today.\n3. Replacing the describer service works like any other services via DI\n4. As part of this, remove SignInStatus enum and roll that into known codes, and return IdentityResult from SignInManager methods as well \n. Merged c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d\n. Fixed in https://github.com/aspnet/Identity/pull/88\n. Track in https://github.com/aspnet/Identity/issues/92\n. How about AddIdentityWithEntityFramework and AddHttpSignIn?\n. We could just keep it nested and live with the duplicate ApplicationUser generic argument too if that's the lesser evil:\nAddIdentity<ApplicationUser>().AddEntity<ApplicationDbContext, ApplicationUser>()\n. Consider a subbuilder?\nc#\n        services.AddIdentity<ApplicationUser>()\n            .AddEntityFramework(builder => builder.AddDbContext<ApplicationDbContext>())\n            .AddHttpSignIn();\n. Decided on AddIdentitySqlServer for now\n. Tracking via https://github.com/aspnet/Identity/issues/92\n. Fixed in https://github.com/aspnet/Identity/pull/100\n. Fixed in https://github.com/aspnet/Identity/pull/100\n. Fixed in https://github.com/aspnet/Identity/pull/100\n. Won't that require a RoleValidator to be registered?  Or do all DI implementations pass in null to the constructor if no validator service is registered?\n. Keeping the IServiceProvider for both UserManager/RoleManager for now.  Having a constructor with a handful of IEnumerable for all the other optional services looks pretty ugly\n. I'm not sure I understand the issue exactly.  UserName != Email unless the app chooses to use email and user name to be the same.  The Find method that takes username and password is looking only at username.\n. Will be fixed in PR: https://github.com/aspnet/Identity/pull/109\nMoving to Composite keys fixes the issue\n. Created new PR to reduce rebase noise: https://github.com/aspnet/Identity/pull/124\n. Generic primary keys are still supported, they just have been pushed into the store implementation only.  In 2.0 the generic key was exposed on the user manager, this wasn't really desired or needed as it caused a few bad things: cascading TKeys on all related types and APIs, and also resulted in type conversion issues for the UserId when extracting from the ClaimsIdentity.  \nIn 3.0 we decided to get rid of the IUser requirement and instead make the Id/UserName properties methods on IUserStore instead, this way we ended up with the original intent to allow Identity to always treat the IDs as strings, but allow stores to implement the persistence and actual key type however they like so long as they can stringify it.  So the default EF UserStore continues to support generic TKeys, but that type is not exposed outside of the particular store implementation in 3.0.  There should already be overloads on the DI extension methods for AddIdentitySqlServer which take a TKey.  Also if you look at the tests for EntityFramework, you can see how to wire up an int or guid user store.\nhttps://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNet.Identity.EntityFramework.Test/UserStoreGuidKeyTest.cs\nHope that clears it up.\n. Is it incorrect to just use GetServiceOrDefault instead of taking all of the optional services?  Taking so many arguments in the user manager looks a bit ugly\n. Ok seems fine then :shipit:\n. Merged 715790c2134d5bd8904da65877c1fd4bce4b8035\nSorry @blowdart I only had one merge conflict...  It did take me an extra minute to resolve though!!\n. But, thanks for doing this, these are probably 100x better than anything I could have done :)\n. Well you did mess up the logical ordering I had, which is painful, but since the code isn't changing much anymore, I can deal...\n. Tracking via PR: https://github.com/aspnet/Security/pull/110\n. No more EF specific POCOs, everything now uses IdentityUser/et all from Core\n. Framework features are done, only thing that remains is the default token providers for 2FA\n. No work to be done here, in memory already validates this\n. Keeping Microsoft.AspNet.Identity name for now, focusing on web only\n. Can we turn this into something more descriptive/actionable (otherwise lets close this)?\n. What work is this actually tracking?  Can we turn this into something actionable or close?\n. Please use codeplex for Identity 1/2 issues: https://aspnetidentity.codeplex.com/\n. Sure, added it to the PR since it is a simple fix: https://github.com/aspnet/Identity/pull/124\n. Dupe https://github.com/aspnet/Identity/issues/169\n. After discussion we decided the only constructor should be (IServiceProvider, DbContextOptions)\n. Post beta we should remove all non default constructors\n. 3a9036a69fa5c46422b00a2ea8901982d6c7ebb3\n. I removed all the constructors already actually I left the comment when I wasn't going to check in until post beta\nOn Oct 16, 2014, at 5:16 PM, \"Diego Vega\" notifications@github.com<mailto:notifications@github.com> wrote:\nShouldn't we keep the item open for the remaining post-beta work?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/132#issuecomment-59450304.\n. Probably can just add a Timespan expiries to the options per provider, one knob per TokenProvider class seems reasonable, @blowdart  thoughts?\n. Dupe of https://github.com/aspnet/Identity/issues/465\n. SecurityStamp validator fixed in vNext and Identity 2.2 to remember IsPersistent state when regenerating\n. Keeping name for now\n. The basic design was that except for the query style operations: FindByX, all of the get/set methods on interfaces will take an user instance.  Then all of the manager APis tend to fall into the following pattern of query for a user, do all the various store operations against that user instance, and finally Update to commit the changes.\n. Fixed in https://github.com/aspnet/Identity/pull/153\n. Yeah the text is perhaps unclear, the intent is the password should have at least one non alphanumeric character.  (one non letter or non digit character)\n. Fixed\n. After discussing this, we decided to only support EF stores that support DateTimeOffset by default\n. Discussed and we will keep string for now\n. Fxied in https://github.com/aspnet/Identity/pull/144\n. First there was the async infection, now there is the DI infection :)  Until we have a mechanism for DI to resolve constructors better we can't really do much here in terms of adding syntactic sugar constructors to the base class.  We could put that in some helper static factory method to wire up everything with the defaults, but I think we should wait to see if we have real use cases like Diego says.  You should be able to use DI in a console app as well.\n. Identity targets AspNet primarily, can revisit this if we want to make non aspnet scenarios easier in the future\n. Hi, this is on our list already in this issue: https://github.com/aspnet/Identity/issues/123\n. Also the core manager classes can be disposed after every lookup even if the stores are meant to be singleton/persistent as the managers get the stores from DI.  If it becomes necessary to override the default lifetimes, we can add an overload that takes the lifecycle in the future as well.\n. Dupe of https://github.com/aspnet/Identity/issues/179\n. Test issue fixed\n. Fixed in https://github.com/aspnet/Identity/pull/154\n. Maybe @GrabYourPitchforks can do a quick pass?  But this is basically the same code from Identity 2 just slightly tweaked to match the new Identity 3 APIs\n. rebased 076ea0385f50a23ec9ac14d3c93497f6e7da9508\n. Async cancellation tokens enabled: 2c9f43a16045d395b8dcc68ea72d9c8d7860e008\n. Still need to turn add NotNull / CanBeNull to all methods/parameters and enable that test\n. @davidfowl Is NotNull actually working?  i.e. can I rely on it to actually throw Argument null exception for me?  If not, when is it coming?\n. Community PR addressing this here https://github.com/aspnet/Identity/pull/485\n. Rebased 7d4aed4e3b19da4af20d7e8097718b0f361687b6\n. Fixed 7942d2bc82449a4fa2499be9a07ece3235e03b71\n. Rebased 7942d2bc82449a4fa2499be9a07ece3235e03b71\n. Fixed as part of https://github.com/aspnet/Identity/pull/196\n. Fixed as part of https://github.com/aspnet/Identity/pull/196\n. rebased 626362d8a22625e82a2af1b7076796f161510a97\n. rebased 097925a3e4b1ff4e22529f132d388655f2485a39\n. Actually looks like I was a bit premature, we do need the container class for GetLogins to return all the info together :(  So we have to keep the Info class for the GetLogins API, we can stop using it for the RemoveLogin method though, and leave it for AddLogin only.  Does that sound reasonable?\n. Updated the PR with the changes to the login apis, also cleaned up the cancellationtoken apis to all use default(CancellationToken).  Also finally normalized the tests to one shared UserManagerTestBase since this required changes to a bunch of tests.\n. Updated PR with changes for Add to take a UserLoginInfo again\n. c80ec3f326a0709dae53105c7f876ffae4804599\n. Rebased 2a45a851a52811d78350fa38e7eec4236e4abf78\n. There are no more if net45s \n. This abstraction is going away entirely with the Auth merge, everything hangs off of SignInManager so these methods no longer exist\n. Note: This does not repro if I change the lifetime of the SignInManager service to transient\n. Issue was Identity was resolving the service against ApplicationServices instead of RequestServices.\n. Address as part of user events hopefully (Creation event)\n. Need some way to efficiently invalidate the cookie, currently we load the user and check the security stamp.  The ask is to see if we can make this better in 3.0\n. @blowdart This is basically the same issue as the runtime role assignment issue we resolved as won't fix I think isn't it?  I think the behavior today is fine, you can update an user's roles in one request, but its not going to be valid until the next request with the updated cookie/identity\n. Will be fixed as part of https://github.com/aspnet/Identity/pull/196\n. Fixed 66f9803d06b7f76ac2b0d4c2a14e4e97fde1d7f4\n. Merged c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d\n. Decided to make all non stores optional in constructor, we can provide good defaults for all of these, we continue to add the default services in DI, but for unit tests/any non DI scenarios, this makes constructing identity classes MUCH easier\n. Fixed in cd0acd7a479d1056f6760c4a2d989f475ff4afef\n. Fixed in https://github.com/aspnet/Identity/pull/166\n. Model mapping is now pretty clean with the removal of navigation properties, should be good now\n. One last issue is with the foreign keys which cannot be added until Cascading delete support is there\n. Not to mention this will be hideously slow as it loads every user in the database.  We can add this API.\n. Scenario 1 is broken by design.  This is a UserManager flag, it will not magically fix data.\nScenario 2 will be fixed by just having the UserValidator do email validation against the user name if the flag is set.\nEmail isn't required so we can't really have the flag work that way.\n. Are you sure that scenario #1 is actually broken?  If you call FindByEmail after the flag is set, you are really calling FindByUserName, not email\n. Just to clarify what I mean, you can't actually find by email after the flag is set, so whether or not the email column is null in the database is meaningless, since you can't actually query against it once the flag is set using the UserManager apis.  Of course they can always just do user.Email.  So I don't think there's any issue with scenario 1.\n. So changing the value of this flag is explicitly a breaking change for your app, its not just going to magically work.  It changes the meaning and behavior of the UserName/Email apis.  \nWhen going from False -> True,the app could replace all Email related apis with user name (and if user names are not valid emails already, that is something the needs to be fixed outside of identity).  Going from True to false, will now hit the email column, which has no guarantee of being populated either.  \nBut I really don't think this is a setting that is meant to just be toggled on and off.  The setting should be tied to whether the app wants to treat emails distinct from user names, that decision should be made once, and if its changed, the app (or data) probably will have to be fixed to accommodate. \n. Currently, we already set the username when the flag is set if they try to set the email.  But we don't set the email when calling SetUserName.  I can make the tweak to also set the email when set username is called, but unfortunately this won't really affect the mainline register scenario which uses the property setter on User rather than explicitly calling SetUserName.  We would have to also change update to explicitly copy the value of UserName to email on every update, that doesn't sound too unreasonable I guess.  Thoughts?\n. Just to be clear, the proposed additional behavior will basically be blasting username into email as part of every update when the flag is true.\n. After discussing this further, we are going to revert the new option, email and user name will remain seperate, apps can set them to be the same at creation time if desired\n. 4e5bba35da259fa79a90426ed02a72f0c03ec861\n. c251bf0162091730b6cc74d97731db74d98e499d\n. Done as part of https://github.com/aspnet/Identity/pull/196\n. We should try and standardize on one NameNormalizaitonService and use it everywhere, instead of having a UserName, RoleName and Email NormalizationService\n. Going to rename IUserNameNormalizer to be IIdentityKeyNormalizer since we will be using this for role name, user name, and email normaliation\n. We settled on ILookupNormalizer\n. Closing as dupe of 187\n. Rebased 952bc6af882f495d7efcd4ca6b2bb570c258b849\n. Note: this will break all existing identity passwords as the password hasher behavior changes, migration from 2.0 -> 3.0 will also be an issue, do we want to consider keeping the old hasher behavior for version 0 and use a version 1 for this change?\n. ChallengeResult is in MVC\n. Redis implementation here: https://github.com/aspnet/Identity/pull/243\nShould add SQLLite and AzureTableStorage tests as well\n. Nothing to do for this right now moving to RC\n. Dupe of https://github.com/aspnet/Identity/issues/457\n. Yeah so the compromise I was going to take was just to add one new test at the end of each Test file which drops the database so we don't leave databases around across runs.  There already is a test that is supposed to run first that recreates the database.\n. It shouldn't affect the time all that much, it will add the time it takes to run a DbContext.Database.Delete 5-6 times at the end of the runs, we were already creating new databases in the runs (so they were already kinda slow)\n. Current SqlServer tests (90 tests x 4 configurations [string, int, guid, default] stores) takes 14.7 seconds to run\n. Fixed: https://github.com/aspnet/Identity/pull/200\n. Replacing with a new PR shortly that is more similar to how the Resx stuff works\n. Done as part of: https://github.com/aspnet/Identity/pull/196\n. Rebased in 57002ba35960fcc58380b52229695e7f6d1975c8\n. rebased 57002ba35960fcc58380b52229695e7f6d1975c8\n. Fixed\n. GetTwoFactorAuthenticationUserAsync is the replacement\n. Fixed\n. Thanks, fixed that one as well\n. GetTwoFactorAuthenticationUserAsync is the replacement for K\n. Check if the user is null for the equivalent of HasBeenVerfied()\n. Fixed default to 5 min expires\n. @blowdart Barry, what do you think, should we clear more than just the main login cookie when we call SignOut?  \nI'm trying to convince myself its safe to clear the other identity cookies as well, (External and two factor half way cookie, but not the two factor remember me).\n. Sorry the description is a bit unclear, but the basic jist is to see if identity can pull out an actual configured instance of IDataProtector, or if we need to pull out the IDataProtectorProvider service and create a new instance using identity configuration instead. (My guess is the latter)\n. Dupe of https://github.com/aspnet/Identity/issues/224\n. Tracking this via security issue: https://github.com/aspnet/Security/issues/48\n. Fixed\n. Currently we don't have interfaces for these since the default implementation should always be good enough for at least a base class, are you suggesting we introduce interfaces for these classes?\n. Fixed 2c9f43a16045d395b8dcc68ea72d9c8d7860e008\n. Fixed 2c9f43a16045d395b8dcc68ea72d9c8d7860e008\n. The main issue with this is that RequireUnique email is not mandatory, so this API is not always possible\n. Adding an overload of SignInManager.PasswordSignIn that takes a TUser should be sufficient, they can query for a user however they like before calling this method\n. Fixed\n. Fixed in https://github.com/aspnet/Identity/pull/242/files\n. We are not planning on releasing our own, but this is good for the community to own.\n. Fixed\n. Fixed 78f472fd205599850119dfbd70f46b7334c06936\n. I added one for the main ApplicationCookie since I needed it for functionals, I guess we should add them for all identity cookies\n. No longer needed with named options going away\n. 3a9036a69fa5c46422b00a2ea8901982d6c7ebb3\n. Sure, go ahead and submit a PR\n. @GrabYourPitchforks Can you review the IDataProtectionProvider changes? removed the Ephermerial reference and now rely on DI providing the service\n. Merged cb3948b86fcb9e2e6ca0b105456ab1eed6ad9444\n. Fixes https://github.com/aspnet/Identity/issues/129\n. 556c15273e94d3a8f1e521569bc84ef894ce7435\n. Yeah, I fixed this in my PR that I'm checking in shortly as well, thanks\nhttps://github.com/aspnet/Identity/pull/233\n. I split out the samples fix out and merged 78b66382f98194ff898ea10bc6b2cab751cbad29\n. So if this method is called update claim, my expectation is that its only updating the claim value, what you have implemented looks more like a ReplaceClaim, if you are only updating the value, UpdateClaim should only be taking a string updatedValue instead of a brand new claim.\n. Can you also add a functional test to https://github.com/aspnet/Identity/blob/dev/test/Shared/UserManagerTestBase.cs\n. @tugberkugurlu The default implementation only stores the type and value from the claim, everything else is ignored.  Stores are free to store more though if desired.  I would actually just suggest going with ReplaceClaim and keeping the signature the same.\n@brockallen If ClaimsIdentity allows duplicate claims, I don't see why identity specifically should be blocking that scenario\n. @brockallen Yep that's why we have a RoleManager\n. @brockallen Duplicate emails are also handled via an RequireUniqueEmail/UserValidation, its only if you are working purely with claims instead that you run into these issues.  If your app wants some claims to be unique, your app should enforce that, Identity enforces uniqueness for the set it cares about by exposing specific apis to use instead.  That said, we could consider a new option setting like RequireUniqueUserClaims on the UserValidator which could block updates that cause dupes\n. :shipit: I'm assuming you can't merge this yourself, so I will do that sometime this week\n. Merged d7f711bca1104650ea4d5a75fcf17569eef6a54e\n. I don't really understand the scenario you are describing, but it sounds like you probably should plug in a custom UserValidator to make this work.\n. Identity assumes that User Ids are stable and unique, they are not really meant for mutable easily colliding things like Email.  That said, you can probably make this work, but I would expect other weird things similar to the issue you are seeing with duplicate emails not being detected.  \nBut basically this isn't a mainline scenario that the default implementations are going to support well in general...\n. The snippet you show above whenever you set the Email or Username, you are also changing the Id, that is what I mean by your Id is not stable.\n. Sure we could expose the logic into several virtual methods for overriding just some parts of the behavior. \n. Merged 85530742ef456a9da08acbfd66dadb47d5bb4047\n. Redis isn't going to be available until post RTM\n. Yep good catch, will fix\n. Not saying we are not open to changing the behavior, but the today if the store will blows up with an exception when this is detected.  As you point out, since this is a niche race condition if the app just falls back to some kind of default generic error page, this could be reasonable, since a repeat attempt will most likely show the correct validation error\n. I think we just need to change the 3 write operations on IUserStore to return IdentityResult.\nCreate/Update/Delete.  We'll also introduce a new IdentityError for Concurrency failed which will be the only error condition the stores currently would return.\n@divega sound reasonable?\n. Its actually pretty simple right now, anything operation that results in a 'write' operation (ends up calling Create/Delete/Update on the user store) typically returns an IdentityResult.  I don't think anything else does.  None of the read operations do, which is why I'm resistant to the idea of changing things like Verify/CheckXyz to be IdentityResults\n. Merged https://github.com/aspnet/Identity/commit/a8c872aba97e641d38ba2cc098a4ac191a666b6a\n. My initial thinking for this would be to add a new User options: EnsureUniqueUserClaims that the UserValidator will recognize.  If this flag is set, the validator will throw if any claim type is duplicated inside of the user's user claims.\n. The default is basically the 0 timeoffset which I guess is out of the range of values for Azure Table Storage.  Can you initialize this value yourself?  For normal apps, I guess this would be customizing ApplicationUser's ctor to initialize LockoutEnd to the correct min value that you want.\n. That works if we are willing to change the public api (SetLockoutEndDate would just need to take a DateTimeOffset? end since its a struct\n. We agreed to go ahead and change LockoutEnd to a nullable DateTimeOffset in the base poco, and also to change the user manager API to take a nullable as well\n. This is cut for now since we will be using tracing throughout all identity methods.  Notification scenarios can be done via analyzing the tracing information without first class support\n. Perhaps the intellesense doc for Iteration count should have a disclaimer to remind users to not arbitrarily set it to something insanely high?  :shipit:\n. Yeah, my current thinking is something like this if we can get the generics to line up:\ncc @divega \nservices.AddIdentity<TUser, TRole>\n  .AddEntityFrameworkStores<TContext>\n  .AddDefaultTokenProviders()\n. @divega I got it to work with a slight twist, basically I introduced a new base IdentityBuilder class with the IdentityBuilder<TUser, TRole> derived with the generic overloads, then had AddEntityFrameworkStores<TContext, TKey> extend the base IdentityBuilder, it breaks the chaining a bit, in that you can longer use the sugar for adding Validators/etc, but since you can just add those calls before you call AddEntityFrameworkStores, it seems worth it...\nthis now works:\n```\n          services.AddIdentity().AddEntityFrameworkStores();\n``\n. Updated this PR to include this change https://github.com/aspnet/Identity/pull/242/files\n. Merged \n. Previous branch attempting this change here: https://github.com/aspnet/Identity/commits/AsyncZ\n. Merged 66f9803d06b7f76ac2b0d4c2a14e4e97fde1d7f4\n. :shipit:\n. :shipit: \n. This also lets us drop the collection properties off the default pocos\n. We actually want to discourage using the navigation properties as its EF specific (which means once you start relying on them in your app, you no longer can easily switch to another identity store), its error prone historically (people ran into issues with lazy loading, performance).  That said, if someone wants them, they can always add them back in their derived ApplicationUser class, and set them up in their ApplicationDbContext.  But I don't think we should be pushing people towards using them anymore\n. We should go ahead and support ChangeEmail/GenerateChangeEmailToken as a first class API on user manager similar to ChangePhoneNumber\n. :shipit: \n. As discussed, updated the PR to no longer attempt to load the entire user aggregate, the EF store no longer uses/relies on Navigation properties in any way, it is setting up foreign keys via the ManyToOne APIs\n. Merged 5d29d11ccb8b0973c4448903ad9ab985234b957c\n. :shipit:\n. Not going to happen for RC at this point\n. This is a nice to have and not really sure this is the right thing to do.  Moving to 1.0.0 backlog is probably best\n. Merged and fixed login -> log in 4af03693bf402d68dfd2f1c894400521493b2d1a\n. This repo is for 3.0, please file an issue on https://aspnetidentity.codeplex.com/ for V1/2 issues\n. New logic will treat null options or accessor.Options to mean use default identity options\n. Merged c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d\n. This is because the interface types are generic and the builder is not anymore, so there's no way to specify whereT: IUserValidator`\n. Try doing the confirmation immediately after you generate the code, instead of sending it via email and see if that works.\n. Alternatively you could just set a breakpoint and look at the code generated\n. Nope, it self validates\n. As you mentioned, this seems like a encoding issue as you must not be passing the correct code in\n. The code also is invalidated if you are changing any security related properties on the user after you generate the code, i.e. email, logins, passwords etc\n. Closing this out since this repo is for identity 3.0++ issues, feel free to file an issue on https://aspnetidentity.codeplex.com/ if you are still running into trouble\n. :shipit:\n. Other than the soon to be dead navigation properties?\n. Specifically we could change UpdateAsync to take an additional concurrency, so the stores would check during update that the concurrency stamp is unchanged, and then update it to a new value as part of the update\n. Merged https://github.com/aspnet/Identity/commit/a8c872aba97e641d38ba2cc098a4ac191a666b6a\n. Sorted namespaces, and added a unit test for customizing validator error messages\n. Merged c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d\n. This appears to be talking about identity 2.0 samples, not 3.0, you should file 2.0 issues here: https://aspnetidentity.codeplex.com/workitem/list/advanced\n. Yep for 3.0 this issue (https://github.com/aspnet/Identity/issues/215) tracks the lack of interfaces on the managers, that was intentional\n. cc @divega @suhasj \n. Merged c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d\n. Merged fd6eb9af672ea9e3b8aa42ff8ddb2a25633f0abc\n. Merged 69ac9abcc5bdd831026bb31983b9e4f2979915e5\n. Can you explain your scenario a bit more, you would like to validate the reset token before letting them reset the password?\n. You can't tell if the token is expired or if its just invalid regardless, so the error message should probably Invalid token either way.\n. So the behavior you are looking for should be part of:\n```\n        public virtual async Task TwoFactorSignInAsync(string provider, string code, bool isPersistent, bool rememberClient, CancellationToken cancellationToken = default(CancellationToken))\n```\nThis should store the two factor remember me cookie when true.  SignInAsync should only ever affect the application cookie (remember me for login cookie).  Can you clarify where you think the issue is?  Its certainly possible there's a bug here\n. Can you reopen this on codeplex if this is a 2.0 issue?\n. Moving to RC\n. :trollface: \n. The docs for the custom providers is referencing these too unfortunately, so as part of https://github.com/aspnet/Docs/issues/1162#issuecomment-261172896 we probably need to do this as well...  :/. cc @divega @suhasj \n. Merged a8c872aba97e641d38ba2cc098a4ac191a666b6a\n. yeah, renamed an existing issue to make it clear that its for NotNull\nhttps://github.com/aspnet/Identity/issues/155\n. cc @divega @suhasj \n. Merged a8c872aba97e641d38ba2cc098a4ac191a666b6a\n. Protected for Options/Protector then?\n. Actually not, this is actually the two factor token provider name, so it shows up in the dropdown as \"Email\" or \"PhoneNumber\" in the app itself today.\n. Only the DataProtectionTokenProvider is used for the DPAPI name, all of these guys are IUserTokenProviders but they are used differently.  TwoFactor show up in a drop down.  The DPTP is used as the UserTokenProvider which is used with a specific purpose for the ResetPassword/EmailConfirmation methods (but that name isn't localized cuz we don't expose it in the app)\nConfused yet? :)\n. It's both. Name is used as a unique id for the framework. It's only the template that uses it as a display name. From the framework perspective it's more of an id.\nOn Jan 10, 2015, at 12:23 PM, \"Barry Dorrans\" notifications@github.com<mailto:notifications@github.com> wrote:\nOh! OK. Change of issue then - rename to DisplayName...\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/318#issuecomment-69470474.\n. That's mostly a template change then as opposed to framework\nOn Jan 10, 2015, at 1:11 PM, \"Barry Dorrans\" notifications@github.com<mailto:notifications@github.com> wrote:\nSingle responsibility darn it!\nSeparate them out?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/318#issuecomment-69472121.\n. Hardcoded to \"Email\", feel free to open another bug if you want to track the templates issue\n. Can you include more of the repro which triggered this error?  Can you show entire method that's configuring your service collection?\n. Closing unless we can get a repro, options don't need to be registered in DI, only the IOptions itself which is done via services.AddOptions() or using any framework which does this for you (AddIdentity/AddMvc)\n. So it looks like you are doing your own DI here, could it be an issue with your implementation behaving differently from the rest in how it tries to resolve IEnumerable of a generic type?  Basically Options is just querying DI IEnumerable<ConfigureOptions<TOptions>>.  Nothing is registered by default for this, it should just return an empty enumerable by default.\n. I'm not sure, but perhaps these lines might be the issue? \nWhat does the HasComponent check do?   https://github.com/egorpavlikhin/IdentityIssue319/blob/master/WindsorRegistration.cs#L108\n. Merged b59440d95ff01994a077be806046151c64197d6c\n. Merged 4eff17c9b29d5535d7fa72653ad2e64ad4a8d263\n. No, IUser and IRole are gone, and the methods are now part of the IUser/RoleStores\n. Message provider is getting nuked\n. Merged d45b796529345ee36331660a7168c6604b8f9072\n. Yeah basically the idea behind moving these to core was to make it easier to reuse our default POCOs if desired.  There are no real dependencies in core on these pocos, so stores are free to ignore them and do what they like, with no limitations.\n. Ugh, so this was probably my bad for not looking at the test code closer on the PR.  Can we not do an in memory logger instead of writing to files?  Rather than writing the log to disk, just store it in a string.  We definitely should not be writing to disk for these tests unless we really have to.  I'll file an issue\n. You can get rid of the file lock entirely now no?  Each test should be getting it's own logger so there is no contention\n. So each test manager should be getting it's own logger Instance if that is not the case already you should fix that\nOn Jan 18, 2015, at 2:47 PM, \"Suhas Joshi\" notifications@github.com<mailto:notifications@github.com> wrote:\nI read that List is not thread safe. Would it happen that during the tests there might be read and write simultaneously. This was the reason why it was failing for files.\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/335#issuecomment-70422490.\n. :shipit: after you move the as's out of the ifs\n. Custom stores are not required to implement this interface, if they don't implement the Queryable interface, the managers will throw not supported exceptions if you try and use the properties.  We were aware that there was disagreement over IQueryable early on, and this was the compromise we eventually chose since our default EF provider already supports this natively, and custom stores can opt out easily.\n. Nice :shipit:\n. The idea is that you mock the store and use the managers directly in your tests.  You shouldn't need to swap out the managers.\n. Depending on your tests, you can just do something like use a in memory store for identity, you can lift this https://github.com/aspnet/Identity/tree/dev/test/Microsoft.AspNet.Identity.InMemory.Test, or you can mock line by line which is a bit painful: https://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNet.Identity.Test/SignInManagerTest.cs\n. Why is every line touched in these files?\n. Mockhelpers formatting still messed up\n. :shipit: \n. These seem like doc issues more than samples issues at this point.\n. What version of identity are you using?\n. Replaced by https://github.com/aspnet/Identity/pull/410 i  think\n. Our managers are scoped anyways, so it seems safe to just have them depend on HttpContextAccessor in the ctor as well, @divega thoughts?\n. @divega All of the interface implementations can be activated from DI, and as such they can all use HttpContextAccessor to get access to the cancellation token if they desire (we don't do this today, but custom implementations could if they want)\n. I'm not really sure, to be honest, we never got around to writing any tests that were exercising the cancellation tokens anyways...  So I'm glad we got rid of them for that reason alone :)\n. Sure I'll can follow up with Yishai\n. This is sort of by design honestly, Identity is primarily concerned with only the main application cookie.  To sign out other auth types, Response.SignOut(\"authType)\" is correct.  That said, we can add an overload that just routes it through as well.\n. Can revisit if we get more requests, don't really want to expose duplicate Security Authentication APIs\n. Merged c2e96fa570593688ccd159372562f6bbe545b640\n. EF tracking bug for the regression https://github.com/aspnet/EntityFramework/issues/1742\n. Merged 3aaa6283653a9d44b746767ec04fb7159553cb9e\n. Removed\n. Is the required EF feature done for this now?\n. Cool...  so now the question is should we limit user names and the normalized versions of them to something reasonable like 128 characters so we can add indexes?\n@divega @blowdart @rustd \n. Ok look slike we had 256 as the default in Identity 2.0, I'll make the same changes for 3.0\n. d8b3cf238e3a106ebb3e08b1eb9f5661f997cdc0\n. Is this with a clean database or did you migrate from Beta2?\n. We made some schema changes like adding a normlized user name column which is what FindByName uses now, so if your database has a null column for that...yeah it won't work...\n. The IdentityUserClaim is a store specific POCO, it doesn't exist at the Identity core layer which knows nothing about what's inside a TUser, the contract is adding/removing Claims for the user.  How the store choses to persist the user's claims is up to the store.  Our EF implementation happens to use the IdentityUserClaim class, but that actually will be moving to the EF assembly soon, to make it clear that its not something generally applicable.\n. Some more context for you here: https://github.com/aspnet/Identity/issues/332\n. Why are you trying to get the store specific POCO out?  The data inside of it is basically the same as a standard Claim (Type/Value).  \nwrt to HasClaim, if you are looking for claims on the logged in user, you can simply do something like:\nContext.User.HasClaim(c => c.Type == \"whatever\" && c.Vaue == \"value\");\nIf you want it against an arbitrary user, you can still use LINQ .Where against the IEnumerable of claims from GetUserClaims()\n. wrt GetClaimAsync, you can still just display a view listing all of a user's claims (GetUserClaims(TUser)).  Once the user has decided which claims to add/remove, you can call Add/RemoveUserClaim() with the claim, and the store will remove/add the appropriate instances.  You still don't need to know about the child entity, that's an implementation detail for the store.  You don't need to drop down to that level, and you probably shouldn't unless you really need to\n. Still blocked so moving to beta 7\n. c847f9c50df478ef826f6d4781ddcd760325da78\n. Nah, its a bad idea to add EF dependencies, just copy the pocos into the shared test code and rename them for the tests\n. There should be no replication other than copying the pocos from Core to the Shared Test code along side user manager test base with a new name for the pocos\n. Or maybe just move the IdentityUser classes to the new shared code stuff, so both EF and tests can depend on it safely.\n. Another route could be to look at what the tests are doing to access the pocos directly and instead replace them with calls to identity, which might let you remove the IdentityUser constraint entirely\n. You might want to rebase since I added some functionals in InMemory yesterday, but otherwise looks :shipit: to me\n. @AlirezaHaghshenas Have you taken a look at the IdentityErrorDescriber service?  That is what you might be able to plug in to localize identity specific application facing errors.\n. Feature only exists in v3 (Github)\nFrom: AlirezaHaghshenas [mailto:notifications@github.com]\nSent: Saturday, March 14, 2015 3:32 AM\nTo: aspnet/Identity\nCc: Hao Kung\nSubject: Re: [Identity] Allow localizing front-end messages. (#379)\nWhich source should I make changes to? The V2.x in CodePlex or V3.x in Github?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/379#issuecomment-80288338.\n. I probably broke something with my Auth changes :/\n. Changes look fine, :shipit:  Slight tangent, does the Log prefix add much value to the method names, i.e.\nlogger.Information, logger.Warning, logger.Verbose seems just as clear and reads much nicer...just my 2 c...\n. Yeah so I prototyped this early on in Identity v1, basically you would treat AD login as a separate flow but similar to local password login, so the answer you got on SO that works is basically that.  Instead of check username/password via the sign in manager's PasswordSignIn, you are basically implementing the spiritual equivalent of SignInManager.ADSignIn if it existed\n. https://aspnetidentity.codeplex.com/SourceControl/latest#src/Microsoft.AspNet.Identity.Core/Extensions/UserManagerExtensions.cs\n. Because we were using codeplex back in those days\n. Github is for current Identity 3.0+, Codeplex hosts the older ldentity 2.x code base\n. Gitthub is for identity 3+, please dicuss Identity 2.x issues on codeplex\n. Can't do this until MVC fixes https://github.com/aspnet/Mvc/issues/2167\n. Done 7b3dbaa32b6a0952da93f1af8ff7bfe9398a5a11\n. So the first half of the bug is correct, the part about SignInAsync is not.  \nThe issue is that for all of the actions on the manage controller, when we regenerate the application cookie via sign in, we have no way to tell what the state of remember me was.\n. This is a dupe of this https://github.com/aspnet/Identity/issues/185\n. FYI this is an app flow concern and an issue for samples/templates as opposed to anything we\u2019d do inside of the identity framework\n. Just put in whatever default text you want, \"<your email here>\"\n. Fixes https://github.com/aspnet/Identity/issues/231\n. Merged 2246a41978192770a08c77bab07a80c4d54a0800\n. Dupe of https://github.com/aspnet/Identity/issues/405\n. Dupe of https://github.com/aspnet/Identity/issues/193\n. :shipit:\n. We could only provide this extension method specfically for RoleManager<IdentityRole> as we don't have any constraint in general other than for our default EF role poco\n. @rustd What description do we want?\n. df1fe83992088fcdc831946607808a5f18650f78\n. Overall I like how it looks much better than before, it looks fairly clean with a consistent using to start, do stuff, and log result.\n. But can you include a snippet of what the output looks like in this PR?\n. Couldn't the scope msg just contain the user info and for the methods names to show up inside?\n. Merged 288cb6c58f26aa10a76c583e18f3063b14074b4f\n. 268af34244b9987be7e5cedf371f495b3fa1feb1\n. e80853a4cf665d73e7e5cdcb652d3d51cd456068\n. @divega So, thinking about the ctor a bit, I think maybe taking only IServiceProvider might actually be better than the current 8+ arguments, IFF we can supply defaults like we did before for everything other than the IUserStore.\nSo basically if IUserStore isn't found, we throw saying something like \"Its required, maybe you forgot to call AddIdentity().AddEntityFrameworkStores()\"\nFor all other services, we can just supply working defaults like we used to do...\nThoughts?\n. Creating a new bug tracking AddIdentity\n. We are not planning on releasing our own EF6 provider, but we think this would be something valuable for the community to provide.\n. GetSecurityStore throws if the store doesn't support the operation\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/UserManager.cs#L682\n. Was fixed in afff831d624b5a5e2677b0b42088626e8069336f\n. Any validator that needs to access the user id or user name for example, needs the manager.\n. Accessing properties directly off of the TUser is relying on store specific implementation which prevents validator from being used across stores potentially\n. Did you do this for dev?\n. Move this to RC?\n. Nothing to do for this right now so unassigning\n. This code no longer compiles, can you rebase/fix this PR? \n. 3b26a6e265d8960bd8d8f9e0a1f507854fb62077\n. This is not needed unless the method is made public (which is shouldn't need to be given IPasswordHasher).\n. 3e9433639021255c1373c9a4bd36c4a511982d18\n. I didn't know you could ship your own PR :)\n. This looks kind of gross with the setting and restoring if validation fails. \n. Actually I don't see how this is needed at all, doesn't UpdateUser already run the validators?\n. Go ahead and file a new issue for SetUserName should be calling UpdateSecurityStamp, and fix that in a different PR\n. This fix doesn't look correct, need to keep using IsSignedIn, it was just moved\n. Personally I can't stand seeing if (logLevel enabled) checks everywhere, my vote would be to either just  do it without the guard, or put it in a private method (since I am pretty sure @divega will want to avoid the await overhead)\n. :shipit: \n. One of these should be duped: https://github.com/aspnet/Identity/issues/184\n. :shipit:  Maybe make this change for Options as well?  https://github.com/aspnet/Options/blob/dev/src/Microsoft.Framework.OptionsModel/OptionsServices.cs#L64\n. Bleh leave options alone then\n. Fixes https://github.com/aspnet/Identity/issues/431\n. We could go the other direction on this and require it via [NotNull] instead.  No test necessary that way\n. Added a new test with null logger to ensure things don't blow up, also cleaned up SignInmanager tests reducing a lot of the duplication with a SetupHelper\n. 3e9433639021255c1373c9a4bd36c4a511982d18\n. UserName is potentially mutable, while ID is expected to be stable forever\n. I don't see this on beta5 or beta 6 bits, if this repos still once you update to later beta builds, please reopen this issue.\n. Updated, kept old SignIn overload which just takes IsPersistence, but added an overload which takes AuthenticationProperties, and switched ReSignInAsync to use that.\n. Well, I tried it without the overload, and it was annoying and i immediately wrote a helper overload, so might as well keep it and leave it public (no breaking change at all this way too).  So that is what convinced me to keep it :)\n. RenewSignIn or RefreshSignIn works for me\n. Ok updated to RefreshSignIn\n. c251bf0162091730b6cc74d97731db74d98e499d\n. @divega Updated PR removing IdentityErrorDescriber.Default and cleaned up tests + switched back to ILogger<Manager> instead of just taking ILoggerFactory\n. Merged 288cb6c58f26aa10a76c583e18f3063b14074b4f\n. @MikeSchlichting PasswordSignInAsync should not be setting LockoutEnabled to true, the only thing that should be doing that would be when Creating the user if lockout is enabled by default:\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/UserManager.cs#L327\nIts intentional that lockout is only enabled for the 2FA flow as that has a fairly limited amount of possibilities by default, while the default password settings were considered strong enough to not require lockouts by default (since its easy to turn it on explicitly with shouldLockout = true)\nCan you clarify what behavior you are seeing exactly with what works and what doesn't?\n. Yes shouldLockout has no effect if lockout is not enabled for the user. But by default users are created with lockout enabled. \n. @MikeSchlichting What bits are you using?  I'm assuming you are using Beta4 or later, and if so I want to close this bug out\n. Fixed eaa7ca9e81de89ff27038aeae4029f565cc01b24\n. Tracking the samples work here https://github.com/aspnet/Identity/issues/682 for Rc2, remaining package/documentation can be done post RC2\n. e0676292fcc8537fb6a7d3709b36b5963881a981 AspNet.Identity.CoreCompat package added\n. You probably want to call in your ConfigureServices something like: services.ConfigureIdentity(options => { options.User.Xyz = \"whatever\" }), to adjust the options which are picked up by the default validators\n. Looks good! :shipit:\n. :shipit: does this bring back fond memories of when you were a dev? :)\n. Fixes https://github.com/aspnet/Identity/issues/456\n. Note: we are no longer cloning the bytes[] from Encoding.Unicode.GetBytes, but does that really matter here?  cc @GrabYourPitchforks \n. 6d206250b3fe70cf34820130d1145be0cba1ad3a\n. This is no longer needed by compat app, so not sure this is still needed\n. 3d53334a031047b0b914f33648de520fe213d52a\n. If you are only interested in configuring the time step, would it be sufficient for us to expose that in an options setting for our implementation?  We certainly could expose interfaces for this like you are heading, but I'm not sure we really need that complexity if our implementation is good enough 95% of the time.  Custom implementations already can be plugged in via the IUserTokenProvider.  \nThat said, we haven't really revisited any of these designs for V3 yet, so @divega @blowdart @rustd we should review this stuff and see if we want to tidy anything up...\n. Not going to happen this week, moving to beta 7\n. Go for it, submit a PR!\n. Its on my list of things to do, but that list appears to be growing faster than I'm able to finish things lately\n. So we added the ability to provide a specific token provider instance which we hope is enough to allow you to configure things, if this isn't enough, we can consider more improvements in the future.\n. I've changed my mind a bit.  @divega @blowdart @rustd \nHow about we just require a similar line in 5.0 apps that 4.5 apps if they want to be shared:\nservices.ConfigureIdentityApplicationCookie(options =>\n                    options.TicketDataFormat = new TicketDataFormat(dataprotector));\nIts not actually easy to get this to flow as an IdentityOption, since they are not designed to really to store settings that end up affecting other framework's options.  \nAnd this isn't really that drastically different than something like UseIdentity(dataProtector) in terms of complexity, if anything is this more clear what's going on\n. Okay looks like we are all agreed, so we don't need this overload\n. Clearing milestone so we can triage/discuss\n. Yeah the idea would be, custom identity implementations wouldn't have to suck in all the default stuff they may or may not want, if we had an abstractions layer.  (That said, I'm not sure this is something we can do easily at this time, but we should at least consider it)\n. Identity.Core is already sort of our Abstractions++, it just has a bit of extra stuff.  Could be as simple as a rename\n. 8bace4b19728aa632e4e78f178dcd343c76489cc\n. @divega is lazy loading supported in EF7?\n. See this test for how to plug in your own ErrorDescriber\nhttps://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNet.Identity.Test/UserManagerTest.cs#L1371\n. This is an Identity 2.2 issue, can you file this over here instead?  Thanks https://aspnetidentity.codeplex.com/\n. For 3. you should be able to login via external and add password via the manage page\n. Can you make a few small tweaks and resubmit this?\n- Don't use ReferenceEquality and just check == null\n- Can you also look for all other places that are doing this pattern (should be at least the claims/logins apis) and fix them as well?\n. Ok I will add a check in a separate PR, this code isn't PR in its current state\n. I verified that the table definitions look like this (this is taken from the int primary key test):\n```\nCREATE TABLE [dbo].[AspNetUsers] (\n    [Id]                   INT                IDENTITY (1, 1) NOT NULL,\n    [AccessFailedCount]    INT                NOT NULL,\n    [ConcurrencyStamp]     NVARCHAR (MAX)     NULL,\n    [Email]                NVARCHAR (256)     NULL,\n    [EmailConfirmed]       BIT                NOT NULL,\n    [LockoutEnabled]       BIT                NOT NULL,\n    [LockoutEnd]           DATETIMEOFFSET (7) NULL,\n    [NormalizedEmail]      NVARCHAR (256)     NULL,\n    [NormalizedUserName]   NVARCHAR (256)     NULL,\n    [PasswordHash]         NVARCHAR (MAX)     NULL,\n    [PhoneNumber]          NVARCHAR (MAX)     NULL,\n    [PhoneNumberConfirmed] BIT                NOT NULL,\n    [SecurityStamp]        NVARCHAR (MAX)     NULL,\n    [TwoFactorEnabled]     BIT                NOT NULL,\n    [UserName]             NVARCHAR (256)     NULL,\n    CONSTRAINT [PK_IntUser] PRIMARY KEY CLUSTERED ([Id] ASC)\n);\nGO\nCREATE NONCLUSTERED INDEX [IX_IntUser_NormalizedUserName_NormalizedEmail]\n    ON [dbo].AspNetUsers;\nCREATE TABLE [dbo].[AspNetRoles] (\n    [Id]               INT            IDENTITY (1, 1) NOT NULL,\n    [ConcurrencyStamp] NVARCHAR (MAX) NULL,\n    [Name]             NVARCHAR (256) NULL,\n    [NormalizedName]   NVARCHAR (256) NULL,\n    CONSTRAINT [PK_IntRole] PRIMARY KEY CLUSTERED ([Id] ASC)\n);\nGO\nCREATE NONCLUSTERED INDEX [IX_IntRole_NormalizedName]\n    ON [dbo].AspNetRoles;\n```\n. Updated to use u => u.NormalizedUserName syntax, also added verification of default schema for columns and indexes\n. d8b3cf238e3a106ebb3e08b1eb9f5661f997cdc0\n. 1ed2ebcd962cf86c57da9e54626732c9feb0d21c\n. Ok so just print out the name by itself?\n. 4e5bba35da259fa79a90426ed02a72f0c03ec861\n. @blowdart is it ok if we only log Warnings for when users are locked out and don't log anything for normal password mismatch failures?\n. e2d8bfe5cfa8ed014fbce21b924d362ffc87512a\n. Added logging for password failures, updating rest of managers in the next PR\n. That's what the RoleManager class is for.  The IUserRole store is just responsible for storing the fact that the user is part of a Role (the many to many).\n. Yeah identity assumes username and role names are keys just like id. Maybe you could just Concat group + name to make it the key in this case?.\n. Nice, fixes https://github.com/aspnet/Identity/issues/155\n. Lets wait til NotNull runtime actually works and then I will merge\n. Turns out we need to keep the null checking, can you revert the changes that remove the tests and then I can merge the nameof + [NotNull] changes\n. Turns out we need to keep the null checking, can you revert the changes that remove the tests and then I can merge the nameof + [NotNull] changes\n. Yeah Identity never removed them thankfully :)  So revert everything except the nameof changes then for this PR\n. Yeah Identity never removed them thankfully :)  So revert everything except the nameof changes then for this PR\n. I don't have a strong opinion either way on the attributes. Especially if someone else is adding them :). I just don't want to remove them or add them if they aren't there already is my general rule of thumb now if they don't do anything\n. I don't have a strong opinion either way on the attributes. Especially if someone else is adding them :). I just don't want to remove them or add them if they aren't there already is my general rule of thumb now if they don't do anything\n. Remove all of the not null attributes and usings and if it compiles that should be sufficient\nOn Sep 11, 2015, at 4:11 PM, Hisham Bin Ateya notifications@github.com<mailto:notifications@github.com> wrote:\nIt takes time to figure out which of [NotNull] that doesn't let the tests run successfully, specifically if you have an issue to run dnx test locally [:smile:]\n@HaoKhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fHaoK&data=01%7c01%7chaok%40microsoft.com%7cc18e488447844eb161ee08d2bafe5cce%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=yLaO3YGELQB2bM1DsgNC6yIsZyzb7R4oYzNLCTcI%2bJY%3d can you review and merge if everything is fine\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fIdentity%2fpull%2f485%23issuecomment-139684104&data=01%7c01%7chaok%40microsoft.com%7cc18e488447844eb161ee08d2bafe5cce%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=AjN9IVckQ%2f86UABA6oPq6ta5IGYmeI7yXyIObrp7GkQ%3d.\n. Remove all of the not null attributes and usings and if it compiles that should be sufficient\nOn Sep 11, 2015, at 4:11 PM, Hisham Bin Ateya notifications@github.com<mailto:notifications@github.com> wrote:\nIt takes time to figure out which of [NotNull] that doesn't let the tests run successfully, specifically if you have an issue to run dnx test locally [:smile:]\n@HaoKhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fHaoK&data=01%7c01%7chaok%40microsoft.com%7cc18e488447844eb161ee08d2bafe5cce%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=yLaO3YGELQB2bM1DsgNC6yIsZyzb7R4oYzNLCTcI%2bJY%3d can you review and merge if everything is fine\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fIdentity%2fpull%2f485%23issuecomment-139684104&data=01%7c01%7chaok%40microsoft.com%7cc18e488447844eb161ee08d2bafe5cce%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=AjN9IVckQ%2f86UABA6oPq6ta5IGYmeI7yXyIObrp7GkQ%3d.\n. Yeah the only changes that we need in this PR are the nameof updates, NotNull and any other checks should be reverted\n. Yeah the only changes that we need in this PR are the nameof updates, NotNull and any other checks should be reverted\n. e80853a4cf665d73e7e5cdcb652d3d51cd456068\n. e80853a4cf665d73e7e5cdcb652d3d51cd456068\n. Fixed in release\n. Fixed in release\n. You can probably do this if you construct two different user managers with their own DbContext's pointing at different databases.  And then just use the appropriate instance for each part of your app.\n. You can probably do this if you construct two different user managers with their own DbContext's pointing at different databases.  And then just use the appropriate instance for each part of your app.\n. argh wrong PR diff\n. argh wrong PR diff\n. 1ed2ebcd962cf86c57da9e54626732c9feb0d21c\n. 1ed2ebcd962cf86c57da9e54626732c9feb0d21c\n. 4e0000163ba5067dcbe79a33f80192623fc4d5f3\n. 4e0000163ba5067dcbe79a33f80192623fc4d5f3\n. Yep, good catch, these should be TryAdds... I'll fix this\n. Yep, good catch, these should be TryAdds... I'll fix this\n. dupe https://github.com/aspnet/Identity/issues/502\n. dupe https://github.com/aspnet/Identity/issues/502\n. https://github.com/aspnet/Identity/issues/503\n. https://github.com/aspnet/Identity/issues/503\n. Dupe\n. Dupe\n. I think the experience today is that you get whatever stock DI missing required service exception message is.  Do you find that error not descriptive/intuitive enough?\n. I think the experience today is that you get whatever stock DI missing required service exception message is.  Do you find that error not descriptive/intuitive enough?\n. @toddtsic can you include the full controller code that is causing this so we can investigate more?  Also how are you getting your db context, are you using the same one that identity is using (getting it from the ctor/DI)?\n. @toddtsic can you include the full controller code that is causing this so we can investigate more?  Also how are you getting your db context, are you using the same one that identity is using (getting it from the ctor/DI)?\n. Can you also include one of the controller action methods that repos this behavior so I can try some form of it out?\n. Can you also include one of the controller action methods that repos this behavior so I can try some form of it out?\n. @divega is the navigation property perhaps the issue?\npublic virtual AspNetUsers Family_Member_User { get; set; }\n. @divega is the navigation property perhaps the issue?\npublic virtual AspNetUsers Family_Member_User { get; set; }\n. @toddtsic does this still repro for you?  I tried the following repro which mimics your code and I don't see the Concurrent update exception (granted I'm not using MVC, but the flow should be similar)\n```\n            var family = new Family { Id = Guid.NewGuid().ToString() };\n            using (var db = CreateContext())\n            {\n                var manager = CreateManager(db);\n                IdentityResultAssert.IsSuccess(await manager.CreateAsync(user, \"password\"));\n                db.Families.Add(family);\n                await db.SaveChangesAsync();\n        }\n        using (var db = CreateContext())\n        {\n            var manager1 = CreateManager(db);\n            var user1 = await manager1.FindByIdAsync(user.Id);\n            Assert.NotNull(user1);\n            Assert.True(await manager1.CheckPasswordAsync(user, \"password\"));\n            var record = new FamilyMember()\n            {\n                UserId = user.Id,\n                FamilyId = family.Id\n            };\n            db.Members.Add(record);\n            await db.SaveChangesAsync();\n            Assert.NotNull(db.Members.SingleOrDefault(m => m.UserId == user.Id && m.FamilyId == family.Id));\n        }\n\n```\n. @toddtsic does this still repro for you?  I tried the following repro which mimics your code and I don't see the Concurrent update exception (granted I'm not using MVC, but the flow should be similar)\n```\n            var family = new Family { Id = Guid.NewGuid().ToString() };\n            using (var db = CreateContext())\n            {\n                var manager = CreateManager(db);\n                IdentityResultAssert.IsSuccess(await manager.CreateAsync(user, \"password\"));\n                db.Families.Add(family);\n                await db.SaveChangesAsync();\n        }\n        using (var db = CreateContext())\n        {\n            var manager1 = CreateManager(db);\n            var user1 = await manager1.FindByIdAsync(user.Id);\n            Assert.NotNull(user1);\n            Assert.True(await manager1.CheckPasswordAsync(user, \"password\"));\n            var record = new FamilyMember()\n            {\n                UserId = user.Id,\n                FamilyId = family.Id\n            };\n            db.Members.Add(record);\n            await db.SaveChangesAsync();\n            Assert.NotNull(db.Members.SingleOrDefault(m => m.UserId == user.Id && m.FamilyId == family.Id));\n        }\n\n```\n. Feel free to reopen this if you are still seeing this\n. Feel free to reopen this if you are still seeing this\n. 85d2d3d46a82dbe4d9a01241fcf84f0a619a2bad\n. 85d2d3d46a82dbe4d9a01241fcf84f0a619a2bad\n. 85d2d3d46a82dbe4d9a01241fcf84f0a619a2bad\n. 85d2d3d46a82dbe4d9a01241fcf84f0a619a2bad\n. Salts are directly combined in the hash, added a test just to be sure 3321adbe640d846913be19f82b5a51cba8c0642e\n. Salts are directly combined in the hash, added a test just to be sure 3321adbe640d846913be19f82b5a51cba8c0642e\n. Unlike identity result it is never an aggregation of errors today\n. Unlike identity result it is never an aggregation of errors today\n. Does your container actually have a IHttpContextAccessor service registered at the point where SignInManager is being created?\n. Does your container actually have a IHttpContextAccessor service registered at the point where SignInManager is being created?\n. Exactly, the service only exists as part of the request (its scoped), so the controller ctor is run during the request.  You can't create an instance of SignInManager outside of the request scope today because it of the IHttpContextAccessor service\n. Exactly, the service only exists as part of the request (its scoped), so the controller ctor is run during the request.  You can't create an instance of SignInManager outside of the request scope today because it of the IHttpContextAccessor service\n. Ah good catch, mind adding a test so we don't regress this in the future?\n. Ah good catch, mind adding a test so we don't regress this in the future?\n. Fair enough, replacing with https://github.com/aspnet/Identity/pull/527\n. Fair enough, replacing with https://github.com/aspnet/Identity/pull/527\n. ab29d5f5e581dd4cf9a8996b8c940bd4e5b65490\n. ab29d5f5e581dd4cf9a8996b8c940bd4e5b65490\n. Tracking via https://github.com/aspnet/Identity/issues/836\n. This should be fixed now with https://github.com/aspnet/Security/commit/ab4ba794e546074a573fbf76d9150ffcf9752c89 issue should be fixed once packages are pushed\n. Yes, even though you ask for the email you might not get it (if the user doesn't want to share it for example).\n. How are you registering it in DI, as Transient?\n. This behavior is directly related to the fact that its Transient, every time its asked for, you get a new instance.  Our default implementation is stateless.  You can just register it as Scoped if you wanted only a single instance to be created for each request.\n. We've decided to go ahead and switch to Scoped lifetimes for all identity services that are currently transient, we felt this was the best compromise\n. https://github.com/aspnet/Identity/pull/536\n. This change doesn't affect the DbContext no, the identity managers are scoped by default so each should only be created once per request.  The manager take a UserStore which is also scoped by default, those take a DbContext.\n. You probably didn't turn on API/Google plus access or something like that, there's some other detailed setting that you need to enable for google auth to work.\n. One bit of smell is the static defaults I moved to IdentityCookieOptions, those strings are what we default the AuthenticationSchemes to for the cookie middleware we configure.  Those are then copied to the options, so we have mutable strings.  Its just a bit wonky.\n. Closing and will resubmit with new iteration\n. 6931ebe41dedeaf92fa206a0a6134aeafa873480\n. What is actually throwing the null reference exception can you just copy the stack trace from the debugger on the line throwing?\n. Feel free to reopen this if you can repro and attach a stack trace\n. Thanks for the PR, but we are going to remove regex entirely soon and will add hypen to the whitelist of characters.\n. See https://github.com/aspnet/Identity/pull/533\n. @blowdart \n. Nah, I'm sure someone hand typed all of those doc comments :wink: \n. 379f1928a4d676d2ad14ba026f50b204ed33d518\n. b2eb5feb8c26fc07f2794e32a94ebdd7cc805df5\n. @divega\n. 0e77bbdbbd6917c7f5dce013c4c267d971c8e0f2\n. The app is free to treat IsLockedOut as other password failures.  We left that decision to the callee to interpret and use how they will, otherwise they would have no way to detect the difference.\n. See here: https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.Mvc/Controllers/AccountController.cs#L58\nYou can simply not check for IsLocked out and fall into the general error case\n. bc8cf1f7b664074eee45d20fad9573fcc912e144\n. This will likely be addressed in a PR that's coming soon as we are exposing the individual cookie options.  It will look something like\noptions.Cookies.AppliationCookie.LoginPath = new PathString(\"/login\");\n. 2113ef5abcb64bf1c49d8485bcfae45b703f4b78\n. Ugh I think our TokenProviders are broken by this change actually, we were relying on Named options to name the instances before, need to find another way to do it\n. Replacing\n. Yep dupe of 495\n. Its not great but we can add a base class to make this feel similar to what we have today.  That hides the cast from them\n```\n    public abstract class UserValidatorBase : IUserValidator where TUser : class\n    {\n        Task IUserValidator.ValidateAsync(UserManager manager, TUser1 user)\n        {\n            var typedManager = manager as UserManager;\n            var typedUser = user as TUser;\n            if (typedManager == null || typedUser == null)\n            {\n                throw new InvalidOperationException();\n            }\n            return ValidateAsync(typedManager, typedUser);\n        }\n    public abstract Task<IdentityResult> ValidateAsync(UserManager<TUser> manager, TUser user);\n}\n\n```\n. Replacing with new PR\n. @davidfowl I skipped the tests, but looks like the travis build is failing on setup (Can't find Sake) first... any ideas what's busto?\n19.06s$ ./build.sh --quiet verify\nInstalling 'KoreBuild 0.2.1-beta7-15004'.\nSuccessfully installed 'KoreBuild 0.2.1-beta7-15004'.\nUnable to find version '0.2' of package 'Sake'.\nDetermining latest version\nLatest version is 1.0.0-beta8-15118 \nDownloading dnx-mono.1.0.0-beta8-15118 from https://www.myget.org/F/aspnetvnext/api/v2\nDownload: https://www.myget.org/F/aspnetvnext/api/v2/package/dnx-mono/1.0.0-beta8-15118\n################################################################## 100.0%\nInstalling to /home/travis/.dnx/runtimes/dnx-mono.1.0.0-beta8-15118\nAdding /home/travis/.dnx/runtimes/dnx-mono.1.0.0-beta8-15118/bin to process PATH\nSetting alias 'default' to 'dnx-mono.1.0.0-beta8-15118'\nCannot open assembly 'packages/Sake/tools/Sake.exe': No such file or directory.\n. 2161f42086ca0f5b9c0c04460a0dc45e72b678bd\n. ab29d5f5e581dd4cf9a8996b8c940bd4e5b65490\n. 2161f42086ca0f5b9c0c04460a0dc45e72b678bd\n. 4e0000163ba5067dcbe79a33f80192623fc4d5f3\n. @divega any ideas what might cause this error?\n. @AndriySvyryd Should the call to ToTable erase all the previous configuration from the base.OnCreating call?\n. Looks like these were already nuked in a previous beta... so nothing to be done now\n. only identityRole and IdentityUser remain\n. The current interface expects only the role name to be stores, which is enough to find the role.  The main reason for this difference is because we didn't want to flow the Role type into the UserStore interfaces as it would bring in an additional generic\n. 2113ef5abcb64bf1c49d8485bcfae45b703f4b78\n. Localization story is still being worked on\n. @rustd Can you take a look?\n. This is being tracked via https://github.com/aspnet/HttpAbstractions/issues/42\n. We will expose them as protected const string ResetPasswordPurpose/ConfirmEmailPurpose etc.\n. You can always write your own derived UserValidator that adds additional validation like excluding dots from the ends of the user name.  . Up to you, but if you are just trying to block starting with \".\", you can simply check for starts/EndsWith. Ah yes its server side only. The client side validation you would need to do in your view (i.e with annotations on your model). Something like this should work:\nservices.AddIdentity<TUser, TRole>(options =>\n            {\n                options.Password.RequireDigit = false;\n                options.Password.RequireLowercase = false;\n                options.Password.RequireNonLetterOrDigit = false;\n                options.Password.RequireUppercase = false;\n                options.User.AllowedUserNameCharacters = null;\n. We don't think this is an issue because your app doesn't need to show different error messages for lock out/wrong password.  Can you explain why you feel this is an issue?\n. Check the password manually first as you pointed out in the other issue.\n. We don't check the password if you are locked out in the other method.  So if you really care that much, you need to check yourself\n. Well in this case, it wasn't that.  This is by design :) \n. 27f021ab933a153eb977318e844a74f8497e3b47\n. acfee9e7e05bfb8ef25c8a7628c200c4cc715ff0\n. Unfortunately no, we decided that its pretty easy to implement a store for this scenario, and you can mostly just reuse the existing UserStore code.\n. 5c0700791ae4f36e6618008301d2953cb4b40352\n. 4ce3efd28fb33bc40f63bc150ff12182543b3a07\n. d60bcac9b436b84a55b0fb58fa75519a81d7e4cb\n. Can you please include more of the app code, at least the Startup.cs lines involving AddIdentity\n. Is this a regression in RC or is this the first time you've tried this code?  Just trying to narrow down where the issue might be\n. Okay perfect, @divega this appears to be a potential EF regression then given the call stack...\n. @BenjiZombie Can you give us your startup.cs to start?\n. Where's the code that actually calls this in startup\n. What does host.Start() do?  That certainly looks like it could cause lifetime issues.\n. Please reopen this if the issue is still happening for you\n. We should revisit this and see if this is something we want to do in 1.2\n. Yup we plan on doing this for 2.0, tracked via https://github.com/aspnet/Identity/issues/1269. Keys are always string at the UserManager level in Identity 3.  The store is free to convert the string into whatever type it wants for storage but those key generics are definitely gone in the UserManager APIs\n. 104f2161915b1a4e7d0013f3de3b8d9a212a5d27\n. a754b9cb6186aa5ad39d67a5f184244295049fa7\n. c847f9c50df478ef826f6d4781ddcd760325da78\n. Won't get to this in RC2\n. This looks like its already covered by the UserStoreStringKeyTest which tests cascading deletes from SqlStoreBaseTest's DeleteUserRemovesFromRoleTest using string for TKey\n. 4ce3efd28fb33bc40f63bc150ff12182543b3a07\n. Done as part of https://github.com/aspnet/Identity/pull/798\n. I looked and the security stamp is always set to something if the user was created via identity APIs.  So If the user was created in some other fashion, a valid (non null) security stamp should be created as well as part of that process.  Or simply update the user in some other fashion before trying to use the two factor APIs that require a stamp.\n. The current behavior is by design\n. @rustd we can consider deleting the user if AddLogin fails in this flow (or they might be able to still reset their password today)\n. @blowdart can you comment on this?\n. Yeah in rc1 we added some logic where cookies doesn't redirect for XmlHttpRrequests, it just sets the location header\n. Sure fixed by 1d2c6ba1223748df02a879622e8deb6ac23db5b7\n. Dupe of this https://github.com/aspnet/Identity/issues/780 which has working code\n. Isn't that more or less done?  Just hide them for rc1 and we can figure out what the right thing to do is with this bug.\n. Replaced by https://github.com/aspnet/Identity/issues/614\n. Not going to make it in today\n. @divega I don't think we can add this navigation property anymore since we are adding the generic arguments back, as IdentityUser<TKey> wouldn't be the correct type anymore, rather it would need to be IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> which is circular\n. 379f1928a4d676d2ad14ba026f50b204ed33d518\n. @blowdart\n. Feel free to submit a PR for this sure :)\n. @blowdart we should discuss this in triage again\n. This was done in 2.0 to support roles being optional. Done via https://github.com/aspnet/Identity/issues/1269. Yeah this is the same issue as https://github.com/aspnet/Identity/issues/581.  We are considering it for RC2.  cc @divega \n. @divega We want these for RC1?  So do you want me to merge these into release?\n. Updated\n. 379f1928a4d676d2ad14ba026f50b204ed33d518\n. I'm not sure I like it, as we already do slightly more than just include the cookies ( we also ensure that AddIdentity was called here, and in the future could potentially add more identity specific middleware without the name being a problem).  \nAnother example of where we are just wrapping a middleware would be UseMvc which is basically UseRouting().\nGoing forward we can always have one single UseIdentity which means add all the identity middleware to the app, which happens to mostly be 3 cookie middlewares today, but this could certainly change/expand to more going forward.\n. This is behavior that comes from the 3rd party auth providers, most likely based on what scopes you ask for (i.e. profile/email)\n. I don't have any further insight into this.  At this point, this is entirely 3rd party auth behavior.  We don't control any of that flow.  Scopes are entirely defined by each auth provider\n. But to elaborate, I would assume the consent is triggered by what scopes you ask for.  I.e. if you ask for email or any other 'restricted' user info, the consent screen gets triggered.  I doubt you can opt out of that, its probably based on how the user has configured their privacy settings.\n. Yeah the provider model for cookies/auth isn't really DI aware.  cc @Tratcher \n. I'll remove the doc comment, basically in 3.0 the auth stack has changed the contract to be around creating principals now, unlike in 2.0 which was about creating ClaimsIdentities.  You are free to set whatever authentication type you want in any of the identities your principle creates, we do not look at the authentication type for anything anymore, as authentication handlers are now responsible for producing principals for a particular authenticationScheme and not tied to any particular authenticationType which was different in 2.0....  That's why it was dropped from the interface.\n. Are we backloging this @blowdart ?\n. The change being considered would be moving to a per login factor secret. \nThe guid thing wasn't as big of a deal. \n. Clearing for triage\n. Ah I missed this one since it wasn't assigned to me...  it should be an easy fix, one liner type, I'll get a PR out for this today.. Well there's 2 parts to this... @blowdart are you ok if we split this work?  basically change how we generate security stamps now to move away from guids, but leave the TOTP entropy to be against security stamps for 2.1. @blowdart how do you feel about return a new authenicator key whenever we want to generate new security stamps?\nhttps://github.com/aspnet/Identity/blob/dev/src/Core/UserManager.cs#L2226\n. Filed https://github.com/aspnet/Identity/issues/1711 to track looking into moving to per login factor secret which is more involved (and likely requires schema changes). @rustd can you point him at the samples of how this is typically handled, this is always how things have worked\n. See https://github.com/aspnet/Identity/issues/916 which is basically the same issue\n. So the general class of issue I assumed both of these to be was: there are claims in the external cookie, how do I get them to flow to the identity cookie?  \nIf that is accurate, the answer is that the app needs to manually add them at some point (either by adding them to the user's claims, or adding them to the ClaimsPrincipal before SignIn is called).  The default template flow only uses the name identifier from the external cookie, and potentially the email.  Anything else extra in the external identity is ignored...\n. We can repurpose this as a feature ask sure, what new behavior would you like to see?\nThe initial external login linking is the easiest, we can certainly flow (all/some) claims from the external as part of the login creation.\nOn subsequent logins should the claims be refreshed/updated each time?\nBut never the less, at the end of the day, this might still end up being template/app controller work, as I think all of the identity features needed to do this are already there.\n. I guess we could add overloads of signInmanager.ExternalLoginSignInAsync and _userManager.AddLoginAsync(user, info) with some kind of importExternalClaims: true\n. @blowdart thoughts?  This is going to be a common ask, (it already was a common ask for v2)\n. This sort of falls into the general bucket of claims transformation scenarios which still need some love...\n. We don't currently set the issuer in identity, as part of this change, we could introduce an Issuer option in ClaimsIdentityOptions and use that in our default implementation of UserClaimsPrincipalFactory.\nThere's also the question of whether we want the claims from the external identity permanently saved for the user (via AddClaim), or if we just want to add them for a particular single sign in  My inclination is for the latter, and to only merge the claims from the external identity to the identity user generated principal for calls to signInmanager.ExternalLoginSignInAsync and to leave AddLogin unchanged.\n. Yes, the idea is that this would be a new overload of ExternalSignIn(user, importExternalClaims: true) that would only then suck over any claims on the external identity\n. Or if we are doing whitelist I guess: ExternalSignIn(user, importExternalClaims: [ \"SomeClaim1\", \"SomeClaim2\" ])\n. Clearing to revisit in triage to see if we want to do something in 1.1\n. I'll prob add a sample \"soonish\" via https://github.com/aspnet/AuthSamples/issues/6, I don't think we'll be adding any built in feature support for this in 2.1 at this point.. The sample demonstrating this flow is https://github.com/aspnet/AuthSamples/tree/dev/samples/Identity.ExternalClaims\nWe can revisit if we need additional framework support for this in the future. In the case you describe where you are trying to override SignInAsync, can your app just use a custom SignInManager to have it do what it needs?. Yeah I filed https://github.com/aspnet/Identity/issues/1685 to be a larger issue trying to address the whole thing, as opposed to just addressing this at purely a sign in manager level. Tracking via https://github.com/aspnet/Identity/issues/663\n. That got moved to UserManager as well.\n. This already is factored today, Security/HttpAbstractions handles the low level AuthZ decisions/ClaimsPrincipal.  Identity layers on top of that the concept of users, and 'sign in' via password social etc.  You can replace parts of identity or replace it entirely with your own authentication mechanism if desired\n. Mr Dorrans, your awesome wordsmith skills are needed again! @blowdart \n. Merged @blowdart s poetic changes :)  2084a95f0ac68dfc6739a47745c9f2a500975e50\n. 267d0ac20671ec80ae0d45c1988f1347a2dff0b9\n. Fixed this specific login provider bug.  Updating the samples entirely will be done later\n. Merged, edb1a1045a7db1ba76b7922964855bc1ca5159ec Thanks!\n. Call SignInResult.Success to create a success\n. :shipit:\n. Adding it as scoped should work fine.  Try putting it before the AddIdentity call and see if that makes a difference.\n. Yes, use DI is the standard way to replace services.\n. Can you include all of your startup?. We're not planning on taking this for RTM but we will revisit this for vnext\n. We discussed this and willing to try and get this in for RC2, once any issues in review are addressed\n. Replaced by https://github.com/aspnet/Identity/pull/798\n. Well what if they are nulling out the email, we also need to null it out, I think we need to do this always.\n. As discussed with @rustd last week\n. Unassigned since this is in backlog, reassign when we want to do this.\n. Given that the current virtual SignInAsync catches too many flows for you, I think the best approach would be for you to extend exactly which methods you want to do your additional post SignIn logic.\n. All the hooks should already be there as every method is already virtual\n. Yeah just looking for major stuff. I'm happy to push an initial mostly functional iteration. \n. Just old artifacts there with ef7 migrations\n. 267d0ac20671ec80ae0d45c1988f1347a2dff0b9 will send new PR with next iteration\n. Unassigned until we want to do this and move it out of backlog\n. @blowdart do you think we need to support this explicitly?\n. So you want us to store this info in our default schema again?. Pretty much LastLogin is only incremented when a login was successful, while LastActivityDate would basically be incremented for every single UserManager API I'm assuming, @blowdart @divega thoughts?. In regards to performance, this would result in every page that uses any identity APIs doing an update for at least one user.  I'm not sure what the performance implications would be to make all previous read only requests into writes as well.  We probably should add a first class option to turn this behavior off/on, maybe we leave this off by default :). Perhaps TrackLastLogin  and TrackLastUserActivity if we want to be granular, or we could just use one global switch like TrackUserActivity. Why is that horrible, how would expect something that tracked all user activity to work other than changing every time the user did something? :). Good point, we could always just add these as overloads for existing methods where it makes sense as an updateLastActivity flag. We should probably take this offline and discuss with @divega what this feature should look like taking into account the performance implications for the default EF stores. Okay so I'll add LastLoginDate/CreationDate and we'll skip LastActivity for now. Might be easier to rename it to LastSignInDate to match our APIs, and also this would make it easy to understand as it would map to the core SignInAsync API which the top level methods eventually call on successful sign in (Password/TwoFactor/External etc).... I think we are going to continue to leave the lastActivity/online users as an extensibility scenario.  Last sign in and created date are pretty limited in scope and will be fairly straightforward to implement.. FWIW these were split apart in 2.0\n. Moving milestone for consideration\n. Clearing for triage\n. @blowdart we should clean this up and use this issue to track spliting Identity Core from SignInManager + Auth. If we do this we should revisit whether we want to keep CancellationToken at all. Due to https://github.com/aspnet/Security/pull/1113, we can remove the dependency on Http by depending directly on the new IAuthenticationService, and removing the default wireup to RequestAborted, we can either eliminate the CancellationToken on the stores entirely, or expose some kind of CancellationToken Source service or property on UserManager. Actually we can't since the caller needs to still pass in the HttpContext. But still switching this bug over to track revisiting identity factoring and react to the auth 2.0 changes. ada5756c874bec41b19b492e102c31930a09bd5d\n. For now we just use an empty cancellation token if the accessor is not found\n167bb54c8d7aaafa12983164f8033cc25d0af39e\n. Replace the IPasswordValidator or just turn it off via\nservices.AddIdentity<TUser, TRole>(options =>\n            {\n                options.Password.RequireDigit = false;\n                options.Password.RequireLowercase = false;\n                options.Password.RequireNonLetterOrDigit = false;\n                options.Password.RequireUppercase = false;\n                options.User.AllowedUserNameCharacters = null;\n             }\n. Normally the ClaimsPrincipal is only modified with the result of sign in for the next request when it returns with the Cookie.  If you want it to happen immediately (which is a bit weird), then you need to do something like what you are doing now, where you modify the Principal on the context yourself.\n. The request was either authenticated or not, login will change it so the next request will be authenticated.  \nGetting the claims for a signed in user is not really identity, that's Authentication mostly.  Usually that's just accessing httpContext.User . You need to mimic what identity does to generate the claims for the user if you want to see them, you can do this via the IUserClaimsPrincipalFactory service that identity uses.  \nThe navigation properties for the user are not populated by default, so I wouldn't rely on user.Claims being consistent as its dependent on what store apis get called by identity.  If you want to get the user.Claims, you should call _userManager.GetClaimsAsync(user). d79c218210f05e61adce1977acd0abc0a95bbdef\n. Thanks!\n. Updated, removing a bunch of default services from AddIdentity, yeah so 99% of the time noone is going to replace most of the services like LookupkeyNormalizer/passwordHasher.  They can still do it like before via adding it to the service collection, but the defaults are stateless and can be new'd up.  And the ctors are semi sane again with only 4 instead of 10 arguments!\n. Replaced by https://github.com/aspnet/Identity/pull/687\n. We are actually going to nuke this extension since it was only important in 2.0 because all the user manager APIs took user id, now that they take the user itself, its no longer needed\n. Gone 1c26e8f5fa1b36febaca1f9a63b2a2f65fb11727\n. Looks like we need to provide alternate sugar for the templates in some from before removing these\n. Going to remove all the identity claims principal extensions and add instance methods on SignInManager:\nGetUserId/UserName/IsSignedIn...\nTemplates will need to be updated \n. 2dade94404d3198b19e6af9083b410287e11314f\n. Thanks! 042588e1b231e2bba0bf1748c1e0ced3e6c32a24\n. Increased timeout to 30s to match EF tests for now: 7ae091d2a4f3624229fd6c8eddde0865abddf77b\n. Addresses: https://github.com/aspnet/Identity/issues/663\n. 1c26e8f5fa1b36febaca1f9a63b2a2f65fb11727\n. Premature removal, looks like we need to fix templates before we nuke these, as they still rely on this broken sugar method.\n. Replaced by https://github.com/aspnet/Identity/pull/701\n. @divega This turns on the xplat test runs, unfortunately the current shared code has the attributes, so even though these should pass for the in memory providers, they are picking up the Skips still.  Filed an issue for this separate from the EF specific local db one...\nhttps://github.com/aspnet/Identity/issues/673\n. Updated removing the attributes and using a manual skip method check which does the same checks, this allows the non SQL providers to run on xplat now.\n. a66f50c1ba2dec01b0ca001dc22767d77ece29f2\n. a66f50c1ba2dec01b0ca001dc22767d77ece29f2\n. 167bb54c8d7aaafa12983164f8033cc25d0af39e\n. From the stack overflow post it looks like you are mixing your own cookie options with identity.  In RC1 the application cookie options are now part of IdentityOptions you should be setting them via: identityOptions.Cookies.ApplicationCookie\n. So lets break this down into the exact issues.\n1. You are trying to reset the password and then log in with the new password?  Can you try it explicitly via the user manager APIs to see if those are doing the right things.  There are many reasons that could cause the app cookie to not be valid which would look like login failed.\n2. Same thing with the password validator, there are many things that could cause the update to fail on the user.  Can you explicitly call the apis and see if they work for you, i.e. try ChangePassword and ResetPassword after manually generating a token inline right before calling the ResetPassword API\n. Nice!  Maybe its worth considering moving the scratch test db code into shared sources (assuming this is an identical copy from there... :shipit:\n. A useable EF migration here:\nhttp://stackoverflow.com/questions/36345121/how-to-migrate-database-schema-from-identity-2-2-0-to-3-0-0-rc1-final\n. Desired flow:\n- Create 4.5.1 MVC App (Run + Create user + login) => Mimics Initial V2 schema\n- Run Enable-Migrations and ensure that an initial migration is created\n- Install AspNet.Identity.CoreCompat and include the compat namespace to rebase the Identity POCO\n- Run migrations using EF6 to update schema to V3\n- Run Core Identity app and verify that login works against database\n- Final step: Update both apps to use the same dataprotection so cookies are shared cross app\n. Interop sample can't live in same sln as core currently due to package restore issues and ef migrations.  Will need to revisit what we want to do (if anything)  Could just have a blog post/doc walkthrough instead of a checked in sample since its more of a flow anyways\n. Moving to 1.0.1 since there's nothing to be done in 1.0.0\n. The main problem is that the best I can do is check in a snapshot at a single point (probably the end result) of the migration.\n. Also its weird for it to live in its own repo when the Compat package lives here\n. I think a second sln in this repo would be better than moving it out\n. Related https://github.com/aspnet/EntityFramework/issues/2167\n. Are they asking about full identity database Interop or only the much simpler app cookie sharing scenario?\n. @blowdart is working on the updated example/sample doc in his private repo\n. yeah its already sorta covered by https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/compatibility/cookie-sharing?tabs=aspnetcore2x and there are issues tracking improving that to target interop. :shipit:\n. 167bb54c8d7aaafa12983164f8033cc25d0af39e\n. @divega is this the proper way to include with EF 7?\n. Identity's default EF provider is no longer including anything, since identity provides APIs to directly access Role claims and role users via the RoleManager api.  You can certainly override the default implementation to include things like this if desired, but this is no longer behavior we are supporting by default...\n@divega might be able to provide more guidance on the best way to approach this\n. See the comments in a similar issue for more guidance: https://github.com/aspnet/Identity/issues/689#issuecomment-171119975\n. Can you include your AddIdentity configuration if any?  This is actually triggered by the username validation, which is just looking for the identityOptions.User.AllowedUserNameCharacters which contains '-' by default so it shouldn't be blocking this.  \nWe'll update this error since its a bit outdated\n. I just tried this on current bits and don't see this behavior, what version are you running?\n. Feel free to reopen this if you are able to reproduce this error on RC2 bits once they are available.\n. You basically are bypassing the external cookie when you do this\noptions.Cookies.ExternalCookieAuthenticationScheme = CookieAuthenticationDefaults.AuthenticationScheme;\nThe UseIdentity call is registering two cookie middlewares, one for the ApplicationCookie and one for the ExternalApplicationCookie.  These are set to different authentication schemes by default.  It should just work if you remove all of these explicit authentication scheme settings and rely on the default values...  In general you shouldn't have to change these, but they are mutable since you are free to change them, as long as you set them all to the same values wherever they are used, if you miss setting one, the external login info will be null...\n. Seems reasonable to consider in the future...backlog @divega @rustd ?\n. 5e4e9ccdf164b622872c397c27b75d2bc8a329da. I've updated the samples to match the latest templates, we no longer have an EnsureCreatedCall, EF migrations should be used to create the initial database now...\n. Fixes https://github.com/aspnet/Identity/issues/663\n. Move GetUserId/GetUserName to UserManager\n. 2dade94404d3198b19e6af9083b410287e11314f\n. :shipit:\n. We decided no to add this functionality to the framework\n. This is basically the same issue as https://github.com/aspnet/Identity/issues/765, we will track with that one\n. Can you provide the code you are using to insert multiple users\n. Can you try removing the dictionary/values enumeration and directly calling the APIs to see if it still repos?  Also can you provide the full stack trace for the exception?\n. Actually looks like you are missing await in your call to execute.  Can you add it and see if that fixes the issue?\nExecute(_roleManager);\n. Please reopen this if you can still repro this after adding the await\n. It's always been this way. it means there must be one non letter and non digit. \n. I forget the exact naming history. I think it was called that at some point. Also RequireNonLetterAndDigit I think too. \n. How about we go with RequireNonAlphanumeric and change the error text to be: \"Passwords must have at least one non alphanumeric character.\"\n. 84804fec20e8f301194474cc5d31fba359e8a090\n. @mikary can you take a look?\n. 84804fec20e8f301194474cc5d31fba359e8a090\n. We decided that we don't think this is appropriate as general functionality since apps can do this easily themselves.\n. 7ba61d6c6f6ce4eaee4c5018e71fa374d99bc868\n. Yeah this sample is currently not working any longer, will address as part of https://github.com/aspnet/Identity/issues/717\n. :shipit:\n. CanSignIn is the method that looks at the SignInOptions like RequireConfirmedEmail.  The two normal flows (PasswordSignIn/ExternalSignIn) ensure that CanSignIn is true before calling SignIn.  But if you are directly calling SignInAsync, you will need to check that the user can sign in first if desired.  \nWe could tweak this a bit, by having an overload of SignInAsync that takes a bool checkCanSignIn to clear this up a bit.\nThoughts @divega @blowdart @rustd?\n. Well the implementation change with the new overload would push the check into SignIn instead of Password/External, so we could have SignIn default to check the flag, and only if you explicitly disabled it would you get the existing behavior (so it'd be a slight breaking change)\n. That is by design, you can't login if the email isn't confirmed.  You should make sure there's a flow to confirm the email before logging them in.\n. Fixes https://github.com/aspnet/Identity/issues/716\n. 7ba61d6c6f6ce4eaee4c5018e71fa374d99bc868\n. Looks like you have resolved all your outstanding issues already?  closing\n. Cascading deletes should be enabled by default after this commit: https://github.com/aspnet/Identity/commit/c847f9c50df478ef826f6d4781ddcd760325da78\nCan you verify that you haven't changed the model in your db context's OnModelCreating at all?\n. What build are you using?\n. Ok please reopen this if you still see this issue should be working now\n. This behavior is by design, if you click cancel fb auth fails as you'd expect and that is clear from the errors in the query string \"access_denied\", error_reason= \"user_denied\"\n. Note if you want to handle the cancel in some way, you can hook the OnRemoteError event and look for the error_reason of user_denied to do something special...\nConfigure the FacebookOptions.Events\nEvents = new OAuthEvents()\n                {\n                    OnRemoteFailure = ctx =>\n                    {\n                        // do something when ctx.Failure.Message contains \"user_denied\"\n                        ctx.HandleResponse();\n                        return Task.FromResult(0);\n                    }\n                }\n. Yeah this is both a bug and by design :)  AddIdentity always registers a UserManager and RoleManager already.  This method is intended only if you want to add a derived manager.  That said, @divega is right and the || should be an &&.  If you want to submit a PR for this, we'd be glad to take it...\n. So looked at this code again, the current code/behavior is correct, this is the overload we added to hook up a delegate to return an alias to the normal scoped UserManager:\nServices.AddScoped(customType, services => services.GetRequiredService(userManagerType));\nSo if you call this with the same type its an infinite loop...  There were tests insuring that this would throw, which clue'd me in that this was intentional...go tests :)\n. ada5756c874bec41b19b492e102c31930a09bd5d\n. Are you using the user manager APIs and setting AutoSaveChanges to false?  Basically if you turn off AutoSaveChanges the idea is that you would not using be using the UserManager APIs, since those are implemented basically by calling some set method on the store, and then update on the user which explicitly save changes.  \nTypically you would want to write your own extensions that do not call user.update until you are ready.\n. @blowdart the delta appears to be the following characters, how many of these do you want to enable by default, some of these look pretty wonky to be valid user name characters by default...\n!#$%&'*+/=?^`{|}~\n. How about we just add + since that is fairly common, users can always add whatever additional characters they really want?\n. '+' it is, thanks!\n. Yeah these schemes no longer are needed, they used to be statics for extension methods that were removed recently.  I can nuke the duplicate copies, the only source of truth for the schemes should be the cookie options instances\n. I think the setting of cookie instances is okay on the IdentityCookiesOptions, but I agree the auth scheme properties are redundant and should be removed\n. Merged d1585617f9147daa2d8a29c2efb04f0eeb49d5ae\nThanks!\n. Are you saying userManager.IsLockedOutAsync returns false in these situations?\n. So for a user to be locked out, two things need to be true.\nLockout must be enabled for the user, meaning user.IsLockoutEnabled must be true AND user's locked end date must be in the future...\nif (!await store.GetLockoutEnabledAsync(user, CancellationToken))\n            {\n                return false;\n            }\n            var lockoutTime = await store.GetLockoutEndDateAsync(user, CancellationToken);\n            return lockoutTime >= DateTimeOffset.UtcNow;\nYou can think of it as a flag saying if the user can be locked out ever, and only if that is true, does the lockout end date matter...\n. Is it true that expires_at is only really ever used for the access token/bearer token and not relevant to any of the other tokens?  I'm just trying to understand the usage pattern so I can have an informed opinion :)\n. Updated the sample and added a test for the flow, its pretty much one line in the normal external login and external link action to a new method I added which takes care of updating the tokens from the external cookie.  Doesn't look too bad....\n. @blowdart @Tratcher @PinpointTownes @divega \nEveryone happy with the basic design now for this and https://github.com/aspnet/Security/pull/698?  If so I'll start polishing the PRs for merging this week...\n. 82863e94447fbe9b1724d3271535c3d2442015d9\n. 472c6f87348c7f8f7a29a22f1fb7fe9cb3b5411e\n. Merged thanks!\n7649b3ebb33845e5c456c5c6ab91aa1522ce2ffe\n. Yeah I don't see the value at all of the interface for the builder. It's not replaceable or put in DI so there is no situation where we would use it is there?\n. I don't think its worth drilling deeper into this PR until the fundamental question about whether we need an IIdentityBuilder interface is first resolved...\n. If there's no value either way and its an implementation detail, I don't think we should be adding a new interface, it just pollutes things by adding an extra public type which is basically a duplicate of IdentityBuilder just to hang extension methods.  \nI know MVC does a lot more stuff with various projects layering on extensions, so maybe its worth it there, but I don't think this extra layer is worth it for Identity or DataProtection, or anywhere else that currently doesn't have an interface for their builders...\n. :shipit:\n. 41fa99e9f329180c2e956b3a092af3f13e1fc357\n. What happened to the AspNetCore?\n. :shipit:\n. Make sure you are configuring the cookie via identityOptions and not any other way, can you include the startup code that you are using to set the cookie options?\n. Please reopen if this is still a problem and can attach the relevant startup...\n. I don't think we ever did that before.  We only put the identity store/managers into DI, and we were calling a factory method on each test class to CreateContext() which typically just did new DbContext and passed it in via the ctors to the store.\n. I'm not sure I follow your question, but all of the tests basically do this today for setup:  So each manager/context basically is creating its own service container and resolving a manager out, with the context as the shared state only.\nvar context = CreateTestContext();\n            var userMgr = CreateManager(context);\n            var roleMgr = CreateRoleManager(context);\nCreate Context for the EF.SqlServer is calling into the DbUtil test code Nate copied over from EF I think:\npublic TestDbContext CreateContext()\n        {\n            var db = DbUtil.Create<TestDbContext>(_fixture.ConnectionString);\n            db.Database.EnsureCreated();\n            return db;\n        }\n. This is because the validation of the form is not tied to the underlying identity code... The validator length is controlled by the View model, see\nhttps://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Models/AccountViewModels/RegisterViewModel.cs#L17\n. The data validation attributes in templates cannot easily share identity configuration. Since the template hardcodes a required length of 6 by default. It needs to be manually changed to match whatever the new required length is to match identity. \n. Then there would be no client side validation for the for the password length which seems weird. \n. Merged thanks! 6b6b21a5bf1ff831301bdd9559ec36d4eaeac6e2\n. You shouldn't need to create your own UserClaimsPrincipalFactory, you should be able to resolve it from ApplicationServices just like the managers...\n. Can you try adding classes for each like this:\npublic class IntUser : IdentityUser<int>\n    public class IntRole : IdentityRole<int>\n    public class TestDbContext : IdentityDbContext<IntUser, IntRole, int>\n. There should be no change in UserManager nor in the templates, Identity itself always treats the key as a string.  Its only the stores that store the keys whatever type you want (and to do the TKey => string translation)\n. Yeah that is an easy step to miss. We should make sure the docs are updated to make it clear. \n. Because .AddEntityFrameworkStores<ApplicationDbContext>() is really .AddEntityFrameworkStores<ApplicationDbContext, string>()\nAt the end of the day, the primary key type is now a store specific thing, core identity always uses string for the keys.\n. Our constraint is that its a DbContext not necessarily one derived from IdentityDbContext\n. Sure filed a issue to consider in the future\n. Can you include a stack trace so we can figure out where it is.\n. @XcoderTeam Can you include the startup for your app?\n. What exactly do you mean by \"it always returns false when my signin data is wrong and no result \"  When you step through it in the debugger it returns false but your controller hangs?\n. Awesome.\n. Can you try removing your explicit transient registrations of the identity mangers, that might be the root source of your issues...AddIdentity does this for you, these should generally be Scoped to the request... was there a reason you wanted these to be transient?\nservices.AddTransient<RoleManager<IdentityRole>>();\n        services.AddTransient<UserManager<ApplicationUser>>();\n        services.AddTransient<SignInManager<ApplicationUser>>();\n. Put UseMVC before UseIdentity\n. I'm not exactly sure what the main issue with this bug is, but if its just about how to override SignInManager, you can just do services.AddScoped<SignInManager<YourUser>, YourSignInManager>() or the equivalent to ensure your custom sign in manager is used instead of the default one.\n. Dupe of https://github.com/aspnet/Identity/issues/565\n. This is so custom implementations can access things off of the user if they so desire as part of the hashing operation, for example if they wanted the salt to live on the user entity.  By default we don't use this behavior but it was requested to enable more advanced scenarios.\n. Just ignore it if your hasher implementation doesn't care about the user instance.\n. Yes, its stored as the ClaimsTypes.NameIdenfitier by default\n. 0bf7ff24185891ad41ea11b0572e79b35cb2b370\n. @divega This PR has been updated as we discussed, I removed the test that was trying to customize and changing the uniqueness of our login providers, the other 2 tests pass.  I also copied the test over to the SqlServer, and those pass as well, so I think this should be good to go.\n. 104f2161915b1a4e7d0013f3de3b8d9a212a5d27\n. 4c63935174395c74753093c876c9ce492889b061\n. None of the child entities primary key types can currently be overridden only the primary key type for user and role. \n. Merged, thanks! 13a08e2a8a055087a884246281514a85d1ab7221\n. Merged thanks ! 7b870f8e64eef067f741ae31431a11c52410b050\n. e0676292fcc8537fb6a7d3709b36b5963881a981\n. So if you just want to change how the password methods behave, you can just override UserManager and implement all of the Password methods to go against the other database, while leaving all the other methods alone which will use the default EF database. \nAt a minimum you will probably need to override:\nVerifyPasswordAsync\nCheckPasswordAsync\nHasPasswordAsync\n. You can probably just add your custom user manager before the call to AddIdentity:\nservices.AddScoped<UserManager<ApplicationUser>>, YourCustomUserManager>()\n. Yeah there's also the AddUserManager<TUserManager>() that hangs off of IdentityBuilder which is what AddIdentity returns. \n. Yeah SignInManager = UserManager + Cookie sugar APIs\n. You are calling CHeckPassword directly and its not being called?\n. Are you able to debug and confirm that you are getting the right instance?\n. Closing, feel free to reopen if you are still having issues\n. Clearing backlog for visibility\n. Rolled into https://github.com/aspnet/Identity/issues/1342. Should be addressed by https://github.com/aspnet/Identity/issues/585 which brings htings back to the 2.0 state of things more or less...\n. Why is the identity cookie in conflict with the session cookie?  As a first step, can you revert any changes you have to the cookie properties in general, the defaults should be fine in general, and would be a good thing to remove as possible causes of any weirdness you are seeing.\n. Can you include more details about what you are doing and expecting, the removal of the helpers shouldn't have changed anything on your actual ClaimsPrincipal, but that said, its possible some other changes affect what the data actually is as well...\n. Try adding this: .UseContentRoot(Directory.GetCurrentDirectory()) to Startup...\nI think I set the content root in my environment variables which is why I don't see this...\n. e0676292fcc8537fb6a7d3709b36b5963881a981\n. Yeah you need to specify the TKey when you change it from string, so AddEntityFrameworkStores<Context, int>\n. Feel free to reopen if this doesn't fix the issue\n. There currently isn't any sugar for AddEntityFrameworkStores for plugging in the more complicated derived IdenttyUser generics today, basically you need to mimic what that method currently does, just passing in the correct types.\n. Not currently as the amount of generics required was a bit overwhelming in this situation.\n. If we do this, we need to also add the normalized index.\n. @ngohungphuc 's code should work. ed1d8cfbd001676c7b187881934d207577cf8a24\nShipping as 0.1 version with AspNetCoreCompat name\n. If you want to use EF6 with identity core, you will just need to implement the identity core interfaces using EF6, you might be able to reuse most of the store code in the Identity.EntityFrameworkCore package.  The compat package is intended to let you use the old 2.2 schema, with the new EF Core provider.. Related https://github.com/aspnet/Identity/issues/516\n. Yeah this is on our list, and be part of the GPDR work which needs encryption as well. Tracking as part of https://github.com/aspnet/Identity/issues/1341. So I verified that if the email is changed via SetEmail after the token is generated, it is invalidated as you expect, the token is using the security stamp for its secret, so anything that affects the stamp (changing password, user name, email etc, would invalidate the token), hence I don't think we need the old email in the payload as its already taken into account by the stamp. See 119eb3fa684dca448ee9156dd7981b1445a15aa0. Yeah looks like dead code, thanks!\n. @divega @blowdart easy fix to slam in?\n. They did earlier this week (say Wed) yes, but I probably have packages that are a bit old.\n. But samples is what pulls in all the rest of the dependencies like MVC so its more likely to run into issues as a result.\n. Yep what @PinpointTownes said :)\n. Why are normalized name and name different with regards to _?  By default the normalization we expect is only a ToUpperInvariant(), the _ does indeed mean a different role unless you are customizing the normalization service identity uses.\n. You shouldn't be setting the normalized names at all, identity uses those to persist the results from the ILookupNormalizer service:\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/ILookupNormalizer.cs\n. EntityFramework works against POCOs, there are lots of fields that if you set to unexpected values, things will break.  PasswordHash is a good example of another field that you shouldn't set manually for example.  You are free to set the normalized name to something, but you need to set the IKeyLookup service instance used Identity to respect that value as well.\n. Ugh, yeah we should fix this\n. 27f021ab933a153eb977318e844a74f8497e3b47\n. fa976e7765db498b7587d4028da76f533d1590ff\n. Also cleans up the TwoFactorUserID cookie on successful TFA sign in\n. Sounds like what you really want is just a way to just CheckPassword that doesn't do SignIn or TwoFactor on SignInManager, but optionally will still count against lockouts/login failures \nTask<SignInResult> SignInManager.CheckPasswordAsync(user, password, lockoutOnFailure)\n. fe60304df54c43030d3eacfd9073e6a36990db05\n. Actually looks like we already have a bug for this, see https://github.com/aspnet/Identity/issues/651\n. @divega RTM or 1.0.1?\n. Depends on how we did it, if we added a new class and kept the old one I guess not\n. @divega we should discuss how we want to fix this soon\n. 1a0cd3c4d15be988abefd889853b0c6d973db9f4\n. AddEntityFrameworkStores only works with the `UserStore types, while you are using the base class that allows you to specify more entity types.  You just need to manually add your store instead of using the helper.\nservices.AddScoped<IUserStore<TUser>, YourCustomStore>()\n. Merged thanks! f278822a2c6f913c9d45ea90172079fefc9b318b\n. The claim types are configurable via IdentityOptions so there was no clean way to make static extension methods support this, so we moved them to the identity specific managers.\n. The security repo issue can track this, not an issue for identity.\n. Alternatively you can set them to be different token providers via https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/TokenOptions.cs\n. Ah yeah you can't have different options for the same class no, see related https://github.com/aspnet/Identity/issues/465\n. Short term plan is to add TokenProviderInstance to the TypeDescriber map, so an instance can be jammed in via IdentiyOptions configuration\n. You should be able to plug in your own instance of a token provider like this: https://github.com/aspnet/Identity/pull/983/files#diff-1f767f1c742b161c6a1650ec072addeeR645. Yup @jrgunawan that change allows you to specify a instance with the appropriate token life span. The twitter cookie should only live for 5 minutes by default after which it will be expired.  That said, is the null ref coming from the View?\n. This code lives in the ManageController, you can just add a null guard to prevent null users from calling UserManager APIs.  I'll file an issue in the Templates repo to add some more error checking.\n. https://github.com/aspnet/Templates/issues/596\n. So you have an empty string for your userId in your principal I'm guessing right now to cause this behavior?\n. This might be due to https://github.com/aspnet/Identity/issues/848 where the external login cookie is getting smushed with normal application cookie.  Try turning off AutomaticAuthenticate for the non ApplicationCookies:\nAddIdentity(options => {\n    options.Cookies.ExternalCookie.AutomaticAuthenticate = false;\n }\n. Cool this is already fixed for 1.0.0, so the workaround should only be temporary\n. Did you set it in your app when adding the login, i.e.\nawait manager.AddLoginAsync(user, new UserLoginInfo(provider, providerKey, displayName)\n. For the default templates this is fine because we are using the default names for the providers.  This field is mostly there for the app to use if desired.\n. This is caused by https://github.com/aspnet/Identity/issues/848 and should be fixed in 1.0.0\n. Well email doesn't have to be unique which is why we went with username originally. \n. Yeah there's a flag on User options to require it to be unique. You could send them all their usernames for the email I guess. \n. @blowdart anything to be done here?  Our templates currently use email as the user name, so the apis are as such.  UserName is our login key in identity.  Email is not necessarily unique from Identity's perspective so we don't use it in any of the login apis.\n. You should close this and create a new issue in templates, I don't think there's any identity APIs missing preventing this today.\n. How are you registering your SubscriptionService, is its lifetime scoped?  The usermanager will be disposed after each request, so that is most likely what's causing the error.\n. Feel free to reopen this if its still an issue and you have a stack trace/repro we can look at\n. 7b3b3627957404fe9083268929dd5589f7a26d1b\n. Still missing some doc comments \n. Not a ton, maybe on the order of 6-10 methods, none of them are very important looking\n. Ok I will just check this in as is, we can fix the rest in 1.0.1\n. 7b3b3627957404fe9083268929dd5589f7a26d1b\n. @divega any thoughts?\n. We discussed this and decided against changing this\n. ec4c08d11a00ec9b4dd8c22ef13a4950cb70901e\n. This is because the default from identity is different than the cookies default but the intellesense comes from cookies\n\nCookieAuthenticationOptions.CookieName intellisense docs claims the default value is .AspNetCore.Cookies, but the actual default value seems to be .AspNetCore.Identity.Application\n. ec4c08d11a00ec9b4dd8c22ef13a4950cb70901e\n. 13ae7b21f3459e97cd5853b6e6ccb229dac1bafe\n. AutoSaveChanges is a behavior specific to the EntityFramework implementation UserStore, which is why you have to cast it.\n. The property only lives on UserStore, so yes you have to a reference to that type to use the property.\n. You need to add a reference\nto Microsoft.Extensions.Options.ConfigurationExtensions in your project.json\n\nOn Wed, Jun 22, 2016 at 10:30 AM, Elvis Halilkovic <notifications@github.com\n\nwrote:\nI have recently migrated my entire project to ASP.Net Core RC 2 stack,\nincluding Identity.\nIn RC 1 I had a Seed service that was called during ConfigureServices.\nHere is the relevant snipped of code:\npublic void ConfigureServices(IServiceCollection services)\n{\n            services.AddOptions();\n            services.Configure(Configuration.GetSection(\"AdminAccount\"));\n            services.AddTransient();\n}\nThen I call that service in my Configure() method, code:\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, SeedData seeder)\n{\n            seeder.CreateAdminUser();\n}\nFinally here is my SeedDataOptions class:\npublic class SeedDataOptions\n    {\n        public string username { get; set; }\n        public string password { get; set; }\n    }\n```\npublic class SeedData\n{\n    private TEDContext _context;\nconst string adminRole = \"admin\";\npublic string AdminUsername { get; set; }\npublic string AdminPassword { get; set; }\n\n\npublic SeedData(TEDContext context, IOptions<SeedDataOptions> options)\n{\n    _context = context;\n    AdminUsername = options.Value.username;\n    AdminPassword = options.Value.password;\n\n}\n\npublic async void CreateAdminUser()\n{\n    var user = new TECHUsers\n    {\n        UserName = AdminUsername,\n        //FirstName = \"Admin\",\n        //LastName = \"Account\",\n        NormalizedUserName = AdminUsername,\n        SecurityStamp = Guid.NewGuid().ToString(\"D\"),\n        LockoutEnabled = true,\n        CreateDt = DateTimeOffset.Now,\n        ModifiedDt = DateTimeOffset.Now\n    };\n\n    var roleStore = new RoleStore<IdentityRole>(_context);\n    // var RoleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(_context));\n\n    if (!_context.Roles.Any(r => r.Name == adminRole))\n    {\n        await roleStore.CreateAsync(new IdentityRole { Name = adminRole, NormalizedName = adminRole });\n    }\n\n    if (!_context.Users.Any(u => u.UserName == user.UserName))\n    {\n        var password = new PasswordHasher<TECHUsers>();\n        var hashed = password.HashPassword(user, AdminPassword);\n        user.PasswordHash = hashed;\n\n        var userStore = new UserStore<TECHUsers>(_context);\n        await userStore.CreateAsync(user);\n        await userStore.AddToRoleAsync(user, adminRole);\n    }\n\n    await _context.SaveChangesAsync();\n}\n\n}\n```\nI have a appsettings.json file which has the details of the AdminAccount:\n\"AdminAccount\": {\n    \"Username\": \"techadmin\",\n    \"Password\": \"!Ch@ng3M3!\",\n    \"Role\": \"admin\"\n  }\nIn RC 1 the line below would get these values and populate my\nseedDataOptions which would in turn create the account when the application\nruns.\nservices.Configure(Configuration.GetSection(\"AdminAccount\"));\nIn RC 2 I get the following error for this line:\n[image: seedoptions]\nhttps://cloud.githubusercontent.com/assets/6643233/16276645/864c844e-386c-11e6-9b42-a756ecdff530.jpg\nAny direction on what I should be doing different will be greatly\nappreciated.\nThanks in advance!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/878, or mute the thread\nhttps://github.com/notifications/unsubscribe/AGPChcIS-Rt2Ls251DhMkEkhu-7HfmlUks5qOXE2gaJpZM4I8Bxz\n.\n. The idea is the stores own the entity types.  You can always just copy the classes from the Entity Framework package for reuse in your implementation.  They are simple enough that we did not feel it was necessary to provide a base class implementation.  We can consider doing this in the future if there is enough demand.\n. This is correct, SignIn has no effect on ClaimsPrincipal.Current in Core.  @blowdart \n. Dupe of https://github.com/aspnet/Security/issues/322\n. Ah good catch, thanks!\n. 9e0204279818869b43c7cb4695b726c2960be662\n. closing as linked bug has been closed as well. We discussed this when we were deciding whether Identity should go in the AspNet namespace, and the outcome was that we intentionally decided against specifically supporting non web scenarios.\n. IdentityUser lives in EntityFrameworkCore, you don't have to derive from IdentityUser, you can implement your own TUser so I'm not sure I understand the issue, IdentityCore isn't tied to the EF implementation at all. . Plugging in your own non EF identity store should look basically like this:\nservices.AddIdentity<YourUser, YourRole>().AddUserStore<YourUserStore>.AddRoleStore<YourRoleStore>();\n\nNo EF involved.. Fair enough, I believe the reason the IdentityUser/associated pocos don't live in core was due to a few navigation properties they have.  @divega might recall more details about that debate as well.\nWould things be better for your optional EF scenario if the simple IdentityUser POCO lived in core for everyone to use if they desire?\ncc @ajcvickers @blowdart if we want to move our pocos around, this might be a good thing to do in 2.0.... Yeah now I remember what the point of contention was, the placeholder navigation properties that exist for EF only.  That's really the only thing that would get removed for the entities to live on core...  \nClearing for triage \nMain issue:\nhttps://github.com/aspnet/Identity/issues/332\nRelated issues: \nhttps://github.com/aspnet/Identity/issues/547\nhttps://github.com/aspnet/Identity/issues/489. Sure we've been overdue for cleaning up things in Identity...\nSo something like:\nMicrosoft.Extensions.Identity.Abstractions (UserManager/SignInManager/interfaces\nMicrosoft.Extensions.Identity.Stores.Core (IdentityUser/basic stores)\nMicrosoft.AspNetCore.Identity (SignInManager that works with AspNet)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore (EFStore)\n. @blowdart thoughts?\n. This is likely to be a dupe of https://github.com/aspnet/Identity/issues/860 where you need to turn off AutomaticAuthenticate for the external cookie, due to a bug in RC2 that's fixed in 1.0.0\n. Can you try to migrate the data using EF Migrations?\n. The lifetime of the cookie is determined by identityOptions.Cookies.ApplicationCookie.ExpireTimeSpan\n. User.Id exists in the identity EF implementation. It's not necessarily required as custom identity  implementations do not have to expose an id property. The tradeoff is between having the manager abstract this operation or directly going against an implementation property that the store backs against.\n. Can you clarify what you are asking?\n. Ah yes, dupe of https://github.com/aspnet/Identity/issues/855\n. If all you want to do is rename the entities, you don't have to create new entity types.  ToTable should work fine against the default entities.\nOnce you start plugging in custom entities, you will need to drop down below the sugar and register your stores differently.\npublic class ApplicationDbContext : IdentityDbContext<MyUser, IdentityRole<string, MyUserRole, IdentityRoleClaim<string>>, string, MyUserClaim, MyUserRole, MyUserLogin, IdentityRoleClaim<string>, MyUserToken>\nIn startup: instead of AddEntityFrameworkStores you will need something like this instead:\n.AddUserStore<UserStore<MyUser, IdentityRole<string, MyUserRole, IdentityRoleClaim<string>>, ApplicationDbContext, string, MyUserClaim, MyUserRole, MyUserLogin, MyUserToken>>();\n. We unfortunately need to do this in a non breaking way, replaced with https://github.com/aspnet/Identity/pull/930.  Thanks for submitting this PR though!\n. What does StaticServices.getUserManager() look like?\n. Copy pasted yours mostly :)  Fixes https://github.com/aspnet/Identity/issues/872\n. Is the content acceptable enough for a furry little friend? @blowdart \n. ec4c08d11a00ec9b4dd8c22ef13a4950cb70901e\n. @divega look good?\n. @divega says :shipit:\n. 27f021ab933a153eb977318e844a74f8497e3b47\n. Thanks merged f73f668e2be8829fafaa61e129dc20ba7fb2c18c\n. So the github identity is getting stored to this scheme: \nservices.AddAuthentication(options => {\n                options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n            });\nAssume you have successfully done the github auth flow and received a github identity back already, something like this should probably work:\nvar githubInfo = await HttpContext.Authentication.GetAuthenticateInfoAsync(CookieAuthenticationDefaults.AuthenticationScheme);\n    var AccessToken = githubInfo.Properties.GetToken(\"access_token\");\n. What is your actual user flow in terms of views/actions that you are trying\n. Take a look at https://github.com/aspnet/Security/blob/dev/samples/SocialSample/Startup.cs\nThat's how an OAuth flow is supposed to work where it shows how to retrieve tokens, that might give you a step in the right direction.\n. If you are using the templates, the main difference between the social sample and that, is that the external logins (google/fb/github) store their identities in the \"External\" cookie, which is different from the application cookie.  You will need to extract the tokens in the ExternalLoginCallback action in the account controller.\n. That's what I meant, the tokens are in the external cookie, and not the identity application cookie, you could manually add it as a claim via something like:\nuserManager.AddClaimAsync(user, new Claim(\"github_access_token\", \"<token value>\")\n. Do you have a security stamp set for your user's?\n. What does the cookie look like in F12, can you include what headers it has here?\n. Do you see any extra info like Expires as well?\n. Do you see any extra info like Expires as well?\n. Your test is failing because of something unrelated, the security stamp interval controls regenerating the cookie, if you set that to also 10 days, it won't regenerate the identity...\noptions.SecurityStampValidationInterval = TimeSpan.FromDays(10);\n. By default the cookie is refreshed after 30 minutes on the next request to ensure the claims are up to date assuming the security stamp hasn't changed, if that has changed, it will sign out and clear the cookie instead.\n. We have tests that exercise cookie expiration that are passing, if the timespan that is causing cookie signout issues is exactly 30 minutes, that is the security stamp validator that usually is causing the logout.\nTry setting that to something longer to see if that is what you are running into.\n. Closing, not related to identity. The AccessDenied is the default url used if no AccessDeniedPath is configured in the options:\nhttps://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationMiddleware.cs#L57\n. Dupe,\nSee discussion in https://github.com/aspnet/Identity/issues/883#issuecomment-228569093\n. Fixed via f9cdef745f92b05c1c141d80b6af6b14b165ee62\n. :shipit:\n. There are lifetime issues here, the RoleManager is scoped to the lifetime of the request, and it depends on a DbContext which is similarly scoped.  Hence the error about accessing a disposed object.  Caching the manager in your initializer is accessing it after its already been disposed\n. Dupe of https://github.com/aspnet/Identity/issues/1065 which shows how you can use the UserManager at startup which is the same. If you want to remove user claims entirely, you will need to not implement IUserClaimStore on your UserStore, you won't be able to use the default implementation of UserStore in this case.  But you could copy the existing UserStore code and simply remove the IUserClaimStore implementation and any other implementations you don't want.\n. @divega look reasonable?\n. Hrm yeah good point I think I misunderstood the original issue he wants this event to be only called on explicit signins rather than on all sign ins. I agree with you I think he can just override the methods he wants in this case. \n. @divega might have more info, but I believe you get this error exactly because of the fact that you are using different instances of a DbContext to manipulate the same entity.  That's when I've seen exceptions regarding tracking issues in the past.\nIn general the default identity EF store expects the DbContext to be scoped and I'm not sure what level of support EF has for modifying the same entity in different DbContex concurrently...\n. So the issue is between _context and _userManager's store context I guess since the user is fetched from the controller DbContext here.\nuser = _context.Users.Single(x => x.Email == email);\nAnd then added to the userManager context here, which throws as expected based on what @divega explained:\nvar addLoginResult = await _userManager.AddLoginAsync(user, info); // THROWS HERE\n. Try replacing the _context.Users.Single(x => x.Email == email) with _userManager.FindByEmailAsync and that might fix things\n. Are you seeing this in 1.0.0 and not an older build like RC2?\n. You can always clear the external cookie explicitly via SignOut with a try catch around ExternalCallbackConfirmation \n. Just to clarify the purpose of the external cookie, its there to store the identity/claims from another auth provider (i.e. google/facebook/OAuth).  Identity will pick up and use that cookie mostly just to link an external login.  \nIf your app ends up in a state where you got a 'bad' external cookie, there is no other recourse other than clearing it explicitly (or waiting for it to time out on its own).\nThat said, why do you think the external cookie is 'corrupted'?\n. @kroniak SignOutAsync should be deleting the external cookie \n. @Tratcher maybe we should add an option to disable the new behavior we added, something like RemoteAuthenticationOptions.AuthenticateUsingSignInScheme = false (true by default)\n. Not sure @phenning might know who the new PM owner is?\n. var gender = info.Principal.FindFirstValue(\"gender\");\nvar birthday = info.Principal.FindFirstValue(\"birthday\");\nprobably should work\n. Debug and look at info.Principal to see what claims it has, its possible those claims are simply ignored by default and never transferred over to the cookie\n. Set a breakpoint on those lines, and include what claims it actually has\n. Doesn't look like the google handler will copy over any extra claims you ask for by default, I think you just need to plug in your own CreatingTicket event to store the extra claims you requested.\nhttps://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Google/GoogleHandler.cs#L75\n. See http://stackoverflow.com/questions/18942196/how-to-access-facebook-private-information-by-using-asp-net-identity-owin the second (26 upvoted) answer.\nThis is for Identity 2, but it should be similar for core, where you hook the OnCreatingTicket event instead to include the birthday/gender, and add the claims during SignIn like the SO answer\n. This was the design, only a specific set of claims are copied into the ticket by default.\n. I believe that is because those claims are requested by default in the facebook auth handler.\n. Merged eabec2b47618208432e56ec17e1ea8ebd5a4e157 Thanks!\n. Dupe of https://github.com/aspnet/Identity/issues/883\n. You should expect to see a database whenenever a new cookie is generated, but that shouldn't be every request\n. Dupe of https://github.com/aspnet/Identity/issues/855\n. There's a similar PR here https://github.com/aspnet/Identity/pull/893\n. You also cannot use .AddEntityFrameworkStores<ApplicationDbContext, string>() when you customize everything, your calls to AddUserStore/RoleStore make that call unnecessary as well. so you should be able to remove that line.\n. Dupe of https://github.com/aspnet/Identity/issues/855\n. See https://github.com/aspnet/EntityFramework/issues/2167#issuecomment-232205222 as someone was able to get this to work recently\n. You also cannot use .AddEntityFrameworkStores() when you customize everything, you should be able to use AddUserStore/RoleStore instead\n. Legacy code mostly, in the past I believe this Dispose would have disposed the DbContext potentially, but that code was removed, so its mostly just there to block method calls after the store has been disposed now...\n. cc @divega \n. @divega  says :shipit:\n. 1a0cd3c4d15be988abefd889853b0c6d973db9f4\n. fe60304df54c43030d3eacfd9073e6a36990db05\n. fa976e7765db498b7587d4028da76f533d1590ff\n. Dupe of https://github.com/aspnet/Identity/issues/855\n. Yeah so middleware are going to pull from the wrong scope, so their lifetime will be singletons effectively for your app, that's why the behavior you are seeing is different vs controller lifetimes\n. Triage: Thanks for reaching out. This looks like a component that can be build on top of identity without actually living inside this repo.  Among other things, before it can be considered as a contribution here it would need extensive tests.\n. c1b8f3abf39a4856e5f48a20a59ecc14580947a0\n. So why can't you just add a new RequiresPasswordChangeSignInResult : SignInResult, and override whatever sign in methods you want to return this result in the cases you need.\nYou can add an extension method to SignInResult.RequiresPasswordChange to return true if its an instance of your type.\n. Why are you trying to change the return type, return your derived new result for the cases where you need in your method, there's no data on it, so what's wrong with what I suggested above, create a type for your new RequiresPasswordChangeSignInResult, update your calling code to contain a check for that result, alongside all the old cases.  That's basically no different than how you use the other built in results today.\nLeave the signatures alone\n. Cool\n. dbec1c6236ac5cc6bc31db52686259c64c89a7d3\n. Not going to make it in this week after discussion with @divega \n. Since there's no template updates for 1.1, there's no real benefit for rushing this in, will put this in for 1.2 soon as the branches are open\n. as discussed with @blowdart in security triage\n. Should address https://github.com/aspnet/Identity/issues/818 as part of this work\n. Initial feature is in 5aed9742a4f1a35558f5ca644e981398df7017c1 @blowdart give it a try, the sample is updated with the current flow just with authenticator as an additional option (you need to generate a key via manage for it to show up as an option.. Yup safe to delete\n. 5d759abcde8e652fa83ad1a7099fffffb53ca648\n. Seems reasonable, I'll merge\n. Merged thanks! 4af4a434c563bc89064b18ff6867fb52d6bfd7d6. Dupe of https://github.com/aspnet/Identity/issues/765. There is no IUser in AspNetCore Identity, you no longer have to implement IUser, but your IUserStore needs to implement the equivalent methods that used to live on this interface, GetUserId(TUser), GetUserName(TUser)\n. UserManager.GetRolesAsync(user) will return you all of the roles for the user.\n. That should work fine\n. @blowdart @divega \nFeels like the proper key is ID + type, as opposed to requiring unique ID always, but I'm not entirely convinced...thoughts?\nWhich leads us to an API that looks something like:\n```\n   public interface ITokenStore {\n        // Create or updates the token (would we need to split these apart into two apis?)\n        Task StoreAsync(string id, string type, string value, CancellationToken cancellationToken);\n        Task RemoveAsync(string id, string type, CancellationToken cancellationToken)\n        Task GetValueAsync(string id, string type, CancellationToken cancellationToken) \n   }\n// Constraints would be non null id, type and values (but empty would be considered valid)\n   // GetValue would return null for tokens that don't exist\n```\n. If we go that route with the id being the key, maybe we should use a POCO\n```\npublic class IdentityToken {\n   public string Id { get; set; }\n   public string Type { get; set; }\n   public string Value { get; set; } \n}\nTask StoreAsync(IdentityToken token)\nTask RemoveAsync(string id)\nTask GetAsync(string id)\n```\n. For usage, I'm imagining we don't need any extra complexity like a manager, we'd just implement the store in Identity.EF, and it would get registered as part of AddEntityFrameworkStores, and consuming it would be up to the developer for 1.1, since we don't have any features that currently use this store (until the templates are updated)\n. > Could you still answer what the ID represents?\n\nThat's sort of the question I am asking. Do we want to make the id the unique key or part of the key. We are deciding what the contract is for consumers. \n\nIt basically boils down to whether we want to make it easy to partition based on token type or not. If we say is must be unique across all token types. We don't even need token type anymore. We can just say that's something that should be in the payload as well since we won't have any APIs that use the type. \n. Having the type alone won't help with that since we won't be able to query using user id since that's part of the bag.  \n\nFor example, we'd want to say \"Give me all the TOTP reset tokens for user X\"\n. The main difference between the token server and user ids is here, where the token id is enough for the token server, while the identity user tokens have the additional filters of type + owner that we will need to query by.\n. For identity could use the the token store just as a bag with another table in charge of managing token types/payloads.\n\nSo maybe: ITokenStore for the generic get/set/delete of ID/value token pairs.\nIUserTokenStore which layers on UserId, TokenType, TokenId which we can use to build our recovery code/whatever we want\n. We've decided to roll the authenticator info into the existing UserAuthenticationTokenTable\n. @blowdart he is taking issue with your verbiage...\n. :shipit:\n. This will finally happen via https://github.com/aspnet/Identity/issues/1269 . It was somewhat intentional, we picked int mostly because it was easy to autogenerate and also compact. int keys cause migration pain? \n. Yeah the current behavior assumes the UserPrincipalFactory is the source of truth for creating a current up to date principal (we don't want to just refresh the old cookie in its entirety since this feature is about getting rid of any invalid claims to prevent unauthorized access).  Can you just plug in your own derived factory to add the additional claims or are they stored anywhere other than the cookie?\n. Not at all, this feature is about clearing out security related claims or any other things that might have changed in the user.  I.e. some permission has been revoked, so the cookie must be regenerated as its no longer valid.  The stamp claim is only used to trigger the forced refresh.\n. We have no way to tell what's sensitive or not, hence the entire cookie needs to be regenerated (which is what the IUserClaimsPrincipalFactory's job is).  Also this is the sign out everywhere feature for identity.\n. Well the idea is when you want to sign out the user everywhere, you call the public method UpdateSecurityStamp on the UserManager....  So in any admin app which is doing the role changes, it almost certainly would call that method (i.e. almost every operation on a manage page should result in this being called).  \nThe idea is any time any 'security' (intentionally vague as its app specific) related feature changes, this should be called.  I agree that its not intended to be called if any user data changes, as something explicitly had to have triggered the stamp to change.\n. Its been this way since we added this feature I think (2.0), unfortunately I don't exactly remember the reasoning anymore (regenerate vs reuse).  @blowdart any recollection, basically the behavior we have is, we check every 30 minutes or so, when we check (we either reject the cookie (stamp doesn't match), or we regenerate an fresh principal for the user.  \nIf I were to guess, this is safest, since if an app forgets to call UpdateSecurityStamp, they will still automatically get protected every 30 minutes or so if anything security critical was changed but the stamp wasn't explicitly invalidated.  Flipping the stamp results in the user having to relog in, while a fresh identity shouldn't be lossy in theory...\n. You probably have to do it from within a custom security stamp validator, since that has access to both the old principal, and what's going to be the new principal.\n. To be more precise, not necessarily a custom identity validator, but hook into the same cookie events the security stamp validator is\n. Sure, we can certainly revisit the validator to make it more reusable as that hasn't gotten any love since it was first written back in the katana days\n. Sure you do, you and levi did the security review and pushed for sign out\neverywhere, which is this feature :)\nOn Wed, Sep 14, 2016 at 1:11 PM, Barry Dorrans notifications@github.com\nwrote:\n\nDon't blame me for 2.0 :) I can't even remember adding this feature.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/958#issuecomment-247138304,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGPChfMQAYFG0JOA2adIjQGXgSfQqYJ0ks5qqFTzgaJpZM4J6DFq\n.\n. Well lets say hypothetically we didn't spit out a new cookie every time we\nhit the database (every 30 min or so), then even if you removed a user from\nthe admin role, that would never get reflected in their cookie unless they\nsigned out...\n\nOn Wed, Sep 14, 2016 at 1:13 PM, Barry Dorrans notifications@github.com\nwrote:\n\nIt was well over a year ago. I can't remember what I did last week. It\ndoes seem out to spit out a new cookie.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/958#issuecomment-247138870,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGPChW8B97l9cJSsKJ3R37g5i_GWAiJpks5qqFVygaJpZM4J6DFq\n.\n. Yeah so we would be putting the onus onto the app developer to get it right, this does not seem like something obvious for people to automatically get right...\n. Its been hard enough for us to get this right :)\n. More likely I will just add an extensibility point where you can hook and do your own thing easier than replacing the whole shindig, you really just want yet another claims transformation point where this one is old principal to new principal, with access to all your stuff\n. it'd hang off of IdentityOptions somewhere, always a safe dumping ground :)\n. this is identity specific anyways, not a general cookie middleware validator\n. @brockallen chatted with @Tratcher and we think that the same transformation step that was needed to get the sid into the identity cookie, could be updated to use this new feature to carry over the sid into the new cookie.\n. Yeah basically since they would have to have been doing something custom to get the sid in there in the first place, they just need to do more to keep it carried over when the validator refresh's the cookie\n. aba7cf96b9ac7c910ee7db5e34fa7cf78516116a\n. Dupe of https://github.com/aspnet/Identity/issues/859\n. Customization of the key types is now only a store concern.  The core identity apis all use string, your store implementation is required to implement string GetUserId(TUser user), so you can still persist the key in whatever type you want, but your store is responsible for doing the stringifcation.\n. The main purpose of this initial PR is to start settling on the names/shape of the public surface area of UserManager/SignInManager:\n\ninterface IUserAuthenticator\nReplaceAuthenticatorRecoveryCodes(TUser user, int numCodes)`\nRedeemRecoveryCode(TUser uesr, string code) => IdentityUserTokens\nstring GenerateAuthenticatorKey' => IdentityUser [AuthenticatorKeys:UserId] value= key\nGetAuthKey\nSignInManager gets:\nReplaceAuthenticatorRecoveryCodes(TUser user, int numCodes)\nVerifyAuthenticatorRecoveryCode(TUser user, string code)\nVerifyAuthenticatorSignInAsync(TUser user, string code) this could live in either manager\n. 5aed9742a4f1a35558f5ca644e981398df7017c1. We are adding the ability to specify instances in the provider map, I'm not sure if that completely addresses your issue, but you will be able to configure a different instance for each method if you so like via https://github.com/aspnet/Identity/pull/983\nIf you want to switch between different providers in a different fashion you probably have to drop down and use the lower level methods: \nGenerate/VerifyUserTokenAsync(user, \"YourCustomProvider\", \"ResetPassword\"), those public apis are just sugar on top of that method with the IdentityOptions.Tokens.XyzProviderName hardcoded.\n. If you are managing the token provider instances instead of the user manager, you can just directly call into the provider with the appropriate purpose/user, you don't need to go through the user manager in this case.\n. If you are managing the token provider instances instead of the user manager, you can just directly call into the provider with the appropriate purpose/user, you don't need to go through the user manager in this case.\n. So underneath the covers, UseIdentity ends just doing:\nvar options = app.ApplicationServices.GetRequiredService<IOptions<IdentityOptions>>().Value;\n            app.UseCookieAuthentication(options.Cookies.ExternalCookie);\n            app.UseCookieAuthentication(options.Cookies.TwoFactorRememberMeCookie);\n            app.UseCookieAuthentication(options.Cookies.TwoFactorUserIdCookie);\n            app.UseCookieAuthentication(options.Cookies.ApplicationCookie);\nYou can remove the UseIdentity call and configure the TicketDataFormat explicitly instead which should work.\n. Yes, identity does not expect to be multi instance, unlike cookies which is.\n. dbec1c6236ac5cc6bc31db52686259c64c89a7d3\n. Dupe of https://github.com/aspnet/Identity/issues/855\n. AddIdentity already calls adds a RoleManager service. That method is for adding a derived role manager. \n. Can you debug and double check that your token provider services got configured properly?\nThe user manager is expecting to find something called \"Default\" in the IdentityOptions.Tokens.ProviderMap.Keys which has an instance of IUserTwoFactorTokenProvider<TUser>.\nCan you show more of your startup, and also your controller action + ctor that's causing the error.\n. Why is AddIdentity called twice?\n. So basically the problem is that IdentityOptions is a singleton, so the problem is that you are calling AddDefaultTokenProviders twice, so it ends up being the wrong type if you try to get a token provider for the first user.  Basically the Default provider is the one for the second OpenIddict manager, so calls to the first manager's token apis will never succeed.\nSee https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityBuilder.cs#L154\n. What are you trying to do that requires multiple user managers with different user types?\n. Cool, no problem, glad its working now\n. These used to be all public and the unit tests tweak the Managers this way still. They were made internal when we switched to DI to initialize in 3.0. \n. I only made the protected methods virtual since there was no harm in letting them tweak those behaviors.  The properties are get/set, so those should be fine non virtual\n. dbec1c6236ac5cc6bc31db52686259c64c89a7d3\n. Yes the manager actually already guarantees that no role with the same name exists. This is a redundant check for the database layer. \n. 5d759abcde8e652fa83ad1a7099fffffb53ca648\n. @divega is this something we should do for 1.1 preview?\n. @divega does this work only on key's (the userID/roleID), or would it work for things that are unique index'ed, like the NormalizedName queries?\n. @blowdart thoughts?  Its a cheap overload, the behavior would be that we jam some additional claims on to the ClaimsPrincipal.Identities.First() from the ClaimsPrincipalFactory\n. This is basically the same ask as https://github.com/aspnet/Identity/issues/628, using that issue to track this. @Tratcher mind reviewing as well since you are the only other one with some context :)\n. CreatingTicket I believe is the other OAuth event that can be hooked \n. Nope, shuttling claims around was always done directly via cookie events.  We added a method which took care of some of the token refreshing, but identity doesn't expose any cookie related events, it just exposes the cookie options directly (until this PR anyways...)\n. Sure, updated to suggested names, New/Current Principal + Replacing => Refreshing\n. aba7cf96b9ac7c910ee7db5e34fa7cf78516116a\n. Nothing we can do unless we get a repro for this, if this still is happening, feel free to file a new issue with the repro, but in the https://github.com/aspnet/Security repo. You don't have to inherit from IdentityUser unless you are using our EF User Store.  If its not possible to make BaseEntity derive from IdentityUser, you can always write your own UserStore implementation (reusing most of the code from ours)\n. I'm not sure what you mean by TwoFactorSignInAsync sets the username 4 times.\nSo this method is what generates the principal for sign in: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs#L78\nSignIn manager does some work around verifying the two factor code, and the user, but the actual application cookie generation is done by the UserClaimsPrincipalFactory.  Perhaps you are looking at the wrong cookie (there are 4 of them)  In general its only the application cookie that you should care about, the rest are there for identity APIs to work\n. Can you make sure that AutomaticAuthenticate is off for all of the cookie middleware other than the ApplicationCookie (inside of IdentityOptions.Cookies.XyzCookie)\n. What version of the packages are you using, there was a bug fixed in older versions where the defaults used to be true, you can turn all of the AutomaticAuthenticates to false other than the Application if don't want to upgrade\n. The defaults should be set to off: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityCookieOptions.cs\n. Just to clarify expectations, assuming TwoFactorSignIn returned success, it should be setting a cookie which contains the application cookie which will have the user on the next request.  Is that what you are seeing?  I'd also try getting rid of any HttpOnly/Cookie secure extraneous settings for now.\n. Again, two factor sign in if successful, means the NEXT request will have the User set.  Authentication for the current request has already happened.  None of the SignIn's have any effect on the current request.\n. See https://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test/UserStoreWithGenericsTest.cs#L87\n. This is correct, if you cannot derive from our UserStore/RoleStore, then you need to just implement the interfaces yourself, and you probably don't need to use the Identity.EntityFrameworkCore package at all in that case.\n. AddIdentity is fine, its the Configure of the options, they SHARE options (since its singleton), which is 100% not what people would expect, that you get the union of all of the AddIdentity options configurations, with last one winning...\n. Meaning, the services we add are fine in AddIdentity, those are already all TryAdds and safe.  Plus in general they are passing in different TUser, so they actually are trying to have different managers I guess?  It just is likely to not work/go BOOM in some random fashion\n. This is probably technically a breaking change, still ok for 1.1?\n. I doubt its very common, but given that we've already seen one example of someone doing this, its certainly possible today if they have multiple user entity types, and are using identity to access them.  That said, if they are careful and either avoided or worked around any issues that arose from all instances of UserManager's sharing the same identity options, it would work...\n. That said, even if we were to block AddIdentity from being called more than once, anyone who was relying on this before would still be able to work around the block by manually adding the services that AddIdentity does.\n. The security stamp validator could cause this behavior, make sure that your users have a security stamp set\n. There was a missing generic argument for the IdentityRoleClaim, this should be fixexd now in 1.1, dupe of https://github.com/aspnet/Identity/issues/855\n. ee83dfe9be3dc17fa8367a0031ff355392db8a76\n. You shouldn't be calling GetUserId with the claims principal from an OAuth provider. The only ClaimsPrincipal that should be used with that is one generated via the ClaimsPrincipalUserFactory that identity uses. Associating OAuth with the local user is usually done via the AddLogin method which links the OAuth id to the local user id.\n. The flow is a bit involved, have you stepped through a working normal template flow (MVC/Individual Auth) that does external logins?\nWhich looks something like: https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Controllers/AccountController.cs#L152\nThere's basically two claims principals (the identity/application identity, and another external identity which has nothing to do with the former, except for using some of the claims to lookup things in the database)\n. It doesn't get assigned until the next request, you should see the application cookie being set on the response where you did a signIn, and the next request should result in HttpContext.User having the claims principal\n. You can call FindByLogin using the external login to get the user instance out\n. Merged thanks 0332e91a08bc99de09d501c7a7fa188ac7fafa27\n. This was by design we don't have any sugar for the stores that use the more complicated generic parameters. \n. We think we should be able to make AddEntityFramework stores inspect the store to 'do the right thing' when using the base generic user store\n. @divega I was able to get to the point where using reflection we can infer all of the child entity types using TUser.  Unfortunately the last step appears to be not infer able, we need a concrete class for UserStore that knows how to materialize the child entitys, today we have: \nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L72\nwhich is able to explicitly new up the default child entities.  The problem when they plug in their own child entities, is that unless we ask them to specify the store type, we don't know how to implement these abstract types (we could switch directions and require the pocos to have a new() constraint instead)...  \nSo the best we can do without adding new constraints I think is to add something like:\nAddStores<TUserStore, TRoleStore>() which is just sugar for adding a user role/store.  To use the base generics today, they HAVE to have a concrete store type which extends from our UserStore, we already added the simple overload that just takes TKey. \nThoughts?\n. Note the AddStores would be something we add on the builder in core since it has no actual dependencies on our EF implementation, its just a sugar method to add the store types correctly.\n. Nevermind, we already have AddUserStore<T>, AddRoleStore<T>, so I'm not sure how much better we can do than what we have today...\n. So the steps to make a custom generic base class EF store work is:\n1. Implement your EFStoreWithGenerics : UserStore<TUser, TKey, ...>\n2. Replace AddEntityFrameworkStores with:  AddIdentity().AddUserStore<EFStoreWithGenerics>().AddRoleStore<EFRoleStoreWithGenerics>() \nI don't think this is that unreasonable\n. Sure, I'll take a look what we can do to improve the error message, that's probably the only thing we can do, (Point them to use AddUser/RoleStore with their store instead of AddEntityFrameworkStores)\n. How about these for the new exception messages:\n```\n\"AddEntityFrameworkStores can only be called with a user that derives from IdentityUser. If you are specifying more generic arguments, use IdentityBuilder.AddUserStore() instead.\"\n\"AddEntityFrameworkStores can only be called with a role that derives from IdentityRole. If you are specifying more generic arguments, use IdentityBuilder.AddRoleStore() instead.\"\n```\n. 13ae7b21f3459e97cd5853b6e6ccb229dac1bafe\n. Ported to https://github.com/aspnet/AspNetCore/pull/5952 since the code has moved. Can you narrow down the timeframe between when it was working and when it stopped?  Did you upgrade versions?  \nIf External logins don't work in any app including new apps, can you also try on a different machine to confirm its not specific to something getting messed up on the machine.\n. This works fine for me right now against the identity sample so the underlying APIs are fine.  My guess is something in your app is causing this.\nTry removing the change added in 1.0.1 to templates that is clearing the external cookie.\nhttps://github.com/aspnet/Templates/commit/306fbc6b62c01a55c77399688ae57e11f3f6f359\n. Yeah so you guys have the opposite problem then, you need to add the line of code that was added in 1.0.1 to fix the issue, you are running into aspnet/Announcements#201\n. Well if manually deleting the external cookie works, that fix is basically automating that for you, so it should accomplish the same thing as your manual fix.\n. Closing this bug, template issue will track this\n. Create does call validate with the UserValidator which is responsible for email validation\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L422\n. By default user managers are not shared across requests, because as you discovered they are not thread safe.\n. So there has always been an implicit assumption that the mangers are scoped.  @divega do you see any problem with this assumption?  We haven't really tried to enable things like singleton lifetimes..\n. https://github.com/aspnet/Identity/issues/655 drove why we made it optional\n. Its required for SIgnInManager for sure, since that can't work without an HttpContext.  We could(should?) have made it optional for RoleManager as well.\n. Sure but in that issue it seems more that we don't really care too much if the functionality is lost, so there's certainly no good reason to add a billion overloads to pass around cancellation tokens on the manager APIs.\n. We could do something cheap like a new setter on the managers to set your own CancellationToken which would get used instead of the HttpContext's as a cheap way to enable this fringe scenario...  but I don't think many (any?) people would use this feature if we added it...\n. What's your startup look like?  What's the full callstack of the exception?\n. The callstack for where the format exception should be able to point to the problem, what's trying to convert to a boolean?\n. Can you try to see if context.Roles.First() throws as well?\nWe think the issue is with the following query which appears in both of those methods await Roles.SingleOrDefaultAsync(r => r.NormalizedName == normalizedRoleName, cancellationToken);\n. Can you try the async methods instead?\n. Closing as this is a mysql issue tracked via https://bugs.mysql.com/bug.php?id=84814. Yeah I noticed this while working on the auth update, its already fixed/updated in that PR, will fix this as part of the update that adds the new 2FA providers in\nhttps://github.com/aspnet/Identity/pull/963\n. Fixed in 5aed9742a4f1a35558f5ca644e981398df7017c1. I don't have too much familiarity with what changed here, but this SO question might explain why you can't see how the antiforgery is being configured: http://stackoverflow.com/questions/30959972/html-antiforgerytoken-still-required\nIf you have more questions you should try in the https://github.com/aspnet/AntiForgery repo\n. Yeah looks like we have an implicit dependency on that IDENTITY behavior due to us picking int's for these.  Since we never set them and just assume that they get autoincremented\n. SecurityStamps should never be null for a store that supports user security stamp.\n. Typically this usage is updated by the manager, I mean sure you can set it to null directly but things will blow up.\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L421\nWe could consider adding validation in the default user validator for this since this does seem to trip more than a few people up.\n. Not for something like this, the security stamp is critical well for 'security' :)  Its a major error if its null...  similar to having no user id/name etc, its the user validators job to make sure the user is in a good state\n. 4dd38e8ca81a25d55fd94d7efd25b1ff256b65ab. This behavior is currently by design, whenever the security stamp is invalidated, the default email token provider generates tokens with the security stamp embedded for verification.  So Logging out everywhere will invalidates all security tokens associated with the account, including confirmation/forgot password/etc.\nAny concerns with this @blowdart ?\n. You can always implement your own email token provider that does not use the security stamp as part of its validation.\n. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInOptions.cs#L15\n. Basically, if you require users to have confirmed emails before allowing them to log in, that would mitigate the issue somewhat.\n. Typically the token providers are registered by AddDefaultTokenProviders https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityBuilder.cs#L167\nBut you can manually add it instead if you prefer as well as you are doing.\n. Good catch, I'll merge this\n. Merged thanks! bb60afba28d7775e610afafd85cce810c9200374. After discussing with @divega since this is how things were in 1.0.0, we'll make this change as part of 1.2 where we have more time and the ability to update the initial migration included in the templates at the same time.\nI'll make this change as soon as the 1.2 branch is open as its an easy fix\n. 57a25d080d1d0337b3b2dd8a2906f74a6e94370c. It looks like you are probably capturing the UserManager in your middleware which results in that capturing the first request's db context which is why you are seeing old data.  For this to work, you will need to service locate (context.RequestServices.GetService<UserManager<TUser>>()) try that to see if that helps\n. We fixed a different bug where we were one missing generic with the missing TRoleClaim on the UserStores.  This one is a bit different and not as bad, since we didn't have a generic for TUserToken on IdentityUser because until this change we didn't have a navigation property which required it...  So I guess as things stands its not critical to fix now.  So I guess we can wait til 1.2 for that reason, altho we will need to take a small breaking change when we add the additional generic argument\n. Lets see what adding a new() constraint enables\n. See if we can make something like AddEntityFrameworkStores<TContext>() and just reflect off of TUser/TRole to infer everything which is already on the builder.\n. Updated this PR to contain the changes that add the new() constraints, and eliminates the need for any explicit calls to AddUser/RoleStore, AddEntityFrameworkStores<TContext> should \"do the right thing\" now when deriving from our default pocos.. @divega appveyor CI appears to detect breaking changes now as part of the runs, this obviously makes some, what's the process(if any) do we need to follow for exemptions/intentional breaks?. Cool, we are ok adding exceptions for these breaking changes right?. Also removed a few of the overloads of the store classes that took different amounts of generics, i.e.\npublic class UserStore<TUser, TRole, TContext, TKey> : UserStore<TUser, TRole, TContext, TKey, IdentityUserClaim<TKey>, IdentityUserRole<TKey>, IdentityUserLogin<TKey>, IdentityUserToken<TKey>>\ngot replaced with one that takes IdentityRoleClaim as well.\nAnd the overload for AddEntityFramework that specified TKey was removed since we now can infer that anyways.. 57a25d080d1d0337b3b2dd8a2906f74a6e94370c. Note we usually take care of modifying the security stamp, but this guards against some edge cases where they mucked with the entity directly, or end up with a null security stamp via other means outside of our APIs\n. Yes, basically its a developer error to end up with a user with a security stamp missing, you won't be able to  save a user with no security stamp anymore.\n. Ah yes, your point about this being a pretty useless message to the user is valid.  I guess this behavior also shouldn't be optional based on the user validator, this check should be explicit in the user manager and throw an exception instead.\nIts not really safe to automatically generate a new security stamp, that would just result in really hard to repro cases of users that are suddenly signed out.\n. @divega @blowdart do you guys agree that a missing security stamp on a user when the feature is enabled should result in a runtime exception instead of a 'recoverable' identity error.\n. Updated moving null stamp check to unoverridable user manager code.  @divega look reasonable?\n. Sure that's valid defense in depth, but its very hard to call that today using the identity APIs as its only called in the UpdateSecurityStamp internal method which never passes in null, but it doesn't hurt to add\n. 4dd38e8ca81a25d55fd94d7efd25b1ff256b65ab. @blowdart yay/nay this change.... bf71121a7e6444027849a965040cca394248e856. Replaced by https://github.com/aspnet/Identity/pull/1348, I rolled the changes for your issue into a larger PR for exposing internals. I'm not a huge fan of making UpdatePasswordHash protected, as its not really currently designed as a reusable helper with its inputs, I'd rather just add a public SetPasswordAsync method which effectively does the same thing but in a cleaner way.  \nSince AddPassword/RemovePassword exist already, its not like we are exposing anything new...\nThoughts @blowdart @divega . Fixed via https://github.com/aspnet/Identity/pull/1348/files#diff-e4eb25d41ae824584d1c4c8a9b91a7e4R2321\nUpdatePasswordHash protected. Its only populated if you call SetAuthenticationToken, its used if you want to carry over any tokens like an OAuth access/refresh token https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L2045\n. We could just catch all exceptions and rethrow with our message and the original exception as an inner exception to be safe. \n. I'll try to fix #876 in this PR as well\n. Updated with the error message tweaks, also added support for infering the TKey from any DbContext that dervies from IdentityDbContext.  This makes the second overload unnecessary but we can keep it for breaking changes, and also supporting custom DbContext's that don't derive from our DbContext (which isn't a requirement today)\n. 13ae7b21f3459e97cd5853b6e6ccb229dac1bafe\n. Dupe of https://github.com/aspnet/Security/issues/1044. Would something like just making the CancellationToken property public and settable be sufficient for your @gravity00?  It would default to RequestAborted in general (if available), but it would use whatever the property was set to in general.. Looks like its missing a use identity. \n\nOn Nov 23, 2016, at 1:53 PM, Diego Vega notifications@github.com wrote:\n@halter73 @HaoK any of you can help with the exception:\nInvalidOperationException: No authentication handler is configured to handle the scheme: Identity.External\nMicrosoft.AspNetCore.Http.Authentication.Internal.DefaultAuthenticationManager+d__14.MoveNext()\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You should use the identity APIs to create the role, roleManager.CreateAsync(). :boom: no worky, localdb is the issue still, would need to run an external sql server. Generally introduce some kind of virtual per entity query. 2d157783465505bd0d36480ebe2e595543faff34. This will actually be fixed as part of https://github.com/aspnet/Identity/pull/1043 we did'nt have a public API validation test turned on for the EF core package which is why there were a few missing virtuals. 5e4e9ccdf164b622872c397c27b75d2bc8a329da. Fixes https://github.com/aspnet/Identity/issues/696. Updated moving the test entities back to shared.  I think as part of this PR its time to spend a bit of time on engineering debt, I'll revisit the test setup and make a pass to make it more DI friendly since it hasn't really been updated since v2, if we are going to make it public, it should get some more love.... Actually looks like I already did the test cleanup I was thinking about (but forgot)...\n\nWhat should we name the base class?  I renamed it from UserManagerTestBase => IdentityApiTestBase since it was testing more than user manager functionality (also role manager), its basically testing the entire surface area.. I think the naming should probably line up with the package, so maybe IdentitySpecificationTestBase?. 5e4e9ccdf164b622872c397c27b75d2bc8a329da. f62ae89d7834649ad4a4dd7d4c7e592a16fade33. This appears to be a dupe of https://github.com/aspnet/Security/issues/991. d4d105d5b529c8e1701010cb49bc115f0aa23ed0. merged thanks! d4d105d5b529c8e1701010cb49bc115f0aa23ed0. Yep good catch the templates already made this change I will merge. Merged thanks! 9e59e79a94d995dcc2edbcdfab43889c26a7156e. Phone numbers are not guaranteed to be unique today, they are not keys. Thanks!. 7fbc36c56684769d3535cf1dfd1cddf88fb26343. b64a32f089f06c8c403f8bb9ee085a580c9555e2. No, this would let you reuse login provider + provider id's for different users, that combination needs to be unique.. UserManagers need to be scoped as the stores depend on DbContext's which need to be scoped as well.  Capturing a user manager for reuse inside of startup is not a good idea.. What are you trying to do exactly?. The key type is only a concern of the stores store, the Id's are always strings at the identity manager level. since all IUserStores implement string GetUserIdAsync(TKey id)\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IUserStore.cs#L22. What does the initialization of _userManager look like in your controller?. Does your AuthRepository have a lifetime that spans multiple requests?  That's most likely the cause.. That would only affect things if someone was insane enough to store the password within the cookie.... The default EF user store caches entities, so you can't reuse them across requests.  Basically you cannot setup a repository to be reused across requests with that store.  Its almost certainly your AuthRepository having a singleton lifetime.. Ideally you inject the service in your controller, if you can't do that just get the service from HttpContext.RequestServices instead of caching it in an field,\ncontext.RequestServices.GetRequiredService<SignInManager<User>>();. Yeah this was addressed in 1.1 hopefully, (not specifically the GetXyzStore methods as those are just helpers for casts/throwing, but some others were made protected virtual).  Feel free to reopen this if there's anything else that you need access to.. This actually is already what services.Configure<IdentityOptions>(IConfiguration) does (its sugar for bind).  The error in your first attempt @PaulRReynolds was that you needed to get to the right section, Configuration.GetSection(\"IdentityOptions\").  That's really all the SiteSettings poco is doing here. Its to enable extensibility for password hashers that want to hash based on data in TUser itself, like a salt. Use FindByEmail to get the user and use the username to login.. The ordering is intentional, we want the NotSupportedException (validation that the GetStore methods do) before argument validation.. 7fbc36c56684769d3535cf1dfd1cddf88fb26343. :shipit: @divega says. b64a32f089f06c8c403f8bb9ee085a580c9555e2. In 2.0 AddEntityFrameworkStores was improved to make things easier, the TKey argument was removed and the DbContext is sufficient to 'do the right thing'.  You don't need to actually register the ApplicationXyz services unless you are consuming those services in your own code.  \nBut AddUser/RoleStore is needed at a minimum for this to work.. 2d157783465505bd0d36480ebe2e595543faff34. I believe Q2 2017 is the current forecast, https://github.com/aspnet/Home/wiki/Roadmap\n. 12aa4a3f810648f94c7146e06e1a3c792a7eb1db. This was a point in time sample, the official interop sample will be done somewhere else (most likely docs). Its already gone :). b10c8ec0b8140b6b40026e10c81497140de0cb79. Yeah its up to the custom validator to decide if it wants to chain or not, I don't remember if @blowdart came up with the original list of password options or not, but I'll leave it to him to make the call on whether its a candidate for support by default.\nThere is also a related work item in the backlog to consider tweaking the validators to be a list that are all run, instead of a single one that is replaced, which would make chaining less necessary.  There haven't been any customer requests for this change so it hasn't been high on my priority list to this point.... Think of the poor release notes!!. Good catch btw @danroth27 :). Seems fine, feel free to submit a PR and we'll take a look . In general we have made things async so CreatePrincipalAsync is probably best. looks fine to me, any opposition to adding this @blowdart @divega ?. :shipit: go ahead and merge this in, thanks!. I believe it should just work, @divega any known issues with migrating EF6 dbs to EFCore?. Also see https://github.com/aspnet/Identity/issues/682 for more details:\nSpecifically the flow that should work is:\nRun Enable-Migrations/ensure that an initial migration is created (for your existing 2.2.1 schema)\nInstall AspNet.Identity.CoreCompat and include the compat namespace to rebase the Identity POCO\nRun migrations using EF6 to update schema to V3\nThen Identity 3 should be able to read the new schema. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/RoleManager.cs#L318\nFindByName will normalize the name, so the casing of the role name can be different and it will be normaliezd.. Strange, feel free to reopen if you hit it again and can capture a trace. Add your role validator before you call AddIdentity and that should prevent the default one from being registered.. UpdatePasswordHash is really user.PasswordHash = hash it doesn't commit anything to the database, its just updating the user entity, Create is what actually commits to the database.  \nI'm not sure I understand the issue around changing user's password, the user entity should not exist so updating it should have no effect until its Created. So I guess the scenario you describe might exists if you get an existing user from the database, and pass it into Create.  But you shouldn't do that and is almost certainly an error in the app to call Create this way.\nAnd even so, the default EF UserStore implementation should throw when you try to reinsert an existing user.  It would fail in SaveChanges since it would generate an insert from the Context.Add, see: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L339\n. There's a implicit contract of Unit of Work between the manager and stores.  Changes should not be persisted outside of Update/Create/Delete.  You will likely run into all sorts of issues if this is not true for your store.  That is a fundamental assumption for how the UserManager works.  You will run into this issue in many other places.. It might be easy to fix this method, but the pattern for many methods is to use store methods to manipulate the state of the user, validation is done as a final step before Update is called.  If your store atomically updates the user on each call, there's no way to roll back the changes.\nSee the common Update method, which does validation, updates two normalized fields, then 'saves'.\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L2415\nEarly on we struggled with this issue, as its definitely a hidden assumption/contract that the stores must follow or you run into issues like you are seeing.  Perhaps the documentation should call this out better.\n. Yeah this is the intended design the managers are responsible for calling various store methods which basically map to get/set on properties, eventually they will call one of the methods that are supposed to commit (Update/Create/Delete).\nThe key takeaway is that stores must not persist in any other method as that would likely leave the data in a inconsistent state like you are seeing.  Any store that works with this assumption is supported.. Yeah we probably should call out the UOW pattern in the documentation for custom stores a bit more clearly (cc @Rick-Anderson @blowdart )  Maybe your transaction scope idea will work...  . Yeah we shouldn't call it the UOW pattern since its not exactly that, best to just be explicit and say something to the effect of: \"Stores should only persist changes in the CreateAsync/UpdateAsync/DeleteAsync methods of base Store interface, any other store method should only manipulate the entity without persisting the changes.\". This should really go in the custom store documentation, it's not really important for people who are consuming only the public identity APIs, but its very important custom store implementers to understand.. @blowdart ok?. 39772210aa519666eedbbfb2ad9bf484062b062e. Normalization is an identity concept though today, unless we want to push that concept to Auth?  . Yes so for identity we are case insensitive, but the claim we generate for the role is the actual role name (not normalized).  The implementation in AuthZ uses IsInRole on ClaimsIdentity which is case sensitive.  Identity isn't involved on that side of things, we just generate the claim (via our UserClaimsPrincipalFactory), and we use the normalization service for our APIs, hence the difference in behavior.  RoleManager is case insensitive, but the AuthZ apis don't have any concept of normalization/case insensitivity for the role check. This would be the same issue for any of the other things we normalize, like user name, UserManager.FindByName(\"WeirdCaPS) will be true, while Authorize(\"PolicyCheckingNameEqualsWEIRDCAPS\") will be false just like the roles check.\nIts not that bad though, since they can work around this by not using Roles = and adding a policy that did a case insensitive string equality check on the role claim instead of using the sugar method.. That is by design, identity is not case sensitive with roles name by default, its just like user name, we don't want them to be considered different.. What IS case sensitive is ClaimsIdentity.IsInRole https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authorization/Infrastructure/RolesAuthorizationRequirement.cs#L58. Authorize(Roles = \"foo\") ends up calling that, identity produces a claimsidentity with that claim, its decoupled from the authorization logic by that point. Two different systems. you either need to use the same casing, or instead of using the built in Roles parameter, use a policy that has a requirement that checks the Role claim using a case insensitive comparison\nservices.AddAuthorization(options =>\n{\n    options.AddPolicy(\"ManagerRole\", policy => policy.RequireAssertion(context => String.Equals(\"Manager\", context.User.FindFirst(ClaimTypes.Roles).Value, StringComparision.OrdinalIgnoreCase));\n});. Oh that sounds like a bug yes. Actually I misread what you wrote, the basic idea is that the stores shouldn't have to deal with normalization, the manager will take care of dealing with making sure the names are normalized (or not), but its up to them, this allows the stores to just do simple equality checks.\nFeel free to continue the discussion here, but things appear to be working by design here so I will close this issue. Generally you should never access the stores directly, you should always go through the manager APIs. @Tratcher @ajcvickers These are the initial identity changes needed for Auth 2.0, mostly switching from direct configuration of cookie options instances that live inside of identity options, to configuring them via fixed names.  MVC needs to be updated as well before Identity.Sample can be updated.. 14b4bea964875b605cef5a0fef7ed21ceb51aa6f. The pattern for identity public APIs is basically to manipulate the entity via Store operations, do some validation, and then call UpdateUser.  We won't add a flag, but you can always keep track of whether the user data has been modified in the store yourself.. If you don't support security stamp you should remove the validator:\nidentityOptions.ApplicationCookie.Events.ValidatePrincipal = null. This is also a building block for the adding password expiration support, which will be in its own PR: https://github.com/aspnet/Identity/issues/99. Updated this PR to version the store support, boiled down to:\n- IdentityStoreOptions.Version in Microsoft.Extensions.Identity.Stores can be used by stores to version themselves.\n- The default implementations of the UserStores now have a UserStoreBaseV1 and UserStoreBaseV2 with the V2 extending V1 and additionally implementing the new IUserActitvityStore.\n- AddEntityFrameworkStores[V1|V2]() add the appropriate UserStoreV1/V2\n- Still need a way to access IOptions<IdentityStoreOptions> from a DbContext @ajcvickers (I hardcoded things in the tests for now)\n- This should also enable us to directly support a new IdentityClientApplication table to eliminate the need for a separate Identity.Service.EntityFrameworkCore package if we add it to the 2.0 schema changes, and add a new ClientApplicationManager/IClientApplicationStore to Microsoft.Extensions.Identity.Core @javiercn @danroth27 . @ajcvickers this is the PR with the updated store versioning support. This was done via be8232d3f9c7a312314ab42dfe37047ec3b16665. This was reverted and is waiting for the proper time to bring back. You should be able to follow these steps: https://www.stevejgordon.co.uk/debugging-into-asp-net-core-source. This may work functionally, but since we rely on these fields for our queries, they should be indexed which isn't possible if the column doesn't exist, so just update the database schema to include the columns.. Yep this is a dupe of https://github.com/aspnet/Identity/issues/855 and should already be fixed in 1.1. We are not looking to abstract this for all possible providers of identity, since this is an optional interface, if its too hard to implement this, you don't have to, and you can use your own mechanism to execute queries against your data.. Try AddEntityFrameworkStores<Context, int>. Oh yeah, you still have to specify your own store:\nSee https://github.com/aspnet/Identity/issues/855. We have improved this in 2.0 to fully use reflection to make AddEntityFrameworkStores<Context> 'do the right thing'. See https://github.com/aspnet/Identity/issues/1001 for how things will work in 2.0. That change is in 1.1.1, but you still need to put your own user store type into DI since the AddEntityFrameworkStores method is only using the 4 generic type constructor for UserStore, and you are specifying all of the child entities.. You should be getting the UserManager from RequestServices, not newing them up.. Oh, Identity is not currently designed to support non Asp.NET scenarios. Sure you can new up a ServiceCollection() call AddIdentity and all the other things it needs (you'll need to replicate what hosting does as well to add things like Options/Logging)\nSee https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.Specification.Tests/IdentitySpecificationTestBase.cs#L61 as a starting point. I also believe this has been asked for in the past, and we didn't make the change since as you mention these are just private sugar methods on top of Context.Set. Email is not guaranteed to be unique.  usernames are, so username and user id should be a 1:1. Undefined, you probably shouldn't use FindByEmail if you don't have unique emails.  But the template uses email as the user name to simplify things, which effectively enforces that emails are unique as user names are always required to be unique.. a1b9857d94926b47e9d6acef779458e5658fa8fd. Generic support is still there, but its no longer needed on the core identity apis, its a concern only of your store, the EF UserStore implementations still have TKey.. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs. This looks to be the same exception as https://github.com/aspnet/Identity/issues/882. @natemcmaster did these tests just start failing recently on Win 2008/Win7 or have they always failed?\nThis looks like a potentially related bug that's open currently https://github.com/dotnet/coreclr/issues/6392. Strange, do you know if there was any integrations around that time from coreclr?  In the past similar issues seemed to be a bug in windows. Identity is basically the only place in our code today that uses string.NormalizeString which is why its the canary that keeps dying :). So this is basically String.Normalize doesn't work on net46 on Win2008/Win7. I wonder what crazy stuff they are doing to normalize strings, because it appears to be quite delicate :). Honestly, it almost doesn't seem worth it to be calling this API given how fragile it is.... Basically it appears these failures were caused by switching from .NET Framework 4.5.2 to .NET Framework 4.6, the only tests that are failing from this change are the tests that are calling into string.Normalize, so we think something in there has caused this regression\nat Interop.mincore.NormalizeString(Int32 normForm, String source, Int32 sourceLength, Char[] destination, Int32 destinationLength)\n   at System.StringNormalizationExtensions.Normalize(String strInput, NormalizationForm normalizationForm)\n   at Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.Normalize(String key). @piotrpMSFT can you confirm that the test failures we are seeing on net46 with string.Normalize  are being tracked by https://github.com/dotnet/coreclr/issues/6392?\n. We are just calling string.Normalize().ToUpperInvariant(); is that not supported anymore?\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UpperInvariantLookupNormalizer.cs#L25. From the build log snippet above, it appears to be net46:\n```\n(.NET Core 1.1)\nTest run for C:\\BuildAgent\\work\\2b0c8ce712895332.r\\Identity\\test\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test\\bin\\Release\\netcoreapp1.1\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.dll(.NETCoreApp,Version=v1.1)\nTotal tests: 208. Passed: 208. Failed: 0. Skipped: 0.\nTest Run Successful.\nTest execution time: 8.6992 Seconds\n(.NET Framework 4.6)\nTest run for C:\\BuildAgent\\work\\2b0c8ce712895332.r\\Identity\\test\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test\\bin\\Release\\net46\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.dll(.NETFramework,Version=v4.6) \nStarting test execution, please wait...\nFailed   Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.InMemoryEFUserStoreTest.CanFindRoleWithManager\nError Message:\n System.BadImageFormatException : An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\nStack Trace:\n   at Interop.mincore.NormalizeString(Int32 normForm, String source, Int32 sourceLength, Char[] destination, Int32 destinationLength)\n   at System.StringNormalizationExtensions.Normalize(String strInput, NormalizationForm normalizationForm)\n   at Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.Normalize(String key)\n```. The repro for https://github.com/dotnet/corefx/issues/9650 should still apply:\nConsole.WriteLine(\"Hello World!\".Normalize());. I'll just remove the call to Normalize for now until we are on NetStandard 2.0 to unblock the tests.. Looks like everything was undone now as all the linked issues are closed merged. @mcgiany can you include the relevant code for the audit log?\n```\nvar auditEntry = await _auditLog.StartAsync(new AuditLogAction\n                    {\n                        Action = AuditLogActionType.Login,\n                        Parameters = { model.Username },\n                        UserId = user.Id,\n                        UserName = user.UserName\n                    });\nawait _auditLog.FinishAsync(auditEntry);\n```\nThis doesn't modify the user table in any way does it?  Are you modifying the backofficeuser anywhere or is identity the only API that's doing that?. Merged thanks!. Merged thanks!. Revert 2b343726897b2cece524537d56aea4c80ac265bd and update baseline. @ryanbrandenburg already updated the baselines, so I think we just need to turn EnableApiCheck on again...I'll do that today and hopefully nothing fails :). @ryanbrandenburg @javiercn what do we want to do about the ui package, should we wait until closer to rtm to generate baselines + enable api check for this since its new in 2.1?. So getting one breaking change with constants moving from protected to public...\n public class Microsoft.AspNetCore.Identity.UserManager<T0> : System.IDisposable where T0 : class\n      protected const System.String ChangePhoneNumberTokenPurpose = \"ChangePhoneNumber\"\n      protected const System.String ConfirmEmailTokenPurpose = \"EmailConfirmation\"\n      protected const System.String ResetPasswordTokenPurpose = \"ResetPassword\"\n\nFollowing is the list of exclusions that either need to be added to the list of breaking changes, or the breaking changes themselves need to be reverted:\n  [\n    {\n      \"TypeId\": \"public class Microsoft.AspNetCore.Identity.UserManager : System.IDisposable where T0 : class\",\n      \"MemberId\": \"protected const System.String ChangePhoneNumberTokenPurpose = \\\"ChangePhoneNumber\\\"\",\n      \"Kind\": \"Removal\"\n    },\n    {\n      \"TypeId\": \"public class Microsoft.AspNetCore.Identity.UserManager : System.IDisposable where T0 : class\",\n      \"MemberId\": \"protected const System.String ConfirmEmailTokenPurpose = \\\"EmailConfirmation\\\"\",\n      \"Kind\": \"Removal\"\n    },\n    {\n      \"TypeId\": \"public class Microsoft.AspNetCore.Identity.UserManager : System.IDisposable where T0 : class\",\n      \"MemberId\": \"protected const System.String ResetPasswordTokenPurpose = \\\"ResetPassword\\\"\",\n      \"Kind\": \"Removal\"\n    }\n  ]. They were protected in 2.0, and were made public in 2.1...  \nCurrent: https://github.com/aspnet/Identity/blob/dev/src/Core/UserManager.cs\n2.0: https://github.com/aspnet/Identity/blob/release/2.0/src/Microsoft.Extensions.Identity.Core/UserManager.cs. @Eilon don't we still have to do an update to add the final 2.1 shape?  I mean I guess it doesn't hurt to turn it on with an empty baseline, but that's basically just having it no-op instead of waiting to turning it on when we actually want it to do something?  I'll file a separate issue for tracking the 2.1 final baseline update to UI since we need that regardless. Ok cool, bulk update will be nice, I'll add empty baselines as part of the PR reenabling the checks. Is making a constant public from protected really considered a breaking change?  We increased the visibility here.... Cool, let me just double check on why we did this, I vaguely remember there might have been a customer ask for this, I want to make sure it wasn't accidental before updating the baselines. Ok updating the baselines, we did this as part of https://github.com/aspnet/Identity/issues/1325. c7711c2515c22be25f615eca60ab3348c9ffbd47. You shouldn't be new'ing up a user to delete, you should be calling FindByName and deleting the user you get back, that's probably why you are getting the exception.. Title is misleading, we aren't renaming UseIdentity, we are just having it call UseAuthentication basically instead of obsolete error.  Since existing apps have UseIdentity today and would be broken without UseAuthentication in 2.0, so we are just doing it automatically with an obsolete warning. bc757faebaa5e06a50838fcc6497c3373b1b5fb7. Yep what @Singularity222 said, you can just new it up and pass in the dependencies.. If you add it before AddIdentity then the TryAdd won't add it. Due to Authentication 2.0, cookie options instances no longer can be stored in IdentityOptions, yo ucan configure them as @opalrigby834 mentioned.. Yeah Auth 2.0 has some breaking changes: https://github.com/aspnet/Announcements/issues/232\nFor Identity: GetExternalAuthenticationSchemes => GetExternalAuthenticationSchemesAsync();. There is no more auto challenge with Auth 2.0, see https://github.com/aspnet/Announcements/issues/232\n. Typically the authorize policy for the controller/action will control what schemes are challenged. @ajcvickers seems safe to move this to 2.1, no breaking changes here. @ajcvickers seems safe to move this to 2.1, no breaking changes here. This is the issue we are using to track some refactoring we will do.  We aren't going to be adding an interface, as we like the ability to work with any kind of POCO.  \nThat said, we will probably be moving IdentityUser to some kind of base common Provider package that the EF package will derive from, so you won't be forced to pull in EF just to have access to IdentityUser\nClosing as dupe of : https://github.com/aspnet/Identity/issues/883. This is the issue we are using to track some refactoring we will do.  We aren't going to be adding an interface, as we like the ability to work with any kind of POCO.  \nThat said, we will probably be moving IdentityUser to some kind of base common Provider package that the EF package will derive from, so you won't be forced to pull in EF just to have access to IdentityUser\nClosing as dupe of : https://github.com/aspnet/Identity/issues/883. Will no longer be an issue going forward, was needed before the move to netstandard 2. Will no longer be an issue going forward, was needed before the move to netstandard 2. Yeah user name is assumed to be non null , adding a display name is better. Yeah user name is assumed to be non null , adding a display name is better. @ajcvickers updated PR with what we discussed (keeping the old AspNetCore namespaces).\nThere is still one minor breaking change with the POCOs moving from Microsoft.AspNetCore.Identity.EntityFrameworkCore => Microsoft.AspNetCore.Identity, this isn't as big of a deal since most references are already including both, but there will be a few places in the models that will need to change the using.. e6f3ebf5810c793edc6f3b4ca3438194786b86a2. @PinpointTownes no particular reason, that's a good idea, I can move the builder to Core and switch the stores to depend on only on the extensions, so effectively we can rename it to Microsoft.Extensions.Identity.EntityFrameworkCore, something we can consider post preview2. @PinpointTownes no particular reason, that's a good idea, I can move the builder to Core and switch the stores to depend on only on the extensions, so effectively we can rename it to Microsoft.Extensions.Identity.EntityFrameworkCore, something we can consider post preview2. I'll file an issue so we don't forget. I'll file an issue so we don't forget. Actually, we can't do this, since this would effectively require an email, when today email is only required when this flag is on.. Actually, we can't do this, since this would effectively require an email, when today email is only required when this flag is on.. Null/empty emails are allowed when this flag is off, which is intended right now. Null/empty emails are allowed when this flag is off, which is intended right now. Oh I see, its only the valid email check that you want as opposed to that its non empty and valid. Oh I see, its only the valid email check that you want as opposed to that its non empty and valid. Note to triage: @blowdart @ajcvickers this is probably a breaking change since with this bug fix, existing users with invalid emails that used to be able to function, would start failing to update/save until their emails were made valid.. Note to triage: @blowdart @ajcvickers this is probably a breaking change since with this bug fix, existing users with invalid emails that used to be able to function, would start failing to update/save until their emails were made valid.. Might need a new flag to control this, an alwaysValidateEmail instead, so existing apps wouldn't be broken on upgrade.. Might need a new flag to control this, an alwaysValidateEmail instead, so existing apps wouldn't be broken on upgrade.. Discussed in triage, we decided it wasn't worth doing this, there is always the workaround of plugging in your own custom UserValidator to control the validation entirely. Discussed in triage, we decided it wasn't worth doing this, there is always the workaround of plugging in your own custom UserValidator to control the validation entirely. We no longer have any navigation properties as of 2.0, you are free to add these yourself in your pocos.. We no longer have any navigation properties as of 2.0, you are free to add these yourself in your pocos.. This is meant only to be used with derived classes, AddIdentity already registers the base manager types.  See https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityBuilder.cs#L193 which would be a infinite loop if this was the same type.. This is meant only to be used with derived classes, AddIdentity already registers the base manager types.  See https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityBuilder.cs#L193 which would be a infinite loop if this was the same type.. I was just using the flags as an example, the idea is over time we'd continue to add to this option to keep enabling additional schemas (or we could just use a version instead and increment it along with our major versions instead of trying to do it by feature, maybe that's easier.\nIdentitySchemaVersions enum (v1.0, v2.0, v2.1 etc)\nIdentitySchemaOptions.Version = v2.0, and then we'd just have different OnModelCreatings per version\nDoes that sound reasonable?. I was just using the flags as an example, the idea is over time we'd continue to add to this option to keep enabling additional schemas (or we could just use a version instead and increment it along with our major versions instead of trying to do it by feature, maybe that's easier.\nIdentitySchemaVersions enum (v1.0, v2.0, v2.1 etc)\nIdentitySchemaOptions.Version = v2.0, and then we'd just have different OnModelCreatings per version\nDoes that sound reasonable?. There's still a greater problem here though, this doesn't really work with how the manager expects to interact with stores, as its using whether the stores implement a particular interface or not to determine if methods should throw or not...\n. There's still a greater problem here though, this doesn't really work with how the manager expects to interact with stores, as its using whether the stores implement a particular interface or not to determine if methods should throw or not...\n. I think this is why we eventually gave up on non breaking schema changes before. I think this is why we eventually gave up on non breaking schema changes before. Ok I think I have something that will work\n\nEF specific IdentitySchemaVersion (v1.0/v2.0)\nEF specific IdentitySchemaOptions to set the version so IdentityDbContext's OnModelCreating can do the right thing\nAddEntityFrameworkStores(version = v1.0/v2.0) overload will add the corresponding version of the stores that implement the appropriate interfaces, so we'll have a UserStoreV1, UserStoreV2 : UserStoreV1 and add features in that manner, maybe keeping the unnamed UserStore always as the latest current full implementation.\n\nThoughts?. Ok I think I have something that will work\n\nEF specific IdentitySchemaVersion (v1.0/v2.0)\nEF specific IdentitySchemaOptions to set the version so IdentityDbContext's OnModelCreating can do the right thing\nAddEntityFrameworkStores(version = v1.0/v2.0) overload will add the corresponding version of the stores that implement the appropriate interfaces, so we'll have a UserStoreV1, UserStoreV2 : UserStoreV1 and add features in that manner, maybe keeping the unnamed UserStore always as the latest current full implementation.\n\nThoughts?. @brockallen no all of the things discussed here are Identity.EntityFrameworkCore specific things.  None of these are concerns for core identity. We will need to decide what the existing AddEntityFrameworkStores() that doesn't specify a version does... does that always mean latest?  Or does that always mean 1.0?. @brockallen we've seen a significant amount of friction historically from migrations, so forcing migrations on upgrade is something we've learned to try to avoid (and make it opt in for existing users), but on by default in templates that need the new functionality.. Should we add something like AddEntityFrameworkCoreLatest() to always mean latest then?. Templates wouldn't use this, but I still imagine its useful to be able to consistently ask for the latest always (migrations and all). Well, I can just add it as part of this PR, we'd want to use this overload for most of the tests anyways. be8232d3f9c7a312314ab42dfe37047ec3b16665. be8232d3f9c7a312314ab42dfe37047ec3b16665. You should be able to do this in 2.0 via this PR https://github.com/aspnet/Identity/pull/1188, prior to this , to use the any of the EF Core stores you had to derive from the pocos that lived in the EF Core package.\n. Dupe of https://github.com/aspnet/Identity/issues/883. It'll be in preview 2, the changes haven't been pushed publicly yet, but they will this week. It will be in preview 2 which hasn't been released yet, but they are in the dev branch, so if you wanted to use the nightly builds you could, see https://github.com/aspnet/Home specifically the latest dev build section. Its in a new stores assembly as of 2.0, https://github.com/aspnet/Identity/blob/master/src/Stores/Microsoft.Extensions.Identity.Stores.csproj\nMake sure you have a reference to this package. 34e7a8df279b52d88bd3b78431378c8609debebe. Thanks merged via 707be3dca0e4ea363172c7cd22d22d6bf4b8c50e. @JunTaoLuo so is MVC not done yet, were we supposed to not merge this change yet?. Its no different than roles, today you can mark them as ignored in the model and just don't use the new manager, similar to what I'm sure you are doing with roles :). you can also just stick to IdentityStoreVersion1 which won't have any of the new stuff. I'd like to address the underlying issue more directly which we've struggled with for a while anyways (how do we start adding features + schema in an optional way and let people opt out of specific schema/functionality).  If we solve that, there shouldn't be as much of an issue right?  You won't get any of the conflated stuff unless you ask for it via something like AddEntityFrameworkStoresLatest/AddIdentity<TUser, TRole, TApplication>.  . Yeah so this is a bit similar to IdentityRoles, there's a bunch of people that will never use the RoleManager similarly. So it's still going to be 'additive' in that it doesn't affect UserManager.  There will be a new manager/store which will shield any 'taint' into existing identity APIs.  The only bleed will be in the default EF implementation/schema, which has versioning now, so if you don't want any of the taint, the old APIs won't give you any of it...\nAddIdentity<TUser, TRole>.AddEntityFrameworkStores()\nFile a bug for (1), definitely something we can just do for the Version 2.0 schema. > (BTW, this versioning story is insane... it will be a total PITA for community folks who maintain non-EF Identity stores as they'll have to develop a user/role store per version \ud83d\ude2e)\nThere's no concept of store versioning in core identity, this is an implementation detail for the EF store.  The base IdentityStoreOption lives in Microsoft.Extensions.Identity.Stores which you can think of as the opinionated helpers (that the default EF UserStore derives from and uses).  non-EF identity stores can continue having a single version no?  This madness is only needed if you want to enable the most definitely a big PITA scenario of optional/schemas features...\nThe UserManager continues to behave the same as it does today, it looks for whether the store implements interfaces, so custom stores just need to decide whether they want to implement IUserActivityStore or not, and IClientApplicationStore or not, they can totally just ignore them if they want.  They definitely do not have to do the crazyness I had to do to enable optional schema updates...\nThat said, if they are reusing the Identity.Store.UserStoreBase, they will need to pick a version (or always use latest). > Only if there are no \"breaking changes\" between versions (e.g a table or a property name change, or a property type change). Is this something you can guarantee?\nTables are an implementation detail for the stores themselves no?  Traditionally we only add things via IUserXyzStore interfaces in core.  But long story short for stores that aren't trying to reuse the default EF implementations, nothing has changed.\nThings will be a bit more interesting for EF based stores going forward as I'm going to have to version things in the new Microsoft.Extensions.Identity.Store package. Yeah so depending on anything in Microsoft.Extensions.Identity.Stores will be subject to the many of the versioning issues that the EF default implementation has.  The current existing path still is valid though, which is derive from UserStore which matches staying on the latest train.  Most of this complexity is there so people can stick to a specific version and not be broken...\nThe new pattern most likely will be the following for a new feature\n- In Extensions.Core: New IXyzStore added with new Manager code using the store if its supported.\n- In Extensions.Stores: Updates to the POCOs, almost always additive only, with a new major/minor version in IdentityStoreOptions\n- New AspNet.EF: OnModelCreating/AddEntityFrameworkStoresVX matching new version in IdentityDbContext/UserStore to implement new functionality and add the new versioned stores. Historically the 'database migration' path has been rocky, the intent is so folks can control when they want to migrate, as opposed to requiring migrations which tends to really make the bar for schema changes really high. @danroth27 Sure that's why I created an issue instead of a PR.   I'd also like to continue discussions on what the final name of the \"identity service\" should be, because I don't think there are currently many fans of the current naming...\nIn terms of constraints from previous discussions, it sounds like OIDC, Azure, Tokens, and Server were ruled out from names for various reasons, which is why we ended up with something pretty generic and confusing.  \nIdentity is already a \"service\" today, but I'm guessing the intent was to imply Identity providing authentication as a  service.  So how about Identity.Authentication as the namespace/term we use to describe this.. > This is the only way a 1.x project can move to use these new 2.0 features, right?\nYeah, but as of now, there aren't a lot of new 2.0 features in core they'd get (asking for creation date/last sign in/password change).  We'll likely be adding some behavior around enforcing password expiration policy, but basically we would be forcing everyone to migrate for basically no features. @PinpointTownes I'm not sure how much traction you are going to get on moving the whole 'iceberg'.  But I believe we can at least give it a sensible name :). Moving to preview 2 for visibility. As part of this work, we would also make IdentityRoles optional. Is the 2.0 app using the identity service stuff?  That uses a different cookie and really is quite different than 1.1 as it's not using the identity cookie for login. \n\nOn May 29, 2017, at 7:16 AM, Ponant notifications@github.com wrote:\nBTW, I do not know think this is related but IIS express shows 2 localhost ports for the 2.0 Core app.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Closing as this was a preview 1 issue and we didn't ship identity service in 2.0. @ajcvickers is this still considered cleanup?  Basically moving classes between assemblies, would not have any real customer impact as currently they always get the AspNetCore assembly, we'd just be enabling more stuff working when using the new Microsoft.Extensions.Identity...\n\nBut using a strict interpretation of 'features', this would be enabling some scenarios around that (using Microsoft.Extensions.Identity directly).... Tracking this via https://github.com/aspnet/Identity/issues/1269. We punted the schema changes to 2.1. No, these are all basically test checklist/scenarios, the only schema change we made was setting a additional max string length on a few columns so I'm guessing most of these won't have any impact for 2.1 in the end since we ended up not making any of the more drastic schema changes we were considering. Can't you just modify the existing ApplicationCookie.Events instead of new'ing it up?  Doesn't that solve things? . The benefit isn't that big, so I don't think its worth adding any build stability issues to try and slam it in right now. You mean moving the options for the security/auth handlers to the right namespace?  I think they are in the right repo today :). @ajcvickers ok for me to move the options type to the proper namespace now?  We already moved it to a different assembly in (Extensions), might as well move it to the proper home namespace. eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41. Updated. c55eda677faf6b073baf9b711730638e4b8c82f2. Its an optional thing, I just was showing it to make it obvious that was where you will can opt into/out of things.  \nAddEntityFrameworkStores() would do something by default appropriately.... But its likely there will be ways to mismatch things, like calling AddRoles() and then doing storeOptions.SupportsRoles = false...  We won't be able to block all of those, but it should be easy to validate. Basically misconfiguring storeOptions will cause manager apis to throw if they end up calling into store functionality that they disable. Also related to https://github.com/aspnet/Identity/issues/581. After chatting with @ajcvickers today we agreed that this is something important to do in 2.0, some nice sideffects that fell out of the refactoring/exploring this. we can nuke all of the entities on TUser/TRole except for TKey...  That cleans things up quite a bit.. We had a bunch of generics that were on the base POCOs that were only needed for the navigation properties, see: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Stores/IdentityUser.cs#L54\nThere will only be TKey now.  . To clarify the plan, we are leaving the existing AddIdentity alone that lives in Microsoft.AspNet.Identity, that will behave the same and add the same old user + roles scheme.\nSince we are adding a new public AddIdentityCore API in Microsoft.Extensions.Identity.Core anyways, we might as well expose it the 'right way', meaning Users are the only required entity, with Roles being an add on.\n. StoreOptions are gone, so there's none of that complexity.  There will be a new UserStore base class that doesn't implement any of the Role interfaces, that will be what is used when roles isn't enabled.  Otherwise, the usual roles + user store will be used.\nWe'll actually have proper base classes for 2.0 that do not have a TRole at all (IdentityDbContext/UserStore). The POCOs used to live inside of EF Core, and they had navigation properties.  I removed them as part of the move to Extensions for preview 2.  This is finishing the rest of the move as there's no way to actually use Extensions.Identity today without AspNet.Identity.. @divega @ajcvickers Well, there's a tiny complication to removing the generics off IdentityUser...  turns out we were using them to use reflection to automagically register the correct UserStore so they didn't have to manually add their own UserStore<MyUser, MyRole, MyUserClaims, MyUserLogins...>.\nWe added the smarts to infer generics in 1.1.  We do have another generic type with the same information, the IdentityDbContext, but there's no hard requirement that they use our DbContext, as any DbContext works today.  But I think this would cover the majority of use cases, so we'd be only impacting customers relying on the custom poco AddEntityFrameworkStores magic who were using their own DbContext that didn't derive from IdentityDbContext....\nThoughts?\n. f555a26b4a554f73eea70b4b34fca823fab9a643. You need the navigation property to be pointing at TUserRole, which is what it was in 1.x:\nIn 1.x: IdentityDbContext.OnModelCreating:\n```\n            builder.Entity(b =>\n            {\n                b.HasMany(u => u.Roles).WithOne().HasForeignKey(ur => ur.UserId).IsRequired();\n            });\n       // The IdentityUser property:\n       public virtual ICollection<TUserRole> Roles { get; } = new List<TUserRole>();\n\n```\nIn 2.x:\n```\n            builder.Entity(b =>\n            {\n                b.HasMany().WithOne().HasForeignKey(ur => ur.UserId).IsRequired();\n            });\n       // Add a TUser property:\n       public virtual ICollection<TUserRole> Roles { get; } = new List<TUserRole>();\n\n``. Where does it throw?. The two scenarios are different, one is clearly a developer error, passing in a null user, the API that takes a username, returns failed if you pass in a user name that doesn't exist.. So its intentional in general you should never pass a null user into any identity APIs.. The cookie is being refreshed by the security stamp validator, I don't think static files would interfere with that, @Tratcher does this issue sound familiar to you at all?. Is your static content cached on the client maybe? . Feel free to submit a PR, I think protected virtual is more appropriate as this still isn't something Controllers should call directly for example.. 98263cca298fb234344c436dd2ee866ab9567a22. The net result of this PR is we have enough in Microsoft.Extensions.Identity.Core to be able to addservices.AddIdentityCore.AddRoles()` which would get you everything except SignInManager + AspNet cancellation token hookup (which I don't think anyone will even notice). Will replace with a unifed PR that does this + adds roles support and cleans everything up. Basically we should only add this complexity when we have a large schema update/optional features that are compelling enough to justify all of this stuff.... After talking to @ajcvickers plan is to back these out for now, we can add this back along with our next schema update, most likely in 2.1\nWe'll be focusing on making Roles optional at the new lower Microsoft.Extensions.Identity layer instead. a9192d99dc79e64c6ebc8bc434917af8bea02573. Thanks!. f555a26b4a554f73eea70b4b34fca823fab9a643. Fixes https://github.com/aspnet/Identity/issues/1261. eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41. @ajcvickers @divega any ideas?. Thanks. Eh, on the unlikely chance you get a dupe, that just means when you redeem it, both get removed at once: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Stores/UserStoreBase.cs#L1049\nBut sure, we can ensure their unique. @per3ian please also include your ApplicationUser and xDbContext classes. Those still fallback to Challenge/SignIn which are set. Nothing has really changed conceptually, before we used DefaultAuthenticateScheme as the universal fallback scheme, now we have an explicit one.  Without the double fallback you'd have really weird behavior where challenge/forbid and sign in/out would be out of sync if they only set challenge/sign in, its still possible if they set forbid/sign out without setting sign in/challenge, but that's almost certainly going to be something they notice in their app.. The navigation properties were removed from IdentityUser since we weren't populating them anyways, you will need to add them back in your application specific user class.. I filed an announcement for this breaking change here: https://github.com/aspnet/Announcements/issues/263. This was fixed in 1.1, dupe of https://github.com/aspnet/Identity/issues/855. You are looking for the ResetPassword method I believe:\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L862. Ugh, taking a look now, FYI @Tratcher. @fujiy are you sure the post configure isn't running?  identity is just calling AddCookie: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityServiceCollectionExtensions.cs#L72\nwhich adds the post configure for all cookies: https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieExtensions.cs#L28\nWhat versions are you using, preview 2?  I'll try this on the rtm bits today to see if I can repro. So are you trying to share cookies with 1.1.2 and 4.5 or 2.0 and 4.5? or 1.1.2 and 2.0?\n. Can you include both startups for both apps labeling which is which?. What version of the packages are you using for the Core app, 1.1.2?. Can you try https://github.com/blowdart/idunno.CookieSharing I believe that one might be more up to date.  cc @blowdart . We'll also need to update it to work for 2.0 as well.. So there's no issue here that we need to address right?  This is just how things worked in 1.x. Sure. We'll just make them public for now, we can consider extracting the constants into a shared class in the future, there is an IdentityConstants but its in the wrong layer for these purposes to go.. The main reason was we wanted the ability to add new API to the managers without causing breaking changes.  You can still mock the managers, see: https://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs#L197\nWhat is it you are trying to do that an interface would let you do that you can't do today in your tests?  Effectively the manager types are the interface, you can register your own manager type with DI which will take over the implementation.. We still unit test them and fake them in the tests whether or not they are interfaces or classes, you can still use something like Moq to fake and inject them, see:\nhttps://github.com/aspnet/Identity/blob/dev/test/Shared/MockHelpers.cs#L19. Identity uses the RequestAborted cancellationToken from HttpContext by default, you can replace it with a different one by setting the property in 2.0 with a custom manager https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L52. Which methods are missing the Async suffix?. Closing due to inactivity, feel free to reopen with specific instances. What's not working here exactly?  Are you using identity or only a single cookies?. object.equals shouldn't throw, what line are you seeing throw?. Oh its due to id being null and != Guid.Empty() so it throws on id.ToString(). So we are normalizing the default(Guid) to null, which is the proper behavior in this method, can you attach the callstack for your exception @penihel ?. Thanks!. Should tackle along with https://github.com/aspnet/Identity/issues/836 . @blowdart how do we want this encryption to work?  I.e. is this something that's done at the store level, so the public APIs don't really change, we'd just add a new service or two with some new options and our default EF implementation would use some kind of new IIdentityDataProtectionService that would basically a string Protect/Unprotect that the store would use automatically on most of the user fields resulting in encrypted strings in the db: i.e. PasswordHash/Email/tokens/login providers/keys/claims\nOr would we want this at the manager layer, where the TUser poco is encrypted, and you have to call manager APIs to read things off the user.  This would make it hard to use the entity by itself which might be a fatal drawback...  i.e. user.Email would be gibberish. So you are thinking more like IIdentityProtector<TEntity> with Protect()/Unprotect() and it manipulates the POCO?. This would be something the managers would do not the stores, we want the stores to be dumb simple and just responsible for serialization of the data.. Not sure we can copy without doing bad things to EF...  @divega @ajcvickers thoughts?. That sounds pretty terrible...Let me noodle around a bit. Yup, not really sure how we can make this work, I guess clone before save is cleanest there. Download/deletion added via: f1ed482c26df6e242b1e4eca0948dc77ba5b8fa9. Encryption extensbility added via https://github.com/aspnet/Identity/pull/1562. Currently the GDPR work only enabled protections for the user table by default, we need to add additional logic to also protect the contents of the user token table... and should also review potentially any other tables to protect. So @blowdart @ajcvickers the question is basically should we be protecting things like the user tokens table automatically when ProtectData is on as well.  My guess is yes since things like your recovery codes and access tokens and what not are all potentially stored here... in the clear...\nAnd if so, is this something we need to address for preview2, or is this ok to fix in rc1?  I think either way this needs to be fixed before shipping the feature.... I guess the reality is this might not be a simple fix if we want to do this, so assuming this is something we want to do, it likely should be done in rc1 as I doubt this is something we want to ram in tomorrow :). So the full list of tables we should consider if we need to protect additional data:\nRoles (role id, role name)\nUserRoles (userid, role id)\nUserClaims (userid, claim name, claim type)\nRoleClaims (role id, claim name, claim type)\nUserTokens (userid, token name, token value)\nUserLogin (userid, providerName, providerKey)\n@blowdart any of these stand out that should be protected, maybe user login since it has their provider key which with the provider would uniquely identify a user.  Do we need to protect their claims?. Ignoring the attribute for now, the top level switch is identityOptions.ProtectUserData = true, do we want any columns in these additional tables to be protected. We will protect:\n- all UserTokens\n- the providerKey for UserLogins\nAnd include these in the default DownloadPersonalData page. Done via https://github.com/aspnet/Identity/pull/1745 we can't actually protect the provider keys for logins at this time, I'll file a new issue to revisit that in 2.2. https://github.com/aspnet/Identity/issues/1753 for tracking protecting the provider keys . This repo is only for Identity on AspNetCore, you appear to be using the older versions of aspnet/identity in your sample, feel free to file this issue over at https://aspnetidentity.codeplex.com/workitem/list/basic\nBut in general yes, async can cause issues with HttpContext.Current if it runs on a different thread.\nhttps://stackoverflow.com/questions/19111218/httpcontext-current-null-inside-async-task\n. Resolve IOptions<IdentityOptions> and configure DefaultLockoutTimeSpan however you like dynamically. Yeah today there's only really support for a single identity options and related managers that consume them (you could have multiple managers with different entities, but they would all have to share the same options today).  We could address this by switching to named options if this is something frequently asked for.\nWith the token providers, you can always drop down and configure them on the manager directly via: \nuserManager.RegisterTokenProvider(\"whatever\", yourTokenProviderInstance);. That's weird it looks like your error page is requiring you to be logged in?  Do you hvae an [Authorize] on your error page?  /Home/Error?. See https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x. If you have any further questions after reading the doc, please use this issue: https://github.com/aspnet/Identity/issues/1364. It looks like there's a bug with AddEntityFrameworkStores that prevents using the generic base IdentityRole directly, @pealmeid 's workaround of using a dervied TRole should work\n@nixxholas what's your startup look like? particularly the AddIdentity section?. @madmunsterdaddy you need to do the same thing, introduce a dervied class MyRole: IdentityRole<Guid> to workaround the bug preventing the base generic from being used directly.. Just call AddEntityFrameworkStores<TContext> it should be smart enough to infer what's needed now. @scottaddie can we update the official identity migration doc to include the additional snippet that is needed for people who were relying on the navigation properties?\n```// where Role and User are the actual types\nbuilder.Entity()\n    .HasMany(e => e.Claims)\n    .WithOne()\n    .HasForeignKey(e => e.RoleId)\n    .IsRequired()\n    .OnDelete(DeleteBehavior.Cascade);\nbuilder.Entity()\n    .HasMany(e => e.Users)\n    .WithOne()\n    .HasForeignKey(e => e.RoleId)\n    .IsRequired()\n    .OnDelete(DeleteBehavior.Cascade);\nbuilder.Entity()\n    .HasMany(e => e.Claims)\n    .WithOne()\n    .HasForeignKey(e => e.UserId)\n    .IsRequired()\n    .OnDelete(DeleteBehavior.Cascade);\nbuilder.Entity()\n    .HasMany(e => e.Logins)\n    .WithOne()\n    .HasForeignKey(e => e.UserId)\n    .IsRequired()\n    .OnDelete(DeleteBehavior.Cascade);\nbuilder.Entity()\n    .HasMany(e => e.Roles)\n    .WithOne()\n    .HasForeignKey(e => e.UserId)\n    .IsRequired()\n    .OnDelete(DeleteBehavior.Cascade);\n```. Its in Microsoft.AspnetCore.Identity, see https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityBuilderExtensions.cs#L21. Yes the navigation properties were removed from the base pocos, you will need to add them back to your TUser class if you were using. You should be able to follow the steps here: https://github.com/aspnet/EntityFrameworkCore/issues/9503. @QuantumHive have you tried the steps in https://github.com/aspnet/EntityFrameworkCore/issues/9503 to add back the navigation properties and configure the model as described in the workaround there?. From the errors you are getting it looks like your navigation properties might not be typed properly, they should be typed like this\npublic virtual ICollection<IdentityUserRole<int>> Roles { get; } = new List<IdentityUserRole<int>>();\npublic virtual ICollection<IdentityUserClaim<int>> Claims { get; } = new List<IdentityUserClaim<int>>();\npublic virtual ICollection<IdentityUserLogin<int>> Logins { get; } = new List<IdentityUserLogin<int>>();\nFor Users/Roles entity configuration, e should be IdentityUserRole<int>, not IdentityRole<int> which is why you are getting errors about UserId.\n. Take a look at this test, I'm guessing you are trying something basically like this: https://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test/UserStoreGuidKeyTest.cs#L60\n. What is your DbContext deriving from?  IdentityDbContext<TUser, TRole, Guid>?. Are you sure there aren't any old migrations or anything like that laying around?. @madmunsterdaddy Is your db context specifying the correct generic arguments?  Looks like that error would be a mismatch between IdentityUserToken and IdentityUserToken<Guid>  Can you include what your dbcontext looks like?. Try extending from IdentityDbContext<User, Role, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>,IdentityUserLogin<Guid>,IdentityRoleClaim<Guid>,IdentityUserToken<Guid> and  updating your OnModelCreating to the same types as well. Try getting rid of your own db context entirely and just use IdentityDbContext<User, Role, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>,IdentityUserLogin<Guid>,IdentityRoleClaim<Guid>,IdentityUserToken<Guid> to see if that makes things work.  . I just mean to narrow down what could be causing the issue, you can try directly using the base identity dbcontext instead of wherever you are using REV23DbContext.  You should be able to use it as your TContext in AddEntityFrameworkStores<>.  Alternatively it should be more or less equivalent to just define your context as an empty (ctor only) subclass to see if that makes things work as well:\npublic class REV23DbContext : IdentityDbContext<User, Role, Guid, IdentityUserClaim<Guid>, IdentityUserRole<Guid>,IdentityUserLogin<Guid>,IdentityRoleClaim<Guid>,IdentityUserToken<Guid>\nAlso just to double check, your User/Role are deriving from IdentityUser<Guid> and IdentityRole<Guid> right?. Well there should be a FK relationship between the User and UserTokens, just like the other child entities, i.e. UserClaims/UserRoles. The fixes are only at the higher level sugar apis, you should be able to directly add the correct UserStore type:\nJust don't call AddEntityFrameworkStores and instead directly add the store (replacing the TEntities with the actual types you have in your model:\nservices.AddScoped<IUserStore<TUser>, UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim>>()\nAnd similarly for the RoleStore if you are using role manager.. If you are using windows auth, you can probably just replace the call to SignInManager with something like User.Identity.IsAuthenticated. Thanks!. Take a look at https://github.com/aspnet/Identity/issues/859, that's basically the same issue. The fix should be low risk as it will just involve and additional check to allow the base generic type to be  used instead of only derived types. \n\nOn Aug 21, 2017, at 3:43 PM, Arthur Vickers notifications@github.com wrote:\n@HaoK Please add risk assessment either here on directly in the OneNote.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Http.Authentication and all its classes have been depricated in favor of https://github.com/aspnet/HttpAbstractions/tree/dev/src/Microsoft.AspNetCore.Authentication.Abstractions\n\nYou would just call context.AuthenticateAsync(scheme) in 2.0, AuthenticateInfo is now AuthenticateResult. Are you trying to authenticate on the same request?  You need to authenticate on the following request to get anything back. Yeah, try AddIdentityCore() https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/IdentityServiceCollectionExtensions.cs#L22\n. Yup its a future building block at this point, but it is the more granular way to add identity that you are looking for. If you are using windows auth, you can probably just replace the call to SignInManager with something like User.Identity.IsAuthenticated instead of using this method if its causing exceptions in this case...  This method is only really supposed to be used when you are using cookie authentication, not windows auth.... We can certainly consider this for 2.1, but the benefits of a fix like this are fairly limited, you could just wrap your calls to SignInManager.IsSignedIn(ClaimsPrincipal) in your app with this try/catch today.  That's a pretty simple workaround if this is blocking you.. Or you can just check if User.Identity.IsAuthenticated first, and only call SignInManager.IsSignedIn after that is false, since that would mean its safe to call right?. SignInManager.IsSignedIn is mostly a sugar method meant to make the normal case easier.  Given that you have a more complex auth setup with Windows Auth involved, I'd recommend just writing custom method to do this functionality for you.\nAs you've seen the method is just a more compact way of writing:\nreturn principal?.Identities != null &&\n                 principal.Identities.Any(i => i.AuthenticationType == IdentityConstants.ApplicationScheme);\nThis method had more of a use when the ApplicationScheme was configurable, but now that's been removed in 2.0, its basically just a static extension method now...  . Yeah there's a bug in AddRoles, it shouldn't be calling AddRoleStore at all...  . Yeah the tests typically always call AddRoleStore after anyways, since you can't use identity without a store registered, so it was masked until your issue. Fixed via https://github.com/aspnet/Identity/pull/1406. Ah right, I'll rename the others today. Fixed the rest bc75b1a0e73d782fbe221fb6f12855d1a337a5b1. @ajcvickers . Yes please, git clean -xdff hates those long file names.... I'd suggest:\nAspNetCoreCompat\nCore.Diagonstics.XIdentity\nCore.Identity.Xyz\nExtensions.Identity.Xyz\n@javiercn is in the process of moving some of these around/collapsing some but I think that covers all of the general buckets. Ideally if we end up with everything having Identity in the name here, we could drop that off too.\nAspNet.CoreCompat\nCore\nCore.Diagnostics\nCore.EntityFramework\nCore.Service.Xyz\nCore.SpecificationTests\nExtensions.Core\nExtensions.Stores. I already renamed folders in 2.0 and moved files around, so doing it again is unlikely to make things that much worse. The file names are still the same, so they can always navigate to the branch/tag and search for the file, its not that unreasonable. @natemcmaster is this still an issue we want to fix? I can submit a PR with some shortened names if we still want to do this...  I personally hate seeing this warning too so I'm all for it. here's what I'm thinking, I don't think you lose any meaning by just going with these folders:\nAspNetCoreCompat (Microsoft.AspNet.Identity.AspNetCoreCompat)\nCore (Microsoft.Extensions.Identity.Core)\nStores (Microsoft.Extensions.Identity.Stores)\nIdentity (Microsoft.AspNetCore.Identity)\nService.* ((Microsoft.AspNetCore.Identity.Service.*). 85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c. Yeah this looks like an unintended regression caused in the refactoring:\n1.1.2 code: https://github.com/aspnet/Identity/blob/rel/1.1.2/src/Microsoft.AspNetCore.Identity/UserManager.cs#L1569\n2.0 code that no longer uses the Rfc service which generates the nice ints:\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L1582\nThe current tests weren't checking the format of the codes, only that they are able to be consumed\n@ajcvickers @blowdart this is something we should consider for 2.0.1 as this pretty much will break all existing SMS apps. Workarounds aren't great since https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/Rfc6238AuthenticationService.cs is internal, the best option would probably be for these SMS apps to register a derived UserManager and copy the 1.1.2 implementation and Rfc6238AuthenticationService.cs to override VerifyChangePhoneNumberTokenAsync/GenerateChangePhoneNumberTokenAsync to do what they did in 1.1.2. There was no regression in Rfc6238, its the user manager methods no longer use that service, its these tests that are missing one that validates that the token is an integer:\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.Specification.Tests/UserManagerSpecificationTests.cs#L1517\nBasically there is no test: \"VerifyGenerateChangePhoneNumberTokenIsInteger\"\n. Justification: The Generate/ValidateChangePhoneNumberToken methods generated integer codes in 1.x as their purpose is to be used for SMS codes.  These were unintentionally changed to generate long dataprotection strings in 2.0, which are totally not appropriate for SMS two factor codes.  Any apps that were using these APIs for SMS code generation would be affected.\nRisk: Low, this fix will just returns the code for these two methods back to what it was in 1.x. Yeah this was checked into dev, so yeah fixed in 2.1, and I'll file a port issue for 2.0.1. Can you check the security stamp column for your users?  30 minutes is the default timespan for the cookie to be rechecked against the security stamp for the user, i.e. if the user changes his password, that will expire all login cookies...\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SecurityStampValidatorOptions.cs#L20\nIf there is something wrong with the security stamp storage for your users, this would cause what you are seeing. You can try nulling out the security stamp validator logic to see if that fixes the issue to start:\nservices.ConfigureApplicationCookie(o => o.Events = new CookieAuthenticationEvents())\n. What does the cookie header actually look like?. @blowdart ok with this change?. Pushed https://github.com/aspnet/Identity/commit/b7d5a461d4234f0522a01e5de3c14b7a05dc019a to feature/2.0.1. Feature 2.0.1 created, with fix merged 73afa0af5e27b09aeaea684731bbe7a338e21903. @bchavez can you update the tests that are failing due to the log message changes as well?  The typos are likely in the tests as well. Thanks @bchavez !. Is this something we can do in 2.1, as its kinda a breaking change...\ncc @blowdart @ajcvickers @davidfowl @Tratcher . Well it makes Identity play nicer with the new defaults we added, of course the tradeoff is that people don't really know the side effects of calling AddIdentity, so changing them in 2.1 might result in different effective defaults for apps which will cause another wave of migration issues.\nFor example:\nToday:\nservices.AddAuthentication(o => o.DefaultAuthenticateScheme = \"Bearer\");\n   services.AddIdentity() // DefaultAuthenticateScheme = \"Identity\", so context.User = identity cookie\nAfter this change:\nservices.AddAuthentication(o => o.DefaultAuthenticateScheme = \"Bearer\");\n   services.AddIdentity() // DefaultScheme = \"Identity\", but explicit \"Bearer\" wins so context.User = Bearer\nSo it might have been the correct thing to do...but...2.1 migration pain if we change it now. I think we might be stuck with AddIdentity for 2.x, and we should maybe switch to the AddIdentityCore<TUser> method which decouples authentication from identity. Basically once we do https://github.com/aspnet/Identity/issues/1409 we switch templates over to using that in 2.1, and just deprecate AddIdentity in 3.0 but leave it alone in 2.x. Closing in favor of https://github.com/aspnet/Identity/issues/1409 we'll add a new way to add identity without any authentication settings, leaving the existing settings alone to avoid any breaking changes. reviewed :shipit: . Yup, the new refactored surface area won't set things up this way, but we had to preserve existing behavior for AddIdentity<TUser, TRole>. In 2.1, you should be able to switch to something like:\nservices.AddIdentityCore<TUser>()\n   .AddRoles<TRole>()\n   .AddEntityFrameworkStores<TContext>()\n   .AddCookieAuthentication() // Brings in sign in manger cookies, and you'd be able to control the default schemes here somehow. Yup, we'll use this bug to track that work. It's already possible to specify schemes explicitly everywhere the only thing the defaults are mandatory for is the UseAuthentication() middleware to determine what context.User gets set to. \nWe started with almost no defaults and very quickly we ended up with defaults for everything again. So I don't think it's realistic to expect people to set schemes everywhere, especially when they only have one. \nI'll have a PR prototype shortly introducing something we've been discussing internally with authentication policies that map to a set of schemes which may help with this (or it will just add yet another set of more complex overloads :)\n. There is indeed two slightly different scenarios that you described but the default sign in behavior is still consistent. \nThe default sign in is used when a scheme is not specified. That applies to both remote authentication when they choose not to specify the sign in scheme in the RemoteAuthOptions and also when you explicitly call sign in and don't specify the scheme. \nIn the past pre core and in 1.x this was surfaced via shared options and only used for the remote sign in scheme. So the new default is a super set of what the old did but you can continue to use it as only the external default if you always specify the scheme everywhere else. \n. > But all the external middlewares pass null by default and don't require you to have explicitly configure them. \n\nCorrect the remote auth schemes job is to just call sign in with the sign in scheme.  It's up to the app/library to configure things in a sensible way. \nHistorically our identity based templates rely on AddIdentity wiring things up, with the external cookie being the default sign in scheme (only to prevent having to set sign in scheme on every remote auth explicitly). SignInManager uses explicit schemes with the correct identity cookie everywhere so the default behavior doesn't really affect identity. \nThe defaults are mainly there to make things simple when there's only one cookie/jwtbearer. Once you have multiple cookies and more complex auth setups the app should be explicit and specify the schemes. \nWe started with something fairly close to what you want with explicit schemes everywhere. But we got several sources of feedback to make it easier to configure, especially for apps where a specifying one or two  defaults is actually enough. . > So it sounds like this motivated the DefaultSigninScheme, which sounds more like my 2nd description of the intended use case. Would that be accurate?\n\n\u2014\nNot really identity is typically the only one who uses this. The two common ones that were being set are DefaultAuthenticateScheme and DefaultChallengeScheme. We don't have any templates that register external auth by default. \n\nThe sign in and sign out behavior was added to make everything consistent in the authentication service.  . > This leads me to think you should always be passing a scheme (and thus deprecate the ability to not pass a scheme).\nNot every application supports external authentication, and for many apps that have only a single application cookie/bearer sign in scheme, there's no confusion with the defaults.\nIn general, libraries/frameworks should always specify the scheme when its available, the only time the defaults should be used is in application code, i.e. [Authorize].  \nSome of the confusion here is simply due to the fact that AddIdentity hides the fact that its adding 3 cookies, and setting the defaults in a slightly surprising way (AuthenticateScheme = Application, SignInScheme = External) , but that's somewhat intentional as SignInManager was meant to handle the authentication side of things, and hide all of this complexity.  If a developer wants to do auth themselves when Identity is involved, they will need to specify the appropriate scheme, or at least understand what defaults identity sets.  \n. Discussed with @ajcvickers today and the tentative plan for now is to end up with something like this:\n```C#\n   services.AddIdentityCore(identityOptions => { }} // Exists already\n     // Will live in a new Identity.SignIn package, also opt in/out to TFA/External features\n     .AddSignIn(newSignInOptions => newSignInOptions.EnableExternal = false)\n\n     // Will live in a new Identity.SignIn.Cookies, adds cookies using the new sign in options to control which cookies are enabled\n     .AddSignInCookies()\n\n```\nAlso as part of this work, we'll refactor the logic that SignInManager uses today for TFA/External/Lockout into new pieces that can be reused, and then switch SignInManager over to use the new implementation.\n@davidfowl feedback/thoughts?  I know you mentioned possibly deprecating SignInManager, what would the replacement be if we did that?  This design should allow you to add whatever back in auth instead of cookies, i.e. Identity.SignIn.Jwt so long as it supports the auth handlers support Authenticate/SignIn things should just work. Yes it will make that easier, but you already can use AddIdentityCore and add whatever pieces of identity you need in 2.0, this will just make it a lot smoother. Running out of time in 2.1, will look at this again in 2.2 as we will want to rationalize this across all of the other auth handlers as well.. Trying to fit this into 2.1-preview 2 again. Done via https://github.com/aspnet/Identity/pull/1442\n. This isn't a Identity Core issue, this looks like previous, non-Core versions of identity, stack overflow is the correct place for this issue, we are only tracking Identity Core issues in this repo.. This isn't a Identity Core issue, this looks like previous, non-Core versions of identity, stack overflow is the correct place for this issue, we are only tracking Identity Core issues in this repo.. Its most likely the new Id in your user, since the its probably the base property that's being used by Identity which is null.\npublic class User : IdentityUser<int>\n        public new int Id { get; set; }\nI would use the base property. Can you check the database to ensure that the user was actually created in the DB?. Thanks!. Good catch thanks!. The current TFA support is only intended for cookies flows. Yep, dupe of #1376 . Sure that's a reasonable suggestion, can you file a new issue asking for that improvement? its something we can consider for 2.2 as it would be very cheap @tiljanssen . Sure a PR would be great!. Thanks!. Actually I don't htink we can do this, since this would require emails. Tweaked, so we always validate emails that are provided, but only throw when they are missing if they are required. Replaced by https://github.com/aspnet/Identity/pull/1442. The scenario you describe where you want to selectively disable functionality while reusing our base store implementations is not something we have focused on.  \nThe store interfaces are meant to be pretty simple to implement.\nBut have you tried overriding UserManager.SupportsUserClaim and making it false?  GetClaims(user) might still call through to the store, if your store actually implements this interface, but your app wouldn't be calling this API ever right?. The original idea is that callers do not call methods on the manager that their store doesn't support.  Those private get methods are just a pattern used to consistently throw NotSupportException if the store doesn't implement the interface.\nWhat are you actually trying to do? \nIf you disable UserClaims because you don't use them, nothing should be calling the Claims methods (other than the default claims principal factory which does check SupportsUserClaim). The identity cookies are just basically like normal cookies, with the only main difference in the application cookie, is the security stamp validation that's used for sign out everywhere.  So if you tried to sign in an arbitrary principal into the Identity.ApplicationCookie, it would likely be rejected unless they put the security stamp into the right claim.\nSo you are thinking of something like this?  Where AddAuthentication is always required:\n```C#\nservices.AddIdentityCore()\n                .AddRoles()\n                .AddEntityFrameworkStores()\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\n                .AddDefaultTokenProviders();\nservices.AddAuthentication()\n             .AddIdentityCookies(o => { // They all default to true?\n              o.ExternalCookie.Enabled = false;\n              o.TwoFactorRememberMeCookie.Enabled = false;\n              o.TwoFactorUserIdCookie.Enabled = false;\n          })\n```\n. > How do you configure each of the cookies today? Can you (and would you want to)?\nYou can currently configure the cookies today via their names using named options, we have sugar for the main application/external cookies via ConfigureApplication/ExternalCookie, typically people tweak things like the expire duration.  Or if they want to disable the security stamp validator.\n\nIs ApplicationUser a poco? It can be used without EF right? What does that look like?\n\nYeah that's just TUser, There's nothing special about it at all anymore, to use the built in EF stores, they have to extend from IdentityUser.\nTo use a custom store, you just add your own store implementations to services\nC#\nservices.AddScoped<IUserStore<ApplicationUser>, CustomStore>()\n            .AddIdentityCore<ApplicationUser>();\n\nWhy is AddDefaultTokenProviders an addon and not on by default? Is that because this low level API adds nothing by default?\n\nThese add a bunch of things that the token providers for TFA/password recovery/email confirmation that the templates use.  They aren't critical to identity at all.  We can roll them into the core if we want, they were added back in Identity 2.0 which is why they weren't part of the original core stuff.\n\nHow do things fail if you forget one of those essential calls?\n\nThe essential are AddIdentityCore as there will be no UserManager at all without that one, and it adds most of the other core identity services as well, so that would most likely surface with a controller failing to be constructed.  AddRoles basically just adds RoleManager and isn't essential unless you are using RoleManager.  AddSignIn is similar for SignInManager.  Missing AddEntityFrameworkStores would also cause all of the managers to fail due to missing Store dependencies similarly.. Since you can't add a scheme that's already been added, so unless they go with the existing gross top level methods, or the undiscoverable Configure<CookieAuthenticationOptions>(IdentityConstants.ApplicationScheme, o => o.SlidingExpiration = false)\nWe'd have to expose an alternate API to add + configure the cookies off AuthenticationBuilder, which would be called instead of the AddIdentityCookies\nC#\n     services.AddAuthentication()\n         .AddIdentityApplicationCookie(o => { })\n         .AddIdentityExternalCookie(o => { })\n         .AddIdentityTwoFactorRememberMeCookie(o => { })\n         .AddIdentityTwoFactorUserIdCookie(o => { }). So hence my original naming was AddDefaultIdentityCookies which just calls the other 4 AddIdentityXyzCookie()\n. Maybe the AddSignIn() call should be moved from the normal IdentityBuilder from AddIdentityCore to a new IdentityAuthenticationBuilder which can than hold the AddXyzCookies() so they are also scoped to identity.\nSo something like:\n```C#\n// Non authentication identity stuff\nservices.AddIdentityCore()\n                .AddRoles()\n                .AddEntityFrameworkStores()\n// Configure auth for identity\nservices.AddAuthentication()\n    .AddIdentitySignIn() // Adds SignInManager, sets authentication policy to \"Identity\"\n// PICK ONE\n.AddDefaultCookies() // Adds default identity cookies\n\n// OR instead they can pick which cookies they want and/or configure them\n.AddApplicationCookie(o => o.CookieName = \"app\")\n.AddExternalCookie(o => o.CookieName = \"ext\")\n.AddTwoFactorUserIdCookie(o => o.CookieName = \"tfa1\")\n.AddTwoFactorRememberMeCookie(o => o.CookieName = \"tfa2\")\n\n``. MovedISecurityStampValidatorand related classes intoSignIn.Cookies, main Identity package now depends on that.. @davidfowl so there's a problem with the new plan:  We don't have TUser in AddAuthentication so we can't addSignInManager` at that point...  So right now this is what we end up with:\n```C#\n   services.AddIdentityCore()\n        .AddEntityFrameworkStores()\n        .AddSignIn();\n// Default all 4 identity cookies\n   services.AddAuthentication()\n        .AddIdentity()\n             .AddDefaultCookies();\n// or add only the cookies you use, where each of these returns the IOptionsBuilder for the appropriate cookie options for further tweaking if needed\n   var auth = services.AddAuthentication().AddIdentity();\n   auth.AddApplicationCookie(o => o.CookieName = \"app\").Configure(Config[\"AppCookie\"])\n   auth.AddExternalCookie(o => o.CookieName = \"ext\")\n   auth.AddTwoFactorUserIdCookie(o => o.CookieName = \"tfa1\")\n   auth.AddTwoFactorRememberMeCookie(o => o.CookieName = \"tfa2\") \n```\n. Updated the PR with the new changes as discussed with @davidfowl \nSo it looks like there's no need to split SignInManager into a new package, because for things to actually work, we end up still needing to add a bunch of cookie specific services to make things like the security stamp work by default, so even if we created a SignIn and SignIn.Cookies package.  We'd still need to glue everything together in the main Identity package, so there wasn't any benefit to creating the new packages at this time...\nBut the new refactored AddIdentityCore looks like this:\n```C#\n            services.AddIdentityCore()\n                .AddRoles()\n                .AddEntityFrameworkStores()\n                .AddSignInManager()\n                .AddDefaultTokenProviders();\n        services.AddAuthentication(o =>\n        {\n            o.DefaultScheme = IdentityConstants.ApplicationScheme;\n            o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\n        })\n        .AddIdentityCookies(o => \n        {\n            // This would be empty typically, just demonstrating the new API per cookie\n            o.ApplicationCookie.Configure(c => c.Cookie.Name = \"MainCookie\");\n            o.ExternalCookie.Configure(c => c.Cookie.Name = \"SocialCookie\");\n            o.TwoFactorRememberMeCookie.Configure(c => c.Cookie.Name = \"RememberBrowser\");\n            o.TwoFactorUserIdCookie.Configure(c => c.Cookie.Name = \"2falogin\");\n        });\n\n```\nThe main additions to what we had in 2.0 are:\n- AddSignInManager: which adds SignInManager + security stamp services needed for cookie validation\n- AddIdentityCookies: which hang off AuthenticationBuilder instead of IdentityBuilder which add the 4 identity cookies and take a new IdentityCookieBuilder which has OptionsBuilder instances for each cookie which is intended to be a cleaner alternative to configuring those cookies.  Also its up to the caller to configure the default schemes themselves\ncc @ajcvickers @blowdart \n. Yeah, AddIdentityCookies can only be called once, the underlying AddCookie calls will throw if the same scheme is passed in.. @natelaff can you convert your zip to a repo on github instead?  And then I'll take a look thanks. So I was able to get a simplified version what you were trying to accomplish to work I think:\n\nCreate a new MVC app with individual auth.\n\nCustomize the user + role with an additional property:\n```C#\n    public class ApplicationUser : IdentityUser\n    {\n        public string MyProperty { get; set; }\n    }\npublic class Role : IdentityRole\n{\n    public string MyProperty { get; set; }\n}\n\n\n``\n3. Update Startup:AddIdentity4. UpdateApplicationDbContext : IdentityDbContext5. Delete all initial migrations/classes that the template generated in Data, Migrations\n6. runAdd-Migration initialto create a new migration and apply it viaUpdate-Database`\n7. Run the app, Register a user, clicking on TFA works\n@ajcvickers does this sound like a reasonable set of steps to customize the model to switch the primary key?  At a minimum we should include this with the docs for 2.0 cc @scottaddie. Note: the two big changes from your repro that I avoided was the OnModelCreating configuration, leaving the ApplicationUser class name alone, and nuking all of the initial migrations, I got all sorts of weird errors like yours when I didn't do that and tried to add new migrations after starting with the ones that come with the template. cc @Rick-Anderson @scottaddie. Maybe we can expand the existing Customizing Foreign Keys doc into this?. Yeah @scottaddie basically that is one specific common customization, this new topic should include that, but also cover the other common scenarios that currently aren't documented. So the main guiding factor is whether you are building something more like a library for reuse in different situations, or if this is specific to your app.  If you don't envision reusing this for other organization types in the future, you don't need the extra generic complexity...\nThere's no clear right or wrong choice between your options, the tradeoffs are between extra work/complexity for some extensibility.... Nice, thanks!. This should be now fixed in the latest templates initial migration in 2.1. You just need to specify the authentication scheme that matches the external cookie: \nHttpContext.GetTokenAsync(IdentityConstants.ExternalScheme, \"access_token\")\n. Thanks, someone else also submitted a PR for this which I merged today https://github.com/aspnet/Identity/commit/388fea2ed6510bcf29c19d30572d37b45e16f3e1. How would you imagine this to work without identity as the abstraction used to store user information in the app?. This sounds like implementing a very bare bones identity store that only supports TFA and external logins.  . Merged thanks. Thanks for finding this issue, I've filed an issue to track https://github.com/aspnet/Identity/issues/1480. Ah yeah, good point, missing a test for that branch. Fixed in dev (2.1) via https://github.com/aspnet/Identity/pull/1481, we will consider porting the fix to a 2.0.x patch if there's demand. 794bd54cdbbd952d62674c9db76e6bd6a6e6b02f. You can just add the concrete UserOnlyStore in ConfigureServices, something like, or one of the other overloads\nservices.AddScoped<IUserStore, UserOnlyStore<ApplicationUser, ApplicationDbContext>>();. 794bd54cdbbd952d62674c9db76e6bd6a6e6b02f. Yeah this has been fixed in 2.0.3 and 2.1 nightly builds, dupe of https://github.com/aspnet/Identity/issues/1388. What's your startup like?. Yeah that doesn't really matter to identity, are you just using the normal AddIdentity(), are you seeing the normal external redirection and bounce back to your external login callback?  Are you seeing an external cookie sent?  That's what the GetExternalLoginInfo call is basically lookin for.. Okay well you are pretty close then if you are getting the external cookie, then we just need to figure out why its not getting returned...\nSo look at https://github.com/aspnet/Identity/blob/rel/2.0.0/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L555\nCan you try explicitly calling await Context.AuthenticateAsync(IdentityConstants.ExternalScheme);  since you have the cookie, that should return you a result you can debug into.  It should contain the claims principal from AzureAd as well.  . Can you add a test to verify this new behavior in the specification tests?\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.Specification.Tests/IdentitySpecificationTestBase.cs#L170. You can just add a new test validator for your new tests if needed, but yeah you defeinitely want to be exercising both paths . Can you rebase your branch against dev?  I'll try to get this merged this week. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity \nI'm happy to port this over to the new repo and merge this for 3.0, but that would lose the fact that these are your changes.  If you wanted to open a new PR in the new repo for the commits to stay in your profile.  We'll wait until next year before porting this otherwise. never mind ported to aspnetcore repo and was able to amend adding your history so we can take it from here, thanks again for the PR!. Are you trying to create a new MVC Core application and have it plug into an older Identity 2.2 database?. Thanks!. What are you trying to do actually, those are just static extension classes, you can just call the method you want off of IServiceCollection with a using typically.. Yeah that seems fine, basically any of the approaches shown here should be fine:  Identity won't load related data, its up to you to do that:\nhttps://docs.microsoft.com/en-us/ef/core/querying/related-data\n. DbContext's are scoped services so your custom objects should be able to just get them in its ctor. Its just an additional method that we added to the user store (since its more performant to add multiple claims all at once).  But its a breaking change to add it to the IRoleStore interface now.  . Just means if you were to change a user's role, or remove the ability for a particular user to login, it wouldn't take effect until after 2 weeks (i.e. the maximum time a stale cookie can be used is the validation interval).. Something you can try is to use a convention like {tenantId}-{userName} as the user name for identity. I'll double check that everything we wanted from #1485 made it back, but most of that change shouldn't come back to dev as it was a quirks mode fix. I think we are good, I looked at the changes in rel/2.0.1 and the two fixes we took are already in dev:\n87bbff65867710b5a49265fdf09de4a6d539ac8d\nb865d5878623077eeb715e600d75fa9c24dbb5a1\nWas there any other commits in particular that you wanted me to review/ensure we have in dev from the release branches?  . Strange since this looks like it should have been ported in https://github.com/aspnet/Identity/commit/73afa0af5e27b09aeaea684731bbe7a338e21903\nnever the less, dev has the right code since the fix went in there first anyways, so I don't think that diff is an issue.  The second diff is a release only test for the release only quirks mode so that one we definitely don't want in dev.. Oh maybe the first fix went into 2.0.1 not 2.0?\nhttps://github.com/aspnet/Identity/compare/dev...patch/2.0.1. I assume we want to do the no-change merge before I do the rename push?. Ok cherry picked your empty merge and pushed: 79de498dcb740f9930adb2218f75df3babec2ba6. Ok sorry I got the defaults mixed up:\n\"default\" is using DataProtection (really long token)\nhttps://github.com/aspnet/Identity/blob/e6f3ebf5810c793edc6f3b4ca3438194786b86a2/src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs\n\"email\", \"phone\" are using TOTP (6 digits) https://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/TotpSecurityStampBasedTokenProvider.cs.\nhttps://github.com/aspnet/Identity/blob/f555a26b4a554f73eea70b4b34fca823fab9a643/src/Microsoft.AspNetCore.Identity/IdentityBuilderExtensions.cs#L28\n. Dupe of https://github.com/aspnet/AuthSamples/issues/6. Try running build.cmd first, that should pull down everything you need https://github.com/aspnet/Identity/blob/dev/build.cmd. @natemcmaster is there anything else someone needs to do (feeds or environment or other pre build.cmd steps to build from a clean cloned dev enlistment)?. IdentityCore is the slimmed down sln that doen'st include the identity service stuff which hasn't been shipped yet.  You can launch using the sln or attach, either way should work. Not easily since identity assumes there's only one single UserManager<TUser> you can have multiple DbContext's that point to the tables with different user table names mapped.  But you might be able to get this to work with different TUser types, basically:\n```\n   public class AppUser // All your real stuff\n   public class AppAUser : AppUser // just there for distinguishing\n   public class AppBUser : AppUser // just there for distinguishing\n   public class AppCUser : AppUser // just there for distinguishing\npublic class DbContextA // OnModelCreating maps user table to A's table\n   public class DbContextB // OnModelCreating maps user table to B's table\n   public class DbContextC // OnModelCreating maps user table to C's table\nservices.AddIdentity()\n   services.AddIdentity()\n   services.AddIdentity()\n// Access the appropriate identity manager via the appropriate user generic type.\n```\n@ajcvickers does that sound reasonable?. looks like you got it working in the other issue. You should probably add some unit tests for AddIdentity().AddDefaultUI() and verify all the options are setup properly. Seems fine to just document the AddDefaultUI method then. Yes so in the templates, it conflates UserName and Email, registering a user using the email as the initial user name.  So if you add the ability to change the email, that does not affect the user name for the user.  You could try updating both UserName and Email at the same time in your app.. We should wait to see how the new UI stuff in 2.1 ends up before updating the documentation since otherwise the documentation updates might be obsolete immediately :). This sample has been removed. this.roleManager.Roles.ToList() would be an List<ApplicationRole> which is not a  List<ApplicationRoleViewModel>. What package do you mean by M.A.I, one of the core Identity packages?. Doesn't really belong there, the rest of  identity has nothing to do with sending emails (only the default UI does).  What's wrong with keeping it in the UI package, its really just meant to be an adapter interface for a real email service...  \nBut now that this is all in the UI package, we are free to change how this works if we have better ideas/names now since the code doesn't show up in the app...   \n. The only reason you would ever want to use this interface, is if you were configuring the UI, so it really belongs with the UI package.  Its not a general purpose email sender interface, its purely an adapter which the UI code uses to send email.. If there was a general purpose email sending interface, we could use that... but I don't think we should build that as part of identity.... If we change the interface we should probably change the name just to avoid conflicts with existing IEmailSender classes, maybe just add an UI IUIEmailSender and UIEmail?\nIs it really better to make it optional instead of a default no-op?  What happens when there's no email sender, do we stop rendering ForgotPassword links, or just have it throw?  We'd have to probably throw if requireEmailConfirmation = true and there is no email sender.  I believe the idea behind making email sending part of the flows in templates for 2.0 was that we didn't think it was realistic for a site not to have an email sender...\n. I think @javiercn was planning on doing something about this in rc1. One cheap thing you could do for future proofing in 2.1 is just to make it not an interface... so you can revisit things later\npublic class EmailSender {\n   Send(whatever)\n}\nLets you just always register a no-op one, and they can plug in a real one if they want, and you aren't rushed into defining the IEmailSender interface . I also suggest something really specific like DefaultUIEmailSender . Sure, I'll update to EFCore. If we are going for brevity, why not just EF?. That might be more of an issue in the EF repo, but whatever EFCore is fine. 85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c. Oh oops, I just pushed via cherry pick. 79de498dcb740f9930adb2218f75df3babec2ba6. Updated to set the max length to 128 in the DefaultUI packages, so this will be set by default in new apps\ncc @javiercn . If you really want, you can plug in your own data protection for cookies via\nhttps://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationOptions.cs#L123. services.ConfigureApplicationCookie(options =>\n{\n    options.TicketDataFormat = new WhateverSecureDateFormatYouWant()\n});. Thanks @jkulubya !. @danroth27 who do you want to review this PR from the perspective of proper RazorPages usage/patterns etc?  I mostly just copied what the existing pages did, I only intentionally deviated slightly using the NavPages constant instead of hardcoding the value in the ActivePages setting.. Ok updated switching all default UI over to use the new partial and consistently use ManageNavClass constants in for the active page stuff. Text has been updated, Privacy tab => Personal Data, will add one more change which will require users to reenter their password if they have a local password before being allowed to delete their account. Updated flow with password confirmation on Delete page if the user has a password.  Also added white list to only include Id/UserName/Email/Phone/and Confirmed properties). I think all feedback has been addressed now, added Response.Headers.Add(\"Content-Disposition\", \"attachment; filename=PersonalData.json\"); to force download.\n@pranavkm can you do a final review/sign off?. f1ed482c26df6e242b1e4eca0948dc77ba5b8fa9. No, we just check password right now, checking a second factor is significantly more involved, but its certainly doable if an app wants that, you basically just need to duplicate the two factor login flow. I don't think this needs to go into preview1 at this point, as its basically a bunch of hooks to make it easy to plug in encryption, it wouldn't do anything by default.  \n@blowdart is this something you want me to try and get in this week so it makes it into preview1?. @ajcvickers here's the SQL generated:\n``\nMicrosoft.EntityFrameworkCore.Query:Debug: Compiling query model: \n'(from IdentityUser u in DbSet<IdentityUser>\nwhere bool [u].UserName.StartsWith(__userName_0)\nselect [u]).Count()'\nMicrosoft.EntityFrameworkCore.Query:Debug: Optimized query model: \n'(from IdentityUser u in DbSet<IdentityUser>\nwhere bool [u].UserName.StartsWith(__userName_0)\nselect [u]).Count()'\nMicrosoft.EntityFrameworkCore.Query:Debug: (QueryContext queryContext) => IEnumerable<int> _InterceptExceptions(\n    source: IEnumerable<int> _ToSequence(() => int GetResult(\n            valueBuffers: IEnumerable<ValueBuffer> _Query(\n                queryContext: queryContext, \n                shaperCommandContext: SelectExpression: \n                    SELECT COUNT(*)\n                    FROM [AspNetUsers] AS [u]\n                    WHERE ([u].[UserName] LIKE @__userName_0 + N'%' AND (LEFT([u].[UserName], LEN(@__userName_0)) = @__userName_0)) OR (@__userName_0 = N'')), \n            throwOnNullResult: False)), \n    contextType: Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test.SqlStoreTestBase3+TestDbContext[Microsoft.AspNetCore.Identity.IdentityUser,Microsoft.AspNetCore.Identity.IdentityRole,System.String], \n    logger: DiagnosticsLogger, \n    queryContext: queryContext)\nMicrosoft.EntityFrameworkCore.Database.Connection:Debug: Opening connection to database 'Scratch_af2039c9-4611-4753-a468-35c632f40812' on server '(localdb)\\MSSqlLocaldb'.\nMicrosoft.EntityFrameworkCore.Database.Connection:Debug: Opened connection to database 'Scratch_af2039c9-4611-4753-a468-35c632f40812' on server '(localdb)\\MSSqlLocaldb'.\nMicrosoft.EntityFrameworkCore.Database.Command:Debug: Executing DbCommand [Parameters=[@__userName_0='?' (Size = 256)], CommandType='Text', CommandTimeout='30']\nSELECT COUNT()\nFROM [AspNetUsers] AS [u]\nWHERE ([u].[UserName] LIKE @__userName_0 + N'%' AND (LEFT([u].[UserName], LEN(@__userName_0)) = @__userName_0)) OR (@__userName_0 = N'')\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (79ms) [Parameters=[@__userName_0='?' (Size = 256)], CommandType='Text', CommandTimeout='30']\nSELECT COUNT()\nFROM [AspNetUsers] AS [u]\nWHERE ([u].[UserName] LIKE @__userName_0 + N'%' AND (LEFT([u].[UserName], LEN(@__userName_0)) = @__userName_0)) OR (@__userName_0 = N'')\n```. @blowdart @ajcvickers @javiercn \nSo took a stab at actually implementing support for plugging in encryption with key rotation as part of identity just to see how it looks...  \nSo its gets a little bit muddled, but it 'works'.  New shape of things:\n```C#\n    // user manager and EF converter use key ring + encryptor\n    public interface IPersonalDataEncryptorKeyRing\n    {\n        string CurrentKeyId { get; }\n        string this[string keyId] { get; }\n        IEnumerable GetAllKeyIds();\n    }\n    public interface IPersonalDataEncryptor\n    {\n        string Encrypt(string keyId, string data);\n        string Decrypt(string keyId, string data);\n    }\n// Used by EF value converter, default implementation uses encryptor + keyring\npublic interface IPersonalDataProtector\n{\n    string Protect(string data);\n    string Unprotect(string data);\n}\n\n```\nSo the good news is we already do special normalization and have methods to do FindByUserName/Email, so it was simple to just apply encryption and probe using the key ring inside of UserManager.  Even better, we already have our own dedicated NormalizedUserName/Email fields which we can manage the protected payload, so we can just have the manager manage that, and drop configuring value converters for those two fields.  We still need to use the value converter for the regular user name/email/phone number columns, and this is also what we would tell customers to use to protect their own (non key data).\nSo to turn on PersonalDataProtection in this iteration, it looks something like this, I verified that you can rotate the key and user manager can still find the old values, it actually also reprotects the keys every time the user is modified automatically too, so the keys are always rolled forward anytime the user is updated:\n```C#\n   services.AddIdentity(o => o.Stores.ProtectPersonalData = true)\n            .AddPersonalDataEncryption();\n    public class DefaultKeyRing : IPersonalDataEncryptorKeyRing\n    {\n        public static string Current = \"Default\";\n        public string this[string keyId] => keyId;\n        public string CurrentKeyId => Current;\n\n        public IEnumerable<string> GetAllKeyIds()\n        {\n            return new string[] { \"Default\", \"NewPad\" };\n        }\n    }\n\n    private class PadEncryptor : IPersonalDataEncryptor\n    {\n        private readonly IPersonalDataEncryptorKeyRing _keyRing;\n\n        public SillyEncryptor(IPersonalDataEncryptorKeyRing keyRing) => _keyRing = keyRing;\n\n        public string Decrypt(string keyId, string data)\n        {\n            var pad = _keyRing[keyId];\n            if (!data.StartsWith(pad))\n            {\n                throw new InvalidOperationException(\"Didn't find pad.\");\n            }\n            return data.Substring(pad.Length);\n        }\n\n        public string Encrypt(string keyId, string data)\n            => _keyRing[keyId] + data;\n    }\n\n    [Fact]\n    public async Task CanRotateKeysAndStillFind()\n    {\n        var manager = CreateManager();\n        var name = Guid.NewGuid().ToString();\n        var user = CreateTestUser(name);\n        IdentityResultAssert.IsSuccess(await manager.CreateAsync(user));\n        IdentityResultAssert.IsSuccess(await manager.SetEmailAsync(user, \"hao@hao.com\"));\n        var newName = Guid.NewGuid().ToString();\n        Assert.Null(await manager.FindByNameAsync(newName));\n        IdentityResultAssert.IsSuccess(await manager.SetPhoneNumberAsync(user, \"123-456-7890\"));\n\n        Assert.Equal(user, await manager.FindByEmailAsync(\"hao@hao.com\"));\n\n        IdentityResultAssert.IsSuccess(await manager.SetUserNameAsync(user, newName));\n        IdentityResultAssert.IsSuccess(await manager.UpdateAsync(user));\n        Assert.NotNull(await manager.FindByNameAsync(newName));\n        Assert.Null(await manager.FindByNameAsync(name));\n        DefaultKeyRing.Current = \"NewPad\";\n        Assert.NotNull(await manager.FindByNameAsync(newName));\n        Assert.Equal(user, await manager.FindByEmailAsync(\"hao@hao.com\"));\n        Assert.Equal(\"123-456-7890\", await manager.GetPhoneNumberAsync(user));\n    }\n\n```\n. From discussion today, the overall shape/plan looks reasonable, we'll rename things a bit:\n```C#\n    // UserManager uses lookup protector and keyring to probe for matching keys as part of\n    // lookups when ProtectPersonalData = true\n    public interface ILookupKeyRing\n    {\n        string CurrentKeyId { get; }\n        string this[string keyId] { get; }\n        IEnumerable GetAllKeyIds();\n    }\n    public interface ILookupProtector\n    {\n        string Protect(string keyId, string data);\n        string Unprotect(string keyId, string data);\n    }\n// Used by EF value converter, default implementation uses lookup protector + keyring\npublic interface IPersonalDataProtector\n{\n    string Protect(string data);\n    string Unprotect(string data);\n}\n\n```\n@blowdart wanted to get thoughts/feedback from @GrabYourPitchforks @leastprivilege\nTo summarize the intent behind these changes: we want expose a general set of hooks to allow apps to setup encryption of personal data (and potentially be able to do key rotation) while still being able to login using identity...  The app would be responsible for providing an implementation of the LookupProtector/KeyRing.  We can provide a default implementation of IPersonalDataProtector that uses {keyId}:{payload} as the format that uses the ILookupProtector/KeyRing.  Identity will take care of using the lookup interfaces to search for users using each of the keys, and also update the data to the current key whenever a user is saved.\nSo it would look something like in startup:\n```\n   services.AddIdentity(o => o.ProtectPersonalData = true)\n               .AddLookupProtection();\n// or maybe instead: (which takes care of setting ProtectPersonalData = true)\n   services.AddIdentity().AddPersonalDataProtection();\n```\n. Add ToList for user manager.userName to work. The key rotation piece is actually part of core identity, without that they would have to implement that themselves on top of identity apis instead of the user manager taking care of doing lookups and automatically updating the encryption for the key in FindByName/Email.  \nWe don't care what the implementation is, but without this support, they'd have a lot more things to change to support key rotation since they wouldn't be able to just use FindByName/Email anymore. That's not the plan at this point.  The default protector will use a payload format of \"keyid\":\"data\", lookups will just try every key and update the payload to use the current key if needed.\nThey can still plug in the entire data protector if they want, but this should be good enough to allow them to only plug in encryption algorithms.  I still need to verify everything works using something more complicated than the fake encryption tests in this PR.\n. @javiercn I added 2 new functional tests for Download/Delete user can you review those?  I mostly just copied the TwoFA manage test, I didn't add any coverage for custom users since the test website is currently using only IdentityUser, do we need a second test website that's setup more like the DefaultUI sample which lets us test the extensiblity flows as well?. Yeah we probably need to document this at some point cc @blowdart @Rick-Anderson.\nBut ILookupProtector needs to be stable for logins to work, so you can't use data protection you will have to use something else. The decision was made for 2.0 templates to start using the properties on IdentityUser directly instead going thru the user manager for things like user.Id for some of the exception messages.  That binds the views to IdentityUser.  I did bring this up at the time the change was made so it was intentional, You can ask @DamianEdwards / @danroth27 to consider revisit that decision. Ah much nicer, updated. @blowdart looks like today there's no easy way to re-enable TFA after disabling it...  Should I add that button where you have an authenticator app but its not enabled...there's no way to get it back other than configuring another authenticator app today. @blowdart then we should probably just remove the authenticator as part of the flow instead of just disabling the bit if we aren't going to make it possible to reuse the old authenticator key. Note: I ask about this because testing this is super annoying having to keep re-adding new authenticators...  I would have expected this to just be a checkbox/button where I can turn on tfa or off.... @blowdart so is there any way we can simplify the UI when you already have an authenticator...\nSo today it shows both Configure and Reset which as far as I can tell basically do the same thing when you click either button....  Is there a reason we can't just only show the Reset button when they have an authenticator key set?  I guess there's a slight difference in that Reset will turn off 2fa, and Configure would leave it on until its confirmed?  But that subtle difference seems like something that would be impossible for users to know the difference between...  . Can we change the words to make that clearer?\nRelink your authenticator vs Attach a new authenticator or something to that effect?. Or really if I understand what you are saying.\nConfigure is => Test my authenticator (to ensure that its linked and can verify codes)\nReset => Turn off 2fa, add a new authenticator. So we have a [Disable] at the top which just turns off 2fa bit\n[Setup an authenticator app] which is the existing enableAuthenticator\n[Disable your authenticator] which rolls the key and disables 2fa, I'll change this to redirect to the main 2fa page instead of EnableAuthenticator which is why it was kinda confusing today, both buttons end up in the same place.\nI'll rename the page to DisableAuthenticator as well. So our current flow is kinda weird then, when you are just 'verifying' an existing authenticator, it always regenerates your recovery keys. So do we want Enable + Setup instead?  Where setup just lets them check that its working?. Actually so I think i see an easier fix.  We really only want to generate recovery codes the first time an authenticator was added.  So we can just check for that in EnableAuthenticator....  If RecoveryCode count == 0, generate new ones, otherwise skip that step...  . Exactly, there's no reason to reset anyones 2fa recovery codes, they are completely separate from authenticators...  its super weird that those would get reset when you reset your authenticator key.  I'm fixing that as part of this :). I don't think disable works, we probably need to go back to Reset authenticator.  The reason being, there's no way to set AuthenticatorKey back to null, so even if you click Disable, it still shows up... which is super confusing...  Hence I think the existing Reset Authenticator Key is fine.. So it's going to be:\n[Add new authenticator] the first time\nThen forever will be:\n[Setup an authenticator app] [Reset your authenticator key]. Recovery codes are generate the first time you add an authenticator (assuming you have 0 recovery keys), otherwise it will never generate you new codes....  they can do that themselves via the action anyways.. I can't do it via identity, i can cheat and do it via the entity directly...not really what we should be doing :). The whole point is that we shouldn't care what the authenticator key is...  The operations should be (reset the key), or configure an authenticator using that key.  There should be no other operations. Ok this PR has grown from just adding a new button, I'll keep iterating and we can review this next week in triage and this can go in for preview2 rather than trying to cram it in today :). @pranavkm ok updated using status message everywhere, and now we set the status message in various places as well.\n@blowdart feel free to start reviewing the new strings, we can review the updated flow in person next week.  The only major change is that we now no longer generate recovery codes every time through EnableAuthenticator. @grahamehorner I don't think our current system cares which authenticator app you use, so long as any of the apps are registered using the authenticator key for the user, they would generate the same code no?. ae127558b55d227e3b496db52db8412f4e821e30. This must be specific to some of PRs, travis is showing up typically in mine: https://github.com/aspnet/Identity/pull/1577. What's the issue exactly, your private branches don't get verified?  Can't you just create a PR with a merge against dev to trigger the travis/appveyor builds?. IUserStore has the only methods that should be updating/committing the user (Create/Update/Delete), the IUserRoleStore methods should only be updating the entity, but the changes shouldn't be 'persisted' until Update is called.. This is by design, the interface is always a string, stores are free to persist the keys using whatever type they want, but they are responsible for converting it to/from a string.\nThe base stores have virtual ConvertIdTo/FromString methods to make this easier:\nhttps://github.com/aspnet/Identity/blob/dev/src/Stores/UserStoreBase.cs#L239. Thanks @robertmiles3 . Can you give me an example of what this actually enables?  Is this all just to allow them to specify their own TUser?. Or is this a step in making it easier to replace a particular view/page?  If that's possible now, can you demonstrate that in the Default UI sample?. The main point I'm getting at is that adding the Name/Age fields to the user is only half of it, they'd most likely want to add support for these fields in the register/manage pages...\nIf this now enabled the ability to just drop in a custom register/manage and entering/editing the age, that would be pretty compelling.. Ah cool, yeah then can we add some more overriden views/flows to the sample demonstrating this...\nMaybe just let them enter their Full name during registration and then let them edit that in Manage.  With out an example its hard for me to see what all the other changes are for, but I'm assuming the IdentityDefaultUI attribute + type is related to overriding.\nSo to summarize this change, it looks like all of the new abstract base PageModels are basically are the equivalent of the interfaces for each page.  So it looks a little weird that OnGet/OnPost are implemented to throw, but I guess you can't have them be abstract since not every page will implement these?. I didn't look at other branches, I'm only in dev, I already fixed it in my branch so I'm not blocked on this.... Fixed as part of c6a82ad19a0bdb80b7358dc843b66664bbf33f96. Yeah options.SlidingExpiration  = true and options.ExpireTimeSpan . Yes, see https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationOptions.cs#L140. Yeah this is why the options.Cookie.Expiries property is not the right one to set for cookie authentication, its that embedded expiry date in the data that matters.. One small question, is there any reason we prefer RefreshSignIn over just SignIn here?. Yeah so looks like we added this feature specifically for the templates to use, but never updated them :)\nOriginal PR: https://github.com/aspnet/Identity/pull/452\nSo we should update the rest of the pages in the default UI that are currently using SignIn to use RefreshSignIn\nSee: https://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/Manage/SetPassword.cshtml.cs#L94\nToday they are hardcoding false after you change the password, which downgrades any persistent remember me cookies to a session one.. @jbagga sounds fine, the general issue can be summed up as Manage actions lose cookie info (persistent/external login claim) when they call SignInAsync instead of RefreshSignIn. Cool, are you planning on fixing this @jbagga ?. We do have a download button/post.  But this is behavior if you do a get to that url instead of the post, you get a blank response. This is probably just a bug, and we should do what pranav suggest and make the get fail/404. Basic idea would be something like this, which would take care of doing the wireup needed for ValueConverters and personal data download\n```C#\npublic class User {\n    [PersonalData]\n    public string UserName { get; set; }\n[PersonalData]\npublic string Email { get; set; }\n\n[PersonalData]\npublic string Address { get; set; }\n\n[PersonalData]\npublic string Phone Number { get; set; }\n\n}\n```. Done via https://github.com/aspnet/Identity/pull/1562  [EncryptedPersonalData] and [PersonalData] were added. This dependency was intentional, so the validator can access any properties on TUser.  The default implementation doesn't use this, but custom implementations would be able to access user data this way.. Met with @davidfowl @Eilon @DamianEdwards and we decided to add a new\nAddDefaultIdentity<TUser>() method which will collapse today's identity methods down except for the stores, roles will no longer be enabled by default as well.\nStartup in the templates will now look like:\nservices.AddDefaultIdentity<IdentityUser>.AddEntityFrameworkStores<ApplicationDbContext>();\nIts will be functionally the same as:\n```\n            services.AddIdentityCore(o => o.Stores.MaxLengthForKeys = 128)\n                 .AddEntityFrameworkStores()\n                 .AddDefaultUI()\n                 .AddDefaultTokenProviders();\n        services.AddAuthentication(o =>\n        {\n            o.DefaultScheme = IdentityConstants.ApplicationScheme;\n            o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\n        })\n        .AddIdentityCookies(o => { });\n\n```\nThe rest of auth changes will be looked at in 2.2 . You need to add roles back, it isn't enabled by default anymore .AddRoles<IdentityRole>. This is sort of expected, AddDefaultUI is really forcing some opinionated settings on MVC as well.\ncc @davidfowl I think this is another point in favor of making one uber AddDefaultIdentityEntityFrameworkUI<TUser, TRole, ApplicationDbContext>() method since now its not just not auth settings that identity will clobber, its also clobbering razor and static files. I think the default UI requires areas so I don't think its unreasonable for that to set allow areas = true. \nIf you want to override it, you can still turn it off again after you call AddDefaultUI right?\nBasically my point is mostly just that identity sets up a bunch of opinionated defaults to make things 'work' by default.. Oh I see, so you are just complaining about the fact that the UI is doing the stomping in post configure?  So users would have to override by adding a PostConfigure(o = > o.AllowAreas = false)...  but its kind of nonsensical to both use DefaultUI and try to turn areas off..... So AllowAreas = false with AddDefaultUI would result in blocking areas except for ones added by libraries?  \nI fully agree that its a mystery what AddDefaultUI does...  I pushed strongly for naming it something explicit like AddRazor/MVCUI, but Dan/Damian liked a more generic name rather than mention any implementation details in the name...\n. So its a little odd that its post configure instead of normal configure, but its not that hard for them to override if they really want, they just do servives.PostConfigure(o => o.AllowAreas = false). You fixed this already right?. Looks fine, we are adding/updating some of the functional tests to verify that these new attributes work right?. The stores only contain base classes and helper base class implementations of stores that use those pocos.  AspNetCore.Identity is the main package that you would use that brings in SignInManager and the asp.net core specific implementations of identity (without any stores, those come in the EntityFrameworkCore package). How is your store/db context configured, what's your AddIdentity full call look like?. Can you include your ApplicationDbContext?. Strange, everything looks reasonable, can you try getting rid of the base configure and just configuring everything explicitly yourself to see if that at least works?\n. Sure a repro never hurts :). Not really its just sugar, once you have a repro up hopefully its something simple that's off there.. There's not too much going on other than defining the db sets in the model, and the OnModelCreating:\nhttps://github.com/aspnet/Identity/blob/dev/src/EF/IdentityUserContext.cs. So I debugged this, and it looks like the issue is that calling HasKey again doesn't remove the keys added by IdentityDbContext.  So the ApplicationUserRole has 2 keys defined:\nthe composite userId + roleId, in addition to the new long id property that you added.\n@ajcvickers is there a way to remove/replace a primary key in the builder?\nSpecifically\n```C#\n        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n           // results in: .HasKey(r => new { r.UserId, r.RoleId });\n        builder.ApplyConfiguration(new ApplicationUserRoleConfiguration());\n       // results in: .HasKey(r => r.Id);\n\n       // Resulting in two keys, is there a way to only have the r.Id key.\n    }\n\n```. https://github.com/aspnet/Identity/tree/dev/src/AspNetCoreCompat. Cool I think the new test looks good now, can you see if its easy to add one more test flow which should now be fixed by the change to refresh token?\nCan you login via an external login, i.e. this test https://github.com/aspnet/Identity/blob/dev/test/Identity.FunctionalTests/LoginTests.cs#L180\nAssert that this identity has an External claim that lists the external provider scheme in the authenticatio method: https://github.com/aspnet/Identity/blob/dev/src/Identity/SignInManager.cs#L192\nChange the password and verify that the authentication method claim remains.\nThat was the original bug that was motivating the switch to refresh sign in.. So the behavior we should be seeing in my scenario is, after login with an external provider, you should get an additional AuthenticationMethod claim set to the scheme of the external provider.\nThat will be lost when SignInAsync is called, with the switch to Refresh, that claim should be preserved in the main application cookie.\nIts possible that the test I linked isn't properly setup for this behavior to be tested so you might need to mock something else.. If its too hard to mock, you can just add a new page that checks for that claim and write out success or not based on whether HttpContext.User.Claims.Where(c => c.Type == \"AuthenticationMethod\") is found, and just hit that page. That is cleaner I guess, downside is it took me a lot longer to figure out what these tests were trying to do since it reads like a bunch of funcs checking claims are equal...  but that could just be a naming thing or comments.... @jbagga You look at the main IdentityConstants.ApplicationScheme cookie, that should have an additional claim of type AuthenticationMethod which is set to the scheme of the external, which is maybe contoso?  Normally it would say google, facebook, twitter or whatever the AddXyz was().. Cool thanks!. Alternatively you could just add some text that says you can directly login with an existing social provider . But I guess it doesn't hurt to just include the extra shared external logins view with that new text directly. This is likely a dupe of https://github.com/aspnet/Identity/issues/1636. Doesn't look like we are checking the user id here, but I think there was another bug that removed passing the user id that we weren't using :)\nSee it passed in here: https://github.com/dotnet/templating/blob/VS2017.4-Preview1/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L425\nAnd not here: https://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/ForgotPassword.cshtml.cs#L57\nSo at this point we should just close this I guess as won't fix?. Feel free to reopen this with more details to repro this. Closing as this isn't an issue with Core, we won't be changing something like this with older versions of identity templates, but its possible we will revisit this for future Core versions of identity in the linked #1721. src/Core and src/Stores need baselines as well I think those are the main two that are missing baselines that shipped and are public in 2.0. I wouldn't enumerate the claims multiple times, you can just select the claim you want directly, i.e. _currentUserGuid = _httpContextAccessor.HttpContext.User.Claims.FindFirst(UserClaimsKey.Sub). FindFirst is off of ClaimsPrincipal, this isn't the appropriate place for questions like this, I suggest you try something like stackoverflow if you are stuck. So I think the main issue is that all the places in the UI that directly use the Id, i.e. https://github.com/aspnet/Identity/blob/641dfe3b629dfb4acd484d24d21d2040e1aeb31b/src/UI/Areas/Identity/Pages/Account/Manage/Index.cshtml.cs#L100\nneed to be updated to use GetUserId, and more generally never access any of the IdentityUser properties directly, and then https://github.com/aspnet/Identity/blob/dev/src/UI/IdentityDefaultUIConfigureOptions.cs#L20\ncan be updated to remove the IdentityUser and allow any class.\nThis is basically the same issue as https://github.com/aspnet/Identity/issues/1679 but a more egregious example of why this needs to be fixed for 2.1, since breaking the ability for apps to customize the primary key and use the default ui is probably not going to fly...\ncc @DamianEdwards @javiercn @ajcvickers @blowdart . You would use AddIdentity or AddIdentityCore just like before, this is just a online liner that combines up the 3 AddDefaults today.. Merged to release/2.1 and merged back to dev 167a108f4ef5d95adc1f4264ee22ce0754f7de0c. Moving to mq, since this doesn't seem critical for RC1/RTM. You should just add a derived UserManager that generates the TFA codes how you like by overriding this method:\nhttps://github.com/aspnet/Identity/blob/c6a82ad19a0bdb80b7358dc843b66664bbf33f96/src/Core/UserManager.cs#L2199. @blowdart ?  In general we haven't made these things configurable historically, only via extensibility, . Yup, its here: https://github.com/aspnet/AspNetIdentity. The name isn't exactly super obvious :)  I don't think I'd know what it is from reading it either. We can certainly update the readme on this repo pointing to the other one for ppl looking for the old one\n@blowdart do you want to update the readme with a blurb pointing people at AspNetIdentity for (pre Core identity, and to file issues over there etc since codeplex is shutting down). Will be done automatically in bulk. @ryanbrandenburg what causes those errors?  I see those locally too for release/2.1 (but not dev). @ryanbrandenburg will these failures also happen on the CI or is this just local/pr verification failures?  This PR isn't updating deps. Fair enough, updating deps and will merge that with this PR. c7711c2515c22be25f615eca60ab3348c9ffbd47. @blowdart can you review this one since its mostly a security review that this looks like a 'legit' thing to do. @javiercn sure I can help @kichalla if he gets stuck. You can just mock UserManager directly, whether or not there is an interface shouldn't really affect the unit testing, since you can just treat UserManager<TUser> as the service you mock.. We aren't going to be adding an interface at this point, but if we ever rewrite identity in the future we likely would have a bunch of smaller interfaces instead of a single user manager.. Modifying interfaces with new methods are breaking changes, so having one monolithic IUserManager interface means we wouldn't be able to add methods to the manager.\nIt depends on what you are mocking, you can look at https://github.com/aspnet/Identity/blob/dev/test/Shared/MockHelpers.cs#L19 for how we mock it typically.  \nSometimes its easier to mock the store and just use the real manager. I don't see this behavior, we also have a unit test covering this, so this is most likely something specific to your app/code, if you provider a repro I can take a look\nhttps://github.com/aspnet/Identity/blob/dev/src/Specification.Tests/IdentitySpecificationTestBase.cs#L385. Sure we can discuss, but going with an abstract base class should mean that we can fix #1722 however we want later since it won't be a breaking change to add new methods to the base class. I don't think we should try and actually do the full on thing in 2.1 at all. There will be another PR that adds encryption/protection to these data as well. @ajcvickers updated the PR adding [ProtectedPersonalData] to the token values as well as hooking up converters for anything on TUserToken as well. I left in a test in the key rotation to verify that logins work before and after ( even tho I backed out the changes that protect the external login provider...  this test will be needed in 2.2 anyways). You should be able to go thru Add New Scaffolded Item -> Identity. Yes its meant to validate the password for a particular user, the default implementation doesn't use the user, but there were requests to make it possible to do things like password history requirements which may required access to the user, so its relevant to some validators, you can just ignore it if you don't need it in your validator. It should get set on your user after you CreateAsync the user, see: https://github.com/aspnet/Identity/blob/dev/src/Core/UserManager.cs#L477\n. I don't understand what you are asking.\nSo there are two lockout related properties on the user.\nLockoutEnabled must be set to true for the feature to be enabled for the user at all.\nIf lockoutEnabled = True and LockoutEnd date is set to a time later than now, the user should be considered locked out.. That's correct, if lockout isn't enabled for the user, it won't do anything.  Whether lockout is enabled for a user or not, is a separate field, typically you turn it on via AllowedForNewUsers which is default to on, so typically when a user is registered that flag is set to true.\nhttps://github.com/aspnet/Identity/blob/dev/src/Core/LockoutOptions.cs#L19. Its used in Create by the user manager to set LockoutEnabled here:\nhttps://github.com/aspnet/Identity/blob/a273e349eea2be3a40b16e6947b2deab95f4b5b2/src/Core/UserManager.cs#L477. Yes that's how the code is supposed to work, the user must have lock out enabled, and there must be a lock out end date that's in the future.. a. because unless you want your newly registered user to be locked out, you don't set lockout end.\nb. failed logins should set login end to trigger lockout if its enabled.\nI'm pretty sure I'm not the one that's confused...\nAnyways this behavior is by design. This code hasn't changed in a long time, since before core, and there are unit tests so while its possible there's an issue, I'd assume it would have been discovered earlier.\nIf I were to guess what is going on, users were created with lockout disabled (allowedForNewUsers = false, or by some other mechanism) so their lockoutEnabled = false.  If that's the case, irrespective of what lockoutEnd value is there, that user will never be locked out.\nThe templates indeed do not have this enabled by default as its no longer recommended practice as it allows people to lock out other users.. The new default UI might be making it harder to turn on, did you scaffold any of your pages?. I don't see any issues with the current default UI templates, I tried by just setting\n        services.AddDefaultIdentity<IdentityUser>(o => o.Lockout.MaxFailedAccessAttempts = 1)\n\nAnd then the user on first failure is immediately locked out.. Did you turn the lockout flag on in your PasswordSignIn call in the controller/login action?. The code has moved to https://github.com/aspnet/AspNetCore please reopen this PR over there if this is something you are still interested in. Yeah not good, is this something specific new in rc1 that worked in preview2?. We do have functional tests in identity exercising these kinds of scenarios, so is it something in how the migration is generated now?. Ok I still have preview2 bits, I'll try it. System.ArgumentException: GenericArguments[0], 'Microsoft.AspNetCore.Identity.IdentityUser', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore6[TUser,TContext,TKey,TUserClaim,TUserLogin,TUserToken]' violates the constraint of type 'TUser'. ---> System.TypeLoadException: GenericArguments[0], 'Microsoft.AspNetCore.Identity.IdentityUser', on 'Microsoft.AspNetCore.Identity.UserStoreBase5[TUser,TKey,TUserClaim,TUserLogin,TUserToken]' violates the constraint of type parameter 'TUser'.\nWell its a problem that it found the UserOnlyStore, what's the rest of your startup look like?. Whew :). That would have been a pretty big regression . But yeah changing primary keys still requires a bunch of coordinated changes :/. This shouldn't really affect mocking, you can already Mock SignInManager<TUser> already, existing code is already asking for SignInManager from DI, irrespective of this being a breaking change, adding an interface isn't going to change anything unless all the consuming code was updated to depend on this new interface.\nSee https://github.com/aspnet/Identity/blob/f51af820a5ccf2268b785c62140b29bbb5a24e83/test/Identity.Test/SecurityStampValidatorTest.cs#L105 for an example of how we mock sign in manager today. Looks like this was fixed in 2.1 by someone else, https://github.com/aspnet/Identity/commit/855f7532aeaba3fa65e6ea2502e6b45dca50bab1#diff-a64fb208014d4d9f040794bcac727f2b. PR is: https://github.com/aspnet/Identity/pull/1781. I don't think you will be able to easily (if at all) use IdentityCore without asp.net core, have you tried using the old precore Identity 2.2.x instead?  That likely would be a better fit, you probably would still be able to use EFCore with old identity by plugging in a custom identity store that was implemented using EFCore.. My point mostly is that old MVC needs to work against old Identity/OWIN/Auth, Identity Core is designed to work against new auth/Asp.NET Core.. EF is the only framework out of these 3 that you can mix into either MVC/Identity combination. Not quite, so what I'm saying is you don't mix.  If you are using old precore MVC, you need to use the old precore Identity 2.x, you can't use the new core identity objects at all unless you use ASP.Net core. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity please file an issue if you want to discuss this further. Did you change ApplicationDbContext to reflect the guid key?\nhttps://github.com/aspnet/Identity/blob/dev/test/EF.Test/SqlStoreTestBase.cs#L63. Can you include your full startup.cs and db context?. What version of ASP.NET Core are you trying this on?. Mostly just interested in what version of the identity packages are in your csproj?. Ah yeah this was fixed in https://github.com/aspnet/Identity/pull/1481 and will be in 2.1. I'll add a test to make sure this is covered before closing the bug. This is the code that appears to work fine in 2.1:\n```\n            var services = new ServiceCollection();\n            services.AddLogging()\n                .AddSingleton(new TestDbContext(new DbContextOptionsBuilder().Options));\n            // This used to throw\n            var builder = services.AddIdentity, IdentityRole>().AddEntityFrameworkStores();\n        var sp = services.BuildServiceProvider();\n        using (var csope = sp.CreateScope())\n        {\n            Assert.NotNull(sp.GetRequiredService<UserManager<IdentityUser<Guid>>>());\n            Assert.NotNull(sp.GetRequiredService<RoleManager<IdentityRole<Guid>>>());\n        }\n\n```\nI'll add it to the tests to make sure we don't ever regress this just in case. The behavior is by design, its probably your implementation of Update that is causing issues.  Update should be what's persisting the user.  updating the security stamp should just be setting the property or equivalent on the user entity.. As you have noticed, that constraint where security stamp = security stamp is invalid.  It will never work, so remove it?. The security stamp isn't something that stores can use in a way differently from how its used by identity, its something that the user manger/identity use for invalidating cookies. Add a new field dedicated to that which you use for that.  ConcurrencyStamp or something similar. Please file an issue if this is still something important to you. The code has moved to https://github.com/aspnet/AspNetCore/. We could just leave the class alone, and swap out the default behavior to register UserManager, and then the workaround to get it back would be pretty simple, they could just add the old classes back to DI.... I agree with you that certainly almost noone is relying on this behavior today, the few issues we've gotten were similar to this one where they wanted to turn off the behavior. Yeah pretty unlikely since we added that fairly recently in 2.0, and it literally has the same shape as UserManager. The migration we create is always the same right now @ajcvickers maybe this is something we can consider making smarter in the future.\nTo turn roles back on, you need to uncollapse AddDefaultIdentity back to something like:\nservices.AddIdentity<User, Role>.AddEntityFrameworkStores().AddDefaultUI().AddDefaultTokenProviders()\n. You also need to replace the UserClaimsPrincipal factory with the one that's role aware.\nSee: https://github.com/aspnet/Identity/blob/dev/src/Core/UserClaimsPrincipalFactory.cs#L102\nSo something like\nAddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, UserClaimsPrincipalFactory<ApplicationUser, IdentityRole>\nThis could be potentially a bug/improvement we can make in 2.2 to not require this step.\ncc @ajcvickers @blowdart for thoughts?. Yeah I hear you @natelaff this is probably something we should address in 2.2, @ajcvickers @blowdart agreed?. If you want to use roles I guess you go back to the old:\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultUI()\n            .AddDefaultTokenProviders()\n. The idea behind the new AddDefaultIdentity was to just hide all the AddDefaults, the old AddIdentity apis should still continue to work as before. Yes at the end of the day the only thing roles did was end up adding a Role claim permission, we feel claims based authorization is the direction we want to encourage going forward, you can still accomplish the Role permission via the user claims api. Fixed via https://github.com/aspnet/Identity/pull/1832. You should just work off of the https://github.com/aspnet/Identity/tree/2.1.0 2.1 tree if you want to work against 2.1 and not 2.2. We did most of the decoupling work already in 2.0, you would use only the Microsoft.Extensions.Identity.Core and Microsoft.AspNetCore.Identity.EntityFrameworkCore packages, there might not be very much sugar to register the appropriate services but these should contain everything you need to use identity for win forms for basic username/password.  It doesn't have some of the more complex login apis like password lockout which are today coupled with ASP.NET authentication.. No examples to date, but it should be fairly straight forward, mostly just need to call\nAddIdentityCore on your service collection, and then create a scope before getting the managers.\nIt would look something like:\n```\nusing (var scope = host.Services.CreateScope())\n    {\n        var serviceProvider = scope.ServiceProvider;\n        try\n        {\n            var userManager = serviceProvider.\nGetRequiredService>();\n        var roleManager = serviceProvider.\n\nGetRequiredService>();\n```. @ajcvickers has EF started using VSTS at all?  It looks like all the identity SqlServer tests are timing out/failing in these kinds of builds now.  This hasn't been an issue in the past so I wonder if there's something different about the configuration (timeout too low?). Dupe of https://github.com/aspnet/Identity/issues/1895. Disabling the default UI entirely is fairly easy, you would just replace AddDefaultIdentity with the old AddIdentity/AddIdentityCore with whatever additional stores/additional servicesbut not call AddDefaultUI.\ni.e. something like:\nservices.AddIdentity<ApplicationUser, ApplicationRole>()\n        .AddEntityFrameworkStores<ApplicationDbContext>()\n        .AddDefaultTokenProviders();. We are just talking about making this line configurable right?\nhttps://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/Manage/EnableAuthenticator.cshtml.cs#L159. We could just add something to https://github.com/aspnet/Identity/blob/dev/src/Core/TokenOptions.cs\nso you'd be able to do:\nAddDefaultIdentity(o => o.Tokens.AuthenticatorIssuer = \"Microsoft.AspNetCore.Identity.UI\"). https://github.com/aspnet/Identity/pull/1925. Thanks!. The service stuff hasn't shipped yet, not sure if that's something we should baseline... @javiercn ?. Sounds like you are misunderstanding how these work, Both SignIn/Refresh typically result in the user you pass in being the User.Identitiy.Name.  Refresh sign in just carries over the authentication mode claim from the currently signed in user.  And then signs in the user you pass in.. its the same thing as sign in basically, see https://github.com/aspnet/Identity/blob/dev/src/Identity/SignInManager.cs#L164. It doesn't, it uses the claims principal you pass it. This is intentional, AddIdentity allows arbitrary TUser/TRole types, its AddEntityFrameworkStores that requires TUser/TRole to be derived from IdentityUser/Role. Being tracked in docs. @javiercn do these changes look reasonable to you?. You can plug in your own claimsprincipalfactory to strip out claims from the identity before it gets sent to the cookie.  . Yeah CreateIdentity is the equivalent, if you have any more issues, you should use the https://github.com/aspnet/AspNetIdentity repo for pre core identity issues. Yes this was intentional as we wanted to expose the API from IdentityCookiesBuilder to customize the cookies further. Yeah this is the general pattern of UserManager methods that persist the user.  Update is the only operation that saves the user, and it always runs the valdiation/actions you see.. All of these should work, there was some effort around making it easy to do via SignInManager's CanSignIn method, so 3 is probably closest to how we envisioned something like this working, but the other two options seem reasonable as well.. Thanks. So Create/Update are the methods that actually persist the user, so updates to the poco need to happen before those methods are called to persist the user. The general idea is that Update/Create/Delete are the only methods that should persist to the backing store.  All of the other methods should only be manipulating the user/role.. You can store it somewhere else, it doesn't have to be a property on the user class. You will probably have to plug in a custom UserManager that switches the order of operations and CreateUser and then UpdatePasswordHash in your situation. Or maybe just use the username as the foreign key assuming you don't let people change that. Thanks!. What's startup look like?. Closing due to lack of repro. Because the managers already treat them as case insensitive, what are you trying to do?. that's how they do case insensitive searches... username = Hao, NormalizedUserName = HAO.  One is for display purposes, other is for searching. Feel free to file an issue in https://github.com/aspnet/Docs if you feel the documentation is not sufficiently clear, I believe they are fairly open to PRs as well if you have any specific ideas about how you would like the documentation to be clearer.... Moving to preview1 since this is a product issue not a intrastructure/mq type thing. @blowdart @ajcvickers we actually can't stop registering the security stamp since this is all during configure services, we don't have the final store until the service provider is built, so we must always register the validator.\nToday we reject all cookies when the store doesn't support security stamp, so that is why the cookies are invalidated every 30 minutes.  Maybe the tactical fix we can make here is to just consider cookies always valid when security stamps aren't supported, so instead of getting logged out every validation interval, they will just get a new cookie at that time always.\nSound reasonable?. Fixed via https://github.com/aspnet/Identity/pull/1941. AddDefault uses a different set of apis, but does more or less the same thing except it removes roles functionality by default.\nRoles is the only real difference between the two, they both return IdentityBuilders which can further customize identity.. You can look at the differences here: https://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/UI/IdentityServiceCollectionUIExtensions.cs#L49. It doesn't affect the migration, it just doesn't register any role services by default.  Its not meant to replace any existing identity code.. This sugar is mostly for templates to use to collapse DefaultUI/DefaultTokenProviders . All good. Ah I misread the issue, yep its a bug, we can fix this in 2.2. The default UI does use the DisplayName here https://github.com/aspnet/Identity/blob/master/src/UI/Areas/Identity/Pages/Account/Login.cshtml#L69\nso the templates should be affected by this bug too. Sure that would be great. Thanks @thomaslevesque !. Looks good overall, do you want to try and take a stab at adding a functional test for the UI changes?\nWould probably go in here https://github.com/aspnet/Identity/blob/master/test/Identity.FunctionalTests/ManagementTests.cs#L169 with a slightly different flow that just verifies that the Display name is different for the UI renderings, you would have to change the display name as well for Contoso here:\nhttps://github.com/aspnet/Identity/blob/master/test/WebSites/Identity.DefaultUI.WebSite/Services/ContosoAuthenticationConstants.cs#L9. Thanks merged via 6b257f0abbbe6938c0712b9a8e00b85131ed51d5. The documentation is correct, basically this will generate a new claims principal for the user passed in, with the current auth properties for the current cookie, so this could would let you mix an match a different user with the current user's authentication properties (there isn't much stored in auth properties), so I'm not sure why you would want to mix and match as opposed to just calling SignInAsync directly.\npublic virtual async Task RefreshSignInAsync(TUser user)\n        {\n            var auth = await Context.AuthenticateAsync(IdentityConstants.ApplicationScheme);\n            var authenticationMethod = auth?.Principal?.FindFirstValue(ClaimTypes.AuthenticationMethod);\n            await SignInAsync(user, auth?.Properties, authenticationMethod);\n        }. Feel free to submit a PR to tweak the documentation to emphasize the areas which you think are misleading. Thanks merged. @ryanbrandenburg which branch of the if statement would this go if it appears to be Moq itself being flaky here.  This is failing inside of this, there's basically nothing going on here\nvar store = new Mock<IUserStore<TUser>>();\n            var mgr = new Mock<UserManager<TUser>>(store.Object, null, null, null, null, null, null, null, null);. Ok filed an issue with moq, do I leave this open or close this bug as external?. Recommendation from moq is that we upgrade to 4.9 which might fix this issue. . @natemcmaster I verified that identity seems fine when bumping up my local dependencies.props version of moq to 4.9.0.\nShould I submit a PR to universe bumping up the version here https://github.com/aspnet/Universe/blob/master/build/dependencies.props#L126 ?  Or is there some other steps that also are needed to upgrade moq to 4.9.0?. Ok https://github.com/aspnet/Universe/pull/1350. @blowdart this is actually a (maybe accidental change to the UI) which enabled password failures locking out normal lockouts by default. Replaced by https://github.com/aspnet/Identity/pull/2007. Yeah those failures are not new, vsts is the EF time out issue.  I'm not sure exactly why travis is failing in one instance, but it was failing in the other PRs as well.. Yeah tons of async queries. I noticed that there was some mention of the \"beefy\" ness of the test machines has changed recently?  These tests have been very stable in the past, and only recently have started failing with these out of memory/too many file open type errors.  Have we seen any other similar failures due to the capability of the tests machines being less?. @Eilon should I resolve this optimistically since this seems similar to https://github.com/aspnet/Identity/commit/64af0228d60958cc579b6f323e1912fccf18f61c maybe it was the parallelization that was making things freak out?. Hopefully fixed as well by https://github.com/aspnet/Identity/pull/1944. This is because FindById is using FindAsync which is only available on DbSet.  So you will have to override FindById to change what this method does.  This was originally done for performance reasons I think.  @ajcvickers is this a pattern that is preferred for faster key lookups?  This was a change I made a long time ago at Diego's request.. Ok closing this issue for now then. Hopefully fixed/mitigated by https://github.com/aspnet/Identity/pull/1944. We intentionally decided to move away from the concept of TKey at the manager layer in the initial version of AspNet.Core Identity.  Its up to the stores to provide a mechanism to convert TKey to a string (usually its just calling .ToString()).  The ids are always treated as strings at the core manager identity layer.  That said Stores are free to persist the id string in whatever TKey format (and why the store implementations have a TKey)\nFor your specific example of ints, just call to string before passing into FindById. This is expected, the POCO isn't responsible for any of that manipulation, the managers are responsible for setting the normalized columns.. https://github.com/aspnet/Identity/issues/1895. This behavior sounds expected to me if you have two requests trying to create the user, we aren't locking so they both check that the user name isn't taken and they both try to SaveChanges, and its the UserNameIndex unique constraint that is causing one of the SaveChanges to fail when both requests are trying to commit the update...\n@ajcvickers does this seem reasonable behavior to you?. This appears to be an issue for pre core identity, please open issues for that in https://github.com/aspnet/AspNetIdentity. Sure doesn't hurt to fix it in both. Rick do you want to open a new PR against 2.2 (or rebase this one)?. Its easiest if the fix is done in 2.2 and merged into 3.0, that way we don't have to backport. Replaced by https://github.com/aspnet/Identity/pull/1962. I think this behavior might be by design, @ajcvickers can you confirm?\nIt appears that you need to use a static database name for it to work across requests:\nservices.AddDbContext<ApplicationDbContext>(options =>\n                options.UseInMemoryDatabase(\"identity\"));\nThis works for me, but your new guid name didn't work for me either. Yeah its a method on identity builder, this should resolve: <see cref=\"IdentityBuilder.AddRoles{TRole}\"/>. Looks good do you have permissions to squash/merge this PR Rick?  You can do the honors if so. np, thanks @Rick-Anderson !. @ryanbrandenburg yeah the VSTS builds for identity aren't working yet, there's another bug tracking it, appveyor is green so you should be good. Per triage we will revisit this in for 3.0. @javiercn does this travis failure in the UI stuff look familiar to you?. I think for those situations you would have a derived UserManager where you override the PasswordSignIn/CheckPassword/VerifyPassword methods to do what you need. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity this is reasonable change we would take for 3.0 if you were to reopen this PR over there. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity this is reasonable change we would take for 3.0 if you were to reopen this PR over there. Yeah this has been fixed in 2.2, this is a dupe of https://github.com/aspnet/Identity/issues/1813. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity this is reasonable change we would take for 3.0 if you were to reopen this PR over there. Replaced by https://github.com/aspnet/Identity/pull/2009. You should be able to test users by just calling Generate and Validate right away, see if any of the users fail when doing that...\nvar token = await _userManager.GeneratePasswordResetTokenAsync(user);\n   var result = await VerifyUserTokenAsync(user, _userManger.Options.Tokens.PasswordResetTokenProvider, _userManager.ResetPasswordTokenPurpose, token))\nOtherwise if i were to guess what's going on, maybe the security stamp for those users has changed after the token was generated, that would cause the tokens to be invalid.. @blowdart there aren't any known issues with data protection like this are there?  Since there always could be some issue with dataprotection causing this as well. 3.0 bug: https://github.com/aspnet/Identity/issues/2039. I tried out the code via scaffolding the fix into a 2.1 app and it seems fine:\n\nThis broke a bunch of functional tests so we actually do have coverage, the tests now have some minimal coverage for enabling 2fa behavior with and without cookie consent now.\n@Eilon @blowdart @ajcvickers . They would need to remove this as well I assume?    Or does CanTrack cover that case?. Are you telling me CanTrack returns false by default?  @Tratcher any insight into the behavior?. Updated to assume if no consent feature is there, that means we are good to go (and to allow 2fa). Weird this isn't failing for me locally in master, but its definitely failing on all ci builds right now, @ajcvickers  has anything changed in EF recently?  The submodules updated before these tests started failing were:\nEntityFrameworkCore => 647aed13836f1f4f0d3c3d7f6a9a0165826e3e6a\nLogging => cc90113f450182d472ae155767ff388fc92698e8\nMvc => 13cf754425c6120ac0b062dd51da2b89ac161dc2\nRazor => 4d44639a51643223d5eb4ca317e201845c79d0c3. Okay so something has regressed that has caused the logging mocks to fail @BrennanConroy has something changed in logging recently?\nThis mock logger code hasn't changed since 1.0 probably, but it appears to no longer get called from a log warning:\n```C#\n   // Actual log code which is indeed getting hit:\n  Logger.LogWarning(3, \"User {userId} is currently locked out.\", await UserManager.GetUserIdAsync(user));\n// Mock code which is no longer getting invoked which is recording calls to a string\n        public static Mock> MockILogger(StringBuilder logStore = null) where T : class\n        {\n            logStore = logStore ?? LogMessage;\n            var logger = new Mock>();\n            logger.Setup(x => x.Log(It.IsAny(), It.IsAny(), It.IsAny(),\n                It.IsAny(), It.IsAny>()))\n                .Callback((LogLevel logLevel, EventId eventId, object state, Exception exception, Func formatter) =>\n                {\n                    if (formatter == null)\n                    {\n                        logStore.Append(state.ToString());\n                    }\n                    else\n                    {\n                        logStore.Append(formatter(state, exception));\n                    }\n                    logStore.Append(\" \");\n                });\n            logger.Setup(x => x.BeginScope(It.IsAny())).Callback((object state) =>\n                {\n                    logStore.Append(state.ToString());\n                    logStore.Append(\" \");\n                });\n            logger.Setup(x => x.IsEnabled(LogLevel.Debug)).Returns(true);\n            logger.Setup(x => x.IsEnabled(LogLevel.Warning)).Returns(true);\n        return logger;\n    }\n\n```. @ajcvickers are you ok if I just remove this mocking entirely?  There is limited value in verifying these log messages, we already have tests verifying that the proper results are being returned, and we are only checking it in 5 tests anyways\n. Was fixed by https://github.com/aspnet/Identity/commit/1fde1cc0616f6972ac18540529ac840968853631. Dupe of https://github.com/aspnet/Identity/issues/2036, keeping open to prevent bot spam, . Fixed by https://github.com/aspnet/Identity/commit/1fde1cc0616f6972ac18540529ac840968853631. @javiercn I guess I should let you do this merge now since you have way more changes, I don't think mine should cause any conflicts, let me know if you have any issues. Just to clarify things, we did do some work in 2.0 to enable non EF based stores to use our POCOs.\nWe moved the pocos into a standalone Stores package which also has some base implementations that are not EF specific but tied to our POCO classes:\nhttps://github.com/aspnet/Identity/tree/master/src/Stores\nOur EF based stores derive from the store base classes and implement the abstract methods using EF.  So there's something in between implementing the interfaces yourself, and always using EF as of 2.0.\nIdentity pre core had a IUser interface and one of the big changes moving to core was to eliminate that interface to allow identity to work with arbitrary POCO user types.. Thanks @blankenbush !. @blowdart what code bug are you specifically referring to in here, there's a lot of comments and its not clear to me what behavior is the bug. Yeah that's what I thought, its not really a bug, if this code was still in the template, it makes more sense to change, but since users will need to scaffold and modify the code anyways, they can add that additional 2fa redirect logic after scaffolding, I'm not sure it really make sense for us to add dead code in the library.\n@ajcvickers @blowdart thoughts?. That looks to be errors from the razor UI stuff, maybe the upgrade to 3.0 broke something there?  @javiercn @pranavkm any ideas?. Fix for https://github.com/aspnet/AspNetCore-Internal/issues/1312. If you add a IRoleValidator<Role> before calling AddIdentity, it should skip adding the default one.  Alternatively i believe you can remove service registrations directly as well, but try adding yours first. SignInManager.SignOut expects there to be an external cookie registered as well which is where that signout call is coming, you can either override SignInManager's SignOut method here: https://github.com/aspnet/Identity/blob/master/src/Identity/SignInManager.cs#L206\nOr you can add all of the identity cookies.. The security stamp validator runs every 30 minutes and that's probably invalidating your cookie, you can try removing the registration of that to see if that stops the behavior you are seeing. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity this is reasonable change we would take for 3.0 if you were to reopen this PR over there. The code has moved to https://github.com/aspnet/AspNetCore/tree/master/src/Identity feel free to file an issue if this is something you are still interested in. Yeah its a dupe of #774 same issue, the UI has a model validation attribute which controls that error message, while the IdentityOptions is configuring identity itself. Yep exactly. @Eilon How about if we just do something silly like just using the HashCode as a string: \nreturn password.GetHashCode().ToString();\n. @Eilon Well then I have to comment out all my unit tests since we require a PasswordHasher (no easy way to store plain text passwords, unless you write a no-op passwordhasher like this).  None of the password related apis will work if the default passwordhasher throws...\n. @Eilon I would rather just #if def the entire passwordhasher class and leave the property null in UserManager if we are in k10 instead of having methods throw.  The only value in implementing this class was for the unit tests so they were already running before I got Crypto working.  We can just wait to enable everything at once instead(passwordhasher with crypto)\n. @Eilon These are meant to be only English, so if someone wanted to support non English digit/lower/upper they would override this to do the appropriate thing for their language.\n. @Eilon So that's what we had in identity 1.0, the idea was that they would implement their own UserValidator/PasswordValidator to do anything different.  That option is still available in 2.0, but we were trying to make things public/virtual where it made sense, so developers can also extend/override for reuse.  In K, we will be using DI to fetch the IUserValidator and IPasswordValidator as you mention, but they might still find it useful to derive from the basic validators we provide to start.\n. Mock can't bind to expressions with optional parameters unfortunately :(  So I do have to always specify them everywhere, so there is a bit of unit test tax...\n. I will do so for the real Data implementation, but I don't want any extra complexity in the InMemory one.  The InMemory already doesn't do any of validations that the real stores do (null checks, Disposed checks, etc).  The InMemory stores are effectively only unit test stores...\n. My intent was to hide the cancellationtoken virus as much as possible, in general for the sub interfaces like ClaimsIdentityFactory and User/PasswordValidator, I really don't think forcing this onto implementers is worth it, since we are mostly doing this as best practice/consistency as opposed to expecting these cancellation tokens to be used very often.\n. I guess its really moot, from this article: http://blogs.msdn.com/b/ericlippert/archive/2011/05/09/optional-argument-corner-cases-part-one.aspx\nBasically the signature requires the cancellationToken, whether they make it optional or not, is totally up to the implementer of the interface.  I think we still add value making it optional on the interface, thus signaling to them, that they can do the same (and just ignore it), as opposed to if we didn't do provide a default, that would require more effort for them to figure out what to do with this new cancellationToken.  So my preference is to keep the optional parameters on the interface.\n. Ok I will remove the comment\n. I'll talk to Pranav and see if he's okay with the switch, seems like it should be fine to change\n. Will remove\n. Yep, bug in RoleStore, Resharper warning too, I will make a pass in this file\n. We were mostly mimicking DbContext, which has an SaveChangesAsync()\n. Fixed\n. I will implement this once I'm unblocked, I can't test any of these codepaths currently, so I just left it simple for the initial commit\n. Ok I will make a pass to add [NotNull], perhaps as part of the Async rename PR\n. Fixed\n. Will switch to int in a separate PR\n. @Eilon this is actually a copy paste bug (I copied the class from IEmailStore and missed fixing the comments :p)  UserNames don't have to be emails.\n. Yup I will try to get rid of these as soon as I can (but I'm going to wait until the Sql version is ready to make sure there are no issues there)\n. Yeah Composite keys don't appear to work yet in with EF, I had to do this temporarily to get my tests to pass.  I will try to isolate a small repo and file a bug in the Data repo for this, and add a Todo\n. Because we are using the shared POCO now, the shared poco uses a child entity to represent claims (IdentityUserClaim),  Prior, we didn't clone and just used the claim as is.\n. Switched to static readonly (2)\n. I wasn't sure whether to make this Identity builder and have both RoleManager and UserManager here, or have a UserManagerBuilder and a RoleManager builder.\nThoughts?\n. Okay renamed UserBuilder/Services to IdentityBuilder/Services, still needed a specific GetDefaultServices method per manager, but they share the same builder.  The only downside of this that I can see, is that it forces thinking about TRole even if roles aren't being used\n. Fixed IdentityBuilder return type and also added overload that takes just TUser and defaults to IdentityRole\n. So the pattern I went with was to pickup the defaults from options, but you can still modify each instance directly via its properties.\n. This is injectable with an IdentityOptions constructor already I thought?  I'm currently fetching the instance of this from DI already\n. Fixed all constructors to take Accessor instead\n. Fixed\n. Fixed now using the injected IdentityOptionsAccessor which takes care of creating the IdentityOptions instance itself\n. My understanding was this is the pattern to enforce required non optional constructor arguments.\n. Yeah I hardcoded a default, mostly for the unit tests (MusicStore overrides this to look at config), we could just throw or do whatever happens when no connection string is specified in a DbContext.  What is the right thing to do here?  In Identity 2.0 we looked for a \"DefaultConnection\" by default.\n. Yeah we decided there was no good solution, https://github.com/aspnet/Identity/issues/64 is tracking the connection string logic\n. Will rename to IdentityEntityServiceCollectionExtensions\n. I don't think so, MVC doesn't do anything special it looks like: https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/UrlHelper.cs\n. Can't use same name as that confuses the compiler to call the wrong one, as they are identical methods just with different constraints on the generic types.  The InMemory ones should go away soon, so I'll just remove these for now\n. Changed to EntityIdentityBuilderExtensions\n. Went with AddEntityFrameworkInMemory for now, since I can't remove yet\n. the navigation properties/fixups aren't working completely yet.  I'm working on those changes next\n. No, this PR is big enough without more features :)\n. Yeah this was copied from MVC, and its not run as part of the build, you have to run build stylecop to run it, which is what i prefer\n. I guess I don't understand that pattern, why would the IdentityBuilder extensions which live in Microsoft.AspNet.Identity show up when you import DI instead of automatically when you import Identity?  That makes sense for ServiceCollection which lives in DI, but not as much for the identity specific builder\n. This PR doesn't address normalizing the POCOs, the SQL implementation is using its own User POCO for now.\n. Yeah this is temporary, eventually there hopefully will only be IdentityUser and IdentityRole, or I guess if we have to, IdentityDbUser for the EF specific one\n. Filed: https://github.com/aspnet/Identity/issues/132\n. Sure, I can do that as part of this change since this will effect music store already\n. The TKeys are currently in the shared pocos, I wasn't removing anything.  I just wasn't adding it to the EF specific poco (User). \n. Because its not identical, the pocos are not fully rationalized yet.  Once we decide finally whether TKey is needed or not, then I'll normalize them all\n. I understand that pattern, but the target type in this case is Identity builder which lives in Microsoft.AspNet.identity not DI...\n. This code is in a test project I just moved it there as is.\nOn Jul 10, 2014, at 4:56 PM, \"Diego Vega\" notifications@github.com<mailto:notifications@github.com> wrote:\nIn test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n\n{\n-        public static IdentityBuilder AddEntityFrameworkInMemory(this IdentityBuilder builder)\n-        public static IdentityBuilder AddIdentityInMemory(this ServiceCollection services)\n\nWeren't we going to remove this from product code?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14800688.\n. We don't require it, but I just copied all of the current AddIdentity overloads to be consistent, are you recommending we remove that overload as well?\n. Filed https://github.com/aspnet/Identity/issues/149\n. Yeah I filed a bug tracking this name issue because its a bit cludgey, IdentityClaimsOptions works, but what it really is doing, is configuring what the ClaimTypes we use when creating a ClaimsIdentity, i.e. the User Id => ClaimTypes.NameIdentifier.  User Name => ClaimTypes.Name, etc.  Its already under IdentityOptions, so none of the other child options have an Identity prefix, so we could just call it ClaimsOptions, it only is used by the ClaimsIdentityFactory below, which is why I named it as such.\n. Yeah this was a bit weird, but basically this typically is using the Options that the SignInManager passes in, which itself uses the options off of the UserManager.  It could also get an instance of the Options itself, but currently it just reuses the instance off the user manager.\n. Tracking bug: https://github.com/aspnet/Identity/issues/136\n. Yup, its in System.Globalization.Extensions for K, added ref\n. The property is settable, so it can be null if they do UserManager.UserNameNormzlier = null, which is what we want to allow to easily turn this off.  But by default it won't be null\n. Passing in an IEnumerable looks pretty ugly :(  I think I prefer option #4: we just do nothing and require developers to create their own Noop/null user name normalizer to change the behavior of the normalizer.  It seems like a very uncommon scenario.  \nFor unit tests at least, just nulling out the property is nice, but I can switch this to a null test normalizer instead.\n. Tracking this in https://github.com/aspnet/Identity/issues/177 as its not just the normalizer that has the pattern, I'll make this change in a separate dedicated for this issue PR\n. I'm not a huge fan of the suffix so I only use it for public apis, but I can add it for you, if you like :)\n. Yep will reenable\n. This is actually a bug, filed https://github.com/aspnet/Identity/issues/178 to fix\n. Actually this is not far enough, this is currently dead code since we don't have social logins for templates/samples and I didn't get around to writing the unit test that would have caught this yet (I'll update PR with the fix and test).  Two issues here: this should be passing ProviderKey not DisplayName, and this ExternalLogin API should be taking provider key/ login provider as well.\n. Maybe we are ok then: http://msdn.microsoft.com/en-us/library/gg578045(v=vs.110).aspx\n\"You can call a static pattern-matching method, such as Regex.Match(String, String). This does not require instantiation of a regular expression object.\"\n. \"By default, the last 15 most recently used static regular expression patterns are cached. For applications that require a larger number of cached static regular expressions, the size of the cache can be adjusted by setting the Regex.CacheSize property.\"\n. Sure, renamed to UserNameValidationRegex\n. Samples weren't fixed in the dev branch I guess.\n. yeah probably, so I didn't fix them as part of the build break fix.  But I would for sure notice samples not working in my working branch :)\n. I believe none of the other frameworks currently aren't registering option services, and are leaving it up to the app/consumer of the framework to add the services they use.  Did you need this change to get the config passed into the Options services or just for unit tests?\n. That was already true for identity most classes already took mandatory IOptions.  Also none  of the other frameworks like MVC/SIgnalR, add OptionsServices in their Framework.GetDefaultServices either.  At runtime, options is typically automatically registered by Hosting either during UseServices or ConfigureServices today, so they would be registered twice if the frameworks also registered them.\nMost unit tests just explicitly register the OptionServices as part of the setup, see\nhttps://github.com/aspnet/SignalR-Server/blob/dev/src/Microsoft.AspNet.SignalR.Server/SignalRServices.cs\nhttps://github.com/aspnet/SignalR-Server/blob/dev/test/Microsoft.AspNet.SignalR.Server.Tests/Infrastructure/ServiceProviderHelper.cs\n. I don't think this PR has been rebased after pranav's change yet, so this will probably go away as a merge conflict\n. [:shipit:]\nOn Oct 22, 2014, at 10:45 AM, \"Levi B.\" notifications@github.com<mailto:notifications@github.com> wrote:\nIn src/Microsoft.AspNet.Identity/IdentityServices.cs:\n\n}\n         else\n         {\n             describe = new ServiceDescriber(config);\n-                optionsDescriptors = OptionsServices.GetDefaultServices(config);\n\nSounds good. I'll undo these lines then.\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/237/files#r19230753.\n. So claims are not necessarily unique, I'm assuming the correct behavior is actually to replace all instances of claims with the matching type/value instead of just the first.  Do you agree?  Basically just iterate and remove all matching claims instead of FirstOrDefault..\n. I'm also not sure whether the EF store should be updating the existing POCO or deleting it and creating a new one, but that's an implementation detail for the Store I guess, but this does more closely match an update semantic you originally intended.\n. That's fine, go ahead and file an issue regarding claims uniqueness, that most likely will boil down to a new user option called RequireUniqueUserClaims or something like that.\n. Yeah its fine for now, can you also file an issue to track whether this code should be updating the POCO as opposed to creating a new one?\n. I will once Redis supports auto generating int keys like SqlServer :)  Do you want me to file an issue tracking this?\n. Fixed\n. Renamed class\n. Looks like I already filed a bug: https://github.com/aspnet/EntityFramework/issues/651  And it was closed as fixed, do I need to do something to use this feature?\n. I think you want ToListAsync not ToList()\n. Move this test to UserManagerTestBase instead\n. Yeah this https://github.com/aspnet/Identity/issues/187 is tracking role/email normalization\n. I'm not sure, but today the navigation properties aren't properly loaded at all (since we weren't Including them), so I just commented out all references to them until we either fix them, or remove them\n. Updating email is a security related change, so yeah I think so.  @blowdart agree?\n. We aren't trying to block the scenario where they want to have no validation, if a developer wishes to have no manager level validation, they should have a way to do it.\n. change to\nprotected IQueryable<TUser> LoadUserAggregate(Expression<Func<TUser, bool>> filter)\nreturn base(filter).Include(u => u.Address) \nOr we can remove this and all support for child entities\n. Don't ignore case for the value\n. Use Ordinal only, and verify the query\n. Consider Skip/Take \n. Forget skip/take, go ahead and return the user\n. Return user here as well\n. Yeah, now that we are using the normal EF UserStore in the tests, you can delete this class now.\n. We also no longer need this extension method since we can just use the AddEntityFrameworkStores method now right?\n. The pattern i chose everywhere else, was to throw ObjectDisposed first, followed by NotSupported, then argument validation, so this is consistent with the rest of the code currently\n. Note: GetClaimStore is doing validation that will throw NotSupported\n. Yeah I don't think any of the EF query's are currently passing in the token\n. Yeah looks like you can nuke this entire file as well\n. Putting on my Diego hat, you can just return the task and not await\n. Ah right, PR truncated this to make it look like CreateAsync was the method...\n. Suhas's PR are addressing this\n. Main reason I didn't do that was because every time I add a new error message it will be rev'ing an interface and a breaking change if we do that\n. No, I just copied the signature from the Resources.resx apis. we can split and use string here if we think its better\n. I think unit testing are a valid use case, before this change, it was a nightmare setting things up for unit tests.  Also, this also lets identity be used without DI much easier, I don't think we gain anything by requiring 9 clunky constructors arguments when the defaults are perfectly fine.  We also now have the option of removing some of the services we add by default that are extremely unlikely to be replaced (UserNameNormalizer, PasswordHasher, etc)\n. Its a private property, its basically a field\n. https://github.com/aspnet/Identity/issues/176 is asking for this, basically if you extend SignInManager and want to return your own specific SignInResult, without a class, they are stuck introducing something custom.  They can return their own AppSignInResult with additional methods this way\n. Failed == Default/Unknown/Generic failure, I liked Failed more than Default/Unknown, but you get the idea, its the default 0 enum value.\nThe others failures have specific meaning which the app typically switches on.\n. Also this is the protected constructor, so in general it's only for subclassers if they want to have different flavors of success results, otherwise they would have no way to create a success result.\n. Sure lets discuss, but I actually have the opposite view you have, without these changes, we have a TON of gunk in the code base (with extra null checks, and tons of unit test goop, instead of just a xyz ?? = new Xyz().\n. I also think this should be the new pattern for all of the classes that are consuming options, today everyone has their own mechanism for injecting options in unit tests and its painful, since we have the constraint already that options are new() able, when using DI, the options will never be null, so its safe for our code to always supply a default for non DI scenarios.\n. Is there guidance that says we should always prefer private fields over private properties?  I don't feel strongly either way, but I almost always only use properties nowadays.  I only add fields if I need to do additional logic on the backing fields, otherwise auto properties ftw...\n. For this particular case, we could just make this a public get/set auto property too, it doesn't really matter much here since its just the validator\n. They are public on the managers because that makes it easy for unit tests to just swap in their own descriptors\n. Without the enum, we'd have to have explicit checks/results for each of the enum values, NotAllowed(), RequiresTwoFactor().  Subclassers can and should just ignore the enum for their custom conditions, either by adding their own App enum, or specific methods for their own sign in results.  I don't think they need to interact with our built in enum/logic, they just want to hang their own custom codes in the same result as ours (I think)\n. Sure that looks ok. We can introduce two new factory methods. SignInResult.NotAllowed/RequiresTwoFactor. And have the set on the new properties be protected and kill the enum. \n. Removed enum and added IsXXX properties that have protected set, only default constructor now\n. Changed to take the specific string/int types\n. Compiler does not let me remove setter unless I inline initialize the property, I need to explicitly have a setter for constructor initialize.\n. don't think so\n. Not exactly, they are meant to be logical strings, as opposed to caller, i.e. Logging could print out the error code, instead of the actual error string if desired.  Without the code developers would have to compare against the error strings itself which was a big complaint in the 2.0 stack with identityResult only having an IEnumerable of error strings\n. Oh I see what you are saying, you just meant as a code cleanup to use the attribute instead of nameof?  I don't particularly like that bit of magic as it doesn't even save characters in this situation\n. yeah I just reflexively clean up grey'd out VS code that is redundant.  Compiler is perfectly happy without the cast\n. How about even more generic, IStringNormalizer since we are basically just using it to normalize strings when we want?\n. How about we just drop string and key then, and just do IIdentityLookupNormalizer?\n. Or just ILookupNormalizer\n. We only have one other interface with identity and mostly do not, I will file a bug to rationalize, I think we should drop it from IIdentityMessageProvider.\n. nit: Maybe this should be \"Password is incorrect.\" to match the code?\n. So in general it looks like we are ignoring any potential mid method failures, like this AccessFailedAsync call actually could fail when updating the user (especially now that we have concurrency built in).  SignInManager currently ignores the failure (this behavior is debateable), but we probably should at least consider logging these results if they are failures, even if we don't fail the higher level sign in method...\n. +1, follow same pattern as IdentityResult\n. I think you should have an overload of LogResult that takes a bool and just prints out, instead of introducing a new resource that isn't used except for logging\nCheckPasswordAsync for user: whatever : True | False\n. Perhaps another oveload of LogResult which takes no success code/bool, and just log:\nInvoked MethodName with user blah\n. Actually looks like there should be the following log overloads potentially\nLog(bool, ...)\nLog(...)\nLog(IdentityResult, ...)\nrather than LogResult\n. nit: combine as and is check so you can just test against null\n. same thing combine perhaps rename var to testLogger too\n. name is unused.  remove\n. its more readable putting the as in the declaration rather than the if\n. .Result is gross, we should just have it be LogAsync for now, and take a Func<Task<string>> so you can await it properly\n. I'm not sure what you are asking here, this code is deleted\n. Personally I think this looks kind of ugly compared to the earlier iteration, extension off of false just seems really strange, also now we are passing this everywhere, which makes me think the methods really belong on the appropriate Manager\n. return await false.WithLoggingAsync just looks ugly to me, we are awaiting a bool?\n. Ick await (await ...)  Yeah this definitely makes me think the extension method on the result types are the wrong way to go\n. There's a definite smell if you  are basically passing this to every log method.\n. My main feedback is that I think the switch to extension methods overall makes the code look  worse, and its not worth it, what you had before was better IMO, @divega what are your thoughts?\n. Yeah I said the same thing about the \"this\" smell. Also result extensions is no longer extensible unlike the virtual method. If they add their own derived sign in result with a new status code there is no way to update the logging extension method. \n. I don't really like how we have two LogResult methods here, one for result, and one for bool.  Seems pretty clunky, this might be a sideeffect of removing the virtual Log methods from the various result objects, remind me why we removed the result virtual Log methods again?\n. @divega Sure, I just mean the Result itself should have a say in how to format its log message, whether it does the final log, or generates a string for someone else to log doesn't matter, but the result object should have a say is my main point\n. This change now makes it so we are returning new instances every time the static property is called no?\n. You can make this read nicer with something like this\n```\nreturn (IsLockedOut ? \"LockedOut\" :\n           IsNotAllowed ? \"NotAllowed\" :\n           \"\"\n```\n. Also the default should be Unknown as opposed to empty string.  Also shouldn't these go in a resource for loc?\n. I don't feel super strongly about this one, we can go with them being more like an Enum and they should just match the boolean properties exactly then, since that should be easier\n. nit: I'm not sure if this is the PR messed up or not, but can we make the indentation for all of the checks on the following line on the same indent level with IsLockedOut?\n. So I would say, the two 'success' results for SignIn manager are Success and TwoFactorRequired, all of the other results should be considered failures and logged like user manager failures.\nI would try True/False logging in the same way as UserManager\n. This sort of goes back to my point about the result object knowing how to render its log message, as today you'd have to put a switch inside SignInManager's Log to do this, while I think this decision should be taken care of by the result object (whether its currently a success or a failure).  That was why I origionally suggested for the Log to happen inside the result, while the managers method was mostly just to format the outer string and pass it into XXXResult.Log(outerformat), and the result call the appropriate Log method with warning/information since only the result knows truly whether its a failure or success\n. This is even more clear in the derived result case, when they extend SignInResult with an additional failure, they'd have to override both SignInResult.ToString and SignInManager.LogResult today, instead of just overriding SignInResult.ToString to add logic for any new status codes, and then deferring to the parent behavior\n. So I think we should add a test for each managers demonstrating a derived result class which adds a new status and updates the logging messages to handle them, that should make it easier to review what the extensibility story actually looks like, @suhasj can you add these tests as part of this PR?\n. Are these new tests or copied tests?\n. Isn't InMemoryUser the same as the new shared test user now?  Can we switch this over to use the common POCO?\n. Why do we need navigation properties on the shared test pocos?\n. I would go back to the namePrefix instead of allowing hardcoded user names, those almost certainly will cause issues accidentally if multiple tests pick the same user name\n. nit: Get the user id once and store it\n. You accidentally broke this test, you deleted the HashPassword line above, password should get updated to New\n. So if CreateTestUser only accepts name prefixes, just use SetuserName to explicitly set it to a fixed name after creating the user.\n. Its not about parity, the EF pocos are EF specific, if the navigation properties are not needed for the tests, they shouldn't be there.\n. I would merge the new pocos with TestUser and keep the TestUser name as opposed to the confusing IdentityUser name\n. This is test code not user code, you are creating a pit of failure for us, as if we write two tests that happen to choose the same user name now, they will fail/collide/ do bad things since the user name will exist.\n. Read the test name more closely then :): \"CanUpdatePasswordUsingHasher\"\n. I think all of these methods showing up on the test base smells a bit, a better alternative might be to create a shared ITestUser internal interface and have both TestUser and IdentityUser implement this, then you can revert all of the new async manager calls and just use the old properties again since we can constrain against ITestUser now.\n. What's wrong with having the real users implement an internal interface?\n. or even better, you can put the POCOs in internal shared code, and have the EF one extend and just make it public\ninternal class IdentityUserBase\npublic class EF.IdentityUser : IdentityUserBase { }\n. You should double check with @divega but I'm pretty sure EF needs these nav properties to be public get/set to do their proxy stuff...?\n. Fix the file names for these shared files to match their classes\n. Why isn't IdentityLogger a service?\n. Can we move this creation of the scope to to a private helper, should make life easier if we ever have to tweak the scope\n. Why is IdentityLogger special and protected unlike the other properties?\n. This is a pretty gross looking line of code, personally I'm not a fan of compacting things to the point where its impossible to read due to 4 !'s an or, and 2 &'s\n. can't we just call all of these methods Log?\n. Why is ILogger not a required ctor argument?  Won't everything blow up if its null, there isn't any null checks in the methods currently\n. Can we just call this Logger?\n. I was actually suggesting something like:\nusing (await BeginLogScopeAsync(role))\n. Does anyone actually call Logger.Logger?  The point is that the manager usage looks worse with it called IdentityLogger, that should be the usage pattern you are optimizing for, as its IdentityLogger all over the place right now instead of Logger which is much better\n. If we want to get tricky, we could capture the messages and only create the scope if we have more than one, since we have a using block, we have that control (to defer the logging calls until the end of the using and then decide to really create the scope or not...  I'm not sure its worth it though)\n. So unit testing is a valid scenario, MVC and Http both invested effort to make their classes new()able for ease of use, so I actually don't think this has been completed settled yet. I wouldn't rathole on this now.  Somewhere on my todo list is to revisit unit testing/etc\n. Why not just make them internal extension methods?\n. StartLogScope or BeginLogScope\nEndLogScope\n. That is kind of gross, if we want them public, I would suggest we put it under Microsoft.AspNet.Identity.Logging which makes sense\n. I'm sure we had a bug somewhere, no idea anymore, probably best to file a new one\n. I'm ambivalent, BeginLoggingScope is fine\n. There is no real conflict we don't want these to show up on all loggers unless they explicitly import an identity specific namespace. I just recommend the namespace is identity.logging instead of a random looking internal/infrastructure. \n. My pushback is not against the pattern in general with Infrastructure/Internal, my pushback is that this isn't internal code we happen to make public.  Its a valid extensibility scenario for custom managers to plug in their own logging and use these extensions, so from that perspective it deserves a proper real namespace like Microsoft.AspNet.Identity.Logging, not a funky (don't use this since it has infrastructure/internal) namespace...\n. Eh?  Overkill, just check whether the store supports IQueryable and no-op pass the test if not...\n. I'm honestly not even sure we should build this functionality in at this point, given that we have no such stores :)\n. Why aren't we checking the failure code anymore?\n. This is broken because you hardcoded an email\n. Another hardcoded name (this is why I think we should put the name randomization inside of the helper rather than expecting people to remember to do this...\n. Isn't this backwards?  When would this test ever run today?\n. Yeah these role + guid name lines are all over, move this into the helper just like CreateTestUser\n. Yeah Contains != StartsWith, should be StartsWith\n. We can't simplify the tests to just do equality since we aren't cleaning up the database, so a lot of the tests use the same username prefix, like \"test\", and we only drop/recreate the database once per run.  Rather than trying to manually maintain user name uniqueness, I went with the approach of randomizing the names instead by always jamming on a guid, and then doing StratsWith instead of strict equality.\n. Also it doesn't make sense for CreateTestUser and CreateTestRole not to look the same, for the same reason CreateTestUser's was done the way it was, CreateTestRole should follow the same pattern\n. Why risk collisions?  Change the prefix\n. Empty line added\n. @Tratcher what do you think we should preserve when it comes to the AuthenticationProperties, we definitely want to regenerate the claims, but we want to keep as many of the old settings as possible that make sense...\n. Is it safe to copy everything over then?  Except for maybe nulling out ExpiresUtc and IssuedUtc unless SignIn will take care of restamping those for us...\n. @divega We can consider changing SignIn to mimic the underlying SignIn API more closely, remove IsPersistent and take in a raw AuthenticationProperties which would expose everything \n. This is needed because its sticking a TestLoggingFactory in there will cause the normal ILoggerFactory to not get added(TryAdd will no-op), but we need AddLogging to bring in the ILogger<> service\n. typo?\n. Just squash on merge always works\n. This is me misusing the API, I thought I was specifying 2 indexes, oops, I guess what I meant to do is to have two calls to Index...will update\n. Updated and new table definition now correctly has two indexes\n```\nCREATE TABLE [dbo].[AspNetUsers] (\n    [Id]                   INT                IDENTITY (1, 1) NOT NULL,\n    [AccessFailedCount]    INT                NOT NULL,\n    [ConcurrencyStamp]     NVARCHAR (MAX)     NULL,\n    [Email]                NVARCHAR (256)     NULL,\n    [EmailConfirmed]       BIT                NOT NULL,\n    [LockoutEnabled]       BIT                NOT NULL,\n    [LockoutEnd]           DATETIMEOFFSET (7) NULL,\n    [NormalizedEmail]      NVARCHAR (256)     NULL,\n    [NormalizedUserName]   NVARCHAR (256)     NULL,\n    [PasswordHash]         NVARCHAR (MAX)     NULL,\n    [PhoneNumber]          NVARCHAR (MAX)     NULL,\n    [PhoneNumberConfirmed] BIT                NOT NULL,\n    [SecurityStamp]        NVARCHAR (MAX)     NULL,\n    [TwoFactorEnabled]     BIT                NOT NULL,\n    [UserName]             NVARCHAR (256)     NULL,\n    CONSTRAINT [PK_IntUser] PRIMARY KEY CLUSTERED ([Id] ASC)\n);\nGO\nCREATE NONCLUSTERED INDEX [IX_IntUser_NormalizedEmail]\n    ON [dbo].AspNetUsers;\nGO\nCREATE NONCLUSTERED INDEX [IX_IntUser_NormalizedUserName]\n    ON [dbo].AspNetUsers;\n```\n. Updated to use logging params overloads everywhere\n. @blowdart The doc comments for this were totally wrong :)\n. In a local change that I forgot to push :) Was lost in the merge from the dev branch...\n. Pushed now\n. I don't see any special characters in your username :). Or did it get englisized?\n. Note this change is optional now, either way works (via ConfigureServices or via Use)\n. I copied what Mvc does, they stick it as a singleton so I just mimiced it:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs#L124\n. Updated to throw if same type or non derived type is passed in\n. I still need to go and fix the security middleware Configure methods to be called Add\n. nit: lets not change the ordering of these checks, its possible the unit tests rely on the current priority\n. Can you autoformat the all the files as well?  It looks like you added a bunch of misc white space in a bunch of places\n. Isn't :base() implied?\n. I say this because I personally have never done an explicit base() call\n. My guess is I was trying to avoid calling the store N times to do this check before, so this actually does fix and issue with AddRoles containing dupes itself, that was in the code before.  \nHere's what IsInRole does, AnyAsync should pickup any prior updates correct?:\nvar role = await Roles.SingleOrDefaultAsync(r => r.Name.ToUpper() == roleName.ToUpper(), cancellationToken);\n            if (role != null)\n            {\n                var userId = user.Id;\n                var roleId = role.Id;\n                return await UserRoles.AnyAsync(ur => ur.RoleId.Equals(roleId) && ur.UserId.Equals(userId));\n            }\n. Updated the other overload as well\n. Well UserRoles is a db set and I'm guessing Any is checking against the modified (but not saved) set of roles which is why it catches it.  So we are just relying on the store to do the right thing in the manager.  We could explicitly filter with a Distinct if you want.  Not a big deal, just a question if we want an exception or a silent distinct.\n. I want all subentities to be deleted if the root object goes away (user => roles/claims/logins role => roles)\n. Well I didn't go out of my way to add these :)\nTests fail like so if they aren't there:\nSystem.InvalidOperationException : The association between entity types 'StringUser' and 'IdentityUserRole<string>' has been severed but the foreign key for this relationship cannot be set to null. If the dependent entity should be deleted, then setup the relationship to use cascade deletes.\n. I guess the question is are we missing some setup on the UserRole table to require non nullable keys so this works implied?\n. Cool IsRequired does the trick much nicer :)\n. Hence why I asked him to make it internal, we got rid of the public pattern yes.  But we call this code in two places (with a different key type), so its useful as a helper method.  I can move it into the Builder extension class as a private instead, but the idea indeed was to make this go away from a public API perspective\n. Yeah just seems like extra verbiage.\n. Why do we need both Http and Internal?  HttpContextAccessor is in internal I guess?\n. nit: typo\n. Probably not. I copied this from codeplex as is. I'm guessing it's broken in the same way that normalized user name is.\n. Yeah this was just old files leftover, removing them from the PR now\n. Yeah we pass in nulls in the tests\n. Sure, done\n. These are one off, standalone non shared tests, so they can continue to use the skip attributes\n. Basically until https://github.com/aspnet/Identity/issues/670 is fixed\n. Or forever if we decide this one test project can be windows only :)\n. Well, if we are doing service locator for HttpContextAccessor, the other ones are good candiates too :)\n. Plus the main motivation has always been to make it easy to new up a UserManager that just works regardless of the state of the ServiceCollection.  The only thing it really needs is the Store, all of the other stuff is really optional...\n. I think it really boils down to how much do we care about being able to 'sanely' new up a UserManager.  This used to be something that was quite easy to do, not so much these days.  If we only really support getting a UserManager via services.GetService<UserManager<MyUser>>() then the ctor taking 10 arguments is less of an issue...\n. Yeah I think we just need to defer getting the HttpContext into the Context property getter which will throw then if HttpContext is null, https://github.com/aspnet/Identity/issues/674 basically asked us not to get it in the ctor.\n. The options and logger actually could be grouped with the other optional services, and service located/new'd up if not found.  \nThe only thing that really is required is the IUserStore\n. The guards were mostly unit tests/new passing in null\n. If we do care about new() support, This is what I'd propose for the ctor:\nUserManager(IUserStore<TUserStore> store, IServiceProvider services)\nWhere store is required and must not be null, and we'd look up everything else from the services, and use defaults if needed.  AddIdentity would actually no longer need to register any of these worker services.  It would only register the top level mangers (User/Role/SignIn)\n. We are moving all options classes into the builder namespace?\n. remove to upper\n. remove toupper\n. remove to upper\n. use ==\n. Trust me I don't like this at all...  But its a 'taste' thing...  There will be a more sane looking options pattern where you call\nservices.AddOptions<YourOption>() which registers a singleton and does the mechanical gunk for you...  \nBut, hopefully everyone has the same reaction as you, and we will internally use the sugar :)\n. Yeah well the POR is https://github.com/aspnet/Options/issues/122.  Basically implementors can choose between this pattern and the more magical pattern.  @lodejard feels strongly that this is the proper way to do things for framework code, so alas no sugar for us...\n. It actually will be pretty much the same, you'll need to register your option explicitly is the only difference:\nservices.AddOptions<AppOptions>();\nservices.Configure<AppOptions>(appOptions =>\n{\n    appOptions.Key = \"value\";\n    ...\n});\nYou won't need to change your AppOptions if you use this approach.\nIf you want to avoid using AddOptions, you can do the alternative\n// AppOptions must take the IEnumerable<IConfigureOptions<AppOptions>> \n// and apply them in the ctor if you choose this route\nservices.AddSingleton<AppOptions>();\nservices.Configure<AppOptions>(appOptions =>\n{\n    appOptions.Key = \"value\";\n    ...\n});\n. keeping tokenName for these since we do the same for the other similar APIs, userName, roleName as opposed to only saying just name\n. @blowdart do we want to roll the security stamp if an auth token is updated?\n. Have another name in mind @PinpointTownes \nWe are calling it AuthenticationTokenStore currently, so Get/SetAuthToken matches\n. That is what I'm asking you :)  I'm not sure, but I was leaning against as evidenced by the current state of things...\n. Can we call these methods something more like CreateXyzModel instead of OnBuild since these are called from OnModelCreating?\n. Include the namespace instead of fully qualifying\n. No need for this.\n. No need for this.\n. Chaff to remove?\n. Remove this.\n. The general comment is don't use this. unless its required\n. I think we can shorten these, maybe just OnCreateXyz => CreateXyz\n. @divega This test depends on the ability to affect querys using the \"logincontext\" to affect the filter.  So this is a scenario which required customizing the LINQ query\n. This test also requires modifying a query\n. An alternative way for this scenario to work without exposing all of the querys, would be to extend the user manager and overriding the behavior of the methods to do the right thing, either via new store api or directly applying a query. \n. back to private on these\n. Probably unneeded\n. Scope these tests down again\n. Initialize\n. Use keyDirectory\n. Use this in samples, delete copy in samples, use keyDirectory\n. TRole\n. GitHub pr diff looks messed up try looking at the commit diff. \n. > This is a overload method for placing a default value for one parameter. Should we just have the one of the overload to be virtual? (I assume we can't change this in 1.1.0 since take away the virtual modifier will be a breaking change. But I'm just wondering.)\nI am not sure what the suggestion or ask is here. Can you clarify what you mean?\n. Ah, well the original method was already virtual and should remain so, if they wish to override the method and change the behavior to call the new overload with byPassTwoFactor: true instead, that's their prerogative, its really up to the app what behavior they want for these flags.\n. Weird, I will double check the branch and see why the diff is messed up, perhaps I forgot to push a commit\n. Yeah I did, ok pushed it now\n. @devhammer once you make this last update I can merge this PR\n. I turned on the API consistency test that was only being run on the core package as part of this PR, so it found all of the missing virtuals on the EF stores. The entity types are optional, but they were shared between the two in memory implementations, I can move them back into our shared folder if you like.  The EF store tests don't use them today.  . Just curious why are the MVC versions different than everything else?. I'm not sure how I feel about this block of 32 permutations of true/false, but I guess its a good way to test every permutation :/  But I am not looking forward to any doubling in the future.... Unrelated test cleanup\n. Ah yeah good catch this PR was created before we decided to do that, I'll restore with obsolete. Its no longer internal, since you can implement your own ISystemClock and add it to the container (what we do for tests).  But yeah its definied in the Security/Authentication package. Why not just AuthorizationController?. Is either Configuration or Metadata enough to mean effectively the same thing?. I know we discussed Identity.Service => Identity.ClientApplication(s?), but maybe Identity.Client would mean roughly same thing, so would end up being mostly Application => Client which I think has the same semantics but is shorter. something to consider for later anyways\n. GetSection never returns null, it will always return an empty section at least. These were just to disable the no doc comment warnings for all the new classes. This is the important method to review, as its doing the mega type inference we need to do for the custom poco scenario. ICookieValidator and have both of them derive from that instead.  Assuming that's not a breaking change. I don't think we need to update this package, it never was officially released and is more of a prototype/sample anyways.. Does this test require the FakeDataProtectionProvider?. Hrm that's strange, have you tried running the tests without your changes does a clean dev branch run work on your box?. I think we should just use UI everywhere as opposed to spelling it out UserInterface in some places and UI in others.. .UI namespace?\nNit: 8 word name seems excessive, calling this ConfigureRazor is probably just as good? . Put everything in this assembly in .UI?. Nit: class ConfigureStaticFiles. nit: shorten to UIControllerFeatureProvider?. Update namespaces to be IdentitySample.DefaultUI in this sample?. This doesn't look right.  This should be a no-op if name != IdentityConstants.ApplicationScheme, you should just ignore the other constants.  . this can probably just be:\n``\n   class ConfigureApplicationCookieArea : ConfigureNamedOptions<CookieAuthenticationOptions> {\n        public ConfigureApplicationCookieArea() : base(IdentityConstants.ApplicationScheme, o => {\n                options.LoginPath = \"/Identity/Account/Login\";\n                options.LogoutPath = \"/Identity/Account/Logout\"                \n                options.AccessDeniedPath = \"/Identity/Account/AccessDenied\";\n         }\n     }\n   }\n````. Actually now that I think about it, this might be a good use case for using the newConfigureOptions` that we added for 2.1:\nhttps://github.com/aspnet/Options/blob/dev/src/Microsoft.Extensions.Options/OptionsServiceCollectionExtensions.cs#L139\nBasically you can write a single IdentityUIConfigure setup class that implements multiple IConfigure[Named]Options, so this method could just call that with the uber setup, and setup the identity cookie + add the EmailSender service. You don't want the name == null check, that's something the base class uses for ConfigureAll, you only want to target Identity's ApplicationScheme cookie. This one is kinda EF specific, but this is in Core because we are going to be adding the ProtectUserData stuff here as well, and Core will need to enforce something when the new flag is true...  \nI was going to have StoreOptions be stand alone in the .Stores package if not for the next PR. Yeah, so existing apps wouldn't be setting the MaxLengthForKey, so its only if they set it that they will be opting into the new 2.1 schema...\n  . And if they don't want the breaking change, they can just remove the setting or set it to 0 to turn it off and its just like before\n  . The default implementation basically never will fail,  it would only blow up with an exception, but this is a valid point, I guess we should only sign out if it succeeded. The UserName is the email, the user id is a guid by default, but this is the pattern the existing templates use for logging I believe.  \n. Yeah we don't, I'll remove. \"This action will delete your user.\"\n\"This is unrecoverable.\"\nmeans you can't recover your user after you delete it.. So most things in manage are doing some form of RedirectToPage...  is one better than the other?. Don't worry about the exact text yet, I'll update that shortly.\nre hook, not really, ideally we'd have an easy way for them to just drop in a new DeletePersonalData.cshtml.cs to take over this work entirely to customize.  Or I guess scaffold it all and change the code if that feature doesn't make it.... Yeah so after they get deleted, manage will no longer be valid, so I really was just trying to redirect to home or whatever.  Unless we think its worth adding a dedicated page for a Deleted confirmation . Change IPersonalDataEncryptor to singleton in AddPerosnalDataEncryptor. The error shows up at the top in the summary and at the bottom (below the password field) with this change so I think i'll leave it as is, so its only shown at the top. REVIEW: Is this the 'right' way to get the buttons on the same row?. @blowdart text help? . This isn't forgetting the login cookie, note this is only clearing the two factor cookie, so it will be more that you will be prompted for two factor again in your next login.. Maybe? \"Forget two-factor for this machine\". Yeah I just meant the banner text is wrong, we can show a banner, altho we aren't consistent about this right now I don't think. @pranavkm what's the best pattern to follow for displaying the banner, do I need to go the full on Html.Partial/_statusMessage route that Manage/Index is currently doing?. Actually I'll just use the existing statusMessage partial in here, @blowdart should we add status messages for all the buttons on the TFA page to be consistent?. Ok sounds good.. I'm going to switch to using the StatusMessage consistently so all the manage views are consistently using the same partial and naming rather than mixing Banner and StatusMessage.  I'll also add some messages that will get shown at the top like\n\"Your authenticator app key has been reset, please reenable using the new key.\";\n\"You have successfully added an authenticator.\". Why does logout need authorization, what happens if someone tries to logout when they aren't logged in?. Yeah this is intended, I'll just nuke the comment. <partial name=\"_StatusMessage\" asp-for=\"StatusMessage\" /> without the \"Model.\": right?  I'll update all of the views to use this pattern\n. So interesting, when I make this change to Manage/Index we get an exception, while the old HtmlPartial works...  Is this indicative of a bug somewhere else?\nThe model item passed into the ViewDataDictionary is of type 'Microsoft.AspNetCore.Identity.UI.Pages.Account.Manage.IndexModel', but this ViewDataDictionary instance requires a model item of type 'System.String'.. This seems kinda yucky to have to do this, basically wrapping a call to signInManager in an abstract class . So constraining TUser to be IdentityUser is kinda bad.  Identity is supposed to work against any TUser.  Our templates used to be completely agnostic and only go through the userManager to access data from TUser, only recently was this relaxed a bit to directly access things like user.Id.  \nOnce we start doing things like this, the ui will basically be even more tightly coupled to the default pocos provided in Identity.Stores.\nThat might be fine for the default UI, but just one of the original goals of identity was give apps as much control over the user poco as possible.\nBasically stuff like this won't work...\nservices.AddIdentity<CustomNotAnIdentityUser, CustomNotIdentityRole>().\n   .AddCustomMyOwnStore()\n   .AddDefaultUI(). I'm with @pranavkm seems easier to just pass in UserType and that lets you get rid some of the TUser : IdentityUser constraints as well . So my concern mostly is that this looks a bit like generic hell where we have a whole lot of complexity just trying to tunnel the TUser to the right place...  This is going to show up in the scaffolded code too?. Basically I think the whole public non generic model that throws not implemented + internal derived generic model is kinda gross. Okay, if this weird model stuff isn't going to show up in the scaffolded code, its not as much of an issue. Should we just use the ui sample for the functional test?  kills two birds with one stone as we don't have to worry about the sample not working :). Should this check the redirect location is the login page?. nit: don't need to remember the result here. Oh never mind, the test website is doing most of the test/asserts. As we discussed, I think long term it would be ideal if we could point the functional tests against the sample ui site, maybe something to track as a future enhancement/issue. @javiercn can you review the fix for the TFA page that was missing OnPost, is this the correct fix? . Is there any way to detect this defect via some kind of reflection test?  Is it safe to say that every page in the default UI should have these two as public virtuals?. Was this a root cause of one of the bugs?. I think the easiest thing to do is add a new page to https://github.com/aspnet/Identity/tree/dev/test/WebSites/Identity.DefaultUI.WebSite/Pages which just prints out the claim so you can confirm that its still there...\n. Its not clear what you are testing here, it'd be better if you specifically call out what claim you expected, i.e. instead of Claims.Last().Value select the claim you expect to be different.. replace encrypt => protector, also in IEncryptedUserStore => IProtectedUserStore. I think this is because the test is tracking the external cookie due to .SetupGetUserClaimsPrincipal(user => principals.Add(user), IdentityConstants.ExternalScheme) isntead of the normal application cookie. Yeah that looks fine\nminor nit: maybe cleaner if you refactor the helper method to a single one like this: AssertClaimsEqual(principals[1], principals[2], \"AspNet.Identity.SecurityStamp\") \nAssertClaimsEqual(principals[1], principals[2], ClaimTypes.AuthenticationMethod) . Do we need to baseline prerelease non shipping alphas?  . So we actually need to get rid of the IdentityUser constraint entirely...and we certainly don't want to bring in the TKey either...\nI believe the new TUser calls are what's tying you IdentityUser since its using the UserName/Email properties to initialize.\nI think if you introduce a UI service like TUser IUIUserInstanceFactory<TUser>.Create(string userName, string email, and we can add some logic to AddDefaultUI to automatically register a concrete UserInstanceFactory<TUser> that does what we do today whenever TUser is an IdentityUser, otherwise we don't, and the app will need to register the factory. The good news is this will be a lot simpler since it will probably only require that TUser is a class. Yeah unfortunately that won't work, CreateAsync validates the user which requires a user name to be set at a minimum, and potentially a non null email if that was required as well, otherwise all usermanager operations will be rejected.  The idea is that it was up to the callee to create TUser however they wish and then call CreateAsync when ready...  Its an abstraction that isn't needed for IdentityCore, but its now a new abstraction that is needed for the UI :(. You can use the IUserStore service and cast it to IUserPasswordStore. This name is pretty meh, maybe we should just call it IUserFactory with a Create method. We can be a bit smarter than this too I think, with IdentityUserFactory<TUser, TKey> : IUserFactory<TUser> where TUser : IdentityUser<TKey> and use reflection on builder.UserType to see if its a derived IdentityUser and then register the appropriate closed IdentityUserFactory. . How would a new constraint help when to be able to save a user both a UserName / and or Email must be set as well.. Nope: https://github.com/aspnet/Identity/blob/85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c/src/Stores/UserStoreBase.cs#L35\nThose are tied to identity user as well.. That will work, with the tradeoff of requiring overriding multiple views required whenever they want to add required data, but if that's already required I guess that's fine.\n. This is sorta breaking the abstractions though, the whole point is you aren't supposed to use the stores directly, only the manager...  . The password hash null check is unavoidable since the only workaround would be calling AddPassword with a null password and checking if that fails, which is super gross.. You'd have to do a cast/check to make sure the user store even supports Email as well going this route.... I think in the end, the core abstraction that the UI needs to introduce around custom users, is around the registration model and creating that initial instance.\nBasically what's needed is a way to plug in a user data schema (property name + data type), and generate some UI around that data by default, and then create a TUser instance with that data, and then pass that into Identity Core.\nWe can file an issue to track this separately, I guess for preview 2 we can just hack something in that works for now and revisit this in rc if needed\n. Yeah I commented earlier, maybe on an older version, but this should be smarter and user reflection and set things up properly for any derived IdentityUser<TKey> derived TUser type. Nit: does this not default to CancellationToken.None?. passing in the RequestAborted token is the 'correct' thing to do, but I'm fine with just using the default behavior here. Nit: what do you think about making this public instead of internal?  Not a big deal either way but I could see this being somewhat useful potentially.. This is pretty gross, what's the scaffolder going to generate?. Isn't this supposed to be using PocoUser?. Just rename TestUser => PocoUser then. code smell doesn't go away just because its internal :)  \nI thought we agreed that there was no supported scenario where they would be using the built in pages with a custom user, that the expectation is that they MUST override these with a custom user.  If that's the case, can't we just constrain these pages to be IdentityUser?. So I think we can just check in the ctor and throw if TUser isn't derived from IdentityUser<TKey> and you can say they need to override the model in this case.\nThen we can just set the properties via reflection. Sure I'll update this instance since I'm editing this, but I don't want to update all the resources that need this change in this PR. @javiercn is this the recommended way to verify this change in the UI tests?. Updated with link and some words. I think this would be better in the AddIdentityCore methods, since no one actually will ever see the intellesense for the class since these are extension methods on Builder . But maybe just say Role services are not added by default but  can be added via .AddRoles<TRole>. Weird yeah seems fine. Yeah basically its possible they would want to set arbitrary data from the register page into the initial user before saving it to the identity store via IUserStore.Create(user).\nAge, Gender, SSN, etc...  \nThe factory in this PR is an abstract class instead of an interface so we can add something like\nTUser CreateUserInstance(IDictionary<string, string> registerData) in the future if we wanted without a breaking change. ",
    "davidfowl": ":shipit: Tho it doesn't merge anymore\n. @HaoK yes you do (hopefully it won't cause issues). Check out https://github.com/aspnet/Tooling/blob/master/README.md\n. :shipit: \n. :shipit: \n. Which components in particular? Do we need another repository split out from this out from this one?\n. Change net45 in your project.json to net451\n. A good way to keep up with the changes would be to look at mvc music store (the dev branch) https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/Startup.cs\nhttps://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/Controllers/AccountController.cs\nSo you can avoid filing these bugs in the future.\n. @VahidN Could you create a github repo instead of attaching a zip?\n. I haven't really looked by why is there async logging?\n. > If you implement your own identity store you'd use that in an app that already adds an identity dependency.\nThis is about library authors not apps. Applications always pull in everything so it shouldn't be used as an argument about not layering.\n. Whatever extensibility points existed in identity.\n. Not that I'm aware of. It's one of the few repositories that don't pass on travis. We should skip the localdb tests on mono.\n. Like, but oh man is this a breaking change\n. This repository doesn't have the Katana/OWIN implementation so not sure if this feedback is relevant to the new API surface.\n. Use it if it exists and all cancellation token overloads with default values. The functionality lost isn't that critical\n. +1\n. Not sure what you are trying to do. Why are you trying to run the library? \n. This is a bug and should be fixed \n/cc @muratg @Eilon . I agree, Hao an I spoke about this earlier and threw around some ideas. I don't think identity should set the default scheme at all and should have extensions methods on both IServiceCollection and Authentication builder.. >  I think your intent is that this is meant for the external authentication middleware, right?\nNo, it maps to any call to SignInAsync without parameters.\n\nPerhaps the optional scheme param on all the HttpContext APIs should be removed and make it explicit. Given these global defaults and the implicit behavior, it seems brittle.\n\nIn what version? 3.0?. Since we're not making any breaking changes, are you suggesting we add another setting?. :trollface: . C#\n.AddDefaultCookies() // Adds and configures default cookie auth\nI don't like this method at all. Feels like it should be on AddAuthentication directly. Always force the user to make those 2 calls. \nAre the identity cookies usable without identity? \nC#\nservices.AddAuthentication()\n         .AddApplicationCookie(o => { })\n         .AddExternalCookie(o => { })\n         .AddTwoFactorRememberMeCookie(o => { })\n         .AddTwoFactorUserIdCookie(o => { })\nVS\nC#\nservices.AddAuthentication()\n         .AddIdentity(o => { \n              o.ExternalCookie.Enabled = true;\n              o.TwoFactorRememberMeCookie.Enabled = true;\n              o.TwoFactorUserIdCookie.Enabled = true;\n          }). > So you are thinking of something like this? Where AddAuthentication is always required:\nYep! They would all default to true as well. How do you configure each of the cookies today? Can you (and would you want to)?\nI have more questions about this code block:\nC#\nservices.AddIdentityCore<ApplicationUser>()\n                .AddRoles<IdentityRole>()\n                .AddEntityFrameworkStores<ApplicationDbContext>()\n                .AddSignIn() // Adds SignInManager (works against IdentityConstant schemes)\n                .AddDefaultTokenProviders();\n\nIs ApplicationUser a poco? It can be used without EF right? What does that look like?\nWhy is AddDefaultTokenProviders an addon and not on by default? Is that because this low level API adds nothing by default?\nHow do things fail if you forget one of those essential calls?. > You can currently configure the cookies today via their names using named options, we have sugar for the main application/external cookies via ConfigureApplication/ExternalCookie, typically people tweak things like the expire duration. Or if they want to disable the security stamp validator.\n\nThat will be much cleaner with this new model if those are properties on the options. Those other top level methods are a bit gross.\nCan you update the sample with the default schemes configured?\n. AddIdentityCookies can only be called once right?. @Buggyy this is by design.. It doesn't.. One of the major driving forces behind this request is the fact that identity cannot be used for tracking users today in a SignalR application because of this logic. When developers try to query a user using the user managed in OnDisconnectedAsync, it blows up because the connection is already disconnected which means the token has already tripped.. > Ah so this is just limited to Identity? \nYes. Identity is the only thing in our stack that implicitly uses the IHttoContextAccessor.\n\nWhat about users not using SignalR and depending on the current behaviour?\n\nIt's a breaking change but my guess is that it won't affect a majority of people using this API. They'll see less exceptions. \n\nWhat sort of existing use do you want to kill just to support SignalR? \n\nThe one risk would be that if the client disconnects, it will no longer cancel the user manager operation. So say your FindUserAsync operation took 5 minutes, it would no longer be automatically cancelled if the client closed the browser (or the reverse proxy dropped the connection). But to be honest, nothing else does this.\n\nWhy can't SignalR do it another way?\n\nBecause it has nothing to do with SignalR. If you're in an ASP.NET Core application with Mvc, SignalR and Nancy, you get the AspNetUserManager which has this behavior. We could tell users to stop using it and deprecate that type and instead just use the base UserManager. \n\nWhat does ASP.NET expose cancellation tokens for?\n\nTo detect client disconnects. Most APIs take them in as arguments, identity happens to be the only one that uses the implicit token in all database operations. It's most commonly used today when you have a long running operation and you want to cancel it in response to the client going away. We use it today here https://github.com/aspnet/StaticFiles/blob/6b18dea711c510023d458ad8a1deb529e770cb50/src/Microsoft.AspNetCore.StaticFiles/StaticFileContext.cs#L336 (noticed how it's passed in explicitly). > Well, you know we don't do breaking changes in minor dot releases\nYes we do. We do all the time. It's case by case. We broke a bunch of behaviors going from 2.0 to 2.1. \nRegardless, I think the risk is extremely low here. I'm willing to have somebody challenge that though. Yea, so that was my other thought, maybe we just don't register this impl by default anymore. I'm not sure what's more breaking though. . Yea that\u2019s fine. If you do change the injected type, anyone that was expecting to take an AspNetUserManager would be broken. I dunno if people do that but it\u2019s worth calling out.. /cc @javiercn . Unit test?. Nuke this, we're not exposing this.\n. This type should never call build\n. Is this dead code?\n. This can't be null. Unit test?\n. Ahhh, we don't really had a great way to detect optional services. Are these things really not required?\n. Huh?. These can be simplified too. ",
    "GrabYourPitchforks": "We shouldn't get in the habit of checking in placeholder insecure code.  These unfortunately have a nasty habit of making their way into finished products and causing grief for us and our customers after release.\nI have a pending pull request in the DataProtection library that exposes a replacement for RNGCryptoServiceProvider and Rfc2898DeriveBytes.  You can use these APIs if you want.  See https://github.com/aspnet/DataProtection/pull/6 for more information.\n. @HaoK looks good - thanks!\n. ConfigureAwait(false) is a no-op going forward since none of the hosts will have a sync context.  (There's still an open question as to whether the sync context class even exists in K, which would render this whole thing moot.)\nI have a separate thread with Eric where we're working on ways to flow culture across await boundaries.\n. FYI, because https://github.com/aspnet/Identity/pull/237 was just merged this item is now of higher importance for upgrade scenarios.\n. :shipit:\nRe: HMACSHA1, you should be able to call HMACSHA1.Create(), HMAC.Create(\"HMACSHA1\"), or something similar.  I forget the exact syntax offhand.\n. Yeah, you definitely need to bump the version byte in front of the hashed password for this to work.  This is the scenario that SuccessRehashNeeded was intended for.\n. This PR is superseded by https://github.com/aspnet/Identity/pull/237.\n. :shipit:\n. Generally disclaimers are part of the MSDN docs rather than Intellisense. In an ideal world very few people would be touching these APIs directly anyway.\n. They actually have 122 bits of entropy. Regardless, as of the last time I looked at the code base, the security stamp doesn't need to be secret or unpredictable. It's used simply to version existing payloads like refresh tokens or reset tokens. If the security stamp in the incoming refresh token doesn't match the security stamp in the DB, then the request should be rejected. The refresh token in the incoming request should be integrity-protected (the DataProtection APIs take care of this automatically) so that the client can't mess with the embedded security stamp.\n. Ah, I thought there was an additional source of entropy for the TOTP code paths. This is something @HaoK and @blowdart should look at.\n. PasswordHasher now takes a mandatory IOptions in its ctor, which means that Options must be registered here.\n. Yes, this line will go away.\n. Sounds good.  I'll undo these lines then.\n. ",
    "bricelam": ":shipit: Although you may want a second pair of eyes with more Identity knowledge.\n. @AndriySvyryd lol, seems weird for someone not from the Identity team to be involved. I'll wait for one of them to sign-off too.\n. FYI, I was able to re-implement the password hasher using the Windows.Security.Cryptography namespace.\n``` C#\npublic static string HashPassword(string password)\n{\n    var salt = CryptographicBuffer.GenerateRandom(SaltSize);\n    var passwordBytes = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);\n    var deriver = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha1);\n    var passwordKey = deriver.CreateKey(passwordBytes);\n    var parameters = KeyDerivationParameters.BuildForPbkdf2(salt, Pbkdf2IterCount);\n    var subkey = CryptographicEngine.DeriveKeyMaterial(passwordKey, parameters, Pbkdf2SubkeyLength);\nvar outputBytes = new byte[1 + SaltSize + Pbkdf2SubkeyLength];\nBuffer.BlockCopy(salt.ToArray(), 0, outputBytes, 1, SaltSize);\nBuffer.BlockCopy(subkey.ToArray(), 0, outputBytes, 1 + SaltSize, Pbkdf2SubkeyLength);\n\nreturn Convert.ToBase64String(outputBytes);\n\n}\npublic static bool VerifyHashedPassword(string hashedPassword, string password)\n{\n    var hashedPasswordBytes = Convert.FromBase64String(hashedPassword);\nif (hashedPasswordBytes.Length != 1 + SaltSize + Pbkdf2SubkeyLength || hashedPasswordBytes[0] != 0)\n    return false;\n\nvar salt = new byte[SaltSize];\nBuffer.BlockCopy(hashedPasswordBytes, 1, salt, 0, SaltSize);\nvar storedSubkey = new byte[Pbkdf2SubkeyLength];\nBuffer.BlockCopy(hashedPasswordBytes, 1 + SaltSize, storedSubkey, 0, Pbkdf2SubkeyLength);\nvar passwordBytes = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);\nvar deriver = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha1);\nvar passwordKey = deriver.CreateKey(passwordBytes);\nvar parameters = KeyDerivationParameters.BuildForPbkdf2(salt.AsBuffer(), Pbkdf2IterCount);\nvar generatedSubkey = CryptographicEngine.DeriveKeyMaterial(passwordKey, parameters, Pbkdf2SubkeyLength);\n\nreturn CryptographicBuffer.Compare(storedSubkey.AsBuffer(), generatedSubkey);\n\n}\n``\n. @davidfowl I talked to @divega and @rustd about the scenarios I'm hoping for. I think the plan is to have some building-block components that are portable (likeUserManager) that the OWIN-specific parts would build on top of (and tie together into nicer APIs).\n. Oops, I need to update the .sln and .kproj files too.\n. :shipit:\n. @ajcvickers has been working on the type mapping.\n. I think he just means it needs to not havemax. You can definitely put an index onnvarchar(450)columns.\n. Should be in dev via aspnet/EntityFramework#2300\n. Recalling. After chatting with @Eilon, we decided that adding the facades to user'sproject.json` is an acceptable workaround.\n. Did they remove the native SNI version from the package? It's odd to me that that wouldn't resolve for the closure of packages on Windows anymore.. Could surround with #if NET45 to keep coverage on net45\n. ",
    "AndriySvyryd": ":shipit: \n. I don't see anything wrong with this code, so it's probably a bug in EF\n. @rustd Not currently. Talk to @divega if you think it should.\n. @divega Yes\n. @brockallen It would be helpful to have a full repro for this.\nSome of these type of issues should be fixed by https://github.com/aspnet/EntityFramework/pull/7044 as it will set ValueGenerated more consistently\n. Assuming that waiting for the write operation to finish isn't required to proceed with execution then it's not necessary to await on it.\n. If the call is not awaited on it will have nothing to do with the calling thread.\nAlso if an exception is thrown during execution of the called method it will not be observed unless there's a handler registered on TaskScheduler.UnobservedTaskException\n. ",
    "divega": ":shipit: but please squash your commits before you push\n. Still more work is needed to fix it on desktop .NET 4.5.1 (see aspnet/XRE#1211) but should be ok to stop tracking it on Identity /cc @DamianEdwards \n. I say :shipit: based on my current understanding and bugs like http://aspnetidentity.codeplex.com/workitem/2060. It would be good to get other eyes into it though, e.g. @GrabYourPitchforks, @AndriySvyryd, @davidfowl and try to arrive to a common way to handle this in K as much as possible. \n. :shipit: \n. :shipit:\n. :shipit:\n. Besides the suggestion to add a few TODOs, this looks :shipit: to me.\n. Looks :shipit: to me.\n. :shipit: \n. Can you please split this in two separate bugs? :)\n. As we talked about yesterday afternoon with @haok, we need to move the definition of the abstraction of the SignInManager to Core, then we make the \"web security\" implementation of it rely on OWIN. This should not only give us what Brice wanted but also nice DI registration extension methods.\n. besides the feedback, :shipit: \n. I hope we can find better naming but this unblocks the template improvements. :shipit:\n. Yes. @rustd just filed a bug: #92. @eilon you think we need better names for the templates, i.e. today?\nSent from my Windows Phone\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd5/\u00fd15/\u00fd2014 19:16\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Add AddIdentityEntityFramework (#91)\nYeah this name is ummm... yeah... it leaves something to be desired. Can we come up with a better name fairly soon?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/91#issuecomment-43288712.\n. Ok. We need a name that represents adding Identity services but that is specific to the EF implementation. This avoids chaining methods that have duplicate generic arguments to configure the Identity services. My first idea for this was AddIdentityWithDbContext<ApplicationDbContext, ApplicationUser>(). Other options considered were AddEntityFrameworkIdentity, AddIdentityDbContext, AddIdentityWithEF, etc.\nI also think we should rename AddSecurity to something else, e.g. AddHttpSecurity or AddWebSecurity.\nSent from my Windows Phone\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u00fd5/\u00fd15/\u00fd2014 19:47\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Add AddIdentityEntityFramework (#91)\nI'd really like to not see that name in a template. We did a lot of great naming work for alpha so we should try to keep the bar pretty high.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/91#issuecomment-43290033.\n. belated :shipit: \n. :shipit: \n. Besides the actionable comments :shipit: \n. And this is temporary until we remove the requirement to provide that constructor in EF.\n. Shouldn't we keep the item open for the remaining post-beta work?\n. Cool!\n. We discussed this offline. It has nothing to do with MusicStore anymore, but it is an Identity sample that we will maintain from now on.\n:shipit:\n. Minus the feedback, this looks :shipit: to me.\n. :shipit: \n. We rely on application startup to setup up the dependencies correctly so that they can be resolved later via DI without violating the layering: some of those dependencies live in Microsoft.AspNet.Identity.EntityFramework.dll and Microsoft.AspNet.Idetity.Authentication.dll, while UserManager is defined in the root Microsoft.AspNet.Identity.dll. \nA possible alternative to DI is to wire up explicitly the dependencies in a method that is executed once per UserManager instance, e.g. similar to the OnConfiguring method that EF's DbContext provides and that can be overridden in a derived DbContext. \nBut before we try to do anything like that we should discuss what exactly it mean to \"get the UserManager locally\". It is not clear to me that there is a compelling scenario there for us.\n. Thanks for the feedback. The idea is to encourage other providers for Identity to supply their own setup extension methods so that dependencies can be wired up as it is most appropriate. That can include setting up custom stores that use other persistence means but also setting up the lifetime of dependencies differently.\n. Just to clarify a bit: we are moving towards having the extension methods defined on the provider, e.g. in one of our latest PRs we have AddIdentitySqlServer defined in Microsoft.AspNet.Identity.EntityFramework which will do all the appropriate setup to make EF + SQL Server work. We still have AddIdentity  defined in Microsoft.AspNet.Identity but right now it is not super clear who should be using that.\n. :shipit: \n. :shipit: \n. Looks :shipit: to me. Do we need any additional reviews for this?\n. Besides the feedback, looks :shipit: to me.\n. :shipit: \n. Besides the feedback, this looks :shipit: to me.\n. :shipit:\n. :shipit:\n. @HaoK and I talked, and we agreed to try getting rid of the UserLoginInfo abstraction altogether. It will mean that AddLogin and RemoveLogin will take the necessary discrete parameter directly. \n. Actually I believe it would be ok to only return it from the GetLogins API. AddLogin and RemoveLogin can use discrete parameters (and create an instance of UserLoginInfo inside if necessary).\n. :shipit: but would like to chat about the change to loginInfo in AddLoginAsync and RemoveLoginAsync to be sure it is right.\n. :shipit:\n. Besides #178 looks ok to me. :shipit: \n. We should be consistent across frameworks on the approach we take here. We should discuss with others.\n. The return value of EnsureCreated() indicates whether the database or tables were created (we currently don't have actual doc comments on the API but we have a TODO comment on this). As the name tries to convey, the method won't try to create the database and tables if the database and tables already exist. \nIn the template code we don't pay attention to the return value, and the _created static flag is just an optimization to avoid calling EnsureCreated on every request (which would be undesirable because it would cause extra database roundtrips per request) and to call it only once after the application starts and the first context is created.\nAnyway we don't want to have this code in the template and we are building a completely different solution based on Migrations which avoids ever automatically creating the database on behalf of the user. See https://github.com/aspnet/EntityFramework/pull/524/.\n. If we were planning to keep this solution for the long term I agree the _created name isn't clear. Something like _ensureCreatedInvoked would be better.\n. The design seems to be well thought and formally correct, but I am afraid it can be a bit confusing for customers (it seems it is already a bit confusing to some of us). I think we should consider tweaking it to keep storing both properties when the flag is set to true. It seems to me that would go a long way smoothing the rough edges.\n. It sounds right.\nSent from my Windows Phone\n\nFrom: Haomailto:notifications@github.com\nSent: \u00fd8/\u00fd13/\u00fd2014 12:33\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Revisit UseUsernameAsEmail scenarios (#182)\nJust to be clear, the proposed additional behavior will basically be blasting username into email as part of every update when the flag is true.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/182#issuecomment-52098607.\n. I was thinking about this a bit more and I think @HaoK is right that removing the normalized properties from the POCOs and using shadow properties for the EF store would make it harder for other implementations that don't have shadow state. The key is that the normalizer is a pluggable service written in C# and we can't assume we can compute the normalization on the store, so a computed index won't cut it. Same reasoning we did last time, it is only hard to remember :smile: \n. :shipit: \n. :shipit: \n. On the other hand having to recreate databases on each test run can be slow. There is a compromise between speed and robustness here. Having to delete the databases should be a rare occurrence.\n. Let me know how this affects the time it takes to run all the tests.\n. :shipit: \n. Using abstract contracts (i.e. interfaces) to register dependencies may have some advantages but I don't think we are currently doing it consistently across the board, e.g. I believe AddEntityFramework() puts types in the container that are not interfaces or abstract base classes, let alone application code. I think this is a point we should debate first and when we come up with guidance we should apply it consistently. \n. :shipit: \n. :shipit: \n. I agree that making the method private is good (it is an implementation detail of the other fluent methods and ugly API to expose at this level) and that adding the generic constraint is necessary cc:@HaoK \n:shipit:\n. @HaoK yeah, sounds reasonable. \nBTW, this seems related to another conversation with @suhasj about the need to review and rationalize when we return IdentityResult across all the methods in the Identity stack. It sounds like nowadays we return it sometimes, maybe mostly when we do updates to the database? But perhaps there is a better principle we could extract from this, e.g. we do it for operations that have multiple possible outcomes besides success that client code could need to reason about without catching and swallowing exceptions. \n. Would it make sense to make this property a Nullable? Also, would that help with this error in particular?\n. I'm not sure we need to change the API because of this. Let's chat about it on the next chance.\n. And the problem is that we could never get the generics to line up :smile: but we can try again.\n. Do we have complete coverage of the modified methods in functional tests? In the past some issues were only caught by MusicStore.\n. Things may become harder to use if you remove them. That is, assuming we want to make it easy for people to use the entities in their own custom logic. \n. Removing all usage of navigation properties in the EF based store doesn't seem feasible or worth pursuing. A few of the changes look good though. \n. :shipit: \n. Given all the issues with AddIdentity() & friends we arrived to the conclusion that we needed to remove the generics from the builder to make the API simple and avoid having to provide generic arguments redundantly. So I am ok with the constrain only being checked only at runtime as a compromise. As far as I understand this does not change the code that goes inside the calls.\n. We should probably check if the aggregate exception can be avoided in Identity as well.\n. @suhasj can you look at the latter?\n. If we end up doing this we should consider deletes as well.\n. A couple of things that we need to follow up offline on, but otherwise :shipit: \n. Are we doing this only for User? Other than that, :shipit: \n. Actually i missed that it was on Role as well. Just :shipit:\n. > Do you think this should be added as a test case ...?\nSounds like a good idea (although other things maybe missing this shouldn't hurt). @HaoK can you take care of it?\n. :shipit:\n. @ilmax It would be good for us to learn if the new model works for you or if there is something that you think was more useful about the interfaces we had before.\n. @suhasj Could you paste here some samples of log output so that we can get feedback?\nAlso, it seems we are now doing some extra formatting strings and making lots of \"fake async\" calls to prepare mesages for the log write methods even if nobody is listening. It is not clear to me how to avoid that given the current Logging API. It seems like something we need to follow up on. Can you help with that?\nBesides these comments, looks :shipit: to me.\n. > We can always have the check on  Logger.IsEnabled  and then only log the message. \nI  think we could do that and/or if possible also check if the level of the log entry we are about to write is being asked for. But it feels to me like it would be much better if we could push that to the Logging API. It looks like doing structured logging allows deferring the creation of the message, i.e. we pass an ILoggerStructure to the write method and logging will invoke the ILoggerStructure.Message later. I wonder whether we should use that or if there should be more ad-hoc way of doing it with a Func<string>.\nIn my opinion we can check-in without that and follow up later with any improvements. \n. :shipit: \n. @ngbrown This is something that we had discussed a bit about within the team but the arguments for moving the types hadn't been strong enough, so your feedback is very much appreciated!\nThere are a couple of caveats: \n1. The fact that the entities are in the \"core\" Identity assembly does not mean you have use them. They are there just as an optional starting point for the actual entities which are defined in the application. Any storage provider implementation can skip them. \n2. The entities we currently have aren't really typical EF entities. In an actual application model designed to work with EF you should expect to see object references (navigation properties) used often as a representation of the associations in the model. The absence of navigation properties is an indirect consequence the access pattern we use in the EF storage implementation of Identity: We defer loading of related data until the data is needed by our APIs, and when load the related data we do so exclusively through the explicit execution of queries. Since we are not using either eager loading nor lazy loading, between two calls to Identity APIs the navigation properties would most often be null, and any application code attempting to consume the object graph would need to account for that. After a discussion we settled on removing the navigation properties to get rid of that potential source of surprise/problems, and we agreed that when customers actually want to have navigation properties in the Identity entities, e.g. because they have integrated the Identity classes into their application domain, they can include the navigation properties (this decision is of course also open for feedback).\n. My take is that we should remove the IQueryable escape hatch interface in Identity 3.0. I will stay away from the debate on whether exposing IQueryables on repository-like abstractions is a bad practice and focus on a different aspect: \nIf an application takes a dependency on the ability to issue arbitrary queries against the data store underlying Identity, it will most likely better off doing so by accessing directly the data stack in question and without any false claim of abstraction. E.g. in the typical ASP.NET 5 application it should be super easy to  get to the IdentityDbContext for the request using DI. Using the context directly will result in much cleaner code and more flexibility. \nIf on the other hand there were specific gaps on the query capabilities required to implement common  scenarios we want to support in Identity, those would be better addressed by adding specific methods on the Identity classes in such way that all possible store providers can easily support them. IQueryable is kind of the opposite to that.\n. Just to add some detail: we looked at the possibility of adding a separate \"repository\" interface that could be used to implement similar admin scenarios without bringing all objects into memory but sacrificing some of the query flexibility that IQueryable can express. All in all we couldn't come up with something that looked compelling enough, so at least for now, stores that want to enable rich admin scenarios (e.g. from third party tools) will have to expose IQueryable in some way.\n. :shipit: from me. /cc @HaoK \n. Was it needed for EF though? @BrennanConroy\n. :shipit:\n. @azuneca FWIW, we supposedly don\u2019t do this anymore in recent builds of Identity 3.0 (i.e. the version we maintain in this repo). Instead we compute a normalized representation of the user name and we store it in a separate column so that lookups by normalized user name should now be sargable. \nAlso, for any previous version of Identity or Universal providers in which we produced queries similar to this the performance can be improved by manually adding an index over a computed column in SQL Server. Here are sample SQL commands that you would need to run on the database (table and column names may be different):\nSQL\nALTER TABLE dbo.Users ADD NormalizedName  AS UPPER(Username); \nCREATE NONCLUSTERED INDEX [IX_NormalizedName] ON [dbo].[Users] ([NormalizedName] ASC);\nNote that if Username is of a type larger than the allowed index key length, e.g. nvarchar(max) you may need to do this instead:\nSQL\nALTER TABLE dbo.Users ADD NormalizedName  AS UPPER(Username);\nCREATE NONCLUSTERED INDEX [IX_NormalizedName] ON [dbo].[Users] ([Id] ASC) \n  INCLUDE ([NormalizedName]);\nYou can replace UPPER() with LOWER() if that is what the query contains. \nHTH\n. :shipit: \n. @HaoK @suhasj Adding the HttpContextAccessor dependency seems fine. It was my thought was well when I realized that only SignInManager had it. A couple of points:\n1. I believe the removal of CancellationToken from methods of some of the interfaces adds an implicit assumption that the implementaiton of the interface will have access to the CancelationToken from the HttpContext. This might be ok. I just want us to think it through.\n2. @yishaigalatzer mentioned that there were potentially multiple sources of cancellation. If you haven't already, could you follow up and make sure that listening to the CancellationToken in HttpContext is enough?\nOtherwise it looks :shipit: to me.\n. > we don't do this today\n@HaoK is there anything inherently cancellable that we are missing? BTW, I noticed that you left the CancellationToken in place for the messaging API, which seems the best choice.\n. Ok. I took a look at some of the interfaces, e.g. validation. If none of the default implementations of the interfaces use databases or need to potentially make calls over the network, I think it is fine to remove the CancelationToken from the methods. As you said, customer implementations can get the IHttpContextAccessor if needed. \nWhat about the second concern? Can you follow up with @yishaigalatzer?\n. :shipit:\n. Exactly. Is that coming soon or should we move this one out?\n. > mgr.GetUserNameAsync(u).Result in https://github.com/aspnet/Identity/pull/378/files#diff-bc862db146cf4a686c23d4fb0676c99eR584. The reason for doing this is that the Linq query cannot be async. Let me know if this is something that is not recommended.\nCan't you do this?\nC#\nvar userName = await mgr.GetUserNameAsync(u);\nAssert.Null(mgr.Users.FirstOrDefault(u => userName == \"bogus\"));\n. > New extension method on ServiceCollection AddIdentityWithTestPocos which is used only in test because it uses the Shared Pocos while the one is source uses EF ones. Instead of this should i move the IdentityBuilderTests and IdentityOptionsTests to EF ? I would want to go with move option\nI don't understand this question, and I couldn't find the method right now. Did you already remove it? Were these test be independent of the provider? \n. Ah, I missed that. Sorry.\n. I'll take another look later today.\n. :shipit: to get it on beta4. We can address any outstanding test issues later.\n. @barrytang I did a few days back, and it was fixed. Thanks!\n. It seems to me that you are describing this issue: CodePlex #2508 GetClaimsAsync() invoked on every request after identity was regenerated.\nIt is an unintended regression we introduced in cookie validation in Identity 2.2. We should be releasing a patch with the fix soon.\n. :shipit:\n. @jchadwick Just to clarify, EntityFramework.InMemory doesn't provide actual \"persistence\", i.e. data is maintained in memory at most while the application is being executed. It's main purpose is testing. Curious about what version of the ADO.NET provider for SQL Server you are using. Did you have to take any special steps to make it work?\n. @jchadwick I am going to close this item and I have opened #423 to track having Identity store choices that work for cross platform development in general. \nThe default implementation of persistence for Identity 3 uses EF 7 and we haven't done any work to make SqlClient and SQL Server work for us on Mono. I am actually quite surprised that you ended up getting an exception from type mapping of the parameters and you didn't hit anything before that. \n. :shipit:\n. I am OK with the repetition for this milestone. Let's file a bug to remember we might need to revisit based on the discussion on scopes.\n. Consider the feedback an unless @haok has other concerns, :shipit:\n. :shipit:\n. @cherrydev Thanks for the update, and great to hear you made all this progress. \nRegarding the possibly redundant code in OnModelCreating() I believe we have a few workarounds in place for features that are still not implemented in the current EF7 bits but that should be there for RTM. @suhasj has been making updates to this model, so it would be good if we can take a look.\nI actually would have expected you to have to split the packages between the \"base data model\" (i.e. base entity types and derived DbContext) and the stores. The application itself will also have to maintain a separate .csproj project with its data model if they want to use EF6 and be able to use migrations. They can put any customizations for the Identity data model in there too.\n\n\u2026which I have a working proof-of-concept of. I wrangled DbMigrator and Scaffolder in EF6 to work inside of a aspnet5 project in a similar manner to the \"k ef\" series of migration commands and it works cleanly without needing access to any internal or private classes or members\n\nThat sounds super interesting though. If it can be made to work without a lot of hacks we can consider it too. \ncc @bricelam @rowanmiller \n. cc @bricelam in case he has any insights on where to put the EF6 migrations command code. It wouldn't bother me if it was in the same repo as the EF6 provider for Identity at least at the start.\n. @ghrapan Thanks for the heads up. Have you considered a strategy to have automated test for this provider? Is there anything we can do, .e.g. refactoring our tests to enable reuse? \n@cherrydev since you asked the same question first, are you still interested in contributing this? Did you ever get to implement automated tests for your provider?\n. @cherrydev Personally I am not sure that PowerShell commands and a DNX-like command line interface are full replacements for each other. And sorry I didn't come back to you on that thread but the truth is that many things are being discussed about the command line tools, e.g. https://github.com/aspnet/EntityFramework/issues/3925.\nWhat about the automated test part? \n. @diffused could you elaborate a bit on why you would want this? To be clear currently if you use the AddDbContext<T>(options => { ... }) method on ConfigureServices() you will get an instance of DbContextOptions accessible to the DbContext without having to have a parameter constructor. On the other hand, the case can be made for copying all the non-default constructors from DbContext into the IdentityDbContext, we are just not sure about the priority of doing so. \n. We have learned that the SqlClient implementation in Mono has no support for DateTimeOffset. We haven't tested Identity in this this scenario enough to know whether you could hit any other issues. \nUnfortunately I cannot think of a workaround short of creating your own set of IdentityUser class and your own stores that don't use DateTimeOffset. \nI suggest you ask for this to be fixed (http://www.mono-project.com/community/) or contribute a fix on Mono.\nBesides, there are also plans to create an implementation of SqlClient that will work cross platform and be more functional. See https://github.com/aspnet/EntityFramework/issues/2161 for more details.\ncc @HaoK. \n. @calwi thanks for asking!\nRemoving myself and the milestone to re-discuss if there is anything we can do in triage. \n. I read in another bug report that Mono's version of the SqlDbType enumeration is missing DateTimeOffset (and also DateTime2). Not sure if that is still the case but I suspect they will need it fixed before things can work end-to-end.\n. Updating the title.\n. This is necessary so that the database created by default can work on Azure SQL Database. Note that this can be reverted as soon as we fix aspnet/EntityFramework#1960.\n. :shipit: \n. :shipit: \n. :shipit: \n. @HaoK hate it too but I saw the alternative in previous PRs, e.g. an async extension method and it looked terrible. I wish getting the user id wasn't async.\n. :shipit: \n. @SirwanAfifi @Bartmax From the pure modeling perspective, it should be ok to add derived classes for user and get those instances persisted to the database, that is, as soon as we are done adding inheritance support to EF7. \nHowever, ASP.NET Identity was not designed to map specific user types to a role or a claim. Identity models roles and claims as associations instead. Those associations can change over the lifespan of a user, while on the other hand the type of an entity is immutable. \nGiven all that, separating the different persona types in your domain model from the application user entity seems reasonable. \n. :shipit: \n. Dupe of #420?\n. I am ok with this, but didn't you say that we were the main users of this API and it didn't make sense to keep the overload that takes a bool? Anything changed your point of view?\n. Fair enough :smile: :shipit: \n. Fair point too. Seems to me that the word \"renew\" may be closer in meaning to what the API will do.\n. E.g. 'RenewSignIn' or something like that.\n. :shipit:\n. :shipit: nice cleanup.\n. I am fine with this. It has the advantage that the line goes in ConfigureServices where we have already moved all configuration tweaking.\nWhat is dataProtector exactly? I imagine it is a manually newed-up instance of the service?\n. Having an abstractions package would actually reduce the bloat of the dependencies for some customers, e.g. if someone wants to write an alternate implementation of one of the Identity service interfaces or a store provider he would only need to pull Microsoft.AspNet.Identity.Abstractions and whatever dependencies they need in their implementation instead of the 20+ dependencies of the Microsoft.AspNet.Identity package. \nThe problem is that this would only add value for a relatively small set of customers: library writers extending Identity. For the rest of our customers it would effectively add 1 item to the list. \n. @heavenwing Identity 3 uses EF7 by default and the latter does not support lazy loading, at least not yet. If this was working before it might have been because the Identity API either eager loaded or performed additional queries to load the related entities. In Identity 3 we have changed the behavior to only load the entities that are needed for the implementation of each particular API. This is a performance optimization. \nAs a consequences applications should not rely on Identity 3 APIs loading any additional entities as a side effect. You have two choices:\n- Use purely Identity APIs to get that data that you need\n- Or else issue queries against the EF model using eager loading or multiple queries\nFor the latter you can easily get the IdentityDbContext instance created for the request from DI. Note that you can also use the IQueryables exposed in the manager classes but if you are going to do eager loading via the Include() then your queries depend on EF and you are better of just using the actual DbContext. \n. @ninlar @HaoK any progress on this PR?\n. @HaoK I looked at the current code around this PR today (needs to be rebased!) and it doesn't seem to apply to Claims (we don't check for existent claims) and Logins (we use a Find find method and already check for null results). I would like to take this PR (or the equivalent fix) ASAP since it has been sitting there for too long.\n. Thanks @ninlar, for bringing the issue to our attention. And please don't worry, I am sure there are many other areas in which you can contribute!\n. :shipit:\n. We discussed and decided that we are not doing this given that it feels incomplete without moving the types to a separate package and that doesn't seem to add much value (similar to the Abstractions package).\n. Nice cleanup! I like that we are not logging everything but only when things go wrong, so we don't need to care that much for the overhead of logging.\n:shipit:\n. We wanted to automatically generate the checks using Roslyn but AFAIK that is still at the prototype phase so I wouldn't get rid of the actual checks for now. \ncc @AndriySvyryd @davidfowl \n. @Eilon I didn't have a chance to sync up with you about this. My take is that we want to take the addition of the attribute and the nameof() usage for sure, but that we shouldn't remove the actual checks, at least not yet. What do you think?\n. In that case, @HaoK please finish reviewing and merge it.\n. @HaoK and I had a chat and his judgment is that he doesn't want to remove the tests that check that the API throws when null are passed at this time. He wants to wait for [NotNull] rewriter to be fully implemented. FWIW, we are also keeping the checks in EF, at least for now, but that didn't have an influence.\n. @Eilon I am not sure we should drop the attributes. Should we discuss this offline?\n. Thanks. For the time being the main advantage of the attributes is for Resharper users working with the codebase. I will discuss it with @HaoK although he isn't the only stakeholder :smile:\n. Then let's leave the attributes in place for now. They don't affect anything at runtime but can be still useful when working on the codebase. \nBTW we can get rid of them when we get non-nullable reference type support in the language :smile:\n. Doh' @HaoK clarified that we currently don't have the attributes in our codebase, so we agreed we don't need to add them. Sorry I didn't take the time to look.\n. :shipit:\n. :shipit: \nReally nice cleanup! Hope we can keep the string interpolation usage.\n. :shipit: for me. We should make the change in beta5 since it affects templates. Can you get approval?\n. > I don't want to have any links to the specific ORM in the models! It makes it impossible to have modular project with unknown ORM.\nThanks for the feedback. This is intentional, and I will try to explain why:\nOne of the design goals of ASP.NET Identity is to be able to work with a wide range of data stores and data access technologies, i.e. not only those which support \"perfect persistence ignorance\" but also many that do put constraints on the types used for persistence. Trying to define IdentityRole, IdentityUser, etc. (and even your application domain objects) in a way that they are completely independent of the store or O/RM may sound like a very commendable goal but in practice it can only work (and work efficiently) with a limited set of persistence technologies that are similar enough among themselves to be able to use the same types. \nInstead of trying to decouple the entity types from the store implementation, ASP.NET Identity chooses to decouple store implementations (which are considered include the entity types) from the Identity core APIs. Hence, even if the IdentityRole and IdentityUser defined in Microsoft.AspNet.Identity.EntityFramework look like POCOs they are actually optimized for the Entity Framework 7 implementation of the store. \nIf you want to create your application in a way that works for unknown O/RMs \u2013 or to make the problem more manageable, for a set of known O/RMs \u2013  and you need to include the persistence of ASP.NET Identity into that, my recommendation would be is to create your own implementation of an ASP.NET Identity store. It is not really that hard and it will give you much greater control over how the entities look like. You can use our source code as a starting point, if that helps.\nBy the way, we actually used to have the entity types defined in the core but they were just an example of entity types that you could use, and this caused confusion for people trying to write store providers. We got very sound feedback that encouraged use to move them to Microsoft.AspNet.Identity.EntityFramework: #332.\n. :shipit:\n. @PartyArk With our current implementation this is the expected behavior. \nAddUserManager<TUserManager>() will register the type you provide as the implementation of the UserManager service type. It will not register your custom user manager type as a service type so you won't be able to resolve it from DI. \nAlso, your workaround may not do exactly what you expect: services.AddScoped<MyUserManager>() is registering your custom user manager as its own service implementation, so when you resolve it, you will get a completely separate instance from the one that Identity is using for the same request. This might not matter a lot if your custom user manager doesn't hold to any state besides the store, but in the general case it is not safe.\nHere is an alternative version of the workaround that should return the same instance regardless of whether you try to resolve MyUserManager or UserMananger<User>:\nC#\nservices.AddScoped<MyUserManager>(p => p.GetRequiredService<UserManager<User>>());\nGiven that, we have three options here:\n1. Not change the behavior but make sure we document it clearly\n2. Add the workaround inside the AddUserManager<TUserManager>() method so that things work the way you expected them to work\n3. Remove the AdduserManager<TUserManager>() method altogether. Note that we believe this might be acceptable because:\n   1. Many of the motivations you could have to create your own derived UserManager<TUser> in ASP.NET Identity 2.x have disappeared with the introduction of Dependency Injection in 3.0. E.g. in 2.x if you needed to override any of the individual services used by the user manager you had to create your own derived UserManager<T> and override some method.\n   2. This is just a \"sugar\" method to make the registration in DI easier. If you have custom needs you can always write your own registration using the standard service registration methods.\nBefore we decide what option to take, we would like to understand your scenario better, e.g. what was your exact motivation to create a custom UserManager<TUser>? \n. @PartyArk Thank you very much for taking the time to write this up and for trying this. \nAfter reading what your write up I feel that it is probably worth for us to go with option 2, i.e. add the proper registration for your custom UserManager type as part of the AddUserManager<TUserManager>() call to make the behavior closer to what customers would likely expect. \nStill, after reading your write up I am also worried that the further you go down this path, e.g. adding arbitrary entities to the Identity model and trying to keep the UserManager the central API for managing it, the higher the chances are that you will hit something that we didn't think about and that will require other changes to our code to make it really work. \nIn general we err on leaving our code open for extensions (e.g. we don't use the sealed keyword very often these days) to avoid artificially blocking customer from doing what they want although it is impossible for us to anticipate every single way things can be extended :smile: \n. @PartyArk we have decided to add the registration for the custom UserManager type. Regarding your other points, could you file separate issues?\n. @Pictuel I am curious, why do you need this? Does your application use the Identity stores and user validator directly?\n. @HaoK does IdentityEntityFrameworkServices.GetDefaultServices() return any service for which it is expected to have more than one registration? If no, then this should be ok to take, don't you think?\n. To add more background, in the context of ASP.NET Identity the AddIdentity() extension method and its friends are considered just sugar methods and we still think it is valid to wire up the services manually.\nMoreover, Identity store writers are encouraged to produce their own sugar AddXyzStores() extension and they should be able to do it with minimal friction. Given that, requiring a marker service to avoid an exception seems very strange. \nOn the other hand, let's say we don't want to use a marker so we want to detect that the actual services have been registered. This is hard because the service types are generic on user types. It seems that the earliest we could detect this is at the instances that actually consume these services, e.g. UserManager<TUser> and RoleManager<TRole>. \nLast, we could change the signature of UserManager<TUser> and RoleManager<TRole> so that the store services are not required and then throw a clearer exception from their constructor if they are null, but that would make the constructors of UserManager<TUser> and RoleManager<TRole> weird. \nI get that the exception from DI is not great, but are we ok with adding a layer of indirection everywhere we use DI to make the exceptions better? If yes, can we agree on a pattern that only adds minimal conceptual overhead for people trying to extend our stack?\n. (made some edits to make the post above clearer)\n. You can create your own extension methods to chain after the AddIdentity() call, e.g.  \nC#\n            services.AddIdentity<ApplicationUser, IdentityRole>()\n                .AddSimonsMySqlStores()\n                .AddDefaultTokenProviders();\nIt is really up to you whether the method will register all the services needed or whether you want to have them registered separately. \nFor the default service registration we do in the templates we do have a separate registration for the EF services and also for the specific DbContext that then Identity uses, e.g.:\nC#\n             services.AddEntityFramework() \n                 .AddSqlServer() \n                 .AddDbContext<ApplicationDbContext>(options => \n                     options.UseSqlServer(Configuration[\"Data:DefaultConnection:ConnectionString\"]));\nThat makes sense in this case because EF and the ApplicationDbContext are usable outside of Identity.\n. :shipit:\n. revert-:shipit: \n. Something doesn't feel quite right but it is hard for me to explain it. It might be that I just need to understand how it works :smile: Can we go over it on a whiteboard?\n. FWIW, it seems that we need to revisit the comments but just removing a bunch of cancellationToken parameters from them should go a long way.\nShould this one be assigned to @HaoK or @blowdart?\n. :shipit:\n. @HaoK what kind of test coverage do you think we should add for these constructors? \n. @HaoK could you please look at this PR?\n. TL;DR: I am still worried that the change causes friction/weirdness to application-specific implementers of the interfaces. We might convince ourselves that this is ok, but I would like to be more sure that we really need to do it.\nDetails: with the TUser generic argument at the interface level as we have it right now it is easy for an application developer to create a custom implementation of one of these interfaces for a specific TUser which contains code that accesses properties on the user instance.\nWith this change the specific TUser will be unknown at compile time and remain unknown until the method is called hence the interface implementation won't be able to bind directly to properties on the user instance. You can still do it with an as conversion, using dynamic, reflection, etc., but it is not as intuitive and it becomes pretty weird. \nNote that it is by design that in our own implementations of these interfaces we will never need to \"crack-open\" the TUser instance, i.e. we just need the TUser of the UserManager<TUser> and the type of the user instance to match so that we can pass the latter to the former. However we can't assume applications-specific implementations wouldn't want to do it.\n. Has it ever passed? I woud expect the same kind of issues we had in EF tests that use databases.\n. @issafram the design of Identity core is not coupled to EF or to any specific shape of user and role types. Everything is abstracted by the stores. In fact, for any given persistence provider, the types don't even need to be POCOs at all! \nWe considered having our current POCO types in core (in fact, at some point we had them) but we got pretty solid feedback from people familiar with other persistence frameworks that those types were very EF specific. \nWe also considered having base classes in core that we would extend for EF in the EF package. We landed where we are because there doesn't seem to be enough benefit in this. It is adding the complexity of layers of inheritance (which would make it easier for us to introduce unintended bugs) vs. the fact that the types the way they are not aren't that complex and that persistence provider writers that want to take them as a starting point are welcome to copy & paste the code.\n. :shipit:\n. Other than the feedback on adding type checks looks good.\n. :shipit: with minor feedback on the exception message.\n. @AndriySvyryd Thanks for taking a look. That is what we thought. Could you use this as a starting point for a repro? The base class is IdentityDbContext. \n. @AndriySvyryd could @smitpatel work on this?\n. Assigned.\n. @HaoK @rustd this is a bug on Identity. @smitpatel did the analysis and it turn out that on IdentityDbContext<...>.OnModelCreating() we are configuring IdentityUserClaim<TKey>, IdentityRoleClaim<TKey>, IdentityUserRole<TKey> and IdentityUserLogin<TKey> as the generic entities themselves. We actually don't use the non generic versions of those classes anywhere so if a user tries to configure those as in the description of the issue, those will be completely different entities.\nNote that the symptom observed by the customer (the exception) is due to the fact that IdentityUserRole doesn't have a key that can be inferred by a code first convention, but that is not the main bug.\nI believe there are two possible solutions:\n1. Get rid of the non-generic versions of those entity types. The would mean that customers that want to refer to them would need to use the generics always and wouldn't erroneously use types that Identity won't use.\n2. Templatize the IdentityDbContext on these types similarily to how we do it for TUser and TRole. I would look something like this:\nC#\n   public class IdentityDbContext<TUser, TRole, \n       TUserClaim, TRoleClaim, TUserRole, TUserLogin, \n       TKey> : DbContext \n   where TUser : IdentityUser<TKey> \n   where TRole : IdentityRole<TKey>\n   where TUserClaim: IdentityUserClaim<TKey>\n   where TRoleClaim: IdentityRoleClaim<TKey>\n   where TUserRole: IdentityUserRole<TKey>\n   where TUserLogin: IdentityUserLogin<TKey>\n   where TKey : IEquatable<TKey> \n   {\nFrom a certain angle, the second option is cleaner, but I suspect it would leak the generic arguments into the UserStore and RoleStore types and to an AddIdentity() overload.\n. I talked to @HaoK and option two is apparently how things used to look like in Identity 2.0, but he prefers option one to avoid the 4 additional generic arguments to be created in store types and AddIdentity()\n. Moving to @HaoK and beta8. Thanks @smitpatel for the analysis. \n. Thanks. Good to know. I still wonder how providers that don't support generics would handle customization of the key type, e.g. the EF6 provider that @cherrydev worked on had to use non-generic entity types.\n. Just found this long standing discussion in my investigation queue. Unfortunately I haven't responded before. \nFirst, the constructor over-injection link (maybe unintentionally?) points to a rebuttal of the stated anti-pattern which asserts construction injection is generally the way to go. Regardless, I agree with some of the approaches suggested in that article could applicable to ASP.NET Core Identity, e.g. using singleton lifetime for services that can be singleton can actually help reduce unnecessary allocations and improve throughput. \nI also agree that taking an IServiceProvider as a dependency and using service locator should be avoided if possible. \nThe key issue in the original post seems to be how UserManager concentrates a number of different responsibilities. Although there is some separation in the form of interfaces in the underlying persistence layer, the actual implementation lives in very few types and UserManager is a fa\u00e7ade over all that functionality. \nThe choice of doing this may be considered a bit arbitrary, but it does provide some simplicity in the programming model, e.g. there is a single type on which you can find (and override, at least for simple scenarios) most actions around the User aggregate. \nAn easy parallel to make is how some developers would choose to define a repository interface to abstract all persistence concerns for that type form the application, while some other developers could possibly prefer to \"split hairs\" and separate each of the CUD operations into their own type. \nOverall I do not see an absolute truth on how to design an API like this but if there are specific areas in which we have gone too far in concentrating responsibilities in UserManager and if there are tweaks we can make to getter better factoring it would be nice to get the feedback. \n. Note for triage: Removing the milestone so that we can discuss making improvements in our factoring and service lifetimes and service instantiation patterns. It seems at this point the ship has sailed for certain kind of changes but we can consider improvements in the next major release. \n. :shipit:\n. Does the test pass with this package? If no, and the package description is required, please see #409 for the right strings. \n. Thanks. Looks :shipit: to me.\n. :shipit: besides the feedback on using Distinct() on AddToRolesAsync().\n. Assigned to @maumar for investigation in case we have regressed this in the last few hours.\n. Thanks for following up @Kagamine. \n. Yeah, I just saw that. We'll look at it.\ncc @natemcmaster \n. > Try changing the lifetime of AspNetIdentityUserService to be Singleton to see if this fixes this issue.\nJust to clarify, this is a way to test the hypothesis that what is happening is that your service is getting disposed before the query executes, not necessarily a good workaround.\n. @halter73 I hope you may have enough context to be able to comment on this. In summary:\n- @gvx111 is using SingalR with Identity (see the startup.cs above) \n- If this was a regular MVC app the exception he is observing would be a symptom of trying to do work with services obtained from a DI scope that has been disposed (Identity's UserManager will flow the HTTP context accesor's RequestAborted as the CancellationToken to all database calls).\nWould you expect this to work? Would you expect it to fail under certain conditions, e.g. if the connection is dropped?\n. Ok @gvx111. Would it be possible for you to provide the full repro with SignalR removed?\n. Moving to RC2 so we can look into it soon.\n. @joshmouch thanks for the feedback on this. This change was intentional but I think it is something that we can discuss. \nThe goal of the change was to not have as many generic arguments leaking into all our types and extension methods. The main disadvantage is that the extensibility scenario you describe now requires replacing the Entity Framework provider with your own code. \ncc @rustd @HaoK \n. @joshmouch, @slaneyrw and others, the reason we had this tagged as a discussion and assigned to me was that I was planning to do a write up detailing the team's thinking on the generic arguments. Unfortunately I was busy and the write up missed the RC1 deadline.\nIn the interest of clarifying this and setting realistic expectations, I am just going to try to summarize the situation quickly: \nAfter discussing this a few times as a team we still don't feel like we can commit to have the generic additional arguments on entity types as we had in 2.0. \nObviously one of the concerns is that the generic arguments add complexity to the codebase. However the most important issue is that we don't understand the whole set of scenarios in which the generic arguments are supposed to enable extending the data model without affecting the functionality of the ASP.NET Identity API negatively. \nGiven that the goals aren't clearly defined it is hard to:\n1. Understand whether it is possible to achieve them \n2. Evaluate the amount of complexity it would bring\n3. Add adequate test coverage to prove that the extensibility model works\n@slaneyrw's PR we received recently (#643, very much appreciated!) adds the generic arguments on the EF entity types but unfortunately falls short of addressing our other concerns. \nI would like to keep this issue as an open discussion and see if your feedback help us understand better. I wouldn't discard a change of mind but I wanted to clarify that we are currently not planning to do it.\n. There are some question to follow on for cascade delete behavior in EF but this LGTM. :shipit: \n. Thanks for reporting this anyway. Due to the rename, we keep seeing folks hit a state un which they have version mismstches and it is hard for the to track down why. We are planning to address this by creating an EntityFramework.SqlServer meta package that downloads (the right version of) EntityFramework.MicrosoftSqlServer.\nCc @rowanmiller \n. :shipit:\ncc @rynowak, @lodejard\n. To clarify: we discussed this and came to the conclusion that we should create a SecurityStamp early on when the user is added.\n. https://github.com/aspnet/Security/commit/1d2c6ba1223748df02a879622e8deb6ac23db5b7\n. This is not a ship stopper for RC2 so moving to RTM and assigning.\n. Talked to @Eilon and he thinks if we can do some of these for RC1 it would be great. So asking @blowdart, @HaoK and @rustd if that would be possible :smile:\n. Very nice! Only minor comments/questions.\n. Sorry for the long time it took for me to answer. If you are referring to the EF6-based store provider that we ship with ASP.NET Identity 1.x and 2.x, I think you should be able to create a derived DbContext that is gets its model from EDMX. \nI haven't tried this myself but you would need to use a constructor that takes a connection string name that points to an EntityClient connection string in the configuration file. @ajcvickers wrote an article that has some good information on how this works: http://blog.oneunicorn.com/2012/02/26/dont-use-code-first-by-mistake/. \nRe the new ASP.NET Core Identity (until recently know as ASP.NET Identity 3.0) it comes with an EF Core-based store and EF Core (until recently known as EF 7) only supports Code First models.\nHTH.\n. @HaoK @rustd @blowdart thoughts?\nI like this suggestion. We would need to check what our bar for breaking changes is going to be post RC1.\n. Reopening as a discussion so that @HaoK can answer the last question if possible.\n. @HaoK I think we said we wanted to take this. It has been a while so I imagine it needs to be rebased.\n. We shouldn't rush this in for RC2 but instead do it early into the next milestone, so moving.\n. :shipit:\n. Besides the comments I already made:\n1. I like the idea of fixing things up on SaveChanges(). It should work for normalization of user name and email and also for the concurrency token. \n2. This is a lot of sample code to look at so while reviewing I had to assume that it would be possible that it should be easy to get this code by using one of the default templates for MVC5, then making a few changes and then following whatever the migration steps are. That makes me think that it would be very useful to include a readme file with those steps alongside the sample code. \n. @HaoK are you planning to make an initial commit and the iterate over it or would you like to get it all fixed in this review?\nPersonally I think that pushig this even if it is not completely correct would be good as there is a lot of boilerplate code that I would prefer not to look at in subsequent reviews :smile:\n. Ok, can you please answer if using EF7 for the migration was intentional? Otherwise :shipit:\n. @HaoK @rustd I just looked at this bug and I agree we should just add the constructors to all the versions of IdentityDbContext to take the same parameters as the base. I am assigning it to @HaoK. \n. What is the recommended action? Add it to DI ourselves or stop depending on it?\n. OK, thanks.\n. @davidfowl the functionality lost may not be critical for UserManager and RoleManager but HttpContext is critical for most things in SignInManager (as #674 states we will stop trying to access contextAccessor.HttpContext in the constructor but we sill need it in 14 other places in the class). So, \n- Should we TryAdd() the service on AddIdentity() or \n- Should be split AddIdentity() into a method that adds the services for UserManager() and RoleManager() and another method that adds the services necessary for SignInManager()\n- Any other option?\n. Yes. If the transaction is also initiated externally, you need to call UseTransaction(transaction) to tell the EF about it. Feel free to reopen if that doesn't work.\n. @HaoK after talking to @natemcmaster, we should try the solution that increases the timeout first. If that is not enough, then we can move from LocalDB to SQLExpress (we are not 100% confident that doing so helped us much on EF).\n. :shipit:\n. :shipit:\n. :shipit: but the skip conditions in those \"one off, standalone, non-shared\" tests smell like regular engineering debt :smile: If that is the case, please make sure we have a bug tracking it. \n. We should make sure the check goes away with the fix for #655 which will make IHttpContextAccessor optional. Assigning to RC2.\ncc @HaoK @rustd @blowdart \n. @natemcmaster will take a look today.\n. @moozzyk @Tratcher heads up that with this fixed, Identity tests should be more stable on CI. Let us know if that isn't the case.\n. Neat! :shipit: \nRe the scratch database code as shared source, I don't think it is a high priority right now. \n. @haok Remember that before you drop the new classes and rebase you have to make sure you have enabled migrations.\n. > Could just have a blog post/doc walkthrough instead of a checked in sample since its more of a flow anyways\nAnother option would be to put it into its own repo. \n. @danroth27 we can make this a high priority as per our conversation, but can you please answer about the scope (cooking sharing vs. full with a shared database)?\n. @HaoK @blowdart moving this to 1.2 because it doesn't seem to be something that would block use from shipping 1.1 at this point.\n. :+1: to @brockallen's comment. While you are free to execute your own queries against the EF model underlying the default Identity stores, the Identity APIs (I would say UserManager and RoleManager and not the stores) are the recommended way of interacting with Identity. These should give you the correct data and are independent of the store provider in use.\nFWIW, the EF store providers for Identity 2.x used to load a user and all its associated data upfront. In order to make things more efficient we changed that in 3.0 to defer the loading of specific data into memory until it is required. The implementation uses explicit queries rather than relaying on any transparent lazy loading mechanism.\n. The name of the variables in the lambda look a bit strange but I think the Includes are fine. I would have written something like this:\nC#\nreturn this.Users\n    .Include(user => user.Roles)\n    .Include(user => user.Claims)\n    .FirstOrDefaultAsync(user => user.UserName == userName);\nNote however that this will only load the IndentityUserRole and not the actual Role instances. It won't load the RoleClaim instances either.\nThere are no navigation property on IndentityUserRole so there is no way to navigate to the actual IdentityRole entity just using Include() or ThenInclude(). You will have to issue multiple queries, at which point I think we should just recommend getting the related information explicitly using Identity APIs (similar to @jvelezc's workaround but using await instead of .Result). That pattern should work independently of the store implementation.\n. Also for context on why ASP.NET Identity 3.0 won't load this additional information by default: In Identity 2.0 the EF provider used to contain additional code to load the whole graph of objects associated with a user in case it was needed by user code. This caused a big performance overhead so in ASP.NET Identity 3.0 we changed that to only load the related objects that are needed to resolve the Identity API calls. If you need a specific piece of data, it is recommended that you invoke Identity APIs explicitly to retrieve them.\n. Yes. We did this with the EF tests for provider writers and has been working well.\n. Ah, I think it is starting to make sense to me... So, if we could use parenthesis in names it would be called RequireNon(LetterOrDigit) :smile: But honestly, when I read it the first time I interpreted the same way as @JGrzybowski and @MaximRouiller apparently did, i.e.  Require(NonLetter)OrDigit.\nMaybe we can come up with a name that is no ambiguous. Was RequireNonAlphanumeric ever considered?\n. See the SO questions: \nhttp://stackoverflow.com/questions/25865952/requirenonletterordigit-not-correctly-validated\n(I think there is a bug in the question, e.g. the flag should be set to true instead of false)\nhttp://stackoverflow.com/questions/24796454/how-to-change-password-validation-in-asp-net-mvc-identity-2/24819318#24819318\nAnd this forum thread:\nhttp://forums.asp.net/t/1998093.aspx?Error+message+unclear+Passwords+must+have+at+least+one+non+letter+or+digit+character+\nIt seems customers have been hitting the ambiguity in the property name, the API documentation for it and even the validation error for a while.\n. Closing this issue as it seems that all the questions have already been answered. In summary, we don't offer an EF6-based store for the new ASP.NET Core Identity out of the box but the components have been designed so that you can register your own. Thanks @Fosol and @nrkarthick for including the details and links. \nPlease create new issues if you find bugs or have feature suggestions.\n. @mikary @HaoK I think this is very interesting. See exception at the bottom of the log:\n\nMicrosoft.Data.Entity.Query.RelationalQueryCompilationContextFactory[1]\n      An exception occurred in the database while iterating the results of a query.\n      System.NotSupportedException: A second operation started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.\n\n@mikary recently added async guards in EF code that should throw when code is run that tries to start async operations concurrently on the same DbContext. It seems that this guard is triggering on a slow machine. I can see a few possible explanations:\n1. The guard logic could contain a bug that cause a race condition that for some reason only manifests on a slow machine. \n2. We could have a pre-existing bug in the async call patterns in ASP.NET Identity or in the Account controller code which e.g. don't await on a Task result. \n3. Otherwise the failure could be caused by some sort of bug in Mono. One way to remove that possibility is to try the same code with CoreCLR instead of Mono. @ryanschuler is that something you could try? Otherwise a full repro project would also help.\n. @rustd, @HaoK, @blowdart I cannot recall what we decided in triage about this PR. \nIn any case, if we wanted to take it I am not sure about the name of the method. Across a few components we are pretty consistently using the Find prefix for methods that return zero or one instances based on a condition or key. This is more of a GetUsersByPhoneNumber() I think.\n. Found it. \nThe Identity stores we offer out of the box are for EF Core, and EF Core will not support stored procedure mapping in the initial release (we use the following issue to track the feature in our backlog: https://github.com/aspnet/EntityFramework/issues/245). \nIn the meanwhile it should be possible to produce your own Identity store implementations (i.e. UserStore and RoleStore) that use stored procedures for persistence based on some other means.\n. Just to add a bit more detail: as a performance optimization ASP.NET Core Identity currently only loads the entities related to a user or a role as needed to satisfy API calls. I.e. it won't load related entities (not even the built-in ones) eagerly on a method call like such as FindByName() because the find methods are only required to return the root. \nAt this point issuing queries against the DbContext is the recommended way to load related data. If you want to abstract this from the application code you can extend both the Identity store and manager classes to add methods to retrieve and return your custom related data. \n. :shipit: after addressing the feedback.\n. Feedback is addressed so :shipit:\n. @HaoK please take a look to see if you can help.\n. I believe the intent is to make sure that when you register a custom UserManager or RoleManager type it will still be assignable to UserManager<TUser> or RoleManager<TRole> for whatever TUser and TRole types you are using. \nIf these checks were constraining the user and role types (and I am not sure they are) that would probably be a bug as those types should only be constrained by the stores, not the managers. \nI am not sure but at first glance it seems that maybe we have a short-circuiting bug in the ifs, e.g. instead of:\nC#\nvar userManagerType = typeof(UserManager<>).MakeGenericType(UserType); \nvar customType = typeof(TUserManager); \nif (userManagerType == customType || \n    !userManagerType.GetTypeInfo().IsAssignableFrom(customType.GetTypeInfo())) \n{ \n    throw new InvalidOperationException...\nMaybe it should be:\nC#\nvar userManagerType = typeof(UserManager<>).MakeGenericType(UserType); \nvar customType = typeof(TUserManager); \nif (userManagerType != customType && \n    !userManagerType.GetTypeInfo().IsAssignableFrom(customType.GetTypeInfo())) \n{ \n    throw new InvalidOperationException...\n@HaoK would know for sure.\n. Totally agree that we should have a test for this check. A PR sounds like a good idea to me.\n. :shipit:\n. Thanks for your contribution! :wink:\n. :shipit:\n. @hishamco can you point us to some data on why this is a good change to take? Sorry I personally don't have enough context on it.\n. @Eilon any insights on this feedback and what the \"ideal\" location for a database file would be at development time and on deployment? \nFWIW, our SQLite provider simply uses AppContext.BaseDirectory (or equivalent) to resolve file name locations in the connection string. \n. It a question/suggestion about what should the base path be at development and deployment so I don't think @blowdart means \"configuration\" in the aspnet/Configuration sense. \nMaybe aspnet/Hosting?\n. This issue was moved to aspnet/Hosting#639\n. :shipit: I am fine with taking this change because it seems to be an improvement. It would be great if we had more of an objective way to decide what characters to allow by default, e.g. something based on what the most popular email servers/services out there allow.\n. Gmail actually allows letters, numbers and periods but not the plus sign. Of course other systems do allow the latter. Anyway, the change is in and I don't think we need to proactively revisit the list until we get a similar request,  if we ever do. \n. @javiercn I think this change is correct but its value isn't obvious. E.g. the new interface you are introducing seems a bit superfluous. I get that what we had looks more like what EF uses and with your change it looks more like what MVC has, but the user experience should be the same. \nCould you elaborate a bit more on why this is better than what we had? Maybe @rynowak has an insight?\ncc @HaoK @blowdart \n. Hey @javiercn I am not sure I 100% understand all your points, so feel free to push back if you think I am missing something important. \nI think things are strictly simpler the way they are right now, because there are less types :smile: \nFrom the consistency aspect I think we are probably not seeing the same stuff in EF. AddEntityFramework() returns a class, EntityFrameworkServicesBuilder which happens to implement an EF-specific interface that enables getting the underlying service collection, but the class has instance methods on it (currently only AddDbContext<T>()). EF Providers can define extension methods on EntityFrameworkServicesBuilder as well and have access to its state since everythign is public. \n. @javiercn sorry if I didn't fully understand initially what you were proposing. We don't see enough advantages in this so closing.\n. :shipit:\n. Do we need similar changes in MusicStore and Templates? \n. :shipit:\n. It seems this change is missing adding a call to AddEntityFrameworkSqlServer() somewhere, e.g. the SqlStoreTestBase.TestDbContext at https://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test/SqlStoreTestBase.cs#L36. is supposed to be configured to work with SQL Server for everything to work.\nI am not able to follow how this was happening before.\n@haok can you shed some light on that?\n. Yeah, @ajcvickers and I talked about this and we believe the test was passing before because the DbContext was being created with new instead of resolved from the container, so EF was creating its own separate container and adding the SQL Server provider to it automatically, i.e. the test was an example of the pit of failure described at https://github.com/aspnet/EntityFramework/issues/4668 :smile:\nNow that the issue has been fixed both options (using the application's service container or letting EF create its own) are valid and it should be much more obvious in the code what is happening, so we need to choose what pattern we want to follow in Identity tests.\n@ajcvickers might have a recommendation but ultimately @HaoK and I need to make the call. I supposed the simplest change is to continue having EF create its own container, but I am not sure what is missing then. Does it have a call to UseSqlServer() on OnConfiguring()?\n. Triage: we are closing this issue because we haven't heard back in a long time. Feel free to re-activate if you are still experiencing problems in this area.\n. @HaoK doesn't this mean that there is a bug in the template? \n. What I mean is: should we propose that we remove this attribute from the template?\n. @HaoK can you please respond to this question with details?\n. LGTM other than a minor comment on something that was already there. Thanks. \n. @blowdart do you think this could be an EF issue? All packages mentioned seem to be on the Identity side. \n. @kuashe I have tried the repro steps and confirmed that installation of the RC1 version of Microsoft.AspNet.Identity.EntityFramework package fails. I got the following warning/error messages in the output from the install-package command:\n...\nAdded package 'Microsoft.AspNet.Identity.EntityFramework.3.0.0-rc1-final' to folder 'c:\\users\\divega\\documents\\visual studio 2015\\Projects\\ConsoleApplication49\\packages'\nInstall failed. Rolling back...\nPackage 'Microsoft.AspNet.Identity.EntityFramework.3.0.0-rc1-final : EntityFramework.Relational [7.0.0-rc1-final, ), Microsoft.AspNet.Identity [3.0.0-rc1-final, )' does not exist in project 'ConsoleApplication49'\n...\nInstall-Package : Failed to add reference to 'System.Runtime'. Please make sure that it is in the Global \nAssembly Cache.\nAt line:1 char:1\n+ Install-Package Microsoft.AspNet.Identity.EntityFramework -pre\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPac \n   kageCommand\nCould you please confirm that you are seeing the same?\n@yishaigalatzer and I tried a few more combinations, e.g. downgrading NuGet client to 3.3 and targeting .NET 4.5.2, but as expected that didn't help. We talked about one possible reason for the failure: that there is package in the change of dependencies (Microsoft.AspNet.Identity.EntityFramework -> EntityFramework.Relational -> System.Diagnostics.DiagnosticSource) that depends on a design-time fa\u00e7ade, System.Runtime (which appears in the error) and that is not really supported and could be a package authoring error, but it is surprising that installing EntityFramework.Relational directly works without failure.\nAt this point I will file a bug in NuGet with the symptoms (we believe the error message can use some improvement) and will follow up to try to see if there is a workaround. \n. Related issue: https://github.com/NuGet/Home/issues/2193.\n. @kuashe thanks. The good news I found so far that installing the RC2 equivalent (Microsoft.AspNetCore.Identity.EntityFrameworkCore) using NuGet does not fail. \n. Sure thing...\nIn general I believe this kind of error will occur if the data in the database does not comply with an assumption made on the query, e.g. consider something like this:\nSQL\nSELECT Id,  \n    Price = SELECT Price FROM ProductPrice pp WHERE pp.Id = p.Id\nFROM Product p\nThis query will only work if there is exactly on ProductPrice row for each Product row. If there is more than one it will fail with the mentioned error (or similar).\nWe could debug and look at our queries to see if there is any generated SQL query that is making assumptions of cardinality that are not actually enforced by the database. \n. Ok,  thanks for the stack trace. \nIt is clear the exception  has nothing to do with the Identity operations in question but is coming from EF migrations. \nIt is also clearly not EF Core but an older version, so it is likely not ASP.NET Core Identity either. Just to confirm, what versions of ASP.NET Identity and EF are you using? \nIn case it helps,  could you try executing an update-database -verbose command directly on the package manager console in VS to see if you can get any more details about what is wrong? \n. Thanks @sdanko for the additional details. Unfortunately the output doesn't seem to include the actual last SQL statement that Update-Database is trying to execute when the failure occurs. \nWould it be possible for you to capture that statement either using SQL Server Profiler or the Intellitrace window while debugging that part of your application? \n. Another thought on this: could you try adding an explicit migration (using Add-Migration_name_ in the package manager console) for the pending changes to see what happens? \nIt may not help with either solving or explaining the failure but in general automatic migrations can be more brittle than explicit migrations. \n. Closing this issue as it is not actionable for ASP.NET Core Identity 1.0. I have copied all the relevant information in https://entityframework.codeplex.com/workitem/2926, and we will follow up on it as an EF issue.\n. @sdanko sorry for taking so long to respond. If you still have a repro, I have posted another suggestion to try to diagnose the issue at https://entityframework.codeplex.com/workitem/2926.\n. Triage: we are closing this issue because we haven't heard back in a long time. Feel free to reactivate if you are still experiencing problems with it. \n. @bengi83 from what I can see I believe this issue was closed because we asked for additional information and after several days we did not get a response. \nIf you think you are experiencing the same issue, please post your repro code (startup.cs was requested but a complete repro project would be even better).\nAlso consider just creating a new issue and providing the full repro information.. @brentdavid2008 does the last comment by @HaoK answer your question?\n. Thanks @brentdavid2008. I agree that would be a nice addition although it isn't high priority to do it so moving to backlog for now. \ncc @HaoK @blowdart \n. :+1:\n. Identity methods should be using the same instance of a DbContext (an ApplicationDbContext in an application based on the default templates) within a request. For this to work, the DbContext in question has to be registered as a scoped service, e.g. using the AddDbContext<TContext>() method.\nEach DbContext will only use one instance of DbConnection but by default it is true that it will open and close it as needed, even within the same request. In order to override this you can open the connection explicit in the beginning of the request, e.g. you could do this in the controller's constructor:\nC#\n    // assuming applicationDbContext is a constructor parameter and resolved by DI\n    applicationDbContext.Database.OpenConnection();\nThen the connection should remain open until you close it explicitly or the scoped context is disposed.\n\nAlso, it causes changes made locally in the DbContext not \"seen-able\" in the other connection.\n\nI am not sure what you mean by this.\n. This issue was moved to aspnet/EntityFramework#5147\n. @pranavkm can this be closed then?\n. @pranavkm RTM sounds good?\n. @HaoK will this be covered by the generics work?\n. We are currently not planning to add the ability to customize the type of any child entity. If we hear enough feedback with justification of why it is important we can revisit. \n. @haok don't we have a sugar extension method for that? \n. @dotnetjalps have you tried replacing the default store with your version by adding it to the service collection? E.g.\nC#\nservices.AddScoped<IUserStore<ApplicationUser>, ApplicationUserStore>();\n. > This error does not occur on OS X when using SQLite - the user registration completes successfully. Even if this is by design on Windows, it should at least be consistent with OS X.\nIt this because the yo templates still include the workaround? If no, why?\n. @kjanshair how does the AdministratorSeedData class and your ApplicationDbContext look like? In particular I am interested in the constructors and the EnsureSeedData() method,  but there may be other relevant parts,  e.g. do you have an OnConfiguring() method on the DbContext? \nPS: you may want to check out how I fixed the code formating on your post. \n. Also, it may be obvious,  but is the change of the database name in the connection string intentional? \n. :shipit:\n. The CI feed for the dev branch of ASP.NET Core packages is https://www.myget.org/F/aspnetcidev/api/v3/index.json. \n. Other feeds described at https://github.com/aspnet/Home/wiki/NuGet-feeds. \n. +1 to everything @smitpatel said.\nIn case it helps, if you are hitting the same problems as I am, just unload the \"samples\" folder (right-click on it in the solution explorer and click on the \"Unload projects in the solution folder\"). Everything else builds for me.\nAnyway, life in the bleeding edge is hard :smile:. I.e. the dev branch and feed is often broken because of cross-repro breaking changes, and in those cases you may need to wait until things get in a good state again.\nBesides git clean -xdf another trick that is often needed is to clear up your loca NuGet package caches. If you have nuget.exe you can do nuget locals -clear all or alternatively you can delete the contents of these three directories:\n%USERPROFILE%.nuget\\ \n%LOCALAPPDATA%\\NuGet\\v3-cache\\ \n%LOCALAPPDATA%\\NuGet\\Cache\\\n. @HaoK do the samples work for you?\n. :shipit: (or :shippedit:)\n. :shipit:\n. Wouldn't be a breaking change to do it later?\n. :shipit: \n. @onedevteam re the original question, it is not possible for me to guess why it is failing for you without at least a full stack trace, but from what I see in the code the EF-specific part of the implementation of the UpdateAsync() method is designed to take a user object that is not currently tracked by the DbContext, mark it as modified and then save it to the database. It will fail if another object representing the same user (i.e. another instance with the same identifier) is already tracked in the DbContext, e.g. if any code retrieved or attached the user on the DbContext before UpdateAsyc() does it as part of your controller action. \nWould it be possible for you to provide the stack trace and a more complete repro?\ncc @HaoK \n. @HaoK thanks! Could you remove CS1591 warning from Microsoft.AspNetCore.Identity/project.json and Microsoft.AspNetCore.Identity.EntityFrameworkCore/project.json and see what happens?\n. Can't build it right now :sad: How much is missing?\n. I think there a couple of new comments in https://github.com/aspnet/Identity/issues/869. Maybe we should wait until @xperiandri finishes reviewing? :smile:\n. Other than that LGTM.\n. @HaoK is it just IdentityCookieOptions that is missing some comments?\n. This went under the radar. AFAIR EF will only instantiate a HashSet<T> if the property isn't already initialized, so it is unlikely that the Lists<T> are being replaced. \nI think we can switch to HashSet<T> or even consider not initializing the properties here. \nBoth changes could potentially have performance advantages:\n- HashSet<T> is more efficient for performing contains checks in memory, which are common in property fixup \n- Deferring the intialization until EF materializes could mean that we end up creating less objects in some scenarios\nHowever both could be breaking changes for customers using the underlying EF model directly, because they could write code that relies on the navigation properties: \n- being instances of List<T> \n- not being null (I suspect this could be more common)\n. Clearing up so that we can discuss if we want to do anything in triage.\n. @xperiandri see my previous comment at https://github.com/aspnet/Identity/issues/871#issuecomment-236137533. In summary, when we discussed this, the consensus was that the theoretical advantages of either switching initialization to HashSet<T> or removing the initialization would not offset the potential breaking change impact.\n. @xperiandri I am not sure what you mean but they are initialized inline and since they are read-only properties any consuming code or EF Core code will just use those lists. \n. Not sure it is feasible at this point, but one way we could achieve that is by moving all interfaces and abstractions to a separate abstractions package, then have store packages depend on that. Not sure what the goal is though: if you want a DAL depend on IdentityDbContext you kind of carry a lot of baggage with that anyway. \n. E.g. ASP.NET Core Identity is Web specific. \n. @HaoK another point of contention is that the design of Identity intentionally does not prescribe how the types look like. E.g. the store interfaces are there to completely isolate the implementation of the managers from how the classes look like. They can be anything that the stores and the application understand. If you include these \"POCOs\" in the core package, it might mean one of two things:\n\n\nAll providers should use them as the base for their implementation: this pushes a new burden on providers, which now need to support this kind of \"POCOs\" (which are very EF-idiomatic, not just because of the navigation properties)\n\n\nThey are there just as a hint that a provider can use them: this can be potentially confusing and personally I don't think it provide a lot of value\n\n\nBased on this and what @ardalis says his requirement is in https://github.com/aspnet/Identity/issues/883#issuecomment-295442262, I think a more useful way to think about this is that we only ship the POCOs in the turn-key EF Core implementation of the stores for convenience, but that if an application wants complete freedom and control on the types and that store it uses it can do so by providing its own implementation of the store interfaces.\nNow, let's assume that:\n- You want to make it easier, i.e. you want to make it possible for an application to do what @ardalis wants without having to write that much code. \n- The EF-friendly \"POCOs\" that we define are really viable base types for a significant subset of all the providers\nThen the way I would go about it is to move the \"POCOs\" into a base Identity store provider package that not only brings the POCOs but also a partial implementation of the store interfaces, in particular an implementation of all the repetitive property access code that is bound to the POCOs. Then it should be very easy to refactor the current EF Core provider to depend on this base provider, and for someone wanting to do the same thing @ardalis wants to do to create a non-EF Core based implementation of the stores that shares a lot of code with the EF Core implementation.. Also, while we are at it, it would be nice if we could address what this issue was originally about: move the definitions of the Identity interfaces into a Abstractions package so that customers can write a DAL and providers can write a provider without bringing the whole graph of dependencies of ASP.NET. . I believe @ajcvickers was also compiling a list of the different improvements that have come up in this issue. I think template code that is not tied to the \"POCOs\" is part of it. \nFWIW, I would probably pick a name do the base \"POCO\"-based stores pacakage that conveys the fact that it is an opinionated implementation.. @HaoK @gdoron actually EF Core will throw this error if two different object instances representing the same entity (i.e. having the same key value) are somehow brought into the same DbContext instance, (i.e. using scoped DbContext instance, within the same request).\nThis could happen for example if a query materializes an ApplicationUser first and then a call to Add(), Attach() or to Update() tries to bring another object instance with the same key. \nFrom looking at the code, it seems that such situation could arise UserManager.AddLoginAsync() at https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L891. We call await UpdateUserAsync(user) which in turns will attach the user to the context, but that would fail if the user (a separate object instance, just the same key) was previously retrieved by a query. \n@HaoK I think we just need to try this repro steps to understand what is going on. I.e. if we are able to repro we should find out where the other instance of the user is being materialized.\n. It depends. What is this ID? Is it a key borrowed from some other entity or is it just added to this entity to become the key? If the later then it should be sufficient by definition. \n. Could you still answer what the ID represents?\n. @kroniak can you try adding both annotations in the same migration manually? We don't support scaffolding annotations automatically that will run across multiple databases but if both annotations are present each provider should be able to make sense of the annotations I knows about. AFAIR there is also a provider name property on the builder you can use to branch conditionally, but I don't think you should need that in this case.\n. TKey only controls the type of UserId and RoleId. Claim entities are the only ones in the model that happens to have its own surrogate key property. I don't know how intentional the choice of int for the type was (@HaoK may remember) but whether EF Core migrations would require provider specific annotations for store generated keys was likely not a consideration when the decision was made.\nBTW, I think the type is unlikely to change in a point release. \n. > int keys cause migration pain?\nSome. Only if you are trying to have migrations that work across different databases, which is an advanced scenario. \n. Thanks for the information. One more question: what criteria are you using to decide what to make virtual and what not?\n. Yes unless there is not enough time. I assigned it. \n. @HaoK only on primary keys, at least for now.\n. Would it be easy to make it idempotent? e.g. do we have places in which we could replace Add with TryAdd methods?\n. Agreed. \n. Fair enough, it is a breaking change if customers can reasonably have things working with this setup today. We need to understand:\n- How common this is.\n- Are there legitimate reasons to have things setup this way or are we convinced it is not a valid scenario? If it is a valid scenario we may consider a pattern to allow independent options to be configured (e.g. we solved this problem in EF Core with generic options).\nThen we can decide what to do for 1.1.\n. @lixiaoyuan what package versions are you using? \n. Note for triage:\nThe call to \nC#\n            services.AddIdentity<SystemUser<Guid>, BusinessDb.Cor.EntityModel.IdentityRole>()\n                .AddEntityFrameworkStores<ApplicationDbContext,Guid>()\n                .AddDefaultTokenProviders();\nWill try to register type UserStore, BusinessDb.Cor.EntityModel.IdentityRole, ApplicationDbContext, TKey> as the implementation for service type IUserStore<TUser>\nNote that this generic version of UserStore in question has a generic constraint on TUser : IdentityUser<TKey>.\nBut our customer is trying to use a different generic version of IdentityUser and IdentityRole which allow for more customization: \n``` C#\n    public class SystemUser : IdentityUser\n        where TKey : IEquatable\n    {\n    }\n...\n    public class IdentityRole : IdentityRole\n    {\n    }\n```\nUsing the simpler versions works correctly:\nC#\n    public class SystemUser<TKey> : IdentityUser<TKey> \n        where TKey : IEquatable<TKey>\n    {\n    }\n    public class IdentityRole : IdentityRole<Guid>     {\n    }\nAt this point I cannot remember if this is by design.\ncc @HaoK \n. @lixiaoyuan from your code snippets it is not clear whether you could use the simpler generic versions of IdentityUser and IdentityRole as the base classes for your entities:\nC#\n    public class SystemUser<TKey> : IdentityUser<TKey> \n        where TKey : IEquatable<TKey>\n    {\n    }\n    public class IdentityRole : IdentityRole<Guid>     {\n    }\nCould you clarify if in your scenario you actually need to use the base types that allow for full customization for some reason?\n. @lixiaoyuan yes I understand. You should be able to change the key type and add properties by inheriting from the base types that only have one generic argument. \nThe explanation of why this currently doesn't work is in my previous comment at https://github.com/aspnet/Identity/issues/1001#issuecomment-255259355. But please don't close the issue as I would like to discuss an approach for solving this with the team. \n. @haok From what I remember at the moment this should help. BTW, the worst part right is the exception you get if you deviate slightly from the only pattern that is supported. Can we improve that?\n. @HaoK any other ideas?\n. Yes, we assume the managers are scoped and I don't think we ever intended them to be used with a different lifetime. Just a few thoughts: \n1. We are limited on what we can express regarding the intent for specific types to be registered as services only with specific lifetimes and with validating that services are instantiated only with the right lifetime (e.g. it is very likely an error for a singleton to depends on any scoped service). This seems to be good feedback for the DI repo. \n2. Some time ago we intentionally removed CancelationToken arguments from methods on the managers and started relying only on IHttpContextAccessor for cancellation. A bit more information from @tugberkugurlu on why that hurts (besides the coupling feeling too strong) could be really helpful.\n3.  Unfortunately I can't recall why we made IHttpContextAccessor optional and moreover why we only did it for UserManager in 167bb54c8d7aaafa12983164f8033cc25d0af39e (it is still required for RoleManager and SignInManager). @HaoK do you remember?\n. @HaoK thanks for refreshing my memory. Let's chat about this in person in triage. From reading #655 and linked issues it seems to me that if it is was valid to use UserManager (and probably RoleManager) without an IHttpContextAccessor then we could have considered having CancellationToken parameters back. \n. > Hmmm i dont see any SingleOrDefaultAsync method with intellisense.\nAdd using Microsoft.EntityFrameworkCore; at the top of the file.\n. What about this?\nC#\nvar name = \"some name you have in the database\".Normalize().ToUpperInvariant();\nvar test = await this.context.Roles.SingleOrDefaultAsync(r => r.NormalizedName == name);\n. @Cor4xX thanks for trying these things. I don't have any more guesses. At this point I think a repro project could help. \nAlso, re-reading the whole thread in search for clues, I noticed this paragraph:\n\nThen i set my services in a static SimpleInjector class to avoid to pass UserManager, SigninManager etc in each controller : \nStartup.cs in Configure method\ncontainer.RegisterSingleton(provider.GetRequiredService<UserManager<User>>);\n            container.RegisterSingleton(provider.GetRequiredService<RoleManager<Role>>);\n            container.RegisterSingleton(provider.GetRequiredService<SignInManager<User>>);\n\nAssuming I understand correctly, you are effectively changing the lifetime of the manager objects to be per-application singletons. These manager objects have been designed to work as scoped objects for each request. If you start sharing them across multiple requests, I would expect you to get all sorts of errors and possibly data corruption, since they are not thread safe. I am not sure this is enough to explain the particular issues you are seeing though. \n. @Cor4xX if you can still provide a repro project that shows the issue with MySQL we can forward it to the MySQL team.\nFor the DI question, I am not sure I understand what you are trying to achieve but you can register your own composite service types that depend on services provided by ASP.NET. You should still be careful not to affect the lifetimes of services when you do that. As I mentioned before, such services as UserManager, RoleManager or SignInManager or the DbContext need to be scoped. If you create them as singletons you will end up executing non-thread-safe code from multiple threads.. I did a bit more investigation and it seems that the exception \nAn unhandled exception occurred while processing the request.\nFormatException: String was not recognized as a valid Boolean.\nis coming specifically from a convert we add to the compiled expression that converts the DbDataReader into a value buffer, in particular around the TypedRelationalValueBufferFactoryFactory.CreateGetValueExpression() method:\nhttps://github.com/aspnet/EntityFramework/blob/dev/src/Microsoft.EntityFrameworkCore.Relational/Storage/TypedRelationalValueBufferFactoryFactory.cs#L167\nI don't know what would make EF Core be in a state in which it expects a bool but asks the DbDataReader for a string, unless there is something special about these types in the MySQL provider?\ncc @anpete from EF Core and @gmartinezsan from MySQL to see if they have any insights. . My bad too. I assumed it was the official MySQL provider. @ChristianHaase based on the information I have seen so far, I recommend you create an issue at https://github.com/SapientGuardian/SapientGuardian.EntityFrameworkCore.MySql/issues. . The initial migration contained in the sample seems to have been created with a very old version. It contains:\nC#\n            migrationBuilder.CreateTable(\n                name: \"AspNetRoles\",\n                columns: table => new\n                {\n                    Id = table.Column<string>(nullable: false),\n                    ConcurrencyStamp = table.Column<string>(nullable: true),\n                    Name = table.Column<string>(nullable: true),\n                    NormalizedName = table.Column<string>(nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AspNetRoles\", x => x.Id);\n                });\nBut it should be:\nC#\n            migrationBuilder.CreateTable(\n                name: \"AspNetRoles\",\n                columns: table => new\n                {\n                    Id = table.Column<string>(nullable: false),\n                    ConcurrencyStamp = table.Column<string>(nullable: true),\n                    Name = table.Column<string>(maxLength: 256, nullable: true),\n                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AspNetRoles\", x => x.Id);\n                });\ncc @HaoK \n. @HaoK can we move this out of 1.1.0? Doesn't sounds like it would block us from shipping.\n. @haok can you remind me, if the user switches to an int TKey, do we also rely on SQL Server IDENTITY behavior for things to work?\n. @brockallen yeah, I know it is different but I suspect if you switch TKey to be numeric the same can happen with the provider. BTW, what provider exactly (name and version) are you using?\n@HaoK still not sure whether this is a problem in our code. My expectation was that value generated on add would be set by convention for these properties, but I haven't looked at the code yet. Either the behavior is more provider-specific than I thought or the particular provider Brock is using could be doing something that prevents it from happening. \n. BTW I expect some additional configuration to be necessary in ApplicationDbContext if you choose to use an EF/database provider that deviates from certain common behaviors, but I am just not sure yet if this particular case should be one of those.\n. I had some time to look at this today again and it looks like it could be the result of an intentional change in the PostgreSQL provider (described in http://www.npgsql.org/news/efcore-1.1.0-preview1.html). It is a bit unfortunate and I would have expected this to work without any additional mapping but maybe there were other issues with that.\n@roji any thoughts?\n. @roji I probably just misunderstood what the Npgsl release notes meant about the ValueGeneratedOnAdd annotation. Agreed that the conventions should be sufficient here and that there seems to be a more subtle issue that needs understanding. \n@AndriySvyryd is going to help us investigate this issue.\n. @HaoK any idea of how this affects upgrading an existing application? \n\nlooks like we missed adding the generic parameter for the token when we added the other entities.\n\nDo you mean when we did some other change in 1.1? Or has it been missing from 1.0?\n. > we will need to take a small breaking change when we add the additional generic argument\nI hate to ask :smile: but what would it take to do it in a non-breaking way? Does an IdentityUser that derives from the most generic one but fixes TUserToken help?\n. @HaoK see https://github.com/aspnet/BuildTools/wiki/Api-Check.. My evaluation is that the the potential impact of the new() constraint per se is tiny. Are we doing more than that? . @HaoK as long as the new method is invoked in all the places where currently we are using UpdatePasswordHash I think it should address @pushist1y's scenario. Agree? . @HaoK I looked around, and I am almost sure the two cases I had seen in which we would throw the exception are:\n- Inherit from the IdentityUser that has more generic arguments\n- Change TKey to a different type from the default but forget to pass the new type as a generic argument in the call to AddEntityFrameworkStores. \nFor the latter I noticed you filed https://github.com/aspnet/Identity/issues/876. \n. BTW, a couple of simple searches shows that this exception is one of the most common reasons customers file bugs on the Identity repo and ask question about Identity over in StackOverflow. \nIf we get it right this could help a lot!\n. @halter73 @HaoK any of you can help with the exception:\nInvalidOperationException: No authentication handler is configured to handle the scheme: Identity.External\nMicrosoft.AspNetCore.Http.Authentication.Internal.DefaultAuthenticationManager+d__14.MoveNext(). @msmolka this all sounds reasonable, although I am not sure that making these methods overridable is all you are going to need. Changing the definitions of the keys in the model sounds like could require more changes in the store. \nWould it be possible for you to make all the necessary changes to our source code until your provider works end-to-end and then send a PR with that?\nAlso, it would be interesting to know more details on why you gave up on just limiting the size of keys for MySQL.\n. > as far I can it was changed from SingleOrDefault to find between version 1 and 1.1. And looking into latest code (not released) it is now changed back\n@msmolka I checked in the dev branch and it seems to be using FindAsync() still. If you see something else, can you please point me to it?\n\nHaving FindAsync removing flexibility of extending base classes and add custom keys. As far as I know, from database point of view there is no benefit because query is exactly the same.\n\nThe potential benefit of using FindAsync() is that it avoids a database call if the entity was already loaded in a previous call in the same request. \nAfter re-reading a couple of times your post I think I now understand what you are trying to do. We can probably easily change FindToken() from private to protected virtual (note to @HaoK: we should add the Async suffix as this would now be part of the public surface). \nHowever you should be aware that if you simply add a surrogate key and override the method to use a SingleOrDefaultAsync() query on the same columns, those queries could become inefficient.  You would need an index on all or at least some of UserId, LoginProvider and Name.\nBeyond all of that I just took a look at our default model and I think the fact that we haven't limited the length of User.Id (when it is a string or byte[]), LoginProvder and Name is an oversight. We do explicitly limit the size of columns that we use for indexes/lookups, such as user, email, and their normalized variants. I think we should do it for keys as well. . Clearing up to discuss in triage.. As @HaoK's note above mentions, he and I discussed this today and decided we want to add virtual methods for each \"find\" action on each type of entity in our stores. This will include FindTokenAsync(). \nIn addition to that, we discussed whether we should restrict the sizes of string keys explicitly in our OnModelCreating() method to improve the chances that composite keys will fit given limits in the databases. \nAt first glance this might look reasonable (after all we did something similar for non-keys that index), however each EF Core provider should already be picking max lengths that are adequate for properties that participate in keys. We want those max lengths to be sensible defaults for each database and we should not be overriding those defaults in Identity. The action item here is to follow up with providers (in particular MySQL providers) so that they are aware that they should make a sensible choice. . > At first glance this might look reasonable (after all we did something similar for non-keys that index), however each EF Core provider should already be picking max lengths that are adequate for properties that participate in keys. We want those max lengths to be sensible defaults for each database and we should not be overriding those defaults in Identity. The action item here is to follow up with providers (in particular MySQL providers) so that they are aware that they should make a sensible choice.\nI investigated this a bit further and it turns out that for our own SQL Server provider we specify by default a max length that is equivalent to 900 bytes for each single string or binary column that participates in a key. Although the maximum size supported by SQL Server is 900, you can still have composite keys with string members without configuring their max lengths as long as the total size of the values doesn't go over the limit. \nIt is possible that we can could help by adding something to EF Core specification tests to make provider writers more aware of this choice, but I am not sure what. \nMy current thinking is that this is an area in which what works best for specific providers varies a lot and it would be reasonable for someone to override OnModelCreating() to set max lengths that are more appropriate for the EF Core provider and database they use.. @HaoK I am fine with that since we don't seem to have finer granularity than that.. cc @HaoK . @HaoK OnModelCreating() refers to ConcurrencyStamp but ValidateEntity() refers to ConcurrencyToken as string so I guess it is just a typo. FWIW, you can use lambdas in ValidateEntity() :smile:. @Saticmotion your controller can obtain the same IOptions<IdentityOptions> singleton from DI that the UserManager gets in its constructor:  https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserManager.cs#L75. . BTW I am not against making the property getter public in 2.0. cc @HaoK . Reopening so that we can consider making the property getter public.. @PaulRReynolds @VahidN this usage of Configuration.Bind() in the lambda is pretty cool (cc @HaoK @glennc).\nFWIW if your projects includes the Microsoft.Extensions.Options.ConfigurationExtensions package you should be able to use a Configure<T>() overload that takes an IConfiguration directly which I believe looks slightly simpler and should do the same thing, e.g. something like this:\nC#\nservices.Configure<IdentityOptions>(Configuration);\n. Related discussion: https://github.com/aspnet/Identity/issues/1040#issuecomment-267720205 . @MaklaCof just to clarify, you are configuring the key of the user login twice. The last configuration will win, so the one that configures Id as a key will be ignored. Hence the Id property you added to the entity serves no purpose.. cc @roji to answer if there is anything Npgsql specific you can add to the model to make the queries case-insensitive.\nI am curious though why the Id column could cause this problem. Are the entity types or the model customized to use a mechanism to generate the key values different from the default? \nIn the default implementation Guid.NewGuid().ToString() is assigned on construction of a new instance and as far as I know we the exact value (with the same casing) should be used from there on in any query or update. \nIs there anything in the application that is switching those strings to uppercase? \n. @mcgiany could you share the code of UsersController.CreatePost()? . @mcgiany Assuming CreatePost() results in a simple call to UserStore.CreateAsync() this could be some kind of race condition, but it is hard to say where.\nMy first suspicion is a similar failure we observed in our tests long time ago while running against SQL Server LocalDB. We were then able to identify root cause as an issue in LocalDB itself (i.e. it reproduced without EF Core in the picture). We believe the issue has since then been fixed but you might need a build of SQL Server that contains the fix. \nTalking about this issue with @ajcvickers he also suggested there could be something in EF Core's Hi/Lo key generation feature. \nFor full context, ForSqlServerUseSequenceHiLo() won't really bind the default value of the column to the next value of the sequence directly, but will setup a key generation strategy that performs small increments in memory and periodically performs larger increments in the database (see http://stackoverflow.com/questions/282099/whats-the-hi-lo-algorithm for more complete explanations of how Hi/Lo works). \nThere is really no point in using Hi/Lo with an increment of 1 on the database, so presumably we haven't tested this corner case enough and it is theoretically possible that it could cause a race condition.\nIn summary, here are a few questions and suggestions on what to try:\n\n\nWhat database product are you using? Does it happen to be SQL Server LocalDB? Are you running on the latest version?\n\n\nCould you try switching to increments of 2 or more and see if the issue goes away?\n\n\nCan you try switching to binding the default value of the column to the next value of the sequence using this pattern to see if that helps?:\n\n\nC#\n    b.Property(e => e.Id).HasDefaultValueSql(\"NEXT VALUE FOR seqAspNetUsers\");. Curious, wasn't the purpose of normalization just to disallow users or roles to be created that could seem equivalent? Did we make an explicit decision that using it for other comparisons was ok?. FWIW, the code changed quite a bit in https://github.com/dotnet/coreclr/pull/9941. . @HaoK do you always need to configure in storeOptions in the call to AddEntityFrameworkStores to indicate whether the schema for roles needs to be included or can that be inferred automatically by the fact that you called AddRoles? . We should chat about this in depth. At this point I cannot think of a way this could be implemented without adding a new layer of indirection that would impact the whole Identity stack, unless protection can happen \"transparently\" in layers below Identity. \nE.g. one of the stretch goals for EF Core in 2.1 is to enable setting up \"conversions\" as part of the mapping, which need to be applied when property values roundtrip between objects and the database. These \"conversions\" would be a good place to do protection. EF Core happens to already have a natural place to configure this at a property level which is controller by the user: OnModelCreating().\nOn the other hand if we did it this way it would become a feature of the EF Core provider for Identity, and I am not sure that would satisfy the requirements.. It would be good to leave something we can track about this, e.g. a TODO comment.\n. Nit: some of the non-essential changes in this PR make it hard to review. Next time please consider splitting :smile: \n. We should be aware that having this on a method of an interface will have limited effects, e.g.: \n- For someone consuming the an instance typed as the interface, it will look like an optional parameter. \n- Also, when we ask the IDE to implement the interface it will conveniently copy the default value into our method\n- However, this does not force an implementation of the interface to have the parameter as optional nor to have the same default value\nGive that, if this interface is not generally consumed or implemented by user code directly it could possibly be simpler to just leave the cancellation token as non-optional.\n. On the other hand, if the interface is commonly implemented or consumed by user code I have no reservations on leaving it as is. In either case I don't feel very strongly about it.\n. Is there a compelling reason not to add cancellationToken.ThrowIfCancellationRequested() at the top of these methods? It would give you an excuse to write new tests :smile: \n. Sounds like we shouldn't need to add these. \n. I am fine with this.\n. Sounds reasonable but I am not sure what the conclusion is :smile:\n. Got it.\n. Ok, let's go with that and see what we learn.\n. I am not sure this would be right. The Entity call is not only a way to \"select into a type that implements the interface\" but it also informs the model builder that TEntity is an entity type. If we make IUser the entity type (we might enable that) then all the other custom properties that exist in TEntity that are not defined in IUser would be ignored, or EF would consider that there are two types in an inheritance hierarchy.\n. I keep learning about Identity... You probably know this already but random (i.e. client-generated GUIDs) cause SQL clustered indexes to be very inefficient (for an example I just found in bing, see http://www.sqlskills.com/blogs/paul/clustered-or-nonclustered-index-on-a-random-guid/) and is commonly considered a bad practice. One of the common solutions is to use store-generated GUIDs with newsequentialid() but that is not available in SQL Azure (and the fact that you need to convert it to string may make it more complicated). In SQL Azure the recommended practice AFAIK is to make your PK not be a clustered index and use a simpler surrogate key (e.g. an int identity) as the clustered index (SQL Azure does not support tables without clustered indexes). I believe it would much better to just switch our default to use an Integer.\n. I think because we have not identified in EF any scenario in which Delete would cause any I/O. I would just remove this comment.\n. Is there an overload that takes a CancellationToken?\n. Why doesn't this one take a CancellationToken?\n. Why do we need this one to be async?\n. Is there an async version of this? I am almost certain we have an extension method for it.\n. Idem.\n. Can we issue separate queries for the three other things that we used to Include? It might require some expression stitching to build the predicates for the other guys.\n. Can we start using the [NotNull] attribute? No need to use the Check.NotNull() helper from EF, but we are planning to leverage Roslyn to write the null checks automatically for the attribute.\n. Re-enabling GetUserAggregate[Anync] would be ideal, but in the meanwhile, can we use the async version of the query methods?\n. Nah, I just realized the implementation of those is still mostly empty. Ignore these for now. \n. Or even better, add a TODO.\n. ToListAsync with CancellationToken (I believe that one actually works :smile:)\n. //TODO to change to FirstOrDefaultAsync(Exp<>, CancellationToken)\n. Let's implement the decision to bring back the Async suffix. As far as I am concerned you don't need to do it in this commit.\n. What I mean is that it should be ok to make it a non-async method and just return the Task from Context.SaveChangesAsync() without an await, or if AutoSaveChanges isn't set, just a Task.FromResult(0).\n. Sounds good.\n. Is the rename temporary until we consolidate?\n. Got what you are doing. Sounds good. I just hope we can get rid of these :smile:\n. Why is this?\n. Why is this changed?\n. Limitation of EF?\n. I assume in the in-memory store it doesn't matter because it will never be production ready, but I am curious why you need to clone the object... Do we support custom IdentityUserClaims?\n. I see. Consider adding a TODO wherever you had to do this. \n. I think this shouldn't be here but it should be defined somewhere else as an extension method over ServiceCollection, with an overload that takes an Action<UserManagerBuilder<TUser>>.\n. Moreover, it could be public static ServiceCollection AddIdentity<TUser>(this ServiceCollection services, Action<UserManagerBuilder<TUser>> builderAction), taking the TUser generic argument at the very start. Do we need to configure things around TRole as well?\n. I don't see much value in having the separate at this level, but we can chat in person in case I am missing something.\n. This should return the services collection instead of the identity builder, so that you can chain it with AddMvc(), AddEntityFramework(), etc.\n. Also, to the issue with forcing everyone to think about TRole even if they are not using it, could we have an overload of this that only takes TUser and defaults TRole to the POCO IdentityRole or whatever is more appropriate? An alternative would be to have two different iIdentity builder classes, e.g. IdentityBuilder<TUser> and IdentityBuilderWithRole<TUser, TRole>: IdentityBuilder<TUser> that the two overloads would use.\n. A few of us talked about this today. Seems to be a genuine case of service - configuration duality :wink: Stretching it a bit towards the service side, although we have this simple implementation nothing prevents replacing it with something more complicated... On the other hand this is clearly just a fancy code-based way to pass some (presumably application-wide) configuration settings to the UserManager by having DI resolve the instance. There might be a better general pattern for doing this and we are open to suggestions. One attribute I personally feel is missing on this one is that you cannot easily override the default of just one of the properties without knowing and repeating the values for the other ones. \n. Can you start adding the [NotNull] attributes in new code? Not blocking on this though.\n. Are these still default values? Otherwise why would we need the properties on this class to be settable?\n. Would it make sense to make this one injectable as well?\n. Could make the constant static?\n. I just wonder if keeping \"Default\" on the name would help understand what the options are about, e.g. for things that you only change in the Options they are not \"defaults\" but something for which the IdentityOptions just provides an initial value for a property that you can later change on a case by case basis is a \"default\".\n. I think you need to make the parameter an accessor for it to be injectable.\n. I believe singleton is probably right, but what needs to be registered here are IOptionsSetup, and we need help from @loudej and @davidfowl to figure out how to register ordered collections of those.\n. It seems that if DI cannot resolve the dependencies this will at most be a runtime exception (as opposed to a compiler error) either way, so I am not sure what value such pattern provides. @lodejard, @davidfowl  what is your take on this?\nFWIW, I don't like the fact that we are taking the IServiceProvider but we probably need it.\n. @anpete should this work? Otherwise what do we need to do?\n. Eh? Do we have this hardcoded? :frowning:\n. I see. The best thing here would be to capture the connection strings configuration into an 'options' object that can be passed through an accessor in the constructor of the DbContext. Unfortunately I cannot think of any simplified version of that which would be substantially better than hardcoding it as you have it right now. \n. Rename to something that is more Identity-specific.\n. I remember we discussed this but I don't remember the conclusion. In general I don't think we should have hardcoded this. We should later also discuss how we separate the EF stuff from the SQL Server specific stuff. Currently we are assuming SQL Server and that doesn't quite work.\n. Nit: a EF specific name for this sponsor class would be better because it would potentially avoid collisions. \n. AddEntityFramework like the one a few lines below?\n. Curious, is there a common pattern we need to follow to avoid throwing NREs in code like this?\n. Not sure the extension methods should be in this namespace. We said previously we would put them in the target namespace of the object the extension methods apply to, and I think we had it in DependencyInjection for that reason in one of our previous attempts. Anyway, the whole class needs much work, so I am ok with leaving it like this for now.\n. Is stylecop adding a lot of value right now? Last time I heard we were thinking about using it and adopting common rules across all repos. Are these the same rules as in MVC? Otherwise I would probably hold off of adding it or I would prefer to have a bug to track discussing it with the engineering team. @Eilon, any thoughts on this?\n. Actually this should stay as a TODO or the namespace should change to Microsoft.Framework.DependencyInjection. In other places we are doing it like that, e.g. SignalR and EF.\n. I notice this is <User, IdentityRole> and not <IdentityUser, IdentityRole> or <User, Role>. Is this temporary? \n. Same as before, why the base user class is called User and the base role class is IdentityRole? Should probably be consistent.\n. We should probably have a bug or a TODO tracking rationalizing these constructors when EF does, e.g. this should probably take a IOptionsSetup instead of DbContextOptions directly.\n. Thinking about it more, these constructors on the base DbContext type are not necessarily there for DI. There is probably always going to be one that takes DbContextOptions directly on DbContext for usage in direct user code. The question is, should we have that on IdentityContext?\n. Was this class called IdentityDbContext in 2.0? We rename it back to that unless we have strong reason. Same for the generic version. Not necessarily as part of this change.\n. Please remember to rename the namespace when you re-base with the package/assembly renames.\n. Aren't we removing TKeys for now?\n. Next time please separate formatting changes in their own PR :sweat_smile: \n. Sounds great.\n. We decided some time ago we would try defining our extension methods on the namespace of the target type, as opposed to the normal framework namespace of the sponsor class. That way where this is used, e.g. in the start up class you only need to bring the DI namespace and that will put all the extension methods that apply to DI in scope, from all the dependencies declared from the application.\n. Why use the same class name that EF uses? This one should be something else.\n. Can you remind me why we need this overload? At first glance it seems that with it you can do the same inside the parenthesis (with a nested closure) that you could do after the parenthesis (with method chaining). \n. We should socialize and proactively ask for feedback on this name and on the thought process that lead us to it.\n. Have a TODO here saying that we should remove all the hacks when proper relationship configuration APIs are added to the model builder?\n. Is this a child of the bigger IdentityOptions class? Sorry if the answer is somewhere in the PR already... \nPlease ignore. Found it below.\n. Also, just wondering if this is the best name, e.g. why not IdentityClaimsOptions :)\n. Passing options objects like this seems a bit strange. Makes me wonder if someone else is responsible from resolving the IOptionsAccessor so that the \"ClaimsIdentityOptions\" instance can be passed here or if the constructor of the concrete IClaimsIdentityFactory should get through injection.\n. Again, we shouldn't be using the same sponsor class name as EF.\n. Weren't we going to remove this from product code?\n. Got it. Sorry I missed that.\nSent from my Windows Phone\n\nFrom: Haomailto:notifications@github.com\nSent: \u00fd7/\u00fd10/\u00fd2014 20:00\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Diego Vegamailto:Diego.Vega@microsoft.com\nSubject: Re: [Identity] Cleanup work (#144)\nIn test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n\n{\n-        public static IdentityBuilder AddEntityFrameworkInMemory(this IdentityBuilder builder)\n-        public static IdentityBuilder AddIdentityInMemory(this ServiceCollection services)\n\nThis code is in a test project I just moved it there as is. On Jul 10, 2014, at 4:56 PM, \"Diego Vega\" notifications@github.com<mailto:notifications@github.com> wrote: In test/Microsoft.AspNet.Identity.EntityFramework.InMemory.Test/EntityInMemoryServiceCollectionExtensions.cs:\n{ - public static IdentityBuilder AddEntityFrameworkInMemory(this IdentityBuilder builder) + public static IdentityBuilder AddIdentityInMemory(this ServiceCollection services)\nWeren't we going to remove this from product code? - Reply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14800688.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/144/files#r14804967.\n. Hard to parse.\n. nit: SMS?\n. I think we should call String.Normalize() as well. Is it always available?\n. Consider making this public so that customers that already have a UserManager instance and use it to convert a user name (e.g. coming from user input) into something they can pass to our APIs.\n. Consider making this public so that customers writing custom code can more easily use the configured normalizer service to fixup the names in the user instance before saving it.\n. From what I understand currently this will never be null if the user manager is instantiated using DI, i.e. either the service is resolved and passed of the constructor or we will get an exception from DI. If we want to make it optional, we have some options:\n1. Have the constructor of UserManager take an IEnumerable\n2. Create some sort of NullUserNameNormalizer that can be registered in DI instead of the standard one\n3. Have a flag in Options that controls whether the default IUserNameNormalizer does something. \nI think I prefer option 1.\n. I see, but they need to know exactly when to do that. Feels like a very ad-hoc pattern for configuring the behavior that adds to the standard ones in Options and DI.\n. Sounds fine, then let's make the property read-only and stop checking for null here :smile:\n. UpdateUserNameAsync? I am somewhat ok with not doing it if we are currently only using the Async suffix for public API :smile:\n. You don't have to add it, but I cannot promise I won't ask for it again :)\n. Can't this be enabled now?\n. Nit: Having new CancellationToken() looks a bit funny to me because it is value type. It didn't occur to me that this pattern would work :) Can we use CancellationToken cancellationToken = default(CancellationToken) instead? We are doing that in most other places.\n. Do you feel we went too far with this one?\n. Can we call this UserNameValidationRegex? My motivation is to try to make it as easy as possible to grok, because while UserNameRegex is an order of magnitude more powerful it is also an order of magnitude harder to understand than AllowOnlyAlphanumericNames for someone who just wants to switch the behavior between one and the other. (I understand from the code below that you can set this to null if you just want to allow everything).\n. Do we know the runtime/memory impact?\n. Sounds good!\n. You have this on the same branch you did primary constructors removal? Do you need to rebase?\n. Ah, maybe because we don't build them by default?\n. @loudej We are renaming this method as our conversation with @HaoK Do you think we should rename the IOptionsSetup<> interface as well? To what?\n. @pranavkm heads up that this change is also here, but is slightly different. I prefer to make it private as you have it in your PR.\n. For cases like this in which the await is on the tail of the method it is more efficient and cleaner remove the async keyword from the method and just do a return at the end.\n. Same case as before. GetClaimsAsync doesn't need to be marked as \"async\".\n. You are right. We use await to unwrap the task and rewrap it as a Task<IList<>>. Whish there was a better way.\n. If you are not planning to use navigation properties anymore (which so far has been your choice :smile:), you should get rid of this comment and write three additional queries to explicitly load Claims, Logins and Roles related to the user. However you are starting with an Expression<Func<TUser, bool>> filter, and EF does not currently support navigation properties, so you will have to do some refactoring around this code or rewrite the expressions to express them in terms of key equality  :smile:\nOn the other hand, @anpete believes this query (e.g. the one you get if you uncomment the Includes()) is already supported by EF7, but there is a bug somewhere else in which we are not configuring the navigation properties correctly. \nGiven that I would recommend embracing navigation properties for the EF implementation of the store, at least for this part.\n. Do we have a bug for having a normalized role name (see the code above that does r.Name.ToUpper() == roleName.ToUpper()?\n. Is adding the userRole row to the database enough to get the graph fixed up? If yes why comment these lines instead of removing them? If now, what do you propose to use instead of the navigation properties?\n. Similar to the change before this one... is the object graph correctly fixed up by just removing the userRole? If yes, why comment this code instead of removing it? If no, what do you propose we use instead of the navigation property?\n. Could you verify if EF7 + SQL Server is currently producing a good/efficient SQL query for this? We might need to consider other alternatives.\n. If it doesn't please file a bug.\n. Same as before: is the graph of objects in memory going to be correctly fixed up after this? Otherwise consider keeping the line.\n. Same.\n. > ... and verify the query\nIf the comparisons are not included in the WHERE clause we should talk to @anpete. Since we are currently evaluating the clause again in-memory it sounds reasonable that we could support translating Equals() with some values of StringComparison to predicates in the WHERE clause loosely as long as the rows returned from the database are a superset of the matching rows with in-memory semantics.\nIf this gets scoped out of EF7 RTM we can always write the query explicitly the way we want it, e.g. with a simple Equals() (assuming that one does get translated to an equality predicate in the WHERE clause), then switching to in-memory with AsEnumerable()  and finally preforming the filtering using Equals() with the right StringComparison value. \n. nit: do you need the parenthesis?\n. Make the method async and return await query.ToListAsync(cancellationToken)\n. Return await query.ToListAsync(cancellationToken)\n. Use the overload of FirstOrDefaultAsync() that takes a CancellationToken\n. Also, could you review this file and check that we are passing the CancellationToken on every EF query?\n. nit: wouldn't it be (slightly) better to do the argument validation first?\n. Do we still need our own InMemoryStore for the tests or could be just use the standard EF store that is in the product with the InMemoryDbContext?\n. Ok, no problem with keeping tge same pattern then.\n. Yes, it does have the same issue. That is why I said the method should be made async :smile: But besides, we should make sure all our EF queries are async.\n. I think this is same case a we saw before in which we need to await to do the cast, right?\n. Is there a good reason the service type and the restriction can't be on an interface? Can't remember if we came to a conclusion that would apply to this case...\n. Is there a good reason the parameters are of type object instead of something more specific like string?\n. BTW, I don't feel strongly that it needs to be an interface. Just calling it out for the sake of consistency across the frameworks. \n. I am ok with checking this in but I would like to chat with you about this (and also the similar change with null options that I see a few lines above) as a general trend, i.e.:\n1. Is this going to be null only if DI wasn't correctly setup or is there a use case in which it will be null. \n2. If there is no use case then should the system really fall back to something we consider reasonable if things were not setup or is it more useful to let the user know that DI isn't correctly setup?\n. Do we need the setter?\n. Yeah, that makes sense to me.\n. I do think it is better.\n. I understand these arguments, but tests could share a lot of the required setup code and if DI is always going to be there in real apps then lines like this just amount to gunk added to the codebase. As I said, I am ok with checking this in but I want to have the conversation.\n. It is nice to be able to say if (result.Succeeded) but other than that the introduction of this class doesn't seem to provide enough value, assuming it is breaking change. Other than that, it seems a good candidate for being a value type.\n. You should be able to remove these setters altogether in C# 6.0.\n. So if I pass SignInFailure.Failed or false to the constructor it means the same? Feels a bit weird...\n. In C# 6.0 you can make this read-only by removing the settier if that makes sense. On the other hand, why a property then?\n. Thanks for the link. Makes me wonder if people are still a bit stuck because we kept the enum (we just pusshed it one level down).\n. Thanks. I missed protected. \n. I can be conviced that this can be public and to allow replacement if you believe your tests will be much better. But that sounds like an area in which we should discuss and agree on a pattern for all frameworks. For private I don't think we have specific guidance, but I would probably just use the simplest that can work and that is fields. \n. > we'd have to have explicit checks/results for each of the enum values NotAllowed(), RequiresTwoFactor\n\nI get that, and I just wonder if that would be cleaner and more \"orthogonal\".\n. BTW, they could be separate bool properties like succeeded. \n. Please start a conversation about this with @davidfowl and @loudej (or @lodejard, not sure :smile:).\n. Let's have another conversation started about this pattern, please.\n. Nice\n. Not closely related to this checkin, but would CallerMemberNameAttribute in a parameter constructor of IdentityError be nicer way to achieve this? \n. I meant that, but only if we end up doing this nameof() thing in most places where we create an IdentityError, in which case I think it would be less error prone.\n. AFAIK the conversion issue is only between Task<List<T>> and Task<IList<T>>. Once the List<T> is unwrapped there shouldn't be a problem. \n. Using just \"key\" to describe this concept seems to introduce some ambiguity, because there are already primary keys and foreign keys in the entities in addition to the properties we are normalizing. I like \"lookup key\" more, e.g. IIdentityLookupKeyNormalizer. \n. Can you please ping the engineering team about this pattern? Not blocking on it.\n. Not bad, but we do it with a specific purpose... What about IStringLookupNormalizer or ILookupStringNormalizer? :smile: \n. Sounds good (either, I am inclined to keep Identity in the name though, assuming we do it for other interfaces).\n. Would it be better to move some of this functionality to a Log method in SignInResult similar to how we do it with IdentityResult?\n. You shouldn't need a block or return here.\n. Hmmm. Sprinkling code that can potentially block everywhere isn't good. Let's chat about this more. We should probably hold of making this change until there is a version of Log() that takes an async lambda.\n. Yo are missing my point. Try () => Resources.FormatLoggingResultMessageForRole(...). Single line lambdas don't need return to return something.\n. This is invoking the WriteAsync() method defined above with a specific LogLevel, right? Why check if logger.IsEnabled() twice?\n. Same as above, why check for logger.IsEnabled() twice?\n. Agreed that this one looks weird. Also it seems we could refactor the method to capture the outcome and three places and only log and return it at the end.\n. Are we missing logging for the return false outcomes above?\n. Why isn't this using the version of WithLoggingAsync() that takes an IdentityResult as opposed to Task<IdentityResult>?\n. I would put these alongside the ones in ResultExtensions. Results just happen to sometimes be async.\n. Well, await (await ...) just happens to be what you need sometimes although this is the one you could probably improve a bit with ContinueWith() (@suhasj note that the task in the delegate argument of ContinueWith() is already completed, or failed).\n\nI don't completely hate the WithLogging() experiment. It has a good vibe in that it makes Logging a separate \"aspect\" that only applies to the results of operations. The one thing that makes me think it is isn't the right way to go is that on every single call we are passing the \"this\" argument, e.g. the UserManager, RoleManager, SignInManager instance. It is a clear smell that an instance method on those (the way we had it before) would make the most sense.\n. Why the name identityResultDelegate? What makes it a delegate?\n. Ah, because such version doesn't exist yet for RoleManager... I think it should exist.\n. > Also result extensions is no longer extensible unlike the virtual method\nGood point too.\n. @suhasj When you go back to instance methods on UserManager, RoleManager and SignInManager, take a look at getting rid of this level of helpers. Seem largely unnecessary. You can do the check on the other ones and I don't think it is that much duplication.\n. Of course as a instance virtual method on RoleManager.\n. This pattern looks a bit better than the one we have in the other methods, i.e. decide the log level, put it in a variable and checking if it is enabled instead of having nested ifs.\n. Is there a version of Write we can use from logging that would just take logLevel as a parameter?\n. Consider moving this to a method in result that returns the right status string.\n. @HaoK Why would the result object need to know how to log? I prefer that it just knows how to return relevant data to construct the log message.\n. Agreed, I just suggested that the logic to decide the status string (e.g. if (result.IsLockedOut) status = \"Lockedout\", etc) probably belongs in one of the result types. Maybe there are larger chunks that can be moved there.\n. And accepts those to be null?\n. Can you refactor this method to also use something like var logLevel = result.Succeeded ? LogLevel.Information : LogLevel.Warning etc. as you did in a different version of the method?\n. We can chat about allowing the eventId to be configured. The main reason I am asking right now bout this though is because you can replace the whole if with a single line of code.\n. Good point. My fault. I suggested @suhasj to look into something like this just to make this look simpler.\n. We can just bring back the field and do public static SignInResult Failed => _failed\n. I actually wasn't sure about it when we finished the conversation, so I think it is more of a question: These currently look like the implementation of ToString() for an enum, e.g. the strings represent members of the type in PascalCase. Should we return a descriptive name instead? If these are members of the type I don't think they should be localized. If they are descriptive strings then they should be. If they are not localized then I don't know if there is a good reason to still stick them in resources. @HaoK what do you think?\n. Implementation or representation?\n. The second sentence is redundant.\n. Nit: I like the indentation and new lines to be the way it appeared in @HaoK's suggestion.\n. Nit: Add a using with the namespace of the attribute everywhere and make this shorter.\n. In UserManager we treat false as warning, e.g. var logLevel = result ? LogLevel.Information : LogLevel.Warning. Is it intentional that we treat true and false the same here?\n. The guidelines are good information. I guess we need to decide when we apply them to Identity whether it is more helpful to log something like a user locked out as a warning. @HaoK what is your take?\n. Interesting that these overload now moves here because the typed moved and hence they are tied to EF. I think it would probably be better to get rid of them.\n. Same as comment above.\n. Will private create issues with reflection on Mono?\n. If I am reading this correctly, it sounds very complicated, and it won't work :)\nhttp://blogs.msdn.com/b/ericlippert/archive/2012/11/13/why-is-deriving-a-public-class-from-an-internal-class-illegal.aspx\nI think it is actually fine to use the API on user manager as an abstraction layer and if we just need to do some trick to set the password hash alone, we can look into that more.\n. > abstract method on UserManagerTestBase \nI like that more, personally. It means you can potentially derive from this class to test any provider without spoiling the entity types.\n. See #411.\n. Is the issue you mentioned with NLog support for scopes not being compatible with async still happening? Do you know if there is a bug and anyone following up on that?\n. Is this class an implementation detail or do we expect customers or provider writers to use it? If it is an implementation detail we should consider moving it to a different namespace, e.g. Microsoft.AspNet.Identity.Internal (to be consistent with what we are doing with internal implementation details across the framework) or Microsoft.AspNet.Identity.Infraestructure if we think the API is solid and we don't want to discourage customers from using it directly. \n. Nit: I don't think the (b) needs the parenthesis.\n. Nit: if we are not using this method from from outside the class, you can make it protected.\n. Nit: Consider breaking in three lines on ? and :. \n. Is there anything we should be logging as information? I think we should probably log as information when we write changes to the Identity store (I going down from the top of the PR, so maybe I haven't got to it yet?).\n. OT: Parameter name should probably be errorDescriber unless it is the list of errors. Also, I noticed in the body of the constructor that we initialize a couple of classes if null. Is this the pattern we agreed to get rid of or something else?\n. Agree with @HaoK the property here can be just called Logger. the Logger in IdentityLogger is protected so no one can do Logger.Logger, right?\n. Since this class doesn't have any state besides the ILogger itself i think we should make its members extension methods and get rid of it.\n. Besides that, I am not sure we need the IdentityLogger class (I just wrote a comment for it), so this could end up being a regular ILogger.\n. I wonder if sill makes sense to create a logging scope when we know we will only log one message inside of it. I haven't build a good mental model around it but I would like to know what @lodejard thinks.\n. BTW, I know we are doing it this way consistently because we only identify the user in the scope message. But still wondering if single entry scopes are supposed to be.\n. Let's file a bug on our side for now (i.e. in Logging), so that we don't forget this is broken.\n. I prefer that we keep things simple by making it a static class with extension utility methods (and we move it to a nested namespace). It doesn't seem that compelling to replace it and BTW, this PR does not make it because we are creating new instances with new as opposed to making it a service. \n. Let's check with @lodejard if he thinks verbose for identity transactions is in alignment with the spirit of the guidelines.\n. Probably not :)\n. I would err on keeping things simple, especially if we can just use ILogger.BeginScope().\n. Correct PascalCase name would be GetScopeMessageForUserAsync (with an uppercase 'F'). My preference would be GetLoggingScopeMessageAsync.\n. Are we loosing all logging test coverage?\n. We actually don't have proxies in EF7 so far. @ajcvickers what do you think the best possible pattern would be for these collection navprops? :arrow_down: \n. ~~DbContext is IDisposable. Please use using even if doesn't seem needed right now.~~\n. Sorry, scratch that. I see now that you don't control the lifetime of this one directly. \n. However this still doesn't seem right. When will the context get disposed? I assume you copied this pattern from other tests?\n. This one still looks weird. Using Task<T>.Result is pretty bad, and also this expression cannot be translated to a store query in EF so it will evaluate in memory. Isn't this actually an EF specific test that could depend on the EF POCOs? If we want to have it for any provider that implements IQueryable, let's chat about how to make it more general.\n. Same comment as before about .Result. We should re-think how we test IQueryables.\n. See other comments about .Result. Let's figure out if we can something better.\n. Same about .Result.\n. These extension methods aren't for app developers. They are primarily to be used internally by Identity. So I don't think they should be in this namespace.\n. Bug so that we don't forget? Or is your TODO list in github? :smile:\n. BeginLogScope to me reads a but weird. Logging instead of Log would be my preference, but English isn't my mother's tongue.\n. Jus put them in the Microsoft.AspNet.Identity.Internal but make them public. That is something we decided to adopt across all components of the stack.\n. I prefer BeginLoggingScope.\n. ... Async :smile: \n. I am fine with that too. But the Internal namespace isn't really gross :smile: It is just a departure from how we used to do things cc @davidfowl.\n. > The guidelines are i believe that the namespace for the extension methods be the same the class they are on ? In this case...\nThat guideline was really meant for extension methods we want everyone to get. We have found since a couple of reasons to deviate.\n. If we really think these test are general purpose and not EF only, e.g. if we think they have value for store providers that are not based on EF but support IQueryable, I propose that:\n1. The tests for the IQueryable interfaces shouldn't fail if the IQueryable properties are not supported by the store, e.g. the test should test for the capability first.\n2. Since the LINQ implementations are built to recognize simple patterns such as property accesses on the entities, these expressions cannot make calls to Identity APIs. On the other hand the test base class cannot depend on a specific set of entity types, so we need to abstract this. We can do it easily by adding a set of virtual methods we can then invoke to build the expression that needs to be passed to the LINQ operators, e.g. for this case (brain-compiled):\nC#\nprotected abstract Expression<Func<TUser, bool>> GetUserNamePredicate(string userName) \n{\n}\nAn implementation for EF would be:\nC#\nprotected abstract Expression<Func<IdentityUser, bool>> GetUserNamePredicate(string userName) \n{\n    return u => u.NormalizedUserName == userName;\n}\n. Since it seems we are going to keep the IQueryable properties it seems better to keep these tests here. I agree we should only have a few predicate building methods like this, but the pattern isn't bad.\n. I am more worried about the risk of tests leaking resources, e.g. connections, or even memory depending how (well) the DI container implementation works and what we do in the tests. \n. 1. I would rather simplify the tests to just succeed with simple equality and get rid of the contains flag on both predicates.\n2. Contains is not the same as StartsWith.\n. Other than that, I think we are very close.\n. I am ok with having StartsWith checks if we can't have just do equality. But let's then split this in 4 simple predicate methods without any flags: GetUserNameEqualsPredicate(string), GetUserNameStartsWithPredicate(string), GetRoleNameEqualsPredicate(string), GetRoleNameStartsWithPredicate(string). \n. Sounds good to move this to the helper. If we need to reason about the generated value in a entity type-agnostic way, the helper can have output parameters for that.\n. Can we have a negative assert as in the Users test and standardize on the same test data generation pattern?\n. Yeah sure, I guess we don't need to reason about the generated values in the test, which is fine.\n. Thanks @ajcvickers. The setter on collection nav props actually looks very weird to me. @suhasj can we remove it?\n. Make this // TODO: Temporary change.\n. Just in case, do we still the one above?\n. Is this still necessary or next line is enough?\n. Ok\n. Always worth running the build before sending a PR  :smile:\n. I think the two should be separate indexes unless we only have a query that searches for both together.\n. Maybe @blowdart will have an opinion. I think it is fine with logging just lockouts. \n. Starting to love string interpolation :smile:\n. It seems I am a bit lost with one thing here: aren't we supposed to flip the default for this? If yes, where is that flip happening?\n. double comma?\n. I feel neglected that \u00e1\u00e9\u00ed\u00f3\u00fa\u00f1\u00d1\u00fc\u00dc didn't make kit but if this is what we always had and no one complained, I guess it is ok :smile:\n. I think it would be slightly better to make it a transient so that it is not parked in memory forever :smile:\n. This makes me wonder what happens if the user passes UserManager as the argument (I imagine it could cause a cycle in DI) and also in general some TUserManager that does not derive from UserManager (I imagine it would fail later on but the exception could be not that great :smile:). \nFor the former we could add the func registration only if TUserManager is not UserManager. \nFor the latter, I remember we had to not have generic constraints in this method because we had to make IdentityBuilder non-generic but I am wondering if we should add more runtime type checks to throw nicer exceptions.\n. \"Must derive from\"?\n. I think this should also do :base().\n. Actually, I am pretty sure.\n. Do'h, of course you are right.\n. Should this change also go in the AddToRoleAsync() method (singular) above?\n. Should we do roles.Distinct() here to prevent duplicate roles from being added? I haven't looked very deep in IsInRoleAsync() but I assume it is possible it won't return true until things are saved to the database.\n. I still don't see what would prevent await userManager.AddToRolesAsync(user, new [] {\"admin\", \"admin\"}) from trying to add \"admin\" twice, e.g. the LINQ queries above won't return UserRoles that haven't been saved to the database, unless we save for each iteration it won't help. But if you say it handles it, I am good :smile:\n. A LINQ query always executes as a database query in EF and things in memory won't have any influence on what entities are included in the results. See https://github.com/aspnet/EntityFramework/issues/2982 in the backlog. I think we should take the chance to add the .Distinct() while we are changing this.\n. It also makes it more robust for other providers. \n. It doesn't hurt to have it explicitly but FWIW if these FKs are not nullable cascade will be the default behavior. \n. Just to make sure, what cascade behavior do you want this to have?\n. Don't know what I am missing but I would expect it to just cascade. @ajcvickers do you see any reason it wouldn't?\n. Ah, yeah. I was missing this is configured on the other side.\n. I believe the FKs on UserRole are part of the PK and therefore should be implicitly required, but maybe it is not working that way.\n. That is a very good point! We need to make these relationships explicitly required regardless of whether TKey is nullable. @HaoK please add a call to .IsRequired() for user.Logins, user.Claims and role.Claims. \nAfter that please also try again user.Roles and role.Users without the OnDelete(). If deletes don't happen automatically we might have missed a bug in EF as those relationships should be implicitly required.\n. This is the non generic version.\n. Non generic.\n. Non generic\n. Non generic\n. Not sure this is the best description. Perhaps \"used to obtain descriptions for errors returned by the store\"? @haok?\n. Does the \"as an async operation\" part add much on all these?\n. I don't think we should make this internal. @haok didn't we get rid of this pattern in other repos?\n. Private method sounds good. I am fine with doing it in two steps.\n. I am not sure this works. Do we need to also change the current value on SaveChanges()?\n. Can we improve the migration name? E.g. UpgradeFromIdentity2To3?\n. I may be thinking at it the wrong way, but I am surprised to see all the tables created. It looks more like an initial migration. If this is supposed to be the upgrade migration these should be alters that add a few columns.\n. Ah, this looks like a migration done using EF7. Weren't you going to use EF6 to upgrade the database schema?\n. While you are here, could you fix the null-conditional operator usage in the method bellow? E.g. principal is never null after the check. Or is this the method that is going away per #630?\n. Do you actually mean we will never want to run them on Linux and Mac? Or is it just a temporary limitation?\n. Nit: split the lines to have just one attribute per line.\n. > Or forever if we decide this one test project can be windows only :)\nNot sure why we would decide such thing, but we can talk :smile:\n. @HaoK Is this the third time already that you try to move us to use service locator and to take our default services out of DI? :smile:\nIt still looks bizarre to me and I would prefer us to have a wider discussion about either adopting this pattern (or declaring it an anti-pattern) across all of ASP.NET.\n. :+1: to everything @halter73 said. \nBesides the lack of clarity on the actual dependencies and ambiguous optionality in the signature of the constructor, from the code maintainability perspective this adds a new alternate source of truth about our dependencies. Rather than having it all encoded in AddIdentity() & friends, it is fragmented between that and this constructor.\nUltimately I agree that this is about how much we care about making it easy to create a UserManager without using DI, and I personally don't think it is a goal.\n. Naming: Don't include the \"I\" for interfaces in the name of the extension method sponsor class, i.e. this should be just IdentityBuilderExtensions.\n. @pranavkm beware this is an unintentional change.\n. please ignore :smile:\n. I wonder why we were using plural \"providers\".  I think of this package as containing just one \"provider\" which contains a set of store classes. \n. \"use\"  - > \"uses\"?  :smile: \n. AFAIR there were a couple of ways to hit the current TargetInvocationException. Need to search around to make sure we are covered by this check. \n. Couple of observations:\n- I don't think the mention of IdentityBuilder helps here. I would just remove it. \n- Customers also need to derive their own store classes (by overriding a method in the abstract base class), right? If that is the case, can you also mention it in the messages?\n. nit: ut instead of uc\n. Not against this change, but I am curious on how it is related.. FWIW, I did not expect the specification package for providers to contain entity types because I thought each provider would bring their own. I rather expected the specification package to contain a set of base test classes which provider writers could derive from and template methods which provider writers could override/implement. \nAre we taking a different approach?. I am thinking that moving these classes out of here would help convey better what providers need to contain and how they need to use the test specification. But we can talk about general approach in person if you want.. FYI, if you cast the DbEntityEntry to a generic DbEntityEntry<TEntity>  for the right entity type I think you should be able to use the version of Property() that takes a lambda expression. It is fine to keep it like this though. . E.g. something like this:\nC#\n        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)\n        {\n            if (entityEntry.State == EntityState.Modified)\n            {\n                if (entityEntry.Entity is TUser) \n                {\n                    entityEntry.Cast<TUser>().Property(p => p.ConcurrencyStamp).CurrentValue = Guid.NewGuid().ToString();\n                }\n                else if (entityEntry.Entity is TRole)\n                {\n                    entityEntry.Cast<TRole>().Property(p => p.ConcurrencyStamp).CurrentValue = Guid.NewGuid().ToString();\n                }\n            }\n            return base.ValidateEntity(entityEntry, items);\n        }. ",
    "henninga": "Will this only be part of the vNext? If not, when will a new build be available?\nI'm on 2.1 now, and could really use this feature.\n. ",
    "rustd": "Show in documentation only\n. @HaoK can you please take a look?\n. Should this be in Identity/ EF or MVC\n. Closing this issue as it does not repro\n. AccountLockout and TwoFactorAuth checks are defined in SignInManager which pulls in OWIN as well. Users should able to do AccountLockOut in Desktop/ Store and PhoneApps so we should split this\n. Email is fine for packaging details. You can post any questions in this repo to @HaoK @divega and we will be happy to help.\n. AddHttpSecurity is better and it also gels well the Microsoft.AspNet.Http*\n. I will open a bug in EF repo\n. This is now supported in Entity Framework 7\n. We are tracking a feature called Account activity where you would be able to see when the PIN was confirmed.\n. Closing this issue as the Security repo is tracking this.\n. Closing\n. Each provider will have its own lifetime\n. Samples only.\n. True by default\n. @HaoK beta5 or 6?\n. #188 We should rationalize where we are normalizing names and emails. Try using shadow copy.\n. can't we change the hash used for the old passwords?\n. This is not an Identity. This is tracked in templates.\n. #423 is tracking this\n. JWT is a well known standard. If you want your own token format then you can implement your own Auth Server and look up end points\n. Use a Regex says @blowdart \n. We are looking for community contribution for this one.\n. reopening the issue as per the previous comments.\n. Will be done as part of #278 \n. #296 \n. User can implement this in their app.\n. UserManager.ReplaceClaims(IEnumerable)\n. Duplicate of #247 \n. The validators are pluggable so you can write your own.\n. This is not related to identity.\n. Split the user validator into multiple ones.\n. @HaoK will this happen for Beta8?\n. Can you please post a sample that reproes this? You need to refresh the Identity (logout and login) for the new roles to be picked up\n. Please reopen this issue if it still reproes.\n. We don't own IPrincipal and the value can be different depending on how you login.\n. Done, reviewed, no more\n. Please reopen if this is still an issue.\n. ASP.NET Identity is targeted at ASP.NET web scenarios only. \n. This is the intended design of the feature.\n. The DI implementation has to return empty IEnumerable\n. - Bing back navigation properties in POCO and configure them. Let them do the default behavior\n- Move POCO to EF assembly\n. Closing this one as there was no response.\n. @divega @tugberkugurlu The proposal is to remove IQueryable. What do you think?\n. We are not doing this. Admin scenarios need this.\n. Closing this one since this issue is already fixed in this PR https://github.com/aspnet/Identity/pull/464\n. Please reopen this issue if you think there is a bug that we should fix.\n. changing comment\n. Could not repro\n. @bricelam is Index/ MaxLength support happening for Beta5?\n. Opening this bug in the tooling repo where we are tracking VS tooling issues. Since this is in the template which is part of tooling so moving the bug https://github.com/aspnet/Tooling/issues/16\n. @HaoK We will add a flag in the schema to check for this and block all access to it.\n. @mojtabakaviani can you please explain on your scenario? Do you only want to block login for disabled users or all actions (reset password etc.)\n. We discussed this more this is app specific scenario which can be enabled by extending the Identity schema and adding a flag to check if the user is disabled or not.\n. @blowdart \n. @HaoK can you follow up for the Identity ask. For the Web app, we don't have a localization story yet.\n. @blowdart \n. This is tracked on CodePlex site for Identity\n. This is not a runtime issue. Please open a tooling bug\n. You can use your own DbContext. \n. This was fixed in ASP.NET Identity 2.2.1 Please make sure you are using the latest version and open an issue on http://aspnetidentity.codeplex.com/ if it still reproes for you\n. We need to close on this since we are putting this in the templates.\n. This is a template bug.\n. Closing as https://github.com/aspnet/Templates/issues/234 is tracking this\n. Not yet. We are working on the Auth story for APIs. When we do the work it will show up in the Security repo so I would suggest keeping an eye in the Security repo\n. @divega ?\n. Sorry Rowan this is not critical.\n. Core implementation for ASP.NET Identity.\nASP.NET Identity providers that use Entity Framework.\n. @suhasj can you please check if this is fixed in 2.x and 3.x\n. Keep the constructor as it is and throw in app.UseIdentity() that AddIdentity() needs to be defined.\n. @cherrydev anything we can help on this?\n. @divega can you please comment on this?\n. This should work. Can you tell us what does not work?\n. Closing as we think this should work with Beta4. Please reopen if it does not.\n. - Identity + EF Provider on Mono\n- Identity + EF Provider on .NET Core\n- Identity + Non EF Provider\n. @divega can you please check if there is EF issue tracking the EF + SQLLite testing.\n. @divega can we merge this or is anything else required?\n. As of the current design Roles are not settable at runtime.\n. @divega can you please comment on User model?\n. The name of the method is not great. How about RefreshIdentity? RegenerateIdentity?\n. Either one is good. Let's pick RefreshSignIn?\nOn Thu, Apr 23, 2015 at 7:58 AM Hao Kung notifications@github.com wrote:\n\nRenewSignIn or RefreshSignIn works for me\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Identity/pull/452#issuecomment-95614420.\n. You can write your own extension for registering the services. Here is an example https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/IdentityServiceCollectionExtensions.cs#L39\n. This is fork which has these changes https://aspnetidentity.codeplex.com/SourceControl/network/forks/suhasj/aspnetidentity\n. https://github.com/aspnet/DataProtection/issues/85\n. @HaoK Can you please link the Security related bugs for this migration case.\n. Closing as not needed.\n. :shipit: @HaoK Can you please merge this?\n. Beta6 should not break tooling/ templates that ship with beta5\n. Please see the getting started instructions on Home repo. We are publishing nightly builds on MyGet so it could be that things might have been broken for a particular build.\nThis is not Identity related so I am closing this issue.\n. options.Lockout.AllowedForNewUsers\ndefault =true\n\nparameter name for API name on PasswordSignInAsync\nlockoutOnFailure\n. @HaoK can you please update the templates repo as well. This is in the release branch.\nhttps://github.com/aspnet/Templates/blob/release/src/Rules/StarterWeb/IndividualAuth/Controllers/AccountController.cs#L66\n. @divega \n. Try doing this https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Abstractions/IAsyncActionFilter.cs\ninstead of .Wait()\nAlso does this work without AutoFac?\n. Closing since #503 is tracking this\n. We considered this and we are not fixing this issue. However, like MVC we will throw if you don't have AddIdentity()\n. https://github.com/aspnet/Security/issues/309\n. This is blocked on https://github.com/aspnet/EntityFramework/issues/2726 \n. Closing since there is no bug in Identity. We are using the EF issue to track this.\n. I think the question here is more generic on how to encrypt app specific data. You can use DataProtection to protect data in your app. more details are http://aspnet.readthedocs.org/en/latest/security/data-protection/index.html\n. We will consider it for a future release.\n. This is not supported. Can you please elaborate more on what your requirements are?\n. Claims stored in the database should be normalized to unique names as when an Identity is populated from the database the issuer is the application. By design.\n. What is actually null? Can you send us a stack trace or is it possible to create a repro sample?\n. There are no plans for groups or management UI..\n. @AndriySvyryd Is this going to make it in for beta8?\n. Identity 3 will be localized in the same set of languages ASP.NET 5 will be localized in. I am closing this specific issue as this is tracked all up in general.\n. @HaoK can you point to the latest answer to this.\n. How and where are you generating token?\n. Can you please post your Startup code where you configure.\n. We are not going to have this for RTM but will consider it for the future.\n. This issue is for ASP.NET Identity v2. This repo is for ASP.NET Identity v3. Can you please ask this question on aspnetidentity.codeplex.com\nIs your question around migrating to v3?\n. Identity is not meant for multi-tenant scenarios.\n. Thank you for your feedback. Documentation for ASP.NET 5/ Identity 3 is open sourced https://github.com/aspnet/Docs/blob/master/aspnet/index.rst and can be found here docs.asp.net/\n. Is there a repro available? There is not enough detail in this bug.\n. Can you make sure that your code is not running after the request is done?\n. Try changing the lifetime of AspNetIdentityUserService to be Singleton to see if this fixes this issue.\n. Can you please try reproing this without SignalR?\n. Please see https://github.com/aspnet/Home/wiki/Roadmap for the updated dates for beta8\n. IUserStore is the one that has this functionality now. You need to implement IUserStore\n. Closing as duplicate of https://github.com/aspnet/Identity/issues/545 \n. Please derive from IdentityUser<int>. You can refer to this test:\nhttps://github.com/aspnet/Identity/blob/dev/test/Microsoft.AspNet.Identity.EntityFramework.Test/UserStoreIntKeyTest.cs#L9\n. Does #581 capture your requirements?\n. Closing as #581 is capturing this. Please add any more details to #581\n. This is a generic behavior to support other conditions.\n. ASP.NET Identity 3 can only be used in ASP.NET 5 projects. You can install this package in DNX based Class Library projects\n. Sure. Please send a PR so we can look at all places where you need this.\nAlso consider replacing services as a way to extend Identity.\n. Default should always have a value.\n. Fixed in c847f9c50df478ef826f6d4781ddcd760325da78\n. There are more changes other than namespaces. We will be documenting the migration process https://docs.asp.net/en/latest/migration/index.html\nFor now you can create a new ASP.NET 5 Web Application with Individual Account and compare the Startup class and Account/ Manage Controller to look at the code changes.\nClosing this as this is not a bug.\n. This is possibly related to https://github.com/aspnet/Identity/issues/578\n. You can add OpenIdConnect middleware as another provider. If you create ASP.NET 5 Web App with Individual Account, it comes with Facebook and other providers. You can login and store user information in the database. You can add OpenIdConnect in a similar manner.\nI am closing this issue as this is not a product bug.\n. rc1?\n. Yeah. Templates have a workaround for rc1\n. You can also call UpdateSecurityStamp() on UserManager which will update the cookie automatically whenever the SecurityStamp changes.\n. This is probably a compilation error and not an exception thrown by Identity.\n. Related issue: https://github.com/aspnet/Identity/issues/585\n. Related #532 \n. I emailed you guys with a proposal for a smaller set of docs that we should update for rc1.\n. This would be a nice to have at this point, but it would be a breaking change from RC1 and does not provide much value to users.\n. https://github.com/aspnet/Identity/issues/581\n. This is not a question for ASP.NET Identity 3. Please ask Katana specific questions http://katanaproject.codeplex.com/\n. Closing this and opening it in security https://github.com/aspnet/Security/issues/581\n. This is not related to Identity 3. This is a question for the Katana project. Please open an issue http://katanaproject.codeplex.com/\n. Delete this and in the templates add User.IsAuthenticated()\nThis is a breaking change so please post it in the Announcements repo.\n. Can you please send us the snippet of code for this \"When use AddClaimAsync in RoleManager\"?\n. @HaoK maybe we have a bug. Can you please look into it?\n. This is unrelated to ASP.NET Identity. Please discuss it http://forums.asp.net/25.aspx/1?Security\n. Yes this is by design. We want to track the error case where the user is signed in or not which is defined in PreSignInCheck.\n. Update the sample to match the templates\n. @HaoK do you have any recommendations?\n. String is supported in more databases as a column type.\n. @HaoK what do you think?\n. Would #650 meet your requirements?\n. https://github.com/aspnet/Identity/issues/592 You need to use Identity in DNX Console projects.\n. What other properties were you looking for?\n. So far Identity is based on cookies only. We can consider this in a future release.\n. How are you storing the User and Roles information? The stores are needed to persist data in a persistent store.\n. This is not something we plan to support. Managers need a store for persisting Identity information.\n. This is related to Identity 2.x. Please open an issue at https://aspnetidentity.codeplex.com/\n. This is related to Identity 2.x. Please open an issue at https://aspnetidentity.codeplex.com/\n. @HaoK how can we do this? Can we do it by replacing this service in DI?\n. You need to refresh the CurrentPrincipal after adding Claims.\n. @HaoK ?\n. Can you please post a sample which reproes this? esp on how are you adding claims, signing in the user and getting the claims for the user.\n. Add this to the announcements repo.\n. What browser are you using and what is the size of the other cookies? How many claims are in your Identity? What is the size of the Identity Authentication cookie for your case?\n. Please reopen this issue once you have more information.\n. This is done in v3.\n. @yuezhongxin please see the comment above and update your code.\n. Can you please post the code that reproes this?\n. Please reopen this bug once you have the repro.\n. Duplicate of #585 \n. Please see the following issues where this is discussed https://github.com/aspnet/Security/issues/83 and \nhttps://github.com/aspnet/Security/issues/359\n. yup. Use the RoleManager\n. @HaoK Can you please make the changes in the templates repo for these new APIs as well?\n. Can you post to the announcements repo as well about this change.\n. Call AddIdentity<ApplicationUser,IdentityRole,int>() in Startup.cs\nPlease reopen if this does not help.\n. Do you have some sample code which we can look at?\n. Please refer to the comments here for more details\nhttps://github.com/aspnet/Identity/issues/471\n. Duplicate of https://github.com/aspnet/Identity/issues/585 which is tracking this.\n. @HaoK?\n. Duplicate of #266 \n. This is by design. In this version the id is always a string in upper layers (e.g. in the public interface of the stores and in the managers). The store however can persist the value as whatever type you want in the database.\n@HaoK can you please update the comment.\n. Closing as By Design.\n. Please use CanSignIn() https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L122\n. Well atleast it puts it in the API so users can see. Without it they need to find the other API to call :)\n. @rowanmiller what is the bug number tracking this in EF? @divega mentioned it is in the backlog\n. Please look at the above comment.\n. Accessing the child entities through the DbContext is fine. \nFor the future we can add a new extensibility point which loads the child entities (i.e. include extra data).\n. Duplicate of https://github.com/aspnet/Identity/issues/416\n. Thank you for the feedback. I am porting this bug to the templates repo so we can consider to add this flow to the templates.\n. ",
    "djs1": "1) This is getting a second look. See https://aspnetidentity.codeplex.com/workitem/1947 and http://aspnetidentity.codeplex.com/discussions/638351. \n2) I think that the word \"Override\" means \"change the resources.resx file's value\" not point to another neutral culture. \n. ",
    "dougbu": ":ship: it\n. Curious: Why is this PR blocked? It wouldn't be blocked in most aspnet repos.\n. /cc @divega new issue as we discussed offline. Note the underlying problem is different than I'd thought.\n. This happened again with two different tests:\nTest collection for Microsoft.AspNet.Identity.EntityFramewo\u2026PocoTest (1): Microsoft.AspNet.Identity.EntityFramework.Test (1)\n  CustomPocoTest.CanCreateUserInt\nand\nTest collection for Microsoft.AspNet.Identity.EntityFramewo\u2026toreTest (1): Microsoft.AspNet.Identity.EntityFramework.Test (1)\n  UserStoreTest.AddDupeEmailAllowedByDefault\n. /cc @davidfowl @Tratcher \n. b2bf1a4\n. :watch:\n. :shipit: \n. 2a03500\n. FYI only. Will commit once builds succeed.. ccea27d. From @pranavkm on February 14, 2018 15:55\nIs this specifically with pages from a precompiled class library? I can't reproduce this with files on disk.. No, problem wasn't specific to area pages in a library. I also cleaned and rebuilt my solution a few times to ensure I wasn't testing older code. Then again, my test app does use area pages from a library -- the Identity.UI pages in particular.\nWhich SDK build are you testing with? I'm using 2.1.300-preview1-008117.\nI'll test this again with 2.1.300-preview1-008123 later today.. Turns out the problem was my Startup calls IdentityBuilder.AddDefaultUI(). This has the unexpected behaviour of enabling a IPostConfigureOptions<RazorPagesOptions> implementation (IdentityDefaultUIConfigureOptions<{IdentityUserType}>) which overrides this user's RazorPagesOptions.AllowAreas setting.\nSide note: That configuration setup also overrides user StaticFileOptions.FileProvider settings. Fortunately, other options properties set in IdentityDefaultUIConfigureOptions<{IdentityUserType}> seem to be additive.\nWill move this issue to the Identity repo.. From @mkArtakMSFT on February 14, 2018 18:1\n@dougbu, can you please confirm this is not the case for usual (local) views? /cc @javiercn \n. > @dougbu, can you please confirm this is not the case for usual (local) views?\nNot sure of your exact question @mkArtakMSFT. But, the effect of setting RazorPagesOptions.AllowAreas to true unconditionally is global -- affecting area pages on disk as well as those in the Identity.UI library. And, it overrides the user's chosen compatibility version as well as any implicit or explicit change they've made to AllowAreas.. @HaoK how would that uber method help here? The issue is the unexpected clobbering, not the number of extension methods needed to thoroughly clobber anything.\nMy suggestion is for dentityDefaultUIConfigureOptions<{IdentityUserType}> to also implement IConfigureOptions<RazorPagesOptions> and IConfigureOptions<StaticFileOptions>. Those new methods would handle RazorPagesOptions.AllowAreas and StaticFileOptions.FileProvider while allowing later user overrides.\nOne alternative would be for the existing methods to throw if reached when the options aren't set as expected. That would give the user the knowledge to choose between setting AllowAreas==true or using the default Identity UI.\nFinally, overriding StaticFileOptions.FileProvider unconditionally may just be a bug. Could add a null check there.. > it's kind of nonsensical to both use DefaultUI and try to turn areas off\nNot sure I buy that. It's an internal implementation detail of the Identity UI that it uses areas. Why would a user think the two features are related?\nSeparately, we could also go at this by removing the global option's impact on area pages in libraries. Users could then set the option however they like. See also aspnet/Mvc#7346. (Note IdentityDefaultUIConfigureOptions<{IdentityUserType}> does not change the options mentioned in that issue. But, they still have the potential to break the Identity UI.). > So AllowAreas = false with AddDefaultUI would result in blocking areas except for ones added by libraries?\nYup, that's what I'm suggesting.. > it is part the contract that we choose to have at the MVC level with other parts of your application.\nThat contract (between Identity and MVC) doesn't equate to user understanding.. @Eilon my concern is more about user expectations and their ability to configure the application as they wish. AddDefaultUI(...) isn't just changing MVC settings so it will work, it's also resetting changes users may make.\nThe more I think about this, the more I like the idea of splitting user decisions about their application from provider decisions about libraries they provide. That's more general than AllowAreas having only two possible values and affecting all area pages everywhere. But, if gave library authors control over their libraries (as we did in localization), they wouldn't have to clobber user settings.. > The user's customizations of options should come last.\nNot true in this case.\nBecause Identity uses IPostConfigureOptions<RazorPagesOptions>, the only way users can change things would be to also implement IPostConfigureOptions<RazorPagesOptions> and add their instance after calling AddDefaultUI(...). That's not particularly discoverable or friendly and is why I earlier suggested having IdentityDefaultUIConfigureOptions<{IdentityUserType}> set AllowAreas in a new IConfigureOptions<RazorPagesOptions> method (i.e. non-post).. Once we've worked around this issue or it's fixed in .NET, should revert aspnet/Mvc@192e8073ee. Yes, exactly. Sorry for leaving that out. . It's a 2-line fix unless other pages involved in resetting a password also need to be accessible before user logs in again.. After lowering the lockout attempts to 2 i.e. services.AddDefaultIdentity<IdentityUser>(options => options.Lockout.MaxFailedAccessAttempts = 2), I found the /Identity/Account/Lockout page also needs [AllowAnonymous] on its page model class. Without this, user is redirected to login page again.. Related question: Should the /Identity/Account/AccessDenied page have [AllowAnonymous]? This page doesn't appear to be used by default and I'm unsure where it would be used.\nMight have missed other pages that should allow anonymous access for specific scenarios.. Found while validating aspnet/Release#265. @rynowak this is really part 1: must go in before aspnet/Mvc#4328\nPlease have a look @ both PRs soon. More to come \ud83d\ude3a . Based on previous changes, we do not want to do any formatting up front. This passes an opaque string into the logging system and some of the logging providers can do useful things with the raw data. So, use the logging-specific format strings and pass the values in.\n(@Eilon you wanted to be mentioned)\n. What's this for?\n. Can these just be dotnet5.4 too?\n. ",
    "lodejard": "Coincidentally, I was also looking into something last night that also needed some site options (for nuget restore). Here's a gist to compare - you might want to steal the the OptionsAccessor<>.\nhttps://gist.github.com/lodejard/9b8481271d24c19f45e5\n. Yeah, inject IOptionsAccessor<IdentityOptions> and use accessor.Options where needed\n. IdentityOptions itself is a model, not a service, so wouldn't be registered\n. ",
    "victorhurdugaci": "Here is the DI bug that tracks constructor matching logic (related) https://github.com/aspnet/DependencyInjection/issues/69\n. This doesn't seem to be fixed. I still cannot create users/login in music store\n@suhasj can you check?\n. Try running k web, not Helios\n. Why does it need the second and third arguments when it has access to the service provider? Why not just resolve them from there?\nAccepting both the container (service provider) and concrete dependencies sounds like a very strange pattern.\n. ",
    "alexsandro-xpt": "Is this really necessary? Actually I do all over in ClaimsIdentityFactory.\nSee: https://gist.github.com/alexsandro-xpt/cbf2de56d95ad638df01\n. +1\n. The friendly name as you mentioned is from User.Identity.GetUserName() ?\n. I guess, to do that, is only extend method for IIdentity like User.Identity.GetFriendlyName() to get a claim that represent a friendly name.\n. I wish to separate business users of system users.\n. Yes, I could use different roles or claims for the different permissions/authorization but for a better security design, a second cookie authentication to another path(new context) sounds good.\n. In a ASP.net Identity on ASP.net MVC 5 is fully possible. In MVC 6 I guess, yes!\n. Using Identity abstraction c# classes you can optimize change Identity behavior as you wish, see some links:\nhttp://www.asp.net/identity/overview/extensibility/overview-of-custom-storage-providers-for-aspnet-identity\nhttp://www.asp.net/identity/overview/extensibility/implementing-a-custom-mysql-aspnet-identity-storage-provider\nhttp://typecastexception.com/post/2014/02/19/ASPNET-MVC-5-Identity-Implementing-Group-Based-Permissions-Management-Part-I.aspx\nhttp://typecastexception.com/post/2014/02/13/ASPNET-MVC-5-Identity-Extending-and-Modifying-Roles.aspx\nRemeber, It's is for Identity compatible with ASP.net MVC 5, I don't know API changes of this new Identity.\n. There a substitute for Identity to work with Bearer tokens?\n. ",
    "Praburaj": "It worked for me yesterday. But now does the app even compile with the latest bits? \n. This is resolved with the latest CoreCLR bits. \n. @HaoK @suhasj \n. Wrong repository. This one should go to http://katanaproject.codeplex.com/. If you have any more questions open a bug in katana repository. \nA little bit of background:\nFor some reason Microsoft GraphApiEndpoint chose to return this email as the \"preferred\" one and all the MicrosoftAccount middleware does is processes the JSON payload returned and puts it in the ClaimsIdentity. Checkout this piece of code where it processes that. \nhttp://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.Security.MicrosoftAccount/Provider/MicrosoftAccountAuthenticatedContext.cs\nThat said you can try to implement the Authenticated provider method in the Microsoft Account middleware to see if the additional emails you are looking for are also found in the JSON response. The JSON object returned will be in the context's User property. \n. CopyAspNetLoader was written to make it easier to launch iisexpress before any tooling existed.This is not needed anymore with tooling. \n. Having an overload will help using a familiar API for all signin/signout needs - as templates will use this. I  remember we had this in Identity 2.0 so I thought it will be useful. \n. System namespaces at top.\n. system namespace at top? \n. as a side note: MusicStore will also need this change. \n. And presumably templates also need change. @balachir\n. Revert this change. I guess you have included packages by source. \n. revert this. \n. nit: revert this change?\n. ",
    "suhasj": "I am able to compile with the latest bits. but getting error for missing System.Diagnostics.TraceSource\n. Fixed with PR https://github.com/aspnet/Identity/pull/272\n. This is the friendly name for the Login Provider for OAuth for example, Windows Live, Facebook etc\n. This should not hang of Identity since it is related to external logins and can be multiple of them. This friendly name is needed for each of them may be for example displaying them\n. Removing milestone for it to be triaged. Need to review this request from a security perspective. \n. A simple example is a console application where we need to instantiate usermanager without setting up DI. I was working on populating a database or even running a one time migration code and creating a usermanager object felt tedious.\nIn 2.0 instantiating usermanager was as simple as\nvar usermanager = new UserManager<User>(new UserStore<User>(new DbContext()));\nWith current stack, the constructor takes more dependencies which makes coding a little more work than needed. I would agree that this doesn't qualify for the average case scenario but this is one experience we have weakened from 2.0. Even in the unit test, if we look at the MockHelpers class, setting up UserManager is through ServiceCollection. Should that be the case all the time ?\n. Fixed with PR https://github.com/aspnet/Identity/pull/272\n. Discussed this with @divega and we should think about Scenario 1 since it looks fairly common \n. Yeah when the flag is set to false from true, any FindByEmail will throw null exception which would work fine with the flag set to true. Would the developer not use this method when the flag is set to true, that i don't know about.\n. Keeps username and email in sync and persisted in the db so sounds fine.\n. SuccessRehashNeeded ?\n. Removing the milestone so that it can be triaged\n. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/BuilderExtensions.cs \nTypo. We are adding it twice. @HaoK is fixing it. Good catch !\n. Yeah the work around is to have to the property initialized in the ctor of the user. Though it is easy to figure it out with error message and Fiddler, having this handled by us would be great\n. Tracking PR https://github.com/aspnet/Identity/pull/264\n. Checked in\n. Fixed in PR https://github.com/aspnet/Identity/pull/258 \n. https://github.com/aspnet/Identity/pull/327\n. Thanks @HaoK \n@divega  I'll do a pass and add new test if needed\n. Can this https://github.com/aspnet/Identity/issues/295 be included in this PR\n. @divega @HaoK updated all review feedback\n. @HaoK @divega thank you for the feedback. I'll merge the changes\n. Merged\n. We are doing the right thing. It should be under Microsoft.Framework.DependencyInjection\n. had the quickest chat with @HaoK  and the suggested change is method level and not class level so it might be fine. I'll send out a PR\n. yeah this is not possible due to reasons mentioned by Hao. Need to have lengthier chats\n. if the api change in the shared class method is right then looks good\n. sure\n. We should do it for all classes we see the users might subclasses\n. Are you trying to change the Primary Key of the model classes from string to int ? In that case your builder mapping should be \nbuilder.Entity<IdentityUserLogin<int>>(b =>\n        {\n            b.Key(l => new { l.LoginProvider, l.ProviderKey });\n            b.ManyToOne<ApplicationUser>().ForeignKey(uc => uc.UserId);\n            b.ForRelational().Table(\"UserLogins\");\n        });\nTry this for all models and let me know if that works for you\n. https://github.com/aspnet/Identity/pull/327\n. Looks good to me\n. Not out of the box but it can be implemented by the user. Refer to the sample here. This sample maintains all the clients that are logged in and the single sign out feature lets users sign out from all clients with a single click. You can tweak to not allow users to log in when they are already logged in from one client\n. Let me know if caters to your requirement and I can close out this bug\n. @divega The output format of the log depends on the ILogger objects that are registered via DI. Each of them format the output log as expected. I have tested this with Console logger and will verify with SeriLog before I check in.\nExample, For console log\n[INFORMATION:UserManager] UpdateAsync for user df34f-fe334... : Success\nWe are formatting the messages as needed which was what we decided. We can always have the check Logger.IsEnabled and then only log the message. This prevents the strings to be given to the logger if not needed. Let me know if I can include it. I'll sync up with you offline too\n. @divega @HaoK updated PR with review comments\n. @divega I'll create a bug to follow up on the things you have mentioned\n. @rustd  Sample output with console logger hooked in \n\nLook for UserManager and SignInManager for Identity logs\n. Merged and passing on CI\n. Revisiting logging again for beta5. This is fixed for now in beta4\n. https://github.com/aspnet/Identity/pull/354\n. Fixed for beta4 with https://github.com/aspnet/Identity/pull/410\n. Thank you @divega \n. merged\n. @HaoK \n. Description: The functional tests have a file logger that logs messages to a file and reads from it in the assert statements. I had used lock while writing but not while reading causing the tests to fail. I verified that tests run fine after these changes\n. Merge thanks @pranavkm \n. Added navigation properties back into the POCO and moved it to EF namespace\nhttps://github.com/aspnet/Identity/pull/378 \n. Fixed in https://github.com/aspnet/Identity/pull/335\n. I read that List is not thread safe. Would it happen that during the tests there might be read and write simultaneously. This was the reason why it was failing for files. \n. oh yes it is getting it's own ILogger instance. I'll remove the lock and check the result. Hopefully it works fine with the in memory implementation\n. @HaoK  Removed the lock property and it tests are passing on my machine. Tried multiple times\n. @HaoK updated with feedback\n. sure thanks @HaoK \n. :shipit: \n. does this repro with beta2 packages ?\n. I verified that the repro works fine with the latest beta3 packages from https://www.myget.org/F/aspnetrelease/ feed. Reopen if you still see an issue\n. Yes the issue might be because you are using beta2 KRE with beta3 packages. To install KRE outside VS, you need to do it using kvm. Visit the https://github.com/aspnet/Home/ which has instructions to install K Version Manager (KVM). Now if you set KRE_FEED to https://www.myget.org/F/aspnetrelease/ api/v2 and run kvm upgrade it will install KRE from the release feed. Now restart VS so that it points the project to latest KRE. In addition you can do that by going to the Properties window of the project and changing the runtime. \nI used the release feed because those are more stable bits. The vnext is updated everytime there is a checkin hence is fast moving\n. @heathyates happy to help\n. What version of KRE and Identity packages are you using ?\n. So you are using beta3 of KRE and restoring packages from vnext feed which is beta4. That might be one possible cause. Can you update your KRE to use beta4 bits and restore packages from https://www.myget.org/F/aspnetrelease/api/v2\n. @kscott5 It was slightly confusing since we moved from rc1 to beta3 hence even though the packages were downloaded for beta3, since there were stale rc1 packages, they were being referenced since they are higher semantically.\nHere is what I did. I installed KRE 1.0.0-beta3-10921 from the release MyGet feed. Then cloned Identity repo with branch pointing to release. Then did kpm restore which pulled in packages from release feed. I had no .kpm folder so there are no stale packages. Now I navigated to samples\\IdentitySample.Mvc and ran k web. I was able to navigate to the home page.\nAlso the nuget feed you mentioned should be https://www.nuget.org/api/v2 and not https://www.nuget.org/F/api/v2\n. @kscott5 Glad it worked. I'll close this issue. re open if you still hit any problems\n. Can you show me the feeds configured for the project ?\n. Fixed in https://github.com/aspnet/Identity/pull/348 \n. chatted with @BrennanConroy  and this is not needed\n. :shipit: \n. I formatted the document using the latest VS and this happened. This looks ugly, I see if I can fix it\n. Fixed the PR. Should be more readable now\n. @divega @HaoK \nUpdated with async extension methods for logger and logging via fluent api. Some questions\n- WithLoggingAsync(Task<IdentityResult>) calls WithLoggingAsync(IdentityResult) after calling an await in the later. can there be a way to beautify that.\n- Should the method WithLoggingAsync be renamed to something else ? Some options I had\n  - PostLoggingAsync\n  - LogAndReturnAsync\n. @AndriySvyryd including you since @divega mentioned you could have thoughts on reducing excessive async/await in this case \n. I thought we were removing the cancellation token from SigninManager only. Isnt that the case ?\n. https://github.com/aspnet/Identity/pull/422\n. String indexes need to have fixed length. Waiting for https://github.com/aspnet/EntityFramework/issues/882 to set MaxLength on properties\n. Merged to unblock CI. Let me know if i need to revert changes \n. In doing so, I have replicate the code in UserManagerTestBase for InMemory.Test project since it uses the IdentityUser object and that is a lot of duplication. Is that the right way ?\n. Ok let me see if the amount of duplicated code will be difficult to maintain in the future. I can reason out accordingly after that\n. Now if I duplicate the POCOs in the Shared folder and make UserManagerTestBase use them, the SqlStoreBase complains since it uses UserManagerTestBase with IdentityUser from Identity.EF. If I make all the test projects to use the POCOs in the shared folder, then we need to maintain them along with the POCOs in the source. My concern is that if we forget to update them then the tests will pass incorrectly.\n. Sure the second option might be an easy option. Let me try that out\n. @HaoK @divega \nUpdated with changes\n- UserManagerTestBase now is agnostic to user model and gets all attributes using manager apis. \n- Identity POCOs in Shared folder to be used by InMemory and Core tests\n- updated samples\nQuestion\n- New extension method on ServiceCollection AddIdentityWithTestPocos which is used only in test because it uses the Shared Pocos while the one is source uses EF ones. Instead of this should i move the IdentityBuilderTests and IdentityOptionsTests to EF ? I would want to go with move option\n. Also one important feedback i need to getting username synchronously inside a Linq queries. For example \nmgr.GetUserNameAsync(u).Result in https://github.com/aspnet/Identity/pull/378/files#diff-bc862db146cf4a686c23d4fb0676c99eR584. The reason for doing this is that the Linq query cannot be async. Let me know if this is something that is not recommended. \nThe workaround is to have a sync method on the UserManagerTestBase class which returns different user attributes. For example GetUserId(user). This is abstract on the base and is implemented by the concrete test classes\n. @divega Using a variable ! so obvious. To answer the second question, yes the class no longer exists so it is fine\n. @divega Now I recall that I did not use the variable since i need to use the object inside the Where clause. So var userName = await mgr.GetUserNameAsync(u); would not work since u is to be got from the lambda. The workaround I see is to use a foreach loop instead of Where which is not clean either.\n. Updated with feedback\n- Removed InMemoryUser and ApplicationUser. Identity.Test and IdentityInMemory.Test refer to TestUser only\n- GetPasswordHash an abstract method on UserManagerTestBase\n- CreateTestUser now takes namePrefix instead of username\n- CreateTestRole does not take a namePrefix since most test need a expected rolename for further assertions.\n. @HaoK @divega \nRemoving the feedback tag. I have addressed all feedback so wanted to make sure it is ready to check in\n. @divega pinging a reminder\n. Rebased with latest and remove all instances of .Result in the UserManagerTestBase. Added the predicate to compare user/roles names. Needed to add a contains flag since has two asserts that needed to test part of user/roles names. \nAlso noop for IQueryable tests is the managers do not support them\n. Updated with 2 additional predicates to compare StartsWith for user/role name\n- Some changes you might be interested in predicates\n- queryable tests 1 and 2\n@ajcvickers made changes to EF for mapping. Should I rebase and send another PR to see if that works with these changes ?\n. I rebased it to latest EF which had renaming for mapping in OnModel creating. I have updated the IdentityDbContext with the latest changes\n@ajcvickers can you please specifically review changes to IdentityDbContext\n. thanks to everybody for patiently reviewing this\n. https://aspnetidentity.codeplex.com/workitem/2509\n. This is done when UpdateUserAsync is called. \n. Fixed checked in\n. SQLServer will not work on Mono. You can use the EntityFramework.InMemory for persistence\n. http://www.nuget.org/packages/EntityFramework.InMemory/7.0.0-beta3\nYou can download it from Nuget. Out of curiosity, how is SQLServer setup ? Does your connection string point to SQLAzure\n. @HaoK thank you for the feedback. This does look better now. If we hook in the NLog provider, the output is as below for the Identity operations\n21 RouterMiddleware.Invoke RouteCollection.RouteAsync TemplateRoute.RouteAsync MvcRouteHandler.RouteAsync PasswordSignInAsync for user: da49a8f4-0913-457c-a02a-2334bffe5327 Microsoft.AspNet.Identity.SignInManager<IdentitySample.Models.ApplicationUser> PasswordSignInAsync : Result : Succeeded\nIn the above log, the information until the user Id is the scopes information,  next the class name and then the message. We don't repeat the user id in the log messages since that is obtained from the scope. The format is {method} :{result}\n. Updates:\n- Moved the BeginScope method to IdentityLogger and made it virtual. Creating the scope messages is virtual as well on the manager classes and this gives additional flexibility to configure it at a single place\n- The above change resulted in the Logger property no longer needed by the manager class. The ApplicationXManager classes can override the IdentityLogger and should be good\n- Made the IdentityLogger protected virtual which lets the subclasses create the logger based on that class which makes uniform log messages\n. @divega I have the tests fixed so will send a final PR if you are ok with these changes\n. @divega @HaoK \nI made all the changes and unit + functional tests run fine. I was running it in the Identity Sample app the output is as below\nGenerateChangePhoneNumberTokenAsync for user: da49a8f4-0913-457c-a02a-2334bffe5327 Microsoft.AspNet.Identity.UserManager<IdentitySample.Models.ApplicationUser> GenerateChangePhoneNumberTokenAsync : Succeeded\nAs you can the method name is repeated in the scope as well as the log. Considering we are using scopes everywhere it makes sense to now omit the name of the method name from the log but if the logger does not support scopes then the standalone message would be\nMicrosoft.AspNet.Identity.UserManager<IdentitySample.Models.ApplicationUser>  Succeeded\nwhich does not provide any good information. I am leaning towards repeating the method since moving forward we might change what goes in the scope information but I wanted to check with you guys if you have some thoughts on this ?\n. You mean something like this\nUser: da49a8f4-0913-457c-a02a-2334bffe5327 Microsoft.AspNet.Identity.UserManager<IdentitySample.Models.ApplicationUser> GenerateChangePhoneNumberTokenAsync : Succeeded\n. With this approach you the scope messages wouldn't be unique and that might have some issues with the loggers parsing them\n. ok I'll send out the final PR then\n. Removing the Feedback tag. I have gone over the code for nit issues but I'll make a pass again after taking a break\n. Some obvious feedback the BeginLogScopeAsync method is in the Manager class can be replaced with a => instead of two lines. I thought it was readable so refrained from that. Let me know if i need to change it\n. Updated and addressed all feedback. Will merge\n. I checked that all the properties for IdentityUser and IdentityRole are virtual in 3.0 The name and Id property for IdentityRole is not virtual for 2.0. Porting this bug to codeplex for triage\nPlease refer https://aspnetidentity.codeplex.com/workitem/2522 for updates\n. Piggy backing on this bug for logging changes for beta5\n- Intelligent logging\n- Using BeginScope with string and parameters if necessary\n- Log Information for methods that can be called from Controller class\n. @Bartmax you can override this method in your own subclass of UserStore/RoleStore and then hook that via DI in startup class. Let me know if you need more help with that\n. not for beta4\n. yeah just the dev branch\n. checked in for beta4 and merged with dev branch as well\n. /cc triage @Eilon @danroth27 @DamianEdwards \n. signed off by triage as well\n. yeah we decided we don't need to make this protected\n. Ah true I had missed that out. In that the scenario, the username is set on the object but it returns back during update on validation failure. The values in the object are not reverted. I guess it makes sense from an app perspective that the object should no longer used and further operations should be skipped. I'll close out this PR and send a new one for the ones I opened \n. merged\n. I have done this for SignInManager. Once we have a consensus on the flow, I'll update the rest of the code and tests\n. https://github.com/aspnet/Identity/pull/438\n. This is set when UpdateUserAsync is called. No need to do it separately\n. @divega Reminder\n. @tomaszbartoszewski : I tried with a sample username of foo-bar-baz and the access failed count seems to increment as expected. Is there a specific repro you have ? It would be good if you can share a sample repro project or repro steps. I used the web project that is created using 'File --> New Project' in Visual Studio 2015\n. @tomaszbartoszewski thank you for the sample. The steps I followed\n- clone the sample\n- Added the following code so that I can register usernames with hyphen\n// Configure validation logic for emails\n            UserValidator = new UserValidator<ApplicationUser, int>(this)\n            {\n                RequireUniqueEmail = true,\n                AllowOnlyAlphanumericUserNames = false\n            };\n- Registered the user foo-bar@baz.com\n- Tried to login the above user with incorrect password twice\nI checked the database and the access failed count was incremented as expected. The change in the sample I see if that you are using int as the PK rest seems fine. Can you let me know if you can repro the issue with on the machine with the exact steps as above. The only change then would be the SQL since I am using Localdb\n. sure I can do that.\n. @HaoK TypeDescriptor is not present in the portable subset. Should I put an ifdef for that and fall bacl to Convert.ChangeType ? \n. ok \n. @divega Reminder\n. Had a chat with @divega and we'll be adding this to Options as well. Will send it in a separate PR. \n. Can we have a test when the when no logger is passed ? The TestIdentityFactory is registering AddLogging so I feel the current test will always have some value\n. This looks good. Better than having the NotNull attribute since that would enforce using a logger always which I am not sure would be the right approach\n. @Bartmax I tried this on a sample web application using packages from https://www.myget.org/F/aspnetrelease/ and things seem to work as expected\nSome questions\n- What version of packages do you have ?\n- Hope you ApplicationDbContext declaration was updated to include the IdentityRole ?\n- Are you using migrations to create the database ?\n- Are you using IdentityDbContext or a new implementation of it ?\n. thank you for the repro. I'll take a look and get back\n. is that the new shipit ?\n. @HaoK  pushing this to unblock CI. I can revert the changes if you think this should not be in \n. @Tratcher suggested something similar too. I think this'll work\n. why can't we do role.Claims. Why do we need to use the property instead ?\n. Can this be fixed in this PR \nhttps://github.com/aspnet/Identity/issues/97 \n. Can we do away with the new class ? Why can't we use it as IdentityUser ?\n. @HaoK This had a redundant async keyword so I fixed this\n. @divega In this scenario when the return type is Task>, directly returning the Linq query throws an error saying cannot convert Task> to Task>. Hence had to do this workaround\n. In cases where username != email, is it necessary to update the internal stamp ?\n. Should we also check if Count() is greater than zero else throw ?\n. Sure. I thought it would be at par with the earlier experience that if no validator is passed we throw an error. If are choosing to be non blocking that is fine too\n. with profiler I was able to see that having the StringComparison in the query doesn't issue Where in the sql queries generated. I'll talk to @anpete regarding this\n. I had deleted this file.. i did not rebase correctly and screwed parts of my PR :( Will clean up\n. This has the same issue with the previous PR where we cannot convert List<TUser> to IList<TUser> hence this approach. I believe we won't change the return type from IList to List right ?\n. Ok i got it. I was able to add the async with the cancellation token\n. I'll make a pass and make the changes to take in a cancellation token\n. Let me know if I need to add more tests here\n. The cast is not needed so yeah I have kept the code as is\n. Following up on this https://github.com/aspnet/Identity/issues/295, we should have protected setters if not being removed altogether\n. Can there still be a way to due this via switch statement ?\n. This was cleaner and in case the users extended SignInResult and add a couple more that might lead to more if statements. Do code analyzers throw error if there are so many if statements ? If you think it is not a concern or this cannot be supported in anyway then no worries.\n. Is there a way to hook convert this to IdentityResult. That way I insert logging here which can trace that the password was rehashed. Else we can look at logging to log for results other than IdentityResult as well\n. Wasn't there a conversion issue here ? I mean from List<T> to IList<T>\n. ahh true. thanks for clearing that up\n. sure I'll move it\n. you mean log intermediate method calls as well. Sure I think it is a good approach if the method call returns IdentityResult. I can do a pass\n. I thought this one where we trace entering and existing a method was to be done as a separate thing across the framework components. Do we want to have that separately here ?\n. Fair enough\n. referring to your feedback below, I might remove this\n. https://github.com/aspnet/Identity/issues/328 tracking this\n. I'll remove this\n. This is called in the IdentityResult.Log method https://github.com/aspnet/Identity/blob/DeferedLogging/src/Microsoft.AspNet.Identity/IdentityResult.cs#L65 so it has to return some result and since the log methods are not async I do a block \nThese are called only if the loglevel is enabled though\n. ah i see. Thanks I got that. \nBut the .Result call has to still be there\n. nit: should these be is separate classes ?\n. ah my bad... one of those brain drain days\n. I agree with that. We can a split where logging after Task can be an extension method while for bool results it can be in the Manager class itself.\nHaving an extension method makes it easy to have a fluent call that's all\n. sure that is one place I need feedback on. Definitely felt wrong adding that. Alternatively it would be var result = await task and then call the method on it which is the same thing.\nOne thing I looked into was Task.ContinueWith but the parameter was Task<IdentityResult> and not IdentityResult so the await had to be there anyway\n. The token is always generated so there is not false result as such hence omitted that\n. I thought we grouped extension methods based on the classes on which they hung on. I club all these log extension methods in one place ( if we end up doing them )\n. Because we were awaiting on it, I thought it was good to put the delegate in the name. Now I feel delegate makes sense only if it is a Func or an Action. I'll change it\n. So this method is public and users can call it separately, so this additional layer of check. I can have public wrapper and make a private method without the check and remove the duplication\n. There is just one instance where we return IdentityResult instead of Task in RoleManager so I did not add that. I'll add that change\n. so we call the method and continue. There won't be scenario when the execution fails because the calling thread is no longer executing right ?\n. The virtual Log method on the IdentityResult was not called by the bool overload anyway so they were present in the last checkin as well. The decision came because we constructed half message in UserManager/RoleManager and rest in the IdentityResult. This make convenient where we do the whole construction of the message in one place after checking whether log level is enabled. \n. you mean like Write(LogLevel level, string message) ? no there isn't. The direct method off course takes eventid, state, exception and func\n. Sure. But we still need an additional check inside to call LogInformation or LogWarning appropriately based on the result but yes this reduces one line for sure\n. sure\n. sure Logger.Write(LogLevel.Information, eventId, message, null, null) should work the same but yes not easily super concise. On the flip side, if we make the eventId configurable, then users can set specific eventId for Identity messages something not possible right now. Console logger doesn't much care about the eventId but other loggers might\n. sure I am doing it in all places\n. I had the same question but this change was suggested by Resharper as well. I can revert this back\n. Me and @divega had this chat and the consensus is that this is a behavior similar to enum so in that scenario it makes sense to hard code it.\n. sure I was making that change :)\n. sure\n. I aligned the experience with the logging guidelines given at https://github.com/aspnet/Logging/wiki/Guidelines which says Warning is for unexpected flow in the application. In SignInManager, the result is bool for operations that are mostly read-only and most of the time it is an expected value. You might argue that locking out user might be an unexpected error but it is a known result. Hence I choose to log all flows of SignInManager. In contrast, adding an existing role to the database or creating a user with existing username is an error in the happy flow hence I chose it as Warning\nI am open to this being changed since this is subjective. From a uniformity perspective yes, we can do the same in SignInManager as well as in UserManager.\n. ah format document messed it up\n. Fixed and updated\n. True but I wanted to have parity with the Pocos in the source. The navigation property can be deleted in test pocos\n@divega for the private thing, the issue is fixed in the latest version of Mono. But should we revert it to protected ? Do we foresee users overriding this property considering it is a navigation property ?\n. Yeah we could do that. I'll InMemory user altogether. There is a TestUser also I believe. Can I remove that too ?\n. I kind of liked this that took the parameter as username and appended Guid when calling this. I feel strongly about keeping it this way since it more cleaner. \nDo you feel we are creating a pit of failure here for users ? They can always refer to test code for usage ?\n. No I replaced the New with Password1! since it doesn't meet the password requirement. Instead of directly setting the password hash I am doing it via ChangePasswordAsync\n. These are new ones I added to test if navigation properties work when used with Include on dbContext\n. good point\n. ok i'll change it if I revert to nameprefix :)\n. sure\n. This is interesting, since the user object is now generic, we need to either have a SetPasswordHash on UserManager or abstract method on UserManagerTestBase to set it. I think I'll add it on the test base class. SetPasswordHash on UserManagerBase seems not good\n. so the navigation properties are needed since the InMemory tests makes use of them. I need to keep them\n. I can't have this constraint on the UserManagerTestBase generic since EF implementation IdentityUser would need to implement this interface as well. If we have the interface in test base, then in the EF tests, I need to have a TestUser which implements ITestUser and EF.IdentityUser but that doesn't seem that clean\n. I like this solution. I'll have IdentityUserBase internal in Identity project all except the navigation properties. EF.IdentityUser extends this to add navigation properties and TestUser extends this to add properties as needed.\nThere is also an ApplicationUser in the test shared folder. Can I replace that too ?\n. Going by the article we need to have IdentityUserBase public as well. Whether we do it just to unblock our tests, I am not sure. I feel we need a wider discussion to have a public user base class on Identity core. I'll go with the abstract method on UserManagerTestBase approach for now\n. There are some tests that need to remember the usernames for the next step, for example\nvar user = CreateUser(username)\nresult = await manager.FindByUserName(username)\nFor the above scenario I need to have the username at hand. Changing to namePrefix, it makes it tough to maintain the username. Earlier this was done using user.Username so it back to the same problem again. Can the overload take both username and flag that if true, uses what is passed ?\n. ah rebasing messed it up. I'll fix and verify the entire PR again\n. All the properties now have public setters. I'll change these to public as well then\n. Because I need to inject the Logger for the particular class. As you mentioned in the other comment, we should it take it as a mandatory attribute in the constructor\n. sure it can hang off IdentityLogger\n. I thought it should be accessible to the child class and hence did not make the Logger object mandatory in the constructor. Now looking back it doesn't for the child classes to create their own and I can make it internal like others\n. Part of Resharper refactoring. I am fine either way and felt the earlier one was readable for sure\n. Wanted to differentiate what is being logged since it can be a either IdentityResult or SignInResult. I can change that\n. I had this and reverted it since i felt the it should be a public set property but I agree. I'll make the change\n. I changed it to internal and I feel it makes sense to have it protected. In the constructor of the subclass, I can set the Identity logger passing the logger for the subclass which is then reflected in all the log statements, else we have log statements with base class and the sub class which looked weird to me\n. Can this hang of IdentityLogger class ? Then that class can be one place where we can edit and would reflect in all there Manager classes instead of editing 3 private helper methods\n. Since it was a wrapper around the ILogger I chose to name it differently but now that object is not there sure, I can rename it to Logger\n. Sure we already have a overload method in each manager class to create the scope message. I can refactor to have something like this. I added this in the IdentityLogger class so that it can be shared among them. Either way is fine. I'll see make the change and see how it looks\n. I chose to keep it IdentityLogger since it contains the ILogger implementation property which is named Logger so a call to it would be Logger.Logger which now is IdentityLogger.Logger. I would have to rename the ILogger to something else but Logger seems to be a good choice for it. Let me know if you feel strongly about it\n. Yeah the scope method calls it in each manager class  while it is used in a lot places in the test code. If I change the Logger property to BaseLogger then the call would be Logger.BaseLogger or if we are fine that the test code and the method have Logger.Logger then i can make the change. Personally I don't like the Logger.Logger call\n. I looked on the NLog github site and there is no issue reported. I need to file a bug but the guidelines suggest I need to provide a repro. I'll get one up using the public CTP6 bits and open the bug.\nAs a side, they do use Thread Local storage to store the scopes and as you pointed out, that is blowing up for our async calls\n. They might use it in a scenario where they want to change the implementation of how the IdentityResult, SignInResult, bool etc are logged. I am assuming that would be a very small subset of users. I can move it to a different namespace that's all right ? I don't think we should make the class sealed, remove virtual off methods or make it internal. \n. sure\n. I  was a slightly ambiguous on this since if ever they write a method that returns anything else than IdentityResult, SignInResult or bool, they could use it directly. Sure making protected lets them subclass and use it which is fine too\n. Post the logging discussion, I reverted all success messages to Information. To start with we are logging all updates to user/role object only and each one of them is hitting the store for changes. Considering Information is more of a BI scenario, successes to user transactions in Identity I thought was a verbose scenario. So Identity.Success is verbose after updates too. In a scenario we want that to be information then we revert to our old behavior of Information/Warning\n. I had that initially but was reading the BeginScope state from a message since I needed the calling method name. having a method lets the users override the behavior as well\n. But having extension methods won't let users override the behavior right ? That was the feedback when we started initially hence we move to this model\n. @divega i can see the point. This behavior is only for CreateAsync on users and roles since we wouldn't have access to the id values unless the object is created, especially for store generated ids. We still need to know that the user/role was created though, so we need to log it. Now we can special case this and log only, but need to call the Log method directly that takes result, Func, Func since we need to set the userId in the message instead of scope. I am fine either way. This approach only makes it looks clean\n. @divega I am not sure I fully agree removing the class altogether. Let discuss in person\n. Based on @HaoK  comment, we can get rid of this method and have a single virtual method in the manager classes, BeginLogScopeAsync which returns a IDisposable and creating a scopes would be like \nusing (BeginLogScopeAsync(user)){\n...\n}\nusers can override that if they want to change the way scope messages are created. Does that look better ?\n. ah no we aren't. I have fixed it locally and will be in the final PR. We now check the log messages as well as scopes. \n. @HaoK  can provide more insights here. The last I remember the optional ones were initialized to null and instantiated in the constructor to have  a cleaner constructor and a default behavior. Looks like they have been made mandatory again. I thought this was need to have a default behavior if the users did not want to use DI\n. I am assuming you are worried how the database is cleared ? There is a test DropDatabaseStart that is marked with lowest priority that will delete the database after all the tests in the class have run. This class existed all the way long. I have only added more tests that's all. Regarding the object, since it is created in the scope of the test, then it should be disposed at the end of it. If adding a using statement for DBContext is the recommended practice then sure I can update that but will have to do it in other tests as well\n. sure. The .Result was something i din't like too but ran out of ideas to make it better since the variable was inside the lambda. We can chat about it.\n. When I was testing by extending the manager classes on a sample app, I used those extension methods when I overrode some methods. Since the app developer uses them in custom classes, I chose not to move it to internal namespace\n. For example AppSignInManager returning custom AppSignInResult with an additional status. The user needs to log that \n. Mine neither so I preferred what Hao suggested since he is better at this. Some options\nBeginLoggerScope\nBeginLoggingScope\nGetLoggingScope\n. The guidelines are i believe that the namespace for the extension methods be the same the class they are on ? In this case we don't want to the .Log(IdentityResult) to show up on the ILogger in places where Identity is not being used. I have conflicting views here but I still prefer keeping it in Microsoft.Framework.Logging\n. Ok 2:1, I move to Microsoft.AspNet.Identity.Logging namespace\n. And the winner is BeginLoggingScopeAsync\n. This seems fair. I agree with the first point. For the second I want to minimize the number of abstract methods we have to fix this. I hope it would be only GetUserNamePredicate and GetRoleNamePredicate\n. For the first point, we should not pass if the IQueryable is no implemented but rather skip it. I think it makes sense to have a custom xunit test attribute to skip the test. I'll prototype that but let me know if you guys think other wise\n. My thought was the user shouldn't get a false sense that the test is passing but in the skip attribute I needed access to the UserManager object which lead to generic hell. I think noop is the simplest option here\n. The requireuniqueemail flag is false so this is passing with all tests. We can have a random number with the email and set that flag to true\n. we do add randomization in the helper when there is no argument provide. When something is, then we consider it to be fixed since they might need to compare that value later. I agree though that I missed it in this method\n. I fixed this for queryable users missed this for roles. Was doing some refactoring using Resharper but thanks for catching\n. thanks for catching. Copy paste error\n. We were doing name + guid so I presumed Contains would still be valid check instead of StartWith considering we are looking if part of the string is present. I'll revert back to StartsWith it is just that I have to now maintain the original randomized username and pass it exactly to the predicate\n. Added the four predicates and restored the test to original assert statements\n. fixed. Both have the same pattern\n. Hao was ok with having a flag in the method that treats supplied prefix as the actual value else we append the guid. The default is to append the guid. There a few tests that need to do it and this approach is simpler than having an out parameter. You can look at the api and let me know your thoughts\n. sure I updated it and role name are done the same way as usernames.\n. sure\n. So we are preserving only the IsPersistent property ? The other property I feel might be slightly important is the Dictionary. Do you think we need that too ?\n. ",
    "tugberkugurlu": "This would be actually interesting to keep the other implementations inside the core repository. However, not sure how easy the integration would be right now. \nFor example, I have the RavenDB and MongoDB implementations of the ASP.NET Identity. As far as I can guess, integration with K10 would be not possible as neither RavenDB nor MongoDB has K10 compliant clients yet.\n. This would be actually interesting to keep the other implementations inside the core repository. However, not sure how easy the integration would be right now. \nFor example, I have the RavenDB and MongoDB implementations of the ASP.NET Identity. As far as I can guess, integration with K10 would be not possible as neither RavenDB nor MongoDB has K10 compliant clients yet.\n. I am interested in this. How do we listen to these events and act on them?\n. I am interested in this. How do we listen to these events and act on them?\n. ow, how did I do that?\n\n. ow, how did I do that?\n\n. Here is an implementation for this http://www.tugberkugurlu.com/archive/asp-net-5-identity-mongodb-implementation which supports dnx452 for beta8 runtime. It's available on NuGet: https://www.nuget.org/packages/Dnx.Identity.MongoDB.\n. Here is an implementation for this http://www.tugberkugurlu.com/archive/asp-net-5-identity-mongodb-implementation which supports dnx452 for beta8 runtime. It's available on NuGet: https://www.nuget.org/packages/Dnx.Identity.MongoDB.\n. Well, about the first comment: I thought that, too. It depends on the intention actually. Does the library intent to only store claim type and claim value? Claim class also carries other properties: http://msdn.microsoft.com/en-us/library/system.security.claims.claim(v=vs.110).aspx if type and value are the only things, I'll update the PR accordingly as you indicated.\nSorry about the functional tests :disappointed: Totally missed that. I'll add them. \n. Well, about the first comment: I thought that, too. It depends on the intention actually. Does the library intent to only store claim type and claim value? Claim class also carries other properties: http://msdn.microsoft.com/en-us/library/system.security.claims.claim(v=vs.110).aspx if type and value are the only things, I'll update the PR accordingly as you indicated.\nSorry about the functional tests :disappointed: Totally missed that. I'll add them. \n. @HaoK updated.\n. @HaoK updated.\n. @HaoK updated.\n. @HaoK updated.\n. Putting each tenant's identity data into a different database would accomplish that unless I am missing something. That way you can pretty much use all of the identity implementations out there within your multi tenant app.\nTo my experience, it's mostly a good idea to keep the database(s) single tenant whereas you keep the application level multi-tenant. This surely increases the operational costs (e.g. monitor more databases, backups of all, updating more databases (if your database has schema), running migrations on more databases (no matter if your database is schemaless or not), etc.). However, the benefits are really worth the effort. For example, this approach would allow you to allocate different level of resources for your each tenant. In identity case here, each tenant can have customized database resources (e.g. Tenant A's identity database is on a SQL Azure Premium database since it has 10 million users, Tenant B's identity database is on a SQL Azure Basic database since it has 1000 users, etc.).\nWhat we lack the most on this around .NET space is not the tooling/library support, but the docs. . Putting each tenant's identity data into a different database would accomplish that unless I am missing something. That way you can pretty much use all of the identity implementations out there within your multi tenant app.\nTo my experience, it's mostly a good idea to keep the database(s) single tenant whereas you keep the application level multi-tenant. This surely increases the operational costs (e.g. monitor more databases, backups of all, updating more databases (if your database has schema), running migrations on more databases (no matter if your database is schemaless or not), etc.). However, the benefits are really worth the effort. For example, this approach would allow you to allocate different level of resources for your each tenant. In identity case here, each tenant can have customized database resources (e.g. Tenant A's identity database is on a SQL Azure Premium database since it has 10 million users, Tenant B's identity database is on a SQL Azure Basic database since it has 1000 users, etc.).\nWhat we lack the most on this around .NET space is not the tooling/library support, but the docs. . > we'd like to use an Azure Elastic Pool for SQL. Here, the sharding key would be the TenantId.\n@luisgizirian AFAIK, you can put multiple databases into the pool with Azure Elastic Pool, no? I thought that's the whole idea of it. Otherwise, what would be the diff of it from sharding?. > we'd like to use an Azure Elastic Pool for SQL. Here, the sharding key would be the TenantId.\n@luisgizirian AFAIK, you can put multiple databases into the pool with Azure Elastic Pool, no? I thought that's the whole idea of it. Otherwise, what would be the diff of it from sharding?. @luisgizirian I don't mean to deviate from the issue. I am talking about something related which you originally brought up.\nThe point I am trying to make is that storing the identity data in one database for all of your tenants is a not a good idea at all. There are so many things that can go wrong if you architecture your system in this way. See https://ayende.com/blog/3497/multi-tenancy-the-physical-data-model for a few of those scenarios. \nEven if you are OK with this architecture, a generic library like ASP.NET Identity should not encourage you to adopt this pattern. In fact, clearly, it's not hard to do this w/o having an explicit support from this library if you really want to shoot yourself in the foot.. @luisgizirian I don't mean to deviate from the issue. I am talking about something related which you originally brought up.\nThe point I am trying to make is that storing the identity data in one database for all of your tenants is a not a good idea at all. There are so many things that can go wrong if you architecture your system in this way. See https://ayende.com/blog/3497/multi-tenancy-the-physical-data-model for a few of those scenarios. \nEven if you are OK with this architecture, a generic library like ASP.NET Identity should not encourage you to adopt this pattern. In fact, clearly, it's not hard to do this w/o having an explicit support from this library if you really want to shoot yourself in the foot.. I am also not a fan of exposing IQueryable but I can understand the desire and @divega is right about issuing some search queries for that reason even if that's not an elegant solution. The other question would be whether you would use the same data storage system for the search. It depends on the volume of data but removing IQueryable would also make that distinction which I would like.\n. I am also not a fan of exposing IQueryable but I can understand the desire and @divega is right about issuing some search queries for that reason even if that's not an elegant solution. The other question would be whether you would use the same data storage system for the search. It depends on the volume of data but removing IQueryable would also make that distinction which I would like.\n. :+1: \n. :+1: \n. Happy to PR for this if this sounds reasonable.\n. Happy to PR for this if this sounds reasonable.\n. Happy to PR for this if this sounds reasonable.\n. Happy to PR for this if this sounds reasonable.\n. This also effects IdentityBuilder.\n. This also effects IdentityBuilder.\n. This is what I had to do now to get around this: https://github.com/tugberkugurlu/Identity/blob/9ba9408e62d7d72446cbf4fc15cf30966ac26557/samples/IdentitySample.Mvc/Startup.cs#L39-L72\n. This is what I had to do now to get around this: https://github.com/tugberkugurlu/Identity/blob/9ba9408e62d7d72446cbf4fc15cf30966ac26557/samples/IdentitySample.Mvc/Startup.cs#L39-L72\n. @HaoK awesome, thx!\n. @HaoK awesome, thx!\n. I created abstract class on UserClaimsPrincipalFactoryBase<TUser> https://github.com/aspnet/Identity/pull/952/commits/bb06284d018b1339f433b8d609f8e83b8c0f73b0. However, I am not sure if that's a good concept to share across UserClaimsPrincipalFactory impls.\n. I created abstract class on UserClaimsPrincipalFactoryBase<TUser> https://github.com/aspnet/Identity/pull/952/commits/bb06284d018b1339f433b8d609f8e83b8c0f73b0. However, I am not sure if that's a good concept to share across UserClaimsPrincipalFactory impls.\n. > The IHttpContextAccessor implementation should have singleton scope\nThanks, I can remember that thread now. That makes sense.\n\nmeaning that it should have per request scope.\n\nAt least for now but I believe the way that UserManager acquires IHttpContextAccessor impl is wrong. It should have been done through the ctor as a param and CancellationToken should have been taken on demand from the fresh context each time it's requested.\nMore importantly, the other annoying thing is the fact that UserManager cares about request abort. It should just receive a CancellationToken through each methods as a parameter and rely on that. So, the consumer should be responsible for retrieving the RequestAbort cancellation token and pass it down (maybe combine that token with your own cancellation token). However, with the current implementation, I feel that integrating UserManager with IHttpContextAccessor couples the cancellation approach too much.\n. > The IHttpContextAccessor implementation should have singleton scope\nThanks, I can remember that thread now. That makes sense.\n\nmeaning that it should have per request scope.\n\nAt least for now but I believe the way that UserManager acquires IHttpContextAccessor impl is wrong. It should have been done through the ctor as a param and CancellationToken should have been taken on demand from the fresh context each time it's requested.\nMore importantly, the other annoying thing is the fact that UserManager cares about request abort. It should just receive a CancellationToken through each methods as a parameter and rely on that. So, the consumer should be responsible for retrieving the RequestAbort cancellation token and pass it down (maybe combine that token with your own cancellation token). However, with the current implementation, I feel that integrating UserManager with IHttpContextAccessor couples the cancellation approach too much.\n. > Some time ago we intentionally removed CancelationToken arguments from methods on the managers and started relying only on IHttpContextAccessor for cancellation. A bit more information from @tugberkugurlu on why that hurts (besides the coupling feeling too strong) could be really helpful.\n@divega It's not much of an issue from the consumption point of view when you know UserManager uses it. However, it's not intuitive at the first. I was surprised to see UM was caring about request abort. \nSo, it's not a strong case to request it to be removed. However, I would love to hear what made you guys to remove CancelationToken arguments from methods on the managers.\n. > Some time ago we intentionally removed CancelationToken arguments from methods on the managers and started relying only on IHttpContextAccessor for cancellation. A bit more information from @tugberkugurlu on why that hurts (besides the coupling feeling too strong) could be really helpful.\n@divega It's not much of an issue from the consumption point of view when you know UserManager uses it. However, it's not intuitive at the first. I was surprised to see UM was caring about request abort. \nSo, it's not a strong case to request it to be removed. However, I would love to hear what made you guys to remove CancelationToken arguments from methods on the managers.\n. @HaoK I agree within this context. I'll change accordingly. \n\nNote: However, I have doubts about claims being not unique. I am feeling that there should be some uniqueness constraint around claims but I'm not sure where they should fit in. Also, that's outside the scope of this PR I think :smile: I'll probably open up another issue to discuss that later.\n. @HaoK right. This implementation looks like an update operation but it's actually the replace at the same time as type and the value are the only stored details. Leaving as is?\n. It's really interesting that you brought that up :smile: as I have problems with that approach, too :smile: I'll raise that concern, too (I promise, I'm stopping cluttering this PR with unrelated stuff now :smiley:)\n. @HaoK sure, will do that once this's merged (to be able to point to a place).\n. I am not sure about this. Is it still valuable to check this and add roles into the claims?\n. \n",
    "gblmarquez": "@Eilon OK. I'll keep up to date to contribute on this feature, thanks! I already implemented and using on production a version of Identity with Azure Table Storage. It's so dame fast!\n@tugberkugurlu We'll need to check if the SDK will be compliante, thanks for sharing your thoughts.\n. ",
    "MaximRouiller": "Just bumping this up to see if there's any progress on this front. /cc @rustd @Eilon \n. Let's say that maybe I would perhaps be interested in doing it. ;-)\nWho would I need to bother? Would it be integrated into the main framework or would it need to be a separate package? \nFinally, if you need my email for further discussions let me know. :)\n. I'll give it my best!\n. I've looked at it and asked several people around and they all told me the same thing.\nIt's not a good idea as it won't be able to scale after a while. Perfect for small solutions but once you start to hit anything bigger, you will encounter performance issues and full table scan. \nSo at that point you'll need to migrate which won't be as easy. If you are on the cloud, there's already something out that is called Azure AD B2C which basically makes the whole username/password completely useless.\nIf you want to make a crack at it, go! :smile: \n. Oh absolutely. :smile: I've just decided to not waste time on Table Storage. \n. Is there an actual link? Finding the commit hash for this can be hard. Which repo at least?\n. Just want to add one thing about Service Locator Pattern.\nhttp://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/\nhttp://blog.ploeh.dk/2014/05/15/service-locator-violates-solid/\nhttp://blog.ploeh.dk/2015/10/26/service-locator-violates-encapsulation/\nAnd I agree. We don't know what depends on what, we need to examine the source... if a dependency has to be pre-filled, I'd rather have it done through properties than through the Service Locator Pattern.\nI don't know how easier it would be but... classes where the Service Locator Pattern are a runtime time bomb. Even in tests... unless you start going into the source code... it gets bad.\n. I'll have to greet him that way at the next Summit. ;-)\n. I have absolutely no idea what's going on in this thread. :confused: \n. @brockallen https://github.com/aspnet/EntityFramework/wiki/Roadmap#high-priority-features\nNope. No lazy loading yet but it's in the roadmap.\n. It looks like the package hasn't been updated since April 2015.\nAnother package named Microsoft.AspNet.Identity seem to have taken off where .Core left off. As in, no < 3.X releases, all betas and following the ASP.NET 5 releases.\nCan you try that package?\nPS: Not currently in front of VS2015 or any working implementation thereof. \n. Oh and Microsoft.AspNet.Identity.Core has never been DNX compatible, as in ever, but is still available through the NuGet gallery so that might lead to confusion.\n. You are converting old code to the new identity model, right?\n. And look at that... no documentation :stuck_out_tongue: \n//cc: @rustd \nPS: Just pulling your chain @rustd :stuck_out_tongue_winking_eye: \n. Care to share a bit of code for your use case? Maybe we can help.\n. From what I can see in the samples, they are using IdentityUser and not IUser.\nhttps://github.com/aspnet/Identity/blob/3.0.0-rc1/src/Microsoft.AspNet.Identity.EntityFramework/IdentityUser.cs\n. Looks like it. \nIdentityUser<TKey> is defined in that file at line 42. :smile: \nAnd don't forget your towel.\n. @Moses-Bassey Please open an issue and describe your problem. What you have right now may be very different from what happened back in December 2015.. Hi @kinshines, I think you'll get faster answers if you head out to www.stackoverflow.com for questions of this kind. \nThis repository to report possibles defects or missing feature. You might get an answer here, but it might take days or weeks (especially with the holidays).\n. Please refer to the Password Storage Cheat Sheet. \nHere's the quoted part you are interested in @weitzhandler :\n\nLeverage an adaptive one-way function\nAdaptive one-way functions compute a one-way (irreversible) transform\n\nThe rest is also very interesting to read if you are into this. I know @brockallen is :stuck_out_tongue: \n. Basic principle is... assume somebody is going to download your whole database and have all the time in the world to hack those passwords. \nIf you are using clear text... you are basically insane.  If you are using encryption with a single key, they only need this to get everything (bad!). If you use hashing, they have to try every password one by one to get them (better). If you use hashing with salting per accounts, then they can't match identical in your database (excellent!).  If you use hashing with a compute factor, then they will have an incredibly hard time finding individual passwords even if they use GPU farms to hack them (best so far!).\nYour point shouldn't be in sending the user his password. It should be in providing him a way to reset is password with a link sent to a confirmed email address. No need to send passwords.\nBut basically... use something somebody else already did. \nDon't roll your own\n. Or just have the lady up front reset the password to anything she wants. Unsecure as hell... but hey. If there's nothing to protect.\n. Do you have a sample password that fails?\n. Seems to be a bug.\nHere's the corresponding line: https://github.com/aspnet/Identity/blob/3.0.0-rc1/src/Microsoft.AspNet.Identity/PasswordValidator.cs#L55\nAnd relevant code:\nif (options.RequireNonLetterOrDigit && password.All(IsLetterOrDigit))\n{\n    errors.Add(Describer.PasswordRequiresNonLetterAndDigit());\n}\n. That seems to be the bug. If a password have a digit, with RequireNonLetterOrDigit, it should be valid... yet if the password is all letters or digits... it fails.\n. Maybe the name should have been RequireNonLetter since this is exactly what this is doing. \n@rustd? What do you think?\n. @HaoK sounds very good! :smile: \n. :+1: \n. @nrkarthick I think you are better going to https://github.com/aspnet/EntityFramework to ask that question. :smile: \n. :+1: \n. One way would be to to provision a site for each of your tenant. Each with their own identity/urls/settings/etc.\nThat would also allow you to control the migration of each clients onto new APIs and such.\nThat being said, it's not a discussion for aspnet/Identity. :smile: \n. > I can imagine that a username should be something remotely readable, although one could argue that an email should be as well\n@janpieterz Well... the original RFC compliant regex doesn't argue. That is if you want to validate as per the RFC.\nThere is many characters that are available in an email (()[]+-<> among others).\nGood read if you want to go further. \nOne thing for sure... refusing a valid email is plainly frustrating to most users. \n. I do use the + sign in my Gmail address. Allows me to tag emails I use to register to some services.\n. @HaoK that would fix 90+% of all scenarios I think.\n. Just like a pug. \nI'll see myself out.\n. Be there at the 2016 Summit and we'll :beers: to that disgusting pun I did with the pug. :smile: \n. What is ADX?\n. Also... NuGetPackageVerifier.json? :smile: look like a fun tool.\nLinks? :stuck_out_tongue: \n. You guys should share it with the world.\naspnet/DnxTools/issues/24\n. App_Data? :stuck_out_tongue_winking_eye: \n. @divega \nGmail: letter, numbers, ., +\nDon't know about other email providers.\n. Gmail does not allow + when registering but any emails on Gmail containing the + sign will be valid.\nThey call it email \"tagging\" or something like that. Anything after the + will be ignored.\n. @mwpowellhtx This is technically the repository for Identity 3.X.\nYou are talking about Identity 2.X which is the version built for the previous version of ASP.NET.\nAs for the 2.X versioning scheme, it might be a bit late to retroactively fix that.\nMy opinion? I don't care what the build number is. I care about the GitHub tag that was used to generate this assembly. Of course, the assembly number is important (major,minor especially) but the Nuget package version is more critical. In 3.X, if you go in the \"tags\", you can basically navigate to the code that was used to generate that assembly.\n. What are you authenticating against?\nEquivalent to Forms Auth? Your own SSO solution? ADFS as SSO? Facebook? Google? Twitter?\nIt might not look like much but each have their own solution.\n. Weird...\nIt does show that it is supported.\n. You don't want to \"new\" dependencies.\nYou put them as a dependency in your constructor:\ncsharp\npublic class MyUserStore\n{\n    public MyUserStore(MyDependency dependency)\n    {\n        ...\n    }\n}\nThen you add it to the ConfigureServices by overriding IUserStore\nThat's it really. Did I forget something?\n. Extracting screenshot:\n\nAnd stack trace:\nat Microsoft.Extensions.Configuration.UserSecrets.PathHelper.GetSecretsPath(IFileProvider provider) \nat Microsoft.Extensions.Configuration.ConfigurationExtensions.AddUserSecrets(IConfigurationBuilder configuration) \nat IdentitySample.Startup..ctor(IHostingEnvironment env) in C:\\github\\Identity\\samples\\IdentitySample.Mvc\\Startup.cs:line 32 \n--- exception rethrown --- \nat Microsoft.Extensions.Internal.ConstructorMatcher.CreateInstance(IServiceProvider provider) \nat Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters) \nat Microsoft.Extensions.Internal.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider provider, Type type) \nat Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(IServiceProvider provider, Type type) \nat Microsoft.AspNetCore.Hosting.Internal.StartupLoader.LoadMethods(IServiceProvider services, Type startupType, string environmentName) \nat Microsoft.AspNetCore.Hosting.<>c__DisplayClass4_0.<UseStartup>b__1(IServiceProvider sp) \nat Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService.Invoke(ServiceProvider provider) \nat Microsoft.Extensions.DependencyInjection.ScopedCallSite.Invoke(ServiceProvider provider) \nat Microsoft.Extensions.DependencyInjection.SingletonCallSite.Invoke(ServiceProvider provider) \nat Microsoft.Extensions.DependencyInjection.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider) \nat Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType) \nat Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService(IServiceProvider provider, Type serviceType) \nat Microsoft.Extensions.DependencyInjection.ServiceProviderExtensions.GetRequiredService<T>(IServiceProvider provider) \nat Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureStartup() \nat Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices() \nat Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\n. Misaligned. \n. Now I have Metallica's song in my head.\n. ",
    "SharePointRadi": "Hey @MaximRouiller do you need a hand? I've built my own MongoDB provider and have most likely run into similiar issues/challenges. I'm also condidering a Document DB provider.\n. Table Storage doesn't make that much sense, but DocumentDB does :)\n. So far I have a Microsoft.AspNet.Identity.MongoDb library with all unit tests passing: https://github.com/OneBitSoftware/Identity/tree/MongoDBImplementation\nFrom a perspective of running unit tests and attempting all the plumbing - all good and a leap forward.\nBut, the challenges at the moment:\n- dnxcore50 and getting the dependencies to always work for the ASP.NET sample application\n- the MongoDB C# driver not working for dnxcore - I have started discussions and a fork already exists:\n  https://jira.mongodb.org/browse/CSHARP-1177?filter=-4&jql=text%20~%20%22coreclr%22%20ORDER%20BY%20createdDate%20DESC \n- breaking changes in asp.net slow things down quite a bit: https://github.com/aspnet/Announcements/issues/51\nEffort should go there now so we can actually build an asp.net web application running in dnxcore, depending on Identity and the MongoDB implementation.\n. Just to add, this is where the dnxcore discussion is happening for Mongo: https://github.com/mongodb/mongo-csharp-driver/pull/210\nI'll be spending some free time there to see how I can help move it forward.\n. I have also created an EF6 library for Identity 3. Its quite important because EF7 is not that feature-complete. \nYou can take a look here:\nhttps://github.com/OneBitSoftware/Microsoft.AspNet.Identity.EntityFramework6 \nAll unit tests pass and I have included a sample MVC6 project so people can get started easily. I would love to put more work in and get it contributed.\n. Hey saab800, you should check out https://github.com/aspnet/Identity/issues/225, maybe we should be aligning\n. Further to this discussion, UserManager.cs has internal methods that are referenced from UserManagerTestBase.cs.\nThis means that we (provider writers?) could not really reuse UserManagerTestBase because it refers those internal methods. I had a similiar need and had to use reflection to refer to those internal methods.\nhttps://github.com/OneBitSoftware/Microsoft.AspNet.Identity.EntityFramework6/blob/master/test/Microsoft.AspNet.Identity.EntityFramework6.Test/TestingUserManager.cs\n. I added a unit test to validate that we can find users by phone number.\n. I am happy to follow through any decisions you guys make and amend it\n. You can look at a user store implementation here : https://github.com/OneBitSoftware/Microsoft.AspNet.Identity.EntityFramework6/blob/master/src/Microsoft.AspNet.Identity.EntityFramework6/UserStore.cs\nThat should give you enough info on how ant what to do. If you look at IdentityDbContext you will see how the model gets created, you can tweak it to your liking.\n. See this: https://github.com/OneBitSoftware/Microsoft.AspNet.Identity.EntityFramework6 \nIt would be great if MS officially consider this EF provider, however there's lots of drawbacks due to the differences between EF6 and EF7.\n. I would also suggest that there's a unit test for this, because currently all written unit tests make use of derived UserManager classes. \nI am happy to submit a PR, if it would be helpful, and we clarify the intent.\n. ",
    "dlmelendez": "Table Storage Provider working on Identity 3.0 RC1 - https://www.nuget.org/packages/ElCamino.AspNet.Identity.AzureTable/2.0.0-beta2\nUnfortunately, I have not had the time to move the project to GitHub yet, it is in the works..- https://identityazuretable.codeplex.com/\n. Table Storage for Identity Core https://github.com/dlmelendez/identityazuretable .\n. ",
    "crorodriguezro": "plz\n. ",
    "danicomas": "@rustd Do you know if Identity 2.1.0 has this feature?\n\"IdentityResult no longer contains error strings, instead it will contain a list of FailureCodes (which are constants defined by identity mapping to things like DuplicateUserName, PasswordMismatch, etc)\"\n. ",
    "blowdart": "@danicomas This will be for 3 onwards.\n. Damnit, I wanted this to be painful.\n. Timespan works for me\n. Yea, this is how it's always been. I see no burning need to change it.\n. Questions about authorization would be better asked in the Security repo https://github.com/aspnet/security as a separate issue, rather than tagging onto an issue which isn't about authorization. \n. Closing again, off topic now.\n. I don't see any reason you shouldn't clear them out. It's arguably safer, although I'd hope the half cookie never gets left after the login completed.\n. @brockallen it may be silly, but is it actually invalid? I'm not sure claims make any promise about uniqueness.\n. Multi-tenancy  is not a goal for identity. We expect Identity to be used as a starting point for simple identity scenarios. \nAs everyone's requirements around multi-tenancy differs based on their application architecture doing something generic would probably end up too limiting to be useful.\n. Windows Auth and WS-Fed are generally complete identity providers. They don't get used as secondary providers to Identity. Forms auth had a half hearted attempt to make AD work with forms login, but it still didn't hook into a membership database.\nMixing auth modes is dangerous and something we strongly discourage and always have.\nWhilst this is on the backlog for now I remain unconvinced this is anywhere we want to take asp.net identity as we expect you to choose the Organizational Account option when you create a new project in Visual Studio not shoehorn it into an non-enterprise identity package.\n. While we're at it these should probably get moved to aka.ms links\n. In this case I'm ok with a specific \"Locked out\"\nFrom: Hao Kungmailto:notifications@github.com\nSent: ?Monday?, ?December? ?22?, ?2014 ?16?:?29\nTo: aspnet/Identitymailto:Identity@noreply.github.com\nCc: Barry Dorransmailto:Barry.Dorrans@microsoft.com\n@blowdarthttps://github.com/blowdart specifically when you call signinManager methods to sign in, if the user is locked out, should we be returning a generic \"sign in failed\" for the error message that that will be displayed on the page or something like \"user is locked out.\" by default.\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/issues/297.\n. Damnit. protected Protector .... Hah.\n. Oh! OK. Change of issue then - rename to DisplayName...\n. Single responsibility darn it!\nSeparate them out?\n. We should look at that when you get back then :)\n. Yes. Even for emails as usernames that's reasonable IMO\n. @WillBaldwin \nIt looks like you're attempting to use AD for auth and then pull in additional claims from an identity database? Is that correct?\nThis isn't a scenario we've supported for quite a while now. It was fraught with problems and very few, if any implementations got it correct. IdentityUser is meant for forms based authentication, or a smattering of social auth and nothing more.\n. We're not going to add this because too many people depend in a user name being unique in their code. It would break too many people's assumptions in a way that leads to security failure.\n373 may be worth following, as it might be asking for a simpler sort of disabling mechanism.\n. pedant: Windows Identity is not ASP.NET identity, and this repo has nothing to do with it, as it's a hosting concern.\n. That's not this repo, that's actually CoreCLR :D\n. Yes, sounds like a tooling bug :) We can go pick on @madskristensen or @barrytang if you like.\n. Yea, but you have the repo of the bug, if we go file the issue and mads asks for a repo, I can't give him one :) This is where github lets us down, in that we can't shuffle issues to other repos where they belong.\n. @chancewen Correct, we don't provide federated identity services in ASP.NET. The Identity Framework isn't designed for that.\n. What do you mean by groups? \n. Also https://github.com/aspnet/Security/issues/280\n. One per provider seems fair.\n. Data Protector provides the encryption, signing, decryption and verification services for auth tickets. \nYou'd create one on application startup, although identity would do one for itself if one is not provided.\n. There are already enough comments about the massive dependency tree you get importing framework libraries because of Abstractions, Core and Common. I'm not sure we should, if you implement your own identity store you'd use that in an app that already adds an identity dependency.\n. And what would libraries would be written against abstractions for identity? Aside from implementations on data stores EF doesn't provider, or token providers for strange SMS providers?\n. All of which are there to provide things for identity to use and for nothing else, and aren't usable outside of identity. So what do we gain by moving them into another package? There's nothing generic here.\n. I wouldn't add them. It's not like if you call toString on a date you get \"Date: 08 June 2015\"\n. Yup\n. Log \"normal\" mismatches please.\n. This depends on your expectations\nYou'd be running beta identity code, on top of a beta framework. We don't security patch betas, we simply tell you to move to the latest beta. We don't have support expectations either. Nor do we have concrete release dates for any of these (when support will become available).\nIf you're comfortable with those risks then you could considering using it.\n. We have been moving away from regular expressions throughout asp.net as part of our security effort. Some folks tend to write complicated regular expression based validators that leave themselves open to DoS, and that's very hard to mitigate against.\nYou could, if you wished to continue with regular expressions, implement your own IUserValidator implementation and register that with the IdentityBuilder.AddUserValidator method.\n. It is what it is, managers extend over everything like an octopus, giving a central entry point. Whilst this isn't great from a no god object PoV it is easy from a users perspective. And it's the ordinary users that we're trying to address.. We do close issues because the issue opener hasn't responded within what we consider a reasonable amount of time.\n. I am confused. Are you accessing the controllers with cookie auth? Only interactive auth schemes would issue a redirect. You ought to be using a bearer scheme for WebAPI controllers.\n@HaoK didn't we discuss changing this in security so the redirect didn't happen on Ajax requests if you did do the wrong thing and used cookies?\nThis isn't an identity issue, it's a security middleware issue.\n. So that would fix this issue, probably. Can you link this issue to that commit?\n. Moving out of backlog and aiming for RC2\n. As we won't have a navigation property this isn't possible.\n. Given your timescales it's doubtful.\n. Not with identity. You can use NT authentication to automatically login for intranet apps, but you cannot login via forms using AD.\n. Damnit, I agree with @davidfowl. You see what you did @brockallen?\n. Darnit Linux :) Yea, we should switch to an CNG based random array of bytes, of the maximum size the TOTP algorithm uses. @HaoK \n. I guess so, it's too big a change to make now unfortunately.\n. In addition we should change old TOTP entropy to use something other than security stamps, because there's a risk that people leak those.. Both work.. So what happens if a user has flowed the claims initially, and saved them, do we then stomp them? Because let's face it, folks don't look at issuer. \n@PinpointTownes \n. I like the white list approach, and we should leverage the issuer field just to make sure.\n@HaoK what's the issuer when claims from Identity?\n. You are perfectly capable of cutting and pasting the correct comments yourself :p (because inheritdoc doesn't work)\n. Yes :). Yup :). Yea, anything from validators, cookie refreshes, etc.. Oh that'd be horrible. @madmunsterdaddy what would you expect from trackLastUserActivity?. Every action is horrible, because that's every page load, every image load. Ditto for cookie validation. Your load on the database grows hugely.\nMaybe have that part off by default?. - [ ] Test migrations from 1.1 schema. \n\n\n[ ] Ensure it's opt-in for existing code, and opt-in automatically for File -> New Project\n\n\n[ ] Document how to create change scripts\n\n\n[ ] Test how VS Publish would apply migrations to azure, and document. It's not missing at all. The templates which include ASP.NET Identity include it.\n\n\nIf you are not using the templates then you should look at the cookie middleware documentation where you can see an example that creates a persistent cookie \nc#\n  await HttpContext.Authentication.SignInAsync(\n      \"MyCookieMiddlewareInstance\",\n      principal,\n      new AuthenticationProperties\n      {\n          IsPersistent = true\n      });\n. You can't. You won't ever be able to. We will not support this at all.\n. I don't think the parameter clarifies anything :(\n. This is probably a naming problem. In reality they're 2fa tokens used during 2fa logins. There is a PR coming which will rename these properties and make it easier to understand what their actual function is.\n. When you say google maintains the user what do mean? Are you talking about the external signing cookie identity sets? Or Google's own login pages?\n. Closing due to no response\n. Identity is not designed for multi-tenant scenarios in any way, shape or form.\n. We wouldn't target identity at a site that needs separate authentications per directory either.\n. Oh that is bad isn't it. Lots of invalid characters for emails. This is strange. Either we update the samples so it's not emails, or we pare it down a bit.\n. We won't be using regular expressions for validation. We made a conscious decision to remove that approach.\n. This is deliberate. It's a way of checking if the store implementation supports the API. As it's an internal call we're not so worried about naming.\n. This really isn't an identity issue, it's more a configuration one. @Eilon where should this bug end up?\n. Dupe of #610\n. @jvelezc Please feel free to create a PR against issue #610 and we'll take a look. There used to be some interesting problems with recursion that EF has now solved.\n. @Rick-Anderson One for you again.\n. You are confusing the \"Core\" of identity 2.0 with Core of ASP.NET. So you are attempting to add the previous version for .NET 4.5. \n. Linked to #750\n. @Rick-Anderson One for you?\n. Can you check if the user in question has a null security stamp?\n. There's no built in functionality for what you require\n. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IUserClaimsPrincipalFactory.cs\nTask<ClaimsPrincipal> CreateAsync(TUser user);\nThat should get you a principal from a user object.\n. @HaoK @divega \n. What feeds do you have setup in nuget? This looks like you're mixing feeds and dependencies. Take a look at https://github.com/aspnet/Home/wiki/NuGet-feeds and choose the single, correct, feed for your situation\n. I'd ask in the entity framework repo. https://github.com/aspnet/EntityFramework\n. @divega Can you help?\n. Where is the exception coming from? As in do you get a line number? What database are you using? Do you have multiple users with the same username?\n. Please show us the code where context is coming from.\n. You could do a reference cookie, then use the claims transformation piece to rebuild your actual claims. Basically put the bare minimum you need to identity a user into the cookie and then use the hook as demonstrated in http://benfoster.io/blog/customising-claims-transformation-in-aspnet-core-identity\n. This would be an request for the MVC repo, rather than us. Really it's an app concern rather than the framework, as \"User\" is under your control. We believe that this would be better served as your own project and nuget package though.\n. You don't. Identity isn't meant for this type of federation. Login paths are limited to being relative URLs.\n. Backlogging till post RTM\n. @HaoK  is the user2roles table something we expect to be customizable?\n. What cached data are you seeing? What error are you seeing when you logout?\nFor point 2 the login page doesn't create any cookies until you actually login. A refresh doesn't do this.. What do you mean by you are unable to login? Are you seeing errors?\n. We haven't seen such an issue either, we can't think of what would cause it. Logging out deletes the cookie entirely, logging in creates a complete new cookie. Is there a proxy in the way anywhere?\nOn production could you configure debug logs to a file to try to catch any exceptions?\nAgain when you say you can't login what do you mean? What happens? Is the login page there? Does the form submit? What happens if the form submits? Are there errors? \nThere's nothing in our code that cares about IP addresses, so why it works on a VPN is a huge puzzle, unless you've customised login code, or have some sort of IP filtering or blocking in place.\n. Can you try enabling debug logging within the app? @HaoK any more ideas? This is pretty bizarre.\n. Given a user, you retrieve from the store, you could generate the password hash, using the password hasher, set the password field in the user class, and then update it via the user store. \n. The link you have is for the previous versions of .NET Core.\nAre you using .NET Core?\n. This github repo is for ASP.NET Core I'm afraid. I'd suggest asking on StackOverflow, and one of the team will pick it up.\n. We should look at a token protection service for this sort of thing, which could in turn apply to other pieces like username or email, but we wouldn't provide an implementation by default, because who would know where to keep keys.\nI'm thinking Protect/Unprotect as the verbage.. @HaoK can you try this? The security stamp might change when emails or usernames change, in which case all previous tokens should be invalidated.. Sure go for it.\n. Is this a dupe of #780?\n. UseIdentity wires up cookie middleware, which in turn takes over the 401/403 etc. This is by design.\nYou're mixing up HTML pages and API Controllers, and that's painful. \nYou have a couple of options, you can tell cookie middleware not to be automatic, and then specify the cookie scheme on your HTML controllers, e.g.\n[Authorize(ActiveAuthenticationSchemes = \"Cookie\")]\nOr write authentication middleware for your API scenarios, and use that rather than hard returning statuses, again selecting it with the ActiveAuthenticationSchemes in the authorize attribute.\n. This is not an Identity issue. Identity, is basically our membership system. Please add an issue to the Security repo.\n. Can you describe what you're trying to do? Please include your policy code & authz configuration, and the roles you're trying to validate.\n. So this almost looks like the claims for a role aren't populating?\n@HaoK \n. See also #465\n. I think Brock's right here. I often forget what my damned username is, and so end up asking for it by email. So a username recovery page would be a good enhancement come v.next\n. @divega \n. @HaoK - missed :) Can you adjust?\n. Dupe of #883\n. If we're splitting stuff, we ought to split out the MVC specific bits, so folks can use identity from other types of apps, as we've had requests for.. It's not something we've considered. Identity is pretty much interactive browser via form submission. WebAPI et al would want bearer tokens, and that's not on the roadmap, given the various community offerings around OAuth servers.\n. Good lord, Hao has written doc comments :D\n. :shipit: \n. This is confusing. How are you using Azure AD? As an external login provider in the same way we do social like Facebook and Google, or using it via the Work & School template? If it's the latter then that's a function of AD, and doesn't concern or use identity at all.\n. You're doing this before the cookie has been authenticated, and a user has been created. Have RefreshOnlineAsync (which isn't async grin - it should be) take the principal from the CookieValidatePrincipalContext (Principal property) as a parameter, then you can call GetUserId.\n. @divega \n. And recovery codes.\n. This isn't a question for Identity. Identity is the kind of system you want to write. Authorization is handled not by identity, but by MVC and by the Authorization middleware you find in the security repo. The authorization attribute in MVC looks at the current user. It's up to you to put that user on the context. Samples of that sort of thing can be found in the various authorization middlewares in the Security repo.\n. ID would be a unique key probably. Nothing you query on. Then there's the property bag too.\nWe would need token type though, unless you make the token type part of the property bag, because, for example, we'd want to say \"Give me all the TOTP reset tokens for user X\"\n. Well true, but you'd get the unique token IDs from the property bag by looking up the user property, then backtrack up.\n. Well normalised is spelt incorrectly, but sure :D\n. I don't understand what the issue or the question is here? Could you expand?\n. I don't see why they need to have a string ID. It's a key just used for linking, and changing it would mean a database migration for everyone. \nWhat database doesn't have integers? I don't see why having an int demands an ef migration.\n. Hey @divega is this an EF issue?\n. Yes. Because, as you can see, other folks might want to dispose things. It's fine to no-op it if you don't need to do anything.\n. Don't blame me for 2.0 :) I can't even remember adding this feature.\n. It was well over a year ago. I can't remember what I did last week. It does seem out to spit odd a new cookie. \n/edit - odd, not out\n. Why? We have a standard readme for all of asp.net's repos. Why change this readme to link to an SDK that doesn't have anything to do with ASP.NET identity?\n. Rejecting as this isn't the place for this link.\n. Why you say doesn't work, what do you actually mean?\n. Seems like a reasonable suggestion.\n. Copying S/O post, so everything is in one place.\nI have been working on an ASP.NET Core application for a couple months. Now near finishing the first beta I realized I hadn't enabled Two-Factor Authentication, and now I think I uncovered a bug in the implementation for Microsoft.AspNetCore.Identity. If we look at how a user is retrieved, it does this:\n```\n    /// \n    /// Returns the User ID claim value if present otherwise returns null.\n    /// \n    /// The  instance.\n    /// The User ID claim value, or null if the claim is not present.\n    /// The User ID claim is identified by .\n    public virtual string GetUserId(ClaimsPrincipal principal)\n    {\n        if (principal == null)\n        {\n            throw new ArgumentNullException(nameof(principal));\n        }\n        return principal.FindFirstValue(Options.ClaimsIdentity.UserIdClaimType);\n    }\n/// <summary>\n/// Returns the user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in\n/// the principal or null.\n/// </summary>\n/// <param name=\"principal\">The principal which contains the user id claim.</param>\n/// <returns>The user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in\n/// the principal or null</returns>\npublic virtual Task<TUser> GetUserAsync(ClaimsPrincipal principal)\n{\n    if (principal == null)\n    {\n        throw new ArgumentNullException(nameof(principal));\n    }\n    var id = GetUserId(principal);\n    return id == null ? Task.FromResult<TUser>(null) : FindByIdAsync(id);\n}\n\n```\nHowever, the TwoFactorSignInAsync method in the SignInManager never sets a Claims of type UserIdClaimType, but it sets 4 times the same Name claim, containing the User's Id.\nIs this a bug in the implementation of TwoFactorSignInAsync or some configuration is not correct in my configuration of Identity? Which is this:\n```\nCookieAuthenticationOptions cookieOptions = new CookieAuthenticationOptions\n{\n   CookieHttpOnly = true,\n   LoginPath = \"/User/Login\",\n   CookieSecure = CookieSecurePolicy.Always,\n   LogoutPath = \"/User/Logout\"\n };\nservices.AddIdentity(options =>\n {\n     options.Cookies.ApplicationCookie = cookieOptions;\n     options.Cookies.ExternalCookie = cookieOptions;\n     options.Cookies.TwoFactorRememberMeCookie = cookieOptions;\n     options.Cookies.TwoFactorUserIdCookie = cookieOptions;\n options.Password = new PasswordOptions\n {\n     RequiredLength = 8,\n     RequireLowercase = true,\n     RequireUppercase = true,\n     RequireNonAlphanumeric = true\n };\n\n options.SignIn.RequireConfirmedEmail = true;\n\n})\n .AddUserStore()\n .AddRoleStore()\n .AddDefaultTokenProviders();\n```\nEDIT:\nBy the way, this is easily solved by changing GetUserId to something like this:\n```\n    /// \n    /// Returns the User ID claim value if present otherwise returns null.\n    /// \n    /// The  instance.\n    /// The User ID claim value, or null if the claim is not present.\n    /// The User ID claim is identified by .\n    public virtual string GetUserId(ClaimsPrincipal principal)\n    {\n        if (principal == null)\n        {\n            throw new ArgumentNullException(nameof(principal));\n        }\n    string userIdClaim = principal.FindFirstValue(Options.ClaimsIdentity.UserIdClaimType);\n    if (string.IsNullOrEmpty(userIdClaim))\n    {\n        // THIS is the actual ClaimType that the TwoFactorSignInAsync puts on the User\n        return principal.FindFirstValue(Options.ClaimsIdentity.UserNameClaimType); \n    }\n\n    return userIdClaim;\n}\n\n```\n. Throw \n. @HaoK can you check this is fixed in 1.1?\n. Dupe #990\n. Sort of. The XML documentation is wrong, The function parameter is correct :)\n. This is resolved in 1.1\n. What are you trying to do setting both persistent and slidingexpiration? Those are mutually exclusive options.\n. Well it depends what you're trying to do, Using cookies with SPA is generally not a great idea, because of CSRF. If you limit yourself to sliding, then with each request the cookie expiry will extend (kind of, it's every few requests)\n. @divega \n. This is not an identity issue, it needs to be filed in https://github.com/aspnet/Security/issues\n. Copied into https://github.com/aspnet/Security/issues/1015\n. This is not an identity question, it should be in the Security repo. You should look at my workshop, you need to do this in a custom code based policy. If that's not clear log an issue in the security repo.\n. Dupe of https://github.com/aspnet/Identity/issues/859\n. It's an extensibility point. You don't have to use it. Brock wanted it for password history.\n. It does it automatically. It's not immediate, we check validity every 30 minutes by default.\n. Are you on RC2 or RTM? This sounds awfully like https://github.com/aspnet/Announcements/issues/201\n. The other approach is to set RequireConfirmedEmail to be true. Or they just request another password reset and the stamp will be regenerated and finally work.\nIt's weird, but it is secure :) As you can do it yourself and it's by design, I'm going to close this as wontfix.\n. This isn't a common enough scenario for us to pull it into the main code, but thank you for the offer.\n. Dupe of #991 \n:)\n. This looks like the right approach, but it's not common enough for us to pull in.\n. We need a more detailed repo I'm afraid. Any change you can strip everything down to demo this, and also include the middleware, then tag myself and @HaoK \n. Sure, throw. It's unexpected enough to be an exceptional event.\n. Yay. Is there an associated issue with this PR? We generally like a PR first so we can discuss it. https://github.com/aspnet/Home/blob/dev/CONTRIBUTING.md\n. Please\n. Link to #836 and #1341, and close in favour of the more recent ones.. What's your justification/scenarios here?. Part of #1040 . The Identity Server folk have suitable templates for this in their samples; https://github.com/IdentityServer/IdentityServer4.Samples. What are you hosting this under? IIS? Has the app gone idle and restarted? If so, did you set up the data protection registry keys as discussed in https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#create-a-data-protection-registry-hive. Did you try running the powershell script?. Not under IIS without a profile loaded. It does that for IIS Express, or IIS where the profile is loaded. Without the profile there is no user. So yes, it's required in some configurations.\nIf you have a directory which isn't under the web root, you could configure it to store there.. Is https://github.com/aspnet/Security/issues/930#issuecomment-261433813 applicable?. This will get fixed in 1.1.1. We've always said identity is aimed at simple scenarios. There are currently no plans to change this.. How is this different to signing in with google in the templates, which then registers users?. You could write your own password hasher, but this is a seriously bad idea, and we're not even going to show you how.. Closing as phones numbers aren't unique. We can revisit this as a feature.. As our own code null guards before calling that API, and there are much easier ways to discover if a username doesn't exist, for example by trying to register it, we don't see this as a concern.. Moved to https://github.com/aspnet/Templates/issues/793. Do you actually have  .NET Core SDK version 1.0.0-preview2-1-003180 installed? Which branch did you clone the repo from?\nThis looks like https://github.com/dotnet/cli/issues/5172. Dupe of https://github.com/aspnet/Options/issues/163. Closing due to age and no associated issue. As it said, it's old, and there was no associated issue with it, so I can't tell what it was trying to attemp.. Could you try using your native language, which I assume is Chinese from your location, and we'll find a native speaker here to figure out what you're asking?. Aside from reading this as uniquecharrrrrrrrrrrrrrrrrrrs, yea, fine by me. @fabich No, the new one understands both formats, and will even go as far as rehashing to the more secure hash algorithm upon login.. The normalized pieces are for fast lookup, you're confusing email and username, they're different. User Name is the identification field for logging in. Email is there for password resets, password confirmations in our templates.\nIf you want a display name then you'll need to add it to your model for identity.. We can't reproduce this. Could you put fiddler in the middle, and save a trace of the login for us, so we can examine the request and response?. Like you would anything else, shove a facade in your service which wraps the methods you want to call.\nThe only fun part is creating the auth cookies, but that can be done in code once you have the facade return a ClaimsPrincipal;\nc#\n    await HttpContext.Authentication.SignInAsync(\"Cookie\", userPrincipal,\n        new AuthenticationProperties\n        {\n            ExpiresUtc = DateTime.UtcNow.AddMinutes(20),\n            IsPersistent = false,\n            AllowRefresh = false\n        });\nSignout is much the same, except, well, you call SignOut, without needing to pass a principal. . Sure. @HaoK Oh dear. This needs changing, but it may break a bunch of folks. Why are you using SignInManger with Windows auth?\nThis does seem to be a bug in the Windows Identity classes, not Identity.. We've heard from the Windows folks they're looking at fixing it on their side, so we're closing this.. This is not an identity question. I would ask this in the MVC repo - https://github.com/aspnet/MVC. The reason we can't use the email in ConfirmEmail is because ... we don't have a confirmed email at that point :) So we have to use the userId. This is pretty much by design.\n. Dupe of https://github.com/aspnet/Identity/issues/704. Identity treats the primary key as a string, always. It's up to the IUserStore to convert that to whatever you use in your custom IdentityUser.. 1) There is no .NET Standard 4.6.x. I guess you mean Framework, and not standard, and you mean MVC5? If so, no. Core Identity is linked to ASP.NET Core, which is turn is linked to .NET Core. We won't be bringing it down to MVC5, or earlier.\n2) The EF abstraction should enable you to use any database EF supports. Someone wrote a provider  for Identity Core (Which I think you mean when you say 3.x ). We don't provide one out of the box. There's no migration, because, well, we don't provide postgresql support.\n3) You can write your own provider.\n4) Identity does all that, so the source code would be identity :)\n. It's certainly not deprecated, but it's unlikely it'll see more major releases of identity on it, just bug fixes.. This is probably because, in templates, the validator for email addresses and the validator for usernames are different, but the templates use email as both the username, and the email address.\nYou could fix this by changing the user name validator to include the characters you want.. This UserNameClaimType is the claim we create in your sign in cookie, and is what you get from Identity.Name.\nNameIdentifer is what the auth pieces use to indicate what the auth provider says their username is. So, if you signed in with google, this would be your google user name. \nSo they're entirely separate, changing the UserNameClaimType doesn't affect NameIdentitfier.\nIt's by design.. Our assumption is all roles have an id. This won't be fixed.. @javiercn Apparently you are doing this now. Can you tag what preview it will appear in, if it appears at all?. Identity Model isn't part of identity. This should be filed over at https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet. The UserManager calls save changes inside its operation, and you're accessing the store directly. You can't mix both, so change your code to use UserManager APIs and this should go away, or do your pieces once you're done with the manager calls.. @HaoK any thoughts?. Given you say this goes away when you restart we're thinking you actually do have a concurrency issue - do other parts of your web site also adjust the user?. Linked to https://github.com/aspnet/Identity/pull/1161. Merged. Thanks!. @pranavkm It's rumoured you just created branches at some point, but no tags. Can you help?. This would be a question better asked of Auth0 if this is in their readme. GetOwinContext isn't even a function in asp.net core, this is from older versions of asp.net. This isn't a identity question really, you could do it via authorization policies thought - please see https://github.com/blowdart/AspNetAuthorizationWorkshop to get started.. Could you explain what you're trying to do? Are you trying to let a user login successfully, but then, based on a condition, change their identity?. This is because EF doesn't lazy load. The easiest way to fix this is to use RoleManager.GetClaims(role) before you access identityRole.Claims. You could just call your external API when you get asked to validate the details.. Do you really need identity? (Roles, claims etc.) or do you just want a login process? If it's the later then using cookie authentication on its own might work well for you. . Dupe of https://github.com/aspnet/Identity/issues/1243. @javiercn I believe this is you, the user's roles aren't flowing as expected, and as they used to before the service appeared.. OK we've talked about this, and @HaoK has promised that he can make the tables optional, so they won't appear unless you ask for them in code in your constructors. Which hopefully alleviates @brockallen's concern.\nNaming on the other hand is a whole other discussion :D . It's not clear what you're trying to do here.\nAre these separate applications? Are they on separate URLs? . And both are identity core? . So separate applications are separate by default, they don't share login cookies (although you can kinda force the database). So logging out in 1.1 identity is not going to affect 2.0.. It shouldn't, unless you have a fixed app identifier.\nDo you have a simple repo anywhere @HaoK can look at?. Strange. Ok, @HaoK can you take a look at this? (Please note it's a public holiday today in the US, so it'll be a couple of days). Do you have data protection configured to share a keyring? https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview. @javiercn . Exceptions are, well, exceptional. Like database is on fire. Duplicate usernames, or validation failures are typical errors, they're not exceptional, so we don't use exceptions.. RC1, definitely can't be pushed to 2.2 as it's checking 2.1 functions :p. What order is your middleware in? i.e. is static before or after auth?. No, .UseIdentity should be first. Admittedly static files doesn't support auth in any way, but the cookie should still refresh imo. @HaoK any ideas?. It sounds like it yes, if you're not resolving the DB, its going to barf :). Unless there's a RFC based standard for this it's not something we'd consider implementing, adding a custom authentication scheme (leaving aside cookies) is something we'd avoid.. You could have your password-less flow create a JWT token, then use the standard JWT middleware for it?. @HaoK . As we're truncating the guids now, we need to check the range for dupes .... This is deliberate. Say someone left themselves logged in and you got hold of their browser. We don't want to give any information away - so we don't tell you if you got the current password wrong, or if there's a mismatch. \nWe could revisit this in 2.1.. Upon discussion we feel this is giving too much information in an error message, and a failure is failure. Considering the check for new password 1 and new password 2 is outside of this error you could instead implement yourself.. What else are you building? You're going, at a minimum, also compile in https://github.com/aspnet/Common/tree/rel/1.1.0/src/Microsoft.Extensions.TaskCache.Sources. That's an implementation detail, Claims are the user facing thing, TRoleClaim is how you persist it to the store. Everything maps to claims because it's standard, and it's what we check.. As there's no Identity here, I'm moving this to security.. This is not the correct repo, not is it a source question. Honestly you'd be better off asking on Stack Overflow for general use questions like this.. Dupe of https://github.com/aspnet/Identity/issues/215. Which version are you using?\nCan we see your AddIdentity pieces and related calls from startup?. @HaoK can you take a look?. OK closing because you've got it working :). This was a deliberate design choice, to avoid the weird intermediate state of verifying a token, but not using it for an action. Your work around is correct, but its unlikely the flow/api will change, unless we get more people asking for this. . @Rick-Anderson Could you take a look at updating the docs from my cookie sharing sample if this works for @fujiy ?. This is more of an entity framework question, they would need to support it. @divega any idea on a timescale here?. This is by design in EF. You should ask in the EF repo about this. https://github.com/aspnet/EntityFrameworkCore. We'll look at this for 2.1. This is how POCOs/EF works unfortunately. Because LastLoginDate is a property of the user the entire user gets saved. We can't change it.. This could be a bug in your preview version. \n\n. Oh, WebAPI. That wasn't clear, and was hidden a little in the screen shot.\nYea, that's never been there in Core, in any shape or form. \nIt will come in v2.1, when we have a token service in box. It's not a bug, it was a feature decision (admittedly that's not much help to you now - you could investigate Identity Server as a way to support token issuance. . This repo is for ASP.NET Identity for ASP.NET Core, not for older versions I'm afraid. It looks like your linking is failing.. Linked to https://github.com/aspnet/Security/issues/1347\nCookie Auth is in the security repo, so closing this.. This is here because the PK can be anything (which people wanted a lot). So default for string, for example, is null, and that's not good.\nIt's a virtual method, so if it's blocking you, override it and implement your own.. A more specific exception sounds look. We'll look at this in 2.1. Yea, I think we have a protect/unprotect (not encrypt/decrypt, that's a loaded term). It needs to be on a per object basis, and the stores call protect before writing, and unprotect after reading, then it's in plain text in memory (the regulations are aimed at protection at rest). We'd also need the protect/unprotect for individual items we lookup/search on. \nI don't think we can limit it to just our base class, folks add properties that may need protection. Also it needs to be usable outside of the stores, for secondary objects (image IP address logging for example). \nTo be flexible and cope with future requirements I think we need to do it per object, taking a purpose or other indicator so people can adjust what's used based on the information (e.g. credit cards would need more protection than, say, a username). Or a copy of the Poco, so we don't mutate the clear text one. managers doing it are fine.. Clone doesn't work? Bah. Well then we'd unprotect on the way back out. Which is expensive :(. Thing is, if we change it, well, if the user tries to use the instance after saving, it's going to be full of unintelligible crap.. Rc1. Adding the attribute does nothing unless something is wired up right? Then being over cautious won't be a bad thing.. This isn't a Identity Core issue, this looks like previous, non-Core versions of identity and MVC. You could log a bug on codeplex but to be honest we're not doing any active work there. Stackoverflow might be a good option.. This issue was moved to dotnet/cli#7502. It's where we store \"tpkens\". We don't user it by default, unless you are using authenticator apps. You could use it to add things like refresh tokens for external logins, but we don't do that by default, you have to use APIs to store them.. We've never worried about this, because, well, we assuming a user being registered or not is public information (i.e. you can test it via register). So what you could do is in each tenant is create a fake user in your database when onboarding a tenant and then then check against that when the user doesn't exist. We really aren't designing for private registration scenarios.. Lumping into https://github.com/aspnet/Identity/issues/1342. Dupe of https://github.com/aspnet/Identity/issues/1388\n. Do you have multiple managers or something? We don't really support multiple instances of identity within a single app. . Closing due to lack of response.. 1. This depends on the version of the .net framework. If it's not core, it's probably on codeplex somewhere.\n2. Don't look at branches, look at tags, which map to releases, which you can then map into your csproj package versions.\n3. None. The codeplex stuff is just on codeplex.\nBranches don't matter. We branch for feature work, it's just how git functions. Dev is latest, whatever we're currently working on. Everything else is tags, that's how you get code for individual versions.. This issue was moved to aspnet/Security#1384. @brentschmaltz do you still own WindowsIdentity? This seems to be a problem with WindowsIdentity.. @brentschmaltz Who should be tagged to do the work?. Consider yourself tagged then :). Closing as external. So under what circumstances did your user end up without an ID? This shouldn't happen if you're going through identity, but if you're manipulating the database all on your own, or creating a user directly then you're on your own.  Claim values in general can be null, it's perfectly valid, so we aren't even going to change that.. This is just an identity assumption, you must have an id for a user. This isn't going to change.. So we factored AddIdentityCore() to remove the calls to everything that's optional. If we call default anything in there we're moving away from what it was meant to be. So, the layering is what it is and won't be changed. There's always AddDefaultIdentity(). Can we see your call stack please? Is this a custom store?. Have you trying hooking the OnRedirectToLogin event? You can then modify the context.RedirectUri inside there.. Closing due to lack of response.. @Eilon We need to consider this for a patch release.. @Rick-Anderson are the docs correct? The problem here sees to be there's URL encoding on the query string, you can see the &amp in there and that's screwing it all up.. Sure. What error is thrown? Are you saying a username field gets mapped to a name field in OpenID? What OpenID provider are you using? Do you have code you can show us for your user?. OK then that's not identity, and the security repo issue is where it should be. Closing.. Is it a good breaking change? :). This feels more like fixing a bug than a breaking change to me, but @Eilon should weigh in.. @javiercn . It's not just the encryption, it's always the format. I'd look at moving to Identity Server as the main auth point, and then federate all your applications to that. So for WebForms go with WS-Fed support, then for Core use OIDC.. Well there's a ticketformat extension point, but oh lord, it'll be ugly, you'd have to yank a lot of the old stuff up.. You'd dragging core down to the level of web forms security, and I'll be honest I'm not even sure it'd work. Add to that none of the code that old is actually on reference source, so I can't point you to it. You'd have to fire up a decompiler and go hunting yourself. At which point licensing issues kick in, and I can't advise anything.. If they didn't use identity? No. The recommendation would be the same. If you pulled them up to identity 2.0 then you could use the forward compat pieces with a bit of work to share the keys.. None of this is simple if I'm honest. But if you're wanting to use Identity Server it would be the way to go, that way every app is going to use the same auth point.. Well no, I think you'd do both. You use WS-Fed to bind the old apps to Identity Server as their login mechanism. It'd probably take less time, but it'd need WIF (at a minimum), better would be moving to the version inside .NET, which takes, I think, .NET 4.0.. Blocked awaiting Virtual Scheme review. Pretty much :). How is the challenge triggering? Is it just via [Authorize]? Can you show us all your config?. @brockallen / @leastprivilege \n. As this is related to IdentityServer closing.. How are you authenticating to the webapi?. And how are you getting the AAD token? What are you doing with it after? How are you sending it with each request to the api endpoint?. This issue was moved to aspnet/Security#1427. The 2fa in this case should really be at the JWT issuance point, that's where login takes place, that's what needs protected.. You can't put authorize on the login endpoint, that's kind of defeating the purpose - it needs to allow anonymous access so you can actually login. You don't really say what the problem is though.. User.IsAuthenticated will work even if the current user identity doesn't come from ASP.NET identity (for example a bearer token, or Integrated authentication). SignInManager is Identity only.. This issue was moved to aspnet/Security#1426. The gitignore files were created long before VS Code was available. @HaoK . Implement your own IUserTwoFactorTokenProvider, add it options.ProviderMap.Add with a name and set options.EmailConfirmationTokenProvider to the name.\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.Extensions.Identity.Core/IUserTwoFactorTokenProvider.cs. That's expected. Nothing can get populated in the user field until the cookie gets read, and that takes a new request. HttpContext is populated at the start of the request, so there's no user at the start.. @HaoK . This is really up to your code. We give you a code which must match. How you render the tag in your email is up to you. UrlEncode is wrong for example, because you're passing it as a query string, and UrlEncode is for path parts.. If we end up writing a base that implements something, what would you choose to implement? Everyone would want something different. You're not meant to hit the not implemented exception, or use our classes to derive from and then attempt to pick and choose, instead you start from your own simplest implementation then layers features on as you need them.. Normalization is there for index comparisons/lookups/uniqueness. When it goes into a claim we use the real value, because fidelity is important. What ClaimsIdentity does isn't something under our control.. Assigning to @ajcvickers because EF :). It should :) @mkArtak did this work for you?. This is a limitation of the .NET framework. Instead you'd have to implement your own IPasswordValidator and inject it into DI to override the default one.. Yea, this isn't supported out of the box, because we view it as a bad idea security wise.\nIn your code you could call SignInManager.SigninAsync() if you decide you don't want to be secure.. No, because either someone is authorized, or not, not a half way in between.. It should be possible, an \"upgrade\", you'd override the forbidden page to prompt for extra auth, and if it works, add a new claim, but it's not something we'd do in the templates.. What sql script? There's no sql script in ASP.NET Core identity. Do you perhaps mean the one in the .NET framework? Or is this a migration script?. Because UserManager is scoped to requests. You cannot use scoped things in Singletons.. This is not an identity issue or a .NET Core issue.  The articles you're reading are for Data Protection in ASP.NET Core, which does try autodetection. As you're not using ASP.NET Core you don't get this feature and what you see in debug is correct, it uses a machine key from web.config. Azure Web Apps set this to a consistent value so you don't have to, so it'll just work.. Can we see your complete startup.Configure? Where is your user manager coming from? Is this called on every request? UserManager et al are request scoped. \nAre you trying to seed data here?. Can we see your startup.cs? Did you customise anything? Is BindViewModel doing anything with the userManagerStore?. Dupe of #1388 . We don't design for this flow, because what you'd need is the ability to create a user with no username in order to get the auto increment working. So no, we don't believe this is possible, we'd approach it as a separate table, and link through.. This is probably best asked on StackOverflow, this is not something we have support for natively, and we don't have best practice for this.. We have this in Core, if we rev the password hashers, we have a requires upgrade and in Identity Core it automatically will update the hash.\nYou can replace the hashers entirely yourself, and implement this, but we're not about to make this generic, because now you're going to have databases created in one project not readable by another.. Sure, send a PR. Closing due to lack of response.. Closing due to lack of response.. This is an interesting design discussion. Constants are generally things that will never change, like the speed of light. We're kind of inconsistent here, and lots of things are constants that shouldn't be, so if anything we ought to move to static readonly unfortunately. So I'm afraid this is not something we're going to do.. What authentication is in use, is it actually ASP.NET identity, or is it something else?. Do you have a repro? What template was your app generated from? What databases are being used? Can you upload a sample to github?. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. Moving as this isn't an identity core issue.. This issue was moved to aspnet/AspNetIdentity#2. Identity already adds cookie auth. Why are you trying to do here?. That's \"odd\" but possible. You would cookie a second time, just use a unique scheme name and not the default as you are doing; you'd also have to configure it so it's not automatic in any way, and then specify the scheme in the authorize attributes when you want to use it.. As we may, in future, change the algorithms used the source is the prime, err, source for this. If you want the docs updated then please file an issue in the docs repo - https://github.com/aspnet/Docs/issues. It's whatever google, or an external provider sends us as their ID for a user. It might be a login, an email, or something entirely unique per user per applications. For Oauth/OIDC it's the subject claim.\nIn their docs google says\n\nAn identifier for the user, unique among all Google accounts and never reused. A Google account can have multiple emails at different points in time, but the sub value is never changed. Use sub within your application as the unique-identifier key for the user.\n. You would simply call the lockout apis you see in the login code. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L313. Thank you :) @HaoK do you remember why?. @pranavkm As you're updating templates right now, could you validate this, and move the issue to templates and fix if it's a problem?. Is there an issue associated with this?. This is intended. You can hook into the cookie middleware ValidatePrinciple event - https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x#reacting-to-back-end-changes. Identity isn't aimed as SAAS - you could prefix the usernames in the identity database and then hide/add it from the users using your own convention.. We don't support this, Identity was not designed for multi-tenancy.. @ajcvickers This looks like an EF question really, so here you go :). True, Identity was never designed for, nor meant for multi-tenancy. We've had people do it, via various unsupported means, and you can override that OnModelBuilding to try a composite key, but, again, you're heading down the unsupported route. I tagged Arthur in case it had details on how you'd change the model to do what you want.. This issue was moved to aspnet/Security#1566. This issue was moved to aspnet/Security#1573. You can plug-in your own token provider for \"Email\" or any other purpose, and implement shorter lifetimes, or indeed increase the token length.\n\nHowever I'm a bit confused, we have a specific email token provider which is NOT 6 digits. it is horribly long and would be really hard to brute force. This sounds like you're using the TOTP / Phone one for email? Could we see some configuration and use code?. @HaoK is email really not giving the right token here?\n. How long is the username here?\n. This issue was moved to aspnet/Security#1572. Afraid so, this was designed before DI was put into ASP.NET, so it's \"quirky\". Unfortunately there's nothing you can, you can inherit, but not decorate, and it'd be a huge breaking change for us to move it now.. This issue was moved to aspnet/Security#1574. As we've said, ASP.NET identity is not aimed at multi-tenancy. It's identity, because that's what it is, it provides a database schema and support for logging in with either a local or federated identity. There's nothing to stop you adding your own groups support, it is, after all, just a bunch of EF models.. This issue was moved to aspnet/Docs#5028. @HaoK could you answer the outstanding questions, and then close once @LindaLawton is happy with your answers?. Fixed, so closing. You need to config the proxy server to pass on X-Forwarded-For and then wire that in using the .UseForwardedHeaders middleware.. You reopened this.\nSo what isn't working? It certainly does work with IIS with ARR, that's how Azure Web Apps work. For nginx you need to configure nginx to forward the headers, for example https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/. Can you post a small repro of the changes you made?. @ajcvickers This would fall into your documentation updates.. 302 is the redirect, so that's an expected status code. Have you tried using fiddler and seeing if an auth cookie is created? . We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. Rejecting, breaking change would need to be in new major version.. Needs CC and BCC list. Also PlainText/HTML property, and maybe a headers property. \nBut yea, needs to be somewhere other than Identity, which would then take a dependency. . I'm moving this out to 2.2. Talk to @mkArtakMSFT - I feel this has been left too late now. This issue was moved to aspnet/Security#1592. This isn't just a matter of setting the cookie. The cookie is encrypted with data protection so in addition to replicating your user database you must also replicate your encryption keys, and in order to do that you're going to need to write a SQL store for data protection, something we have yet to offer. \nYou'll also need to configure data protection with a fixed application name for all your sites. \nFinally, to move the cookie domain upwards you can set the option like the other cookie settings, but using Cookie.Domain as the property.\nC#\nservices.ConfigureApplicationCookie(options =>\n{\n    options.Cookie.Name = \"YourAppCookieName\";\n    options.Cookie.Domain = \"contoso.com\";\n});. There won't be time for in person with @DamianEdwards is off having fun in London, so let's use @danroth27 and I as his proxy.. Too risky I think. preview2.. I wouldn't view that as an improvement to data protection at all I'm afraid. We deliberately designed it for maximum safety, adding a static IV or making it deterministic would move away from that design philosophy. . I'm working on some samples, but you'll see when I get them done, that the real recommendation will be \"Use encryption at rest on your data\". MS SQL and SQL Azure provide encryption at REST with no changes needed to your code. For Linux the various databases there end up saying use full disk encryption on the volumes where databases reside, for which there are multiple options.\nThe protectors here are really a fallback of last resort.\nAnd there cannot be a default implementation, because it will fall to you to manage keys, both in terms of rotation, size, even algorithms, based on your risk evaluation, which should be part of every GDPR review.. @Eilon Can you just delete the wiki?. There's nothing in it but a single page, so yes, kill it please :). That's not something we'd consider supporting I'm afraid. LDAP isn't an HTTP based protocol, so it wouldn't be an ASP.NET concern at all. I'm unaware of any .net core based library for this.. That issue is about expiring cookies. Please give us more information to go on, and post your app configuration . And this is a browser based request? \nIn any case when the cookie expires I would expect it to redirect to login - at that point the user is now unauthenticated, so they are treated as anonymous.\nWhats does auth configuration look like? i.e. everything before you are calling .ConfigureApplicationCookie?. Sorry, you do what with JS? This isn't an HTTP Post form submit? It's an ajax request?. Then it's doing what it's supposed to. AJAX doesn't follow redirects, so you're going to get a status code back, and it's a 401 because the cookie no longer exists, therefore the user is unauthenticated, therefore you get a 401.. That's somewhat strange, any chance you could post your startup.cs - it should use the provider you wired up, or did you bring the default migration from another project?. Setting it up again would be the right way to do in my opinion, after disabling the keys should be treated as tainted imo, and you're forced to re-enable and rescan. So I'm OK with the flow as it is.. @grahamehorner Wait, what? What is your scenario for multiple auth apps? . @HaoK I end up using https://gauth.apps.gbraad.nl/ when testing :). Reset should generate a new key, configure should keep the old one and allow you to rescan. . I'd honestly lean towards \"disable\" which turns it off, and blanks the key and \"set up an authenticatior app\" which keeps the key and redisplays the existing information if there is a key. Hence the tidy up :). And setup allows you to scan the image in a new phone, if, for example, you're replacing a phone.\nBut yes. \nEnable if it's not enabled, which generates a new key and then ends up in Setup, and then when you confirm it's working actually enables the feature (this would also be where that cancel feature I wanted comes into play - in the best possible flow that authenticator key should not be saved and made active until confirmation)\nSetup a new app if a key already exists should display the information, allow for rescanning and confirmation.\nReset burns the key, disables 2fa, and enables it again once they've confirmed a working TOTP code.\nDisable would disable 2fa and burn the key.. Couldn't we just have clearer flags in the database? When did recovery codes enter into this?!\n. OK that makes sense, that's how it is now :)\nKnock it up and then schedule 30 minutes to show me.\n(And I'm sure you could make a way to set the code back to null). Add it to identity then :p. It'd just be nice to tidy up if a user disables 2fa.. Ok :). @grahamehorner That's really, really specialized. At that point I'd honestly be thinking you need to move away from Identity. It's really aimed at the \"Get me started and going and safe\" scenarios, which cover the basic uses for 95% of our customers. We're always going to prioritize features for the majority here. You can rescan and use multiple devices using the same keys, but we're not going to add multiple seed support.. This issue was moved to aspnet/HttpSysServer#426. We have no plans to add support for multiple devices which have different tokens.. ExpireTimeSpan and SlidingExpiration are mutually exclusive.\nMaking it permanent is a function of the call to SignIn\nc#\nawait _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\nThe third parameter, RememberMe is what you want. I believe you don't need to set options.Cookie.Expiration, just the ExpireTimeSpan and set Sliding. Is that right @HaoK ?. Just to be clear for others who end up here the expiry of a ticket is a property of the ticket itself, not the cookie. So even if the cookie lives on the expiry date is baked into the data it contains, so after it expires, it's dead regardless.. Correct :). This issue was moved to aspnet/Security#1642. How about instead have a click here to download your data button instead? That way a deep link would work.. Why? During customization you could add this anyway. Why give people an extra screen, they're deleted, they \"don't matter\". You could add a validator, or an event. A validator would probably be better because it'll allow you to sign out users when you change their status.\nStart with https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?tabs=aspnetcore2x#reacting-to-back-end-changes - and then if you are using ASP.NET Core Identity let us know and we'll help you wire it up.. Why can't you use remember me when you're signing in, which as you say, works?. You can configure an absolute expiry via the options, or use remember me to make it persistent. Those are the only options I'm afraid.. You don't. This is a horrible idea we don't support.. At the minute you can't, we have a long term goal to separate everything. The flow right now is we drop a cookie that says \"Hey you've authenticated, but you still need to give me an MFA code\". This necessitates cookies, you'd have to implement your own custom flow for this which has a persistence mechanism for this saving of state. If your clients want to disallow cookies, well then you're going to have to roll your own. Even GPDR allows cookies, this isn't a request we've heard of at all before.. TOTP codes are based on time, not on usage. It'll roll over on its own without invalidating. You could write your own provider that implements one shot tokens by implementing IUserTwoFactorTokenProvider.cs. This is not ASP.NET, this is System.Identity. You should ask your question at https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet. Well the error is quite clear. You're attempting to add a role class, but you're not inheriting from IdentityRole, you're inheriting from IdentityUser.. That would be a question for the JWT parser owners ...https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet (link corrected!). hah, oops, wrong repo link. My bad :)\nhttps://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet\nI closed it because we, that is, asp.net don't implement this, the AD team does, and when we make decisions based on mappings there's always someone we break, so we leave the defaults alone.. We've been through this before with templates, and it also depends on the JWT token actually containing that claim, but sure, have at it https://github.com/aspnet/templating. @DamianEdwards any comments here?. @HaoK  did this get done?. It's this way because at it's core (pun intended) ASP.NET Core is async. \"That's how it should be done today. Marc\" :)\nSo we have no plans to write sync wrappers.. We have migration in our hashers, where we upgrade from an old hash and rehash the password with the new algorithm. We don't support chaining of hashes like you wish to do.. Not really no. We ought to add a disclaimer to these links.. We more information please, your startup, your configuration and your classes for the user and role.. When you say Identity 2.2.1 do you meant Identity Core, or the non-core versions?. Linked to https://github.com/aspnet/Identity/issues/1721. Manually added. It would be breaking and honestly we didn't expect async on this, the password hash comparison is a blocking call, because nothing else should take place until the authorization is done, it doesn't need to be async in anyway.. This issue was moved to aspnet/Security#1710. @ajcvickers Navigation properties again :) Docs?. This is a UI issue, tagging against identity-ui. @javiercn when the UI allows you to change your email we need to update the username as well, because by default they're one and the same.. Where do you want to get the information? Inside a controller? Inside something else?. Then injecting the accessor is the right wya to go.. @HaoK is this what you'd expect?. Considering that we've had a lot of comments on how hard it is already to change primary keys Hao is right, we can't make it even worse, not even by a little.. What is happening here is cookies are aware of the protocol they are written on. If a cookie is written during an HTTPS request then by default it will limit itself to HTTPS. This is deliberate, once you go HTTPS you really should switch back.\nHowever in dev environments that can be common. You can fix it by clearing the cookies for localhost.. Have you captured a fiddler trace to see if the cookies are actually being set in the response?. What do you think encrypting the codes would give you here? You still need a valid password, they're for use when you don't have your 2fa app.. No it wouldn't allow any access with just the codes. Those recovery codes still need a correct username and password, they're for occasions when you don't have access to your 2fa generator.. Closing as the only answers that work are given. Please reopen if you need further help.. Looking at my recovery codes, Dropbox, Facebook, Instagram, Gmail, Slack and Wordpress are all 8 characters, so I'd dispute the \"larger strings\" assertions, excluding Github which is 10. So yea, I think this would be a really low priority.. Done. I'm with @PinpointTownes on this, you can do this with policies as of now, you're just replacing a policy name with another type of ID. Policies mean you don't hard code role names.\nRoles based authorization via attributes is there for backwards compatibility.. No you don't. You can quite happily get the current roles from a database. \nYou're hung up on roles. You don't have to use roles at all, we'd rather you didn't, we'd rather you look at claims, something the user is, and then turn those into permissions within the policy handler, which is basically what you want for your hard coded guid, you can do that now if you want to write the code.. You don't have to hard code anything at all. What comparisons you do inside a policy could come from XML, SQL, MongoDB, JSON, whatever, you just need to provide the parsing code. In fact we have people building products on that flexibility, https://policyserver.io/ is one such product.. Closing as this isn\u2019t something we\u2019d want to persue . And closing because it's not something available from us.. Access denied is for someone whose permissions failed auth - so they are logged in, just they don't have access. So it doesn't need allow anonymous, it's point is that someone is logged in.. How many claims do you have? If you're seeing a cookie of that size your user claims must be huge Do you really need that many? Are you treating claims as permissions perhaps?\nThe server and even the browser itself will set limits on header sizes and lengths. As @Niels-V suggests you could move to using a session store; there's a sample in https://github.com/aspnet/Security/tree/dev/samples/CookieSessionSample. As you're unblocked I'm closing the issue. . @HaoK can we improve the error message for RC1?. OK, guessing here, but you're trying to update a user in asp.net identity?\nThis will only work when you retrieve an instance of the user from the user manager, update the fields on the user class you got back, then pass that to update. Without doing that there's no way to even lookup your user, this type of anonymous type simply will not work.. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. @javiercn who owns this bit?. This would be wider than just identity, so I'm going to move it to the templating repo.. This issue was moved to aspnet/templating#468. This is probably a question for Stack Overflow, we don't code in node every day, but others there might.. @HaoK . No you're right. The templates end up with username and email being the same during registration, but fail to keep them in sync. There's work scheduled for 2.2 to fix this ugly mess.\nDupe of https://github.com/aspnet/Identity/issues/1721. This should be allowed by default, otherwise you can't login. Can you create the corresponding bug please?. Never mind, I'm told I can move it :D. This issue was moved to aspnet/Scaffolding#769. @mkArtakMSFT it'd be good to get this fixed, it's an unexpected side effect, most people who want to add global authentication would still expect logins to work, otherwise what's the point?. You don't need ASP.NET Identity for this. You could just use the cookie auth pieces directly if all you want is authn, this is probably easier for the scenario you describe.. Oh I see, you're enhancing AD. So ... if that's the case, why not use AD for the roles? That's what it's there for. Generally IT departments end up getting really upset when an app rolls its own roles (no pun intended) because that moves away from the whole point of having a centrally managed user infrastructure.. Oh! @Rick-Anderson doc suggestion for you :). If you want your own local database, I'd stick with no identity and integrated auth, then use DI to inject your role provider into the policy handlers. You would avoid a bunch of overhead from identity you don't honestly need.. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. Here's what I tried to do to reproduce this. \n\nCreated a new ASP.NET Core 2.0 web application (so using Razor) with individual accounts in-app. '\nRan the app\nCreated the database via the apply migrations web page that pops up\nCreated a new user\nTurned on 2fa\nSaved recovery codes\nLogged out\nLogged in again\nRedeemed code\n\nNow ... is this a UI problem? In each line there are TWO recovery codes;\nFor example, here's what my app generated\ne1eb3889 a8a62fce\n7735bfe3 2643f20e\ne22c9ae7 1a042ddc\nb98f90f8 c8b6ab47\n99380395 47684d0d\nThe first recovery code is e1eb3889. Are you perhaps entering both codes from the first line?. Oh dear, that definitely will need fixing.. Not really, no. To be honest the database is just an object store for us, its somewhere data gets serialized. You could implement your own store and your own mappings, but this isn't something we feel is needed.. As UserManager needs a connection to the database, and that's scoped to per request you're not going to be able to do this, even if you did manage to put your utility class in DI. \nRemember DI can only inject into other classes in DI.\nIf all you want this that function why not consider an extension method? . That would seem the safest way. Whilst you can DI into views, it makes a lot of people who care about purity unhappy :). Oh dear, we'll take care of that, thank you.. . @javiercn ?. Did you try running the build.cmd file first, rather than using VS? . @ajcvickers This is your bailiwick . @Tratcher . I'm afraid you're right, this is an EF problem, and as there's an issue there already I'd suggest taking it there. We're not going to roll a new identifier class, when that's really a function of the database.. @javiercn . options.SecurityStampValidationInterval is what you need. \nIn ConfigureServices add \nc#\n            services.Configure<SecurityStampValidatorOptions>(options =>\n            {\n                options.ValidationInterval = new TimeSpan(0, 5, 0);\n            });\nEach validation does involve a database lookup, so you may want to tune the interval you choose based on load.. @javiercn Does this happen for you?. Ah so this is just limited to Identity? What about users not using SignalR and depending on the current behaviour? What sort of existing use do you want to kill just to support SignalR? Why can't SignalR do it another way? What does ASP.NET expose cancellation tokens for?. Well, you know we don't do breaking changes in minor dot releases\ncc @DamianEdwards . Swapping behaviour would be safer, letting people reenable it if they need it.. @javiercn . Because we got way more objections to create a role table that people didn't use than we did kudos for doing it just in case people wanted roles. So we did what the majority wanted.\n. They shouldn't be created any more, or at least that was the intent. @HaoK ?. Oh heck yes, if you're adding the roles tables we should have lit up the right claims factory by default.. Yes, this needs fixing in 2.2. Are you checking out the dev branch? dev is always what we're working on right now, and that's going to be targetted against 2.2, because that's what will be next.\nhttps://github.com/aspnet/Identity/tree/release/2.1 is the 2.1 released code, so if you want 2.1 I'd start there.. @HaoK can you help?. Membership is really rather old, and identity hasn't been decoupled from ASP.NET, You could implement your own store to talk to the old membership tables, but at lot of the things you need simply aren't going to be there in the mapping exercise.. @javiercn did we consider this? Enhancement to make it easier later on?. @DamianEdwards @javiercn @danroth27 . I didn't realise scaffolding did this :( Yes, this sounds like a good idea. @HaoK can you estimate how long this would take for you to add the setting and wire it through to the view?. What's your reason for avoiding identity server? It would be the best approach. I'd argue that's actually harder to read. Sometimes clarity wins over cleanliness.. @Rick-Anderson One for you?. This doesn't appear to be an identity issue, so moving.. This issue was moved to aspnet/Mvc#7932. https://github.com/aspnet/Identity/blob/dev/src/Core/IPasswordHasher.cs is the interface for hashers.\nThen shove it in DI after you've added Identity,\nservices.AddSingleton, YourPasswordHasher>();\n. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. You'd specify all the allowed characters in the option you mention. But given the large amount of Chinese characters that's probably not going to work for you. Instead try your own UserValidator, using https://github.com/aspnet/Identity/blob/dev/src/Core/UserValidator.cs as a staring point. I don't understand your question. What are you trying to achieve? . Ah thanks! One other option I'd look at is IdentityServer, so you'd use OIDC to get a token to authenticate against the API project through the authorization header. Which is nice and standard.. This issue was moved to aspnet/Docs#7326. Why? It's very much part of identity, it's not stand alone.. @Rick-Anderson Documentation required.\n@flatproject That is documented at https://docs.microsoft.com/en-us/aspnet/core/security/authorization/roles?view=aspnetcore-2.1. @ckams It's unclear what you're asking for here. Certainly there seems to be a bit of confusion between roles, claims and the role claim itself, which admittedly isn't helped by documentation. Why do you feel roles are many to many? Consider the usual Admin role. It's a 1 to many, 1 Admin role, with many members. Then you authorize on the role. We don't assign claims to a role, the role itself is a claim.. So you're right, there's no documentation. You can follow the docs issue at https://github.com/aspnet/Docs/issues/7469\nAs this is really a docs issue I'm going to close this one, and work on getting the missing docs done.. Not easily, because it'd be a breaking change and may affect how others are using it.\nIf you want fine grained you go to claims. Roles are a hold over from NT Domains/Groups, which were extended to be more useful by assigning claims to them as well as the role name, so folks could get claims in an easier to manage manner.. Keep in mind we write frameworks. If what we have meets 95% of our users needs, with enough flexibility for others to go further than that's great for us. And you do have the flexibility with claims and authorization policies. Identity is meant to be simple, not all things to all people.. We'd consider this giving away a little too much information to a potential attacker I'm afraid.. You'd be confirming the token was once valid, and that it's in the correct format. Think about it like returning an error from a login screen. You don't say \"We don't know that login ID\" or \"That password expired ages ago, you have a new one\", we just return \"Login is invalid\". No. You have the IsEmailConfirmedAsync method to check with. If you're calling ConfirmEmailAsync we're going to do what the method indicates, send a confirmation notice.. Because some people use those logs to monitor for attacks. Hence it's a warning that something you might want to look at is happening. It won't change.. You could use Identity Server as the login point, and then connect your web sites to that via OIDC. @HaoK . Yea that seems the right way to go. The default implementations assume that, for simplicity, usernames and emails are one and the same. If a user changes email their username needs updating as well. If this doesn't match your use case then you need to start adjusting the code in templates.. Oh it's our fault, not yours, it's badly explained. We have a work item about making it configurable, but it's in the backlog for now. As you're unblocked I'm going to close the issue, feel free to reopen if you have more questions.. You can't. It's part of ASP.NET Core. MVC5 is not ASP.NET Core. So you move your app to ASP.NET, or you use the older versions of ASP.NET identity. General usage questions are better shared in StackOverflow as they're not bugs or issue.. This issue was moved to aspnet/Scaffolding#839. You are, as you've discovered, conflating the display name with the scheme. So your workaround isn't a work around, it's the right way to do it, it's what it done in templates. There's no bug here, it's by design.. @hoak We should fix them all to be consistent. . From @mkArtakMSFT on July 30, 2018 16:30\nThanks for contacting us, @Whathecode.\n@javiercn, can you please review the current documentation and see what kind of changes are required there? Thanks!. From @javiercn on July 30, 2018 16:33\n@haok as he\u2019s the owner. From @HaoK on July 30, 2018 16:39\n@blowdart can you move this issue over to the identity repo?. There is a method for this\nc#\npublic abstract Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken = default(CancellationToken));\nbut if you have linked tables outside of identity you'd have to manually clean those first.. You must delete. You cannot duplicate usernames they are designed to be unique.. Where is the exception being thrown? During request processing? On login? In that stack trace I don't see anything from asp.net identity at all, only identity server, so this might be a question for them.. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. How are you authenticating your ajax call? Cookies? JWT?. When you get the principal back is it actually the identity you expect? Did the cookie expire in any way?. Without a repo there's nothing we can do here unfortunately. There is a default context.Principal which is empty and returns false for IsAuthenticated() which would explain why you get a non-null Principal with no claims you expect.. See #1910. We support roles, but prefer claims, thus it's not in the scaffolded code. There were also a bunch of user issues where people asked why there were roles tables when we never used them, so now you have to manually add the roles pieces.. We're closing this issue as the behaviour discussed seems to be by design.. This issue was moved to aspnet/Docs#8129. @HaoK . UserManager does not create contexts which are shared between threads. UserManager is not transient by default either. You can override this yourself as transient, and take the unnecessary overhead :)\n(And what Brock said is true. Although I wouldn't phrase it like that.). So yes, templates to simplify make email and username the same, and if you let folks edit you have to keep it in sync. Your avatar is quite appropriate here. So, dupe of #1541 and partially #801 \nWhich will be addressed by #1721 eventually.\nAs it's a dupe, and a tracking issue is there for work to fix it, I'm going to close this one, but feel free to reopen if you don't believe the other issue covers the same thing.. ASP.NET's localization is very different, and doesn't config files, or resx files. \nSee https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization?view=aspnetcore-2.1\nNote that this is for UIs, it doesn't error messages that identity uses. We'll examine localization in 3.0.0. This issue was moved to aspnet/Security#1845. @HaoK . We're closing this issue as the behaviour discussed seems to be by design.. Identity doesn't provide authorization, Identity is basically a user database. How you make use of the identities it populates is a separate concern.\n(But yes, it would be possible, depending on how you extend the identity model and then plug it into resource authorization). You can't mix sliding expiration and absolute expiration at the same time. It's either or, so pick one and see if it still reproduces.. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. When you scaffold? No, not right now. There's been some discussion of giving two scaffold options, but it's dependent on offsetting other work, but this is really a scaffolding question, so moving there.. This issue was moved to aspnet/Scaffolding#864. Tried this, cannot reproduce. Closing.. This issue was moved to aspnet/Scaffolding#885. You can't have both, not the way you want. You have to have a way to trigger the login that you want. As you are wanting AAD and identity it becomes weird, AAD expects to be the sole source of user information, you don't double up or duplicate. This isn't a scenario we support with identity.. @HaoK . Where do you want it to go? After PasswordSigninAsync you need the 2fa verification page as well. \nYou'd check via\nvar result = await _signInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: true);\n                if (result.Succeeded)\n                {\n                    _logger.LogInformation(\"User logged in.\");\n                    return LocalRedirect(Url.GetLocalUrl(returnUrl));\n                }\n                if (result.RequiresTwoFactor)\n                {\n                    return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl, RememberMe = Input.RememberMe });\n                }\nAnd then in your 2fa page\n```\n            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load two-factor authentication user.\");\n            }\n        var authenticatorCode = Input.TwoFactorCode.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\n\n        var result = await _signInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, rememberMe, Input.RememberMachine);\n\n        if (result.Succeeded)\n        {\n            _logger.LogInformation(\"User with ID '{UserId}' logged in with 2fa.\", user.Id);\n            return LocalRedirect(Url.GetLocalUrl(returnUrl));\n        }\n        else if (result.IsLockedOut)\n        {\n            _logger.LogWarning(\"User with ID '{UserId}' account locked out.\", user.Id);\n            return RedirectToPage(\"./Lockout\");\n        }\n        else\n        {\n            _logger.LogWarning(\"Invalid authenticator code entered for user with ID '{UserId}'.\", user.Id);\n            ModelState.AddModelError(string.Empty, \"Invalid authenticator code.\");\n            return Page();\n        }\n\n```. You generally don't return views after POSTs, Post/Redirect/Get (PRG) pattern is almost always used, because it stops duplication form submissions, hence our code above. If you want to vary from common practice you are, I'm afraid, on your own.\nAs for 2fa in the same page, well, what if the user doesn't have 2fa enabled, how do you know until you get a POST with the username?. This is just how we do it. It's not going to change. You can consider replacing our code with the suggestions above.. This issue was moved to aspnet/Scaffolding#884. This is planned for 3.0, so closing as dupe - https://github.com/aspnet/Identity/issues/1721. Is this in Safari? I wonder if it's to do with samesite cookies. Safari's handling of those has been somewhat, umm, interesting.\nCould you try the following?\nservices.AddAuthentication()\n            .Services.ConfigureApplicationCookie(o =>\n        {\n            o.Cookie = new CookieBuilder\n            {\n                SameSite = SameSiteMode.Lax,\n            };\n        });. The order doesn't matter. OK let's try SameSite.None, and turn all the security off cry. Darn. OK, @HaoK @Tratcher can you please take a look?. Blowdart can be an idiot and get his code wrong.\nSo by following Chris's correct advice the risk here is minimal, as I believe it's only loosening the same site protection on the cookie we use during external authentication. After that process is completed the cookie we drop uses the more secure setting and is a different one. Although Chris might correct me here again :). Funnily enough I'm at a conference today with Apple security folks in attendance. It's arguable they're not doing the wrong thing here, the whole spec around same site was, well, not quite rigorous. It's almost like the HTML4 days again. I'll talk to them though :). @Eilon @DamianEdwards Does this warrant an announcement, considering iOS12 and Safari broke us (and other OIDC providers)?. OK I'll kick off an email thread after triage.. Done. I'm closing the issue here, because it's not clear this is our fault :) https://github.com/aspnet/Announcements/issues/318. This issue was moved to aspnet/Security#1862. This issue was moved to aspnet/Home#3552. Identity is meant as a simple starting point. Extending roles to support something other than claims is beyond what this feature is aimed at.. Once you want external services then you might as well move to OIDC, that's what it's there for.. This would be an opinion, which would be, outside of the scope of a github code issue. So I'm going to close the issue.. Oh I see. Well we wouldn't put it into Identity, because the only way we could do it without a lot more of a backend is magic links and those are just despicable.\n. It would depend on the implementation, without that I couldn't make an comparisons or form an accurate opinion.. As this is opinion and discussion I'm going to close this again.. No. Cookies are encrypted and signed via data protection, it's opaque and can't be changed. Your IDS rule is rather wrong IMO.. IClaimStore isn't one of ours, do you mean IUserClaimStore?. @Eilon Do you want this merged for 2.2?. @mkArtakMSFT can you ok @javiercn to do this please?. Thank you sir. @javiercn . LGTM. This issue was moved to aspnet/Security#1892. Dupe of https://github.com/aspnet/Announcements/issues/318. This isn't something we're look at doing given there are other projects out there. It's outside of the scope for identity, which is a simple starting point.. This is probably because the cookie for the temp data provider isn't marked as essential and you haven't wired up the cookie consent pieces. Please take a look at https://docs.microsoft.com/en-us/aspnet/core/security/gdpr?view=aspnetcore-2.1 and try integrating that.. We're closing this issue as no response or updates have been provided in a timely manner. If you have more details and are encountering this issue please add a new reply and re-open the issue.. 2.0 is not supported any more. If the issue is still present in 2.1 please reopen this issue.. @LindaLawton do these users have valid security stamps?. It looks like when a key is created it's not getting stored in the Redis cache. Can you try dumping the cache and see what's in it?. As that's identity server I have no insight as it's not us. Merged in https://github.com/aspnet/Identity/pull/2047\nDiscussion in https://github.com/aspnet/Identity/issues/2048. What happens if the dev removed all the consent code?. I don't know, that's what I'm asking. I would have hoped the check defaulted to true if there was no consent feature, but .... As you can see from the method definitions the answer is no.. So .. yes but ...\nWhen the passwords are delivered over an HTTP request they're strings. You can pretend to add safety by turning them into a byte array, but it doesn't add anything, they've been strings already, now you have them represented in two places. It's the same problem SecureString has, byte arrays are only useful if you control the input mechanism. \nSo sure, in theory yes, in practice it adds nothing.. Then you're way outside what we expect identity to be used for.\nAlso, if an attacker is at the point where they can execute code to start dumping memory they're at the point where they can run anything on your server, so they can intercept requests, change responses, connect to your database and so on. This is solved by hardening your infrastructure, not by changing strings to byte arrays.. The purpose of ASP.NET identity was to be a starting point, changing implementations wasn't even on the board, especially as there only was one implementation to begin with. ApplicationUser was a class in the templates folks could edit to their hearts content, laying an interface on top of that, when the only really commonality would be an id (some people don't use emails) was adding complexity for no real gain.. Believe it or not email address isn't a requirement, even though we assume it. We've had issues about everything keying off email address when some users want phone number as the unique identifier instead (mainly from China).\nWe assume EF for our stores, those not wanting to use EF we advise to implement the store interfaces.. Honestly I'd abandon all hope here, it's one of the reasons we don't write a user manager, as soon as people customise it's an exercise in frustration. If you're using AD we tend to believe AD is the one true source of truth, it's what keeps AD administrators happy. If you use integrated authentication then IsInRole() will work, or you configure ADFS to pass the group membership through in its auth token, and again, IsInRole() will then work.. If you cast the current identity to a WindowsIdentity, which assumes integrated authentication and NOT ASP.NET Identity, there's a Groups property you can check in your authorization rules.. As I said this only works on WindowsIdentity. So it's limited to integrated authentication/AD. This does not mix with ASP.Identity. So configure your app for Windows authentication, then cast the identity to a WindowsIdentity and then you get a Groups property on the cast instance.. The survey is now closed.. Would you like to go for a pull request here? :). If you are using external providers we expect the 2fa enforcement to be their concern, not that of your app.. 2fa in that regard is for when they use the app specific username and password, not for when they authenticate via social logins.. Well what if someone added 2fa to facebook already? Do people really expect two 2fa prompts? I think 4fa might be an unwelcome shock :). The code bug is a bug, @HaoK can you look at that?\nI'd respectfully disagree on the idea that \"you expect 2FA to work for both local and external login\", as that's not how it's designed, and to be honest it's not something I've seen in the wild, so this would be something the templates wouldn't support without you changing the flow as you have,. Yes, I accept its a scenario that would work for you, but templates are starter points which cover the common cases, hence saying it's not suitable for the templates themselves.. True, if you really wanted proof you'd go for certificates, but even those aren't foolproof.. The bit where people say there's a bug :D\nC#\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\nif (result.Succeeded)\n{\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \n      info.Principal.Identity.Name, info.LoginProvider);\n   return LocalRedirect(returnUrl);\n}\nIn the above code, result.Succeeded returns false if my app wants 2fa to be checked (cookie expired). So I think @wijnsema is correct to suggest that the code needs to check on result.RequiresTwoFactor.. Leaning towards this not being a bug, we don't want two two factor challenges. Scaffolding out and changing the code is the way to go.. Dupe of https://github.com/aspnet/Identity/issues/1636. The interval at which is runs is configurable. Is your problem that when it checks it will always lock you out? If that is the case are you implementing a security stamp?\nYou remove the validator altogether by removing the event in the cookie options.. We're closing this issue as the behaviour discussed seems to be by design.. It will be, eventually. @natemcmaster . Agree, because where do password resets go :)\n. Logging normal failures would enable better auditing of potential attacks.\n. Remove Token here and in TokenValue\n. SetAuthenticationToken() and elsewhere\n. ExternalPrincipal => Principal\n. AuthenticationTokens\n. tokenName => Name\n. Don't think so If we get a new facebook token that's not a reason to invalidate a cookie login elsewhere is it?\n. Might still want confirmation though to show people it works. And the banner should say \"The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.\". Forget this browser. If we can be consistent we should :). ",
    "mderriey": "Hi,\nI'm sorry if this is a silly question as you guys may not be in touch with the non-ASP.NET 5 of ASP.NET Identity.\nDo you know if there's any chance that this could be backported in the initial ASP.NET Identity - the one on CodePlex? It's very hard to identify errors in the IdentityResult class since it's only based on the resource messages.\nThanks\n. ",
    "ltvan": "At least please provide a static method like IdentityResult.SetResourceProvider(IIdentityResultResourceProvider provider). Is there any plan to incorporate this to version 2.x?\nThanks\n. ",
    "yigith": "Any update on this issue?. ",
    "DianaKoenraadt": "Same here, looking to translate IdentityResult.Errors in Identity 2.x. Ah. I've been searching for an hour, but hadn't realized that the Identity 2.0 source code is not on github. It apparently needs to be downloaded as .zip file from https://archive.codeplex.com/?p=aspnetidentity. Download archive did the trick.\nMy apologies.. ",
    "ajcvickers": "@Eilon Currently at least with the fallback DI container it will call a constructor with null if the service is not registered. We use this in at least one place in EF. If this isn't supposed to work then I will file a bug on DI for it.\n. :shipit: \n. :shipit:\n. @suhasj @rustd @divega Setting MaxLength won't make them fixed length. To do that with the current design you would need to set the datatype explicitly. Otherwise on SQL Server you will get nvarchar(x) where x is the max length.\n. It is coming soon.\n. IdentityDbContext changes look fine.\n. Checking this in to fix build break. @divega Please review when you can.\n. @divega Yep. I have had the changes for all repros ready to go since yesterday, but all the C.I. stuff was bropken. I will check in fixes and monitor C.I. I expect it to take some time...\n. @pranavkm Please talk to @divega or @rowanmiller for anything not related to app week. Thanks.\n. Sorry for being slow responding--we had some internal team changes. This can be done, but requires that you choose one context that will manage the UserInfo table through Migrations and manually remove anything generated for it by the other context. More info and a better experience for this is tracked by https://github.com/aspnet/EntityFrameworkCore/issues/2725. @brockallen I believe this should no longer be an issue with more recent versions of EF and the Npgsql provider. If that is not the case, please post a runnable project/solution or complete code listing that demonstrates the issue and we will re-open and investigate further.. Sorry for being slow responding--we had some internal team changes. This works for me with the latest bits--the discriminator correctly gets set to 1 or 0 appropriately. If this is still failing for you, please feel free to re-open or file a new issue and we can investigate further,. Sorry for being slow responding--we had some internal team changes. When value conversions are implemented in EF Core 2.1, then it should be possible to put a value converter on the property that will ensure all IDs are converted to upper or lower case before being sent to the database. Until then, I think the best fix would be to run a pass on the client data and put it in a consistent state.\nClosing this discussion for now, but feel free to re-open if needed.. This is now merged. Thanks!. @yuleyule66 Not necessarily saying this is a bad change, but Context is public, and Context.Set gives the same thing as these private properties. Is there something you need to that requires the properties instead of using Context.Set?. @divega @bricelam @Eilon No LocalDb support seems pretty bad. Seems like this may block moving EF unless we add workarounds like using SQL Express for everything.\ndotnet/corefx#17166 (Managed SNI on windows doesn't allow LocalDB connectivity). @HaoK Can you please investigate why these tests are failing?. @HaoK Can you follow up with the people on https://github.com/dotnet/coreclr/issues/6392 and confirm that the failure that we are seeing is being tracked by this issue? @tarekgh might be another good person to follow up with. If this is the correct issue, can you try to find out when we expect it to be fixed?\n@Eilon We probably need to track this as blocking us, at least on these platforms. Do we just mark their issue as blocking, or are there also additional positive hand-off steps we should do?. Let's be sure this doesn't fall under the table. If we think this is a point-in-time thing, then making the change to unblock our builds is okay. But we need to make sure that we are ultimately:\n Building things in a way that they should work (we're not doing it wrong)\n The shipped netfx packages are correct and doing the right thing (partner teams are not doing it wrong)\nUs consuming these bits is a way to verify partner team bits, and as such, we must make sure we don't only work around issues, but also make sure that the underlying problem is fixed so that our customers won't start hitting it.\nLeaving this assigned to @HaoK to track. @pranavkm Can we get a ping when we should try this again?. Empty baselines seems like the way to go to me as well. If we don't update baselines after releases we will have more problems than just this.. @Looooooka In general, if the Identity model is going to be modified to add/remove relationships or keys that participate in relationships, then other parts of the model will need to be changed to make it consistent again. So, in this case, any entity that has a relationship with the IdentityServerUserLogin will need to be changed to use the new PK as the reference for it's FK. This will require making the FK composite as well, and also making sure that the navigation properties are bound to the correct FK and PK.\nIssue #1447 is about improving the documentation for this.. @HaoK Couple of questions:\n- Current POR is to get all feature work done in preview2. Not sure we can bump this past then. @Eilon?\n- Do we need three flags? How likely is it that people need to switch on one but not another? (Three flags increases the schema combinations and the test matrix a lot.). Version might be reasonable and simpler. @divega?. @HaoK If it doesn't impact any customer experience and won't break apps, then it's fine to do post preview2.. @Eilon It would be good to test this as part of preview2 validation, but if @HaoK can't fit it in then I'm okay punting to RC1. I'll sync up with @HaoK tomorrow.. Closing this for now since these changes have long since shipped.. Yes. Closing as @VahidN has answered the question.. @rmja's answer is essentially the correct way to do this. In general, if the Identity model is going to be modified to add/remove relationships or keys that participate in relationships, then other parts of the model will need to be changed to make it consistent again. \nIssue #1447 is about improving the documentation for this.. I defer to @blowdart . @HaoK Can we get the configuration needed for the navigation properties added to the guide? See also https://github.com/aspnet/EntityFrameworkCore/issues/9503. @scottaddie Not as described. However, I believe that the migration shipped with the 2.0.x release does not have an entry for the FK that it should have, which means that it will be added when the first new migration is added--this might be a symptom of that. It's on my list to figure out what to do for 2.1 to fix several related issues around the way Identity is defining its model and using Migrations.. @HaoK Yes, we should try to patch this. if you get fix done as a priority and I'll see if there is still time to get it approved for 2.0.1.. @HaoK Please add risk assessment either here on directly in the OneNote.. Thanks @HaoK. I updated the OneNote.. @HaoK Can you write the Justification/Risk statements needed to get approval for the patch?. @Rick-Anderson Yes, I will write a draft of this.\n@andreyshade If you're looking for general docs on how to use ASP.NET Core (including the things you mention) then the best place to start is here: https://docs.microsoft.com/en-us/aspnet/index. @natemcmaster Yes, pretty much. I have one outstanding update to make, but I'm tracking that somewhere else.. I will investigate this.. @popsovy Looks like this is happening because the DbContext, which is registered as scoped, is being accessed from the root scope. However, these is not enough code to be sure--if this isn't the case, then please post a runnable project/solution of complete code listing that demonstrates the issue and we will re-open and investigate further.. @mcgiany @tonyawad88 Sorry for the slow response. Could you post a runnable project/solution or complete code listing that demonstrates this issue so that we can fully investigate?. Triage: Closing this issue as the requested additional details have not been provided and we have been unable to reproduce it.. @whizkidwwe1217 It might be possible to change that index and retain an EF model that still works correctly, but this will be more than a simple change in OnModelCreating and would require an intimate knowledge of how Identity is currently using the model. I don't have enough knowledge to do that, and based on my understanding from others there is little chance of getting it to work correctly since Identity was not designed to support this.. New documentation is here: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1. @HaoK This looks right to me.. @HaoK For UserManager.Users.Count(u => u.UserName.StartsWith(\"CanFindUsersViaUserQuerable\")) can you look in the logs and see what SQL gets generated? There's a couple of reasons why I think this might be failing.. @joeizang Sorry for being doubly slow on this. You should not normally get that error when configuring an inheritance hierarchy, but it's likely there were bugs in the 1.0 EF Core version being used. However, adding derived types to the model would result in a change being needed to the underlying database schema--specially to add the discriminator column. There are now some better docs available for Identity model customization which should help with this kind of thing in the future: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1. @scottsauber Sorry for being late to the conversation. I suspect this was happening because the original key was still being referenced by an FK. In general, when changing the primary key of an entity type any FKs that reference that primary must also be changed, otherwise the original key is still needed as well.\nThere is now some better documentation on customizing the Identity model: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1. @embryologist This is because there is now an inheritance hierarchy which needs to be mapped to the database. EF uses a TPH mapping strategy for this, which means that the same table can have rows for the base class and the derived class. Any properties on the derived class must be mapped to nullable properties in the database because they will have no value when the row is for the base class.. @blowdart @HaoK Not sure whether you guys do any sanity checks on external references like this?. @blowdart I'll copy the one we have in EF.. This is now documented here: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1. @vmass20 https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize-identity-model?view=aspnetcore-2.1. @kieronlanning This issue is just about the Identity tests. If you are getting the exception in your application then the most common reason is setting a new LoggerFactory on every context instance.. @javiercn Yeah, it's a test issue, and not even a really significant one. I'll take care of it in MQ.. /cc @HaoK @blowdart . I didn't try it in preview2. It's not related to the generated migration.. I suspect something internally is constrained to IdentityUser instead of IdentityUser<TKey>.. That was it. I didn't update my startup to:\nC#\nservices.AddDefaultIdentity<IdentityUser<Guid>>()\n                .AddEntityFrameworkStores<ApplicationDbContext>();\nOnce I did this it worked. More stuff for the document!. There's also this bug in EF: https://github.com/aspnet/EntityFrameworkCore/issues/11832, but as I am writing the docs I am settling on this approach anyway, which seems to work:\n Do it before you create the database; changing key types in an existing database is a world of pain\n Remove the initial-migration (Just call Remove-Migration)\n Change the key type of your context and user and modify Startup to reflect this change.\n Run Update-Database.\n. Approved to merge to release/2.1. Don't forget to merge back into dev.. See https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1. Docs are here. Short answer is you can't change the int keys, but you also should not need to. I don't know the details on why the model was defined with int keys here, but they don't interact with any of the other keys.. @Ibro Because the Identity code is explicitly written to use ints for these entity types.. @konraddysput I'm not trying to defend it; that's just the way it is. Could it be changed? Yes, but it's very unlikely this will be high enough priority to ever happen given all the other things that have higher priority across ASP.NET.. Note for triage: the issue is triggered by a hiding a property in a mapped base class with another property in the derived class when attempt is made to include them both in the model. Simplified repro:\n```C#\npublic class Blog\n{\n    public int Id { get; set; }\n}\npublic class ABlog : Blog\n{\n    public new Guid Id { get; set; }\n}\npublic class BloggingContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder\n            .UseSqlServer(@\"Server=(localdb)\\mssqllocaldb;Database=Test;ConnectRetryCount=0\");\n    }\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity<ABlog>(b =>\n    {\n        b.Property(e => ((Blog) e).Id);\n        b.Property(e => e.Id);\n    });\n}\n\n}\npublic class Program\n{\n    public static void Main()\n    {\n        using (var context = new BloggingContext())\n        {\n            context.Database.EnsureDeleted();\n            context.Database.EnsureCreated();\n        }\n    }\n}\n```. Moved to https://github.com/aspnet/EntityFrameworkCore/issues/12565. @dazinator For future reference, see https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1\nFeedback on the doc appreciated.. Agreed,. @ckams Using new in that way creates a new property that hides the one on the base class. So there are now two independent properties, both with the same name. Code will use one or the other based on which type it is compiled against. Since the Identity code is not compiled against your types, it will never use or set your new property. But EF is still trying to persist it, and since there is no value set there is an exception.. @ckams Overriding (public override string ClaimType { get; set; }) should work fine. Hiding with new is very different. Using new in this way is quite uncommon.. @HaoK Find looks to see if the entity is already being tracked first, and returns it without executing a query if it is found. Otherwise it executes the query. Mostly this is just perf, but it can behave differently if the entity has not been saved to the database yet, since in that case the database query would not return it. As long as that's not a concern I think it would not be unreasonable to change this to use a query instead of Find.. @HaoK Yep. The same database name needs to be used for saving and querying.. @pakrym Isn't this a breaking change?. @HaoK I'm fine with that. I was just concerned the production code consuming logs might be assuming that TState is not a struct and breaking in the same way. If that's not a worry, then no problem.. Oh, if this if for 3.0 then no problem at all. :-). @HaoK Even though the code is not in the template, given that we tell people to scaffold the code into their applications, it effectively becomes the same as code in the template. Therefore I think we should fix this. 3.0 is fine.. The way they are will work fine, but they don't need to be virtual (although you may want them to be virtual for other reasons) and they don't need to have a setter.\n. @divega @HaoK From what I can tell its going to depend on the type of TKey for some cases. If TKey is a non-nullable type, then all relationships must required because TKey is used for FK properties making them all non-nullable. So in this case all relationships should have cascade delete turned on.\nAssuming TKey is nullable--say string, then it looks like both User -> Claims and User => Logins will be optional relationships because the FK is not part of the PK and nothing makes the relationship required. So these two will not get cascade delete by default. User -> Roles should still be required because the FK is part of the primary key and therefore must be required.\nTherefore, I would expect two of these three relationship to need OnDelete and the other one not to need it.\nHowever, I don't know much about how the model is supposed to work, but it would seem strange to me that the behavior of the model changes based on the type of TKey, so maybe the relationships should always be marked as required rather than letting it depend on the type of TKey.\n. @HaoK Does User -> Roles need to have IsRequired? It looks like it should be required by default.\n. @javiercn Yes, this will be on for new projects. Once this is in and turned on for new projects we can then scaffold the up-to-date migration and we should be set for 2.1.\nPeople with existing apps can choose to set this on with whatever value makes sense for them, or even explicitly define different lengths in the model, and then generate a migration. But this is an explicit step that they must take so we don't break any existing apps by default.. ",
    "SlavaBobik": "@Yi-Shiuan  why finding user by name is wrong?\n. ",
    "Yi-Shiuan": "Login page is use email (I know it can change, but usually use email to account) identification user, so I hope find user by email\n. ",
    "sboopal": "can i use userid and password to find the user. In our application username are not unique and hence this requirement.. ",
    "craigsmitham": "@HaoK looking at latest sources compared to current release it seems support for generic primary keys have been dropped. Not too troubled by this, just wondering if it's true. Are generic primary keys part of Identity for vnext? I'm working on building some complementary libraries and would like to follow the same approach as Identity.\n. Excellent. Makes perfect sense. I can see the headache it could have caused supporting it in the UserManager - plus it really just doesn't make sense. \n. ",
    "halter73": "Using GetServiceOrDefault in the two constructors I modified would mean following the service locator (anti)pattern. Since these dependencies should all be registered with the DI container and are required,  @loudej and I decided it would be better to make all the dependencies explicit constructor arguments.\n. @divega Sorry I missed your @ mention yesterday. Even if a connection is dropped, SignalR should wait until it is finished invoking user code before completing the app func and allowing scoped services to be disposed.\nThere might be an issue with the WebSocket transport and async Hub methods, but since @gvx111 said this repros without SignalR it looks like I'm off the hook for now :)\n. > If I would change the listening address to our public domain, it would crash because of Nginx.\nThis doesn't make sense to me. The redirect URL should be pointing to the public endpoint exposed by nginx. If Kestrel is listening on localhost:5000, nothing other than nginx should be sending requests to that port. The redirect url should point to \"https://<your public domain>\", and nginx should proxy the redirect request to Kestrel on port 5000.\n\nAnother weird thing is, there is also an attention thing about installing Facebook provider Nuget package via \"dotnet install\" which doesn't exist on either 1.0 or 1.1? I've added it to project.json manually.\n\nWhat doesn't exist? The Microsoft.AspNetCore.Authentication.Facebook package is on Nuget.org and you can install the dotnet command from https://www.microsoft.com/net/download/core.. Thanks for the clarification. I think I now understand the issue.\nThe reason that the FB provider package doesn't have a setting to configure the redirect URI is because it uses Request.Scheme and Request.Host to generate the URI. Since the request is forwarded by nginx, the publicly accessible host is in the X-Forwarded-For header and the scheme is in the  X-Forwarded-Proto header instead of the Host header.\nThe fix is to use the the ForwardedHeaders middleware from Microsoft.AspNetCore.HttpOverrides package. You can see how to use it this in this sample. The biggest thing to watch out for is to call app.UseForwardedHeaders before calling app.UseFacebookAuthentication or similar.\nThis issue seems similar to https://github.com/IdentityServer/IdentityServer4/issues/324.\n@Vaiune Were you using the https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction guide to configure nginx? @Rick-Anderson Maybe we should add a tip for configuring the ForwardedHeaders middleware in that guide.\nP.S. I think you're right about dotnet install not existing. I've never used it at least. I think the recommended approach is to manually edit your project.json and then dotnet restore. @mikaelm12 Could you edit https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction and maybe https://docs.microsoft.com/en-us/aspnet/core/publishing/apache-proxy to describe how to use HttpOverrides ?. @Rick-Anderson I'm not sure what the best place to put the note is. To me it makes the most sense in https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction or anywhere else we provide a guide to setting up a reverse proxy that isn't IIS.\nhttps://docs.microsoft.com/en-us/aspnet/core/security/authentication/sociallogins is probably a good second place to leave a note, since social logins are probably the most immediate thing people see fail if they forgot to set up HttpOverrides.. I prefer to be explicit when it comes to dependencies. Now most the param doc commments don't make sense. I wouldn't remove the doc-comments, because I think it's useful to explain which services can be replaced to change the behavior of the user manager. However, if we move to the service locator pattern, we don't have a standard way (i.e. <param...) to describe the dependencies and how they are used.\nI also don't like hiding the default implementation of services. I guess it's not really hidden since the default implementation here matches those added by AddIdentity, but that just makes this less DRY. \nNewing up the default service implementation also isn't a good solution in the generaly case, even though it doesn't seem like it's an issue here, because things quickly get out of hand if there are transitive dependencies.\nFor services that really are optional, as opposed to having a known default implementation, I am more sympathetic to using the service locator pattern. Even then, there is an alternative, and that is to use IEnumerable<TService>. The only real downside I see to this is that the type implies that 0-many services can be provided when we really expect one service or none at all. UserManager doesn't seem to have any of the truly optional services though.\n. In the old version of the code I don't think this null check was necessary. Our IoC containers are required to pass an empty IEnumerable to the constructor when no matching services are registered.\n. So now we're a mishmash of constructor injection and the service locator pattern? I understand it was necessary before for ProviderTypes, but this seems almost arbitrary.\n. Won't most of the methods in this class now NullRef in contextAccessor.HttpContext is null? I think it is better to throw in the ctor? Maybe it shouldn't ArgumentNullException but instead an InvalidArgumentExeption with a clear explanation that the HttpContext property can't be null.\n. Considering that you would need valid IUserStore<TUser> and ILogger<UserManager<TUser>> instances to new up a UserManager  at the very least, I don't think requiring users to call services.GetService<UserManager<MyUser>>() (or getting it via ctor injection in their controller for example) is too onerous. Users would need to do the same thing for any stateful service anyway.\n. Maybe we can null check in the getter then so the user gets a clearer error message if the context it is null when it's actually needed. I guess whether or not it's worth it depends on how possible it is for this issue to come up.\n. ",
    "lucamorelli": "thanks, this reduces a lot the errors, remain those:\nC:\\Sorgenti\\SecondoK\\SecondoK\\Models\\IdentityModels.cs(18,71): error CS0246: The type or namespace name 'IOptionsAccessor' could not be found (are you missing a using directive or an assembly reference?)\nC:\\Sorgenti\\SecondoK\\SecondoK\\Controllers\\AccountController.cs(81,80): error CS1739: The best overload for 'SignInAsync'  does not have a parameter named 'rememberBrowser'\n. The equivalent of Forms Auth. the idea is to create a project template functionally equivalent to the actual asp.net template, but based on spa frameworks.\n. ",
    "PinpointTownes": "FYI, there's already a ticket on aspnet/Security to track that: https://github.com/aspnet/Security/issues/83\n. @YZahringer @prasannapattam you might be interesting in this SO post: http://stackoverflow.com/questions/31007470/does-asp-net-mvc6-support-oauth-2-bearer-tokens/31093557#31093557\n\nTL;DR: the official packages developed by Microsoft for ASP.NET 5 only support OAuth2 bearer token validation.\nThis means that...\n1. ... you'll be able to authenticate your users using bearer tokens issued by an external identity provider (like Azure Active Directory) with the Microsoft.AspNet.Authentication.OAuthBearer package:\n```\n   app.UseOAuthBearerAuthentication(options => {\n       options.AutomaticAuthentication = true;\n       options.Audience = \"http://localhost:50000/\";\n   // Authority is only useful if your JWT tokens\n   // are issued by an OpenID Connect server.\n   options.Authority = \"[OpenID Connect provider address]\";\n\n\n   // If you don't use an OpenID Connect server, you have to manually update the\n   // token validation parameters with the issuer's signing key.\n   options.TokenValidationParameters.IssuerSigningKey = new X509SecurityKey(certificate);\n\n});\n   ```\nThat said, only JWT tokens are now supported OTB: the OAuth2 bearer middleware shipped with Katana 3 used to natively support opaque tokens produced by the OAuth2 authorization server, but this support has been removed.\n1. ... you won't be able produce your own tokens anymore. The OAuth2 authorization server has been removed and won't be ported to ASP.NET 5: http://stackoverflow.com/questions/29055477/oauth-authorization-service-in-asp-net-mvc-6/.\nLuckily, alternatives exist. I'm personally developing an OpenID Connect server middleware based on the OAuth2 server shipped with Katana, that offers the same low-level experience: https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server\nFor more information, you can take a look at this SO answer: http://stackoverflow.com/questions/30768015/configure-the-authorization-server-endpoint/30788109#30788109\n. FYI, a similar bug has been reported on aspnet/Security and should be fixed soon: https://github.com/aspnet/Security/issues/355\n/cc @HaoK \n. Congrats, you made @blowdart rant :trollface: \n\n. @HaoK this issue is actually different and only about flowing claims from the external authentication cookie to the application/internal one. Unlike the other issue, claims are there. They are just ignored when converting the external cookie.\n. > Anything else extra in the external identity is ignored...\nI guess that was the whole point of this topic. Wouldn't automatically flowing a few (listed?) claim types make sense?\n. @blowdart I like @HaoK's idea (i.e adding a new ExternalLoginSignInAsync overload that allows preserving the external claims).\nIf you think there's an external/internal claims mixup risk, I guess one option is to prevent duplicate claims by ensuring they don't exist in the set returned by CreateUserPrincipalAsync before copying them from the external identity. Another one might be to add a \"white-list\" parameter to force the developer to specify the claims he/she wants to preserve.\n. > My inclination is for the latter, and to only merge the claims from the external identity to the identity user generated principal for calls to signInmanager.ExternalLoginSignInAsync and to leave AddLogin unchanged.\nSounds like the best option, IMHO. And it would make things like https://github.com/aspnet/Security/pull/852 much easier to use with Identity.\n. @HaoK independently on what you decide concerning a \"sugar\" method, that would be nice to update the template and/or the documentation to explain how custom claims can be flowed from external cookies to the application cookie. It's really a recurrent demand (e.g https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers/issues/26)\n. The sample doesn't demonstrate how to flow claims from the external cookie to the application one: it just stores them in the database so they are later restored when building the application cookie identity.\nThere are cases where storing claims in the database is not appropriate (e.g because you correlate a remote session with the local session). And in this case, it's a huge PITA to implement, as you basically have to copy all the SignInAsync method from SignInManager.. TL;DR: please re-open.. > can your app just use a custom SignInManager to have it do what it needs?\nThat's what I meant by this: \n\nAnd in this case, it's a huge PITA to implement, as you basically have to copy all the SignInAsync method from SignInManager.\n\nhttps://github.com/aspnet/Identity/blob/dev/src/Identity/SignInManager.cs#L186-L197\nImplementing such a method is absolutely not trivial for beginners as the external identity is not available from this method (you have to retrieve it manually using AuthenticateAsync([external cookie scheme]). Since it's a frequent demand, I don't see why we don't have a built-in hook to handle this scenario way more easily.. I like it :clap: \nJust one question: have you considered adding an optional expiration property to AuthenticationToken (in aspnet/Security) and IdentityUserToken? Personally, I'm not a huge fan of storing expires_at as an authentication token.\n. @HaoK yeah, I really like this new approach (specially the fact security middleware don't deal with token storage).\n. @pranavkm silly me. I had checked MusicStore to see if my PR wasn't breaking something but I had not realized the Identity repo had samples that used Challenge :sweat_smile: \nThanks!\n. @shima20 that shouldn't be needed for at least 2 reasons:\n- the default SignInManager ends up calling UserManager for all the password-related operations.\n- OpenIddict barely uses SignInManager because it has too many side effects and is basically tied to cookies (which is annoying, but that's another topic :smile:)\n. @shima20 did you have a chance to confirm it worked for you?\n. @shima20 make sure your manager inherits from OpenIddictUserManager<TUser> and is registered using services.AddOpenIddict<...>().AddUserManager<CustomManager>().\n. It's a race condition, caused by the fact you're using async void (which is basically fire-and-forget async).\nReplace public async void Post([FromBody]UserViewModel vm) by public async Task Post([FromBody]UserViewModel vm) and it should work.\n. > Are OAUTH and third party providers such as still Facebook supported ? I ask because it is branched off into its own service. https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers. Are these competing products ?\nYes they are. You can find the Google/Facebook/Twitter/Microsoft providers in the aspnet/Security repository: https://github.com/aspnet/Security/tree/dev/src.\nThe project you mentioned aims at supporting other well-known social providers (e.g LinkedIn, GitHub, Reddit or Wordpress). All these providers are developed by the community and use the same OAuth2 generic middleware as the \"official providers\".\n. That's a question for @HaoK :smile: \n. Microsoft's recommended approach is to use their (commercial) Azure AD/B2C offer.\nIf you prefer open source solutions, you can take a look at IdentityServer 4, ASOS (OAuthAuthorizationServerMiddleware's equivalent in the vNext world) or OpenIddict (which is basically \"Identity for Web API\"): https://github.com/aspnet/Identity/issues/503\n. Out of curiosity, what's the difference between that and simply overriding SignInAsync?\nAll the managers already have a bunch of methods, so if you start adding new events for every important method, it will quickly become a nightmare :smile: \n``` csharp\npublic override async Task SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod = null) {\n    await base.SignInAsync(user, authenticationMethod);\n// Do whatever you need here.\n\n}\n``\n. @maslovay there's no need to create your ownGoogleHandler.cs`, you can leverage the events model for that: http://stackoverflow.com/a/35634697/542757\n. > SecurityStamps should never be null for a store that supports user security stamp.\nExcept it was, in this case (using the default EF Core store).\nIt's also worth mentioning that there's nothing that prevents setting SecurityStamp to null: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L1242-L1252\n. @shima20's case is obviously an atypical case, as he somehow managed to get a null security stamp.\nFWIW, I don't think the principal factory should shock on null values. It should be a bit smarter and ignore null claim values.\n. Critical seems a bit excessive (it's only used for cookies/tokens invalidation), but okay. As long as there's a check somewhere that prevents this illegal case, I'm fine :smile: \n. So, in the \"rare\" case where a security stamp would be missing, the user wouldn't be able to update his profile, right?\n. > its a developer error to end up with a user with a security stamp missing\nMy point is that it shouldn't be returned to the end user, as there's nothing he can do to fix it.\nIs there a particular reason you prefer returning an error instead of generating a new security stamp on the fly?\n. > Its not really safe to automatically generate a new security stamp, that would just result in really hard to repro cases of users that are suddenly signed out.\nWell, if a user has a null security stamp at some point, he will be unable to log in at all, as it will crash when creating the ClaimsPrincipal :trollface: \n. No love for UserStore.SetSecurityStampAsync? If null stamps are illegal, maybe it should throw an ArgumentException when it's null or empty.\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L1242\n. Personally, the main concern I have is that the project names you've chosen are way too generic for what appears to be basically a limited \"B2C emulator\" (credits go to @leastprivilege for the name!) or an \"on-premise B2C server\". Why not adding the Azure(AD) moniker in the packages name if that's really what it is?\n\nAnother (cool) option to consider would be to decouple the OIDC handling part from the abstractions/core components (like the token primitives or the applications/tokens stores), that wouldn't be tied to any OIDC implementation and could be reused and plugged into existing stacks like IdSrv or ASOS.. > the sweet modules framework the Orchard folks built on top of ASP.NET Core for Orchard Core: https://channel9.msdn.com/Shows/On-NET/Sbastien-Ros-Modular-ASPNET-apps\nThere's even a built-in OpenID Connect module designed by @jersiovic (that uses OpenIddict under the hood) :trollface: \n@danroth27 any idea when the IdentityService repo will go public?. @danroth27 I started playing with the new VS templates and it looks like there's now no way to create a Web API/APP using Identity (aka \"individual authentication\") without the B2C emulator, which is of course a real PITA.\nIs there a plan to fix that?. > What issues specifically are you running into? We want the app decoupled from its identity concerns by default so that you can easily swap to a different identity provider.\nThat's also what I want. I don't want to have an embedded B2C emulator when I have actually no plan to use OIDC at all in my Identity-based app. There should be a new option the individual authentication dropdown list offering you to create a \"local B2C server\".. > The use of OIDC for the in-app case has the benefit of allowing the user to easily swap out their identity provider and it is largely transparent to the user.\nMeh. It makes absolutely no sense to use a local OIDC server when you know you don't want to use a remote identity provider. What I want is a template similar to the existing Identity template (in VS 2017).. > In-app means the same as we have today in VS2017, right?\nNope. When you select individual authentication with in app users store, the B2C emulator is automatically added and you have no way to avoid that.. > This means that you can easily switch to any OpenID Connect provider (like IdentityServer4 or OpenIdIDict).\nThere are many cases where you don't want to use an OIDC provider - local or remote. Embedding the B2C emulator, IdSrv, OpenIddict, ASOS or any other OIDC provider makes no sense when all you want is a simple application with cookies authentication and a local users database.. > To be fair though, using ASP.NET Core Identity was never really simple. The AccountController alone is over 400 lines of code. And that code and the database setup is all still there, virtually unchanged.\nSo your solution to that is to add much more code in the templates - @Bartmax's screenshot is eloquent - making the authentication flow way more complex for people who only need local authentication and don't want to use OIDC? You can't be serious.\n\nIf you later decide that you want to use a different identity provider (Azure AD B2C, IdentityServer4, OpenIdDict, etc) you simply delete the entire area folder and configure the app's OIDC options to point at the identity provider of your choice.\n\nI do understand why you're doing that from a business perspective, but forcing people to use your stuff by including it in the base templates without offering a way to opt in/out is unacceptable. What's next? Bloating all the templates with stuff promoting all the Azure services?\nTo be clear, I have no problem seeing stuff that help you sell more Azure services in the templates, but they must be opt-in. One should be able to create a new app with the minimum stuff needed, instead of having to remove everything manually.. > If you later decide that you want to use a different identity provider (Azure AD B2C, IdentityServer4, OpenIdDict, etc) you simply delete the entire area folder and configure the app's OIDC options to point at the identity provider of your choice.\nNot really. Getting rid of the B2C emulator artifacts is way more annoying:\n\nYou have to move the models/views/view models/controllers from the IdentityService area folder to the root project.\nYou have to manually remove the area folder.\nYou have to remove the related extensions in the Extensions folder.\nYou have to merge the two AccountController.\nYou have to rename and update the DbContext to avoid inheriting from IdentityServiceDbContext.\nYou have to manually add the Identity services in the main Startup or copy them from the IdentityService hosting startup file.\n... and I'm probably missing other steps.. > For folks that don't want OIDC support at all you can still use ASP.NET Core Identity to do forms based cookie authentication like you always have been able to do.\n\nNot without having to manually remove your \"identity service\" thingy from the default templates. And it's a total PITA: https://github.com/aspnet/Identity/issues/1187#issuecomment-301136216. > We want to make the OIDC support as transparent as possible. \nIt really sounds like you're trying to force people to use your OIDC server (otherwise you'd accept offering a default template without any OIDC stuff, just like in VS2015/2017).. > If you don't want the OIDC endpoints at all you can remove them, but we think most customers will want this level of flexibility.\nIf you're so sure people will want that, why not offering a way to opt out (using a checkbox?) for those who don't want to use OIDC? :smile: . @gregoryagu \n\nThe following items (and items related to them) were cut completely from the 2.0.0 release due to them being deemed not ready. We will revisit them in 2.1:\n - Convention-based configuration in our sub-systems (aspnet/MetaPackages#117)\n - Identity as a Service (STS)\n\nhttps://github.com/aspnet/Announcements/issues/253. @HaoK is there a particular reason why the EF Core stores have to depend on Microsoft.AspNetCore.Identity instead of just Microsoft.Extensions.Identity.Core? (IdentityBuilder could be moved to Core).. @HaoK what's the problem with having these entities - specific to the B2C emulator - in a separate package?. > If we solve that, there shouldn't be as much of an issue right?\nThe problem is not adding new features nor modifying the DB schema (1), it's adding the \"identity service\" entities directly in the Identity core components, adding totally unnecessary tables for people that don't plan to use the B2C emulator.\nI know the Azure folks are pushing hard to add their \"Trojan horses\" everywhere in ASP.NET Core to promote their stuff (e.g ApplicationInsights, that you can't avoid 'cause it's automagically added at runtime by VS in 2.0...), but at some point, you guys will have to be honest about this aggressive marketing strategy, instead of pretending you're just adding new features to make everyone's life easier (@danroth27... if you read me...) :smile: \n(1): if you do that, I'd love to see a ClaimValueType property for UserClaim :smile: . > Yeah so this is a bit similar to IdentityRoles, there's a bunch of people that will never use the RoleManager similarly.\nExcept roles have a real use in the core components: you can register them using the role manager, associate them to profiles via the user manager ; they are automatically added in the app authentication cookie and they can be retrieved from user code to define authorization policies.\nIf you add the \"identity service entities\" in the core components, they'll have absolutely no use.\n\nThe only bleed will be in the default EF implementation/schema, which has versioning now, so if you don't want any of the taint, the old APIs won't give you any of it...\n\nSo the solution is to explicitly opt for an obsolete scheme, just to avoid having the identity service entities? :trollface: \n(BTW, this versioning story is insane... it will be a total PITA for community folks who maintain non-EF Identity stores as they'll have to develop a user/role store per version :open_mouth:). > non-EF identity stores can continue having a single version no?\nOnly if there are no \"breaking changes\" between versions (e.g a table or a property name change, or a property type change). Is this something you can guarantee?\nOne thing I don't understand is why you have to support the 1.0 schema in 2.0 (for the EF provider). Why not providing a migration script/class to make the necessary changes in the DB?. > Unfortunately, EF migrations have never been and aren't currently designed for library authors, as they are provider specific.\nDoh, really? I thought the migrations stack was supposed to be decoupled from the provider implementations and that things like IMigrationsSqlGenerator - implemented by the providers - were there to deal with the actual migration queries?\n\nTables are an implementation detail for the stores themselves no?\n\nYeah, \"table\" was not the appropriate word, I meant \"type\"/\"entity\". Stores that depend on the CLR generic entities from Microsoft.Extensions.Identity.Stores to dynamically generate their queries will stop working correctly if types or properties are renamed or deleted (just like EF).. > almost always additive only, with a new major/minor version in IdentityStoreOptions\nI suppose even that would break ORMs like EF6, that don't like when new properties are added :cry: \n\nMost of this complexity is there so people can stick to a specific version and not be broken...\n\nI still don't get why it's preferable to the \"database migration\" path. A schema change is no different from a API/contract change. Folks who migrate to 2.0 should also migrate their DB to be compatible with 2.0 (using migration scripts or by manually applying the needed changes if they use a provider that doesn't support migrations).. > The VS integration is intended to aid with local debugging, but if it's causing harm or irritation then we should talk about whether it's the right default behavior.\nOh it's not, but it certainly gives Azure's services an unfair advantage their competitors can't have (and will likely never have). But I suppose telemetry is one of these... strategic things? :trollface: \n\n@danroth27 Sure that's why I created an issue instead of a PR. I'd also like to continue discussions on what the final name of the \"identity service\" should be, because I don't think there are currently many fans of the current naming...\n\nThe naming is just the visible part of the iceberg, IMHO.\n@danroth27 pretends that IdentityService should be regarded as a development server meant to offer a smooth migration to B2C or OSS projects but that's not really the impression I have when seeing all these tickets: https://github.com/aspnet/Identity/labels/identity-service.\nIf your intention is to make this thing a \"real\" OIDC server (that can be \"officially\" used in production), then you should be clear and sincere about that. Having another competitor in the field is not a bad thing - people like and need having multiple options - but the way you Microsofties communicate about this project is not really satisfying.. If you do that, please also consider moving all the scheme handlers options (in aspnet/Security) to their respective repos :smile: . lol yeah, I meant namespace, not repo, sorry for the confusion :sweat_smile: . > @alexsorokoletov in previous version it was easy to do using custom Provider in OAuthAuthorizationServerOptions. I'm looking for similar thing, because I'm thinking about moving my existing code to ASP.NET Core. I'd like to know how to create similar thing best way possible.\nIf you like OAuthAuthorizationServerMiddleware's low-level experience, you might want to give OpenIddict's underlying OIDC framework - ASOS - a try: it was forked from OAuthAuthorizationServerMiddleware and uses the same events model. Implementing custom flows is of course definitely supported.\nFor more information, you can read this blog posts series I wrote last year: http://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/. Sure. But wouldn't that be clearer if they were set by Identity? (+ it would avoid the fallback logic).\nI discovered this oddity when creating my own \"post initializer\" for AuthenticationOptions, so I presume other people might be confused by that too.. BTW, is there any particular reason you need the double-fallback (DefaultForbidScheme -> DefaultChallengeScheme -> DefaultScheme), now that we have a universal fallback scheme (DefaultScheme)? It seems more confusing than really helpful.. That still seems too magical for me (a single fallback should be enough), but okay. Thanks for the explanation :sweat_smile: . Shortening all the project paths is probably a simple option, but it makes navigating across tags/branches a total PITA (not to mention that you also loose all the changes history associated with a file). Yet, I'm sure many folks (including me) use that as a way to determine what's changed between 2 ASP.NET Core versions :sweat: \nPersonally, I've opted for a better workaround that forces MSBuild to use shorter filenames for its binding redirect files (that are insanely long by default :open_mouth:):\nxml\n<Target Name=\"WorkaroundAppConfigPathTooLong\" BeforeTargets=\"GenerateBindingRedirects\">\n  <PropertyGroup>\n    <_GenerateBindingRedirectsIntermediateAppConfig>$(IntermediateOutputPath)$(TargetFileName).config</_GenerateBindingRedirectsIntermediateAppConfig>\n  </PropertyGroup>\n</Target>. > I already renamed folders in 2.0 and moved files around, so doing it again is unlikely to make things that much worse\nMy remark was not limited to this repo (I suppose this plan is going to be adopted globally for consistency). Fortunately, Identity is pretty much the only repository whose structure was radically changed in 2.x :sweat_smile: . Why is it limited to entities that inherit from IdentityUser? Why can't we use the default UI with totally custom entities?\n/cc @HaoK . Okay, I opened a new ticket to track that: https://github.com/aspnet/Identity/issues/1679.. Great news, thanks!. It's already supported and known as policy-based authorization: https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies.. I'm not sure it makes things clearer as...\n- the risk is high to mix them up with 2-FA tokens, that are also \"authentication tokens\".\n- they are more authorization tokens you can use to query an API or to refresh a token than real authentication tokens.\n. Holy s... :smile: \n. I hope so, because we had added Options.Create to avoid having to implement IOptions<> to return this (which was ugly), and now we have this much more horrible pattern that pollutes our precious options POCOs... :smile: \n. ",
    "MohammadYounes": "@HaoK  How do we listen to these events ?\n. ",
    "Li-Yanzhi": "After I remove the following code from ApplicationDbContext onModelCreating method:\nmodelBuilder.Entity<ApplicationUser>().HasMany<IdentityUserRole>((ApplicationUser u) => u.Roles);\n    modelBuilder.Entity<IdentityUserRole>().HasKey((IdentityUserRole r) =>\n            new { UserId = r.UserId, RoleId = r.RoleId }).ToTable(\"AspNetUserRoles\");\nAfter re-inited migration database,  AspNetUserRoles table only contain two fields of UserId and RoleId,  then UserManager.RemoveFromRole work as expected.\n. ",
    "michaelfrye": "I'm having this issue too and I cannot seem to recreate the database with only two fields. Here's a screenshot\n\n. ",
    "zam6ak": "I just saw this issue after having some trouble myself w/ console app...\n. ",
    "ahmad-moussawi": "This can be helpful on some situations where I need to seed the database on startup and add users through the UserManager.\nI've tried this:\nUserManager<ApplicationUser> userManager = (UserManager<ApplicationUser>)httpContextAccessor\n                    .HttpContext.ApplicationServices.GetService(typeof(UserManager<ApplicationUser>));\nbut at this stage (database seeding on startup) there is no HttpContext\n. @yetanotherchris Could you please give us an example on how to extend the EmailTokenProvider ?\nI need to generate a smaller token, since I have a case where the user should enter it manually, so with a long token this could be impossible.\n. I've ended up to extend the UserManagerClass and passing the custom PasswordHasher in the constructor, \nNow the constructor takes much params then before\nHere's my class code (Its working now, but may there is a better way to achieve this)\n``` c#\nusing myApp.Models;\nusing myApp.Providers;\nusing Microsoft.AspNet.Identity;\nusing Microsoft.AspNet.Identity.EntityFramework;\nusing Microsoft.Data.Entity.Infrastructure;\nnamespace myApp.Providers.Identity{\n  public class ApplicationUserManager : UserManager\n  {\n    public ApplicationUserManager() : base(\n      new UserStore(new ApplicationDbContext()),\n      null,\n      new SqlPasswordHasher(), // <---- My custom password hasher\n      null, \n      null,\n      null,\n      null,\n      null,\n      null,\n      null\n    ){ }\n}\n}\n```\n. ",
    "dejx": "One way of achieving this could be if you create your own instance of IServiceCollection.\nBelow is the example code\n```cs\n  public class AspNetIdentityCredentialProvider\n    {\n        private readonly IServiceCollection _serviceCollection;\n    public AspNetIdentityCredentialProvider()\n    {\n        _serviceCollection = new ServiceCollection();\n        _serviceCollection.AddIdentity<IdentityUser, IdentityRole>()\n            .AddEntityFrameworkStores<IdentityDbContext<IdentityUser>>()\n            .AddDefaultTokenProviders();\n        _serviceCollection.AddDbContext<IdentityDbContext<IdentityUser>>(options =>\n        {\n            options.UseSqlServer(connString);\n        });\n    }\n\n```\nThen you're able to do whatever you desire\ncs\n            var um = _serviceCollection.BuildServiceProvider().GetService<UserManager<IdentityUser>>();\n            try\n            {\n               var u= await um.FindByNameAsync(\"..\");. ",
    "xqiu": "No wonder I couldn't find a proper way to hook the EmailService and SmsService for UserManager in startup.cs at this time.\n. ",
    "wbreza": "Is this still happening?  I don't see this pull request merged into the v2.2.1 identity assemblies.\n. ",
    "mojtabakaviani": "so can I authorize by groups?\n[Authorize(Groups= \"Administrators\")]\n. thanks! I think just block login will be enough but if admin reset password or other actions automatic enabled. \n. By the way this is important support specific scenario and not mothods\n. ",
    "anfomin": "The last overload still extends class ServiceCollection:\nC#\npublic static IdentityBuilder<TUser, TRole> AddIdentitySqlServer<TContext, TUser, TRole, TKey>(this ServiceCollection services)\n. ",
    "brockallen": "When writing custom middleware, it's often useful to have access to the host's IDataProtector. Is this what you're proposing to remove from DI?\n. BTW, if you're working on changing how claims are managed, can you ensure that only one claim type/value pair are stored? In the v2 Identity implementation you could end up with multiple copies of the same type/value in the DB (which is silly).\n. What does it mean to have Role/Admin twice? Or email/brock@foo.com twice? I think it's silly. And the extra checks in app level code to detect/avoid this sort of thing is a PITA.\n. That's unrelated especially since there are more claims than role.\n. I think you're missing my point. Anyway, I've said my peace.\n. Event bus, perhaps, so implementers don't have to implement an interface with many methods. Also, it versions easier. Or is this a separate issue?\n. Yay! \n. And as a suggestion for the OP -- you could simply create an abstraction around Identity (like a factory which accepted the tenant as a param) which would create/initialize the correct tenant of the identity system.\n. I just implemented this recently, and it was not that difficult. It did require a good understanding of the inner workings of the framework. I agree it should be better integrated/supported by the ASP.NET Identity framework itself, though.. iirc, here's the short list of what i did: delete the 2 username and email indexes the built-in stuff creates. add a tenant column to the user table. add new indexes for username/tenant and email/tenant. add a tenant to the store and change the IQueryable users property to filter on tenant.. also, in the store overload create and set the tenant on the user.. the most painful part of all of this is the base DbContext creating the 2 indexes on username and email and EF not providing an easy way for a derived DbContext to undo base class OnModelCreating stuff. better support would be in EF to delete an index on the ModelBuilder, or in ASP.NET Identity to have virtuals for pieces of this so you can override some of them rather than having to replace all of OnModelCreating and copy 95% of their default code. // @HaoK @rowanmiller . feel free to fund me working on an OSS version of it for AspId3 :). Well, in a sense some of the middleware already does favor Azure. What might be nice is an inheritance structure where base class middleware doe the raw protocol (and hopefully the full protocol) and then derived/extended middleware adds in or is tailored for the azure specific bits. \nMy $0.02, fwiw\n. FWIW, there are open source projects that do support single sign-on:\nhttps://github.com/IdentityServer/IdentityServer3\n. > The fix would be fairly easy, EmailTokenProvider should override the GenerateAsync method it gets from TotpSecurityStampBasedTokenProvider\nBeware using this with a very long window of time -- it might open up a brute force attack on validating the email confirmation token (more of a concern for password reset scenarios).\n. shrug\n. I guess my main reason for bringing this up is because there's already a lot of confusion over what ASP.NET Identity is and does. Conflating it with cookie middleware just muddies the waters. They work together, but are not the same. \nI'm just trying to suggest an approach for keeping the distinction clear (since the distinction is important, IMO).\n. Ok, I can acquiesce on this one. I suppose I'm so used to adding cookie middleware myself that the fact that AddIdentity also does it wasn't obvious. Perhaps this is just an education thing.\nAt least I was able to frustrate @blowdart.\n. Just raising it as an issue to be considered given how the guid is being used.\nAs for:\n\nthe security stamp doesn't need to be secret or unpredictable\n\nIIRC, the security stamp is the main input to the TOTP (as well as time, but that's well known-ish for 2FA given the steps) and thus if an attacker has just read-only access to the DB they can predict the SMS code for 2FA. I guess in theory if the security stamp is also predictable then it's also potentially a vector.\nI'm sure it's a remote vector and I'm certainly not motivated enough to work at cracking it, but someone else might be :)\nAgain, just mentioning it so someone smarter than me can think about it.\n. Same issue exists in AspId v2 :)\n. I think he might mean separate the AspId3 manager and store APIs from the SignIn manager. Right now the whole thing has a dependency on HttpAbstractions, whereas the core identity management (user management APIs) could be separate and a separate package that assumes the ASP.NET pipeline and cookie MW. \n. > Any action decorated with [Authorize] attribute?\nIMO updating the user each time they're active in an app at this level (meaning any request) no longer sounds like an identity management library. It's certainly a feature of some sort, but not identity management one.. > So far Identity is based on cookies only. We can consider this in a future release.\nSorry Pranav, but this concept makes no sense. Cookies authenticate users in a browser and are unrelated to ASP.NET Identity. An identity management library (such as ASP.NET Identity) is what stores and validates users credentials. It's really independent of the consuming application. These two \"things\" are separate because you don't have to use them together. Conflating cookie authentication and identity management is not helpful.\nI suspect it was easier to just put the SignInManager into the same assembly as the UserManager, and thus say \"we are based on cookies\", but it's a disingenuous answer. The part that helps with issuing cookies should be in its own assembly. The core of ASP.NET Identity should not have a dependency on HTTP.\nThe separation will be important once you consider other types of authentication, such as OAuth2  (and not the OAuth2 authentication middleware that's in ASP.NET 5). \nRelated: the brute-force code in the SignInManager should be in the core and separate from the code that manages the cookies. You will want those features from the OAuth2 endpoints.\n. If you do this, then some of the APIs on SignInManager should be moved to UserManager (the ones that do lockout/brute-force prevention are the first ones that comes to mind).. +1\n. I'm guessing you're not looking for a fix, so might I suggest adding these as extension methods to the VS template project and not into the core identity framework? In many projects the display name should not be the same as the username the user enters to login. \n. yay. the less people are forced to use certain claims types, the better. thx.\n. When you create your ClaimsIdentity you need to pass the authenticationType ctor param, otherwise your user's IsAuthenticated will still be false.\n. It's meant to indicate how the user logged in. So \"password\" for a password based login, \"2fa\" for two-factor, etc. It's part of the ClaimsIdentity and not something on the cookie middleware.\n. var identity = new ClaimsIdentity(\"password\");\n. Does EF7 do lazy loading? Also, you're sort of going around the AspId programming model -- there are store interfaces for loading specific kinds of data.\n. So then that's my guess as to why @Sally-Xu is seeing this behavior. But still, you should use the designated APIs for loading the designated things from AspId. \n. @Sally-Xu just so you know, you're now bypassing the storage abstraction for this and not using the formally designed API for loading that data. If you're cool with that, then godspeed. \n. You don't. If you could, then it'd not be very secure, would it?\n. Why do you need to reveal the password? Is this so a back-office user can login as an end-user?\n. Well, that's a tough call how to really design it for that requirement and also have any sort of meaningful security. \nTo answer your original question, why not replace the password hasher with your own that does a Nop?\n. Yes, especially if they're just 4-digit pins -- that's easily brute forceable. A pin on the web is just keeping honest people honest.\n. > Isn't there a way to un-hash the password?\nNo, and that's by design. If you want it reversible, then you want to encrypt it (but then you have another problem, which is key management). \n. The RoleManager has APIs to manage and query roles. \n. All IMO. \nEmail verification is not trivial.\nBefore an account should be allowed to login you should confirm their email address. This motivates the user to do this, because if you don't require it, then they'll never do it. Email being confirmed and trusted is vital for when the password needs to be reset.\nTo verify an email, you send a code to the email. When this code is then presented to be verified, then the user should be required to re-enter their password to really confirm that the email address the code was sent to is really associated with the user. Email typos happen all the time, and without this the email owner is in a position to pwn the account owner if they aren't the same individual. The prior versions of ASP.NET Identity did not require this additional password step. I feel this is fundamental to building a secure application. If you agree, then you need to add this code/logic on top of ASP.NET Identity. I've not yet spent the time in ASP.NET Identity 3 to know if now has this support.\nYou must first confirm an email (as above) before it can be changed (duh). To change an email, a code must be sent to the new email, and the same process must be performed as above (meaning the user must re-enter the password to confirm it was the right email). The problem here is that you don't want to overwrite the old email until the new email is confirmed. ASP.NET Identity previously did not have a built-in way to do this, so you needed to build your own infrastructure for this. I've not yet spent the time in ASP.NET Identity 3 to see if they have an easier approach to this.\nSo that's some guidance from the community. As I mentioned, since many of these important security aspects aren't required or built-in to ASP.NET Identity it will be interesting to see what the proposals are for how to handle them in ASP.NET Identity 3.\n. FWIW MembershipReboot does it the way I described above.\n. Claims are cached in the cookie. You need to re-issue the cookie. If you need a claim to be the latest on every HTTP request, then don't cache it in the cookie and instead load it during claims transformation.\n. So I'll remind you guys about this issue, now that I notice in ASP.NET Core 2 that the authenticator TOTP key and recovery codes are being kept in this table as plaintext. Not ideal.. Ok, just debugged some more... turns out all of the UseIdentity() cookie middlewares are now being set to AutomaticAuthenticate=true. Perhaps this was a change in the cookie MW defaults in RC2?\nIf I explicitly set the 3 of them to false (all but the app cookie) then it's working as expected. \nThe TwoFactorUserId cookie is still not removed upon successful 2fa tho.\n. Looks like this might be the issue: https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationOptions.cs#L27\nSetting this to default to true is dangerous, as evidenced by this issue and the fact that someone forgot to update all of the MW here.\n. thx\n. Yep.\n. Can you elaborate?\n. And how do people get their username emailed to them if they forget the username?\nIs there a flag to make email unique? IIRC I saw one...\n. Done. \n. This is unrelated to your question, but beware using your ApplicationUser in MVC's model binding as you might be subject to an underposting or overposting attack. You should use formal view models and update models, and not your EF model directly. And then, yes, you will have to map between them. Taking this approach will also mean you will avoid the issue that you're raising here.\n@blowdart can provide some more official security guidance.\n. Perhaps you should keep your business related entities separate from the identity management related entities.\n. Ok, I see your point about the web dependencies. I agree with that sentiment. \n. >  E.g. ASP.NET Core Identity is Web specific.\nThis is a superficial design limitation that you've boxed yourselves into. It was brought up as a complaint early during this v3 rewrite (here's one open issue that mentions it: https://github.com/aspnet/Identity/issues/651). The prior versions of ASP.NET Identity were not web-specific, and to be blunt all ASP.NET Identity is is logic around DB queries, password validation, and brute force protection. The cookie authentication middleware is not part of ASP.NET identity, and it's disingenuous and confusing to tell people that that it is. The comment in #651 is a good one that speaks about OAuth2 -- that's something that has nothing to do with cookies, yet would need end-user authentication. That's a valid use case that's not \"Web specific\".\n. Hao, can you go into the rationale for it? It would be nice to see this explained and documented (and thus you can just point people to it). After all, this is all out in the open, right? cringe\n. You'd have to put base classes in the core repo and then derived classes in the EF repo, I'd think. The derived classes would add the EF specific goo.. > That smells like an oversight, but ok.\nThey actually said it was deliberate: https://github.com/aspnet/Identity/issues/883#issuecomment-228569093\n. > I am not following, this discussion is about Entity Framework and the DAL, not a WebApi interface.\nYou said it sounded like an oversight that \"Identity\" (which means ASP.NET Identity) did not accommodate non-web scenarios. I linked that that it was not an oversight.\n. Right, but that's not what Microsoft is supporting. They are tied to the cookie/browser use case. There are OAuth2 flows that don't involve a browser.\n. > Any tip about What is the most efficient way of getting the current logged in user's Id in ASP.NET Core\nPut the user's id as a claim in the cookie when you sign them in. In fact, the default UserClaimsPrincipalFactory does this already: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs#L89\n. If the request is authenticated and the role is in the cookie, then why query the DB? Instead use:\nUser.IsInRole(\"foo\")\nor\nif (User.HasClaim(\"role\", \"admin\"))\n. > BTW, how do I refresh the cookie after I update a user's claims?\nCall RefreshSignInAsync on the SIgnInManager.\n. Well, the user manager uses the context, so I don't think so.\n. Extend the UserClaimsPrincipalFactory (https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs) and register it in DI. I show how to do this in this video: https://vimeo.com/172009501 from NDC.\n. yep, looks good. thanks.\n. yep, looks good. thanks.\n. >  @blowdart he is taking issue with your verbiage...\nmost people do... :trollface: \n. They're dynamic. I understand not wanting to keep the security stamp claim, but that's the only one you really need to replace (and that's easy to do).\nAlso this behavior of reloading only from the DB behavior will break OIDC federated sign-out behavior given the need to maintain the sid claim coming from an external provider (which is also dynamic):  https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.OpenIdConnect/OpenIdConnectHandler.cs#L123\n. The security stamp is only changed on these operations:\n- create user\n- set username\n- remove login\n- set/change email\n- set/change phone\n- set 2fa\n- update password\nit's not set when claims or roles change, so I'm not sure I agree with this:\n\nthis feature is about clearing out security related claims or any other things that might have changed in the user\n\nso it really seems the security stamp feature is about when the user's credentials change, not when their data changes.\n. Regardless of my use case, this still breaks federated sign-out with the OIDC middleware. Perhaps you and @Tratcher could discuss?\n. Also, something to consider: Make it easier to extend the existing SecurityStampValidator. It looks like I can't derive from the existing, and instead have to replicate all of the same logic. Perhaps either some virtuals to break apart the check vs. the replacing the user. Or just move the logic of checking for enough elapsed time into an extension method. Or both.\n. Wait, I just looked again at the implementation in SecurityStampValidator. If the validation is successful (meaning the security stamp has not changed), then the user is replaced. So a new cookie is issued even if nothing security related on the account has changed. \nI now get the signout part, but why reissue/replace the claims? That's the \"feature\" I don't understand. Replacing the user seems to be additional behavior beyond the stated purpose of \"when you want to sign out the user everywhere\".\n. Turns out it's impossible to build a custom IUserClaimsPrincipalFactory that copies over the claims from the current logged in user, because it's called from within the authenticate phase of the cookie MW. IOW, the cookie mw calls security stamp validator, which calls user manager, which calls my IUserClaimsPrincipalFactory, which tries to call authenticate on the authentication manager, which tries to call into cookie MW. Deadlocks.\n. Right. See my comments about about that. \n. But if you care about this, then when your admin UI removes them from the admin role you'd also trigger the security stamp being changed (as you said above). Thus the user would be forced to login again.\n. Begs the question why this wasn't done automatically in the AddRole APIs. Or rather, remove role APIs.\n. Yea, I hear security is hard. \n. Here's an idea: Augment the existing security stamp validator to roll over a list of claims that you can configure on the options. So my app can whitelist the claims I trust to slide from the old cookie. The rest will load from the DB. The default is an empty list. This list would be on the yet-to-be-created SecurityStampOptions class that should have been on the IdentityOptions :)\n. Yea, I guess that'd work. Only issue is DI -- how does the current security stamp validator get it? Another interface in DI just for this? I don't want to have to get into what's already happening in AddIdentity with all it's encapsulation of the cookie MW config.\n. Yea, ok. I guess that'd work. \n. What if we need some additional logic to carry over claims beyond the OIDC logic for the sid claim? I guess if an app is doing something custom, then it'd need to know and include the sid as part of that?\n. Ok, so the OIDC MW config will somehow hook into it automatically, but if someone custom must do it they then need to know to include sid in their custom implementation.\n. > or the fact that the event lives at the top level of IdentityOptions\nThis is why there should be a security stamp options (maybe in 2.0.0 when you can add a breaking change).\n. After a quick glance, it looks ok to me (FWIW)\n. You can update that user's security stamp in the DB. This will trigger signout of any app that honors the security stamp.\n. It is done automatically: https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityCookieOptions.cs#L36\n. You'd need to build your own at that point.\n. What if you need to check a password history list?\n. Yes, that's why it's passed, right?\n. Well, that's just one example. Perhaps per-user settings? Could be anything, I suppose.\n. FYI -- I added these two lines to my DbContext's OnModelCreating:\nbuilder.Entity<IdentityUserClaim<string>>().Property(x => x.Id).ValueGeneratedOnAdd();\nbuilder.Entity<IdentityRoleClaim<string>>().Property(x => x.Id).ValueGeneratedOnAdd();\nAnd it seems to have helped. So again, seems like it would make sense to include these in the base implementation.\n. Not sure if this is what you're asking, but these two classes I mention above have a hard coded int Id as the key regardless of the TKey used for the IdentityUser<TKey>.\n. > BTW, what provider exactly (name and version) are you using?\n\"Npgsql.EntityFrameworkCore.PostgreSQL\": \"1.0.2\"\n\nstill not sure whether this is a problem in our code.\n\nWell, it's an internal thing and for those who don't know how to read the source they'd get stumped I think. If it doesn't hurt the SqlServer scenario, then why would it hurt to add the explicit schema config?\nI'm not sure it's fair to expect the provider code to infer the assumption simply based on the property name Id. What about any other int property? Is it a standard expectation in EF Core that an ind Id implies an identity column, or just the SqlServer side of that? \n. Thanks for looking into it more -- I've not had time.\n. IIRC all I did was create a new ASP.NET Core w/ ASP.NET Identity project, change the connection string to use PostgreSql, created the DB, created a user, and added a claim. Do you want code for this?\n. Sounds like they're caching a DbContext somewhere they shouldn't (perhaps singleton in DI?). That's my guess.. > @brockallen Have you met this issue before?\nIn other contexts, yes. Your config does not seems to be setting up a singleton, so my hypothesis seems incorrect.. > In startup.cs, i need to get the instance of signInManager, so i create a instance like this:\nSo you do have a cached reference. Elsewhere in the app, you should use DI to obtain references/instances of the UserManager.. Also, the base CancellationToken is not available either :/. So having opened this, I'm interested in discussing if it makes sense to open those base APIs as protected, or if you feel like that opens up the internals to too much access. I was able to successfully work around this, but many things from the base are not protected. So, more of a discussion point.. The project I am on is still on 1.0. I'm looking at the 1.1 code -- looks like many of these were opened up, so perhaps this issue/discussion is moot.. Yes, the Id is provided by a migration tool, IIRC.. The contents itself. The data type used in .NET is a GUID, but then it's converted to a string before using in the DB. This is not a PG issue, IMO, it's an ASP.NET Identity in its string mapping for guids as the PK.. ASP.NET Identity is being used to provide a new identity management system for an old, existing one. Data is being imported, so the Id is being set explicitly as part of a data migration/import from the old system. Then yes, during normal processing, queries are being done and somewhere, somehow the GUID Id being used is cased differently when a query is being done. Possibly due to ToString() on the GUID object emitting casing that differs form how their old system had it, and how it was imported into ASP.NET Identity.\nI can ping the customer to make any additional comments here.. Yes, IMO, this was never a PG issue except for the fact that it's case sensitive whereas SqlServer is not (by default).. I had built IdentityManager for AspId2: https://github.com/IdentityManager, but haven't had time to update it for AspId3.\nA community member has forked it and made it work with AspId3: https://github.com/IdentityManager/IdentityManager/issues/244. > return my own MyAppClaimsPrincipal(id) implementation.\nIIRC, according to @blowdart that's not supported.. Vague yet informational messages (e.g. if you have gotten your password wrong X times, you will be locked out for N minutes) and time constant middleware.. > Yes, but my point is that as soon as you do that, you know that that's an email that is registered.\nHow? If the password is right, then the user gets in and it's not an attacker. If the password is wrong, or the account is locked out you show the exact same error message that's vague but will let you know that if you get the password wrong too many times you'll be locked out. Additionally, sending an email to the account owner on lockout is another good mechanism to inform them what's going on.. Yep, it's not easy. Emailing the user when these things happen would be a nice back channel to the user so they know what's going.. This is already possible via the IUserClaimsPrincipalFactory. Too ambiguous of a name, IMO. I work on lots of projects that are doing authentication and that have nothing to do with ASP.NET Identity :). When the title here says \"service\", do you mean an HTTP-based API on ASP.NET Identity, or is this issue just a general feature list for the already developed Azure on-prem STS as mentioned here: https://twitter.com/PinpointTownes/status/857772475400290306 and several times on the ASP.NET Community standup?\nIf it's an HTTP-based API on ASP.NET Identity, then I think this is a great feature! So many apps need decoupling from the in-memory only programming model of ASP.NET Identity.\nIf it's the on-prem STS, then in the past I've heard this positioned as \"a STS where your client app can just change a URL and use any STS you want\", but these two things:\n\nClient token acquisition will be supported through the Microsoft Authentication Library (MSAL).\nOther features not supported by Azure AD B2C are out of scope as they would impede migration\n\nwill make it product specific, and thus the client application code is also then tied to the Microsoft STS product(s). If this is publicized as the goal (and also the constraint), then fine. But if it's positioned as compatible with any other OIDC token service, then it will be misleading. \nIf the client apps (I guess in the templates) use client libraries that were OIDC RP certified (https://openid.net/certification/#RPs), then you'd have a more believable story for compatibility.\nSo can we get official clarification on some of these questions? I think it would help the community in evaluating their options.. So in short, this \"service\" is a package that implements OIDC and uses ASP.NET Identity internally to manage the identities, and this OIDC server will behave exactly as Azure B2C? \nIs that a fair one-liner summary?. > That said, Azure AD B2C itself produces OIDC compliant messages and we will too, so you can just as easily decide to use any OIDC provider you want (like IdentityServer4, or OpenIdDict).\nWhile technically correct (and this also includes any other OIDC implementation), each has their own programming model, assumptions, and features. So just because they all do OIDC, it doesn't mean they all do the same thing or provide the same features for you or your security architecture.\n\nYup, the goal here is to build an aligned identity story across in-app, on premise and cloud scenarios. We want to make it easy to migrate from ASP.NET Core Identity to using Azure AD B2C as a cloud identity service.\n\nSo yes, thanks -- I think this clarification is helpful so people can make an informed decision.\n. Then call it B2C on-prem, or non-cloud B2C, or non-cloud Azure on-prem B2C or some such. If you give it a generic name, we'd not want people getting confused about what they were really getting. As we know, confusion on this platform is already at an all time high.. > We only plan to offer two options for authentication with individual user accounts: in-app or cloud\nIn-app means the same as we have today in VS2017, right? Or if this only means you only allow the B2C emulator, then what about those projects that want to build their own STS using ASP.NET Identity?. > Nope. When you select individual authentication with in app users store, the B2C emulator is automatically added and you have no way to avoid that.\nWell, then, that's wrong. This is like saying you'd force the MVC template to only run in Azure App Fabric.. But where's the ASP.NET Identity starter code? I guess I'm confused, and admittedly I have not installed any of the preview stuff yet.. > There's no beta to test yet. It's still very much a work in progress.\nTurns out that building a token service is a lot of work :). > That's why I admire the people that open-source theirs...\nWell, OSS is not free and not typically a charity. You have to evaluate the motivations of those that do. Ours is to sell consulting and services. Microsoft's is to sell Azure.. Sure, but Microsoft will (if not already) OSS theirs. \nThe most important thing, which you've somewhat gotten at, is what's the right token server for you. If you plan to use and move to Azure B2C, then I suspect the Microsoft one will be the right choice. But if you're not sure, or you need more features or flexibility than Azure B2C, then the Microsoft token server will probably not be the right choice for you.\nI hope Microsoft has the courage and honesty to be very clear on this point as they move forward promoting their token server. They have a huge amount of power and influence in what developers hear and think (regardless if the info is correct or not) in their marketing and in things like the File->NewProject experience.. @Ponant I thought I was clear... the Microsoft token service (from their own words if you piece enough of it together) is designed for eventually moving your users and token service to be hosted in Azure B2C. It's not a more general purpose or flexible token server. That's all.\nWhat I'm trying to protect against if when people are told half-truths and manipulated in order to sell a product that's not appropriate for their needs. I'm not saying Microsoft has done this in regard to their new token service, but I have seen it done elsewhere for other products in other scenarios. So I'm just trying to keep Microsoft honest about what they are building and what it does.. I think what you are referring to is the MVC/ASP.NET Identity templates that consume an OIDC token service, which is separate from the token service itself that is being provided as the migration path to Azure B2C. \nAnd I think, in a sense, your slight confusion has illustrated the exact concern I'm trying to raise. By blurring the distinction between the consuming app and the token service itself (or another way to look at it is by failing to explain with extreme clarity the distinction between the two), it's easy to fall into the situation where File->New Project has led you into being spoon fed a token service whose design is to funnel you into Azure B2C, unbeknownst to the developer. That's the power of owning VS and the File->New Project message that is delivered to developers. Most folks don't know any better that this is not the right choice for them or their companies or projects. For many it is, but again, if it's the only choice how would a developer differentiate?\nIMO, those should be two different project templates. But that doesn't demo well on stage at conferences and during keynotes.. > I guess my point is that if identity is going to be made so hard to deal with that many developers will simply not use it and opt for a \"home grown\" path of least resistance solution which could have major security problems.\nThe problem is that identity is just as much a business feature as anything else, while also concerning security. The reason IdentityServer is so popular is that because identity is not something you can productize as a cloud hosted SaaS offering and control and customize. IdentityServer does take care of the security stuff, while designed to allow the developer to do the customization they need. So it's an option for you instead of doing a \"home grown\" solution.. From the client app perspective, I think you're right and that can be achieved in the templates or just by adding the AddOpenIdConnect authentication handler into DI. It's minimal code, so in a sense, there's already not much ceremony to it.. > Are you suggesting to add options to the core library to accommodate the EF library that implements the extensibility points?\nAh, ok, I misread -- so you are. So why not just rev this library differently and let people know it's a schema change on new versions? More flags seem like adding crazy complexity.. What about scenarios where customers don't want their own token service and just want an identity database? Shouldn't all this config for the onprem B2C be in a separate DB and corresponding config system? The bloat being added to AspId is worrisome -- I'd really like to see it maintained separately. I know you're worried about customer confusion and conversion/migration to B2C, but conflating these two won't help. If you must keep them them same, then rename this to \"Azure OnPrem Identity\" or some such.  // @danroth27 . These are two different features: Identity database and token service database. It's like saying let's put Program.cs and Startup.cs all into a single file. Oh wait...\nAnyway, it does affect people even if they don't use the APIs -- it's non-trivial to not use the EF stuff out of the box and thus my DB gets polluted with all these \"additive\" features that are unused.. > One thing I don't understand is why you have to support the 1.0 schema in 2.0 (for the EF provider). Why not providing a migration script/class to make the necessary changes in the DB?\nUnfortunately, EF migrations have never been and aren't currently designed for library authors, as they are provider specific.. > Historically the 'database migration' path has been rocky\nThis is the only way a 1.x project can move to use these new 2.0 features, right?. > As part of this work, we would also make IdentityRoles optional\nSounds interesting.. > I'm looking for similar thing, because I'm thinking about moving my existing code to ASP.NET Core. I'd like to know how to create similar thing best way possible.\nIdentityServer: https://identityserver.io/. > why you close this. there is a big bug here. you convert Username to name claim and this is wrong.\nThis is a valid complaint, but probably different than the one you originally raised. I agree that ASP.NET Identity should not be putting the user's username as the display name claim. But it's done that for a while now (unfortunately).. You can just as easily use OIDC from WebForms -- just put Kanata in front and use the OIDC authentication MW (like in our webforms sample: https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/WebFormsClient).\nIf you don't want to use OWIN, then you can implement the OIDC protocol manually (like our other sample: https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/MvcCodeFlowClientManual).. The beauty of OIDC is that it's designed to be easy for clients to consume. So webforms, php, JS, python, etc. should all have an easy time. The main requirement is a JWT processing library. The one from Microsoft requires .NET 4.5, but there are others for .NET pre-4.5.. The name DefaultSignInScheme is really the wrong one given what I think the intent of this feature is. I think your intent is that this is meant for the external authentication middleware, right? This property should be renamed to be DefaultExternalSignInScheme. Perhaps the optional scheme param on all the HttpContext APIs should be removed and make it explicit. Given these global defaults and the implicit behavior, it seems brittle.. > > I think your intent is that this is meant for the external authentication middleware, right?\n\nNo, it maps to any call to SignInAsync without parameters.\n\nBut that's mechanics, not explaining the intended use case. There are two possible semantics and it's unclear which is the intended one. One scenario is you have someone building a login page that wants to issue a cookie, so they use SignInAsync without the scheme (thus getting the DefaultSigninSceme, or DefaultScheme). Then there's the other scenario where you set the DefaultSigninSceme to be an external cookie so the external authentication middlewares don't have to be explicitly configured with a SigninSceme. Those two models are not consistent. I just want to know which one is the intended scenario for DefaultSigninSceme.\nIf it's the first scenario, then I'd say it makes no sense to have a separate DefaultSigninSceme, because really what this really would mean is you want to issue a cookie with the DefaultAuthennticationScheme. This means there's no point in having a DefaultSigninSceme. \nIf it's the latter, then I'd say the name DefaultSigninSceme is misleading and and should be called DefaultRemoteSigninSceme instead.. > We started with almost no defaults and very quickly we ended up with defaults for everything again.\nRight, and we've always recommended that people do explicitly set them so there's no magic and/or misunderstanding. That's why above I suggested removing the ability to not pass a scheme to the various authentication service API. This would eliminate any ambiguity. And as you said, perhaps the only default scheme that makes sense anywhere is the DefaultAuthenticationScheme to be used by the authentication middleware.\nI'm not adverse to a DefaultSigninScheme, but the semantics should be clear. From my perspective based on all that I've seen, my guess on the design and intent was so that you did not have to explicitly configure each external authentication middleware with the external cookie scheme you wanted to use. This is why I suggested renaming DefaultSigninScheme to DefaultExternalSigninScheme.. > There is indeed two slightly different scenarios that you described but the default sign in behavior is still consistent.\nSure the behavior is consistent but if affects how your write all that other code. And if all that other code has been written based on one of the semantics and the config value is changed it changes semantics. So it's the semantics that are not consistent.\nHow would code in a library know the intended semantics and do the right thing? I know the answer -- it's to always pass a scheme explicitly to any of those APIs. But all the external middlewares pass null by default and don't require you to have explicitly configure them. You hinted at above is not something that you want people to have to do.. > In what version? 3.0?\n@davidfowl  Also, I'm really sorry that it's only now that I have had time to provide this feedback (I wasn't being paid to work on the OSS, whereas you guys were and I had my own bills to pay). I know that this feedback and suggestions would be breaking changes. But that's part of the price for pushing releases so fast without giving time to foster more feedback. Perhaps you guys should hire folks to give feedback, rather than relying on the open source model of expecting free labor from the community. Hasty releases to meet arbitrary dates means you will need to get used to major version changes every 6-12 months to correct mistakes. All in all, this ends up being more costly (mainly to your customers).. > We started with something fairly close to what you want with explicit schemes everywhere. But we got several sources of feedback to make it easier to configure, especially for apps where a specifying one or two defaults is actually enough.\nSo it sounds like this motivated the DefaultSigninScheme, which sounds more like my 2nd description of the intended use case. Would that be accurate?. Ok, I'll rephrase what I think the problem is. Maybe it'll help the discussion.\nThere are 3 main scenarios for the SignInAsync method:\n\nLogin code within in the app needs to issue the authentication cookie (high trust)\nExternal authentication needs to issue the main authentication cookie because the external provider is first-party (high trust, AAD/OIDC)\nExternal authentication needs to issue an external authentication cookie because the external provider is third-party (low trust, google/facebook and sometimes OIDC)\n\nThis, to me, is the confusion over the semantics of calling SigninAsync with a null scheme. It's unclear which of these two semantics are to be used. For the two high-trust scenarios SignIn should be using the default authentication scheme to issue a cookie (not the default signin scheme since you've shown those can be different). For low-trust scenarios SignIn should be issuing the external cookie (which is where a default signin does make sense, but could be better named IMO to indicate it's low-trust or external).\nHopefully this helps. I don't know the solution (other than the suggestions I made earlier and retated), but it only took a day of building a real app for me to run into this. This is why my frustration took over above with the comments about features needing more time. For my short comments, I apologize.\nThis leads me to think you should always be passing a scheme (and thus deprecate the ability to not pass a scheme).\nGiven that it's complicated, providing settings to facilitate one scenario (at the expense of others) doesn't help, IMO. If you get feedback that something requires too many settings, then push back and explain that sometimes it's complicated and thus a simplification is the wrong thing.. This thread has also made me realize that the same can be said for DefaultSignOutScheme, as that falls back to the DefaultSignInScheme rather than just jumping to the DefaultScheme.. I'm unclear on what's being asked.\nIf they want to setup some additional FKs in their DB, then go for it. But that's beyond the scope of either IdentityServer or ASP.NET Identity, I'd think.. > Is it a replacement for IdentityServer4\nI can only speak for the IdentityServer side of things, but IdentityServer is not going anywhere. We will continue to provide a flexible, customizable, and spec-compliant OIDC and OAuth2 token server.. I bet VS auto added the nuget reference, thus the conflict...?. I bet VS auto added the nuget reference, thus the conflict...?. A more in-depth look at the issue: https://leastprivilege.com/2016/08/21/why-does-my-authorize-attribute-not-work/\nBut the gist of is is that User.Identity.Name and User.IsInRole are legacy APIs. If you use them, you will have these legacy issues to deal with. Use the Claims collection or the FindFirst claims APIs instead.. A more in-depth look at the issue: https://leastprivilege.com/2016/08/21/why-does-my-authorize-attribute-not-work/\nBut the gist of is is that User.Identity.Name and User.IsInRole are legacy APIs. If you use them, you will have these legacy issues to deal with. Use the Claims collection or the FindFirst claims APIs instead.. Did you try to just enter one of the codes, instead all of them?. Did you try to just enter one of the codes, instead all of them?. > Encrypt the codes\nyes, i opened an issue for that a while ago. > Encrypt the codes\nyes, i opened an issue for that a while ago. > What do you think encrypting the codes would give you here? You still need a valid password, they're for use when you don't have your 2fa app.\nI always try to protect the identity system with the assumption an attacker has read-only access to the DB. Thus, protecting access tokens, 2FA codes, 2FA reset codes, email confirmation codes, etc. In ASP.NET Identity some of these values are protected by virtue of data protection and not storing them in the DB in the first place. But many other values are in the DB... in plain text. . > What do you think encrypting the codes would give you here? You still need a valid password, they're for use when you don't have your 2fa app.\nI always try to protect the identity system with the assumption an attacker has read-only access to the DB. Thus, protecting access tokens, 2FA codes, 2FA reset codes, email confirmation codes, etc. In ASP.NET Identity some of these values are protected by virtue of data protection and not storing them in the DB in the first place. But many other values are in the DB... in plain text. . > HOW CAN I FIX THIS\nPerhaps with a separation of concerns: http://policyserver.io/. Consider the identity system separate from the authorization system. The video in the link above elaborates on this design.. > HOW CAN I FIX THIS\nPerhaps with a separation of concerns: http://policyserver.io/. Consider the identity system separate from the authorization system. The video in the link above elaborates on this design.. These additional claims need to be take into account on the SecurityStampValidatorOptions's OnRefreshingPrincipal event.\nhttps://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/Identity/SecurityStampValidatorOptions.cs#L25. These additional claims need to be take into account on the SecurityStampValidatorOptions's OnRefreshingPrincipal event.\nhttps://github.com/aspnet/Identity/blob/c7276ce2f76312ddd7fccad6e399da96b9f6fae1/src/Identity/SecurityStampValidatorOptions.cs#L25. Just add a claim of type \"role\" to the user's claims collection in the DB.. Just add a claim of type \"role\" to the user's claims collection in the DB.. > Yeah, the role claim doesn't seem to affect IsUserInRole or AuthorizeAttribute with a role name.\nPerhaps your claims identity is not being created the way you need it to be: https://leastprivilege.com/2016/08/21/why-does-my-authorize-attribute-not-work/. > Yeah, the role claim doesn't seem to affect IsUserInRole or AuthorizeAttribute with a role name.\nPerhaps your claims identity is not being created the way you need it to be: https://leastprivilege.com/2016/08/21/why-does-my-authorize-attribute-not-work/. Perhaps the comment I can add here is that it's very rare that in a real production app anyone would really use the default ASP.NET Identity UI/templates. They will certainly be a starting point, but they always need tweaking/customizing. This is certainly the case for every identity project I work on or that I come across in my work. \nSo I think I agree that the more the UI is encapsulated the harder it is to use as that template/starting point. And the more there are tacit behaviors/features, then the harder it is to understand and take control of those.. Perhaps the comment I can add here is that it's very rare that in a real production app anyone would really use the default ASP.NET Identity UI/templates. They will certainly be a starting point, but they always need tweaking/customizing. This is certainly the case for every identity project I work on or that I come across in my work. \nSo I think I agree that the more the UI is encapsulated the harder it is to use as that template/starting point. And the more there are tacit behaviors/features, then the harder it is to understand and take control of those.. Yes, it's still in there (and presumably supported). My suggest is to create an ASP.NET Core 1.x project and see how the starter code does it.. Yes, it's still in there (and presumably supported). My suggest is to create an ASP.NET Core 1.x project and see how the starter code does it.. Sounds like a DI config bug. Normally AddIdentity<CustomUser> would add the UserManager<CustomUser>. Sounds like a DI config bug. Normally AddIdentity<CustomUser> would add the UserManager<CustomUser>. You don't need to migrate your user data to use IdentityServer.. You don't need to migrate your user data to use IdentityServer.. Check the docs page: http://docs.identityserver.io/. Check the docs page: http://docs.identityserver.io/. IIRC, the decision to make the lifetime scoped was to try to protect people who didn't understand DI... at least that's how it was explained when I opened a similar issue back in 1.0 :). IIRC, the decision to make the lifetime scoped was to try to protect people who didn't understand DI... at least that's how it was explained when I opened a similar issue back in 1.0 :). > And what Brock said is true. Although I wouldn't phrase it like that.\nThat's the difference between us: decorum :). > And what Brock said is true. Although I wouldn't phrase it like that.\nThat's the difference between us: decorum :). Identity != Permissions. Identity != Permissions. ASP.NET Core does, yes. But that's different than ASP.NET Core Identity.. ASP.NET Core does, yes. But that's different than ASP.NET Core Identity.. There are commercial products that offer the API and UI: https://www.identityserver.com/documentation/admin-ui/. There are commercial products that offer the API and UI: https://www.identityserver.com/documentation/admin-ui/. > Xena.IdentityServer.Services.CustomDataProtectorTokenProvider\nThat looks more like custom code in IdentityServer.. > Xena.IdentityServer.Services.CustomDataProtectorTokenProvider\nThat looks more like custom code in IdentityServer.. ",
    "kowsheek": "I'd love to see MongoDb support for Identity, both standalone and through EntityFramework. While I'm not using Identity & MongoDb right now, I'd imagine it being used with Mongoose.\n. ",
    "dstockhammer": "At the moment the MongoDb C# driver does not support dnxcore, and I'm not aware of any plans to add support in the near future. I suppose that's a problem for \"official\" MongoDb support in a Microsoft.AspNet.* package?\nIf however this is acceptable, I'd be happy to generalize my (working) implementation and submit a PR for review.\n. ",
    "Tratcher": "Initial theory: there are two CookieAuthMiddleware with the same configuration.\n. :+1: \n. @HaoK \n. This probably needs to be a production dependency, not a test dependency.\n. Progress. :shipit: \n. Adding samples would be nice. I'm not familiar enough with Identity to follow this directly.\n. https://tools.ietf.org/html/rfc6749#section-4.2.2\n   expires_in\n         RECOMMENDED.  The lifetime in seconds of the access token.  For\n         example, the value \"3600\" denotes that the access token will\n         expire in one hour from the time the response was generated.\n         If omitted, the authorization server SHOULD provide the\n         expiration time via other means or document the default value.\n. Though storing an AuthToken becomes more difficult if it's more than just a Key/Value pair.\n. :shipit: \n. @HaoK \n. :shipit: \n. :shipit: \n. https://github.com/aspnet/Announcements/issues/197.\nUse CookieSecurePolicy.Always here, the default is only SameAsRequest.\n. @mikes-gh no, it needs to be the auth scheme from your CookieAuthenticationOptions that stores your short term login-cookie. If you're using Identity then it will be \"External\".\n. @HaoK Lets go over it offline. Who owns this template these days?\n. Here's my changes to the template for the different options:\nOption 1: Reset the state at the start of the login flow.\n// GET: /Account/Login\n        [HttpGet]\n        [AllowAnonymous]\n        public async Task<IActionResult> Login(string returnUrl = null)\n        {\n            ViewData[\"ReturnUrl\"] = returnUrl;\n            var info = await _signInManager.GetExternalLoginInfoAsync();\n            if (info != null)\n            {\n                await _signInManager.SignOutAsync();\n            }\n            return View();\n        }\nThe above works for the Login link, but didn't work in some of my [Authorize] tests because LoginProviderKey is missing from the auth properties collection so GetExternalLoginInfoAsync returns null. Needs investigation.\nThe following works in both scenarios:\n// GET: /Account/Login\n        [HttpGet]\n        [AllowAnonymous]\n        public async Task<IActionResult> Login(string returnUrl = null)\n        {\n            ViewData[\"ReturnUrl\"] = returnUrl;\n            var externaluser = await HttpContext.Authentication.AuthenticateAsync(\"Identity.External\");\n            if (externaluser != null)\n            {\n                await HttpContext.Authentication.SignOutAsync(\"Identity.External\");\n            }\n            return View();\n        }\nOption 2: Detect if the external identity is already present and resume the login flow from that point.\n// GET: /Account/Login\n        [HttpGet]\n        [AllowAnonymous]\n        public async Task<IActionResult> Login(string returnUrl = null)\n        {\n            ViewData[\"ReturnUrl\"] = returnUrl;\n            var info = await _signInManager.GetExternalLoginInfoAsync();\n            if (info != null)\n            {\n                return RedirectToAction(\"ExternalLoginCallback\");\n            }\n            return View();\n        }\nOption 3: Check for the external identity when the users selects an external provider from the login page:\n```\n        // POST: /Account/ExternalLogin\n        [HttpPost]\n        [AllowAnonymous]\n        [ValidateAntiForgeryToken]\n        public async Task ExternalLogin(string provider, string returnUrl = null)\n        {\n            var info = await _signInManager.GetExternalLoginInfoAsync();\n            if (info != null)\n            {\n                return RedirectToAction(\"ExternalLoginCallback\");\n            }\n        // Request a redirect to the external login provider.\n        var redirectUrl = Url.Action(\"ExternalLoginCallback\", \"Account\", new { ReturnUrl = returnUrl });\n        var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\n        return Challenge(properties, provider);\n    }\n\n```\n. @kroniak I don't follow your question about option 1. If the user goes to the login page then they want to log in, no? The link won't be present if they are already logged in.\n. Either way, if they end up on the login page it seems reasonable to do the login flow.\nThat said, some version of option 3 is the most graceful.\n. FYI Here's the proposed fix: https://github.com/aspnet/Templates/pull/662\n. @mikes-gh when we tested this we found it took deliberate effort to get to a cached version of the login page. The most obvious way was to click back, but you'd have to do it multiple times with the right timing to get past the external provider redirects.\nWhen reviewing option 3 we found it added complexity and opened additional security concerns around anti-forgery.\nIn the end we opted for a simple solution that addressed the most reproducible scenarios.  We also plan to address https://github.com/aspnet/Security/issues/859 which should prevent this issue when switching providers.\nIf this continues to be a common problem for users we'll see what else can be done about it.\n. @gdoron it would help if you shared a sample app showing your usage scenario. It's unclear how significantly it diverges from the template.\n. That's a curious pattern you have there. It looks like you render your login section and register section into every page. This is half-way to a SPA app. I don't see a fool-proof option for you. You're already using Option 3 as described above, and that should be adequate unless the user wants to switch providers part way through login. You could facilitate provider switching by adding a \"Start Over / Switch Provider\" button to your ExternalLoginCallback view that pointed to the LogOff endpoint.\n. Yes, that would be in line with what we now do in the templates.\n. No, he meant that for you to have copied external claims over to the app cookie you already had to hook one identity event. Now there will be another identity event you'll hook up at the same time.\n. What's the other event where the user can copy claims from the external cookie to the identity cookie?\n. ? Wasn't there an event at the identity layer?\n. Can anyone share a sample app (via a github repo) that reproduces this? Especially the MVC controller code.\nMy only theory is a threading issue because IHttpAuthenticationFeature.Handler is cleaned up towards the end of the response.\n. It's always been in seconds, our rounding just want very good. . Also removing the Microsoft.Extensions.Configuration.Binder dependency?. The 500 is caused by an exception on the server. Check the logs to see what the exception was.. I meant application logs: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging. Stack trace?. No repro, 2.0.1 works fine locally. \nNote 2.0.1 uses v2.6 of Facebook's API which will expire on July 13th. This shouldn't be a problem as it will gracefully roll forward to 2.7.\nhttps://developers.facebook.com/docs/graph-api/changelog. We just went through this on another thread and it was SameSite broken on iOS 12. The trick is figuring out which cookie is affected. A Fiddler trace is your best bet. I know you can't do that from iOS, but a trace using your desktop browser should give enough of the same data to identify the cookie even if you don't experience the issue there.. Fiddler is a really useful HTTP debugging tool to capture your traffic.  Facebook and Google aren't in the template, I'd want to see the trace that included any modifications you've made.\nOn iOS all browsers are forced to use the same stack underneath. Only the UI ends up being different.. Save As a .saz file (as opposed to Exporting).. Yup, there it is. Your request to /signin-facebook returns the following cookie with SameSite enabled:\nSet-Cookie: Identity.External=CfDJ8Elg8Qw3o45IkiKXhK_kwNnfMBLXzAsSfq-sY5-ZfjbllFMM_lTPk5I0dmWb3r8GdnhfuXSiIJqiA5ChL_WHcXTqsCulyoIhVFUJy2Oy07Q-1d7ljgUEgBOwzeNLHINojoMeL6wT8HISrbRpzp3cMm_LABTe5fLp4Vbt5ae13m8lI6_GkKb9w-wAR2PVXT0u_RtVzTBJ-lEcsXy2_dhS5a-TaZOiZMPQYvx7cOIxjXvf4x9visz3TOtF96I98f4mLqNBZ4xhZGmcOOe6oSjqynsqR4ZvIK9fRwbo8CF8yiL9B44UmxFqstky5IDdvuM_Is2faeDU1RNB4u35At9ElrJrjbijybVAAhoK4H-wnFbBQ6F7z64F7Z7PpcJFMFgM4v2tuYW4tp1lm5VUYwdtz_t1x89OBKpRcygwifyN5rHv7UJzB4OQjZ8v3IQiRd7qNl8rF1PdplaLjGmLO7YLSKyi4khccqjqofJ0fQ7-35npcw_v456P54P4KRzL0llxj42PBVm1Jnq25m7KOxF96iCvScJplHz2K6TOH1x2R3m6Utc_y0RE20wEGum0jB32UskHDI7vMhN-PDwBP7Je2WM4EhC1Q5CyrTMyEPD3DuRs4EQXP1YGoGf_zu2uu9Rznlt0aWtbK5jqwZqDEUuiFXCPkM-8v9rtMg1VQ62ExXZuK9GX5cm9etnSAAQ07GqJCss1L9bvKc-p--Pp5Qlx9f_TbNtE0nT8J7TR-EoMtm7rxVbbo2DS1HHQT9S9ESk7QnXlJAxbiHRx-38bzdCP16oNjpZ9dxgdRKySsvBvDOo7IY58eC2N1oNirLat9mBJm513VK_7cKSjSQhAmRyUor1pBWnp7JKZjyXpQIXVHF7diYbiTJ_oh_Col_Hk7Ec3zg; path=/; secure; samesite=lax; httponly\nConfigureExternalCookie should be the right one to deal with that. Why are you creating a new CookieBuilder rather than modifying the existing one?\nYour request to /Account/ExternalLoginCallback also sets a cookie with SameSite:\nSet-Cookie: .AspNetCore.Identity.Application=CfDJ8Elg8Qw3o45IkiKXhK_kwNntz3o2CaXqhQK8CWSwyxQkhma5oOIVhc0F-4lFSN2P8uThkxJPLYU3HEgvyLsyM6vmDFCWSdUHoVBzsgRZa9xMjBU4ftPyXqvfHAbgLSoWp7rGb49AOOtCoKtXaKYzq5B2zUucK4CwrStVlFcMlsX485PvtXMmCwoCjv5pOixS90oC6cuy5AkpvSWARf2-tFIsgOFsj3y75hZ08nLqAvSVAMhq7LJ-upTIHngqzWkndXCE5kNyUPkHFYJKPt7qT42h00y5erwtHSmpf2BOYI9KS4AFzS-lik5rPoh6qU2Oz45UHt9AHAJfl9W2T-Zin50wV2fr0NxDLCuUJbIPOe0mJHDIeJ72RN9_JO1lFwdaTxAVmkpn6SI5xmKbreRAmrUkaRvLUzWxF25qBshicYpzLKKgIMmRYlbY8cRHuljhcUpnRhsF5cGDSihVinktc_CecaGkOwb7IV7ZxUwaaDWvozLNPa8B1kQyNTt2Nro_vdMnJ9P7u29R0Jd_hQA67icSafCut2kBZ9YIVDMruNqQDrG6EEGl8NJkXdllYvVu9IgD6xY3MqT5kWnfVwg3GCDbVRNYOYpx6F1v4DBqmirnMXve8Wp5F__Iey0Hoym3frK0OY47hVsgFXQs54Ab6e_TJzLhsszAN2qoF4aERTtUaZkVnWeDZ_8nFN-Pe-GKP9a5ejyPC8y8n60aKcs48fhtAQ5esbZ4kVHvIMiXreIt9zksSfaHK2zrOMdyPIBXB_pPWucoJmR9R8E5X56KUk0yRcsrNSTb4ufuxU4VtU-aoFF8tau0rNLSewBGbvo1XA; path=/; secure; samesite=lax; httponly\nThis one is configured by ConfigureApplicationCookie.. See https://github.com/IdentityServer/IdentityServer4/issues/2595#issuecomment-425068595 and https://bugs.webkit.org/show_bug.cgi?id=188165. Apple claims this is by design and every other browser is wrong.\n@blowdart note he had to disable same site for both his external cookie and his main auth cookie. In other words, Apples implementation seems to negate the use of SameSite in any OAuth implementation.  We'll want to verify this with a local repro.. @blowdart will write the announcement.\nTemporary workarounds:\n```\n// With Identity\nservices.ConfigureExternalCookie(options =>\n{\n    options.Cookie.SameSite = SameSiteMode.None;\n});\nservices.ConfigureApplicationCookie(options =>\n{\n    options.Cookie.SameSite = SameSiteMode.None;\n});\n// Without Identity\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\n{\n      options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\n})\n``\nAnd link to https://github.com/IdentityServer/IdentityServer4/issues/2595#issuecomment-425068595 for IdentityServer based workarounds.. It's a generic property bag, you'd want to preserve anything you can.\n. CurrentPrincipal and NewPrincipal?\n. Refreshing?\n. This is going to come back as obsolete with the fwlink right?. is this the internal one from Security?. formatting?. nit extra line. Without is a bit odd.Remove, orDisable`?. @haok. Null ref? The feature isn't even there.. https://github.com/aspnet/Templating/blob/d2af13517b559a86a70a571d1349a3773a3edd23/src/Microsoft.DotNet.Web.ProjectTemplates/content/StarterWeb-CSharp/Views/Shared/_CookieConsentPartial.cshtml#L4-L5. ",
    "pranavkm": "@divega It doesn't look like anything outside the type depend on this method. I could either leave it as is and add the generic type constraint or make it private since the method doesn't necessarily belong on IdentityBuilder. This change goes into the release branch as a reactive change to https://github.com/aspnet/DependencyInjection/commit/807632958f21b5d494a60c3daaadf646d15e216f which makes me slightly hesitant to make the change from this PR\n. :shipit:\n. @hishamco might be useful since the checks will get moved to the top of the method with my script (versus after the ThrowIfDisposed that it does now). Just seems like needless diffs.\n. Checking this in. We can follow up on the test failure.\n. cc @javiercn \n. cc @Eilon \n. https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.Mvc/project.json#L64 needs to be deleted.\n. Yup.\n. cc @dougbu \n. :up: :date: \n. Note  : this if for the master branch \\ 1.0.0 tag.\n. :shipit: \n. Running build.cmd should install the SDK for you under %LocalAppData%. As long as you use the same shell to launch VS, (i.e. launch Mvc.sln from the shell) it should pick it up. Alternatively you can install the MSI from\nhttps://dotnetcli.blob.core.windows.net/dotnet/preview/Installers/1.0.0-preview2-1-003180/dotnet-dev-win-x64.1.0.0-preview2-1-003180.exe.. @HaoK - are the tests supposed to work on AppV?\nSystem.Data.SqlClient.SqlException : A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 25 - Connection string is not valid). The SqlClient exception was due to https://github.com/dotnet/corefx/issues/17166. Reverting to netcoreapp1.1 for now. Merged. We'll continue tracking the netcoreapp2.0 conversion via https://github.com/aspnet/Coherence/issues/166. @tarekgh the package targets netstandard1.3 which should support net46 according to the specs - https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.3.md. Plus, the tests run fine on OSes later than Win7. It doesn't seem like an issue with this package.. Is the newer package NS.Library 2.0.0?. We'll be switching to NETStandard.Library 2.0.0-* soon, while still targeting netstandard1.3. If the problem goes away in that case, maybe we can disable these tests for the time being and re-enable it once the migration is done.. Yup. I filed https://github.com/aspnet/Identity/issues/1153 to track it in this repo and marked this as a follow up issue in our repo migration tracker - https://github.com/aspnet/Coherence/issues/166. Here's the branch that shipped - https://github.com/aspnet/Identity/tree/rel/1.1.1. We forgot to change them in to tags at the end. There's a work item to go back and do this for our past releases.. @javiercn can you fix the crypto compilation issues here?. Moved to https://github.com/aspnet/templating/issues/183. Thanks for fixing it @javiercn . Fixed in https://github.com/aspnet/Identity/commit/e44cba9b752cf54ef75504051d291ae299a17779. Here you go - https://github.com/aspnet/Identity/issues/1574. @javiercn this is caused by the Mvc test target overriding the SDK's platform selection - https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Testing/build/netstandard2.0/Microsoft.AspNetCore.Mvc.Testing.targets#L19-L20. The issue that you're attempting to workaround has been fixed. Can you verify that you still need the target?. https://github.com/dotnet/sdk/issues/1729 might also be a result of the test target. Can you investigate \\ close if it's an issue with Mvc's target and not the SDK?. Cool, I didn't know about the Scaffolding experience whilst I created the issue. There were a couple of ideas thrown around as part of https://github.com/aspnet/Release/issues/235 to customize ApplicationUser. Do we want to use this issue to track those? I don't think there was a follow up to the conversation.\nTagging @HaoK  since he was also on that thread.. > So why would you want to disable it and use the UI?\nThey may set this inadvertently by specifying Mvc's compatibility version.. cc @ryanbrandenburg . @jenyayel this was likely a bug in the order of compiled views discovered from the library and the ones from the app. In preview1, the semantics were along the lines of Runtime Compiled Views -> Views from the Identity Library (it had an attribute that made it special) -> all views from .PrecompiledViews.dll. That explains the behavior you're seeing. Using the switch to disable precompilation in the app would be a good way to workaround this.\nFor preview2, we've moved to a different model of compiling Razor views so that the application produces a compiled view assembly both at build and publish time. This should generally eliminate these kinds of discrepancies between build and publish time. I'll do a quick sanity check to verify this issue is resolved in preview2 and get back to you.. Ok, verified this is no longer an issue with preview2 bits. (Microsoft.AspNetCore.App: 2.1.0-preview2-30500). I dropped in a file and was able to verify it is overriden both during build and publish times.. Will make changes in a follow up.. \ud83c\udd99 \ud83d\udcc5 . Getting this in to unblock builds.. @Eilon we have a change in the Razor Sdk that would cause Identity UI and AADIntegration UI to break when consumed. Preempting the issue by referencing the package.. cc @mikeharder \\ @mkArtakMSFT - I have a fix for one of the issues causing Identity tests to fail. There's a second issue that's currently pending ship room approval. https://github.com/aspnet/Mvc/pull/7672. I used a feature branch package to verify the issue's resolved when the package is consumed. IMO, we should treat this as a build break and check in this + the Mvc PR.. > Would it be problematic if we remove all the file providers from razor view engine options? \nThink the compiler throws if you have no fileproviders. You might have to hack it a bit. More specifically we don't watch for files in Release builds which is usually what exhausts file descriptors. \n. Adding a CompositeFileProvider that contains a single NullFileProvider might not throw. Highlighting the relevant pieces\n\nhttps://github.com/aspnet/Mvc/blob/release/2.2/src/Microsoft.AspNetCore.Mvc.Razor/Internal/DefaultRazorViewEngineFileProviderAccessor.cs#L21-L24\nhttps://github.com/aspnet/Mvc/blob/release/2.2/src/Microsoft.AspNetCore.Mvc.Razor/Internal/RazorViewCompilerProvider.cs#L53-L60. Could we close this? No reports of additional failures over 2 weeks now.. Specify a full path e.g. <None Include=\"THIRD-PARTY-NOTICES.txt\" Pack=\"true\" PackagePath=\"/THIRD-PARTY-NOTICES.txt\" /> seems to fix the issue. @StuffOfInterest would you like to send a PR to fix this?. :shipit: . Spoke with @natemcmaster offline. We plan on converting these projects eventually to netcoreapp eventually, so desktop would be out of the picture. Closing to avoid needless work.. > Can't find'C:\\projects\\identity\\test\\Identity.FunctionalTests\\bin\\Release\\netcoreapp3.0\\Identity.DefaultUI.WebSite.deps.json'\n\nDoes the 3.0 Sdk no longer generate a deps file?. ROT26 encryption!\n. Targeting dnx451 produces issues with System.Runtime.\n. CI is currently failing on this.\n. Reacting to DataProtection changes.\n. The Moq package is referencing a bad build of Castle.Core that supports dotnet5.4. We can do a scan of our imports at a later point when they update their dependency.\n. We don't ship this package, so referencing this from a shipping package is problematic. You can remove these. Did we figure out what the deal is with the cdn?. Don't reference this package.. <partial name=\"_LoginPartial\" />\n. Is this code directly from the templates or does it need to be reviewed?. <partial name=\"_ValidationScriptsPartial\" />. This should redirect to the website root return Redirect(\"~/\"); or a successfully deleted page. Redirecting to the page ./ is kinda weird.. <partial name=\"_ValidationScriptsPartial\" />. ILogger<DownloadPersonalDataModel>?. You likely need Encoding.UTF8. That said, this kinda feels icky, but there really doesn't seem like a more definitive way to do this.. ILogger<DeletePersonalDataModel>.  Is it still correct for a user to be signed in if this fails?. ApplicationException -> InvalidOperationException. ManageNavPages.Privacy. When do we get to this handler? Privacy.cshtml posts to this action and there isn't a link to this page.. We generally prefer tag helpers to HtmlHelpers. It's cleaner, more idiomatic code.. RedirectToPage expects to resolve a page. Since there isn't a page named ./, it ends up resolving the empty string which ends up in the app root. But that's just a weird way of going about it.. Should this elaborate and say, once deleted you cannot use your login credentials and would need to re-register?\nKinda unrelated, but is there a hook that let's the app developer also clean up other stored details about the user when this is deleted? For instance, if the user id is used to store my order history or posted comments?. AddModelError(\"Input.Password\",) if we'd like to show error along the password field.. If you do Post-Redirect-Get, you wouldn't have to rehydrate the data in the OnPost.  \nC#\nOnPost()\n{\n   await _signInManager.ForgetTwoFactorClientAsync();\n   return RedirectToPage();\n}. This shouldn't be a model bound property (same with Is2faEnabled). . This is fine. Bootstrap 4.0 has a utility class for this, but I guess we're on an older version.. Sorry, I should have included this in my review earlier. We should probably print a banner after the Redirect is complete that says the machine has been forgotten.\n```C#\n[TempData]\npublic string BannerMessage { get; set; }\n...\nawait _signInManager.ForgetTwoFactorClientAsync();\nBannerMessage = \"The current browser has been forgotten. You will be asked to login with your credentials the next time you visit this website\"\nreturn RedirectToPage();\n```\nand display the banner in the page if it's set.. Should this be Forget browser? Maybe a PM could help here.. You could just do\n// TwoFactorAuth.cshtml\nif (Model.BannerMessage != null)\n{\n<div class=\"alert alert-success\" role=\"alert\">\n  @Model.BannerMessage\n</div>\n}\nif you set it via TempData. Shouldn't need a partial\n. <partial name=\"_StatusMessage\" asp-for=\"Model.StatusMessage\" />. Brace on next line.. Doesn't this \"reset\" once you redeem all the recovery codes? I'm ok if that's the intended workflow but it's not keeping with the comment above the if. Can you give me some back ground on what this code is trying to do? It's not very clear.. Sorry, <partial name=\"_StatusMessage\" asp-for=\"StatusMessage\" /> is the right format.\nFigured out the issue with the error you're seeing. It's a bug that surfaces when the resolved value of the asp-for expression is null (which I imagine doesn't happen in the other pages). that I'm going to try and get it for preview1. You can continue using Html.Partial for now.. Just pass in the UserType here. There's no benefit to making the option generic.. We're picking up a bug fix made to the Identity UI package.. Commented out. Why is this commented out?. commented out. Bunch of more commented out urls. Can you uncomment them or remove them with a work item to add them back? Let's not leave commented out tests. Did you consider just subclassing from Xunit.Assert? https://github.com/aspnet/Razor/blob/dev/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/Assert.cs#L12. There is.. Is the fragment an <html> element? Why wrap it in a div? . Don't need the await. Why is this synchronous?. Why can't you do new HtmlParser().Parse here? The Response headers don't change the result from what I can tell.. C#\npublic string this[string key]\n{\n   get => _properties[key];\n   set => _properties[key] = value;\n}. Formatting - space after [CallerMemberName]. Why not call this SubmitRegisterFormAsync to keep the follow the convention established earlier e.g. ClickEnableAuthenticatorLinkAsync? The action is self-descriptive in this case rather than describing the side effect. This should ensure the opposite is true when authenticated i,e, #register does not appear for authenticated users. Btw, do you actually need this? Presumably we only need this for the deps file but we're have precompiled views.. Formatting. You'll need to send a PR to universe to mirror this package. See https://github.com/aspnet/Universe/blob/dev/build/external-dependencies.props#L220. Yeah, I guess we missed covering this in our take-over from Web.Sdk thing. We'd have to effectively move this from line from https://github.com/aspnet/websdk/blob/master/src/Web/Microsoft.NET.Sdk.Web.Targets/Sdk.props#L20 to Razor.Sdk. It's hidden behind the transition flag that needs to be cleaned up. Need one more round of stuff to get in to the CLI to sort those out.. Tracking this cleanup in https://github.com/aspnet/Razor/issues/2077. Ignore the version changes \\ new package references etc that were made. The intent of the PR is to ensure the design of the Razor.Sdk, ApplicationPartFactory is as we need. I verified that the functional tests in the app work and we code gen the same set of attributes that we previously did.. Property name. Ok. So don't use the NullPartFactory and write a custom part factory?. > The important bit is that the parts for an assembly always have to be instantiated through the factory \nWhy is this important? . Could this be non-Task IActionResult? . <partial name=\"_CookieConsentPartial\" optional />. Intentional?. Guessing we wan this back on (since there's real code we ship). Maybe add a comment that says why this is being done.. netcoreapp3.0 is required by the Sdk for inference of the RazorLangVersion when Razor.Design doesn't exist. Feature branch sdk. Feature branch Mvc. Needed in RCLs. This will get fixed eventually - https://github.com/aspnet/Razor/issues/2676. @pakrym looks like something changed here. Regardless using TestLogger works reliably. To add a bit more detail, the callback event on the mocked logger was no longer being invoked. Need to list these https://github.com/aspnet/AspNetCore/blob/master/build/dependencies.props#L73. Build time compilation doesn't work very well with desktop and I had a couple of other issues when I tried treating it the same as RCL. I'm going to remove desktop from the mix for now since it doesn't seem particularly relevant in 3.0. Tracking this via https://github.com/aspnet/Identity/issues/2046. ",
    "danielwertheim": "Let me try and explain again then\npublic class IdentityUser : IUser {\n    public string Id { get { return Email; } }\n    public string UserName { get { return Email; } set { Email = value; } }\n    public string Email { get; set; }\n    ....\n    ....\n}\nNow, when e.g. UserManager.CreateAsync(user, model.Password) is called in you rely on the default UserValidator, it will eventually end up in e.g. the line I provided above (https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/UserValidator.cs#L64).\nLets say we create a user with Email=\"foo@bar.com\" when one already exists, then the code above will:\nvar owner = await manager.FindByNameAsync(userName); --> the first created user.\n```\n//Since Id --> Email the belwo will result in same values\nvar ownerId = await manager.GetUserIdAsync(owner);\nvar newUserId = await manager.GetUserIdAsync(user);\n//...hence this will never result in an \"error\"\nif (owner != null && !string.Equals(ownerId, newUserId))\n    errors.Add(...);\n```\nGuessing this is because the same code is executed for Updates as well.\nSure a custom validator can solve the problem (not reaching and therefore being able to reuse e.g. resource strings). Could let the UserValidator have virtual members e.g. IsEmailUnique(...): bool instead.\nCurious. Why should the shipped validator NOT support this case?\n. Just because it's an email as the value of the Id, it doesn't become\nmutable. Could be that both UserName and Email will be immutable determined\nby app.\nBut yes, the world would be a simpler place if every DB had support for\nunique constraints other than the Id.\nOn Oct 29, 2014 6:33 PM, \"Hao\" notifications@github.com wrote:\n\nIdentity assumes that User Ids are stable and unique, they are not really\nmeant for mutable easily colliding things like Email. That said, you can\nprobably make this work, but I would expect other weird things similar to\nthe issue you are seeing with duplicate emails not being detected.\nBut basically this isn't a mainline scenario that the default\nimplementations are going to support well in general...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Identity/issues/241#issuecomment-60968383.\n. But I guess... as long as it works in EF... Lets take NoSQL. The only two (on top of my head) that supports alternative unique indexes are RavenDB and MongoDB. Not even Azure DocumentDB does.\n. Yes. But who said I'm about to allow that change in app code?\n\nThe issue is still there. Even if the I'd, UserName or Email doesn't get\nupdated.\nOn Oct 30, 2014 10:47 PM, \"Hao\" notifications@github.com wrote:\n\nThe snippet you show above whenever you set the Email or Username, you are\nalso changing the Id, that is what I mean by your Id is not stable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Identity/issues/241#issuecomment-61175360.\n. Any possibilities of opening it up to be able to override/set a func or whatever, just to replace the actual logic (true or false) if e.g. UserName and/or Email is unique? That way, resources etc would be reused nicely.\n. \n",
    "lajones": ":shipit:\n. You should probably rename this to \"IdentityRedisTests-redis-server\" or something similar.\n. We've had problems with multithreading where the tests share a context like this - so we're not recommending this pattern any more. DbContext is not thread-safe. If you have a look at e.g. the Redis FunctionalTests SimpleTest.cs file we now recreate the context for each test. E.g.:\nusing (var context = CreateContext(...))\n{\n    // rest of test\n}\n. Nit: Are you planning on uncommenting this line some time later?\n. Yes please - unless your scenario is covered by the RedisSequenceValueGenerator class that already exists?\n. Nope. The service should be added whenever you call UseRedis(). If you like there are some examples of that service being used RedisSequenceValuegeneratorTest.cs in the Redis Tests (not the Functional Tests, the other project).\n. ",
    "dnfclas": "@HaoK, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @suhasj, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @hishamco, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @hishamco, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @henkmollema, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ninlar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @eduaglz, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @mhowlett, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @TsengSR, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @TsengSR, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @danielcweber, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @danielcweber, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Daniel15, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @Daniel15, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @ajaybhargavb, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @natemcmaster, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Kagamine, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Kagamine, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @prasannavl, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @prasannavl, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @pakrym, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @slaneyrw, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @CamiloBernal, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @fredgate, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @JunTaoLuo, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @SharePointRadi, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @SharePointRadi, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @danroth27, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @danroth27, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @calebnelton, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ctolkien, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @javiercn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @aliakseimaniuk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @lcalabrese, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @vanillajonathan, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @arespr, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @arespr, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @flagbug, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ppayalg, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @gravity00, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @sebastienros, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @crystaju, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @akanmuratcimen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @akanmuratcimen, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Ketrex, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @MarcoMiltenburg, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @pushist1y, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ili, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @pushist1y, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @fabiano, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @jyunderwood, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @hikalkan, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @rm2k, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @rm2k, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @denis32000, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @denis32000, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @jamiewest, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @bchavez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@aftab10662,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@LayZeeDK,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@LayZeeDK,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@AlecPapierniak,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @AlecPapierniak, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. @AlecPapierniak, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@olsh,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @olsh, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@smitpatel,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mikeharder,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mvas,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mikeharder,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mikeharder,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mikeharder,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mikeharder,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@hangy,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@scottsauber,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@svethors,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@khellang,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@lkempf,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@lkempf,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ryanbrandenburg,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot.  All CLA requirements met.. \n@Zarickan,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot.  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met.. ",
    "papyr": "This should be revisited!\nJust because your view is that its too broad, should not limit the fact that its an important feature.\n\nWeb apps are broad in general in general but this is a core feature and not for the easy!. On user voice and ASP Forums many people have upvoted this . What is the object to maintain mirror the goups inside identitfu for user groups.\n\nFor roles its clear with RoleManager/Roles, but Groups is missing. hi @blowdart I tried this, but there is no User-Groups object in Microsoft ASP Identity 2. \nWhat would I cast this to? or do I subclass Roles, please elaborate or even a snippet.. @blowdart i am glad you acknowledge that mismatch between their web and windows server platforms, any chance you can bubble that up to MS so they include this.. ",
    "mach37": "Absolutely needed - shame on ASP TEAM for leaving this out. From the ASP home page, the goals are to support large enterprises and saas apps, but if you leave this out... you're inherently leaving this implementation open to flaws and more vulnerabilities, thus ignoring security \n+1 for @mbeckenbach @papyr for calling this out.\n@brockallen easier said than done!. @luisgizirian we are in the same boat, customizing and upgrades are nightmare. We are not able to move forward on many of the core items since this holding us back.\nWhile it seems fun-in-jest, the fact is for the average developer or small businesses/devs this is an absolute pain. 3rd party options/flavors as OSS are great; however, a basic default implementation MUST BE part of the templating option during the creating of the initial project.\nThis is not trivial for the average developer and the version that @luisgizirian is referring to - is over 2 yrs old, missing (user lock outs, SMS verification, host tenants, super admin, user impersonation, skinning, redirects, handlers, etc.. the list is long) - clearly not for the faint of heart, a serious detour from the core business logic and work I do as a developer.\nMore importantly, until the core team tries the implementation on their own - they will not realize to flush out how under the current framework simply not geared to support tenants easily.\nCase in point - a peek into orchard, music store, umbarco, skimming and others biggies implementation reveals how very complicated, extensive \u26b0\ufe0f  and different they all are just to implement the core multi tenants. \n@blowdart @rustd - ASP TEAM devs please get your act together if you're serious about helping the developer community!!. I also can see @tugberkugurlu point of view, and how the tenant is configured for storage can be a simple option during install during setup. A check box of whether sotred in same tables, different tables or different db's all together\nHow can we get this issue re-opened.. ",
    "luisgizirian": "Any chance you can share your efforts Brock?\nOn Thu, Jan 12, 2017 at 10:59 PM Brock Allen notifications@github.com\nwrote:\n\nI just implemented this recently, and it was not that difficult. It did\nrequire a good understanding of the inner working of the framework. I agree\nit should be better integrated/supported by the ASP.NET Identity\nframework itself, though.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/266#issuecomment-272340815,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAkinRpHDUm_CZHs-KYiE921pgPaIoXRks5rRtqLgaJpZM4C_erG\n.\n. Thanks! We have an Identity v2 customized for Multitenancy based on a\nGitHub Jskimmer library. As we couldn't understand how to make it work on\nv3 we have a bigger migration on hold. We'll investigate on your guidance.\nOn Thu, Jan 12, 2017 at 11:03 PM Brock Allen notifications@github.com\nwrote:\niirc, here's the short list of what i did: delete the 2 username and email\nindexes the built-in stuff creates. add a tenant column to the user table.\nadd new indexes for username/tenant and email/tenant. add a tenant to the\nstore and change the IQueryable users property to filter on tenant.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/266#issuecomment-272341418,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAkinRNH2h7AjOWSF5R4dGoM8vtrQq4Bks5rRtt_gaJpZM4C_erG\n.\n. Sure thing!\nOn Thu, Jan 12, 2017 at 11:10 PM Brock Allen notifications@github.com\nwrote:\nfeel free to fund me working on an OSS version of it for AspId3 :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/266#issuecomment-272342365,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAkinWtIW13UJgdY35j9YMg_8wVjhrnEks5rRt0PgaJpZM4C_erG\n.\n. We're using AspNet Identity v.2 with Mutitenancy support using @jskimming library (https://github.com/JSkimming/AspNet.Identity.EntityFramework.Multitenant).\n\nFollowing on @tugberkugurlu comments, on the DB side of our evolution plan, we'd like to use an Azure Elastic Pool for SQL. Here, the sharding key would be the TenantId.\nWithout Identity's v3 supporting multitenancy the way we do with v2, we can't find a way to move to v3, so it forces us to keep doing v2 on MVC5.\nTo clarify what I said earlier on this thread, this is also stopping us from a bigger move on porting all our platform to AspNet Core and being able to run our workloads into Azure Service Fabric.. Sorry @tugberkugurlu, can't see your point (feel free to write me directly). Lets please not deviate the discussion from the main issue here. :). @bprentice, I'm on a similar situation where I have a Tenant discovered at Middleware stage (with its int key I'm able to inject) on which I'd like to base at least some User activities (creating, registering, finding -by name or email-, login, to say the least).\nOne choice, seems to be extending and injecting custom UserManager, UserStore, SignInManager. But as it is (lots of privates), seems really anti-DRY.\nDid you continue digging on a solution for this? Found any?\n. With a separation as a Service, it seems to me that more complex scenarios are getting into the Identity equation. So, I ask again if support on Mutitenancy (TenantId into AspNetUsers table) is still out of reach. Please refer to #1047 & #266.\nSaaS apps were neither AzureAD nor IdentityServer are a fit, would greatly benefit of this construct right from the library itself.\nThanks!\nLuis. @danroth27 That's a deal-breaker for us.\nWe're a proprietary SaaS platform supporting multiple websites for our customers . We're stuck into ASP.NET Identity v.2 (with multi-tenancy addition). We have already +50K users among our tenants (sites with customers of our customers). We shall decouple from v.2 Identity (while keeping existing passwords) to allow our code base to evolve an be upgraded to .NET Core.\nWe operate on top of Azure using a combination of IaaS, SDN, PaaS, and several Azure services (Microsoft offered and 3rd Parties as well thru Marketplace) over multiple DCs.\nIt's a big deal to us the negative on moving on with multitenancy for ASP.NET Identity Core, but I hope it is for the best somehow. At first look, Orchard Core is not in our best interest as its a big tradeoff with a steeper learning curve that deviate us from our core.. ",
    "JSkimming": "@luisgizirian I've been somewhat neglecting that library I created, I don't have the time and I don't use it myself (the project for which it was written never took off).\nI'd happily review any pull requests should someone submit one, also happy to consider freelance work \ud83d\ude03. ",
    "weedkiller": "https://github.com/aspnet/Identity/issues/569\nSo many others here have this need!   any chance on updating this at @JSkimming  or @tugberkugurlu  lib. Hello, Can you also add manage roles and users per app scope or at least in general.. Hello, when will this ship - for managing tenants & roles. This should be groups or tenants so that the users are nested under different companies\nIdentity is missing this..  blodart is simply lazy to provide this feature to the community..\non github alone there are over 300 questions around this for a quick search, under identity, groups, roles etc..\nso many people are requesting groups and tenants\n https://github.com/aspnet/Identity/issues?utf8=%E2%9C%93&q=is%3Aissue+group , https://github.com/aspnet/Identity/issues/1532 , \nhttps://github.com/aspnet/Identity/issues/545 , \nhttps://github.com/aspnet/Identity/issues/184 , \nhttps://github.com/aspnet/Identity/issues/586 ,\nhttps://github.com/aspnet/Identity/issues/184 ,\nhttps://github.com/aspnet/Identity/issues/83 ,\nhttps://github.com/aspnet/Identity/issues/62 ,\nhttps://github.com/aspnet/Identity/issues/1187 ,\nhttps://github.com/aspnet/Identity/issues/1518\n. ",
    "guardrex": "@blowdart I'm just arriving to the issue. https://github.com/AzureADSamples/WebApp-WebAPI-OpenIdConnect-AspNet5/tree/master/TodoListWebApp is broken for dnxcore50 ... it's so old it actually names aspnetcore50, so it's not surprising it doesn't work. https://github.com/r2musings/AzureADTest/tree/master/src/AzureADTest2 works, but only for dnx451 ... I couldn't get a dnxcore50 version working. Do you know of any dnxcore50 sample that will handle a vanilla AAD Identity authentication? ... or is the middleware just plain broken right now for Core CLR? \n. The milestones for dnx, dnvm, identity, abstractions, configuration, diagnostics, hosting, security, razor, and mvc are 100%. Entity Framework is showing 94% with 3 open issues. DI and Common are 75% each with 1 open issue each. Must be close!\n. For reference, AllowedUserNameCharacters is here ...\nhttps://github.com/aspnet/Identity/blob/c8a276e716064ac40df5a56512e0217b14b48060/src/Microsoft.AspNetCore.Identity/UserOptions.cs#L17\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@\nIs there any reason why that can't be overridden no matter what the team settles on here?\n. ~~Well, it's not so much .NET Core supporting B2C~~* as it is just having a sample for B2C. It does work today, we just don't have a dedicated sample for the app case from MS yet. You can make the conversion from samples and docs, such as ...\n* It is mentioned in the .NET Blog now for full support for Q4 2016 / Q1 2017: https://blogs.msdn.microsoft.com/dotnet/2016/07/15/net-core-roadmap/\nhttps://azure.microsoft.com/en-us/documentation/articles/active-directory-b2c-devquickstarts-web-dotnet/\nhttps://github.com/AzureADQuickStarts/B2C-WebApp-OpenIdConnect-DotNet\nI imagine that @dstrockis is on the case tho. He is a most excellent :cat2: and provides great samples and docs.\nI have a very, very old one (beta7) that gives the general outline of what must be done, but I wouldn't look too closely at it at this late stage: https://github.com/GuardRex/AZUREB2C. There are definitely more recent examples floating around out there, like https://dzimchuk.net/post/setting-up-your-aspnet-core-apps-and-services-for-azure-ad-b2c, https://github.com/dzimchuk/azure-ad-b2c-asp-net-core, https://github.com/pherbel/AzureAd-b2c-aspnet5 , and https://github.com/estiller/AzureB2CWithAspNetCoreSample. Keep an eye on https://azure.microsoft.com/en-us/documentation/articles/active-directory-b2c-limitations/ as you piece something together.\n. yeah ... sorry ... I pulled that question b/c this was the wrong place to pose the question, and I read back in the main issue that you showed ...\n``` c#\n// Just registers the MyOptions singleton\nservices.AddOptions()\n// Register the options singleton and configure it\nservices.AddOptions(options => options.Setting = \"Whatever\"); //\n```\n... so I'm good. thx.\nWhen it gets to the point of an Annoucement, if there are two ways (i.e., \"If you want to avoid using AddOptions\" approach), then I hope you'll just add in the pros and cons of each approach.\n. ",
    "lcalabrese": "I'm a little confused how this is a duplicate as if I understand correctly this is referring to the email confirmation/reset password codes, and #133 is referring to 2FA.\n. That's what I ended up doing, but in order to have a different value for the injected DataProtectionTokenProviderOptions.TokenLifespan, I need to have them actually be different classes and not simply another instance of DataProtectorTokenProvider with a different Name. This way I can get the DI container to grab the correct options based on the new class's constructor. Am I misunderstanding the Options model?\nHere's what I ended up doing; is this what you were referring to or is there actually a simpler way?\n```\npublic class ConfirmEmailDataProtectorTokenProvider: DataProtectorTokenProvider where TUser:class\n{\n    public ConfirmEmailDataProtectorTokenProvider(IDataProtectionProvider dataProtectionProvider, IOptions options) : base(dataProtectionProvider, options)\n    {\n    }\n}\npublic class ConfirmEmailDataProtectionTokenProviderOptions : DataProtectionTokenProviderOptions { }\npublic class Startup\n{\n    private const string EmailConfirmationTokenProviderName = \"ConfirmEmail\";\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.Configure<IdentityOptions>(options =>\n    {\n        options.Tokens.EmailConfirmationTokenProvider = EmailConfirmationTokenProviderName;\n    });\n\n    services.Configure<ConfirmEmailDataProtectionTokenProviderOptions>(options =>\n    {\n        options.TokenLifespan = TimeSpan.FromDays(7);\n    });\n\n    services.AddIdentity<MyUser, MyRole>()\n        .AddEntityFrameworkStores<MyDbContext, string>()\n        .AddDefaultTokenProviders()\n        .AddTokenProvider<ConfirmEmailDataProtectorTokenProvider<MyUser>>(EmailConfirmationTokenProviderName);\n}\n\n}\n``\n. Indeed and that\u2019s a pretty similar scenario to what we\u2019ve run into. We have a system set up where administrators can \u201cinvite\u201d new users to the site, which basically generates a confirm email token (technically I\u2019m using a differentPurpose` string but it\u2019s not relevant) and sends an invitation email out to the new user. Then for whatever reason they don\u2019t check their email until later - it might be a Friday and they don\u2019t see it until Monday, or they might happen to be on vacation, or their IT department may not have even given them access to their email account yet.\nIn addition, I think it would be great if the documentation / new project template said something about this. The new project template\u2019s AccountController simply indicates to uncomment a few lines to get users to confirm their email. Granted most new users will want to start using the site right away and will check immediately, but this still leaves a potential for accounts to be left \u201cin limbo\u201d.\nIn this case, with the default boilerplate code, they will (hopefully) contact support, but even then the site owner/administrator can only apologize, delete the half-set-up account, and say \u201ctry again\u201d. An ugly user experience at best. (I suppose the other option is to manually set the user\u2019s email-confirmed flag, then direct them to the \u201cforgot password\u201d form \u2013 but this is not security-ideal unless we make sure to manually confirm the email loop.)\nTo avoid this we need a way to re-send out a token after it\u2019s expired. Perhaps ideally this would be in response to \u201cinvalid token\u201d when the user clicks an expired link. (Because we were getting so many support calls about this one I\u2019ve gone a different route and created an admin controller action that accepts an email address, so we can re-send emails with tokens directly.) Either way having at least a note in the documentation that this might be necessary would bring this to light earlier.\nUltimately this is all one man\u2019s opinion, but I just wanted to get it on record. If I had more time I\u2019d offer to write something up, but unfortunately I\u2019m not at that stage yet.\nFrom: Ro3A [mailto:notifications@github.com] \nSent: Tuesday, June 14, 2016 10:54 PM\nTo: aspnet/Identity Identity@noreply.github.com\nCc: Lee Calabrese lee.calabrese@gmail.com; Author author@noreply.github.com\nSubject: Re: [aspnet/Identity] Confirm Email Token Expiration/Lifetime (#859)\nThanks guys for the work around here. Just wanted to add a scenario and a voice here. An internal employee added a user to our site on Friday and triggering an activation email for the new user. New user didn't click the activation link until Monday. Token expired. It would be ideal to have an easy options configuration similar to how AddIdentity is done. \n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/aspnet/Identity/issues/859#issuecomment-225887723 , or mute the thread https://github.com/notifications/unsubscribe/ANDcwZ_6WFhwATYrnHH8aGAID1a4VAnYks5qLrJrgaJpZM4Ive0_ .  https://github.com/notifications/beacon/ANDcwbHCGAebq86oCR9Np4ZtDvxpDYMJks5qLrJrgaJpZM4Ive0_.gif \n. ",
    "balachir": "Moved the bug to EntityFramework : https://github.com/aspnet/EntityFramework/issues/1266\n. ",
    "rowanmiller": "Discussed with @suhasj \n. Turns out this is actually because the exception is getting wrapped in one more AggregateException within the Identity stack before reaching the error page middleware. We should check inner exceptions in the error page middleware - https://github.com/aspnet/Diagnostics/issues/75.\n. I suspect it's just a by product of async code... it's already wrapped in two Aggregate exceptions before it reaches Identity (Identity just adds one more)\n. @rustd this is the issue you looked at on my machine yesterday\n. Guys this is a lame response :smile:... the default experience with identity is broken (and this is the identity repo), if it's an issue with how VS is launching the app then work with them to fix it :smile_cat: \n. But isn't User.Identity.IsAuthenticated and User.Identity.GetUserName() part of ASP.NET Identity?... and that is returning my windows username even though I haven't enabled integrated auth (I just have local user accounts enabled)\n. Fundamentally, the issue is I create a project template that should have local accounts enabled... but I can't login/register etc. because it just picks up my windows user\n. BTW just to be clear... I'm not arguing about where the technical fix lies... I'm just saying the default ASP.NET Identity experience is busted. If you need to work with other folks because someone else busted you... then great. Just don't close the issue with a 'not technically our area' response... go open the relevant issues to get it fixed :smile: \nTo be clear... I'm not trying to be an ass... I just don't want us to drop things because we're focusing on where technical boundaries lie and not what the experience of using our features is like.\n. BTW I'm totally fine if you decide not to do this... I just wanted it while I was app building, so thought I'd log the request and let you decide what to do with it :)\n. No worries, totally up to you guys... just wanted to let you know I would have found it useful :smile: \n. Looks like there are two issues here:\n- The Identity docs need to be updated to cover the fact that schema modifications are limited when targeting SQLite (due to limitations in the database engine itself).\n- The second one - on SQL Server - looks like an issue in migrations itself (opened https://github.com/aspnet/EntityFramework/issues/5345 to track this)\n. Yes, I think that is viable since it can be kicked of asynchronously. Obviously it would only help on the initial dev machine, but I think it's a good start.\n. Not sure about the infrastructure capabilities for creating the project from the command line, but we could still rely on the current \"click the big blue button\" experience. Or we could invoke dotnet ef database update as part of project creation (if possible).\n. ",
    "thdotnet": "I already did that. Is there a table where this code is stored?\n. I'm stuck with this error. If I try to confirm just after the generating the confirmation code, it works. However, if I open the link (that I'll send through email) I'm getting the error.\n. this is totally strange. I've copied the generated code and I've changed the value before the activation through debugging and it still don't working.\n. I'll take a look, but you can close this issue. Thank you!\n. My bad, It's missing some important details. I want to use Identity without the Code First Approach. So what I did: I've created a sample app using the code first approach and let it creates the identity tables. Using SQL Management studio, I've generated the script from the previous step in order to create the tables on my real app (the one that does not use Code First).\nIt generates the errors described in the original description.. ",
    "PTRPlay": "I've got the same problem, has anyone figured our  something?\n. ",
    "VahidN": "You can find it here. The mentioned extra interfaces are located here.\n. It applies to v3.0 as well. This code is not called dependency injection:\ncsharp\npublic AccountController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager)\nThere is not inversion of control here and you are using a set of concrete classes here instead of using their equivalent interfaces. This is the problem.\n. There are 2 implementations about this subject here\n- https://github.com/aspnet/Identity/pull/1022\n- https://github.com/aspnet/Identity/issues/935\nWhat do you think about them?. Reported here.\n. It's fixed. follow this thread.. Just follow the posted answer by @lcalabrese. It changes the default TokenLifespan to 7 days.. @Vaylandt \nIt's cached (or will be treated as a singleton) because there is only one scope at that point. You need to create and dispose a new scope this way:\ncsharp\nusing (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())\n{\n    var signInManager = serviceScope.ServiceProvider.GetService<SignInManager<User>>();\n    var userManager = serviceScope.ServiceProvider.GetService<UserManager<User>>();\n}. A regular controller does this scope creation and disposing behind the scene. It's part of a request life cycle. That's why you won't see that cached behavior at there.. Change your codes from:\ncsharp\nvar result = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);\nif (result.Succeeded)\n{\n   await _signInManager.SignInAsync(user, isPersistent: false);\n}\nto:\ncsharp\nvar result = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword).ConfigureAwait(false);\nif (result.Succeeded)\n{\n    // reflect the changes in the Identity cookie\n    await _userManager.UpdateSecurityStampAsync(user).ConfigureAwait(false);\n    await _signInManager.RefreshSignInAsync(user).ConfigureAwait(false);\n}. @anhlee24 \nYou need to create an scope manually (outside of the ASP.NET Core's life cycle). Otherwise it be treated as a singleton instance. Because there is only one scope here.\nTry:\ncsharp\nusing (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())\n{\n    using (var userManager = serviceScope.ServiceProvider.GetService<UserManager<User>>())\n    {\n          //\n    }\n}. Remove the second using statement here. It's unnecessary. Just use\ncsharp\nvar signInManager = serviceScope.ServiceProvider.GetService<SignInManager<User>>();\nvar userManager = serviceScope.ServiceProvider.GetService<UserManager<User>>();. First define 2 new classes:\n```csharp\npublic class SiteSettings\n{\n    public Identityoptions IdentityOptions { get; set; }\n}\npublic class Identityoptions\n{\n    public LockoutOptions Lockout { get; set; }\n}\nThen to access `SiteSettings` from the `ConfigureServices` method, we should `BuildServiceProvider` first:csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n   services.AddSingleton(provider => { return Configuration; });\n   services.Configure(options => Configuration.Bind(options));\nvar provider = services.BuildServiceProvider();\n   var siteSettingsOptions = provider.GetService>();\n   // now use siteSettingsOptions.Value\n```\nTip\nAn standard TimeSpan value should be defined this way in appsettings.json file:\njson\n\"DefaultLockoutTimeSpan\": \"0.00:05:00.0000\",. You are using at least 2 different contexts with different life times here. \n- How did you register your dbcontext at startup?\n- What is its life time (Scoped, Transient)? \n- How did you instantiate your context in the above sample, how did you get it? Does it come from the dependency injection or from the new DbContext directly?. Are you still using EF Core 1.0? EF Core 1.0 sets FKs by conventions when adding a key and it doesn't work for a PK in a one-to-many relationship. It's fixed in v1.1: https://github.com/aspnet/EntityFramework/issues/6490. When you are customizing ASP.NET Core Identity, you should not use AddEntityFrameworkStores anymore. Because it will override all of your previous settings and customization to default Identity services.\nFirst you need to  create new services with the following signatures:\ncsharp\npublic class ApplicationRoleManager:  RoleManager<Role>\npublic class ApplicationRoleStore :  RoleStore<Role, ApplicationDbContext, int, UserRole, RoleClaim>\npublic class ApplicationSignInManager :  SignInManager<User>\npublic class ApplicationUserManager : UserManager<User>\npublic class ApplicationUserStore : UserStore<User, Role, ApplicationDbContext, int, UserClaim, UserRole, UserLogin, UserToken, RoleClaim>\nPlus your ApplicationRoleStore should provide how to create the RoleClaim,\ncsharp\nprotected override RoleClaim CreateRoleClaim(Role role, Claim claim)\n{\n    return new RoleClaim\n    {\n        RoleId = role.Id,\n        ClaimType = claim.Type,\n        ClaimValue = claim.Value\n    };\n}\nAnd also the ApplicationUserStore should provide these mappings too:\n```csharp\nprotected override UserClaim CreateUserClaim(User user, Claim claim)\n{\n    var userClaim = new UserClaim { UserId = user.Id };\n    userClaim.InitializeFromClaim(claim);\n    return userClaim;\n}\nprotected override UserLogin CreateUserLogin(User user, UserLoginInfo login)\n{\n    return new UserLogin\n    {\n        UserId = user.Id,\n        ProviderKey = login.ProviderKey,\n        LoginProvider = login.LoginProvider,\n        ProviderDisplayName = login.ProviderDisplayName\n    };\n}\nprotected override UserRole CreateUserRole(User user, Role role)\n{\n    return new UserRole\n    {\n        UserId = user.Id,\n        RoleId = role.Id\n    };\n}\nprotected override UserToken CreateUserToken(User user, string loginProvider, string name, string value)\n{\n    return new UserToken\n    {\n        UserId = user.Id,\n        LoginProvider = loginProvider,\n        Name = name,\n        Value = value\n    };\n}\n```\nThen redirect built-in services to your custom services:\ncsharp\nservices.AddScoped<UserStore<User, Role, ApplicationDbContext, int, UserClaim, UserRole, UserLogin, UserToken, RoleClaim>, ApplicationUserStore>();\nservices.AddScoped<UserManager<User>, ApplicationUserManager>();\nservices.AddScoped<RoleManager<Role>, ApplicationRoleManager>();\nservices.AddScoped<SignInManager<User>, ApplicationSignInManager>();\nservices.AddScoped<RoleStore<Role, ApplicationDbContext, int, UserRole, RoleClaim>, ApplicationRoleStore>();\nservices.AddScoped<IEmailSender, AuthMessageSender>();\nservices.AddScoped<ISmsSender, AuthMessageSender>();\nnow introduce your custom services:\ncsharp\nservices.AddIdentity<User, Role>(identityOptions =>\n            {\n             // ...\n            }).AddUserStore<ApplicationUserStore>()\n              .AddUserManager<ApplicationUserManager>()\n              .AddRoleStore<ApplicationRoleStore>()\n              .AddRoleManager<ApplicationRoleManager>()\n              .AddSignInManager<ApplicationSignInManager>()\n              // You **cannot** use .AddEntityFrameworkStores() when you customize everything\n              //.AddEntityFrameworkStores<ApplicationDbContext, int>()\n              .AddDefaultTokenProviders();. @master-still\nIt's fixed in v1.1: https://github.com/aspnet/Identity/issues/988. You can always customize the built-in password validator and replace it completely:\n```csharp\n    /// \n    /// Extending the Built-in Password Validation\n    /// \n    public class CustomPasswordValidator : PasswordValidator\n    {\n    public CustomPasswordValidator(\n        IdentityErrorDescriber errors // This is necessary for the globalization to work\n        ) : base(errors)\n    {}\n\n    public override async Task<IdentityResult> ValidateAsync(UserManager<User> manager, User user, string password)\n    {\n        // First use the built-in validator\n        var result = await base.ValidateAsync(manager, user, password).ConfigureAwait(false);\n        var errors = result.Succeeded ? new List<IdentityError>() : result.Errors.ToList();\n\n        // Extending the built-in validator\n        if (!areAllCharsEuqal(password))\n        {\n            errors.Add(new IdentityError\n            {\n                Code = \"PasswordIsNotSafe\",\n                Description = \"All password chars are the same.\"\n            });\n        }\n\n        return !errors.Any() ? IdentityResult.Success : IdentityResult.Failed(errors.ToArray());\n    }\n\n    private static bool areAllCharsEuqal(string data)\n    {\n        if (string.IsNullOrWhiteSpace(data)) return false;\n        data = data.ToLowerInvariant();\n        var firstElement = data.ElementAt(0);\n        var euqalCharsLen = data.ToCharArray().Count(x => x == firstElement);\n        if (euqalCharsLen == data.Length) return true;\n        return false;\n    }\n}\n\nThen replace the built-in one:csharp\nservices.AddScoped, CustomPasswordValidator>();\nservices.AddScoped, CustomPasswordValidator>();\n```. > Is it replacing completely the current implementation based on PasswordOptions or just adding another layer of validation?\nIt still calls the base.ValidateAsync of the original PasswordValidator. So the current validation mechanism will be applied first and then adds another layer of validation.. Put base.OnModelCreating(builder); at the top of the method. It will override all of your settings to default ones if you put it at the end.. base.OnModelCreating(modelBuilder); will override your custom settings. so put it at the beginning of the OnModelCreating method.. Cookie.SecurePolicy value in AddApplications method is set to \ncsharp\noptions.Cookie.SecurePolicy = CookieSecurePolicy.Always;\nWhich means HTTPS only and local development will also need to be done with HTTPS urls.\nI'm sure you will see these kind of issues very quickly:\n- I can't login anymore.\n- PasswordSignInAsync doesn't work anymore.\n- PasswordSignInAsync doesn't set any cookies at all.\n- I keep getting re-directed back to the login page.\nIt would be better to set it to\ncsharp\nCookieSecurePolicy.SameAsRequest\nSolution:\ncsharp\n// should be added after the  AddIdentity\nservices.ConfigureApplicationCookie(identityOptionsCookies =>\n{\n   identityOptionsCookies.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;\n});. Is services.ConfigureApplicationCookie defined before or after the services.AddIdentity? If you define it before the services.AddIdentity, your custom values will be overwritten.\nAnd this is how you can change the ValidationInterval interval:\nservices.Configure<SecurityStampValidatorOptions>(options =>\n            {\n                // enables immediate logout, after updating the user's stat.\n                options.ValidationInterval = TimeSpan.Zero;\n            });. SecurityStampValidator will be called for every single request to the server, but it will decide based on the ValidationInterval value and cookie issue time to determine when it should check the validity of the cookie again. If you set the ValidationInterval to zero, it will check and call the ValidateSecurityStampAsync method every time. So it's not related to the ExpireTimeSpan value. It's about the SecurityStamp property value of the current user. This value (SecurityStamp) will be changed internally by the framework if you update the user's properties.\nIf you call services.ConfigureApplicationCookie after the services.AddIdentity, you can change the default value of the ExpireTimeSpan. Because the AddIdentity method sets the default cookie's settings too.. Have you configured your server to store the cookie decryption keys permanently? if not, whenever the server restarts or the app pool restarts, your users will have to login again.\nMore info. This may help: \"... by default the keys will be held in memory ...\". ",
    "Kukkimonsuta": "On a side note, if you just want to remove AspNet prefix, this does to trick too:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\nforeach (var entityType in builder.Model.EntityTypes)\n{\n    var table = entityType.Relational().Table;\n    if (table.StartsWith(\"AspNet\"))\n        entityType.Relational().Table = table.Substring(6);\n}\n\n}\n```\n. ",
    "Bartmax": "While removing AspNet prefix as @Kukkimonsuta suggested does work, I'm wondering why doing for every entity in a single line create 2 tables.\nFor example:\nbuilder.Entity<IdentityRoleClaim>().ForRelational().Table(\"NewRoleClaim\");\ncreates 2 tables: NewRoleClaim and AspnetRoleClaims.\nwhy?\n. is there any known workaround for this for the time being?\n. Thanks, this worked:\n```\nservices.AddIdentity()\n    .AddUserStore()\n    .AddRoleStore();\npublic class ApplicationUserStore : UserStore\n    {\n        public ApplicationUserStore(ApplicationDbContext context, IdentityErrorDescriber describer)\n            : base(context, describer)\n        {\n    }\n    public override Guid ConvertIdFromString(string id)\n    {\n        return new Guid(id);\n    }\n    public override string ConvertIdToString(Guid id)\n    {\n        return id.ToString();\n    }\n}\n\npublic class ApplicationRoleStore : RoleStore<ApplicationRole, ApplicationDbContext, Guid>\n{\n    public ApplicationRoleStore(ApplicationDbContext context, IdentityErrorDescriber describer)\n        :base(context, describer)\n    {\n\n    }\n    public override string ConvertIdToString(Guid id)\n    {\n        return id.ToString();\n    }\n    public override Guid ConvertIdFromString(string id)\n    {\n        return new Guid(id);\n    }\n}\n\n```\n. I would really like to hear about this too. I'm not sure what's a good option.\nWhat I'm doing is having an ApplicationUser, which inherits from IdentityUser.\n```\nStudent.cs\n{\n    public string StudentId { get; private set; }\n}\nTeacher.cs\n{\n    public string TeacherId { get; private set; }\n}\nand OnModelCreating\nbuilder.Entity(b =>\n{\n    b.HasOne().WithOne().ForeignKey(x => x.TeacherId);\n});\nbuilder.Entity(b =>\n{\n    b.HasOne().WithOne().ForeignKey(x => x.StudentId);\n});\n```\nthis is beta3, on other version the api has changed, not sure if this still applies.\ndoes it make sense ?\nhope it helps.\n. There is already an object named 'IdentityUsers' was fixed removing EnsureCreated on dbcontext constructor (tried to add it twice I think)\nother issue is how it generated field that shouldn't be there. I modified the snapshot, the migration code and executed and got a correct db. \nnow I have created another migration with the offending code that I will leave on the snapshot but remove the Up code: (this should not be generated) - bug?\n``\npublic override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.AddColumn(\"IdentityRoleClaims\", \"IdentityRole1Id\", c => c.Guid());\n        migrationBuilder.AddColumn(\"IdentityUserRoles\", \"IdentityRole`1Id\", c => c.Guid());\n\n        migrationBuilder.AddForeignKey(\n            \"IdentityRoleClaims\",\n            \"FK_IdentityRoleClaims_IdentityRoles_IdentityRole`1Id\",\n            new[] { \"IdentityRole`1Id\" },\n            \"IdentityRoles\",\n            new[] { \"Id\" },\n            cascadeDelete: false);\n\n        migrationBuilder.AddForeignKey(\n            \"IdentityUserRoles\",\n            \"FK_IdentityUserRoles_IdentityRoles_IdentityRole`1Id\",\n            new[] { \"IdentityRole`1Id\" },\n            \"IdentityRoles\",\n            new[] { \"Id\" },\n            cascadeDelete: false);\n    }\n\n```\n. And after that, it still explodes with:\nInvalidCastException: Invalid cast from 'System.String' to 'System.Guid'.\nSystem.Convert.DefaultToType(IConvertible value, Type targetType, IFormatProvider provider)\nGoing back to string key for now.\n. I identified the problem so I will close this one and create a new issue with the real problem.\n. > What version of packages do you have ?\n\"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta3\",\n        \"EntityFramework.Commands\": \"7.0.0-beta3\"\n\nHope you ApplicationDbContext declaration was updated to include the IdentityRole ?\n\nyes.\n\nAre you using migrations to create the database ?\n\nyes. ef migration add initial\n\nAre you using IdentityDbContext or a new implementation of it ?\n\nIdentityDbContext.\nI just created the minimal repo that shows the problem, may I missing something ?\nhttps://github.com/Bartmax/AspnetExpriments/tree/master/AspnetExperiments/src/EFGuidPrimaryKey.Sample\n. I think it is, maybe @cherrydev can confirm.\n. yes dupe!. closing.\n. About point 2. Yes this is really bad. I think you should create a separate issue. I hope the templates gets open source soon so we can help with this. Template got a lot of problems/errors. \n. Meh...\n. So it's there in case someone implementation needs to know the user then?\n. > What if you need to check a password history list?\ni just hope check a password history list isn't still a thing in 2016 ;)\n. > The actual app code is much simpler and decoupled from its identity concerns\nwhen you say much simpler you meant this?\n\n. @danroth27 thanks for the reply and eager to see the improvements coming. Btw, speaking of \"We are also looking at ways to package the controllers and views so they don't have to live in the template.\" This is something that would be useful for a lot of scenarios! Whatever option you enable or recommend that we developers can use is very welcome. I was waiting for something to do exactly that for a looong looong time already.. >We might do something targeted for the identity controllers and views (still under discussion)\nplease don't and keep the discussion going.\nWith all the respect to Orchad and what they have implemented which indeed looks awesome. The need to reference two different packages, inject services, have a middleware running to get the concept of modules on an application may be fine but not to package a library with controller(s) and view(s). (As clearly is your scenario and many others).\nI strongly believe this is something missing from asp.net framework, and I would love to see First Class Citizen support for this, the fact that you need this also kinda proves my beliefs.\n. This is not about which OIDC provider is chosen on the templates, pretty sure everyone agree that having B2C as default with a simple \"replace point\" it's perfect.\nThe point here is about when you don't want OIDC at all. That's why you have Windows Auth, cookies is just as good as any other option and every option is aimed to solve different scenarios. Current templates lacks the ability to have a cookies provider which is a very most common approach in MVC application.. > This feature decouples your app from ASP.NET Core Identity making it easy to switch to IdentityServer, OpenIdDict or any OIDC provider you want.\nWhat a lie, created a new project and tried to swap to another provider... it's just imposible.\nAfter that I did create new blank app, and got auth stuff done in like 15 minutes. \n@danroth27  The definition of  the word easy that you use in every comment on this issue is not what you think it is.\n\nEven better, give the ASP.NET Core 2.0 Preview 1 bits a spin and let us know what you think!\n\nAs sincere as possible, I think the new auth template it's useless/confusing/complex (at least for me), it also doesn't work right (neither the former template so was no surprise) and I have no plan to invest anymore time on it or this issue.\nWhat I get from this and the many times that I tried to contribute to the way authentication is done, point out defects on the templates, etc. is that I just need to forget that Microsoft has any authentication \"stuff\" and move on. \ud83d\ude2b . Just to be clear, Auth0 is kind-of the same stupid \ud83d\udcb8 pricing model.\nWhen one player enters the market and takes all the developers don't \ud83d\ude22 and said we didn't warn you.\nI wish I could use xxxx (insert name Azure, Auth0, whatever) for identity.\nAs of right now, we are strongly suggesting all our customers/clients to roll their own login mechanism. With libraries like open iddict I really don't see much value added from Auth0 nor Azure and the pricing is insane, IN-SANE. @Ponant :\n@brockallen asking/saying/hoping that ms will be clear in their strategy is not for free, MS wasn't clear and lied in the past about this. \nbonus: my opinion shouldn't feel biased.\n. @Ponant it's free.... Closed in favor of: https://github.com/dotnet/corefx/issues/20407. ",
    "slypete": "Thank you @HaoK.\n. ",
    "ljwagerfield": "Yes, that's correct. Consider the following workflow:\n- User receives a reset token by email.\n- The token has an expiry of 24 hours.\n- They click the 'reset password' link in their email after 25 hours have elapsed.\n- The page displays 'this link has expired'\nThe last step is not possible without first validating the token. This means users would have to submit their new password (with confirmation password) before discovering the link had expired. \n. Absolutely agree, although the important part is to ensure non-malicious users have a better UX by not having to type their credentials in unnecessarily if the token has expired. \nI wouldn't mind saying \"Token invalid - this link may have expired\" :)\nOr in fact, I'd probably keep the message as \"This link has expired\" - then it's just the malicious users that get the misleading/bad UX, which I'd be happy with!\n. I feel this design decision goes against Microsoft's own recommended practice for API design:\n\nExcept for system failures and operations with potential race conditions, framework designers should design APIs so users can write code that does not throw exceptions. For example, you can provide a way to check preconditions before calling a member so users can write code that does not throw exceptions.\n-- https://msdn.microsoft.com/en-us/library/ms229030(v=vs.110).aspx\n. \n",
    "ryanulit": "I have to agree with ljwagerfield.  This is a pretty common scenario and to write this off as intended seems a bit careless.\n. ",
    "eraima": "read below article\nhttp://tech.trailmax.info/2015/05/asp-net-identity-invalid-token-for-password-reset-or-email-confirmation/\n//I use below code\nif (!UserManager.VerifyUserToken(userId, \"ResetPassword\", code))\n            {\n                //Error\n            }\n. ",
    "Misiu": "I know that this is an old thread, but I have similar situation.\nI have WebAPI, every method is called from javascript.\nWhen user clicks on (expired) link I'd like to show him information that link is expired or code is invalid.\nCan I validate code in some way to check if it has valid length, syntax? Ideally as @ljwagerfield mention I'd like to know that code expired.. I've searched a bit and found this article, reading it I found that in ASP.NET Core this is possible (read validating the token part), but not in 2.1 (https://github.com/aspnet/AspNetIdentity/blob/9c48993a446288032f9824633e6dae81257da06e/src/Microsoft.AspNet.Identity.Core/TotpSecurityStampBasedTokenProvider.cs#L69)\nAre there any workarounds?\nI don't mind writing additional code that would validate length, syntax, but I have no idea if it would be possible to validate expiration time.. @marspd You can do one additional request and inside that method You can call:\nif (!UserManager.VerifyUserToken(userId, \"ResetPassword\", code))\n{\n//Error\n}\nbut I'd like to avoid that one extra request. I don't mind showing inputs for new password, but I'd liek to give better feedback to user - message that link expired. @marspd I'm aware this is an old issue, but for me validating token expiration time is still an issue.\nI've created extension method:\n```\npublic static class UserManagerExtensions\n{\n    public static bool IsTokenExpired(this UserManager manager, TUser user, string token) where TKey : IEquatable where TUser : class, IUser\n    {\n        try\n        {\n            var tokenProvider = manager.UserTokenProvider as DataProtectorTokenProvider;\n            if (tokenProvider == null) return false;\n        var unprotectedData = tokenProvider.Protector.Unprotect(Convert.FromBase64String(token));\n        var ms = new MemoryStream(unprotectedData);\n        using (var reader = ms.CreateReader())\n        {\n            var creationTime = reader.ReadDateTimeOffset();\n            var expirationTime = creationTime + tokenProvider.TokenLifespan;\n            if (expirationTime < DateTimeOffset.UtcNow)\n            {\n                return true;\n            }\n            return false;\n        }\n    }\n    catch\n    {\n        // Do not leak exception\n    }\n    return true;\n}\n\n}\ninternal static class StreamExtensions\n{\n    internal static readonly Encoding DefaultEncoding = new UTF8Encoding(false, true);\npublic static BinaryReader CreateReader(this Stream stream)\n{\n    return new BinaryReader(stream, DefaultEncoding, true);\n}\n\npublic static BinaryWriter CreateWriter(this Stream stream)\n{\n    return new BinaryWriter(stream, DefaultEncoding, true);\n}\n\npublic static DateTimeOffset ReadDateTimeOffset(this BinaryReader reader)\n{\n    return new DateTimeOffset(reader.ReadInt64(), TimeSpan.Zero);\n}\n\npublic static void Write(this BinaryWriter writer, DateTimeOffset value)\n{\n    writer.Write(value.UtcTicks);\n}\n\n}\n```\nCode is based on DataProtectorTokenProvider source I found.\nI had to copy StreamExtensions class, because it is internal (maybe this could be changed \u2753 )\nWorst part is casting UserTokenProvider as DataProtectorTokenProvider - I must do that because IUserTokenProvider doesn't have Protector and TokenLifespan properties (maybe this also could be changed \u2753  )\nHaving this extension method in my controller I can check if passed token is valid using this code:\nif (UserManager.IsTokenExpired(user, model.Code))\n{\n    return this.BadRequest(\"errorResetingPassword\", \"Link expired\");\n}\n@HaoK  any chance StreamExtensions protection level could be changed from internal to public?. @egmfrs I've created second version that is more secure (in my opinion:\n```\nusing Microsoft.AspNet.Identity;\nusing Microsoft.AspNet.Identity.Owin;\nusing System;\nusing System.Globalization;\nusing System.IO;\nusing System.Text;\nnamespace Api.Extensions\n{\n    public enum TokenValidity\n    {\n        VALID,\n        INVALID,\n        INVALID_EXPIRED,\n        ERROR\n    }\npublic static class UserManagerExtensions\n{\n    public static TokenValidity IsResetPasswordTokenValid<TUser, TKey>(this UserManager<TUser, TKey> manager, TUser user, string token) where TKey : IEquatable<TKey> where TUser : class, IUser<TKey>\n    {\n        return IsTokenValid(manager, user, \"ResetPassword\", token);\n    }\n\n    public static TokenValidity IsTokenValid<TUser, TKey>(this UserManager<TUser, TKey> manager, TUser user, string purpose, string token) where TKey : IEquatable<TKey> where TUser : class, IUser<TKey>\n    {\n        try\n        {\n            //not sure if this is needed??\n            if (!(manager.UserTokenProvider is DataProtectorTokenProvider<TUser, TKey> tokenProvider)) return TokenValidity.ERROR;\n\n            var unprotectedData = tokenProvider.Protector.Unprotect(Convert.FromBase64String(token));\n            var ms = new MemoryStream(unprotectedData);\n            using (var reader = ms.CreateReader())\n            {\n                var creationTime = reader.ReadDateTimeOffset();\n                var expirationTime = creationTime + tokenProvider.TokenLifespan;\n\n                var userId = reader.ReadString();\n                if (!String.Equals(userId, Convert.ToString(user.Id, CultureInfo.InvariantCulture)))\n                {\n                    return TokenValidity.INVALID;\n                }\n\n                var purp = reader.ReadString();\n                if (!String.Equals(purp, purpose))\n                {\n                    return TokenValidity.INVALID;\n                }\n\n                var stamp = reader.ReadString();\n                if (reader.PeekChar() != -1)\n                {\n                    return TokenValidity.INVALID;\n                }\n\n                var expectedStamp = \"\";\n                //if supported get security stamp for user\n                if (manager.SupportsUserSecurityStamp)\n                {\n                    expectedStamp = manager.GetSecurityStamp(user.Id);\n                }\n\n                if (!String.Equals(stamp, expectedStamp)) return TokenValidity.INVALID;\n\n                if (expirationTime < DateTimeOffset.UtcNow)\n                {\n                    return TokenValidity.INVALID_EXPIRED;\n                }\n\n                return TokenValidity.VALID;\n            }\n        }\n        catch\n        {\n            // Do not leak exception\n        }\n        return TokenValidity.INVALID;\n    }\n}\n\ninternal static class StreamExtensions\n{\n    internal static readonly Encoding DefaultEncoding = new UTF8Encoding(false, true);\n\n    public static BinaryReader CreateReader(this Stream stream)\n    {\n        return new BinaryReader(stream, DefaultEncoding, true);\n    }\n\n    public static BinaryWriter CreateWriter(this Stream stream)\n    {\n        return new BinaryWriter(stream, DefaultEncoding, true);\n    }\n\n    public static DateTimeOffset ReadDateTimeOffset(this BinaryReader reader)\n    {\n        return new DateTimeOffset(reader.ReadInt64(), TimeSpan.Zero);\n    }\n\n    public static void Write(this BinaryWriter writer, DateTimeOffset value)\n    {\n        writer.Write(value.UtcTicks);\n    }\n}\n\n})\n```\nand usage in controller looks like this:\nvar tokenIsValid = UserManager.IsResetPasswordTokenValid(user, model.Code);\nif (tokenIsValid == TokenValidity.INVALID_EXPIRED)\n{\n    Logger.Error(\"Expired\");\n}\nDifference is that in this version I'm verifying userId, purpose and security stamp. Only if they are ok I check expiration date. \nAny improvements are welcome.\n@HaoK could You look at this? I think that this can solve by design problem.. @alexsorokoletov in previous version it was easy to do using custom Provider in OAuthAuthorizationServerOptions. In Your custom class (derived from OAuthAuthorizationServerProvider) all You had to do is to override GrantCustomExtension. This way You can for example give different permissions based on login type:\nClaimsIdentity oAuthIdentity = await user.GenerateUserIdentityAsync(userManager, context.Options.AuthenticationType);\noAuthIdentity.AddClaim(new Claim(\"SMS_CODE\", \"1\", ClaimValueTypes.String));\nvar ticket = new AuthenticationTicket(oAuthIdentity, null);\ncontext.Validated(ticket);\nI'm looking for similar thing, because I'm thinking about moving my existing code to ASP.NET Core. I'd like to know how to create similar thing best way possible.. @alexsorokoletov my custom GrantCustomExtension has about 50 lines of code. In it I have support for two custom grants, first (grant_type=\"sms_code_request\") sends code to user prone number, and second (grant_type=\"sms_code\") validates that code and returns valid JWT token.\n@brockallen won't IdentityServer be an overkill? I don't need external auth providers, just single endpoint that would allow me to generate JWT token and way to verify it using simple attribute on methods or controllers. There is OpenIdConnect and OpenIddict. Did You used them?\nFor example this looks like a simple way to add JWT based security.\nI couldn't find any good comparison between  IdentityServer and OpenIddict. Any opinions about those two would help me a lot.. @alexsorokoletov I have two flows:\n\n\nWith password - standard flow:\n\n\nuser makes request to /auth/login and sends grant_type=password, his login and password\n\n\nin return he gets JWT token that he must include in each request\n\n\nWithout password:\n\nuser makes request to /auth/login and sends grant_type=sms_code_request and his login\nserver (my API) generates one time code and send it to phone number assigned to that user and return OK 200 response\nuser makes second request to same endpoint with grant_type=sms_code and pass his login and that one time code he got via SMS.\nif code is valid server returns JWT token but with additional claim (I use it to allow user to do restricted requests) and with extended validity time.\n\nI have this working well in WebAPI 2.2 solution using ASP.NET Identity 2.2.1.\nI'm not security expert, so if You see any potential vulnerabilities please let me know.. ",
    "marspd": "HI there\nI have exactly the same issue as Misiu.\nI have an angular front end that talks to my WebAPI and I would like to validate the token before forcing the user to enter their e-mail address and new password to then find the token has expired.. Thanks Misiu, I hadn't spotted that method, I will give it a go.. ",
    "BennyM": "I tried some more different scenarios and now realize the issue I reported is not entirely the problem I'm facing. When configuring the two factor remember me cookie as posted above and modifying the sample like so:\nvar result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, false, shouldLockout: false);\nSo passwordsignin is never remembered. And:\nvar result = await SignInManager.TwoFactorSignInAsync(model.Provider, model.Code, isPersistent: true, rememberBrowser: true);\nSo two factor remember me cookie should be stored. \nBoth cookies get an expire date:\n\nI would think the expected behavior would be an application cookie configured as a session cookie and a two factor remember cookie with an expire time. \nI'm using the sample on NuGet so not entirely sure if I should post here or on Codeplex.\n. I did not report it on codeplex, but someone else did: https://aspnetidentity.codeplex.com/workitem/2532 \n. ",
    "kerrpeter": "Was this ever fixed  - I get the same issue on Asp.net identity 2.2.1\n. ",
    "DeluxZ": "@HaoK I'm also running into this issue as reported here\n. You can probably override them in your IdentityContext with the OnModelCreating method.\n``` csharp\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    // Customize the ASP.NET Identity model and override the defaults if needed.\n    // For example, you can rename the ASP.NET Identity table names and more.\n    // Add your customizations after calling base.OnModelCreating(builder);\nbuilder.Entity<IdentityUser>().ToTable(\"YourTableName\");\n\n}\n```\n. Try\ncsharp\nbuilder.Entity<Comm_role>().ToTable(\"Comm_role\");\nbuilder.Entity<Comm_roleclaim>().ToTable(\"Comm_roleclaim\");\nbuilder.Entity<Comm_user>().ToTable(\"Comm_user);\nbuilder.Entity<Comm_userrole>().ToTable(\"Comm_userrole);\nbuilder.Entity<Comm_userclaim>().ToTable(\"Comm_userclaim);\nbuilder.Entity<Comm_userlogin>().ToTable(\"Comm_userlogin);\nbuilder.Entity<Comm_usertoken>().ToTable(\"Comm_usertoken);\n. You don't want to save plain text password in a database. \nOr let me ask this. WHY do you want to save it plain text?. ",
    "egorpavlikhin": "Maybe it works with default DI container, I am using a custom Castle.Windsor container. All in all the problem is fixed simply by adding  \nservices.Configure<PasswordHasherOptions>(options =>\n            {\n            });\nServices registration method:\n```\napp.UseServices(services => {\n            // Add EF services to the services container.\n            services\n                .AddEntityFramework(Configuration)\n                .AddSqlServer()\n                .AddDbContext();\n        // !! This fixes the problem described !!\n        services.Configure<PasswordHasherOptions>(options =>\n        {\n        });\n\n        // Add Identity services to the services container.\n        services\n            .AddIdentity<ApplicationUser, IdentityRole>(Configuration)\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        // Add MVC services to the services container.\n        services\n            .AddMvc();\n\n        container.Populate(services);\n\n        container.BeginScope();\n\n        return container.Resolve<IServiceProvider>();\n    });\n\n```\n. It is hard to get a repro, since it requires a different DI container to be shown, but services.AddOptions(); isn't enough, PasswordHasherOptions do not get registered. If I have time I will create a repro project.\n. Ok, here is a repro https://github.com/egorpavlikhin/IdentityIssue319\nUncommenting this line fixes the problem https://github.com/egorpavlikhin/IdentityIssue319/blob/master/Startup.cs#L67\n. @HaoK please have a look at the repro project, when you get a chance.\n. This container passes all DI unit tests though. Do you think this should be added as a test case or each option should be registered explicitly with the container?\n. Strange, because right now it does end up being null.\n. ",
    "ilmax": "@divega those interfaces can be useful when you want to change the shape of user or role in your db for example. I can obviously live without, but they can be a nice addition to aspnet Identity\n. @divega agree, aside from IQueryable debate, exposing access to underlying provider makes the abstraction weak.\n. ",
    "ngbrown": "Thanks for the response.  I think with all the requests and commands really supposed to be going through RoleManager and UserManager, it really doesn't make much sense having these entities publicly available in the core, especially if they are not going to be used.\nIt makes it too easy for the developer to try to use the entities directly (along with the stores) instead of going through the managers like they are supposed to.  Then they run into problems when a specific port doesn't even use the core entities in their implementation of the UserStore and RoleStore.\n. ",
    "lstyles": "It's not needed. \nI believe that even without elements the result would be: System.Linq.Enumerable.WhereListIterator\nThis doesn't really matter though as ToList() method will definitely turn it into an empty list:\nhttps://github.com/aspnet/Identity/blob/c9d27e27e6dd6c15b4228de6e5de3c1a22c15a6d/samples/IdentitySample.Mvc/Controllers/AccountController.cs#L31\nAlso, see this:\nhttp://stackoverflow.com/questions/1191919/what-does-linq-return-when-the-results-are-empty\n. ",
    "jusbuc2k": "What benefit does having the interfaces support IQueryable if different implementations can choose to not implement them by throwing? Wouldn't it better that if a specific implementation wants to provide IQueryable's that said implementation provides those via a singleton or something? e.g. SpecificUserStore.Current.GetQueryableUsersOrWhatNot()\n. ",
    "heathyates": "We have created a basic application that demonstrates this error. See repo here: https://github.com/HeathWillCode/SampleIdentity\nSteps to reproduce: \n1. Navigate to application directory\n2. k ef migration add init\nIt will then display the error message we described above. \n. @suhasj Can you please explain why you used https://www.myget.org/F/aspnetrelease and not https://www.myget.org/F/aspnetvnext/api/v2? What nugget source should I be using for my demo? \n. @suhasj I cannot reopen this issue. I believe this is because I didn't create it. However, I updated the repo and I have the following steps to show you my current problem: \nStartup.cs\n\nDependencies in project.json\n\nNuGet \n\nGuess: Is this because my KRE (beta2) is not matching the packages version beta3? If so, how can I update my KRE from beta2 to beta3? I would really appreciate an explanation as to what could have gone wrong. Thanks. \nhttps://github.com/HeathWillCode/SampleIdentity\n. @suhasj Thanks! \n. ",
    "WillBaldwin": "Here is my theory....\nOn the StarterWeb project template in VS2015 it includes a migration file \"000000000000000_CreateIdentitySchema.cs\".  ASPNET.Identity does not yet support creation of a migration file.  In order to get the identity schema built for a new project people will have to obtain the file \"000000000000000_CreateIdentitySchema.cs\" from the StarterWeb project template in VS2015 and copy it in to your new project Migrations folder. Edit this file and fix the namespace and the references to the DBContext class.  Then run \"K ef migration add Identity\".\n. @HaoK, I am using a brand spanking new DB built under beta3 with code first.  I have the data there in the column.  I can see it the data in the object when I do a code break.  It just simply fails the comparison.\nI am working around the problem at the moment with entity framework so I know the data is good and the strings do compare correctly using EF.  The compare only fails with identity framework.\nI have also tried using lower and upper Invariants for both the userName string in the database, and the userName search string without success.\n. Works\njavascript\nList<ApplicationUser> applicationUsers\n     = await _db.Users.Where(b => b.UserName == User.Identity.GetUserName()).ToListAsync();\nFails\njavascript\nApplicationUser applicationUser\n  = await _userManager.FindByNameAsync(User.Identity.GetUserName().ToUpperInvariant(), cancellationToken: Context.RequestAborted);\nFails\njavascript\nApplicationUser applicationUser\n  = await _userManager.FindByNameAsync(User.Identity.GetUserName(), cancellationToken: Context.RequestAborted);\n. @HaoK   I found the problem and of course it is on my end.  FindByNameAsync is using the new NormalizedUserName field and my (b => b.UserName == User.Identity.GetUserName()) is using the original non-normalized field.  My NormalizedUserName field contained incorrect data and was throwing FindByNameAsync() off.  Closing this issue.  Thank you for looking at this with me.\n. I have probably coded this wrong but because my app uses windows Kerberos authentication,  context.User is the IPrincipal (Windows Identity) for the current logged in user.  In my case Context.User doesn't have any (Identity Framework) claims.\nOn GetClaimAsync()  POCO or not, for my purposes, i.e. in this instance I am managing claims for users other than the logged on user; building a UI to manage the claims another user has within the application.  The properties identityUserClaim.Id and identityUserClaim.UserId are both important.  System.Security.Claims.Claim does not have Id or UserId properties if that is what you refer to.\n. @HaoK ,\nI am unsure why I don't need identityUserClaim.Id and identityUserClaim.UserId of a claim.  identityUserClaim.Id is after all, the primary key, identityUserClaim.UserId is the foreign key.  When building MVC for managing a specific claim such as delete, I use the primary key to know which claim to delete.  That follows the pattern for other identity objects, 'users' for example.  \nIn my App, security is important, and will have a relatively small users base.  The security manager needs to be able to quickly review all assigned claims for all users without having to select each user to see what claims are assigned.  That way the security manager can quickly determine no one has claims they should not.  So I plan to give the security manager user a view enumerating all the claims in the app, again identityUserClaim.Id and identityUserClaim.UserId of each claim will be very important for the edit and delete actions or if the user wants to navigate to the details for the related user.\nMy app uses windows Kerberos authentication, context.User is the IPrincipal (Windows Identity) for the current logged in user. In my case Context.User doesn't have any (Identity Framework) claims. \nContext.User has the IPrincipal assigned from the windows Kerberos authentication consequently Context.User object does not contain the claims assigned to the matching Microsoft.AspNet.Identity.IdentityUser that are stored using Entity Framework.\nThus:\n\u2022Context.User.HasClaim() can not determine authorizations \n\u2022[Authorize(\"Administrator\", \"Allow\")] attribute on a controller action method to determine authorization at the controller cannot function.\nWhat can I do to get Context.User.HasClaim() and [Authorize(\"Administrator\", \"Allow\")] to function correctly when using windows Kerberos authentication?\n. This following post pushed me toward a direction that worked, the code in the post fails, but I was able to start from that and get to where I had working solution:\nhttp://stackoverflow.com/questions/28888006/how-to-use-windows-active-directory-authentication-and-identity-based-claims/28891029?noredirect=1#comment46068537_28891029 \nNOTE Identity Framework Team: The following solution works, but when writing for enterprise applications where 100% of all users are windows users.  It would be ideal to use Windows Authentication for the authentication piece and use Identity Framework for claims management.  Why?  (1) Windows Authentication doesn't require the user to type in credentials.  (2) Windows Authentication doesn't pass passwords over the network.  (3) Claims for applications are often managed by people who do not have group management privileges in Active Directory.\n```\n    //\n    // POST: /Account/Login\n    [HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public async Task Login(LoginViewModel model, string returnUrl = null)\n    {\n        if (!ModelState.IsValid)\n        {\n            return View(model);\n        }\n    //\n    // Check for user existance in Identity Framework\n    //\n    ApplicationUser applicationUser = await _userManager.FindByNameAsync(model.eID);\n    if (applicationUser == null)\n    {\n        ModelState.AddModelError(\"\", \"Invalid username\");\n        return View(model);\n    }\n\n    //\n    // Authenticate user credentials against Active Directory\n    //\n    bool isAuthenticated = await Authentication.ValidateCredentialsAsync(\n        _applicationSettings.Options.DomainController, \n        _applicationSettings.Options.DomainControllerSslPort, \n        model.eID, model.Password);\n    if (isAuthenticated == false)\n    {\n        ModelState.AddModelError(\"\", \"Invalid username or password.\");\n        return View(model);\n    }\n\n    //\n    // Signing the user step 1.\n    //\n    IdentityResult identityResult \n        = await _userManager.CreateAsync(\n            applicationUser, \n            cancellationToken: Context.RequestAborted);\n\n    if(identityResult != IdentityResult.Success)\n    {\n        foreach (IdentityError error in identityResult.Errors)\n        {\n            ModelState.AddModelError(\"\", error.Description);\n        }\n        return View(model);\n    }\n\n    //\n    // Signing the user step 2.\n    //\n    await _signInManager.SignInAsync(applicationUser,\n        isPersistent: false,\n        authenticationMethod:null,\n        cancellationToken: Context.RequestAborted);\n\n    return RedirectToLocal(returnUrl);\n}\n\n```\n. ",
    "kscott5": "Uh, Uh, I can answer this!!!! But first what's the purpose of the CopyAspNetLoader.cmd? Do I need to execute this script?\npowershell\nUsing ASP.NET 5.0 Dev (vNext) Branch\nkvm install latest -a default -x86 -r CLR\nDetermining latest version\nKRE-CLR-x86.1.0.0-beta3-10921 already installed.\nAdding G:\\tools\\.kre\\packages\\KRE-CLR-x86.1.0.0-beta3-10921\\bin to process PATH\nUpdating alias 'default' to 'KRE-CLR-x86.1.0.0-beta3-10921'\nPress any key to continue!:\nWell, IdentitySample.Mvc project is cloned from the dev branch. So, the project.json is using Microsoft.AspNet.Identity version 3.0.0-*.\njson\n{\n    \"authors\": [\n        \"Microsoft\"\n    ],\n    \"description\": \"Identity sample MVC application on K\",\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Microsoft.AspNet.Server.IIS\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-*\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Identity\": \"3.0.0-*\",\n        \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-*\",\n        \"Microsoft.AspNet.Security.Cookies\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Security.Facebook\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Security.Google\": \"1.0.0-*\",\n        \"Microsoft.AspNet.Security.Twitter\": \"1.0.0-*\",\n        \"Microsoft.AspNet.StaticFiles\": \"1.0.0-*\",\n        \"EntityFramework.SqlServer\": \"7.0.0-*\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-*\",\n        \"Microsoft.Framework.OptionsModel\": \"1.0.0-*\"\n    },\n    \"commands\": {\n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:41532\",\n        \"run\": \"run server.urls=http://localhost:41532\"\n    },\n    \"webroot\": \".\",\n    \"frameworks\": {\n        \"aspnet50\": {\n        },\n        \"aspnetcore50\": {\n        }\n    }\n}\nI execute the k package manager restore with the following options (Completed successfuly).\npowershell\nPS C:\\>kpm restore -s https://www.myget.org/F/aspnetvnext/api/v2 -s https://www.nuget.org/api/v2\n. That's good to know but back to my original issues. Why the error?\n``` html\nAn unhandled exception occurred while processing the request.\nMissingMethodException: Method not found: 'Microsoft.AspNet.Http.Interfaces.Security.ISignOutContext Microsoft.AspNet.Security.Infrastructure.AuthenticationHandler.get_SignOutContext()'.\nMicrosoft.AspNet.Security.Cookies.CookieAuthenticationHandler.d__15.MoveNext()\n```\n. Explain this to me. Here's my scenario. The Microsoft.AspNet.Mvc folder contains\n\nActive KRE is beta3.\n``` powershell\nPS G:\\apps> kvm list\nActive Version           Runtime Architecture Location               Alias\n------ -------           ------- ------------ --------               -----\n       1.0.0-beta3-10907 CLR     x86          G:\\tools.kre\\packages\n       1.0.0-beta3-10914 CLR     x86          G:\\tools.kre\\packages\n  *    1.0.0-beta3-10921 CLR     x86          G:\\tools.kre\\packages default\n       1.0.0-rc1-10889   CLR     x86          G:\\tools.kre\\packages\n       1.0.0-rc1-10894   CLR     x86          G:\\tools.kre\\packages\n```\nAnd project.json list dependencies without any reference to beta, rc and anything else. So, should the k web command detect beta3 and use any dependencies with -beta3-?\nCause right now between you and Praburaj, this is becoming more complicated than it needs to be. How does the KRE reference KPM dependencies?\n. Ok, I removed ALL .\\kpm\\packages and I did what you asked \n$env:KRE_FEED=\"https://www.myget.org/F/aspnetrelease/api/v2\"\nkvm install latest -x86 -r CLR\npowershell\nPS G:\\apps\\aspnet\\dev\\Identity\\samples\\IdentitySample.Mvc> sqllocaldb start mssq\nllocaldb\nLocalDB instance \"MSSQLLocalDB\" started.\nPS G:\\apps\\aspnet\\dev\\Identity\\samples\\IdentitySample.Mvc> sqllocaldb info mssql\nlocaldb\nName:               MSSQLLocalDB\nVersion:            12.0.2000.8\nShared name:\nOwner:              PUBLIC\\BLCPublic\nAuto-create:        Yes\nState:              Running\nLast start time:    1/27/2015 12:42:10 PM\nInstance pipe name: np:\\\\.\\pipe\\LOCALDB#0B57F919\\tsql\\query\nPS G:\\apps\\aspnet\\dev\\Identity\\samples\\IdentitySample.Mvc> k web\nStarted\nkpm restore -s https://www.myget.org/F/aspnetrelease/api/v2 -s https://www.nuget.org/F/api/v2\nk web\nNow I get the following error\n``` html\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: Unable to resolve service for type 'Microsoft.Framework.Runtime.ICompilerOptionsProvider' while attempting to activate 'Microsoft.AspNet.Mvc.Razor.RoslynCompilationService'.\nMicrosoft.Framework.DependencyInjection.ServiceLookup.Service.CreateCallSite(ServiceProvider provider, ISet`1 callSiteChain)\nStack Query Cookies Headers Environment\nInvalidOperationException: Unable to resolve service for type 'Microsoft.Framework.Runtime.ICompilerOptionsProvider' while attempting to activate 'Microsoft.AspNet.Mvc.Razor.RoslynCompilationService'.\nMicrosoft.Framework.DependencyInjection.ServiceLookup.Service.CreateCallSite(ServiceProvider provider, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.GetResolveCallSite(IService service, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.GetServiceCallSite(Type serviceType, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceLookup.Service.CreateCallSite(ServiceProvider provider, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.GetResolveCallSite(IService service, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.GetServiceCallSite(Type serviceType, ISet1 callSiteChain)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.b__7_0(Type key)\nSystem.Collections.Concurrent.ConcurrentDictionary2.GetOrAdd(TKey key, Func2 valueFactory)\nMicrosoft.Framework.DependencyInjection.ServiceProvider.GetService(Type serviceType)\nMicrosoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\nMicrosoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredServiceT\nMicrosoft.AspNet.Mvc.Razor.VirtualPathRazorPageFactory.CreateInstance(String relativePath)\nMicrosoft.AspNet.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext context, String pageName)\nMicrosoft.AspNet.Mvc.Razor.RazorViewEngine.GetRazorPageResult(ActionContext context, String pageName)\nMicrosoft.AspNet.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName)\nMicrosoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean partial)\nMicrosoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName)\nMicrosoft.AspNet.Mvc.ViewResult.d__16.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__44.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__43.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__42.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__37.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Mvc.FilterActionInvoker.d__32.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.MvcRouteHandler.d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Mvc.MvcRouteHandler.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.Template.TemplateRoute.d__25.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Routing.RouteCollection.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Builder.RouterMiddleware.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.<Invoke>d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.<Invoke>d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.<Invoke>d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.<Invoke>d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nMicrosoft.AspNet.Security.Infrastructure.AuthenticationMiddleware1.d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nSystem.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNet.Diagnostics.ErrorPageMiddleware.d__4.MoveNext()\n```\nNow what, I did what you asked, the original error is going but now there's a new one. This is just some small troubleshooting where my environment is configured incorrectly. \n- My path is point to what https://www.myget.org/F/aspnetrelease/api/v2 pulled down for KRE.\n- .kpm was wiped cleaned and configured with https://www.myget.org/F/aspnetrelease/api/v2 and https://www.nuget.org/F/api/v2 as source on the kpm restore command\n- SQLLocalDB was running before call k web\nThis appears to be an issue with KRE\n. BTW. I also cloned the Identity.git before doing anything using\ngit clone https://github.com/aspnet/Identity.git --branch release\n. We SCORED!!!! I'm using https://www.myget.org/F/aspnetrelease/api/v2. Thank you and Praburaj.\n. ",
    "ianhong": "@Haok I'm creating unit tests for MusicStore controllers, and do you have any samples to mock the store??\n. ",
    "hannmtz85": "``` c#\npublic class FakeUserManager : UserManager\n    {\n        public FakeUserManager() \n            : base(new Mock>().Object,\n                  new Mock>().Object,\n                  new Mock>().Object,\n                  new IUserValidator[0],\n                  new IPasswordValidator[0],\n                  new Mock().Object, \n                  new Mock().Object,\n                  new Mock().Object,\n                  new Mock>>().Object, \n                  new Mock().Object)\n        { }\n    public override Task<User> FindByEmailAsync(string email)\n    {\n        return Task.FromResult(new User{Email = email});\n    }\n\n    public override Task<bool> IsEmailConfirmedAsync(User user)\n    {\n        return Task.FromResult(user.Email == \"test@test.com\");\n    }\n\n    public override Task<string> GeneratePasswordResetTokenAsync(User user)\n    {\n        return Task.FromResult(\"---------------\");\n    }\n}\n\n```\n. ",
    "jholovacs": "Isn't that a bit ridiculous to mock what should be a simple interface?  There should be an IUserManager<TUser> that UserManager<TUser> implements, instead of going umpteen levels deep into mocking hell.  Nobody is trying to test the functionality of the UserManager, we should definitely not be instantiating this class to run unit tests, and it's similarly silly to require a class like this to be injected as a dependency.  This is a poor design decision.. Why not? It's unreasonable to just close this without discussion or\njustification... especially since I just did the work for you guys, and\nonce the daily build is working, you can have it in the code base.\nWhat possible design decision would require this functionality to be\nignored?\nAlso, please provide an example of mocking the UserManager directly in .NET Core that is not unnecessarily painful.  All examples and experiments I've tried have shown that you actually can't \"just mock UserManager directly\".\nOn Tue, Apr 3, 2018 at 11:52 PM, Hao Kung notifications@github.com wrote:\n\nClosed #1732 https://github.com/aspnet/Identity/issues/1732.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1732#event-1555550804, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABr4dG2J6ddzpUoibRC7jD80O_LmXRxdks5tlEN5gaJpZM4TEAbT\n.\n. this is failing with error \"Unable to find precompiled view file bin\\Debug\\netstandard2.0.dll\" which I don't think is related to the code change I made.... Looks like the integration of the Razor Sdk broke this branch.. \n",
    "ghost": "Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @Praburaj, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Praburaj Thiagarajan). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @NTaylorMullen, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @NTaylorMullen, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @MisinformedDNA, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @hishamco, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Any progress on this? We should also have IServiceCollection.AddIdentity<TUser> without having to specify TRole.\n. Thanks @blowdart and sorry for the late response (was busy with lifey stuff).\nSo in a middleware I am having:\nc#\nvar customStorageService = context.RequestServices.GetService<CustomMemroyStorage>();\nIdentityUser identityUser = customStorageService.GetUser( context.User.GetUserId() );\nNow to get ClaimPrincipal of this user, I added:\n``` c#\nvar um = context.ApplicationServices.GetService>();\nvar rm = context.ApplicationServices.GetService>();\nvar io =new OptionsManager(new List>());\nTask principal= new UserClaimsPrincipalFactory<\n                                             IdentityUser,\n                                             IdentityRole\n                                   >( um, rm, io )\n                                .CreateAsync( identityUser );\n```\nMy only gripe is the part where we are mandated to specify some arbitrary IOption<IdentityOptions> object in factory ctor..\nIn addition to this existing ctor, can we have UserClaimsPrincipalFactory<TUser>(UserManager<TUser>) (re: #617) and UserClaimsPrincipalFactory<TUser>(UserManager<TUser>, RoleManager<TRole>) which can use default options?\n. Instructions for this would be quite important for us since we are using a large pre-existing database that uses INT as the primary user key.\n. This one can closed it work now\n. Ok Hao.\nVery good.\nThank you.\n. Experiencing same issue. I updated the issue. \"And this is a browser based request?\" - Yes\n\"I would expect it to redirect to login\" - We do it with JS\nThe question is: Why do we need AccessDeniedPath if it does not do anything?\nI expected to be redirected to AccessDeniedPath.\nPlease, correct me if I am wrong.. Yes, it is an ajax request.. Thank you. . As I did before :p. @blowdart \nWell, as there is no documentation, I see role claim like this (\"in much more complex and powerful way\"):\n- We can use role claim for \"Group Policy\", in assigning claims.\n    - As in Active Directory Groups GPO and access permission, or Linux/Unix groups permissions. (To get a more fine grained access control.)\n- Users are in one or more groups, and these groups have permissions set.\n- As in Windows/Linux-Unix systems, users can carry claims/permissions as well.\nRecap: users can be in several roles/groups. These roles/groups have claims/permissions which give access or not to a resource. (And all this stuff can be mapped with  users/groups of a running OS).\nFor example, for a given role claim table like this (mapping IActionResult):\nId | ClaimType | ClaimValue \n----|-----------|------------\n  1 | Create    | Add\n  2 | Read      | Index\n  3 | Details   | Details\n  4 | Update    | Update\n  5 | Delete    | Delete\nIf a group has claim  5 | Delete    | Delete, every user in this group will be able to delete things that are related to what this group has access to.\nEverything is checked in a AuthorizationHandler class (unfortunately, registered as Scope), where Role claims, for the current user, are checked through IdentityDbContext.\nLike this, we can give access to area, documents, etc\u2026 in a more fined grained, and natural? way.. @blowdart \nAnd what about the design? Could it be \"revised\"?. >If you want fine grained you go to claims.\nFor now, I do not see who to get the same result I need, with claims only. Maybe the future documentation will be helpful.\n\nRoles are a hold over from NT Domains/Groups, which were extended to be more useful by assigning claims to them as well as the role name, so folks could get claims in an easier to manage manner.\n\nUnfortunately it is \"too simplistic\". Too bad, because we could get a powerful ACL system in ASP.NET Core.. I agree, but \n- it will be better/easier to understand with a doc\u2026 for now nothing is easy in the flexibility/customization (even if I succeed to do what I want, it costs me too much time because of the lack of documentation)\u2026\n- ACL is not something too much complex for enterprise level app\u2026 (I used to code in PHP, and Zend frameworks, Joomla, etc\u2026 provide ACL. With all due respect, In comparison, Identity looks like a back to the Past\u2026)\n- nothing prevents to suggest some improvements, or do not mention community involvement\u2026\n- you should \"write\" for customers, not for simplicity sake\u2026 And I used to think that ASP.NET Core was for writing enterprise level app, not to write simple blogs\u2026\nAnyway, while waiting for your documentation, I wish you a good day.. @ajcvickers \nNot obvious, even very weired\u2026 I find this very buggy, like a lot of things with Identity/Efcore\u2026\nAnyway, I tried to override these properties in this app for translation purpose\u2026\nSo how can I localize this properties?. ",
    "BrennanConroy": "I don't think it was for ef. But there are small changes in the identity one.\nSent from my HTC\n----- Reply message -----\nFrom: \"Diego Vega\" notifications@github.com\nTo: \"aspnet/Identity\" Identity@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [Identity] Updating .kproj files (#346)\nDate: Tue, Feb 3, 2015 6:42 PM\nWas it needed for EF though? @BrennanConroyhttps://github.com/BrennanConroy\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/Identity/pull/346#issuecomment-72780281.\n. The error says InvalidOperationException: Unable to resolve service for type 'Microsoft.AspNet.Identity.IUserStore1[EmptyToStart.Models.ApplicationUser]' while attempting to activate 'Microsoft.AspNet.Identity.UserManager1[EmptyToStart.Models.ApplicationUser]'.\nAn average user would not know the internals of which services AddIdentity and friends add and would not know what to do.\n. @HaoK @Tratcher \n. You looking for https://github.com/aspnet/HttpAbstractions/blob/release/src/Microsoft.AspNetCore.Http.Abstractions/CookieSecurePolicy.cs#L24 ?\n. @Tratcher \n. ",
    "azuneca": "The version is 2.1.0\n. I fixed it by doing the following things: \n1. I added two computed columns to the users table NormalizedUsername and NormalizedEmail.\n2. I set indexes on the columns...\nNow everything, works just fine :)\n. ",
    "joshpearce": "Closing: I can clone and build this solution successfully using the latest Visual Studio 2015 CTP and the 3.0.0-beta3 tag.\n. ",
    "AlirezaHaghshenas": "@rustd @HaoK I guess I can contribute this. But I need to be briefed on your preferred method.\n. @HaoK  Ok, I'll give it a try. I'll ask you in case I'm unsure about the approach.\n. Which source should I make changes to? The V2.x in CodePlex or V3.x in Github?\n. ",
    "gouravd": "Could you please share the link? I was not able to find it here - https://aspnetidentity.codeplex.com/workitem/list/basic?field=CreationDate&direction=Descending&issuesToDisplay=Open&keywords=&emailSubscribedItemsOnly=false\n. ",
    "barrytang": "Can one of you open a issue under Tooling-Internal?\n. Great to hear! Thanks @divega!\n. ",
    "azeyad": "So is it considered as a good practice to use the LDAP authentication(Authentication.ValidateCredentialsAsync) inside the account controller itself besides the usermanger authentication(_userManager.FindByNameAsync)? Or it would be better if I inherited a new class from the usermanger and modified the FindByNameAsync method to do the LDAP piece as well to encapsulate the authentication logic in one place?\n. ",
    "japurcell": "Out of curiosity, why isn't it on github?\n. Makes sense now; 3.0+ isn't on Nuget yet.\n. ",
    "greerde": "Is there any update on this?  @suhasj @rustd \nI just updated to the latest and greatest Identity Nuget packages.  I am setting getting very high query counts with most being repeats.\n. @divega \n. ",
    "jchadwick": "It's actually working great for other basic operations.  It just seems to be this one data type...\nWhere can I get EntityFramework.InMemory?  Seems to have dropped from the package source.\n. Yup, I'm pointing to a SQL DB in Azure.\n. @divega Yeah, I got that.  That's why I'd prefer to be able to hit the real SQL server.\nI'm not sure what you're asking in regards to the ADO.NET provider.  I'm using vNext on OSX via Mono.  I included all the version info that I thought was relevant in the post - is there something else that I can provide?\n. ",
    "lvasiliou": "Thanks it looks like v2.0 is dead as there have been no updates ever since.\n. ",
    "cherrydev": "Okay, I notice you've just done sorta the opposite of what I was requesting:\nYou moved all of the POCOs directly into the EntityFramework project instead of a 3rd project.\nI guess this would make it slightly cleaner for me to make a direct port of Identity.EntityFramework to EF6 (since there would not be duplicate types in Identity) but doesn't really save any effort.\n. Okay, so I managed to port the EF identity store provider to EF6 without too much trouble.  The biggest problem was that EF6 doesn't support entities with type parameters, so this (ironically) meant adding a whole bunch more (mostly redundant) type parameters to IdentityDbContext, RoleStore, UserStore and everywhere that cascades to, which I believe is how the Identity 2 EF6 store is implemented too.\nThere's some commented out code in IdentityDbContext which actually seems to be redundant, below the builder definition for TUserRole:\n// Blocks delete currently without cascade\n            //.ForeignKeys(fk => fk.ForeignKey<TUser>(f => f.UserId))\n            //.ForeignKeys(fk => fk.ForeignKey<TRole>(f => f.RoleId));\nBut this is already declared above in the definitions of TRole and TUser and those FKs definitely already get generated.\nAnyhow, what I've done is not very much work but on @Eilon 's advice, I'd like to contribute this back to the project (and I'm supposed to also mention @divega @rustd and @haok in this message!).\nThere's still another big issue, though, that I've also partially solved:  If using the \"kpm wrap\" method of integrating an EF6 context into an aspnet5 project, an EF6 Identity.EntityFramework package can't be a single package that contains the POCOs, the DbContexts, UserStore & RoleStore and the builder extensions; the UserStore, RoleStore and builder extensions all depend on the core Identity package and therefore can't be referenced from .csproj style project.  So, either this would need to be split into two different packages (a .csproj project and a aspnet5 project that depends on it) or we'd need an alternative to the \"kpm wrap\" method:\n\u2026which I have a working proof-of-concept of.  I wrangled DbMigrator and Scaffolder in EF6 to work inside of a aspnet5 project in a similar manner to the \"k ef\" series of migration commands and it works cleanly without needing access to any internal or private classes or members.\nSo, this means that we now have a cross-project dependency in order to get this working, which seems a bit daunting to me.  Is anyone willing to help me get this to happen?  I suppose EF6 migration commands for aspnet5 would be its own new package, right?\n. As for the E6 migrations, it's not any sort of hack at all.  It just uses the (public) DbMigrator and Scaffolder classes to create the .cs, Designer.cs and .resx files or update the database, which is what the PowerShell commands do.  The only significant work to really do now is to get the command line processing and options sorted out.\n. Thanks for the reminder.  Now that I'm using the non-daily beta4 releases I should do some cleanup that fits better with this release.  I'm a bit unsure where to go with the portion of the code for doing the EF6 migrations, since it's nothing specific for Identity, and it's not related to EF7.  Basically, there doesn't seem to be a place for it in the aspnet github project umbrella.  Any advice?\n. @divega It loos like what @ghrapan has is probably a bit further ahead than what I have, though what I have seems to work for my use cases so far.  I think my private version uses a much earlier beta of AspNet.Identity.EntityFramework as a starting point and assuming that he's started with something much more recent, his implementation is probably more robust than mine is.\nMy sticking point for contribution right now is the fact that there is still no DNX support for EF6 commands officially available and while I'd be happy to contribute that work that I've been doing on that, I don't want to publish something that's either going to end up obsolete in a couple more months (if the existing EF6 PS commands somehow become usable with DNX), or stay responsible for maintaining it for the community without at least an endorsement from MS.  The last I heard from you during the summer (here), it was still under discussion.  I've poked you once since then but haven't gotten a response, so I've been waiting on some sort of word about what, if any, plans there are within MS for supporting EF6 commands on DNX.\n. @divega Feel free to e-mail me at this username at gmail if you want to discuss it.\n. No, I have not specifically write automated tests for the EF provider for the Identity framework.  I have, however, ported over a portion of the EF7 self-test utilities that automate the creation and destruction of databases for the purposes of tests.  That might be a prerequisite to writing effective and efficient tests for a EF6 identity provider.\n. My workaround was implementing my own UserStore and RoleStore.  I was porting it to EF6 anyhow.\n. I'm a bit confused by the inconsistent appearance of the error, but the stack trace definitely matches.\n. ",
    "ToddThomson": ":+1: I would very much like to see this make the initial 3.0 release.\n. @HaoK Sorry, I didn't mention that I got had this issue as well yesterday. The package does exist and can be installed individually.\n. ",
    "ghrapan": "I have created a direct port of Identity.EntityFramework namespace (RC1) to EF6:\nhttps://github.com/EntrypointSoft/AspNet.Identity.EntityFramework6\nWould somebody be interested to incorporate it?\n. ",
    "mrahhal": "For anybody looking for a dnx based EF6 migrator, I've implemented one here: Migrator.EF6.\n. ",
    "weitzhandler": "@HaoK \nThe problem is there are zillion of implementations with not a single one even recommended officially. You don't want to implement one yourself that's fine, please at lease recommend one officially.\nHere's my single-file and small (<250 lines) ASP.NET Core IUserStore<TUser> wrapper around the ASP.NET Identity's UserStore<TUser, TKey>, would love to hear any comments.. Figured it out, I had to add the frameworks section in my DLL.\n. In my scenario, the server doesn't hold very secure information and the end users are senior people most of them without computers or internet access, and they're accessing the system via phone authentication (the password consists of digits only).\nOne of the requirements of my customer is to provide a back-office that gives complete control over the users and their passwords, so the secretary that manages the user base should be able to reveal users' passwords on demand.\nIsn't there a possible way to reverse the password hashing and display it to authorized roles?\n. No, it's so that when the end user calls up the back office asking \"hello what's my password\" she can tell the end user the password after verifying other identity details.\nThis is my customer's demand.\nThe end user data is all visible to the back office anyway.\n. I didn't actually think it's going to be a real issue, but it's my customer's demand to let the backoffice RETRIEVE the users password without having to reset it.\nIsn't there a way to un-hash the password?\n. @blowdart \nThanks for the update.\nI've notified my customer and we agreed there will be a single-click way for the back office to rest password for user.\n. @blowdart \nThose examples use EFCore. The OP was referring to EF6, which is my question as well. And in short, how do I implement a UserStore<User, TKey> untied to EF7.. @ajcvickers I read the whole thing and didn't come to a conclusion, is it possible to have ICollection<TRole> Roles in User like we used to have in the previous version of ASP.NET Identity?. I'm burning so many hours trying to find a solution!\nWhen you remove a feature, please at least provide some basic guidance on how to work around it.\nI followed the instructions here, but when calling dbContext.Database.MigrateAsync(), I'm getting the following exception:\nSystem.Data.SqlClient.SqlException: 'Introducing FOREIGN KEY constraint 'FK_UserRoles_Users_UserId' on table 'UserRoles' may cause cycles or multiple cascade paths. Specify ON DELETE NO ACTION or ON UPDATE NO ACTION, or modify other FOREIGN KEY constraints.\nCould not create constraint or index. See previous errors.'\nI suggest this issue to be reopened.. I got it to work.\nHere's my set up:\npublic partial class User : IdentityUser<int>, IUser\n{\n  public virtual ICollection<UserRole> UserRoles { get; set; }\n}\n\npublic partial class Role : IdentityRole<int>\n{  }\n\npublic partial class UserRole : IdentityUserRole<int>\n{\n  public virtual User User { get; set; }  \n  public virtual Role Role { get; set; }\n}\n\npublic class ApplicationDbContext\n  : IdentityDbContext<User, Role, int, IdentityUserClaim<int>,\n    UserRole, IdentityUserLogin<int>, \n    IdentityRoleClaim<int>, IdentityUserToken<int>>\n{\n\n  public ApplicationDbContext(DbContextOptions options) : base(options)\n  {\n  }\n\n\n  protected override void OnModelCreating(ModelBuilder builder)\n  {\n    base.OnModelCreating(builder);\n    builder.Entity<User>(b =>\n    {\n      b.ToTable(\"Users\");\n      b.HasMany(u => u.UserRoles)\n       .WithOne(ur => ur.User)\n       .HasForeignKey(ur => ur.UserId)\n       .IsRequired();\n    });\n\n    builder.Entity<Role>(role =>\n    {\n      role.ToTable(\"Roles\");\n      role.HasKey(r => r.Id);\n      role.HasIndex(r => r.NormalizedName).HasName(\"RoleNameIndex\").IsUnique();\n      role.Property(r => r.ConcurrencyStamp).IsConcurrencyToken();\n\n      role.Property(u => u.Name).HasMaxLength(256);\n      role.Property(u => u.NormalizedName).HasMaxLength(256);\n\n      role.HasMany<UserRole>()\n          .WithOne(ur => ur.Role)\n          .HasForeignKey(ur => ur.RoleId)\n          .IsRequired();\n      role.HasMany<IdentityRoleClaim<int>>()\n          .WithOne()\n          .HasForeignKey(rc => rc.RoleId)\n          .IsRequired();\n    });\n\n    builder.Entity<IdentityRoleClaim<int>>(roleClaim =>\n    {\n      roleClaim.HasKey(rc => rc.Id);\n      roleClaim.ToTable(\"RoleClaims\");\n    });\n\n    builder.Entity<UserRole>(userRole =>\n    {\n      userRole.ToTable(\"UserRoles\");\n      userRole.HasKey(r => new { r.UserId, r.RoleId });\n    });\n\n    builder.Entity<IdentityUserLogin<int>>().ToTable(\"UserLogins\");\n    builder.Entity<IdentityUserClaim<int>>().ToTable(\"UserClaims\");\n    builder.Entity<IdentityUserToken<int>>().ToTable(\"UserTokens\");\n  }\n}\n\n. @YodasMyDad \nAchieving a Roles property in the User entity, involves a greater issue which is the lack of support for many-to-many relationship without a join table in EF Core.\nThe issue is tracked here: https://github.com/aspnet/EntityFrameworkCore/issues/1368, please vote and comment.. @YodasMyDad \nIt is, hence you can't have a reference of ICollection<Role> in your User entity directly and a ICollection<User> in your Role entity, as we were used to when using EF6.\nYou will always need to manually load the join and the reference (UserRole+Role for User).. @MaximBalaganskiy\nI think the issue really lies on supporting implicit many to many relations.. ",
    "diffused": "I'd like to be able to do something like this:\n```\npublic class Startup\n{\npublic void ConfigureServices(IServiceCollection services)\n{ \n    var connectionString = Configuration.Get(\"Data:DefaultConnection:ConnectionString\");\n\n    // Add EF services to the services container.\n    services.AddEntityFramework(Configuration)\n        .AddSqlServer()\n        .AddDbContext<AppDbContext>(option => {\n            option.UseSqlServer(connectionString);\n        }); \n}\n\n}\n```\nI've been using \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta3\"\n(it's what comes up in in intellisense when adding to the project.json)\n. ",
    "calwi": "Not sure where to direct this, but I came up with the same error raised by jchadwick #403. In short I'm working through 'My First ASP.NET 5' on OS X. Yeoman, scaffold, all working fine. I clicked Register link on the running app, and get connection string error. I've changed this to point to a running version of SQL 2014 I have access to. I've created a blank DB for the purpose. It looks like it partially works, creating 7 Tables, then blows with this error. I can put the full stack trace somewhere if it's of interest, but point being, is it too early yet for this to be expected to work, or can you help point me in the right direction to help track down a fix? My setup is running EF7-beta4-13307, with DNX Mono-beta4 Runtime. \n. OK. Thanks Diego, Will what they say over at mono then, otherwise wait for the SqlClient long term as this seems the direction of travel.\n. Seems like they are already looking with this (https://github.com/mono/mono/pull/1773) and should be included in the next release, 4.2. I'm downloading a nightly build now to see if it turns up anything. \n. ",
    "NTaylorMullen": "Updated.\n. :shipit: \n. :smile: haha Code reviewing my script lol\n. :shipit: \n. MVC isn't testing on desktop due to preserve compilation context issues. Aka, we've worked around the break for now.. ",
    "IECOMPAT1": "cool  asdfasf \n. ",
    "tomaszbartoszewski": "Hi. I have some example, hopefully it will help.\nI created new app in VS2013 and it was working correctly (I'm using SQL SERVER 2012). But I have a bit different config at work so I moved it:\nmodels - we are using int as PK\nhttps://github.com/tomaszbartoszewski/IdentityBug/blob/master/WebApplication1/WebApplication1/Models/IdentityModels.cs\nand here is configuration:\nhttps://github.com/tomaszbartoszewski/IdentityBug/blob/master/WebApplication1/WebApplication1/App_Start/IdentityConfig.cs\nLet me know if you need any more informations.\nThanks\nTomasz\n. OK, I know the reason. I was migrating from SimpleMembership to Identity so we have already an user with hyphen in name. And you can still log in with his user name, looks like SignInManager doesn't care about configuration. And because of that I was thinking AllowOnlyAlphanumericUserNames is set to false by default - \"@\" and \".\" are not alphanumeric as well. However there is a comment \"Only allow [A-Za-z0-9@_] in UserNames\" but variable name is a bit misleading. I'm going to change my config and it will solve the problem. But this inconsistency between SignInManager and UserManager is probably not good.\nThanks for your time and help, I really appreciate it.\n. ",
    "stephenstroud": "Maybe you could achieve this using partial views at design time, depending on their role or pass in multiple models at runtime.\n@model MyModel.User.Role\n@foreach (var r in Model.Roles)\n{\n    @if (@User.IsInRole(r))\n    {\n}\n}\n. \"And further more, is it possible to implement single sign-on for web sites that cross domain, not only cross SUB-domain , with ASP.NET Identity Framework?\"\nUsing Machine Keys?\n. @chancewen  I achieved this cross domain by having a standalone identity web api exposed again with machine keys.\n. @chancewen A template already exists: New Project > ASP.NET Web Application > Web API > Change Authentication(Defaulted to Individual User Accounts) - Just host and call from a separate domain.  \nUsing and consuming the implementation:\nhttp://www.asp.net/web-api/overview/security/individual-accounts-in-web-api\nDon't forget to use CORS. Hope this is what you are looking for? other than that you have brockallen's solution.\nIf you don't want two mechanisms for identity (Your MVC project and a web api). Just create a web api interface inside your MVC project and reuse the existing identity plumbing. All the source code as above or do it the opposite way MVC project calling the identity web api project.\n. Assign a Role group to a user which consists of many roles.\nNice example here:\nhttp://typecastexception.com/post/2014/08/10/ASPNET-Identity-20-Implementing-Group-Based-Permissions-Management.aspx\n. For uniqueness yes, however, Usernames are easier for the user to remember rather than ID as they can associate this to something they know such as an email address. Nothing stopping you giving your users a GUID/ID to login though. \n. Okay solved it - found this Cookie sessions sample (https://github.com/aspnet/Security/tree/dev/samples/CookieSessionSample)\n which I'll alter to use memcached and will replace \"app.UseIdentity();\" within the identity Startup.cs with the new reference. Here comes role granularity :)\n. In case anyone needs bearer tokens earlier. Basic example of Identity with Bearer tokens.\nhttps://github.com/bigfont/AspNet.Security.OpenIdConnect.Server/tree/bigfont/samples/ResourceOwnerPasswordFlow\n. @leak, have you upgraded to the latest dnvm? Join the open connect conversation on gitter very active. https://gitter.im/aspnet-contrib/AspNet.Security.OpenIdConnect.Server not my repo sorry.\n. Yeah I'm running successfully with dnx-clr-win-x86.1.0.0-beta7-12364. You will probably need to add all the nightly build feeds to your Nuget Package manager if you haven't already. That should sort you out.\n. See here https://github.com/aspnet/Identity/issues/495\n. @satyajit-behera I achieved this with JwtBearerAuthentication(VNext), the tokens are self contained, so you can't force it, however, you can persistently store the token and validate it exists when making requests or delete it on logout so subsequent requests will be denied. You could also achieve sliding token lifetimes in the same way. You could do the same with the older version OAuthBearerTokens. \n. @satyajit-behera  which template version are you using? Are you using VS 2013/2012?\n. ",
    "SirwanAfifi": "@rustd So what's another solution for doing that? Do you have any idea?\n. ",
    "chancewen": "@stephenstroud thank you very much!  I forgot the mchine keys. It works after setting MachineKeys in web.config.\nHowever, how about cross domain (not sub-domain) single sign-on with ASP.NET Identity  Framework? it seems must depend on some third party framework, such as Thinktecture?\n. @stephenstroud Could you please share some your code about cross domain SSO without 3rd party framework? I'm really interested in it. Thank you!\n. @brockallen thank you! I will try.\n. @stephenstroud  Thank you very much!\n. ",
    "ursenix": "Excellent... seems I got an answer... Will workout this now\n. ",
    "BPA8": "@chancewen @stephenstroud  - I stumbled upon this thread while I was looking to implement SSO between my MVC applications which uses WEB API with Identity . WEB API, MVC 1 , MVC 2 apps deployed to azure web apps . Locally SSO seems to be working as expected but doesn't seem to be working in Azure? I have enabled useCors , added machine keys to all 3 of them . what am I missing? any pointers greatly appreciated!. ",
    "VishalMadhvani": "@stephenstroud i think you've misunderstood me. I'm not suggesting users login using a GUID/ID. While it is certainly a valid use case, it is very niche. A user's name can be stored in the Id property, and surely its the concern of the store to ensure uniqueness. \nIn such a situation the need for a username doesn't exist, and you have to work around the interface by setting the Id getter to return username.\n@HaoK I'd agree for the current EntityFramework, and most typical website authentication style implementations. However what if a UserName doesn't exist? It doesn't feel right to have to throw NotSupportedExceptions.\nAnyway just something I came across when writing a UserStore, so i though i'd bring it up.\n. ",
    "atrauzzi": ":+1: \n. That does restore successfully, but now Microsoft.AspNet.Identity.IUser doesn't exist.\nAny idea how I get that interface so that I can implement it myself?\n. Ah, no, I'm writing new code in a new project.  But I'm not necessarily using Entity Framework.\n. This is gonna seem silly, but it's really just a bare class that I'm starting out with.  I'm going through making an ASP.NET 5 project from scratch to study it.\n```\nnamespace Project.Domain {\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNet.Identity;\n\n\npublic class User : IUser {\n\n    public string Id {\n        get {\n            throw new NotImplementedException();\n        }\n    }\n\n    public string UserName {\n\n        get {\n            throw new NotImplementedException();\n        }\n\n        set {\n            throw new NotImplementedException();\n        }\n\n    }\n\n}\n\n}\n```\nNothing special at all in dependencies:\n\"dependencies\": {\n    \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-rc1-final\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-rc1-final\",\n    \"Glimpse\": \"2.0.0-beta1\",\n    \"Microsoft.AspNet.Identity\": \"3.0.0-rc1-final\",\n    \"EntityFramework7.Npgsql\": \"3.1.0-beta8-2\"\n  },\n. I should add, the problem here is that it can't find the IUser interface.  Nothing implementation specific.  It's just not available, despite having the package installed.\n. Maybe it's that all the keys are handled through the repository/store?\n. Hah!  Brave new world! :)\n. ",
    "moliveto": "Hello,\nI have the same problem. I have an UserStore without RoleStore.\nYou have been able to solve your problem?\n. ",
    "MikeSchlichting": "I'm seeing a similar issue with account locking.  PasswordSignInAsync(shouldLockout: true ) is not setting user.LockoutEnabled = true until AFTER the user enters their password.  So lockout checking will not occur during the first factor authentication.  However, if the user enters their correct password during first factor authentication THEN user.LockoutEnabled is set to true and lockout checking will be enforced during second factor authentication.        \n@rustd Did you pass a value of 'true' to PasswordSignInAsync()?  2FA locking works for me when I pass in true for shouldLockout, but lockout checking does not work during 1FA.  I can get 1FA locking to work by first calling UserManager.SetLockoutEnabledAsync(user, true) prior to the login attempt but I would expect locking to work when the shouldLockout parameter is set to true.     \n. @HaoK Sure thing\nExpected behavior: Setting shouldLockout = true will enable locking.\nActual behavior: Setting shouldLockout = true only works when LockoutEnabled is also set to true. \nSteps to reproduce:\n1.  File New Asp.Net Web App/ASP.Net 5 Preview Templates/Web Site\n2.  Change shouldLockout : false to shouldLockout : true in AccountController/Login\n3.  Run App\n4.  Register a new login\n5.  Logout\n6.  Try to login with an invalid password several times.\nResult: User is not locked out\nI was expecting to be able to turn on locking by setting shouldLockout = true.  It looks like you must first enable locking by calling UserManager.SetLockoutEnabledAsync(user, true);  Can you verify if this is the intended design?\n. @HaoK Thank you for the clarification.\n. Beta 4.  I'm ok with closing this out.\n. ",
    "RyanDansie": "That's exactly what I needed. Thanks very much!\n. ",
    "hishamco": "The commits has been squashed\n. @Eilon Can you merge this fix like the other repos?\n. Thanks\n. \\cc @HaoK \n. @divega But there are some cases such as checking with String.IsNullOrEmpty() or typo inside the exceptions literal may difficult little bit to discover, I already did a check in all the repos last month to make a fix, also I'm doing another check from yesterday, I hope you take this in mind during the merge to avoid such things in the future ..\n. FYI I did the same fix in almost the repos - please can someone have a look and merge these changes:\nhttps://github.com/aspnet/HttpAbstractions/pull/327\nhttps://github.com/aspnet/WebSockets/pull/40\nhttps://github.com/aspnet/SignalR-SqlServer/pull/13\nhttps://github.com/aspnet/Testing/pull/123\nhttps://github.com/aspnet/MusicStore/pull/498\nhttps://github.com/aspnet/Mvc/pull/2690\nhttps://github.com/aspnet/Security/pull/287\nhttps://github.com/aspnet/SignalR-ServiceBus/pull/8\nhttps://github.com/aspnet/FileSystem/pull/109 \nhttps://github.com/aspnet/HttpClient/pull/26\nhttps://github.com/aspnet/Identity/pull/485\n. @HaoK can you merge this\n. /cc @Eilon\n. FYI the tests are fails in this PR https://github.com/aspnet/FileSystem/pull/109\n. @HaoK should I rebase and remove them changes in tests only\n. Don't worry @HaoK I will take care about these, but i'm facing some issues to run dnx test locally so I will let you know when i finish .. thanks\n. It takes time to figure out which of [NotNull] that doesn't let the tests run successfully, specifically if you have an issue to run dnx test locally :smile: \n@HaoK can you review and merge if everything is fine \n. Unfortunately i'm facing issues with dnx commands in my end :( \n. @HaoK  Shall I revert the `NotNull changes while @pranavkm take the initiative to execute NotNull -> Throw ArgumentNullException script to almost the aspnet repos\n. So shall I revert NotNull changes?\n. Ok @HaoK \n. @HaoK the PR has been updated\n. Just I figure out there's a typo here https://github.com/aspnet/Identity/pull/485/files#diff-5fad47ab1c97fb22b91f704b2e78a262R982 , I updated the PR while @HaoK is already merge. Seem he fix it.\nThanks @HaoK \n. @Eilon please check if AppVeyor is set up for this repo and provide me with AppVeyor token before someone merge this PR\n. thanks @Eilon\n. I will close this PR based on @Eilon comment here https://github.com/aspnet/EventNotification/pull/12#issuecomment-128427434\n. This is another way to use the kestrel server in code instead of having a configuration file, i did it in couple of repos Localization, Session to let the people know there's an alternative way to achieve that\n. Thanks @Elion\n. Sorry for the typo, I will update it now\n. @Eilon Is there a way to squash the commits without affect the PR?\n. @HaoK I did it one time back, but the PR closed\n. You are right\n. ",
    "henkmollema": "Rebased with dev\n. ",
    "jakeswenson": "@HaoK an options may work nicely, yes. also something to control the number of digits would be nice. My main goal is having the ability to use TOTP from my authenticator app. I think that'd be a nice 2fa scenario to hit.\n. To be clear, there are a couple of things to note about the current OTP code.\nRight now it's tied to 3 minute timesteps with a fixed skew of 2 steps either side. That mean there is a total of 15 minutes where the one-time password is valid...\nThere are three main 2FA options:\n- Email (3 minutes seems reasonable here)\n- SMS (3 minutes, for 15 minutes total window seems too big)\n- Authenticator apps (30 second timestep required, total window for allowed skew should be configurable, but i would think 0-1 time step seems reasonable. Should consult the RFC for advice)\nI think we need to be able to configure a OTP provider per type of 2FA verification, each having its own options.\n. Is there a plan for this to be in the RTM? Would it be ok if i try and tackle this to help get this done?\nThanks!\n. ",
    "bahrens": "Opened issue on wrong repo, re-created issue here https://github.com/aspnet/Security/issues/260\n. ",
    "glen-84": "True, but you may think that you registered locally, and there's no indication of failure (see also https://github.com/aspnet/Mvc/issues/2637 no. 12).\nYou might consider instructing the user to sign in via one of his/her connected services when a matching account is found with no password.\n. True, but you may think that you registered locally, and there's no indication of failure (see also https://github.com/aspnet/Mvc/issues/2637 no. 12).\nYou might consider instructing the user to sign in via one of his/her connected services when a matching account is found with no password.\n. ",
    "Mickael-Lamare": "About you first inquiry, it's very easy to switch to username as default instead or in addition of email.\n. @divega Hi, would it be possible to do the same with the other methods like, AddUserStore and AddUserValidator please?\n. I was a bit ambitious, I maybe don't need that anymore as I'm still searching how to find a correct solution to my needs.\nI'm currently working on a method to encrypt values stored through the default identity stores. (https://github.com/aspnet/Identity/issues/516)\nI'm able to encrypt all the datas except for the email address that is supposed to be validated with the UserValidator class, that's why I'd like to use it directly to override some methods then use it on my own custom user manager. I'm probably doing something wrong, that's why I'm unsure actually on what I really need in order to achieve my current task.\n. Why don't you directly add those fields into the aspnetusers table?\nsomething like\n\npublic class ApplicationUser : IdentityUser\n{\n    public virtual string FirstName { get; set; }\n    public virtual string LastName { get; set; }\n} \n\n. I understand what you're writing. Another way to do it, as you should already do it is to create the table after the result.Succeed condition and add an user id property to the userprofile table.\nIn the account controller file and register post method:\n\nif (result.Succeeded)\n{\n// ...\nvar db = new ApplicationDbContext();\nvar userProfile = new UserProfile\n{\n    UserId = user.Id,\n    FirstName = \"MyFirstName\",\n    LastName = \"MyLastName\"\n};\ndb.UserProfile.Add(userProfile);\nawait db.SaveChangesAsync();\n// ...\n}\n\nthen you can retrieve the row with selected user's id, a bit annoying to do it like this but it's working.\nStill some improvements to make it fancy but as an example you should understand easily.\nI wish to help you here. :)\n. Can this be a possibility, regarding the roadmap?\nDo I need to pull a request for it?\n. Thanks, for your answer, I'll learn how data protection works.\nI already found a way to do it with a custom method, but I'm wondering if it can be an option as a new core feature in Identity.\n. ",
    "ninlar": "Sure, I'll make the adjustments tonight.\n. Sorry guys, I've been swamped over the last couple of months. Glad I could at least point out the issue, and you can resolve it. I wish I would have got around to completing the work item.\n. ",
    "flyfishMT": "The User to Role relationship is what is different in my implementation. So IUserRoleStore is what doesn't work for me. An example would be there are different roles by \"UserGroup\" - and the UserGroup's can have roles with the same name, and a user can be in more than one UserGroup.  \nThis:\npublic virtual async Task<IdentityResult> RemoveFromRoleAsync(TUser user, string role)\nDoesn't work, because a user has role twice, in 2 different usergroups.  I'm just trying to use the stock UserManager, maybe I can't.\n. ok thanks\n. ",
    "ikourfaln": "thanx for reply :+1: \n. so ?? anyone\n. @kroniak !! I don't understand what is the relation between the maximum range of numeric data and our subject, I already know this article talking about. Do you mean that the default string as primary key (generated by GUID system) is better because there is no maximum value ?\n. @kroniak  So !!\n. @liamwang thank you for infos\n. ",
    "OlegDokuka": "+1, have same issue!! Help us!\n. ",
    "c1rus": "+1, me too.\n. ",
    "jspengine": "+1,  me too.\nEm 12/06/2015 12:12, \"Dmitry Sikorsky\" notifications@github.com escreveu:\n\nHi guys!\nWhy IdentityUser and IdentityRole are both defined in\nMicrosoft.AspNet.Identity.EntityFramework?\nIf User (derived from IdentityUser) is my model (I want to have and manage\nthe list of the users in the admin section for instance), I don't want to\nhave any links to the specific ORM in the models! It makes it impossible to\nhave modular project with unknown ORM.\nAnd with this new approach to the ClaimsPrincipal user it is hard to\nreplace Identity with the custom security provider...\nHow can I make User and Role models ORM-independent OR how can I replace\nthe Identity with the custom security classes? I don't want to have useless\nUser property in the controller and create another one for me.\nThank you for you attention and for the help.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/Identity/issues/489.\n. \n",
    "PartyArk": "Hi, first thanks for taking the time to reply.\nTo get to the point, here's what I think may be a typical scenario.\nLet's try to extend our ApplicationUser to have addresses associated with it. We'll first create a new Address class, and an Addresses table in the db with a UserId foreign key. We'll plan to have multiple addresses per User, hence the need for a separate table.\nFirst, we'll want to extend UserStore. The *Stores seem to be low-level mapping between the database and the application, so we won't put any logic here. Following the lead of the UserStore, MyUserStore will look something like this:\n```\npublic class MyUserStore : UserStore {\n   [omitted constuctor]\n\n    private DbSet<Address> Addresses => Context.Set<Address>();\n\n    public async Task<IList<Address>> GetAddressesAsync(User user)\n    {            \n        return await Addresses.Where(a => a.UserId == user.Id).ToListAsync();\n    }\n\n}\n```\nWe shouldn't be interacting directly with the Store. Business logic goes in the UserManager. I could create a separate class to manage UserAddresses, but it would be a lot neater to extend the UserManager and know all my methods are in one place. \nThe magic of DI allows us to do this quite neatly in the constructor:\n```\npublic sealed class MyUserManager : UserManager\n{\n        private readonly MyUserStore myUserStore.\n    public MyUserManager(IUserStore<ApplicationUser> userStore, .... ) :base(store, .....)\n    {\n            myUserStore = (MyUserStore)userStore;\n    }\n\n    // example: save user and address together\n    public async Task<IdentityResult> CreateAsync(User user, string password, Address address)\n    {\n        var result = await CreateAsync(user, password);\n        if (result.Succeeded)\n        {\n            // use a method from our custom userstore\n            return await myUserStore.AddUserAddressAsync(user, address);\n        }\n        return result;\n    }\n\n}\n```\nAnd again, that works fine. I have a new method in my MyUserManager which allows me to Create a user and its associated address at the same time. Of course, I'd expect to add a number of other methods both to MyUserStore and MyUserManager to change / update / remove addresses.\nTo register, I can do this:\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n                    .AddEntityFrameworkStores<ApplicationDbContext>()\n                    .AddUserStore<MyUserStore>();\n                    .AddUserManager<MyUserManager>();\nWhat I originally expected was then to have direct access to MyUserManager in my MVC Controllers or wherever else there is DI. In fact, I do - as long as I remember to do this:\nprivate readonly MyUserManager myUserManager;\n        public AccountController(UserManager<ApplicationUser> userManager)\n        {\n            myUserManager= (MyUserManager)userManager;\n        }\nSo, there we have it. I think this will be quite a common scenario. There are other ways of achieving what I want, but it seems to me the extensibility of the Identity framework should be used for this sort of thing. While Addresses will be quite a common scenario, the key here is to allow extensibility with whatever you want to do with your User.\nWhy go to the bother? Because this way, I know that all the methods I need for interacting with my extended ApplicationUser will be in my extended UserManager. The MyUserManager is a single, predictable interface to the Identity user.\nThanks again.\n. It would be helpful to know if the scenario I outlined is a sensible way of extending UserStore / UserManager, or if there's a preferred/better way. Thanks.\n. Great, I'll leave it up to you to decide what to do with my use case, but it may be that you don't actually need to do anything:  the Store / Manager classes are already extensible, and if the Use* methods work; the only 'caution' is that the DI passes around the base Interface rather than the concrete method, so if you want to use them via DI then you have to remember to cast appropriately.\nEssentially that may not be worth a re-factoring of the code, if a suitable example is provided.\nWhile I'm commenting, a couple of things you might want to flag elsewhere\n1. There's no view for Lockout in the sample, which seems like an omission\n2. More importantly, there's an assumption in the Sample that we should not reveal whether a User exists. So, with password retrieval for instance, if you enter a non-existent email it doesn't reveal whether that User actually exists or not. Assuming this is important, it's trivially easy to bypass: if I'm a bad-guy trying to see if user@gmail.com is a valid User, all I have to do is try to register him. If he is a registered user, then I'll be told \"user already exists\". I'm not sure whether there's any sensible workflow to prevent this, but I thought Id' flag it.\n. I don't think that's right. Bear with me.\nThe process is:\n- Successful registration. An a/c with a unique id and unique email is created, but is set to 'unconfirmed' so you can't login.\n- Simultaneously, a url is sent to that email. It contains a userid/token pair to confirm the a/c is valid.\n- On clicking the link, Identity fetches the registered a/c via userid and checks if the token is valid etc.\nSo, what would change if, instead, the url contained an email/token pair? Identity would look for the a/c via unique email address and check if the token is valid. Yes, the a/c is not yet confirmed, that's why we're trying to confirm it. \nYou say we can't use the email as the a/c identifier because the a/c hasn't been confirmed. I don't follow that logic. The a/c has been created for the email, it's just waiting for valid token to confirm it. Both the userid and the email address are unique pointers to that a/c - but for the reasons I posted above I suggest email address would be the better choice to identity the a/c we want to try Confirming.\n. Fair point, although I suspect a large number of implementations will use email as username.\nTo be clear then: I suggest the confirmation should use the a/c username (which may also be the email) with token, rather than the userId with token, thus avoiding exposing db internals.\n. Yes, but my point is that as soon as you do that, you know that that's an email that is registered. So, exploiting the lockout disclosure is a way of maliciously finding out if someone is registered. \nThe sample code goes to some lengths to stop that scenario, but the lockout notification is a trivial way of circumventing that.\ne.g. If I know your email and want to see whether you're registered on mybank.com, I can just try logging on with your email five times. If you are registered, it'll say 'your're locked out'. If you're not, it'll just keep saying 'wrong password' indefinitely. I now know something about you you probably would rather I didn't.\n. Well if you show the same error message regardless (which I agree only way to ensure security). Something like \"Your password may be incorrect, or maybe we've locked you out if you've been repeatedly trying. Come back in five.\"  \nLet's say I've inadvertently left on caps-lock, I've tried a few  times with what I'm sure is the right password, but keep getting that message. By now I have no idea whether I'm now entering an incorrect password, or whether I've actually entered it correctly but am locked out and it's not even trying to log me in. \nI then spot the caps-lock, enter what I think is the correct password, but because I'm locked out exactly the same error appears. \"Your password may be incorrect, or maybe we've locked you out if you've been repeatedly trying. Come back in five.\" The doubt sowed, I think \"Did I change it last week? Maybe I did...\" I don't know if I'm locked out, so I chance it and try another one. That won't work, Maybe I wait five minutes, but by now I've been told everything I've entered may be incorrect. And I'm not even sure if the lockout is still active or not - maybe it's still not trying?\nRationally, your suggestion might work, but I think would lead to some irate users who rapidly give up. In short, not telling users if they're locked out is not a good experience.\nI suggest the only good solution, if Lockout is enabled, is to temporarily store invalid login usernames, and apply the same behaviour ie. show a \"you're locked out, come back in five\" after five tries.\n. Anyway, to the case in point - the Sample implementation tells you when you've been locked out, thereby allowing an easy route to discovering whether a user is registered. \n. ",
    "ydogus": "I found the problem. It was my bad. I was adding the instance of the filter directly as a filter. I fixed it by changing adding the filter's type instead of instance while registering it as a service.\nChanged from:\ncsharp\nservices.Configure<MvcOptions>(options =>\n{\n    options.Filters.Add(Container.Resolve<Filters.GlobalActionFilter>());\n});\nTo:\ncsharp\nservices.Configure<MvcOptions>(options => \n{\n    options.Filters.Add(typeof(Filters.GlobalActionFilter));\n});\n. ",
    "leak": "Thanks for your example.\nWhen I clone your repo and switch the startup project to yours i get 157 build errors and 2 warnings. Seems to be mostly related to the forked project. Any chance you could have a look at that?\n. I am running dnx-clr-win-x86.1.0.0-beta6\n. I'm also interested in this topic. Especially in context with a pure Angular application without using MVC based controllers/pages at all.\nAll examples i found so far are somewhat outdated and also crazy over-engineered and complicated.\n. ",
    "eduaglz": "There you go =), I had some free time\n. ",
    "toddtsic": "UPDATE:\nI just tried a different approach to validating the password and it works (code below).  The VerifyHashedPassword is returning PasswordVerificationResult.SuccessRehashNeeded.  Can I ignore, or should I deal with that?\nCode showing replacement of UserManager.CheckPasswordAsync with PasswordHasher.VerifyHashedPassword:\n```\nFamily_Members record = new Family_Members()\n{\n    Family_UserId = model.Family_Details.Family_UserId,\n    Family_Member_UserId = thisUserId,\n    modified = DateTime.Now,\n    lebUserID = model.Family_Details.Family_UserId\n};\nPasswordHasher pHasher = new PasswordHasher();\nPasswordVerificationResult pvResult = pHasher.VerifyHashedPassword(user, user.PasswordHash, model.New_Player_Detail.TSIC_Password);\nswitch (pvResult)\n{\n    case PasswordVerificationResult.Success:\n        db.Family_Members.Add(record);\n        await db.SaveChangesAsync();\n        return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = String.Format(\"Player: {0} has been added to your family account.\", model.New_Player_Detail.TSIC_Username) });\n    case PasswordVerificationResult.SuccessRehashNeeded:\n        db.Family_Members.Add(record);\n        await db.SaveChangesAsync();\n        return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = String.Format(\"Player: {0} has been added to your family account.\", model.New_Player_Detail.TSIC_Username) });\n    case PasswordVerificationResult.Failed:\n        return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = \"Credentials for new player were not valid.\" });\n}\n```\n. Hao,\nI'm using a base controller class, so from controller in question\npublic FamilyController(\n            UserManager<ApplicationUser> userManager,\n            SignInManager<ApplicationUser> signInManager,\n            ITSICSessionManager session,\n            ApplicationDbContext dbcontext,\n            IOptions<AppSettings> appSettings,\n            IBusinessRulesManager brules\n        ) : base(userManager, signInManager, dbcontext, session, appSettings, brules)\n        {\n        }\nand from base controller:\n```\npublic class BaseController : Controller\n{\n    public ApplicationDbContext db { get; private set; }\n    public ITSICSessionManager s { get; private set; }\n    public IBusinessRulesManager br { get; private set; }\n    public SignInManager SignInManager { get; private set; }\n    public UserManager UserManager { get; private set; }\n    public IOptions AppSettings { get; private set; }\npublic BaseController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, ApplicationDbContext context, ITSICSessionManager session, IOptions<AppSettings> appSettings, IBusinessRulesManager brules)\n{\n    db = context;\n    s = session;\n    SignInManager = signInManager;\n    UserManager = userManager;\n    AppSettings = appSettings;\n    br = brules;\n}\n\n```\nDoes this get at what you are looking for, or do you need more detail?\nAnd from startup.cs:\n```\npublic class Startup\n{\n    public Startup(IHostingEnvironment env)\n    {\n        // Setup configuration sources.\n        var configuration = new Configuration()\n            .AddJsonFile(\"config.json\")\n            .AddJsonFile($\"config.{env.EnvironmentName}.json\", optional: true);\n    if (env.IsEnvironment(\"Development\"))\n    {\n        // This reads the configuration keys from the secret store.\n        // For more details on using the user secret store see http://go.microsoft.com/fwlink/?LinkID=532709\n        configuration.AddUserSecrets();\n    }\n    configuration.AddEnvironmentVariables();\n    Configuration = configuration;\n}\n\npublic IConfiguration Configuration { get; set; }\n\n// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add Application settings to the services container.\n    services.Configure<AppSettings>(Configuration.GetSubKey(\"AppSettings\"));\n\n    // Add EF services to the services container.\n    services.AddEntityFramework()\n        .AddSqlServer()\n        .AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(Configuration[\"Data:DefaultConnection:ConnectionString\"]));\n\n    // Add Identity services to the services container.\n    services.AddIdentity<ApplicationUser, IdentityRole>(\n            options =>\n            {\n                options.User.UserNameValidationRegex = null;\n                options.Password.RequireDigit = false;\n                options.Password.RequireLowercase = false;\n                options.Password.RequireUppercase = false;\n                options.Password.RequireNonLetterOrDigit = false; ;\n                options.Password.RequiredLength = 6;\n            }\n        )\n        .AddEntityFrameworkStores<ApplicationDbContext>()\n        .AddDefaultTokenProviders();\n\n    // Configure the options for the authentication middleware.\n    // You can add options for Google, Twitter and other middleware as shown below.\n    // For more information see http://go.microsoft.com/fwlink/?LinkID=532715\n    //services.Configure<FacebookAuthenticationOptions>(options =>\n    //{\n    //    options.AppId = Configuration[\"Authentication:Facebook:AppId\"];\n    //    options.AppSecret = Configuration[\"Authentication:Facebook:AppSecret\"];\n    //});\n\n    //services.Configure<MicrosoftAccountAuthenticationOptions>(options =>\n    //{\n    //    options.ClientId = Configuration[\"Authentication:MicrosoftAccount:ClientId\"];\n    //    options.ClientSecret = Configuration[\"Authentication:MicrosoftAccount:ClientSecret\"];\n    //});\n\n    // Add MVC services to the services container.\n    services.AddMvc();\n\n    // Uncomment the following line to add Web API services which makes it easier to port Web API 2 controllers.\n    // You will also need to add the Microsoft.AspNet.Mvc.WebApiCompatShim package to the 'dependencies' section of project.json.\n    // services.AddWebApiConventions();\n\n    //caching and session management\n    services.AddCaching();\n    services.AddSession();\n\n\n    services.AddSingleton<ITSICSessionManager, TSICSessionManager>();\n    services.AddSingleton<IBusinessRulesManager, BusinessRulesManager>();\n\n    //services.ConfigureMvc(config =>\n    //{\n    //    config.ModelMetadataDetailsProviders.Add(new CustomModelMetadataProvider());\n    //});\n}\n\n// Configure is called after ConfigureServices is called.\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerfactory)\n{\n    // Configure the HTTP request pipeline.\n\n    // Add the console logger.\n    loggerfactory.AddConsole(minLevel: LogLevel.Warning);\n\n    // Add the following to the request pipeline only in development environment.\n    if (env.IsEnvironment(\"Development\"))\n    {\n        app.UseBrowserLink();\n        app.UseErrorPage(ErrorPageOptions.ShowAll);\n        app.UseDatabaseErrorPage(DatabaseErrorPageOptions.ShowAll);\n    }\n    else\n    {\n        // Add Error handling middleware which catches all application specific errors and\n        // sends the request to the following path or controller action.\n        app.UseErrorHandler(\"/Home/Error\");\n    }\n\n    // Add static files to the request pipeline.\n    app.UseStaticFiles();\n\n    // Add cookie-based authentication to the request pipeline.\n    app.UseIdentity();\n\n    // Add authentication middleware to the request pipeline. You can configure options such as Id and Secret in the ConfigureServices method.\n    // For more information see http://go.microsoft.com/fwlink/?LinkID=532715\n    // app.UseFacebookAuthentication();\n    // app.UseGoogleAuthentication();\n    // app.UseMicrosoftAccountAuthentication();\n    // app.UseTwitterAuthentication();\n\n    //UseInMemorySession object;\n    app.UseInMemorySession();\n\n    // Add MVC to the request pipeline.\n    app.UseMvc(routes =>\n    {\n        routes.MapRoute(\n            name: \"default\",\n            template: \"{jSeg}/{controller}/{action}\",\n            defaults: new { controller = \"Home\", action = \"Index\", jSeg = \"tsic\" });\n\n        routes.MapRoute(\n            name: \"login\",\n            template: \"Account/Login\",\n            defaults: new { controller = \"Account\", action = \"Login\" });\n\n        routes.MapRoute(\n            name: \"error\",\n            template: \"Home/Error\",\n            defaults: new { controller = \"Home\", action = \"Error\" });\n\n        // Uncomment the following line to add a route for porting Web API 2 controllers.\n        // routes.MapWebApiRoute(\"DefaultApi\", \"api/{controller}/{id?}\");\n    });\n}\n\n}\n```\nThanks for looking at this, \nTodd\n. Here's the action method now (notice my workaround using PasswordHasher.VerifyHashedPassword, if you replace that with CheckPasswordAsync, you will be able to reproduce.\nT\n```\n[HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task AddTSICPlayerToFamilyAccount(FamilyViewModel model)\n    {\n        if (!String.IsNullOrEmpty(model.New_Player_Detail.TSIC_Username) && !String.IsNullOrEmpty(model.New_Player_Detail.TSIC_Password))\n        {\n            ApplicationUser user = await UserManager.FindByNameAsync(model.New_Player_Detail.TSIC_Username);\n            if (user != null)\n            {\n                string thisUserId = user.Id;\n            int countPrevious = await (from fm in db.Family_Members where fm.Family_UserId == model.Family_Details.Family_UserId && fm.Family_Member_UserId == user.Id select fm).CountAsync();\n            if (countPrevious == 0)\n            {\n                Family_Members record = new Family_Members()\n                {\n                    Family_UserId = model.Family_Details.Family_UserId,\n                    Family_Member_UserId = thisUserId,\n                    modified = DateTime.Now,\n                    lebUserID = model.Family_Details.Family_UserId\n                };\n\n                PasswordHasher<ApplicationUser> pHasher = new PasswordHasher<ApplicationUser>();\n                try\n                {\n                    PasswordVerificationResult pvResult = pHasher.VerifyHashedPassword(user, user.PasswordHash, model.New_Player_Detail.TSIC_Password);\n\n                    switch (pvResult)\n                    {\n                        case PasswordVerificationResult.Success:\n                        case PasswordVerificationResult.SuccessRehashNeeded:\n                            db.Family_Members.Add(record);\n                            await db.SaveChangesAsync();\n                            return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = String.Format(\"Player: {0} has been added to your family account.\", model.New_Player_Detail.TSIC_Username) });\n                        case PasswordVerificationResult.Failed:\n                            return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = \"Credentials for new player were not valid.\" });\n                    }\n                }\n                catch \n                {\n                    //if (ex is FormatException)\n                    //{\n                    //    user.PasswordHash = pHasher.HashPassword(user, model.New_Player_Detail.TSIC_Password);\n                    //    user.SecurityStamp = Guid.NewGuid().ToString();\n                    //    await UserManager.UpdateAsync(user).ConfigureAwait(false);\n                    //}\n                    return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = \"There was a server error validating the new player, please try again...\" });\n                }\n            }\n            else\n            {\n                return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = String.Format(\"Player: {0} is already included in your family account.\", model.New_Player_Detail.TSIC_Username) });\n            }\n        }\n        else\n        {\n            return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = String.Format(\"Username: {0} is not a valid.\", model.New_Player_Detail.TSIC_Username) });\n        }\n    }\n\n    return RedirectToAction(\"EditFamilyAccount\", new { StatusMessage = \"There was an error updating your family account.\" });\n}\n\n```\nIf it helps to see the Family_Members model \nbtw I us database first,  specifically:\ndnx . ef reveng \"Data Source=HP-HT\\SQLEXPRESS2014;Initial Catalog=TSIC2015V6;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False\"\n```\nusing System;\nusing System.Collections.Generic;\nusing Microsoft.Data.Entity;\nusing Microsoft.Data.Entity.Metadata;\nnamespace TSICV5.ModelsDB\n{\n    public partial class Family_Members\n    {\n        public Family_Members()\n        {\n        }\n    // Properties\n    public int Id { get; set; }\n    public string Family_Member_UserId { get; set; }\n    public string Family_UserId { get; set; }\n    public string lebUserID { get; set; }\n    public DateTime modified { get; set; }\n\n    // Navigation Properties\n    public virtual AspNetUsers Family_Member_User { get; set; }\n    public virtual Families Family_User { get; set; }\n}\n\n}\n```\n. ",
    "prasannapattam": "I vote for this feature.\n. ",
    "kerryjiang": "I fixed it by adding the line below in ConfigureServices method of Startup:\nservices.AddEntityFrameworkStores<YourDbContext>();\nProbably the name \"AddEntityFrameworkIdentityStores\" is more suitable for this extension method.\n. ",
    "vncastanheira": "@HaoK I used those Autofac registrations on the end of the public void ConfigureServices(IServiceCollection services), after all service registrations, although I don't know where IHttpContextAccessor is registered exactly  (maybe with the other Identity services?). \nInstancing SignInManager throws this error only in this specific case. Controller, for example, are able to use it without any problem.\nEdit.: this occurs with beta4.\n. @HaoK Oh, it makes sense. Better use it directly on Controllers for now.\n. ",
    "mhowlett": "Should be able to find time to do this on the weekend.\n. I added an appropriate test (the system seems to have automatically picked that up in this pull request - how clever of it), however it is failing. In the debugger, I can see RemoveClaimAsync is executing as it should, however RoleClaims.Remove(c) doesn't seem to be removing the claims as I thought it would. I don't use Entity Framework, so there is likely a fundamental misunderstanding somewhere on my part... I see dbContext has a method SaveChanges, which I tried calling after attempting to remove the claims, however that made no difference. I think it's better if someone who knows what they're doing with this stuff works out what's going. Sorry, currently rather busy ...\n. ",
    "Reafidy": "That doesnt work with our buisness rules.  The userprofile table is actually more like a people table it has many other fields,  i have simplified the example.  There are many people but only a small amount of people have logins.\nThis feature use to work in older versions of asp.net identity.\n. Thanks for your help, that is definitely a viable alternative solution to the problem.   \nI was just curious as to what has changed in the new framework and whether or not it was a bug.\n. ",
    "EliotJones": "Non-issue, the username must be non-null to generate the principal\n. ",
    "CoskunSunali": "Okay, I believe I figured out the exact reason.\n- The CookieAuthenticationHandler.AuthenticateAsync method wants to validate the principle.\n- The await Options.Notifications.ValidatePrincipal(context); code line calls the SecurityStampValidator.ValidatePrincipalAsync method.\n- The validate = timeElapsed > accessor.Options.SecurityStampValidationInterval code line sets the validate variable to true because the timeElapsed is over the validation interval.\n- The validate variable being true gets the following two lines of code executed:\nif (validate)\n{\n    var validator = context.HttpContext.RequestServices.GetRequiredService<ISecurityStampValidator>();\n    return validator.ValidateAsync(context);\n}\n- The resolved service is of type: SecurityStampValidator<TUser> and its \"ValidateAsync\" method is below:\n/// <summary>\n/// Validates a security stamp of an identity as an asynchronous operation, and rebuilds the identity if the validation succeeds, otherwise rejects\n/// the identity.\n/// </summary>\n/// <param name=\"context\">The context containing the <see cref=\"ClaimsPrincipal\"/>and <see cref=\"AuthenticationProperties\"/> to validate.</param>\n/// <returns>The <see cref=\"Task\"/> that represents the asynchronous validation operation.</returns>\npublic virtual async Task ValidateAsync(CookieValidatePrincipalContext context)\n{\n    var manager = context.HttpContext.RequestServices.GetRequiredService<SignInManager<TUser>>();\n    var userId = context.Principal.GetUserId();\n    var user = await manager.ValidateSecurityStampAsync(context.Principal, userId);\n    if (user != null)\n    {\n        // REVIEW: note we lost login authenticaiton method\n        context.ReplacePrincipal(await manager.CreateUserPrincipalAsync(user));\n        context.ShouldRenew = true;\n    }\n    else\n    {\n        context.RejectPrincipal();\n        await manager.SignOutAsync();\n    }\n}\n- The code line var user = await manager.ValidateSecurityStampAsync(context.Principal, userId); returns null because the security stamp has expired.\n- The context should Reject the principle so the following code from the above method gets executed:\ncontext.RejectPrincipal();\n        await manager.SignOutAsync();\n- The SignOutAsync method also gets executed and it has the following code inside:\n/// <summary>\n/// Signs the current user out of the application.\n/// </summary>\npublic virtual async Task SignOutAsync()\n{\n    await Context.Authentication.SignOutAsync(IdentityOptions.ApplicationCookieAuthenticationScheme);\n    await Context.Authentication.SignOutAsync(IdentityOptions.ExternalCookieAuthenticationScheme);\n    await Context.Authentication.SignOutAsync(IdentityOptions.TwoFactorUserIdCookieAuthenticationScheme);\n}\n- The Context.Authentication property is of type Microsoft.AspNet.Http.Authentication.Internal.DefaultAuthenticationManager\n- The moment SignOutAsync method gets called, the story begins all over again from the first step - meaning the CookieAuthenticationHandler.AuthenticateAsync getting called again - and continues forever.\n. One more feedback regarding the issue, since I said that the issue would occur when the security stamp validation timespan has expired, I tried if the issue gets fixed by deleting the existing browser cookies.\nIndeed, it does. The issue went away when I cleared the browser cookies. Whole application loaded successfully.\nThat definitely looks like a bug to me. I hope the steps I provided will make you able to fix it.\n. @PinpointTownes, that seems to be exactly the same issue. Thank you for informing.\n. Thanks. Will try it as soon as it is published and report back if the problem persists.\n. I guess the changes were pushed. I don't seem to have the same problem since I have updated to the latest dev bits.\nThanks for your efforts.\n. ",
    "Ketrex": "I just tested it and I was able to retrieve the email claim without any problem. Perhaps in the user's facebook account, they have chosen not to provide their email address?\nYou may want to debug and set a breakpoint when you get the claims back from facebook and evaluate them manually to see if the email claim is in the collection. If it is not, it's likely the user account is not providing it (they have the option to opt out on the confirmation screen).\n. I believe your issue is related to (and fixed) in this code commit:\nhttps://github.com/aspnet/Identity/commit/1a0cd3c4d15be988abefd889853b0c6d973db9f4\nThis updated version has not been released yet. To get around the issue, you may want to copy the code in the corrected version into your own, custom UserStore as a temporary workaround.\n. @mdmoura\nreplace\n.AddEntityFrameworkStores<Context, Int32>()\nwith\nservices.AddUserStore<YourUserStoreClass<YourContextClassName>>()\nservices.AddRoleStore<RoleStore<YourRoleClassName, YourContextClassName>>()\n.AddEntityFrameworkStores() is just a helper method, if you dig into it, all it does is add the two stores to your service container. You can review it here\n. @mdmoura, I'm afraid that's not enough for me to go on. Any chance you can throw your project in a github repo so I can take a look?\nThat error indicates that your container does not contain all the necessary members to instantiate your custom UserStore. But without your code, it's hard to tell what the problem is. \n. @mdmoura I have sent you a PR that should get you up and running. \nPR 1\n. I am also experiencing this exact issue now when it was working previously. I can login using an external login provider just fine. When I attempt to add additional external logins to my account, I am redirected to the AccessDenied page. This functionality was working previously, probably before 1.0.1, though I cannot confirm.\n. @HaoK, I think there is a disconnect here.\nThe issue is not with calling Account/ExternalLogin from the template, that works fine.\nThe problem occurs when calling Manage/LinkLogin to add a second external login to an existing (and currently logged in) account.\nI can call Account/ExternalLogin with no problem with Facebook, Google, Twitter, and Microsoft, but trying to associate any additional external logins with that account now fails.\nCorrect me if I'm wrong @madmunsterdaddy or @jgimness but I believe that is the problem you're experience as well, right?\n. @madmunsterdaddy the problem isn't with the account controller (nor is the problem covered in any of these previous fixes. The problem appears to be in the ChallengeResult and how it responds to an attempt to add another external login to an already logged in account. The previous fixes definitely do not address this current scenario.\n. @madmunsterdaddy, just fyi, I upgraded my project to 1.1.0-preview (not to be mistaken with 1.0.1), and it appears the problem has been corrected. I haven't had time to dig into the code to see what has changed but clearly the ASP.NET Core team knew this was an issue and the future release does fix it.\n. Each user's HttpContext has it's own thread and the default Identity DI implementation creates a UserManager and DbContext that are scoped to that thread. I have never run into a problem with thread safety under this scenario, so I'm curious how your application is configured. Do you have a sample repository that demonstrates your implementation?\n. Deleting the included migration and adding a new one appears to fix the problem.\n. > We're really not trying to force anyone to do anything. We're trying to decouple apps from ASP.NET Core Identity so that you can choose whatever identity provider you want.\nThis seems disingenuous when you describe the issue you're trying to solve as:\n\nThis service should provide an opinionated and turn-key identity solution that enables customers to easily migrate to Azure AD B2C.\n\nThis doesn't imply flexibility in the Identity service as the goal, but rather, a push/promotion for Azure AD B2C.  It definitely flies in the face of the open and composable goals of ASP.NET Core up to this point.. ",
    "Morcatko": "It does not work for me. Based on some googling it seems to be related to change in facebook api.\n. ",
    "AlissonRS": "Yep, they changed things since api 2.4 as far as I know. I found a solution here.\n. @HaoK and @Ketrex assumed the user didn't want to share email, but this wasn't the case. I even tried with my own facebook account. I think @HaoK closed due to a lack of feedback from the OP. If you think this should be fixed in order to work without that workaround in SO, I think you should open a new thread/bug explaining with more details.\n. ",
    "RocketPop": "Why is this bug closed when the bug still exists? See the SO \"workaround\" linked by AlissonRS for more info\n. ",
    "imranbaloch": "Yes doing the same that you guys  doing https://github.com/aspnet/Identity/blob/715790c2134d5bd8904da65877c1fd4bce4b8035/src/Microsoft.AspNet.Identity/IdentityServiceCollectionExtensions.cs#L92\n. Yes doing the same that you guys  doing https://github.com/aspnet/Identity/blob/715790c2134d5bd8904da65877c1fd4bce4b8035/src/Microsoft.AspNet.Identity/IdentityServiceCollectionExtensions.cs#L92\n. ",
    "gdoron": "This doesn't effect the DbContext, right?\nIf I set my DbContext to be Transient, it will be transient for Identity too, right?\nWhen does the UserManager/LoginManager etc. are getting the context? when created or inside of each method call?\n. Had the same thing after I changed from our staging google's project to the production's one.\n@HaoK is it possible to make the error clearer?\n. It's doable but requires too much hassle that just decided to go with the default string ID.\n(You can not use IdentityDbContext, all the templates need to be changed)\nThis is a thing I really wish to be fixed soon too.\n. @rowanmiller who should we ping to get a response?\nIt's sad that EF and asp.net core that give so much flexibility enforces such a thing that I believe most of the users wouldn't want.\nHow many .Net applications are there that int isn't their pk type for users?\nYou need an enormous amount of users to actually need to use GUID as the PK.\n. @HaoK It's not just the DbContext, it's Identity helper classes (e.g. UserManager) as well (and obviously the asp.net templates).\nIsn't it?\n. I'm on my mobile phone, but you should add to the startup class some code that says the PK is an int.\nI'll upload it soon.\nIt works fine for me (using RC 2)\n. @SteveSandersonMS \nservices.AddIdentity<ApplicationUser, Role>()\n            .AddEntityFrameworkStores<ApplicationDbContext, int>()\nThis does the trick for me.\n. @HaoK, BTW, why is it even needed?\nWhy isn't inheriting from IdentityDbContext with the generic parameters  enough?\nIt looks redundant.\n. @HaoK I meant to say, that since you pass in ApplicationDbContext, you can infer the PK type from the IdentityDbContext generic parameter.\n. @HaoK Since most do, can't you check is IdentityDbContext?\nThat sounds like a lot better UX even if not the best OO.\n. @HaoK Out of curiosity, in which timezone are you...?  :+1:\n. Changing the user PK to int caused me problems with external login providers (OAuth).\nBe aware.\n885\n. Thanks for the answer @divega,\n\nbut by default it is true that it will open and close it as needed, even within the same request. In order to override this you can open the connection explicit in the beginning of the request, e.g. you could do this in the controller's constructor.\n\nI hope you classify it as a bug...\nA. I can't open the connection asyncly in constructors.\nB. I don't want to open a connection in each and every request, some of my actions are cache-able, meaning there will be absolutely 0 requests to the DB.\nC. It's a bit awkward.\nWhat is the reason it was designed this way?\n\nAlso, it causes changes made locally in the DbContext not \"seen-able\" in the other connection.\n-I am not sure what you mean by this.\n\nI meant that if there're changes still not flushed to the DB in the connection used by DbContext, the new connection used by UserManager wouldn't not see them.\nAm I right?\n. @HaoK But what is the difference between the two methods?\nFrom my understanding of the source code, they do the same thing, right?\nSo if my only usage of SignInManager is IsSignedIn, I can simply replace it with User.Identity.IsAuthenticated, correct?\n. @HaoK I'll give it a try in couple of days, after RTM and will let you know.\n. @HaoK I hope I'll have the time for it in the weekend.\nWe are overwhelmed with tasks.\nWill let you know soon.\n. @HaoK \nSorry for the extremely late response.\nOur codebase has changed a lot since we moved  from int to string, it required a lot of time to get to that point in time and fiddle with that, and time is a thing crucially missing in an early stages startup.\nAs far as I can see, it's working now using RTM bits.\nBut I guess for us it's too late, as we have too much data which rely on varchar.\nWell that's life.\nThanks.\n. @HaoK \nA. So might be a good idea changing the template which does use EF and still uses this method to get the id (didn't check if it was changed in 1.0.0 but I guess it wasn't).\nB. Any tip about What is the most efficient way of getting the current logged in user's Id in ASP.NET Core? because currently I'm using this awkward code to get the user with a navigation property:\nvar user = await UserManager.GetUserAsync(HttpContext.User);\nuser = await Context.Users.Where(x => x.Id == user.Id).Include(x => x.Follows).SingleAsync();\nThere must be a better way of doing this!\n. @brockallen thanks mate!\n\nAm I doing something wrong?\n\nYes. :smile: \nBTW, how do I refresh the cookie after I update a user's claims?\n. @brockallen I thought this will be the answer, just wanted to be sure.\nI'll close it as your answer is an officialAnswer - 1  :)\nThanks\n. @HaoK @divega Can someone please give us some guidance on this issue?\nWe changed DbContext to be Scoped because of this bug, but DbContext isn't thread safe, and we DO need to run multiple queries at the same time, and every here and there we get race conditions errors.\nYour help is appreciated.\n. @HaoK @divega  Unless I'm missing something made internally by Identity, there aren't any entities being changed in different DbContex concurrently.\nAll the async operations are being awaited separately. \nPlease provide a solution, changing the lifetime of DbContext to Scope causes EF to throw in other places we actually do have and -by design- queries that run concurrently. \nAnd changing the lifetime of DbContext to Transient causes Identity to throw here.\nWe don't know how to fix it and users complain about it for more than a week. :cry: \n. @divega Thanks!\nLet me know if you need access to my repository, it's being reproduced on each call.\n. @HaoK That makes sense, but what caused Identity's DbContext to already track that user?\n. @HaoK \nChanged my code to:\nApplicationUser user = await _userManager.FindByEmailAsync(email);\nif (user != null)\n{\n    _logger.LogInformation(\"{name} {email} exist in the DB\", info.Principal.Identity.Name,\n        info.Principal.FindFirst(ClaimTypes.Email));\n}\nelse\n{\n    _logger.LogInformation(\"{name} {email} doesn't exist in the DB\", info.Principal.Identity.Name,\n        info.Principal.FindFirst(ClaimTypes.Email));\n    user = new ApplicationUser\n    {\n        UserName = email,\n        Email = email,\n        PictureUrl = picture,\n        FirstName = firstName,\n        LastName = lastName,\n        EmailConfirmed = true\n    };\n    var createUserResult = await _userManager.CreateAsync(user);\n    if (!createUserResult.Succeeded)\n    {\n        throw new Exception(string.Join(\", \",\n            createUserResult.Errors.Select(x => $\"Code:{x.Code}. Description:{x.Description}\")));\n    }\n}\n var addLoginResult = await _userManager.AddLoginAsync(user, info);\nSeems to fix it :tada: \nI think it's still a bug, Identity should be able to handle cases where an entity is already attached, but I'm good now.\nBTW, I still don't understand why Identiy's dbcontext already tracked this user, maybe\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: true);\nis causing it?\nThanks a ton for both of you @HaoK and @divega !!!\n(You can close the issue if you think this is the expected behavior.)\n. @HaoK, correct I'm using 1.0.0.\nI can give you access to the repository if you like.\nEasy to reproduce both of the issues.\nLet me know if you want.\n. @HaoK Any temporary workarounds?\n. @kroniak I have the same issue, one thing you might consider using is adding an AccessDenied Action on AccountController.\nInside of it you can use await SignInManager.SignOutAsync() and show the user a view with Sorry pal, something went wrong, please try to login again. This time it will work, we almost promise. :sweat_smile:\nIt's a nasty workaround though, I'm waiting for a decent fix too.\n. @mikes-gh \n\nI think this stuff should be baked into the standard templates.\n\nI think this stuff should not even be in a template, it simply needs to work, developer shouldn't care how identity and/or OAuth works, it should do all the heavy lifting by its own.\n. And regardless, people already scaffolded their application, changing the template won't help all the existing applications.\nIt's a huge deal, people can lose a lot of visitors because of this, I hope you are aware of this and plan to fix it in 1.0.1 (to be honest I thought you will publish a patch with a fix even before 1.0.1 because of the severity)\n. @mikes-gh I had exactly the same thing with a friend over the phone.\nThing is, it doesn't reproduce every time with the back button, but it happens quite frequently.\n. @Eilon,  If it requires manual work from the developers, I think you should publish an announcement, that's a bug all developers should be aware of.\n. @Tratcher I'm not sure how it fixes the most common scenario where there is no Login page and people don't go through the Login action.\nhttps://github.com/aspnet/Templates/pull/662#issuecomment-240206032\n. BTW, it would have been nice if the proposed fix was discussed with the community before it was a done deal and merged, not after...\nTo be honest I'm a bit disappointed with the fix and the process.\nWell... c'est la vie\n. @mikes-gh Since they decided the fix should be in the templates, you can simply ignore the fix, and change your code as you wish.\nIt's bad for the community that the templates might have severe issues, but it doesn't affect you if you know the flaws.\n. @Tratcher well I still don't know what should be the fix in my scenario where the external login isn't issues from the Login action.\nDo I need to send an ajax request what have this inside: await HttpContext.Authentication.SignOutAsync(_externalCookieScheme);\n?\n\nIf this continues to be a common problem for users we'll see what else can be done about it.\n\nUsers not being able to login and practically leaving the website and never return is severe enough IMHO, that fix should fix common and uncommon scenarios alike.\n. @Tratcher It doesn't diverge too much.\nBasically we took the login View template, added some CSS and stuff and backed it in a partial view, and it's loaded in the layout.cshtml\n```\n@model LoginViewModel\n\n\n\n\n\n\nlogin to companyName\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nor\n\n\n\n\n\nlogin\n\n\n Remember me\n                \n\n\nForgot Password\n\n    </form>\n    <div class=\"login-footer\">\n        <div>\n            Not a member yet? <a href=\"#\" class=\"register-now\">Register now</a> - it's fun and easy!\n        </div>\n    </div>  \n</div>\n\n\n```\nThe server template code wasn't changed too much (we don't use the ExternalLoginConfirmation to allow users pick their email/username after the oauth but create the user inside the ExternalLoginCallback)\nI'm adding you as a collaborator to the real full private repository in case you want to see it exactly.\nJust please be careful with it, as currently since we're still in beta, our DB and server passwords are saved inside the repository, we'll fix it someday soon...\nhttps://github.com/gdoron/Yooocan\n. Almost forgot, I really appreciate the effort @Tratcher!\nThanks,\nDoron\n. BTW when I said people can't login is a huge deal, it's a huge deal for every website, losing users in the most important phase of the registration.\nBut it's even more important for us, we are building a revolutional website for people with disabilities, some of our users have ALS and can only move their eyeballs... We really don't want to have any technical issues.\nIf these users will have technical issues, they won't call us, they simply can't :crying_cat_face: \n. Thanks for taking a look Chris.\nThe \"Start Over / Switch Provider\" button seems like a nice workaround in theory, but in practice, no one will understand what it means.\nThe whole benefit of social logins is that they are commonly used, and I have never seen a website with such a button, so no one is going to click on it.\nIf I'll stop render the login/register on every page and just load it on demand as a partial view, and in the action that renders these views I'll signout the user.\nWill that be a fool proof solution?\nThis is what Mike and I said about the problem with the suggested fix, it doesn't fix existing applications which might have a bit different flow (except the cache page issue that Mike was concerned about).\nThanks Chris!\n. @mikes-gh Try adding [ResponseCache(Location = ResponseCacheLocation.None, NoStore = true)] to the action that renders the view.\nDo you still get a cached copy?\n(I still think the templating option isn't ideal even if it works since it's very easy to change your application in a way that the fix won't be used.)\n. @mikes-gh Did it help?\n. @Tratcher @Eilon \nThough it was discussed in length already, I just want to add one more thing.\nWe now changed our homepage to have two big icons of Google and FB for non registered users.\nThe template fix won't help here, and obviously I can't delete the auth cookie every time some goes to the homepage...\nI used @mikes-gh 's code, so I'm sort of safe, but other people which surely 99.99% of them didn't track this thread are not safe.\nOur homepage in case someone wants to better understand what I'm talking about:\nhttps://yooocan.com\n. The thing is, the template fix is good as long as you use the exact same flow, pages and code for login/register as in the template.\nIf you diverge even the slightest, it's completely useless. \n. @pauldotknopf Looks good to me.\nBTW,  what is autoLogin?\n. @HaoK \nI managed to find this way which doesn't require DB queries:\n@User.Claims.Where(x=> x.Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\")\nIs there any disadvantages using it?\n. @brockallen  thank for the reply Brock.\nBut I fail to understand how changing a column in the DB is going to force a user to sign-in again?\nIdentity doesn't go to the DB on every HTTP request.\nCan you please explain a bit more?\nThanks mate,\nDoron\n. @brockallen I read the source code of Identity a bit, did you mean using something like:\nif ((await _signInManager.ValidateSecurityStampAsync(User)) == null)\n    //...\nOn every request?\nIs there something built-in?  that does it automatically every x minutes?\nBTW, @HaoK  this is probably a typo:\n```\n/// \n/// Get the security stamp for the specified .\n/// \n-----------> /// The user whose security stamp should be set. \n/// The  that represents the asynchronous operation, containing the security stamp for the specified .\npublic virtual async Task GetSecurityStampAsync(TUser user)\n```\nSeems like a copy-paste error, nothing here should be set if I'm not mistaken.\n. @brockallen\nThanks Brock, you surely helped me a lot!\nBTW, can I have different intervals based on the role?\nFor admin for example I would want it to run every 5 minutes while for normal user I wouldn't mind it be much higher.\n. It obviously makes sense.\nBut I think there should be a way of not invalidating email tokens, probably should be an opt-in and not the default behavior.\n. @blowdart I didn't understand what you meant by.\n\nThe other approach is to set RequireConfirmedEmail to be true.\n. @HaoK That's a no go for us (and most applications I know to be honest).\nAnyway, any chance you will consider adding a flag for the EmailTokenProvider in the future into the framework in the future?\n. \n",
    "marcuslindblom": "It works when I use the API-key from the sample project so I guess it's my configuration that is wrong, can you show me how your account is configured?\n. It works when I use the API-key from the sample project so I guess it's my configuration that is wrong, can you show me how your account is configured?\n. Oh embarrassing, it was the Google+API, thanks for your help\n. Oh embarrassing, it was the Google+API, thanks for your help\n. ",
    "sunsided": "Because I had the very same problem and was a bit puzzled by the answer, here's a guide:\n- In the Google Developers Console, select your project\n- go to APIs & auth, Social APIs, Google+ API\n- enable that one\nAfter that, the application defined under Credentials should be able to login with the openid profile email scopes.\n. ",
    "chemitaxis": "Thanks!!!\n. ",
    "joeaudette": "why can't you just use different roles or claims for the different permissions/authorirization and add the different user types to different roles or claims?\n. ",
    "heavenwing": "I found this issue should be problem of EntityFramework or DependencyInjection.\nBecause my other code which don't use Identity have same issue.\n. @rustd I created a sample, you can download from here: https://onedrive.live.com/redir?resid=F73516BAEAC50992!321461&authkey=!AK-MdwffjOB0y7I&ithint=file%2c7z\n. ",
    "jods4": "Sorry I edited the issue. It's not UserStore but UserManager! \nIn fact the whole description seems copy-pasted from UserStore, the parameters are not even right!\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNet.Identity/UserManager.cs#L390\n. Let's do a blame to find out who's being lazy! ;)\n. @Tratcher Modifying *CookieAuthenticationScheme is not the only way you get the problem (at least I didn't). You can also modify *Cookie.AuthenticationScheme or set a new CookieAuthenticationOptions and the schemes are not in sync anymore.\n. ",
    "bmrpatel": "It does not resolve my issue. :worried: \nTest scenario\n- Try to login with bad password for a locked out user. \nSignInManager.PasswordSignInAsync will always return SignInResult.LockedOut.\nSo I will never know from the application code that password was bad unless I call thisUserManager.CheckPasswordAsync(user, password) and return Invalid attempt myself. The result is not very clear. Both results would be correct (Lockout, and Invalid Attempt). I think result object can be expanded more with more granular result status. (just an idea)\nThanks\n. When someone tries wrong password, Identity framework returns that user is locked out. I only want to show that user is locked out if the password is correct. How would I do this? \nPlease don't close the issue before you understand my issue first.\n. @HaoK I understand that it is by design. I am sure there is a reason behind this. Possibly to make it faster in case of user locked out (so no need to check for password). :smile: \n@blowdart  Sorry, but I wasn't passive aggressive. This is the second issue(question) I created for this and closing comments weren't very clear to me. I think have responded to comments in detail. \n. ",
    "sergeyzwezdin": "In ConfigureServices() something like this:\ncsharp\nservices.Configure<CookieAuthenticationOptions>(options =>\n{\n    options.LoginPath = new PathString(\"/login\");\n});\n. Thanks! Also, if move token to GET-parameter it resolves the issue.\n. ",
    "runxc1": "Note to others looking at this as it is not evident but\nthis worked in beta7 and is no longer how you set the login path.   \nservices.Configure<Microsoft.AspNet.Authentication.Cookies.CookieAuthenticationOptions>(options =>\n            {\n                options.LoginPath = new Microsoft.AspNet.Http.PathString(loginSafe);\n            });\nThis seems to work for setting the login path\nservices.Configure<IdentityOptions>(options=>\n            {\n                options.Cookies.ApplicationCookie.LoginPath = new Microsoft.AspNet.Http.PathString(loginSafe);\n            });\n. @kennyrulez can you get to that property from the IdentityOptions?\nservices.Configure<IdentityOptions>(options=>\n            {\n                    options....\n. ",
    "kennyrulez": "@runxc1 Thanks for the tip.\nNow I see that Identity team removed the Notifications, and then I cannot access to OnApplyRedirect. Do you have any idea how to get this back?\nThanks!\n. @runxc1 nope. Does not exist anymore...\n. ",
    "yetanotherchris": "The fix would be fairly easy, EmailTokenProvider should override the  GenerateAsync method it gets from TotpSecurityStampBasedTokenProvider instead of using Rfc6238AuthenticationService which is presumably for two way auth.\n. Yes, IUserClaimStore @blowdart . I guess the answer is no, so I'm closing. @blowdart As the library deals with TUsers I'd say you can be fairly confident they'll have a first and last name (culture dependent), an email, a username, id, and then other attributes.\nThe contract of the UserManager implies this by the methods, such as the find ones.\nBut is the advice therefore to use EF with the library? Is that the assumed usage?. @HaoK and @blowdart I'm writing a user and role manager for Roadkill but wanted to make it more generic - so my intention is write a general user manager as a Razor class library.\nWithout knowing about a basic TUser this isn't really feasible is it? Should I abandon the hope of making it generic and instead focus on a specialised user and role object?. ",
    "smitpatel": "The entity added by base OnModelConfiguring is IdentityUserRole<TKey> where TKey is string, so entity type name for EF is IdentityUserRole<string> which is different from IdentityUserRole (used for table rename above) therefore EF adds a new entity for that. For all other classes EF assigns PK by convention but fails to do so for IdentityUserRole and throws exception.\n. This is bug in EF7. See aspnet/entityframework#3751.\nIt has been fixed already and will be shipped in RC2.\n. You would need imports since those packages do not target netstandard tfm.\nCan you try this\n\"netstandard1.3\": { \n       \"imports\": [ \n         \"portable-net452+win81\" \n       ]\n}\n. Such errors arise when the packages you are trying to use does not target the framework you are targeting in your app. But that does not mean that you cannot use those packages. If the target framework of the package is compatible with what you are targeting then you can put that framework in imports. Which tells dotnet that it can use packages which may not be targeting netstandard but any other tfm from the list of imports.\n. To build from GitHub repo, you need\nVS 2015 Update 2\n.NET Core RC2 tooling\nThe compiler errors you are getting is because of incorrectly restored packages. Do a git clean -xdf in the repo and run ./build.cmd from command line. That will download latest dotnet needed to build the repo, restore all the packages and build the solution using dotnet. Opening the solution in VS should work then.\nTo build repo from source code you don't need to configure any nuget feeds. The project has config file to do so.\n. Found the issue\nsamples\\Interop4.5 is csproj based class library which uses nuget.config which has hardcoded package versions. Some of those doesn't exists on myget feed hence package restore fails and gives compilation errors because assemblies are not found.\nUnloading that particular project works fine.\n. If you hit this issue while upgrading web project from 1.0 to 1.1 (as case of @saad749 )\nthen it is actually breaking change in UserSecrets described here https://github.com/aspnet/Announcements/issues/209\nYou will need to add your usersecretsid as assembly attribute on your startup class using UserSecretsIdAttribute. the branch rel/2.0.0-preview2 has been deleted and converted to tag. This PR becomes stale and auto-closed by GitHub. If the work is required to be merged in then rebase on current dev/release and create a new PR.. ",
    "joshmouch": "I'm not sure sure what \"nuked in previous beta\" means?  I have the latest versions and I'm still getting this exception.\n. I'll create another ticket for this, but I prefer Identity 2.0 signature with the extra generic arguments.  It allows us to extend every table, as needed.\nThis is actually a huge pain for me, as I cannot upgrade to Identity 3.0 right now because those generic type arguments are missing.\nEF code first migrations completely ignore my classes that inherit from IdentityLogin, IdentityClaim, etc.\n. @divega \nAs far as I know not having the generic arguments means you can't extend IdentityUserLogin, IdentityUserRole, or UserClaim, because the schema that will get created when EF looks at MyUser : IdentityUser, will have properties of the base types (e.g. IdentityUserLogin rather than MyUserLogin).\nI tried for hours to get EF7 to treat MyUser.UserLogins as a type MyUserLogin through the ModuleBuilder.BaseType, but I didn't have any luck. (To get EF to use MyUserLogin for the database schema instead of IdentityUserLogin and to return type MyUserLogin when you reference the property MyUser.UserLogins).\n. @slaneyrw Thanks for the support!  Identity 2.0 definitely made it a design goal to make things one size fits all.\n@divega I see you've set 3.0.0.-rc1 as a milestone for fixing this.  Can you briefly describe what the public signature portion of the change will be so we can make sure it covers all the bases?\ncc @divega @rustd @HaoK \n. @WiredUK I'm with you.  I think the concern is that many classes get touched.  But it still seems clean as it's all \"generically typed\" touching.\n. @divega @rustd @WiredUK I'm not very familiar with how this github development works in general.  It sounds like the team may already be working on it for RC1.  I think you'd have to ask them if they would welcome a PR.\n. @slaneyrw @divega What do you think the chances are this will make into RC2?  And when in December to you approximate RC2 being available?  I was kind of relying on this being available in RC1, and now I'm scrambling on what to do about it not being available.  Worst case I'll have to download the code and make the changes myself, but that's adding work to an already accelerated project.\n. I think you nailed it with \"we don't understand the whole set of scenarios\".\nYou've essentially hard-coded multiple table schemas with the way things are.\nIsn't it enough to know that somebody may want to add a column to IdentityUserRole, whatever their reasons?\nI'll try to come up with some more concrete scenarios...\n. Here's one broken scenario: I override UserManager in order to add logic so that users can't re-use passwords they've previously used.  I use an Int32 as the TKey.\nIn this class, I call UserManager.FindByIdAsync, which is hard coded to use a string now, rather than TKey.\n. @rustd Thanks!\n. What is the link and what is the fix?\n. Perhaps one way to tackle this would be to make the properties/methods on CookieAuthenticationOptions virtual so that I could override the properties and generate their value per-request.\nHave you considered making your CookieAuthenticationOptions class extensible?\n. I think if I take the word \"multi-tenant\" out of the title, this is still a valid question.  Perhaps you have multiple directories in your site that require different credentials.  How would that be done?\nI've accomplished this in my own code by:\n```\nservices.AddIdentity(options =>\n            {\n                options.Cookies.ApplicationCookie.Events = new CookieAuthenticationEvents()\n                {\n                    OnValidatePrincipal = (context) =>\n                    {\n                                           ......\n                                           context.RejectPrincipal();\n                                           ......\n```\nThis works just fine, but isn't the cleanest way to do it.\n. ",
    "saan800": "@SharePointRadi - possibly yes.\nI definitely like the way you did the DB connection stuff, so can have both user and role collections available to the store's, think I will use that instead of what I have going on.\nOut of curiosity - why do you have UserCliams, UserLogins, UserRoles, RoleClaims in separate collections?\nI would have thought that the main benefit of using MongoDB is all associated user/role details are stored in one document. So thought only should have collections for Users and Roles?\nMy implementation is currently using:\n- dnx451\n- MongoDB.Driver: 2.0.0\n- Microsoft.AspNet.Identity: 3.0.0-beta6-*\nKeeping tabs on the Identity, and c# MongoDB driver repositories for updates.\n. ",
    "mlynam": "Fair enough.\n. What @MaximRouiller is saying is that you are describing an extremely general behavior that the majority of frameworks implement, including aspnet. Have you heard of cookies?\n. I kept investigating and did something that causes it to work.  When I add Identity to my service collection, I am configuring it as follows: \nservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\n{\n    options.Cookies.ExternalCookieAuthenticationScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n})\nthis is paired with an AddAuthentication call as follows:\nservices.AddAuthentication(options =>\n{\n    options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n});\nis this the practice I should be using when using cookie authentication, external authentication, and Identity?\n. I've continued reviewing the src and found that when I add the Twitter authentication middleware, I can set the SignInScheme via the options callback to\nC#\napp.UseTwitterAuthentication(options =>\n{\n    ...\n    options.SignInScheme = typeof(IdentityCookieOptions).Namespace + \".External\";\n    ...\n}\nWhich is the default string used in the IdentityCookieOptions class for the external cookie authentication scheme.\nThis configuration works as well (I removed the options callback when adding Identity to my service collection). I'm still unsure of the best practice.\n. ",
    "Ponant": "@blowdart , sorry for this question on a old topic but it will be great if you could guide me a bit. If you use AllowedUserNameCharacters which is presumably safer, how would you, for instance, go about allowing a user to enter a UserName in ASP.NET Identity in the form myuser.name but disallow for dots at the edge of the string (myusername. or .myusername)? I am concerned with both client-side and server-side validation and recalling that UserName is part of the Asp.Net Identity EF.\nThanks. Hi @HaoK , if understand well UserValidatoris server side and you would do it with regex or linq, right? If so, on the client side you would use RegularExpression? cheers. Yep, I was however unclear on whether UserValidator remains server side only, I think it does.. OK thanks a lot. Sure that Roles have no advantages over claims?\nhttps://stackoverflow.com/questions/46910693/how-to-remove-the-role-related-tables-from-asp-net-identity-core-2-0/46910903. @blowdart \n\nI often forget what my damned username\n\nYounger generations in public facing websites remember username or phone.\n. Hi, I implemented a custom UserValidator to fix this issue, but I wonder at what date the miltestone 2.0.0 will be honored (approximately, 1 month, 2, 3 ?) . If Email is not unique you can have 2 usernames for the same Email, but the ForgotPasswordmethod defines the user by FindByEmailAsync, hence which user will be returned??. I have seen another issue where you correctly argued the use of FindByUserName until the template switched to FindByEmail. The unicity of UserName is fundamental, but now that FindByEmail is in the template and furthermore UserName = Email in the template, this template becomes dangerous out of the box. I really think the template should start with UserName + Email as fields for login and register, thereby well distinguished, and propagate the code throughout reset, forgot pwd external logins, association. I am happy to help but there must be some discussion because there are many issues opened here and in the templates repo regarding such points and they are still open (sometimes back to 2015 :). . @danroth27 , what is difficult is that the user needs to decrypt the code to understand it. The template in ASP.NET 2.0 Preview 1 shown above is too abstract, which is the price to pay for the decoupling you mention. While I think the idea is nice, it would help to point to a short tuto that goes through the code (a 20 min video would be best perhaps as this is a preview). Cheers. @danroth27 , I saw this video a few days ago but that was not enough for me except in getting a general idea. The problem with abstraction is that you lose the basics of understanding code, namely follow a method which calls another method etc (I may be too old for that ;) ). I would rather go for something like Adam Tulliper did once https://mva.microsoft.com/en-US/training-courses/customizing-aspnet-authentication-with-identity-8647?l=1Yef8hF1_7604984382, but in a short version until you clean up the code. After that, people will adopt it in my opinion because you offer a better separation of concern.. @danroth27 , any idea on when Identity as a Service will come up now that it is removed from 2.0? \nIs it expected for 2.1?. @brockallen , in what do you want MS to be clear on and how can you know what they are doing in the details? I know there are lots of discussions on this topic and surely they are not the most glorifying ones, but my point is that if you are concerned about their implementation then why not explaining what are those limitations of their future OSS. Otherwise it is perceived as a negative critic for free not mentioning a biased one.. While I considered using AB2C, I decided not to do it (priced too high and lack of customization and unclear data sovereignty rules). You may be right but I understood their answers differently, quoting parts from @danroth27 and @Eilon ,\n\nEnable apps to easily migrate to use Azure AD B2C, or any other OpenID Connect provider\nWe're really not trying to force anyone to do anything. We're trying to decouple apps from ASP.NET Core Identity so that you can choose whatever identity provider you want. We're doing this by wrapping ASP.NET Core Identity in standards complaint service endpoints. By decoupling identity from the app in this way you can then switch to whatever OpenID Connect provider you want whenever you want to. If you don't want the OIDC endpoints at all you can remove them, but we think most customers will want this level of flexibility.\nOne of the goals here is to at least standardize on the OpenID Connect (OIDC) protocol. That makes it a lot easier to swap out the back end. If you started with one backend and need to switch to another, you still have to figure out how to migrate your data (that's nearly always true anyway), but at least the app's frontend shouldn't need to change.\n\nI think what they are doing is an invariant OIDC-compliant protocol, I recall Dan made this demo\nhttps://github.com/danroth27/ProjectConstruction/tree/master/IdentitySwap . Well, then it is maybe a good time to sell IdentityServer to MS :) Cheers. @Bartmax , their expertise is not for free and valuable. Anyway, that was a (half) joke to stop turning in circles until MS clarifies or outputs a \"template\".. @theeunforgiven , which .Net core version are you using?. @blowdart , separate applications, separate urls. Yes as the title says, sorry for having been short!. But it does.... I created each template as it comes from VS 2017 (and preview for 2.0). BTW, I do not think this is related but IIS express shows 2 localhost ports for the 2.0 Core app.. @HaoK , yes, for the 2.0 I am using the identity service stuff. New project--> asp.net core 2.0 with individual in-app store. @danieloprado , I am on localhost for both on my W10 dev machine. I did not touch the code of neither projects.. I just created two other projects, same issue.. @danieloprado , I do not think this is the same discussion here. The issue is not present if you use 2 .Net Core 1.1.. @HaoK , it seems to be due to the AspNetCore.AntiForgery cookie.. I am running on the template provided by VS 2017 for .Net Core 1.1 and VS 2017 Preview 1 for .Net Core 2.0; these were untouched and do not seem to have data protection configured. Were you able to reproduce the bug?. @HaoK , I think that will be for 2.1 Milestone (?). https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L258\nwhile we could have this https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L283\nThe advantage is that we make use of the return type (task of SignInResult). @HaoK , I see what you mean, and thought about it before raising up this thread. However, in my opinion, I think it is a pity not to take advantage of the return type SignInResult.Failed. this will avoid a dev to add the check if(user !=null). Cheers. @HaoK ok, done.. Attribute routing is lacking in Pages (at least a few month ago), would that be a good reason?. Same comment as @brockallen here https://github.com/aspnet/Docs/issues/6146 and here https://github.com/aspnet/Docs/issues/6301 . It is creating too much confusion for only getting unnecessary aesthetics and makes it more difficult for people to get work done because they will have to modify the code anyway to meet compliance.\nI can only strongly suggest to:\n1) Remove the ui library from the default template and make docs to instruct the user on how put it all in a library (i.e. we basically reverse the process)\n2) Remove AddDefaultIdentity from the universe, or the older one. In the case where the AddDefaultIdentity is chosen, clarify in the docs what is meant by Default by enumarating default values or behavior.. @HaoK , I am happy to get rid of Roles, except that they seem to be generated in the sql db anyway. 1) 1) Why is that?\n2) Could you be somewhat more precise on what you mean by \"more or less\"?\n3) Why is\n.AddDefaultTokenProviders();\nnot there anymore?\n. Sorry @HaoK , I did not fully understand your last post. My scenario is that I am not using the defaultUI, so do I need to add AddDefaultTokenProviders to the pippleine if I use AddDefaultIdentity, or is AddDefaultIdentity already taking care of that? I stumbled upon the link you gave before writing this issue and it was not clear enough to me, sorry.. Oh @HaoK my deepest apologies , I misread the return value of AddDefaultIdentity. It calls AddDefaultTokenProviders. . @blowdart , you decide at the end, although GitHub is also used for getting feedback, e.g.\nhttps://github.com/aspnet/Docs/issues/6146 . :) :) :)\nFurthermore, I think the discussion can be interesting and I can't ask this on SO. I saw one of your tweets mentionning that you would gladly go pwdless but that was as elaborate as a tweet can be. I was looking forward for an opinion from you and/or the team as well as @brockallen etc.\nCheers. @blowdart , thanks for re-opening!\nSure I understand your view, but what is your take on the security side? I mean, do you see any disadvantages of using a pwd-less schema vs a pwd-based one? I ask this because I just do not see any disadvantage of pwd-less. Even on the financial-side (sending emails for login), a pwd-less schema seems just better or at least equal on the spending side.. Thanks. ",
    "slaneyrw": "Also, I can't see the value of injecting IOptions<IdentityOptions> instead of just IdentityOptions.\nThis, and the issue raised by bitbonk, feels like you are catering for the limitations of the default IoC implementations\n. Ok, so I'll override all 5 IUserClaimStore<TUser> functions on UserStore<TUser, TRole, TContext, TKey>, but what TContext do I use ?  As the IdentityDbContext<TUser, TRole, TKey> has also hardcoded IdentityUserClaim into it's model (OnModelCreating), so I have to replace the entire IdentityDbContext as well.\ni.e.\nIdentityDbContext<TUser, TRole, TKey>.UserClaims : DbSet<IdentityUserClaim<TKey>>\n. Oh, and I've just discovered ( as I was trying to implement by own DBContext, IdentityUserClaims is exposed directly off IdentityUser as well, meaning I have to replace IdentityUser as well, essentially the entire object graph.\nmodelBuilder.HasMany<IdentityUserClaim<TKey>>( user => user.Claims )\n...then...\nIf you replace IdentityUser you can no longer subclass UserStore because of TUser generic constraint, that's a lot of code to replace;\n. If I could add a voice to this discussion ( also see issue #567 - closed by HaoK ), the current state of the IdentityUser not only lacks extensibility, but it's implementation also couples the Identity* types into UserStore and UserManager and IdentityDbContext.\nI'm trying to convert an existing v2 application( in the context of ASP.NET 4 -> 5 ) to access the feasibility.\nIn order for me to replace IdentityUserClaim I have to replace IdentityUser, IdentityDbContext, then (because UserStore has a generic constraint for TUser on IdentityUser ), replace UserStore as well, finally subclass UserManager to replace ALL the claims functions, working around the useful private/internal functions hidden.\nVersion 3 is much more closed than version 2 to the point of being a one size fits some / black box.\n. This missed RC1, is it going to be targeted for RC2 ?\n. @divega In both this issue and #567 you have been given concrete examples of why changing the 3 hardcoded aspects ( Claims, Roles and Logins ) has value.  In our existing application that uses v2 we have extended both Claims and Logins\nClaims:  Added Issuer to we can track ( and make decisions on ) claims that originate of 3rd party identity systems, like Google, Facebook or our own OAuth 2 server.\nLogins: We have also added an additional vector to our external login provider link so we can have a 1 to many relationship between a 3rd party login provider and our application.\nYou also have been shown that the complexity is already there in the system, you have just hardcoded the concrete coupling of the 3 types.\nHow do you want me to modify the pull request to address your concerns ?\nAs it stands, I cannot recommend upgrading any of our ASP.NET solutions to ASP.NET 5 as identity is unsuitable for our corporate use\nEDIT\nI'm adding tests now, and have found I missed IdentityDbContext and RoleStore extensions\n. @divega @joshmouch \nTests are completed.  There is a now a full test suite in the Microsoft.AspNet.Identity.EntityFramework.InMemory.Test project that uses each extensibility point.  I have also included some extra tests to prove that the stores are using the extra information, not just round tripping the information\nThe key point here is that the API surfaced has an extra layer beneath the current UserStore, RoleStore, IdentityUser and IdentityDbContext.  All the current code using UserStore<TUser, TRole, TContext, TKey> et al does not change, nor does the extra generic types leak into their codebase.\nIf a dev needs to change the shape of IdentityUser then they will need to do more work as the shape of the data layer will change, that has ramifications that cannot be avoided\n. Happy to submit a pull request if you want me to do the leg work\n. Further more this will allow per-user PasswordHashing, as at the moment it's a one size fits all.\nSay I want to increase the number of iterations for password hashing over time ( as hardware power increases ).  I would need to store the number of iterations last used, read that off the user record and verify the password with that number of iterations.  If the number of iterations is lower than currently configured, rehash the password and store the updated information\n. Had a first cut, but I'm getting errors doing a package restore in the IdentitySample.MVC project, and also getting a exception from DNX when discovering tests.  I can't verify any of my changes apart from a compile.  Any ideas on what is wrong ?\nI have Installed Beta8 tooling and runtime\nDNX Core 5.0 References\nNotFound https://api.nuget.org/v3-flatcontainer/microsoft.extensions.optionsmodel/index.json 994ms\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.extensions.configuration.json/index.json 1008ms\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.extensions.configuration.environmentvariables/index.json 1037ms\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.extensions.logging.nlog/index.json 963ms\n  NotFound https://api.nuget.org/v3-flatcontainer/microsoft.extensions.logging.console/index.json 1021ms\n  NotFound https://api.nuget.org/v3-flatcontainer/entityframework.microsoftsqlserver/index.json 1599ms\n------ Test started: Project: Microsoft.AspNet.Identity.EntityFramework.InMemory.Test ------\nStarting  Microsoft.Dnx.TestHost [C:\\Users\\slaneyr.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\bin\\dnx.exe --appbase \"C:\\Users\\slaneyr\\Documents\\GitHub\\ASP.NET\\Identity\\test\\Microsoft.AspNet.Identity.EntityFramework.InMemory.Test\" Microsoft.Dnx.ApplicationHost --port 3014 Microsoft.Dnx.TestHost --port 3071 --parentProcessId 218492]\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.Dnx.TestHost.Program.Main(String[] args)\n. I have the follow changeset in my fork you can look at\nhttps://github.com/slaneyrw/Identity/commit/f2722c96b5845687ed5c7305a302be09c93a6c75 \n. thanks\n. Doesn't appear you are setting the Id of the new IdentityUser instances.  The default implementation set's the string Id to a new Guid in the constructor\n. This also could satisfy issue #596 \n. There goes the upgrade path for our application.  Not going to be bother to fix the pull request for the ASP.NET Core namespace change, really isn't any point is there!\n. Great to see this is now getting traction... thanks for listening\n. Just hit this bug, using 2.0.1.  Any timeframe of when this will be released?\nIs there a work around ?. I know... but this leaves the old hash in the system - a requirement we cannot live with.\nLike the Async password hashing I have already prototyped this and works without any change to the UserManager or SignInManager.. The Argon2 hashing algorithm is multi-threaded.  All the methods above the VerifyPasswordHash are async ( SignInManager, UserManager ) ... why not extend it all the way.  The SignIn manager waits for the async call to finish so it blocks anyway.\nAnd I assume you meant Authentication, not Authorization.\nI have already prototyped converting the entire chain to async, and I have also implemented an Argon2 hasher - which routes via MassTransit / RabbitMQ to scale out of the hasher without affecting the app performance.. ",
    "satyajit-behera": "Thanks @stephenstroud Can you give some more details or reference examples to elaborate this.\n. thanks @rustd . I am using the default asp.net identity provider while using the web api template in visual studio. \n. @stephenstroud  VS 2013\n. ",
    "DAllanCarr": "Its been a while I can't seem to replicate the issue as of this moment.\n. if you check out the IdentityUser class it should be simple to roll your own.\nhttps://github.com/aspnet/Identity/blob/4e5bba35da259fa79a90426ed02a72f0c03ec861/src/Microsoft.AspNet.Identity.EntityFramework/IdentityUser.cs\n. If you check code the SignInManager class it performs a FindByNameAsync to retrieve the user.\nhttps://github.com/aspnet/Identity/blob/acfee9e7e05bfb8ef25c8a7628c200c4cc715ff0/src/Microsoft.AspNet.Identity/SignInManager.cs#L239-L248\n. The Account class is being incorrectly mapped in the call to AddIdentity.\n. Looks good I just saw this code and was not sure.\n```\n public class ApplicationUser : IdentityUser\n    {\n}\n\n```\n. Diving into the codebase all of the identity classes use string keys by default, you are requesting an int key type:\nhttps://github.com/aspnet/Identity/blob/5da757642dd7c7a25315250ae3738b87f622cb4c/src/Microsoft.AspNet.Identity.EntityFramework/IdentityEntityFrameworkServices.cs#L22-L23\n. Interesting your instatiating the service  potentially inside the controller. Why do that?\n. Yes that would work but not ideal. How are you  constructing the controller?\n. The newing code should be removed and let DI deal with the lifetime. There some scoped dependencies inside the manager which force your hand a little. \n. Also no need to inject the manager in the controller if you are constructing it as part of the service. But that is down to your implementation.\n. @usarskyy I think you are correct. There is still confusion around why you would call UseIdentity is this scenario.. Something along those lines....scope the objects inside the configure.\nvar roleManager = app.ApplicationServices.GetService<RoleManager<IdentityRole>>();  \nforeach (var role in Roles.All) {\n}. Also async void is not a good pattern. Return a Task and wait if needed.. https://github.com/aspnet/Security/issues/1043. AddIdentityCore bypasses the default auth setup but that means more boilerplate code. Paste your startup for others to see.. There is no need to new up IdentityBuilder as AddIdentityCore is doing that but that is still not your issue.  Looks like you are still configuring authentication somewhere. \nFor the sake of clarity someone has already posted a related stack question:\nhttps://stackoverflow.com/questions/47433269/multiple-identities-in-asp-net-core-2-0. Glad you sorted the problem...but small refactor might be in order. \ud83d\ude0a\n```\nservices.AddIdentityCore()\n.AddDefaultTokenProviders()\n.AddRoles()\n.AddSignInManager>()\n.AddEntityFrameworkStores();. I think this is IIS setup and not an identity issue. Probably default website configured incorrectly.. ",
    "tlogik": "I have the same issue.Replacing all that code seems to be very counter productive.\nCould a better approach possible be considered?\n. ",
    "ajaybhargavb": "It passes. Note that the RequiredPackageMetadataRule is currently not being run. It will be enabled later.\n. ADX is the team responsible for shipping AspNetCore packages. This is the tool that verifies the NuGet packages. https://github.com/aspnet/DnxTools/tree/dev/src/NuGetPackageVerifier\n. ",
    "anpete": "Any calls to ILogger.Log should specify a non-zero event id that is unique within the current logging category.\n. ",
    "farleigh": "I can get around this by making sure the User IDs match during update - which makes sense if the system allows for changes to username.\n. ",
    "angelsix": "The problem is if I have to create a custom class in my core library, I have to remake all classes (roles, claims, login providers, user stores etc.. basically the entire EntityFramework code in this Identity branch. \nI was trying to avoid that but nevermind I will just create my own version.\n. Cool. If Identity is 100% is there anyway to get it? Does it mean the github identity dev repo is the \"beta8\" as it currently stands?\nTo be more specific of my issue I'm getting a MethodMissingException in Mvc when adding an Identity provider (an Entity Framework one)\nservices.AddIdentity()\nWhich I am guessing is due to the fact the extesion AddIdentity is beta7, and my identity provider and almost all other parts of the app are beta 8.\n. Also, I could use Beta 7 if I could define a one to many relationship as thats the only thing I cannot find in beta 7 (the .HasMany calll):\nI would need to do the following equivalent in beta 7:\nb.Many(u => u.Claims).WithOne().ForeignKey(uc => uc.UserId);\nWhere u is a user that has multiple claims, and the claim has a UserId referencing the Id of the user\n. Oh nevermind, it turns out that should be handled by the next layer up, the UserManager. I have a custom UserManager that doesn't have dependecies on Mvc so thats why mine is crashing. I'll add the logic to my UserManager.\n. Ah yeah, makes sense. Thanks for the link. ",
    "yukozh": "https://ci.appveyor.com/project/Kagamine/forum/build/1.0.0-alpha1-10/tests\n. project.json\n```\n{\n  \"webroot\": \"wwwroot\",\n  \"version\": \"1.0.0-*\",\n\"dependencies\": {\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-15928\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-rc1-15928\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-rc1-15676\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-15711\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-15668\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-rc1-15645\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-rc1-15631\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-rc1-15631\",\n    \"Microsoft.Framework.Logging.Debug\": \"1.0.0-rc1-15631\",\n    \"CodeComb.AntiXSS\": \"1.0.9-rc1-15928\",\n    \"CodeComb.Marked\": \"1.0.4-rc1-15928\",\n    \"CodeComb.vNext\": \"1.0.45-rc1-15928\",\n    \"EntityFramework.Sqlite\": \"7.0.0-rc1-15855\",\n    \"EntityFramework.InMemory\": \"7.0.0-rc1-15855\"\n  },\n\"commands\": {\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.Kestrel --config hosting.json\",\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --config hosting.json\"\n  },\n\"frameworks\": {\n    \"dnx451\": {},\n    \"dnxcore50\": {}\n  },\n\"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ],\n  \"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ]\n}\n```\nStartup.cs:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNet.Builder;\nusing Microsoft.AspNet.Http;\nusing Microsoft.AspNet.Hosting;\nusing Microsoft.AspNet.Identity;\nusing Microsoft.AspNet.Identity.EntityFramework;\nusing Microsoft.Data.Entity;\nusing Microsoft.Framework.Logging;\nusing Microsoft.Framework.Configuration;\nusing Microsoft.Framework.DependencyInjection;\nusing Microsoft.Dnx.Runtime;\nusing Topicomb.Forum.Models;\nusing Topicomb.Forum.Exceptions;\nnamespace Topicomb.Forum\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            var _services = services.BuildServiceProvider();\n            var appEnv = _services.GetRequiredService();\n            IConfiguration Configuration;\n            services.AddConfiguration(out Configuration);\n        switch(Configuration[\"Database:Mode\"])\n        {\n            case \"SQLite\":\n                services.AddEntityFramework()\n                    .AddSqlite()\n                    .AddDbContext<ForumContext> (x => x.UseSqlite(Configuration[\"Database:ConnectionString\"].Replace(\"{AppRoot}\", appEnv.ApplicationBasePath)));\n                break;\n            case \"SQLServer\":\n                services.AddEntityFramework()\n                    .AddSqlServer()\n                    .AddDbContext<ForumContext> (x => x.UseSqlServer(Configuration[\"Database:ConnectionString\"].Replace(\"{AppRoot}\", appEnv.ApplicationBasePath)));\n                break;\n            case \"InMemory\":\n                services.AddEntityFramework()\n                    .AddInMemoryDatabase()\n                    .AddDbContext<ForumContext> (x => x.UseInMemoryDatabase());\n                    break;\n            default:\n                throw new DatabaseNotSupportedException(Configuration[\"Database:Mode\"]);\n        }\n\n        services.AddIdentity<User, IdentityRole<long>>(x => \n        {\n            x.Password.RequiredLength = Convert.ToInt32(Configuration[\"Security:RequiredLength\"]);\n            x.Password.RequireDigit = Convert.ToBoolean(Configuration[\"Security:RequireDigit\"]);\n            x.Password.RequireLowercase = Convert.ToBoolean(Configuration[\"Security:RequireLowercase\"]);\n            x.Password.RequireNonLetterOrDigit = Convert.ToBoolean(Configuration[\"Security:RequireNonLetterOrDigit\"]);\n            x.Password.RequireUppercase = Convert.ToBoolean(Configuration[\"Security:RequireUppercase\"]);\n            x.User.RequireUniqueEmail = Convert.ToBoolean(Configuration[\"Security:RequireUniqueEmail\"]);\n            if (!Convert.ToBoolean(Configuration[\"Security:AllowedUserNameCharacters\"]))\n                x.User.AllowedUserNameCharacters = null;\n\n        })\n            .AddEntityFrameworkStores<ForumContext, long>()\n            .AddDefaultTokenProviders();\n\n        services.AddMvc()\n            .AddTemplate();\n\n        services.AddCurrentUser<long, User>();\n        services.AddCodeCombLocalizationJsonDictionary();\n    }\n\n    public async void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)\n    {\n        loggerFactory.MinimumLevel = LogLevel.Information;\n        loggerFactory.AddConsole();\n        loggerFactory.AddDebug();\n\n        app.UseIdentity();\n        app.UseStaticFiles();\n\n        app.UseMvc(router =>\n        {\n            router.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n\n        app.UseCodeCombLocalization(\"/assets/shared/scripts/localization.js\");\n\n        await SampleData.InitDB(app.ApplicationServices);\n    }\n}\n\n}\n```\n. https://github.com/Topicomb/Forum/\nthis is the full source\n. Yes, it does not throw the exception when I using beta 8 or beta 7\n. :smile: \n. There was no problem with beta 8\n```\n{\n  \"webroot\": \"wwwroot\",\n  \"version\": \"1.0.0-*\",\n\"dependencies\": {\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta8-15793\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta8-15793\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta8-15609\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta8-15609\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-beta8-15622\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta8-15618\",\n    \"Microsoft.Data.Sqlite\": \"1.0.0-beta8-15582\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta8-15586\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-beta8-15575\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta8-15575\",\n    \"Microsoft.Framework.Logging.Debug\" : \"1.0.0-beta8-15575\",\n    \"CodeComb.AntiXSS\": \"1.0.9-beta8-15793\",\n    \"CodeComb.Marked\": \"1.0.4-beta8-15793\",\n    \"CodeComb.vNext\": \"1.0.44-beta8-15793\",\n    \"EntityFramework.Sqlite\": \"7.0.0-beta8-15723\",\n    \"EntityFramework.InMemory\": \"7.0.0-beta8-15723\"\n  },\n\"commands\": {\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.Kestrel --config hosting.json\",\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --config hosting.json\"\n  },\n\"frameworks\": {\n    \"dnx451\": {},\n    \"dnxcore50\": {}\n  },\n\"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ],\n  \"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ]\n}\n```\n. The problem has been solved when I upgrade EF to rc1-15865\n. @divega There are something wrong with sqlite, and I opened an issue.\nhttps://github.com/aspnet/Microsoft.Data.Sqlite/issues/147\n. /cc @divega  @HaoK \nThe problem exists in both mac and windows platform. \bBut only occurred with SqlServer. SQLite is ok.\nI am using a vacant IdentityDbContext. It without any DbSets.\n. Hi @rustd  @divega , I have updated to rc1-15920, the problem still occurred with SQLServer & Identity3\n. Oh, I am so sorry, I forgot that I should use EntityFramework.MicrosoftSqlServer instead of EntityFramework.SqlServer. I will have a try and feedback later.\n. Hah, there was no breaking change announcement in the aspnet/Announcements repo about the rename. So I forgot that. When I change into EntityFramework.MicrosoftSqlServer, the problem has been solved. Thank you @divega .\n. @Eilon \n. :sob:\n. @haok\n. ",
    "BenjiZombie": "I'm also experiencing this issue with beta7. \nI've implemented a custom AspNetIdentityUserService for signing in into my app. This service is registered as Scoped in my DI. UserManager<ApplicationUser> is also registered as Scoped by the services.AddIdentity<ApplicationUser, IdentityRole>() registration in Startup.cs.\n```\npublic AspNetIdentityUserService(UserManager userManager)\n{\n    Check.NotNull(userManager, nameof(userManager));\n_userManager = userManager;\n\n}\n```\nHere, ApplicationUser is IdentityUser<string>.\nUpon POSTing my credentials, this function gets called:\npublic override async Task AuthenticateLocalAsync(LocalAuthenticationContext context)\n{\n    if (_userManager.SupportsUserPassword)\n    {\n        // Crashes here\n        var user = await _userManager.FindByNameAsync(context.UserName);\n        ...\n    }\n}\nHere's the relevant output:\n``\nMicrosoft.Data.Entity.Storage.Database: Information: Compiling query model: 'from ApplicationUser u in value(Microsoft.Data.Entity.Query.EntityQueryable1[My.IdentityProvider.AspNetIdentity.Models.ApplicationUser]) where ([u].NormalizedUserName == __normalizedUserName_0) select [u] => FirstOrDefault()'\nMicrosoft.Data.Entity.Storage.Database: Information: Optimized query model: 'from ApplicationUser u in value(Microsoft.Data.Entity.Query.EntityQueryable1[My.IdentityProvider.AspNetIdentity.Models.ApplicationUser]) where ([u].NormalizedUserName == __normalizedUserName_0) select [u] => FirstOrDefault()'\nMicrosoft.Data.Entity.Storage.Database: Information: Tracking query sources: [u]\nMicrosoft.Data.Entity.Storage.Database: Information: TRACKED: True\n(QueryContext prm0, QueryResultScope prm1) => () => IAsyncEnumerable<ApplicationUser> TaskToSequence(\n    task: Task<ApplicationUser> FirstOrDefault(\n        source: IAsyncEnumerable<ApplicationUser> _Select(\n            source: IAsyncEnumerable<QueryResultScope> _SelectMany(\n                source: IAsyncEnumerable<QueryResultScope> _ToSequence(\n                    element: prm1\n                )\n                , \n                selector: (QueryResultScope prm1) => IAsyncEnumerable<QueryResultScope<ApplicationUser>> _ShapedQuery(\n                    queryContext: prm0, \n                    commandBuilder: SelectExpression: \n                        SELECT TOP(1) \"u\".\"Id\", \"u\".\"AccessFailedCount\", \"u\".\"ConcurrencyStamp\", \"u\".\"Email\", \"u\".\"EmailConfirmed\", \"u\".\"LockoutEnabled\", \"u\".\"LockoutEnd\", \"u\".\"NormalizedEmail\", \"u\".\"NormalizedUserName\", \"u\".\"PasswordHash\", \"u\".\"PhoneNumber\", \"u\".\"PhoneNumberConfirmed\", \"u\".\"SecurityStamp\", \"u\".\"TwoFactorEnabled\", \"u\".\"UserName\"\n                        FROM \"AspNetUsers\" AS \"u\"\n                        WHERE \"u\".\"NormalizedUserName\" = @__normalizedUserName_0\n                    , \n                    shaper: (ValueBuffer prm2) => QueryResultScope<ApplicationUser> CreateEntity(\n                        querySource: from ApplicationUser u in value(EntityQueryable1[My.IdentityProvider.AspNetIdentity.Models.ApplicationUser]), \n                        queryContext: prm0, \n                        parentQueryResultScope: prm1, \n                        valueBuffer: prm2, \n                        valueBufferOffset: 0, \n                        entityType: My.IdentityProvider.AspNetIdentity.Models.ApplicationUser, \n                        queryStateManager: True, \n                        entityKeyFactory: SimpleNullSentinelEntityKeyFactory1, \n                        keyProperties: List<Property> { ApplicationUser.Id, }, \n                        materializer: (ValueBuffer prm3) => \n                        {\n                            var var4\n                            var4 = new ApplicationUser()\n                            var4.Id = (string) object prm3.get_Item(0)\n                            var4.AccessFailedCount = (int) object prm3.get_Item(1)\n                            var4.ConcurrencyStamp = (string) object prm3.get_Item(2)\n                            var4.Email = (string) object prm3.get_Item(3)\n                            var4.EmailConfirmed = (bool) object prm3.get_Item(4)\n                            var4.LockoutEnabled = (bool) object prm3.get_Item(5)\n                            var4.LockoutEnd = (Nullable<DateTimeOffset>) object prm3.get_Item(6)\n                            var4.NormalizedEmail = (string) object prm3.get_Item(7)\n                            var4.NormalizedUserName = (string) object prm3.get_Item(8)\n                            var4.PasswordHash = (string) object prm3.get_Item(9)\n                            var4.PhoneNumber = (string) object prm3.get_Item(10)\n                            var4.PhoneNumberConfirmed = (bool) object prm3.get_Item(11)\n                            var4.SecurityStamp = (string) object prm3.get_Item(12)\n                            var4.TwoFactorEnabled = (bool) object prm3.get_Item(13)\n                            var4.UserName = (string) object prm3.get_Item(14)\n                            var4\n                        }\n                    )\n                )\n            )\n            , \n            selector: (QueryResultScope prm1) => ApplicationUser prm1._GetResult(\n                querySource: from ApplicationUser u in value(EntityQueryable1[My.IdentityProvider.AspNetIdentity.Models.ApplicationUser])\n            )\n        )\n        , \n        cancellationToken: prm0.CancellationToken\n    )\n)\nMicrosoft.Data.Entity.Query.QueryContextFactory: Error: An exception occurred in the database while iterating the results of a query.\nSystem.ObjectDisposedException: The CancellationTokenSource has been disposed.\n   at System.Threading.CancellationTokenSource.ThrowObjectDisposedException()\n   at System.Threading.CancellationTokenSource.InternalRegister(Action1 callback, Object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext)\n   at System.Threading.CancellationToken.Register(Action1 callback, Object state, Boolean useSynchronizationContext, Boolean useExecutionContext)\n   at System.Threading.CancellationToken.Register(Action callback)\n   at System.Linq.AsyncEnumerable.<>c__DisplayClass291.<Create>b__27(CancellationToken ct)\n   at System.Linq.AsyncEnumerable.AnonymousAsyncEnumerator1.MoveNext(CancellationToken cancellationToken)\n   at System.Linq.AsyncEnumerable.FirstOrDefaultTSource ",
    "GVX111": "@rustd can you post example how to change?\n.    public static class UserStore\n    {\n        public static IApplicationBuilder UseUserStore(this IApplicationBuilder app)\n        {\n            app.UseStaticFiles()\n               .UseIdentity()\n               .UseDeveloperExceptionPage();\n            return app;\n        }\n        public static IServiceCollection UserStoreServices(this IServiceCollection services)\n        {\n            services.AddEntityFramework()\n                   .AddSqlServer()\n                   .AddDbContext(options => options.UseSqlServer(\"Server=*\"));\n            services.AddEntityFramework()\n                 .AddSqlServer()\n                 .AddDbContext(options => options.UseSqlServer(\"*\"));\n            services.AddIdentity(e =>\n            {\n                e.Password.RequireLowercase = false;\n                e.Password.RequireUppercase = false;\n                e.Password.RequireNonLetterOrDigit = false;\n                e.Password.RequiredLength = 6;\n            })\n                    .AddEntityFrameworkStores()\n                    .AddDefaultTokenProviders();\n            return services;\n        }\n    }\nit isextenssion.\n.    public IServiceProvider ConfigureServices(IServiceCollection services) {\n            services\n                .UserStoreServices()\n                .WebHost();\n            services.Modules(\"~/Modules\");\n            services.AddSignalR(options =>\n            {\n                options.Hubs.EnableDetailedErrors = true;\n            });\n            return services.BuildServiceProvider();\n        }\n        public void Configure(IApplicationBuilder builder, IHost host, ILoggerFactory loggerFactory) {\n            builder.UseUserStore();\n            builder.UseFileServer();\n            builder.UseSignalR();\n            builder.ConfigureHost(loggerFactory);\n            host.Start();\n        }\n. I have already removed Signalr from my project and same problem.\n. I can't because it is Framework and 10 Projects are referenced. :| I can show you in debug mode.\nerror   : [Microsoft.Data.Entity.Query.Internal.SqlServerQueryCompilationContextFactory] An exception occurred in the database while iterating the results of a query.\nSystem.ObjectDisposedException: The CancellationTokenSource has been disposed.\n   at System.Threading.CancellationTokenSource.ThrowObjectDisposedException()\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1 callback, Object stateForCallback, SynchronizationContext targetSyncContext, ExecutionContext executionContext)\n   at System.Threading.CancellationToken.Register(Action`1 callback, Object state, Boolean useSynchronizationContext, Boolean useExecutionContext)\n   at System.Threading.CancellationToken.Register(Action callback)\n   at System.Linq.AsyncEnumerable.<>c__DisplayClass29`1.b__27(CancellationToken ct)\n   at System.Linq.AsyncEnumerable.AnonymousAsyncEnumerator`1.MoveNext(CancellationToken cancellationToken)\n   at System.Linq.AsyncEnumerable.FirstOrDefault[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken)\n   at lambda_method(Closure )\n   at Microsoft.Data.Entity.Query.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.d__5.MoveNext()\n\n@divega \n. @halter73 @divega \nWhen i enter wrong password SignInResult return Failed also i tryed to use CanSignInAsync and it's return True. I think it is problem of Authentication.SignIn\nI trying to debug singin ExceptionMessage: InnerException = {\"The connection was not closed. The connection's current state is open.\"}\n\n  public async void TestLogin(HttpContext httpContext)\n        {\n            try\n            {\n                var user = new Account() { UserName = \"GVX111\" };\n                var manager = (UserManager)httpContext.RequestServices.GetService(typeof(UserManager));\n                var contextAccessor = (IHttpContextAccessor)httpContext.RequestServices.GetService(typeof(IHttpContextAccessor));\n                var roleManager = (RoleManager)httpContext.RequestServices.GetService(typeof(RoleManager));\n                var identityOptions = new IdentityOptions();\n                var options = (IOptions)httpContext.RequestServices.GetService(typeof(IOptions));\n                var claimsFactory = new UserClaimsPrincipalFactory(manager, roleManager, options);\n                var logStore = new StringBuilder();\n                var logger = (ILogger>)httpContext.RequestServices.GetService(typeof(ILogger>));\n                var helper = new SignInManager(manager, contextAccessor, claimsFactory, options, logger);\n                // Act\n                var result = await helper.PasswordSignInAsync(user.UserName, \"123321\", false, false);\n            }\n            catch (Exception e)\n            {\n                throw;\n            }  \n        }\n\n. @halter73 @divega I found problem. Error on\nif (UserManager.SupportsUserClaim)\n            {\n                id.AddClaims(await UserManager.GetClaimsAsync(user));\n            }\nGetUserIdAsync GetUserNameAsync this methods working good but GetClaims doesn't work it's throw exception: Connection was closed\nMaybe we can find problem easy\n. Its my account class\n public class Account : IdentityUser\n    {\n        public string Firstname { get; set; }\n        public string Lastname { get; set; }\n        public DateTime Birthdate { get; set; }\n        public bool Gender { get; set; }\n        public virtual ICollection AccountMeta { get; set; }\n        public string GetGender()\n        {\n            return Gender ? \"Male\" : \"Female\";\n        }\n    }\nWhats wrong?\n. @blowdart thank you\n. ",
    "gisek": "@DAllanCarr You are right. I was using it the wrong way. The issue should be closed.\n. ",
    "hieupious": "How about beta 8? I don't see any updates from it.\n. ",
    "leastprivilege": "spot on ;p\n@blowdart @HaoK @rustd \n. really? I always say \"good morning MICROSOFT/PRANAV\" when I meet him him the hallway.\n. http://leastprivilege.com/2015/07/22/the-state-of-security-in-asp-net-5-and-mvc-6-oauth-2-0-openid-connect-and-identityserver/\n. B2C Emulator - isn't that what it is?. Refactoring doesnt make sense to me. We certainly wouldn't use it - and you are not building a framework. \nIn spirit this is a closed source product. I mean - it needs to mirror the exact feature set of a closed source product. So why even open sourcing it?. PKCE is for desktop/mobile native clients.. You should attend our workshop @davidfowl @HaoK @blowdart . I was actually serious.. ",
    "mdmoura": "IMHO:\n1 - Using only roles and having one roles table;\n     In this case there would be the RolesStore ...\n2 - Using claims, including roles, and having only one claims table.\n     In this case there would be the ClaimsStore ... Role is a Claim of type Role.\nIf this results in unwanted complexity why not having only one Claims table and if configuration includes only Roles then Claims table would allow only claims of type Role ... \nI just think that having Roles and Claims tables when a Role is a Claim does not make sense.\n@alexsandro-xpt:\nDo you know where can I find an example of how to set ASP.NET Identity only with Claims?\nI was looking and didn't find it ... I just found info on how to add claims on top of roles.\nBetter documentation for ASP.NET Identity would be great ... \nAnd it would even help people to give better feedback ...\n. Any change this to be available on RC2?\n. Same problem here ... Where is the option:\npublic class IdentityDbContext : IdentityDbContext<IdentityUser, IdentityRole, string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim>\n. Yes, I tried just now and it worked. Just a site question: should a Window saying an error on dotnet.exe occurred and asking me if I want to close it or debug dotnet.exe? That is what happens when I don't set:\n.AddEntityFrameworkStores<Context, Int32>()\nMaybe dotnet.exe shoudl catch such kind of exception and displays then on console.\n. @Ketrex So I need to copy the UserStore file:\nhttps://github.com/aspnet/Identity/blob/1a0cd3c4d15be988abefd889853b0c6d973db9f4/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs\nBut how to register this UserStore in my Startup class?\nAnd will there be a release before 1.1 with this fix? \nVersion 1.1 is scheduled to Q4 2016 / Q1 2017 so it can take a while.\n. @Ketrex \nNot sure what the problem is but I added the new UserStore to my code and named it CustomUserStore:\nhttps://github.com/aspnet/Identity/blob/1a0cd3c4d15be988abefd889853b0c6d973db9f4/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs\nAnd on Startup I added the following:\n.AddUserStore<IdentityUserStore<User, Role, Context, Int32, UserClaim, UserRole, UserLogin, UserToken, RoleClaim>>()\n.AddRoleStore<RoleStore<Role, Context, Int32, UserRole, RoleClaim>>();\nThis compiles but when I run it I get the following error on Program/Main:\nCannot instantiate implementation type 'CoreProject.CustomUserStore`9\n[CoreProject.User,CoreProject.Role,CoreProject.Context,System.Int32,CoreProject.UserClaim,\nCoreProject.UserRole,CoreProject.UserLogin,CoreProject.UserToken,CoreProject.RoleClaim]' \nfor service type 'Microsoft.AspNetCore.Identity.IUserStore`1[CoreProject.User]'.\nAny idea why this happens?\n. @Ketrex I just added to a demo project to github:\nhttps://github.com/mdmoura/Core\nIf you start the project with will get an error on Program/Main.\nAm I missing something?\n. @Ketrex Sorry for the delay. Thank you, that worked fine.\n. With ASP.NET Core 1.1 I tried to use again:\n.AddEntityFrameworkStores<Context, Int32>()\n.AddDefaultTokenProviders();\n\nBut I get the errors:\nSystem.ArgumentException: 'GenericArguments[0], 'MvcApp.User', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`4[TUser,TRole,TContext,TKey]' violates the constraint of type 'TUser'.'\n\nTypeLoadException: GenericArguments[0], 'MvcApp.User', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9[TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim]' violates the constraint of type parameter 'TUser'.\n\nDo we still need to use custom UserStore and RoleStore?\n. That compiles but when I run it I get the error:\n\"GenericArguments[0], 'WebProj.User', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`4[TUser,TRole,TContext,TKey]' violates the constraint of type 'TUser'.\"\n\n\"at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\\r\\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\\r\\n   \n at Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.GetDefaultServices(Type userType, Type roleType, Type contextType, Type keyType)\\r\\n   \nat Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores[TContext,TKey](IdentityBuilder builder)\\r\\n   \nat WebProj.Startup.ConfigureServices(IServiceCollection services)\\r\\n\n--- End of stack trace from previous location where exception was thrown ---\\r\\n   \nat System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\\r\\n   \nat Microsoft.AspNetCore.Hosting.ConventionBasedStartup.ConfigureServices(IServiceCollection services)\\r\\n   \nat Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\\r\\n   \nat Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\\r\\n   \nat Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\\r\\n   at WebProj.Program.Main(String[] args)\". I saw that one and the milestone was [1.1.0-preview1](https://github.com/aspnet/Identity/milestone/21) so I though that was done. So the entire User Store needs to be created?. But is there a way to configure the services in a Console Application to replicate what is going on in the Web Application? I mean, I would like to seed the database with test data through a Console Application and not having it in the Web Application. I suppose it should be possible even for example integration tests?.\n",
    "gilmishal": "Is their any update on this issue?\n. ",
    "dcga": "Is there a chance you can add an overload to the extension method AddIdentity so that you can write:\nservices.AddIdentity<AppUser>\n    .AddEntityFrameworkStores<AppUserCtx>()\n    .AddDefaultTokenProviders();\nThis of course, while you convince yourselves that it is better to roll with Claims only and eliminate the redundancy of Roles.. ",
    "JohnGalt1717": "Ok, in the past IUserStore also required an implementation of IUser?\n. ",
    "WiredUK": "I could be wrong, but I don't have a problem with having one or two (or several!) generic versions of the IdentityDbContext class to allow for those people who want to extend the model. I think that can be done pretty cleanly?\n. @joshmouch I've taken a closer look at the code and it's super easy to extend it. Would a PR to do that be welcome here?\n. ",
    "candoumbe": "Nothing new on this ?\n. ",
    "torrentx": "Yup. Same concerns. After banging my head for a few hours converting from 2.0 to this version, I came to this thread.  Not having the ability to overwrite these base classes like version 2, makes it a just a fancy example and not something we can use as a framework. :(\n. Pretty much can't be done in this version. You'll need to use Identity 2.0 instead. There's a thread here: https://github.com/aspnet/Identity/issues/585\n. ",
    "xivSolutions": "Hi - \nAuthor of that post here. I should note for the record that that implementation is a bit of a hack. I needed it to solve a specific problem, but my understanding is the Identity team has determined that in-built group management is outside the scope of the basic Identity implementation. The way I did it was useful in my own context, and perhaps others, but can still become a permissions management PITA (and should have used claims, anyway). \nGlad you found the post useful, but don't be surprised if this issue gets closed out. See this issue among others. :-)\n. ",
    "ddddddddeee22211": "I admire the effort  you put to implement groups back in identity 2 . The problem you solved was \na decision factor for systems architectures in business environment. Therefore, we can say it is \nmore generic than specific due to scalability nature of user authorization in business environment\nwhere user turn over is common to happen .\nwhile my argument here is lacking this implementation in identity 3 will make important\nsegment of enterprise developers move away from adopting identity 3 and seek custom approaches.\nthis create a security vulnerable gap in applications developed using ASP.NET 5.\nidentity 3 is versatile product that addresses and solved many draw backs of legacy membership and simplemembership and universal providers\nthe addition of claims to identity was a response to demand from cloud services auth that is based mainly on claims instead of roles. therefore identity was adopted by cloud-focused developers.\nthis is the same case. enterprise developers are moving away for lacking of groups in my opinion.\nImplementation can be injected in small portion of current code and will take identity3 to a new level\nof functionality\n. ",
    "Anderman": "It is implemented as notconfirmed and thats ok.  So you can give the user a correct message \nprivate async Task<SignInResult> PreSignInCheck(TUser user)\n        {\n            if (!await CanSignInAsync(user))\n            {\n                return SignInResult.NotAllowed;\n            }\n            if (await IsLockedOut(user))\n            {\n                return await LockedOut(user);\n            }\n            return null;\n        }\n```\npublic virtual async Task CanSignInAsync(TUser user)\n        {\n            if (Options.SignIn.RequireConfirmedEmail && !(await UserManager.IsEmailConfirmedAsync(user)))\n            {\n                Logger.LogWarning(\"User {userId} cannot sign in without a confirmed email.\", await UserManager.GetUserIdAsync(user));\n                return false;\n            }\n            if (Options.SignIn.RequireConfirmedPhoneNumber && !(await UserManager.IsPhoneNumberConfirmedAsync(user)))\n            {\n                Logger.LogWarning(\"User {userId} cannot sign in without a confirmed phone number.\", await UserManager.GetUserIdAsync(user));\n                return false;\n            }\n        return true;\n    }\n\n```\n. ",
    "bprentice": "I am also caught up here in looking at implementing a custom UserManager in order to extend \npublic virtual Task<TUser> FindByIdAsync(int companyCode, string userId) {...}\nand\npublic virtual Task<TUser> FindByNameAsync(int companyCode, string userName) {...}\n(Reason for this is to enable me to manage a custom multitenant implementation).\nBut I am also constantly running into issues with the private members of UserManager:\n private CancellationToken CancellationToken => _context?.RequestAborted ?? CancellationToken.None;\nand the fact that \nThrowIfDisposed() Method is set to private.  \nIf these methods were made protected, then extending UserManager would be much easier to create functions that follow common patterns that exist in UserManager Code\n. ",
    "BoasE": "any thoughts about this?\n. ",
    "msmaldi": "Try use your code with IdentityRole<int> instead ApplicationRole\n``` csharp\n    public class ApplicationUser : IdentityUser\n    {\n    }\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, IdentityRole<int>, int>\n{\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n        // Customize the ASP.NET Identity model and override the defaults if needed.\n        // For example, you can rename the ASP.NET Identity table names and more.\n        // Add your customizations after calling base.OnModelCreating(builder);\n    }\n\n    public DbSet<PropertyManagementCompany> PMC { get; set; }\n}\n\n\nservices.AddIdentity<ApplicationUser, IdentityRole<int>>()\n            .AddEntityFrameworkStores<ApplicationDbContext, int>()\n            .AddDefaultTokenProviders();\n\n```\n. ",
    "miroslavsiska": "Solved - it is possible with current implementation.\n. Solved\nhttp://stackoverflow.com/questions/34578462/mvc-6-vnext-usermanager-di-create-user-in-specific-database\n. Solved!\nhttp://stackoverflow.com/questions/34578462/mvc-6-vnext-usermanager-di-create-user-in-specific-database\n. ",
    "mikeandersun": ":+1: \n. ",
    "SetTrend": "Thank you, Hao.\nI was looking for some kind of consent, i.e. when providing a particular scope the above confirmation screen would be skipped.\nSo apparently there is no such consent scope?\nThank you for enlightening me.\n. OK, that you for all your efforts.\nFrom what I understand this would be an issue to discuss in the OAuth2/OpenID workgroup then, since the authorization server is proprietearily deciding whether to show a confirmation screen or not. There may be a certain scope to be defined that would be accepted by all security providers to skip the confirmation screen as it only returned the user Id and authorization key, right?\n. Actually I did do that a week ago. But to no avail. Apparently no-one there know the answer themselves :(\nI was hoping someone here would know the answer as it seems closely related.\n. Please forgive me if I mistakenly have posted to the wrong group.\nI believed because my feedback mainly targets the UserManager class my issue belongs to this group.\nThe Katana group @ Codeplex seems to have deceased, by the way. Reponses there are fairly sparse.\n. ",
    "Schlurcher": "Hi there, again!\nAfter toying around with this on the weekend, I came up with a pretty simple but somewhat smelly solution to avoid wiring up the dependencies manually.\n``` csharp\npublic static void AddTicketStore(this IServiceCollection services)\n    where TTicketStore : class, ITicketStore\n{\n    // Maybe Singleton is better?\n    services.AddScoped();\n// This smells a little...\nvar provider = services.BuildServiceProvider();\nvar store = provider.GetService<ITicketStore>();\nservices.Configure<IdentityOptions>(options =>\n{\n    options.Cookies.ApplicationCookie.SessionStore = store;\n});\n\n}\n```\nIt's used during Configure[Staging|Production]Services. I can live with cunked cookies during development, plus no additional setup necessary.\npublic void ConfigureProductionServices(IServiceCollection services)\n{\n    ConfigureServices(services);\n    // Register sql server as IDistributedCache.\n    services.AddSqlServerCache(...);\n    services.AddTicketStore<DistributedTicketStore>();\n}\nI don't like that I have to use BuildServicePovider() for this. Feels wrong. And it will throw if the services are added in the wrong order.\n. ",
    "Roybaby": "http://www.vannevel.net/2015/03/21/how-to-unit-test-your-owin-configured-oauth2-implementation/\n. ",
    "TerribleDev": "There could be a setting to turn on \"the magic\"\n. ",
    "ozonni": "is there some updates on this issue? We also face the same issue with including additional claims during the signup.. ",
    "chrisckc": "@HaoK @PinpointTownes , just found this issue, also wanted to pass the claims through to the application cookie but had to use _userManager.AddClaimAsync() to add them to the database first as in the sample supplied by @HaoK.\nSome i would like to be in the database, others not so there needs to be a way to do this.\nI have just found a way to add claims by overriding the UserClaimsPrincipalFactory.CreateAsync() method, but there is no access to the external claims, just the user object so that additional claims can be created from the User's properties. Claims added there are not added to the database and are not visible in _signInManager.GetExternalLoginInfoAsync().Principal.Claims, which was fine for what i wanted to try out.. ",
    "xperiandri": "What about User.GetUserId() ?\n. Also incorrect comment at https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/IdentityUserClaim.cs#L21\n. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L54\na user and a role\n. https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L54\na user and a role\n. I'm just looking at the comments to make OpenIddict comments having the same style.\n. I'm just looking at the comments to make OpenIddict comments having the same style.\n. The style of description is inconsistent for\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/IdentityDbContext.cs#L51-L53\nand\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L105-L112\nWhich one will be agreed for entity type description?\n1. The type of entity objects.\n2. The type representing a entity.\nAnd for primary key\n1. The type of the primary key for entityes1 and entityes2>.\n2. The type of the primary key for a entity.\n. The style of description is inconsistent for\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/IdentityDbContext.cs#L51-L53\nand\nhttps://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs#L105-L112\nWhich one will be agreed for entity type description?\n1. The type of entity objects.\n2. The type representing a entity.\nAnd for primary key\n1. The type of the primary key for entityes1 and entityes2>.\n2. The type of the primary key for a entity.\n. Explain what you mean, which change\n. Explain what you mean, which change\n. So now you put lists into properties whenever is located there even if they are initialized, don't you?\n. So now you put lists into properties whenever is located there even if they are initialized, don't you?\n. @blowdart so what was the reason of that no action was taken on this?. @blowdart so what was the reason of that no action was taken on this?. ",
    "singlewind": "I found a closed ticket #536 which changed to scope from transient, which is it should be in most applications. However, it may brings issue when we use attach method in our code without check whether entity is already in the context\n. It is very easy to replicate. Any time, the second call to userManager, roleManage related to a same entity will fail. For example, the ResetAccessFailedCountAsync is OK, but SetLockoutEndDateAsync will fail, because user is already in tracker.\ncsharp\nvar result = await userManager.ResetAccessFailedCountAsync(user);\n                if (result.Succeeded)\n                {\n                    await userManager.SetLockoutEndDateAsync(user, null);\n                }\n. I didn't observe the issue again after upgrade to RC1. I believe this may be an issue of EF instead of Identity. I will keep an eye on it.\n. Identity is using hard coded value \"/Account/Login\" as default if you are not specified. And it doesn't need to bring MVC features in and should be generic itself. It is always easier just give the value you want like\nservices.Configure<IdentityOptions>(conf =>\n            {\n                conf.Cookies.ApplicationCookie.LoginPath = \"/account/login\";\n                conf.Cookies.ApplicationCookie.LogoutPath = \"/account/logout\";\n            });. ",
    "Fosol": "I forgot to include\napp.UseIdentity();\n. You're using EF 6.1.3 and the new Identity 3 uses EF 7.  Presently you cannot use two different versions of EF by default.  You would most likely have to figure out a way to make them play nice.\n. Regrettably I don't have the time to go through all the details.  I am currently working on a project that uses Oracle.  As such I've had to do a lot of workarounds to handle the EF issues.\n1) EF 6.1.3\n2) Oracle.ManagedDataAccess 12.1.22\n3) Oracle.ManagedDataAccess.EntityFramework 12.1.22\n3) Custom implementation of Identity 3 using my own implementation of EF 6.1.3 and Oracle\n4) Don't reference EF 7 anywhere\n5) Apply this attribute below to your custom DbContext classes\n[DbConfigurationType(typeof(OracleDbConfiguration))]\n6) You'll need the implementation for the above attribute.\n```\n    /// \n    ///  class, provides a way to force Entity Framework to use the appropriate data access providers and factories from Oracle.\n    /// This is required in ASP.NET 5 since configuration\n    /// \n    public class OracleDbConfiguration : DbConfiguration\n    {\n        #region Variables\n        public const string OracleClient = \"Oracle.ManagedDataAccess.Client\";\n        #endregion\n    #region Constructors\n    /// <summary>\n    /// Creates a new instance of an OracleDbConfiguration class.\n    /// </summary>\n    public OracleDbConfiguration()\n    {\n        SetProviderServices(OracleClient, EFOracleProviderServices.Instance);\n        SetProviderFactory(OracleClient, OracleClientFactory.Instance);\n    }\n    #endregion\n}\n\n```\n7) Regrettably you'll need to do a lot more than that, but that was the first steps that allowed me to connect correctly to the DB.\n. ",
    "rhegner": "Actually, it is very easy...\nIn ConfigureServices after AddIdentity I added:\nservices.AddScoped<SignInManager<MyUser>, MySignInManager>();\nThis seems to overwrite the previous registration made by AddIdentity and works fine.\n. No because I also need to perform some project specific actions after login.\n. ",
    "prasannavl": "Funny this small typo took this long. Anyway, thanks for doing the rebase. :)\n. ",
    "umutesen": "How can one mock user manager/ signin manager in .net core?. @maxalmonte14 Thanks for the code snippet! \ud83d\udc4d \nhere is how I ended up doing:\nController:\n```\n    [Route(\"api/[controller]\")]\n    public class AccountController : Controller\n    {\n        private readonly UserManager _userManager;\n        private readonly SignInManager _signInManager;\n    public AccountController(UserManager<User> userManager,\n        SignInManager<User> signInManager)\n    {\n        _userManager = userManager;\n        _signInManager = signInManager;\n    }\n}\n\n```\nTest:\n```\n    [TestClass]\n    public class AccountControllerTests\n    {\n        private AccountController _controller;\n        private Mock> _mockUserManager;\n        private Mock> _mockSignInManager;\n    [TestInitialize]\n    public void TestInitialise()\n    {\n        var userStoreMock = new Mock<IUserStore<User>>();\n\n        _mockUserManager = new Mock<UserManager<User>>(userStoreMock.Object,\n            null, null, null, null, null, null, null, null);\n\n        var contextAccessor = new Mock<IHttpContextAccessor>();\n        var userPrincipalFactory = new Mock<IUserClaimsPrincipalFactory<User>>();\n\n        _mockSignInManager = new Mock<SignInManager<User>>(_mockUserManager.Object,\n            contextAccessor.Object, userPrincipalFactory.Object, null, null, null);\n\n        _controller = new AccountController(_mockUserManager.Object, _mockSignInManager.Object);\n    }\n\n}\n```\nThen you can assert like this:\n_mockUserManager.Verify(s => s.FindByNameAsync(\"username\"), Times.Once);\n. ",
    "maxalmonte14": "\nHow can one mock user manager/ signin manager in .net core?\n\n@umutesen I had the same question so I started searching, this is how I do, I hope it works for you\nUserManager\n```c#\nusing System;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing Moq;\nnamespace YourNamespace\n{\n    public class FakeUserManager : UserManager\n    {\n        public FakeUserManager()\n            : base(new Mock>().Object,\n                  new Mock>().Object,\n                  new Mock>().Object,\n                  new IUserValidator[0],\n                  new IPasswordValidator[0],\n                  new Mock().Object,\n                  new Mock().Object,\n                  new Mock().Object,\n                  new Mock>>().Object)\n        { }\n    }\n}\n```\nSignInManager\n```c#\nusing System;\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing Moq;\nnamespace YourNamespace\n{\n    public class FakeSignInManager : SignInManager\n    {\n        public FakeSignInManager()\n            : base(new FakeUserManager(),\n            new Mock().Object,\n            new Mock>().Object,\n            new Mock>().Object,\n            new Mock>>().Object,\n            new Mock().Object)\n        { }\n    }\n}\n```\nAfter defining the classes you have to mock them anything you want to use them, that way you can modify any specific behavior the way you want.\n```c#\nprivate Mock _userManagerMock;\nprivate Mock _signInManagerMock;\npublic YourContrustor()\n{\n    _userManagerMock = new Mock();\n    _signInManagerMock = new Mock();\n}\n```\n\nI have to say, this is not my work (at least not 100%), this is a compilation of tips and tricks I found in different sites like Stackoverflow, Medium, the Microsoft documentation, blogs, etc. Anyways I hope it works for you and everybody else \ud83d\ude04. ",
    "omrumbakitemiz": "Thank you for all codes, i have this code when i run unit test i'm getting this error, can you help me?\n\nCastle.DynamicProxy.InvalidProxyConstructorArgumentsException : Can not instantiate proxy of class: ClubSystem.Test.FakeUserManager.\nCould not find a constructor that would match given arguments:. \n",
    "pakrym": ":up: :date:\n. Merging to unblock the build. We started using structs as TState in ILogger.Log() and logger.Setup(x => x.Log(It.IsAny<LogLevel>(), It.IsAny<EventId>(), It.IsAny<object>(), doesn't get invoked when T is struct.\nI've fixed this for kestrel:\nhttps://github.com/aspnet/KestrelHttpServer/pull/3066\n. In what way?. There is a great alternative to mocking - LoggedTest base class that not only provides TestSink with the list of all messages logged but also forwards them to xunit test output.\nFor example this is how kestrel asserts log messages:\nhttps://github.com/aspnet/KestrelHttpServer/blob/d29e410b035a3fe7db0d4625ee37cd6cb76e40d3/test/Kestrel.Transport.FunctionalTests/RequestTests.cs#L684. It's somewhat possible, but it was the entire purpose of having TState was to be able to pass structs without boxing. Seems like an safe enough change for 3.0 milestone. \ncc @Eilon . Yep  HttpContextAccessor  is in internal\n. Do we want to put thumbprint here or maybe certificate object?. Let's remove CertificateThumbprint until we start supporting it.. I think @danroth27 had an idea how to conditionally enable default options binding. We may want to use it here.. https://github.com/aspnet/KestrelHttpServer/pull/3066#issuecomment-434433211. ",
    "natelaff": "I'm also having troubles getting a custom PasswordHasher. This seemed much easier in Identity 2.\nEDIT: Is this right?\n```\n        services.AddIdentity()\n            .AddEntityFrameworkStores()\n            .AddDefaultTokenProviders();                \n    services.AddScoped<IPasswordHasher<User>, MyPasswordHasher>();\n\n```\n. Yeah, I also tried that route but found it ugly. I wish we could get some official guidance here on the right way to do this.\n. Thanks. it works fine after addidentity, I just didn't know if that was the right way to do it. i.e. If you guys wrote documentation on \"How do implement a custom password hasher\" is that how you'd say to do it? ;)\n. Just some of those that would be common. CreatedDateTime, LastLoginDateTime, LastActivityDateTime and have signinmanager/usermanager deal with them. Like I said, seems like a pretty common scenario that would be nice to have supported OOTB.\n. Well that was how it worked in ASP.NET 2.0 Membership.\nMembershipUser.LastActivityDate Property  Gets or sets the date and time when the membership user was last authenticated or accessed the application.\nThe internals are up to you guys :D. Any action decorated with [Authorize] attribute?. In fairness I'm cool without LastActivity, last login was the big one for me, I mentioned it only because it was part of Membership in ASP.NET 2.0. It's not nearly as critical.. Yes, I tried to implement this today and failed which prompted this ticket. I created a PendingEmail column on my user class. I generated the code and shot the email to the new email address. I then logged the user out. So far so good. Once they clicked the link in the email I then set the UserName and Email (which in my case are the same), but upon attempting to confirm it, the user manager threw an exception because it didn't match. I guess I could just update that field manually? I don't know. In any case, it seemed like it would be a good scenario to cover ;)\n. You can get stuck in some nasty error loops if you get into this state. This should be handled more gracefully.\n. I've not yet found anything I can do about it. I believe the issue may be in signinmanager. When you sign in with external you get that second cookie which its obviously unable to locate a user with that id in the system and that cookie is just lingering (I believe).\n. Yes, it happens when it tries to get the current user.\n. I think it's a bit deeper than the template from what I can see. It actually tanks in UserManager.GetCurrentUserAsync().\nIn an instance where you use Guid for ID type you'll get this:\nFormatException: Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\nSystem.Guid.TryParseGuidWithNoStyle(String guidString, GuidResult& result)\nSystem.Guid.TryParseGuid(String g, GuidStyles flags, GuidResult& result)\nSystem.Guid..ctor(String g)\nSystem.ComponentModel.GuidConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore4.ConvertIdFromString(String id)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore4.FindByIdAsync(String userId, CancellationToken cancellationToken)\nMicrosoft.AspNetCore.Identity.UserManager1.FindByIdAsync(String userId)\nMicrosoft.AspNetCore.Identity.UserManager1.GetUserAsync(ClaimsPrincipal principal)\nWebApplication1.Controllers.ManageController.GetCurrentUserAsync() in ManageController.cs\n           return _userManager.GetUserAsync(HttpContext.User);\nWebApplication1.Controllers.ManageController.d__7.MoveNext() in ManageController.cs\n            var user = await GetCurrentUserAsync();\n--- End of stack trace from previous location where exception was thrown ---\n. No, it has my external login username.\n. Ah-ha!\nYep, that results in the correct behavior where it just returns me to login screen.\n. Was just using default template ;) That should probably be added.\nEven so, in LinkLoginCallback, when you call _signInManager.GetExternalLoginInfoAsync() ExternalLoginInfo.ProviderDisplayName is null so if you want this you have to use something like:\nawait _userManager.AddLoginAsync(user, new UserLoginInfo(info.LoginProvider, info.ProviderKey, info.LoginProvider));\n. I'm on 1.0.1... so post-RTM?\nI was bitten by that bug in RC... RTM corrected it. This is different. I've never seen this \"accessdenied\" action its trying to get it.\nI believe it is new as of 1.0.1. I tried to revert, but still having the same issues. Though I'm not sure I actually \"reverted\" correctly -- the version manager and stuff is still a little foggy for me.\n. Yay! I'm happy its not just me. Solidarity! :D\nI hit it when I was trying to implement IdentityServer4. Figured it was something goofy there but just couldn't figure out why. 4 hours later I tried it in my app that was known to previously work with RTM and then just built up a new app and was able to repro there as well.\n. Well like I said it worked in RTM. I know because i was eager to test after removing the former RC2 workaround (which also doesn't work to fix this BTW). The only thing that happened since then was installing 1.0.1. My site is still in dev and not production yet so unfortunately I can't narrow down a timeline. I only noticed it this weekend. But it definitely WAS working.\nBroken on my machine and when I published to Azure. Cleared cookies and all that stuff. Tried different browsers. Same result across the board. \n. Hmmm.... I don't have that in the account controller :-| And I just created this new project over the weekend. Definitely have 1.0.1 installed.\n. I added that code to my account controller. It didn't fix it.\n. @HaoK can you attach the project you just made and I'll replace with my externals and see if I can repro there?\n. I added that tonight with no effect. I'll debug through that login method tomorrow to see what that value is.\n. Yes, Ketrex, that is exactly it.\nAlso, creating a new project doesn't add that revised template of the AccountController? I have installed DotNetCore.1.0.1-VS2015Tools.Preview2.0.2.exe and uninstalled any previous version of .NET Core. Is there another step that is required? Was that code added post 1.0.1?\n. Video repro of the issue.\nhttp://screencast.com/t/WsQDA97E9\n. Thanks @Ketrex -- I considered doing the same. Maybe I'll give it a go considering I'm not in production yet anyways.\n. I'm pretty confused by migrating custom user types as in https://github.com/aspnet/Identity/issues/1001.\nSo, just like that scenario I have a custom User object, but everything else just uses a Guid Key.\nSo I do this...\n        services.AddIdentity<User, IdentityRole<Guid>>()\n        .AddEntityFrameworkStores<REV23DbContext>()\n        .AddDefaultTokenProviders();\n\nAnd get this..\n'AddEntityFrameworkStores can only be called with a role that derives from IdentityRole.'\nI don't see anywhere that IdentityRole has the TRoleClaim on it? Don't really get what this means.. Ok, created my new derived type per @HaoK \npublic class Role : IdentityRole<Guid>\n{\n    [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2214:DoNotCallOverridableMethodsInConstructors\")]\n    public Role()\n    {\n        Id = Guid.NewGuid();\n    }\n}\n\nThen I use it in AddIdentity\n        services.AddIdentity<User, Role>(o =>\n        {                \n            o.Password.RequireDigit = false;\n            o.Password.RequiredLength = 8;                \n            o.Password.RequireLowercase = false;\n            o.Password.RequireNonAlphanumeric = false;                \n            o.Password.RequireUppercase = false;                \n        })\n        .AddEntityFrameworkStores<REV23DbContext>()\n        .AddDefaultTokenProviders();\n\nThen try to add it to the model\n    protected override void OnModelCreating(ModelBuilder builder)\n    {            \n        base.OnModelCreating(builder);\n\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(r => r.Id);\n\nBut I get:\nInvalidOperationException: A key cannot be configured on 'Role' because it is a derived type. The key must be configured on the root type 'IdentityRole'. If you did not intend for 'IdentityRole' to be included in the model, ensure that it is not included in a DbSet property on your context, referenced in a configuration call to ModelBuilder, or referenced from a navigation property on a type that is included in the model.\nIf I try to remove the HasKey call, then Add-Migration attempts to recreate AspNetRole table.\nAre there any good steps to take here, or am I just blocked by this bug?\n. Ok, I'm FINALLY getting closer with my Guid based Role, but now I'm getting this.\nThe key value at position 0 of the call to 'DbSet>.Find' was of type 'Guid', which does not match the property type of 'string'.\nAnd my migration inexplicably contains this:\nmigrationBuilder.AddForeignKey(\n                name: \"FK_UserToken_User_UserId\",\n                table: \"UserToken\",\n                column: \"UserId\",\n                principalTable: \"User\",\n                principalColumn: \"Id\",\n                onDelete: ReferentialAction.Cascade);\nWhich I already have a FK on there for User.Id. So possibly related. Any ideas what's up here?\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\n\n. Yep! IdentityDbContext. I still don't get what to do with this one when trying to sign in after upgrade. @HaoK?\nOr is this part of the registration not detecting my custom Guid mapping bug?\nArgumentException: The key value at position 0 of the call to 'DbSet>.Find' was of type 'Guid', which does not match the property type of 'string'.\nMicrosoft.EntityFrameworkCore.Internal.EntityFinder.FindTracked(Object[] keyValues, out IReadOnlyList keyProperties)\nMicrosoft.EntityFrameworkCore.Internal.EntityFinder.FindAsync(Object[] keyValues, CancellationToken cancellationToken)\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.FindAsync(Object[] keyValues, CancellationToken cancellationToken)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore.FindTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)\nMicrosoft.AspNetCore.Identity.UserStoreBase+d__67.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.AuthenticatorTokenProvider+d__0.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserManager+d__130.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__52.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__33.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__34.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nREV23.Web.Controllers.AccountController+d__9.MoveNext() in AccountController.cs\n+\n                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: true);. @HaoK yep. It always used to work... Even tried to full on IdentityDbContextOverload specifying everything with no success.\npublic class REV23DbContext : IdentityDbContext<User, Role, Guid>\n{\n\n....\n        protected override void OnModelCreating(ModelBuilder builder)\n        {          \n            base.OnModelCreating(builder);\n            // Customize the ASP.NET Identity model and override the defaults if needed.\n            // For example, you can rename the ASP.NET Identity table names and more.\n            // Add your customizations after calling base.OnModelCreating(builder);\n            builder.Entity().ToTable(\"User\").HasKey(u => u.Id);\n            builder.Entity().ToTable(\"Role\").HasKey(u => u.Id);\n            builder.Entity>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\n            builder.Entity>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\n            builder.Entity>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\n            builder.Entity>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\n            builder.Entity>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });. Yeah, that was what I had already tried. Did again, with same results :(\nMy OnModelCreating does have the \\<Guid> in there, but GitHub stripped it. I'll try again.\n    protected override void OnModelCreating(ModelBuilder builder)\n    {            \n        base.OnModelCreating(builder);\n        // Customize the ASP.NET Identity model and override the defaults if needed.\n        // For example, you can rename the ASP.NET Identity table names and more.\n        // Add your customizations after calling base.OnModelCreating(builder);\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\n\n. Where would I do that? In AddEntityFrameworkStores? Nothing seems to like that definition as far as setting it up is concerned.. I see.. yeah, that's what that is currently inherting.\nAnd yep. Those look like this:\npublic class Role : IdentityRole<Guid>\n{\n\n...\n    }\n// Add profile data for application users by adding properties to the ApplicationUser class\npublic class User : IdentityUser<Guid>\n{\n\n..\n}\n. I think it might have something to do with the fact that my Migration to this release adds this FK?\n        migrationBuilder.AddForeignKey(\n            name: \"FK_UserToken_User_UserId\",\n            table: \"UserToken\",\n            column: \"UserId\",\n            principalTable: \"User\",\n            principalColumn: \"Id\",\n            onDelete: ReferentialAction.Cascade);\n\nWhich I don't understand, as new DB doesn't have that FK. I don't have a navigation property or anything to UserTokens from User.. And that makes sense-- but when creating a new Identity database with a new webapplication, no such FK exists, which threw me off... unless I missed it.\nI guess I'll need to wait until the fixes in 2.01 to see if this fixes my issue because I'm stumped at this point :(\n. @HaoK Was able to reproduce the error in a blank solution. I think there is an issue here.\nArgumentException: The key value at position 0 of the call to 'DbSet.Find' was of type 'Guid', which does not match the property type of 'string'.\nBasically, start a new project with individual auth. \npublic class User : IdentityUser<Guid>\n{\n    public string MyProperty { get; set; }\n}\n\npublic class Role : IdentityRole<Guid>\n{\n    public string MyProperty { get; set; }\n}\n\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n\n        builder.Entity<User>().ToTable(\"User\").HasKey(u => u.Id);\n        builder.Entity<Role>().ToTable(\"Role\").HasKey(u => u.Id);\n        builder.Entity<IdentityUserClaim<Guid>>().ToTable(\"UserClaim\").HasKey(uc => uc.Id);\n        builder.Entity<IdentityUserLogin<Guid>>().ToTable(\"UserLogin\").HasKey(ul => new { ul.LoginProvider, ul.ProviderKey });\n        builder.Entity<IdentityUserRole<Guid>>().ToTable(\"UserRole\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\n        builder.Entity<IdentityRoleClaim<Guid>>().ToTable(\"RoleClaim\").HasKey(rc => rc.Id);\n        builder.Entity<IdentityUserToken<Guid>>().ToTable(\"UserToken\").HasKey(ut => new { ut.LoginProvider, ut.UserId, ut.Name });\n    }\n\nNothing crazy happening here. Just making the key a Guid and renaming the tables.\nReplace appropriate methods to use that User/Role/Key type.\nRun, create a user, then go to Two Factor Auth page and you'll hit it on the call to _userManager.GetAuthenticatorKeyAsync(user)\n. WebApplication6.zip\nHere's a repro project.\n1) Create database\n2) Register as a new user\n3) Go to Manage page\n4) Click Two Factor Auth. https://github.com/natelaff/aspnetcore20-identity-bug\nThanks @HaoK . I already have an existing database where I have those table names set so I'm kind of locked in there :)\nThis is a simplified version of a Core 1.1 app that's in production that I am trying to migrate to 2.0. Came back to now that 2.1 is out and still ran into this. What can I do here to proceed? I have an existing db that's live that has this structure. What do I need to do to get my app upgraded? Thanks!. Ok, I basically did what was suggested and blew away the identity stuff from my snapshot and regenerated. also killed my model customizations on identity other than the essential stuff like the user table and just migrated data over. everything worked good here. must have been a result of just early snapshots from 1.0 beta stuff. you can close, or keep open if you want to attempt to fix for later. but I've moved past it :). Ahhh. Yep, it's there and worked great. I suppose an updated Preview 2 blog post will go into such a thing when posted, but that Preview 1 one was all I had to work on :) Thanks. But those tables get created either way in a new template? Maybe Role based authorization is just bad for a new app and I need to change my thinking.. Yep, it all gets created. Start a new 2.1 app with individual auth and you end up with those in the CreateIdentity migration. If you wipe those out and do Add-Migration, you still end up with them. So the assumption is you can easily use them. You cannot.. The problem that I ran into immediately was this.\nCreated a new project, scaffolded Identity views (I have a template I'm working I have to work with, so need to customize those views). So these went into \\Areas\\Identity\nThen, realized I couldn't use Roles with DefaultIdentity, so changed that, but then everything went weird (Razor Pages are a new concept for me, I did a site in 1.0, but couldn't upgrade it to 2.0 for other identity issues, that I finally just resolved in 2.1.\nSo then I realized, I have to go pull out all of the underneath config from the AddDefaultIdentity sugar to add authorization to those views (and actually move them out of the Identity area an into something more basic.\nAnyways, it was an entire day of fighting with this because DefaultIdentity didn't do what I expected it to do. It was not a positive experience.. So what\u2019s the path of least resistance here? Or at least the line of thinking? Are roles deprecated as a concept? Should I move to claims in general? Or are there no permission concepts happening in defaultidentity at all and it\u2019s truely just a user store only?. But as a more broad strokes question, clearly you intended to hide roles from default experience. Are claims that way as well? To bring any kind of permissions into this do you need to build out the config ourselves?. Yeah, the role claim doesn't seem to affect IsUserInRole or AuthorizeAttribute with a role name.. Any guidance on what might be happening here? I can only reproduce on my iPhone. Cookies are enabled there, nothing out of the ordinary.. ",
    "nhdmalik": "@HaoK I am facing issue when i add my custom password hasher using DI before AddIdentity call, as follow, it never invoked. What I missed in asp.net core project?\nservices.AddScoped<IPasswordHasher<ApplicationUser>, SQLPasswordHasher>();\nand here is my SQLPasswordHasher class:\n` public class SQLPasswordHasher : PasswordHasher\n    {\n        public override string HashPassword(ApplicationUser user, string password)\n        {\n            return base.HashPassword(user,password);\n        }\n    public override PasswordVerificationResult VerifyHashedPassword(ApplicationUser user, string hashedPassword, string providedPassword)\n    {\n        string[] passwordProperties = hashedPassword.Split('|');\n        if (passwordProperties.Length != 3)\n        {\n            return base.VerifyHashedPassword(user, hashedPassword, providedPassword);\n        }\n        else\n        {\n            string passwordHash = passwordProperties[0];\n            int passwordformat = 1;\n            string salt = passwordProperties[2];\n            if (String.Equals(EncryptPassword(providedPassword, passwordformat, salt), passwordHash, StringComparison.CurrentCultureIgnoreCase))\n            {\n                return PasswordVerificationResult.SuccessRehashNeeded;\n            }\n            else\n            {\n                return PasswordVerificationResult.Failed;\n            }\n        }\n    }\n\n    //This is copied from the existing SQL providers and is provided only for back-compat.\n    private string EncryptPassword(string pass, int passwordFormat, string salt)\n    {\n        if (passwordFormat == 0) // MembershipPasswordFormat.Clear\n            return pass;\n\n        byte[] bIn = Encoding.Unicode.GetBytes(pass);\n        byte[] bSalt = Convert.FromBase64String(salt);\n        byte[] bRet = null;\n\n        if (passwordFormat == 1)\n        { // MembershipPasswordFormat.Hashed \n            HashAlgorithm hm = HashAlgorithm.Create(\"SHA1\");\n            if (hm is KeyedHashAlgorithm)\n            {\n                KeyedHashAlgorithm kha = (KeyedHashAlgorithm)hm;\n                if (kha.Key.Length == bSalt.Length)\n                {\n                    kha.Key = bSalt;\n                }\n                else if (kha.Key.Length < bSalt.Length)\n                {\n                    byte[] bKey = new byte[kha.Key.Length];\n                    Buffer.BlockCopy(bSalt, 0, bKey, 0, bKey.Length);\n                    kha.Key = bKey;\n                }\n                else\n                {\n                    byte[] bKey = new byte[kha.Key.Length];\n                    for (int iter = 0; iter < bKey.Length;)\n                    {\n                        int len = Math.Min(bSalt.Length, bKey.Length - iter);\n                        Buffer.BlockCopy(bSalt, 0, bKey, iter, len);\n                        iter += len;\n                    }\n                    kha.Key = bKey;\n                }\n                bRet = kha.ComputeHash(bIn);\n            }\n            else\n            {\n                byte[] bAll = new byte[bSalt.Length + bIn.Length];\n                Buffer.BlockCopy(bSalt, 0, bAll, 0, bSalt.Length);\n                Buffer.BlockCopy(bIn, 0, bAll, bSalt.Length, bIn.Length);\n                bRet = hm.ComputeHash(bAll);\n            }\n        }\n\n        return Convert.ToBase64String(bRet);\n    }\n\n}`\n\n. ",
    "musabsudan": "adding that would be great, I noticed that it's a common pattern that leads people o custom implementations, some \"hooks\" to perform extra work would be fantastic.\nThanks\n. The article is really good, I wish if it can be updated soon to Identity 3 and if you added  a pure custom SQL implementation that doesn't depend on the EF models.\nEveryone seems to have the same struggle when integrating Identity in legacy systems back-ends and the guys here thinks that we have an empty database to throw their implementation in. \nMany times I preferred to throw away Identity and resort to simple authentication because I work with lots of legacy back-ends that the companies invested millions in and they have no way to change it.\n. ",
    "RoySalisbury": "I have a need to add functionality to the Identity system that includes a LastLoginDate field (along with a host of other things).  The two places that I can see will need to be updated are in the following:\nPasswordSignInAsync\n- This one is pretty easy.  I can override the method in the SignInManager and add my functionality to update the necessary user property (or claim, or wherever).  You need to also override the UserManager and UserStore to add the necessary logic and backing. No original source changes required.\nTwoFactorSignInAsync\n- This one is trickier ...  PasswordSignIn can trigger the logic for the TwoFactorSignIn.  So you would not update the LastLoginDate until the two factor was completed.  And when the TwoFactorSignIn is called, you no longer have a reference to the User object.  It is retrieved internally to the TwoFactor call by accessing the cookies.  And to do that it needs access to some internal fields in the SignInManager that can't be used in a derived class.  So it will require source changes.\nThere is one place that it MAY be possible to add this functionality and that is in the SignInAsync method directly.  Both of these call that method at the end, but it is also called for some other internal stuff not related so initial SignIn (e.g., RefreshSignIn to get updated cookies). If you made the argument that anytime the cookies got updated, then that would mean a Login, then your set.  But that is a bad argument. \nExternalLoginSignInAsync basically relies on one of the other two, so it will get handled on its own.\nIn my derived classes I have done most of this already.  For a TwoFactor \"hack\" I basically copied the \"internal\" code into my derived class.  However, I'm not sure that is going to be correct.  I'm no longer using the same instance of some of the objects and if any internal updates get done to them things will get messed up.  \nI have to do some other major updates to the SignInManager to add some other functionality (passwords that expire and prior password history), so I think I will need to branch the original SignInManager (and SignInResult) to add it.  Once I am done I would be more than happy to provide the code for review if its helpful.  I've never done this before (branching) so its something new for me.\n. What would you expect the difference to be for the LastLoginDateTime and the LastActivityDateTime? For example, would that mean the LastActivityDateTime would be updated each time a request is made for the authenticated user?  How would that affect performance (minimal to be sure, but still something).\n. I would think that updating the LastActivity should really only be done during a Login and a validation of the cookie.  But you should also have the ability to update it manually. This would prevent multiple updates to the LastActivity field during a single request.  \nAlso, doing it as part of the UserManager access to the user object would create issues for say an Admin that looks up the user by name, and changes a property (e.g, FirstName).  In this case the USER did not have any activity and it would be incorrectly reflected on the object.\n. OK.. So I forged the Identity repository, and created a new branch with the potential updates.  If someone could review them before I do the whole pull request process I would appreciate it.  \nhttps://github.com/RoySalisbury/Identity/tree/SignInManagerGenerics\nI'm sure I will need to figure out some type of tests to create, but before I go that far I need to get the current fork running its own tests.\n. OK.. Found and issue... < doh! >\nIn the base class I used a stupid shortcut so I did not have to refactor the code. \nreturn SignInResult.Failure as TSignInResult;\nHowever, I'm trying to cast UP and not down.   I'll need to refactor that a bit.\nIt was a fun exercise to get this all working so far ... from forking, branch, build, package, publish, and use in my own project...  Took a while, but had fun.  \nBTW, the extension that was added for AddSignInManager in another branch will need to be updated with this as well.  I had written it as a standalone extension awhile back and had to update it as follows:\n```\npublic static void AddIdentitySignInManager(this IServiceCollection services)\nvar managerType = typeof(SignInManager<,>).MakeGenericType(typeof(TUser), typeof(TSignInResult));\n```\n. Well, beginning to think this may not be possible.  Its probably why having static properties/methods in generic types is discouraged. No matter what I come up with, it always means a breaking change.  Basically, it would be easier to leave the SignInManger signature like it is, and just deal with creating a new (or updated) SignInResult.  \nA better solution might be to model SignInResult after IdentityResult.\nWith IdentityResult you basically have \"Success\", and \"Failed\".  If \"Failed\" you can provide a list of IdentityError's { Code, Description }.  This allows it to be extensible, just not strongly typed (what I originally going for).  And In most cases in the source, you use the \"IdentityErrorDescriber\" as a way to localize the strings in the \"description\".\nI like this approach.  You can still have the current SignInResult properties so the existing code stays as is, but if \"Failed\" is true, then there may be further information in the \"Errors\" property. (e.g. { Code = \"PasswordChangeRequired\", \"Description = Resources.PasswordChangeRequired }).  I always hated branching code based string comparison, but sometimes its just how it has to be.\nSo we wind up with:\n```\npublic class SignInResult \n{\n    // All Existing stuff still here.....\n// New Stuff\nprivate List<IdentityError> _errors = new List<IdentityError>();\npublic IEnumerable<IdentityError> Errors => _errors;\n\n}\n```\nWe reuse the IdentityError class since it appears to be designed to be extended for the Identity system and is even setup for DI. Its also used in the PasswordValidator, RoleManager, UserManager, ect).\nI'll modify my branch to try this structure.\n. Whats better .. a minor breaking change, or an addition that is semi-lame.\nBreaking (modify the existing \"Failed\" property:\npublic static SignInResult Failed(params IdentityError[] errors)\nOr ugly ..\npublic static SignInResult Failed => _failed;\n   public static SignInResult FailedWithError(params IdentityError[] errors)\nI'm going to go with the 2nd option until someone can chime in on what shuld be done about the existing \"Failed\" results (NotAllowed, TwofactorRequired, ect) that do not have an IdentityError assigned to them.\n. Because you cant change the return type of the overridden method.  \nFor example...\n```\npublic class MyIdentityResult : IdentityResult { }\npublic override async Task ChangePhoneNumberAsync(Guid userId, string phoneNumber, string token)\n    {\n        return new MyIdentityResult();\n    }\n```\nThis will error with:\n'ApplicationUserManager.ChangePhoneNumberAsync(Guid, string, string)': return type must be 'Task<IdentityResult>' to match overridden member 'UserManager<ApplicationUser, Guid>.ChangePhoneNumberAsync(Guid, string, string)'\nI could create a NEW one, and possibly hide the parent, but then that's not very good.  \nRoy\n. Or are you suggesting I treat the SignInResult like an abstract class.  Always have to check the type so see what it is before I cast it.  That seems a bit heavy handed.\n```\npublic class MySignInResult : SignInResult \n{\n    public static MySignInResult RequiresPasswordChange => _requiresPasswordChange;   \n}\npublic override async Task PasswordSignInAsync(ApplicationUser user, string password, bool isPersistent, bool lockoutOnFailure)\n{\n    return MySignInResult.RequiresPasswordChange;\n}\n```\nAnd then in my code\n```\nvar signInResult = await PasswordSignInAsync(user, \"password\", false, true);\n// Do normal checks .. is success, lockout, ect\n// Now do my checks \nif (SignInResult.RequiresPasswordChange) {}\nelse if (SignInResult.RequiresSomeOtherThing) {}\n```\nIs that what your suggesting?\nI could also put better logic in my class so that I just do a single cast, check it, and then switch on the results:\nvar mySignInResult = signInResult as MySignInResult;\nif (mySignInResult != null)\n{\n    switch (mySignInResult.ErrorCode)\n    {\n         case 1: { break; }\n         case 2: { break; }\n         case 3: { break; }\n    }\n}\n. So I have implemented it the way you suggested, and while it does work, its not something that lends itself to an inclusion into the base code.  So I wont need to provide all the PasswordHistory, LastLogin and other changes for inclusion into the framework.  If I run into other things that might require internal changes, I will re-branch and see what I can contribute.\nThanks\nBTW: The added CheckPasswordSignInAsync in the SignInManager helped a lot. Thanks.\n. I've worked around my issue (I hope), and will outline what I did below.  However, I think there needs to be something better.\nHere is what I did.  \nDo the base model creation from the parent.  Then, \"ignored\" the entire entity.\nbase.OnModelCreating(builder);\nbuilder.Ignore<ApplicationUserRole<int>>();\nHowever, that meant that some of the FK relationships were removed.  So I needed to add them back.\nbuilder.Entity<ApplicationUser>().HasMany(u => u.Roles).WithOne().HasForeignKey(ur => ur.UserId).IsRequired();\nbuilder.Entity<ApplicationRole>().HasMany(r => r.Users).WithOne().HasForeignKey(ur => ur.RoleId).IsRequired();\nSo, now I have the same model without the Key on IdentityUserRole from the base model.\nNow, because the property I want to add is Nullable (int?), adding a complex key with all 3 fields marks my new field as not nullable in the DB.  So, I had to add a new PK field that I could use. So I added an Id field for the entity along with my own field.\npublic class ApplicationUserRole<TKey> : IdentityUserRole<TKey> where TKey : IEquatable<TKey>\n{\n    public virtual int Id { get; set;  }\n    public virtual int? SiteId { get; set; }\n}\nNext, I updated my model definition\nbuilder.Entity<ApplicationUserRole<int>>(entity =>\n{\n    entity.HasKey(x => x.Id);\n    entity.HasIndex(x => new { x.RoleId, x.UserId, x.SiteId }).IsUnique(true);\n});\nEven adding an AlternateKey manually would mark the SiteId field as not nullable in the DB.  So I opted to use an index to enforce uniqueness. Once I updated my UserStore and UserManager classes to take into account the SiteId (optionally), it works. \nPerhaps if the entity (IdentityUserRole) had the PK as a unique Id and a AK or IX to enforce the uniqueness in the base class should be the way to go as the default. Then it is easier to extend. \n. I'll post what I did to extend this tomorrow (don't have access to my code right now). Don't let me forget if you don't get a reply tomorrow. \nRoy. ",
    "joshgarwood": "Is this still not finished?  Which is to say, are we not able to use signInManager if we're using JwtAuthentication?  I'm using .Net Core and jwt tokens, but would also like to leverage signInManager... is this possible yet?  Or is there another recommendation you could make?\n. ",
    "SychevIgor": "Looks like somebody already propose this changes https://github.com/aspnet/Identity/pull/643 and I hope that team will get it to a project.\n. ",
    "tstar": "I'm all realized in the UserStore or RoleStore without store by override methods like Task FindByNameAsync(string userName).\n. ",
    "RehanSaeed": "I'm still unclear on the recommended approach. One use case for IHttpContextAccessor is the command pattern for controller actions e.g. \n```\npublic class FooCommand : ICommand\n{\n    private IHttpContextAccessor httpContextAccessor;\npublic FooCommand(IHttpContextAccessor httpContextAccessor)\n{\n    this.httpContextAccessor = httpContextAccessor;\n}\n\npublic IActionResult Execute(string param1, string param2)\n{\n    // Use this.httpContextAccessor.HttpContext\n}\n\n}\npublic class FooController : Controller\n{\n    public FooCommand fooCommand;\npublic FooController(FooCommand fooCommand) { this.fooCommand = fooCommand; }\n\npublic IActionResult Foo(string param1, string param2)\n{\n    return this.fooCommand.Execute(param1, param2);\n}\n\n}\n```\nThe alternative approach is to pass the HttpContext around all over the place which can get a bit ugly if you have a few parameters, in addition to a HttpContext  to pass (You could argue, that these should be turned into a class) e.g.\n```\npublic class FooCommand : ICommand\n{\n    public IActionResult Execute(HttpContext httpContext, string param1, string param2)\n    {\n        // Use httpContext\n    }\n}\npublic class FooController : Controller\n{\n    public FooCommand fooCommand;\npublic FooController(FooCommand fooCommand) { this.fooCommand = fooCommand; }\n\npublic IActionResult Foo(string param1, string param2)\n{\n    return this.fooCommand.Execute(this.HttpContext, param1, param2);\n}\n\n}\n``\n. What is the point ofIOptions<>? I fully expected the reason for it's existence being the reloading ability. Why wasIOptionsSnapshot<>created instead and what use isIOptions<>` anymore? Why not just register the options type directly?. ",
    "adrianhara": "Not sure I understand what you mean. I add the Claims when the user registers and they get saved to the DB. Later (meaning maybe much later, e.g. days) the user logs in: at this point I don't have the claims to add, they are already saved in the DB, I just have the user credentials which I use to call the SignInAsync() method.\nWhat I was wondering is if the framework should populate the Claims on the CurrentPrincipal itself so that I don't have to hit the DB again, as this seems to happen automatically on subsequent requests after the user is signed in.\n. ",
    "Derrick-": "@rustd  Here's a example that worked for me to solve a similar problem.\nI'm using the following in the controllers OnActionExecuting override. Request.IsAuthenticated is false before this, and true after.\nThis excerpt from that function logs in the user after querying the user table for a unique key:\n```\n                        var authuser = UserManager.Users.SingleOrDefault(m => m.PersonNo == personno);\n                        if (authuser != null)\n                        {\n                            SignInManager.SignIn(authuser, true, true);\n                        var newPrincipal = new UserWrapperPrincipal(HttpContext, authuser, new UserWrapperIdentity(authuser));\n                        HttpContext.User = newPrincipal;\n                    }\n\n```\nNeed these two classes:\n```\n    public class UserWrapperIdentity : System.Security.Principal.GenericIdentity\n    {\n        public UserWrapperIdentity(ApplicationUser authuser) : base(authuser.UserName)\n        {\n            List claims = new List{\n                new Claim(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\", authuser.UserName),\n                new Claim(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\", authuser.Id)\n            };\n            AddClaims(claims);\n        }\n}\n\npublic class UserWrapperPrincipal : System.Security.Principal.IPrincipal\n{\n    private readonly ApplicationUser _user;\n    private readonly System.Security.Principal.IIdentity _identity;\n    private readonly HttpContextBase context;\n\n    public UserWrapperPrincipal(HttpContextBase context, ApplicationUser user, System.Security.Principal.IIdentity identity)\n    {\n        _user = user;\n        _identity = identity;\n        this.context = context;\n    }\n\n    private IList<string> RoleNames\n    {\n        get { return context.GetOwinContext().GetUserManager<ApplicationUserManager>().GetRoles(_user.Id).Select(role => role.ToString()).ToList(); }\n    }\n\n    public System.Security.Principal.IIdentity Identity { get { return _identity; } }\n\n    public bool IsInRole(string role) { return RoleNames.Contains(role); }\n\n}\n\n```\n. ",
    "pettys": "@HaoK I realize it's an old thread, so if you don't respond, that's fine. Why do you feel it's \"a bit weird\" to want the ClaimsPrincipal updated after login? I understand from a server perspective there's nothing really to authenticate, but in the context of a SPA, a browser might need information about the claims of the user that just logged in for customizing the UI. Using ASP.NET Identity 1.1.0 with EF I'm finding it surprisingly difficult to get a populated Claims list.\nI'm not looking for a solution to my problem here, I'd open a new thread for that; just curious why you think it's a bit weird whereas it seems natural to me.. Thanks for the quick response. I still don't think wanting convenient access to a just-logged-in-user's claims is weird at all. Regarding httpContext.User, what was surprising to me was that User.Claims was empty right after signInManager.PasswordSignIn in both Console.WriteLines below:\n[HttpPost, AllowAnonymous]\npublic async Task<IActionResult> Login([FromBody] LoginViewModel model) {\n    var result = await _signInManager.PasswordSignInAsync(model.Username, model.Password, true, false);\n    if (result.Succeeded) {\n        Console.WriteLine(this.User.Claims); // zero!?\n        var user = await _userManager.FindByNameAsync(model.Username);\n        Console.WriteLine(user.Claims.Count); // zero!?\n    }\n    ...\n}\nNote that if I perform a log in again when I'm already logged in, both Claims collections are populated.\nDoes this seem like expected behavior for an EF-backed identity setup? If not I can consider opening a new thread.\nJason. _userManager.GetClaimsAsync(user)  -- nice! Wish I'd noticed that when I was wrestling with this issue. Big thanks for your time!!!. ",
    "AdnanCukur": "This https://github.com/aspnet/Identity/issues/658#issuecomment-161799388 helped me solve it\n. ",
    "steve-warwick": "It turns out this issue was due to not having client Id of the WebApp configured in the WebApi's \"knowClientApplications\" array property in the manifest file. This needs information needs to be documented in the other multi-tenant Azure AD samples\n. ",
    "thangchung": "@steve-warwick You are my lifesaver \ud83d\udc4d . ",
    "rishikeshjadhav": "@steve-warwick  This worked like a charm :). ",
    "yuezhongxin": "@brockallen About authenticationType ctor param, I should write what values? In CookieAuthenticationOptions type, I did not find AuthenticationType property: \n\n. @brockallen Sorry, I still can not understand what you mean, can you help me write an example code? thanks.\n. @brockallen @rustd This is the modified code:\ncs\napp.UseCookieAuthentication((cookieOptions) =>\n{\n    cookieOptions.AuthenticationScheme = \"Cookies\";\n    cookieOptions.AutomaticAuthenticate = true;\n    cookieOptions.AutomaticChallenge = true;\n    cookieOptions.LoginPath = new PathString(\"/Account/Login\");\n});\n``` cs\npublic class HomeController : Controller\n{\n    [Authorize]\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\npublic class AccountController : Controller\n{\n    public async Task Login(string returnUrl = null)\n    {\n        var userId = \"xishuai\";\n        var identity = new ClaimsIdentity(\"password\");\n        identity.AddClaim(new Claim(ClaimTypes.Name, userId));\n        await HttpContext.Authentication.SignInAsync(\"Cookies\", new ClaimsPrincipal(identity));\n        return Redirect(returnUrl);\n    }\n}\n```\nBut sometimes does not work: \n\n. @717009629 \u8fd9\u4e2a\u6d4b\u8bd5\u4ee3\u7801\u5199\u7684\u6709\u4e9b\u95ee\u9898\uff0c\u6240\u4ee5\u624d\u4f1a\u51fa\u73b0\u4e0a\u9762\u7684\u95ee\u9898\u3002\n. @MaximRouiller You can look at this reply: https://github.com/aspnet/Security/issues/624#issuecomment-170913079\n. ",
    "717009629": "\u5927\u795e\u6211\u5c31\u662f\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u8ba9\u6211\u7ed9\u4f60\u53d1\u90ae\u4ef6\u4e86 @yuezhongxin \n. @lmxin123 \nClaimsPrincipal principal = new ClaimsPrincipal(identity,CookieAuthenticationDefaults.AuthenticationScheme);\n\u4f60\u6539\u6210\u8fd9\u6837\u8bd5\u8bd5\u3002\n\u6211\u7684\u4e4b\u524d\u662f\u56e0\u4e3a\u7f51\u7ad9cookie \u7684\u539f\u56e0\uff0c\u628a\u4e4b\u524d\u5f97cookie\u6e05\u7a7a\u5c31\u6ca1\u95ee\u9898\u4e86\n. @lmxin123  \u4f60\u770b\u770b\u6211\u5199\u7684\u5427\nvar cp = new ClaimsPrincipal(new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, u.Name) }, CookieAuthenticationDefaults.AuthenticationScheme));\n            await HttpContext.Authentication.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, cp);\n\u8fd8\u6709\u4f60\u6e05\u7a7a\u4e0b cookie\u8bd5\u8bd5 \n. ```\n        app.UseCookieAuthentication(option =>\n        {\n            option.AutomaticAuthenticate = true;\n            option.AutomaticChallenge = true;\n            option.CookieHttpOnly = true;\n            option.LoginPath = \"/admin/login\";\n        option.AuthenticationScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n    });\n\n```\n@lmxin123\n. ",
    "lmxin123": "@717009629 \u6211\u4e5f\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u95ee\u4f60\u662f\u600e\u4e48\u89e3\u51b3\u7684\uff0c\u9ebb\u70e6\u53d1\u6211\u90ae\u7bb1\u4e00\u4e0b 409001887@qq.com \n. @yuezhongxin \u8bf7\u95ee\u4e0a\u9762\u7684\u4ee3\u7801\u54ea\u91cc\u5199\u7684\u6709\u95ee\u9898\u3002\u8fd8\u6709\u4e0b\u9762\u662f\u6211\u7684\u4ee3\u7801\uff0c\u5e2e\u5fd9\u770b\u4e0b\u54ea\u91cc\u6709\u95ee\u9898\uff0c\u8c22\u8c22\u3002\n`  app.UseCookieAuthentication(options =>\n            {\n                options.AuthenticationScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                options.LoginPath = new PathString(\"/user/login\");\n                options.AutomaticAuthenticate = true;\n                options.AutomaticChallenge = true;\n                options.CookieHttpOnly = true;\n            });\npublic async Task Test()\n        {\n            List claims = new List();\n            claims.Add(new Claim(\"Name\", \"TestName\", ClaimValueTypes.String));\n            claims.Add(new Claim(ClaimTypes.Name, \"TestName\", ClaimValueTypes.String));\n            ClaimsIdentity identity = new ClaimsIdentity(claims, IdentityCookieOptions.ApplicationCookieAuthenticationType, \"Name\", ClaimTypes.Role);\n            ClaimsPrincipal principal = new ClaimsPrincipal(identity);\n            HttpContext.Authentication.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);\nreturn view();\n} \n`\n. @717009629 ClaimsPrincipal \u5e76\u6ca1\u6709\u4e24\u4e2a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\u3002\u4f46\u662f\u6211\u4f7f\u7528\u7cfb\u7edf\u81ea\u5e26\u7684signInManager.PasswordSignInAsync(model.UserName, model.Password, model.RememberMe, false);\u662f\u6210\u529f\u7684\u3002\u81ea\u5b9a\u4e49\u7684\u5c31\u4e00\u76f4\u4e0d\u6210\u529f\n. @717009629 \u6211\u590d\u5236\u4f60\u7684\u4ee3\u7801\uff0c\u4e5f\u6e05\u7a7a\u4e86cookie\uff0c\u8c03\u8bd5\u662f\u53ef\u4ee5\u901a\u8fc7\uff0c\u6ca1\u62a5\u4efb\u4f55\u5f02\u5e38\uff0c\u4f46\u662fcookie\u91cc\u9762\u5e76\u6ca1\u6709\u4fdd\u5b58\u503c\uff0c\u975e\u5e38\u5947\u602a\u3002\u8bf7\u95ee\u4e0b\u5728 Setup\u91cc\u9762\u4f60\u662f\u600e\u4e48\u914d\u7f6e\u7684\uff0c\u8fd9\u4e2a\u95ee\u9898\u803d\u8bef\u4e86\u592a\u591a\u65f6\u95f4\u4e86\uff0c\u975e\u5e38\u6025\u7740\u3002 \n. ",
    "moozzyk": "@divega @natemcmaster :clap:\n. ",
    "tessSnap": "Found the solution . The error was a result of mapping the ApplicationUser class to entity tyoe Users as well as having a separate Users entity . After deleting the Users entity everything now works fine .\n. ",
    "lasrol": "I get the stackoverflow post was a bit confusing, i did try several things to make it work. I have reproduced the issue in this repo https://github.com/lasrol/EmptyDB/ \n. I am sorry, it was a big mistake on my part and i cannot belive i didn't see it! I was not passing in the correct variable to ResetPassword API. Sorry to take up your time.\n. ",
    "danroth27": "@divega @HaoK Microsoft Customer Support Services reported that customers are having issues setting up cookie sharing and could use a fully functional sample. How soon can we get the sample updated so that we can link to it from the docs?\n. https://github.com/aspnet/Docs/issues/1162\n. @rowanmiller @divega \n. Opened https://github.com/aspnet/Docs/issues/1210 to track documenting the limitations of Identity schema modifications when targeting SQLite.\n. @barrytang @sayedihashimi @rowanmiller This isn't an identity issue. You need to run a migration to get the database created. Hence the big blue button.\nAdmittedly the current experience isn't great. In the past we created the database on first run, which had it's own issues. Ideas on how to improve this?\n. Have we considered just creating the database on project creation?\n. No milestone?. @javiercn . Right, I believe you can implement an IUserClaimsPrincipalFactory that provides an attribute based model, but the idea here is that it would be nice if we provided an attribute based model out of the box.. This is only about adding limited OpenID Connect support to ASP.NET Core Identity that aligns with Azure AD B2C, not adding a broader HTTP API over all of ASP.NET Core Identity. Client apps use the standard OpenID Connect and OAuth 2.0 flows for interacting with ASP.NET Core Identity.. Yup, the goal here is to build an aligned identity story across in-app, on premise and cloud scenarios. We want to make it easy to migrate from ASP.NET Core Identity to using Azure AD B2C as a cloud identity service. That said, Azure AD B2C itself produces OIDC compliant messages and we will too, so you can just as easily decide to use any OIDC provider you want (like IdentityServer4, or OpenIdDict).. Yeah, we've considered putting B2C in the name to make this clearer, but then folks might think you're actually using B2C, when you're not using B2C at all.\nWe've definitely open to refactoring things so that they are more generally usable. Can you share more details on what factoring you'd like to see?. We're open to this. We just need to come up with a name that signals alignment with B2C, but not usage of B2C. Will discuss more after BUILD is over.. > In spirit this is a closed source product. I mean - it needs to mirror the exact feature set of a closed source product. So why even open sourcing it?\nThere is still value in making the code open source. By making the code open source you can read the code, debug it, build it yourself, incorporate it in your own projects, contribute bug fixes, fill in feature gaps, etc. Not all open source projects will have or need to have an open ended community driven scope. Some projects may have a fixed scope, even a scope tied to a particular business strategy or commercial product, and that should be ok. . That's the identity code, which certainly isn't simple, but I was referring to the actual app code. The app code for most of our templates consists of a single HomeController with Index, About and Contact views. If you enable authentication today then a good chunk of the identity code gets intermingled with your app dwarfing the actual app logic. By separating out the app code into an area and wrapping it in a standard service interface your app and the identity code are decoupled to the point that you can delete the entire identity folder and replace it with an out of process identity provider of your choice.\nWe plan to simplify the identity code as well. All the code in the Extensions folders we plan to move into framework packages. We want to revisit how email confirmation and two factor auth get setup to make it simpler and purely additive (no more dummy IEmailSender and ISmsSender interfaces). We are also looking at ways to package the controllers and views so they don't have to live in the template.. We might do something targeted for the identity controllers and views (still under discussion), but if you're looking for a more general purpose solution you should check out the sweet modules framework the Orchard folks built on top of ASP.NET Core for Orchard Core: https://channel9.msdn.com/Shows/On-NET/Sbastien-Ros-Modular-ASPNET-apps. All the code for this feature will show up here in the Identity repo. We should have the first PR in place this week.\n@javiercn @Eilon . What issues specifically are you running into? We want the app decoupled from its identity concerns by default so that you can easily swap to a different identity provider.. @PinpointTownes We only plan to offer two options for authentication with individual user accounts: in-app or cloud. Having a third option would leave the user with a confusing choice. The use of OIDC for the in-app case has the benefit of allowing the user to easily swap out their identity provider and it is largely transparent to the user. . @Bartmax Whatever we do for identity for the controllers and views we will make sure it's something that anyone can do.. > This is like saying you'd force the MVC template to only run in Azure App Fabric.\nNot at all! The only thing the app is tied to is OpenID Connect (and a limited amount of OIDC at that). There is nothing in the template that is tied to B2C or any other Azure specific service. This means that you can easily switch to any OpenID Connect provider (like IdentityServer4 or OpenIdIDict). This setup allows for more choice, not less.. @brockallen All we are doing here is adding a layer to ASP.NET Core Identity that wraps it in OIDC (specifically the flows that Azure AD B2C supports). We then put all the ASP.NET Core Identity code in an area in the template and the app interacts with it through OIDC. If you later decide that you want to use a different identity provider (Azure AD B2C, IdentityServer4, OpenIdDict, etc) you simply delete the entire area folder and configure the app's OIDC options to point at the identity provider of your choice. You can see this in action at the tail end of the Intro to ASP.NET Core 2.0 session at BUILD.\n@PinpointTownes  To be fair though, using ASP.NET Core Identity was never really simple. The AccountController alone is over 400 lines of code. And that code and the database setup is all still there, virtually unchanged. The addition of the OIDC endpoints was purely additive. We've tried to make the fact that you have a mini OIDC provider in-app as transparent as possible to the user. For many users it should be an implementation detail that we now do a standardized OIDC dance to setup the app cookie, instead of an app specific form post. If you think it's still causing unnecessary friction someplace let us know and we can try to address it.. @PericlesSouza We completely agree! This feature adds OpenID Connect support ASP.NET Core Identity in a way that aligns with Azure AD B2C, but it doesn't use or rely on or use Azure AD B2C at all. By using OpenID Connect you can then easily update your app to use any identity provider you want, including IdentityServer or OpenIdDict. You have complete control over which identity provider you use. . @mcquiggd\n\nBut, essentially as long as the actual Identity implementation retains the current level of extensibility and is self-contained without other dependencies / tied to the needs of a closed sourced SAAS interface, then I personally would be happy. I'll just create my own template and use that.\n\nYup, no extensibility was removed by adding this feature and no dependency was introduced on Azure. We are simply adding OIDC support in a way that makes it easily to migrate to our Azure identity services or any OpenID Connect provider that you want. For folks that don't want OIDC support at all you can still use ASP.NET Core Identity to do forms based cookie authentication like you always have been able to do. . We want to make the OIDC support as transparent as possible to the point where, for most users, it should be an implementation detail. We can also improve the template so that removing the OIDC stuff is more painless for folks that want that (ex. we're already in the process of removing of all the code in the temporary Extensions folders). . > It really sounds like you're trying to force people to use your OIDC server\nWe're really not trying to force anyone to do anything. We're trying to decouple apps from ASP.NET Core Identity so that you can choose whatever identity provider you want. We're doing this by wrapping ASP.NET Core Identity in standards complaint service endpoints. By decoupling identity from the app in this way you can then switch to whatever OpenID Connect provider you want whenever you want to. If you don't want the OIDC endpoints at all you can remove them, but we think most customers will want this level of flexibility.. @ketrex  I can understand how that statement was a bit confusing, so I've updated the issue description to say \"easily migrate to Azure AD B2C, or any other OpenID Connect provider\". Obviously we would love for you to use our Azure services, but there is nothing that constrains you to do so. Use whatever provider you'd like. \n. @Ponant Absolutely! You can see the template in action at the end of the Introducing ASP.NET Core 2.0 BUILD talk, but we will work on putting together a more complete walkthrough in the weeks ahead as the template code settles.. @Ponant Yup, totally agree. I'll shoot for getting something out by early June.. The initial code for this feature is now checked in, so I'm going to go ahead and close this issue. However, please feel free to continue to comment if you have further questions. Even better, give the ASP.NET Core 2.0 Preview 1 bits a spin and let us know what you think!. @PericlesSouza It certainly wasn't the intent to ignore any feedback. We've been monitoring this issue closely and I've opened the following issues to track the feedback we've heard. If I missed something please do let me know:\n- Consider renaming the packages to make clear the alignment with Azure AD B2C. We are open to this, but we want to avoid causing confusion where people think these components have a dependency on B2C, when they don't (https://github.com/aspnet/Identity/issues/1198)\n- Reduce the complexity of the template additions that support OIDC as much as possible (https://github.com/aspnet/Security/issues/1212, https://github.com/aspnet/Identity/issues/1199, https://github.com/aspnet/Identity/issues/1201)\n- Consider adding a template option that only adds cookie auth without the OIDC pieces (https://github.com/dotnet/templating/issues/800)\n- Provide a way to ship controllers and views as a binary/package (https://github.com/aspnet/Home/issues/2030)\nYour specific feedback has been about not forcing folks to use Azure AD B2C, which this feature does not do. It sounds like you are particularly interested in preserving choice of identity provider, which is exactly what this feature is about. This feature decouples your app from ASP.NET Core Identity making it easy to switch to IdentityServer, OpenIdDict or any OIDC provider you want.\n. @luisgizirian Unfortunately, I don't believe we have any new plans around multitenancy. However, the Orchard folks have been hard at work on Orchard Core and they have multitenancy support built-in.. @Bartmax It's certainly not impossible. If it helps, take a look at my IdentitySwap sample that's preconfigured to allow you to swap between local ASP.NET Core Identity, Azure AD B2C, and IdentityServer4 for sign in by changing a single line of code. This is the same demo app I used at BUILD. There's certainly plenty of room for improvement (it's only preview1), but hopefully it gives the idea of what we're trying to enable.\nI can tell your frustrated (sounds like there's some history here), but if you'd be willing to share where you ran into issues I'd love to hear what they were. You're probably one of the first people to try out the new templates, and we greatly appreciate the early feedback.. @minhnhat2807 Please note that we recently made a decision to postpone the identity as a service work until after 2.0 so that it has more time to bake. \nThe configuration document is provided by the IdentityServiceConfigurationController in the template. See https://github.com/aspnet/Identity/blob/dev/samples/IdentityOIDCWebApplicationSample/Areas/IdentityService/Controllers/IdentityServiceConfigurationController.cs#L23 for the latest implementation of this endpoint. Note that the route for this endpoint is [HttpGet(\"tfp/IdentityService/signinsignup/v2.0/.well-known/openid-configuration\")] to match the behavior of Azure AD B2C.. It's being actively developed, but when it will ship is still TBD.. There's no beta to test yet. It's still very much a work in progress.. @Eilon @javiercn I think we need this. Otherwise you have to a do a bunch of work to setup the JwtBearer options in an environment independent way.. Fixes #1211 . Fixes https://github.com/aspnet/Identity/issues/1205. @HaoK Let's hold off on this until we've had a chance to more fully discuss it. I'd like to avoid baking in any identity service concepts to ASP.NET Core Identity that might impede the development of 3rd party identity service implementations.\n@PinpointTownes If you're seeing issues with the local app insights integration in VS or you have general feedback on the feature, then please file an issue in the https://github.com/aspnet/azureintegration repo so we can discuss. The VS integration is intended to aid with local debugging, but if it's causing harm or irritation then we should talk about whether it's the right default behavior.. @davidfowl . @Eilon please assign.. @blowdart @Eilon @DamianEdwards \n\nwe can nuke all of the entities on TUser/TRole except for TKey... That cleans things up quite a bit\n\nCould you please clarify a bit more what this means? \n. Ah, I was curious how those extra generic parameters got used since they don't appear on any of the type members. When you say they are currently needed for the navigation properties, what does that mean? Aren't navigation properties typically represented as properties on the type? Does EF Core do something special with the extra generic parameters in this case? Or does Identity?\nRegardless, not having those extra generic parameters sounds like a good change.. @hikalkan It was an effort to build an identity service component that can operate as an OpenID Connect provider, but it has never shipped and we are looking at switching to use IdentityServer instead.. This is an appropriate use of an HTML helper, so closing.. You have to add scaffolding as a DotNetCliToolReference. If you run the Identity scaffolder from VS it will take care of that for you. In Preview1 we didn't have the VS experience so the command-line was your only option, but our main focus is on the VS experience.. To see how to add the DotNetCliToolReference, add the following item in your project file:\nxml\n<DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.3\" />\n. @ryanbrandenburg How is this different from #1834?. Why are there two Certificates sections here?. ",
    "jvelezc": "Please add this pull request !https://github.com/aspnet/Identity/pull/643  I just went through the code and this is perfect for what I need.\nIn addition to my initial problem because ClaimsIdentity is hard coded I cannot implement an IObjectState repository pattern because I have to mark the class with IObjectState in the concrete class interface. Either way the pull request above fixes all my issues. \n. yes I agree that you can use that. Is there any reason why it did not load with my query ?this.Users.Include(roles=>roles.Roles).Include(y=>y.Claims).\n. Thank I will put a PR 610. I will work on it this weekend.\n. I wrote an article with the latest version of dot net and asp net identity showing how to achieve everything you mentioned above.\nhttps://medium.com/@goodealsnow/asp-net-core-identity-3-0-6018fc151b4#.qs0fs4t8q\n. Entity framework will handle everything on the background. So no you should not get any issues. If you do hit me up!\n. Well the good news is that:https://github.com/aspnet/Identity/commit/104f2161915b1a4e7d0013f3de3b8d9a212a5d27#diff-c72544a50eacab8ada8ca53f53daee15 once that is merge into the main branch you can just follow my article and do the same for the other classes.\n. Yes that way you get the version that has that code in it. Normally the master branch unless you are a crazy maverick and do nightly builds for production.\n. Below are my compiler issues that are preventing me to fiddle  with the commit above. This is literally just downloading from git, cloning and trying to launch.\n\n\n\n. I removed the sample projects and I am able to compile the project. Thanks.\n. One use is to prevent null exceptions which i have gotten when i don't initialize them.\n. Please read this article I wrote : https://medium.com/@goodealsnow/asp-net-core-identity-3-0-6018fc151b4#.pvc8b09bd it explains how to easily change things around for you db team. Why did they choose string guid? Because it was an easy way to ensure uniqueness.\n. Introduce messaging . The idea is that all your \"sub apps\" communicate with a middle layer (web api) asking if that user has access. Then what you get in return are their claims. With those claims you can make decisions. \n\n.  I was wrong.  In the _ViewImports it was making a reference to the old location that the compiler could not catch until and it gave me a hint during runtime error. \n. thanks for helping even thought it wasnt the right github project!. ",
    "Sally-Xu": "I found Eager loading with \"Include\" is already implemented in EF7. If UserStore.FindByXXX function use \"include(u=>u.Roles) to get the roles back, this problem can be solved right now.\n. ",
    "Moses-Bassey": "This can be really frustrating, what solutions do the have to help resolve this issue. Working on asp.net core and now i need to use thier useridentity but the package is not installing. is there any solution?. ",
    "yellareddy-allcloud": "I started to develop an Web Core Application and i am trying to Install microsoft.Aspnet.Diagnostics package for exception handling, but i am unable to install this pickage. . ",
    "kinshines": "thank you @MaximRouiller ,I think it is exactly the missing feature for persisting login information in ASP.NET Identity,and it is not simply a question which can be answered in www.stackoverflow.com.\n. ",
    "Eneuman": "If I'm not misstaken, getting a claim of the current logged in user should be as easy as this:\nvar email = User.FindFirst(\u201cemail\u201d);\nwhere \"email\" is the claim you want to get.\n. Start SQL Profiler and see what SQL is created.\nI'm gonna give it a try in my end as well\n. ",
    "jbomhold3": "This is a BAD BAD BAD idea but @weitzhandler You could.... simply add a field to the database to store a copy of the password in however you want it to be. When its created/updated without changes to the identity model at all...  Or better yet explain to the customer that... While his/her company's data in this system does not need to be secured some reason. People often use the same password for other things and his/her practice is compromising them as well. \n\n. ",
    "DaisyDave": "I just created an ASP.NET v5 project using the ASP.NETv5 Web Application template with Individual User Accounts authentication. I made no code changes, just compiled and ran the project. \nThe only occurance of AddIdentity is in Startup.cs and looks like this:\n// Add Identity services to the services container.\nservices.AddIdentity<ApplicationUser, IdentityRole>() .AddEntityFrameworkStores<ApplicationDbContext>()\n.AddDefaultTokenProviders();\n. Hi I'm new to GitHub and am not sure why/how I closed this item. I'm reopening it. If it should be cleased will someong please correct me nicely :-)\n. ",
    "halilkoca": "Which method connect to ApplicationUserRole table ?\n. ",
    "cjpomer": "This happens every single migration.\n. ",
    "flagbug": "I'm seeing this behavior too. I wonder if that's the fault of EF 7, so maybe the bug should be raised there?\n. :hankey: Seems like the Github online editor change the last line, let me know if that's a huge issue\n. ",
    "techyian": "Hey @rustd,\nHelpController.cs\n```\n[AllowAnonymous]\npublic class HelpController : BaseController\n{\n     private readonly UserManager _userManager;\n public HelpController(UserManager<ApplicationUser> userManager)\n {\n        _userManager = userManager;           \n }\n\n public IActionResult GettingStarted()\n {\n        return View();\n }\n\n}\n```\nUserImage.cs\n```\npublic class UserImage\n{\n        [Key]\n        [DatabaseGeneratedAttribute(DatabaseGeneratedOption.Identity)]\n        public int UserImageId { get; set; }\n    public string DownloadUrl { get; set; }\n\n    public bool Deleted { get; set; }\n\n    public string ApplicationUser_Id { get; set; }\n\n    public virtual ApplicationUser User { get; set; }\n\n    public DateTime CreatedDate { get; set; }\n\n    public UserImage()\n    {\n        CreatedDate = DateTime.Now;\n    }\n\n}\n```\nIdentityModels.cs\n```\npublic class ApplicationUser : IdentityUser\n{\n    //Other properties removed for simplicity\npublic int? UserImageId { get; set; }\n\npublic virtual UserImage ProfileImg { get; set; }\n\n}\npublic class ApplicationDbContext : IdentityDbContext\n{\n//Other relations removed for simplicity\nbuilder.Entity()\n       .Property(i => i.UserImageId)\n       .IsRequired();\nbuilder.Entity()\n      .HasOne(u => u.User)\n      .WithOne(u => u.ProfileImg);\n}\n```\n_Layout.cshtml\n```\n@using System.Security.Claims\n@inject UserManager UserManager\n@{ \n    ApplicationUser user = new ApplicationUser();\nuser = User.Identity.IsAuthenticated ? await    UserManager.FindByNameAsync(User.Identity.Name) : new ApplicationUser();\n\n}\n@if(User.Identity.IsAuthenticated)\n{ \n    //Other parts of view removed. \n    //This is the code that is causing me problems\n    @if (user.ProfileImg != null && !string.IsNullOrEmpty(user.ProfileImg.DownloadUrl))\n    {\n        \n    }\n   else\n   {\n        \n   }\n}\n```\nI've stripped a lot of stuff out just so you can easily see what I'm trying to do.\nWithin _Layout.cshtml, if UserImage has a record for the logged in user and the [AllowAnonymous] attribute is attached to the HelpController, user.ProfileImg is null. However, if I change the attribute to [Authorize], user.ProfileImg is populated correctly.\nCan you see if there's anything I'm doing wrong here, I don't understand why it would only be populated when an Authorize attribute is attached to the controller.\nThanks,\nIan.\n. ",
    "tedd": "I have deleted the code as I was rewriting it to work (ended up with manual inserts directly into the table). But I have one piece of code that still doesn't work. This is running on the vanilla ASP.Net Web project with Areas added.\nI am using MSSQL as db storage: data source=10.0.0.60;initial catalog=TheDb;persist security info=True;user id=TheUser;password=ThePassword;MultipleActiveResultSets=True;App=EntityFramework\n```\n[Area(\"Import\")]\n[Route(\"Import/[controller]\")]\npublic class OneTimeImportController : Controller\n{\n    private readonly RoleManager _roleManager;\npublic OneTimeImportController(RoleManager<IdentityRole> roleManager) {\n    _roleManager = roleManager;\n}\n\n[Route(\"Run\")]\n[HttpGet]\npublic async Task<IActionResult> Run()\n{\n    Execute(_roleManager);\n    return View();\n}\n\npublic async void Execute(RoleManager<IdentityRole> roleManager)\n{\n    var roles = new Dictionary<Enums.UserType, string>();\n    roles.Add(UserType.User, \"User\");\n    roles.Add(UserType.ProjectAdmin, \"ProjectAdmin\");\n    roles.Add(UserType.Admin, \"Admin\");\n    foreach (var role in roles.Values)\n    {\n        if (!await roleManager.RoleExistsAsync(role))\n            await roleManager.CreateAsync(new IdentityRole(role));\n    }\n}\n\n}\n```\nHope this helps.\n. Changing it to this makes it work:\nif (!roleManager.RoleExistsAsync(role).Result)\n    roleManager.CreateAsync(new IdentityRole(role)).Wait();\nSo it may be related to code not blocking on \"async void\" and continuing to do other stuff / dispose of the object?\n. ",
    "JGrzybowski": "user0Pass\n. Also, there should be a way to require nonletter character. I think it was possible in previous version of framework.\n. ",
    "nrkarthick": "@Fosol , Thank u.. But May I ask u two questions :\n1. Will you help me to figure out this issue ?\n2. When will EF 7 support Oracle ?\n. @Fosol , U r absolutely right.. I too worked it out already.. Only thing I cant figure out is that applicationUser and role in identity 3.0.. but the following url throw some light and i will test and come back here... \nsharing link\nhttp://stackoverflow.com/questions/29289731/example-of-using-asp-net-5-mvc-6-with-identity-and-ef-6\n. ",
    "ryanschuler": "I am currently attempting to run the project with the CoreCLR instead of Mono but ran into a completely separate issue.\nSystem.PlatformNotSupportedException: No RSA implementation compatible with your configuration can be found.\nFound in AspNet.Security.OpenIdConnect.Server\n```\ninternal static RSA GenerateKey(IRuntimeEnvironment environment) {\n    if (string.Equals(environment.OperatingSystem, \"Windows\", StringComparison.OrdinalIgnoreCase)) {\nif DNXCORE50\n    // On CoreCLR, use RSACng.\n    return new RSACng(2048);\n\nelse\n    // On desktop CLR, use RSACryptoServiceProvider.\n    return new RSACryptoServiceProvider(2048);\n\nendif\n}\n\n// When the runtime is identified as Mono, use RSACryptoServiceProvider independently of the operating system.\nif (string.Equals(environment.RuntimeType, \"Mono\", StringComparison.OrdinalIgnoreCase)) {\n    return new RSACryptoServiceProvider(2048);\n}\n\nif DNXCORE50\n// On Linux and Darwin, use RSAOpenSsl when running on CoreCLR.\nif (string.Equals(environment.OperatingSystem, \"Linux\", StringComparison.OrdinalIgnoreCase) ||\n    string.Equals(environment.OperatingSystem, \"Darwin\", StringComparison.OrdinalIgnoreCase)) {\n    return new RSAOpenSsl(2048);\n}\n\nendif\n// If no appropriate implementation can be found, throw an exception.\nthrow new PlatformNotSupportedException(\"No RSA implementation compatible with your configuration can be found.\");\n\n}\n```\nIt throws the PlatformNotSupportedException when attempting to do dnx run.  I had it log my environment.OperatingSystem and it turns out it is 'ubuntu' rather than 'linux'.  I will cross post this issue to AspNet.Security.OpenIdConnect.Server repo. \nWill keep updated on status.\n. The AspNet.Security.OpenIdConnect.Server guys fixed their bug with the CoreCLR, however now that I can run it with CoreCLR I still get the same exception.  Here's the log now that I switched the project over to postgresql\ninfo: Microsoft.Data.Entity.Storage.Internal.RelationalCommandBuilderFactory[1]\n      Executed DbCommand (3ms) [Parameters=[@__loginProvider_0='?', @__providerKey_1='?'], CommandType='Text', CommandTimeout='30']\n      SELECT \"l\".\"LoginProvider\", \"l\".\"ProviderKey\", \"l\".\"ProviderDisplayName\", \"l\".\"UserId\"\n      FROM \"AspNetUserLogins\" AS \"l\"\n      WHERE (\"l\".\"LoginProvider\" = @__loginProvider_0) AND (\"l\".\"ProviderKey\" = @__providerKey_1)\n      LIMIT 1\ninfo: Microsoft.Data.Entity.Storage.Internal.RelationalCommandBuilderFactory[1]\n      Executed DbCommand (1ms) [Parameters=[@__userLogin_UserId_0='?'], CommandType='Text', CommandTimeout='30']\n      SELECT \"u\".\"Id\", \"u\".\"AccessFailedCount\", \"u\".\"ConcurrencyStamp\", \"u\".\"Email\", \"u\".\"EmailConfirmed\", \"u\".\"GivenName\", \"u\".\"LockoutEnabled\", \"u\".\"LockoutEnd\", \"u\".\"NormalizedEmail\", \"u\".\"NormalizedUserName\", \"u\".\"PasswordHash\", \"u\".\"PhoneNumber\", \"u\".\"PhoneNumberConfirmed\", \"u\".\"SecurityStamp\", \"u\".\"TwoFactorEnabled\", \"u\".\"UserName\"\n      FROM \"AspNetUsers\" AS \"u\"\n      WHERE \"u\".\"Id\" = @__userLogin_UserId_0\n      LIMIT 1\ninfo: Microsoft.AspNet.Authentication.Cookies.CookieAuthenticationMiddleware[4]\n      AuthenticationScheme: Microsoft.AspNet.Identity.External signed out.\ninfo: Microsoft.Data.Entity.Storage.Internal.RelationalCommandBuilderFactory[1]\n      Executed DbCommand (1ms) [Parameters=[@__userId_1='?'], CommandType='Text', CommandTimeout='30']\n      SELECT \"userRole\".\"RoleId\"\n      FROM \"AspNetUserRoles\" AS \"userRole\"\n      WHERE \"userRole\".\"UserId\" = @__userId_1\nfail: Microsoft.Data.Entity.Query.Internal.NpgsqlQueryCompilationContextFactory[1]\n      An exception occurred in the database while iterating the results of a query.\n      System.NotSupportedException: A second operation started on this context before a previous operation completed. Any instance members are not guaranteed to be thread safe.\n        at Microsoft.Data.Entity.Internal.ConcurrencyDetector.EnterCriticalSection () [0x00000] in <filename unknown>:0\n        at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider+ExceptionInterceptor`1+EnumeratorExceptionInterceptor[Microsoft.AspNet.Identity.EntityFramework.IdentityRole].MoveNext () [0x00000] in <filename unknown>:0\n. I was not ever able to solve it, I switched over to an Azure Windows box because the project was time sensitive.\n. ",
    "mikary": "The guard is effectively a top level reentry check that doesn't do any kind of synchronization. Having a race condition would imply some kind of concurrency on the same context which is exactly what this check is designed to detect.\nIf you can provide a stand-alone reproduction of the issue it would be very helpful, but there are a couple common mistakes that can result in this kind of error:\n- Missing the await keyword on an async call\n- Reusing the same DbContext instance on two different threads (This can easily happen if the DbContext is saved to a static field or referenced by a singleton instance)\n. I attempted to reproduce the issue based on the provided description, but it does not appear to be reproducible at this point so I will close the issue.\nIf you are still encountering this problem and can provide us with code and steps to reliably reproduce the problem, please feel free to respond and reopen this issue.\n. ",
    "kmitchelldavis": "@ryanschuler Were you ever able to resolve this? Getting the same problem.  Latest builds, Linux, Sqlite, OpenIddict\n. ",
    "JeanVanDenderFlume": "I tried THIS SeedData example. \nhttp://stackoverflow.com/questions/34343599/how-to-seed-users-and-roles-with-code-first-migration-using-identity-asp-net-mvc\nand i am very sure, with CORE 1.1.1 \nIdentity framework important things dont work !!\nusers relation Role does not work\nUsermanager save /assign a role to a user does not work. <= with this i could miss, but i think\ni initiated a new instance of Usermanager correctly.\nafter the db is created by Apply migrations, then on a second run i start SeedData.\nI am very sure:\n1) Sample username was saved correctly\n2) 8 Rolenames were saved correctly\n3) the Relation user to the roles were NOT saved even.\nproblem the User <-> Role table was not saved, apparently due NULL in field \"NormalizedRoleName\"\nI did create the asp.net web application in YeoMan on Ubuntu, and then i ftp downloaded it to Windows.\nCoujld i give somebody the whole sample project.\nI did try this of course on MS SQL On Windows\nand on My SQL with     \nOn Windows i used the latst CORE version. current.\nI think this is preview 3 \nD:\\Projects\\MembersRating\\webtest>dotnet --info\n.NET Command Line Tools (1.0.1)\nProduct Information:\n Version:            1.0.1\n Commit SHA-1 hash:  005db40cd1\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.1\nD:\\Projects\\MembersRating\\webtest>\n=====\nThis was my solution temporarily.\n1) Save a new  Normalized Rolename  explicit with toUpper() \n2) Make use of UserStore instead of UserManager to assign a given role\n3)  use  ToUpper  when assigning a role to a user this way.\nuserStore.AddToRoleAsync(user, role.ToUpper());\npublic static async Task InitializeAsync(IServiceProvider services)\n// JVD 2017-03-28, Temporarily \n// dont use _userManager to assign/save roles to user. Use userStore to save anassigned Role\n// See https://github.com/aspnet/Identity/issues/716 \nstring[] roles = new string[] {\n            \"Buyer\",\n            \"Owner\",\n            \"Administrator\",\n            \"Manager\",\n            \"Editor\",         \n            \"Business\",\n            \"Seller\",\n            \"Subscriber\"\n            };\n        var roleStore = new RoleStore<IdentityRole>(context);\n        foreach (string role in roles)\n        {\n            if (!context.Roles.Any(r => r.Name == role))\n            {\n                var nr = new IdentityRole(role);\n                nr.NormalizedName = role.ToUpper();\n                await roleStore.CreateAsync(nr);\n            }\n        }\n\n}\npublic static async Task AssignRolesAsync(IServiceProvider services, string email, string[] roles)\n        {\n            ApplicationDbContext context = services.GetService(typeof(ApplicationDbContext)) as ApplicationDbContext;\n        var userStore = new UserStore<ApplicationUser>(context);\n        var passwordHasher = new PasswordHasher<ApplicationUser>();\n        var itemsValidators = new List<UserValidator<ApplicationUser>>();\n        itemsValidators.Add(new UserValidator<ApplicationUser>());\n        var passwordValidators = new List<PasswordValidator<ApplicationUser>>();\n        passwordValidators.Add(new PasswordValidator<ApplicationUser>());\n        var keyNormalizer = new LookupNormalizer();\n\n        var errors = new IdentityErrorDescriber();\n        //LoggerFactory logger = new LoggerFactory<ApplicationUserManager<ApplicationUser>>();\n\n\n\n\n\n        ApplicationUser user = await _userManager.FindByEmailAsync(email);\n\n        await userStore.FindByEmailAsync(email);\n\n        foreach( var role in roles){\n            //_userManager.AddToRoleAsync(user, role.ToUpper() ); \n            //JVD 2017-03-28, Temporarily dont use _userManager to assign/save roles to user. Use userStore to save anassigned Role\n            // See https://github.com/aspnet/Identity/issues/716 \n            await userStore.AddToRoleAsync(user, role.ToUpper());\n        }\n        await context.SaveChangesAsync();\n\n        // var result = await _userManager.AddToRolesAsync(user, roles );\n        return result;\n\n=============\nTarget framework : .NetCoreApp 1.0\nD:\\Projects\\MembersRating\\webtest>dotnet --info\n.NET Command Line Tools (1.0.1)\nProduct Information:\n Version:            1.0.1\n Commit SHA-1 hash:  005db40cd1\nRuntime Environment:\n OS Name:     Windows\n OS Version:  6.1.7601\n OS Platform: Windows\n RID:         win7-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.1\n=======\n\n\n\n\n\n\n\n\n\n\n\n\n\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"1.0.0-msbuild3-final\" PrivateAssets=\"All\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"1.0.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"1.0.1\" />\n<PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"1.0.1\" />\n\n\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"1.0.1\" />\n<PackageReference Include=\"Microsoft.Extensions.Configuration.CommandLine\" Version=\"1.0.1\" />\n\n. ",
    "flensrocker": "Ok, waiting for the next version. :)\nI successfully use IdentityUser and IdentityRole with Int64 keys. Just found these two functions which lacks support for custom key types. Most of the time I need FindByNameAsync.\nThanks!\n. Ok, waiting for the next version. :)\nI successfully use IdentityUser and IdentityRole with Int64 keys. Just found these two functions which lacks support for custom key types. Most of the time I need FindByNameAsync.\nThanks!\n. ",
    "PMExtra": "What? I know CanSignIn()\nbut the method could only return a bool value.\nand finally I will get the SignInResult.NotAllow.\nI want to custom the SignInResult with my check.\n. @rustd Could you review the issue\uff1f\n. I am still beset by this problem...\n. ok, I got it.\nBut, there is still a problem about the project template in Visual Studio (2015 Update1) : \nif I set RequireConfirmedEmail = true in SignInOptions,\nWhen I register a new account, I will login success. Then, if I logout, I couldn't login again.\n. I just got, my thoughts may be wrong.\nI want to declare a class \" AppSignInResult : SignInResult \" ,\nbut I can't override a method with different return type.\nSo, how to solve my needs like the example?\n. ...finally, I copy the source from SignInManager and custom a parallel AppSignInManager class without inherit... I solve it...\n. ",
    "kjanshair": "@SharePointRadi the code you provided is pretty long. Can you please provide a shorter and more elaborated version of the problem? I'm searching throughout the Internet but couldn't get through yet. Thanks.\n. @divega here is my EnsureSeedData() method\n``` c#\n        public async Task EnsureSeedData()\n        {\n            if (await _userManager.FindByEmailAsync(\"someone@someone.com\") == null)\n            {\n                ApplicationUser administrator = new ApplicationUser\n                {\n                    UserName = \"someone@someone.com\",\n                    Email = \"someone@someone.com\"\n                };\n            await _roleManager.CreateAsync(new IdentityRole(\"Administrator\"));\n            await _userManager.CreateAsync(administrator, \"Password123!\");\n\n            IdentityResult result = await _userManager.AddToRoleAsync(administrator, \"Administrator\");\n        }\n    }\n\n```\nand here is my Context class\n``` c#\n    public class ApplicationDbContext : IdentityDbContext\n    {\n        public ApplicationDbContext(DbContextOptions options)\n            :base(options)\n        {\n    }\n\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n    }\n}\n\n```\n. ",
    "iberodev": "I am experiencing a similar situation where I can see when debugging that sometimes the same method \nvar userEntity = await _userManager.FindByNameAsync(username);\nis returning the user with its navigation properties and sometimes it is not. \nThanks @divega for highlighting that because that might be the reason.\nJust to clarify, it's like using lazy loading mode (even when in AspNet Core is not enabled nor supported yet as far as I know) in a way where if the userEntity (the IdentityUser instance) is doing something with the userEntity.Roles it will fetch the Roles, but if there is no explicit interaction with userEntity.Roles in the code then it's value will be null?\nThis \"magic\" has had me scratching my head for a while :)\nEspecially because I am using a javascript front-end that was relying on a JSON object userEntity with all its navigation properties, and sometimes these were null.\nI will follow your advice and use my own repositories accessing the dbContext to retrieve the User explicitly including what I need.\n. ",
    "ch-hristov": "This is a huge problem with entity framework as you literally cannot retrieve the virtual properties.. And by the way this is in direct conflict with your implementation of Entity Framework! It's absolutely NOT CLEAR what is happening!!\n. ",
    "urbanhusky": "Why is this issue closed? \nI do think it is rather ugly and unsafe (encapsulation etc.) to have to manually include required referenced entities, when they are part of the user identity. \nInstead of being able to rely on await userManager.FindByNameAsync(username) we have to wrap that in a separate service and remember that we cannot use UserManager for reading?. ",
    "Janidbest": "I have 4 related entities ( we want to leave aspnetusers table flexible for any future changes in the framework), I'm sure this will be grow more soon, having context to use to include related data always a performance constraint. The aspnet identity framework should support to include the related entities when wanted. \n. @thdotnet  do you mind elaborating on the missing important details? \nI have come across this issue today. Though it is a code first approach. As a part of our deployment plan, we are exporting the scripts from the migrations into a file and handing it over to DB admin so  this way we can prevent the application db access user will have low permissions.. ",
    "sgadoury": "Thank you for your help\n. ",
    "andrew-vandenbrink": "Could be caused by user still attached to role, any api to delete cascade?\n. No, not ef fan here so i dont touch OnModelCreating,just accidentally assign to role right after create user\n. Rc1, I'll wait for Rc2 to be released to test.\n. // <summary>\n        /// Navigation property for the roles this user belongs to.\n        /// </summary>\n        public virtual ICollection<IdentityRole> Roles { get; } = new List<IdentityRole>();\nOnce I add this to my poco object, another issue come up, it seems IdentityRole property changed from RoleId to Id. @JanEggers thanks, as you suggest it should be IdentityUserRole instead of IdentityRole\nOnce I change it to that, I can at least SignIn now.\nI still have another issue during upgrading the razor thus I can't test your case yet.... This was working in version 1, I'm not quite a fan of EF, is this caused by the same issue that you are facing now @JanEggers ?\n```\n var usersData = _userManager.Users.Include(u => u.Roles).Skip(parameter.Skip).Take(parameter.Take)\n                .ToList();\n//Microsoft.Data.Sqlite.SqliteException: 'SQLite Error 1: 'no such column: u.Roles.ApplicationUserId'.'\n```. @JanEggers I just add what @MaximBalaganskiy suggest\n\nI don't run any ef migrations and it just works. @MaximBalaganskiy I brave enough to try migration...\ndotnet ef migrations add identity2\n\ndotnet ef database update\n\n\nand.... it still not working, i still need to put the workaround in ApplicationDbContext then it works again\nI think the issue is, in this case SQLite\nand this workaround\nbuilder.Entity<ApplicationUser>().HasMany(p => p.Roles).WithOne().HasForeignKey(p => p.UserId).IsRequired();\nequals to\nmigrationBuilder.AddForeignKey(\n                name: \"FK_AspNetUserTokens_AspNetUsers_UserId\",\n                table: \"AspNetUserTokens\",\n                column: \"UserId\",\n                principalTable: \"AspNetUsers\",\n                principalColumn: \"Id\",\n                onDelete: ReferentialAction.Cascade);\nwhich not working as you can see in the screenshot... (red colored message) therefore the workaround still need to be applied. @HaoK is this workaround expected or I miss something?. He doesn't care to comment in this thread but here is his answer\n\nIn other word, the workaround is needed.. To people who say it doesn't work, it works, just read the thread properly...\nOnce you make it work, you can make a query to show users and its role\n```\nvar roles = roleManager.Roles.ToDictionary(r=>r.Id,r=>r.Name);\nvar usersWithRoles = userManager.Users.Include(u=>u.Roles).AsEnumerable().Select(u =>\n{                  \n  var obj=(JObject)JToken.FromObject(u);\n  var rolesName= string.Join(\",\",u.Roles.Select(r=>roles[r.RoleId]).ToArray());\n  obj[\"Roles\"]=rolesName;                  \n  return obj;\n } \n); \n```. Within 1 domain, imagine content management system,\nI have 2 logins, one for anonymous users and one for administrator\nAdministrator will use identity\nAnonymous users will use claims\nvalid use case?. I think I did try with changing the scheme name but it doesn't work.... Is this the reason? 30 minutes?\n\n. Testing again with rememberMe set to true \nExpired in the next 2 weeks, lets see\n\n. ok identity cookie gone after 30 minutes even rememberMe being set to true\nthis thread say something about securityStamp\nhttps://github.com/aspnet/Identity/issues/900. testing with this code\nservices.Configure<SecurityStampValidatorOptions>(options => options.ValidationInterval = TimeSpan.FromMinutes(1));. Authentication indeed gone after 1 minute! Nice new feature eh, not even in the documentation\nhttps://github.com/aspnet/Identity/issues/999\nhttps://github.com/aspnet/Identity/issues/1478\n. What is the security impact setting ValidationInterval to 2 weeks?. Is this intended feature?\nI think what people expect is that the authentication login should be as long as \n- without rememberMe set to true, when session end\n- with rememberMe set to true, default TimeSpan of cookies expired date (default 2 weeks)\nChange a user's role or remove the ability for user to login should be direct effect\nIt will be crazy that we need to wait 30 minutes\nNow I have to set it to 2 weeks, it will be even crazier otherwise my user need to re-login every 30 minutes which is not acceptable business case\nSomething is not right here.... ",
    "JunTaoLuo": "merged in https://github.com/aspnet/Identity/commit/6cc6f4d88e579e2ad5b96cfe477297a168e38ebc\n. https://github.com/aspnet/Coherence-Signed/issues/166\n. @natemcmaster I mean the default schemes https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/IdentityCookieOptions.cs#L16-L20\n. @HaoK It is added by default by CookieAuthentication at https://github.com/aspnet/Security/blob/a5b288897d2981c241133b8d37aa22136b653e3a/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationMiddleware.cs#L35 which uses the prefix defined at https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationDefaults.cs#L22\nedit: Oops seems like I forgot to write that in the issue, sorry about that.\n. No, it is expected to be .AspNetCore.Identity.Application it's just that the .AspNetCore. part is added by Cookies Middleware already.\n. ping @HaoK \n. So should we remove the sample from this repo altogether?. @HeMinzhang  \u53ef\u4ee5\u7528\u4e2d\u6587\u63cf\u8ff0\u6216\u8005\u89e3\u91cb\u4e00\u4e0b\u55ce\uff1f. Yea the TaskCache.Sources packages should be the one updated not the .csproj here.. ~~I think the mvc updates have been merged, this is unblocked.~~ Nevermind it's not yet done. Yea I was under the impression MVC was still blocked. @ryanbrandenburg @NTaylorMullen . Posthoc :shipit: . Why are we changing this? Is this change required since we updated other version numbers from 2.0.0 to 2.1.0?. I suppose there are more than just this one instance? https://github.com/aspnet/Diagnostics/blob/ec2faf55947940350e124829c9922771bdfc7793/src/Microsoft.AspNetCore.Diagnostics.Elm/Microsoft.AspNetCore.Diagnostics.Elm.csproj#L7?. Ah I see you already have a PR open there too.. @blowdart The user is wondering why you can add an IEnumberable of Claims in the IUserStore but only individual claims in IRoleStore. Not working on this at the moment. Yes since it's inconvenient otherwise when users have app.UseMiddleware(new MiddlewareOptions());. Moving options to the same namespace as UseMiddleware removes the need to add another using statement.\n. I copied this from your document. Are you sure you're not missing &nbsp;&nbsp;]</text> at the end?\n. Not sure if this is the right thing to do for tools packages. One thing to check here is whether we want to ship this \"pre-release\" package. I remember I keep getting different answers when I ask this question.. I think the last time I checked, we decided to cascade the versions but not push any new packages built to nuget, let's verify that that's still the expectation.. Which reminds me, let's check what's in the patch packages.csv, we had issues with it in the past.. Why the experimental project version prefix? I'd assume that we would never decide during a patch update to designate a pre-release package as rtm. In fact, in the past, we do not ship patch updates for pre-release packages at all.. cc @Eilon would we want to ship updates for pre-release packages in 2.0.x patches? We decided not to do this in 1.x patches.. Ah that's why you moved it here. \ud83d\udc4d . These tests are flaky, so I'm setting the LogLevel to Debug so we can get more information. https://github.com/aspnet/Identity/issues/1648. ",
    "janpieterz": "@GuardRex  It can (quite easily even) be overridden. Below does the trick. The issue (more an issue with the template and a suggestion for improvement for Identity) isn't the override, but more the fact that the default templates use an email as a username (and I think this is a very common usage pattern) and this fails when certain characters are used, for example the + (I found this out as well when testing with a + sign). The options then are to either always allow all email chars \nor have two statics strings (one with email, one with 'normal') and/or change the templates.\nservices.AddIdentity<ApplicationUser, IdentityRole>(options =>\n    {\n        //Below UserOptions is my own class\n        options.User.AllowedUserNameCharacters = UserOptions.EmailAllowedCharacters;\n    })\n. Works for me!\n. ",
    "calebnelton": "@Eilon sorry, had to learn how to squash. Hopefully I did it right.\n. ",
    "cbmek": "I'm saying var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: true);\nreturns result.Succeeded instead of result.IsLockedOut.\nBut yes, it's using IsLockedOutAsync, which is calling store.GetLockoutEnabledAsync.\n. ",
    "javiercn": "Things to pay attention to:\n- Comments (There's been a lot of copy paste, so mistakes can happen).\n- Method names\n- Null checks for arguments\n- Overload with configuration action calls parameterless overload.\n- Parameterless overload does the work and brings in direct depenendencies\n  (Like routing on MVC, for most repositories it means making sure AddOptions is called).\n. @divega @HaoK A few points.\n- We only care about configuring the services here, so the class is just an implementation detail.\n- This doesn't affect the way the user consumes the API. For them, this is just a handle over which to define/call extension methods most of the time. (See EntityFrameworkIdentityServiceCollectionExtensions).\n- There is no value in having a specific type either, as there is nothing to encapsulate (all behavior needs to be public so that we can guarantee that any user can write any extension method they want against this in the same we can (the interface enforces this)).\n- Using an interface makes it consistent with the way we do things in other parts of the stack (DataProtection, MVC, EF)\nFrom my point of view, there's not a big difference in value from having a class vs having an interface in this case, but I think that the fact that this makes it consistent across all our stack tips the balance\n. @Eilon Are you ok with this resolution?\n. It'll be preview2. @Eilon I had an idea for this actually.\nFor new projects we can have a property\n<ApiCheckVersionThreshold>\nIf the assembly we are producing has <= than the version, we don't run API check.\nOnce the Version goes higher, we run it and fail/produce warnings because there's no baseline.\nI don't like having empty baselines because it silently disables the tool.. > I thought empty baselines are fine because the tool will run, but will always pass\nThat's why it silently disables the tool. If we update the baselines when we release 2.1 then sure, but we need to do that.. FYI. We removed the code. We removed the code. We removed the code. We removed the code. We removed the code. We removed the code. We removed the code. We removed the code. Merged https://github.com/aspnet/Identity/commit/45f9780d32bc83a0ce8b7de3d6620427672df9c0. That foreign key is going to go away before RTM, but I see the issue, when the relationship is optional the key needs to be Nullable. Yep. These are related to identity as a service, they only fail on Linux because of System.Uri having a different behavior. Given that we are not shipping it on 2.1 I'm moving it out the milestone.. We removed the code. Looks like an issue on the certificate creation. I'm changing the tests to use a pfx to sign tokens on the E2E tests.. This should be fixed now. @natemcmaster I see that issue on VS, but everything works for me.. @natemcmaster Is there a better way to do this than to shorten the paths?. I will just add it to the .gitignore when I get to this. 7ccc463f6d6240684e1af37cb5e5d2cd51e5f095. We removed the code. This is not WIP anymore. It's up and running and working. I've addressed all the feedback.\n/cc: @Eilon @HaoK @pranavkm . A user will not interact with the types on this assembly with the exception of https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity.UI/IdentityBuilderUIExtensions.cs#L27 which is documented.\nThese types are public just because MVC needs them to be public to properly function, but essentially everything except for that method is not something a user will interact with.\nI would still like to produce a documentation file for that single method, isn't there something else we can do to exclude types in a given folder? (Like applying a pragma or something similar to the folder).\n@haok do you have an opinion?. That break doesn't have anything to do with this item.\nThe error points to an assembly with precompiled views. (An assembly with types that represent the compiled razor pages that is generated code based on your cshtml files). It likely broke because something on the razor SDK changed and the name went from .PrecompiledViews.dll to .Views.dll. @pranavkm and @rynowak will know more about this.. FYI,\nI've merged a fix for this in coherence-signed.\nhttps://github.com/aspnet/Identity/commit/2d405b79d071640c550b1fea193a9458a94beafc#diff-7923ea359ac2a1c7ec90f580db690e1aR11. This is fixed now http://aspnetci/viewLog.html?buildId=407551&tab=buildResultsDiv&buildTypeId=CoherenceSigned. Yep. > the rest of identity has nothing to do with sending emails\nIs the name what you don't like?\nThe concept of email registration/etc is already part of identity, so I think it's ok to have the interface at the same layer. If not, where would we put this?. Following up on this. I'm ok with this living on the UI package, so the work here is to do the following:\n1) Update the interface to look like the snippet below. (This interface as called out above is not a general purpose email sending interface but an adapter for the UI). The only point of having a class for email is in case we need to extend it in the future, hence the DTO.\n```csharp\npublic interface IEmailSender \n{\n    Task SendAsync(Email email);\n}\npublic class Email\n{\n    public IList To { get; set; }\n    public string Subject { get; set; }\n    public string Body { get; set; }\n}\n```\n2) Change the usage of IEmailSender in the UI to make it optional (Injecting IEnumerable instead of IEmailSender).\n3) Get rid of the dummy EmailSender implementation.\n@HaoK Does this sound good to you?. @blowdart Id rather address this for 2.1 just to make sure we have something that doesn't corner us in the future.. @HaoK I would just change it to what we discussed above. Switch from parameters to object is cheap, swiching to a class is also cheap, but then you still have to live with the old methods.. @HaoK I'm ok with it. Merge at your discretion once the tests pass. @pranavkm Is this done?. @HaoK Is this for preview1? I've taken a quick look at it and seems fine, If this if for preview1 let me know and I can look in more detail, if not, I'll get to this sometime next week (I'm a bit overflowed at the moment).. @HaoK Looks good, IMO you can leave the KeyRotation part out. Having the interface doesn't really add much without an actual implementation. You can have something like the implementation of IPersonalDataProtector do the right thing by emdedding the key into the protected payload (the same way data protection does it today).\nYou should always protect with the current key and unprotect with whatever key was used at the time.\nIf a user wants to reencrypt data, they can do so by retrieving the data (unprotecting it) and protecting it with the new key.\n. I thought we were going to do a blind index for lookups, isn't that the case?. ac3bea16fdf6bb44f4811d327482c49d94d84cd2. We won't be doing this.. This is done I believe. Closing as no further action is required.. @rynowak I am not able to trigger precompilation here. What am I missing?. @rynowak Got the attributes in the assembly, will we have to do anything to support signing the precompiled views assembly?. @rynowak Fair enough, everything went through correctly through our build pipeline, so I think it must be fine. @rynowak Is there a way to achieve this today? I think its interesting to have for libraries, I'm not sure if this is a blocker for us. @Eilon can you comment on this? I'm going to try and add exclusions for all these things for now.. Should we remove that?. Is @ryanbrandenburg the right person to do this? (I have absolutely no idea how this works). I checked MVC and we probably have to also do it there, so I'm inclined to think this is a change across all our repos. Closing this. It's likely due to the base branch the branch was getting merged into.. @jbagga Did you try this on the sample project Identity.DefaultUI?. This is a WIP. I'm waiting on a change on MVC to propagate, but I've tried this out by hijacking my nuget package cache and it works without issues for all the views that I've hit.\nIt needs cleanup, but I've put the PR here so that we can see how it works.. @haok Yes to both things. This change allows the user to change TUser while reusing all the existing UI.\nOverriding views was enabled through precompilation. One example of an overriden view is /Areas/Identity/Pages/_ViewStart.cshtml that is overriden on the sample to make the Identity UI use the main app layout.\nI\u2019ll add a sample overriding the register page too if you like. I didn\u2019t do it yet cause I wanted to verify that it worked with all our existing pages.. The PR got broken on the rebase because it was pointing to 2.1. 185482c8cfdcf4a267fb8b90e3fce48a00ab3076. ac3bea16fdf6bb44f4811d327482c49d94d84cd2. @HaoK Good catch. I'm going to start the process to get this into preview1. Actually, this is only on dev, isn't it? I think it was a bad merge on my part.. @pranavkm I do believe this is covered by the scaffolder. It will allow you to choose individual views to scaffold in the future. If that sounds good to you, feel free to close this.. @pranavkm I would suggest filing independent bugs for those things. I have scanned the thread but I wasn't sure what you meant.. @pranavkm I'm closing this issue. Can you file individual issues for your specific suggestions is they still apply?. @pranavkm Or please confirm they don't apply anymore.. > It's an internal implementation detail of the Identity UI that it uses areas\nAreas are not an implementation detail of how the Identity UI works, it is part the contract that we choose to have at the MVC level with other parts of your application.\nWe don't consider the scenario of turning off areas to be a common case and we favor an experience in which AddDefaultUI always gives you a result that works. In other words, we prefer doing anything we need to do to make it work other than throw an exception if things are not setup correctly.\nRegarding the changes on the file system part, it's a small bug in there. I've sent out a PR to fix it. I'll let Hao review it.\nhttps://github.com/aspnet/Identity/pull/1629/files\n. We are not planning to change how this works. I chatted at the time with @danroth27 and @DamianEdwards about this and we want an experience in which AddDefaultUI makes everything it can to make ensure that the UI is plugged-in and functional.. @ryanbrandenburg A couple of things:\nSeems like these tests started failing on February.\nCan you confirm (I can't tell for sure from the build logs) that they are failing on full framework?\nHas .NET Framework been updated on the CI agents recently? (BTW, I just started seeing this error on AppVeyor too).\nThis is code that we haven't touch in months, so I'm a bit worried is a regression on a patch update or something similar in .NET framework.. @ryanbrandenburg Is there a way to see the history of this test for the past year? The CI only shows one month, and I want to pinpoint when this test started failing, cause we haven't changed the code in months.\n. This makes this issue way harder to debug :(. I haven't seen these tests fail in the past and we haven't changed the code in at least 6 months.. @ryanbrandenburg Are you confirming what I said before, that this is likely net461? \nWindows will update .net framework for you you automatically through windows update.. @ryanbrandenburg That's not the case.. I've skipped all the tests affected by this and created a test experiment for it to run on the CI and see if we can repro it:\nhttps://github.com/aspnet/Identity/pull/1686. I don't think there's more action for preview2 here (other than watch the CI) or skip any additional test if I missed any.. @ryanbrandenburg Can you be a bit more clear?. ah, ok. Thanks. Will fix it.. @mkArtakMSFT I'm moving this to MQ. I'll take care of them next week as they are not product related issues nor anything we're shipping. @Eilon I think this has something to do with the Crypto layer. We can file a bug against dotnet for it, I'll have to spend some time producing a small repro, but will do so.. We removed the code. I do believe this is related to another issue we are talking about in another issue. Does this fail on full framework and on Windows Server 2012?\nhttps://github.com/aspnet/Identity/issues/1630. I've skipped all the tests affected by this and created a test experiment for it to run on the CI and see if we can repro it:\n1686. I don't think there's more action for preview2 here (other than watch the CI) or skip any additional test if I missed any.. @mkArtakMSFT I'm moving this to MQ. I'll take care of them next week as they are not product related issues nor anything we're shipping. I didn't look at this correctly, We need to have a test for each one of the actions, not just change password.. @haok The recommended approach is not to create new pages. Observing the principals created on every signin should be easy enough by just plugging an event handler for the cookie signin method of each of the cookies that captures the principal at the time of sign in and then do the checks for the appropiate values on each of them.. Is there any reason/scenario that prevents you from just using the Razor pages version? Razor pages are designed to seamlessly inter-operate with traditional MVC controllers/views. Is there any place where you are running into issues?\nWe are not planning at this time to provide an MVC version of the scaffolder at this time unless we get significant feedback about it. Maintaining two parallel versions of the code base incurs in a significant cost for us with little/no benefit.\nIf you have specific issue with the Razor pages version that might require an MVC version of the Identity UI code, we would like to hear about it.. @DamianEdwards . I'll let @DamianEdwards chime in. @prafullbhosale Can you take a look at this? If there's a login partial in /Views/Shared/ we should not generate one in /Pages/Shared/.\n/cc: @danroth27 . Closing as this is a scaffolding issue. \nSee\nhttps://github.com/aspnet/Scaffolding/issues/714\nfor details.. Relevant pieces of code\nhttps://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/ForgotPassword.cshtml.cs#L48\nhttps://github.com/aspnet/Identity/blob/dev/src/Core/UserManager.cs#L1708\nI do believe this is done. @HaoK @blowdart Can you confirm?\n. @HaoK PING. Yeah. Sounds good to me.. This is still an issue. I filed a similar issue not too long ago. I'll point this one to that one and close it.\nhttps://github.com/aspnet/Identity/issues/1637. @pranavkm Is looking into this.. @ryanbrandenburg I think there might be libraries that are missing baselines in here. @HaoK . This is more of a question for security than for here, but I would say that you can do two things. Add [AllowAnonymous] and call HttpContext.AuthenticateAsync(scheme) within the action method. Then decide what to do.\nThe second things is that you can use the upcoming authentication policy to achieve this. @HaoK can provide more details. +@DamianEdwards, @prafullbhosale for awareness.\nI'm fine with it so long as you guys are.. How do you go from DefaultUI to Scaffolded UI?. @ajcvickers This I believe is because of the way we setup the functional tests. I spoke to @bricelam about it and he explained to me how to fix it (although I don't remember the details). I believe it has a relatively easy solution, we'll get to it on MQ as its not critical.. Haven't seen this in a long time, so closing.. @pranavkm Can you confirm that you are changing this as we discussed?. And the startup code you are using. This is enough to investigate I think. We changed this area substantially on Preview2, so it might not be super relevant. But I'll make sure we look into it.\nThanks for bringing it up.. At a minimum we should have an in-memory E2E test that checks this. Given the churn that we had in the area I'm going to suggest here that we start by adding a test on the new implementation to confirm the behavior.. This doesn't repro in preview2. I've added tests to verify it as part of https://github.com/aspnet/Identity/pull/1749. @ekhtiari can you provide a minimal repro project?. @ekhtiari I don't think I have enough information to help you troubleshoot the issue you're running into. Can you provide a repro project showing the issue?. > but you still get redirected to /Identity/Accounts/Login.\nCan you share a small repro project for this?\nThe only time when we update the cookie paths is when you call to AddDefaultIdentity()\n. I'm not able to repro this with our Defaul UI sample. Can you provide a repro project for it?. Closing for now as I haven't been able to reproduce it.\n@Phrohdoh We will have docs on how to work with the default UI and in the next VS update there will be a scaffolder that allows you to generated individual views.. Moving this to RC1 as I've already done it as part of making the tests more generally applicable. Can you guys provide more data on what's going on?. This is likely an MVC bug. Looking into it. I can't repro this. I found another issue in this view though that I've fixed. The result of a logout operation must always be a redirect operation so that the identity in the request gets updated accordingly. I'll be using this bug to track it.. @HaoK Can we press pause on this? I don't want to rush https://github.com/aspnet/Identity/issues/1722 in 2.1 as the scope is much bigger and we need time to properly bake it in,\nThe requirement for 2.1 is that you can use a custom TUser with the default Identity UI. I agreed to get this in for preview2, but I wanted us to revisit it on RC and discuss alternatives.\nCan we setup a meeting to discuss this?. Close? @HaoK . @seancpeters Owns this.\nI think the blog post might be missing instructions. If I remember correctly, the scaffolder is a global tool now. So it needs to be installed with dotnet intall tool dotnet-aspnet-codegenerator --version 2.1.0-preview2-final\" @natemcmaster can confirm. @natemcmaster Ah, you are right. @blowdart Who wrote the documentation for this? @danroth27?\nIn any case, I'll figure out what to do here.. This belongs to the scaffolding repo. Adding @seancpeters to confirm as he's the owner. I believe this is fixed post preview2. Thanks for bringing it up.. looks good. I\u2019ll take a deeper look tomorrow.. @jbagga Are there any test missing that flavor that are relevant to this? (setting up auth globally). That's the part I'm more interested in.. Yes. I already signed off at the time.. Yes. Also %userprofile%/.dotnet/x64 needs to be on the path when you launch Visual Studio for it to pick up the right dotnet to use.. Can you run add migration and then update database? Also try from the command-line \u201cdotnet ef database update\u201d on the project folder.. is that after running build.cmd?\nYou should do dotnet --info which will give you the exact information.. You are on an older version of dotnet. You need to run build.cmd and use the version on %userprofile%/.dotnet/x64. Closing this as there's no further action required.. This issue was moved to aspnet/Scaffolding#799. This issue was moved to aspnet/Scaffolding#811. Thanks for reporting this.\nThis is by design. If you are taking control over the options used in static files, you need to include the static files used by identity manually.\nTo do so, you just need to create your file provider as in the snippet on the link:\nhttps://github.com/aspnet/Identity/blob/dev/src/UI/IdentityDefaultUIConfigureOptions.cs#L65-L66. @serpent5 Can you give us more information on what you're actually trying to accomplish changing the area name/removing the constraint?. @Edward-Zhou What is motivating you to change the area?. @serpent5 Thanks for the detailed explanation. I've added some comments inline and I'll give you a couple of options at the end of this comment.\nIn general, we think of the Default UI as great starting point for new projects and for projects that require a limited amount of customization. If you want to have full control of the UI you can always scaffold the code into your project using the scaffolder that we include. If you are migrating an existing project to ASP.NET Core and want to leverage the UI, you'll need to do some changes when you opt-in into using the default UI.\n\nExisting links need to be updated. These might be either internal to the ASP.NET Core Identity web-site or external e.g. if ASP.NET Core Identity is being wrapped up with Identity Server and said external site links to e.g. the Account/Manage page.\nIf migrating a site from ASP.NET Identity to ASP.NET Core Identity, it's feasible to make all changes transparent (no visible changes to the end user), unless using the new Default UI, which forces the e.g. /Account/Login link to change.\nThe classic \"bookmarks\" problem, where existing browser bookmarks to these pages no longer work. This can be fixed with redirects, etc, but that's extra work.\n\nAll these scenarios require you to switch to use the default UI.\n\nIt further exposes the fact that the site is using ASP.NET Core Identity 2.1, given that /Identity/Account/Login is easily identifiable.\n\nCan you clarify why this is a concern for you?\nNow, if you really want to do this, and keep in mind that this is not a main scenario and not something we support nor recommend with the default UI, you can write a page model convention to change the URLs.\nThat said, if you choose to do this, there will likely be other places where you need to make adjustments to account for this change.\nSee https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.applicationmodels.ipageapplicationmodelconvention?view=aspnetcore-2.1\nI hope this clarifies things a bit.. @serpent5 \n\nThe identifiability comment was due to the fact that from some of what I read about security, it's sometimes advised to hide the implementation details of your backend services for security reasons.\n\nThis is called security by obscurity and it is generally discouraged as it doesn't provide any real security but just the illusion of security. To draw an analogy, you don't keep your money under your bed for security (based on the fact that you are the only one that knows is under the bed), you put it on a bank where you know that someone has to go though a security guard, crack the bank vault, etc to get to your money.\n\nIn conclusion, would it be fair to say that for anyone that wants to remove /Identity from the URLs (or more generally customise said URLs), the recommended options are:\nNot use the Default UI at all.\nUse the scaffolding element of the Default UI and make all necessary customisations.\nGet over it (of course, you can put this far more politely than that :) ).\n\nYes, but I also would add to the explanation that the main reason for the Identity UI to be in an area is to minimize the impact on your app and to provide a clean separation between your app code and the Identity code.\nAlso, as you've mentioned before, if you want to leverage the default UI and still use the old routes its totally acceptable to just have a redirection rule that points the old routes to the new routes. (It's essentially something you can achieve with 5 lines of code).. @BlueMarmalade \n\nI followed the instructions and deleted my old identity before I used the scaffold tool to add the new razor identity.\n\nCan you point me to those instructions? If they are in our docs, I don't think they are accurate and we should get them fixed.\n\nThe problem is that now when a user hits an authorized controller like Home/Index he is sent to Account/Login and not Identity/Account/Login. The only fix I could find was putting this in my configure method:\n\nCall services.AddIdentity().AddDefaultUI() or just services.AddDefaultIdentity instead. (Or just configure the identity cookie to redirect to /Identity/Account/Login. @serpent5 Thanks for pointing out the docs.\n@Rick-Anderson Can you please correct the migration docs to point out that when upgrading to 2.1 your urls will change? I think the migration strategy there might be a bit naive and that we might need to provide more detailed migration steps.. Thank you for your feedback. We think this has been addressed with the updated migration docs in https://github.com/aspnet/Docs/issues/6953. For now, we're closing this issue.. Hi @pwen090, thanks for contacting us.\nHere is the answer to your questions:\n\nWhat is the proper process for disabling user registration with this new razor library?\n\nThe simplest way to accomplish this is the one you mentioned. Simply override the register view, remove the code and have it for example, redirect to the login page.\npublic IActionResult OnGet() => RedirectToPage(\"/Account/Login\");\n\nCan you just delete these file[s] completely or will that then revert to the built-in razor library code?\n\nIf you remove the pages, it will revert to using the ones in the library. As a more involved option, you can remove the page actions using a pageapplicationmodelconvention.\n\nSecondarily how does one disable the default identity razor class library all together so that there is no potential for attack surface creep in future updates or changes to said library? E.g. My authentication UI/Controllers are only what I have explicitly coded them to be. thank you!\n\n@HaoK answer is the best way to do this.\nHope this helps!\nClosing this issue as there's no further action to do here. Feel free to reopen if your problem hasn't been solved.. @tstivers1990 Thanks for getting in touch with us.\n\nThe new Identity UI library system introduced with 2.1 is unacceptable, in my eyes. There is too much background magic going on that isn't clear even after scaffolding all the pages. Not all users want to have an entire Areas folder with nothing but Identity in it while the rest of their project lives in the project root.\n\nThe default UI is a starting point suitable for applications where there's not a lot of need to fully customize the UI. I'm not sure what background magic you are referring too; specially after scaffolding the pages, the mechanics of how it works are pretty similar to the 2.0 version in the templates, with the main exception that all the code is now in its own area. We put Identity in an area to isolate the code from the rest of the application and make sure that it doesn't negatively impact the rest of your application in a way that is not obvious.\n\nAfter scaffolding all the pages, I've noticed some pages have [AllowAnonymous] yet no pages have [Authorize], implying requiring authorization is the default. Yet, nowhere in the code is this made clear. Not in the Startup configuration. Not in Program.cs. Not in any files under the Identity folder. Nowhere. Leaving me to believe there's just some background magic going on that is being deliberately hidden from us.\n\nThis is not the case. AllowAnonymous doesn't imply authorization, it only implies that no matter what, that page should be accessible to unauthenticated users. Previous versions of the templates would break when you added authorize as a global filter, hence we added [AllowAnonymous] to the pages where it applies.\n\nThe only current option also seems to be using Razor Pages for the Identity UI. Some of us want full control over how we use Identity so that we can customize it to our needs. The current setup is simply unacceptable. If my entire project is using MVC, I don't want Identity living in its own folder off in la-la land as Razor Pages. It makes the project structure a mess, and there's just no reason for it.\n\nMaintaining two versions of the same codebase (MVC and Razor Pages) is very expensive for us and there are no real benefits from having an MVC implementation compared to a Razor Pages version. Both flavors are fully in ASP.NET. Moving the code out of the area should be relatively straight forward, as well as converting it to MVC from Razor Pages. It probably simply involves moving the pages from the area into your main app Pages folder and calling AddIdentity instead of AddDefaultIdentity.\n\nPlease either fix the options so that those who want it can take full control of Identity and use it as they wish, whether that's the MVC approach or the Razor Pages approach. Or provide us with sufficient documentation so that we may add Identity to a blank project without using the Identity UI library or some magic scaffolding voodoo. As it stands now, there doesn't appear to be any documentation on Identity that doesn't rely on the new scaffolding system and Identity UI.\n\nThe default UI is completely optional. You should be able to just scaffold the pages into your project and do whatever you want from there, whether that's convert them to an MVC flavor or move them out of the area into your main project.\n@Rick-Anderson Is this something we can get documented?\n\nPerhaps the comment I can add here is that it's very rare that in a real production app anyone would really use the default ASP.NET Identity UI/templates. They will certainly be a starting point, but they always need tweaking/customizing. This is certainly the case for every identity project I work on or that I come across in my work.\nSo I think I agree that the more the UI is encapsulated the harder it is to use as that template/starting point. And the more there are tacit behaviors/features, then the harder it is to understand and take control of those.\n\n@brockallen The default UI is a starting point and a suitable option when you need to do simple customizations. For full control we recommend you scaffold the pages and change them to suit your needs.\nHope this helps.. @Rick-Anderson I think that what @tstivers1990 wants is better documentation on how to plug-in identity without relying on the scaffolder. \n@tstivers1990  The scaffolder is just a vehicle to delivering the code into your application. If you want full control, scaffold once and remove everything you don't need.\n@Rick-Anderson These are the important bits to know if you have scaffolded the code into your app and don't want to use default identity at all.\nConfigure MVC to authorize the Identity pages that require authorization:\ncsharp\nservices.AddMvc()\n   .AddRazorPages(options =>\n       {\n           options.AllowAreas = true;\n           options.Conventions.AuthorizeAreaFolder(\"Identity\", \"/Account/Manage\");\n           options.Conventions.AuthorizeAreaPage(\"Identity\", \"/Account/Logout\");\n      });\nConfigure the cookie to point to the identity pages paths\ncsharp\nservices.ConfigureNamedOptions<CookieAuthenticationOptions>(options =>\n{\n    options.LoginPath = $\"/Identity/Account/Login\";\n    options.LogoutPath = $\"/Identity/Account/Logout\";\n    options.AccessDeniedPath = $\"/Identity/Account/AccessDenied\";\n});\nRegarding the fact that we rely on the scaffolder in our docs, its totally fine. The alternative is to tell you to copy paste a bunch of code in the docs into your project which is inevitably going to go out of sync. The scaffolder is the source of truth.\nHope this helps clarify things a bit.. Closing this issue as we are taking action on https://github.com/aspnet/Docs/issues/6990.\nThanks for bringing this issue to our attention.. Thanks for contacting us @tstivers1990 \nCould you please file or point the PR to an issue describing the problem and what the proposed changes do (What's the visual before/after). Merged! Thanks for your contribution!. @tstivers1990 Thanks for filing the issue. It's clearer to me now. I've commented on the PR https://github.com/aspnet/Identity/pull/1838. The changes look good, but we need to remove the breaking changes as we want to take this into a patch.\n@mkArtakMSFT This is a patch candidate.. @natemcmaster yes. @kichalla . @kichalla As I believe he wrote these tests :). https://github.com/aspnet/Identity/commit/4b2dc59979ac57e69f425c2f574b12a6625fe959. @pranavkm I think this is likely related to exhausting the number of file descriptors, but I think we took action for it. Didn\u2019t we?. I checked and it seems like we did. Given that all the views are precompiled. Would it be problematic if we remove all the file providers from razor view engine options? That way there wouldn\u2019t be any file watching going on, based on what I see on DefaultRazorViewEngineFileProviderAccessor. Does that make sense @pranavkm. @pranavkm would it be a problem if we just add a bogus one instead? The callstack looks pretty descriptive to me.. https://github.com/aspnet/Identity/commit/95bc2518486554be18191211e70a2ac8e8765ed3. I went ahead and this the merge manually. @Eilon Sounds like an MSBuild issue/race condition?\nWe haven't seen this on MVC and it's not a problem customers have reported.. @ryanbrandenburg I think this has been a transient issue. Our stack is so complex that I wouldn't even know where to start in order to look into this. I'm confident that this is not something we have caused as we haven't changed this code in months, so I will agree with @pranavkm in that we should close this.\nThe only thing we can do is to enable binary logs in all our builds so that we can do postmortems on these things, but without that, it's impossible to troubleshoot.. I don't see this issue anymore, in any build for the past month, so closing.. Just looked at it. It was a transient network error as this test needs to go and download an external resource to hash it and validate our integrity tags.\nWe could add a retry here if we have to, but I would do nothing for now until it manifests itself again (if ever). Yes, I will do so once I handle other build issues. Added retries here https://github.com/aspnet/Identity/pull/2054/files#diff-5d5e5a2c35833245c7dc73bf232673abR172. @ryanbrandenburg This is a style change. We should see how it looks like before doing any change.. Yeah, it\u2019s due to limitations on file watchers or something like that. There\u2019s no actual way to easily fix it as it\u2019s caused by MVC actiondescriptorprovider listening for changes in cshtml files on disk.. This needs to target the release/2.2 branch I believe. I'll merge it as soon as the CI passes. Done. What manual testing have you done on these changes?. @ryanbrandenburg You need to run the app in development and in production, launching it (I assume with F5 or dotnet run) is not good enough.\nWe don't care about test/WebSites/Identity.OpenIdConnect.WebSite but for the default UI you need to run it on both environments as described above and make sure that there are no errors on the browser console (Visit login/register/manage). @ryanbrandenburg No. I mean dotnet publish -c Release -> dotnet /bin/Release/netcoreapp2.2/publish/app.dll. @ryanbrandenburg Those issues are expected as we are referencing the assembly as a project reference and not a package and we probably didn\u2019t fixup publish.\nHave you tried both versions of the UI? (V3 and V4). @pranavkm Do you have any idea?. I'll merge it once the build passes on the CI. @Eilon It wasn't allowing me to merge. I'm doing it on the command-line now.. Wrong branch. I resolved the conflict, I'll merge once the build passes. Superseeded by https://github.com/aspnet/Identity/pull/2047. 4b1090dd654c5a7ecb1d0a3e1edf22a66171b178. Sibling PR on https://github.com/aspnet/Identity/pull/2076. 781ca09033288882be16db5d1f8c9d8cef3b53c2. @pakrym I would keep the config simple (and bindable) as much as possible, and have the component load the certificate. This version only supports ClientSecret for now. These are just sample cleanup (Using the cert loader in Hosting from now on). I just left one by mistake, i'll just clean it before checking in. Remove the Flaky bit. Look in this class as a starting point. @Eilon Your comment got lost on my uber rebase.\nThis is just the initialization block the static files middleware has for its options. We need to duplicate it here as there is no \"AddStaticFiles\" service collection extension. I wanted to keep this logic separate to make explicit the gesture that I'm doing to plug our embedded file provider. This part is most likely to change in the future, so I'm not concerned about the current shape of the code.. Done. From the templates. This is very EF specific, should this be in Core?. Will this require a migration for existing users?\nThis is kind of a breaking change, isn't it?. Ah, yes. I see now. This should be part of our template by default, shouldn't it?. Not sure what this sentence means. @pranavkm What's the advantage of <partial over Html.PartialAsync?. No, the right thing to do here is to pass in a return url and do a local redirect, look at the logout action for how to do it.. We probably want to force the download header, but I would just do OK(user) and set the header before. We can add a file content result in MVC that takes an object. I've filed https://github.com/aspnet/Mvc/issues/7232 to track this. It's how the 2.0.0 templates are configured. I don't want to change it for now. If you want me to, I'll file a bug to track it. Probably nothing happens https://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/Logout.cshtml.cs#L28 unless signoutmanager does something bad, but even if it's not bad, it doesn't really make sense to have a logout endpoint that can be hit without being logged in.. It checks if the layout has been overriden and saves the overriden layout in viewdata.\nThen on the Manage/_Layout.cshtml view, it checks if an overriden layout was specified in viewdata, and if thats the case uses that as the parent layout instead of statically pointing to the one in Identity.. I'll regenerate the migrations and remove all this stuff. Compact this using expression methods. Absolutely agree. I will file a bug for us to revisit this in preview2. Yeah, It\u2019s a limitation due to the lack of open genetics. I\u2019m gonna try and figure out a better solution. Moving forward avoid injecting anything depending on TUser into the view . There is. I close on the user type here and I can just rely on it in the configuration class. This is the pattern Identity follows for services that depend on the user.. @HaoK @pranavkm That will not work. I need to pass in the type (I can't create an instance) because IdentityDefaultUIConfigureOptions has dependencies from DI (IHostingEnvironment).\nPassing the user type is more involved/impossible as it would require to pass in a factory method and resolve within that method the hosting environment and pass in the user type.. No. It's explained above. These urls are not directly hittable from the browser. The user gets there as part of redirect flows.. It's explained above. These urls are not directly hittable from the browser. The user gets there as part of redirect flows.. It's explained above. These urls are not directly hittable from the browser. The user gets there as part of redirect flows.. It's explained above. These urls are not directly hittable from the browser. The user gets there as part of redirect flows.. It's a fragment. It can contain multiple elements. <span>a</span>some text<a href=\"blah\">text</a>some other stuff. Because the browsing context sets things like the base Url and things like that. Without it, things like href values will not be correct.. The pages model a state machine. The methods are the transitions, so I want to have different methods for different cases, like registering an invalid user (returning back the register view). That increases the complexity of the tests a lot without providing too much value. In the case where it's worth it, we can have it, but I think it's ok to focus on the elements that should be present on the page rather than on the ones that are not present.. MVC still needs to load deps, so I rather keep it here.. Yep. I'm trying to find a way of detecting this at run time, but I haven't come up with something that is not \"flaky\". I'll chat with Ryan about it.. Yes, the parameter being sent was not correct.. This belongs inside UserStories.ChangePasswordAsync. A few small comments: \n Pass in the old password and the new password as parameters.\n No need for interpolated strings (remove the $)\n. nit: The comment is a bit inaccurate. The Security timestamp claim is the only thing that is equal.. nit: RefreshSignIn generates a new security stamp. This would be more like set account pasword async or something similar?. CanSetPasswordWithExternalLogin. What does the name has to be with these changes? Don't you have to be checking the security timestamp?. Can you break this into multiple lines?. Or just CanSetPassword. This should be just using the part factory on the related assembly with a different context to light it up \ud83d\ude15. Something along the lines of:\ncsharp\nvar partFactory = ProvidePartFactory.GetPartFactory(assembly);\nvar parts = partFactory.CreateApplicationParts(assembly,\"someCtx\");\napm.ApplicationParts.Add(parts). Yes.\nOrthogonal to this, maybe NullPartFactory should be -> OptionalPartFactory and support this scenario through the ctx parameter.. The important bit is that the parts for an assembly always have to be instantiated through the factory in the assembly so that if something changes it only changes in one place.. Because if not, when something changes in the parts implementation you need to change it in all the consuming clients. For example, if for some reason precompilation changes and starts creating an additional part for something else, then all consuming clients (identity, etc) need to change to create that new part themselves.. Isn't this supposed to just be OptionalPrecompiledApplicationPartFactory?. There is a separate website in Testing/WebSites. Make this TUser,TKey and have the layer above pass it to you. I would not introduce a new abstraction. Simply force TUser to be a class and have a parameterless constructor. I would suggest to start by replacing any access to user data with method calls from user manager and then apply the minimum required set of constraints. Please, do not introduce a new abstraction. Keep the new() constraint around instead. Use https://github.com/aspnet/Identity/blob/85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c/src/Stores/UserStoreBase.cs#L152 instead. csharp\nvar user = new TUser();\nawait _userStore.SetEmailAsync(input.Email);\nawait _userStore.SetUserNameAsync(input.Email);\n_userManager.CreateAsync(user);. Your call. But file a bug and do it on a separate PR.. As mentioned above. Let's not introduce an additional abstraction for this and just rely on the parameter-less constructor constraint.. https://github.com/aspnet/Identity/blob/85f8a49aef68bf9763cd9854ce1dd4a26a7c5d3c/src/Core/IUserStore.cs#L39. I meant to use them through the interface, just pointed to the implementation so that Kiran could see what they were doing. The user manager doesn't have the functionality. If you are OK adding it, we can just add it there. This can take multiple forms:\ncsharp\n_userManager.Create(userName, email)\n_userManager.SetUserNameAsync(user, userName, updateUser:false)\n_userManager.SetEmailAsync(user, email, updateUser:false). This will not work, you need to register it as TUser, if you get a custom user this will not be registered and we don't want people to have to register a custom factory for creating users. This will not even work in the default templates as they use ApplicationUser. This was sneaky, I almost didn't get it. Doesn't this address it by removing it? Is this the right thing to do? (I'm not sure what you talked about yesterday regarding this). Revert. Revert. Revert. The scaffolder doesn't need this (and this is in an internal class).\nThe scaffolder will directly do \ncsharp\nnew TUser { UserName = Input.Email, Email = Input.Email }. TestUser = PocoUser, I saw there was already a store implementation for it on shared and reused it.. I can rename the tests to TestUser but I think its better to convey all over the place that TestUser is a poco. Sounds good. The changes look good. The only thing  we need to change are the removed members and the visibility changes. Is there any issue if you remove those changes? Those are breaking changes and we would ideally like to take this into one of our patch releases, so we need to revert those changes even if the methods are not used.. @tstivers1990 I think scraping them all together is fine. While it's not super clean, its in a .Internal namespace so it doesn't really matter. I don't want to trouble you into sending another PR as there's not much value on fixing it. Scraping the commits with the breaking changes will work fine.\nThanks for your contribution. @ryanbrandenburg Grab the navbar from here. @ryanbrandenburg This is the login partial markup. Good enough. You mean the message? It's really not important.. Nope. This is how it's done in bootstrap. Remember me is a checkbox, the display name is the label that comes after the checkbox. This strikes me as wrong. The CSS inside the production library should be the minified version of the code.. Is this intentional? This is changing the dependency on the define. Sure. Sure. ",
    "rynowak": "Is this whole discussion about the interface vs class? I don't think it's especially important. As @divega pointed out - the user experience is the same.\nIMO the interface + extension methods the most flexibility since it could be implemented by anything - whereas the class + concrete methods is simpler as long as everything is in the same package. If you choose the interface, you always have the ability to evolve the backing class as much as possible since it doesn't appear in anyone's code.\n. We pass the same information to CSC as the main compile target does.. <ItemGroup>\n  <RazorCompile Include=\"...\" />\n</ItemGroup>. Consider me signed off on this then. We shouldn't block on these issues, but we do need to fix them.. Add <ResolvedRazorCompileToolset>RazorSdk</ResolvedRazorCompileToolset>\nThis is a feature that the Web SDK has added for us, but it hasn't made it into our builds yet.. You shouldn't need both of these right? Or did we forget to include the net sdk \ud83d\ude22 . Is this still required? We might already have a bug tracking that.. ",
    "BolatovAlau": "I know that Controllers are just classes, so I would like to call them this way:\npublic class AdminHelper\n{\n    AccountController a = new AccountController();\n    public async Task<ActionResult> Test()\n    {\n        await a.Register(new Models.RegisterViewModel { Email = \"Test@test.com\", Password = \"Test111\", ConfirmPassword = \"Test111\" });\n        return null;\n    }\n}\nBut i got error:\n. . . . . . . . . . . .\nAdditional information: At the moment, it is impossible to start the asynchronous operation\n. . . . . . . . . . . .\nThanks\n. public static string HashPassword(string password)\n{\n    byte[] salt;\n    byte[] buffer2;\n    if (password == null)\n    {\n        throw new ArgumentNullException(\"password\");\n    }\n    using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, 0x10, 0x3e8))\n    {\n        salt = bytes.Salt;\n        buffer2 = bytes.GetBytes(0x20);\n    }\n    byte[] dst = new byte[0x31];\n    Buffer.BlockCopy(salt, 0, dst, 1, 0x10);\n    Buffer.BlockCopy(buffer2, 0, dst, 0x11, 0x20);\n    return Convert.ToBase64String(dst);\n}\n. public static bool VerifyHashedPassword(string hashedPassword, string password)\n{\n    byte[] buffer4;\n    if (hashedPassword == null)\n    {\n        return false;\n    }\n    if (password == null)\n    {\n        throw new ArgumentNullException(\"password\");\n    }\n    byte[] src = Convert.FromBase64String(hashedPassword);\n    if ((src.Length != 0x31) || (src[0] != 0))\n    {\n        return false;\n    }\n    byte[] dst = new byte[0x10];\n    Buffer.BlockCopy(src, 1, dst, 0, 0x10);\n    byte[] buffer3 = new byte[0x20];\n    Buffer.BlockCopy(src, 0x11, buffer3, 0, 0x20);\n    using (Rfc2898DeriveBytes bytes = new Rfc2898DeriveBytes(password, dst, 0x3e8))\n    {\n        buffer4 = bytes.GetBytes(0x20);\n    }\n    return ByteArraysEqual(buffer3, buffer4);\n}\n. ",
    "Rick-Anderson": "@danroth27 please prioritize \n. > Can you please just do a very simple sample / update the doc to represent how to add let's say a todo list for a logged in user ? And also explain the various pros and cons flying around if one should extend IdentityDbContext and \"pollute\" the model project with EF dependencies etc.\n@csharmath  Yes this is planned. See https://github.com/aspnet/Docs/issues/977\nI have a MVC5 version of this listed in the issue but it hasn't had a security audit so is not blessed my MSFT. I did it one afternoon.\n. @csharmath did you look at the right repo? https://github.com/Rick-Anderson/secureMvc only allows the logged in user to edit their records.\n. @csharmath oops - wrong repo, let me find the right one.\n. @csharmath it's the PR that hasn't been approved. https://github.com/Rick-Anderson/secureMvc/pull/2\n. >Maybe we should add a tip for configuring the ForwardedHeaders middleware in that guide.\n@halter73  can you use the Edit (in browser) feature to add that tip? I'll edit/merge the PR.. @Vaiune would you mind doing an edit in browser PR with your suggestion?. @halter73  is that the right place to add this note?. UserManager uses the UOW pattern which has implications on how you store data. Data stores must not persist in any other method as that could leave the data in a inconsistent state.\nNeed to flesh out any other method - do you mean in the scope of the work you can only call one method that stores data (like UpdateNormalizedUserNameAsync or UpdateNormalizedEmailAsync ?. Where can I add that info other than Intro to Identity?. >custom store documentation\n@HaoK where is that?. @HaoK  Custom store docs are being scheduled. See https://github.com/aspnet/Docs/issues/1162. @fujiy thanks for the PR. Any chance you could help update the doc for 2.0?. security/authentication/accconfirm https://github.com/aspnet/Docs/issues/4075\n. @ajcvickers  can you provide a first draft for this and we'll take it from there? Where should the topic go? . See GDPR Encryption at rest. >You need to add roles back, it isn't enabled by default anymore .AddRoles<IdentityRole>\nThis was fixed in ASP.NET Core 2.2 preview-1 #1832 so roles are now added by by AddDefaultIdentity\nSee https://github.com/aspnet/Identity/issues/1813\n. @C-BERBER I just tested this in 2.2 preview 1 and it's working.. >The default UI is completely optional. You should be able to just scaffold the pages into your project and do whatever you want from there, whether that's convert them to an MVC flavor or move them out of the area into your main project.\n@Rick-Anderson Is this something we can get documented?\nScaffold Identity\nApplications that include Identity can apply the scaffolder to selectively add the source code contained in the Identity Razor Class Library (RCL). You might want to generate source code so you can modify the code and change the behavior. For example, you could instruct the scaffolder to generate the code used in registration. Generated code takes precedence over the same code in the Identity RCL.. Intro to Identity\n   Identity is enabled for the application by calling UseAuthentication in the Configure method. UseAuthentication adds authentication middleware to the request pipeline.\n. @tstivers1990 \n\nThis documentation is absolutely useless.  It doesn't document how Identity works as a library.\n\nThanks for your candid appraisal of my document.  That document is focused on scaffolding Identity, not explaining Identity.  See Intro to Identity and associated docs.. I though you preferred authorization handlers to roles.. Created #1962. Is CI failing because VS is showing:\nXML comment has cref attribute 'AddRoles{TRole}' that could not be resolved. @HaoK no I don't and want to keep it that way.. A time value in the past indicates a user is not currently locked out. \n. @HaoK  can you make that change and merge?. ",
    "simonpbond": "There would be nothing better than a pure SQL or Dapper example implementation : )\n. ",
    "jdluzen": "It appears that they're switching to a new assembly: https://www.nuget.org/packages/Microsoft.AspNet.Identity/\n. This current repo should be it. Current version is 3.0.0-rc1, though I can't point to a version number in the code to verify.\n. ",
    "mwpowellhtx": "Fair enough. What is the Github for it?\n. What do you mean \"in the code\"? There isn't an AssemblyInfo.cs, common, etc?\n. No, I don't think so. Microsoft.AspNet.Identity.Core package version is 2.2.something; whereas, this is the assembly properties itself. Note, Version should also read 2.2.something, for consistency.\n\n. Kindly reopen until you've fact checked please. Or if there is a better repository I should be directing my questions, kindly reference me there. Thank you.\n. My assertion is, I don't care which you consider the source, the two ought to be consistent, especially when it comes to questions that come up, assembly queries, etc.\nAs for retroactive, forward progress; respond as you will. Obviously, if the retro is considered abandoned in favor of the new one, by all means treat it as such.\nThanks for the feedback.\n. Thanks...\n. ",
    "natemcmaster": "\nBy default, cookie names are set to .AspNetCore.{AuthenticationScheme}\n\nWhere is this in code?\n. So to be clear, the expected cookie name is Identity.Application or Identity.External? there is no \"Microsoft\" or \"AspNetCore\" anymore?\n. Ok. LGTM\n. Try dotnet ef --verbose migrations add Initial. Does this show additional details about what caused the command to fail? . Let's update the c# in the  taskcache package to include #if NET451 || NET452. They started failing March 22.. Actually, these failures are not .NET Core. It appears these failures were caused by switching from .NET Framework 4.5.2 to .NET Framework 4.6. cref https://github.com/aspnet/Identity/commit/234b8827583fc6c1d9888a426b38d9057a72418a. Once you trim ~45,000 lines from the build log, you'll see this:\n```\n(.NET Core 1.1)\nTest run for C:\\BuildAgent\\work\\2b0c8ce712895332.r\\Identity\\test\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test\\bin\\Release\\netcoreapp1.1\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.dll(.NETCoreApp,Version=v1.1)\nTotal tests: 208. Passed: 208. Failed: 0. Skipped: 0.\nTest Run Successful.\nTest execution time: 8.6992 Seconds\n(.NET Framework 4.6)\nTest run for C:\\BuildAgent\\work\\2b0c8ce712895332.r\\Identity\\test\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test\\bin\\Release\\net46\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.dll(.NETFramework,Version=v4.6) \nStarting test execution, please wait...\nFailed   Microsoft.AspNetCore.Identity.EntityFrameworkCore.InMemory.Test.InMemoryEFUserStoreTest.CanFindRoleWithManager\nError Message:\n System.BadImageFormatException : An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)\nStack Trace:\n   at Interop.mincore.NormalizeString(Int32 normForm, String source, Int32 sourceLength, Char[] destination, Int32 destinationLength)\n   at System.StringNormalizationExtensions.Normalize(String strInput, NormalizationForm normalizationForm)\n   at Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.Normalize(String key)\n   at Microsoft.AspNetCore.Identity.RoleManager1.NormalizeKey(String key)\n   at Microsoft.AspNetCore.Identity.RoleManager1.FindByNameAsync(String roleName)\n   at Microsoft.AspNetCore.Identity.RoleValidator1.<ValidateRoleName>d__6.MoveNext()\nTotal tests: 208. Passed: 12. Failed: 196. Skipped: 0.\nTest Run Failed.\nTest execution time: 10.1455 Seconds\n```. cc @HaoK  - I'm OOF tomorrow. If this gets approved on the internal email, can you merge this so we get it in ASAP?. cref https://github.com/aspnet/Universe/issues/531. This one needs some discussion first. Most repos had a common prefix, like Microsoft.Extensions, which made it easy to decide how to shorten the names. This one has a mix of a several prefixes: Microsoft.AspNet., Microsoft.AspNetCore, and Microsoft.Extensions.. I'm curious. Is this working for anyone else? I moved the repo to the shortest possible folder and even then I still can't useC:\\i\\Identity.sln` because of  this one:\n\ntest\\Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore.InMemory.Test\\Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore.InMemory.Test.csproj. Depends on what you're optimizing for. If you're optimizing for git history and GitHub browsing, renaming a folder is not the best approach. However, shorter folder names are the simplest way to solve the issue, and is one we've already implemented in other projects such as EF and Kestrel.\n\nThere are other options. As @PinpointTownes points out, you can try working around by changing individual files with MSBuild properties. You can lift obj/ and bin/ to the solution folder. You rename just the longest folders. You can rename just the csproj filename. etc. \nIIRC you said there was a plan to rename the project folders and reorganize code anyways, so IMO you might as well shorten the folder name when you do this.. Current thinking on https://github.com/aspnet/Universe/issues/531 is that we'll only shorten folders in repos as required. Identity is definitely one of those cases.. Yes, let's fix it. I think we held off on this because there was expected to be a lot of churn. But that should have settled by now, right?. FYI - since the issue was almost always a file in obj/ or bin/, another solution that works well is setting BaseIntermediateOutputPath and BaseOutputPath using Directory.Build.props. Maybe we should try that first. We did this in aspnet/DotNetTools and haven't had problems so far.\nhttps://github.com/aspnet/DotNetTools/blob/dev/Directory.Build.props#L23-L24. Can you try changing your code to this?\nc#\ncfg.ExpireTimeSpan = TimeSpan.FromDays(15);\nAs mentioned in the xmldocs, Cookie.Expiration is ignored on CookieAuthenticationOptions.\nhttps://github.com/aspnet/Security/blob/a53bf093a7d86b35e019c80515c92d7626982325/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAuthenticationOptions.cs#L62\nPossible duplicate of https://github.com/aspnet/Security/issues/1293. Ok, thanks for letting us know @B-Esmaili. We'll use aspnet/Security#1293 for further follow up on the Cookie.Expiration vs ExpireTimeSpan discussion.. FYI - VSCode files are designed to be okay to commit to source. Even the VSCode repo itself commits their files. https://github.com/Microsoft/vscode/tree/master/.vscode. It's a nice way to share the debugger setup, common tasks, common editor settings, etc. \nBut in this repo, it looks like the VSCode settings were added by accident. So yeah, probably good to remove.\n. EF is producing bad packages. Should be fixed with https://github.com/aspnet/EntityFrameworkCore/pull/9845. This is still in the 2.1.0 milestone. Is this complete?. Ok good to know. Also, this change shouldn't come back to dev either. It was a 2.0.x infrastructure-only change. https://github.com/aspnet/Identity/commit/becf1df9c5a3b908e28ec3c1272b072d8801e3dc. Here are the only important changes I'm still seeing when comparing the two branches. Everything else is build infrastructure improvements\nhttps://github.com/aspnet/Identity/compare/release/2.0.0#diff-57b020cd354da4b1e16f9d9e056d92f6\nhttps://github.com/aspnet/Identity/compare/release/2.0.0#diff-aed72f60743ee817f0aef869518022fb. Release/2.0.0 is poorly named. It should release be named \"release/2.0\". It is used to build any 2.0.x patch. (We'll fix this in 2.1 by naming the branch release/2.1). Also, I need to clean all of our stale branches. patch/2.0.1 might be one of those.\nThen to close this out, let's make one of those no-change merges from release/2.0.0 to dev. That should help us move patches from 2.0 to dev if there are any. BTW, the latest public release of 2.0.x used this. https://github.com/aspnet/Identity/tree/8c47b90677c0f544844151418ba94f24d9f2a094. yes please. The most common error is not setting up PATH correctly. https://github.com/aspnet/Home/wiki/Building-from-source#path \n@LindaLawton did build.cmd issue a warning like this?\n\n. Sorry @javiercn, but this broke signing builds.\n:shipit:. Is the undocumented API in a namespace that ends in .Internal? As a rule, we always document API that is \"public\". Even if it shouldn't be used by developers, how would a developer know?. @mkArtakMSFT can we have this triaged? This broke the build again. http://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=407343&_focus=1098\ncc @ryanbrandenburg , we may need to put aspnet/identity back on the naughtly list so aspnet/Universe doesn't automatically update its submodule.. Ah, thanks @javiercn!. As long as we are shortening, could we also shorten EntityFrameworkCore to EFCore? aspnet/EntityFrameworkCore itself does this.. To me, EF usually implies EF6. Honestly fine either way. Whatever you think makes more sense.\n:shipit: when CI passes. \ud83d\ude0e . TIL cherry-picked merge commits don't actually merge branches. Looks like an actual merge commit this time.\n\n. Same feedback here as on aspnet/Hosting. This isn't correct. The most recent failure was Windows Server 2012 on .NET Core 2.1.\nhttp://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=411823&_focus=102467. I'm not sure of the answer here, but dotnet-aspnet-codegenerator was cut from preview2 due to issues in the global tools feature in the CLI. We hope to ship it in RC\n. This repo is being archived. If this is still something you want to fix, open a new PR against https://github.com/aspnet/AspNetCore. Closing in favor of #1921 . yes, submit a PR to Universe. We'll probably run a build with this change first to make sure Moq 4.9 still works on our many other test projects.. Travis and VSTS are failing.. We should really get to the bottom of this. From @smitpatel's last comment on https://github.com/aspnet/EntityFrameworkCore/issues/12842, it appears that EF's async tests can deadlock. Is Identity doing a bunch of async queries in EF?. Next week. :). This repo is being archived. If this is still something you want to get merged, open a new PR against https://github.com/aspnet/AspNetCore. @HaoK are travis failures a known issue?\n``\n   System.IO.IOException : The configured user limit (128) on the number of inotify instances has been reached.\n  Stack Trace:\n     at System.IO.FileSystemWatcher.StartRaisingEvents()\n     at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\n     at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(String filter)\n     at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionDescriptorChangeProvider.GetChangeToken()\n     at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func1 changeTokenProducer, Action changeTokenConsumer)\n     at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider..ctor(IEnumerable1 actionDescriptorProviders, IEnumerable1 actionDescriptorChangeProviders)\n  --- End of stack trace from previous location where exception was thrown ---\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\n     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n     at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredServiceT\n     at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app, Action1 configureRoutes)\n     at Identity.DefaultUI.WebSite.StartupBase2.Configure(IApplicationBuilder app, IHostingEnvironment env) in /home/travis/build/aspnet/Identity/test/WebSites/Identity.DefaultUI.WebSite/StartupBase.cs:line 70\n  --- End of stack trace from previous location where exception was thrown ---\n     at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\n     at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\n     at Microsoft.AspNetCore.Hosting.Internal.WebHost.StartAsync(CancellationToken cancellationToken)\n     at Microsoft.AspNetCore.TestHost.TestServer..ctor(IWebHostBuilder builder, IFeatureCollection featureCollection)\n     at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory1.CreateServer(IWebHostBuilder builder)\n     at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory1.EnsureServer()\n     at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory1.CreateDefaultClient(DelegatingHandler[] handlers)\n     at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory1.CreateClient(WebApplicationFactoryClientOptions options)\n     at Microsoft.AspNetCore.Identity.FunctionalTests.AuthorizationTests`2.AnonymousUserAllowedAccessToPages_WithGlobalAuthorizationFilter(String url) in /_/test/Identity.FunctionalTests/AuthorizationTests.cs:line 148\n  --- End of stack trace from previous location where exception was thrown ---\n  Results File: /home/travis/build/aspnet/Identity/artifacts/logs/UnitTests-netcoreapp2.2-t000.trx\nTotal tests: 2181. Passed: 1925. Failed: 173. Skipped: 83.\n```. https://api.travis-ci.org/v3/job/434350983/log.txt\nIt only fails on Linux, not macOS or Windows.. Ok, bummer.. Nothing to merge, just a version bump.. To be clear, this removes:\n\nMicrosoft.AspNetCore.Diagnostics.Identity.Service\nMicrosoft.AspNetCore.Identity.Service.Abstractions\nMicrosoft.AspNetCore.Identity.Service.AzureKeyVault\nMicrosoft.AspNetCore.Identity.Service.Core\nMicrosoft.AspNetCore.Identity.Service.EntityFrameworkCore\nMicrosoft.AspNetCore.Identity.Service.IntegratedWebClient\nMicrosoft.AspNetCore.Identity.Service.Mvc\nMicrosoft.AspNetCore.Identity.Service.Specification.Tests\nMicrosoft.AspNetCore.Identity.Service. @HaoK i'll take this one.. @javiercn this merges #2028 forward into release/2.2.. This repo is being archived and will be made read-only. I'm removing these badges entirely in https://github.com/aspnet/Identity/pull/2092. Whoa, lots of test failures. Are these already known issues @HaoK?. > Does the 3.0 Sdk no longer generate a deps file?\n\nThis sounds like something @ryanbrandenburg was investigating. Is this the issue you were seeing, Ryan?. This might have been it: https://github.com/aspnet/Identity/pull/2072/commits/43bae5e91f15bffa63eadef179d7292ff7384a64 Tests pass locally now.. Yup, that was me. Mea culpa, missed one line.. This repo is being archived. If this is still something you want to get merged, open a new PR against https://github.com/aspnet/AspNetCore. Yes, started the work today. It probably won't merge till Monday. Part 1: https://github.com/aspnet/AspNetCore/pull/4345. There will be a second piece to move the Microsoft.Extensions.* projects into https://github.com/aspnet/Extensions.\nClosing as a duplicate of https://github.com/aspnet/AspNetCore/issues/3598. Raise the issue on the new repo.. Set the version to 1.2.0-. Also set this to 1.2.0-. FYI Moq 4.7 added a new overload. This was required to disambiguate between two candidate overloads.. Right. For now Microsoft.AspNet.Identity.AspNetCoreCompat is marked as \"noship\" in the patch system.. Yeah, idk. @Tratcher ? We shipped 0.3.0, to nuget.org so I assume we should also ship 0.3.1.. just FYI - I've found it's too easy to forget to update a VersionPrefix set in csproj directly. I'm hoping putting all versions in version.props will help us when we have multiple version prefixes coming from one repo.. Ok. I'll mark this package as \"noship\" in the packages.csv list. That is what ultimately determines what will ship.. I think checking the original source is good enough for now. Would it be better to have this test glob over every \n.cshtml file under src/UI/ ?. There is some kind of weird bug in NuGet that causes malformed zip entries for extension-less files in the package root. It causes issues for System.IO.Packaging, but not for most other zip implementations including System.IO.Compression. So, (shrug) add a .txt?. ",
    "ole1986": "I do not know if this is still an issue but I noticed when I used \nApplicationCookie.ExpireTimeSpan = TimeSpan.FromMinutes(5)\nAnd cookie has never been created (or shown in browser) and I also do not get  \"logged in\"\nAs I have UTC + 2 (Berlin) timezone, I tried DateTime.Now.Subtract(DateTime.UtcNow).Add( TimeSpan.FromMinutes(5.0) ); which makes the TimeSpan to ~02h05m. But in Chrome browser using \"EditCookie\" it shows 5 minutes difference only and login worked\n. ",
    "korzh": "One note: it seems that ExpireTimeSpan and other options work well only if you set RememberMe parameter to true during SignIn... call.. ",
    "csharmath": "Hah, of course I found what I was looking for just after opening this issue\nhttps://github.com/rustd/AspnetIdentitySample\nFrom here\nhttps://blogs.msdn.microsoft.com/webdev/2013/10/20/building-a-simple-todo-application-with-asp-net-identity-and-associating-users-with-todoes/\nBTW, I realize it's a 2 years old blog entry, but still the style is terrible to read.\nWould be nice if this topic is demonstrated more generally based on those confused stack overflow questions. \nI am still not sure why didn't it work for me when I first tried, but this is a nice simple sample which is cool.\n. After updating to the latest nuget packages, that sample no longer works, so I wonder if you have an up-to-date version for this ? Thanks\n. Thanks @Rick-Anderson for looking into this!\nLooking at your repo, I don't see relationship defined between the ApplicationUser and the Contact and hence the controller is not filtering either based on the logged in user.\nThat would be useful to have as a reference and its a more realistic sample.\nThanks again\n. great, thanks for that! I will check later.\n. ",
    "dazinator": "In answer to my own question, \"Normalized\" in this context means to store the string in an invariant manner so querying for user names / email addresses aren't affected by things like case sensitivity etc.\nAlso, to exclude these properties, I think the following is all you need to do, and I am hoping this won't cause further issues down the line - yet to find out!\nbuilder.Entity<User>().Ignore(p => p.NormalizedEmail); // not provided by anything currently.\n builder.Entity<User>().Ignore(p => p.NormalizedUserName); // not provided by anything currently.\n. I have created repro of the problem here, starting with an out of the box website: https://github.com/dazinator/AspNetCore-Identity-MultiDomain/blob/master/README.md\n. Ok problem solved. Asp.net identity already restricts the application cookie by domain\n. Repro here: https://github.com/dazinator/AspNetCore-Identity-MultiDomain/blob/master/README.md\n. I mean it doesn't work, in that, due to the fact that Identity registers IdentityOptions as a singleton, and due to the fact that it uses this class to configure its cookies (like the application sign in cookie), if you need to configure multiple distinct application sign in cookies (for example one for .foo.com and one for .bar.com) - you can't do this. \nThe illustration, is that if you have a site that is accessed on:\n- one.foo.com\n- two.foo.com\n- one.bar.com\n- two.bar.com\nIt's not currently possible to set up Identity so that it can issue a sign in cookie for domain .bar.com and another sign in cookie for domain .foo.com because when you AddIdentity() you can only ever configure a single IdentityOptions which means you can only ever configure a single Application cookie, which means setting a single domain for that single cookie. If you try to AddIdentity() multiple times, its last IdentityOptions registered that wins.\n. Ah damn, I missed the overload of UserStore that takes the type I needed.\nI should have declared it like this:\n```\n public class DennisUserStore : UserStore, DennisContext, int, IdentityUserClaim, IdentityUserRole, DennisUserLogin, IdentityUserToken, IdentityRoleClaim>, IDennisUserStore\n    {\n```. ",
    "Kabanets": "I'm adding GUID and now this is working.\n. I found the answer here:\nhttp://stackoverflow.com/questions/35371226/asp-net-5-identity-persisted-authentication-not-working-iis-7-5-idle-timer/35432392\n. ",
    "TDK1964": "Any thoughts?\n. @HaoK Your solution worked for me. These are the changes I made and includes renaming the tables.\n```\npublic class ApplicationUser : IdentityUser\n{\n...\n}\npublic class ApplicationRole : IdentityRole\n{\n...\n}\npublic class ApplicationDbContext : IdentityDbContext\n{\n...\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    builder.Entity(i => {\n        i.ToTable(\"Users\");\n        i.HasKey(x => x.Id);\n    });\n    builder.Entity(i => {\n        i.ToTable(\"Role\");\n        i.HasKey(x => x.Id);\n    });\n    builder.Entity>(i => {\n        i.ToTable(\"UserRole\");\n        i.HasKey(x => new { x.RoleId, x.UserId });\n    });\n    builder.Entity>(i => {\n        i.ToTable(\"UserLogin\");\n        i.HasKey(x => new { x.ProviderKey, x.LoginProvider });\n    });\n    builder.Entity>(i => {\n        i.ToTable(\"RoleClaims\");\n        i.HasKey(x => x.Id);\n    });\n    builder.Entity>(i => {\n        i.ToTable(\"UserClaims\");\n        i.HasKey(x => x.Id);\n    });\n    }\n}\n```\n. ",
    "SteveSandersonMS": "I'm doing some verification for the ASP.NET Identity features and have not been successful in getting the Identity DB to change the user ID type from guid to int. If this is going to be a common scenario, we may need better docs.\nI tried doing what's described above by @TDK1964, but it ends up producing the error:\n``\nSystem.TypeLoadException\nGenericArguments[0], 'WebApplication1.Data.ApplicationUser', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore8[TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken]' violates the constraint of type parameter 'TUser'.\nat System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, int numGenericArgs, ObjectHandleOnStack type)\nat System.RuntimeTypeHandle.Instantiate(Type[] inst)\nat System.RuntimeType.MakeGenericType(Type[] instantiation)\n```\nI don't know why this type error occurs at runtime, given that there was no build error. I'm using the 21343 (6/11) build.\nSo, is this a scenario we need to support, and if so, can you provide instructions for doing it? Have I missed where this is documented, or should I file an issue for it to be documented? Thanks!\n. I did also try changing the AddIdentity call in Startup.cs to specify the custom generic types:\nservices.AddIdentity<ApplicationUser, ApplicationRole>(...\n... but that didn't change the outcome. Is there some other code I need to add?\n. Thanks! Yes, that works :)\n. OK, makes sense. Maybe we shouldn't mention the default value in the XML docs if we have a high probability of giving false information.\n. ",
    "raffaeu": "Hi guys, using EF 1.1.0 and Identity Server 4 I got this working using the following steps:\nChange the ApplicationDbContext or whatever you used to reflect this one:\n```\n        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n        // Customizations\n        builder.Entity<ApplicationUser>(i =>\n        {\n            i.ToTable(\"Users\");\n            i.HasKey(x => x.Id);\n        });\n        builder.Entity<ApplicationRole>(i =>\n        {\n            i.ToTable(\"Roles\");\n            i.HasKey(x => x.Id);\n        });\n        builder.Entity<IdentityUserRole<Guid>>(i =>\n        {\n            i.ToTable(\"UserRoles\");\n            i.HasKey(x => new { x.RoleId, x.UserId });\n        });\n        builder.Entity<IdentityUserLogin<Guid>>(i =>\n        {\n            i.ToTable(\"UserLogins\");\n            i.HasKey(x => new { x.ProviderKey, x.LoginProvider });\n        });\n        builder.Entity<IdentityRoleClaim<Guid>>(i =>\n        {\n            i.ToTable(\"RoleClaims\");\n            i.HasKey(x => x.Id);\n        });\n        builder.Entity<IdentityUserClaim<Guid>>(i =>\n        {\n            i.ToTable(\"UserClaims\");\n            i.HasKey(x => x.Id);\n        });\n        builder.Entity<IdentityUserToken<Guid>>(i =>\n        {\n            i.ToTable(\"UserTokens\");\n            i.HasKey(x => x.UserId);\n        });\n    }\n\n```\nCreate a Custom ApplicationUser class\n```\n    public class ApplicationUser : IdentityUser\n    {\n    }\n```\nCreate a Custom ApplicationRole class\npublic class ApplicationRole : IdentityRole<Guid>\n    {\n    }\nChange your ASP.NET Core Startup according:\n```\n// entity framework for asp.net identity\nservices\n    .AddDbContext(options =>\n    options.UseSqlServer(Configuration.GetConnectionString(\"xxx\")));\n// identity models\nservices\n    .AddIdentity()\n    .AddEntityFrameworkStores()\n    .AddDefaultTokenProviders();\n```\nDrop the existing DB because the schema can't be migrated from PK String to PK Guid\ndotnet ef database drop -c ApplicationDbContext\nCreate the initial migration\ndotnet ef migrations add InitialCreate -c ApplicationDbContext\nCreate the database\ndotnet ef database update. Yes, I forgot to mention @Kurtbaby \nYou also have to change the inheritance signature of ApplicationContext in this way:\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>\n    {. ",
    "Kurtbaby": "raffaeu, don't you also have to change the ApplicationDbContext class signature to something like:\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>\n. ",
    "kuashe": "Indeed, but the package is not instaled anywhere . Obliviously it works on .NET Core and DNX .\n. @blowdart  I have nuget + myget . \nBut i reproduced this issue on a fresh VS2015 on another computer.\n\n. Thanks , i'm going to try that.\n. @blowdart  Any update on this ? It's been two weeks now ... \n. @divega Yes , I confirm i have the same error message.\n. @divega Good news , but i guess it would not work with my projects , I would need to update all my packages to match RC2 naming refactor  .... I'll wait for RC2 i guess , let's hope everything works this time :octopus: \n. @blowdart  RC2 is out and i managed to install this properly . Closing this .\n. @smitpatel  Set my netstandard to 1.3 did not knew i needed those extra line in the imports . Thanks for this.\nCan you explain a bit those lines and the other options available ?\n. ",
    "sdanko": "stack.txt\nSource File: AccountController.cs    Line: 79\nThe tables that are used for Identity are not yet created, but with all databases that I worked with prior to this one, they initialized perfectly normal when running the application for the first time.\n. output.txt\nIm using EF 6.0 and Identity 2.0. I attached the output of update operation.\n. I created an explicit migration but I get the same error in package manger console.Also I used SQL Server Profiler and Intellitrace to capture events, but I didnt get any useful information.The last statement that I get in Profiler is : \nCREATE TABLE [dbo].[AspNetRoles] (\n    [Id] [nvarchar](128) NOT NULL,\n    [Name] [nvarchar](256) NOT NULL,\n    CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY ([Id])\n)\nBut it doesent show any errors.\n. ",
    "jamesond": "What was the fix for this issue? \nThank you\n. ",
    "bengi83": "Great, you resolved it!\nJust...booomf...and it was all fixed!\nShame that people like me get here only to find out that you couldn't be bothered to write your resolution.\nThanks.. ",
    "Skisas": "I found that problem was with custom user roles, after I changed it to default identity roles, everything is alright\n. ",
    "jparmar7": "\nI found that problem was with custom user roles, after I changed it to default identity roles, everything is alright\n\nI am having the same problem as you did.  How did you resolve it?. ",
    "raberana": "None actually. I was just unaware of that. Thanks for that info.\nSo I tried to remove that but it still gives the same error.\n. Still not working :(\nThose managers were injected to the constructor of my service class which is outside the website project.\n```\n    private readonly UserManager _userManager;\n    private readonly SignInManager _signInManager;\n    private readonly ILogger _logger;\npublic AccountService(\n    UserManager<ApplicationUser> userManager,\n    SignInManager<ApplicationUser> signInManager,\n    ILoggerFactory loggerFactory)\n{\n    _userManager = userManager;\n    _signInManager = signInManager;\n    _logger = loggerFactory.CreateLogger<AccountService>();\n}\n\n```\n. ",
    "eherrera": "//Identity must be placed before UseMVC()\napp.UseIdentity();\napp.UseMvc();\n https://stackoverflow.com/questions/38968422/no-authentication-handler-is-configured-to-handle-the-scheme. ",
    "softwarebybrent": "Upon further looking i see #650 and #646 are apart of this too.\nI personally think that the best approach is how the IdentityServer3 team (maybe that's you guys too) did their events.  So on the startup class, i can watch the return even and based on all the passed in information, i.e. SignInResult, or something execute my own project specific code.\nthe #650 sounds promising, but as a Company, we've decided to always have 'Utc' on the end of each of our property names if they're dates or 'local' if they're local dates.  Since everyone has their own conventions, I'd personally leave it up to the users to add their own properties and watch this event. \nHowever, should you choose to do #650 my vote would be adding all three as DateCreatedUtc, LastLoginDateUtc and LastActivityDateUtc (this property feels like i'd constantly be hitting the database, might want to leave that one out).\nJust my two cents.  \nHappy Coding,\nBrent\n. it does, but i still would rather see it as one of the default .AddSignInManager(); functions to add my own type in the <> to be consistent with the rest of the methods that are .AddUserManager() and .AddRoleManager()\n. +1 on this, i use User.GetUserId() in a lot of partial views, seems silly to have to give the view the entire UserManager\n. ",
    "akamud": "Shouldn't IPasswordHasher<TUser> have an overload without TUser then?\n. ",
    "newsash": "Issue resolved by UserManager.UpdateSecurityStampAsync() after changing claims and by options.SecurityStampValidationInterval = Timespan.FromMinutes(1) in Identity configuration.\n. ",
    "Ciantic": "Closing this, AddMvc has it inside already. I had copy pasted stuff incorrectly.\n. ",
    "shima20": "@HaoK What would my Startup.cs have in it?  Currently, I had the below:\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n                .AddEntityFrameworkStores<FMGPortalContext>()\n                .AddDefaultTokenProviders()\n                .AddOpenIddictCore<Application>(config => config.UseEntityFramework());\n. Do I also need to override SigninManager for the password as well?\n. @HaoK @PinpointTownes - I was able to override CheckPasswordAsync and got it working, however, after upgrading to the latest, it doesn't hit the overridden method anymore.  Do you know what could be wrong now or if there were any recent changes?\n. I'm overriding UserManager and then implementing my own logic in CheckPasswordAsync\n. The same way you had mentioned how to do it above.  The implementation for this didn't change any.  It just never gets called.\n. ",
    "giddev": "Is it not because you have cascading deletes enabled?\nTry disable it\n```\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n    //disable cascading deletes\n    foreach (var relationship in builder.Model.GetEntityTypes().SelectMany(e => e.GetForeignKeys()))\n    {\n        relationship.DeleteBehavior = DeleteBehavior.Restrict;\n    }\n    base.OnModelCreating(builder);\n\n}\n\n```\n. ",
    "IsmailHassani": "I'm using a custom ctor that generates a new guid (my id's are based on Guid's)\n. ",
    "dotnetjalps": "I have already created code for user store. I need to use that user store in UserManger class.\n```\npublic class ApplicationUserStore : UserStore\n    {\n        public ApplicationUserStore(Rg2Context context)\n          : base(context)\n        {\n        }\n    public int TenantId{ get; set; }\n\n    public override Task<ApplicationUser> FindByNameAsync(string userName, CancellationToken cancellationToken = new CancellationToken())\n    {\n        return this.GetUserAggregateAsync(u => u.UserName.ToUpper() == userName.ToUpper()\n              && TenantId== this.TenantId);\n    }\n\n    public override Task<ApplicationUser> FindByEmailAsync(string email, CancellationToken cancellationToken = new CancellationToken())\n    {\n        return this.GetUserAggregateAsync(u => u.Email.ToUpper() == email.ToUpper()\n               && u.TenantId == this.TenantId);\n    }\n\n    Task<ApplicationUser> GetUserAggregateAsync(Expression<Func<ApplicationUser, bool>> filter)\n    {\n        return Users.Include(u => u.Roles)\n            .Include(u => u.Claims)\n            .Include(u => u.Logins)\n            .FirstOrDefaultAsync(filter);\n    }\n}\n\n```\n. Sorry the late reply. its working fine thank you. \n. ",
    "gehbeez": "how did it work for you . ",
    "aminebizid": "They forget a string in here\npublic class UserStore : UserStore<IdentityUser<string>>\n. Thanks Haok\n. @jvelezc Ecxellent doc\n. I have an FK in my business classes called InputUser allowing us to log and audit database updates.\nThis FK points Identity user table.\nDo you think I'll get errors if I move identity tables to security schema?\n. I need to add DateFrom, DateTo in usersroles and manage authorisations using policies.\nFor now, we added our own table userrole to manage that and I believe it will be very useful if we manage that using Identity.\n. This is a good news as u said.\nBut once this PR merged do I have to update manually the Nuget version in my project.json?\n. Do they have ci nightly builds?\n. 1. They should not user RC3 (community standup)\n2. I tried to do the same with EF but same errors (package restore failed)\n3. I wonder if Msft is really playing open source (unable to build). \n. Apologies for Msft team.\nI'm now able to build without samples\n\ud83d\udc4d\ud83c\udffc\n. ",
    "sayedihashimi": "What about command line users?\n. ",
    "olaeke2": "Cookie problem, when I cleared the cookie in IE it started working. Obviously some garbage in the cookies\n. ",
    "gray29": "Its difficult as it is on production server that I'm not given access so I can only see general error page via browser. On dev server which is supposed to be duplicate of production I don't get the issue. \nI don't think data is cached. I think the cookie is the old cookie so the User object gets info from there as after logging in I see the first user who logged in's details. Deleting the cookie I can't login at all (except when on VPN)\nHaving a site work while I'm on a VPN but not when I'm on it with the exact same URL is what I don't understand. Never had such an issue before.\n. What I don't understand is if I delete all cookies (tested on all desktop browser and mobile phone browser) and want to log in again, it doesn't allow me. The form posts to the server. the Result back is login failed. Running a database trace and nothing. The page refuses to create a new cookie. (On the VPN and working dev server over the internet  it does create cookie)\nThe only difference is \nThe signing in is the first step after the post\n```\n    [HttpPost]\n    [AllowAnonymous]\n    [ValidateAntiForgeryToken]\n    public async Task Login(LoginViewModel model, string returnUrl = null)\n    {\n  ViewData[\"ReturnUrl\"] = returnUrl;\n   if (ModelState.IsValid){\n         SignInResult result = await _signInManager.PasswordSignInAsync(model.Username, model.Password, false, lockoutOnFailure: false);\n\n```\nSignInResult  has no field to explain why it failed. Just Success Yes or No. No exception is thrown either.\nIf I restart the IIS worker process I can log in with the  again by immediately clicking the Login button without even refreshing the Login page.\nI don't have any IP filtering or settings. I can't explain why it works on VPN but not over internet.\nI have customized Identity to make use of Guids instead of the default string\npublic class ApplicationUser : IdentityUser<Guid>\nApart from that my code is taken from  the default template.\nEverything  works  on the VPN on production server, has the issues over internet. It behaves consistent when at office / or using 3G from my android phone with its mobile browser or my home ISP across all browsers. The VPN over internet which works 100% correct / direct internet behavior where cookies behave strange is consistent across multiple devices and networks.\nSo it isn't a client browser proxy.\nVPN over internet  works but internet direct  has the issue over the  same https url. A dev server with the same IIS version, Windows version and .net version and exact same site deployed does not have the issue over the internet\n. Using fiddler:\nIf I delete the cookies in the page and reload my login page (HTTP Get) an Identity Cookie is sent in that GET's response. If I do the same while not on the VPN a cookie is not sent in the GET's response.\nIn fiddler if I replay the GET that got a cookie while on the VPN , when I am not on the VPN, I get no cookie in the GET's response. So the client request is identical.\n. Regarding the production server treating cookies differently direct on the internet and not via VPN over internet with the same https//url I cannot explain. One difference I picked up in fiddler is that when on the VPN or to the dev server the content gets encoded/zipped but not to production not via VPN. Not sure why IIS behaves this way or if it is related to the problem I am experiencing.\nRegarding the strange behavior ONLY when not on the VPN. \nIt is basically two issues. The one issue of when deleting the cookie a new cookie doesn't get created. I found the the reason for this was the Identity cookie being in  conflict with Microsoft. AspNet Session\nI  found an answer googling here. Setting a dummy session value before login  worked somewhat but I decided to remove using sessions and Microsoft. AspNet Session from my application to eliminate any other conflicts. So I'm not experiencing a new cookie not wanting to get created when I force delete the old one over internet when not on VPN to production anymore.\nThe 2nd issue of logging with user X, logging out, log in with user Y and getting user X details still always occurs when not on VPN. I suspect the cookie isn't updated or something gets cached.\nThe errors I get sometime User.IsAuthenticated= false and User.GetUserId() =null\nand\nawait _signInManager.SignOutAsync();\ncan throw error.\nTo not get errors I commented out the Authorize attribute and put the code in a conditional if\nif (User.Identity.IsAuthenticated) { await _signInManager.SignOutAsync(); }\nThe issue I get seems to be getting the wrong User.GetUserId. The errors I don't often get it is only sometimes when User.GetUserId() becomes null and as a result  my code failing because it is unexpected\nThe only similar issue I could find googling solution is to set cookie validateInterval to 0 however that property doesn't exist anymore from what I could find in Identity 3 RC1\n. The issue can only be to do with caching. This might explain why over VPN I don't get the issue. There must be a server caching https server traffic.\nI log in as user X. Access some page. Then log out. \nLog in as user Y. then all the pages that user X accessed previously shows user X details instead of user Y.\nIf I access a page that user X hasn't accessed  it will show user Y's page. \nErrors a get is because the cached page contains user X's details but the server know I am logged in a user Y.\nFor example when I log out. Because the page thinks I am user X but the server thinks I am user Y I get a subsequent error\n. closed as proxy/cache related\n. Issue is only to do when set CookieOptions and possibly using Microsoft.AspNet.Session in conjunction. \n If the defaults gets used i.e. don't set any options.Cookie and isPersistent is set to true then it works correctly and cookies do get created. \nIf examples of what valid combinations for certain settings exist then that would be helpful.\n. ",
    "Angeland": "injecting like this makes the bug appear. if anyone looks at this. (so it was kindof my own bug :)\nprivate readonly RoleManager<ApplicationRole> _roleManager;\n    private readonly UserManager<ApplicationRole> _userManager;\n    private readonly CmsDbContext _ctx;\n    public ManageRoleController(CmsDbContext ctx,\n        RoleManager<ApplicationRole> roleManager,\n        UserManager<ApplicationRole> userManager)\n    {\n        _ctx = ctx;\n        _roleManager = roleManager;\n        _userManager = userManager;\n    }\n. ",
    "kdelorey": "@HaoK I was writing a large overview of what I was trying to do and what the result was and I stumbled upon my problem. Sometimes you just have to talk these things out. I apologize for the inconvenience. It is a slight difference in behavior from RC1 to RC2, but I believe it is a mistake from my ported code and RC2 has the appropriate behavior.\nBasically I was creating a default account in a role:\nC#\nawait mUserManager.CreateAsync( account, \"Admin1\" );\nawait mUserManager.AddToRoleAsync( account, UserRole.AdministratorName );\n..but when I was finished adding the user to the role, I forgot to update:\nC#\nawait mUserManager.UpdateAsync( account );\nThanks for your support regardless.\n. ",
    "TheBeardedLlama": "Thanks for the fix @HaoK \nI was away last week, but I will give it a go now\nYup all working! :D\n. ",
    "pachecosoftware": "When using the 1.0.0-rc3-21101 nightly build, I am getting this same error even when using string as the TKey generic argument of IdentityUser, but only in cases where my ApplicationUser class explicitly extends IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> rather than IdentityUser<TKey>.\nIn order words, everything works fine when my ApplicationUser class is defined as follows:\npublic class ApplicationUser : IdentityUser<string> { ... }\nbut when the ApplicationUser class is defined like this:\npublic class ApplicationUser : IdentityUser<string, IdentityUserClaim<string>, IdentityUserRole<string>, IdentityUserLogin<string>> { ... }\nthe following error occurs at runtime only (but not at compilation):\nGenericArguments[0], 'MyWeb.Models.ApplicationUser', on 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`4[TUser,TRole,TContext,TKey]' violates the constraint of type 'TUser'.\nat System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\nat System.RuntimeType.MakeGenericType(Type[] instantiation)\nat Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.GetDefaultServices(Type userType, Type roleType, Type contextType, Type keyType)\nat Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores<TContext, TKey>(IdentityBuilder builder)\nat MyWeb.Startup.ConfigureServices(IServiceCollection services)\nOriginally, I was using a Guid type for the key and providing my own implementations for each of the Identity role, claim and login classes, but I rolled everything back to just use all of the standard implementations as shown above to make sure that there wasn't something in my code that was causing the issue, but it made no difference.  \nMy Startup.cs contains the following:\nservices.AddIdentity<ApplicationUser, IdentityRole<string>>()\n                .AddEntityFrameworkStores<ApplicationDbContext, string>()\n                .AddDefaultTokenProviders();\nBased on the stack trace, and looking through the code, it seems that Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores<TContext, TKey>() is then invoking GetDefaultServices(), whose implementation attempts to instantiate a new UserStore<TUser, TRole, TContext, TKey>, rather than a new UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.  The  version of the UserStore with only four generic arguments assumes that TUser will be an instance of IdentityUser<TKey>, not IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin>, and it seems that perhaps this is causing the issue.\nI tried to create my own implementation ofUserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> called MyUserStore and modified the Startus.cs as follows:\nservices.AddIdentity<ApplicationUser, IdentityRole<string>>()\n                .AddEntityFrameworkStores<ApplicationDbContext, string>()\n                .AddUserStore<MyUserStore>()\n                .AddDefaultTokenProviders();\nHowever, that also made no difference, as it looks like AddEntityFrameworkStores() attempts to load up the default implementation before it tries to replace it with my implementation.\nMy ultimate goal is to be able to create my own implementation of the various Identity classes to support a custom multi-tenant configuration, but this error is preventing me from making any progress on that front.  Any light you could shed would be greatly appreciated.  I do have an example zipped up, but I was not able to attach it here for some reason.\n. Thanks for the quick response and the clarification.  Do you happen to know if adding the syntactic sugar to support this sort of configuration is on the roadmap for some future release?\n. ",
    "dbratsun": "Hi! Is here the progress in this question?\n. ",
    "dougmany": "\nbasically you need to mimic what that method currently does, just passing in the correct types.\n\nI am attempting this and have a strange issue.  Trying to recreate AddEntityFrameworkStores I have:\n``` C#\n    public static IdentityBuilder CCIRTSAddEntityFrameworkStores(this IdentityBuilder builder) where TContext : DbContext\n    {\n        var userType = typeof(IdentityUser);\n        var roleType = typeof(IdentityRole);\n        var userStoreType = typeof(UserStore);\n        var roleStoreType = typeof(RoleStore);\n    var services = new ServiceCollection();\n            services.AddScoped(\n            typeof(IUserStore<>).MakeGenericType(userType),\n            userStoreType);\n    services.AddScoped(\n            typeof(IRoleStore<>).MakeGenericType(roleType),\n            roleStoreType);\n    builder.Services.TryAdd(services);\n\n    return builder;\n    }\n\n```\nI am getting this error message:\n\nThe type 'CCIRTS.Models.ApplicationRole' cannot be used as type parameter 'TRole' in the generic type or method 'UserStore'. There is no implicit reference conversion from 'CCIRTS.Models.ApplicationRole' to 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole>'.\nFramework 4.5.2\n\"\n\nMy ApplicationRole is:\n``` C#\npublic class ApplicationRole : IdentityRole\n    {\n        public ApplicationRole() : base() { }\n    [MaxLength(128)]\n    public override String Id { get; set; }\n    public virtual string Description { get; set; }\n    public virtual ICollection<ApplicationRoleToUserGroup> ApplicationRoleUserGroups { get; set; }\n}\n\n```\nMy ApplicationUserRole is:\n``` C#\n    public class ApplicationUserRole : IdentityUserRole\n    {\n        public ApplicationUserRole() : base() { }\n    [MaxLength(128)]\n    public override String RoleId { get; set; }\n\n    [MaxLength(128)]\n    public override String UserId { get; set; }\n\n}\n\n```\nMy ApplicationRoleClaim is:\n``` C#\n    public class ApplicationRoleClaim : IdentityRoleClaim\n    {\n        public ApplicationRoleClaim() : base() { }\n        [MaxLength(128)]\n        public override String RoleId { get; set; }\n}\n\n```\nFYI, This is all just to get the ID to 128 character because my many to many relationship key was exceeding 900  bytes and not allowing migrations to work.\nC#\nbuilder.Entity<ApplicationRoleToUserGroup>().HasKey(a => new { a.ApplicationRoleID, a.UserGroupID });\n. Looking more I found this:\nC#\npublic abstract class UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> : IUserLoginStore<TUser>, IUserStore<TUser>, IDisposable, IUserRoleStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IQueryableUserStore<TUser>, IUserTwoFactorStore<TUser>, IUserAuthenticationTokenStore<TUser>\n        where TUser : IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin>\n        where TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>>\n        where TContext : DbContext\n        where TKey : IEquatable<TKey>\n        where TUserClaim : IdentityUserClaim<TKey>\n        where TUserRole : IdentityUserRole<TKey>\n        where TUserLogin : IdentityUserLogin<TKey>\n        where TUserToken : IdentityUserToken<TKey>\nIt looks like \"where TRole\" must have a IdentityRoleClam, not a TRoleClaim.  How do I get around this?\n. ",
    "davidgoh": "public abstract class UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> : IUserLoginStore<TUser>, IUserStore<TUser>, IDisposable, IUserRoleStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IQueryableUserStore<TUser>, IUserTwoFactorStore<TUser>, IUserAuthenticationTokenStore<TUser>\n        where TUser : IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin>\n        where TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>>\n        where TContext : DbContext\n        where TKey : IEquatable<TKey>\n        where TUserClaim : IdentityUserClaim<TKey>\n        where TUserRole : IdentityUserRole<TKey>\n        where TUserLogin : IdentityUserLogin<TKey>\n        where TUserToken : IdentityUserToken<TKey>\nwhere TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>>\nThis is a bug? Shouldn't it be TRoleClaim ? \nwhere TRole : IdentityRole<TKey, TUserRole, TRoleClaim >\n. ",
    "ngohungphuc": "Put this in Startup.cs file\nusing (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())\n            {\n                serviceScope.ServiceProvider.GetService<ApplicationDbContext>().SeedUser();\n            }\nCreate a helper class like this and put everything you want to seed in it\n```\npublic static async void SeedUser(this ApplicationDbContext context)\n        {\n            string[] roles = new string[] { \"Administrator\", \"Manager\", \"Developer\", \"Accountant\", \"Designer\", \"Client\", \"Watcher\" };\n        foreach (var role in roles)\n        {\n            var roleStore = new RoleStore<IdentityRole>(context);\n            //add default  role to db\n            if (!context.Roles.Any(r => r.Name == role))\n            {\n                await roleStore.CreateAsync(new IdentityRole(role));\n            }\n        }\n\n\n    }\n\n```\n. @SimonOrdo @H4Himanshu @eswise @GRTSolutionsLTD  you guys can check my code to solve this issue\nhttps://github.com/Awesome-CMS-Core/Awesome-CMS-Core/blob/master/src/AwesomeCMSCore/Modules/AwesomeCMSCore.Modules.Entities/Entities/ApplicationRole.cs. @Aleksaas you must specific your id in int type not Guid. I want to get in service class. @blowdart is there any cleanner way to achieve it . @HaoK ok so how how about multi role for 1 users. @HaoK your suggest not working\n\n. @HaoK I mean when I already have account I want to login to system and the LockoutEnabled is set to true after 2 times login fail . ",
    "PaulDeac": "@divega \n\nWe want to publish it as a supplement to a step-by-step guide on how to do that, but it isn't clear we should make it part of any supported product.\n\nHi, is there any guide online on how to use this package ? I'm migrating an MVC 5 (with EF 6) web application to .net core. I've decided not to migrate to entity framework core yet, so i've created a class library project which holds the EF 6 db context and migrations, and referenced that in the main .net core web application. All shine and rozy, but i'm facing problems now migrating the identity. Been thinking this package would help me out.\nIf i'm not mistaken it's not possible to keep using the old membership (Microsoft.AspNet.Identity.Core v2.2.1) in a .Net Core project, and the idea is to migrate to Microsoft.AspNetCore.Identity, but i want to keep using Entity Framework 6. \nThanks.\n. Thanks. @HaoK \nI'll try that.\n. ",
    "simeyla": "@HaoK is there a guide for this anywhere though? I can probably 'wing it' but this is the kind of thing where a small nuance is going to kill me - and my website if I make a wrong assumption.. ",
    "chinadragon0515": "No, we are not use .NET core.\nThis is from our package.config file,\n  < package id=\"Microsoft.AspNet.WebApi\" version=\"5.2.3\" targetFramework=\"net45\" />\n  < package id=\"Microsoft.AspNet.WebApi.Client\" version=\"5.2.3\" targetFramework=\"net45\" />\n  < package id=\"Microsoft.AspNet.WebApi.Core\" version=\"5.2.3\" targetFramework=\"net45\" />\n  < package id=\"Microsoft.AspNet.WebApi.WebHost\" version=\"5.2.3\" targetFramework=\"net45\" />\n. stackoverflow question is http://stackoverflow.com/questions/37604029/webapi-project-entity-framework-asynchronize-call-does-not-use-the-same-account\n. ",
    "johnkattenhorn": "I've resolved this by doing a git clean -dfx and making sure there was no old stuff around.\nWorking now\n. ",
    "yang-xiaodong": "I have the same problems\n. All right then.. I changed a lot of content in identity 1.0, I'm very tired when migrations to 2.0 ,I think this is a design mistake of identity. ",
    "devilsuraj": "not needed .. i was stupid.... found simple solution.\n. ",
    "casertano": "@blowdart here's a simple example that used to validate the problem.\nFollows the model applied in Startup.cs:\nservices.AddAuthorization(options =>\n            {\noptions.AddPolicy(\"PROJECT_INSERT\", policy => policy.RequireClaim(\"PROJECT\", \"INSERT\"));\noptions.AddPolicy(\"PROJECT_VIEW\", policy => policy.RequireClaim(\"PROJECT\", \"VIEW\"));\noptions.AddPolicy(\"PROJECT_UPDATE\", policy => policy.RequireClaim(\"PROJECT\", \"UPDATE\"));\noptions.AddPolicy(\"PROJECT_DELETE\", policy => policy.RequireClaim(\"PROJECT\", \"DELETE\"));\n            });\nThe application to the Controller, for example:\n[Authorize(\"PROJECT_VIEW\")]\n  public IActionResult Index()\n  {\n        return View(model);\n  }\nRelationships in the database:\nAspNetRole (Is not recognized in the Police):\nId: 0be5574b-e86f-4a41-b944-34495bcd05b6\nComcurrencyStamp: A0EA7225-C235-43FE-83DA-7399720252A1\nName: Project Manager\nNormalizedName: PROJECT_MANAGER\nAspNetRoleClaims:\nId: 4333\nClaimType: PROJECT\nClaimValue: VIEW\nRoleId: 0be5574b-e86f-4a41-b944-34495bcd05b6\nRelated to Role with the User, it does not authorize the Controller above, but if you change the NormalizedName for PROJECT MANAGER (no underscore), works.\nTks,\n. ",
    "angelobelchior": "@Haok If the field \"Name Normalized\" should be the \"Name\" field in uppercase format, for which reason we can set a value for it?\n. ",
    "clarkis117": "They were moved: https://github.com/aspnet/Announcements/issues/140\n. ",
    "lixiaoyuan": "@HaoK 1.0.1 Released?If not,how to solve this problem now.Thank you\n. @divega  \nproject.json\n{\n  \"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"preserveCompilationContext\": true,\n    \"debugType\": \"portable\"\n  },\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    //\u9879\u76ee\u5f15\u7528\n    \"BusinessDb.Cor\": \"1.0.1\",\n    //web\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0\",\n    \"Microsoft.Extensions.Configuration.FileExtensions\": \"1.1.0-alpha1-21569\",\n    //Diagnostics\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    //mvc\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.0-alpha1-21569\",\n    //staticfiles\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.1.0-alpha1-21569\",\n    //Identity\n    \"Microsoft.AspNetCore.Identity\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Identity.EntityFrameworkCore\": \"1.0.0\",\n    //entityFramework\n    \"Microsoft.EntityFrameworkCore\": \"1.0.1\",\n    \"Microsoft.EntityFrameworkCore.SqlServer\": \"1.0.1\",\n    \"Microsoft.EntityFrameworkCore.Tools\": \"1.0.0-preview2-final\"\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\":{\n       \"imports\": [\n        \"dotnet5.6\",\n        \"portable-net45+win8\"\n      ]\n    }\n  },\n  \"publishOptions\": {\n    \"include\": [\n      \"wwwroot\",\n      \"web.config\"\n    ]\n  },\n  \"runtimeOptions\": {\n    \"configProperties\": {\n      \"System.GC.Server\": true\n    }\n  },\n  \"scripts\": {\n    \"postpublish\": [ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" ]\n  },\n  \"tools\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": \"1.0.0-preview2-final\"\n  }\n}\n. @divega \n1. I want to modify the entity primary key type.\n2. Add fields to user entity .\nYou said I did not have to inherit the seven base class?\nBut I still do not know the wrong code above the problem\nIf you can not read what I'm saying, because I am using it translate.google.cn \n. @divega  Yes Mr,\nThank you  very much  for your answer.\n I use only have one generic argument to solve.\nand also ,Where on the Identity structure diagram?\n. ",
    "StrangeWill": "Any idea on when a 1.1.0 release is coming out? Just ran into this wall and it appears I have no workarounds for customizing Identities to this extent. Will there be a 1.0.1 to fix this?\n. ",
    "wickstargazer": "One question i have, Why does the makegeneric always dies with violation error no matter if we fixed the GenericTypes... This happens for the AddEntityFrameworkStores function.\n. ",
    "borislavml": "What happened with this bug.I'm extending Identity(so obviously also implementing UserStore) with Microsoft.AspNetCore.Identity.EntityFrameworkCore v 1.1.1 and this is still there. I'm really stuck at this point and can't get a workaround as it's not possible to bypass.Any suggestions or comments when and how it will be fixed?. ",
    "Ro3A": "Thanks guys for the work around. Just wanted to add a scenario and a voice here. An internal employee added a user to our site on Friday and triggering an activation email for the new user. New user didn't click the activation link until  Monday. Token expired. It would be ideal to have an easy options configuration similar to how AddIdentity is done. \n. ",
    "Gillardo": "Any news on all this?  Has it all been done so i can change the tokenLifeTime for just the EmailConfirmation token??. Any chance someone has code sample to show this?. ",
    "dotnetshadow": "Yes do you have example code on how to do this?\nHow do you change the message from simply \"Invalid Token\" ?. Yes do you have example code on how to do this?\nHow do you change the message from simply \"Invalid Token\" ?. Hi there, \nVery strange it looks like the latest Chrome updates have fixed this issue as of Version 56.0.2924.87. Prior to this I was having issues on multiple machines. Hi there, \nVery strange it looks like the latest Chrome updates have fixed this issue as of Version 56.0.2924.87. Prior to this I was having issues on multiple machines. ",
    "jrgunawan": "@HaoK Could you please give code sample on how to change the TokenLifeSpan utilizing the change on TokenProviderDescriptor? \nMy understanding when looking at https://github.com/aspnet/Identity/pull/983/files#diff-1f767f1c742b161c6a1650ec072addeeR645 , I need to create an instance of DataProtectorTokenProvider (because I want to reuse IUserTwoFactorTokenProvider implementation), modify its DataProtectionTokenProviderOptions.TokenLifeSpan, then assign that instance to the ProviderInstance. \nAm I on the right track? Currently, I am still using @lcalabrese 's implementation.. ",
    "snjay": "Also looking for a code sample to change the TokenLifeSpan. Have there been any updates?. ",
    "mskurnik": "For me I had to add an a little bit more info when adding the identity in order to force the new token provider on password create and update.\nC#\nservices.AddIdentity<ApplicationUser, IdentityRole>(\n    options =>\n    {\n        options.Tokens.PasswordResetTokenProvider = EmailConfirmationTokenProviderName;\n        options.Tokens.EmailConfirmationTokenProvider = EmailConfirmationTokenProviderName;\n    })\n    .AddEntityFrameworkStores<PortalDbContext>()\n    .AddDefaultTokenProviders()\n    .AddTokenProvider<ConfirmEmailDataProtectorTokenProvider<ApplicationUser>>(EmailConfirmationTokenProviderName);. ",
    "ngnam": "thanks ! \nbut i want know why must use \nusing static App.ConfirmEmailDataProtectorTokenProvider;\n services.Configure<ConfirmEmailDataProtectionTokenProviderOptions>(options =>\n        {\n            options.TokenLifespan = TimeSpan.FromMinutes(5);\n        });\n\n. ",
    "willdaviesdevelops": "The previous cited url of \"https://github.com/aspnet/Identity/blob/dev/src/Microsoft.AspNetCore.Identity/TokenOptions.cs\" is broken (404).\nConsider this link as an alternative: TokenOptions.cs. ",
    "pingcrosby": "I am having the same issues now  - how are you handling it?\n. Just as an aside - the same symptoms occur with Google and Microsoft providers.  If a user presses the browser back button for example at the ExternalLoginCallback page - the server hangs.\n. ",
    "magnusbakken": "IUserStore can't be covariant because there's a method on it where the TUser type parameter is used as input. In fact this is true of almost all the operations on the interface. This is an important rule for the variance feature in the C# type system.\nIf you think about it you'll see why this restriction is in place. Consider this scenario:\n``` c#\npublic class A { }\npublic class B : A\n{\n    public string UserId { get; set; }\n}\npublic class UserStoreB : IUserStore\n{\n    public Task GetUserIdAsync(B user, CancellationToken cancellationToken)\n    {\n        return Task.FromResult(user.UserId));\n    }\n// ...\n\n}\nIUserStore store = new UserStoreB(); // Would be legal if IUserStore were covariant.\nA user = new A();\nstring userId = await store.GetUserIdAsync(user, cancellationToken);\n```\nYou're now calling an implementation of GetUserIdAsync that expects a variable of type B, but instead it receives an A. This can't possibly work, since instances of A don't even have the UserId property that's being used in the method.\nI think you need to rethink your architecture here. I'm not sure I understand exactly what it is you're trying to accomplish.\n. IUserStore can't be covariant because there's a method on it where the TUser type parameter is used as input. In fact this is true of almost all the operations on the interface. This is an important rule for the variance feature in the C# type system.\nIf you think about it you'll see why this restriction is in place. Consider this scenario:\n``` c#\npublic class A { }\npublic class B : A\n{\n    public string UserId { get; set; }\n}\npublic class UserStoreB : IUserStore\n{\n    public Task GetUserIdAsync(B user, CancellationToken cancellationToken)\n    {\n        return Task.FromResult(user.UserId));\n    }\n// ...\n\n}\nIUserStore store = new UserStoreB(); // Would be legal if IUserStore were covariant.\nA user = new A();\nstring userId = await store.GetUserIdAsync(user, cancellationToken);\n```\nYou're now calling an implementation of GetUserIdAsync that expects a variable of type B, but instead it receives an A. This can't possibly work, since instances of A don't even have the UserId property that's being used in the method.\nI think you need to rethink your architecture here. I'm not sure I understand exactly what it is you're trying to accomplish.\n. ",
    "onedevteam": "SubscriptionService is registered in Startup.ConfigureServices with \nservices.AddTransient<ISubscriptionService, SubscriptionService>();\nand i'm using userManager inside function: \n```\n public async void Create(...) {\nvar user = userManager.GetUserByNameAsync(name);\n.\n.//do something with user\n.\nuserManager.UpdateAsync(user); // this is where exception is thrown\n}\n``\n. @dallancarr If i don't reference service, when i try to call it i get compile errorAn object reference is required for the non-static field, method, or property 'SubscriptionService.Create(string, Plan, string)'`\n. Update: i have replaced  in my Startup.ConfigureServices()\nservices.AddTransient<ISubscriptionService, SubscriptionService>();\nwith \nservices.AddSingleton<ISubscriptionService, SubscriptionService>();\nand app worked as it should be.\n. Controller constructor: \n```\n        private IPlanService planService;\n        private ISubscriptionService subscriptionService;\n        private UserManager _userManager;\n    public SubscriptionController(IPlanService planService, \n                                    ISubscriptionService subscriptionService, \n                                    UserManager<ApplicationUser> userManager)\n    {\n        this._userManager = userManager;\n        this.planService = planService;\n        this.subscriptionService = subscriptionService;\n    }\n\n``\n. @brockallen I know that, this is actualy test code i made to examine another issue i have with UserManager<> class when running with Roles enabled.\nWhen i try to _userManager.UpdateAsync(), i'm getting error that data can't be updated because[FK_IdentityUserRole_ApplicationUser_UserId]` conflict with AspNetUserRoles table.\n. ",
    "eklam": "I'm experiencing the same issue. I'm not using the context myself to retreive anything, just calling UpdateAsync. If I change the username field it works as expected, changing any other field causes the problem:\nHere's the stack trace:\nSystem.InvalidOperationException: The instance of entity type 'User' cannot be tracked because another instance with the same key value for {'Id'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1.Add(TKey key, InternalEntityEntry entry)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.StartTracking(InternalEntityEntry entry)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState oldState, EntityState newState, Boolean acceptChanges)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry.SetEntityState(EntityState entityState, Boolean acceptChanges, Boolean forceStateWhenUnknownKey)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.PaintAction(EntityEntryGraphNode node)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator.TraverseGraph(EntityEntryGraphNode node, Func`2 handleNode)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher.AttachGraph(InternalEntityEntry rootEntry, EntityState entityState, Boolean forceStateWhenUnknownKey)\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState(InternalEntityEntry entry, EntityState entityState)\n   at Microsoft.EntityFrameworkCore.DbContext.SetEntityState[TEntity](TEntity entity, EntityState entityState)\n   at Microsoft.EntityFrameworkCore.DbContext.Attach[TEntity](TEntity entity)\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.<UpdateAsync>d__23.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Microsoft.AspNetCore.Identity.UserManager`1.<UpdateUserAsync>d__171.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Yangaroo.Awards.Admin.Application.UserManagement.Services.UserService.<SaveUserDetailsAsync>d__20.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Application\\UserManagement\\Services\\UserService.cs:line 277\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Yangaroo.Awards.Admin.Web.Controllers.UsersController.<Put>d__9.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Web\\Controllers\\UsersController.cs:line 82\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Yangaroo.Awards.Admin.Web.Infrastructure.Middleware.AntiForgeryMiddleware.<Invoke>d__3.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Web\\Infrastructure\\Middleware\\AntiForgeryMiddleware.cs:line 44\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Yangaroo.Awards.Admin.Web.Infrastructure.Middleware.ErrorMiddleware.<Invoke>d__3.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Web\\Infrastructure\\Middleware\\ErrorMiddleware.cs:line 46\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Yangaroo.Awards.Admin.Web.Infrastructure.Middleware.SpaFallbackMiddleware.<Invoke>d__5.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Web\\Infrastructure\\Middleware\\SpaFallbackMiddleware.cs:line 42\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Yangaroo.Awards.Admin.Web.Infrastructure.Middleware.MissingShowCodeMiddleware.<Invoke>d__4.MoveNext() in C:\\proj\\AwardsV3\\Yangaroo.Awards\\Yangaroo.Awards.Admin.Web\\Infrastructure\\Middleware\\MissingShowCodeMiddleware.cs:line 44\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext(). ",
    "kroniak": "@ikourfaln No, I dont mean that.\n. I have some trouble in my application on 1.0.0 and in fresh WebApplication template with oAuth.\nI see in logs:\n2016-07-27 21:44:41 [Information] AuthenticationScheme: \"Identity.External\" was successfully authenticated.\n2016-07-27 21:44:41 [Information] AuthenticationScheme: \"Identity.External\" was forbidden.\n2016-07-27 21:44:41 [Information] AuthenticationScheme: \"Google\" was forbidden.\nand redirect to /Account/AccessDenied\nI tried add await SignInManager.SignOutAsync(); to ExternalLogin methods but it not works.\n. @gdoron In my situation await SignInManager.SignOutAsync() not works. \n2016-07-27 22:07:06 [Information] AuthenticationScheme: \"Identity.Application\" signed out.\n2016-07-27 22:07:06 [Information] AuthenticationScheme: \"Identity.External\" signed out.\n2016-07-27 22:07:06 [Information] AuthenticationScheme: \"Identity.TwoFactorUserId\" signed out.\n2016-07-27 22:07:23 [Information] Executing ChallengeResult with authentication schemes ([\"Ecwid\"]).\n2016-07-27 22:07:23 [Information] AuthenticationScheme: \"Identity.External\" was successfully authenticated.\n2016-07-27 22:07:23 [Information] AuthenticationScheme: \"Identity.External\" was forbidden.\n2016-07-27 22:07:23 [Information] AuthenticationScheme: \"Ecwid\" was forbidden.\n2016-07-27 22:13:47 [Warning] Authorization failed for the request at filter '\"Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter\"'.\n2016-07-27 22:13:47 [Information] Executing ChallengeResult with authentication schemes ([]).\n2016-07-27 22:13:47 [Information] AuthenticationScheme: \"Identity.Application\" was challenged.\n2016-07-27 22:13:48 [Information] Executing ChallengeResult with authentication schemes ([\"Google\"]).\n2016-07-27 22:13:48 [Information] AuthenticationScheme: \"Identity.External\" was successfully authenticated.\n2016-07-27 22:13:48 [Information] AuthenticationScheme: \"Identity.External\" was forbidden.\nAfter first time was happen there are no successful login with oauth. \nI can delete Identity.External Cookie but is a bug.\n. @mikes-gh I would be a bit simplified your code:\n``` c#\n        [HttpPost]\n        [AllowAnonymous]\n        [ValidateAntiForgeryToken]\n        public async Task ExternalLogin(string provider, string returnUrl = null)\n        {\n            var info = await SignInManager.GetExternalLoginInfoAsync();\n        if (info?.LoginProvider == provider)\n            return RedirectToAction(nameof(ExternalLoginCallback), \"Account\");\n\n        if (info != null)\n            await SignInManager.SignOutAsync();\n\n        // Redirect needed to logout\n        return RedirectToAction(nameof(ExternalLoginRedirect), \"Account\", new { provider, returnUrl });\n    }\n\n    [HttpGet]\n    [AllowAnonymous]\n    public IActionResult ExternalLoginRedirect(string provider, string returnUrl = null)\n    {\n        var redirectUrl = Url.Action(\"ExternalLoginCallback\", \"Account\", new { ReturnUrl = returnUrl });\n        var properties = SignInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\n        return new ChallengeResult(provider, properties);\n    }\n\n```\n. @Tratcher \nOption1. What if the user happened to be on the login page? Log out? I think not.\nOption 2. What if the user is in the middle of the process, he changed his mind and decided to login through a login password?\nI think @mikes-gh workaround is more logicaly.\n. @Tratcher I think that user wants to log in when it press login button. User can follow /login page by bookmarks or by mistake and then It will change mind and clicks back and see login page again.\n. @blowdart I think this is issue and this tables must have string id. Then we can be move between databases (like PG and SQL) without recreate ef core migrations code. \n. @blowdart As you see\nc#\n migrationBuilder.CreateTable(\n                name: \"AspNetUserClaims\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(nullable: false)\n                        .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true),\n                    ClaimType = table.Column<string>(nullable: true),\n                    ClaimValue = table.Column<string>(nullable: true),\n                    UserId = table.Column<string>(nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AspNetUserClaims\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AspNetUserClaims_AspNetUsers_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"AspNetUsers\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\nEF Core added Npgsql:ValueGeneratedOnAdd and SqlServer:ValueGeneratedOnAdd tags to migration and it cannot moving between databases. On production it tryes pick up dll like EntytityFramaworkCore.SqlServer.\nMay be it is EF Core issue.\n. @blowdart @divega There are any information?\n. @divers yes, of course I can add this options manually.  I don't understand the logic. in user table, role tables there are string pk, here are int pk. Why?\n. ",
    "liamwang": "I prefer to use sequential GUIDs as primary keys. Sequential GUIDs are more efficient than string, even more efficient than auto increment int. It is friendly to ORM frameworks, which avoid relying on the server to generate key values. It also has advantages in distribution system.\n. @arespr Thanks for your reply. \nI should google it first. These days I also found several implementations :\n- https://github.com/jhtodd/SequentialGuid\n- https://github.com/richardtallent/RT.Comb\n- https://github.com/mrtaikandi/SequentialGuid\nAnd this question is nothing about asp.net core identity. I think it should be closed. @HaoK \n. ",
    "YZahringer": "Yes I understand, but there no other/official way to import multiple users in bulk?\nRetrieve UserStore directly by DI is currently not possible, it would be a solution to avoid the cast.\n. ",
    "ElvisHalil": "Oh wow, worked, awesome, thank you!!\n. ",
    "gravity00": "@HaoK I see the point in that. The thing is, the core project offers a range of interfaces but, even if I want to only use them, I'll need to bring Entity Framework along and there's no simple way to avoid this.\nImagine I'm developing an application that will use ASP.NET Identity and the client wants to add more properties to the entities (lets imagine some metadata properties like CreatedOn, CreatedBy, UpdatedOn, and so on). If I want to use the Entity Framework implementation and the included IdentityContext, I'll have to extend the provided POCOs but now my repositories, which purpose is to hide data access implementation details from the business, are returning entities that are tied to a given implementation (which in this case uses Entity Framework). I could create my own replicas, but now I can't use the provided stores and IdentityContext because they don't extend from your entities.\n- Should this entities be provided in the core project? I also don't think so, because the data model is not relevant to the security logic.\n- Should this entities be provided in as a separate dependency? I really believe so, since it would only tie your entities to a know data model but not tying extenders to a given implementation detail (usage of Entity Framework) and would be still be treated as simple POCOs.\n. @HaoK thanks for the feedback. Some of the clients I work with have this requirements and can't commit to Entity Framework Core in the near future. We are already using this NuGet (different namespace ofc) but it would be nice to have an official NuGet from Microsoft.\nWhat do you recommend to do since it wouldn't be in this repo?\n\nNote: didn't create any tests because I wanted to have feedback first. Since we are using it, I'm at the process of creating a direct map from EF Core tests to EF6, that should cover at least your expected cases..\n. This is far from the choice I would made but I understand that, with the current implementation, using a token parameter would be a major rework for you guys, so it is better than nothing.\n\nStill, I must admit the usage is kinda quirky, specially when using DI:\n```csharp\npublic class ExampleClass\n{\n    private readonly UserManager _userManager;\npublic ExampleClass(UserManager<IdentityUser> userManager){\n    _userManager = userManager;\n}\n\npublic async Task DoSomethingAsync(CancellationToken ct){\n    _userManager.CancellationToken = ct;\n\n    //  do stuff\n}\n\n}\n```. @divega I also believe the best solution would not to define the lengths and let the developer set them because this is not just a problem of setting a bigger length than the supported, but also by not setting them at all.\nAs an example, the size for ConcurrencyStamp fields are not set but, by experience, I can tell you this will be a problem for Oracle databases because the provider will assign the column as an NCLOB (that was the behavior of the EF6 provider, I'll assume with will stay that way for EFCore), which can't be used in where clauses.\nMaybe having some protected properties with default values for column sizes would be enough?. @stephtr reducing the sizes of columns would be a breaking change for people already using the framework. I had the same problems you faced using other databases and my solution was to change the columns lengths when overriding the OnModelCreating.\nExample:\n```csharp\npublic class ExampleIdentityDbContext : IdentityDbContext\n{\n    public ExampleIdentityDbContext(DbContextOptions options) : base(options)\n    {\n}\n\nprotected override void OnModelCreating(ModelBuilder builder){\n    base.OnModelCreating(builder);\n\n    //  this configuration should subsist over the default ones\n    builder.Entity<IdentityUser>(cfg =>\n    {\n        b.Property(u => u.UserName).HasMaxLength(128);\n        b.Property(u => u.NormalizedUserName).HasMaxLength(128);\n        b.Property(u => u.Email).HasMaxLength(128);\n        b.Property(u => u.NormalizedEmail).HasMaxLength(128);\n    });\n\n    //  apply to other entities as well\n    //  ...\n}\n\n}\n```. ",
    "atuzovic": "@brockallen Well, even though that makes some sense when observed from DDD perspective, it still does not explain this dependency chain. \nAs a matter of fact, I've taken a close look into your MembershipReboot projects structure, and that's a great example of clear separation of concerns. I don't see your MembershipReboot.Ef project referencing any of the web assemblies, which is what I was expecting to see here as well.\nThanks for the suggestion though, appreciated. :)\n. @divega Well yes, ideal solution would be to move out required abstractions to new package, and then to have Microsoft.AspNetCore.Identity and Microsoft.AspNetCore.Identity.EntityFrameworkCore both depend on that package. That would allow to remove dependency from Microsoft.AspNetCore.Identity.EntityFrameworkCore on Microsoft.AspNetCore.Identity and therefore remove need to include dependencies on web related packages in tiers that are responsible for data access.\nWhen it comes to patterns, it's never about them being a must, but about them being a good practice. If I was about to write my own store implementation, I would have to include Microsoft.AspNetCore.Identity in my project and pull web-related packages. I really don't think that's a good example on how to do stuff.\nThank you for considering this at least, and thanks @brockallen for giving your voice on this as well.\nKeep up the good work! :) \n. ",
    "cwe1ss": "I also think that depending on web assemblies/cookies is a huge disadvantage of this library. This could have been avoided easily and would have made this project massively more useful.\n. ",
    "mariuszkochanowski": "You could also consider decoupling DbContext from default identity domain model classes defined in Microsoft.AspNetCore.Identity.EntityFrameworkCore that are used and exposed by implementations of UserStore and RoleStore classes #920. \n. You could use one of these implementations to generate guids:\n`/// \n/// Code based on http://developmenttips.blogspot.com/2008/03/generate-sequential-guids-for-sql.html\n/// </summary>\n\n\npublic class SqlServerSequentialGuidGenerator\n{\n    //        With UIDs As(\n    //Select ID = 3, UID = cast('01000000-0000-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 2, UID = cast('00010000-0000-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 1, UID = cast('00000100-0000-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 0, UID = cast('00000001-0000-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 5, UID = cast('00000000-0100-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 4, UID = cast('00000000-0001-0000-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 7, UID = cast('00000000-0000-0100-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 6, UID = cast('00000000-0000-0001-0000-000000000000' as uniqueidentifier)\n    //Union Select ID = 8, UID = cast('00000000-0000-0000-0100-000000000000' as uniqueidentifier)\n    //Union Select ID = 9, UID = cast('00000000-0000-0000-0001-000000000000' as uniqueidentifier)\n    //Union Select ID = 10, UID = cast('00000000-0000-0000-0000-010000000000' as uniqueidentifier)\n    //Union Select ID = 11, UID = cast('00000000-0000-0000-0000-000100000000' as uniqueidentifier)\n    //Union Select ID = 12, UID = cast('00000000-0000-0000-0000-000001000000' as uniqueidentifier)\n    //Union Select ID = 13, UID = cast('00000000-0000-0000-0000-000000010000' as uniqueidentifier)\n    //Union Select ID = 14, UID = cast('00000000-0000-0000-0000-000000000100' as uniqueidentifier)\n    //Union Select ID = 15, UID = cast('00000000-0000-0000-0000-000000000001' as uniqueidentifier)\n    //)\n    //Select\\* From UIDs Order By UID\n    private static readonly int[] SqlOrderMap = { 3, 2, 1, 0, 5, 4, 7, 6, 9, 8, 15, 14, 13, 12, 11, 10 };\n\n```\n    private readonly byte[] _currentGuidArray;\n    private Guid _currentGuid;\npublic Guid CurrentGuid\n{\n    get { return _currentGuid; }\n}\n\npublic SqlServerSequentialGuidGenerator()\n    :this(Guid.NewGuid())\n{\n}\n\npublic SqlServerSequentialGuidGenerator(Guid initialGuid)\n{\n    _currentGuid = initialGuid;\n    _currentGuidArray = initialGuid.ToByteArray();\n}\n\npublic  Guid Generate()\n{\n    byte[] guidArray = _currentGuidArray;\n    var orderMap = SqlOrderMap;\n    for (int mapIndex = 0; mapIndex < 16; mapIndex++)\n    {\n        int bytesIndex = orderMap[mapIndex];\n        guidArray[bytesIndex]++;\n        if (guidArray[bytesIndex] != 0)\n        {\n            break; // No need to increment more significant bytes\n        }\n    }\n    _currentGuid =  new Guid(guidArray);\n    return _currentGuid;\n}\n\n}`\n```\nOr\n`/// \n/// Code based on http://www.informit.com/articles/article.aspx?p=25862&seqNum=7\n/// </summary>\n\n\npublic class SequentialGuidGenerator\n{\n    private int _counter;\n\n```\n    private long GetTicks()\n    {\n        int i = Interlocked.Increment(ref _counter);\n        // use UTC now to prevent conflicts w/ daylight savings\n        return DateTime.UtcNow.Ticks + i;\n    }\nprivate readonly byte[] _currentGuidArray;\nprivate Guid _currentGuid;\npublic Guid CurrentGuid\n{\n    get { return _currentGuid; }\n}\n\npublic SequentialGuidGenerator()\n    :this(Guid.NewGuid())\n{\n}\n\npublic SequentialGuidGenerator(Guid initialGuid)\n{\n    _currentGuid = initialGuid;\n    _currentGuidArray = initialGuid.ToByteArray();\n}\n\npublic Guid Generate()\n{\n    byte[] guidArray = _currentGuidArray;\n    long ticks = GetTicks();\n\n    //uid[0] TO uid[6]\n    // the first 7 bytes are random - if two combs\n    // are generated at the same point in time\n    // they are not guaranteed to be sequential.\n    // But for every DateTime.Tick there are\n    // 72,057,594,037,927,935 unique possibilities so\n    // there shouldn't be any collisions\n\n    // set the first 'nibble of the 7th byte to '1100' so \n    // later we can validate it was generated by us\n    guidArray[7] = (byte) (0xc0 | (0xf & guidArray[7]));\n\n    // the last 8 bytes are sequential,\n    // these will reduce index fragmentation\n    // to a degree as long as there are not a large\n    // number of Sequential-Guids generated per millisecond  \n    guidArray[8] = (byte)((ticks >> 8) & 0xFF);\n    guidArray[9] = (byte)(ticks & 0xFF);\n    guidArray[10] = (byte)((ticks >> 8 * 7) & 0xFF);\n    guidArray[11] = (byte)((ticks >> 8 * 6) & 0xFF);\n    guidArray[12] = (byte)((ticks >> 8 * 5) & 0xFF);\n    guidArray[13] = (byte)((ticks >> 8 * 4) & 0xFF);\n    guidArray[14] = (byte)((ticks >> 8 * 3) & 0xFF);\n    guidArray[15] = (byte)((ticks >> 8 * 2) & 0xFF);\n    _currentGuid = new Guid(guidArray);\n    return _currentGuid;\n}\n\n}`\n```\n. I think EntityFramework DbContext should be separated from identity domain model classes like IdentityRoleClaim that are used directly by dbcontext. I want to achieve possibility to replace entity framework by any other orm for example EF6, dapper or raw ado - by replacing only one dll and making a few configuration changes in Startup class.  I tried to imlement interfaces over dbcontext model classes but i failed because of inconsistent generic type constraints in RoleStore and UserStore classes.\n. I think that attacker could even block user account by repeatedly entering wrong passowrd in not too that pertiod of time.\n. ",
    "giggio": "This is specially painful if you want to be able to replace Microsoft.AspNetCore.Identity.EntityFrameworkCore for some other implementation. You simply can't do it.\nThe UserManager<IdentityUser> class is directly dependent of IdentityUser. I can't use UserManager<OtherUser> because that will not work with the current implementation, as it is tied to the IdentityUser. IdentityUser cannot be swapped out.\nIdeally, I should be able to simple swap the Entity Framework implementation, at runtime, for some other one. That just can't be done. At the current moment, the only solution is to fork Microsoft.AspNetCore.Identity.EntityFrameworkCore, which is what I am going to do now.\nBut that is also a pain, as I will have to keep my library in sync with your, which I shouldn't need to do.\nAt least this library is small. But still.. Good job, everyone, as soon as preview 2 is out I will try this out. Thanks!. ",
    "ardalis": "Agreed this lack of separation of concerns and tight coupling to IdentityUser is causing real problems when trying to work with this library. Should strongly consider addressing in a future release. To easily detect these problems, write samples that use more than one persistence technology. Write a sample that, using DI, can swap between using EF Core and Dapper for the implementation of its Identity classes. When you can write that sample without a great deal of pain, you're on the right track.. I want to optionally use EF for my persistence of my identity type. Here's a good example of what I'm looking to achieve: http://timschreiber.com/2015/01/14/persistence-ignorant-asp-net-identity-with-patterns-part-1/\nI want to use POCOs for my identity types (user, role) and decouple their use from the decision of how I want to persist them (that decision likely will be made in another project from my web project). Does that make sense?. Part of the pain here is that the default templates make heavy use of IdentityUser in the AccountController and ManageController types. If these used a simple POCO class and some interfaces for working with such a class, it would make it much easier to extract things from the web project.. Any chance just an interface would work for the identityuser? Let me mark my own user class as implementing IIDentityUser (or similar) which defines the necessary properties for AspNetCore.Identity to get the values it requires? Then I wouldn't need to inherit from or directly use a framework type.. ",
    "BenjaminCharlton": "Hello all! I was happy to see that IdentityUser had been moved out of EntityFramework and into Microsoft.AspNetCore.Identity in version 2.0.0 Preview2-Final. That was very helpful.\nBut I just upgraded from the preview version to the final release of ASPNETCore 2.1 and it's not there anymore. Where does IdentityUser live now please?\nIn my AuthorizationController.cs class I'm now getting the compilation error below:\nError   CS7069  Reference to type 'IdentityUser<,,,,>' claims it is defined in 'Microsoft.Extensions.Identity.Stores', but it could not be found    ....\\Controllers\\AuthorizationController.cs. The solution to my problem above is:\n\nUpdating all the references to Nuget packages in each of my projects to the latest versions\nReplace references to IdentityUser<TKey, TLogin, TRole, TClaim> (now obsolete, it seems) with references to the simpler IdentityUser<TKey> class.. Thanks for the explanation, Haok.\n\nI read about #883 and other related issues with great interest. Is there a way I can receive a notification when this is addressed so I can try out the new version and see if it solves my problem? Advice would be appreciated.. Thanks @HaoK! I shall look forward to that.\nBest regards\nBenjamin. Hi again @HaoK,\nI have migrated my solution to ASPNET Core 2.0 and installed your recently updated pre-release of ASPNET Core Identity.\nI can't find the IdentityUser in the Microsoft.Extensions.Identity.Stores namespace, and I can't find a Nuget package for Microsoft.Extensions.Identity.Stores even if I search pre-release packages.\nPlease could you point me in the right direction?\nMany thanks!\nBenjamin. Hello again HaoK! I was happy to see that IdentityUser had been moved out of EntityFramework and into Microsoft.AspNetCore.Identity in version 2.0.0 Preview2-Final. That was very helpful.\nBut I just upgraded from the preview version to the final release of ASPNETCore 2.1 and it's not there anymore. Where does IdentityUser live now please?\nIn my AuthorizationController.cs class I'm now getting the compilation error below:\nError   CS7069  Reference to type 'IdentityUser<,,,,>' claims it is defined in 'Microsoft.Extensions.Identity.Stores', but it could not be found    ....\\Controllers\\AuthorizationController.cs. Thank you very much! It's lucky you reply as fast as you release new versions! :-)\nAfter updating all the references to Nuget packages in each of my projects I had to replace references to IdentityUser<TKey, TLogin, TRole, TClaim> (now obsolete, it seems) with references to the simpler IdentityUser<TKey> class.. Thank you, HaoK.\nI think it'd be neater to have generic implementations to make things type safe and avoid unnecessary casts but your solution will certainly work in their absence.\nI appreciate your response  :-). ",
    "NVentimiglia": "What about the JSON based (API) Account / Manager controller ?\n. > given the various community offerings around OAuth servers.\nSo I take it that Identity is really only meant for starter projects with no support for WebApi / JWT out of the box. That smells like an oversight, but ok. Can you point me to a quality community driven Identity replacement then ? Preferably one that supports OAuth as well as traditional email authentication (such as Identity).\n. > > That smells like an oversight, but ok.\n\n\nThey actually said it was deliberate: #883 (comment)\n\n\nI am not following, this discussion is about Entity Framework and the DAL, not a WebApi interface.\n. > You said it sounded like an oversight that \"Identity\" (which means ASP.NET Identity) did not accommodate non-web scenarios. I linked that that it was not an oversight.\nWhat do you mean by non-web ? Web Api is web, it is just serving json instead of html.\n. > Right, but that's not what Microsoft is supporting. They are tied to the cookie/browser use case. There are OAuth2 flows that don't involve a browser.\nGotcha, that makes sense. \n. What could be causing this ? ExternalLoginCallback and ExternalLogin are annotated with AllowAnonymous. Again, this is a 99% out of the box default template. This should not be happening. How can I debug this ?\n. [HttpGet]\n        [HttpPost]\n        [AllowAnonymous]\n        public async Task<IActionResult> AccessDenied(string returnUrl = null)\n        {\n            return Redirect(returnUrl); // ExternalLoginCallback\n        }\nHere is my current work around, please dont let me do this.\n. Also, should I be implementing AccessDenied ? It feels like that should be a included with identity. @HaoK \n. @HaoK \nRemoving the [Authorize] annotation on the AccountController solved this. Obviously, this is not a good solution. This smells like a bug in the Authorize annotation.\n. ",
    "markusvt": "I came across that exactly situation also several times. I ended up using one DBContext for all but it would be a really nice feature to be able to split that in several smaller module-related contexts.\nI once read something about the problem sharing some entities between different contexts is, that it is possible that both contexts target different databases that can also lie on different servers. \nFor my projects, it also always the case, that those DBContexts target the same database, I just want some kind of modular-view on them. Maybe it is possible just to share entites like the Identity between those \"local\" DBContexts?\n. here is the original code:\npublic static UserManager<Benutzer> getUsermanager()\n        {\n            return (UserManager<Benutzer>) RequestServices.GetService(typeof(UserManager<Benutzer>));\n        }\nRequestServices is the following:\nprivate static IServiceProvider RequestServices\n        {\n            get\n            {\n                return HttpContext?.RequestServices;\n            }\n        }\nwhere HttpContext is the current http context of the request\n. ",
    "aspnet-hello": "We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. We periodically close 'discussion' issues that have not been updated in a long period of time.\nWe apologize if this causes any inconvenience. We ask that if you are still encountering an issue, please log a new issue with updated information and we will investigate.\n. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on master.\nCanSetPasswordWithExternalLogin failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\n\n\n\n\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. AnonymousUserCantAccessAuthorizedPages failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. QueryingIdentityEndpointsReturnsNotFoundWhenIdentityIsNotPresent failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[x] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[x] Run the test 100 times locally as a sanity check.\n[x] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\n\n\n\n\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nPlease use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit). This comment was made automatically. If there is a problem contact ryanbrandenburg.\n\n\n\n\n\n\n\nThere were 1 failures with about the same error on master at 1:50:55 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 1:50:55 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 1:50:55 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 1:51:12 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nThere were 2 failures with about the same error on master at 1:50:55 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 1:50:54 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 1:50:54 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:29:07 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:29:05 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 3:38:37 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:29:54 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:52:01 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:59:15 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 4:57:20 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:33 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:33 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 2:07:13 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:26 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 2:07:16 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:30 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:31 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 12:21:31 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 2:07:10 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\n. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nThere were 2 failures with about the same error on master at 3:03:03 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 3:24:32 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 3:32:40 PM:\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n- PasswordSignInReturnsLockedOutWhenLockedOut\nThere were 2 failures with about the same error on master at 3:29:02 PM:\n- PasswordSignInReturnsLockedOutWhenLockedOut\n- CheckPasswordSignInReturnsLockedOutWhenLockedOut\n. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nPlease use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit). This comment was made automatically. If there is a problem contact ryanbrandenburg.\n\n\n\n\n\n\n\nThere were 1 failures with about the same error on master at 1:50:55 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 1:50:55 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 1:51:12 PM:\n- PasswordSignInFailsWithWrongPassword\n. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nThere were 1 failures with about the same error on master at 1:50:55 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 1:50:54 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 1:50:54 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:29:07 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:29:05 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 3:38:37 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:29:54 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:52:01 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:59:15 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 4:57:20 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:33 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:33 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 2:07:13 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:26 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 2:07:16 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:30 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:31 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 12:21:31 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 2:07:10 PM:\n- PasswordSignInFailsWithWrongPassword\n. This comment was made automatically. If there is a problem contact ryanbrandenburg.\nThere were 1 failures with about the same error on master at 3:03:03 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 3:24:32 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 3:32:40 PM:\n- PasswordSignInFailsWithWrongPassword\nThere were 1 failures with about the same error on master at 3:29:02 PM:\n- PasswordSignInFailsWithWrongPassword\n. ",
    "aligneddev": "Thanks, @BrennanConroy. Shouldn't this be in the https://github.com/aspnet/Announcements/?\n. ",
    "richerp": "error: where TRole \uff1a IdentityRole \u3008TKey, TUserRole, IdentityRoleClaim\u3008TKey\u3009\ncorrect: where TRole \uff1a IdentityRole \u3008TKey, TUserRole, TRoleClaim\u3009 ?\n. Thanks for your response. I tried it. Table AspnetUser and AspnetRole are ok . But AspNetUserRole can not.\n. public class Comm_role : IdentityRole\u3008string\u3009\npublic class Comm_roleclaim : IdentityRoleClaim\u3008string\u3009\npublic class Comm_user : IdentityUser\u3008string\u3009\npublic class Comm_userrole : IdentityUserRole\u3008string\u3009\npublic class Comm_userclaim : IdentityUserClaim\u3008string\u3009\npublic class Comm_userlogin : IdentityUserLogin\u3008string\u3009\npublic class Comm_usertoken : IdentityUserToken\u3008string\u3009\nand \npublic class RichErpDbContext : IdentityDbContext \u3008Comm_user, Comm_role, string\u3009\n...\nprotected override void OnModelCreating(ModelBuilder builder)\n{\nbuilder.Entity\u3008Comm_role\u3009(entity =>\n            {\n                entity.ToTable(name: \"comm_role\");\n            });\nbuilder.Entity\u3008Comm_roleclaim\u3009(entity =>\n            {\n                entity.ToTable(\"comm_roleclaim\");\n            });\nbuilder.Entity\u3008Comm_user\u3009(entity =>\n            {\n                entity.ToTable(name: \"comm_user\");\n            });\nbuilder.Entity\u3008Comm_userrole\u3009(entity =>\n            {\n                entity.ToTable(name: \"comm_userrole\");\n            });\n......\n}\n. Table AspnetUser and AspnetRole are ok . But AspNetUserRole can not be renamed.\nHow to notice Asp.net Core using Comm_userrole but not AspNetUserRole ???\n. yes,I did so. Table AspnetUser and AspnetRole are ok . But AspNetUserRole can not be renamed.\nI think because Asp.net Core didnot recognize Comm_userrole .\nin public class RichErpDbContext : IdentityDbContext \u3008Comm_user, Comm_role, string\u3009\nit has table Comm_user and Comm_role , it has not Comm_userrole etc.\n. ",
    "noelbr": "Try\n        builder.Entity<ApplicationUser>().ToTable(\"User\");\n        builder.Entity<ApplicationRole>().ToTable(\"Role\");\n\n        builder.Entity<IdentityUserRole<string>>().ToTable(\"UserRole\");\n        builder.Entity<IdentityUserClaim<string>>().ToTable(\"UserClaim\");\n        builder.Entity<IdentityUserLogin<string>>().ToTable(\"UserLogin\");\n\n        builder.Entity<IdentityRoleClaim<string>>().ToTable(\"RoleClaim\");\n        builder.Entity<IdentityUserToken<string>>().ToTable(\"UserToken\");.\n",
    "adeministr": "how to do this in custom classes in core 2.0. how can i migrate to core 2.0?\n public class ApplicationUser : IdentityUser {}\npublic class ApplicationRole : IdentityRole{}\npublic class ApplicationUserRole : IdentityUserRole {}. builder.Entity<ApplicationRole>(entity =>\n            {\n                entity.HasMany(x => x.Users).WithOne().HasForeignKey(ur => ur.RoleId).IsRequired();\n                entity.ToTable(\"MyRoles\", \"dbo\");\n            });\ni use this code to rename AspNetRoles tables to MyRoles but in migration it renames tables as ApplicationRole. It was working in core 1.1. After upgrading to core 2.0 doesn't work. How can i do?. solved by changing IdentityDbContext: \npublic class ApplicationDbContext : IdentityDbContext,IdentityUserToken>\nbut still have duplicated foreign keys . ",
    "evilz": "Hi thank for your answer.\nIt still not work. \nI create a new repo https://github.com/evilz/OauthAndIdentity.WebSample/\nIt's simply a site from temple using SQLite, and Oauth Github.\nI try to get tokens in Home/Index.\n. Yes I already take a look at this and in the sample the github middleware come from here. \nThe main difference is  UseIdentity()\nThe flow I want is this : \n- user can login using Github\n- Back to home page, It display his repositories \nSo I need the access_token to make a new request to the GitHub API.\nIn future version I want to add other provider like Microsoft for VS online, bitbucket, Google  and so on.\nIs it clear ?\n. look like my response was not saved ...\nIt works using this code :\ncsharp\nvar info = await _signInManager.GetExternalLoginInfoAsync();\nvar token =  _userInfo.AuthenticationTokens.Single(x=>x.Name ==\"access_token\").Value;\n. ",
    "masdc": "Hello.  I am having the exact issue, but i am not really sure where the following code should be:\nvar info = await _signInManager.GetExternalLoginInfoAsync();\nvar token =  _userInfo.AuthenticationTokens.Single(x=>x.Name ==\"access_token\").Value;\n\nOn the controller where i want to do the API calls?  Where?\nThanks.  . Hello.  I am having the exact issue, but i am not really sure where the following code should be:\nvar info = await _signInManager.GetExternalLoginInfoAsync();\nvar token =  _userInfo.AuthenticationTokens.Single(x=>x.Name ==\"access_token\").Value;\n\nOn the controller where i want to do the API calls?  Where?\nThanks.  . ",
    "adrianorc": "Wow, \nwe find the solution:\nhttp://stackoverflow.com/questions/19961648/how-to-localize-asp-net-identity-username-and-password-error-messages\nThanks\n. ",
    "tmm360": "Yes I have, and it doesn't change\n. A cookie header sample:\nCookie: .AspNetCore.Antiforgery.w5W7x28NAIs=CfDJ8P9CdzvZvT1AlVB9wjmoTzmTapz9JT3mQRnUDv-DQ4uedGqcDY87YsqoUnVzGbmsScltsXVEbpDDCYo1pNrPqY1fBT9zem1Tdy-YL2aNOMkY63nrA3Y2X8HFRvFTyNiiqmnQAzFE5aUwSyEZbmJCQgg; .AspNetCore.Session=CfDJ8P9CdzvZvT1AlVB9wjmoTzkng%2FAXY2y5QD%2B6GzlTmLYCbe9q6ln73S%2BnuTOXl8O27wL%2BrY4dQe9rSb5b%2FM59EScgKJlArPjUsroYTvRVHy1mJx5y3FEgvMVJYyE7uPp8P77NykT2lPK8KSbpo1Gp15OUL%2F1mAFHMAKzh8qQtuFyx; ARRAffinity=5ab45bb448faaa6c281c76d2c75f7d67c31d8a3024d62d44737acd94c45aa6f0; .AspNetCore.Identity.Application=CfDJ8P9CdzvZvT1AlVB9wjmoTznE-a-g6Co11Dl48i4H03nayi_-mTcH6DKST7LEXXysxDKw1d6knWHO71int2-SbjcAk_5_cMFKWy113udPwKUdYYedsrAMmVGC1HMQhaPc3t_CpSpZtLe5lLYTNrehDSjIIEWvh0VPLIkl5HxgptWbLMxnnVrDE3RnwlWWZVW3jF4A1SUxn2lu9WN5sgQITAv-m-Ij-VNIdv4FUOE2PVB1NI1Xe_80cFQFIIdEpn7T9EubRx1akitoW_3EGcOCWPSUphXMNGWfgGGfXFrXYSAaNv8AOmOIcwVbAOdNlXGb2EHQyGsbOT9nmiCNSQi3reUjFgHx489tojFtGpzTzUctbBzqXwWftQ8EIqy4rjbehOxg4xVk5r6vFEbjFX0VRFlEsF4QfFluOc_Mv2XXhUZBJvcbv1_cwZTgfgtEV2lbImAjBLjf0hf200EazLR5DrJPK4pZ8pMnh6XON93rHmdCeunuAJuLmoaqt1Vkxo-y9-CvhTczXleAP1T_j9cRl0cZhzArHOLQr9ssqexXGm9OHBsmrlbp8GTCxdhwlFncPcQozp8TcEbm36Jc_XMBIV8\n. No, only a 302 message with a redirect to the login page.\nI've experimented that ExpireTimeSpan works if I set a small timespan of some minutes, and it stops to works with longer.\n. This test fails:\n```\n    [Fact]\n    public async Task CanCreateMeLoginAndCookieStopsWorkingAfterExpiration_LongTime()\n    {\n        var clock = new TestClock();\n        var server = CreateServer(services => services.Configure(options =>\n        {\n            options.Cookies.ApplicationCookie.SystemClock = clock;\n            options.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays(10);\n            options.Cookies.ApplicationCookie.SlidingExpiration = false;\n        }));\n    var transaction1 = await SendAsync(server, \"http://example.com/createMe\");\n    Assert.Equal(HttpStatusCode.OK, transaction1.Response.StatusCode);\n    Assert.Null(transaction1.SetCookie);\n\n    var transaction2 = await SendAsync(server, \"http://example.com/pwdLogin/false\");\n    Assert.Equal(HttpStatusCode.OK, transaction2.Response.StatusCode);\n    Assert.NotNull(transaction2.SetCookie);\n    Assert.DoesNotContain(\"; expires=\", transaction2.SetCookie);\n\n    var transaction3 = await SendAsync(server, \"http://example.com/me\", transaction2.CookieNameValue);\n    Assert.Equal(\"hao\", FindClaimValue(transaction3, ClaimTypes.Name));\n    Assert.Null(transaction3.SetCookie);\n\n    clock.Add(TimeSpan.FromDays(7));\n\n    var transaction4 = await SendAsync(server, \"http://example.com/me\", transaction2.CookieNameValue);\n    Assert.Equal(\"hao\", FindClaimValue(transaction4, ClaimTypes.Name));\n    Assert.Null(transaction4.SetCookie);\n\n    clock.Add(TimeSpan.FromDays(7));\n\n    var transaction5 = await SendAsync(server, \"http://example.com/me\", transaction2.CookieNameValue);\n    Assert.Null(FindClaimValue(transaction5, ClaimTypes.Name));\n    Assert.Null(transaction5.SetCookie);\n}\n\n```\nI've taken the original from prev tests and replaced FromMinutes with FromDays.\n. I will investigate more... Have you tried to reproduce the issue?\n. My project uses a timespan of 30 days.\nNow I'm trying to attach Identity's project to mine, for try a direct debug.\n. You are right! My code was blocking reading of security stamp for a wrong security configuration. Now I've fixed and it works. Thank you!\n. ",
    "janhartmann": "Yes, that is correct. How would you solve the issue with the need for the RoleManager at startup?\n. ",
    "mikes-gh": "@Tratcher \n\nawait httpContext.Authentication.SignOutAsync(\"External\"); \n\nDo I replace External with Google etc?\n. Hmm that doesn't work for me.\nInvalidOperationException: No authentication handler is configured to handle the scheme: External\n. @Tratcher \nIf I use \nawait _signInManager.SignOutAsync();\nIn the Login [HttpGet] action it works but it doesn't cover the situation where the user clicks back.\nie in order for it to work the user would have to do ctrl F5 to get the action to execute.\nCould we have more details on how to implement option 2 and 3.\nI think this stuff should be baked into the  standard templates.\n. I came up with this workaround (comments welcome)\nIt shouldn't be this hard though.\n```\n// POST: /Account/ExternalLogin\n[HttpPost]\n[AllowAnonymous]\n[ValidateAntiForgeryToken]\npublic async Task ExternalLogin(string provider, string returnUrl = null)\n{\n    var info = await _signInManager.GetExternalLoginInfoAsync();\n    if (info?.LoginProvider != provider)\n    {\n        if (info != null)\n        {\n            await _signInManager.SignOutAsync();\n        // Redirect needed to logout\n        return RedirectToAction(nameof(AccountController.ExternalLoginRedirect), \"Account\", new { provider = provider, returnUrl = returnUrl });\n    }\n    else\n    {\n        var redirectUrl = Url.Action(\"ExternalLoginCallback\", \"Account\", new { ReturnUrl = returnUrl });\n        var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\n        return new ChallengeResult(provider, properties);\n    }\n}\nelse\n{\n    return RedirectToAction(nameof(AccountController.ExternalLoginCallback), \"Account\");\n}\n\n}\n[HttpGet]\n[AllowAnonymous]\npublic IActionResult ExternalLoginRedirect(string provider, string returnUrl = null)\n{\n    var redirectUrl = Url.Action(\"ExternalLoginCallback\", \"Account\", new { ReturnUrl = returnUrl });\n    var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);\n    return new ChallengeResult(provider, properties);\n}\n```\n. @HaoK \nDon't understand why we need another option to make it work.  Can't identity be a bit more intelligent here.  Asking the developer to set an obscure option doesn't seem the right solution.\n. Just to add weight to @gdoron comment above.\nI put my app out for internal testing.\nThe first thing that happened was this issue because the user pressed back( I was standing over the user).\nThe user then kept getting access denied and gave up.\nLogin flows get interrupted all the time.\nThis will lose visitors.\n. @Tratcher \noption 1 and 2 are not valid as the user may arrive   at a cached login page since it is an HttpGet action e.g. back button.\nAs I said earlier in this thread I tried that and  it does not work unless the user refreshes the page which is not going to happen in the real world.\noption 3 you don't account for the Identity.External cookie being from a different provider.\nThe ExternalLogin action is a post and will always run.\nNone of this stuff should be at the user level.\nPlease mark this as a bug.\nThe framework needs to deal with this transparently.\n. @phenning \nPlease don't try to fix this in the templates.\nThe bug should be fixed in the framework.\n. @kroniak \nI had the code that way before.\nBut it adds an unnecessary redirect to the most common scenario when there is no Identity.External cookie present\n. I do appreciate everyone's work on this but I'm feeling a bit short changed.\nI put a fair bit of effort in on this issue and it feels like community input has been ignored.\nMy scenario is not edge case.  It is real world findings from real users.\nIn order to properly address this issue the fix need to happen in the ExternalLogin POST as discussed at length with reason why.\n. @gdoron \nThanks. Yes I am sticking with my fix. (Hopefully a better one will make it into 1.1.0).\nAs you say its more about saving other developers hours of head scratching in the future.\n. @Tratcher \nI only need to click back once.  If I use Facebook button and at the registration page decide I want to register with Google. I click back and get this issue.\nThis is if I am already logged in to the provider (common scenario).\n. @gdoron \nSorry haven't tried it yet because I have a working solution. ( I do appreciate the suggestion). Will update here when I have findings\n. ",
    "phenning": "@HaoK, @sayedihashimi is the new PM owner for templates.\n. @HaoK, @sayedihashimi is the new PM owner for templates.\n. ",
    "npnelson": "I am pretty sure this issue has been biting me for months and no one could figure it out.  Thanks for putting up the announcement.  The template fix is a good start.  \nDoes anyone know how to fix this template from Auth0?\nhttps://github.com/auth0-samples/auth0-aspnetcore-sample/tree/master/01-Login\nI've had a ticket open with auth0 for over 20 days (not realizing at the time that the underlying problem was likely caused by this) and even pointed them to the announcement and also posted an issue on their repo, but they still haven't been able to provide a fix.\nI tried a couple of things on my own to try to get the cookie cleared, but I just couldn't hit the right combination.\nI would like to make a motion to strike my comment from the record.  After more research, I believe my issue with Auth0 (still unresolved after more than a month) is specific to Auth0 and has nothing to do with any of Microsoft's code\n. ",
    "pauldotknopf": "Is the final suggested solution to this problem \"removing the cookie\"?\nPlease checkout my project react-aspnet-boilerplate. Without going into great detail, I pretty much have to have the ability for me to leave the cookie as is. Is there no other solution?\nI might have to create my own encrypted cookie to store the external login info so that I can retrieve across different requests.\n. I absolutely agree with @gdoron here. I have built my entire boilerplate (here)(https://github.com/pauldotknopf/react-aspnet-boilerplate) around this feature behaving as it did in RC2, and now it is completely broken. Sure, you fixed it in the templates, but my workflow is completely different for the external logins and your fix in the templates doesn't translate to my boilerplate.\nThis is incredibly frustrating. Where is the source of the problem? I will fork and fix it.\n. @gdoron I still believe this is an issue, but I have a workaround that will fix your problem. Instead if redirecting (to flush cookie) before they get to the external login redirect, do the flushing right at the external login redirect.\nFor example:\n``` c#\n[Route(\"externalloginredirect\")]\npublic async Task ExternalLoginRedirect(string provider, bool autoLogin = true, bool didRefresh = false)\n{\n    // when we first visit this redirect page, we need delete any previous authentication tokens.\n    // See https://github.com/aspnet/Security/issues/299\n    if (!didRefresh)\n    {\n        // redirec the user to this same exact page, but clear out any external login cookie that may be there.\n        // initial requests to this page should not have the \"didRefresh\" set.\n        await HttpContext.Authentication.SignOutAsync(_externalCookieScheme);\n        var queryString = new QueryString(Request.QueryString.ToString());\n        return Redirect(Request.Path + queryString.Add(\"didRefresh\", \"true\"));\n    }\nvar properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, \"/externallogincallback?autoLogin=\" + autoLogin);\nreturn new ChallengeResult(provider, properties);\n\n}\n``\n. TheautoLogin` is something specific to my workflow. External authentications don't always trigger logins. Checkout the boilerplate I mentioned for more details.\n. ",
    "BjornSigurd": "I just installed Visual Studio 2017 and ran the authentication Template.  PROBLEM NOT SOLVED - If you do not follow the assumed sequence of operations when registering you very quickly ends up with Account/AccessDenied.\nThis is totally unacceptable.  Being able to always log in should be the most basic requirement of a web site!...\nPLEASE HELP!  DO ANYONE HAVE A SOLUTION TO THE Account/AccessDenied PROBLEM?\nI am having a hard time understanding if any of the previous comments above gives a good solution.. ",
    "SuddenGunter": "Thanks @pauldotknopf\nI'm using parts of your code now. Btw I remove cookie in ExternalLoginCallback - after user logins via external service I read all auth data into an ExternalLoginInfo and delete cookie.  And it works pretty fine for me.\nif (HttpContext.Request.Cookies[\"Identity.External\"] != null)\n{\n         HttpContext.Authentication.SignOutAsync(\"Identity.External\").Wait();\n}\nUPD1: Not working - if I approach, that I described - I can't post externalLoginConfirmation. ",
    "maslovay": "Haok, your code doesn't work. It returns empty fields (aslo in Facebook authorization). With my code works with facebook (it receives gender and birthday), but doesn't work with google.\nCan you offer other sollution? \n. Haok, sorry how can I check it? \nAs I can see the problem is that GoogleAuthentication RC2 can't match ClaimTypes.Birthday and ClaimTypes.Gender with the Json fields from Google API\nThere is no such a problem with Facebook\n. \nHaok, thanks one more time! \nThere are no gender and birthday in claims\nSo how can I solve that problem?\n. Haok, thanks I'll try!\nWhy the GoogleAuthentication doesn't work properly? Anyone will have same problem. Walkaround is not best sollution \n. I try to update your code to get Birthday and Gender \nvar gender = payload[\"gender\"].Value();\n if (!string.IsNullOrEmpty(gender))\n  {\nidentity.AddClaim(new Claim(ClaimTypes.Gender, gender, ClaimValueTypes.String, Options.ClaimsIssuer));\n }\nvar birthday = payload[\"birthday\"].Value();\nif (!string.IsNullOrEmpty(birthday))\n {\n                identity.AddClaim(new Claim(ClaimTypes.DateOfBirth, birthday, ClaimValueTypes.String, Options.ClaimsIssuer));\n}\nBut I have no result(\nMay be I can't call properly it?  How can to do it from my AccountController? \n. Haok, let me check my steps to do:\n1. In my  startup.cs i place only basic GoogleOptions (ClientId, ClientSecret)  - done \n2.  I add GoogleHandler.cs to override the Google claims (and add Birthday and Gender) (only CreateTicketAsync procedure) - done\n3. In my AccountController I try to get Birthday and Gender Claims with GetExternalLoginInfoAsync as usual - done\nThat staff doesn't work\nwhat is incorrect?\n. Yes! It works!!!!))\nThank you  lot, PinpointTownes!\n. But I think it's .Net Google Authentification   bug, because it can't receive fields by default(\n. HaoK but facebook Authentification do this staff without any additional code. I think lot of people will face such a problem\n. ",
    "netcore-jroger": "nice.\n. ",
    "donnienosa": "I have the same problem or similar. I have been able to implement entity framework in a library but using a single instance of the context for all operations. I want to use the library for windows forms, wpf and web (including services) but some how i have not been able to get past the \"object disposed error\" (i have a method that reloads the context i.e disposes the context and recreates it for every select). I'm seriously confused on what to here because i don't want to expose the dbContext in the calling application. ",
    "Cowlephant": "It's happening somewhere in IdentityUser... maybe the internal implementation.\nThis is what mine looks like.\n```\npublic class PlatformUser : IdentityUser\n    {\n        public string Name { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Department { get; set; }\n        public byte[] PictureThumbnail { get; set; }\n    public virtual List<ReportUser> ReportUsers { get; set; }\n    public virtual List<GoalUser> GoalUsers { get; set; }\n}\n\n```\nIf I set a breakpoint on one of those properties... a single one of the queries fires... and as soon as I step into, all the rest fire instantly.\n. @HaoK I think you're onto something with the cookies. I've been using fiddler to make my API calls, and the cookie I have set must have been a factor.. because once I cleared it and got myself a new one, things are working fine. Everything else has been working as intended though which is strange because usually I get 302s and redirects if my cookie is expired in fiddler.\nI recently changed my cookie duration in ASP.NET Core from 1 hour to 12 hours which may have been a factor in this.\n. What happened to the Domain portion of User.Identity.Name when using Windows Authentication? It's just giving me username, without the domain portion?\nI got GSNETX\\twilliams before, and now I just get twilliams\nHow do I get access back to the domain portion?\nI can still see it's around there somewhere, but not sure how to directly access it.\nUser.Claims.ToList()\nCount = 6\n    [0]: {http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier: GSNETX\\twilliams}\n    [1]: {http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name: twilliams}\nI could do something like this\nPlatformUser user = await userManager.FindByIdAsync(User.FindFirst(ClaimTypes.NameIdentifier).Value);\nInstead of this\nPlatformUser user = await userManager.FindByIdAsync(User.Identity.Name);\nBut the latter is preferable for me?. ",
    "verbatimt": "See #855 , PR #893 & #918\n. See #855 , PR #893 & #918\n. ",
    "pMonfared": "i use for Dependency Injection in my project with \"StructureMap.Microsoft.DependencyInjection\": \"1.0.1\"\nbut when i config \n```\nprivate IServiceProvider IocConfig(IServiceCollection services)\n        {\n            var container = new Container();\n            container.Configure(config =>\n            {\n                config.For().Singleton().Use(() => Configuration);\n            config.For<IUserStore<ApplicationUser>>().Use<UserStore<ApplicationUser,ApplicationRole,ApplicationDbContext,string,ApplicationUserClaim,ApplicationUserRole,ApplicationUserLogin,ApplicationUserToken>>();\n\n            config.Scan(_ =>\n            {\n                _.AssemblyContainingType<ISettingService>();\n                _.WithDefaultConventions();\n            });\n            config.For<IRoleStore<ApplicationRole>>().Use<ApplicationRoleStore>();\n            config.For<IApplicationRoleStore>().Use<ApplicationRoleStore>();\n            config.For<IApplicationUserStore>().Use<ApplicationUserStore>();\n            config.For<IApplicationUserManager>().Use<ApplicationUserManager>();\n            config.For<IApplicationRoleManager>().Use<ApplicationRoleManager>();\n            config.For<IEmailSender>().Use<AuthMessageSender>();\n            config.For<ISmsSender>().Use<AuthMessageSender>();\n\n        });\n\n        container.Populate(services);\n\n        return container.GetInstance<IServiceProvider>();\n    }\n\n```\ni have got error in this line \nconfig.For<IUserStore<ApplicationUser>>().Use<UserStore<ApplicationUser,ApplicationRole,ApplicationDbContext,string,ApplicationUserClaim,ApplicationUserRole,ApplicationUserLogin,ApplicationUserToken>>();\nerror description:\n```\nSeverity    Code    Description Project File    Line    Suppression State\nError   CS0311  The type 'SampleFive.DomainLayer.Models.ApplicationRole' cannot be used as type parameter 'TRole' in the generic type or method 'UserStore'. There is no implicit reference conversion from 'SampleFive.DomainLayer.Models.ApplicationRole' to 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole>'.   SampleFive.Web..NETCoreApp,Version=v1.0 E:\\Programming Projects\\GitReps\\CustomizeAspdotnetCore\\SampleFive.Web\\Startup.cs    157 Active\n```\nthis is my ApplicationUser Class:\n```\npublic class ApplicationUser : IdentityUser\n    {\n        public ApplicationUser()\n        {\n            this.UserUsedPasswords = new List();\n        }\n        public ICollection UserUsedPasswords { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\npublic class ApplicationRole : IdentityRole<string, ApplicationUserRole, ApplicationRoleClaim>\n\n{\n    public string Description { get; set; }\n    public ApplicationRole()\n    {\n    }\n\n    public ApplicationRole(string name)\n        : this()\n    {\n        Name = name;\n    }\n\n    public ApplicationRole(string name, string description)\n        : this(name)\n    {\n        this.Description = description;\n    }\n\n}\n\npublic class ApplicationUserLogin : IdentityUserLogin<string>\n{\n\n}\npublic class ApplicationUserRole : IdentityUserRole<string>\n{\n\n}\npublic class ApplicationRoleClaim : IdentityRoleClaim<string>\n{\n\n}\npublic class ApplicationUserClaim : IdentityUserClaim<string>\n{\n\n}\n\npublic class ApplicationUserToken : IdentityUserToken<string>\n{\n\n}\n\npublic class ApplicationUserUsedPassword\n{\n    public ApplicationUserUsedPassword()\n    {\n        CreatedDate = DateTimeOffset.UtcNow;\n    }\n    [Key]\n    public int Id { get; set; }\n\n    [Key, Column(Order = 0)]\n    public string HashPassword { get; set; }\n    public DateTimeOffset CreatedDate { get; set; }\n    [Key, Column(Order = 1)]\n    public string UserId { get; set; }\n    public virtual ApplicationUser AppUser { get; set; }\n}\n\n```\n. ",
    "furlanrapha": "Having same issues too, created this PR #923 to fix this.\n. Having same issues too, created this PR #923 to fix this.\n. ",
    "gaborkalmar": "Thanks , i'll check it out  , will report back if I got it working \n. ",
    "maxim-shaw": "@HaoK, thank you for the direction. Replacement of .AddEntityFrameworkStores() with\nservices.AddIdentity<ApplicationUser, ApplicationRole>()\n    .AddUserStore<ApplicationUserStore>()\n    .AddRoleStore<ApplicationRoleStore>()\n    .AddUserManager<ApplicationUserManager>()\n    .AddDefaultTokenProviders();\ngave me wanted results. \n. ",
    "aelking": "Hi there.\nIs there any idea on when this will be pulled into the build?\nAn will this be a patch on the release branch?\nThis stops alot of customisations with identity working.\nRegards\nAndy\n. ",
    "troydai": ":shipit: \n. /cc @Eilon @divega \n. Thanks @tugberkugurlu \n. Yup. /cc @HaoK ?\n. Thanks @tugberkugurlu \n. This is a overload method for placing a default value for one parameter. Should we just have the one of the overload to be virtual? (I assume we can't change this in 1.1.0 since take away the virtual modifier will be a breaking change. But I'm just wondering.)\n. But the newly added parameter is not used in this private method, is it?\n. The parameter bypassTwoFactor is added to the SignInOrTwoFactorAsync, however it is not used in the method body. It is a private method so it is not for overriding. Why is this parameter added?\n. My suggestion is in following situation, only one method among all of its overloads should be virtual. The indention of the overloads seem to be fill in the default value. So this helps to avoid accidentally override the default value attempt in derived class.\nNone blocking. \n```\npublic virtual void Core(int parameter1, int parameter2)\n{\n    // body\n}\npublic void Core(int parameter1)\n{\n    Core(parameter1, 0);\n}\npublic void Core()\n{\n    Core(0, 0);\n}\n```\n. Make sense.\n. It feels like you did miss a commit.\n. ",
    "Kizmar": "I just pulled all of the token endpoint logic out of the middleware and created a LoginController that now houses it. I confirmed the managers work as expected now. The middleware must be somehow using a different copy of the managers that aren't being updated when changes are made.\n. ",
    "pierregorce": "Is there any solutions for use usermanager in the service layer AND in the controller ?\nCan we define lifetime scoped for usermanger ?. ",
    "xaviergxf": "Thanks blowdart. This works perfectly fine.\n. ",
    "tiefling": "I seem to be having a similar problem here. It looks like ApplicationDbContext is expecting the resolution that is offered by Startup but that Startup isn't executing. I get a more direct message...\nNo parameterless constructor was found on 'ApplicationDbContext'. Either add a parameterless constructor to 'ApplicationDbContext' or add an implementation of 'IDbContextFactory' in the same assembly as 'ApplicationDbContext'.\n. ",
    "saad749": "I am having the same problem and the same error as @tiefling  . THis happened to me in an exisitng application when I updated from 1.0 to 1.1 Preview 1.\nI am using aspnet core /entityframework core on net 461.\n. ",
    "augugiacoEnta": "Hi everyone,\nAny fix to this?. @natemcmaster @smitpatel thanks so much both for the help! . ",
    "GArrigotti": "@HaoK Thank you for that clarification, I thought that might be.  But I figured I'd seek the clarification since I couldn't find the implementation or documentation.  I appreciate your response.\n. ",
    "sebastienros": "I am still waiting for someone to give a :shipit: or add some comments, thanks.\n. Than you sir!\n. @VahidN you are totally right, right after creating this issue I was thinking there had to be a way to provide custom logic, thanks for the sample.\nIs it replacing completely the current implementation based on PasswordOptions or just adding another layer of validation?\nSo I assume having a special password option is just about how often would people need it, and probably this one was already discussed internally and didn't make it to the list. We'll see what they say about it.. ",
    "master-still": "@RoySalisbury \nExactly same case ! Any Suggestions / Guidance ?\n\nI must be missing something for my UserStore .\n. @RoySalisbury  The issue i mentioned above was solved !  #988\n. @HaoK \nCan you please provide guidance ?\n\nI Must be missing something for my UserStore !\n. @VahidN Thank you \nI am not sure what is wrong !\n\nhttps://github.com/master-still/test\n. @MaklaCof  https://github.com/master-still/test\ncurrently I am having problem while passing my AppRole to Userstore.. Solved It ! Thank you all.. ",
    "MorayM": "For the record I found this issue after Googling to check that I could use disposable entities in an implementation of IUserStore so feel I should add my two pence!\nYou are probably using IUserStore correctly, however as my current implementation of it uses various database connection objects which implement IDisposable I'm very grateful that it does so I can be sure they're cleared up properly when Identity is finished with them.\n. ",
    "bernatgy": "As I can see, they have left behind the customization of key types...\n. ",
    "JeanCollas": "Indeed, changing the key type doesn't compile (issues with incompatible types).\nI had to fork the code to use a custom key type... \n. ",
    "itsfelipesan": "Could you try to use a Generic parameter like that?\npublic IdentityDbContext (DbContextOptions<IdentityDbContext > options)\n   : base(options)\n{\n}\n. Do you have some information about this? I'm still getting this error and some user's configurations are stuck in my project because of this error.\n. Of course @HaoK. I have followed the tutorials at the documentation. That's my codes:\nStartup\n```\npublic void ConfigureServices(IServiceCollection services)\n        {\n            services.ConfigureDapperPostgreSqlConnectionProvider(Configuration.GetSection(\"DapperIdentity\"))\n                .ConfigureDapperIdentityCryptography(Configuration.GetSection(\"DapperIdentityCryptography\"));\n        var connectionString = Configuration[\"ConnectionString\"];\n\n        services.AddEntityFrameworkNpgsql()\n            .AddDbContext<ApplicationEntityDbContext>(options =>\n                            options.UseNpgsql(connectionString));\n\n        services.AddIdentity<ApplicationUserEntity, IdentityRole<int>>(x =>\n                                                                            {\n                                                                                x.Password.RequireDigit = false;\n                                                                                x.Password.RequiredLength = 3;\n                                                                                x.Password.RequireLowercase = false;\n                                                                                x.Password.RequireNonAlphanumeric = false;\n                                                                                x.Password.RequireUppercase = false;\n                                                                            })\n                .AddEntityFrameworkStores<ApplicationEntityDbContext, int>()\n                .AddDefaultTokenProviders();\n\n        services.AddScoped<ApplicationUserEntity>();\n\n        services.AddIdentity<ApplicationUserOpenIddict, IdentityRole<int>>(o =>\n            {\n                o.Password.RequireDigit = false;\n                o.Password.RequireLowercase = false;\n                o.Password.RequireUppercase = false;\n                o.Password.RequireNonAlphanumeric = false;\n                o.Password.RequiredLength = 6;\n            })\n            .AddEntityFrameworkStores<ApplicationDbContext, int>()\n            .AddDefaultTokenProviders();\n\n        // OpenIddict\n        services.AddDbContext<ApplicationDbContext>(options =>\n        //options.UseMySQL(connectionString));\n        options.UseNpgsql(connectionString));\n\n        // Register the OpenIddict services, including the default Entity Framework stores.\n        services.AddOpenIddict<ApplicationUserOpenIddict, IdentityRole<int>, ApplicationDbContext, int>()\n            .EnableTokenEndpoint(\"/authorization/token\")\n            .EnableAuthorizationEndpoint(\"/authorization/authorize\")\n            .SetAccessTokenLifetime(TimeSpan.FromHours(1))\n            .SetRefreshTokenLifetime(TimeSpan.FromHours(1))\n            .AllowPasswordFlow()\n            .DisableHttpsRequirement()\n            .AddEphemeralSigningKey()\n            .AllowRefreshTokenFlow()\n            .AllowAuthorizationCodeFlow();\n\n        services.AddSingleton<IAuthMessageSender, AuthMessageSender>();\n\n        services.AddAntiforgery(options => options.HeaderName = \"x-xsrf-token\");\n\n        services.AddMvc();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IAntiforgery antiforgery)\n    {\n        app.Use(next => context =>\n        {\n            if (\n                string.Equals(context.Request.Path.Value, \"/\", StringComparison.OrdinalIgnoreCase) ||\n                string.Equals(context.Request.Path.Value, \"/index.html\", StringComparison.OrdinalIgnoreCase))\n            {\n                // We can send the request token as a JavaScript-readable cookie, and Angular will use it by default.\n                var tokens = antiforgery.GetAndStoreTokens(context);\n                context.Response.Cookies.Append(\"XSRF-TOKEN\", tokens.RequestToken, new CookieOptions() { HttpOnly = false });\n            }\n\n            return next(context);\n        });\n\n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n        loggerFactory.AddDebug();\n\n        app.UseIdentity();\n\n        app.UseOAuthValidation();\n        app.UseOpenIddict();\n\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n\n        app.UseDefaultFiles();\n        app.UseStaticFiles();\n        app.UseMvc();\n    }\n\n```\nController\n```\n        private readonly ILogger _logger;\n        private readonly UserManager _userManager;\n        private readonly IAuthMessageSender _authMessageSender;\n    public AccountController(ILogger<AccountController> logger, UserManager<ApplicationUserEntity> userManager, IAuthMessageSender authMessageSender)\n    {\n        _userManager = userManager;\n        _logger = logger;\n        _authMessageSender = authMessageSender;\n    }\n\n[AllowAnonymous]\n        [HttpPost(\"register\")]\n        [ValidateAntiForgeryToken]\n        public async Task Register([FromBody] Register model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new ModelStateViewModel() { Errors = ModelState.StatesToString() });\n            }\n        var user = new ApplicationUserEntity()\n        {\n            UserName = model.UserName,\n            Email = model.Email,\n            EmailConfirmed = false,\n            NormalizedEmail = model.Email,\n            NormalizedUserName = model.UserName\n        };\n\n        try\n        {\n            var result = await _userManager.CreateAsync(user, model.Password);\n\n            if (!result.Succeeded)\n            {\n                var stringBuilder = new StringBuilder();\n\n                foreach (var error in result.Errors)\n                    stringBuilder.Append(error.Description).Append(\", \");\n\n                _logger.LogInformation(string.Format(\"{0} ACCOUNT_REGISTER_INFORMATION - REGISTER ACCOUNT INFORMATION: \" +\n                                       \"The account creation for {1} ({2}) was not succeeded. ERROR LIST: {3}\", DateTime.UtcNow.ToString(), model.UserName, model.Password, stringBuilder.ToString()));\n            }\n\n            await _userManager.AddToRoleAsync(user, \"User\");\n\n            // Send email confirmation\n            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackURL = Url.Action(\"ConfirmEmail\", \"account\", new { f = user.Id, code = code });\n            await _authMessageSender.SendEmailAsync(user.Email, \"Confirm your account\", callbackURL);\n\n            return Ok();\n        }\n\n        catch (Exception ex)\n        {\n            _logger.LogError(string.Format(\"{0} ACCOUNT_REGISTER_ERROR - REGISTER ACCOUNT ERROR: {1}\", DateTime.UtcNow.ToString(), ex.Message));\n            return BadRequest(\"There was an error to create your account. Try again.\");\n        }\n    }\n\n```\nProblably It's not a bug. I must be doing it wrong. \n. I have tryed to configure in that way:\n```\nvar dataProtectionProviderType = typeof(DataProtectorTokenProvider);\nvar phoneNumberProviderType = typeof(PhoneNumberTokenProvider);\nvar emailTokenProviderType = typeof(EmailTokenProvider);\nservices.AddIdentity>(x =>\n                                                                                {\n                                                                                    x.Password.RequireDigit = false;\n                                                                                    x.Password.RequiredLength = 3;\n                                                                                    x.Password.RequireLowercase = false;\n                                                                                    x.Password.RequireNonAlphanumeric = false;\n                                                                                    x.Password.RequireUppercase = false;\n                                                                                })\n                    .AddEntityFrameworkStores()\n                    .AddTokenProvider(TokenOptions.DefaultProvider, dataProtectionProviderType)\n                    .AddTokenProvider(TokenOptions.DefaultEmailProvider, emailTokenProviderType)\n                    .AddTokenProvider(TokenOptions.DefaultPhoneProvider, phoneNumberProviderType);\n```\nWhere TokenOptions.DefaultProvider is the \"Default\" key, but I'm still getting the same error.\n. Hi @HaoK, now I uderstand what you mean. Now I'm calling the AddDefaultTokenProviders once and now the token generation is working.\nThank you for the explanation and sorry for some inconvinience.\n. ",
    "scottbrady91": "Currently I'm using the following workaround, similar to what you suggested:\npublic class ApplicationDbContext : IdentityDbContext {\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }\n}\nSeems a bit odd to be made to do this when you want to use more than one DbContext in a project. Shouldn't this be the default behavior of the library?\n. ",
    "snys98": "Well, but if I didn't add a RoleManager explicitly, an exception of service not found will be thrown. \nEdit\nIt's some other fault of mine. Sorry for disturbing you. \n. ",
    "brunopiovan": "The only difference between your versions and mine when I wrote that fix is Mvc and Kestrel were both 1.0.0.\nAfter investigating a bit more, I changed the code slightly:\n```\nif (httpContext.Features.Get()?.Handler == null)\n{\n    var handler = (AuthenticationHandler)Activator.CreateInstance(cookieAuthenticationHandlerType);\n    await handler.InitializeAsync(Startup.cookieAuthenticationOptions, httpContext, logger, UrlEncoder.Default);\nvar feature = httpContext.Features.Get<IHttpAuthenticationFeature>() ?? new HttpAuthenticationFeature();\nif (feature.Handler == null) //yes, sometimes it gets set when this line is reached\n{\n    feature.Handler = handler;\n    httpContext.Features.Set(feature);\n}\n\n}\n```\nthe comment explains it.\n. ",
    "MiniverCheevy": "Interestingly enough my sample app doesn't throw the exception.  It has the same basic workflow, javascript post to async controller method, which calls an async command, which makes an async call to authenticate the user, an async call to create the identity, then an async call to sign in. \nI'm simulating the async entity framework calls, am I correct in assuming that using CopyToAsync from a file stream to a memory stream works essentially the same way as a FirstOrDefaultAsync?\n. ",
    "CamiloTerevinto": "Hello @HaoK,\nIf I debug right after var result = await _SignInManager.TwoFactorSignInAsync(\"Email\", model.Code, false, model.RememberBrowser); the HttpContext.User property contains 4 times exactly the same claim:\n{http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name: MYGUID}\nThus, either how I set up Identity in Startup is wrong or the 1.0.0 version of TwoFactorSignInAsync does not put the expected claim type \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\"\n. @HaoK,\nAutomaticAuthenticate is a bool, and I am not setting it explicitly in my code, so my guess is that it's false by default? \nIf I debug up to the UserManager (code downloaded from GitHub) and enter any method and go to Options.Cookies, all 4 (Application, External, TwoFactorRememberMe and TwoFactoUserId) have AutomaticAuthenticate = true\n. I have no problem upgrading, I am even on EF Core 1.0.1 already. But I have the latest stable as per Nuget (1.0.0). I'll try turn them off explicitly and see what it does\n. I followed the link provided and changed the Identity setup to this:\nservices.AddIdentity<User, Role>(options =>\n{\n    options.Cookies.ApplicationCookie.CookieHttpOnly = true;\n    options.Cookies.ApplicationCookie.CookieSecure = CookieSecurePolicy.Always;\n    options.Cookies.ApplicationCookie.LoginPath = \"/User/Login\";\n    options.Cookies.ApplicationCookie.LogoutPath = \"/User/Logout\";\n    //..............\nNow after a successful \"TwoFactorSignInAsync\", HttpContext.User contains 0 identities/claims so not even my workaround works. I checked and all but ApplicationCookie have AutomaticAuthenticate = false\n. Using this\nvar result = await _SignInManager.TwoFactorSignInAsync(\"Email\", model.Code, false, model.RememberBrowser);\nif (result.Succeeded)\n{\n    User user = await userManager.GetUserAsync(HttpContext.User);\n}\nI'd expect that if I enter the if it's because all is good, the user entered the correct code and etc. Under normal \"_SignInManager.PasswordSignInAsync\" this is true; however, for TwoFactorSignInAsync I get null. \nI am now debugging TwoFactorSignInAsync: SignInManager L379\ntwoFactorInfo = good, retrieved the expected entity\nuser = good, found the user from the database\nerror = null, all is good so far\nVerifyTwoFactorTokenAsync = true\nRememberTwoFactorClientAsync =>\n    userId = good\n    rememberBrowserIdentity = good\n    await SignInAsync = ? not sure what happens there\nawait SignInAsync (OUTSIDE RememberTwoFactorClientAsync) =>\n   userPrincipal = good, contains 3 claims: NameIdentifier, Name and SecurityStamp and all correspond to my user\n   await SignInAsync = ? again, not sure what happens there\nGOING BACK (all TwoFactorSignInAsync apparently ran fine hence result.Succeeded == true) => HttpContext.User contains absolutely no claims.\n. Ahhh, I now get what you are saying. I did not know that. In fact, I never really saw that mentioned anywhere. \nOk, I removed the get user part for that action and all is working fine, the redirection is already authorized properly. Thank you for your time\n. @inexuscore That is completely unrelated to this question I had. You should either open a new bug report or question in Stack Overflow (you'll likely get better answers there).. @inexuscore The problem is that here there was no bug. This was my own problem of not knowing how the framework works :) post it there and email me the link, I'll try to check it out. @VahidN \n\n\nIt's registered as  \nservices.AddDbContext(options => options.UseSqlServer(Configuration.GetConnectionString(\"MyContext\")));\n\n\nI'd guess that's defined by AddDbContext\n\n\nI get the Context from DI and pass it to the function that generates the data:\npublic MyContrroller(MyContext ctx) //plus many other services\npublic static void AddData(this MyContext context)\n\n\nI also tried adding the data directly to the context using a simple for-loop instead of to the parent itself, yet the same thing happens right upon adding the second element.\nMore or less the structure is like this:\n\nCreate A\nCreate B using A\nCreate C and add it to A\nCreate multiple D and add it to C\n\n1-3 always worked ok, not sure why 4 fails. @VahidN  Using 1.1, according to NuGet the latest available. The models were scaffolded with the Scaffold-DbContext command. Oh shit, I realized what's wrong by looking at #6490 as @VahidN linked.\nThe problem was the scaffold incorrectly generated this:\n entity.Property(e => e.AnotherClassId).ValueGeneratedNever();\n\nRemoving the line for both entities fixed the issue.. ",
    "inexuscore": "Can someone please, for the love of god, provide an example project for a basic 2FA setup in Web API 2. I'm using Identity 2.2.2 and I need to implement 2FA ASAP, I'm already behind schedule and I need this NOW. Been struggling with this for days and the MVC5 template from Visual Studio 2017 wasn't helpful.\nThe SignInManager.PasswordSignInAsync() method works fine, it returns RequiresVerification. But I'm not sure what to do from there.\nIn my AuthorizationServerProvider class, in the GrantResourceOwnerCredentials() method, what do I do after receiving a status of RequiresVerification, do I have to sign the user in by generating the user identity - for the SignInManager to work properly - or do I set an error on the context and return. What I need to do is this: if the /token end-point results in RequiresVerification, return an error to notify the client (angular app) that the user needs to verify the 2FA security code. Then I generate and send the code, and display some UI for verification. The user receives the code, sends it to another end-point and it gets verified successfully. But then when I try to call SignInManager.TwoFactorSignInAsync() it always fails with a status of Failure. \nThis is my code:\n```\npublic override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)\n{\n    var user = await UserManager.FindAsync(context.UserName, context.Password);\n    if (user == null)\n    {\n        context.SetError(\"invalid_grant\", \"The user name or password is incorrect.\");\n        return;\n    }\nvar signInResult = await ServiceContext.SignInManager.PasswordSignInAsync(context.UserName, context.Password, isPersistent: true, shouldLockout: false);\n\n// other statuses .. removed for brevity\n\nif (signInResult == SignInStatus.RequiresVerification)\n{\n    var code = await UserManager.GenerateTwoFactorTokenAsync(user.Id, \"Email Code\");\n    IdentityResult result = await UserManager.NotifyTwoFactorTokenAsync(user.Id, \"Email Code\", code);\n\n    if (!result.Succeeded)\n    {\n        context.SetError(\"two_factor_error\", \"failed to send 2FA code\");\n        return;\n    }\n    else\n    {\n        // user needs to verify security code\n        context.SetError(\"requires_verification\");\n        return;\n    }\n}\n\n}\n```\nI'm generating and sending the code using the UserManager class because the SignInManager.SendTwoFactorCodeAsync() method doesn't work (User Id not found).\nAnd this is how I verify the security code in another end-point:\n```\n[HttpPost]\n[AllowAnonymous]\n[Route(\"VerifySecurityCode\")]\npublic async Task VerifySecurityCode(VerifySecurityCodeModel model)\n{\n    try\n    {\n        var user = await UserManager.FindAsync(model.UserName, model.Password);\n        if (user == null)\n            return BadRequest(\"username or password is invalid\");\n    var isTokenValid = await UserManager.VerifyTwoFactorTokenAsync(user.Id, \"Email Code\", model.Token);\n    if (!isTokenValid)\n        return BadRequest(\"Invalid token. try again\");\n\n    // this returns empty GUID\n    //var userId = await ServiceContext.SignInManager.GetVerifiedUserIdAsync();\n\n    // this sets the 2FA browser cookie, but doesn't actually sign-in\n    //await ServiceContext.SignInManager.SignInAsync(user, isPersistent: true, rememberBrowser: true);\n\n    // this always returns SignInStatus.Failure\n    var result = await ServiceContext.SignInManager.TwoFactorSignInAsync(\"Email Code\", model.Token, isPersistent: true, rememberBrowser: true);\n\n    return Ok(\"Security code verified successfully\");\n}\ncatch (Exception ex)\n{\n    return InternalServerError(ex);\n}\n\n}\n```\nI'm getting the user by username and password again, because for some messed up reason, the SignInManager.GetVerifiedUserIdAsync() method returns an empty GUID. But the SignInManager.HasBeenVerifiedAsync() returns true (?!).\nI'm nearly there, it shouldn't be this difficult, I think I'm missing something here. What I want is this:\n\nThe user sends a POST request to /token with their username/password\nIf 2FA is enabled (confirmed email, or a verified phone number), we don't sign the user in, but require them to verify the security code first. They shouldn't be able to request ANY resource (end-point) until they have verified their 2FA code\nWe generate the code and send it via email/sms. The user verifies the code, and is signed-in. Of course a 2FA cookie should be set at this point to remember the browser/device. We don't want them to go through 2FA on subsequent requests.\n\nThis is my Startup.cs config:\n```\n// Configure the db context, user manager and signin manager to use a single instance per request\napp.CreatePerOwinContext(SurveyContext.Create);\napp.CreatePerOwinContext(ApplicationUserManager.Create);\napp.CreatePerOwinContext(ApplicationSignInManager.Create);\nOAuthAuthorizationServerOptions OAuthServerOptions = new OAuthAuthorizationServerOptions()\n{\n    AllowInsecureHttp = true,\n    TokenEndpointPath = new PathString(\"/token\"),\n    AccessTokenExpireTimeSpan = TimeSpan.FromDays(7),\n    Provider = new AuthorizationServerProvider()\n};\n// Configure the application for OAuth based flow\nPublicClientId = \"self\";\nOAuthOptions = new OAuthAuthorizationServerOptions\n{\n    TokenEndpointPath = new PathString(\"/Token\"),\n    Provider = new ApplicationOAuthProvider(PublicClientId),\n    AuthorizeEndpointPath = new PathString(\"/api/Account/ExternalLogin\"),\n    AccessTokenExpireTimeSpan = TimeSpan.FromDays(7),\n    AllowInsecureHttp = true\n};\n// Token Generation\napp.UseOAuthAuthorizationServer(OAuthServerOptions);\napp.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions());\n// Cookie Configuration\napp.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);\napp.UseTwoFactorSignInCookie(DefaultAuthenticationTypes.TwoFactorCookie, TimeSpan.FromMinutes(5));\napp.UseTwoFactorRememberBrowserCookie(DefaultAuthenticationTypes.TwoFactorRememberBrowserCookie);\n```\nI have implemented 2FA in MVC 5 apps before, nothing fancy there. But in Web API + OWIN projects, I think I'm lost. I'd really appreciate it if someone took the time to guide me in the right direction or perhaps provide example code. I need to deploy my 2FA implementation in less than a week.\nThank in advance, fingers crossed, I'll get a helpful response soon. Cheers.. @CamiloTerevinto I understand that. I couldn't find anything useful on SO, and since you guys were talking about the 2FA bug, I thought I post my question here. I'll open a thread on SO but doubt I'd get any answers there. Bug reports won't help either, the repo is closed and they've moved on to Identity 3 and .NETCore .. any ideas are appreciated.. @CamiloTerevinto most probably, that's what I was thinking. I think I'm missing something. In the config, or the way I'm using the framework. Sure, I'll link you up as soon as I've created the SO thread.. ",
    "RLaptev": "Thank you, thank you!\nYou steered me in the right direction. My user object did have the SecurityStamp set, but I was missing SecurityStamp claim under Task<ClaimsPrincipal> CreateAsync. Adding the line below fixed the problem. Thanks again!\nidentity.AddClaim(new Claim(new ClaimsIdentityOptions().SecurityStampClaimType, user.SecurityStamp));\n. ",
    "shutdown256": "My bad, which one of them should I use? Even so is there a good way/how to deal with expired sign-in in SPA?\n. I think I figured it out. Several mistakes on my part.\n. ",
    "jgauffin": "From my point of view there are two solutions:\nAlternative one:\nLet ClaimsIdentity.UserIdClaimType be a unique claim and not reference NameIdentifier. Make sure that it's set to the id of the application/identity user.\nAlternative two:\nChange UserManager.GetUserId(ClaimPrincipal) and UserManager.GetUserAsync(ClaimPrincipal) so they use UserStore.FindByLoginAsync instead, as the NameIdentifier claim do not point at the application user id.\n. My point was that a custom PrincipalFactory and a custom UserManager wouldn't have been required if you had included the userId as a claim per default. I mean, you have the ClaimsIdentity.UserIdClaimType and you have a method in the UserStore to get the userId. Why not combine them to make it more straight forward to create custom stores?\nClaimTypes.NameIdentifier already exist, so why have two constants for the same claim? It's just confusing. especially since the NameIdentifier claim doesn't really contain the user id.\n. I saw that the default ClaimsFactory do assign the identity user id to the NameIdentifier.  My own claimsfactory is also invoked. But when _signInManager.ExternalLoginSignInAsync invocation have completed in the AccountController the generated principal is nowhere to be found.\nWhere is it assigned to the current context? I've tried to follow the pipeline and I can see that the SigninManager creates it, but when _myContext.HttpContext.Authentication.SignInAsync have been invoked from it it doesn't seem like its been assigned to anything.\nHow can I verify that it's actually been used?\n. Yes, I'm using the default AccountController.\nIn ExternalLoginCallback the _signInManager.GetExternalLoginInfoAsync returns the oauth claimsidentity which seems correct.\nthe claimsfactory is invoked when the ExternalLoginSignInAsync method is executing. But once it completes I cannot find the created ClaimsPrincipal anywhere.\nI had originally not changed anything but the UserStore and RoleStore. Due to debugging I've added my own UserManager and SigninManager just to be able to debug method calls.\nHow can I investigate further where, and if, the created application user principal is assigned?\n. I need to do some post processing in the AccountController for the authenticated identity user. Is there no way to retrieve it? I need to be able to get the application user id.\nI'm my specific case I need to store a token for the authenticated user in the database to be able to use single sign-on for multiple domains. \nThis could of course be done in my custom credentials factory, but it's impossible since I need a way to supply the nonce back to the AccountController so that it can redirect to the other domain with the nonce.\nThe methods in the SigninManager doesn't have any context either that can be used to transport back the information to the controller.\nSo I'm a bit stuck. Why can't the HttpContext.User  be assigned once the authentication process is completed? In that way the credentials would be available in the AccountController.\n. true. thanks.\n. ",
    "cbettero": "No, it's not the duplicate of #859,\nwe have the same problem: even if we set the ExpireTimeSpan like this:\noptions.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromMinutes(120);\nthe authentication seems to expire, randomly, after about 20 minutes.\nWhat can be the problem ?\nWe are running ASP.NET Core 1.1 on IIS.\nThanks. ",
    "groege": "We have the same problem in my company and think it is the worker process lifetime.\nIt seems like after 20 minutes the worker is killed (if not used)... should the token not be valid even if the worker has been killed?\nMaybe someone can verify? Because we may be wrong.. ",
    "PaulRReynolds": "I'm also running into this issue since I need to customise the UserRole entity, but I don't see a way of doing this while using the simpler base type.\n```\npublic class ApplicationRole : IdentityRole>\n{\n    public ApplicationRole() : base() { }\n    public ApplicationRole(string name) : base(name) { }\n}\npublic class ApplicationUserRole : IdentityUserRole\n{\n    //Extra property required on User-Role entity\n    public Guid LevelID { get; set; }\n}\n```\n```\npublic class ApplicationDbContext : IdentityDbContext\n{\n    public ApplicationDbContext(DbContextOptions options)\n    : base(options)\n    {\n    }\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n        base.OnModelCreating(builder);            \n}\n\n}\n```\nIs there any way to work around this restriction while using an extended IdentityUserRole?\n. Thanks Vahid,\nI think the question was not so much accessing the IConfigurationRoot in ConfigureServices, and more how to avoid explicitly transferring every setting manually into the AddIdentity Action.\nI've used your suggestion of Configuration.Bind(options)  as follows in ConfigureServices:\nservices.AddIdentity<ApplicationUser, ApplicationRole>(options => Configuration.Bind(options))\n    .AddEntityFrameworkStores<ApplicationDbContext, Guid>()\n    .AddDefaultTokenProviders()\n    .AddUserStore<ApplicationUserStore<ApplicationDbContext>>()\n    .AddRoleStore<RoleStore<ApplicationRole, ApplicationDbContext, Guid>>();\nThis works nicely and transfers my settings from my JSON config file:\n{\n  \"Lockout\": {\n    \"MaxFailedAccessAttempts\": 5,\n    \"DefaultLockoutTimeSpan\": \"0.00:05:00.0000\"\n  }\n}. ",
    "breyed": "Good to hear. The documentation for ChangePasswordAsync should describe or link to the invalidation design to make it more discoverable.\n. ",
    "jgimness": "Same problem here too.  Immediately after the 2nd entry it redirects to /Account/AccessDenied?ReturnUrl=%2Faccount%2Fexternallogincallback\nThe last line called in AccountController is\nreturn Challenge(properties, provider);\nhttps://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.Mvc/Controllers/AccountController.cs#L151\nManually deleting the \"Identity.External\" cookie allows reentry. \n. Just added and tested it right now, and it did not fix the problem.\n. @Ketrex My variation is even with a non-logged in user.  For instance:\n1. User goes to the login page\n2. User clicks Login with Facebook\n3. Whoops, they wanted to login with Google instead, so they click the Back button\n4. Login panel (shown from browser cache), user clicks Google\n5. User get the /Account/AccessDenied page\nIn #4, the \"Identity.External\" cookie is still hanging around, and not getting cleared out because the login page is served from browser cache.  Even if I add\n// Clear the existing external cookie to ensure a clean login process\n            await HttpContext.Authentication.SignOutAsync(_externalCookieScheme); to the ExternalLogin callback, I can still reproduce the problem (it takes a few more back and forth clicks but the problem will show up)\n. ",
    "eliassorensen": "I will create a sample that recreates the issue and return back. \n. ",
    "thedumbtechguy": "I moved this to https://github.com/aspnet/Security/issues/1017 a I think that is more appropriate\n. ",
    "pmhsfelix": "\nThe IHttpContextAccessor implementation should have singleton scope since it uses AsyncLocal to obtain the current context - see https://github.com/aspnet/Hosting/issues/793\nSo, using UserManager also with singleton scope is compatible with the IHttpContextAccessor scope.\nHowever, UserManager seems to capture the context as a readonly field (https://github.com/aspnet/Identity/blob/rel/1.1.0-preview1/src/Microsoft.AspNetCore.Identity/UserManager.cs#L98), meaning that it should have per request scope. \n. \n",
    "Cor4xX": "I'm still blocked with this issue. Could someone help me please ? Thanks a lot\n. I'm still blocked with this issue. Could someone help me please ? Thanks a lot\n. https://s22.postimg.org/p0xx8bhkx/image.png\nHere's a screen for my tables User, Role and User_Role. Its MySQL database. \n. https://s22.postimg.org/p0xx8bhkx/image.png\nHere's a screen for my tables User, Role and User_Role. Its MySQL database. \n. Hey Haok thanks for the answer.\nStartup.cs in ConfigureServices method\n```\n        private void InitIdentityService(IServiceCollection services)\n        {\n            services.AddIdentity(options => {\n                options.Password.RequireDigit = false;\n                options.Password.RequireLowercase = true;\n                options.Password.RequireNonAlphanumeric = false;\n                options.Password.RequireUppercase = false;\n                options.Password.RequiredLength = FrontConstants.PasswordLength;\n            // Lockout settings\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\n            options.Lockout.MaxFailedAccessAttempts = 10;\n\n            // Cookie settings\n            options.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays(30);\n            options.Cookies.ApplicationCookie.LoginPath = \"/Account/Login\";\n            options.Cookies.ApplicationCookie.LogoutPath = \"/Account/Logout\";\n\n            // User settings\n            options.User.RequireUniqueEmail = true;\n        })\n                .AddEntityFrameworkStores<Context, int>()\n                .AddDefaultTokenProviders();\n        services.AddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsFactory>();\n    }\n\n```\nThen i set my services in a static SimpleInjector class to avoid to pass UserManager, SigninManager etc in each controller : \nStartup.cs in Configure method\ncontainer.RegisterSingleton(provider.GetRequiredService<UserManager<User>>);\n            container.RegisterSingleton(provider.GetRequiredService<RoleManager<Role>>);\n            container.RegisterSingleton(provider.GetRequiredService<SignInManager<User>>);\n. Hey Haok thanks for the answer.\nStartup.cs in ConfigureServices method\n```\n        private void InitIdentityService(IServiceCollection services)\n        {\n            services.AddIdentity(options => {\n                options.Password.RequireDigit = false;\n                options.Password.RequireLowercase = true;\n                options.Password.RequireNonAlphanumeric = false;\n                options.Password.RequireUppercase = false;\n                options.Password.RequiredLength = FrontConstants.PasswordLength;\n            // Lockout settings\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\n            options.Lockout.MaxFailedAccessAttempts = 10;\n\n            // Cookie settings\n            options.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays(30);\n            options.Cookies.ApplicationCookie.LoginPath = \"/Account/Login\";\n            options.Cookies.ApplicationCookie.LogoutPath = \"/Account/Logout\";\n\n            // User settings\n            options.User.RequireUniqueEmail = true;\n        })\n                .AddEntityFrameworkStores<Context, int>()\n                .AddDefaultTokenProviders();\n        services.AddScoped<IUserClaimsPrincipalFactory<User>, UserClaimsFactory>();\n    }\n\n```\nThen i set my services in a static SimpleInjector class to avoid to pass UserManager, SigninManager etc in each controller : \nStartup.cs in Configure method\ncontainer.RegisterSingleton(provider.GetRequiredService<UserManager<User>>);\n            container.RegisterSingleton(provider.GetRequiredService<RoleManager<Role>>);\n            container.RegisterSingleton(provider.GetRequiredService<SignInManager<User>>);\n. ``\nSystem.FormatException: String was not recognized as a valid Boolean.\n   at System.Boolean.Parse(String value)\n   at System.String.System.IConvertible.ToBoolean(IFormatProvider provider)\n   at lambda_method(Closure , DbDataReader )\n   at Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory.Create(DbDataReader dataReader)\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable.AsyncEnumerator.<MoveNext>d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider.<GetResult>d__161.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n```\nHere's how i define my table in DbContext\nbuilder.Entity<User>(i => {\n                i.ToTable(\"users\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<Role>(i => {\n                i.ToTable(\"roles\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserRole<int>>(i => {\n                i.ToTable(\"user_roles\");\n                i.HasKey(x => new { x.RoleId, x.UserId });\n            });\n            builder.Entity<IdentityUserLogin<int>>(i => {\n                i.ToTable(\"user_logins\");\n                i.HasKey(x => new { x.ProviderKey, x.LoginProvider });\n            });\n            builder.Entity<IdentityRoleClaim<int>>(i => {\n                i.ToTable(\"role_claims\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserClaim<int>>(i => {\n                i.ToTable(\"user_claims\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserToken<int>>(i => {\n                i.ToTable(\"user_tokens\");\n            });\nUser and Role tables have an Int ID (i replace the string id). I dont know if it's linked\n. ``\nSystem.FormatException: String was not recognized as a valid Boolean.\n   at System.Boolean.Parse(String value)\n   at System.String.System.IConvertible.ToBoolean(IFormatProvider provider)\n   at lambda_method(Closure , DbDataReader )\n   at Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory.Create(DbDataReader dataReader)\n   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable.AsyncEnumerator.<MoveNext>d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider.<GetResult>d__161.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n```\nHere's how i define my table in DbContext\nbuilder.Entity<User>(i => {\n                i.ToTable(\"users\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<Role>(i => {\n                i.ToTable(\"roles\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserRole<int>>(i => {\n                i.ToTable(\"user_roles\");\n                i.HasKey(x => new { x.RoleId, x.UserId });\n            });\n            builder.Entity<IdentityUserLogin<int>>(i => {\n                i.ToTable(\"user_logins\");\n                i.HasKey(x => new { x.ProviderKey, x.LoginProvider });\n            });\n            builder.Entity<IdentityRoleClaim<int>>(i => {\n                i.ToTable(\"role_claims\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserClaim<int>>(i => {\n                i.ToTable(\"user_claims\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserToken<int>>(i => {\n                i.ToTable(\"user_tokens\");\n            });\nUser and Role tables have an Int ID (i replace the string id). I dont know if it's linked\n. Hey ! Thanks again for the answer. I cant try now but i will do it tomorrow ! \n. Hey ! Thanks again for the answer. I cant try now but i will do it tomorrow ! \n. Hi Haok,\ncontext.Roles.First() works great, i get my Admin role who is the only one Role defined in DB.\nI also try this.context.Roles.SingleOrDefault(); that return Admin too.\n. Hi Haok,\ncontext.Roles.First() works great, i get my Admin role who is the only one Role defined in DB.\nI also try this.context.Roles.SingleOrDefault(); that return Admin too.\n. What's the next step ? any idea ? I'm totaly lost with this issue, i can't debug at all since i can't access to the library.\n. What's the next step ? any idea ? I'm totaly lost with this issue, i can't debug at all since i can't access to the library.\n. Hmmm i dont see any SingleOrDefaultAsync method with intellisense.\n. Hmmm i dont see any SingleOrDefaultAsync method with intellisense.\n. var test = await this.context.Roles.SingleOrDefaultAsync();\nWorks great too... \n. var test = await this.context.Roles.SingleOrDefaultAsync();\nWorks great too... \n. This code works too. \nI got my role normalized and then i got it from DB.\n. This code works too. \nI got my role normalized and then i got it from DB.\n. ```\npublic class Role : IdentityRole\n{\n}\npublic class User : IdentityUser\n{\n}\n```\nI use this kind of Users and Roles.\nIn DB context i declare relation and table like this : \nbuilder.Entity<User>(i => {\n                i.ToTable(\"users\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<Role>(i => {\n                i.ToTable(\"roles\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserRole<int>>(i => {\n                i.ToTable(\"user_roles\");\n                i.HasKey(x => new { x.RoleId, x.UserId });\n            });\nMaybe it could help us in our investigation.\n. ```\npublic class Role : IdentityRole\n{\n}\npublic class User : IdentityUser\n{\n}\n```\nI use this kind of Users and Roles.\nIn DB context i declare relation and table like this : \nbuilder.Entity<User>(i => {\n                i.ToTable(\"users\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<Role>(i => {\n                i.ToTable(\"roles\");\n                i.HasKey(x => x.Id);\n            });\n            builder.Entity<IdentityUserRole<int>>(i => {\n                i.ToTable(\"user_roles\");\n                i.HasKey(x => new { x.RoleId, x.UserId });\n            });\nMaybe it could help us in our investigation.\n. ```\n        public async Task TestRole(User user)\n        {\n            var name = \"test\".Normalize().ToUpperInvariant();\n            var role = await this.context.Roles.SingleOrDefaultAsync(r => r.NormalizedName == name);\n            this.context.UserRoles.Add(new IdentityUserRole()\n            {\n                RoleId = role.Id,\n                UserId = user.Id\n            });\n        this.context.SaveChanges();\n    }\n\n```\nThis code works great too : i got my user_roles added in DB. \n. ```\n        public async Task TestRole(User user)\n        {\n            var name = \"test\".Normalize().ToUpperInvariant();\n            var role = await this.context.Roles.SingleOrDefaultAsync(r => r.NormalizedName == name);\n            this.context.UserRoles.Add(new IdentityUserRole()\n            {\n                RoleId = role.Id,\n                UserId = user.Id\n            });\n        this.context.SaveChanges();\n    }\n\n```\nThis code works great too : i got my user_roles added in DB. \n. Hi @divega \nFirst, thanks for your time and responses. I will try to investigate with my collegue next week and analyze your response.\nAt the moment i can use Role System directly via my context and own repository/unitofwork. It works. \nI will keep you in touch. Thx !\n. Hi @divega \nFirst, thanks for your time and responses. I will try to investigate with my collegue next week and analyze your response.\nAt the moment i can use Role System directly via my context and own repository/unitofwork. It works. \nI will keep you in touch. Thx !\n. I'm trying to clean up my solution, but i'm totaly lost with this DI. Is there a way to encapsulate SignInManger, RoleManager and UserManager ? I have IMapper service, and some other services, am i obliged to add all of this services in my controllers' constructor ?\nI would like to encapsulate my services into 3 class : IServiceContainer (with unitofwork, cache service, etc), IWebService (automapper, appsettings) and IAccountServiceContainer (all identity manager).\nThis way i can only pass 3 class/services with DI to my controllers and use it throw my differents projects (Services, DAL, etc)\nCould you give me some tips with that ? \n. I'm trying to clean up my solution, but i'm totaly lost with this DI. Is there a way to encapsulate SignInManger, RoleManager and UserManager ? I have IMapper service, and some other services, am i obliged to add all of this services in my controllers' constructor ?\nI would like to encapsulate my services into 3 class : IServiceContainer (with unitofwork, cache service, etc), IWebService (automapper, appsettings) and IAccountServiceContainer (all identity manager).\nThis way i can only pass 3 class/services with DI to my controllers and use it throw my differents projects (Services, DAL, etc)\nCould you give me some tips with that ? \n. I will illustrate what im trying to do and actually it seems to work. (i still have my problem with Role anyway)\n```\n            services.AddSingleton(sp =>\n            {\n                var appSettings = sp.GetService(typeof(AppSettings)) as AppSettings;\n                var mapper = sp.GetService(typeof(IMapper)) as IMapper;\n                return new WebContainer(mapper, appSettings);\n            });\n        services.AddScoped<IServiceContainer>(sp =>\n        {\n            var dbContext = sp.GetService(typeof(context)) as context;\n            var unitOfWork = new UnitOfWork(dbContext);\n            var memoryCache = sp.GetService(typeof(IMemoryCache)) as IMemoryCache;\n            return new ServiceContainer(unitOfWork, memoryCache);\n        });\n\n        services.AddScoped<IAccountServiceContainer>(sp =>\n        {\n            var userManager = sp.GetService(typeof(UserManager<User>)) as UserManager<User>;\n            var roleManager = sp.GetService(typeof(RoleManager<Role>)) as RoleManager<Role>;\n            var siginManager = sp.GetService(typeof(SignInManager<User>)) as SignInManager<User>;\n            return new AccountServiceContainer(siginManager, roleManager, userManager);\n        });\n\n```\nAnd i have a _CoreController \n```\n    public class _CoreController : Controller\n    {\n        protected IWebContainer WebContainer { get; set; }\n        protected IServiceContainer ServiceContainer { get; set; }\n        protected IAccountServiceContainer AccountServiceContainer { get; set; }\n    public _CoreController(IWebContainer webContainer)\n    {\n        this.WebContainer = webContainer;\n    }\n\n    public _CoreController(IWebContainer webContainer, IServiceContainer serviceContainer)\n    {\n        this.WebContainer = webContainer;\n        this.ServiceContainer = serviceContainer;\n    }\n\n    public _CoreController(IWebContainer webContainer, IServiceContainer serviceContainer, IAccountServiceContainer accountServiceContainer)\n    {\n        this.WebContainer = webContainer;\n        this.ServiceContainer = serviceContainer;\n        this.AccountServiceContainer = accountServiceContainer;\n    }\n\n}\n```\nThat allows me to use the right constructor and the right services depending on which Controller i'm.\nI have remove SimpleInjector and now im using Asp Core DI only.\nWhat do you thing about that ? Anyway IsInRoleAsync via UserManager still not working. My AccountServiceContainer is Scoped and not singleton like you said.\n. I will illustrate what im trying to do and actually it seems to work. (i still have my problem with Role anyway)\n```\n            services.AddSingleton(sp =>\n            {\n                var appSettings = sp.GetService(typeof(AppSettings)) as AppSettings;\n                var mapper = sp.GetService(typeof(IMapper)) as IMapper;\n                return new WebContainer(mapper, appSettings);\n            });\n        services.AddScoped<IServiceContainer>(sp =>\n        {\n            var dbContext = sp.GetService(typeof(context)) as context;\n            var unitOfWork = new UnitOfWork(dbContext);\n            var memoryCache = sp.GetService(typeof(IMemoryCache)) as IMemoryCache;\n            return new ServiceContainer(unitOfWork, memoryCache);\n        });\n\n        services.AddScoped<IAccountServiceContainer>(sp =>\n        {\n            var userManager = sp.GetService(typeof(UserManager<User>)) as UserManager<User>;\n            var roleManager = sp.GetService(typeof(RoleManager<Role>)) as RoleManager<Role>;\n            var siginManager = sp.GetService(typeof(SignInManager<User>)) as SignInManager<User>;\n            return new AccountServiceContainer(siginManager, roleManager, userManager);\n        });\n\n```\nAnd i have a _CoreController \n```\n    public class _CoreController : Controller\n    {\n        protected IWebContainer WebContainer { get; set; }\n        protected IServiceContainer ServiceContainer { get; set; }\n        protected IAccountServiceContainer AccountServiceContainer { get; set; }\n    public _CoreController(IWebContainer webContainer)\n    {\n        this.WebContainer = webContainer;\n    }\n\n    public _CoreController(IWebContainer webContainer, IServiceContainer serviceContainer)\n    {\n        this.WebContainer = webContainer;\n        this.ServiceContainer = serviceContainer;\n    }\n\n    public _CoreController(IWebContainer webContainer, IServiceContainer serviceContainer, IAccountServiceContainer accountServiceContainer)\n    {\n        this.WebContainer = webContainer;\n        this.ServiceContainer = serviceContainer;\n        this.AccountServiceContainer = accountServiceContainer;\n    }\n\n}\n```\nThat allows me to use the right constructor and the right services depending on which Controller i'm.\nI have remove SimpleInjector and now im using Asp Core DI only.\nWhat do you thing about that ? Anyway IsInRoleAsync via UserManager still not working. My AccountServiceContainer is Scoped and not singleton like you said.\n. Hey !\nI'm coming back with more informations ! We are  finally deciding to use SqlServer because we faced some other problems with MySQL.\nAnd.... everything works !!!! I can use IsInRole method from Identity etc... So the problem was MySQL or MySQL Driver or a combination of Identity and MySql. \nI hope it will help you to investigate. Thanks again for your help :). Hey !\nI'm coming back with more informations ! We are  finally deciding to use SqlServer because we faced some other problems with MySQL.\nAnd.... everything works !!!! I can use IsInRole method from Identity etc... So the problem was MySQL or MySQL Driver or a combination of Identity and MySql. \nI hope it will help you to investigate. Thanks again for your help :). @divega Thanks but i will not have time to isolate this problem from my project and i have already overwrite so much code (i could check in my SVN). When i got some moment i will share you the project. For the moment i think all the needed code and sql are in this topic.\nThanks for the advice for DI question. Actually it looks like to be well considered since my containers' lifetime are grouped by children requirement. \n(sorry for my bullshit english by the way xD). @divega Thanks but i will not have time to isolate this problem from my project and i have already overwrite so much code (i could check in my SVN). When i got some moment i will share you the project. For the moment i think all the needed code and sql are in this topic.\nThanks for the advice for DI question. Actually it looks like to be well considered since my containers' lifetime are grouped by children requirement. \n(sorry for my bullshit english by the way xD). ",
    "ChristianHaase": "Any updates on this issue? I'm receiving this error when trying to add a role to a user.\n await _userManager.AddToRole(user, \"Member\"). I'm not actually using MySql.Data. I'm using SapientGuardian.EntityFrameworkCore.MySql. No of course not. My bad! :). Thank you @divega, but I'll just give it a go with the official provider.\n\n@gmartinezsan I just tried it, and now I'm getting the following error on UserManager.CreateAsync(user, password)\n\nConnection must be valid and open to commit transaction. Sure. Let me create a github repo. Had plans to do so anyways. I'll link to you once done.. Here you go https://github.com/ChristianHaase/OurGhostsOfWar. Hello @gmartinezsan Any updates? :). @gmartinezsan That sounds perfect. Thank you for your help. \ud83d\udc4d . @gmartinezsan Quick question. Why do you only have asynchronous operations, and not both? Why not give the developer the option to choose themselves? Might be a stupid question.. \n",
    "gmartinezsan": "@ChristianHaase Which version are you using of MySql.Data ?. @ChristianHaase ok.. I thought you were using our provider for MySQL. (MySQL.Data,EntityFrameworkCore).\nI do not know about SapientGuardian,. @divega \nNo problem at all.. I would be happy to help. But in this case I'm afraid I cannot.\n@ChristianHaase \nIs thery any chance you would like to give it a try to the official MySQL Provider? \nOr have you already?\n. @ChristianHaase is there any chance you can share your project?\nThis sound like an old bug I found. Which version are you trying?. @ChristianHaase taking a look now.. @ChristianHaase I see you are already using 6.10.0 which is the latest we have. I think this is an already fixed issue. I will double check and let you know what the results are. \n. @ChristianHaase I tried it and the issue is not related to the Identity provider or EF Core.. the issue is that we do not have a complete support for Async methods which is the one used in the Identity provider. I created a bug so you can follow up the fix. I will work on this next week and share the fix. \nI'm very sorry for the inconveniente. \nHere's the bug number\nhttps://bugs.mysql.com/bug.php?id=84814. @ChristianHaase hi, not a stupid question at all, the requirement for the async method comes from the implementation of the Identity provider. So we either need to find a way to override that, which I see a bit difficult, or we add some async methods on our side so the Identity provider works normally.\nHope this explains it better.\n. ",
    "roji": "I'm not sure I entirely understand the issue (have little experience with ASP.Net Identity), but here are some thoughts.\nIf I understand things correctly, KeyDiscoveryConvention is the component responsible for identifying keys (i.e. automatically marking a property named Id as a Key). This is included in the core convention set which is used in Npgsql, so id properties should be identified there just like with SQL Server. I just confirmed this in an isolated test - properties called Id (and not explicitly marked with ValueGeneratedOnAdd) are properly created as PostgreSQL serial columns (which is kind of the equivalent of SQL Server IDENTITY). In other words, I think it's OK for ASP.NET Identity to depend on the behavior where properties named Id are automatically recognized as keys.\nThe change in 1.1.0-preview1 is unfortunate - it's because I misunderstood some important things when first writing the EF Core provider, and it was important to clean that up (and especially in order to add HiLo support). However, this issue doesn't mention 1.1.0 anywhere - it seems the issue is happening with 1.0.0. Regardless, the 1.1.0 issues should only bite people who already have migrations generated by the 1.0.0 provider - people starting fresh with 1.1.0-preview1 shouldn't experience any issues.\nSo I'm not really sure what's going on, and especially how explicitly adding ValueGenerateOnAdd resolves anything here. @brockallen if you can post a minimal code sample that reproduces the issue I could take a look.\n. @divega OK no problem, I'll keep following this issue to see if I can help. If you have a repro I could look into it on my side too.\n. Is it possible to get more details here? Is the problem with the column identifier (i.e. Id) or with its contents? \nRegarding identifiers, in PostgreSQL, all unquoted identifiers are always folded to lowercase. The Npgsql EF Core emits SQL code that quotes all identifiers, making all matches case-sensitive - there's no way to change either PostgreSQL's behavior or Npgsql's. Did someone create the Id column with a different casing, no via EF Core?\nBasically I'd need more info to be able to help here.. So if I understand correctly, the Id column was populated with uppercase GUID strings (by whom exactly?) but is being queried with lowercase? This seems like it would be a bug in ASP.NET identity which has to be fixed there (i.e. use same case when populating and querying) rather than trying to fix this at the database level...\nI'm guessing there's no issue with SqlServer because a case-insensitive collation is set up at the database level? Unfortunately PostgreSQL doesn't support this. The only option for case-insensitive collation is by defining the column type as citext instead of text (see the citext extension). If you can customize the model, than doing .HasColumnType(\"citext\") may provide a workaround (you'd also need to do .HasPostgresExtension(\"citext\")).\nBut again, this seems like a problem that should be fixed in ASP.NET Identity itself.... OK, thanks for the added info.\nTo recapitulate, the correct way to fix this is to ensure the same case is used everywhere - if I understand correctly this is more of a client issue. If a workaround is absolutely necessary at the PostgreSQL/Npgsql/EF Core level instead, it may be possible to redefine the column holding the data as citext instead of text.. ",
    "colindekker": "Why is the Id always an int while the UserId is configurable as TKey?. ",
    "gerardog": "Reading this https://github.com/aspnet/Identity/issues/991#issuecomment-256516328 just realized this may already be in the backlog. Feel free to close as dupe.\n. ",
    "mcgiany": "@HaoK was right, Using described solution helps. Thx again.\n. Thanks @divega for your reaction.\nThis is code of CreatePost method:\n```\n[HttpPost]\n        [ActionName(\"Create\")]\n        public async Task CreatePost()\n        {\n            var model = await BindViewModel();\n            model.UpdateRoles(_roleManager.Roles.ToList());\n        if (!ModelState.IsValid)\n        {\n            return View(model);\n        }\n\n        BackofficeUser user = new BackofficeUser()\n        {\n            Name = model.Name,\n            IsEnabled = true,\n            Description = model.Description,\n            Email = model.Email,\n            UserName = model.Username\n        };\n\n        using (var transaction = _context.Database.BeginTransaction())\n        {\n            IdentityResult result = await _userManagerStore.CreateAsync(user, model.Password);\n            if (result.Succeeded && model.SelectedRoles != null && model.SelectedRoles.Count > 0)\n            {\n                result = await _userManagerStore.AddToRolesAsync(user, model.SelectedRoles);\n            }\n\n            if (result.Succeeded)\n            {\n                transaction.Commit();\n                AddStatusSuccess(Strings.Users.UserCreatedMessage(user.UserName));\n\n                return RedirectToAction(\"Index\");\n            }\n\n            transaction.Rollback();\n\n            foreach (var error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n\n            return View(model);\n        }\n    }\n\n```\nAnswer to other questions:\n1. I'm using latest SQL Server 2016\n2. I could. I will tell you if it helps, or if the issue still exists. It can take some time, cuz the issue happened randomly.\n3. ~~This is not an option for me, because the table will be used in replication. Thats why i use hi/lo sequence with 1 increment.~~ This could help. I will try.. OK, i changed the model and use sequences as default value. For this time, i think its enough. If i have some problem with this setup, i will reopen the issue.\nThanks again. Hi,\nthanks for your response, but i dont think that i'm accessing the store directly. My userManagerStore is just a wrapper for UserManager APIs. It just add some audit log feature in some methods.\nThis method:\nawait _userManagerStore.UpdateAsync(user);\nhas this implementation:\npublic async Task<IdentityResult> UpdateAsync(BackofficeUser user)\n        {\n            return await _userManager.UpdateAsync(user);\n        }\n_userManager is UserManager API.\nAnd as i said before, it happens randomly, usually after deployment of my web app. And restart of application pool fix it.\nI think, it's problem somewhere in the API.. @HaoK - i work with Users table just via identity API.\nAudit Log stores entry into different table, and doesnt touch the user table nor backoffice object.\nAuditLog.StartAsync just create new instance of AuditLogEntry class.\npublic Task<AuditLogEntry> StartAsync(AuditLogAction auditAction)\n        {\n            var action = auditAction.Action.ToInvariant();\n            var parameters = auditAction.Parameters.Cast<object>().ToArray();\n            return Task.FromResult(new AuditLogEntry\n            {\n                Application = _appIdentifier.Identifier,\n                Created = DateTime.UtcNow,\n                UserId = auditAction.UserId ?? UserId,\n                UserName = auditAction.UserName ?? UserName,\n                Type = EntryType,\n                Action = action,\n                OldData = auditAction.Changed.From,\n                NewData = auditAction.Changed.To,\n                Entities = auditAction.Entities,\n                Message = _stringLocalizer.WithCulture(Culture)[\"Audit\" + action, parameters]\n            });\n        }\nFinishAsync store this entry to database using stored procedure. Nothing is working with backoffice user. The audit log is not related to the backoffice user, it is common thing in our system.. As i know, no one else access to the data. So, i dont think there is any concurrency issue (outside the framework). Only one user is logged into our application. None side effects in the application.\nAnyway, the issue didnt show long time. But if it returns again, i will try to trace ConcurrencyStamp changes in User table. Maybe i will find something.. Our startup.cs is little bit longer, so i shortened it, but contains all relevant things to this issue.\nThe only thing i customize is, that i use sequences for Identity entities except auto increment value in database.\nBindViewModel doesnt anything with the userManagerStore. This method just get the posted data from the form.\nstartup.cs\n```\npublic class Startup\n{\n    public IConfigurationRoot Configuration { get; set; }\npublic Startup(IConfigurationRoot cfg)\n{\n    Configuration = cfg;\n}\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddEntityFramework()\n        .AddEntityFrameworkSqlServer()\n        .AddDbContext<BackofficeDbContext>(options => options.UseSqlServer(/* connection string*/));\n\n    services.AddIdentity<BackofficeUser, BackofficeRole>(\n            options =>\n                {\n                    options.Password.RequireDigit = false;\n                    options.Password.RequireLowercase = false;\n                    options.Password.RequireNonAlphanumeric = false;\n                    options.Password.RequireUppercase = false;\n                    options.Password.RequiredLength = 6;\n                    options.Cookies.ApplicationCookie.AutomaticChallenge = true;\n                    options.Cookies.ApplicationCookie.AccessDeniedPath = new PathString(\"/Errors/NotAuthorized\");\n                    options.SecurityStampValidationInterval = TimeSpan.Zero;\n                }\n        )\n        .AddEntityFrameworkStores<BackofficeDbContext, int>()\n        .AddDefaultTokenProviders();\n\n    services.AddSingleton<IClaimsPrincipalAccessor, BackofficePrincipalAccessor>();\n    services.AddSingleton<IUserManagerStore, UserManagerStore>();\n    services.AddSingleton<IRoleManagerStore, RoleManagerStore>();\n    services.AddSingleton<ISessionIdAccessor, SessionIdAccessor>();\n    services.AddSingleton<IActionContextAccessor, ActionContextAccessor>();\n\n    services.Configure<IdentityOptions>(options =>\n        {\n            options.Lockout.MaxFailedAccessAttempts = 3;\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);\n        });\n\n    services.AddSession();\n    services.AddMvc(options =>\n            {\n                options.UseBackofficeModelBinders();\n            });\n}\n\npublic void Configure(\n    IApplicationBuilder app)\n{\n    app.UseIdentity();\n    app.UseSession();\n    app.UseCheckUserStatusMiddleware();\n    app.UseMvc(routes =>\n        {\n            routes.MapRoute(name: \"areaRoute\",\n                template: \"{area:exists}/{controller=Home}/{action=Index}\");\n\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n}\n\n}\n```. ",
    "pushist1y": "There is no issue on this. Should I add it? \n. Added Issue #1029\n. @divega it's ok as long as it does not forcefully invoke database update - so you can make multiple changes to a user and batch them into single update. . ",
    "eriksendc": "By the way, we're not finding that data is ever insterted into AspNetUserTokens. What is it used for? We were assuming that tokens generated for password resets would be the kind of tokens stored here. But we're not seeing any data stored. If it is the case that those are the kinds of tokens being stored, then it would seem that nvarchar(max) would be an unnecessarily large size for the Value column. In practice I think the tokens generated are far smaller than 4000 characters, so I would think that nvarchar(4000) would be a better choice.\n. Hi @Tratcher . The latest round of these errors stopped occurring early in the morning of 15 May. We can't reproduce. Definitely works fine for us locally, too. I was assuming that it wasn't a problem with the code per se but thought someone might recognize the error and know how to contact Facebook to have them fix whatever's going on. Anyways, I'm happy to close this given that there's nothing to be done code-wise. -Brian. Since submitting my original issue yesterday I tested this and proved that this is an issue with the \"File New\" experience. If you create a new ASP.NET MVC app and enable Facebook, I'm getting the exact same results... desktop / laptop is fine, but signing in with the Facebook button from /Identity/Account/Login doesn't work. The versions of things from my \"File New\" test and the updated startup.cs code to enable Facebook is below.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<CookiePolicyOptions>(options =>\n        {\n            // This lambda determines whether user consent for non-essential cookies is needed for a given request.\n            options.CheckConsentNeeded = context => true;\n            options.MinimumSameSitePolicy = SameSiteMode.None;\n        });\n\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(\n                Configuration.GetConnectionString(\"DefaultConnection\")));\n        services.AddDefaultIdentity<IdentityUser>()\n            .AddRoles<IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        services.AddAuthentication()\n            .AddFacebook(options =>\n            {\n                options.AppId = Configuration[\"Authentication:Facebook:AppId\"];\n                options.AppSecret = Configuration[\"Authentication:Facebook:AppSecret\"];\n            });\n\n        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n    }\n\nPackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.1.3\" \nPackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.1.2\" \nPackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.1.2\" \nPackageReference Include=\"Microsoft.AspNetCore.CookiePolicy\" Version=\"2.1.2\" \nPackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.1.1\" \nPackageReference Include=\"Microsoft.AspNetCore.HttpsPolicy\" Version=\"2.1.1\"/>\nPackageReference Include=\"Microsoft.AspNetCore.Identity.UI\" Version=\"2.1.3\" \nPackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.1.3\" \nPackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.2\" \nPackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.1.1\" \nPackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.1.3\" \nPackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.3\" PrivateAssets=\"All\" \nPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.4\" PrivateAssets=\"All\"\n\n. Hi @blowdart ,\nThis is happening in iOS 12 using any browser app (Safari, Chrome, Firefox are the ones I've tried so far).\nWhen I went to try your suggestion, when the intellisense kicked in I saw this. Note the help states that SameSiteMode.Lax is the default. I'm still going to try it but wanted to give you this feedback as quickly as possible.\nOur help desk gets the user agent of each help request we receive. So far, since I first reported this, there's an uptick in issues with Facebook and Google sign in issue help requests, and every one of them that's been reported shows that the user is on iOS 12. I believe we're on the front edge of folks accepting to upgrade to iOS 12. It wasn't \"pushed as hard\". There wasn't the normal \"red dot\" showing up for the Settings app that draws your attention to it. Apple purposefully doesn't push hard on major upgrades like going from 11.x to 12. But people are slowly discovering it and upgrading. I fear there is going to be a big issue for all ASP.NET Core web apps if this isn't taken seriously really soon.\n\n. @blowdart PS - you didn't show the .AddFacebook() and .AddGoogle() in your code that you suggested to try. I'm adding that at the end. Should it be at the end or before .AddFacebook(), or does that even matter?\nThanks!\nBrian Eriksen, CTO, GetYourPet.com. @blowdart No change in behavior after incorporating your suggestion. Tested on Safari, Google and Firefox apps in iOS 12.. @blowdart No change in behavior after switching to SameSiteMode.None. Tested on Safari, Google and Firefox apps in iOS 12.. Hi @Tratcher. In @blowdart 's initial suggestion he'd suggested chaining in .Services.ConfigureApplicationCookie() to set SameSite for the cookie. I tried that and it didn't change anything. Reading the other thread I thought I understood that setting SameSite = SameSiteMode.None for the external cookie would do the trick. I just tried that, and still no luck. Then there's something about making your own cookie or scheme or something. Anyways, if there is a workaround I'd like to try it but I'm sorry but I'm just not getting what I should be doing. Below is the code that I've most recently tried. Note that in my case I'm not using Identity Server... I don't have an Identity Server instance... just a plain old app with local (email / password) and external authentication.\n\n. PS @Tratcher I'm not exactly sure what you were asking about in getting a fiddler trace. What exactly are you looking for? Oh, and my problem, and the problem I can recreate with File --> New Project, isn't just a problem with Safari. It's Safari, Chrome and Firefox on iOS 12. There must be some underlying library that is in the OS that all browser apps are dependent on that has broken this.. Hi @Tratcher , yeah I think I used Fiddler back when it first came out... and over the years... but not an expert. I believe I have a trace but I've got these options when I export. Is there one of them that you'd prefer?\n\n. Hi @Tratcher Sorry for the radio silence. Had other fires to put out. Here's a link to the .saz file you asked for: https://drive.google.com/open?id=1LK-G1ypS0mlT1aD37k9X91gxkptz2rPn\nPlease note, I'm not fiddleriffic. If there's something I've not provided let me know.\nThat being said:\n\n\nGiven this issue can be reproduced with \"File --> New Project\", is there someone at Microsoft that can try reproducing? For reference, the project that I created with \"File --> New Project\" can be found here: https://drive.google.com/open?id=1TyP-NFb50M7lLi951Ah0j8y2O26Q7Y2W\n\n\nIf you or anyone else wants to do some fiddlering yourself / themselves, feel free to try and register at https://getyourpet.com/account/register with the Facebook or Google buttons. Then you can test signing in and fiddlering on your own.. Hi @Tratcher ,\n\n\nRegarding \"Why are you creating a new CookieBuilder rather than modifying the existing one?\",  @blowdart 's original suggestions had that. In my more recent attempts I'm assigning the SameSite property of the existing one to SameSiteMode.None.\nIn the other thread I noticed someone had set CorrelationCookie.SameSite to SameSiteMode.None when populating the options for things like AddFacebook(). I'm not finding that to be necessary.\nI do have a solution which sets SameSite for both ConfigureApplicationCookie() and ConfigureExternalCookie(). Thank you for jumping in and pointing me in the right direction and for looking at my Fiddler .saz file!\nTwo questions:\n\n\nDoes this issue stay open? Seems like Apple needs to be told that they've broken things, or that they're doing something wrong. I'm sure I wouldn't be the best one to articulate to Apple what they've done. I assume there's someone there at Microsoft that can authoritatively speak for Microsoft and will be listened to by Apple. What's the next step in fixing the real root cause?\n\n\nIs GetYourPet.com going to be somehow less secure (and I mean, are users' accounts somehow less secure) by setting SameSite to SameSiteMode.None? I have to do this for now. As of yesterday Apple is now pushing iOS 12 with the \"red dot on your settings app\" reminder. I have to put this solution into production as soon as possible to stop a flood of support requests. But what risk am I undertaking implementing this workaround?\n\n\nAgain, many, many thanks, and thanks in advance for answers to these last two questions.. Hi @blowdart Thanks for pitching in on my question 2 above. Just a reminder I'd like to understand how Apple is engaged to get the root cause addressed (question 1 above). Thanks!. Oh geez. Well, thanks Apple! :)\nFor posterity, anyone that wants to see a final before / after, here you go. This is code in Startup.cs inside ConfigureServices().\nBefore\nservices.ConfigureApplicationCookie(options =>\n{\n    options.AccessDeniedPath = new PathString(\"/Account/Login\"); //If the logged in user doesn't have access to the page we redirect him to the login page.\n\n    //Taken from https://devblog.dymel.pl/2016/07/07/return-401-unauthorized-from-asp-net-core-api/\n    options.Events = new CookieAuthenticationEvents\n    {\n        OnRedirectToLogin = ctx =>\n        {\n            if (ctx.Request.Path.StartsWithSegments(\"/api\") && ctx.Response.StatusCode == (int)HttpStatusCode.OK)\n            {\n                ctx.Response.StatusCode = (int)HttpStatusCode.ResetContent;\n            }\n            else\n            {\n                ctx.Response.Redirect(ctx.RedirectUri);\n            }\n\n            return Task.FromResult(0);\n        }\n    };\n});\n\nservices.AddAuthentication()\n        .AddFacebook(options =>\n        {\n            options.AppId = Configuration[\"Authentication:Facebook:AppId\"];\n            options.AppSecret = Configuration[\"Authentication:Facebook:AppSecret\"];\n            options.Scope.Add(\"email\");\n        })\n        .AddGoogle(options =>\n        {\n            options.ClientId = Configuration[\"Authentication:Google:ClientId\"];\n            options.ClientSecret = Configuration[\"Authentication:Google:ClientSecret\"];\n        });\n\nAfter\nservices.ConfigureApplicationCookie(options =>\n{\n    options.AccessDeniedPath = new PathString(\"/Account/Login\"); //If the logged in user doesn't have access to the page we redirect him to the login page.\n\n    //https://github.com/aspnet/Identity/issues/1970\n    options.Cookie.SameSite = SameSiteMode.None;\n\n    //Taken from https://devblog.dymel.pl/2016/07/07/return-401-unauthorized-from-asp-net-core-api/\n    options.Events = new CookieAuthenticationEvents\n    {\n        OnRedirectToLogin = ctx =>\n        {\n            if (ctx.Request.Path.StartsWithSegments(\"/api\") && ctx.Response.StatusCode == (int)HttpStatusCode.OK)\n            {\n                ctx.Response.StatusCode = (int)HttpStatusCode.ResetContent;\n            }\n            else\n            {\n                ctx.Response.Redirect(ctx.RedirectUri);\n            }\n\n            return Task.FromResult(0);\n        }\n    };\n});\n\n//https://github.com/aspnet/Identity/issues/1970\nservices.ConfigureExternalCookie(options =>\n{\n    options.Cookie.SameSite = SameSiteMode.None;\n});\n\nservices.AddAuthentication()\n        .AddFacebook(options =>\n        {\n            options.AppId = Configuration[\"Authentication:Facebook:AppId\"];\n            options.AppSecret = Configuration[\"Authentication:Facebook:AppSecret\"];\n            options.Scope.Add(\"email\");\n        })\n        .AddGoogle(options =>\n        {\n            options.ClientId = Configuration[\"Authentication:Google:ClientId\"];\n            options.ClientSecret = Configuration[\"Authentication:Google:ClientSecret\"];\n        });. @Tratcher Something that just came to mind... given that this issue affects projects created with \"File --> New Project\" and following the various guides to implement \"social sign in\" (I just googled and every \"how to set up social sign in\" is lacking any mention of SameSite), I'm wondering if this warrants some kind of formal announcement on the repo where the announcements usually go? Am I allowed to do that, or is there some other person that should make up some kind of announcement? Seems like something that a lot of sites built with asp.net core are going to run into now that iOS 12 is officially being pushed to iPhones and iPads in the wild. What do you think?.\n",
    "jarroda": "I just hit the same issue. Our app uses IdentityServer for OIDC, but I saw the exact same behavior.  AspNet Identity seems to be handling the ChallengeResult and redirecting to /Account/Login.  \nI seem to have fixed it by moving the call to app.UseIdentity() below app.UseOpenIdConnectAuthentication() in my Startup.Configure method.\nIs this expected behavior or a bug?. ",
    "cherici-simone": "I fix my problem commenting out AutomaticChallenge = true inside IApplicationBuilder.UseCookieAuthentication.\nHope it helps...but as jarroda wrote...why?. ...I don't know why...but today the webapp start again to behave wrong...without doing nothing. ",
    "sirajmansour": "Are there any plans to support this ?. ",
    "AurelianGaiu": "Hello @capiono did you solved the problem because i've tried also using the same method as here but with no result.. ",
    "Vaiune": "Sorry, if I mislead you. Nginx sits in front of Kestrel and does its job as a proxy between Kestrel and internet. Kestrel isn't exposed to public. Kestrel just starts to listen on localhost:5000 as default. All I did was according to the official docs. \n\nEnter your base URI with signin-facebook appended into the Valid OAuth Redirect URIs field.\n\nWhen deploying the site you'll need to register a new public url.\n\n\n\"Valid OAuth Redirect URIs\" contains only one entry which is our domain/signin-facebook as it reads on documentation.\nThe scenario is, the visitor wants to login via Facebook on Account/Login, clicks on Facebook button as it indicates login to the site using your existing FB account, then it should go to Facebook to get consent of the user, right?\nBut the URL that used to request to Facebook has its \"redirect_uri\" field as http://localhost:5000 which is what Kestrel listens to. If I change Kestrel's listening address via UseUrls() extension the \"redirect_uri\" field also changes too.\nThat is our problem. I can't change our Kestrel to listen on port 80 or 443. IMHO, there should be some setting to tell Identity or Auth provider(eg:FB provider package) to use public domain instead of what Kestrel listens to. If there is one, then I missed it.\n\nhttps://www.facebook.com/v2.6/dialog/oauth?client_id=XXX&scope=public_profile,email&response_type=code\n\n&redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Fsignin-facebook&state=...\n\nURL Blocked: This redirect failed because the redirect URI is not whitelisted in the app\u2019s Client OAuth Settings. Make sure Client and Web OAuth Login are on and add all your app domains as Valid OAuth Redirect URIs.\n\nI hope you could understand now. \n\nYou will need to use NuGet to install the Microsoft.AspNetCore.Authentication.Facebook package if it hasn't already been installed. Alternatively, execute the following commands in your project directory:\n\ndotnet install Microsoft.AspNetCore.Authentication.Facebook\n\n\nOf course the nuget package exists on NuGeT, and the dotnet command exists :)\ndotnet install doesn't exist. \n. >The fix is to use the the ForwardedHeaders middleware from Microsoft.AspNetCore.HttpOverrides package. You can see how to use it this in this sample. The biggest thing to watch out for is to call app.UseForwardedHeaders before calling app.UseFacebookAuthentication or similar.\nThis ForwardedHeaders middleware fixed the issue for us. But unfortunately, we have another problem now. The error happens after the consent had given by user on Facebook and redirected back to us.\n\nInvalidOperationException: No authentication handler is configured to handle the scheme: Identity.External\nMicrosoft.AspNetCore.Http.Authentication.Internal.DefaultAuthenticationManager+d__14.MoveNext()\n\nWhat did I miss here?\nI put app.UseForwardedHeaders before app.UseFacebookAuthentication and finally app.UseMvc in Configure method.. @HaoK @halter73  I forgot to mention that I figured it out.\nIt works perfectly fine now on Ubuntu 16.04 Nginx 1.11.6 HTTP2 & SSL\nLooks like UseIdentity() should come first before any other external providers.\nMaybe this should be noted on the docs as well?\nThanks for all of your help.. @Rick-Anderson Sure but I'm not sure which page/pages it should go.\nI think it should be noted on https://docs.microsoft.com/en-us/aspnet/core/security/authentication/sociallogins after 'Setup login providers required by your application' and before 'Optionally set password' where supported external providers listed?. ",
    "usarskyy": "Hi everyone,\ncan somebody explain why UseIdentity() call is required for reverse-proxy setup? Here is the code:\npublic static IApplicationBuilder UseIdentity(this IApplicationBuilder app)\n    {\n      if (app == null)\n        throw new ArgumentNullException(\"app\");\n      if (app.ApplicationServices.GetService<IdentityMarkerService>() == null)\n        throw new InvalidOperationException(Microsoft.AspNetCore.Identity.Resources.MustCallAddIdentity);\n      IdentityOptions identityOptions = app.ApplicationServices.GetRequiredService<IOptions<IdentityOptions>>().Value;\n      app.UseCookieAuthentication(identityOptions.Cookies.ExternalCookie);\n      app.UseCookieAuthentication(identityOptions.Cookies.TwoFactorRememberMeCookie);\n      app.UseCookieAuthentication(identityOptions.Cookies.TwoFactorUserIdCookie);\n      app.UseCookieAuthentication(identityOptions.Cookies.ApplicationCookie);\n      return app;\n    }\nThere is nothing special there except check for \"IdentityMarkerService\" registration, which is registered inside AddIdentity<>() call. \n\"AddIdentity\" is also not required by itself for reverse-proxy, except for this line of code:\nservices.TryAddSingleton<IHttpContextAccessor, HttpContextAccessor>();\nBut even if I register this service by myself, I still get wrong redirect URL :(\nMy setup seems to be correct (and it works fine without reverse-proxy):\n```\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n      app.UseForwardedHeaders(new ForwardedHeadersOptions\n                              {\n                                ForwardedHeaders = ForwardedHeaders.All\n                              });\n      app.UseHttpMethodOverride();\n  app.UseFacebookAuthentication(new FacebookOptions\n                                {\n                                  AppId = Configuration.GetValue<string>(\"Facebook:appid\"),\n                                  AppSecret = Configuration.GetValue<string>(\"Facebook:appsecret\"),\n                                  Scope = {\"email\", \"user_photos\"},\n                                  Fields = {\"first_name\", \"last_name\", \"middle_name\", \"gender\", \"id\", \"email\", \"birthday\", \"location\"},\n                                  SignInScheme = \"FacebookCookie\",\n                                  Events = new OAuthEvents\n                                           {\n                                             OnCreatingTicket = OnCreatingTicket\n                                           }\n\n                                });\n\n  app.UseCookieAuthentication(new CookieAuthenticationOptions\n                              {\n                                AuthenticationScheme = \"FacebookCookie\",\n                                CookieHttpOnly = true,\n                                LoginPath = new PathString(\"/Account/Login/\"),\n                                AccessDeniedPath = new PathString(\"/Account/Forbidden/\")\n                              });\n\n```\nHTTP headers also seem to contain all required information:\n\n. @Vaiune did you use AddIdentity<>() before adding UseIdentity()? It seems to be the requirement right now. Unfortunately in my case it will require additional refactoring because authentication was built long time ago and it doesn't use ASP.NET Identity. That's why I'm trying to find another way that doesn't involve all this Identity stuff.. Single Responsibility Principle is about something else, but if those constants are extracted into a separate class, like is suggested by @MovGP0, that is easy to find (like FacebookDefaults for FacebookOptions, for example) then, as a developer, I would be also satisfied.. ",
    "msmolka": "About FindAsync, as far I can it was changed from SingleOrDefault to find between version 1 and 1.1. And looking into latest code (not released) it is now changed back. Having FindAsync  removing flexibility of extending base classes and add custom keys. As far as I know, from database point of view there is no benefit because query is exactly the same. \nMySQL has limitation on key column which is for 767 length in InnoDB tables. So single column for UTF8_unicode is max 255 or utf8mb4 max 191. I know I can reduce size in model builder.\nHowever, just theoretically, if I would like to use SQL change tracking, the single column primary key is easier to maintain, than complex key, and that's why I would like to have possibility to change that behaviour. And currently I have, I can override as many as I need. My point was only to not use api that requires more work when customizing, and does not give any benefits. . Hello\nYes I know about indexes, I have unique keys for that complex types, to be sure of data integrity and proper indexes. I understand this potential benefits of using FindAsync, however changing model to simple keys requires too much work and can break when new version is released (when overriding whole methods), \nTo make it more flexible and keep all benefits from both solutions, it would be good that where complex key is used for find have method similar to FindToken. Then just overriding single search method will keep all other behaviour the same.. ",
    "dvdobrovolskiy": "Looks like my problem. Tnks. Investigating that.\nIIS. No, App never gone Idle. I restart it. Access it. Log in. Then I refresh Home/Index for couple a time quickly and I get send to login. sorry man, not. so far. cannot play with my production server and have a very few time to recreate environment. Will try to reproduce error on test machine asap\n. ",
    "rtpHarry": "Its not just being idle that causes the app to be recycled. I had problems like this when a site was on a budget host. It was using too much ram and causing the app to be recycled.. ",
    "wc-matteo": "@blowdart is the powershell script required to persist the keys? Aren't the keys stored by default in C:\\Users\\<user>\\AppData\\Local\\ASP.NET\\DataProtection-Keys?. Right, that's what I was thinking. Thanks for the confirmation.. ",
    "daver77": "It sounds similar, I don't get the Windows Auth popup though. It sounds similar, I don't get the Windows Auth popup though. ",
    "fabiano": "I removed the System.Collections reference from the frameworkAssemblies property in the project.json file and was able to install the package.. Thanks folks!. ",
    "dlacaille-baytech": "Hi. Any answer?. Forget about it.. ",
    "maliming": "@HaoK \nIn China, the mobile phone number is the only (by the system recycling to other people except the case), most of the App and Web sites are through the user name, mobile phone number login system, but use the email login situation very few hope to consider this problem! . I found myself here identity 2.x. @Saticmotion\nIn Identity 2.x\n//or as CustomPasswordValidator\nvar rules = (UserManager.PasswordValidator as PasswordValidator); \nrules.RequireDigit;\nrules.RequiredLength;\nIn Identity Core\nvar rules = UserManager.Options.Password;\nrules.RequiredLength\nrules.RequireLowercase\nrules.RequireUppercase\nyou can try. @Saticmotion \nDerive a class from UserManager\n\nservices.AddIdentity(.....).AddUserManager<MyUserManager>();\nI do not know if this is a best practice, you can wait for the official proposal.. DI Is a best practice.\ud83d\ude01. ",
    "xyfy": "I am looking for this method too,but said to see this result. ",
    "imukai": "Bah.  I went ahead and migrated this from 1.0.1 to 1.1.0 and it seems to have fixed the issue.  I don't know if it was a problem in 1.0.1 or if the updated packages for 1.1.0 corrected the root.  Closing this out.  If anyone knows why it was failing before and wants to share though - it would justify my hours of googling and trial and error ;). ",
    "Saticmotion": "@maliming I'm using .NET Core, so I tried your second option. But it doesn't work, since Options is protected internal. I'm using the \"Microsoft.AspNetCore.Identity.EntityFramewordCore\" package, version 1.1.0.. This works, thank you! Though it's kind of annoying I have to solve it this way.. @divega That's probably a better option. Thanks!!. ",
    "nemenos": "Anyway, looking into source code, I solved using TicketSerializer.Default. ",
    "filoe": "Still having the same problem on netstandard 2.0. ",
    "hikalkan": "OK, now understood the point. Thanks a lot for explanation.\nBut this will be a problem when I use the same table in a multitenant application. In a multitenant application, a person (with same facebook account) can create two different users in two different tenants and may want to login with same facebook account. But it seems this is my problem since AspNet Identity is not designed for multitenancy.. So, any usable response..? :). Thanks @danroth27 for the clarification. I also think this is a right decision.. ",
    "Vaylandt": "@HaoK ,It's clear :)\nAnd what solution do you suggest?\nI need a token provider and check through Identity simultaneously.. @VahidN , thank you very much!!! RESOLVED!. @VahidN , one question, how fast this work?\nWouldn't it be reasonable to move JWT Provider in a regular controller?. @VahidN , thank You for the answers!. ",
    "DavidMaltby": "Thanks!  Worked for me. ",
    "paradisehuman": "I found the real problem .... when it tries to add WorkerTaxi to Person table , the discriminator is always 0 base on this code : \nc#\n public enum AccountType\n    {\n        User = 0,\n        TaxiWorker = 1\n    }\n  model.Entity<Person>()\n                .HasDiscriminator<int>(name: \"Type\")\n                .HasValue<WorkerTaxi>(value: Convert.ToInt32(value: AccountType.TaxiWorker))\n                .HasValue<User>(value: Convert.ToInt32(value: AccountType.User));\nHow can i fix that ?\nshould the code determine the discriminator or not ?. ",
    "anhlee24": "@brockallen  Have you met this issue before?\nThis is my startup.cs:\nservices.AddDbContext<TCMSContext>(options => options.UseSqlServer(_config[\"ConnectionStrings:TCMSContextConnection\"]));\n```\nservices.AddIdentity(config =>\n            {\n                config.User.AllowedUserNameCharacters = null;\n                config.User.RequireUniqueEmail = true;\n                config.Password.RequiredLength = 8;\n                config.Cookies.ApplicationCookie.LoginPath = \"/Auth/Login\";\n                config.Cookies.ApplicationCookie.Events = new CookieAuthenticationEvents()\n                {\n                    OnRedirectToLogin = async ctx =>\n                    {\n                        if (ctx.Request.Path.StartsWithSegments(\"/api\") &&\n                            ctx.Response.StatusCode == 200)\n                        {\n                            ctx.Response.StatusCode = 401;\n                        }\n                        else\n                        {\n                            ctx.Response.Redirect(ctx.RedirectUri);\n                        }\n                    await Task.Yield();\n                }\n            };\n        })\n        .AddEntityFrameworkStores<TCMSContext, string>()\n        .AddUserStore<UserStore<User, Role, TCMSContext, string>>()\n        .AddRoleStore<RoleStore<Role, TCMSContext, string>>()\n        .AddDefaultTokenProviders();\n\n```. I will try to find a solution, thank you :). @HaoK Here:  \n    ```\n\nprivate RoleManager _roleManager;\n        private UserManager _userManager;\n        private SignInManager _signInManager;\n    public AuthRepository(\n        UserManager<User> userManager, \n        RoleManager<Role> roleManager, \n        SignInManager<User> signInManager)\n    {\n        _userManager = userManager;\n        _roleManager = roleManager;\n        _signInManager = signInManager;\n    }\n\n```. @HaoK  you right, its not working.\nI have register my context interface like this, does it have something wrong? : \n```\npublic static class ServiceCollectionExtentions {\n    private static void RegisterDataAccess<TEntityContext>(IServiceCollection services) where TEntityContext : EntityContextBase<TEntityContext>\n    {\n        services.TryAddTransient<IEntityContext, TEntityContext>();\n    }\n\n}\n. @HaoK  i have found the reason.\n In startup.cs, i need to get the instance of signInManager, so i create a instance like this:\nprivate void ConfigureAuth(IApplicationBuilder app)\n        {\n            _userManager = app.ApplicationServices.GetRequiredService>();\n            _signInManager = app.ApplicationServices.GetRequiredService>();\n}\n```\nand used like this:\n```\nprivate async Task GetIdentity(string username, string password)\n        {\n            var result = await _signInManager.PasswordSignInAsync(username, password, false, lockoutOnFailure: false);\n            if (result.Succeeded)\n            {\n                var user = await _userManager.FindByNameAsync(username);\n                var claims = await _userManager.GetClaimsAsync(user);\n            return (new ClaimsIdentity(new GenericIdentity(username, \"Token\"), new Claim[] { }));\n        }\n        return null;\n\n}\n```\nBut i do not know how to fix it. Do you have any suggest?. @VahidN \nThank you for your reply.\nCan you suggest how to use SignInManager?\nIts show the error: \"SignInManager type used in this statement must be implicitly convertible to System.IDisposable:  \"\nusing (var signInManager = serviceScope.ServiceProvider.GetService<SignInManager<User>>())\n                {\n                    _signInManager = signInManager;\n                }. @HaoK its working! Thank you.. @jwhijazi yup. ",
    "jwhijazi": "@HaoK your solution worked,\nPlease correct me: doing this means get me new instance of the signInManager service, not the one in the scope of the application.\nRight?. ",
    "stephtr": "That would fix the issue.\nI don't know about the\u00a0present implementation,\u00a0but maybe it would be useful to deliver a short term fix (decrease these field sizes by 1 char) until #1040 is ready.. It wouldn't break that much because the length gets fixed\u00a0while creating the migration.\nI edited the migration, but\u00a0modifying OnModelCreating that way is better.\nJust for completeness, the\u00a0configuration necessary for\u00a0running on InnoDB with UTF8:\n```c#\npublic class SiteDbContext : IdentityDbContext\n{\n// ...\n\npublic SiteDbContext(DbContextOptions<SiteDbContext> options) : base(options) { }\n\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    base.OnModelCreating(builder);\n    builder.Entity<User>(b =>\n    {\n        b.Property(u => u.UserName).HasMaxLength(255);\n        b.Property(u => u.NormalizedUserName).HasMaxLength(255);\n        b.Property(u => u.Email).HasMaxLength(255);\n        b.Property(u => u.NormalizedEmail).HasMaxLength(255);\n    });\n    builder.Entity<IdentityRole>(b =>\n    {\n        b.Property(r => r.Name).HasMaxLength(255);\n        b.Property(r => r.NormalizedName).HasMaxLength(255);\n    });\n}\n\n}\n```\nThanks for the help!\n. ",
    "MaklaCof": "Thank you very much.. If it helps, this is my UserStore:\n```\n    public class AppUserStore : UserStore\n    {\n        public AppUserStore(AppDbContext context, IdentityErrorDescriber describer = null) : base(context, describer)\n        {\n        }\n    protected override AppUserClaim CreateUserClaim(AppUser user, Claim claim)\n    {\n        return new AppUserClaim(user, claim);\n    }\n\n    protected override AppUserLogin CreateUserLogin(AppUser user, UserLoginInfo login)\n    {\n        return new AppUserLogin(user, login);\n    }\n\n    protected override AppUserRole CreateUserRole(AppUser user, AppRole role)\n    {\n        return new AppUserRole(user, role);\n    }\n\n    protected override AppUserToken CreateUserToken(AppUser user, string loginProvider, string name, string value)\n    {\n        return new AppUserToken(user, loginProvider, name, value);\n    }\n}\n\nAnd this is my AppRole:\n    public partial class AppRole : IdentityRole\n    {\n    }\n. Solution is to change code in `IdentityDbContext.OnModelCreating` method.\nFrom\n            modelBuilder.Entity(entity =>\n            {\n                entity\n                .HasKey(u => u.Id);\n                entity.Property(p => p.Id)\n                .ValueGeneratedOnAdd();\n            });\nto\n    public partial class AppDbContext : IdentityDbContext\n    {\n       //...\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<AppUserLogin>(entity =>\n        {\n            entity\n            .HasKey(u => u.Id);\n            entity.Property(p => p.Id)\n            .ValueGeneratedOnAdd();\n            entity\n            .HasKey(u => new { u.LoginProvider, u.ProviderKey });\n        });\n\n```\nand it works.. Thanks.. ",
    "mhannaford-oncore": "@master-still What did you do to fix this? I am using 1.1 and see the same error you reported. My code looks almost exactly the same as yours. Thanks. ",
    "mkontula": "Having the same issue. @master-still care to update your test repo with functioning code? Current version gives quite a bunch of build errors.. ",
    "Cubelaster": "Had the same problem. My problem started when I have overriden the IdentityUser to \npublic class User : IdentityUser<Guid>\nThis prompted the EF to not be able to build and show some wild errors. After finally figuring out that my DbContext needs to be in form of:\npublic class NgSchoolsContext : IdentityDbContext<User, IdentityRole<Guid>, Guid>\n(notice the added IdentityRole and Guid: why is it necessary that we explicitly say that IdentityRole is also a Guid? Shouldn't it derive from User as it's base entity? )\nthe Add-Migration wouldn't work and i got a \"No parameterless constructor\" error. That part was fixed by adding \nservices.AddIdentityCore<User>()\n    .AddEntityFrameworkStores<NgSchoolsContext>()\n    .AddRoles<IdentityRole<Guid>>()\n    .AddDefaultTokenProviders();\nnew Roles definition(?) in Startup. Also, why wouldn't it derive it's Id Type from it's IdentityUser implementation? \nAfter that the solution could be built again. However!! Add-Migration was working, but update scripts couldn't execute because the scripts tried to change all PK columns to another type (from string to Guid for me) and that is a no go. \nSo after that, I dropped the Db and deleted all my migrations and just created a new initial migration and ran Update-Database. That solved it.. ",
    "HeMinzhang": "So sorry.\u6211\u60f3\u63d0\u4e00\u4e2a\u5efa\u8bae\uff0c\u4e0d\u77e5\u9053\u662f\u5426\u53ef\u4ee5\u6dfb\u52a0\uff0c\u901a\u8fc7\u81ea\u5df1\u6307\u5b9a\u6570\u636e\u5e93\u91cc\u9762\u6bcf\u4e2a\u8868\u4e2d\u5b57\u6bb5\u7684\u540d\u5b57\uff0c\u6765\u8fd0\u884casp.net Identity.\u800c\u4e0d\u662fasp.net Identity\u81ea\u5df1\u751f\u6210\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u3002.asp.net Identity\u63d0\u4f9b\uff0c\u767b\u5f55cookie\u4fdd\u62a4\uff0c\u9a8c\u8bc1\u8fd9\u4e9b\u529f\u80fd\u3002. @blowdart @JunTaoLuo @AnthonyOSX   Thanks a million.. ",
    "anthonypuppo": "I assume you want to modify table names and/or column names? If so, you can accomplish this in your class that inherits from IdentityDbContext by overriding the following method like so:\n```\nprotected override void OnModelCreating(ModelBuilder builder) {\n    base.OnModelCreating(builder);\n    builder.Entity().ToTable(\"UsersTable\");\n    builder.Entity().ToTable(\"IdentityRolesTable\");\n    builder.Entity>().ToTable(\"UserRoleClaimsTable\");\n    builder.Entity>().ToTable(\"UserClaimsTable\");\n    builder.Entity>().ToTable(\"UserLoginsTable\");\n    builder.Entity>().ToTable(\"UserRolesTable\");\n    builder.Entity>().ToTable(\"UserTokensTable\");\nbuilder.Entity<IdentityUser>().Ignore((u) => u.PhoneNumber); // property example\n\n}\n```. Didn't even know about these settings, thanks!. ",
    "anurse": "I restarted the failed Travis macOS build, so let's wait for that to complete, but otherwise looks good to me.. Derp. Forget the main change. Standby. Will re-open when ready.. Ping. Ready for review.. GitHub doesn't like. Opening a new one.. nit: usually we do loggerFactory (uppercase F). ",
    "bchavez": "Hi @HaoK , no problem! Thanks! Updated PR with CreatePrincipalAsync. :+1: . Related PR #1305. I see now both PRs contain typeo fixes (some are the same, some are not). Let me know and I can cherry pick / include PR #1305 to avoid a possible merge conflict.. ",
    "fabich": "@HaoK does that imply that I have to use the old PasswordHasher?\nservices.Configure(options => options.CompatibilityMode = PasswordHasherCompatibilityMode.IdentityV2); . ",
    "xrkolovos": "I tryied this with my data and it didn't seems to work. Is there any guidance about this?. I think that 1,2,3 ways should all work. Thank you for the tip. Normaly the recovery codes are larger strings.\nAs, i see in method TwoFactorRecoveryCodeSignInAsync, they don't protect against brute force attacks.\nDon't you thing that using a 8 char long string that is not encrypted in the Database (It leaves in AspNetUserTokens) is a lack of security?\nI think they should \n\nEncrypt the codes\nUse larger strings, or at least give an option so we can deside the length.\n\nI also think, it should also be more clear how to use the codes.. #836 #1341. Reading the data from the db would give you access to any account with TFA enabled. If the codes are one-way encrypted that adds an extra layer of security.  . You don't think this should be configurable? . ",
    "cesarbs": "It's broken.. Ugly hack in .csproj is ugly. The trouble is TaskCache's sources use #if NET451.\n@natemcmaster There's no cleaner way around this, right?.  Reverted the hack in the .csproj file.. ",
    "gordon-matt": "@HaoK Not very obvious, but that did the trick. Much appreciated, thanks!. ",
    "brianharwell": "No, on line #2307 there is this...\nawait passwordStore.SetPasswordHashAsync(user, hash, CancellationToken);\nThat causes the password store (ie. database) to set the password.\nThe issue is with creating a new user when an existing user exists. For example, username is unique and if \"JohnDoe\" is already registered and another user attempts to register with the same username the passwordStore.SetPasswordHashAsync will update the password for JohnDoe #1 and now JohnDoe #2 can sign in and see JohnDoe #1's account.. Yeah it will fail but at that point the password has already been updated.\nIn EF this might be ok if you don't do SaveChanges until the very end but I am not using EF. I am implementing my own store to use stored procedures. I am not \"getting\" a user from the database.\nThe password store should not be called before a user is created.. EF has an explicit UOW pattern unless the developer intentionally circumvents the convention and uses a stored procedure. This works well because EF (by design) directs developers to make changes and then commit those changes. Identity has no parallel structure.\nThe methods on UserManager do not promote a UOW pattern nor do they signal that a UOW pattern should be followed.\nThis issue can resolved with a few tweaks and I do believe this is an issue that should be addressed. I'm happy to submit a pull request.\nFor users of EF this (I agree with you) should never happen because of the UOW pattern enforced by EF but for those of us that implement a custom data store then the methods should be atomic.\nAn alternative would be to pass a transaction scope into every method so that the operations can be added to a transaction but the current interfaces do not support that. More evidence that Identity is not UOW centric.. Thanks for the example.\nThe example has issues as well.\nThe call to UpdateNormalizedUserNameAsync makes a call to Store.SetNormalizedUserNameAsync\nThe call to UpdateNormalizedEmailAsync makes a call to store.SetNormalizedEmailAsync\nI was under the impression that a call to a Store would be used to persist changes especially void methods. There are many calls to validators such as the UserValidator or PasswordValidator and those return IdentityResult values. There are also calls to PasswordHasher and a string is returned. These all make sense and I wouldn't expect any of them to save data to a store.\nFrom what I am understanding from our conversation (and please correct me if I am wrong) is that the UserManager is working as it was designed. The UserManager relies on the EF stores and a custom store that uses stored procedures is not the intended use case.\nStored procedures could work if every call to UserManager was wrapped in a transaction scope.\n. Ok, well I really wish I knew that because I would not have chosen this framework. I selected Identity because I didn't want to reinvent security and I thought choosing Identity would be a very secure choice. I also liked the fact that I could implement custom stores because my company does not allow EF; I can only use stored procedures. I thought the core framework was solid and that by implementing custom stores I could have the best of both worlds.\nUnfortunately the implicit UOW pattern bit me and badly. This issue caused a security hole where users could essentially hijack another user's account and this isn't a site for my kid's soccer team.\nWith the proliferation of EF I may be in the minority but this is a big big flaw IMO. I like some of the utility features of this framework but I will not use UserManager in the future because stuff like this is how you end up in the news for data breaches.\nThanks for the dialog.. If the UOW pattern is used then perhaps there should be an obvious method that is called to persist the changes.\nIt would be helpful if there was a SaveChanges or something similar that clearly points out the UOW pattern is used. The UOW pattern states that a single method is used to save all of the units of work and the current code base violates that because an array of methods commit the units of work.\nhttps://martinfowler.com/eaaCatalog/unitOfWork.html\nImplementing the Repository and Unit of Work Patterns\n. I think that's a good idea. I think it should be added there and I think it should be a warning in every page that references any of the store methods. If you can add something to the intellisense comments I think that would be good too.\n. ",
    "mikefayer": "This:\n\n\"Stores should only persist changes in the CreateAsync/UpdateAsync/DeleteAsync methods of base Store interface, any other store method should only manipulate the entity without persisting the changes.\"\n\nis particularly unintuitive, because the signature of all the mutators in this interface returns a Task. Which, to the implementer, looks like the framework expects IO to be performed within the mutators. Would be clearer if only Create/Update/Delete returned Tasks.. ",
    "balticer": "Agree @tempywritescode\nAlso naming an interface I....Store makes me think to save/read something into anything. For what is the SetPasswordHashAsync needed? To make a IUser<TKey>.PasswordHash = passwordHash;? That implicits to have property PasswordHash in my IUser implementation (maybe a bad idea - also ever not needed to hold this hash in a object - IMHO).\nIntuitive i thought that implementing a function of I....Store saving something into my datastore or to get something out of my datastore per function call. But it seems it is not true...tooks me hours to finally figure that out and find this thread. :-/\nregards. ",
    "akarzazi": "Implicit TransactionScope may help achieve consistency seamlessly, regardless of the UserManager operations order.\nhttps://docs.microsoft.com/en-us/dotnet/api/system.transactions.transactionscope?view=netcore-2.0\n. ",
    "AndyCJ": "@HaoK \nI can't see the following in the documentation :\n\nYeah this is the intended design the managers are responsible for calling various store methods which basically map to get/set on properties, eventually they will call one of the methods that are supposed to commit (Update/Create/Delete).\n\nAm I missing something?\nI'm probably not finding the right pages.. Duplicate of: https://github.com/aspnet/Home/issues/2783. ",
    "erwinwildenburg": "Found the solution!\nAdd this to your startup (before app.UseIdentity*):\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n            {\n                ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto,\n                ForwardLimit = null,\n                RequireHeaderSymmetry = false\n            });\nEdit /etc/nginx/proxy_params to make it look like this:\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nclient_max_body_size 10m;\nclient_body_buffer_size 128k;\nproxy_connect_timeout 90;\nproxy_send_timeout 90;\nproxy_read_timeout 90;\nproxy_buffers 4 256k;\nproxy_buffer_size 128k;\nAnd make your host look like this:\n```\nWorkaround for ASP.NET Core\nmap $http_x_forwarded_proto $thescheme {\n        default $scheme;\n        https https;\n}\nserver {\n        listen 80;\n        listen [::]:80;\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name xxxxxxxxxxxxxx;\n\n    location / {\n            return 301 https://$host$request_uri;\n    }\n\n}\nserver {\n        listen 443 ssl http2;\n        listen [::]:443 ssl http2;\n        ssl_certificate xxxxxxxxxxxxxxx;\n        ssl_certificate_key xxxxxxxxxxxxxxxxxxx;\n        ssl_trusted_certificate xxxxxxxxxxxxxxxxxxxx;\n        include /etc/nginx/snippets/ssl.conf;\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name xxxxxxxxxxxxxx;\n\n    location / {\n            proxy_pass http://localhost:5000;\n            limit_req zone=one burst=10;\n            include /etc/nginx/proxy_params;\n            proxy_set_header X-Forwarded-Proto $thescheme;\n    }\n\n}\n```. ",
    "Yavari": "Thank you. I had followed https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction before and had to add the following to my config file:\nproxy_set_header X-Forwarded-Proto $thescheme;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n...\nmap $http_x_forwarded_proto $thescheme {\n        default $scheme;\n        https https;\n}\nIt now looks like\n```\nserver {\n    ...\n    location / {\n        proxy_pass http://localhost:5002;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    #Added everything bellow\n    proxy_set_header X-Forwarded-Proto $thescheme;\n    proxy_redirect off;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n\n}\nmap $http_x_forwarded_proto $thescheme {\n        default $scheme;\n        https https;\n}\n```\nI did not have to change anything in the startup file so it continues to look like\napp.UseForwardedHeaders(new ForwardedHeadersOptions\n{\n    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto\n});. ",
    "hheexx": "I had to overwrite scheme manually. ForwardedHeaders would not do it.\nHere is the code:\n```\napp.Use( ( context, next ) => {\n                if ( context.Request.Headers.TryGetValue( \"X-Forwarded-Proto\", out StringValues proto ) ) {\n                    context.Request.Scheme = proto;\n                }\n                return next();\n            } );\n```. ",
    "artem-leonov": "@HaoK but, as you can see in example, IsInRole method of UserStore is not case insensitive. It expected you pass already normalized role and this is a problem, I think. @HaoK I guess, it is little strange that I can't create \"manager\" and \"MANAGER\" roles in one app, but if I created \"manager\" role and then try to check that user is having \"Manager\" role with UserStore - i will get \"false\". I believe, it is design lack.. @HaoK My fault, it was incorrect example. If I create \"manager\" role and then check user having \"manager\" role with UserStore - I will get \"false\" because UserStore.IsInRoleAsync method expect already normalized name. Shouldn't this method expect unnormalized role?. @HaoK Ok, thank you. ",
    "NickThissen": "Aha.... That works, thanks! I don't understand though why it was already working for IdentityUserToken and IdentityUserLogin? . ",
    "AftabAnsari10662": "@DamianEdwards Request you to merge the PR.. ",
    "vladimirlapacek": "I am not sure, how to read this. Has the change ever been merged back to dev? Or has it been abandoned? . Thanks for your response. Looking forward to have it in the library.. ",
    "richmcd": "We're using Windows auth for authentication but are using Identity for role assignment within the app, we don't want to manage application roles in active directory.\nSent from my Android phone using TouchDown (www.symantec.com)\n-----Original Message-----\nFrom: Barry Dorrans [notifications@github.com]\nReceived: Wednesday, 22 Mar 2017, 1:25PM\nTo: aspnet/Identity [Identity@noreply.github.com]\nCC: Richard McDaniel [rmcdaniel@scienceandtech.org]; Author [author@noreply.github.com]\nSubject: Re: [aspnet/Identity] SignInManager.IsSignedIn does not handle exceptions from WindowsIdentity.get_AuthenticationType() (#1127)\nWhy are you using SignInManger with Windows auth?\nThis does seem to be a bug in the Windows Identity classes, not Identity.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/aspnet/Identity/issues/1127#issuecomment-288511579, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ACnCKHs4PBFyc5gr5mbPk31DZFvRXbQLks5roXWigaJpZM4MYvzM.\n. ",
    "dubeme": "Thanks. I had tried that yesterday, but to no avail. Did it again, and it seems to be working now :) \n. ",
    "glucaci": "Thanks @HaoK, I've searched only in EF Repo.\nIt's working with 1.1. ",
    "RobinHerbots": "@HaoK , \nI know I can extend and add whatever I want.  The point was to keep the usermanager as generic as possible.\nAnyway, thx the answer.. @HaoK , \nI know I can extend and add whatever I want.  The point was to keep the usermanager as generic as possible.\nAnyway, thx the answer.. ",
    "TechSavvySam": "I've seen this recommendation somewhere else.  IMO you should only return Locked Out, if the account is locked out and the username and password were correct.  I tested how identity works and I see that it returns locked out status regardless, so I will now have to write a wrapper for SignInManager.PasswordSignInAsync that does exactly that.\nYou could have a new boolean like \"ReturnLockoutOnlyWhenPasswordMatches\" and default it to false, thus avoiding a breaking change.\nSeems like this would be reasonable functionality to add.  While you're at it, you should add password expiration handling.. ",
    "Jenan": "I solved this issue on SO: http://stackoverflow.com/questions/43001168/method-findbyloginasync-doesnt-work-correctly-with-aspnetcore-identity/43018712#43018712. ",
    "shoe788": "This is really inconvenient. In identity 2.0 we got TKey : IEquatable<TKey> added as a generic parameter on Usermanager, IUserStore and others. Why the step back?. This is really inconvenient. In identity 2.0 we got TKey : IEquatable<TKey> added as a generic parameter on Usermanager, IUserStore and others. Why the step back?. Sorry, I'm not following. I dont see it here, for example. Sorry, I'm not following. I dont see it here, for example. Internally though you hit the same inconvenience. IUserStore expects a string for Id and that implementation has ConvertIdFromString to solve that issue. UserManager then still returns string which requires a convert back to int, long etc. . Internally though you hit the same inconvenience. IUserStore expects a string for Id and that implementation has ConvertIdFromString to solve that issue. UserManager then still returns string which requires a convert back to int, long etc. . ",
    "john2014": "Thanks Barry. I was hoping to use Identity 3.x with .Net Framework 4.6 on Postgresql (without Entity Framework and without MVC). It looks like this use case would not be supported. \nBTW, since Identity and other new features in .Net Core are not been back ported to .Net Framework, does this means that Microsoft is officially (or unofficially) planning to start deprecating .Net Framework?. ",
    "tarekgh": "Could you clarify what really the issue I can help with? dotnet/coreclr#6392 is really old issue and I think shouldn't repro with the latest netcore versions. Also people assigned this issue can help with the old version. . yes that is what the issue dotnet/coreclr#6392 is saying. basically looks the APISET DLL was missing from the deployment and people on the issue can help with that. I don't expect this issue repro in the latest versions of netcore because we have changed of using the APISET DLLs and instead we are calling teh actual library.. There is one thing that is unclear here. the call System.StringNormalizationExtensions.Normalize shouldn't occur on net46 at all and instead String.Normalize should be called. if the test is intentionally calling StringNormalizationExtensions then the test is wrong and need to be fixed to run on the desktop. . In this case you are not really running against desktop net46 and I guess you are running against netcore. I am saying that because if you are calling String.Normalize then StringNormalizationExtensions.Normalize shouldn't get called at all. could you confirm if the test running against the full framework or running against net core?. ok now I think I understand what is going on. \nLooks what is happening is you built the bits that need to run against net46 using the netcore assemblies and that is why StringNormalizationExtensions.Normalize get called and not String.Normalize. in same time the extension method is pinvoking to APISET DLL which doesn't exist on Win7 and need to deploy it. \nTo fix this is either you link to the APISET package to get it in your deployment\nhttps://www.nuget.org/packages/Microsoft.NETCore.Windows.ApiSets/ \nor you need to build your code against the full framework and not net core . > Plus, the tests run fine on OSes later than Win7. It doesn't seem like an issue with this package.\nthat is because Windows versions post Windows 7 has the APISETS installed on the system. the bottom line here is you need to have the APISET on your system to be able to run. as I mentioned before either you need to get it from the package or you need to compile against full framework.. >  I thought we changed the coreclr/corefx platform dependencies back to the classic identities rather than API sets.\nyes we did but it looks they still referencing the old version. > @tarekgh can you make sure we're building a new asset in this package with the fix for desktop? If so, then the answer is \"use the newer package\".\nThe version of this library package on NuGet is the one which has the old implementation which is depending on the APISET\nhttps://www.nuget.org/packages/runtime.win7.System.Globalization.Extensions/4.0.1-beta-23516\nThe one we are currently building for netstandard 2.0.0 we just type forward to System.Runtime and in  System.Runtime we have the extension methods implementation just calling the String Normalize/IsNormalized. so there is no APISET set in this version. \n@ericstj looks they are targeting netstandard 1.3. what is the best they can do here? should they use the package https://www.nuget.org/packages/Microsoft.NETCore.Windows.ApiSets/ to get the missing APISETs? or you have other ideas?\n. ",
    "ericstj": "@tarekgh / @gkhanna79 I thought we changed the coreclr/corefx platform dependencies back to the classic identities rather than API sets.. @tarekgh can you make sure we're building a new asset in this package with the fix for desktop?  If so, then the answer is \"use the newer package\".. ",
    "thiennn": "Just found the reason: The Id of the Role is null, because we have implemented a custom IdentityRole\ncs\n    public class ApplicationRole : IdentityRole<string, ApplicationUserRole, IdentityRoleClaim<string>>\n    {\n        public ICollection<RolePermission> Permissions { get; } = new List<RolePermission>();\n    }\ninit the role's Id in constructor will fixed this isssue\n```cs\n    public class ApplicationRole : IdentityRole>\n    {\n        public ApplicationRole()\n        {\n            Id = Guid.NewGuid().ToString();\n        }\n    public ICollection<RolePermission> Permissions { get; } = new List<RolePermission>();\n}\n\n```\nBut anyway, I think we should have a check on the role's Id. Just found the reason: The Id of the Role is null, because we have implemented a custom IdentityRole\ncs\n    public class ApplicationRole : IdentityRole<string, ApplicationUserRole, IdentityRoleClaim<string>>\n    {\n        public ICollection<RolePermission> Permissions { get; } = new List<RolePermission>();\n    }\ninit the role's Id in constructor will fixed this isssue\n```cs\n    public class ApplicationRole : IdentityRole>\n    {\n        public ApplicationRole()\n        {\n            Id = Guid.NewGuid().ToString();\n        }\n    public ICollection<RolePermission> Permissions { get; } = new List<RolePermission>();\n}\n\n```\nBut anyway, I think we should have a check on the role's Id. ",
    "mkArtakMSFT": "Closing this as we're not doing this any more.. @javiercn, can you please look into this? Thanks!. @kichalla, adding this one too to your pile of work. Thanks!. @kichalla, adding this one too to your pile of work. Thanks!. @javiercn, I'm assigning this to you to look into. We need to get to the bottom of these issues. Thanks!. Another hard-to-repro issue. Additional telemetry is added to identify the reason on the next failure. Moving this to the rc milestone to give it more time to show up. If this won't show up, we'll just close it during rc milestone.. @kichalla can you please look into this, thanks!. @javiercn, is this confirmed to be a dupe? If so, please close this. Thanks!. Moved it to rc milestone just to monitor and close then, if no reproes have been observed.. @kichalla can you please handle this, thanks!. This issue was moved to aspnet/Mvc#7675. @jbagga, can you please prepare a PR for this? Thanks!. @javiercn, we will need your help in delivering this in Preview1. Please work with @ryanbrandenburg to get details about the updated dependencies.. Hey @vijayrkn, this will require also a fix in Scaffolder. I'll take this one to the Shiproom.. @javiercn, can you please look into this and close if this is resolved already. Otherwise - just come up with a fix please.. @javiercn, can you please look into this and see whether this is still an issue or not? Thanks!. @javiercn , please either add retries or whatever is necessary to reduce the chance of happening this again.. Is it ok to log the userId as is (as this can be the email address, which is PII). Similar to the rest of the comments - prefer  tag syntax instead. Thanks!. Should the be \"... auto generated \u2026\" instead?. Why do we do it differently for RememberMe property? Can't it also  be a label ?. ",
    "kodithuwa": "Yes, what i have done,\nAdd identity RoleClaims for roles and that role assign to a user, when a user login to the system, we can check user claims in ControllerBase.User.Claims (System.Security.Claims.ClaimsPrincipal). but, claims can not be edited, it has only get method.\nIs there any method to edit these claims ???. ",
    "wapplegate": "You'd create it just like any other object. The UserManager class has quite a few dependencies though. In my application I've created a custom UserStore class that uses Dapper instead of Entity Framework to persist the user data to the database. So I have some integration tests to make sure things are working correctly. So I have something like this:\nNote: I've excluded some code that deals with object creation specific to my application.\n```\nvar userStore = new UserStore(userRepository, roleRepository, mediator, clock);\nIPasswordHasher hasher = new PasswordHasher();\nvar validator = new UserValidator();\nvar validators = new List> { validator };\nILogger> logger = new MockLogger>();\nvar userManager = new UserManager(userStore, null, hasher, validators, null, null, null, null, logger);\n// Set-up token providers.\nIUserTwoFactorTokenProvider tokenProvider = new EmailTokenProvider();\nuserManager.RegisterTokenProvider(\"Default\", tokenProvider);\nIUserTwoFactorTokenProvider phoneTokenProvider = new PhoneNumberTokenProvider();\nuserManager.RegisterTokenProvider(\"PhoneTokenProvider\", phoneTokenProvider);\n```\nIf you take a look at my github repository called \"Manticore\" you can see the code and my custom implementation of the UserStore depeendency that UserManager uses.. ",
    "mawadallah": "is there any functionality for creating SignInManager?. ",
    "VR-Architect": "Here is the list of installed packages:\n <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Common\" Version=\"2.1.0\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.1.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Puma.Security.Rules\" Version=\"1.0.4\" />\n  </ItemGroup>\n  <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"1.1.0-preview4-final\" />\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"1.0.0\" />\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Folder Include=\"Views\\ApplicationRole\\\" />\n    <Folder Include=\"Views\\User\\\" />\n  </ItemGroup>. Here is the list of installed packages:\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Common\" Version=\"2.1.0\" />\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.1.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0-preview1-24591\" PrivateAssets=\"All\" />\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.0.0-preview1-24591\" />\n    <PackageReference Include=\"Puma.Security.Rules\" Version=\"1.0.4\" />\n  </ItemGroup>\n  <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"1.1.0-preview4-final\" />\n    <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"1.0.0\" />\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Folder Include=\"Views\\ApplicationRole\\\" />\n    <Folder Include=\"Views\\User\\\" />\n  </ItemGroup>. ",
    "opalrigby834": "services.ConfigureApplicationCookie(options => options.AccessDeniedPath = \"/Home/AccessDenied\");\napp.UseAuthentication();\nhttps://github.com/aspnet/MusicStore/blob/4237a93ee8e258a39373ea62715e15fad382311c/samples/MusicStore/ForTesting/Mocks/StartupSocialTesting.cs. ",
    "hardhub": "How to set CookieName?. I think I have found it...\nhttps://github.com/aspnet/Announcements/issues/257\n. ",
    "jkotalik": "It is now on the CookieBuilder instead of CookieAuthenticationOptions. CookieBuilder lives in HttpAbstractions.. I don't see any tests for the Rfc6238AuthenticationService class (direct unit tests), maybe we should add some in to as it may have caught some of these issues. . ",
    "WilliamWsyHK": "Hmm... This is quite out of my expectation. In my point of view, should't it automatically load the claim for me when querying the IdentityRole? Or at least write down some docs for this behavior for now.. ",
    "vgponline": "Hi, \nIf you have any sample implementation for this customer api call with identityserver4, please share it.\nThanks. ",
    "alataffective": "I see that SignInManager needs a username to sign in. Hence the username cannot be null after all? I guess one way to support the scenario I'm looking at is to have both email and username set to the same value (as is the case in the Visual Studio solution template) and have a separate name property entirely (e.g. DisplayName), adding separate validation for this.. ",
    "mcquiggd": "Just wanted to reinforce what I believe @PinpointTownes is asking at several points (please correct me if I am wrong):\nA1. Scenario: I have already built my own system comprising IdentityServer / Openiddict. I use ASP.Net Identity exposed via my own UI / Web API. Or, I use it directly within my application.\nA2. Desire: I want to treat ASP.Net Identity simply as a building block I can wrap with whatever interface, and persist in whatever storage medium I desire (I don't use SQL, I use DocumentDB). Or, not use it at all.\nA3. Requirement: It needs to be completely standalone, opt-in only, and not be tied to a service interface that must mirror a closed source product. It must be able to be used in conjunction with data persisted in a jurisdiction of my choosing for compliance purposes. It must be extendable by the community.\nEssentially, if ASP.Net Identity is no longer customisable / extendable with a fair probability that future releases are not going to break that, I cannot put my valuable user data into it, and I will create my own / use a truly open source alternative.\nI am not trying to sound antagonistic, I just want to outline the typical scenarios for my own company and my clients. If we wanted to migrate a particular customer to B2C, we would achieve that by other means, and not require that all applications use an Identity product that is tied to it in case we want to use it in the future.. @Bartmax \n\nThis is not about which OIDC provider is chosen on the templates, pretty sure everyone agree that having B2C as default with a simple \"replace point\" it's perfect.\n\nKeep the current options and add another for Azure B2C for those that want to and can use it. \nKeep the other templates free from cruft.\nBut, essentially as long as the actual Identity implementation retains the current level of extensibility and is self-contained without other dependencies / tied to the needs of a closed sourced SAAS interface, then I personally would be happy. I'll just create my own template and use that.\nIf it isn't, I would hope Brock would fire up MembershipReboot again and let the community rally round and contribute.\n. @chassq \nI agree with your points regarding the 'identity journey' we have had over the last few iterations. Also agree with the cost of Azure B2C\nIDS4 is actually a very good attempt at making a highly complex subject, easy to use. The samples and documentation are thorough, and its essential to understand the concepts behind the industry standards it employs, whatever backend you choose, in order to properly secure your applications.\nMy experience so far with IDS4 has been very good - flexible, efficient and scalable. The initial investment  will pay dividends.. You will always have considerably more Azure B2C authentications than 1 per user per month, even if a proportion of your users are using a third party such as Facebook, with long-lived access tokens. Refresh tokens could kill you if you are not careful. Not requiring people to periodically re-authenticate is fraught with problems.\nWhen going B2C, you have to allow for cost to rapidly increase, and switching identity providers means downtime / risk. Iv'e contracted for several startups that went under because they were popular, but they hadn't planned the cash flow / cash burn, while building a potential customer base.\nCompare the above cost estimated by @chassq - $4,005.00/month. (thanks for that) which assumes the very low active authentication rate of 1 per month. \nHosting my own IdentityServer on an auto-scaled App Service, Standard Level, even with 3 permanently running S1 instances that never auto-scale down during quiet periods, will cost me an initial $223 per month (database costs added below), and can easily handle the same load and scale to peak demand. In practice it would be less due to auto scale down.\nCombining that with Cosmos DB (DocumentDB) using:\n 10GB of SSD based storage (that's a whole lot of user profiles).\n 4000 Request Units per second, 744 hours each month. Thats about 2000 authentication requests per \n second.\n And just for the hell of it, an additional 40,000 Request Units per minute provisioned throughput, 744 \n hours each month.\n$320.57\nSo, total cost $543.57. And capable of dealing with 10s of millions of user profiles, and 100s of millions of authentications each month. Double that price if you want Geographic Region Failover. Still considerably more performance for a quarter of the cost. \nWith the spare $3000 per month you can add as many regions, load balancers, traffic managers as you want. Or load it into a Redis cluster with the CosmosDB for permanent storage.\nAzure B2C for 1 million user accounts (which is not much for B2C), and only 5 authentications (and don't forget those refresh tokens - each is another chargeable 'authentication') per user, per month, is $12,105.00. \n$145,000 a year for logging in might be lost amongst all the other costs. For me its not acceptable. And you still wouldn't be able to login at your own domain name. \nIf users choose login with username and password as they want to use their password managers...  oh dear!\neCommerce - start adding up those multi-factor authentications ... boom. \nSeriously, feel free to spend more than you need to if you wish; perhaps you have a high margin product, and no investors wanting to minimise your spending of their money. \nEvery cost adds up and eats into profitability; especially during the growth phase of a startup.\n. @brockallen \nThat's why I admire the people that open-source theirs.... @brockallen \nThe difference being I can use your OSS without paying for the optional consultancy... and assess the quality of it's implementation, compare it to OpenIddict for example. I can also submit fixes.\nYou put it all out there for everyone to look at, if you pardon the expression... \n. ",
    "cesher": "At this point in time the appeal of ASP.NET Core is that it is open source, cross-platform and friendly to startups and small application developers. Azure AD B2C on the other hand is not open source, has a tremendously slow release cycle, lacks many features (some of the more important ones are on private preview now, announced at build) and is incredibly expensive. \nI'm sorry, but when you compare Azure AD B2C to something like say AWS Cognito, it is pretty clear that one of them is not targeted at the main market of ASP.NET Core. I understand, that this feature will allow anyone to go in and replace B2C with something else, and that's fine, but seeing as to how B2C is not a real viable option for so many at the moment, as stated before it should be an opt in.\nEither an opt in, or AD B2C needs to become a compelling service that can justify its pricing with top notch features. But even then, AWS Cognito coming in at at least half the cost of B2C speaks miles about who they are really targeting as their customers.. ",
    "PericlesSouza": "+1  for @brockallen continuing Membership Reboot.\nWe need options, choice of membership. Identity Server and OpenIddict are far more attractive than very expensive Azure B2C. It is just not commercially viable for many people.. So after all these comments, the only change is the words describing what you have done. But what we get is still the original intent.\n\nThis service should provide an opinionated and turn-key identity solution that enables customers to easily migrate to Azure AD B2C.\n\nThere was not much point in allowing discussion if you do not listen. This is the biggest problem with all Microsofts \"open source\" efforts. e.g. project.json vs .csproj. It is a waste of time discussing these choices when the decisions have already been made in an office at Microsoft.\nIf you want people to use your B2C product, lower its price to something less insane. Herding customers into using it by making other options painful will not work. People will just leave your stack to somewhere where they do not get their arms twisted by the vendor i.e. real open source.. Typical of how .Net Core is mismanaged.\nMake a decision to go off on a tangent that nobody asked for (while ignoring the most wanted features), and then swerve to another direction at the last moment.\nYou guys need to be managed by the folks that carefully husband the C# language. They know what they are doing.. ",
    "jersiovic": "@luisgizirian I don't think @danroth27 would mean you should move to OrchardCore, simply that you can look on it to see how multitenancy was solved to bring ideas to your platform. So, instead of forcing others to have a tenant id in user table that maybe we don't want to use, you could adapt to what exists using\na different user table per tenant.. ",
    "minhnhat2807": "@danroth27 Where can I change grant_types_supported because when I looked at this link xxx/v2.0/.well-known/openid-configuration it's always empty\nI tried to use ASP.NET Core Identity for issue token to user, how?. ",
    "gregoryagu": "@danroth27 So what does this mean?  Will it have to wait until aspnetcore 3.0? Or will it get released as part of an update to 2.0?. @mcquiggd, @chassq  I looked at the current cost of AzureB2C.  For less than 1,000,000 users, the cost works out to 18 cents per month based on 50 logins per month ($0.0028 each login), plus 1.1 cents per user per month. Add in Multi-Factor auth at once per month at 3 cents each.\nThat seems pretty reasonable pricing to me.  \nAm I missing something?. I watched @danroth27 build demo of Identity As A service and it seems pretty cool to me.  Is there a way to get the bits for this so I can give it a spin?. Your calculations comes to one half cent per user, per month.   If it's a totally free app with several million users, I can see the case for rolling your own auth.  But that seems pretty reasonable to me for a paid app.. @danroth27 Can I beta test it for you?. ",
    "chassq": "In general the identity xp over the years has been a tumultuous one (e.g. ASP Role/Membership, Identity, AD Integration, OWIN OAuth, etc..) It has kind of bounced us all over the place and caused a good bit of complexity and time consuming R&D. I hope this implementation ultimately comes down to making it easier for us not more complex! I want to spend more time thinking about my business requirement implementations than an Identity framework. Its not only the code to implement but also maintenance and longevity too! \nFor our Web Apps and APIs we are looking at Identity Server 4 for a unified solution. IDS 4 looks great but just seems more than we need/want. We were also are looking at Azure AD B2C but when you factor in user storage, authentication and Multi-Factor the cost becomes far too big for a small startup. \nI guess we would like to see this be a seamless very low friction implementation to a low cost backend service that does what Azure B2C does (or here is an idea. MAKE AZURE B2C CHEAPER! :-)). Love the idea of having a unified identity service for our APIs and Web Apps but please make this as low friction as possible. Also please do something MS will stick with for years to come, if possible! Otherwise it is really very little help.\nMy $.02..... The azure price calculator (see https://azure.microsoft.com/en-us/pricing/calculator/ ) has 1 million stored users at $1,045.00/Mo. Add 1 million authentications = $2,660.00/mo. Add 10,000 multi-factor = $300/mo for a total of $4,005.00/mo. So please tell me what I have wrong here. Am I not using the calculator correctly?. Yep. If they drop the price they could gain more adoption and become a defacto for Identity. And make it far easier on the dev community by having one place to turn for Identity. Just look at the costs for Azure Functions. An execution is next to nothing by comparison. Why is Identity so expensive? A stored user cannot take that much disk space and an authorization should be on par time and resource wise as an Azure Function call. You can get 10 million Azure function executions (assuming under 1 sec and less than 128kb) for $13.60/month. Azure AD B2C just seems way over priced to me as compared to other Azure cloud services.. IMHO,\n1) MS needs to lower the cost of Azure B2C drastically and make it along the lines of the cost of say a storage account (store users) + a function execution (per auth) + email/sms call (optional for multi-fac) + AD/365 Integration (optional). If they did that then AD B2C becomes a more viable option for what is really needed and there is no more feeling that they are leading us into overpaying for something that should be a cloud commodity. AD B2C is not a commodity today at its current cost.\n2) Keep the identity programming model simple as possible. Today ASP NET Identity is just to disjointed with crap you have to think about (e.g. RoleStore, UserStore, UserManager, TokenStore, ClaimsStore, PasswordHasher, SecurityStamp, etc.. etc.. etc...). Put on top of that the lackluster docs on how to set that stuff up and override it and bad method design (e.g. VerifyUserTokenAsync returns a bool when it should return an object which specifies at least success or not and if not gives an error message) and you get a framework people begin to dread to use.\nI guess my point is that if identity is going to be made so hard to deal with that many developers will simply not use it and opt for a \"home grown\" path of least resistance solution which could have major security problems. I personally have seen this time and again in code for which I have had to take responsibility. \nIf we can make identity streamlined and simple more people will use it and hopefully more applications will be safer for it. Don't just think big tech company with tons of resources to field a dedicated dev security team. Think startup/small/medium/big business that is not led by technical people and do not know how to run their company as a tech company but want a technology based product. I know that sounds crazy but I see it all the time. They don't give devs the time and resources to do the right thing. So making identity one thing they can count on not to be a time/maintenance suck really helps!\n3) I totally agree in keeping the identity and backing store separate but out of the gate there should be an easy path or 2 for the new folks so that they do not have to put to much time and effort into getting a great secure auth/auth framework setup and implemented.\nI am not trying to advocate for MS but they are in a unique position to make this happen for a great number of people and make our eco-system safer. Just want them to do the right thing.\nHope that input makes some sense.... Sorry, I rambled.... Sorry so long....\n. Hey @brockallen ,\nI guess its perspective. I think I was more talking about implementation than security in general. Agreed security is part of requirements. But I see ASP NET Identity/IDS4 today as a frameworks a dev can employ, not quite like custom business specific logic to meet a set of consumer feature requirements. Much like we put custom logic in using frameworks (e.g. EF Core is to data access as Identity is to auth/auth). \nTrying to be pragmatic I find most decision makers do not think like I do when it comes to this stuff. They just assign value to consumer features that they can see and take for granted the ones they cannot (e.g. security) until its too late. So making the identity implementation more straightforward without a bunch of ceremony makes for a far better story to your boss and dev team. For example, app security will take us 4 hrs vs. 4 days of coding and testing. My thoughts are not necessarily about one implementation vs another I guess just more about the need for more straight forward identity implementations that are easy to follow, put in place and transfer to other devs on a team.. We have extended SignInManager and created an override for\n public override async Task SignInAsync(TUser user, bool isPersistent, string authenticationMethod = null){}\nWhen we call \nvar scheme = await SchemeProvider.GetSchemeAsync(Microsoft.AspNetCore.Identity.IdentityConstants.ExternalScheme);\nawait Context.Authentication.GetAuthenticateInfoAsync(scheme.Name);\nThe code throws an exception stating that it cannot find a authentication scheme. The scheme.Name value is Identity.External.\nAny ideas?\n. Ok thanks! But how can I get to the cookie settings that we configured in ConfigureApplicationCookie in startup.cs? We used to get to them via IdentityOptions. AuthenticateAsync returns null for properties both pre and post Sign in call. For example the Properties property is null no matter when we call AuthenticateAsync. What would I be missing?\n```\n            var scheme = await SchemeProvider.GetSchemeAsync(Microsoft.AspNetCore.Identity.IdentityConstants.ApplicationScheme);\n            var auth = await Context.AuthenticateAsync(scheme.Name);\n        await SignInAsync(user, new AuthenticationProperties {\n            IsPersistent = isPersistent,\n            AllowRefresh =true,\n            ExpiresUtc = DateTimeOffset.UtcNow.AddDays(5),\n            IssuedUtc = DateTimeOffset.UtcNow,\n\n        }, authenticationMethod);\n\n        auth = await Context.AuthenticateAsync(scheme.Name);\n        auth = await Context.AuthenticateAsync();\n\n```\n. Ok got it. Thanks!. We are having the same issue but with the reset password tokens. When we look a the token going out and coming back in they are the exact same. Why is this failing?. For us we made sure we were including the SecurityStamp (on the User) when generating and getting the token to compare. Once we did this we saw our issue resolve. I think there is a way to disable SecurityStamp checking on the SignInManager if you need. Look at https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.signinmanager-1.validatesecuritystampasync?view=aspnetcore-2.0 and https://stackoverflow.com/questions/19487322/what-is-asp-net-identitys-iusersecuritystampstoretuser-interface\nHope this helps.... ",
    "benaadams": "@chassq multi-factor is sms based; which has a 3rd party cost per auth. You are better using the authenticator app version for 2fa that's in 2.0 (also advised to use it instead of sms based 2fa as per current security advice) so that shouldn't be a cost worth worrying about?. Not strictly serious, but you could do:\n```csharp\nvar failedDelayMs = rnd.Next(100, 300);\nvar sw = Stopwatch.StartNew();\nSignInResult result = null;\nif (user != null)\n{\n    result = await _signInManager.CheckPasswordSignInAsync(user, password, true);\n}\nsw.Stop();\nif (!(result?.Succeeded ?? true))\n{\n    // Failed, wait random time less time already taken\n    await Task.Delay(Math.Max(failedDelayMs - sw.ElapsedMilliseconds, 50));\n    return;\n}\n```\n@blowdart might have a more sensible suggestion.... ",
    "CMircea": "Well... the ValidateEmail method can check if the email is required and not throw an error if the email is missing and it's optional. Having the email optional and/or not unique doesn't exclude validating the email ;). Yep. That is skipped, but it shouldn't be.. Might want to add the bug tag back, it is a bug if the email isn't validated in this case.. ",
    "ili": "Sorry, wrong repository PR. ",
    "tsirkin": "+1 for @weedkiller idea. ",
    "muratg": "From @Tratcher on May 25, 2017 19:3\n@HaoK @javiercn . From @javiercn on May 25, 2017 19:33\n@danroth27 . @javiercn you're trying to merge to javiercn/templates branch?  Did you mean rel/2.0.0-preview2?. ",
    "vRITHNER": "Authorization attributes like ex: [Authorize(\"Admin\")] also ? because I can't make it work. ",
    "PRIMETSS": "Same here\n\n[Authorize(\"Admin\")] \nAttribute on a controller with a  logged in user that IS in the Admin role always spits AccessDenied \n\nCreate a new role, works and persists in Identity DBase\nAdd user to role creates a new entry in ASPNETUserRoles for correct ID\n\nvar uresult = await _userManager.AddToRoleAsync(user, role.Name);\n\nuser object after adding role shows 1 Role and all looks correct, and is persisted to Identity Dbase.\nbut  Roles list after below is empty\n\nApplicationUser user = await _userManager.FindByEmailAsync(User.Identity.Name);\n\nIs it to do with lazy loading being enabled by design/default? \nI'd really rather it on and turn off if having performance issues?\n----- Additional Info Added ------\nHowever if get reference to the IdentityServiceDbContext through DP, and do a Users.Include(role=>role.Roles)\nThen Roles for users is populated for single (not before Include performed) and allusers\nprivate readonly IdentityServiceDbContext _identityDbContext;\n\n     // Aded below\n     public AccountController(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager, IdentityServiceDbContext db)\n     {\n         this._userManager = userManager;\n         this._roleManager = roleManager;\n         this._identityDbContext = db;\n     }\n\nvar singleuser = from i in this._identityDbContext.Users where i.UserName == \n paul@domain.com.au\" select i;\n    var allusers = this._identityDbContext.Users.Include(role => role.Roles).ToList();\n\nBut this does not fix [Autherise] attribute...\n[Authorize(\"Admin\")]\nAttribute on a controller with a logged in user that IS in the Admin role always spits AccessDenied\n. ",
    "theeunforgiven": "solved by calling the user's manager UpdateSecurityStampAsync, with the new security stamp the old confirmation token was revoked, thanks anyway. .net core 1.1\nOn Mon, May 29, 2017 at 3:56 PM, Ponant notifications@github.com wrote:\n\n@theeunforgiven https://github.com/theeunforgiven , which .Net core\nversion are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1249#issuecomment-304666962,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKGOPb4s0fSf_fz0y6nXImuH-zTqetCkks5r-s5-gaJpZM4NpNMp\n.\n. \n",
    "danieloprado": "Is both hosted at localhost? Same domain, same cookie storage.... It's not an issue\nSee: https://stackoverflow.com/questions/1612177/are-http-cookies-port-specific\n\nSimilarly, cookies for a given host are shared across all the ports on that host, even though the usual \"same-origin policy\" used by web browsers isolates content retrieved via different ports.. \n",
    "gbfromhb": "OK, let me get this straight. I think you and I saw the same issue the foreign key was causing the problem, and you are are saying  this key is going away on a future release, right? So it sounds like problem solved.. Thanks. ",
    "Ibro": "duplicate username doesn't really resonate like typical error. @HaoK How do I override AspNet* table names if I am starting from scratch with 2.0 and having User and Role classes, and int as key.\n```\nApplicationDbContext : IdentityDbContext\npublic class User : IdentityUser\npublic class Role : IdentityRole\n    {\n    }\nservices.AddDbContext(options =>\n                options.UseNpgsql(_connectionString));\n        services.AddIdentity<User, Role>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n```\nIf I try this\nbuilder.Entity<User>().ToTable(nameof(Users));\nbuilder.Entity<Role>().ToTable(nameof(Roles));\nbuilder.Entity<IdentityUserClaim<int>>().ToTable(\"UserClaims\").HasKey(uc => uc.Id);\nbuilder.Entity<IdentityUserLogin<int>>().ToTable(\"UserLogins\").HasKey(ul => ul.UserId);\nbuilder.Entity<IdentityUserRole<int>>().ToTable(\"UserRoles\").HasKey(ur => new { ur.UserId, ur.RoleId }); ;\nbuilder.Entity<IdentityRoleClaim<int>>().ToTable(\"RoleClaims\").HasKey(rc => rc.Id);\nbuilder.Entity<IdentityUserToken<int>>().ToTable(\"UserTokens\").HasKey(ut => ut.UserId );\nthen I get ApplicationRoleId and ApplicationUserId keys in other tables, along with UserId and RoleId. And no, I don't have ApplicationUser or ApplicationRole anywhere in my application.. @haok Yeah, I deleted Migrations folder, dropped the database, cleaned solution and even removed bin/obj folders. \ud83d\ude04 \nI double-checked with a new project.. @H4Himanshu \nWhen you do services.AddIdentity<ApplicationUser, IdentityRole>() , first generic argument is the User type and second is the Role. Your ApplicationRole class should inherit from IdentityRole and Customer class should inherit from IdentityUser.\nYou can check out the docs to get familiar with basics of ASP.NET Identity. . @HaoK  yeah, I forgot to post here afterwards. I realised I had an extra Id property. \nIf I remember correctly, after removing it I wasn't able to sign in at all. The error wouldn't occur but I wouldn't be able to sign in. I think it was the same with registration.. Sadly, I could not find the old sample and check the DB. \nHowever, I tried to reproduce it, and indeed, when I add new Id on user class, that causes the issue.\nIf I run into it again, I will reopen this one. Thanks!\n. Any docs about this? @HaoK @ajcvickers . I don't see a reason why we shouldn't be able to override those?. > \n\n@Ibro Because the Identity code is explicitly written to use ints for these entity types.\n\nI clearly understand that I just don't understand what's the reasoning behind such decision and why we can't override those.. Updated link: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize-identity-model?view=aspnetcore-2.2. ",
    "ryanbrandenburg": "FYI @javiercn I'm merging this in to unblock our CI.. Yes, I was told that when we moved to 2.1.0 we should have moved the 0.3.0 versions to 0.4.0. An example failure:\n```\nSystem.Security.Cryptography.CryptographicException : Bad Data.\nat System.Security.Cryptography.CryptographicException.ThrowCryptographicException(Int32 hr)\n   at System.Security.Cryptography.Utils._ImportKey(SafeProvHandle hCSP, Int32 keyNumber, CspProviderFlags flags, Object cspObject, SafeKeyHandle& hKey)\n   at System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(RSAParameters parameters)\n   at Microsoft.AspNetCore.Identity.Service.CryptographyHelpers.GetRSAParameters(SigningCredentials credentials)\n   at Microsoft.AspNetCore.Identity.Service.Core.DefaultSigningCredentialsSource.GetMetadata(SigningCredentials credentials)\n   at Microsoft.AspNetCore.Identity.Service.Core.DefaultSigningCredentialsSource.b__4_0(SigningCredentials sk)\n   at System.Linq.Enumerable.WhereSelectListIterator2.MoveNext()\n   at System.Linq.Enumerable.<SelectManyIterator>d__162.MoveNext()\n   at Microsoft.AspNetCore.Identity.Service.DefaultSigningCredentialsPolicyProvider.<g__RetrieveCredentials|5_0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Identity.Service.DefaultSigningCredentialsPolicyProvider.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Identity.Service.DefaultSigningCredentialsPolicyProvider.d__7.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.AspNetCore.Identity.Service.JwtIdTokenIssuer.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Identity.Service.TokenManager.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.AspNetCore.Identity.Service.AuthorizationCodeExchangeIntegrationTest.d__0.MoveNext() in C:\\b\\w\\33bdfc1cae7b2a38\\modules\\Identity\\test\\Service.Core.Test\\AuthorizationCodeExchangeIntegrationTest.cs:line 55\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n. We had a period where we were cleaning up our history after ~ a month because our log files are 200mb and the disks were filling up, so there's no history older than that.. I spot checked some instances of this and only saw it in net461 test runs. To my knowledge we haven't updated .NET Framework on the CI agents.. Yes, I was confirming that this is likely net461 specific.. @javiercn I think you had said that you wanted to remove these tests because they were low-value. Am I remembering that correctly?. CC @davidfowl who was asking about this.. The tests you added are [not running](http://aspnetci/viewLog.html?buildId=425741&buildTypeId=Lite_EntityFrameworkTest&tab=testsInfo).. You added tests which we figured would prove your hypothesis about what was causing this, but because you did `[ConditionalFact(Skip = \"...\")]` they will never run, and we'll never figure out what's happening here.. Merging to unblock ProdCon.. I'll tag future instances of this so that they show up in [this](http://aspnetci/httpAuth/app/rest/builds?locator=tag:InternalServerTokenFlow,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags)) query.. :up::date:. Fix the version names to match something that both works and is available on one of your sources.. Possibly the referenced version fell off the nuget retention. Anyone except Universe that builds this will be broken, please update the deps by running \".\\run.ps1 -update upgrade deps\" and commit that change so people can use the repo.. @javiercn there are a lot of these errors in this VSTS failure:\nSystem.Data.SqlClient.SqlException : Connection Timeout Expired.  The timeout period elapsed while attempting to consume the pre-login handshake acknowledgement.  This could be because the pre-login handshake failed or the server was unable to respond back in time.  The duration spent while attempting to connect to this server was - [Pre-Login] initialization=45447; handshake=27; \n---- System.ComponentModel.Win32Exception : The wait operation timed out.\n``\nsince they appear to happen in appveyor too I'm going to continue my merge, but I created aspnet/Identity#1823 to track the issue.. EF does build against VSTS, but they might also be using different timeout settings.. If something isn't shipping yet we should setfalsein its csproj to prevent baselines from being generated. By \"service stuff\" I assume you mean any project which starts withService.`? I can remove them from this PR.. Talked to @javiercn offline, he doesn't mind that it's included here.. I don't think it is, I probably got interupted in the middle of filing my list of issues and double-filed.. Awesome @damienbod, that will be at minimum a great reference point.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. IdentityUI_ScriptTags_SubresourceIntegrityCheck failed again.\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent failed again.\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. IdentityUI_ScriptTags_SubresourceIntegrityCheck failed again.\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[x] File a bug against the product (https://github.com/moq/moq4/issues/653)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\nThis comment was made automatically. If there is a problem contact @ryanbrandenburg.. That would be either \n\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nor\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\ndepending on if it's flaky or not.. Leave this bug open to track the external issue. Also because otherwise the bot will open one identical to it the next time it fails.. EnsureClaimsIdentityHasExpectedClaims failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\n\n\n\n\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanSetPasswordWithExternalLogin failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on 2.2.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nCanSetPasswordWithExternalLogin failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInWithTwoFactorAuthentication_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. @mkArtakMSFT was this resolved? If so how? Please assign someone to find out.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\n\n\n\n\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. Please use this workflow to address this flaky test issue, including checking applicable checkboxes and filling in the applicable \"TODO\" entries:\n\nIs this actually a flaky test?\nNo, this is a regular test failure, fix the test/product (TODO: Link to commit/PR)\n\nYes, proceed below...\n\n\nIs this test failure caused by product code flakiness? (Either this product, or another product this test depends on.)\n\n[ ] File a bug against the product (TODO: Link to other bug)\n\nIs it possible to change the test to avoid the flakiness?\n\nYes? Go to the \"Change the test!\" section.\nNo?\n[ ] Disable the test (TODO: Link to PR/commit)\n[ ] Wait for other bug to be resolved\n[ ] Wait for us to get build that has the fix\n[ ] Re-enable our test (TODO: Link to PR/commit)\n[ ] Close this bug\n\n\n\nIs it that the test itself is flaky? This includes external transient problems (e.g. remote server problems, file system race condition, etc.)\n\nIs there is a way to change our test to avoid this flakiness?\nYes? Change the test!\n[ ] Change the test to avoid the flakiness, for example by using a different test strategy, or by adding retries w/ timeouts (TODO: Link to PR/commit)\n[ ] Run the test 100 times locally as a sanity check.\n[ ] Close this bug\nNo?\nIs there any logging or extra information that we could add to make this more diagnosable when it happens again?\nYes?\n[ ] Add the logging (TODO: Link to PR/commit)\n\n\nNo?\n[ ] Delete the test because flaky tests are not useful (TODO: Link to PR/commit)\n\n\n\n\n\n\n\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. CanSetPasswordWithExternalLogin failed with about the same error on master.\nCanLogInAfterConfirmingEmail failed with about the same error on 2.2.\nCanLogInAfterConfirmingEmail failed with about the same error on master.\nCannotLogInWithoutRequiredEmailConfirmation_WithGlobalAuthorizeFilter failed with about the same error on 2.2.\nThis comment was made automatically. If there is a problem contact ryanbrandenburg.. @javiercn we need this merged because the new UIFramework enum was referenced in aspnet/Templating, which has merged forward into master. Without this class existing in Identity multiple templating tests which attempt to validate Identity scenarios will fail.. @mkArtakMSFT was this resolved? If so how? Please assign someone to find out.. Do you have a hypothesis on why this might have started passing again?. @javiercn the failure doesn't look related to my changes at first glance, are there preexisting conditions in Identity that would cause this kind of behavior?. Need to have @danroth27 check out how this looks in the browser and approve.. To test I launched test/WebSites/Identity.DefaultUI.WebSite (bootstrap4) and test/WebSites/Identity.OpenIdConnect.WebSite (bootstrap3), confirmed that they had no errors in the console, looked about right, and that when you tried to submit an empty form you got the appropriate warnings in the UI.. I assume by that you mean:\n\ndotnet run -f netcoreapp2.2 -c Release\ndotnet run -f netcoreapp2.2 -c Debug\n\nIf so I've now tested it that way and we get no errors and working pages both ways.. If I do that I get:\nUnhandled Exception: System.IO.FileNotFoundException: Related assembly 'Microsoft.AspNetCore.Identity.UI.Views.V3' specified by assembly 'Microsoft.AspNetCore.Identity.UI' could not be found in the directory D:\\dd\\Identity\\test\\WebSites\\Identity.DefaultUI.WebSite\\bin\\Release\\netcoreapp2.2\\publish. Related assemblies must be co-located with the specifying assemblies.\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly assembly, Boolean throwOnError, Func`2 fileExists, Func`2 loadFile)\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly assembly, Boolean throwOnError)\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.<>c__DisplayClass3_0.<AddRelatedParts>b__0(ApplicationPartManager partManager) in D:\\dd\\Identity\\src\\UI\\IdentityBuilderUIExtensions.cs:line 77\n   at Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(IMvcBuilder builder, Action`1 setupAction)\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.AddRelatedParts(IdentityBuilder builder, UIFramework framework) in D:\\dd\\Identity\\src\\UI\\IdentityBuilderUIExtensions.cs:line 132\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.AddDefaultUI(IdentityBuilder builder, UIFramework framework) in D:\\dd\\Identity\\src\\UI\\IdentityBuilderUIExtensions.cs:line 54\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.AddDefaultUI(IdentityBuilder builder) in D:\\dd\\Identity\\src\\UI\\IdentityBuilderUIExtensions.cs:line 33\n   at Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionUIExtensions.AddDefaultIdentity[TUser](IServiceCollection services, Action`1 configureOptions) in D:\\dd\\Identity\\src\\UI\\IdentityServiceCollectionUIExtensions.cs:line 56\n   at Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionUIExtensions.AddDefaultIdentity[TUser](IServiceCollection services) in D:\\dd\\Identity\\src\\UI\\IdentityServiceCollectionUIExtensions.cs:line 33\n   at Identity.DefaultUI.WebSite.StartupBase`2.ConfigureServices(IServiceCollection services) in D:\\dd\\Identity\\test\\WebSites\\Identity.DefaultUI.WebSite\\StartupBase.cs:line 41\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.ConfigureServices(IServiceCollection services)\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Initialize()\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\n   at Identity.DefaultUI.WebSite.Program.Main(String[] args) in D:\\dd\\Identity\\test\\WebSites\\Identity.DefaultUI.WebSite\\Program.cs:line 16\nwhich is a pre-existing condition because it happens on a totally clean branch.\nBy copying those dll's into the publish directory I found a couple instances of site.min. remaining, which I fixed.. Fixed one extra item I found when testing in V3.. Is that approval then?. I don't recall having missing deps.json files.. Nit: Indent the contents here.. https://github.com/aspnet/jquery-validation-unobtrusive/issues/79. Intentional, this copy was just more than one version out of date.. We discussed this here. We decided that without an out-of-the-box way to minify site.min. on build it was more dangerous than it was helpful to include those files which can quickly get out of sync with their non-minified versions.\nIn an update I've removed the site.min.* files, the same as we did in templating.. ",
    "svallis": "@HaoK This was a breaking change for me and I'd like to add the functionality back in. The migration docs here says:\n\nThe Entity Framework Core navigation properties of the base IdentityUser POCO (Plain Old CLR Object) have been removed. If your 1.x project used these properties, manually add them back to the 2.0 project... snip\n\nI was using the roles collection on the user and the users collection on the role, but they used to operate without needing to traverse the link table. How, specifically, can I restore that exact functionality?\nMy IdentityUser and IdentityRole classes are both in a library and implemented via an abstract class that implements IdentityUser, with the concrete class in the application itself deriving from the abstract class. I've been attempting to add the navigation properties to the abstract class without any success; however, I've done similar for non-collection based navigation properties for user accounts with builder.Entity<SomeClass>().HasOne(x => (TUser)x.User);, but the role and user relationships don't appear to work with anything like builder.Entity<TUser>().HasMany(x => (IList<TUserRole>)x.Roles); due to the link table being in the middle. The navigation properties for the above are defined as public IUser User { get; set; } and public IList<IRole> Roles { get; set; } respectively.. Thanks @HaoK - for some reason I had in my head that the many to many relationship was exposed through the navigation properties without having to go through the link table, I guess due to the name of the properties. Appreciate the clarification.. ",
    "gladkiy": "@blowdart I've updated my question. Do you mean app.UseDefaultFiles(); and app.UseStaticFiles(); need to be above that line app.UseIdentity();?. May be it's cache, I don't know. So, app is started (required angular modules are loaded), wait for the minute and click on page that require new angular module, it failed. (Cache may be the wrong reason - because module isn't loaded yet)\nIn browser console I see the following:\nERROR Error: Uncaught (in promise): Error: (SystemJS) XHR error (500 Internal Server Error) loading http://example.com/app/account/account.module.js\nIIS Express \"Logs\" folder I see this:\n2017-07-03 13:20:40 127.0.0.1 GET /app/account/account.module.js - 80 - 127.0.0.1 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/59.0.3071.115+Safari/537.36 http://example.com/ 500 0 0 59\nIn \"TraceLogFiles\", I also don't see anything useful info about my error.. I think I found out what's the reason of that error.\nThis is error - https://www.screencast.com/t/gllPne2r\nSo I have app with dynamic db connection strings.\nIn Startup.cs ConfigureServices method I have the following rows:\n```\nservices.AddDbContext(options => options.UseSqlServer(Configuration.GetConnectionString(\"DataContext\"), builder => builder.MigrationsAssembly(\"AC.DBModels\"))); //connection string with empty db name\nservices.AddScoped(provider => DbNameExtension.Get(provider)); // getting db name from url\n```\nInside DbNameExtension.Get method I did checking if request doesn't have extension then get db name else empty string and in that moment HttpContaxt.User.Identity.Name is null. So I think, I get db name and then AspNetCoreIdentity go to the db to check / auth user, but db name is empty string and however the current request path is something like that: http://example.com/dashboard.module.js.\nSo authentication was failed and app throw 500 error. Am I right? Correct me if I wrong.. ",
    "kinosang": "Will this feature be add back for 2.1?. I saw #106, #650, and etc.\nIs there any reason to do the rollback?\nBTW, it there any plan for the user activity feature?. Hello, anyone here?\nWill so many years passed, Asp.Net Core still does not store user registration timestamp, and events for logging in, signing out, changing password.\nIt there any plan or roadmap for the user activity feature?. I wanna to know when will this patch releases?\nor should I use the nightly build before you publish it?. ",
    "alexsorokoletov": "@blowdart thank you for the feedback. I understand that.\nWhat about other ways to implement that with ASP.NET Identity?\nI do not want to implement passwordless by re-implementing whole OAuth bearer support that is in ASP.NET Identity. @Misiu your approach looks interesting.\nI'm not fond of what I ended up with.\nMy approach was to establish a trust between controller and custom OAuthAuthorizationServerProvider so that these guys can exchange tickets and basically run bearer tokens.\nHaving a JWT flow + Bearer token is an overkill when using this from mobile app, so I ended up with a simpler scheme.\nI understand that there are no RFCs for passwordless but this is a real thing.\nOn the other hand, IdentityServer is cool but my API is running on ASP.NET Identity and I don't want to run two similar infrastructures for that simple task.\n. @Misiu could you maybe share your HTTP request flow (from the client side)? . @grahamehorner thank you, Grahame! \nI would love to see a sample project and dive into how it works. I assume your system is based on ASPNET Identity, right?. Few articles on the subject: https://andrewlock.net/implementing-custom-token-providers-for-passwordless-authentication-in-asp-net-core-identity/ and https://www.scottbrady91.com/ASPNET-Identity/Implementing-Mediums-Passwordless-Authentication-using-ASPNET-Core-Identity. ",
    "grahamehorner": "I'm in the process of doing something like this; the flow I'm using is this:- \n\nuser signs in user any approved/configured provider/middelware (Facebook,Google,Microsoft,Twitter,OpenID, ...) or they supplies an \nemail address/phone number; \n\nregistration\n- system generates and stores (securely) the user identity (email/mobile) with the shared secret\n- system sends (via email/sms) to the user with the secret\n- user confirms the receipt of the shared security by using an authenticator app TOP\n- system marks user a active and generates/stores(securely)/displays recovery codes\n- user is then able to sign-in with email/phone & TOTP or recovery code\n\nafter sign-in a JWT token is generated for the client \n\nNOTE: system doesn't hold any passwords; and a TOTP is generated by an Authenticator APP or generated by the backend system and sent to the phone if requested.\nRFC7519\nRFC6238\nhope this helps you out @alexsorokoletov . BTW, my implementation is for IoT devices so I really don't wish to have the compute/store requirement of the current identity implementation or store passwords, which is nice but a little on the heavy side for IoT devices. @blowdart would an option not be to create a policy that after a period of time the user is redirected to a two factor code verification screen, with the return uri of the page/action they came from ?. what I was thinking is like passport control, a person shows their passport and is allowed in and randomly gets checked by customs officials with additional checks; so authentication is the first step with a random second factor check, but I\u2019ll defer to your security expertise if you feel it\u2019s insecure or in appropriate . The repository that stores the TwoFactor/MultiFactor security keys would be dependency injected and provide methods to store/retrieve security keys using a string (the oauth provide name & user identity)  (no need to store anything else) when a user signs in for the first time (using the provide they have chosen) the application would generate and store the key under the oauth provider user identity  email/display a QR code, with information with regards where to download the authenticator app; subsequent sign in would then require a TOTP TwoFactor code. \n. @HaoK yes, that\u2019s basically correct and as the current implementation has quite a lot of other things like phone,email, password and signin managers etc. that look to be strongly coupled it seems difficult/impossible to reuse without all the other accompanying stuff. \nAFAIA the developer can\u2019t simply configure the external oaths providers and add TFA? without having to reinvent the wheel, IMHO it would bring great benefits it the TFA bits could be used in this way, maybe under the namespace/assembly Microsoft.AspNetCore.Authentication.TwoFactor?\neg.\nservices\n.AddTwoFactorKeyStore()\n.AddTimeBasedOneTimePassword();\nservices\n.AddAuthentication()\n.AddCookies()\n.AddMicrosoftAccout()\n.AddTwoFactorAuthentication();\n. @twenzel I've found the same issue, I don't need or what the UserManager to have anything other than a IdentityUserToken and Claims for that Token; yet UserManager required a lot more; I have been forced to write my own user manager :'(. the claims for the user identity should have the login provider information?. @blowdart  @HaoK I personally think the email interfaces should be in a System.Net namespace and should have support for digital signatures etc. the transport implementation should also be separated from the data structures \ud83e\udd14 so a implementation for SMTP would be available as standard, but an option for using SendGrid could be DependencyInjected\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.Mail/src/System/Net/Mail/MailMessage.cs\n  . If a user has two factor authentication enable would the second factor used for verification before deletion? . @HaoK should also think about supporting multiple authenticator apps ? ie. tablet, phone, laptop can all have authenticator applications installed. @blowdart We are looking at a user base that has multiple devices, the user however when visiting some of their client have to hand-in devices that can make phone calls; so under this situation they would switch from a (protected geo-fenced & IMEI) mobile with authenticator to use a tablet device that has restricted operations with authenticator installed.. @blowdart totally understand, was just thinking multiple device support with different keys may be useful for others and if it was a relatively minor change in the flow it could be an option; as I understood that the TOTP has a modifier which can be used to indicate the device that is used to generate the TOTP codes? and it was worth a try ;) as my dads favourite saying 'shy kids get no cake!'. ? changing a comment ? breaks build ?? hmm. @natemcmaster not sure if your aware but I'm seeing a few build errors with repo's that have moved; (Blazor) due to path length, I understand these are WIP where would be the best to raise the build issues?. ",
    "Jurabek": "@alexsorokoletov Here is phone number authentication with IdentityServer4 might be helpful https://github.com/Jurabek/IdentityServer4.PhoneNumberAuth . ",
    "ikhanal": "I do have similar kind of flows:\nUser logs in through mobile app providing username and password and then in response WebApi ( implemented using Identity and Odata v3) generates grant_type=password based bearer token and rest of the communications between client and server happen to access the controller are subject to authroze using bearer toekn which is successfully implemented. \nNow I would like to add one more option QR code login on mobile app which basically requests to TOTP and when it valids then server should generate bearer token and should allow to access the controller...  before I start jumping on implementing psw-less login.. is there any better way to implement QR code login where api needs bearer token to communicate after user logged in?. ",
    "patricknolan": "Seem to have solved my issue by replacing the call to AddUserStore and AddEntityFrameworkStores with the following\nservices.AddScoped(typeof(IUserStore<>).MakeGenericType(typeof(ApplicationUser)), typeof(ApplicationUserStore));\n services.AddScoped(typeof(IRoleStore<>).MakeGenericType(typeof(ApplicationRole)), typeof(ApplicationRoleStore));\nservices.AddIdentity<ApplicationUser, ApplicationRole>();. ",
    "rmja": "I am having the same problem. A fix is to explicitly set the foreign key when creating the model, e.g.:\n```\nprotected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n        builder.Entity<ApplicationUser>()\n            .HasMany(x => x.Claims)\n            .WithOne()\n            .HasForeignKey(x => x.UserId);\n\n        builder.Entity<ApplicationUser>()\n            .HasMany(x => x.Logins)\n            .WithOne()\n            .HasForeignKey(x => x.UserId);\n    }\n\n```\nI think the problem is related to the removal of the navigation properties in https://github.com/aspnet/Announcements/issues/263.. ",
    "tomasaschan": "Hm, I didn't build anything but the sources from this repo. I'll try again after also building that.\nDo they have to reside in some special relation to each-other on the file system? Is it documented somewhere that there's a dependency on building that locally, too?. @kangze I actually never managed to build this locally, mostly because I figured out what my real problem was anyway (I only needed a local build to step through with the debugger).. ",
    "kangze": "i hava some question, did you get it? why Microsoft Dever did not care it?. ",
    "mvas": "ok, forget about it. ",
    "generik0": "Thanks. Didn't see that.... Thanks. Didn't see that.... ",
    "smithaitufe": "I am having an error with relation to UserRole as well. Here is the error\nNpgsql.PostgresException (0x80004005): 42P01: relation \"Roles\" does not exist\n   at Npgsql.NpgsqlConnector.<DoReadMessage>d__148.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()\n   at Npgsql.NpgsqlConnector.<ReadMessage>d__147.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Npgsql.NpgsqlConnector.<ReadMessage>d__147.MoveNext()\nI am using DotnetCore 2.0.0 Preview2. I did not have this error in Preview1\nHere are my classes\nUser.cs\n```\npublic class User : IdentityUser\n    {\n        public string LibraryNo { get; set; }\n        [Required]\n        [MaxLength(50)]\n        public string FirstName { get; set; }\n        [Required]\n        [MaxLength(50)]\n        public string LastName { get; set; }\n        public Image Photo { get; set; }\n        public DateTime InsertedAt { get; private set;} = DateTime.Now;\n        public bool ChangePasswordFirstTimeLogin { get; set; } = false;\n        public bool Approved { get; set; }\n        public bool Suspended { get; set; } = false;\n        public bool Locked { get; set; } = false;\n        [NotMapped]\n        public string FullName => $\"{LastName} {FirstName}\";\n        public ICollection LocationsLink { get; set; } = new HashSet();\n        public ICollection Posts { get; set; } = new HashSet();\n        public ICollection Comments { get; set; }\n        public ICollection AddressesLink { get; set; } = new HashSet();\n    public ICollection<Reservation> Reservations { get; set; }\n    public ICollection<Reservation> ReservationBookings { get; set; }\n\n    public ICollection<CheckOutState> CheckOutStates { get; set; }\n    public ICollection<Recall> RecalledBooks { get; set; }        \n}\n\nRole.cs\npublic class Role : IdentityRole\n    {}\n```\nand this is my AddIdentity in startup\nservices.AddIdentity<User, Role>().AddEntityFrameworkStores<LibraryDbContext>().AddDefaultTokenProviders();\n@blowdart @per3ian \nMeanwhile, my dbcontext class has this red underline and when I placed my cursor on it, I got this \n```\nThe type 'Library.Core.Models.Role' cannot be used as type parameter 'TRole' in the generic type or method 'IdentityDbContext'. There is no implicit reference conversion from 'Library.Core.Models.Role' to 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole'. [Library.Repo]\nThe type 'IdentityUser<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'Microsoft.Extensions.Identity.Stores, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. [Library.Repo]\nThe type 'IdentityRole<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'Microsoft.Extensions.Identity.Stores, Version=2.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. [Library.Repo]\nThe type 'Library.Core.Models.User' cannot be used as type parameter 'TUser' in the generic type or method 'IdentityDbContext'. There is no implicit reference conversion from 'Library.Core.Models.User' to 'Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser'. [Library.Repo]\nLibrary.Repo.LibraryDbContext\n```\nI added it and yet it did not work.\nBasically, from what I observed, I can't rename any aspnet identity related tables.\nEdit\nI commented out the lines that supposedly renames AspNetUsers to Users and AspNetRoles to Role.\nThen I got this\nMicrosoft.EntityFrameworkCore.Database.Command[200102]\n      Failed executing DbCommand (47ms) [Parameters=[@__normalizedName_0='?' (Size = 256)], CommandType='Text', CommandTimeout='30']\n      SELECT \"r\".\"Id\", \"r\".\"ConcurrencyStamp\", \"r\".\"Name\", \"r\".\"NormalizedName\"\n      FROM \"AspNetRoles\" AS \"r\"\n      WHERE \"r\".\"NormalizedName\" = @__normalizedName_0\n      LIMIT 1\nNpgsql.PostgresException (0x80004005): 42P01: relation \"AspNetRoles\" does not exist\n   at Npgsql.NpgsqlConnector.<DoReadMessage>d__148.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()\n   at Npgsql.NpgsqlConnector.<ReadMessage>d__147.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Npgsql.NpgsqlConnector.<ReadMessage>d__147.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()\n   at Npgsql.NpgsqlConnector.<ReadExpecting>d__154`1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()\n   at Npgsql.NpgsqlDataReader.<NextResult>d__32.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nEdit\nPlease ignore this as I was able to resolve it. ",
    "devaaniaa": "@blowdart This is my ConfigureServices section : \n```\nservices.AddIdentity()\n                   .AddEntityFrameworkStores()\n                   .AddDefaultTokenProviders();\n        services.Configure<IdentityOptions>(options =>\n        {\n            // Password settings\n            options.Password.RequireDigit = false;\n            options.Password.RequiredLength = 4;\n            options.Password.RequireNonAlphanumeric = false;\n            options.Password.RequireUppercase = false;\n            options.Password.RequireLowercase = false;\n\n            // Lockout settings\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\n            options.Lockout.MaxFailedAccessAttempts = 10;\n\n            // Cookie settings\n            options.Cookies.ApplicationCookie.ExpireTimeSpan = TimeSpan.FromDays(150);\n            options.Cookies.ApplicationCookie.LoginPath = \"/Login\";\n            options.Cookies.ApplicationCookie.LogoutPath = \"/Login/LogOff\";\n\n            // User settings\n            options.User.RequireUniqueEmail = false;\n        });\n\n```\nif you want startup class all content i can share it.\nand my entities class library project.json :\n\"dependencies\": {\n    \"xUtilities\": \"1.0.0-*\",\n    \"Microsoft.EntityFrameworkCore.Relational\": \"1.1.2\",\n    \"Microsoft.EntityFrameworkCore.Relational.Design\": \"1.1.2\",\n    \"Microsoft.AspNetCore.Identity.EntityFrameworkCore\": \"1.1.2\",\n    \"Microsoft.EntityFrameworkCore\": \"1.1.2\",\n    \"Microsoft.EntityFrameworkCore.Design\": \"1.1.2\",\n    \"Microsoft.EntityFrameworkCore.SqlServer\": \"1.1.2\",\n    \"Microsoft.EntityFrameworkCore.SqlServer.Design\": {\n      \"version\": \"1.1.2\",\n      \"type\": \"build\"\n    },\n    \"Microsoft.EntityFrameworkCore.Tools\": \"1.1.1\",\n    \"NETStandard.Library\": \"1.6.1\"\n  },\n  \"tools\": {\n    \"Microsoft.EntityFrameworkCore.Tools\": \"1.1.0-preview4-final\"\n  },. @HaoK @blowdart  this is my applicationUser class :\n```\n    // Add profile data for application users by adding properties to the ApplicationUser class\n    public class ApplicationUser : IdentityUser\n    {\n        public ApplicationUser()\n        {\n    }\n\n    public string Name { get; set; }\n\n    public string About { get; set; }\n\n    public string CellPhoneNumber { get; set; }\n\n    public byte? Gender { get; set; }\n\n    public string Photo { get; set; }\n\n}\npublic class AppClaimsPrincipalFactory : UserClaimsPrincipalFactory<ApplicationUser, IdentityRole>\n{\n    public AppClaimsPrincipalFactory(\n        UserManager<ApplicationUser> userManager,\n        RoleManager<IdentityRole> roleManager,\n        IOptions<IdentityOptions> optionsAccessor) : base(userManager, roleManager, optionsAccessor)\n    {\n    }\n\n    public async override Task<ClaimsPrincipal> CreateAsync(ApplicationUser user)\n    {\n        var principal = await base.CreateAsync(user);\n\n        ((ClaimsIdentity)principal.Identity)\n            .AddClaims(new[] {\n            new Claim(\"Id\", user.Id),\n            new Claim(\"Name\", user.Name),\n        });\n\n        return principal;\n    }\n}\n\n```\nand my dbcontext :\n```\n    public class xDbContext : IdentityDbContext, IUnitOfWork\n    {\n    public readonly IConfigurationRoot _configuration;\n\n    public xDbContext(IConfigurationRoot configuration)\n    {\n        _configuration = configuration;\n    }\n\n    public xDbContext()\n    {}\n\n    public DbSet<Place> Places { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n\n        new PlaceMap(builder.Entity<Place>());\n\n        builder.Entity<ApplicationUser>().ToTable(\"Users\");\n        builder.Entity<IdentityRole>().ToTable(\"Roles\");\n        builder.Entity<ApplicationUsersJoinsRoles>().ToTable(\"UsersJoinsRoles\");\n        builder.Entity<IdentityUserLogin<string>>().ToTable(\"UserLogins\");\n        builder.Entity<IdentityUserClaim<string>>().ToTable(\"UserClaims\");\n        builder.Entity<IdentityUserToken<string>>().ToTable(\"UserTokens\");\n        builder.Entity<IdentityRoleClaim<string>>().ToTable(\"RoleClaims\");\n    }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder b)\n    {\n        string ConnectionString = \"ConnectionStrings:DefaultConnection\";\n\n        b.UseSqlServer(\n            _configuration[ConnectionString],\n            serverDbContextOptionsBuilder =>\n            {\n                var minutes = (int)TimeSpan.FromMinutes(3).TotalSeconds;\n                serverDbContextOptionsBuilder.CommandTimeout(minutes);\n            });\n    }\n\n    public void AddRange<TEntity>(IEnumerable<TEntity> entities) where TEntity : class\n    {\n        base.Set<TEntity>().AddRange(entities);\n    }\n\n    public void RemoveRange<TEntity>(IEnumerable<TEntity> entities) where TEntity : class\n    {\n        base.Set<TEntity>().RemoveRange(entities);\n    }\n\n    public void MarkAsChanged<TEntity>(TEntity entity) where TEntity : class\n    {\n        base.Entry(entity).State = EntityState.Modified; // Or use ---> this.Update(entity);\n    }\n\n    public void ExecuteSqlCommand(string query)\n    {\n        base.Database.ExecuteSqlCommand(query);\n    }\n\n    public void ExecuteSqlCommand(string query, params object[] parameters)\n    {\n        base.Database.ExecuteSqlCommand(query, parameters);\n    }\n\n    public int SaveAllChanges()\n    {\n        return base.SaveChanges();\n    }\n\n    public void Rollback()\n    {\n        base.Database.RollbackTransaction();\n    }\n\n    public Task<int> SaveAllChangesAsync()\n    {\n        return base.SaveChangesAsync();\n    }\n}\n\n```. @blowdart @HaoK  any news?. I fixed this by adding IdentityUserRole after inherited class in my dbContext like this :\n// To add extra fields to UserRoles table.\n            builder.Entity<ApplicationUsersJoinsRoles>().ToTable(\"UsersJoinsRoles\");\n            builder.Entity<IdentityUserRole<string>>().ToTable(\"UsersJoinsRoles\");\nI dont know why but it works!\nI mean my own fields added and table name changed!. \nI commented .AddDefaultUI() and it worked!. ",
    "joaomello": "It's necessary to put same ApplicationName, too.\nservices.AddDataProtection()\n  .SetApplicationName(\"identity\")\n  .PersistKeysToRedis(redis);. ",
    "series0ne": "I believe I've had the same problem, documented here on StackOverflow.\nThe best answer given was\nThe constraint is where TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>>. Since this is class constraint, there is no co/contravariance. IMO they simply forgot to add TRoleClaim generic argument.\nthe ASP.NET Core Identity team should investigate this...seems like this should be a simple fix.. In fact, the issue I posted above isn't exactly the same, but still closely related to this issue. The problem above is that custom identity types for TUser, TRole etc. can't be used with\n.AddEntityFrameworkStores<AppDbContext,long>() and .AddDefaultTokenProviders(); You need to implement all of this yourself.\nSee this article\nhttps://github.com/aspnet/Identity/issues/1082. ",
    "MovGP0": "Implementation is pretty straight-forward: \ncsharp\npublic async virtual Task<bool> VerifyChangePasswordTokenAsync(TUser user, string token)\n{\n     var tokenProvider = Options.Tokens.PasswordResetTokenProvider;\n     return await VerifyUserTokenAsync(user, tokenProvider, \"ResetPassword\", token);\n}. No I don't. I want to implement the token verification. . to be precise, those constants should be in a dedicated static class, rather than in the SignInManager (because of the Single-Responsibility-Principle).. I have similar concerns about the dependencies on classes rather than interfaces. they should get removed. Ie. the constructor of SignInManager has a hard dependency on UserManager<TUser>, rather than on IUserManager<TUser> (which doesn't exist either). \nMy workaround so far was to subclass everything and put proper interfaces on them. . ",
    "sanmscse": "Hi,\nWhat value we have to set for _userManager.Options.Tokens.AuthenticatorTokenProvider.\nI'm using 2FA without Entity Framework in core2.0. i've to write custom methods for token generation and verification. the below method reuires string for AuthenticatorTokenProvider. Does anyone know what provider i'veto give?\nvar is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\n                user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\nThanks,\nSaravanan\n. ",
    "felipepessoto": "@HaoK I'm not sure if the cause is the PostConfigure not running. But it doesn't work if I set just the DataProtectionProvider \nPS: I'm using the latest stable packages (1.1.2). The code changed a lot since 1.1.2: https://github.com/aspnet/Identity/blob/rel/1.1.2/src/Microsoft.AspNetCore.Identity/IdentityServiceCollectionExtensions.cs#L47. Sure. They are just projects from scratch that I created to reproduce the steps documented at https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/compatibility/cookie-sharing#sharing-authentication-cookies-between-aspnet-4x-and-aspnet-core-applications\nI have a WebForms 4.6.2:\n```\n        public void ConfigureAuth(IAppBuilder app)\n        {\n            // Configure the db context, user manager and signin manager to use a single instance per request\n            app.CreatePerOwinContext(ApplicationDbContext.Create);\n            app.CreatePerOwinContext(ApplicationUserManager.Create);\n            app.CreatePerOwinContext(ApplicationSignInManager.Create);\n        // Enable the application to use a cookie to store information for the signed in user\n        // and to use a cookie to temporarily store information about a user logging in with a third party login provider\n        // Configure the sign in cookie\n        app.UseCookieAuthentication(new CookieAuthenticationOptions\n        {\n            AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,\n            CookieName = \".AspNetCore.ApplicationCookie\",\n            TicketDataFormat = new AspNetTicketDataFormat(\n       new DataProtectorShim(\n           DataProtectionProvider.Create(new DirectoryInfo(@\"c:\\shared-auth-ticket-keys\\\"))\n           .CreateProtector(\"Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware\", \"Cookies\", \"v2\"))),\n            CookieManager = new ChunkingCookieManager(),\n            LoginPath = new PathString(\"/Account/Login\"),\n            Provider = new CookieAuthenticationProvider\n            {\n                OnValidateIdentity = SecurityStampValidator.OnValidateIdentity<ApplicationUserManager, ApplicationUser>(\n                    validateInterval: TimeSpan.FromMinutes(30),\n                    regenerateIdentity: (manager, user) => user.GenerateUserIdentityAsync(manager))\n            }\n        });\n        // Use a cookie to temporarily store information about a user logging in with a third party login provider\n        app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);\n\n        // Enables the application to temporarily store user information when they are verifying the second factor in the two-factor authentication process.\n        app.UseTwoFactorSignInCookie(DefaultAuthenticationTypes.TwoFactorCookie, TimeSpan.FromMinutes(5));\n\n        // Enables the application to remember the second login verification factor such as phone or email.\n        // Once you check this option, your second step of verification during the login process will be remembered on the device where you logged in from.\n        // This is similar to the RememberMe option when you log in.\n        app.UseTwoFactorRememberBrowserCookie(DefaultAuthenticationTypes.TwoFactorRememberBrowserCookie);\n    }\n\n```\nAnd an ASP.NET Core 1.1.2 running on .NET Framework 4.6.2\n```\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Add framework services.\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n        services.AddIdentity<ApplicationUser, IdentityRole>(options => {\n            options.Cookies.ApplicationCookie.AuthenticationScheme = \"ApplicationCookie\";\n            options.Cookies.ApplicationCookie.CookiePath = \"/\";\n            var protectionProvider = DataProtectionProvider.Create(new DirectoryInfo(@\"c:\\shared-auth-ticket-keys\\\"));\n            options.Cookies.ApplicationCookie.DataProtectionProvider = protectionProvider;\n\n//The following line shouldn't be required, because I'm setting the DataProtectionProvider at the line above\n                options.Cookies.ApplicationCookie.TicketDataFormat = new TicketDataFormat(protectionProvider.CreateProtector(\"Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware\", \"Cookies\", \"v2\"));\n            })\n                .AddEntityFrameworkStores()\n                .AddDefaultTokenProviders();\n        services.AddMvc();\n\n        // Add application services.\n        services.AddTransient<IEmailSender, AuthMessageSender>();\n        services.AddTransient<ISmsSender, AuthMessageSender>();\n    }\n\n```. Yes, here is my csproj:\n```\n\n\nnet462\nwin7-x86\n\n\naspnet-AspNetCoreProject-0f165b13-52be-4ec1-a1d5-ec1f4b4db3e0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```. @HaoK, the difference at https://github.com/blowdart/idunno.CookieSharing is that TicketDataFormat is configured.\nI already sent a PR updating the docs: https://github.com/aspnet/Docs/pull/3761. @blowdart, it's working for me when setting TicketDataFormat, I sent a PR to update the docs. But it seems more like a bug in version 1.1.2 of Identity.\nThe 2.0 version calls AddCookie, so it should work without setting TicketDataFormat . @Rick-Anderson to be honest I haven't used 2.0 yet. Right, we need to update the docs.. ",
    "vdevappa": "When is this coming to VS 2017 RTM version?. Then maybe someone should assign this bug to the VS 2017 team?. ",
    "SidShetye": "It's not a bug - see the background window of my submitted screenshot (WebAPI). I mean it's not a bug on my installation instance, it's a bug in the product / template itself as reported.. ",
    "craigahanson": "If the UserManager and SignInManager had interfaces then it allows you to make fake implementations and therefore is easy to unit test and DI.\nI tried to workaround this issue by creating subclasses and applying interfaces to them but I seem to run into issues in the SignInManager, as it must be supplied with a concrete UserManager class.\nI am wondering whether or not to create a pull request.. do you think it would be worth it or is it not something that is wanted anyway?. ",
    "ppi-rloving": "all of these links are broken ...grrrrr!. ",
    "tiagodenoronha": "For anyone searching, here is the current link: https://github.com/aspnet/Identity/blob/master/test/Shared/MockHelpers.cs. ",
    "mdekrey": "Given the line linked, it looks like it uses CancellationToken.None by default; it doesn't look like the code has changed since @HaoK's comment, either. \nI'm curious on the design decision here as opposed to having default parameters of CancellationToken cancellationToken = default(CancellationToken) that I see in most other areas of the framework. Can someone enlighten me? Thanks in advance!\nI also imagine that it's more common to have multiple CancellationToken sources than to provide a custom manager, and it feels heavy-handed to do so.. ",
    "DamianEdwards": "Please see the instructions for configuring \"Data Protection\" when hosting under IIS at https://docs.microsoft.com/en-au/aspnet/core/publishing/iis. Get Ryan and Pranav to look at it pls. Now that the UI in is hidden away in a library, I'd be OK with revisiting that. We'd need to consider what to do with the scaffolder content though.. We don't have any plans to invest in a version of the scaffolders that emit controllers & views at this time. Maintaining two copies of the functionality in two different patterns is obviously a cost and right now it seems the only benefit to being to use controllers & views is one of \"preference\" rather than a concrete lack of capability.. @iAmBipinPaul absolutely.. @javiercn @Eilon @mkArtakMSFT @rynowak . Is the idea that any custom data that a custom IUserStore is pushing onto a a TUser instance needs to be explicitly added to the app's pages? i.e. we can't make it \"automatic\"?. ",
    "PuttItOut": "Perfect! Thank you so much.. ",
    "penihel": "Nice, i agree.\nAdictionally, i think the library would thrown a specifc exception for this. I spent 1 day debugging to find out the problem.\nthanks. about the full stack, I dont have it now. But i will reproduce again and post it soon.\nBut, the specific line is that\nhttps://github.com/aspnet/Identity/blob/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41/src/Microsoft.Extensions.Identity.Core/UserClaimsPrincipalFactory.cs#L77\nInside this method:\nTask GenerateClaimsAsync(TUser user)\nIn this line\nvar userId = await UserManager.GetUserIdAsync(user);\nand them:\nid.AddClaim(new Claim(Options.ClaimsIdentity.UserIdClaimType, userId));\nthe code does not check if the \"userId\" is null before try add the \"UserId Claim\"\nthank you. ",
    "itzAnish": "Hello, \nIs it possible to store the email column in AspNetUsers table to be encrypted using Application level i.e System.Security.Cryptography or Database level i.e. Always Excrypted (SQL Server 2016) ?\nWe are using ASP.Net Identity with our e-commerce application and need to follow GDPR for customer data.\nThanks.. ",
    "StingyJack": "Please do not lock everyone into using EF. . ",
    "wdominik": "Got the same issue with 2.0.0 final. I migrated to the new way of 2FA but I still need SMS for urgent user communication and phone verification is required for obvious reasons.\nI suggest to either change this back to 6 digits code which are more reasonable in this case (imho) or provide a way to configure the behavior.\nThanks!\n. ",
    "Elfocrash": "I didn't have any luck configuring them on the manager as they have to be set to used by the manager somehow and the options are again system wide.\nIt would be helpful separating them moving forward especially for saas products. . ",
    "Costo": "We do use multiple user types and multiple managers in our app so we have this problem too.  \n\nWe don't really support multiple instances of identity within a single app.\n\nWhat is the guidance then? Create one application per user type?. ",
    "JanEggers": "hi @andrew-vandenbrink  same issue here although i got a little further: it has to be public ICollection<IdentityUserRole<string>> Roles { get; set; } because user to role relation is m2n. that way my code is compiling but have trouble when starting. if i do nothing ef generates another user id property in the userroles table.\nthen i added the following in OnModelCreating \nbuilder.Entity<MyUser>()\n                .HasMany( p => p.Roles )\n                .WithOne()\n                .HasForeignKey( p => p.UserId )\n                .HasPrincipalKey( p => p.Id )\nthen i got the following during migration:\n\"The relationship from 'IdentityUserRole<string>' to 'MyUser' with foreign key properties {'UserId' : string} cannot target the primary key {'Id' : string} because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship.\"\nso i dunno why string is not compatible with string as this was used in efcore 1.1 to join them... \n. @MaximBalaganskiy  tried your code, but it does not work for me. when i add a migration ef still creates another MyUserId column like that: (from ModelSnapshot)\nmodelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserRole<string>\", b =>\n                {\n                    b.Property<string>(\"UserId\");\n                    b.Property<string>(\"RoleId\");\n                    b.Property<string>(\"MyUserId\");\n                    b.HasKey(\"UserId\", \"RoleId\");\n                    b.HasIndex(\"MyUserId\");\n                    b.HasIndex(\"RoleId\");\n                    b.ToTable(\"AspNetUserRoles\");\n                });\nthat is quite confusing as the modelbuilder in onmodelcreating seems to pick it up correctly (OnModelCreating => builder.Model.DebugView)\nEntityType: IdentityUserRole<string>\n    Properties: \n      RoleId (string) 0 0 -1 -1 -1\n      UserId (string) Required FK Index 1 1 0 -1 0\n    Foreign keys: \n      IdentityUserRole<string> {'UserId'} -> MaintenanceUser {'Id'} ToDependent: Roles\n    Annotations: \n      RelationshipDiscoveryConvention:NavigationCandidates: System.Collections.Immutable.ImmutableSortedDictionary`2[System.Reflection.PropertyInfo,System.Type]\n. > This was working in version 1, I'm not quite a fan of EF, is this caused by the same issue that you are facing now @JanEggers ?\n@andrew-vandenbrink : jup that is exact my issue.\n\nI had the same issue when there was no mapping setup for the navigation property. In this case EF creates the default mapping which has a different column name.\n\n@MaximBalaganskiy: as i said i used your code and the mapping is still wrong\n. @HaoK official feedback would be very welcome btw. @andrew-vandenbrink thx for the context i had my line before calling base.OnModelCreating(builder).\nwhen putting it after that line it works.\n. ",
    "MaximBalaganskiy": "I just \"stole\" a line from the sources\nbuilder.Entity<MyUser>().HasMany(p => p.Roles).WithOne().HasForeignKey(p => p.UserId).IsRequired();. @adeministr I did the following which was enough\n```\npublic class User {\n    public virtual ICollection> Roles { get; } = new List>();\n}\npublic class MyContext : IdentityDbContext {\n  protected override void OnModelCreating(ModelBuilder builder) {\n    builder.Entity(b => {\n      b.HasMany(x => x.Roles).WithOne().HasForeignKey(ur => ur.UserId).IsRequired();\n    });\n  }\n}\n```. I did have a duplicate column before I added the manual mapping for the\nnavigation property\nOn 17 Aug 2017 3:52 PM, \"JanEggers\" notifications@github.com wrote:\n\n@MaximBalaganskiy https://github.com/maximbalaganskiy tried your code,\nbut it does not work for me. when i add a migration ef still creates\nanother MyUserId column like that: (from ModelSnapshot)\nmodelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserRole\", b =>\n                {\n                    b.Property(\"UserId\");\n                    b.Property(\"RoleId\");\n                    b.Property(\"MyUserId\");\n                    b.HasKey(\"UserId\", \"RoleId\");\n                    b.HasIndex(\"MyUserId\");\n                    b.HasIndex(\"RoleId\");\n                    b.ToTable(\"AspNetUserRoles\");\n                });\nthat is quite confusing as the modelbuilder in onmodelcreating seems to\npick it up correctly (OnModelCreating => builder.Model.DebugView)\nEntityType: IdentityUserRole\n    Properties:\n      RoleId (string) 0 0 -1 -1 -1\n      UserId (string) Required FK Index 1 1 0 -1 0\n    Foreign keys:\n      IdentityUserRole {'UserId'} -> MaintenanceUser {'Id'} ToDependent: Roles\n    Annotations:\n      RelationshipDiscoveryConvention:NavigationCandidates: System.Collections.Immutable.ImmutableSortedDictionary`2[System.Reflection.PropertyInfo,System.Type]\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1361#issuecomment-322975581,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADimvKunXQnADyLp2ev73FaLk2tNHxrLks5sY9UggaJpZM4O3gPY\n.\n. I had the same issue when there was no mapping setup for the navigation property. In this case EF creates the default mapping which has a different column name.. I haven't actually tried to create a new migration. Just with this change current code base works with the existing DB. It might be that the current snapshot is out of sync with models and this is preventing migration engine from working correctly. May be you need to tweak the snapshot to remove that mapping so that new run does not create a duplicate field.. @JanEggers I guess it would make it faster, if you had a reproduction repo . @andrew-vandenbrink if this workaround creates the identical snapshot then it's fine. I got an impression that the following migration failed. This could mean that models and current snapshot are out of sync. But again, can only be confirmed with the demo repo.. That mapping was copied from the previous identity context code for SQL\nserver. I suggest you checkout identity repo for 1.2 and copy the\nrespective line from sqlite related context\n\nOn 17 Aug 2017 10:33 PM, \"andrew-vandenbrink\" notifications@github.com\nwrote:\n\n@HaoK https://github.com/haok is this workaround expected or I miss\nsomething?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1361#issuecomment-323059175,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADimvFH5HI6agk_yVfoc_c2B3MxODeyrks5sZDMJgaJpZM4O3gPY\n.\n. @weitzhandler I think it has to be ICollection<TUserRole> Roles. With ICollection<TRole> Roles you create another relationship which results in a cycle when a user is deleted.. @prostakov https://github.com/aspnet/Identity/issues/1361#issuecomment-322928934. \n",
    "YodasMyDad": "Any further official update on this?. @weitzhandler I don't think that is the issue in this case, as identity in EF Core 2 has a AspNetUserRole table? This is the join table is it not?. ",
    "lpinter": "@weitzhandler \nWhere is iUser defined? I cannot find it in the EF 2.0 or on this page.. ",
    "prostakov": "I've just read through entire thread. If there's no official update, and no simple workaround, why the issue is closed? Maybe it should be reopened, @andrew-vandenbrink?. @andrew-vandenbrink, @MaximBalaganskiy, thanks, guys! I just hadn't had any time lately to test your proposed solutions... I will certainly take a look!. ",
    "mguinness": "@prostakov There is way too much confusion regarding these navigation properties.  See https://github.com/aspnet/Identity/issues/1364#issuecomment-334077681 for a little more detail.  The next step for MSFT should be to get these added to the default templates that are defined for new projects using individual user accounts.. @waiseman That blog post is 4 years old and isn't for ASP.NET Identity Core.  I suppose some concepts carry forward but it just adds to the confusion IMHO.. ",
    "waiseman": "this may help you : http://johnatten.com/2014/06/22/asp-net-identity-2-0-customizing-users-and-roles/. ",
    "AlejandroFlorin": "@weitzhandler Thanks for that. I had to make a correction in order to add the nav property to the Role entity as well:\n\nI added the collection to the Role Class\nChanged the model builder code from  role.HasMany<UserRole>() to role.HasMany(r => r.UserRoles). \n",
    "Mozart-Alkhateeb": "Hi there i think the problem is about where to place this line of code:\nbase.OnModelCreating(modelBuilder);\nwhen placed at the beginning of the method everything works fine, else it creates duplicate foreign keys. . ",
    "andyfurniss4": "Here's my full solution (using default table names): https://stackoverflow.com/a/51005445/5392786. @ranouf Thanks for the update. I'm glad you managed to sort it out. I hadn't come across this issue personally but hopefully this will be helpful to anyone else who experiences it.. @chrisdpratt I've followed your solution above and I've created a new controller for managing the login and logout requests but I'm getting stuck in a redirection loop on the login page.\nStartup:\n```\nservices.AddAuthentication(o =>\n{\n    o.DefaultScheme = IdentityConstants.ApplicationScheme;\n    o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\n})\n.AddIdentityCookies(o => { });\nservices.AddIdentityCore(o =>\n{\n    o.Stores.MaxLengthForKeys = 128;\n})\n.AddEntityFrameworkStores()\n.AddSignInManager()\n.AddDefaultTokenProviders();\nservices.ConfigureApplicationCookie(o =>\n{\n    o.LoginPath = \"/Identity/Account/Login\";\n    o.LogoutPath = \"/Identity/Account/Logout\";\n});\nservices.AddAuthentication().AddGoogle(googleOptions =>\n{\n    var settings = Configuration.GetSection(\"Google\");\n    googleOptions.ClientId = settings.GetValue(\"LogInClientId\");\n    googleOptions.ClientSecret = settings.GetValue(\"LogInClientSecret\");\n    googleOptions.AuthorizationEndpoint += \"?hd=domain.com&prompt=select_account\";\ngoogleOptions.Events = new OAuthEvents\n{\n    OnCreatingTicket = context =>\n    {\n        string domain = context.User.Value<string>(\"domain\");\n        if (domain != \"domain.com\")\n            throw new GoogleAuthenticationException(\"You must sign in with a domain.com email address\");\n\n        return Task.CompletedTask;\n    }\n};\n\n});\n// MVC\nservices.AddMvc(options =>\n{\n    if (HostingEnvironment.IsDevelopment())\n    {\n        var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    }\n    else\n    {\n        options.Filters.Add(new AllowAnonymousFilter());\n    }\n    options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());\n})\n.SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n```\nAccountController:\n```\n[Area(\"Identity\")]\npublic class AccountController : Controller\n{\n    [AllowAnonymous]\n    public async Task Login(string returnUrl = \"/\")\n    {\n        await HttpContext.ChallengeAsync(new AuthenticationProperties() { RedirectUri = returnUrl });\n    }\npublic async Task Logout()\n{\n    await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme, new AuthenticationProperties\n    {\n        RedirectUri = Url.Action(\"Login\", \"Account\", new { area = \"Identity\" })\n    });\n}\n\n}\n```. ",
    "freerider7777": "We're spending time on this... Dear Microsoft - don't make such changes plz.. ",
    "ranouf": "@andyfurniss4 About your stackoverflow, thanks a lot I finally succeeded to use UserRole after many months of try. But I had to modify your answer to make it work correctly, in the startup, to avoid this error: \"Cannot create a DbSet for 'IdentityUserRole' because this type is not included in the model for the context\", I changed your code to:\n        services.AddIdentity<User, Role>()\n            .AddEntityFrameworkStores<AppDbContext>()\n            .AddDefaultTokenProviders()\n            .AddUserStore<UserStore<User, Role, AppDbContext, Guid,IdentityUserClaim<Guid>, UserRole,IdentityUserLogin<Guid>, IdentityUserToken<Guid>, IdentityRoleClaim<Guid>>>()\n            .AddRoleStore<RoleStore<Role, AppDbContext, Guid,UserRole,IdentityRoleClaim<Guid>>>();\n\n. ",
    "sebastianbk": "No, I don't. Everything worked fine under v1.1. Then I did the upgrade and it stills works on my dev machine with IIS Express. However, when deploying to Azure, it doesn't.\nIs there any diagnostics info I can extract, which would be helpful to you? Or parts of my code you are interested in?. No, I don't. Everything worked fine under v1.1. Then I did the upgrade and it stills works on my dev machine with IIS Express. However, when deploying to Azure, it doesn't.\nIs there any diagnostics info I can extract, which would be helpful to you? Or parts of my code you are interested in?. @HaoK, thanks for trying to help me out. I managed to attach a remote debugger on my site, I realized I was getting this error:\n\nSystem.InvalidOperationException: No service for type 'Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet' has been registered.\n\nSee the stack trace below.\nI am confused about this error, as I am indeed including Microsoft.AspNetCore.All, which should contain the latest version of the Application Insights SDK. It says so in the migration guide:\n\nThe 2.0 metapackage includes the latest version of Application Insights, so a package downgrade error appears if you're referencing an older version.\n\nHow come I am getting this error in my Azure Web App instance but not on my local machine?\nI am going to close this issue here, as it clearly has nothing to do with Identity. I will find another GitHub repo to post this issue in.\n{System.InvalidOperationException: No service for type 'Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet' has been registered.\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.<>c__DisplayClass8_0.<CreateActivateInfo>b__1(ViewContext context)\n   at Microsoft.Extensions.Internal.PropertyActivator`1.Activate(Object instance, TContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.Activate(Object page, ViewContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorPageActivator.Activate(IRazorPage page, ViewContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderPageCoreAsync>d__16.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderPageAsync>d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderLayoutAsync>d__18.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderAsync>d__14.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.<ExecuteAsync>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.<ExecuteAsync>d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Sensomind.Web.Startup.<>c.<<Configure>b__13_0>d.MoveNext() in C:\\Projects\\VRinno\\Sensomind\\Cloud\\src\\Sensomind.Web\\Startup.cs:line 216\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()}. @HaoK, thanks for trying to help me out. I managed to attach a remote debugger on my site, I realized I was getting this error:\n\nSystem.InvalidOperationException: No service for type 'Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet' has been registered.\n\nSee the stack trace below.\nI am confused about this error, as I am indeed including Microsoft.AspNetCore.All, which should contain the latest version of the Application Insights SDK. It says so in the migration guide:\n\nThe 2.0 metapackage includes the latest version of Application Insights, so a package downgrade error appears if you're referencing an older version.\n\nHow come I am getting this error in my Azure Web App instance but not on my local machine?\nI am going to close this issue here, as it clearly has nothing to do with Identity. I will find another GitHub repo to post this issue in.\n{System.InvalidOperationException: No service for type 'Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet' has been registered.\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.<>c__DisplayClass8_0.<CreateActivateInfo>b__1(ViewContext context)\n   at Microsoft.Extensions.Internal.PropertyActivator`1.Activate(Object instance, TContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.Activate(Object page, ViewContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorPageActivator.Activate(IRazorPage page, ViewContext context)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderPageCoreAsync>d__16.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderPageAsync>d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderLayoutAsync>d__18.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.<RenderAsync>d__14.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.<ExecuteAsync>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.<ExecuteAsync>d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Sensomind.Web.Startup.<>c.<<Configure>b__13_0>d.MoveNext() in C:\\Projects\\VRinno\\Sensomind\\Cloud\\src\\Sensomind.Web\\Startup.cs:line 216\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Builder.Extensions.MapMiddleware.<Invoke>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Session.SessionMiddleware.<Invoke>d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>d__6.MoveNext()}. ",
    "pealmeid": "I was using services.AddIdentity<User, IdentityRole<int>>  in ConfigureServices and started getting the error after moving to ASP.NET Core 2.0.\nI changed my code to use a user-defined Role class instead of the generic IdentityRole<int> and it's working now.\nI created a class MyRole inheriting from IdentityRole<int>:\npublic class MyRole : IdentityRole<int>\n{\n    public MyRole() : base()\n    {\n    }\n\n    public MyRole(string roleName)\n    {\n        Name = roleName;\n    }\n}\n\nand changed ConfigureServices to use that class instead of the generic IdentityRole<int>:\nservices.AddIdentity<User, MyRole>\nApparently AddEntityFrameworkStores checks the type for the Role class used in services.AddIdentity<User, Role> and returns null if it's not a derived class or if it is a generic IdentityRole<T> (even if it has the correct type parameter).\nHope this helps and appreciate anyone else shedding more light on this issue.. ",
    "nixxholas": "Here's what I've faced so far. \n\nDidn't modify anything related to roles...\n```\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: Cannot create a DbSet for 'IdentityRole' because this type is not included in the model for the context.\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityType()\nStack Query Cookies Headers\nInvalidOperationException: Cannot create a DbSet for 'IdentityRole' because this type is not included in the model for the context.\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityType()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityQueryable()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.System.Linq.IQueryable.get_Expression()\nSystem.Linq.Queryable.GetSourceExpression(IEnumerable source)\nSystem.Linq.Queryable.Join(IQueryable outer, IEnumerable inner, Expression> outerKeySelector, Expression> innerKeySelector, Expression> resultSelector)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore+d__36.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserManager+d__110.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory+d__5.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory+d__9.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__25.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__30.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Identity.SignInManager+d__52.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__33.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+d__34.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nVolt.Controllers.AccountController+d__8.MoveNext() in AccountController.cs\n+\n                var result = await _signInManager.PasswordSignInAsync(user.UserName, model.Password, model.RememberMe, false);\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__12.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__10.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__14.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__22.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__17.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__15.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Builder.RouterMiddleware+d__4.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nVolt.Sockets.VoltSocketMiddleware+d__3.MoveNext() in VoltSocketMiddleware.cs\n+\n            await _next.Invoke(context);\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware+d__3.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware+d__4.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+d__7.MoveNext()\n```. @HaoK \n```\n        // Identity Configurations.\n        services.AddIdentity<User, IdentityRole<string>>(config =>\n            {\n                // config.SignIn.RequireConfirmedEmail = true;\n                config.SignIn.RequireConfirmedPhoneNumber = true;\n            })\n            .AddEntityFrameworkStores<VoltDbContext>()\n            .AddDefaultTokenProviders()\n            .AddUserManager<VoltUserManager<User>>();\n\n```\nI do not want to mess with this migration as it means a lot to me. I do not see any recommendations/guides on this after implementing a derived role class.\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: Cannot create a DbSet for 'UserRole' because this type is not included in the model for the context.\nAdded the Derived role to the ApplicationDbContext equivalent on my project.\nTwilio is now broken on .NET Core 2.0 with .NET Core 1.1 implementations.. This will no longer generate a user friendly token for the user to input in conjunction with Twilio.\nvar code = await _userManager.GenerateChangePhoneNumberTokenAsync(user, model.PhoneNumber);. ",
    "mattgross76": "@HaoK ....\nUPDATE:  I have solved the problem by adding a JsonClaimsPrincipalConverter, which is used to suppress most serialization for the ClaimsPrincipal classes when saving to Cosmos DB.  This feels a bit hacky, but I suspect it is OK since I don't have a need for the information in the application at this time.  Any thoughts from Microsoft on this?  \nI am having an issue with serializing the logins, which was detected by my automated tests.  Prior to migrating to 2.0, everything was working perfectly, but I now receive the error below when calling the result = await _userManager.AddLoginAsync(user, info); inside the AccountController.ExternalLoginConfirmation method.  \nI am using the DocumentDBUserStore from codekoenig (https://github.com/codekoenig/AspNetCore.Identity.DocumentDb) to store my users, roles, logins, etc. in Cosmos DB rather than the default SQL provider.  \nIt looks like the problem occurs when attempting to serialize the System.Security.Claims.ClaimsPrincipal class.  I don't see any release notes regarding changes to this class, so it is difficult to figure out what is happening.\nAnyone else seeing something similar?  This is the only issue I have with Core 2.0.  \nHere is the stack trace I receive:\nAn unhandled exception occurred while processing the request.\nPlatformNotSupportedException: This instance contains state that cannot be serialized and deserialized on this platform.\nSystem.Security.Claims.ClaimsPrincipal.OnSerializingMethod(StreamingContext context)\nTargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.RuntimeMethodHandle.InvokeMethod(object target, Object[] arguments, Signature sig, bool constructor)\nStack Query Cookies Headers\nPlatformNotSupportedException: This instance contains state that cannot be serialized and deserialized on this platform.\nSystem.Security.Claims.ClaimsPrincipal.OnSerializingMethod(StreamingContext context)\nShow raw exception details\nTargetInvocationException: Exception has been thrown by the target of an invocation.\nSystem.RuntimeMethodHandle.InvokeMethod(object target, Object[] arguments, Signature sig, bool constructor)\nSystem.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(object obj, Object[] parameters, Object[] arguments)\nNewtonsoft.Json.Serialization.JsonContract+<>c__DisplayClass57_0.b__0(object o, StreamingContext context)\nNewtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object o, StreamingContext context)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.OnSerializing(JsonWriter writer, JsonContract contract, object value)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeList(JsonWriter writer, IEnumerable values, JsonArrayContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject(JsonWriter writer, object value, JsonObjectContract contract, JsonProperty member, JsonContainerContract collectionContract, JsonProperty containerProperty)\nNewtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, object value, Type objectType)\nNewtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, object value, Type objectType)\nNewtonsoft.Json.Linq.JToken.FromObjectInternal(object o, JsonSerializer jsonSerializer)\nNewtonsoft.Json.Linq.JObject.FromObject(object o, JsonSerializer jsonSerializer)\nMicrosoft.Azure.Documents.Document.FromObject(object document, JsonSerializerSettings settings)\nMicrosoft.Azure.Documents.Client.DocumentClient+d__150.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.Azure.Documents.BackoffRetryUtility+<>c__DisplayClass1_0+<b__0>d.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.Azure.Documents.BackoffRetryUtility+d__3.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.Azure.Documents.BackoffRetryUtility+d__3.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.Azure.Documents.BackoffRetryUtility+d__1.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.Azure.Documents.Client.DocumentClient+d__149.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nLrnen.Web.Online.Data.DocumentDbUserStore+d__15.MoveNext() in DocumentDBUserStore.cs\n+\n                await documentClient.ReplaceDocumentAsync(GenerateDocumentUri(user.Id), document: user);\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserManager+d__171.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserManager+d__96.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nLrnen.Web.Online.Controllers.AccountController+d__12.MoveNext() in AccountController.cs\n+\n                    result = await _userManager.AddLoginAsync(user, info);\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__12.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__10.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker+d__14.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__22.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__17.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+d__15.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Builder.RouterMiddleware+d__4.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware+d__4.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nMicrosoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware+d__6.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+d__7.MoveNext()\nShow raw exception details. ",
    "QuantumHive": "I'm trying to migrate from .NET Core 1.1 to 2.0 following the migrations guide and I'm getting the following exception:\nSystem.Data.SqlClient.SqlException (0x80131904): Invalid column name 'UserId'.\nLike other people in this thread, I have the following:\nservices.AddIdentity<User, IdentityRole<int>>()\n    .AddDefaultTokenProviders();\nSo this exception gets thrown when I call this:\nawait signInManager.PasswordSignInAsync(userName, password, isPersisten, lockoutOnFailure)\nAnyway, you guys are telling us\n\nThe Entity Framework Core navigation properties of the base IdentityUser POCO (Plain Old CLR Object) have been removed. If your 1.x project used these properties, manually add them back to the 2.0 project\n\nSo I've added the following navigation property to my User : IdentityUser POCO class:\npublic virtual ICollection<TUserRole> Roles { get; } = new List<TUserRole>();\nWhen I add a migration I'm getting the following:\n```\nprotected override void Up(MigrationBuilder migrationBuilder)\n{\n    migrationBuilder.AddColumn(\n        name: \"UserId\",\n        table: \"AspNetRoles\",\n        type: \"int\",\n        nullable: true);\nmigrationBuilder.CreateIndex(\n    name: \"IX_AspNetRoles_UserId\",\n    table: \"AspNetRoles\",\n    column: \"UserId\");\n\nmigrationBuilder.AddForeignKey(\n    name: \"FK_AspNetRoles_AspNetUsers_UserId\",\n    table: \"AspNetRoles\",\n    column: \"UserId\",\n    principalTable: \"AspNetUsers\",\n    principalColumn: \"Id\",\n    onDelete: ReferentialAction.Restrict);\n\n}\n```\nI'm guessing I also have to configure this change, but there is no documentation for this change. I was using the Roles property on the IdentityUser class in v1.1, so I need this back, since the application is already running in production.\nWhat's the correct way to configure this (in Fluent API?)? Because a many-to-many table is between the AspNetUsers and AspNetRoles tables in the sql database.\nPerhaps this should be documentated in the migration guide, since I'm at a loss here.. @HaoK @ajcvickers I'm not sure that's the correct way to configure the many-to-many table?\nThe database schema looked like this pre-2.0:\n\nYou can see the many-to-many table dbo.AspNetUserRoles that connects dbo.AspNetRoles and dbo.AspNetUsers.\nIf I try to configure the User entity like so:\n\nThen I'm getting the error:\n'IdentityRole<int>' does not contain a definition for 'UserId' and no extension method 'UserId' accepting a first argument of type 'IdentityRole<int>' could be found (are you missing a using directive or an assembly reference?)\nThe same applies for configuring the other end:\n\nwith error:\n'IdentityRole<int>' does not contain a definition for 'Users' and no extension method 'Users' accepting a first argument of type 'IdentityRole<int>' could be found (are you missing a using directive or an assembly reference?)\nSo what's the correct and recommended way to migrate this?\n. @HaoK @ajcvickers is my question and issue being ignored?. @HaoK I've written an entire explanation (even provided with screenshots) that those steps do not work. Did nobody care or read that? Obviously the steps in https://github.com/aspnet/EntityFrameworkCore/issues/9503 don't work. If I need to provide more information of why the migration process doesn't work, then please tell me that. All I try to do is contribute to the process of migrating to 2.0, so that future users already have an answer.. @HaoK sorry, my bad. I've overlooked the type. It works now, my migration is complete.. ",
    "duncanawoods": "The overload for configuring the application user primary key type has been removed from IdentityEntityFrameworkBuilderExtensions.cs\nAddEntityFrameworkStores<TContext, TKey>()\n\nThis breaking change is not mentioned in the migration docs. What is the fix please?. ",
    "Luis-DdlFG": "Hello,\nTrying to complete the migration to 2.0.\nI'm getting the following error on Startupcs:\n'IdentityBuilder' does not contain a definition for 'AddDefaultTokenProviders' nor is there any extension method 'AddDefaultTokenProviders' that accepts a first argument of type 'IdentityBuilder' (are missing some using directive or an assembly reference?)\nDid the package that contains 'AddDefaultTokenProviders' changed? is there a new reference one must add? \n. Hello,\nIn the previous version I was able to feed my model the number of Users from the Identity package, specifically IdentityRole:\nmodel = roleManager.Roles.Select(r => new ApplicationRoleListviewModel\n            {\n                RoleName = r.Name,\n                Id = r.Id,\n                Description = r.Description,\n                NumberOfUsers = r.Users.Count\n            }).ToList();\nNow there is an error mentioning that Users is not defined. Was this property deleted or moved?\nName and Id is extracted from:\nnamespace Microsoft.AspNetCore.Identity\n{\npublic class IdentityRole<TKey> where TKey : IEquatable<TKey>\n  {\n      public IdentityRole();\n      public IdentityRole(string roleName);\n      public virtual TKey Id { get; set; }\n      public virtual string Name { get; set; }\n      public virtual string NormalizedName { get; set; }\n      public virtual string ConcurrencyStamp { get; set; }\n      public override string ToString();\n  }\n}\nDescription property is a property defined by me on this project.\nThanks. Thanks, HaoK, is good to have a reply for all these changes.\nI'm very new to this world and I'm very much self taught. Is there any guide you can share with me about how to add them back?\nUpdate:\nAlso, I believe I extracted this info from the TRole class.. ",
    "KeithT": "We are still stuck/blocked re how to migrate this:\nservices.AddIdentity<UserEntity, UserRoleEntity>()\n                .AddEntityFrameworkStores<HotelApiContext, Guid>()\n                .AddDefaultTokenProviders();\nAs we get error re ....cannot be inferred by usage, if we remove the params.\nThanks in advance for any further suggestions.. Many thanks, we were able to solve it using that test as a reference.. @chadwackerman2 yep no probs.\nIn Startup:\nservices.AddIdentity<UserEntity, UserRoleEntity>()\n                .AddEntityFrameworkStores<BodiMeAPIContext>()\n                .AddDefaultTokenProviders();\nand everything else:\n```\n    public class BodiMeAPIContext : IdentityDbContext\n    {\n        public BodiMeAPIContext(DbContextOptions options)\n            : base(options) { }\n    public virtual DbSet<BodyEntity> Body { get; set; }\n    public virtual DbSet<BodyMeasurementEntity> Measurements { get; set; }\n}\n\npublic class UserEntity : IdentityUser<Guid>\n{\n    public string FirstName { get; set; }\n\n    public string LastName { get; set; }\n\n    public DateTimeOffset CreatedAt { get; set; }\n}\n\npublic class UserRoleEntity : IdentityRole<Guid>\n{\n    public UserRoleEntity()\n        : base()\n    { }\n\n    public UserRoleEntity(string roleName)\n        : base(roleName)\n    { }\n}\n\n```\nGood luck with it. ",
    "wgutierrezr": "Hi\nAfter the upgrade to Core 2.0 I'm having this issue, please help.\nInvalidOperationException: The entity type 'IdentityUserLogin' requires a primary key to be defined.\nRegards. Hi\nAfter three attempts to \"migrate\" to Core 2 with many errors, I decided to create a new Core 2 project and copy paste my code. I had to do a lot of changes but not errors right now.. @andrenpt I had the same issue and I didn't find anything to help me on Internet. So the thing I did was create a new Core 2.0 empty project and copy paste my code from my old project. It was quicker than search for a solution on Internet. Good luck.\n. ",
    "seven1986": "May I know the reason why navigation properties were removed from the base pocos??\nBeacuse I just know how to use it, then upgrade to .net core 2.0 there are lot of things need to fix...  thanks. @brockallen / @leastprivilege I think you get the point. I have tried lots of time, but still can not find the way.\nCould you give me a example, thanks a lot!\n```csharp\n    public class AppUsersController : Controller\n    {\n        private readonly ApplicationDbContext _context;\n        public AppUsersController(ApplicationDbContext context)\n        {\n            _context = context;\n        }\n    // GET: AppUsers\n    public async Task<IActionResult> Index()\n    {\n        var users = await _context.Users\n            .Include(x => x.Logins)\n            .Include(x => x.Claims)\n            .Include(x => x.Roles)\n           // the point is here!!  how to make this? \n            .Include(x => x.Clients)  \n            .AsNoTracking()\n            .ToListAsync();\n\n        return View(users);\n    }\n\n}\n```\n```csharp\n public class ApplicationDbContext : IdentityDbContext\n    {\n        public ApplicationDbContext(DbContextOptions options)\n            : base(options)\n        {\n        }\n        protected override void OnModelCreating(ModelBuilder builder)\n        {\n            base.OnModelCreating(builder);\n        }\n    public DbSet<AppUser> AppUser { get; set; }\n}\n\npublic class AppUser : IdentityUser\n    {\n        public long ParentUserID { get; set; }\n    }\n```\n. @jansivans can  share me a link?\n And I think it is better to extend Identity's entities, clients belong users,.user can create client.. I just review th whole logic, got it, no problem, thanks. ",
    "CybrZr00": "Hi,\nI tried as described... well everywhere! Seems I'm missing something, I have roles and users to add (ApplicationUser: IdentityUser & ApplicationRole: IdentityRole) in addition to the navigation properties in Application User I also added navigation in ApplicationRole but I get \n\nApplicationUser does not contain a definition for RoleId. \n\nI can remove that section and it will build but I cant do things such as get all roles and include users, which is needed for my role management system. the folder structure looks ok to me, FK's look a bit off (duplicate keys) as mentioned by others, yet still functional. I can see that the many to many (Roles => Users) isn't working despite working the other way, I just cant seem to fix it! Any help would be appreciated \ud83d\udc4d \nApplicationRole:\n ```\n public class ApplicationRole : IdentityRole\n  {\n    public virtual ICollection Claims { get; set; } = new List();\n    public virtual ICollection Users { get; set; } = new List();\npublic ApplicationRole()\n{\n\n}\n\npublic ApplicationRole(string roleName)\n{\n\n}\npublic ApplicationRole(string roleName, string description)\n{\n  Description = description;\n}\n\npublic string Description { get; set; }\n\n}\nHere is my ApplicationUser:\n  public class ApplicationUser : IdentityUser\n  {\n    public virtual string FriendlyName\n    {\n      get\n      {\n        string friendlyName = string.IsNullOrWhiteSpace(FullName) ? UserName : FullName;\n    if (!string.IsNullOrWhiteSpace(JobTitle))\n      friendlyName = JobTitle + \" \" + friendlyName;\n\n    return friendlyName;\n  }\n}\n\n\npublic string JobTitle { get; set; }\npublic string FullName { get; set; }\npublic string Configuration { get; set; }\npublic bool IsEnabled { get; set; }\npublic bool IsLockedOut => this.LockoutEnabled && this.LockoutEnd >= DateTimeOffset.UtcNow;\n\npublic virtual ICollection<IdentityUserRole<string>> Roles { get; } = new List<IdentityUserRole<string>>();\n\npublic virtual ICollection<IdentityUserClaim<string>> Claims { get; } = new List<IdentityUserClaim<string>>();\n\npublic virtual ICollection<IdentityUserLogin<string>> Logins { get; } = new List<IdentityUserLogin<string>>();\n\n}\nAnd in my DbContext:\n  public class SpaDbContext : IdentityDbContext\n  {\n        public SpaDbContext(DbContextOptions options)\n            : base(options)\n        {\n            //Database.EnsureCreated();\n        }\n    //List of DB Models - Add your DB models here\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Product> Product { get; set; }\n    public virtual DbSet<OpenIddictApplication> OpenIddictApplication { get; set; }\n    public virtual DbSet<OpenIddictAuthorization> OpenIddictAuthorization { get; set; }\n    public virtual DbSet<OpenIddictScope> OpenIddictScope { get; set; }\n    public virtual DbSet<OpenIddictToken> OpenIddictToken { get; set; }\n\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n  base.OnModelCreating(modelBuilder);\n  modelBuilder.UseOpenIddict();\n  modelBuilder.Entity<Product>()\n      .Property(b => b.EntryTime)\n      .HasDefaultValueSql(\"getdate()\");\n  modelBuilder.Entity<Customer>().Property(c => c.Name).IsRequired().HasMaxLength(100);\n  modelBuilder.Entity<Customer>().HasIndex(c => c.Name);\n  modelBuilder.Entity<Customer>().Property(c => c.Email).HasMaxLength(100);\n  modelBuilder.Entity<Customer>().Property(c => c.PhoneNumber).IsUnicode(false).HasMaxLength(30);\n  modelBuilder.Entity<Customer>().Property(c => c.City).HasMaxLength(50);\n  modelBuilder.Entity<Customer>().ToTable($\"App{nameof(this.Customers)}\");\n\n\n  modelBuilder.Entity<ApplicationRoleClaim>()\n      .HasOne(pt => pt.ApplicationRole)\n      .WithMany(t => t.Claims)\n      .HasForeignKey(pt => pt.RoleId);\n  modelBuilder.Entity<ApplicationUser>()\n      .HasMany(e => e.Claims)\n      .WithOne()\n      .HasForeignKey(e => e.UserId)\n      .IsRequired()\n      .OnDelete(DeleteBehavior.Cascade);\n\n  modelBuilder.Entity<ApplicationUser>()\n      .HasMany(e => e.Logins)\n      .WithOne()\n      .HasForeignKey(e => e.UserId)\n      .IsRequired()\n      .OnDelete(DeleteBehavior.Cascade);\n\n  modelBuilder.Entity<ApplicationUser>()\n      .HasMany(e => e.Roles)\n      .WithOne()\n      .HasForeignKey(e => e.UserId)\n      .IsRequired()\n      .OnDelete(DeleteBehavior.Cascade);\n  //mine\n\n  modelBuilder.Entity<ApplicationRole>()\n       .HasMany(e => e.Claims)\n       .WithOne()\n       .HasForeignKey(e => e.RoleId)\n       .IsRequired()\n       .OnDelete(DeleteBehavior.Cascade);\n\n\n  modelBuilder.Entity<ApplicationRole>()\n      .HasMany(e => e.Users)\n      .WithOne()\n      .HasForeignKey(x => x.RoleId)\n      .OnDelete(DeleteBehavior.Cascade);\n\n}\n\n}\n```. fixed it!\nChanged my nav properties to match:\napplicationuser:\n```\npublic virtual ICollection<IdentityUserRole<string>> Roles { get; set; }\n\n\npublic virtual ICollection<IdentityUserClaim<string>> Claims { get; set; }\n\n```\nApplicationRole:\n```\n    public virtual ICollection> Users { get; set; }\npublic virtual ICollection<IdentityRoleClaim<string>> Claims { get; set; }\n\n```\nupdated my DbContext:\n```\n      modelBuilder.Entity().HasMany(u => u.Claims).WithOne().HasForeignKey(c => c.UserId).IsRequired().OnDelete(DeleteBehavior.Cascade);\n      modelBuilder.Entity().HasMany(u => u.Roles).WithOne().HasForeignKey(r => r.UserId).IsRequired().OnDelete(DeleteBehavior.Cascade);\n  modelBuilder.Entity<ApplicationRole>().HasMany(r => r.Claims).WithOne().HasForeignKey(c => c.RoleId).IsRequired().OnDelete(DeleteBehavior.Cascade);\n  modelBuilder.Entity<ApplicationRole>().HasMany(r => r.Users).WithOne().HasForeignKey(r => r.RoleId).IsRequired().OnDelete(DeleteBehavior.Cascade);\n\n```\nEnsured the initial migration looked ok. and it all worked.. ",
    "andrenpt": "I followed the guide to update Identity in .NET Core 2.0 (https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x) but I get this error:\nInvalidOperationException: The entity type 'IdentityUserLogin<int>' requires a primary key to be defined.\nMicrosoft.EntityFrameworkCore.Infrastructure.ModelValidator.ValidateNonNullPrimaryKeys(IModel model)\nMicrosoft.EntityFrameworkCore.Infrastructure.ModelValidator.Validate(IModel model)\nMicrosoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(IModel model)\nMicrosoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\nMicrosoft.EntityFrameworkCore.Infrastructure.ModelSource+<>c__DisplayClass5_0.<GetModel>b__0(object k)\nSystem.Collections.Concurrent.ConcurrentDictionary.GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)\nMicrosoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder, IModelValidator validator)\nMicrosoft.EntityFrameworkCore.Internal.DbContextServices.CreateModel()\nMicrosoft.EntityFrameworkCore.Internal.DbContextServices.get_Model()\nMicrosoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder+<>c.<TryAddCoreServices>b__7_1(IServiceProvider p)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitFactory(FactoryCallSite factoryCallSite, ServiceProvider provider)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor.VisitCallSite(IServiceCallSite callSite, TArgument argument)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor.VisitCallSite(IServiceCallSite callSite, TArgument argument)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor.VisitCallSite(IServiceCallSite callSite, TArgument argument)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider)\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor.VisitCallSite(IServiceCallSite callSite, TArgument argument)\nMicrosoft.Extensions.DependencyInjection.ServiceProvider+<>c__DisplayClass22_0.<RealizeService>b__0(ServiceProvider provider)\nMicrosoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\nMicrosoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\nMicrosoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<T>(IServiceProvider provider)\nMicrosoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\nMicrosoft.EntityFrameworkCore.DbContext.get_InternalServiceProvider()\nMicrosoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()\nMicrosoft.EntityFrameworkCore.DbContext.get_Model()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityType()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityQueryable()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.Microsoft.EntityFrameworkCore.Query.Internal.IAsyncEnumerableAccessor<TEntity>.get_AsyncEnumerable()\nMicrosoft.EntityFrameworkCore.Extensions.Internal.QueryableExtensions.AsAsyncEnumerable<TSource>(IQueryable<TSource> source)\nMicrosoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToListAsync<TSource>(IQueryable<TSource> source, CancellationToken cancellationToken)\nIf I add this to the OnModelCreating \n builder.Entity<IdentityUserLogin<int>>().HasKey(p => new { p.UserId });\nIt complains about IdentityUserRole. I then add this to the same place:\nbuilder.Entity<IdentityUserRole<int>>().HasKey(p => new { p.UserId, p.RoleId });\nIt complains about the IdentityUserClaims\nThe relationship from 'IdentityUserClaim<int>' to 'ApplicationUser.Claims' with foreign key properties {'UserId' : int} cannot target the primary key {'Id' : string} because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship.\nI do not understand.... ",
    "scottsauber": "When I try to follow this and just want the Roles Nav Prop added to the user, I get a migration trying to get me to add another UserID foreign key to the User Roles table.  Can anyone tell me what I'm doing wrong?\nUser class:\ncsharp\n    public class ApplicationUser : IdentityUser\n    {\n        // other props omitted\n        public virtual ICollection<ApplicationUserRole> Roles { get; } = new List<ApplicationUserRole>();\n    }\nUser Config class:\n```csharp\n    public class ApplicationUserConfig : IEntityTypeConfiguration\n    {\n        public void Configure(EntityTypeBuilder builder)\n        {\n            builder.ToTable(\"Users\");\n        builder.HasMany(e => e.Roles)\n            .WithOne()\n            .HasForeignKey(e => e.UserId)\n            .IsRequired()\n            .OnDelete(DeleteBehavior.Cascade);\n    }\n}\n\n```\nUserRole class\ncsharp\n    public class ApplicationUserRole : IdentityUserRole<string>\n    {\n    }\nThanks. Turns out my issue had to do with overriding all the strings from nvarchar to varchar (because DBA's).\nNot quite sure why Identity doesn't like this and was forcing me to create another User ID property on the User Roles table.\ncsharp\n            foreach (var pb in builder.Model\n                .GetEntityTypes()\n                .SelectMany(t => t.GetProperties())\n                .Where(p => p.ClrType == typeof(string))\n                .Select(p => builder.Entity(p.DeclaringEntityType.ClrType).Property(p.Name)))\n            {\n                pb.IsUnicode(false);\n            }. Ok - so for my purposes I should be good then.  \nThanks for the ridiculously fast response @blowdart!. Awesome!  I'm headed to bed now, but I will send one tomorrow.. Glad to help, thanks for accepting!. Sorry this appears to be a duplicate of #1265.  I'll close this one.. Thanks for the quick response @HaoK.  Here it is.\n```csharp\n            services.AddIdentity(options =>\n            {\n                options.Password.RequireDigit = true;\n                options.Password.RequiredLength = 8;\n                options.Password.RequireNonAlphanumeric = true;\n                options.Password.RequireUppercase = true;\n                options.Password.RequireLowercase = true;\n            options.SignIn.RequireConfirmedEmail = true;\n\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(15);\n            options.Lockout.MaxFailedAccessAttempts = 5;\n            options.Lockout.AllowedForNewUsers = true;\n\n            options.User.RequireUniqueEmail = true;\n        })\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n.csharp\n    public class ApplicationDbContext : IdentityDbContext\n    {\n        // Other non-Identity DbSets ommitted\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)\n    {\n\n    }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        base.OnConfiguring(optionsBuilder);\n\n        optionsBuilder.ConfigureWarnings(warnings => warnings.Throw(RelationalEventId.QueryClientEvaluationWarning));\n    }\n\n    protected override void OnModelCreating(ModelBuilder builder)\n    {\n        base.OnModelCreating(builder);\n\n        builder.ApplyConfiguration(new RoleConfig());\n        builder.ApplyConfiguration(new UserConfig());\n        builder.ApplyConfiguration(new UserRoleConfig());\n        builder.ApplyConfiguration(new RoleClaimConfig());\n        builder.ApplyConfiguration(new UserClaimConfig());\n        builder.ApplyConfiguration(new UserLoginConfig());\n        builder.ApplyConfiguration(new UserTokenConfig());\n        // Other config of other entities here\n    }\n}\n\n```. :( I was hoping it was something dumb I did. (Edit: I should add... still could be something dumb I did.  :))\nI'm on Central Time so I'm about to head home.  Will try it late tonight or tomorrow morning and will report back.  Thanks for being so responsive!\nIf the OnConfiguring doesn't work, I can make you a minimal repro if it would help.. removing base.OnConfiguring(optionsBuilder); did not help.  Will work on a repro.\nIf I don't inherit from IdentityDbContext and add the config it's adding myself, am I in for a world of hurt in some spot?  Or should I be ok?. Perfect.  I had a once over the code, but just making sure I wasn't missing anything that was looking specifically for something inheriting from IdentityDbContext.  Glad to hear there's not much there.\nRepro here: https://github.com/scottsauber/AspNetCoreIdentityUserRoleRepro\nRepro steps:\n1. Run the app\n2. Register a user\n3. Go to the root Index page (should redirect on Register) where it will add 2 user roles with diff company Id's, and then it will fail with \n\"The instance of entity type 'ApplicationUserRole' cannot be tracked because another instance with the same key value for {'UserId', 'RoleId'} is already being tracked. When attaching existing entities, ensure that only one entity instance with a given key value is attached. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting key values.\"  \nIt dies here: https://github.com/scottsauber/AspNetCoreIdentityUserRoleRepro/blob/aa4264fc15fb73e9ad2b71f8fec70d53a91366dd/WebApplication13/Pages/Index.cshtml.cs#L40. @HaoK - circling back to this... so when I just stop inheriting from IdentityDbContext and add the EF configuration myself... when PasswordSignInAsync is called I get this:\nCannot create a DbSet for 'IdentityUserRole<string>' because this type is not included in the model for the context.\nIt appears that my custom UserRole class is not being respected.... any ideas?\nEdit: Stack Trace....\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityType()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.get_EntityQueryable()\nMicrosoft.EntityFrameworkCore.Internal.InternalDbSet.System.Linq.IQueryable.get_Provider()\nSystem.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)\nMicrosoft.AspNetCore.Identity.EntityFrameworkCore.UserStore+<GetRolesAsync>d__36.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserManager+<GetRolesAsync>d__110.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory+<GenerateClaimsAsync>d__5.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.UserClaimsPrincipalFactory+<CreateAsync>d__9.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<CreateUserPrincipalAsync>d__25.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<SignInAsync>d__30.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Identity.SignInManager+<SignInOrTwoFactorAsync>d__52.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<PasswordSignInAsync>d__33.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<PasswordSignInAsync>d__34.MoveNext(). @HaoK - never mind, I got around this by still inheriting from IdentityDbContext but just not calling base.OnModelCreating. ",
    "scottaddie": "@ajcvickers See the 2 comments from @scottsauber \u261d\ufe0f. Is this expected behavior?. @HaoK Are you referring to the following doc? https://docs.microsoft.com/aspnet/core/security/authentication/identity-primary-key-configuration. ",
    "irriss": "@mattgross76 \n\nIt looks like the problem occurs when attempting to serialize the System.Security.Claims.ClaimsPrincipal class. I don't see any release notes regarding changes to this class, so it is difficult to figure out what is happening.\nAnyone else seeing something similar? This is the only issue I have with Core 2.0.\n\nI faced the same issue. Have you found a solution?. ",
    "H4Himanshu": "Hello I am following a tutorial on udemy and instructor was explaining the identity. He added the same in the tutorial and i am getting some error when i am trying to add this. Can someone help me out ? I am attaching all the relevant information i can about my project and error.\nScreenshot of error which i am getting in browser.\n\nScreenshot of my startup.cs file\n\nScreenshot of my Application User File:\n\ncan anyone help me out if i am missing any file or missing lines of code  ?. ",
    "SimonOrdo": "@HaoK \nI just migrated from 1.x to 2.x and I'm trying to follow your directions, regarding configuration for the Role Poco properties in the DBContext configuration, but I don't see where IdentityUserRole ever has a .Users property.  Here is my setup, perhaps you can tell me what's wrong:\nApplicationUser:\n```\n public partial class ApplicationUser : IdentityUser\n    {\n        public ApplicationUser()\n        {}\n        public virtual ICollection> Roles { get; } = new \n List>();\n}\n**ApplicationDbContext:**\n  public class ApplicationDbContext : IdentityDbContext\n    {\n        public ApplicationDbContext(DbContextOptions options) : base(options)\n        {\n        }\n    modelBuilder.Entity<ApplicationUser>()\n            .HasMany(e => e.Roles)\n            .WithOne()\n            .HasForeignKey(e => e.UserId)\n            .IsRequired()\n            .OnDelete(DeleteBehavior.Cascade);\n\n        modelBuilder.Entity<IdentityUserRole<string>>()\n            .HasMany(e => e.Users)  // <-- No such property\n            .WithOne()\n            .HasForeignKey(e => e.RoleId)\n            .IsRequired()\n            .OnDelete(DeleteBehavior.Cascade);\n\n}\n```\n\nHere is the database view:\n\n\nThanks in advance for any info you can provide!\n. ",
    "eswise": "I'm migrating an MVC6 application to .NET Core.  All I want to do is:\ncontext.Users.Include(u=>u.UserRoles).ThenInclude(ur => ur.Roles)\nThat's it, nothing fancy.  I tried adding the nav properties per inheriting from IdentityUser, IdentityUserRole, and IdentityRole and it complains about not having a primary key for IdentityUserRole.  Add a primary key to the builder and it complains that it's already being used (probably in base.onmodelcreating()).\nAfter 3 hours I've decided my time is more valuable and I'll just write a SQL query.  This should not be a hard thing to solve folks.. ",
    "GRTSolutionsLTD": "I am facing with the same problem. ",
    "Aleksaas": "The relationship from 'IdentityUserClaim<int>' to 'ApplicationUser.Claims' with foreign key properties {'UserId' : int} cannot target the primary key {'Id' : string} because it is not compatible. Configure a principal key or a set of compatible foreign key properties for this relationship. Any solution for this? In my case it is not IdentityUserClaim but IdentityUserRole.. ",
    "thaleshs": "@HaoK  @mattgross76 \nI have the same problem: https://github.com/aspnet/Identity/issues/1364#issuecomment-323767718\n. ",
    "baumatron": "Closing this. I've created an issue here which seems more appropriate: https://github.com/dotnet/templating/issues/1211. ",
    "brentschmaltz": "@blowdart We don't 'own' it, but we have done some work in WindowsIdentity.  From time to time we help out with issues.  It looks like a fix is needed.. @blowdart you can tag me. Ill investigate.. ",
    "plaisted": "Think this is EntityFramework question not identity. See https://github.com/aspnet/Announcements/issues/258 for more information about the changes.\nIf you look at the error it tells you to use IDesignTimeDbContextFactory. From the link above they simply renamed IDbContextFactory to IDesignTimeDbContextFactory and removed the DbContextFactoryOptions parameter (that you weren't using anyway).  I didn't have any issues switching to IDesignTimeDbContextFactory in my projects.. ",
    "isaacOjeda": "I am also having this issue and the AddIdentityCore() didn't work for me.\nAny other way to make this work?. When I'm using services.AddIdentityCore<ApplicationUser>(setupAction: null) I get the following exception:\nThe number of generic arguments provided doesn't equal the arity of the generic type definition.\nParameter name: instantiation\nI think this is because IdentityBuilder needs the TRole type but the extension AddIdentityCore doesn't allow to specify it\nWhat am I missing?\nPS. I know this issue is closed, should I open a new one?\nThank you\n. ",
    "sriram5052": "Use the following configuration for Asp.net core 2.0\nset the DefaultAuthenticateScheme  and DefaultChallengeScheme  in AddAuthentication method.\n```\nIConfigurationSection jwtAppSettingOptions = Configuration.GetSection(nameof(JwtIssuerOptions));\n            TokenValidationParameters tokenValidationParameters = new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidIssuer = \"issuer\",\n            ValidateAudience = true,\n            ValidAudience = \"audience\",\n\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = _signingKey,\n\n            RequireExpirationTime = false,\n            ValidateLifetime = false,\n            ClockSkew = TimeSpan.Zero\n        };\n\nservices.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            }) .AddJwtBearer(options => {\n             options.TokenValidationParameters = tokenValidationParameters\n        });\n```. ",
    "dchristensen": "Thanks @HaoK  & @sriram5052 , I think AddIdentityCore does solve my issue, my only lingering concern is discover-ability of this API.  I haven't see it documented anywhere and its implemented in a completely different assembly from the rest of the identity related configuration stuff so it is difficult to find.. @isaacOjeda I ran into the same problem and resolved it by just instantiating a new IdentityBuilder that specifies the roles type:\nC#\nIdentityBuilder builder = services.AddIdentityCore<User>(/* options */);\nbuilder = new IdentityBuilder(builder.UserType, typeof(IdentityRole), builder.Services);\nreturn builder.AddEntityFrameworkStores<ApplicationDbContext>()\n    .AddDefaultTokenProviders();\n. ",
    "hey-red": "In addition, if we want to use RoleManager\nservices.AddScoped<IRoleValidator<IdentityRole>, RoleValidator<IdentityRole>>();\nservices.AddScoped<RoleManager<IdentityRole>, RoleManager<IdentityRole>>();\n// or\nbuilder.AddRoleValidator<RoleValidator<Role>>();\nbuilder.AddRoleManager<RoleManager<Role>>();\n@HaoK I think that it would be nice to have extension method like AddIdentityCore<TUser, TRole> (in 2.1.0 maybe?).. See https://github.com/aspnet/Identity/issues/1376\nWith JWT you will have to manage the authentication yourself. \n. @jcmordan \nYou can achieve it like this:\n```C#\nvar user = await _userManager.FindByNameAsync(userName);\nif (user == null)\n{\n      return BadRequest(\"Invalid credentials\");\n }\nvar result = await _signInManager.CheckPasswordSignInAsync(user, password, true);\nif (!result.Succeeded)\n{\n      return BadRequest(\"Invalid credentials\");\n}\n// Create token with user claims..\n```\n. ",
    "jcmordan": "Hi, I know this is closed but I'm getting this error: \nInvalidOperationException: No IAuthenticationSignInHandler is configured to handle sign in for the scheme: Identity.Application\nMicrosoft.AspNetCore.Authentication.AuthenticationService+<SignInAsync>d__13.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Identity.SignInManager+<SignInAsync>d__30.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nMicrosoft.AspNetCore.Identity.SignInManager+<SignInOrTwoFactorAsync>d__52.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<PasswordSignInAsync>d__33.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nMicrosoft.AspNetCore.Identity.SignInManager+<PasswordSignInAsync>d__34.MoveNext()\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\nthis is my configuration:\n```\nConfiguration.GetSection(nameof(CustomIdentityOptions)).Bind(identityOptions);\n            IdentityBuilder builder = services.AddIdentityCore(options =>\n            {\n// ...\n            });\n        builder = new IdentityBuilder(builder.UserType, typeof(Role), builder.Services)\n            .AddDefaultTokenProviders();\n\n        builder.AddSignInManager<SignInManager<User>>();\n        builder.AddRoleValidator<RoleValidator<Role>>();\n        builder.AddRoleManager<RoleManager<Role>>();\n        builder.AddEntityFrameworkStores<MyDbContext>();\n\n```. @hey-red @HaoK  What do you mean by:\n\nWith JWT you will have to manage the authentication yourself. \n\nI can't use _signInManager.PasswordSignInAsync anymore? what is the alternative?. ",
    "Moobylicious": "I had exactly this problem - trying to use Identity to just manage users, passwords etc.  and JWT for Auth.  I'm writing a pure Web API with no front end code so I didn't want the cookie auth stuff.\nWhat I've found works from a functional perspective is to revert to using \nservices.AddIdentity<IdentityUser, IdentityRole>()\n                .AddEntityFrameworkStores<MyContext>();\nBut you must ensure this is added before the jwt auth stuff:\n```\n  services.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            })\n                .AddJwtBearer(options =>\n                    {\n                        options.TokenValidationParameters =\n                            new TokenValidationParameters\n                            {\n                                ValidateIssuer = true,\n                                ValidateAudience = true,\n                                ValidateLifetime = true,\n                                ValidateIssuerSigningKey = true,\n                            ValidIssuer = \"...\",\n                            ValidAudience = \"...\",\n                            IssuerSigningKey = \"....\"\n                        };\n                });\n\n```\nif the identity stuff is added afterwards, it still breaks the authorization, but this way around appears to work.  It still creates a cookie, but from what I can tell (from admittedly fairly limited testing) it is not using this for authentication, only the bearer token.  YMMV but I've wasted a huge amount of time already on this so I'll settle for that for the moment.\nGiven the trumping about how amazingly modular and granular .Net Core is, I'm rather surprised that trying to get just the user storage, hashing, password complexity etc. stuff without also adding token authorisation is so hard.  AddIdentityCore<> looks perfect for doing this, but just doesn't seem to do enough for my needs at least.. AHA!  Actually, by following the linked issue above:\nhttps://github.com/aspnet/Identity/issues/1423\nI've been able to get it to work fine, and STOP SENDING THE DARN COOKIE...\nBasically, do this:\n```\n            IdentityBuilder builder = services.AddIdentityCore(opt =>\n            {\n                opt.Password.RequireDigit = true;\n                opt.Password.RequiredLength = 8;\n                opt.Password.RequireNonAlphanumeric = false;\n                opt.Password.RequireUppercase = true;\n                opt.Password.RequireLowercase = true;\n            }\n            );\n            builder = new IdentityBuilder(builder.UserType, typeof(IdentityRole), builder.Services);\n            builder\n                .AddEntityFrameworkStores();\n        builder.AddRoleValidator<RoleValidator<IdentityRole>>();\n        builder.AddRoleManager<RoleManager<IdentityRole>>();\n        builder.AddSignInManager<SignInManager<IdentityUser>>();\n\n```\nAnd then when authenticating a username/password, you use CheckPasswordSignInAsync rather than PasswordSignInAsync:\n```\n //find user first...\n            var user = await _userManager.FindByNameAsync(userName);\n        if (user == null)\n        {\n            return null;\n        }\n\n        //validate password...\n        var signInResult = await _signInManager.CheckPasswordSignInAsync(user, password, false);\n\n        if (signInResult.Succeeded)\n        {\n            ...do stuff\n        }\n\n```\nAnd then everything seems to work....  no stupid cookie. :). @allownulls - yes.  I had all the same issues.  I did in fact ask this on SO (and ended up answering it myself)\nhttps://stackoverflow.com/questions/46323844/net-core-2-0-web-api-using-jwt-adding-identity-breaks-the-jwt-authentication\n. ",
    "allownulls": "I've tried to move from services.AddIdentity<User, Role> to services.AddIdentityCore<User>, because the first one didn't allow me to use JWT.\n1. The first weird thing to struggle with was passing the Role POCO to the Core method, it looks a bit tricky:\nIdentityBuilder builder = services.AddIdentityCore<IdentityUser>(options => {}); \nbuilder = new IdentityBuilder(builder.UserType, typeof(IdentityRole), builder.Services);\nbuilder.AddRoleManager<RoleManager<IdentityRole>>();\nbuilder.AddSignInManager<SignInManager<IdentityUser>>(); \nbuilder.AddEntityFrameworkStores<DBContext>();\nbuilder.AddDefaultTokenProviders();\n\nThe second problem appeared in runtime, the methods SignInManager.PasswordSignInAsync and SignInManager.SignInAsync were producing errors \n\n\nNo IAuthenticationSignInHandler is configured to handle sign in for the scheme: Identity.Application\n\nSo, I changed them to the SignInManager.CheckPasswordSignInAsync - and it worked like a charm. In my case, it was the right decision because my WebApi needs simply to check the password and send the token back.\n. ",
    "mxa0079": "@HaoK - we appreciate your attention and feedback on this issue. We really need this fix.. @HaoK  We use a combination of cooke and windows authentication, hence the need to call the method.\nFurther details: this is an application that serves enterprise users (with their corporate AD credentials) and vendors that have no AD credentials, and hence need a UN and Password and hence make use of cookies to mantain a session.. @HaoK your comments are appreciated. The PR is very simple, I'd like to understand what is the hesitation to approve it.\nThanks. @HaoK Trust me, we have tried. \nWhy would using a try catch wont work? Because a ClaimsPrincipal can have multiple identities. If we wrap the call to IsSignedIn with try catch then the enumeration through the identities won't complete and hence we wont know if the user is logged in.\nFor the second one: I will try it this evening.. @HaoK  An update:\n\"Or you can just check if User.Identity.IsAuthenticated first, and only call SignInManager.IsSignedIn after that is false, since that would mean its safe to call right?\" \nThis won't work because User, as a ClaimsPrincipal, has multiple Identities linked to it. When IIS sends us the Windows Authentication Identity, this is marked as the main Identity (User.Identity) and hence the call to User.Identity.IsAuthenticated will always return true (since IIS has authenticated that user) but that does not mean that he/she should access the application since we have yet to make sure that identity is registered in the EF Identity database.. ",
    "hahn-kev": "I had a null ID using the Identity provider from LinqToDB, I've reported the issue Here.\nIf a Claim value can be null then why does this constructor throw an exception if you pass null in? I'm not sure if the source is on Github for Claims, but after decompiling the source on my machine I'm seeing the same thing. Maybe that constructor needs to change?. ",
    "nphmuller": "The workaround.\nInstead of this:\nc#\nservices.AddIdentityCore<MyUser>(options => { ... })\n    .AddRoles<MyRole>()\n    .AddRoleStore<MyRoleStore>()\ndo this:\nc#\nservices.AddIdentityCore<MyUser>(options => { ... });\nnew IdentityBuilder(typeof(MyUser), typeof(MyRole), services)\n    .AddRoleStore<MyRoleStore>()\n    .AddRoleValidator<MyRoleValidator>()\n    .AddRoleManager<MyRoleManager>();. Ah, that explains it. Never thought it could be a bug since it seemed too big to be in the final release. But I guess these things happen. :)\nIt's at least a better explanation than the magic that I had in mind.. ",
    "rooonikz": "@HaoK I think it still has some stuff to be done. As i mentioned before, this renamings should be applied to all Identity services. As i see, AddPasswordValidator, AddRoleValidator and AddUserValidator generic parameters declarations are invalid. Thx!. @rpundlik For ASP.NET Core Identity 2.0 I did this: \nservices\n                .ConfigureApplicationCookie(options =>\n                {\n                    options.Events.OnRedirectToLogin = (context) =>\n                    {\n                        context.Response.StatusCode = StatusCodes.Status401Unauthorized;\n                        return Task.CompletedTask;\n                    };\n                });\nAs default cookie auth events has if statement on whether you create request from browser on not\npublic Func<RedirectContext<CookieAuthenticationOptions>, Task> OnRedirectToLogin { get; set; } = (Func<RedirectContext<CookieAuthenticationOptions>, Task>) (context =>\n    {\n      if (CookieAuthenticationEvents.IsAjaxRequest(context.Request))\n      {\n        context.Response.Headers[\"Location\"] = (StringValues) context.RedirectUri;\n        context.Response.StatusCode = 401;\n      }\n      else\n        context.Response.Redirect(context.RedirectUri);\n      return Task.CompletedTask;\n    });. ",
    "dcarl1": "Yes, I will grab a callstack as soon as I can. \nI am using this for the store:\nhttps://github.com/mrahhal/MR.AspNet.Identity.EntityFramework6\nOn second thought... the issue could be in that lib.. Yep, looks like its in that package. Thanks. . ",
    "1amirjalai": "any workaround or news on this issue?\nwe just moved to 2.0 and encountered this issue.\nis there any plan for releasing the patch?\na workaround would be nice.. ",
    "leodip": "Here is what I did for a workaround.\nIn Startup.cs, where it has:\nservices.AddIdentity<ApplicationUser, IdentityRole>(o => { ... });\nI added:\no.Tokens.ProviderMap.Add(\"PhoneNumber\", new TokenProviderDescriptor(typeof(PhoneNumberTokenProvider<ApplicationUser>)));\nIn ManageController (method AddPhoneNumber), I generate the token like this:\n```\nvar token = new VerifyPhoneToken()\n            {\n                Token = _random.Next().ToString(),\n                PhoneNumber = model.PhoneNumber,\n                CreatedUTC = DateTime.UtcNow\n            };\nHttpContext.Session.Set(\"AddPhoneNumberToken\", token);\nvar code = await _userManager.GenerateUserTokenAsync(user, \"PhoneNumber\", token.Token + \":\" + model.PhoneNumber);\n```       \nI also modified this method (for security):\n```\n[HttpGet]\n        public async Task VerifyPhoneNumber(string phoneNumber)\n        {\n            var user = await GetCurrentUserAsync();\n            if (user == null)\n            {\n                return View(\"Error\");\n            }\n        if (string.IsNullOrWhiteSpace(phoneNumber))\n        {\n            return View(\"Error\");\n        }\n\n        var token = HttpContext.Session.Get<VerifyPhoneToken>(\"AddPhoneNumberToken\");\n        if (token == null || token.PhoneNumber != phoneNumber)\n        {\n            token = new VerifyPhoneToken()\n            {\n                Token = _random.Next().ToString(),\n                PhoneNumber = phoneNumber,\n                CreatedUTC = DateTime.UtcNow\n            };\n            HttpContext.Session.Set(\"AddPhoneNumberToken\", token);\n            var code = await _userManager.GenerateUserTokenAsync(user, \"PhoneNumber\", token.Token + \":\" + phoneNumber);\n        }\n\n        return View(new VerifyPhoneNumberViewModel { PhoneNumber = phoneNumber });\n    }\n\n```\nWhen it's time to verify, also in ManageController, I do:\n[HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> VerifyPhoneNumber(VerifyPhoneNumberViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n            var user = await GetCurrentUserAsync();\n            if (user != null)\n            {\n                var token = HttpContext.Session.Get<VerifyPhoneToken>(\"AddPhoneNumberToken\");\n                if(token != null && token.CreatedUTC > DateTime.UtcNow.AddMinutes(-10))\n                {                    \n                    var result = await _userManager.VerifyUserTokenAsync(user, \"PhoneNumber\", token.Token + \":\" + model.PhoneNumber, model.Code);\n                    if (result)\n                    {\n                        // Verification successful  (do whatever you need here)\n                        return RedirectToAction(nameof(Index), new { Message = ManageMessageId.AddPhoneSuccess });\n                    }\n                }\n            }\n            // If we got this far, something failed, redisplay the form\n            ModelState.AddModelError(string.Empty, \"Verification failed.\");\n            return View(model);\n        }\nThere's probably room for improvement, but I can say it works fine, and appears to be secure.\n. ",
    "ptrstpp950": "The workaround is quite simple. Just one line of code is needed\nservices.AddIdentity<ApplicationUser, IdentityRole>(o =>\n{\n    //other stuff\n    o.Tokens.ChangePhoneNumberTokenProvider = \"Phone\";\n});. The workaround is quite simple. Just one line of code is needed\nservices.AddIdentity<ApplicationUser, IdentityRole>(o =>\n{\n    //other stuff\n    o.Tokens.ChangePhoneNumberTokenProvider = \"Phone\";\n});. ",
    "alikuli": "I am using NINJECT and MVC 5.   (Microsoft.AspNet.Identity.Core v 2.2.1)  I am beginning to get a strange error from GenerateChangePhoneNumberToken (UserId, PhoneNumber) --- Note, the signature is different to the one you have pointed out earlier in this thread.\nI get the following error:\nActual Method where error happened 'GenerateChangePhoneNumberToken'  --- System.ArgumentNullException: String reference not set to an instance of a String. Parameter name: s at System.Text.Encoding.GetBytes(String s) at Microsoft.AspNet.Identity.UserManager`2.d__ee.MoveNext() \nI cant seem to get rid of this error. \nFunny thing is, the signature \"GenerateEmailConfirmationToken(userId)\" is working fine.. ",
    "shaltukaz": "Thanks for reply. How should I identify a problem with security stamp?\nIn my database it looks like this:\n\nThen I mention 30 minutes, nothing is done during this interval that could change password or any of user data. I just refresh the page.\nEdit: Should I change the default ValidationInterval and how? if this is safe to change it. ok. after setting this I got logged out in 2 minutes 30 seconds.. By saying cookie header you mean this:\n\nIs there a place somewhere to set options.SecurityStampValidationInterval in ASP.NET Core 2.0? \nThis option was previously available in services.AddIdentity<>(options =>...)  in ASP.NET Core 1.1.. Strange things happens... My current CofigureServices method looks like this:\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n        services.AddIdentity<ApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n        services.Configure<SecurityStampValidatorOptions>(options =>\n        {\n            // enables immediate logout, after updating the user's stat.\n            options.ValidationInterval = TimeSpan.Zero;\n        });\n        services.AddMvc();\n\nand i can login. TimeSpan.Zero does not behave as you have written. \n. Thank you @VahidN and @HaoK . Setting ValidationInterval to more than 30 minutes, seems to solve the problem.\noptions.ValidationInterval = TimeSpan.FromHours(12);\nHowever, options.ValidationInterval = TimeSpan.Zero; does not work as you have noted; user does not get logged out instantly.\nNow if you would not mind, please explain me shortly how does this ValidationInterval work. Is it global for the whole webapplication? I mean that:\n- when i start web app it does a check every 12 hours for all users \n- or is it user specific and starts counting since user login? \nAnd since options.ValidationInterval is no longer under services.AddIdentity, I would expect to find this change mentioned in https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x. It seems there was a big gap in my understanding about how does this all work. I also found that I have lied a little. So to finish up for other as stupid as me.\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n    .AddEntityFrameworkStores<ApplicationDbContext>()\n    .AddDefaultTokenProviders();\nservices.Configure<SecurityStampValidatorOptions>(options => options.ValidationInterval = TimeSpan.FromSeconds(10));\nservices.AddAuthentication()\n    .Services.ConfigureApplicationCookie(options =>\n    {\n        options.SlidingExpiration = true;\n        options.ExpireTimeSpan = TimeSpan.FromMinutes(30);\n    });\n\nAccording my understanding this works like this:\n- the check if user is logged happens ~every 10 seconds, depending on requests ratio. Server checks security stamps upon every request to the server options.ValidationInterval = TimeSpan.FromSeconds(10)). \n- cookie is valid at minimum for 30 minutesoptions.ExpireTimeSpan = TimeSpan.FromMinutes(30);, but can be extended with options.SlidingExpiration = true; if page is refreshed or navigated.\n- important! do not be too \"smart\" like me and do no run _userManager.UpdateSecurityStampAsync(user); just after successful login. Because this updates security stamp and next options.ValidationInterval validation will fail.. ",
    "gtarsia": "I had this problem as well when updating to 2.0, but the cause was that I using signInManager.SignInAsync with a non existent user (I'm handling the logins manually using an API, not a good idea).\nI'm not using existent users and it works fine when setting the cookie opt ExpireTimeSpan to higher than 30 minutes.. ",
    "54414D49TAMI": "@gtarsia \nI had this problem when I am using Cookie authentication without identity setup. Does anyone know what is the maximum value for the ValidationInterval. I set it like 7 days, but it expires already in 30 minutes or redirected me to log in page.\n` services.AddAntiforgery(options =>\n            {\n                options.Cookie.Expiration = TimeSpan.FromDays(1);\n            options.Cookie.Name = \"M\";\n            options.HeaderName = \"VerificationTkn\";\n        });\n\n        services.AddAuthentication(options =>\n            {\n                options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                //options.DefaultChallengeScheme =  CookieAuthenticationDefaults.AuthenticationScheme;\n            })\n\n        .AddCookie(\n            CookieAuthenticationDefaults.AuthenticationScheme,\n            options =>\n            {\n                options.Cookie.Expiration = TimeSpan.FromDays(1);\n                options.ExpireTimeSpan = TimeSpan.FromDays(1);\n                options.LoginPath = \"/Account/Index\";\n                options.LogoutPath = \"/Account/SignOut\";\n                options.ReturnUrlParameter = \"ReturnUrl\";\n                //options.Events.OnRedirectToLogin = context =>\n                //{\n\n                //    context.Response.Headers[\"Location\"] = context.RedirectUri;\n                //    context.Response.StatusCode = 401;\n                //    return Task.CompletedTask;\n                //};\n\n            });\n\n        services.Configure<SecurityStampValidatorOptions>(options =>\n        {\n            // enables immediate logout, after updating the user's stat.\n            options.ValidationInterval = TimeSpan.FromDays(1);\n        });\n\n\n        services.AddMvc();`\n\nIn my AccountController.cs:\nawait HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, \n                    items, new AuthenticationProperties\n                    {\n                        AllowRefresh = true,\n                        IsPersistent = true,\n                        ExpiresUtc = DateTime.UtcNow.AddDays(1)\n                    });\n. ",
    "mehyaa": "Hi,\nI've struggled on this a bit too and I've found that for SecurityStampValidator can validate your security stamp:\n\nYour user store has to implement IUserSecurityStampStore\nYou have to have security stamp claim in your principle.\n\nThen you can set ValidationInterval to any value suitable to validate the security stamp.\nHope it will help someone like me wondering why the session does not keep more than 30 minutes \ud83d\ude03 . ",
    "farshid3003": "would you pleae look at this\nhttps://github.com/aspnet/Security/issues/1383#issuecomment-325432124. why you close this. there is a big bug here. you convert Username to name claim and this is wrong.\n. ",
    "AdrienTorris": "Our primary keys datatype is not the business of Microsoft, it's the reason why the default pk type in Identity is string, who is the less restrictive datatype format. It's a design choice.\nBut you can easily override the data type of the primary keys in identity without customize the classes, the 2min procedure is explained here : https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-primary-key-configuration. Hum you're right the link I sent to you is out to date.\nThis migration documentation should help you : https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/identity-2x\nAnd this thread too : https://github.com/aspnet/Identity/issues/1364\nIs your source code on GitHub ?. You can check the eShopOnContainers template, there is an centalized Identity service : https://github.com/dotnet-architecture/eShopOnContainers. ",
    "bhubanstha": "@AdrienTorris the documentation link you have provided seems to provide configuration details for previous version of Identity. I am using Identity in .NET Core 2.0 so following tutorial in provided doc gives me error which is as follows\nUnhandled Exception: System.ArgumentException: GenericArguments[1], 'Microsoft.AspNetCore.Identity.IdentityRole', on 'Microsoft.AspNetCore.Identity.Entity\nFrameworkCore.UserStore`9[TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim]' violates the constraint of type 'TRole'. --->\nSystem.TypeLoadException: GenericArguments[1], 'Microsoft.AspNetCore.Identity.IdentityRole', on 'Microsoft.AspNetCore.Identity.UserStoreBase`8[TUser,TRole\n,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim]' violates the constraint of type parameter 'TRole'.\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\n   --- End of inner exception stack trace ---\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\n   at Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddStores(IServiceCollection services, Type userType, Type roleTyp\ne, Type contextType)\n   at Microsoft.Extensions.DependencyInjection.IdentityEntityFrameworkBuilderExtensions.AddEntityFrameworkStores[TContext](IdentityBuilder builder)\n   at AuTest.Startup.ConfigureServices(IServiceCollection services) in E:\\Code\\AuTest\\Startup.cs:line 32\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.ConfigureServices(IServiceCollection services)\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\n   at AuTest.Program.BuildWebHost(String[] args) in E:\\Code\\AuTest\\Program.cs:line 21\n   at AuTest.Program.Main(String[] args) in E:\\Code\\AuTest\\Program.cs:line 17\nProvided approach would be great but unfortunately that didn't work. . ",
    "DamirAinullin": "Do you have any objections related with these changes?. ",
    "yarsiemanym": "Hmmmm.  If at all possible, I'd like to avoid making changes to my legacy apps.  Less risky that way.  Is there no way to override parts of ASP.NET Identity and customize the cookie to the point where Forms Authentication would recognize it?. At this point, I'm trying to determine which is worse: overhauling the auth framework in a number of legacy apps or going down this rabbit hole.  What kind of old stuff are you referring to?  Just point me in the right direction and I'll see how far I can get.. Gotcha.  I'm no security expert but I was able to figure out how to deal with the hashed passwords in my ASP.NET Membership database.  That little flicker of glory might have gone to my head.\nLet me bounce this off you.  If my legacy apps were built on OWIN would that change anything?. OK. Yeah that's what I meant.  I saw some articles about Framework45 compatibility mode but found out pretty quick that wasn't going to work for me unless I moved to OWIN and Identity.  I don't know much about WS-Fed but I do know a bit about OWIN and Identity so I'm wondering if the bigger bang for my buck might be to port the apps over to OWIN and Identity and do the Framework45 compatibility stuff.  Is the WS-Fed route relatively simple?. WS-Fed would be simpler than porting the app to Identity and using Framework45 compatibility mode?. I've never done anything with WS-Fed before so I'm likely not fully understanding something.  Can you list the coarse-grained steps I'd have to take to convert my legacy app to use Identity Server?. Thanks, Brock!  It actually looks like MvcFormPostClient is going to do the trick. Does that make sense?. ",
    "thepinkmile": "Am I right in thinking these changes will eventually allow me to configure Identity to use my Jwt Token Authentication?\nI am using this in an API to enable authentication for the API, however it breaks my Jwt authentication because it is setting the Default Schemes and forcing the addition of cookies which are completely useless for an API.. ",
    "ActionJ4ckson": "Hey @HaoK \nMy bad, you are absolutely right. It turned out be some other piece of code (my code ofcourse, who else does poor coding) overwriting the DataProtector instance attached to my UserManager instance at a later stage. \nThanks for replying. Have a good one.\nAJ. Hey @lurumad \nIn my case, it was a silly mistake made by a developer in my team. I had a shared UserManager class across a Windows Service (token generator) and a Web application (token consumer) so that they refers to the same UserManager settings including the DataProtectionProvider. But an year later in the web application another developer added few lines below my code overwriting the \"UserManager.DataProtectionProvider\" property with a different DataProtectionProvider type which he found on the internet. So the token generated from the one app started failing in validation from the other app.\nIn your case if the two apps are deployed on a different machines, probably you should implement a custom Machinekey DataProtectionProvider. Additionally you will also have to add exactly SAME machinekey in the config files of the two apps (you can generate it online or from any IIS 7). Here is a good article you may refer to troubleshoot your problem: http://tech.trailmax.info/2015/05/asp-net-identity-invalid-token-for-password-reset-or-email-confirmation/\nIf nothing works, the final and longer option you can try is to debug into the Identity source code to locate the root cause:\n1) Download the Identity 2.2.1 source code \n2) Include in it your project\n3) For all Identity project, disable the assembly signing from project properties\n4) From your projects, remove Identity nuget references and add direct project references\n5) In the config files, remove all \"PublicKeyToken\" properties only for Identity assemblies. That should fix all the references\n6) Just resolve the build errors and then you should be debug into the Identity source from your project.\nIf you need further help, just post it here, I am in IST timezone so please expect some delay in the response.\n. ",
    "lurumad": "Hi @ActionJ4ckson \nHow did you resolve the issue? I have the same problem with two web applications\nRegards!. In my case, I'he tried to encode the tokens but anyway I always received \"Invalid Token\"\nRegards!. Hi folks,\nI've resolved the problem. After debugging the source code of AspNetIdentity, I've seen that the problem is related with DataProtectionApi, and to be more precise with the IApplicationDiscriminator see. Uses a HostingApplicationDiscriminator that returns ContentRootPath of the applications and it's use to generated the keys. Another thing I've found is that you can persists the keys into files so you can reuse across your apps.\nThe solution in my case is using the same ApplicationDiscriminator in the two web apps and share the keys in Azure storage (You can use many storage like directory, UNC, Redis...) More info here\ncsharp\nservices\n    .AddDataProtection(options =>\n    {\n            options.ApplicationDiscriminator = \"myapp\";\n    })\n    .PersistKeysToAzureBlobStorage(new Uri(sas));\nAnd works like a charm!!!\nRegards!. ",
    "Palmer11": "Because we are assuming something or nothing. An Empty string wont/shouldnt be returned. So checking for WhiteSpace would be redundant.. ",
    "zuosc": "https://github.com/aspnet/Identity/issues/991#issuecomment-256516328  \nhhhhhhh. ",
    "nmathur": "Can you please answer it on stackoverflow .. I am facing issue which can be regenerated very easily .. . ",
    "justin-ruffin": "Try configuring \"Services.AddIdentity\" then \"Services.ConfigureApplicationCookie\" as shown below.\n\n. The reason the order matters is because \"AddIdentity\" configures the application cookie. \nIf you call \"ConfigureApplicationCookie\" prior to \"AddIdentity\" then your custom configuration is overwritten.\nSee Below:\n\n. ",
    "dkent600": "@justin-ruffin 's suggestion worked for me. ",
    "DevelAx": "Where is that stated in the documentation?. ",
    "worldbeater": "Why does the order affect behavior? \nThis isn't obvious at all and is driving me insane.. ",
    "wutever0": "Hi I still facing this issue even after placing ConfigureApplicationCookie after AddDefaultIdentity.\nAny suggestions?\nHere is my ConfigureServices:\n\npublic void ConfigureServices(IServiceCollection services)\n{\n        services.Configure<CookiePolicyOptions>(options =>\n        {\n                     options.CheckConsentNeeded = context => true;\n                     options.MinimumSameSitePolicy = SameSiteMode.None;\n        });\n        services.AddSingleton<IDatabaseFactory, DatabaseFactory>();\n        services.AddTransient<ConferencesRepository>();\n        services.AddTransient<IUserStore<IdentityUser>, UserStore>();\n        services.AddTransient<IEmailSender, EmailSender>(s =>\n            new EmailSender(\n                Configuration[\"EmailSender:Host\"],\n                     .....\n                Configuration[\"EmailSender:Password\"]\n            )\n        );\n        services.AddDefaultIdentity<IdentityUser>();\n\n        services.Configure<IdentityOptions>(options =>\n        {\n            // Password settings.\n            options.Password.RequireDigit = false;\n                     .....\n            options.User.RequireUniqueEmail = false;\n        });\n\n        services.ConfigureApplicationCookie(options => {\n            options.LoginPath = new PathString(\"/Account/LoginRegister\");\n        });\n\n        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n    }\n\n\nForgot to mention that I am using ASP.NET Core 2.1.1. ",
    "datvm": "Hi, anyone could do it with ASP.NET IdentityServer4? I have set it after adding Identity and even after IdentityServer configuration (I also tried before too), and removed the AddDefaultUI, but it still redirects me to /account/login. Here is the code:\n```\n            services.AddDbContext(options =>\n                options.UseSqlServer(apiSettings.ConnectionStrings.BibliIdContext));\n            services.AddIdentity()\n                .AddEntityFrameworkStores()\n                .AddDefaultTokenProviders();\n                //.AddDefaultUI();  \n        var migrationsAssembly = typeof(Startup).Assembly.GetName().Name;\n\n        services\n            .AddIdentityServer()\n            .AddDeveloperSigningCredential()\n            .AddConfigurationStore(options =>\n            {\n                options.ConfigureDbContext = builder =>\n                {\n                    builder.UseSqlServer(\n                        apiSettings.ConnectionStrings.BibliIdContext,\n                        sql => sql.MigrationsAssembly(migrationsAssembly));\n                };\n            })\n            .AddOperationalStore(options =>\n            {\n                options.ConfigureDbContext = builder =>\n                {\n                    builder.UseSqlServer(\n                        apiSettings.ConnectionStrings.BibliIdContext,\n                        sql => sql.MigrationsAssembly(migrationsAssembly));\n                };\n\n                options.EnableTokenCleanup = true;\n            })\n            .AddAspNetIdentity<IdentityUser>();\n\n        services.ConfigureApplicationCookie(options =>\n        {\n            options.LoginPath = \"/Identity/Account/LoginTest\";\n            options.LogoutPath = \"/Identity/Account/Logout\";\n        });\n\n\n        services\n            .AddMvc()\n            .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\n```\nEDIT: Founded the solution from IdentityServer's documentation. For those who search for it later:\nservices\n                .AddIdentityServer(options =>\n                {\n                    options.UserInteraction.LoginUrl = \"/Identity/Account/Login\";\n                    options.UserInteraction.LogoutUrl = \"/Identity/Account/Logout\";\n                })\n. ",
    "jansivans": "I have achieved this by forking IdentityServer4.EntityFramework into my solution and extending it's entities right there. Looks a bit ugly but I don't know if there is better solution to extend IdentityServer's entities.. ",
    "Awd60": "We are using AAD to register App for WebAPI.  (Active Directory Authentication)\n. We are using standard Azure authentication.\n\n\nApplication itself does not handle authentication and rely for Azure .\n. Issue was closed by my mistake. ",
    "jatarga": "Are there any plans to integrate it to Jwt authentication, or can I extend TFA?. @antoinecfmws I didn't implemented.. ",
    "antoinecfmws": "@jatarga Hello, I am having the same issue. Can you please share how did you get this to work? My code has very similar flow as yours. Currently, when I run var user = await _signInManager.GetTwoFactorAuthenticationUserAsync(); it is returning null. Is there another function we can use? I even tried to SignInAsync(user,...) prior to running the GetTwoFactorAuthenticationUserAsync() and same issue.\nThank you!. @jatarga thank you for your response. @blowdart do you agree that the JWT should not be issued until the 2FA code has been verified? If so, there has to be a way to validate the 2FA code using SignInManager and be able to pass in an instance of the user object or the user Id. Thoughts? \nThank you!. @jatarga, I found a good workaround for now, I was looking at the implementation of SignInManager.TwoFactorAuthenticatorSignInAsync(..) and noticed that it uses UserManager.VerifyTwoFactorTokenAsync(...) internally. So I was able to use that as well:  \nc#\nvar codeValidated = await _userManager.VerifyTwoFactorTokenAsync(user, new IdentityOptions().Tokens.AuthenticatorTokenProvider, model.Code);\n. ",
    "AlexOliinyk1": "This example from article is worked for me, it seems I something was missed from article above, before crearted this issue.. ",
    "marcobarbero": "I have post a simplified example for user Jwt authentication on Asp Net Core 2.0 and Angular with a custom repository here:\nhttps://expertcodeblog.wordpress.com/2018/01/11/implement-jwt-authentication-on-asp-net-core-2-0-and-angular/.\nThis is a simplified example of what I used on my project that work correctly.\nI hope it can help you.. ",
    "N41m0r": "@hey-red Thx, using CheckPasswordSignInAsync solved my problem.. ",
    "B-Esmaili": "I went through the documentation and did as mentioned but still i get logged out after 30minutes.. I have done this as well but no luck.@natemcmaster could you give me a reference to code which checks for ticked expiration?. I found the location in which check for expiration is done and figured out that the problem is ,identity checks every 30  minutes (by default, its configurable) to see if issued authentication ticked is valid, consequently it checks to see if the class which is implementing UserStore<> is implementing IUserSecurityStampStore (UserManager.SupportsUserSecurityStamp in following code) for that matter.\nhttps://github.com/aspnet/Identity/blob/eb3ff7fc32dbfff65a1ba6dfdca16487e0f6fc41/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L223\nand following is getter of SupportsUserSecurityStamp\nhttps://github.com/aspnet/Identity/blob/e36e681d5477e8fc4de7cc46717bb73f5fe92a0b/src/Microsoft.Extensions.Identity.Core/UserManager.cs#L248\nAs my MembershipService class which is implementing IUserStroe does not implement IUserSecurityStampStore<> thus after 30 min interval i end up with invalid security stamp and a null principal which == SignOut. this was my bad story. \nYou can close this issue as my problem is resolved.. ",
    "tiljanssen": "I had the same problem. It took me quite some time to find out the cause. \nShouldn't addIdentity() check whether the securityStampValidatorStore is supported, and if not, either throw or skip the registration of the validation?. ",
    "aguayUmbt": "\nI would like to extend my authentication duration to 1 day, but from what I've understood, it's logging out after 30minutes. If I set it to 1 minutes, it actually work.\nI've consulted many topics regarding this matter but couldn't find an answer I could understand. Please help me with this, thanks.. ",
    "nonintanon": "interesting.. isn't it supposed to be part of gitignore in the first place?. ah.. undertood. thanks.. ",
    "claudioct": "Can use System.Net.WebUtility.UrlEncode(\"string\") and System.Net.WebUtility.UrlDecode(\"string\") to resolve n. 2;\n. If you're using ModelBinder, try to not use System.Net.WebUtility.UrlDecode(\"string\") . \nI guess Net Core do the dirty work for us.. Did you debugged to make sure you're trying to change password with correct token?. ",
    "saf-itpro": "@claudioct  I had to install NuGet package for System.Net.WebUtility.UrlEncode to use in the project. I tried your suggestion but still the same error. I've added UPDATE 2 in my post above.. @claudioct  Yes, I've read that at different places online to not to use Decode since, according to some, it may even bring back the issue you are trying to resolve. That's why, I mentioned in my UPDATE 2, that first I tried using Encoding part only. But after getting the same error, I tried Decoding part, as well, but still the same error.. @claudioct In my Note in the post above I mentioned that the PasswordResetfunctionality works fine if I am logged in and want to reset my password to something else. Now the same functionality does not work when a generated link is clicked on the email body. I don't know how I would debug outside the visual Studio (please note that we are now not inside the Visual Studio anymore; it's PasswordResetform when I click on the link in the email). Browser F12 mode does not give any info not even any error.. ",
    "jhermsen": "Ok\u00e9 thanks. ",
    "NinoFloris": "Nobody does those checks before executing a method, and as witnessed in the manager code you don't expect them to either as you recheck support in those Get...Store methods.\nI don't know what you mean with \"GetClaims(user) might still call through to the store\" as all the functions using that have been overridden to throw.\nEasiest fix is to make Get...Store respect any overridden result of the Supports... methods instead of trying to check with the same code (as it is now) in a private method where nobody can reach it.\nEDIT:\nWhy not have a storebase that already has all the methods for the interfaces without actually implementing them? Then also supply a default store which does nothing more than implementing these interfaces. I don't like copying or writing crud, and yes they are so simple to implement that I'd rather let the library authors do that for me.. Yes that's why I'd like to see a more constructive solution where there is a store we can actually use as a base that doesn't already implement everything. @blowdart  You might not use this day to day but it breaks normal AddAuthentication fluent builder flows. There is this expectation around certain service builders that they don't branch into different builder instances as it breaks your configuration chain. \nAll the libraries I know of, even big ones like aspnet-contrib openid server just provide you with the option of their own configuration inside a lambda and then correctly return with the AuthenticationBuilder they work on.. ",
    "mkArtak": "Thanks @VahidN .\nI will try to persist those and see whether that will fix it or not. Hopefully, it will !. It is ASP.Net core identity. ",
    "andreyshade": "In my case I need guide how to run asp.net core + mvc + identity + sqlite. ",
    "yodasad": "Thank you! I got it.. ",
    "mattthr": "That's a good analogy. \nI understand the concern here about weakening the model, but it would be an option, down to the choice of the implementation to use full, occasional or no two-factor checks. And some site which encourage the use of two factor do carry out random spot checks rather than on every visit.. ",
    "Triwaters": "I noted this problem in my own work and got curious enough to search out this conversation.\nI'm new to ASP.NET Identity, but not new to SQL Server. The three errors noted (all of which I see every time I propagate tables, etc. to a new database) are being thrown because ASP.NET Identity is breaking SQL Server rules. As SQL Server keeps patiently explaining every time one builds the ASP.Net Identity tables in their databases, a clustered index (usually that's your primary key on a table) cannot exceed 900 bytes.\nThat doesn't mean you can't create the index. What it means is that you may find yourself creating a legitimate and otherwise legal record that SQL Server nevertheless cannot save into the table. \nMeaning... \nThe table design on AspNetUserLogins prescribes a primary key that is a composite of two fields: LoginProvider and ProviderKey. Both fields are nvarchar(450). That's two-bytes per character, and therefore one would think that it'd be possible to provide a full 450 unicode value in each field without breaking table rules for those fields....\n...Except that when the record goes to save, the clustered index finds itself indexing two unicode fields of 450 chars apiece ... and craps out. That's 450x2x2 = 1,800 bytes. No can do. The index cannot hold that much data for a single record. You will not be able to save the record.\nIn practice? I'm betting this never happens. As I said, I am new to ASP.Net Identity, but I'd bet high odds these fields are usually quite short. So in practice, this is probably a non-problem.\nBut in principle, it's a pretty silly situation. Why has it not been remedied with more reasonable limits on field sizes?\nI'm also wondering if the offending fields used to be varchar() and not nvarchar(). The problem goes away if they were varchar() fields--for two tables, at least. For AspNetUserTokens, even that wouldn't fix the problem. It's got a primary key that is a composite of three (3) nvarchar(450) fields. That's 2,700 bytes.\nAs a final note, given the small size of these tables, I guess again in practice there are no concerns. In principal, however, using multiple nvarchar(450) fields as primary key fields is indicative of design flaws that would be fatal with larger tables with substantially more records. We're apparently now stuck with a design that makes primary keys out of description fields. What else do you call fields nearing 500 chars in length?\nBad. This situation reminds me of Azure object names that we final users see but are not allowed to change. Same problem. IMHO in both cases the problems would go away if primary keys (composite or otherwise) were comprised of integers, but that topic for another day.. Not being one to leave \"problems waiting to happen\" (however remote) in my databases, not least because they usually surface at the wrong time of day or while I'm on vacation... I have been digging into how to improve the situation (see my prior comment).\nI've some outstanding resources out there that helped me over the hurdles. In case anyone else is interested:\nhttps://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-primary-key-configuration?tabs=aspnetcore2x\nhttps://www.captechconsulting.com/blogs/Customizing-the-ASPNET-Identity-Data-Model-with-the-Entity-Framework-Fluent-API--Part-1\nhttps://medium.com/@goodealsnow/asp-net-core-identity-3-0-6018fc151b4\nand if you're really motivated:\nhttps://www.youtube.com/watch?v=RyActxOsnsg\nThis last youtube video convinced me that I might as well own the entire setup. Problem solved, and I'm now well-placed to customize away.\n. ",
    "AndyMDoyle": "Out of the box with 2.1.2 we are still seeing the same warnings based on the schema generated with the initial migration.\nRemoving the initial migration from the template and recreating also results in a schema that throws up these 3 warnings.\nAre we missing something?\n. Out of the box with 2.1.2 we are still seeing the same warnings based on the schema generated with the initial migration.\nRemoving the initial migration from the template and recreating also results in a schema that throws up these 3 warnings.\nAre we missing something?\n. ",
    "nanodrive": "I updated the sdk to 2.1.302 and created a 2.1 web application in visual studio 2017. The number of errors is down to 2 now.\n```\nWarning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserRoles' has maximum length of 1800 bytes. For some combination of large values, the insert/update operation will fail.\nWarning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserTokens' has maximum length of 1412 bytes. For some combination of large values, the insert/update operation will fail.\n```\nIt's an improvement from 3 errors, but it still needs some more work.. ",
    "coolmikkel": "\nI updated the sdk to 2.1.302 and created a 2.1 web application in visual studio 2017. The number of errors is down to 2 now.\nWarning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserRoles' has maximum length of 1800 bytes. For some combination of large values, the insert/update operation will fail.\nWarning! The maximum key length for a clustered index is 900 bytes. The index 'PK_AspNetUserTokens' has maximum length of 1412 bytes. For some combination of large values, the insert/update operation will fail.\nIt's an improvement from 3 errors, but it still needs some more work.\n\n@nanodrive any news with the last 2 warnings?\nI only have the warning regarding the index on AspNetUsersTokens,\nRunning 2.1.4 sdk.. @WellspringCS I do not understand what you are explaining.\nDid you change \"nvarchar(450)\" to \"int\"?\nHow do that work? How does a guid gets to be saved in an \"int\" column?\n\n. ",
    "WellspringCS": "Per my prior (too verbose, sorry) comments, this is easily remedied with sane field sizes.\nI ended up switching to integers (in hindsight I wonder if that was wise), but the out-of-the-box guid-based keys only take up... what... 16 bytes? The tables SQL Server is complaining about contain fields ostensibly for guids that are defined as nvarchar(450).\nIf the problem's still present, then at least one of those fields is still ginormous, to literally no one's benefit.. My bad for not looking back at how I solved the problem last year. On that particular table, I did this:\n\nI'm pretty sure in my original solution I had to change UserId from guid to int, and similar changes in several places. But I see you have it as int there, too. Is that the setup out of the box, now?\nAs you can see, I didn't have much patience for ginormous field sizes. I believe field sizes should tell people what is expected to go into them. In hindsight I wonder if varchar(100) might be too small for a token! (Not an issues for me as I'm not using this table.)\nThat said... Name and LoginProvider should not require 450 characters. They should be storing a name, not the Library of Congress. By the same token (pun intended), varchar(max) seems like overkill for the token field (Value). I suspect tokens can be quite large, however, so here I confess ignorance.\n. ",
    "hoksource": "how was EF able to create the table with nvarchar(450), nvarchar(128), nvarchar(128) clustered primary key? I want to do this on my table as well.. ",
    "alonstar": "wow, I got it, thanks.. I also have the same issue on 2.1.3. @blowdart \nI have another issue to handle, so I need return \"View\" sometimes, not redirect. BTW, why can't keep 2fa in the same page? If I need to redirect, I also can use \"RedirectToAction\" or \"Redirect\" to do this, right? so I think \"PasswordSignInAsync\" should not to force to redirect.. https://github.com/aspnet/Identity/issues/1543\nThere is someone has the same issue with me.~. I understand Post/Redirect/Get (PRG) pattern is always used, but it's \"always\", not \"must\", I don't  understand why it must require to redirect after post ? Redirect or not it's should depend on situation, If I don't want user to post again, there are many ways to do this thing, not just redirect.\nI think every method should keep it to do a single thing or complete flow, after PasswordSignInAsync, there are always still something need to do.\nOur user must to do something to active 2FA, and we require user must use 2FA, so after PasswordSignInAsync, if result is 2FA enabled but the other options are not active, I return a error message to tell user (so I don't want the page to redirect).\nOr I need use PasswordSignInAsync on API, I need 200 not  302 as a result. \nAs many many something need to do, so I hope the PasswordSignInAsync not to cause 302.\n. ",
    "Buggyy": "Any progress made on this issue?. ",
    "v-karbovnichy": "@lkempf The new version also contains a typo \ud83d\ude04, changed word should be succeeds, not succeedes. . ",
    "lkempf": "I think I'll just create a new pull request now. ",
    "popsovy": "DbInitializer.Initialized is called from Startup.Configure. I hope it's called only once, not on every request. Yes, I am trying to seed the admin account for the site. Normally, I seed using MERGE SQL statements, but in this case of creating an account, it seemed that using UserManager from .NET core code is better.\nHere is my Startup.cs\n```c#\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"MyGroupDbConnection\")));\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(Configuration.GetConnectionString(\"MyGroupDbConnection\")));\n\n        services.Configure<AdminSettings>(Configuration.GetSection(\"settings\").GetSection(\"admin\"));\n\n        services.AddIdentity<ApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        services.AddMvc();\n\n        services.AddScoped<IDbInitializer, DbInitializer>();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, IDbInitializer dbInitializer)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n            app.UseBrowserLink();\n            app.UseDatabaseErrorPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n        }\n\n        app.UseStaticFiles();\n\n        app.UseAuthentication();\n\n        dbInitializer.Initialize();\n\n        app.UseMvc(routes =>\n        {\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n    }\n}\n\n```\nUser manager is injected into DbInitializer:\n```c# \n   public class DbInitializer : IDbInitializer\n    {\n        private readonly UserManager userManager;\n        private readonly RoleManager roleManager;\n        private readonly AdminSettings adminSettings;\n        private readonly ApplicationDbContext appDbContext;\n    public DbInitializer(\n        UserManager<ApplicationUser> userManager,\n        RoleManager<IdentityRole> roleManager,\n        IOptions<AdminSettings> optionsAccessor,\n        ApplicationDbContext appDbContext)\n    {\n        this.appDbContext = appDbContext;\n        this.userManager = userManager;\n        this.roleManager = roleManager;\n        adminSettings = optionsAccessor.Value;\n    }\n\n```\nThanks. ",
    "tonyawad88": "We have the same issue with RoleManager.DeleteAsync(...) and UserManager.DeleteAsync(...)\nError Code: ConcurrencyFailure\nError Description: Optimistic concurrency failure, object has been modified.\n```\n        [Authorize(Policy = \"RequireAdministratorRole\")]\n        [HttpPost]\n        public async Task RemoveRole([FromBody] RoleModel role)\n        {\n            var roleExists = await _roleManager.RoleExistsAsync(role.RoleName);\n            if (!roleExists)\n                return GenerateResponse(StatusCodes.BadRequest, \"Role doesn't exist or already deleted.\");\n        var newRole = new IdentityRole(role.RoleName);\n        var result = await _roleManager.DeleteAsync(newRole);\n        if (result.Succeeded == false)\n            return GenerateResponse(StatusCodes.InternalServerError, _sharedLocalizer[\"Unable to delete role\"]);\n\n        return Ok(new Status(StatusCodes.Success, \"Success\"));\n    }\n\n```\nAny help is greatly appreciated. Thank you!. ",
    "RainingNight": "+1. any news?. ",
    "heku": "Current, I use a separated DbContext for identity stuffs, and keep all identity models into an infra project, so that these don't break my domain models.\nStill hope to hear your suggestions/practices on this.. ",
    "maqduni": "Thank you!. ",
    "arisliang": "Same confusion exists for 1.x too. How to properly set the application expiry cookie in 1.x?. ",
    "Vertigo093i": "@HaoK, I suggest that the other branch of the if expression also needs a similar fix. By removing roleType parameter and replacing UserStore<,,,> with UserOnlyStore<,,>.. ",
    "derth": "But i don't have access to the user model, it's built in asp.net. How am i supposed to change it?. ",
    "gustyn": "OK thanks.  Sorry missed the response.. ",
    "datttit": "I'm found the problem,please tell me make to the soulution for fix this problem. ",
    "AshleyPoole": "In my case, the tokens were the same length but weren't being encoded on the links being sent out, so the plus symbols for example were being replaced with spaces. Might be worth checking that.. ",
    "atpyk": "services.AddIdentity(config =>\n            {\n                config.Tokens.EmailConfirmationTokenProvider = TokenOptions.DefaultEmailProvider;\n            }).AddEntityFrameworkStores(). ",
    "AfkAtm": "Since I had to write some custom code to handle the request to the auth and token endpoints there is quite a lot of code related to this issue which is all included on the Stack Overflow question.  Here's the start-up piece that adds the OAuth handler to the AuthenticationBuilder:\nservices.AddAuthentication()\n.AddAzureAd(options =>\n{\n    options.ClientId = Configuration[\"AzureAd:ClientId\"]; \n    options.AuthorizationEndpoint = $\"{Configuration[\"AzureAd:Instance\"]}{Configuration[\"AzureAd:TenantId\"]}/oauth2/authorize\"; \n    options.TokenEndpoint = $\"{Configuration[\"AzureAd:Instance\"]}{Configuration[\"AzureAd:TenantId\"]}/oauth2/token\"; \n    options.UserInformationEndpoint = $\"{Configuration[\"AzureAd:Instance\"]}{Configuration[\"AzureAd:TenantId\"]}/openid/userinfo\"; \n    options.Resource = Configuration[\"AzureAd:ClientId\"]; \n    options.ClientSecret = Configuration[\"AzureAd:ClientSecret\"]; \n    options.CallbackPath = Configuration[\"AzureAd:CallbackPath\"]; \n});. Here's the Identity and Cookie part of the Start-Up, it is pretty much just the normal AddIdentity with custom objects mixed in.  \n```\n            services.AddIdentity()\n                .AddEntityFrameworkStores()\n                .AddDefaultTokenProviders();\n        services.ConfigureApplicationCookie(options =>\n        {\n            // Cookie settings\n            options.Cookie.HttpOnly = true;\n            options.Cookie.Expiration = TimeSpan.FromDays(150);\n            options.LoginPath = \"/Account/SignIn\"; // If the LoginPath is not set here, ASP.NET Core will default to /Account/Login\n            options.LogoutPath = \"/Account/SignOut\"; // If the LogoutPath is not set here, ASP.NET Core will default to /Account/Logout\n            options.AccessDeniedPath = \"/Account/AccessDenied\"; // If the AccessDeniedPath is not set here, ASP.NET Core will default to /Account/AccessDenied\n            options.SlidingExpiration = true;\n        });\n\n```\n\nAre you seeing the normal external redirection and bounce back to your external login callback?\n\nYes\n\nAre you seeing an external cookie sent?\n\nYes\nHere are screenshots of the flow:\n\nSignIn\n\n\n\nAuthorize\n\n\n\nsignin-AzureAd\n\n\n\nExternalLoginCallback\n\n\n. This is where it is failing: \nhttps://github.com/aspnet/Identity/blob/rel/2.0.0/src/Microsoft.AspNetCore.Identity/SignInManager.cs#L577\nIt would appear that none of the claims are getting populated. So when it looks for the name identifier claim it doesn't find it and returns null. \n\nWhere are these claims populated from the token?  . Got it working.  My issues were multiple.\nIn my initial example I had the resource being set to my application ID, I should have be passing in the graph URL.\nMy scope was fine but then I hadn't set up a mapping for the ClaimTypes.NameIdentifier claim.\nThen finally I had to update the User Information Endpoint to point to the same as the Resource Graph uri that I provided.  \nNow it works like a charm.  Closing the issue.  . ",
    "tmerkel": "Ahh..nice.  Will do!. Ok.  I added/updates tests in UserManagerTests...but it's not clear to me which way you'd like the tests updated in IdentitySpecificationTestBase. \nI think I can:\n\nUpdate AlwaysBadValidator to leave the message out of the password validator result always...but this will change the existing tests.\nAdd a parameter to the constructor to include messages, like I did in UserManagerTests...but then do you want duplicate tests?  I think the first validator CreateAsync hits is the password validator, so maybe this is the right way to test both paths?\n\nDo you have an opinion?. Ok, I added tests to IdentitySpecificationTestBase for the path where Errors is empty.\nAre there other things I missed?\nThanks for your help with this, Hao!. Your last comment made me realize my fork was of a feature branch.  Wiped everything, updated from the dev branch, readded my changes.  All things work like I'd expect.  Tests pass, no need for a fake.\nI updated the PR to be to dev, since that's the new base.  I hope that's right.. Rebased.  Just waiting for our legal person to get back to OK my clicking the CLA link.  Sorry about the delay there!. Finally signed.  Thanks, Hao!. In SetupIdentityService, .AddDefaultTokenProviders is called, which eventually causes a DataProtectorTokenProvider to be created\npublic DataProtectorTokenProvider(IDataProtectionProvider dataProtectionProvider, IOptions<DataProtectionTokenProviderOptions> options)\nThis asks the IServiceCollection for an IDataProtectionProvider...which...was never registered, as far as I could find.  Most of the tests fail for me with the error:\nMessage: System.InvalidOperationException : Unable to resolve service for type 'Microsoft.AspNetCore.DataProtection.IDataProtectionProvider' while attempting to activate 'Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1[Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser]'.\nAdding a fake fixed all of these...though I still have many failures related to code I haven't touched.  I can definitely remove the fake if there's something else taking care of this that I'm just missing...?. ",
    "rvandulek": "No, just a new MVC 5 application (using whatever the current template is in the latest VS 2017).  Our existing apps are also MVC 5, but were created 2-3 years ago (but have been updated, for the most part, via Nuget to the latest component versions).  Existing apps are using .Net 4.5.1.. ",
    "daniel-tikhonov": "@HaoK I know about extensions, but I really need to call this class directly.. @brockallen Microsoft.Extensions.Identity.Core is dependency of Microsoft.AspNetCore.Identity so it need to be added . ",
    "blackadder1000": "I have exactly the same issue, has anyone got an answer?. ",
    "benrhere": "But what if you want to access related data when you're adding your own custom claims in GenerateClaimsAsync (which gets passed the user object and has no access to db context)?. That makes good sense. Thank you!. Working as expected; I found the problem on my end. Sorry for the trouble.. ",
    "whizkidwwe1217": "@blowdart I don't think this is an issue with EF core or a question but an issue with Identity\nIssue: A unique constraint is hard-coded to the IdentityUserContext. This means that it does not allow me to implement a multi-tenant users. The current architecture is only good for multi-tenant apps where each tenant database is being hosted to different servers. But in the case of multi-tenancy where companies/tenants share a single database, it's not possible to do with the current version of Asp.net core Identity library.\n\nExpectation: \nI should be able to make the user (IdentityUser) unique per username (NormalizeName) per CompanyId (another field). This should be also the same with identity Roles.. Thanks @blowdart I actually tried to override the OnModelBuilding but it's giving me errors like the image below:\n\nAnyway, I already filed a similar issue in EF core repo and I hope \n@ajcvickers can help me with this. Thanks! :) \nhttps://github.com/aspnet/EntityFrameworkCore/issues/10511. I actually managed to make it work by creating a custom user validator and I didn't use IdentityDbContext. Instead, I derived a new db context from DbContext class and copied all dbsets and configurations from identity context. Kind of a hack actually but it works.. @challamzinniagroup it's just so bad when you're putting in some random strings when it doesn't have to be. I'll already solved this issue by extending and overriding the IdentityManager class. That way I was able to customize it and was able decide how it will be persisted to the database. . ",
    "challamzinniagroup": "The baking-in of a Unique constraint on a field as mundane as UserName seems at best an oversight: multi-tenancy capabilities OOTB should be a given (or at least don't place a constraint that makes multi-tenancy almost impossible). Further, while not that difficult to implement in to EF in general, soft delete capabilities OOTB is something I've long felt should be there - and dropping soft delete functionality in to any EFCore system using Identity only exacerbates this unique constraint issue.\nIn my experience, UserName is very seldom used, with preference being for Email signins instead - with this in mind it was pretty simple to implement @HaoK 's solution above. In my case I set all UserName values equal to Email + random, 5-character numeric string (a single line of code during user creation) - the problem goes away.. ",
    "Biarity": "Yeah, that's what I'll try doing next. I am currently using provider=\"Email\".  This generates a 6 digit code, which is equivalent to using provider=\"Phone\". This might be a bug since using provider=\"Default\" generates a long GUID-esque token, which I think is the one you're referring to?\n(I don't want to use this really long one because I ask the user to manually type the token in, and generating URLs doesn't work for my case - \"TOTP\" sounds about right).\nHere is my actual code. The entire project is open source.\nDo you mind pointing me to the source code for the Email or Phone (ie. 6-digit) providers? I'd like to see how I can build similar ones, and how you were able to sign such a short token with the purpose/userId/security stamp.. ",
    "irashid25": "For anyone who is interested, i was able to solve my issue temporarily using the following answer.\nhttps://stackoverflow.com/a/46013305\nI queried the 'Identity' tables directly using the following (tables re-named to my liking):\nvar userRoles = SqlQueryHelper.RawSqlQuery(this.context,\n                @\"SELECT gu.Id, gu.UserName, gu.Firstname, gu.Lastname, IsNull(gu.PhoneNumber, 'Not Specified') as PhoneNumber, gu.Email, gr.Id as RoleId, gr.Name as RoleName FROM genusers gu\n                        INNER JOIN GenUserRoles gur ON gu.Id = gur.UserId\n                        INNER JOIN GenRoles gr ON gur.RoleId = gr.Id\", user =>\n                    new UserViewModel\n                    {\n                        Id = (int) user[0],\n                        Username = (string)user[1],\n                        Firstname = (string) user[2],\n                        Lastname = (string) user[3],\n                        PhoneNumber = (string) user[4],\n                        Email = (string) user[5],\n                        Role = new RoleViewModel\n                        {\n                            Id = (int) user[6],\n                            Name = (string) user[7]\n                        }\n                    });\nI'm not sure if this is the best way to go about it, but i was able to get the job done. Like i mentioned, i tried adding UserRoles collection to the AppUser class and tried to get EF to play nice but was unsuccessful. I suspect it is related to the user manager not bringing back related data.\nAnyway, leaving this issue open as its been assigned to someone. Moderators are free to close this issue as necessary.\nThanks.\n. ",
    "tianxiaode": "I found this reply by searching for \"Max key length is 767 bytes\": Specified key was too long max key length is 767 bytes\nIn identity, the default field length for username and Normalizedusername is 256, so I'll change the length of the field to 200 in the migration file. If you use UTF8MB4, it is estimated that you want to change the length of the field to a smaller size.\nIn IdentityServer4, the default maximum length of a field is 200, so there is no problem.. ",
    "gabosistvanpwc": "Unfortunately it doesn't. \nI'm using the basic ASP.NET Core Web Application project template with the Individual User Accounts authentication option. As the external provider I have configured the WsFederation middleware as follows:\nservices.AddAuthentication()\n.AddWsFederation(options =>\n{\noptions.Wtrealm = \"xxxx\";\noptions.MetadataAddress = \"xxxx\";\n})\n.AddCookie();\nAfter the request is going through the usual steps \n\nAccountController.ExternalLogin\nIdentity provider login page\nAccountController.ExternalLoginCallback (and here _signInManager.ExternalLoginSignInAsync method)\n\nand the user is authenticated the claims from the User.Identity have the same \"default\" entries as if the user was authenticating directly through the application.\nI would like to tell at any point when accessing an action /controller which requires authentication if the user was logging in the system through the regular sign in flow or through an external authentication provider.\nProbably I'm missing here something..... ",
    "justinvp": "It\u2019s written this way on purpose to mitigate timing attacks. See https://codahale.com/a-lesson-in-timing-attacks/. It\u2019s written this way on purpose to mitigate timing attacks. See https://codahale.com/a-lesson-in-timing-attacks/. ",
    "LindaLawton": "Well that downloaded an impressive amount of stuff.   When i cloned the project i thought to myself this is way to small.    This makes more sense now if you need to run the cmd to download the rest of it.\n```\n\nTime Elapsed 00:06:43.51\ndotnet.exe failed with exit code: 1\nAt C:\\Users\\lilaw.dotnet\\buildtools\\korebuild\\2.1.0-preview1-15626\\scripts\\common.psm1:11 char:9\n+         throw \"$cmdName failed with exit code: $exitCode\"\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (dotnet.exe failed with exit code: 1:String) [], RuntimeException\n    + FullyQualifiedErrorId : dotnet.exe failed with exit code: 1\n\n```\nLooks like the tests are throwing a bunch of errors.   When i try and build the solution its throwing more errors now than before.\n\nSeverity  Code    Description Project File    Line    Suppression State\nError     The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0. Microsoft.AspNetCore.Identity.Service.Abstractions  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    126 \nError     The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0. Microsoft.AspNetCore.Identity.Service.Core  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    126 \nError     The current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0. Microsoft.Extensions.Identity.Core  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    126 \nError     The current .NET SDK does not support targeting .NET Core 2.0.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.0. Microsoft.AspnetCore.Identity.Service.FunctionalTests   C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    112 \nError     The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1. Microsoft.AspnetCore.Identity.Service.FunctionalTests   C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    112 \nError     The current .NET SDK does not support targeting .NET Core 2.0.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.0. Microsoft.AspNetCore.Identity.Service.Abstractions.Test C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    112 \nError     The current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1. Microsoft.AspNetCore.Identity.Service.Abstractions.Test C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.TargetFrameworkInference.targets    112 \nError     The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK. Microsoft.AspNet.Identity.AspNetCoreCompat  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets   65\nError     Unable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.    NativeWPFClient C:\\Development\\NetCore\\Identity\\test\\WebSites\\Identity.OpenIdConnect.WebSite\\Identity.OpenIdConnect.WebSite.csproj    \n\n\nAny other ideas?. @natemcmaster Yes I was getting that error.   I have fixed that.   Its bulding now.   \nTests are throwing a lot of errors.\n\nSystem.ArgumentOutOfRangeException : The UTC time represented when the offset is applied must be between year 0 and 10,000.\nMicrosoft.AspNetCore.Identity.Service.JwtIdTokenIssuerTest.JwtIdTokenIssuer_IncludesNonceAndTokenHashesWhenPresent(nonce: \"nonce\", code: null, accessToken: \"accesstoken\")\nError Message:\nSystem.ArgumentOutOfRangeException : Det UTC-tidspunkt, der vises, n\u00e5r forskydningen anvendes, skal ligge mellem \u00e5r 0 og 10.000.\n\nBuild still failed\n```\nTime Elapsed 00:05:23.30\ndotnet.exe failed with exit code: 1\nAt C:\\Users\\lilaw.dotnet\\buildtools\\korebuild\\2.1.0-preview1-15626\\scripts\\common.psm1:11 char:9\n+         throw \"$cmdName failed with exit code: $exitCode\"\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (dotnet.exe failed with exit code: 1:String) [], RuntimeException\n    + FullyQualifiedErrorId : dotnet.exe failed with exit code: 1\n```\nOn the bright side Identity.sln does build in visual studio now so I think you have solved the problem.\nI have a couple of additional questions if someone has time.\nThere are two .sln files in the project. which one should i be running i am assuming its IdentityCore.sln.  Out of curiosity why are there two?\nWhat is the best way in your opinion to debug my application with this?  Should I had the project to my solution or can I do a debug attach process with it?\nUpdate:   I had to add the path back as i was unable to build my own project with that removed.  :/. Yes the users in question have what appears to be valid stamps.    I didn't create the stamps them they were created by the system.   Do you have a way for me to test if they are valid?. generation of the token never fails. Its validation that's failing two minutes after its email to the user.\nWhy its failing I can't tell as there is no logging.\nUpdate:\nI found this in the logging this morning.\n\nSystem.Security.Cryptography.CryptographicException: The key {3f2b54f2-a87a-41aa-ad80-410b9edae1fd} was not found in the key ring.\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)\n   at Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)\n   at Xena.IdentityServer.Services.CustomDataProtectorTokenProvider`1.d__13.MoveNext() in /var/lib/jenkins/_xena-identityserver_master-GOXBVJ5FZB6XR4BFBDEOFNCAVTISFMJUP3YCSGLXO77AA655HWSQ/src/Xena.IdentityServer/Services/CustomDataProtectorTokenProvider.cs:line 113\n\nSo does this mean there is something wrong with Redis?. I will have to contact the server admin I don't have direct access to redis myself. . @blowdart  I am in the process of getting access to the cluster so i can see this information.   How soon after i see the error do you need me to dump the cache?\nJust got another intersting error from my logging\n```\nSystem.FormatException: Invalid length for a Base-64 char array or string.\n   at System.Convert.FromBase64_Decode(Char startInputPtr, Int32 inputLength, Byte startDestPtr, Int32 destLength)\n   at System.Convert.FromBase64CharPtr(Char* inputPtr, Int32 inputLength)\n   at System.Convert.FromBase64String(String s)\n   at Xena.IdentityServer.Services.CustomDataProtectorTokenProvider`1.d__13.MoveNext() in /var/lib/jenkins/_xena-identityserver_master-GOXBVJ5FZB6XR4BFBDEOFNCAVTISFMJUP3YCSGLXO77AA655HWSQ/src/Xena.IdentityServer/Services/CustomDataProtectorTokenProvider.cs:line 113\n```\n. @brockallen if you are following the thread.  As I mentioned in the last paragraph of this issue. I have created a CustomDataProtectorTokenProvider which is a pure copy of DataProtectionTokenProvider.cs simply adding some logging since the default version does not contain any logging.  \nThere is no custom code in this.  Its just logging so that we can try and track down what the issue is.  without it the only loging information we have is\n\nVerifyUserTokenAsync() failed with purpose: ResetPassword for user 289512195. | WARN | 9\n\n@blowdart  are you saying that because i am using Asp.net identity within Identity server 4 you cant help with the issue?   Its your DataProtectionTokenProvider.cs How could Identity server 4 be at fault? \n\n```\nusing Microsoft.AspNetCore.DataProtection;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing System;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace Xena.IdentityServer.Services\n{\n    public class CustomDataProtectorTokenProvider : IUserTwoFactorTokenProvider where TUser : class\n    {\n        private readonly ILogger> _logger;\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"DataProtectorTokenProvider{TUser}\"/> class.\n    /// </summary>\n    /// <param name=\"dataProtectionProvider\">The system data protection provider.</param>\n    /// <param name=\"options\">The configured <see cref=\"DataProtectionTokenProviderOptions\"/>.</param>\n    public CustomDataProtectorTokenProvider(IDataProtectionProvider dataProtectionProvider, IOptions<DataProtectionTokenProviderOptions> options,\n        ILogger<CustomDataProtectorTokenProvider<TUser>> logger)\n    {\n        if (dataProtectionProvider == null)\n        {\n            throw new ArgumentNullException(nameof(dataProtectionProvider));\n        }\n\n        _logger = logger;\n        Options = options?.Value ?? new DataProtectionTokenProviderOptions();\n        // Use the Name as the purpose which should usually be distinct from others\n        Protector = dataProtectionProvider.CreateProtector(Name ?? \"DataProtectorTokenProvider\");\n    }\n\n    /// <summary>\n    /// Gets the <see cref=\"DataProtectionTokenProviderOptions\"/> for this instance.\n    /// </summary>\n    /// <value>\n    /// The <see cref=\"DataProtectionTokenProviderOptions\"/> for this instance.\n    /// </value>\n    protected DataProtectionTokenProviderOptions Options { get; private set; }\n\n    /// <summary>\n    /// Gets the <see cref=\"IDataProtector\"/> for this instance.\n    /// </summary>\n    /// <value>\n    /// The <see cref=\"IDataProtector\"/> for this instance.\n    /// </value>\n    protected IDataProtector Protector { get; private set; }\n\n    /// <summary>\n    /// Gets the name of this instance.\n    /// </summary>\n    /// <value>\n    /// The name of this instance.\n    /// </value>\n    public string Name { get { return Options.Name; } }\n\n    /// <summary>\n    /// Generates a protected token for the specified <paramref name=\"user\"/> as an asynchronous operation.\n    /// </summary>\n    /// <param name=\"purpose\">The purpose the token will be used for.</param>\n    /// <param name=\"manager\">The <see cref=\"UserManager{TUser}\"/> to retrieve user properties from.</param>\n    /// <param name=\"user\">The <typeparamref name=\"TUser\"/> the token will be generated from.</param>\n    /// <returns>A <see cref=\"Task{TResult}\"/> representing the generated token.</returns>\n    public virtual async Task<string> GenerateAsync(string purpose, UserManager<TUser> manager, TUser user)\n    {\n        if (user == null)\n        {\n            throw new ArgumentNullException(nameof(user));\n        }\n        var ms = new MemoryStream();\n        var userId = await manager.GetUserIdAsync(user);\n        _logger.LogDebug(LoggingEvents.CustomDataProtectorTokenProviderCreate, \"Generate token for [purpose:{purpose}] [userId:{userId}] \", purpose, userId);\n\n        using (var writer = ms.CreateWriter())\n        {\n            writer.Write(DateTimeOffset.UtcNow);\n            writer.Write(userId);\n            writer.Write(purpose ?? \"\");\n            string stamp = null;\n            if (manager.SupportsUserSecurityStamp)\n            {\n                stamp = await manager.GetSecurityStampAsync(user);\n                if (stamp == null)\n                {\n                    await manager.UpdateSecurityStampAsync(user);\n                    stamp = await manager.GetSecurityStampAsync(user);\n                }\n            }\n            writer.Write(stamp ?? \"\");\n        }\n        var protectedBytes = Protector.Protect(ms.ToArray());\n        return Convert.ToBase64String(protectedBytes);\n    }\n\n    /// <summary>\n    /// Validates the protected <paramref name=\"token\"/> for the specified <paramref name=\"user\"/> and <paramref name=\"purpose\"/> as an asynchronous operation.\n    /// </summary>\n    /// <param name=\"purpose\">The purpose the token was be used for.</param>\n    /// <param name=\"token\">The token to validate.</param>\n    /// <param name=\"manager\">The <see cref=\"UserManager{TUser}\"/> to retrieve user properties from.</param>\n    /// <param name=\"user\">The <typeparamref name=\"TUser\"/> the token was generated for.</param>\n    /// <returns>\n    /// A <see cref=\"Task{TResult}\"/> that represents the result of the asynchronous validation,\n    /// containing true if the token is valid, otherwise false.\n    /// </returns>\n    public virtual async Task<bool> ValidateAsync(string purpose, string token, UserManager<TUser> manager, TUser user)\n    {\n        try\n        {\n            var actualUserId = await manager.GetUserIdAsync(user);\n            _logger.LogInformation(LoggingEvents.CustomDataProtectorTokenProviderValidate, \"Validate token for [purpose:{purpose}] [actualUserId:{actualUserId}]\", purpose, actualUserId);\n\n            var unprotectedData = Protector.Unprotect(Convert.FromBase64String(token));\n            var ms = new MemoryStream(unprotectedData);\n            using (var reader = ms.CreateReader())\n            {\n                var creationTime = reader.ReadDateTimeOffset();\n                var expirationTime = creationTime + Options.TokenLifespan;\n                _logger.LogDebug(LoggingEvents.CustomDataProtectorTokenProviderValidate, \"Validate token for [actualUserId:{actualUserId}] [creationTime:{creationTime}] - [expirationTime:{expirationTime}]\", actualUserId, creationTime, expirationTime);\n                if (expirationTime < DateTimeOffset.UtcNow)\n                {\n                    _logger.LogWarning(LoggingEvents.CustomDataProtectorTokenProviderValidateFailed, \"Token is expired [expirationTime:{expirationTime}]\", expirationTime);\n                    return false;\n                }\n                var userId = reader.ReadString();\n                if (userId != actualUserId)\n                {\n                    _logger.LogWarning(LoggingEvents.CustomDataProtectorTokenProviderValidateFailed, \"Token is not for this user [userId:{userId}] - [actualUserId:{actualUserId}]\", userId, actualUserId);\n                    return false;\n                }\n                var purp = reader.ReadString();\n                if (!string.Equals(purp, purpose))\n                {\n                    _logger.LogWarning(LoggingEvents.CustomDataProtectorTokenProviderValidateFailed, \"Token is for wrong purp [purp:{purp}] - [purpose:{purpose}]\", purp, purpose);\n                    return false;\n                }\n                var stamp = reader.ReadString();\n                if (reader.PeekChar() != -1)\n                {\n                    _logger.LogWarning(LoggingEvents.CustomDataProtectorTokenProviderValidateFailed, \"Token stamp not valid [stamp:{stamp}]\", stamp);\n                    return false;\n                }\n                if (manager.SupportsUserSecurityStamp)\n                {\n                    return stamp == (await manager.GetSecurityStampAsync(user) ?? \"\");\n                }\n                return stamp == \"\";\n            }\n        }\n\n        catch (Exception ex)\n        {\n            _logger.LogError(LoggingEvents.CustomDataProtectorTokenProviderValidateFailed, \"Validate exception [ex:{ex}]\", ex);\n        }\n        return false;\n    }\n\n    /// <summary>\n    /// Returns a <see cref=\"bool\"/> indicating whether a token generated by this instance\n    /// can be used as a Two Factor Authentication token as an asynchronous operation.\n    /// </summary>\n    /// <param name=\"manager\">The <see cref=\"UserManager{TUser}\"/> to retrieve user properties from.</param>\n    /// <param name=\"user\">The <typeparamref name=\"TUser\"/> the token was generated for.</param>\n    /// <returns>\n    /// A <see cref=\"Task{TResult}\"/> that represents the result of the asynchronous query,\n    /// containing true if a token generated by this instance can be used as a Two Factor Authentication token, otherwise false.\n    /// </returns>\n    /// <remarks>This method will always return false for instances of <see cref=\"DataProtectorTokenProvider{TUser}\"/>.</remarks>\n    public virtual Task<bool> CanGenerateTwoFactorTokenAsync(UserManager<TUser> manager, TUser user)\n    {\n        return Task.FromResult(false);\n    }\n}\n\n/// <summary>\n/// Utility extensions to streams\n/// </summary>\ninternal static class StreamExtensions\n{\n    internal static readonly Encoding DefaultEncoding = new UTF8Encoding(false, true);\n\n    public static BinaryReader CreateReader(this Stream stream)\n    {\n        return new BinaryReader(stream, DefaultEncoding, true);\n    }\n\n    public static BinaryWriter CreateWriter(this Stream stream)\n    {\n        return new BinaryWriter(stream, DefaultEncoding, true);\n    }\n\n    public static DateTimeOffset ReadDateTimeOffset(this BinaryReader reader)\n    {\n        return new DateTimeOffset(reader.ReadInt64(), TimeSpan.Zero);\n    }\n\n    public static void Write(this BinaryWriter writer, DateTimeOffset value)\n    {\n        writer.Write(value.UtcTicks);\n    }\n}\n\n}\n```\n. ",
    "dpedrelli": "@HaoK that could work.  I want to extended two of the AspNetUser tables, but differently.  So, I really do need three different ApplicationUser classes.  The ApplicationDbContext.OnModelCreating() is where I remap the tables.  I will try that.  Thanks.. @HaoK I implemented this, but I get an error with multiple calls to services.AddIdentity(), as referenced it https://github.com/aspnet/Identity/issues/1540. Apparently, when I was able to create the migrations, initially, I only had one services.AddIdentity() call.  Adding three of them, even though they use different ApplicationUser classes and different ApplicationDbContext, produces the error:\nAn error occurred while calling method 'BuildWebHost' on class 'Program'. Continuing without the application service provider. Error: Scheme already exists: Identity.Application\nIs there a way to accomplish?  I have three, completely separate sets of Identity tables, in the database, that are mapped to new table names.  Each set of tables is for a different MVC app, but I want to manage all the users from a single MVC app.. @dallancarr \nCurrently, I have:\n```\n       public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n            services.AddDbContext(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n        services.AddIdentity<ApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n        services.AddIdentity<DistributorApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<DistributorApplicationDbContext>()\n            .AddDefaultTokenProviders();\n        services.AddIdentity<SupplierApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<SupplierApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        // Add application services.\n        services.AddTransient<IEmailSender, EmailSender>();\n\n        services.Configure<FormOptions>(x =>\n        {\n            x.ValueLengthLimit = int.MaxValue;\n            x.MultipartBodyLengthLimit = int.MaxValue;\n            x.MultipartHeadersLengthLimit = int.MaxValue;\n            x.BufferBodyLengthLimit = int.MaxValue;\n        });\n\n        services.AddMvc()\n            .AddJsonOptions(x => x.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n    }\n\n```\nHow do I use services.AddIdentityCore()?\nThanks.. @dallancarr I tried the following startup code and still get the error:  \"InvalidOperationException: Scheme already exists: Identity.Application.\"\n```\n            IdentityBuilder builderSelect = services.AddIdentityCore(options =>\n            {\n                // ...\n            });\n            builderSelect = new IdentityBuilder(builderSelect.UserType, typeof(IdentityRole), builderSelect.Services)\n                .AddDefaultTokenProviders();\n            builderSelect.AddSignInManager>();\n            builderSelect.AddRoleValidator>();\n            builderSelect.AddRoleManager>();\n            builderSelect.AddEntityFrameworkStores();\n        IdentityBuilder builderDistributor = services.AddIdentityCore<DistributorApplicationUser>(options =>\n        {\n            // ...\n        });\n        builderDistributor = new IdentityBuilder(builderDistributor.UserType, typeof(IdentityRole), builderDistributor.Services)\n            .AddDefaultTokenProviders();\n        builderDistributor.AddSignInManager<SignInManager<DistributorApplicationUser>>();\n        builderDistributor.AddRoleValidator<RoleValidator<IdentityRole>>();\n        builderDistributor.AddRoleManager<RoleManager<IdentityRole>>();\n        builderDistributor.AddEntityFrameworkStores<DistributorApplicationDbContext>();\n\n        IdentityBuilder builderSupplier = services.AddIdentityCore<SupplierApplicationUser>(options =>\n        {\n            // ...\n        });\n        builderSupplier = new IdentityBuilder(builderSupplier.UserType, typeof(IdentityRole), builderSupplier.Services)\n            .AddDefaultTokenProviders();\n        builderSupplier.AddSignInManager<SignInManager<SupplierApplicationUser>>();\n        builderSupplier.AddRoleValidator<RoleValidator<IdentityRole>>();\n        builderSupplier.AddRoleManager<RoleManager<IdentityRole>>();\n        builderSupplier.AddEntityFrameworkStores<SupplierApplicationDbContext>();\n\n```. I resolved this by making the following calls:\n       ```\n\n\n       services.AddIdentity<ApplicationUser, IdentityRole>()\n           .AddEntityFrameworkStores<ApplicationDbContext>()\n           .AddDefaultTokenProviders();\n\n        IdentityBuilder builderDistributor = services.AddIdentityCore<DistributorApplicationUser>(options =>\n        {\n            // ...\n        });\n        builderDistributor = new IdentityBuilder(builderDistributor.UserType, typeof(IdentityRole), builderDistributor.Services)\n            .AddDefaultTokenProviders();\n        builderDistributor.AddSignInManager<SignInManager<DistributorApplicationUser>>();\n        builderDistributor.AddRoleValidator<RoleValidator<IdentityRole>>();\n        builderDistributor.AddRoleManager<RoleManager<IdentityRole>>();\n        builderDistributor.AddEntityFrameworkStores<DistributorApplicationDbContext>();\n\n        IdentityBuilder builderSupplier = services.AddIdentityCore<SupplierApplicationUser>(options =>\n        {\n            // ...\n        });\n        builderSupplier = new IdentityBuilder(builderSupplier.UserType, typeof(IdentityRole), builderSupplier.Services)\n            .AddDefaultTokenProviders();\n        builderSupplier.AddSignInManager<SignInManager<SupplierApplicationUser>>();\n        builderSupplier.AddRoleValidator<RoleValidator<IdentityRole>>();\n        builderSupplier.AddRoleManager<RoleManager<IdentityRole>>();\n        builderSupplier.AddEntityFrameworkStores<SupplierApplicationDbContext>();\n\n```. ",
    "zmjack": "I tried, but it doesn't work on IIS with ARR 2.5.\nSo, I have to find another solution.\nI use ngnix as reverse proxy server to visit the http server. I can't belive that it's working correctly!\nI don't know what happened, but it's a right way to make Identity working correctly.\nThank you!. ",
    "fe-c": "I just make user name editable. signInManager.PasswordSignIn don't have ability to login with email, so i revert this chanhes. \nThe problem is not in my changes but in the substitution of terms e-mail and user name.. Yes, I can change them at the same time. I can also add one more field for the real user name, and so on.\nPerhaps a better solution would be to create a \"Login\" field, into which developer can write a login, email or phone, and use it in signin methods.\n  . I see now, that it is just model generated with Microsoft.EntityFrameworkCore.SqlServer. Closed.. ",
    "HaythemJ": "For a raison that I ignore, it works when I started the application using my host name instead of \"localhost/\". Is there a configuration for a such thing?. It works fine on a VM having the same environment. And was not obliged accessing the Application using the host name of an FQN. My site on IIS is the default (running on port 80). ",
    "stevenxi": "@blowdart , we just found something similar.\nRather than get 302 from RedirectToAction(), the status was set right after calling .PasswordSignInAsync()\nApparently \"PasswordSignInAsync()\" sets status code 302 when user is valid.\nNormally it's ok, but we're using OTP, and not expecting a redirecting at this stage. (We don't redirect to an OTP code page, but just outputs different view)\nWould this consider to be a bug?  the PasswordSignInAsync() should not handle the redirect operations.\nBefore:\n\nAfter:\n\nWe're using 2.0.3. Similar behavior was not found on 2.1.0. ",
    "reaction1989": "Sorry messed up with branch creation... ",
    "embryologist": "It was a wrong implementation in the service,\nbuggy code of mine,\nI am closing this issue. ",
    "douglampe": "For anyone else who stumbled on this before solving the problem, here is the solution:\nApplicationRole role = await roleManager.FindByNameAsync(model.RoleName);\n            return this.roleManager.DeleteAsync(role);\nCreating a new instance of the role creates a new entity object that is in a new state which then is added to the manager context when delete is called. This is why the \"object has been modified\" error occurs.. ",
    "horbel": "I think I find a kind of solution. I use AspNet.Security.OAuth.Validation assembly: http://prntscr.com/hw1u5m\nBut I still don't find out how to use machine key to \"decode\" bearer token from my Auth server . ",
    "Wayne-Mather": "This is an intranet app, so protection of the cookie is not necessary for my circumstances. \nPity there is no way to setup the data protection with your own IV/seed bytes (or disable encrypting the cookie). That way the cookie can be successfully decrypted by all running servers.\nIf I understand correctly any sub-domain servers are reading the cookie, but because it cannot be decrypted (due to the way the data protection works), they are overwriting it in the HTTP response encrypted with their own protection keys?\nThis would explain why if you login to subdomainA then navigate to subdomainB and access an authorised required action, you are prompted to login. If you don't login and navigate back to subdomainA you are again prompted to login (B has overridden the cookie with it's own encryption - A cannot decrypt - so redirects to login).\n. @HaoK Is there an example any where on how to do this? app.UseCookieAuthentication() is deprecated so this can only be setup when configuring services. \nI have tried several things such as even creating my own AddCustomDefaultProviders() method. But nothing allows me to share the cookie with different instantiated Kestral sites running under the same top-level domain.  I am thinking of a refactor the revolves around not using Identity as it's only used for login and stamping who created/last updated records - I don't and can't use domain logins.\n. @HaoK  Thanks I did try that before but got stuck on how serialise the AuthenticationTicket. It took me an hour of searching to finally find that Microsoft.AspNetCore.Authentication nuget package is in the ASPNET/Security github solution.\nOnce I found that I all I needed to implement the class and drop it it. Worked like a treat in my initial POC testing. I will consider this closed for my scenario.\nWill document what I did below in-case handy for anyone else:\nInside Startup.ConfigureServices():\n```\n services.AddIdentity(o =>\n                 {\n                     o.Password.RequireDigit = false;\n                     o.Password.RequireLowercase = false;\n                     o.Password.RequireUppercase = false;\n                     o.Password.RequireNonAlphanumeric = false;\n                     o.Password.RequiredLength = 5;\n                 })\n                 .AddEntityFrameworkStores()\n                 .AddDefaultTokenProviders();\n         services.ConfigureApplicationCookie(opt => { opt.TicketDataFormat = new UnencryptedTicketDataFormat(); });\n\n```\nUencryptedTicketDataFormat Class:\n```\npublic class UnencryptedTicketDataFormat : ISecureDataFormat\n    {\n        private readonly IDataSerializer _serializer;\n    public UnencryptedTicketDataFormat()\n    {\n        _serializer = new TicketSerializer();\n    }\n\n    public string Protect(AuthenticationTicket data)\n    {\n        return Protect(data, null);\n    }\n\n    public string Protect(AuthenticationTicket data, string purpose)\n    {\n        var userData = _serializer.Serialize(data);\n        return Base64UrlTextEncoder.Encode(userData);\n    }\n\n    public AuthenticationTicket Unprotect(string protectedText)\n    {\n        return Unprotect(protectedText, null);\n    }\n\n    public AuthenticationTicket Unprotect(string protectedText, string purpose)\n    {\n        try\n        {\n            if (protectedText == null)\n            {\n                return default(AuthenticationTicket);\n            }\n\n            var protectedData = Base64UrlTextEncoder.Decode(protectedText);\n            if (protectedData == null)\n            {\n                return default(AuthenticationTicket);\n            }\n\n\n            return _serializer.Deserialize(protectedData);\n        }\n        catch\n        {\n            // TODO trace exception, but do not leak other information\n            return default(AuthenticationTicket);\n        }\n    }\n\n}\n\n```. ",
    "guylando": "Moved the issue to the aspnet security https://github.com/aspnet/Security/issues/1602. cookies. context of type CookieValidatePrincipalContext which is received in our custom ValidatePrincipalAsync has context.Principal.Identity != null and yet context.Principal.FindFirstValue(identityOptions.ClaimsIdentity.UserIdClaimType) is null (I had a mistake in original issue description where I wrote its SecurityStampClaimType when its actually UserIdClaimType).\nI don't have any other information because this issue can't be easily reproduced to give this information. If the cookie expired or the server restarted or whatever, can it cause context.Principal.Identity != null while context.Principal not having UserIdClaimType?\nThanks. ",
    "BrightSoul": "Hi, I'm struggling to make this work with the Data Protection API and @HaoK I need your guidance. My goal is to protect all of the user information: email/username, cellphone and any other property I might have added to the ApplicationUser class and decorated with the [ProtectedPersonalData].\nFirst thing I did was to enable protection of personal data in ASP.NET Core Identity.\nservices.AddDefaultIdentity<ApplicationUser>(o => {\n  o.Stores.ProtectPersonalData = true;\n})\n.AddEntityFrameworkStores<ApplicationDbContext>()\n.AddPersonalDataProtection<LookupProtector, LookupProtectorKeyRing>();\nMy implementation of the ILookupProtector is the following one. I thought it would be a good idea to use the IDataProtectionProvider to protect and unprotect strings since it would be so easy to implement.\npublic class LookupProtector : ILookupProtector\n{\n  private readonly IDataProtector protector;\n  public LookupProtector(IDataProtectionProvider protectionProvider)\n  {\n      this.protector = protectionProvider.CreateProtector(\"UserData\");\n  }\n  public string Protect(string keyId, string data)\n  {\n      return protector.Protect(data);\n  }  \n  public string Unprotect(string keyId, string data)\n  {\n      return protector.Unprotect(data);\n  }\n}\nWhen a users registers an account, his values are indeed encrypted in the database and shown as clear text when he visits his profile page.\nBut then, he can't login. I realized that the value returned by the Protect method of the IDataProtector is NOT deterministic, probably due to the IV randomization of the AES algorithm. What can I do at this point? Would you advise to use an algorithm that produces deterministic results? I don't want to leave the email address unprotected and I don't want to roll my own encryptor. Should I give up using the e-mail as the username? But then how can I know which one is the username when ASP.NET Core Identity calls the Protect method of the ILookupProtector?\nThank you.. Thanks for your response. I'm concerned about this \"something else\" I might end up using. If you leave it to me, it will be for sure a sub-optimal solution, security-wise.\nInstead, I wonder if the Data Protection API could be improved to allow AES with a static IV, as an additional option to the EncryptionAlgorithm enumeration. This way, I could perhaps get deterministic results out of the Protect method. Dictionary attacks could be mitigated by transparently adding/removing some static salt to the string. I know this might sound like a naive solution but I think still better than the one I could roll on my own. And I would benefit from key regeneration.\nThe alternative is to choose proper usernames instead of e-mail addresses. I'm more comfortable with leaving usernames unprotected rather than e-mail addresses. Logins and FindByUsername would work again but then I need a configuration option to tell Identity I want unprotected usernames when invoking the  AddPersonalDataProtection extension method. I can do without FindByEmail.. I understand you don't want to lower the security of a Microsoft branded API but there's a missing stepping stone here. The whole functionality provided by AddPersonalDataEncryptor is unusable unless I, the developer, provide a working implementation of an ILookupProtector. I agree that having a static IV is not the most secure option but then... how should I do it? Security experts at Microsoft should provide some guidance here. With GDPR enforcement just a few days away, developers will adopt the first quick and dirty way they come up with to implement the ILookupProtector and show their bosses the application is compliant.\nAgain, the other option is to leave usernames in clear text and, in order to do that, the Protect method should provide some context about what it is that I'm protecting. Maybe a third parameter with the property name would suffice.. ",
    "critot": "I would not believe that Microsoft's commitment to the GDPR and personal data protection in general is limited to only HTTPS by default, Cookie Consent Bar and Default Data Control actions.... and leave this sensitive implementation to the individual develop....\n@blowdart \nif it's not possible to improve Data Protection Api, EncryptPersonalData should still have a default implementation of ILookupProtector, don't you think?\nthank you.. @blowdart @Rick-Anderson \nthank you for your suggestion, this makes me feel more comfortable. ",
    "egmfrs": "Is there any documentation for this yet?. @blowdart thanks for the confirmation. Could you possibly elaborate on how an attacker could use a \"token expired\" response to their advantage?. ",
    "rh-sfox": "Blowage. ",
    "simont789": "Found the problem. I was using the default migration that was created for SqLite. Was fine when I created another migration file. Cheers!. ",
    "jbagga": "@javiercn Could you take a look when you have time?. It works. @HaoK @Eilon I think I should file a new work item for that. It will need some testing. Filed here. I'll let it be triaged first. @Eilon . Assigning cost: S as I expect to wrap this up within a day or two.. From @Tratcher on January 24, 2018 16:15\nInfinite redirect\nModule | RequestFilteringModule\n-- | --\nNotification | BeginRequest\nHandler | aspNetCore\nError   Code | 0x00000000\nRequested   URL | https://localhost:44379/Account/Login?ReturnUrl=%2FAccount%2FLogin%3FReturnUrl%3D%252FAccount%252FLogin%253FReturnUrl%253D%25252FAccount%25252FLogin%25253FReturnUrl%25253D%2525252FAccount%2525252FLogin%2525253FReturnUrl%2525253D%252525252FAccount%252525252FLogin%252525253FReturnUrl%252525253D%25252525252FAccount%25252525252FLogin%25252525253FReturnUrl%25252525253D%2525252525252FAccount%2525252525252FLogin%2525252525253FReturnUrl%2525252525253D%252525252525252FAccount%252525252525252FLogin%252525252525253FReturnUrl%252525252525253D%25252525252525252FAccount%25252525252525252FLogin%25252525252525253FReturnUrl%25252525252525253D%2525252525252525252FAccount%2525252525252525252FLogin%2525252525252525253FReturnUrl%2525252525252525253D%252525252525252525252FAccount%252525252525252525252FLogin%252525252525252525253FReturnUrl%252525252525252525253D%25252525252525252525252FAccount%25252525252525252525252FLogin%25252525252525252525253FReturnUrl%25252525252525252525253D%2525252525252525252525252FAccount%2525252525252525252525252FLogin%2525252525252525252525253FReturnUrl%2525252525252525252525253D%252525252525252525252525252FAccount%252525252525252525252525252FLogin%252525252525252525252525253FReturnUrl%252525252525252525252525253D%25252525252525252525252525252FAccount%25252525252525252525252525252FLogin%25252525252525252525252525253FReturnUrl%25252525252525252525252525253D%2525252525252525252525252525252FAccount%2525252525252525252525252525252FLogin%2525252525252525252525252525253FReturnUrl%2525252525252525252525252525253D%252525252525252525252525252525252FAccount%252525252525252525252525252525252FLogin%252525252525252525252525252525253FReturnUrl%252525252525252525252525252525253D%25252525252525252525252525252525252FAccount%25252525252525252525252525252525252FLogin%25252525252525252525252525252525253FReturnUrl%25252525252525252525252525252525253D%2525252525252525252525252525252525252FAccount%2525252525252525252525252525252525252FLogin%2525252525252525252525252525252525253FReturnUrl%2525252525252525252525252525252525253D%252525252525252525252525252525252525252FAbout\nPhysical   Path | C:\\tmp\\z\\ContactManager\\Account\\Login\nLogon   Method | Not yet   determined\nLogon   User | Not yet   determined\nRequest   Tracing Directory | C:\\Users\\riande\\Documents\\IISExpress\\TraceLogFiles\\CONTACTMANAGER\n. From @Eilon on February 2, 2018 0:46\nWe should change the code to do this so that everything works better once people make changes:\nc#\n[AllowAnonymous]\n public class LoginModel : PageModel\nWe also need to change it in the Identity.UI package in the Identity repo (cc @javiercn FYI).. From @javiercn on February 2, 2018 1:6\nYeah, we should do this. Will it be too presumptuous to add [AllowAnonymous] to Index.cshtml in the templates by default? The landing page is usually safe to be allowed to viewed anonymously and it can be easily deleted to go back to requiring auth. @javiercn . From @javiercn on February 7, 2018 19:23\nThis is related to the login, register and logout pages I would presume (check if there is anything else that needs to be available without authorization). because you need to be able to access them in all cases.\nIf you are doing [Authorize] globally that's likely what you want.\nIf we add [AllowAnonymous] to random pages that defeats the purpose of having [authorize] applied globally. \nDoes it make sense?. I don't think Logout should be included. You should be logged in to log out, right? Am I missing an edge case? I'll add it to Login and Register and check for others.. From @javiercn on February 7, 2018 19:31\nWhen you logout you are unauthorized and you shouldn't be sent back to the login page.\nPlease try out all possibilities and come up with a list (Social login, 2FA, etc.). From @Rick-Anderson on February 7, 2018 19:36\nLogin and Register. Don't put it on Index, folks know to do that.. Fixing tests. Wanted a quick OK for the files the attribute was added to. @javiercn @HaoK Updated with functional tests. @HaoK Updated. \ncc @javiercn . @HaoK Updated. @HaoK Logging in with an external provider as in the test you linked to https://github.com/aspnet/Identity/blob/dev/test/Identity.FunctionalTests/LoginTests.cs#L180 adds ClaimTypes.NameIdentifier to Claims for the Principal (not AuthenticationMethod). . Added a test for SetPassword and the scenario @HaoK described.\nWIP adding tests for removing external login and resetting authenticator.. @HaoK \n\nscheme of the external provider\n\nHow do you check that? Is that not the IdentityConstants.ExternalScheme ?. @HaoK @javiercn Updated. @javiercn Please let me know when your infrastructure changes PR is merged (tag me or link it here) so I can go ahead with changing/merging this!. Merging now. While using the global authorization filter, ConfirmEmail is not accessible when clicking the verification email link (when logged out). So adding the attribute to it as well.. @mkArtakMSFT PR #1769 addresses the issue. After this PR, Error razor page, and all the pages in Pages/Account have the attribute except AccessDenied. And also none of the Manage actions have it (and they should not). . I have added more tests to ensure anything impacted by AllowAnonymous works when using global authorization filter.. @javiercn I added more tests. Good to go?. What's this about? I don't have any context here. @HaoK Any suggestions on how to verify the user claim? Or how to check for a new cookie? (any other way to test using RefreshSignInAsync). I thought about that and didn't change it because it redirects to SetPassword from the ChangePassword link. So the intent is to go to ChangePassword but it's redirected. Happy to change it though. Just sharing why I left it as it is. I was trying to use ExternalScheme to capture the AuthenticationMethod claim @HaoK mentioned in an earlier comment but ended up with NameIdentifier claim instead. Perhaps because of this https://github.com/aspnet/Identity/blob/dev/test/WebSites/Identity.DefaultUI.WebSite/Pages/Contoso/Login.cshtml.cs#L57? I probably need to wire it up so it uses a different Login?. I had to sign in after registering to get this claim. @HaoK Is this sufficient? I will add tests for other scenarios tomorrow.. There will be another helper method AssertClaimsNotEqual but it is a lot cleaner. Thanks. This is when the user has forgotten the password and clicks the ForgotPassword link. The flow you're talking about is through Manage action ChangePassword. In the ForgotPassword case the user is not logged in and gets an email to reset the password\n\nUser has to access ResetPassword to set a new password (from the link in the email) and is not logged in automatically (has to sign in again)\nBeing redirected to ResetPasswordConfirmation after the previous step makes it clear that a new password was set and the user may log in. \nIf ResetPasswordConfirmation is not allowed to be accessed anonymously, the user will be redirected to the Login page without any confirmation.. @javiercn This was added to include the THIRD-PARTY-NOTICES to the Identity UI package as part of https://github.com/aspnet/Identity/commit/4105ee67e907301539e0e2392e7ae50321b93fb5\nBut as a result it appears in all templates. \n\nDo we just want the notices in the GitHub repo or also as a part of the package? \ncc @Eilon @kichalla . I have made a change to reflect that. It is in the nupkg but does not appear in the generated project. While testing realized that this required the AllowAnonymous attribute for global authorization scenario as well. Looks like this test was accidentally refactored incorrectly here https://github.com/aspnet/Identity/commit/f51af820a5ccf2268b785c62140b29bbb5a24e83#diff-a17189606cd0186d845b9befa0cfa021R65. ",
    "joeizang": "I was gloomy that this issue was even forgotten. Thanks for all the work being done @ajcvickers . @ajcvickers the documentation does look good. Thanks again.. ",
    "tomasmot": "I had the same issue. I made my base class abstract and it works as intended.. ",
    "lkubis": "I've just released Cassandra provider v2.0.0. Can somebody merge it?. ",
    "brechtb86": "Found it, turns out you cannot use type parameters in the IdentityDbContext.. ",
    "robfarmergt": "Thank you @blowdart. What I'm trying to achieve is for Identity to authorize the user for sliding time period of 30 minutes.\nWith the settings above and setting rememberMe: true during SignIn is that achieved? I can see the cookie being set with an expiration date and that it \"slides\" with additional requests but I want to make sure Identity is also set to have the authorization work the same way.. As far as the cookie on the client that seems to be the case. I can remove it and behavior stays the same.\nWhat I want to confirm too is that even though the cookie is set to expire, if someone were to try to use that cookie after the expiration will the server invalidate the request?. Thanks so much @blowdart and @HaoK ! Really impressed with the work being done! Thanks again!. @blowdart meaning the expiration of the cookie is tied to the expiration of the ticket. So even if someone tried to fudge the cookie expiration the server will reject it?. ",
    "Amethi": "Thanks. I'm using ASP.NET Core Identity with Identity Server 4 to service OIDC clients.\nI did try the CustomCookieAuthenticationEvents approach from that article but it didn't fire for me. For now I'd be happy with a sign-in event I could hook into.. I've solved this. I needed to do it this way:\nStartup.cs:\nservices.AddSingleton<IConfigureOptions<CookieAuthenticationOptions>, ConfigureCookieOptions>();\nNEW: ConfigureCookieOptions.cs:\n```\ninternal class ConfigureCookieOptions : IConfigureNamedOptions\n    {\n        private readonly IConfiguration _configuration;\n    public ConfigureCookieOptions(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    public void Configure(CookieAuthenticationOptions options) { }\n\n    public void Configure(string name, CookieAuthenticationOptions options)\n    {\n        options.Events = new DatabaseCookieAuthenticationEvents(_configuration);\n    }\n}\n\n```\nNew: DatabaseCookieAuthenticationEvents.cs:\n```\n  public class DatabaseCookieAuthenticationEvents : CookieAuthenticationEvents\n    {\n        private readonly IConfiguration _configuration;\n    public DatabaseCookieAuthenticationEvents(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n\n    public override Task ValidatePrincipal(CookieValidatePrincipalContext context)\n    {\n        if (!context.Principal.IsAuthenticated())\n            return base.ValidatePrincipal(context);\n\n        if (!context.Principal.Claims.Any(q => q.Type.Equals(\"sub\")))\n            return base.ValidatePrincipal(context);\n\n        using (var connection = new SqlConnection(_configuration[\"DefaultConnection\"]))\n        using (var command = new SqlCommand())\n        {\n            connection.Open();\n            command.Connection = connection;\n            command.CommandText = $\"SELECT [Status] FROM AspNetUsers WHERE [Id] = '{context.Principal.GetSubjectId()}'\";\n\n            var status = (UserStatus)command.ExecuteScalar();\n            if (status != UserStatus.Active)\n            {\n                context.RejectPrincipal();\n                context.HttpContext.SignOutAsync(IdentityServerConstants.DefaultCookieAuthenticationScheme).Wait();\n            }\n        }\n\n        return base.ValidatePrincipal(context);\n    }\n}\n\n```\nNot very elegant, but I couldn't work out how to get UserManager into the ConfigureCookieOptions singleton.. ",
    "oferns": "Thanks for getting back to me. I suppose I can see the reasoning behind that. ",
    "PacmanLazy": "But what if I want different time cookies/sessions? I tried to modify\nheaders, but it doesn't work. I can't find the way to control or modify\nthat not only with startup file.\n2018-02-15 22:20 GMT+02:00 Barry Dorrans notifications@github.com:\n\nWhy can't you use remember me when you're signing in, which as you say,\nworks?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1624#issuecomment-366049440,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALBoUpT0ay4tRyglEi2o-n4VYxGKvwJkks5tVJGLgaJpZM4SECpn\n.\n. \n",
    "raffaeler": "Could you please confirm that RTM implementation does not require the following anymore?\nservices.AddAuthentication(o =>\n            {\n                o.DefaultScheme = IdentityConstants.ApplicationScheme;\n                o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\n            })\n            .AddIdentityCookies(o => { });\nI get an error of scheme being already registered.... ",
    "medeirosraul": "When I use AddDefaultIdentity like the template with a separated dll for identity entities, this error comes:\n\nInvalidOperationException: Unable to resolve service for type 'Microsoft.AspNetCore.Identity.RoleManager1[Microsoft.AspNetCore.Identity.IdentityRole1[System.Guid]]' while attempting to activate 'Beehouse.Essentials.Identity.BeehouseClaimsPrincipalFactory'.\n\nThe complete code is: \n        // Add identity\n        services.AddDbContext<IdentityContext>(options =>\n                options.UseSqlServer(Configuration.GetConnectionString(\"IdentityConnection\"),\n                    b => b.MigrationsAssembly(\"Beehouse.Project.Web\")))\n            .AddDefaultIdentity<IdentityUserExtended>(options =>\n            {\n                options.Password.RequireDigit = false;\n                options.Password.RequireUppercase = false;\n                options.Password.RequireNonAlphanumeric = false;\n                options.Password.RequiredLength = 6;\n                options.Password.RequireLowercase = false;\n            })\n            .AddEntityFrameworkStores<IdentityContext>()\n            .AddClaimsPrincipalFactory<BeehouseClaimsPrincipalFactory>();\n\nWhat can I do to resolve this?. ",
    "dnxit": "It'll be nice if option is there to give the time span as parameter \njust like we have in Email Confirmation Tokens but for PhoneNumberToken its by default 3 minutes I guess ?\nso would it be possible to make it a parameter ?\n_userManager.UserTokenProvider = _userManager.GetDataProtectionProvider(\"EmailConfirmationToken\", TimeSpan.FromDays(7));\n. ",
    "brgrz": "@brockallen @blowdart two answers neither of which detailing why this is implemented as it is (wrong, imo) and an immediate closure of this issue. \n. @blowdart what does identityserver have to do with asp.net core Identity internal code and VS templates?. Not really, greenfield asp.net core projects, created from templates, could easily and safely include it, you would not break anything. Only save probably hundreds of developer hours monthly worldwide.. Who actually maintains the templates? What repo are they in?. ",
    "iAmBipinPaul": "@javiercn \nNo there isn't any reason/scenario as  of now  that prevents me from using Razor page version with MVC. It's just my personal preference to have everything in one stack. \n\nIn a future release we plan to update the identity scaffolder to support scaffolding only specific pages and provide a UI for selecting which pages you want, but for now the identity scaffolder is all or nothing and you have to remove the pages you don't want.\n\nI'm thinking in this way later it can have some flags to generate Razor Page/MVC/ or JUST Controller and Models (API).  . Okay , Thank you for the info. Is it okay to close this issue ?. ",
    "badamsdev": "I agree with @iAmBipinPaul, I would also prefer MVC scaffolding.. Deleted database and migrations, added new migration and updated database. Columns still missing from AspNetUsers table. \nI again deleted the database, then recreated using the last migration. This time the table was populated correctly.. ",
    "aguacongas": "@ajcvickers / @HaoK  did you have time to check that ?. ",
    "jenyayel": "Thanks for taking time to explain. It makes sense. I'm fine with the workaround for now. . ",
    "Tamaletjie": "I am working with the Identity non-core version. . ",
    "alexandre-spieser": "Build error:\nAn assembly specified in the application dependencies manifest (MSBuild.deps.json) was not found:\n    package: 'Microsoft.ApplicationInsights', version: '2.0.0'\n    path: 'lib/dotnet5.4/Microsoft.ApplicationInsights.dll'\ndotnet(5480,0x7fffb8d183c0) malloc: *** error for object 0xffffffffffffffff: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\nNo output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.\nCheck the details on how to adjust your build configuration on: https://docs.travis-ci.com/user/common-build-problems/#Build-times-out-because-no-output-was-received. Thanks for this \ud83d\udc4d. Have a great day!. ",
    "kichalla": "Done as part of fixing https://github.com/aspnet/Identity/issues/1690. cc @javiercn . Not a flaky test actually. Looking at test history, it has been very stable. The failure mentioned in this bug is a one off thing I would say. We could add retry logic as a general good practice, but I wouldn't consider it as a high priority.\n\n. > IdentityUI_ScriptTags_SubresourceIntegrityCheck failed again.\n'failed again' seems incorrect here...both the OP and the new comment point to the same build... Not a flaky test actually. Looking at test history, it has been very stable. The failure mentioned in this bug is a one off thing I would say. We could add retry logic as a general good practice, but I wouldn't consider it as a high priority.\n\n. This test failed because it was unable to reach ajax.aspnetcdn.com. Sure, there's a possibility that it could fail again for similar reasons. I was thinking of adding a retry logic to these tests, but was thinking that could be done at a lower priority considering the test's history. (Even if we add retry logic, its still not fail proof though). No, there was no bug that was fixed.. I would like to also add some functional tests with the custom identity user model but the currently test website that we have has a razor page which seems is for testing the overriding scenario (?) and uses the model as IdentityUser which doesn't work for my scenario (even if i have a different Startup file having a custom identityuse). Any suggestions? \nIs it fine to create a separate website for this purpose? It feels like a overkill but we ideally want an end-to-end test.. I couldn't find a way to get this value. I tried IUserPasswordStore but that service seems to be not necessarily registered. @HaoK any ideas?. Doing these extra calls for logging seems overkill. We can do the LoggerMessage.Define pattern for all the logging here.. Yeah, should be ok, but will leave it as it is for now as we are going to revisit this api for rc1. Ah, RequestAborted was the one I was looking for but didn't realize about the name. Thanks, will update.. I will file a separate issue for this.. This seems incorrect as only a logged in user should be able to reset the password. Users typically reach this after they login | reset password | reset password confirmation...so i think this should not be allowanonymous. This should probably explicitly have Authorize attribute.. We probably need a consistent experience of using these attributes. We currently do like the following to authorize some areas. @javiercn ?\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/IdentityDefaultUIConfigureOptions.cs#L37-L38. Ah yes, you are right. I confused myself with Chnage Password flow. Looks good to me then!. await. @natemcmaster I am looking into 'src' here because IdentityUI's .cshtml ~~files are embedded in its assembly~~ (files are precomipled) and its a bit more involved in getting their content (even though that is the ideal thing to do in tests). We can file a follow-up issue to fix this, if needed.. ",
    "farhadibehnam": "My problem is fixed.the navigation property Users in your ApplicationRole class isn't needed.\nThe relationship between AspNetUsers and AspNetRoles tables is present in a separate table AspNetUserRoles as foreign keys. So, when you want to query the number of users in a given role, you need to interrogate that table AspNetUserRoles. In order to achieve that you can call\n_userManager.GetUsersInRoleAsync(\"roleName\").Result.Count;\nTo do that, implement your Index action method like this:\n```\npublic IActionResult Index()\n{  \n  List models = new List();\n  models = _roleManager.Roles.Select(r => new ApplicationRoleViewModel\n        {\n            Id = r.Id,\n            Name = r.Name,\n            Description = r.Description\n            // notice I am not assigning NumberOfUsers here.See further down...\n        }).ToList();\n    foreach(var m in models)\n    {\n      m.NumberOfUsers = _userManager.GetUsersInRoleAsync(m.Name).Result.Count;\n    }\n    return View(models);\n\n}\n```\nHope this helps.. ",
    "vmass20": "\nThis is now documented here: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/customize_identity_model?view=aspnetcore-2.1\n\nLink seems to be dead already.\n. ",
    "binhghi5": "Browser cannot create AspNetCore.Antiforgery and .AspNetCore.Identity.Application cookie => clear cookies will not fix the problem. There are no cookie was stored\nThe web app will be hosted on a local server, run on a local network, with a http URL. And we are stuck here!. I created new project and disabled SSL in the beginning. Now i'm fine.. ",
    "kieronlanning": "Yet to find a definitive resolution for this.. ",
    "ryhled": "@Eilon the only steps i did was:\n\nCreate new 2.1 Web application (installed vs2017 preview 2 update earlier) with individual user accounts auth.\nRemove the 'AddDefaultUI()' and deleted the 'Areas' folder.\nRun project (IIS Express) and visit /Identity/Account/Register in browser.\n\nStartup code (after i removed AddDefaultUI):\n```\npublic class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<CookiePolicyOptions>(options =>\n        {\n            // This lambda determines whether user consent for non-essential cookies is needed for a given request.\n            options.CheckConsentNeeded = context => true;\n            options.MinimumSameSitePolicy = SameSiteMode.None;\n        });\n\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(\n                Configuration.GetConnectionString(\"DefaultConnection\")));\n        services.AddIdentity<IdentityUser, IdentityRole>(options => options.Stores.MaxLengthForKeys = 128)\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseBrowserLink();\n            app.UseDeveloperExceptionPage();\n            app.UseDatabaseErrorPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Error\");\n            app.UseHsts();\n        }\n\n        app.UseHttpsRedirection();\n        app.UseStaticFiles();\n        app.UseCookiePolicy();\n\n        app.UseAuthentication();\n\n        app.UseMvc();\n    }\n}\n\n```\nThe raw exception details are:\nSystem.InvalidOperationException: A suitable constructor for type 'Microsoft.AspNetCore.Identity.UI.Pages.Account.Internal.RegisterModel' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.FindApplicableConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap)\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type instanceType, Type[] argumentTypes)\n   at Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageModelActivatorProvider.CreateActivator(CompiledPageActionDescriptor actionDescriptor)\n   at Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.DefaultPageModelFactoryProvider.CreateModelFactory(CompiledPageActionDescriptor descriptor)\n   at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvokerProvider.CreateCacheEntry(ActionInvokerProviderContext context, FilterItem[] cachedFilters)\n   at Microsoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvokerProvider.OnProvidersExecuting(ActionInvokerProviderContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ActionInvokerFactory.CreateInvoker(ActionContext actionContext)\n   at Microsoft.AspNetCore.Mvc.Internal.MvcAttributeRouteHandler.<>c__DisplayClass12_0.<RouteAsync>b__0(HttpContext c)\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.<Invoke>d__6.MoveNext()\n   at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.MigrationsEndPointMiddleware.<Invoke>d__4.MoveNext()\n   at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()\n   at Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.DatabaseErrorPageMiddleware.<Invoke>d__6.MoveNext()\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\nI guess it should be easily reproducable (as long as it isnt caused by something locally on my end). But i can try to fetch whatever you need :).. ",
    "ekhtiari": "@javiercn Hi\nI have same problem but i receive this error on my windows server not in my visual studio\nis there any thing to update or some component to register or something else ? \nThanks. @javiercn i find main problem \nI init new project with identity module ( New default UI for identity).\neverything is good in visual studio or when i use dotnet run command in project folder \nbut when i publish project i receive this error \ni try many things like : \n1.use this line in view file @model Microsoft.AspNetCore.Identity.UI.Pages.Account.Internal.LoginModel\ninstance @model Loginmodel\n2. add these code to _layout.cshtml \n@using Microsoft.AspNetCore.Hosting\n@using Microsoft.AspNetCore.Mvc.ViewEngines\ni thing when i use this command to generate identity page , something not work correctly : \ndotnet aspnet-codegenerator identity -dc WebApplication.Data.ApplicationDbContext\ni test new init project and publish it and everything was correctly but when i use code generator to create identity page i receive many error about login and register and other thing.. \nso .. how can i fix this ? \n. @javiercn \nin this repro if you run project in tool folder everything is good and login part and register part is work correctly \nbut if run project in published folder ( bin/Release/PublishOutput/) and use login or register you see my error.\nidentity ui\na question : \nis global tooling cause my problem ? i forgot any thing to install ? i install last version on net core . \n. ",
    "chrisdpratt": "I'm running 2.1.0-rc1-final, and I cannot disable the default UI. I have no Areas directory, no Pages directory, and I'm not explicitly calling AddDefaultUI() in Startup.cs. Still, when I go to a protected action, I get redirected to /Identity/Account/Login, which actually loads just fine with the default UI. However, I have my own MVC controllers and actions, specific my own sign in action that should be used as the login URL. I even explicitly added the following in Startup.cs:\nservices.ConfigureApplicationCookie(options =>\n{\n    options.LoginPath = \"/signin\";\n    options.LogoutPath = \"/signout\";\n    options.AccessDeniedPath = \"/signin\";\n});\n\nThis seems to be being entirely ignored, or more likely, overwritten by the default UI's IdentityHostingStartup.cs.\nThe default UI should be entirely opt-in. In other words, if you don't add AddDefaultUI() or actually scaffold it into your project, it should not exist at all. Even better, I think this should be a separate NuGet package, simply to make adding it entirely explicit.\nUPDATE\nSo, I found the problem was in using services.AddDefaultIdentity. You must use services.AddIdentity instead, which oddly makes you specify a TRole type param, when neither AddDefaultIdentity nor AddIdentityCore do. Regardless, that solves the problem of the default UI being included, but you still get redirected to /Identity/Accounts/Login. To fix that, you need to explicitly change the URLs via services.ConfigureApplicationCookie and make sure that that is after the call to services.AddIdentity. Then, everything works as it should.\nUPDATE 2\nSo using AddIdentity led to some exceptions as it still doesn't add all the necessary services apparently. I dug in to what AddDefaultIdentity is doing and recreated it sans AddDefaultUI. \nservices.AddAuthentication(o =>\n{\n    o.DefaultScheme = IdentityConstants.ApplicationScheme;\n    o.DefaultSignInScheme = IdentityConstants.ExternalScheme;\n})\n.AddIdentityCookies(o => { });\n\nservices.AddIdentityCore<ApplicationUser>(o =>\n{\n    o.Stores.MaxLengthForKeys = 128;\n})\n.AddSignInManager()\n.AddDefaultTokenProviders();\n\nservices.ConfigureApplicationCookie(o =>\n{\n    o.LoginPath = \"/login\";\n    o.LogoutPath = \"/logout\";\n    o.AccessDeniedPath = \"/access-denied\";\n});\n\nThere should really be an extension method that bootstraps a default Identity setup without the default UI included, and then either just have devs add AddDefaultUI if they want it, or have an extension method that does the default stuff and that. It's kind of ridiculous that you have to resort to defining all this in your Startup.cs instead of the much more simplistic services.AddDefaultIdentity, just because you don't want the default UI as well.. ",
    "PendelinP": "Hi there, as @chrisdpratt already mentioned here it would be cool to have a simple without the default UI included. Since all my login UIs are handled via an Angular WebApp the server-side pages are unnecessary.. ",
    "phantom2017-Nov": "In this age of \"decoupled\" services, I am not sure whose brilliant idea it was to tightly couple the core Identity implementation with a \"default\" UI ! Sorry to be blunt, this is probably among the dumbest ideas I have encountered in a long time. I hope in the next version, sanity prevails & they at least provide a clean way to not include the \"default\" UI. The default identity template project (in previous versions)  with AccountManager implementations etc, worked just fine - yes, we had to do more work to provide our own UI pages for all identity stuff, but that provided excellent flexibility. To couple the core identity implementation along with some \"default\" (useless) UI (where everything would probably have to be over ridden)  into ONE \"Razor library\" is nothing short of a disaster.  I for one am not interested in \"scaffolding\" on top of your default UI. . \n\n@andyfurniss4 I've followed your solution above and I've created a new controller for managing the login and logout requests but I'm getting stuck in a redirection loop on the login page.\n\nI think you may be missing the call to app.UseAuthentication(); (before  app.UseMvc , typically in the Configure method) ... the UseAuthentication() call causes the authentication cookie to be passed on requests subsequent to a successful Login, \nI used the same Services configuration you have suggested and had the same issue till I realized that I was missing the \"UseAuthentication\" call .. . ",
    "trailmax": "So it is. How did I miss it?? total \"duh!\" on my part!. Maybe that link should be on Codeplex page (can you still update the landing page?) and on readme in this repo, clearly stating that it is for MVC5 only?. ",
    "olugt": "@pranavkm @HaoK Please, this is worth your attention, unless I'm not knowledgeable enough about if Identity already has a scalable and viable solution to this.. The great part of this proposal is that authentication point IDs scale with the solution since they don't have to be changed, only the roles and users associated with it have to be re-enlisted.. @PinpointTownes Thank you.\nPolicy-based authentication does not entirely tackle all of what I'm asking for. How about having to hard-code role names? And besides, what I am asking for qualifies as an entirely new feature if critically looked at.. @blowdart Thanks.\nBut when you create policies, somewhere along the way you hard-code role names. And that's still a problem.\nFor now, what I personally do is, in a database, I assign a GUID as ID to every role name, so that when I change role names their references will still be maintained. Then, I enlist the IDs of roles under IDs of Authentication Points, which I then use instead of policies. I don't get to use the full capacity of Identity for real, mainly because of having to hard-code role names, even though hard-coding policy names isn't a problem. This seems like a crude approach (or not) but it works and is extremely powerful.\nSo, because this approach can actually be tiresome, it will be great if other people and/or the Identity team can just take a closer look at it and implement it or something more refined. Having to hard-code role names is enough reason for a change, even though Identity seemingly provides a way to rename roles, but which does not still prevent hard-coding of role names.. @blowdart Thanks, again.\nActually, I now get it more clearly that claims and policies solve ALMOST ALL of the problems if used cleverly. They make the problem of hard-coding ALMOST gone too. In the documentation, there should have been more on claims and policies, but there's very little. Roles can essentially be done away with because claims can actually replace the use of roles, as you rightly said. This should also be emphasized in the documentation.. @blowdart \nAlthough most claim values are essentially permanent and don't need to change, e.g. setting an age limit, etc. But I am still concerned about having to hard-code something that should be changeable as claim values.\nI'm not yet satisfied but I can/would improvise on top of what claims and policies now provide.. OK. Great. That's pretty much what's to be done, getting data from other sources.. ",
    "steve-warren": "@HaoK, Would it make more sense to use the already implemented Rfc6238AuthenticationService.GenerateRandomKey() to generate the key? I noticed it is dead code and no longer referenced.\nTo me it would make sense to have key generation tied to the implementation of the algorithm as the length of the key depends on the length of the HMAC output (in this case, HMACSHA1, 160 bits).. ",
    "Phrohdoh": "Thanks @javiercn - if I get some free-time soon I'll attempt to create a simple repro project.. ",
    "aneequrrehman": "Sorry, my bad, just figured I could just register IUserValidator and IPasswordValidator  implementations to be used in the aforementioned methods.. ",
    "Niels-V": "There are limits to the size of your request headers. Both IIS as Kestrel have options to configure these limits. So you have the option to increase this limit. . There might also be restriction by http.sys. Check these SO posts:\nhttps://stackoverflow.com/questions/35749180/do-web-config-header-size-limits-override-http-sys-limits-in-the-registry\nhttps://stackoverflow.com/questions/37112367/size-of-the-request-headers-is-too-long\nBut for another, more robust, solution you can also look into implementing a SessionStore. It is a settable property on the CookieAuthenticationOptions, designed for these kind of issues. The complete set of claims for the user are stored in the specified session store, and only a session identifier is stored in the cookie, greatly decreasing the site of the cookie.. ",
    "maxwang": "Hi Niels,\nThanks for your information. I have changed IIS request limit size but does not work. I will check Kestrel options.\nThanks again.. Hi Niels,\nI checked default cookie Kestrel size  is 32K and my total cookie size is less than 32K. And I also did another test and change MaxRequestHeadersTotalSize to 320K as below:\n` .UseKestrel(options =>\n                {\n                    options.Limits.MaxRequestHeadersTotalSize = 327680;\n            })`\n\nStill does not work. Please check my seesions:\n\nThe IIS max request size has been changed. \nI got the error after I login when I added too many roles for a user in my test envirment.\nThanks.. Hi Niels,\nThanks for help. It seemed that this is IIS issue. It works after I modified registry entry for MaxFieldLength,MaxRequestBytes. \nIt is very strange that modified httpRuntime maxRequestLength with IIS Configuration Editor does not work. But this is not Asp.net Identity problem.\nThanks again.\nRegards,\nMax. Hi Niels,\nSessionStore is another good idea. I thought about that before. But just does not know how complex it is. And tried to find a simple way to fix current issue. Please send me a link if you have a good exmaple for seesionstroe. I might need look into it.\nThanks for your great support.. I am using claim based authorization. The user claims size depend on the permissions they have. \nI tried cookie session store, it works. \nThanks for Niels and blowdart's help.. ",
    "LiamDotPro": "Sadly that was my first port of call alongside asking in the JavaScript room, still haven't found why it's not possible :/. I've managed to fix my code and I'll be releasing an npm package that will allow people building micro services that want to be able to provide authentication from identity server hashed passwords possible.. ",
    "diymine": "or my understanding is wrong?. I find a way to login user by email, first get the user by email, then call login method by PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure) method. ",
    "dviry": "In this specific case, if a user fails the login for options.Lockout.MaxFailedAccessAttempts = 2; the code is only setting the lockoutEnd date but not the lockoutEnabled so he can basically still login.\nRegarding your code quote, that also does not work since it only sets the lockoutEnabled but not the lockoutEnd -> the check in IsLockedoutAsync() will return False if the lockoutEnd is not set.\nAll this also fails in the VisualStudio Identity.Core sample template as well - in fact, it's even worse there as the AccessFailedCount column never gets incremented.\nCheers\n. IsLockedoutAsync() expects BOTH LockoutEnabled AND LockoutEnd, otherwise it will always return FALSE (not locked out).\nPlease read again my comment!. I'll try again ;) \nIf that's how it supposed to work, then why:\na. CreateAsync for new users only sets the LockoutEnabled but not LockoutEnd?\nb. failed logins only sets the LockoutEnd and not LockoutEnabled?\nIn both of those cases the user should be locked out but instead the method IsLockedoutAsync() returns false (so the user can still login).\nI'd urge you to read again the whole thread...\nCheers. The default SigninManager provided with Identity.Core does not do that, and neither does the sample provided by the Visual Studio template.\nI am pretty sure it's at least 2 people on this thread trying to tell you the code is NOT working correctly (UserManager in combination with SignInManager), so I suggest you try it out and then we'll see who is confused ;)\nCheers. I understand that things change and designs/templates need to be adjusted, but in the short term at least an update to the documentation would probably be helpful for all sides.\nIn it's current state the following configuration has absolutely no effect, which I am sure was not the original intent...\n//lock out attempt\noptions.Lockout.AllowedForNewUsers = true;\noptions.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\noptions.Lockout.MaxFailedAccessAttempts = 2;\nCheers. Thanks, but it seems we are using different UI templates :(\nI've used the latest on VisualStudio 2017, but I don't have .AddDefaultIdentity, instead only .AddIdentity:\n        services.AddIdentity<ApplicationUser, IdentityRole>(options =>\n        {\n            options.Lockout.MaxFailedAccessAttempts = 3;\n            options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(3);\n\n            options.SignIn.RequireConfirmedEmail = true;\n        })\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\nI am using the latest NuGet:\n        <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\n\nCheers. Yes of course ;)\nBut really just by looking at the sourcecode (linked in my other replies) this can't work - unless I am looking at the wrong files or missing something...\nCheers. ",
    "ClassicDarkChocolate": "Found it. https://github.com/aspnet/Identity/pull/1714. ",
    "datobu": "I just implemented a check if the AD username is in my user table in a middle ware and it seems to work pretty well. Tomorrow I will have a look on how to read the roles of the user out of the database... I guess I do need Identity for that, don't I?\nOh interesting I used another Useraccount at work, didn't know I have two. Sorry for that (I am Misanthrop87). ",
    "Misanthrop87": "I tend to agree, however there exist 2 reasons which I don't really know how to argument against:\n-This intranet will include a ton of different IT-Systems which consist of different modules and I guess hundreds of different roles will therefore exist. The IT team so far says this will be a lot of AD-groups and they don't like it.\n-As we are a bigger firm, I am not sure whether our internal IT-department has the necessary rights to manage the AD-groups. And to avoid a lot of over-administration the current plan is to have the user & role management in a seperate db.\nBut I will talk to the project-team again and suggest that we go for the AD-groups solution because I think the advantages heavily outweigh those arguments. \nIs there a tutorial for having windows authentication and load the groups from the AD and use them as roles?. I just found out that it works out of the box, when windows authentication is activated it takes the AD groups and imports them as roles... Unbelievable! But this should be written somewhere more obviously, as I was searching several hours on the internet, not noticing that it was already working.... ",
    "unruledboy": "Same problem, I reckon it is a logic problem with RedeemCodeAsync.. Same problem, I reckon it is a logic problem with RedeemCodeAsync.. ",
    "melvillo": "OK. That's interesting. So which means I don't need to copy and store all of these recovery codes after I set up 2fa, but just need to keep any one of them then that's enough. And when recovery it, I just need to use any one of these codes, not all.\nHmm, if the UI can tell it more clear, that would be better.\nThanks.. ",
    "cw882": "Created in error (im a total noob). ",
    "jtheisen": "The main problem here is that the error messages aren't that helpful. You only get\nAn error occurred while accessing the IWebHost on class 'Program'. Continuing without the application service provider.\n\nin the console and then a failure to instantiate the context as the connection string isn't available.\nPerhaps that error that occurred there has a message on its own that could be displayed as well?. ",
    "smoro88": "I ended up using DI in my Controller and loading the info into a ViewBag and then referencing it in the View.\nThanks for suggestion.\nSteve. I did not know you can DI into View.  Thanks for the suggestion because that was even easier. Learn new things every day.\n@inject UserManager userManager\nuserManager.Users.Select(s=>s.Email)\nMuch appreciated.\nSteve\n. ",
    "zahasoft": "I know that. It was just the act of my annoyance. Actually I think that it is better to separate this huge classes to smaller with less injected dependencies or to remove null checks for some dependencies in their constructors so to eliminate the need to be mocked 5-6 classes just to simulate return value for one method only.. ",
    "Ruud-cb": "Hi Haok,\nyou refer to these?:\nhttps://www.nuget.org/packages/Microsoft.AspNet.Identity.Owin/\nand https://www.nuget.org/packages/Microsoft.AspNet.Identity.EntityFramework/\nI must admit I didn't update them to the latest version but what do you suggest exactly?\nEverything within the .NET Standard library is now using the AspNetCore.Identity.xx things, how would a custom identity store look like that uses the new Identity objects (IdentityUser, UserManager, UserStore, IdentityDbContext)? . Ok thanks for clarifying this, saves some time trying to use the new Identity stuff in .NET Framework. I would need to, like you said, write some custom 'conversion' so that for example the old UserManager is using the new UserManager. Do you perhaps have some guidance on doing this? Since in .NET Core I think it is not really recommended to create your own UserManager due  the high amount of additional objects that need to be created.. Yea I eventually managed to solve it by having 1 DB context specifically for the authentication and the rest all in EFCore, then creating interfaces for IApplicationUser to facilitate the UserManager's, I will some day update my stackoverflow with an answer for new readers. Thanks for the help anyway.  . ",
    "Yeeler": "Thanks guys. I missed that path. After I add it and run build.cmd, I can compile the code without errors.\nIs there a document can walk me through how to use it? Which project should I use to generate database? I am new to .Net core. Thanks for the help.. I have set default project to 'sample\\IdentitySample.DefualtUI in Package Manager Console, and run 'update-database'. \nI got an error 'The EntityFramework package is not installed on project 'Identity.DefaultUI.WebSite'.'\nI checked its dependency which has 'Microsoft.EntityFrameworkCore.Tools;.\nWhy I cannot run 'Update-Database'?. D:_GIT\\Identity\\samples\\IdentitySample.DefaultUI>dotnet ef database update\nNo executable found matching command \"dotnet-ef\"\nPM> Add-Migration ddd\nThe EntityFramework package is not installed on project 'IdentitySample.DefaultUI'.\nI am really confused. Normally, I do update-database in EF6. . This is my dotnet, not sure if I have the right version\n\n. \nwhy can't I use ' dotnet ef database update'?. thanks for the help @javiercn \nI found the following url. It helped, just like you said I should replace the default .net core with whatever in %userprofile%/.dotnet/x64.  I can start the sample now.\nhttps://github.com/aspnet/Home/wiki/Building-from-source#path. ",
    "tidyui": "Ok so we've found an issue in the EntityFrameworkCore repo where the above behavior seems to be \"by design\". \nhttps://github.com/aspnet/EntityFrameworkCore/issues/11162\nAs this seems to be the case, shouldn't the priority here be to create the AspNetCore Identity implementation in such a way that it becomes database agnostic, as it already is cross-platform. Looking at the migration created the only affected tables are RoleClaims and UserClaim. In both these tables the use of a primary key is pretty redundant as the row is unique from the other columns.\nIf there for some reasons I don't know is a need for a separate Id column maybe a different, database independent type, could be used?\nIf this is not possible either, is there a way of overriding these entities & use custom ones instead that could be implemented differently?\nBest regards\nH\u00e5kan. ",
    "CraigCarpenter": "Yes. Here's an example:\n```\nusing System;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nnamespace issues_1798\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            BuildWebHost(args).Test().Run();\n        }\n    public static IWebHost BuildWebHost(string[] args) =>\n        WebHost.CreateDefaultBuilder(args)\n            .UseStartup<Startup>()\n            .Build();\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseInMemoryDatabase(Guid.NewGuid().ToString()));\n\n        services.AddIdentityCore<IdentityUser<Guid>>(options => {})\n                .AddRoles<IdentityRole<Guid>>()\n                .AddEntityFrameworkStores<ApplicationDbContext>();\n\n        //you can add the IRoleStore manually but it doesn't seem to be added by .AddRoles() above\n        //services.AddScoped<IRoleStore<IdentityRole<Guid>>, RoleStore<IdentityRole<Guid>, ApplicationDbContext, Guid>>();\n    }\n\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n    }\n}\n\nstatic class HostExtention {\n    public static IWebHost Test(this IWebHost host)\n    {\n        using (var scope = host.Services.CreateScope())\n        {\n            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole<Guid>>>();\n        }\n        return host;\n    }\n}\n\nclass ApplicationDbContext : IdentityDbContext<IdentityUser<Guid>, IdentityRole<Guid>, Guid>\n{\n    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)\n        : base(options)\n    {\n    }\n}\n\n}\n.\ndotnet --info\n.NET Command Line Tools (2.1.4)\nProduct Information:\n Version:            2.1.4\n Commit SHA-1 hash:  5e8add2190\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.17134\n OS Platform: Windows\n RID:         win10-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\nMicrosoft .NET Core Shared Framework Host\nVersion  : 2.0.5\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\n```. Here's the full csproj\n```\n\n\nnetcoreapp2.0\naspnet-issues_1798-325361C0-AA0E-4D75-ABEF-403ABF1E276F\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n. Thanks.\nOn Mon, 21 May 2018 at 14:26, Hao Kung notifications@github.com wrote:\n\nI'll add a test in 2.1 to make sure this is covered before closing the bug\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1798#issuecomment-390575171,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFC5wveF-auSyF75pKE4yARq3y7mnJ_wks5t0mwTgaJpZM4UGCpC\n.\n. \n",
    "kamilmahmood": "When updating an entity it requires to check SecurityStamp is same or not. But UserManager change SecurityStamp before calling Update so my method fails everytime.\npublic async Task<IdentityResult> UpdateAsync(User user, CancellationToken token)\n{\n    // this is going to fail every time because SecurityStamp was changed\n    const string sql = \"UPDATE Users SET EmailConfirmed=@EmailConfimed, SecurityStamp=@NewSecurityStamp WHERE  Id=@Id AND SecurityStamp=@SecurityStamp\";\n   // Executing and return result\n}\nHow can I avoid this issue?. Then how can I assure that nobody else have modified the record?. I thought SecurityStamp is for optimistic concurrency. My bad. ",
    "MetalBreaker": "I already figured it out by myself.\nThank you anyway!\nI used the SignInManager.RefreshSignInAsync(ApplicationUser user) method.. ",
    "dietrichha": "Hi,\ntried to use the new 2.1 syntax:\n        services.AddDefaultIdentity<ApplicationUser>()\n            .AddRoles<IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>();\n\nBy using this, you can not define a policy for roles. E.g.:\n  services.AddAuthorization(options =>\n        {\n            options.AddPolicy(\"RequireAdministratorRole\", policy => policy.RequireRole(\"Administrator\"));\n        });\n\nYou will always get false for:   var hasAdministratorRole = (await AuthorizationService.AuthorizeAsync(User, \"RequireAdministratorRole\")).Succeeded;\nIf you use instead:\n services.AddIdentity<ApplicationUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultUI()\n            .AddDefaultTokenProviders()\n\nEverything works as expected. Where is the difference? What am I doing wrong? How can you add role based auth in your app with the new syntax (like  .AddRoles() ) ?. ",
    "C-BERBER": "After wasting several (more) hours trying to decipher what is supposed to make this seemingly simple functionality work... This is what did it for me:\n.AddRoleManager>() \n```\npublic void Configure(IWebHostBuilder builder)\n        {\n            builder.ConfigureServices((context, services) => {\n                services.AddDbContext(options =>\n                    options.UseSqlServer(\n                        context.Configuration.GetConnectionString(\"SCPI_SiteIdentityDbContextConnection\")));\n            services.AddIdentity<SCPI_site_User, IdentityRole>(config =>\n            {\n                config.SignIn.RequireConfirmedEmail = true;\n            })\n                .AddRoleManager<RoleManager<IdentityRole>>()                         \n                .AddDefaultUI()\n                .AddDefaultTokenProviders()\n                .AddEntityFrameworkStores<SCPI_SiteIdentityDbContext>();\n\n```\n....\n```\nnamespace SCPI_Site.Views\n{\n    public class AdminController : Controller\n    {\n        [Authorize(Roles = \"Admin\")]  // Before the Add RoleManager Above this would always fail\n        public IActionResult Admin()\n        {\n            return View();\n        }\n}\n```\n....\nAs would this from my _Layout.cshtml\n<li>\n                        @if (User.Identity.IsAuthenticated)\n                        {\n                            @if (User.IsInRole(\"Admin\"))\n                            {\n                                <a asp-area=\"\" asp-controller=\"Admin\" asp-action=\"Admin\">Admin</a>\n                            }\n                        }\n                    </li>\nJust wanted to use the built in framework at a light level (User in Role)->give them access to some functionality.. Yes, it should work, that's why I posted :). ",
    "kanadaj": "Wouldn't it make more sense to just support roles by merging them into the claims table?. After looking more at the pipeline, it should really refresh the user from the data in the database. I wonder why it didn't work as intended. Checking the return value of IUserClaimsStore shows that the claims in question are actually in there, it's just the user's token which lacks them.. Moving this to https://github.com/aspnet/Security as this seems to be an issue with the Cookie Authentication pipeline. There is a quick and dirty workaround posted at https://github.com/aspnet/Security/issues/1788#issuecomment-399099841. ",
    "smariussorin": "@HaoK solution worked for me\nAdded the fixed link for better understanding https://github.com/aspnet/Identity/blob/master/src/Core/UserClaimsPrincipalFactory.cs\nThis factory AddScoped, UserClaimsPrincipalFactory just adds the roles claims to the user object. \nLogout/Login to see the desire functionality. Now works also in UI, and in the Authorize attribute. ",
    "newbienewbie": "\n@HaoK solution worked for me\nAdded the fixed link for better understanding https://github.com/aspnet/Identity/blob/master/src/Core/UserClaimsPrincipalFactory.cs\nThis factory AddScoped just adds the roles claims to the user object.\nLogout/Login to see the desire functionality. Now works also in UI, and in the Authorize attribute\n\nIt took me quite a lot of time to figure it out . For those who still cannot make it work , if you have signed in before using the older code ,  please logout and login again.. ",
    "mprevot": "Thanks for the details and the pointer. I wanted to check out the GPDR components being implemented so far, and make this work targeting 2.1 (for production).\nhttps://github.com/aspnet/Identity/tree/release/2.1 is also targeting dotnet core 2.2.0-preview1-26531-03\nCan't I retarget the dev branch to 2.1 (and asp.net identity 2.1 release too) ? If yes, what are the recommended steps ?\nIn any case, how should I add dotnetcore 2.2 (for development / follow) ?\n. Just to mention: using the nuget package manager doesn't work since the dotnet core version (2.2-preview) were \"locked\" by the project.. ",
    "Edward-Zhou": "@javiercn  I think I got the same issue with @serpent5 . For the built-in Identity, the request URL should be /Identity/Account/Login, and we want to change the Login address by /Account/Login. But, we did not find anyway to change it. . I just hope one way to control the Identity Razor library request URL. . ",
    "serpent5": "Here are some of the disadvantages of how this currently works, as I see it:\n\nExisting links need to be updated. These might be either internal to the ASP.NET Core Identity web-site or external e.g. if ASP.NET Core Identity is being wrapped up with Identity Server and said external site links to e.g. the /Manage page.\nIf migrating a site from ASP.NET Identity to ASP.NET Core Identity, it's feasible to make all changes transparent (no visible changes to the end user), unless using the new Default UI, which forces the e.g. /Account/Login link to change.\nIt further exposes the fact that the site is using ASP.NET Core Identity 2.1, given that /Identity/Account/Login is easily identifiable.\nThe classic \"bookmarks\" problem, where existing browser bookmarks to these pages no longer work. This can be fixed with redirects, etc, but that's extra work.\n\nThose last two points are less impactful, but possibly worth mentioning anyway. There\u2019s also the simple reason that some people just might not like the extra token in the url, but maybe they\u2019d just have to suck it up.\nI hope this is helpful.\nNote: A question was asked on Stack Overflow, which prompted me to look into the source code and consequently raise this issue.. @javiercn Thanks for your feedback.\nThe identifiability comment was due to the fact that from some of what I read about security, it's sometimes advised to hide the implementation details of your backend services for security reasons. I was just pointing out that a fixed path for the ASP.NET Core Identity Default UI endpoints exposes the fact that ASP.NET Core Identity 2.1 is being used. Whether this is a genuine concern or not is not for me to decide - I just added it to the list of could-be disadvantages.\nIn conclusion, would it be fair to say that for anyone that wants to remove /Identity from the URLs (or more generally customise said URLs), the recommended options are:\n\nNot use the Default UI at all.\nUse the scaffolding element of the Default UI and make all necessary customisations.\nGet over it (of course, you can put this far more politely than that :) ).. @javiercn\n\n\nTo draw an analogy, you don't keep your money under your bed for security (based on the fact that you are the only one that knows is under the bed), you put it on a bank where you know that someone has to go though a security guard, crack the bank vault, etc to get to your money.\n\nThis is a good example of security by obscurity, but I don't think it lines up with what we're talking about here. With your banking example, you've given up all the security provided by the bank by taking it entirely into your own hands. However, with the URL point I made, we've not given up all the existing security layers already available in the stack providing ASP.NET Core Identity. I guess it's more like putting all your money into a bank and then not disclosing which bank it is - You get all the security of the bank but have made it slightly harder for someone to know which bank.\nThis is going a bit off-topic now - I don't think we need to debate security by obscurity any further. Thanks for your feedback and comments and for taking the time to respond.. Here's the URL for the docs mentioned by @BlueMarmalade: https://docs.microsoft.com/en-us/aspnet/core/migration/20_21?view=aspnetcore-2.1#changes-to-authentication-code.. Does this mean the suggested solution would be to scaffold out the 4 pages and change the StringLength attribute?. ",
    "BlueMarmalade": "I don't think this is understood(or maybe i'm the one, haha). The problem for me is that when I tried to implement the new Razor identity into my asp.net core project, I followed the instructions and deleted my old identity before I used the scaffold tool to add the new razor identity. \nThe problem is that now when a user hits an authorized controller like Home/Index he is sent to Account/Login and not Identity/Account/Login. The only fix I could find was putting this in my configure method:\n app.Use(async (context, next) =>\n            {\n                var request = context.Request;\n                if (request.Path == \"/Account/Login\")\n                {\n                    context.Response.Redirect(\"/Identity/Account/Login\");\n                }\n                else\n                {\n                    await next.Invoke();\n                }\n            });. Actually,  instead of using my old db context I now created a new one just for the new identity, I had no problem with the routing this time. In fact it says to create a new one in the migration if you add razor identity to an mvc app without existing identity. But it is quick to ignore this because 1) I already used a database in my app and 2) I deleted all my old identity code before adding the new razor identity so I mistakenly follewed the instructions on how to add razor identity in mvc projects with existing authorization(since i deleted it i should have followed the instructions on adding in mvc app widthout existing authorization). A bit confusing a messy on my part, but quick to do.. ",
    "UnknownQuestions": "If you want to map from Identity/Account to /Account, try out following code:\nservices.AddMvc()\n    .AddRazorPagesOptions(o => \n        o.Conventions.AddAreaFolderRouteModelConvention(\"Identity\", \"/Account/\", model =>\n        {\n            foreach (var selector in model.Selectors)\n            {\n                var attributeRouteModel = selector.AttributeRouteModel;\n                attributeRouteModel.Order = -1;\n                attributeRouteModel.Template = attributeRouteModel.Template.Remove(0, \"Identity\".Length);\n            }\n        });\n    })\n    .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n. ",
    "tmutton": "\nIf you want to map from Identity/Account to /Account, try out following code:\nservices.AddMvc() .AddRazorPagesOptions(o => o.Conventions.AddAreaFolderRouteModelConvention(\"Identity\", \"/Account/\", model => { foreach (var selector in model.Selectors) { var attributeRouteModel = selector.AttributeRouteModel; attributeRouteModel.Order = -1; attributeRouteModel.Template = attributeRouteModel.Template.Remove(0, \"Identity\".Length); } }); }) .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\nThis works but you will find the Login redirects will not work. To fix this one option is to add a controller called IdentityController with the following action:\n[Route(\"Identity/Account/Login\")]\npublic IActionResult LoginRedirect(string ReturnUrl)\n{\n    return Redirect(\"/Account/Login?ReturnUrl=\" + ReturnUrl);\n}\nA bit hacky but it works. ",
    "seraphx2": "I say merely for looks this should be officially changed. \"Identity\" is not terminology that users understand and it just looks tacky in front of the rest of the route. It means nothing except to us developers and makes for unnecessarily longer and odd looking URLs by enforcing an area. And it had never been like this in the past several years of MVC.. ",
    "verilium": "I am adding Identity to an IdentityServer project. There is no requirement for this app to seperate the identity part out by using an area as all it does is auth and identity based stuff, no seperation is required. I would like an option to be able to remove the '/Identity' part of the routes for this project as its adding something which could potentially be distrating for my users when they are logging in. I want to keep the routes as clean as possible.. ",
    "sbersey": "Indeed. Only looking to do user/password check and grab roles that the user is in all out of Identity.\nKnow of any example for these basic features in forms?\nThanks for the info below; much appreciated.\nsteve\nSent from Mailhttps://go.microsoft.com/fwlink/?LinkId=550986 for Windows 10\n\nFrom: Hao Kung notifications@github.com\nSent: Monday, June 11, 2018 11:22:56 AM\nTo: aspnet/Identity\nCc: sbersey BlueCompassSoftware; Author\nSubject: Re: [aspnet/Identity] Can Identity be used in a WinForm App? (#1819)\nWe did most of the decoupling work already in 2.0, you would use only the Microsoft.Extensions.Identity.Core and Microsoft.AspNetCore.Identity.EntityFrameworkCore packages, there might not be very much sugar to register the appropriate services but these should contain everything you need to use identity for win forms for basic username/password. It doesn't have some of the more complex login apis like password lockout which are today coupled with ASP.NET authentication.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/aspnet/Identity/issues/1819#issuecomment-396282410, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AalUSH0tNYg1r5Ag96bxyDCHCrUbAeVHks5t7otPgaJpZM4UfMBX.\n. ",
    "konraddysput": "@ajcvickers  Thanks for you feedback. IMO when you design a database you want to use the same type of keys everywhere. You can image how these keys works with our custom Repositories. . @ajcvickers IMO its not a good architecture. Do you think, other developers can use different types of keys for these columns in DB? If answer is yes, why not implement this feature. \nCan we use generic types to provide custom column type for these attributes? Right now its even possible?. ",
    "pwen090": "If I go with the method @HaoK mentioned, to simply not have any default UI, would the best way to bring in a base template UI be to create a second project with UI, scaffold it all, then copy over those files to my original project?\nI am still wondering on the point of attack surface creep for this Identity UI library. It looks like it is included as Microsoft.AspNetCore.Identity.UI as a dependency of Microsoft.AspNetCore.App. If I wanted to use the default UI but have more control over the versioning of when I want to update it or not is there a way to do that or is it bound to the overall asp.net core version? thank you much\n. ",
    "sbsw": "I have a similar requirement: The only part of the library code I want to use (because it incorporates a lot of security best practices) is the login stuff.  But I have my own pages for registration and user settings.  So I'm looking for a way to disable everything except for the Login pages.  Please tell me I don't need to template ALL of the pages I don't want, just to hack up the code behind the page to return a 404 status if someone tries to access that page.. ",
    "macux": "Appreciate this is closed but I'm struggling to see the best option for getting around this, seems there are three choices:\n\nOverride all the views we don't want - seems hacky (there are 28 of them) and prone to potentially serious issues if new views are added in future Identity upgrades that would need to be overridden to exclude them\nDo something with a PageApplicationModelConvention (would this option protect us from new views being added as mentioned above?)\nUse the alternative proposed by @HaoK - having just been through the code for AddDefaultIdentity (including AddIdentityCookies and AddIdentityCore) and the \"old\" AddIdentity there seem to be subtle differences between the two other than just the AddDefaultUI call. Could this approach not also lead to nasty bugs in the future when things get added/fixed in AddDefaultUI?\n\nWould be nice if we could just have some kind of options builder to throw at AddDefaultUI to say explicitly what we do want..... ",
    "gpcottle": "I have to say I agree. I have just been looking at the same thing, thinking I could make use of it in an application I am starting. At the moment, I am not willing to consider it as I cannot control it. When I get it back in a MVC form, where I can see the models and the controllers, then I will reconsider. In the meantime, it is dead in the water and I will go back to 2.0 for the time being.. ",
    "tstivers1990": "\nThis is not the case. AllowAnonymous doesn't imply authorization, it only implies that no matter what, that page should be accessible to unauthenticated users. Previous versions of the templates would break when you added authorize as a global filter, hence we added [AllowAnonymous] to the pages where it applies.\n\nWhat I meant by this is that it's not obvious where authorization is required, and where it isn't. I'm guessing this is caused by the fact that configuration is now hidden behind services.AddDefaultIdentity<T>() which isn't very well documented. Probably the largest chunk of the frustration being caused by the whole thing is the lack of solid documentation.\nI don't mind having to write my own implementation from scratch. Just document the Identity library so we know how to use it is all I ask.. >Scaffold Identity\n\nApplications that include Identity can apply the scaffolder to selectively add the source code contained in the Identity Razor Class Library (RCL). You might want to generate source code so you can modify the code and change the behavior. For example, you could instruct the scaffolder to generate the code used in registration. Generated code takes precedence over the same code in the Identity RCL.\n\nThis documentation is absolutely useless. It doesn't document how Identity works as a library. We need clear documentation that outlines how Identity works. Scaffolding only tells you how the templates use Identity. It doesn't tell you how Identity can be used, or what your options are if you're looking to customize it. Identity itself really needs to be documented, imo.. How is one supposed to determine what parts of the website require authorization and what parts don't, when the default project template leaves no code making this clear? A lot seems to be hidden behind services.AddDefaultIdentity<IdentityUser>() in the interest of making things easier for new users. But, in doing so, things have become more magic and less obvious. There's already an issue (aspnet/Docs#6367) open for this for almost a month with no update.\nAdd custom user data to Identity relies entirely on the scaffolding system. If you're not looking to use this system, you're out of luck. It fails to explain how customizing user data actually works. It doesn't explain the fact that you need to modify the call to AddDefaultIdentity<T>(). It doesn't explain the fact that you need to modify your DbContext to inherit from IdentityDbContext<T>.\nI apologize if you take offense at my bluntness when it comes to the documentation. It's not intended to offend. But the theme I've noticed with the new documentation is that it relies very heavily on the scaffolding system. I think that's a bad approach, and I think that because as a user trying to familiarize myself with all of the changes that have happened since the pre-release days, a lot of questions have gone un-answered and a lot of time has been spent digging through GitHub repos to try and figure out how things work.. The TwoFactorAuthentication page was also missing the ActivePage assignment. I've added that in the latest commit.. See #1866 . The breaking changes should be removed.. That quote is intended to mean that you can scaffold the new Identity UI into your application so that you can modify it. It's not intended to mean that you can scaffold the old controllers into your application.. @Caizhenyu Any chance you could create a repo that reproduces this issue? I'm not experiencing this myself, and my code looks very similar to what's shown here.. @javiercn Yeah, my thought process at the time was that these changes shouldn't break anything, as it's scaffolded code. But now that you mention it, if someone were to have scaffolded one of the pages that was changed, and then updates Identity UI with these changes, it's likely to break something.\nI'm not sure how you want me to go about this. The breaking changes are in two commits, so they can easily be reverted. Should the breaking changes be reverted and put into a separate pull request? Or should they just be scrapped all together?. ",
    "ATylerYarnott": "In looking more into this, perhaps a better config property name would be AuthenticatorIssuer as opposed to AuthenticatorSiteName, since it doesn't strictly have to match the site name and more closely matches the URI format.. ",
    "kofifus": "I'm trying to avoid bringing in (and learning) a whole new framework when I get identity out of the box. All I need is a way to get the cookie and feed it to signalr HubConnectionBuilderHttpExtensions.WithCookie .. is that not possible ?. I did ended up getting this to work like this:\nOn the server I scaffolded Login and then in Login.cshtml.cs added\n[AllowAnonymous]\n[IgnoreAntiforgeryToken(Order = 1001)]\npublic class LoginModel : PageModel\nThat is I do not require the anti forgery token on login (which doesn't make sense anyway)\nThe client code is then like this:\n```\nHttpClientHandler handler = new HttpClientHandler();\nCookieContainer cookies = new CookieContainer();\nhandler.CookieContainer = cookies;\nHttpClient client = new HttpClient(handler);\nvar uri = new Uri(\"http://localhost:5000/Identity/Account/Login\");\nstring jsonInString = \"Input.Email=myemail&Input.Password=mypassword&Input.RememberMe=false\";\nHttpResponseMessage response = await client.PostAsync(uri, new StringContent(jsonInString, System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"));\nvar responseCookies = cookies.GetCookies(uri);\nvar authCookie = responseCookies[\".AspNetCore.Identity.Application\"];\nvar hubConnection = new HubConnectionBuilder()\n        .WithUrl(\"http://localhost:5000/hubs/myhub\", options =>\n        {\n            options.Cookies.Add(authCookie);\n        })\n        .Build();\nawait hubConnection.StartAsync();\nawait hubConnection.SendAsync(\"Send\", \"hello!\");\n```\n(of course password will be elsewhere in deployment). solved see https://stackoverflow.com/questions/50752724/authenticate-a-net-core-2-1-signalr-console-client-to-a-web-app-that-uses-iden. ",
    "Andrioden": "@HaoK : Hmm. Are you sure? Why do the RefreshSignInAsync() method take an ApplicationUser input parameter then? If it just uses the User.Identitiy.Name anyway?. Hmm, I am sorry to be pushing this, but I am not convinced @HaoK : \"The user to sign-in.\" and where the user derived princal.\n\nThe input user is documented in your code as the user that is being signed in.\nYes, it seems like some auth claim is also used further down the stack. I cant reach the final code that actual checks in, but I assume the Context.SignInAsync uses the current HttpContext or current auth to (wrongly?) sign in current user and not input user. Is this intended? Still not convinced due to the Input user and the method comment, which indicate that your intent of SignInAsync is to sign in input user.\n. Ok. I give up. You dont take your time to address \nWhy it accepts a TUser object\nWhy it is documented like it is <param name=\"user\">The user to sign-in.</param> ref\n\nI have figured out a workaround for this lacking functionality, feel free to close the question.. ",
    "damienbod": "I updated Identity to Bootstrap 4. Maybe you could use this:\nhttps://damienbod.com/2018/06/26/updating-asp-net-core-identity-to-use-bootstrap-4/. ",
    "huntertran": "Is there any update on this?. ",
    "ms92ita": "Thank you for the answer.\nIt seems that it is possibile to implement a ClaimsPrincipalFactory only in .net core and before I've specified that I am using .NET 4.6.1\nAt the moment I can not update the application to Asp.Net Core.\nModifying/deleting not useful claims when I have created the identity with UserManager.CreateIdentity can be a solution?. ",
    "Caizhenyu": "@blowdart \uff0cthank you. But i will add a property Name in my User : IdentityUser.. @blowdart , thank you and sorry , it's not clear . I want to implement a identity  system by using net core identity, and the system isn't a mvc project, it just a api project. so i need generate a  Antiforgery token. I found my answer here https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery. @brockallen ,so ,i think it's maybe a bug. @HaoK, nothing special.\nApplicationUser : IdentityUser\nConfigureServices:\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n                .AddEntityFrameworkStores<ApplicationDbContext>()\n                .AddDefaultTokenProviders();\nConfigure:\napp.UseAuthentication();\nyou can rebuild it 3min.. ",
    "Zyano": "The pattern of returning a custom builder is also used with the AddMvc() extension method which reutrns the IMvcBuilder. \nWhile I personally don't mind either approach I do prefer the case of returning a custom builder as it promotes a chain of configuring one service and then moving on to the next with clear separation as shown below.\n```\nservices.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)\nservices.AddIdentity()\n                .AddDefaultTokenProviders()\n                .AddEntityFrameworkStores();\n```\n@NinoFloris You are entirely correct that a lot of libraries use the approach of providing an action to configure the service examples of this would be EF's AddDbContext as shown below.\n```\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(\n                Configuration.GetConnectionString(\"DefaultConnection\")));\n\n```\nIn the end this is properly a question of personal preference and expectation.. ",
    "flatproject": "I would like to see some usage examples as well. Very useful but completely undocumented. \nCan they be used with the Authorize attribute? . @blowdart apologies but I cannot see any documentation regarding the RoleClaims table and how we can use it or if the Authorize attribute uses/can use the claims of the RoleClaims table.\nIf I add a claim in the RoleClaims table then what? How can i use it?\nThe quoted link doesn't make any reference to RoleClaims.\nThank you. That's great, thank you! I can confirm I followed the process from core 1.x and it worked without any issues.. @vcsjones Apologies, I didn't make it clear in my question. I'm looking for ways to exclude double hyphen \"--\" from the cookie content, not the name.. @blowdart ok thanks, I thought as much. Unfortunately it's the default rule (942440) from OWASP 3.0 rule set that Azure applies. Don't think it can be customised apart from on/off so I have turned it off for now.\n\nDetail:SQL Comment Sequence Detected. Matched Data: --2cLgVPGYiAi2uM6AoGSb- found within REQUEST_COOKIES:DevDomain: CfDJ8OtsiqIjD1VBj_Z8Dpbp3tJlPM3k1appZ0kHeyLFWlyD0PjFsd0GEEjchGFvqSl45FIMFqE6pLwxnsavLd3gLyJ2KycHOLjVSBj-Q-qjxYocgtInGbSX_CngIEFkMS1a_YbUoY2mljwLGaJrXOsypu6rqm-OY9LsqfcqGgmRScXdhYqqWBKu3PkIRKGNziIDNe9ymS8gGeiO7gyUQF5SRiwBhyKN22GRVQmO50Y7hX8OGQwrwkdnsOp3EZLx6xLcmWiXnQ8kt5nb6QzC4JJAu3OLDBvp0VLcvynDHTkyGhtIcWm3J-ZHM-dIawj0PtacTjS2tGmcUI6TAi4PjCMtmzF3fNs4KOUFnLCUMZDtywYm.... \n",
    "CeelMarten": "I found the solution. Just Inherit ApplicationUserfrom IdentityUser<long>, ApplicationUserRolefrom IdentityUserRole<long> then use\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser,IdentityRole<long>,long>. ",
    "dm-CaT": "Can you point me for some correct example  how to implement custom UserStore?. This case I need to have PasswordHash property for user class. It looks not so good, because I want to have possibility to pass user objects anywhere I need without sensitive information like PasswordHash. Even if it's hash. . I tried to go this way but I cannot. I have to link password hash with user it belongs to, e.g. store it with user id. But when I have hash to store I do not have user id yet. That's my problem.. User name as FK is not a choice. Looks like I have to implement a custom UserManager.. ",
    "vijayrkn": "@seancpeters - Can you please make the corresponding scaffolding change?. ",
    "bigpodgurc": "I was hoping its something that could be used with already made identity individual user authenticaton. thats one thing i was looking at but for now i was still looking at something that could work with what i already have(i have on onee web app accounts already and i dont want migrating accounts if it isnt neccecery). didnt know that. @brockallen just a quick question for information if it is needed in future is there a way to use identityserver for logins in lets say console app, (basicly login in console app and for backend it uses identity server). ",
    "dotnet-maestro-bot": "This pull request has been updated.\nThis PR merges commits made on release/2.2 by the following committers:\n\n@natemcmaster\n@aspnetci. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@natemcmaster. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@javiercn\n@aspnetci. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@aspnetci\n@javiercn. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@aspnetci\n@javiercn. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@aspnetci\n@javiercn. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@HaoK\n@aspnetci\n@javiercn. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@HaoK\n@aspnetci\n@javiercn. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@javiercn\n@aspnetci. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@javiercn\n@aspnetci. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@aspnetci\n@HaoK. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@pranavkm\n@ryanbrandenburg\n@aspnetci\n@HaoK. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@aspnetci\n@pranavkm\n@ryanbrandenburg\n@HaoK. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@natemcmaster. :x: Uh oh, this pull request could not be updated automatically. New commits were pushed to release/2.2, but I could not automatically push those to merge/release/2.2-to-master to update this PR.\nYou may need to fix this problem by merging branches with this PR. Contact .NET Core Engineering if you are not sure what to do about this.. :x: Uh oh, this pull request could not be updated automatically. New commits were pushed to release/2.2, but I could not automatically push those to merge/release/2.2-to-master to update this PR.\nYou may need to fix this problem by merging branches with this PR. Contact .NET Core Engineering if you are not sure what to do about this.. This pull request has been updated.\n\nThis PR merges commits made on release/2.1 by the following committers:\n\n@natemcmaster\n@HaoK. This pull request has been updated.\n\nThis PR merges commits made on release/2.2 by the following committers:\n\n@javiercn\n@HaoK. \n",
    "Xarkam": "@HaoK if the managers treat them as case insensitive, where is the interest to have a normalized field in database ?\n. ",
    "postb99": "Thanks @HaoK so this isn't clearly stated in documentation, am I wrong? So I would need to open a PR regarding documentation.\nFor example:\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.rolemanager-1.findbynameasync?view=aspnetcore-2.1#Microsoft_AspNetCore_Identity_RoleManager_1_FindByNameAsync_System_String_. Thanks @HaoK for the definition, but this is off-topic. My feeling was that documentation should be improved, since I know databases that are case-sensitive or case-insensitive, so legitimately wondered about the identity managers, since there is no information in documentation about search being case-insensitive. Do you agree that there is a need to be explicit in documentation?. ",
    "Dolphinsimon": "@blowdart Thanks for your reply. I checked the default Register page, the default register action set the same value to usernames and emails. I missed this page as we had another register action to handle creating users with different usernames and emails.\nSorry for my careless.. ",
    "Coaden": "If you still need to use Roles you can do this:\nservices.AddDefaultIdentity<ApplicationUser>()\n                         .AddRoles<ApplicationRole>()\n                         .AddEntityFrameworkStores<MyApplicationContext>();\n. ",
    "thomaslevesque": "Apparently this is a known issue:\nhttps://github.com/aspnet/Identity/blob/ff0e9257421a296012d03e8729ad79e9471f72e8/src/Identity/SignInManager.cs#L616-L620. Current workaround:\n```csharp\n    public class SignInManagerWithCorrectProviderDisplayName : SignInManager\n        where TUser : class\n    {\n        public SignInManagerWithCorrectProviderDisplayName(UserManager userManager, IHttpContextAccessor contextAccessor, IUserClaimsPrincipalFactory claimsFactory, IOptions optionsAccessor, ILogger> logger, IAuthenticationSchemeProvider schemes)\n            : base(userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes)\n        {\n        }\n    public override async Task<ExternalLoginInfo> GetExternalLoginInfoAsync(string expectedXsrf = null)\n    {\n        var info = await base.GetExternalLoginInfoAsync(expectedXsrf);\n        if (info != null)\n        {\n            var schemes = await GetExternalAuthenticationSchemesAsync();\n            var scheme = schemes.FirstOrDefault(s => s.Name == info.LoginProvider);\n            if (!string.IsNullOrEmpty(scheme?.DisplayName))\n                info.ProviderDisplayName = scheme.DisplayName;\n        }\n\n        return info;\n    }\n}\n\n``. @blowdart I'm confused... Are you saying thatExternalLoginInfo.ProviderDisplayNameis _supposed_ to return the same thing asExternalLoginInfo.LoginProvider` and isn't supposed to actually return a display name? In this case the property is useless...\n\nit's what it done in templates\n\nWhich templates are you referring to? I don't think the Identity template does this; I wouldn't have needed the workaround if it did.. If you're talking about this, it doesn't even attempt to use a display name, it just uses LoginProvider, which is a \"technical\" name not intended to be seen by users.. > The default UI does use the DisplayName here https://github.com/aspnet/Identity/blob/master/src/UI/Areas/Identity/Pages/Account/Login.cshtml#L69\n\nso the templates should be affected by this bug too\n\nSome places use the display name, others use the provider name, e.g.:\nhttps://github.com/aspnet/Identity/blob/ff0e9257421a296012d03e8729ad79e9471f72e8/src/UI/Areas/Identity/Pages/Account/ExternalLogin.cshtml#L12\nhttps://github.com/aspnet/Identity/blob/ff0e9257421a296012d03e8729ad79e9471f72e8/src/UI/Areas/Identity/Pages/Account/Manage/ExternalLogins.cshtml#L17\nhttps://github.com/aspnet/Identity/blob/ff0e9257421a296012d03e8729ad79e9471f72e8/src/UI/Areas/Identity/Pages/Account/Manage/ExternalLogins.cshtml#L25\n. Would you be willing to accept a PR for this?. @HaoK sure, I'll give it a try.. @HaoK I tried something, but I'm not very happy with it. It seems a bit brittle to examine the HTML like this. Is this the kind of test you were expecting?. Thanks @HaoK. I see, thanks for the explanation. Anyway, I gave up on the idea of eagerly loading associations from the UserStore, it was causing unexpected side effects.. Oops, looks like it has already been fixed. > Can you explain how this problem was solved? I get this error on every page I get from scaffolding\nIt was fix in the code but the fix has not released yet.\nYou can just use <partial name=\"_StatusMessage\" for=\"StatusMessage\" /> instead of @Html.Partial(\"_StatusMessage\", Model.StatusMessage).. ",
    "replaysMike": "This appears to be to do with LightInject upon further investigation. When I comment out the LightInject provider and return a standard MS provider I can access the ApplicationSignInManager instance.\nI dug into the LightInject provider and it does seem to be aware of the type, it looks registered to me. I'm taking this over to the LightInject guys to see why this isn't working right.. ",
    "Whathecode": "\nThe documentation is correct, basically this will generate a new claims principal for the user passed in, with the current auth properties for the current cookie, ...\n\nExcept that the documentation does not state \"with the current auth properties for the current cookie\". I believe it is this omission which has lead me and the other user down the wrong path.\nMaybe I'm simply spoiled being used to the excellent documentation of the .NET Core and Framework APIs. \ud83d\ude42 Just my two cents... . @HaoK I am not in a position to determine whether or not the documentation is correct. The problem was exactly that I could not determine based on the provided documentation what the expected functionality should be.. ",
    "Tealons": "@HaoK As one of authors of the referenced stack overflow issues, I think you are missing the point. The documentation is correct, but not complete. Like @Whathecode is suggesting, you could clarify the documentation to prevent misinterpretation... I don't understand why you wouldn't want to do that?. ",
    "Karthik2610": "Hi blowdart\nThanks.\nIf we use DeleteAsync it will delete from DB.\nMy requirement is\n1) A person joins a company we create a user\n2) He resigns and we make that user to be deactivate using (locking out) , report  will use deleted user created item to be shown for admin. (PDF or excel).\nawait _userManager.SetLockoutEndDateAsync(user, DateTime.MaxValue.AddYears(-1)); \n3) The reason we lock is if he joins back we need to give back the same ID, so we did not delete\n4) If he does not come back and there is a requirement that we need to give the same ID (Email and Username), so new user should not see old details which user 1 created\n5) Now when i create _userManager.CreateAsync is not allowing me and says email and username already exist.\nMy question\n If we lock the user and if we create new user with email and user name of that locked user will it allow (please guide me) ?\nor we need to deleted the user and create new one.\n. Thanks. ",
    "josejmoran": "I found the problem. The partial tag was missing the input model.. It was my fault. I changed it from the method version to use the  but did not put the input model. The thing is that you don't get the error on that line instead you get the error on ViewData[], so you get all confused.\n. Hi,\nI will run  the command you sent to take a look. It will be great if a\nfeature is added so we can see it in the output window in VS.\nIf you want to test this issue you just need to create a new project with\nIdentity. It seems that when you have not added any new code after creating\nthe project it runs somewhat faster. It could be better, but is not as slow\nas when you start adding classes and new code. Based on my observations it\nseems that the more files it has to build the longer it takes to display\nthe app in the browser. Right now I have run it a couple of times and it\ntakes about 20 seconds. Yesterday it took 45 seconds to run. I did have a\nlot of programs opened though, but enough memory I think for VS to do its\njob. So today I ran the app with just VS opened ( 3 instances ). I will run\nit with just VS open and update my findings. It seems that memory is also\ninvolved in the slow build too.\nOn Sun, Sep 23, 2018 at 11:01 PM Eilon Lipton notifications@github.com\nwrote:\n\nHi @josejmoran https://github.com/josejmoran would it be possible for\nyou to share the app on GitHub so we can investigate?\nYou might be able to enable more diagnostic information by running dotnet\nbuild -clp:PerformanceSummary from the command line. That will emit\nadditional timing information about where time is spent.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1977#issuecomment-423868604,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAeffERv075zq31BmeINZtTXtJz8X2WRks5ueEr-gaJpZM4W1vFE\n.\n\n\n-- \nRegards,\nJose J. Moran\n336-347-8688\n. I tested it again with only VS running and it takes 20 seconds. I repeated\nit several times and I had like 12GB of memory available.\nAlso I just changed a letter on a View. That is why it may be good to add a\nnew feature to allow for an incremental compilation of sort that only\ncompile the file just changed.\nIt seems that VS is using all 4 cores ( 8 threads). So the horse power is\nthere to have the application running is less time. When I run the app just\nafter I build, when there is no need to build the app, because I just built\nit, the app is in the browser in just 5 seconds. That is good! It looks\nlike the issue is the build process.\nI will also take a look to see if I can get a faster PC to see if that helps\nOn Mon, Sep 24, 2018 at 10:07 AM Jose Moran josejmoranh@gmail.com wrote:\n\nHi,\nI will run  the command you sent to take a look. It will be great if a\nfeature is added so we can see it in the output window in VS.\nIf you want to test this issue you just need to create a new project with\nIdentity. It seems that when you have not added any new code after creating\nthe project it runs somewhat faster. It could be better, but is not as slow\nas when you start adding classes and new code. Based on my observations it\nseems that the more files it has to build the longer it takes to display\nthe app in the browser. Right now I have run it a couple of times and it\ntakes about 20 seconds. Yesterday it took 45 seconds to run. I did have a\nlot of programs opened though, but enough memory I think for VS to do its\njob. So today I ran the app with just VS opened ( 3 instances ). I will run\nit with just VS open and update my findings. It seems that memory is also\ninvolved in the slow build too.\nOn Sun, Sep 23, 2018 at 11:01 PM Eilon Lipton notifications@github.com\nwrote:\n\nHi @josejmoran https://github.com/josejmoran would it be possible for\nyou to share the app on GitHub so we can investigate?\nYou might be able to enable more diagnostic information by running dotnet\nbuild -clp:PerformanceSummary from the command line. That will emit\nadditional timing information about where time is spent.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/aspnet/Identity/issues/1977#issuecomment-423868604,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAeffERv075zq31BmeINZtTXtJz8X2WRks5ueEr-gaJpZM4W1vFE\n.\n\n\n--\nRegards,\nJose J. Moran\n336-347-8688\n\n-- \nRegards,\nJose J. Moran\n336-347-8688\n. ",
    "ravi-dhebar-avanade": "What was the fix? @josejmoran . ",
    "cubikca": "I've verified that different threads do in fact get the same DBContext instance when injecting using AddIdentity() (A second operation started on this DBContext\u2026)\nThis is because UserStore is also injected with Scoped lifetime. Suffice to say, we need transient scope on the dbcontext used by UserStore. The default injection scope for the required identity services doesn't respect the transient nature of the dbcontext that is injected into them.\nWe have of course copied AddIdentity() code and adjusted the scopes accordingly. I understand DI well enough to know how many instances I have, and why I need transient as opposed to scoped.. Finally found my answer. It is specific to OpenIdConnectServer.\nhttps://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/\n\nIt's important to note that the authorization provider is always a singleton: don't try to inject scoped dependencies in its constructor. To resolve scoped dependencies (e.g an Entity Framework DbContext), use the context.HttpContext.RequestServices property to access the scoped container.\nYou can read this thread for more information about this limitation/design choice, which is not specific to ASOS and impacts all the security middleware sharing the same events model. It might be fixed in a future version, though.\n\n\nThis explains the behavior I'm seeing. Scoped UserManager should work fine now that I know the OpenIdConnectServerProvider is a singleton but can still access the scoped services from within its methods.. ",
    "slavanap": "Looks like HTTPS is forced for any authentication available and there's no option to provide user accounts via simple HTTP.. I've replaced Manage & Account controllers with AddDefaultIdentity and it started to work again.\n. ",
    "wysisoft": "Can you explain how this problem was solved? I get this error on every page I get from scaffolding. ",
    "vankampenp": "2018-09-30 16:37:07.7274|86.85.146.189|||ERROR|8.9.26.0|176|Base|SessionUser.MoveNext|User create error in FindOrCreate|Microsoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.Data.SqlClient.SqlException: Cannot insert duplicate key row in object 'dbo.AspNetUsers' with unique index 'UserNameIndex'. The duplicate key value is (...).\nThe statement has been terminated.\n   at System.Data.SqlClient.SqlCommand.<>c.b__122_0(Task1 result)\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask2.InnerInvoke()\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteAsync(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary2 parameterValues, CancellationToken cancellationToken)\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\n   --- End of inner exception stack trace ---\n   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)\n   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple2 parameters, CancellationToken cancellationToken)\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsyncTState,TResult\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList1 entriesToSave, CancellationToken cancellationToken)\n   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\n   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore9.CreateAsync(TUser user, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Identity.UserManager1.CreateAsync(TUser user)\n   at Microsoft.AspNetCore.Identity.UserManager1.CreateAsync(TUser user, String password)\n   at DTOWEB.Dal.SessionUser.FindOrCreate(UserManager1 userManager, SignInManager1 signInManager, String loginId, Int32 dtoId, Int32 dtoClientId, Int32 genderId, String languageId)\n. I agree with the analyses, but I would expect it to catch this error \n catch (Microsoft.EntityFrameworkCore.DbUpdateException e)\nand then return a DuplicateUserName error\n               . Exactly, that is how I implemented it in my UI customization. @blowdart \nMaybe I don't understand, but the user is able to set userId and password and login. Than the user can set 2fa. \nWhen login-in, the user is able to choose the use of their Microsoft account, Facebook, or twitter to login. \nAre you saying that in that case, they should skip 2fa?. There are two issues with this.\nFirst, my app contains sensitive data, and it makes sense to use 2fa with that. Someone might have a different view on the sensitivity of their Facebook account, and not use 2fa with that. Now when you would leave the concern for 2fa enforcement to the external provider, the very fact that I have a Facebook login possibility on the site, a hacker can use the Facebook login to bypass the 2fa. In other words, if any site has social media logins, then the user needs to put 2fa on all those social media accounts to get the same protection level. \nThe second issue is that the code currently does not work that way. \nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\nif (result.Succeeded)\n{\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \n      info.Principal.Identity.Name, info.LoginProvider);\n   return LocalRedirect(returnUrl);\n}\nIn the above code, result.Succeeded returns false if my app wants 2fa to be checked (cookie expired). So I think @wijnsema  is correct to suggest that the code needs to check on result.RequiresTwoFactor.\n. That would be a rare case where both 2fa cookies are expired at the same time, but yes, I would expect that.\nIn any case, the current code does not work, as it does not log the user in at all, when the 2fa cookie is expired.\nFrom: Barry Dorrans notifications@github.com\nSent: maandag 19 november 2018 15:08\nTo: aspnet/Identity Identity@noreply.github.com\nCc: Pieter van Kampen pieter@datec.nl; Comment comment@noreply.github.com\nSubject: Re: [aspnet/Identity] BypassTowFactor in SignInManager:ExternalLoginSignInAsync should default to False (#2067)\nWell what if someone added 2fa to facebook already? Do people really expect two 2fa prompts? I think 4fa might be an unwelcome shock :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/aspnet/Identity/issues/2067#issuecomment-439904064, or mute the threadhttps://github.com/notifications/unsubscribe-auth/APQtQ2QYELusfhEmUDZvW0-d6SlbQXvnks5uwrsrgaJpZM4Yd9OL.\n. We then agree to disagree. I remain that if someone put\u2019s social media logins on their site, social media logins should not enable someone to bypass the 2fa that you have set on that site. If someone hacks your PC and steals both your sensitive app\u2019s credentials and your social media credentials, you still should be able to trust the 2fa that you have set on the sensitive app.\nPut it the other way, for GDPR, 2fa helps me to prove that the user logged in, rather than some hacker, in case of a data leak. With your preferred implementation, it proves nothing, as I cannot check if someone has also protected their social media accounts. In that case, I need to take that possibility of my app altogether.\nIn my view, the code is not a bug, the UI has a bug.\n. That is fine with me, but if you change the output of ExternalLoginSignInAsync to return true where it now returns false for 2fa, it would break my code, and disable my scenario.\n. I suggest you change the template to:\nvar result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, \n      info.ProviderKey, isPersistent: false, bypassTwoFactor: true);\nif (result.Succeeded || result.RequiresTwoFactor)\n{\n   _logger.LogInformation(\"{Name} logged in with {LoginProvider} provider.\", \n      info.Principal.Identity.Name, info.LoginProvider);\n   return LocalRedirect(returnUrl);\n}\nThan nothing breaks. @wijnsema thanks for the tip!. If someone gets the contents of my database, I have a whole other problem. In the end nothing is secure. \nBut it helps me to think that this extra layer prevents someone to guess a password, or reuse a password written on paper or something like that. At least the hacker will need access to the mobile phone as well (or my database, but than they are no longer interested in bypassing the 2fa). . ",
    "saurabhlogward": "@brockallen I think the asp net core identity also provides the Authorization mechanism so I believe it should do that. Isn\u2019t it ? . ",
    "danielcongrove": "I'm using Firefox 62.0.3, and I just tried logging in on my ASP.NET 2.1.1 website in private mode. Login worked correctly for me.. ",
    "layinka": "I have checked this, i think it might have something to do with cookies in private mode.\nI checked through chrome debugger, and all the cookies that are set in the normal mode are not set in the private mode.\nNo session cookie, no Cookie consent cookie etc. ",
    "perkops": "I can confirm, that i have the same issue.\nI however found out, that when using the AddDefaultUI, it would also catch up a \"faulty\" layout with a wrong header/footer. (Looks pre-compiled)\nWhen changing the Layout reference in Areas/Identity/Pages/Account/Manage/_Layout.cshtml\nFrom:     Layout = \"/Areas/Identity/Pages/_Layout.cshtml\";\nTo:          Layout = \"/Pages/Shared/_Layout.cshtml.\";\nThe correct layout (header/footer) is shown.. ",
    "pekspro": "\ud83d\ude33  That so obvious! I don\u2019t get how I could miss that. Thanks for the answer.. ",
    "IlyaSolovyov": "Same issue as #1954. Still waiting for comments from the dev team.. ",
    "jamiewest": "I can confirm this on the preview 2 bits.. I can confirm this on the preview 2 bits.. The UI code uses the email address for the user name, which when set, updates the NormalizedUserName field which has a unique constraint set (see here). In your case, when you update your email address to match your first record, you are getting an error from the database for violating the constraint. \nHere is the UI code that is using the Input.Email field for the username. . The UI code uses the email address for the user name, which when set, updates the NormalizedUserName field which has a unique constraint set (see here). In your case, when you update your email address to match your first record, you are getting an error from the database for violating the constraint. \nHere is the UI code that is using the Input.Email field for the username. . Looks like you would need to override Id with TKey or whatever data type you want to use and potentially create a constructor to initialize the variable. Deriving this would also require that you create derived instances of the stores and manager as well. Is there a specific reason why you need this PK to be a different data type? Also, are there instances where the data type would be different that of TKey.. Looks like you would need to override Id with TKey or whatever data type you want to use and potentially create a constructor to initialize the variable. Deriving this would also require that you create derived instances of the stores and manager as well. Is there a specific reason why you need this PK to be a different data type? Also, are there instances where the data type would be different that of TKey.. ",
    "bhosale-ajay": "In this case, it will be helpful to show a validation error instead of throwing an exception. If I override the default UI, and allow user modifying the email without changing username, the login fails if username and email does not match. Team should reconsider this behavior, or provide a way to override this,  . ",
    "dragankae": "I wanted to use Guid types for my identifiers and I noticed that TKey is not set on the Id in IdentityRoleClaim and IdentityUserClaim while is set on IdentityRole and IdentityUser. That kind a confused me, but anyway i will try with your suggestion with overriding.. ",
    "gulbanana": "I\u2019ll look forward to it. At the moment our TUser is really a \u201cuser accessor\u201d which has to be contextualised to retrieve the real orm object, which is fine in IUserStore but kind of a pain for app code to do.. ",
    "assyadh": "Thanks, this is what I am planning to do.\nHowever I was wondering if there was any plan on not relying to a 'data storage' layer, but rather go even more abstract on how users are managed?\nMy thinking I guess is that going forward, more and more developers will get rid of the security risk that comes with handling password hashes, and externalize this to other services.\nHamza. ",
    "vcsjones": "Assuming you are using the cookie authentication, you can do something like this:\ncsharp\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)\n              .AddCookie(options => {\n                        options.Cookie.Name = \"blah\";\n              });\nKeep in mind that if you do something like this, your users will appear signed out because the cookie name changed. It's possible perhaps to migrate people to a cookie with a new name, give it some time to let users migrate over, then eventually make the cut over, but I'm not aware of anything in-the-box that makes that work.. ",
    "StuffOfInterest": "@pranavkm, I guess @javiercn took care of it already.  Saved me from doing a clone for a one line fix.  Thanks for getting it taken care of.. ",
    "ruidfigueiredo": "I wrote a blog post about how you can use cookies to secure a web api. With that blog post I've also included a sample project in this github repo where you can create a sign in using an Angular application as the client of the web api. The web api uses ASP.NET Identity. It only exposes registration and sign-in but it shouldn't be too hard to expand from that.. ",
    "kedzior-io": "Yeah, sorry about responsiveness and thanks for your time. \nRead the document and so what I understand is that to disabled GDPR but still use TempData  I do the following:\nservices.Configure<CookiePolicyOptions>(options => {\n                options.CheckConsentNeeded = context => false; // ignore user's consent\n                options.MinimumSameSitePolicy = SameSiteMode.None;\n});\n...\nservices.Configure<CookieTempDataProviderOptions>(options => {\n               options.Cookie.IsEssential = true; // mark it as essential\n });\n... \napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseCookiePolicy();         \napp.UseAuthentication();\napp.UseMvc();\nThat still won't work. . Ok that seems my bad. The above configuration works. \nWhile editing template I didn't add \n@await Html.PartialAsync(\"_StatusMessage\", Model.StatusMessage)\nto the particular view I was testing. . ",
    "qqliweng": "can return a IIdentityBuilder Interface from services.AddIdentity()  not IdentityBuilder class directly?. ",
    "ycrumeyrolle": "But what if I am controlling the input mechanism?\nIn my case, password is a PIN typed on a randomized virtual keyboard. The http request just has the position on the keyboard, not the value. After decoding the position, I am able to provide a byte array without passing by a string.\n. ",
    "blankenbush": "Pull request - https://github.com/aspnet/Identity/pull/2066. Should be good now.. ",
    "wijnsema": "\nIf you are using external providers we expect the 2fa enforcement to be their concern, not that of your app.\n\nFrom a theoretical point of view, I agree with you. In practice, with social providers like Facebook and Twitter the 2fa from the app can be a welcome extra security layer. \nLike mentioned before: As a developer using Identity I was surprised to see 2fa not working with external login. But I understand your explanation.\n. Maybe not a big problem.\n\nThey were probably logged in to Facebook earlier, and trusted their computer for a week or so.\n2fa might not be the same for all platforms\n. Indeed it's a matter of opinion, I was merely stating my expectations.\n\nMaybe this discussion is popping up in the future and then we can look at it with a little more statistics at hand.\nFor now I'm OK with this, good to see the bug is being fixed!. @vankampenp be careful not overrate 2fa as 'prove' of a users identity. 2fa is just an extra layer. 2fa is as secure as the generated key used to set it up. If this key is leaked somehow (it is not stored encrypted in the default implementations) anybody with this key can bypass 2fa easily.. @HaoK  I'm not sure this is actually a bug. Maybe @vankampenp can clarify.\nFrom my perspective: \nI wanted to change the behavior of the app to require 2fa for external login providers. I changed the ExternalLoginSignInAsync call to bypassTwoFactor: false. But then result.Succeeded is false while result.RequiresTwoFactor is true. \nThe code then tries to register a new user, which fails because the user already exists!\nIf you add\nif (result.RequiresTwoFactor)\n{\n   return RedirectToPage(\"./LoginWith2fa\", new { ReturnUrl = returnUrl });\n}\njust like in Login.cshtml.cs you are redirected to the 2fa page as expected.\nIf you have bypassTwoFactor = true these lines have no influence. \nSo yes, you could call this dead code, but it is very convenient for those who change the bypassTwoFactor while not harming those who leave it as is.. Taking one step back, it wouldn't be dead code if the default would be to have 2fa for external logins.... ",
    "mmillican": "Thanks @HaoK! That did the trick.\nI also had to change the unique index on the Roles table as well.. ",
    "OphiCA": "@HaoK Thanks for the pointer, it looks like it fixed the exception. I was wondering why the SignOut method was being called, and now that the exception is no longer an issue I'm simply redirected to the login screen. I guess the session was expiring and thus triggering the SignOut method.\nSo, my next question is, why is it that my session is set for only 30 minutes? In the ConfigureApplicationCookie I do set the ExpireTimeSpan to four hours, so why is it being signed out earlier? Do I need to set the Cookie.Expiration property too? I thought the ExpireTimeSpan is the recommended property for controlling the lifetime of a cookie?\nThanks again!. @HaoK I figured it out! After your last comment I downloaded a copy of the solution and followed along the method calls to see where I was failing. After a few hours, it turned out that I, for whatever reason months ago, decided not to store a security stamp in the database. I guess I was being lazy since I was going to be the only user, not really sure? Anyway, once I added it in everything started working as I expected it to.\nThank you for pointing me in the right direction, I really appreciate it!. ",
    "Rightio-Limited": "I do have a custom implementation of the UserStore and RoleStore, but I don't know where to begin in debugging this.. I've finally worked out what this is.  It's to do with cookie validation checking being run every 30 mins by default.  It's a fault in asp.net core 2.1 and should be fixed in 2.2.\nSee this thread for further details.\nhttps://stackoverflow.com/questions/53450844/session-logged-out-too-soon\n. ",
    "enghch": "Won't this change the result from \"role\" to \"roleName\"? Is that the right thing?\n. ",
    "rosieks": "This method returns a flag indicating whether the supplied character is a lower case ASCII letter. ASCII table doesn't include non-english characters.. ",
    "svethors": "True enough, so I would propose that the methods should not be limited to ASCII characters. And of course the doc comments changed accordingly. (The code above should includes full UTF-8 range of chars that have upper an lower case versions).\nAlternatively, if there are good reasons only ASCII characters should be evaluated for case in a password, I would propose either a new configuration extension method like ReplacePasswordValidator, or possibly a ClearPasswordValidators that can be executed before AddPasswordValidator.\nThe reasoning being that creating a custom password validator that handles more than ASCII is easy enough, but calling AddPasswordValidator with the custom validator will leave the default validator in place, leading to the default reporting an error, while the custom reports OK. \nTo replace the default validator one has to do something a bit mode cumbersome like this:\n```\nIdentityBuilder identityBuilder = services.AddIdentity();\nvar serviceDescriptor = services.FirstOrDefault(descriptor => descriptor.ServiceType == typeof(IPasswordValidator));\nservices.Remove(serviceDescriptor);\nidentityBuilder.AddPasswordValidator>();\n```. "
}