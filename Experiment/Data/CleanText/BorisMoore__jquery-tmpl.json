{
    "BorisMoore": "This was fixed in the nje fork, and pulled in to this repo recently.\n. This was fixed in the nje fork, and pulled in to this repo recently.\n. This is supported. See a comment I added to api.jquery.com on the same question: \nhttp://api.jquery.com/jquery.tmpl/#comment-84948336\n. Closing\n. Correction: the comment I referenced above was about spaces in the field name, not in the field value. But the scenario of spaces in the value should work fine. \nThis works for me, in IE8 in both in compat mode and regular mode:\n```\n\n    <input type=\"text\" id=\"companyName\" name=\"companyName\" value=\"${companyName}\" />\n\n\n\nvar company = { companyName: 'ABC ASDF' };\n\n$(function () {\n    $(\"#template1\").tmpl(company).appendTo(\"#results\");\n});\n\n\n```\n. Yes, that is it exactly, but the problem remains also if you do $('div#template').template() where the #template div wraps the template. The problem is using an element other than a script block to wrap the template. \nWorkaround:\nreplace value=\"${companyName}\" by value=\"${ companyName }\",\nor better, wrap the template in a script tag, not a div.  \nSee also http://api.jquery.com/jquery.tmpl/#comment-104776699\n. The blog post you refer to makes a few mistakes in the way it uses jQuery Templates, leading to figures and comparisons that are not actually meaningfull. I got in touch with Riley, and he reran the tests, with corrected API usage. The results are posted here http://rileydutton.com/post/1303173205/jquery-templates-vs-jqote-2-a-followup-a-k-a-the\nThe remaining difference between jQote2 is small, and is a result of the additional features we have that are not in jQote2:\n- Using with() so that you can say {{html name}} rather than {{html this.name}} as in jQote.\n- Test for whether fields are defined, so that we can accept \u2018jagged\u2019 arrays, where a field may be defined on some items and not on others. \n- Fields can be functions: We test for whether foo (in {{html foo}} or ${foo} ) is of type function, and if so, we call the function. \nAnd so on... \nSo in fact it is not true that the Templates plugin has poor performance compared to other plugins. \nNevertheless, perf is very important, and we will continue to work on improvements. The API to return strings is already planned as a more discoverable API. See http://github.com/nje/jquery-tmpl/issues#issue/16. We will also look at possible settings to choose between different optimizations based on the set of desired features. (This may concern more optimizing DOM insertion than string concatenation).\n. Correct. See http://api.jquery.com/jquery.tmpl/ for examples of how to provide a string as template, \nIn http://api.jquery.com/tmpl/. $(\"selector\") is a wrapped set to the container of the template.\n. Yes, you are right. That line was there from the beginning - in John Resig's original prototype. It reflects the philosophy that the goal it to guarantee HTML visual layout, but not to preserve 'pretty printing' or similar of HTML. \nWe can consider changing that philosophy. I agree that there are scenarios where it is valuable to maintain that fidelity. I am happy to keep this issue, open, (so will open it again now), particularly as I am planning to make rendering to an HTML string a lot easier to achieve in the Beta2 version. (We hope to release a  Beta2 in April.)\n. Several reasons, such as that in the conversion to code, for creating a compiled function, line breaks can lead to JS errors, missing string delimiters, etc. Supporting them would have added additional code for compilation.\nIn the ongoing work at  JsRender and JsViews I am currently working on a different compilation approach which may allow me to provide a mode that preserves white space.... (See https://github.com/jquery/jquery-tmpl/issues/96 for context re: roadmap).\n. There is now a version number, but it will only distinguish 'tagged' builds: \nTagged Betas will have specific version numbers, 1.0.b2 etc, and all other intermediate builds prior to the v1.0 release will be 1.0pre.\nFixed in https://github.com/jquery/jquery-tmpl/commit/38a01a74a5949e9399ab736bc3c71c984edde9c5\n. If you have field names that correspond to javascript key words, then you can use $data['keyword']. (e.g. {{if $data['return']}} ). See the thread discussing this, here:\nhttp://api.jquery.com/jquery.tmpl/#comment-86220035 \n. Closing for now - assuming the problem is around the keyword issue. Otherwise, please let me know, or re-open the issue. Thanks.\n. That variable is within a closure, so will not collide with global variables. But it will collide with a field name on data, so in that respect you are right. Did you have a scenario where you had a collision?\n. Yes, so it is the field name issue on data (due to with()) I mention above. Thanks, I agree we should look at changing this...\n. In most cases that is not an issue, since one does not add code within the scope of the with. ${user} will work fine even if user is not defined on some data items. (The template tags deal with 'undefined' without throwing...\n. The collision with global is caused in abbakym's sample because he is using {{each [,]}} - which is implemented by each([,], function($index, $value){with(this)... The $value is undefined, so the this pointer falls back to the document object. We don't support {{each [,]}}! {{each []}} or {{each [a,b]}} where a and b are defined will work fine!\n. Well at any rate, we will fix the _ issue, so at that point there will be no collision. This issue is open to track that... \nAs you say, [,] is otherwise supported, though it will likely not be a common scenario\n. See also https://github.com/jquery/jquery-tmpl/issues/issue/43\n. OK, fixed in https://github.com/jquery/jquery-tmpl/commit/fe9d7e4fe7659fdcaae686a391597ff6dd730cbd. \nNote that I have set the variable used in buildTmplFn to , as a variable that is unlikely to exist as a global, or as a field name on data. I could have chosen a longer one, such as __$9, or whatever, but there is a cost in extra code size of jquery.tmpl.js, and also on compiled template size... \n. Relates to https://github.com/jquery/jquery-tmpl/issues#issue/21. \n. {{if (!isEnabled())}} will work. But {{if false==isEnabled()}} will fail! \nSo yes, there are indeed some issues around automatic detection of null/undefined, and type function, for expression in {{if expression}}. We will be working on improvements in this area... See also issue 35\n. See also related issue https://github.com/jquery/jquery-tmpl/issues#issue/40 and https://github.com/jquery/jquery-tmpl/issues/issue/41\n. See also https://github.com/jquery/jquery-tmpl/issues#issue/66:\nBetter error handling options\n. For the codeless (strict) approach, see also the ongoing work on JsRender. Take a look at this post for more context.\n. - Are you saying that the PHP server rendering of a scriptblock containing a template which has closing tags within it is causing the server rendering to fail? \n  (There is no parsing problem within the browser, right?) \n- Or is your concern that browsers might follow this rule in the future, even for script blocks that are not of type text/javascript?\nDoes the <\\/tagname> approach work in PHP on the server (supposing we then added support for that or some similar escaping method when parsing the template in the template engine in browser)? \n. OK, thanks, very interesting. We'll look into it.\n. Closing this issue, and tracking with:\nhttps://github.com/jquery/jquery-tmpl/issues#issue/71. \n. Can you clarify what you scenario is? Why would you want a script block in a template?\n. document.write will only work if if it is in an script included statically in the page. By the time you render the template the page is already created/written. \nYou need to use the recaptcha AJAX API: http://wiki.recaptcha.net/index.php/Overview#AJAX_API\n. Do you mean that any js file that is loaded in the browser, and which uses new Function() in the context of an AIR application will fail? That's a big restriction to put on all javascript platforms. Even jQuery itself uses it (in parseJSON). \nOr is it some error arising in the specific instance of a call to new Function() in buildTmplFn? In that case, does the error occur no matter what template you are using?\n. Does $.parseJSON(...) also generate a violation?\n. Closing issue for now.\n. Yes - a fix is on the way for this. \n. Fixed in https://github.com/jquery/jquery-tmpl/commit/38a01a74a5949e9399ab736bc3c71c984edde9c5.\n. Can you provide a bit more context for repro of this problem. I run the following in IE8 and the attribute is in the rendered template instance, with the content preserved in the attribute, and no error on line 431:\n```\n\n    <span data-foo=\"<test>\"&gt;content</span>\n\n\n    $(function () {\n        $(\"#template1\").tmpl().appendTo(\"#results\");\n    });\n\n```\nWe need to distinguish between bugs in the jQuery templates code, and problems in browsers that are not anything to do with templates...\n. Closing, per comment added to 7115.\n. Relates to https://github.com/jquery/jquery-tmpl/issues#issue/11. \n. Closing this issue, and tracking with:\nhttps://github.com/jquery/jquery-tmpl/issues#issue/66.\nBetter error handling options work is planned\n. In fact the right place was here, but will be moving to the jQuery Bug Tracker: http://dev.jquery.com/. I'll add info on the ReadMe soon about that, and will actually be removing this Issue Tracker. In the meantime you can still post here...\nThe https://github.com/nje/jquery-tmpl will be for any experimental work not yet being included in the official jQuery Templates plugin. In the context of that work, issues can be posted on the Issue Tracker there.\nThat said, for now I am tracking both issue trackers, so your issues will not be missed in either case... (Just excuse me if I am slow to reply sometimes, through lack of cycles/time...)\n. Yes I am working on making it possible to render a template to an HTML string, without having a DOM dependency, and then optionally allowing activation after DOM insertion in the client. \nThis would open the way to: \na) better perf for read-only client rendering scenarios, \nb) optional initial rendering on the server, \nc) optional activation on the client, no matter whether the markup was server-rendered or client-rendered.\n. @kof\nYes, it should help a lot for node-jqptl. When we get the new version out you can confirm with me whether it works for you...\n. The goal is to remove DOM dependency, and provide pure string-based rendering with better perf. Take a look also at https://github.com/BorisMoore/jsviews, which provides data-linked interactive views on top of JsRender. So you can get all the support for interactive scenarios etc. provided by the DOM integration of jquery templates, ($.tmplItem, for example, which becomes $.view in JsViews) even while using string-based rendering. If you render on the server, you can still use JsViews in the client...\nSee also http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html for more links and context. All this is work in progress, of course. (jQuery UI could end up using JsRender and JsViews - we don't know yet...).\nAs to removing the jQuery dependency, that is not currently planned, but of course a non-jQuery implementation of JsRender is quite possible, so could be envisaged later - along the lines of JsDefer, which provides both jQuery and non-jQuery implementations.\n. JsRender.js can be run on the server, in so far as it has no DOM dependency. But it DOES depend on jQuery. I have not addressed the issue of loading jQuery itself on the server. As I mentioned above, there is not any plan right now to remove jQuery dependency from JsRender, but that could in theory be considered in the future...\n. update - I am also working on a non-jQuery-dependent version of JsRender... Stay tuned...\n. Use\n    ...\n{{tmpl \"#partial_template\"}}\nDon't rely on the partial_template global that exists only in IE.\nAlternatively you can define a named template, or create your own global variable. See http://api.jquery.com/template/ and http://api.jquery.com/jquery.template/\nMake sense?\nBoris\n. OK, good. Closing issue...\n. Yes, that is the plan. We obviously will not move from beta to rtm without first adding unit tests.\n. Thanks for this work and for the detailed status, Jorn. \n. It has been agreed with the jQuery team that unit tests will be added subsequently to Beta2, since there are quite a few API changes expected for Beta2. Unit tests must be completed before releasing V1.\nSee also http://bugs.jquery.com/ticket/7595, which has been resolved as a dup of this...\n. From now on, making fixes directly in jquery/jquery-tmpl\n. Yes, a lot of people have requested this. I did at one point implement an index field on the template item, but decided against if for the reasons explained here: \nhttp://api.jquery.com/jquery.tmpl/#comment-111707270\nhttp://api.jquery.com/jquery.tmpl/#comment-98013066\nWe may consider adding that feature at some point, but in that case we need to work out the strategy for cases when things might get out of sync...  Keeping as an open issue for now.\n. We will be considering this for a Beta2 (probably coming out in April).\nSee also dup https://github.com/jquery/jquery-tmpl/issues#issue/51 \n. $index is available on the 'next-generation' work going on at JsRender. Take a look at this post for more context.\n. Well the news is as stated in my post, linked above. jquery.tmpl will of course continue to be available and you can use it, but it will not be maintained with ongoing bug fixes or feature requests. JsRender and JsViews will be where active ongoing development will be happening... \n. Sometimes you don't want to modify the data. For example other 'clients' may be accessing the data. It may be being round-tripped to the server. Keeping this open as a feature request to be considered. (It's is something others have asked for too, and which I have been considering.) \n. Agree you can do that. We have to find the right balance... Default values may be a strong enough scenario not to want to force cloning of data every time you need a view to fall back to a default string in the case of jagged data, for example. Not saying we have to do it though. Just tracking it for now... :-)\n. I am looking at including support for default values in the ongoing work at  JsRender and JsViews. (See https://github.com/jquery/jquery-tmpl/issues/96 for context re: roadmap).\n. Certainly we need to keep the code and the tags 'lean and mean' - rather than bake in a lot of special cases - as long as there is still a way to address the scenarios. You can create your own template tags if you want, e.g. {{for}} but we will not include new tags in core unless there is a very strong case for them...!\n. See also https://github.com/jquery/jquery-tmpl/pull/116\n. Yes, that is what I suspected. Storing the template in a non-script HTML element can break a lot of things. The template is not necessarily well-formed HTML anyway, and even if it loads OK as HTML there can be a lot of browser-specific side-effects such as this one in FF. Also, less good from a perf point of view, FWIW. \nSo basically we have to make sure people follow the best practice of using script elements, or else creating a template from a string using .template().\n. What is the code you are using to render that template? Best would be to put complete minimal test case on jsbin or jsfiddle.\n. If panels is not defined, then {{each}} will not fail, but will be a no-op. The compiled code includes if(typeof(panels)!=='undefined' && (panels)!=null){$.each(.... Works for me in IE8. Are you using the latest jquery-tmpl code? \nOtherwise can you post a sample to http://jsfiddle.net?\n. Closing for now.\n. We decided against this feature for the reasons explained here: \nhttp://api.jquery.com/jquery.tmpl/#comment-111707270\nhttp://api.jquery.com/jquery.tmpl/#comment-98013066\nKeeping issue 28 open though, to track this request.\n. Perf is an important aspect too, I agree. I'll be on the lookout for alternatives to address this issue. One way good be to pass the index to the rendered event, so users can easily set index on the item if they want to, in the onRendered handler.\n. This is a dup of http://github.com/jquery/jquery-tmpl/issues#issue/28 \n. You can add user-defined fields to $item, or to $item.parent, etc. But be careful about making assumptions about template engine rendering semantics. You functions used in the template could be called more than once, so should be idempotent. And future versions or different APIs might render according to a different processing model - e.g. a different tree traversal. \n. This is no doubt because you are using a div to wrap the template. Your template is not valid HTML. Use a script block, as in the doc examples etc.\n. {{if (!isEnabled())}} will work too. But {{if false==isEnabled()}} will fail! \nSo yes, there are indeed some issues around automatic detection of null/undefined, and type function, for expression in {{if expression}}. We will be working on improvements in this area... These issues will be tracked by issues 11 and 21.\n. Closing this issue for now. HTML5 structural elements in current browsers which have no built-in support for them is not a target scenario for jquery-tmpl at this point. (We are currently in Beta and for our first release have many other target scenarios we need to address). That said, a version of innerShiv or similar that works with templates may be possible. But it cannot be supported by specific code in the official plugin... \n. Thanks. I'll consider that if we do significant iterations on that part of the code.\n. I've reopened this issue, for investigation. Not sure how soon we will be able to address it though...\n. Difficult to answer without knowing how you are 'ajaxing in' your templates. One way, which I would encourage, is to create a remote script file to load the templates as named templates, from strings:\nMytemplates.js:\n$.template( \"rowTemplate\", \u201c<tr>\u2026</tr>\u201d ); \n$.template( \"liTemplate\", \u201c<li>\u2026</li>\u201d );\nThen either include it statically, as <script src=\u201dmytemplates.js\u201d \u2026> or use jQuery.getScript or equivalent to load dynamically. Render as named templates using $.tmpl(\"rowTemplate\", data) or {{tmpl(data) \"liTemplate\"}}. \nCan  you test whether this approach works for you?\n. Yes, agreed. There is a fix for this coming but it will be a breaking change, so it may have to wait for Beta2. See https://github.com/nje/jquery-tmpl/issues#issue/29 for a discussion of this issue. The workaround for now of course is not to use the this pointer in the method, but, for example, pass the data item in as             \n{{tmpl(children($data)) \"crateWithChildrenTemplate\"}} \nCrate.prototype.children = function(data) { \n    return Crate.childrenOf[data.id] || []; \n}\nBTW you can use    {{tmpl(children($data)) \"#crateWithChildrenTemplate\"}} directly. You don't need to create a named template. \n. I have decided to commit this fix now, since it should not be breaking except in rare cases, and is a simplification of code and an improvement in 'semantics'. Fixed in https://github.com/jquery/jquery-tmpl/commit/4a6578dcfb9bfa32d3743dc3823b4ef04a95d7ee \n. You can add globals. Alternatively you can pass functions in with options (could be anonymous functions or functions defined within a closure) and then access them via the template item. \nI added a new sample, to document this approach: https://github.com/jquery/jquery-tmpl/blob/master/demos/movies/PagesCore/moviesNoGlobals.html: \n    $( \"#bookingEditTmpl\" ).tmpl( booking, { formatDate: formatDate } ) \n    ${$item.formatDate()}.\nSee latest commit: https://github.com/jquery/jquery-tmpl/commit/f9b00c8bf57f716314c13a2f1d688abb6876d017\n. In your case you can use   {{if true!=$data.isEnabled()}} or {{if !$data.isEnabled()}} and it will execute the function only once. \nBut yes, you are correct that the built-in detection for undefined, or type function can lead to repeated evaluation, and the plan is to fix this issue, probably within a Beta2 release.  Closing this issue, but tracking the problem with the related issue https://github.com/jquery/jquery-tmpl/issues/#issue/11. \n. This is the same issue as https://github.com/jquery/jquery-tmpl/issues/#issue/11. One workaround is to wrap your expression in a function, and use {{if myFunction()}} or {{myFunction($data)}}. Make your function test $data.validation.required, and provide your own error handing, dealing with intermediate objects that may be undefined, etc. \nIf you don't want to create a global function, use $item.myFunction() - see https://github.com/jquery/jquery-tmpl/issues/issue/39 \n. It works for me. Can you provide full repro, e.g. on http://jsfiddle.net/? \nIs trailer a string of HTML markup or reference to an HTMLElement? Looks like you have created that trailer object by rendering another template? \nI think you need to show your scenario in a repro for us to be able to determine whether this is a bug.\n. You need \n    ${trailer}\nsince you want to show the markup in the textarea, not insert HTML child elements to the textarea. \nFor the rest, I'll look at it at some point. (Not able to do so immediately though...).\n. Comment received from gordonslondon:\ni'm having the same problem:\n- I make an ajax request wich return <textarea><b>Welcome</b></textarea>, i assign this html to the variable my_html\n- then i render a template like this \"{html my_html}\"\nthe content of the textarea is now: <b _tmplitem=\"8\" >Welcome</b> insteadof  <b>Welcome</b>.\nIs there any workaround ? or maybe i'm missing another thing ..\nthank you\nMy reply:\nYou need to escape the content of the text area. <textarea>&lt;b>Welcome</b></textarea>\nOr at least the first <, as shown. \nThere is no automatic detection of textareas, so no built-in handling of this issue.\n. See also https://github.com/jquery/jquery-tmpl/issues/46\nClosing\n. This is already being tracked as https://github.com/jquery/jquery-tmpl/issues/#issue/10. It will be renamed. See linked issue...\n. A template tag, yes: {{! This is a comment }}. That is how to comment templates without your comment getting rendered with the rendered template. \nWe don't currently attempt to support rendering out HTML comments. I have not tested that. But the tmplItem is added to elements that do not have a parent element within the rendered template instance. Those elements have a comment parent, so are getting marked as top-level. \nCurrent plan is not to target this scenario... \n. Closing for now, as unsupported scenario.\n. You need to put the comment before the part you want to render. A comment {{! xxx}} should not contain other tags...\nThe following should work:\n$.tmpl(\"Before {{!  }}<p>${x}</p> After\",{x:\"Hello\"}).appendTo(\"#result\");\n. Closing\n. You need to escape the content of the text area. &lt;b>Welcome\nOr at least the first <, as shown.\nThere is no automatic detection of textareas, so no built-in handling of this issue.\nSee also https://github.com/jquery/jquery-tmpl/issues/42\nClosing...\n. I think automatic modification of the data objects by jquery-tmpl is not a good idea. The application should own the data, and do any conversion that is desired. Automatic conversion of jQuery objects to HTML strings should be under application control, in my view... Closing...\n. To be considered for Beta2\n. Can you provide a full test case showing this issue? Ideally on http://jsfiddle.net/\n. Yes, this is a feature we hope to provide in Beta2. See also the following, copied from \nhttp://github.com/nje/jquery-tmpl/issues/16 \nThis feature is already available, but not very discoverable:\n\n    <person name=\"{{html name}}\">\n        <details condition=\"{{html condition}}\"/>\n    </person>\n\n```\n\n    var somedata = [\n        { name: \"John\", condition:\"a&gt;b\" },\n        { name: \"Pete\", condition:\"b&lt;a\" }\n    ];</p>\n<pre><code>var tmplFn = $( \"#personTmpl\" ).template();\n\nvar xmlResult = $.map( somedata, function( item ) {\n    return tmplFn( $, { data: item } );\n}).join(\"\");\n</code></pre>\n<p>\n```\nOf course, although the above is reasonably easy to use, it is not at all discoverable. We should consider providing a discoverable API for this.\nNote that calling tmpl() does indeed create DOM elements, and even adds jQuery data expandos to them, so even if you get the HTML string of the result, it will not be clean.\nThe above approach does not use the DOM at all, and so can also run on the server, etc. For attribute strings you may have characters that would be HTML encoded (as in my example above), so the {{html foo}} tag is appropriate in the template, rather than ${foo}.\n. See issue 159.\n. Yes, closing as dup. \nhttps://github.com/jquery/jquery-tmpl/issues#issue/28\n. You have \n    {{tmpl(Languages.results) '#languageTemplate'}}\nbut your template is named \"languageTemplate\"\nSo use\n     {{tmpl(Languages.results) 'languageTemplate'}}\nPlease reopen if this was not the issue....\nThanks.\n. Thanks, we will look into this for Beta2. \n. Yes, not sure we want to support this. I will look into it when we implement some changes around Beta2\n. Yes, correct, using {{= expression}}, which is semantically equivalent to ${expression}, should allow using expressions that include } characters...\nI missed that when I replied earlier...\n. Yes, thanks. I am also looking at some related ideas for Beta2, and will look at your implementation when I get to that aspect. Definitely on the map to make getting remote templates easier...\n. Closing, since we are tracking the better error handling feature here: https://github.com/jquery/jquery-tmpl/issues#issue/66\n. The above seems incomplete. For example, there is no selectOptionsTemplate. A complete HTML page would allow me to see more of what you might be doing here. \nBut if I modify the page so it can run I get the following, and the code runs correctly. The _templateItem$ has nodes and parent, tmpl are not null after update:\n```\n\n    Result:\n\n    Change place\n\n\n \n    <div title=\"${Name}\">${Name}</div>          <br />\n    {{each Places}}\n        {{tmpl( $value ) \"#PlacesTemplate\"}}          <br />\n    {{/each}}\n\n \n    <div title=\"${Place}\">${Place}</div>                     <br />\n\n</p>\n<pre><code>_options={ Items: [{ key: 1,value: \"one\" },{ key: 2,value: \"two\" },{ key: 3,value: \"three\"}] };\n_data={ Name: \"Tom\",Places: [{ Id: 1,Place: 'London' },{ Id: 3,Place: 'Berlin' },{ Id: 5,Place: 'Brno'}] };\n\n$(':button').click(function (event) {\n    var _templateItem$=$.tmplItem($('div[title=Brno]'));\n    _templateItem$.data.Place='newPlace';\n    _templateItem$.update();\n\n});\n\n$('#TestTemplate').tmpl(_data).appendTo('body #Result');&lt;/script&gt;\n</code></pre>\n<p>```\n. Closing, since this works fine for me.\n. I have reopened, and changed the title. We currently don't support using template rendering in code that is itself called as part of rendering a template. Your GetOptions is doing that. I hope to fix this, and also provide better APIs for rendering a template to a string, in Beta2, due in April.</p>\n<p>Repro for this issue:</p>\n<p>```\n<script id=\"myTmpl\" type=\"text/x-jquery-tmpl\"> \n    <div id=\"test\">${getFoo()}</div>\n\n\n\n\n\n    function getFoo()\n    {\n        $.tmpl( \"<b></b>\", {} ).appendTo($(\"<div></div>\"));\n        return 'foo';\n    }\n\n    function update()\n    {\n        var ti = $( '#test' ).tmplItem();\n        ti.update();\n        alert( $('#test').tmplItem() === ti );\n    };\n\n    $( '#myTmpl' ).tmpl().appendTo( '#result');\n\nUpdate\n```\n. BTW you don't need to do the complicated code for building your options HTML. Just do:\n<select>{{tmpl(_options) '#selectOptionsTemplate'}}</select>\nrather than \n<select>{{html GetOptions()}}</select>\n. No, you are correct, it should treat 'false' as data, and similarly if you pass 0 as data. OTOH if you call tmpl() with no parameter (undefined), then it should render the template once, with an empty object as data. Passing null should still be treated as passing with no parameter...\nThanks...\n. Fixed in https://github.com/jquery/jquery-tmpl/commit/60024579d2b6ca54d4c9ecfd5357f9d09aa7b10b.\n. Yes this relates to the issue on nje/jquery-tmpl: https://github.com/nje/jquery-tmpl/issues/issue/29. I'm keeping this issue open. As Joern says, we expect to make some design changes that will address this in a Beta2 release, probably in April.\nKeeping this issue open, for tracking.\n. Yes, this is on our list of features we are considering...\nSee also \nhttps://github.com/jquery/jquery-tmpl/issues#issue/12 \nhttps://github.com/jquery/jquery-tmpl/issues/60\nhttps://github.com/jquery/jquery-tmpl/issues/21\nhttps://github.com/jquery/jquery-tmpl/issues/11\n. Does this repro in IE8, or only in IE7?\n$.tmpl( \"${Name}(${ReleaseYear})\", movies ) should return a jQuery object, not an array. Does it do so in IE8, but return an array in IE7? (I'm not set up with IE7 currently...)\n. No repro so far, and no response to question above. Closing for now. \n. Yes, take a look at 61. Closing this one.\n. The intention of the design here is that if the 'template' parameter to {{tmpl template}} is a string, then it can be \na) a selector, corresponding to a script element whose content is the template\nb) an HTML string corresponding to the actual template markup\nc) the name of a named template\nThe above applies whether you use {{tmpl 'somestring'}} with the string explicitly inline, or whether you use a variable, or data field, which is of type string, so the current value of the variable corresponds to your chosen string.\nSo what happens if you use the string \"#foo\", for example. That could correspond to a) b) or c). So it is implemented to consider that if it corresponds to a named template, it is c), otherwise if the string contains at least one HTML tag, it is considered to be case b), otherwise it is treated as a selector, i.e. case a) .\nSo if you want to make a variable behave as template markup even if it does not contain HTML tags, you can hack as follows:   \n```\nvar comment=\"{{! }}\";\n{{tmpl comment+myPropertyName }}\n```\nWhat this is doing is prepending a template comment tag containing an HTML tag to your HTML string in your variable. So it is forcing the templates engine to think there is an HTML tag, so it must be case b): markup for a template.\nI'll close this as by design...\n. To be clear, there is no problem with passing template markup to {{tmpl}} via variables or parameters. The discussion here is only on how to disambiguate a) b) and c), whether or not the string comes from a variable, for from inline content in the template...\n. That is because you are passing a javascript expression containing variables which may be undefined. The template engine can check if you pass a single variable that is undefined: if conditional1, but cannot help the javascript engine to figure what to do with an expression that contains undefined variables within it: if conditional1 || conditional2.\nSo the solution is either:\n{{if conditional1}}\n{Success\n{{else conditional2}}\nSuccess\n{{/if}}\nor use this for you data:\n[{\n    conditional1: true,\n    conditional2: false\n}, {\n    conditional1: false,\n    conditional2: true\n}, {\n    conditional1: true,\n    conditional2: true\n}, {\n    conditional1: false,\n    conditional2: false\n}]\n. Sure, you would use {{if $data.conditional1 || $data.conditional2}} to avoid repeated content. Just showed you the other form to show how the templates engine can be smart about top-level undefined, but cannot prevent the javascript engine from throwing if you have expressions containing undefined variables. The javascript engine will consider that \nif (foo.undefinedField) is equivalent to if (false). But if ( undefinedVariable ) will fail to execute - and will throw:\n```\na={x:1}\nif (a.x) {\"yes\"} else { \"no\" }\n\"yes\"\nif (a.foo) {\"yes\"} else { \"no\" }\n\"no\"\nif (foo) {\"yes\"} else { \"no\" }\n'foo' is undefined    \n```\nSo if ( foo ) is a valid expression but will still throw...\nThe only alternative is for the tmpl implementation to wrap things in try catch blocks. We'll be looking at this kind of possibility for better error handling in a future (Beta2) release...\n. You can provide the hasConditional function on $item, as you suggest, yes, or you can include $data.conditional in your template, or you can ensure conditional1 and conditional2 are defined (true or false) on your data... \nBut the template engine can't tell the JavaScript interpreter to interpret {{if conditional1 || conditional2}} as {{if $data.conditional1 || $data.conditional2}}. And we don't want to be in the game of parsing JavaScript expressions, and figuring out where the variables are, and appending \"$data.\" to them. Once you provide an expression, it will run as is...\n. Thanks cstavro. I'll take a look at this, and I agree about the issue. But I won't be getting to it for a while, as I plan to rework this aspect of jquery templates some time in March. The plan is to have a Beta2 in April, which should included considering this issue...\n. Thanks cstavro. Yes I will be looking at this for Beta2.\nSee also https://github.com/jquery/jquery-tmpl/issues#issue/14\n. Thanks Garann, But your fix is inverting the logic if name contains HTML tags. At that point, it should be treated as markup for a template (case b) in the issue). In your modified code, jQuery( name )[0] will not be null, so jQuery( name ) will be passed to jQuery.template. This is wrong. In that scenario, you want to pass the HTML string, name, to jQuery.template...\nAlso I am uneasy about using jQuery( name )[0] as a test. If name is \"#myTemplate\" then if currently the script element with id \"myTemplate\" is not found in the DOM, then jQuery( name )[0] will be null, and \"#myTemplate\" will be treated as markup. Then if you include the script element, \"myTemplate\", suddenly it will be treated as a selector...\n. This was minified using the Microsoft Ajax Minifier 4.0. I have followed up with Ron Logan, the developer. It turns out that there is a command-line switch -term, which I can set, to ensure inclusion of the final ;\n. Good catch, thanks. Fixed in https://github.com/jquery/jquery-tmpl/commit/07d08cb72c7556e950593d6c011d5725db54228e\n. Yes, this is planned for a later version. \nChanging title to correspond to issue above.\nSee: the following copied from http://github.com/nje/jquery-tmpl/issues#issue/17 on nje/jquery-tmpl:\nCurrently the templatetags use curly braces, which is cool but clashes with other templating languages such as Django's. In this case, Django tries to interpret all the text included within {{ }} as if it was a Django templatetag, which ends up being a syntax error and the page can't be rendered.\nAs Django currently doesn't provide a clean way to escape those variables, it would be nice to be able to define the tag used for templatetags in jquery-tmpl. Other JS templating libraries such as jQote2 have this option\nComments\nBorisMoore September 07, 2010\nI'll note that as a feature request. Not sure when we will add that support. For now can you get Django to render the {{ and/or }}, rather than including them as literals, so that you no longer parse on the server as a template tag? On an ASP.NET Web form, for example one might do:\n<% Response.Write(\"{{\"); %>if foo}}\nrather than\n{{if foo}}\n.\njulen September 07, 2010\nWith Django you can achieve that with the templatetag templatetag. You'll end up with code like this:\n{% templatetag openvariable %}if foo{% templatetag closevariable %}\nThat's ugly and unreadable IMHO.\nFor now as a workaround I'm using square brackets and replacing them when the document is ready. So basically the replacement code looks like this:\n$(document).ready(function() {\n  var newtext = $(\"script#my_template\").text().replace(/\\[\\[/g, \"{{\").replace(/\\]\\]/g, \"}}\");\n  $(\"script#my_template\").text(newtext);\n});\nAnd in the template code I use:\n[[if foo]]\nWhich is quite more readable than before.\nAnyway, it would be great if jquery-tmpl could allow customizing the syntax used for the tags.\nBorisMoore September 07, 2010\nUnderstood. I'll consider that feature request, but will need to look into whether it can be achieved with minimal additional code and without creating a big additional test matrix. (Like, for example, that some choices of the tag characters can conflict with other constructs.)\nlimist September 30, 2010\nAnother hand-up for custom syntax for templating tags please, as currently jquery-tmpl will bite all Django users.\nchodorowicz October 05, 2010\nanother vote from me! would be great to customize this syntax\nchrisdew October 05, 2010\n+1\njboesch October 06, 2010\n+1 this sucks for django :(\ntimmolendijk October 10, 2010\nShowstopper, so +1\nBorisMoore October 10, 2010\nI am sure we will address this. Votes and scenario noted. Just not sure of the timeline yet.\ntimc3 October 14, 2010\nAnother +1\nfitzgen October 20, 2010\nJust use a custom template tag in Django to include templates \"raw\" without parsing the template syntax: http://djangosnippets.org/snippets/1684/\nI wrote that template tag for my old JS templating engine, Tempest, which used syntax very similar to Django's templating language as well.\nIn your Django template that will create the page with the javascript, just do something like:\n<script id=\"my-template\" type=\"text/x-template\">\n  {% include_raw \"myapp/mytemplate.html\" %}\n</script>\n<script type=\"text/javascript\">\n  var myTemplate = $(\"#my-template\").html();\n  // etc...\n</script>\ncolinsullivan October 24, 2010\nfitzgen:\nI've got the snippet being recognized by putting it in: myapp/templatetags/extra_template_tags.py\nthen at the top of the template, putting\n{% load extra_template_tags %}\nHowever, the template cannot be found. I receive a \"TemplateDoesNotExist\" error. The template path is correct, because there are other templates in the same folder that are working.\nDo you have an example usage?\nEDIT:\nFigured it out.\nTop of template:\n{% load extra_template_tags %}\nUsage:\n{% include_raw \"../templates/collections/user_collection_template.html\" %} ( path to template relative to your extra_template_tags.py file )\njulen October 28, 2010\nJust a quick note to say that the workaround used in http://github.com/nje/jquery-tmpl/issues#issue/17/comment/393931 doesn't work on IE.\ncolinsullivan November 05, 2010\nThis workaround also doesn't solve the problem of using a template for both Django and jQuery.\n1stvamp November 17, 2010\nThis isn't a fix, just a workaround, and it won't help if you want to dynamically generate the template for jquery-tmpl.\nBorisMoore November 17, 2010\nAt any rate, I absolutely agree with everyone who has requested a real fix for this. We will definitely provide one as soon as we can...\nchrisdew November 25, 2010\nI use Django's ssi tag as a work-around. It does require that I keep my jquery templates in separate files from the django templates, but it's not the end of the world. (I don't need to dynamically generate the jquery templates for my site.)\n{% ssi /srv/my_site/templates/my_app/my_page.x-jquery-tmpl %}\nSee http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ssi and http://docs.djangoproject.com/en/dev/ref/settings/#std:setting-ALLOWED_INCLUDE_ROOTS for more information.\n. Yes, we could consider adding that tag. Do you want to create a new issue on that as a feature request? Obviously relevant to running jQuery templates on the server, but could be respected client-side too.\n. I don't get repro on this:\nhttp://jsfiddle.net/BorisMoore/TSgXA/\nClosing for now. Let me know if I am missing something. Thanks...\n-Boris\n. See pull request and Issue 78. https://github.com/jquery/jquery-tmpl/issues/78\nThanks edoloughlin. But can you provide a complete sample test case of the issue. Sometimes people hit an error on that line of code as a result of a misunderstanding about how to use the .tmpl APIs, so I want to be sure I understand what is going on.\n. Thanks Digitalxero. Yes, I would also like to see an example of how this happens before integrating this change. There have been cases when people have hit an error on that line of code because they were in fact not using the template APIs correctly... So it would be great to see a complete example...\n. See https://github.com/jquery/jquery-tmpl/issues/76\nThanks edoloughlin. But can you provide a complete sample test case of the issue. Sometimes people hit an error on that line of code as a result of a misunderstanding about how to use the .tmpl APIs. I want to be sure I understand what is going on...\n. Thanks Jonathan. Makes sense, and I will be looking at fixing this within Beta2\n. Including encoding of & needs to be addressed in a way that reduces the risk of over-encoding. The following proposal from Mike Samuel (from an email exchange) is relevant here:\nThe minimal change that solves the immediate problem of XML is to do\n.replace(/&(?!(?:amp|lt|gt|quot|#(?:x[0-9a-f]{0,6}|[0-9]{0,8}));)/gi, '&amp;')\nor the split and join equivalent.\nThat will not over-escape the XML predefined entities, but will over-escape \u00fc and the like.\nIn general, I think the best solution is what I outlined at http://js-quasis-libraries-and-repl.googlecode.com/svn/trunk/safetemplate.html#sanitized_content_types\n\"\"\"\nFinally, once a bug has been identified, we try to make sure there are simple bugfixing recipes.\n- If the problem is over-escaping of known-safe data values that were already sanitized, then wrap the data value in a SanitizedContent wrapper object of the appropriate type as close to where it is sanitized as possible. Ideally, an HTML tag whitelisting sanitizer would return a value of type SanitizedContent.\n- ...\n...\nSanitized content allows template users to pre-sanitize some content, and allow approved structured content.\nnew SanitizedContent('<b>Hello, World!</b>') specifies a chunk of HTML that the creator asserts is safe to embed in HTML PCDATA.\nIt is possible for misuse of this feature to violate all the safety properties contextual auto-sanitization provides. We assert that allowing this makes it easier to migrate code that has no XSS safety net to a better place, and satisfies some compelling use cases including HTML translated into foreign languages by trusted translators, and HTML from tag whitelisters, wiki-text-to-html converters, rich text editors. But it needs to be used carefully.\nDevelopers should:\nDon't roll your own escapers and deprecate ones in existing code. This does not apply to filters. Filter early, and filter often.\nPut the sanitized content type constructor as close to the code that does the sanitization.\nDon't use tag or attribute black-lists.\nBe skeptical of \"safe\" HTML from a database. This is a vector for SQL Injection to turn into XSS.\n\"\"\"\n. Improved encoding support is coming in JsRender, See post for more context.\n. Yes, completely agree. This feature is planned, probably with Beta2,\n. The ongoing work on JsViews and JsRender separates out the tmpItem aspect into JsViews. Just use JsRender if you want optimized rendering without data context or linking. Take a look at this post for more context.\n. The issue here is the one I called out at the top of this issue: You need to use the correct API for inserted content rendered by jQuery Templates: $(\"#tmpl\").tmpl({ text: \"blah\" }).appendTo(\"#target\"); or equivalent.\nSounds like ko is (incorrectly) inserting $(\"#tmpl\").tmpl({ text: \"blah\" }) directly in the DOM. \nIn fact $(\"#myTemplate\").tmpl(data) creates a document fragment, ready for inserting (and potentially cloning as necessary) by a chained appendTo , .prependTo, .insertAfter or .insertBefore. But it also creates an in-memory data structure which is provided to the appendTo (or equivalent) method, and that data is disposed in appendTo. If you repeatedly call .tmpl, without chaining the appendTo or equivalent, then you have a memory leak because the line 'appendToTmplItems = null;' (line 65 in https://github.com/jquery/jquery-tmpl/blob/master/jquery.tmpl.js) is never called.\n. I have updated the doc here http://api.jquery.com/tmpl/ and here http://api.jquery.com/tmpl/ to call out more strongly the importance of chaining with appendTo etc.\n. I have updated the doc here http://api.jquery.com/tmpl/ and here http://api.jquery.com/tmpl/ to call out more strongly the importance of chaining with appendTo etc.\n. Yes. that's good news. I was in touch with Steve Sanderson, who told me about his fix.\n. Keeping open for now, to track the fact that incorrect usage of the API can lead to memory leaks.\n. appendTo does remove data by default. - if you use the API as intended, such as: \n$(\"#tmpl\").tmpl({ text: \"blah\" }).appendTo(\"#target\")\nIf you do:  append($(\"#template\").tmpl(someData)) - which is incorrect usage - then there will generally be memory leaks. It is after chaining appendTo that the correct .clean() code is called. \n. $(\"#item-template\").tmpl(mockResponse(20).books).appendTo(\"#results\") will add jQuery data. (This is by design. It is used when you call $.tmplItem, for example). \nIf you want to empty the #results without a memory leak, you certainly have to call .empty(), .html() or one of the other jQuery methods which are designed to call clean. Setting innerHTMl ='\"\"; will of course not call clean and will lead to a memory leak. This is the regular jQuery usage pattern. Same will happen when you attach a jQuery UI widget to an element, then remove that element by setting innerHTML = \"\" on the parent...\n. May relate to https://github.com/jquery/jquery-tmpl/issues#issue/84 and https://github.com/jquery/jquery-tmpl/issues#issue/6\n. It is better to use delegate. But even using live can work fine. \nYou can also call item.update(), and then get the item.nodes and rebind. Or you can use the rendered event. \nSee http://jsbin.com/ukefe3.\nYou could put a small test case on jsbin or jsfiddle  showing the case of the live event not getting triggered. It does work in my example above...\n. For using the same template in both server-rendering and in the browser, see also the ongoing work on JsViews and JsRender. Take a look at this post for more context.\n. There are a few ways available to add events. Creating a new {{event}} tag is unnecessary. See for example the Master Detail sample here: \"http://api.jquery.com/tmplitem/\" or the \"getting to the  data in the click event section of: \"https://github.com/jquery/jquery-tmpl/blob/master/demos/samplesCore/basic.html\". Another example is the tabs sample here: \"https://github.com/jquery/jquery-tmpl/blob/master/demos/samplesCore/Interactive/tabsTmpl.html\".\nGenerally it is better to use .delegate on the container element to have trigger events from rendered elements, without needing to re-attach handlers. For getting contextual information or state, you can use {{tmpl}} rather than {{each}} and then use .tmplItem(). There is also a rendered event available as if you use tmplPlus.js, which is used in https://github.com/jquery/jquery-tmpl/blob/master/demos/movies/PagesTmplPlus/movies1.html for example. This gives you complete control of the elements that have been rendered.\n. Closed because there is already support for this scenario. See last comment.\n. Template is a global variable: var Template = \"#myTemplate\", right, and you are not passing any data to the nested template... (otherwise you would need {{tmpl(data) Template}}.\nWorks for me. Can you post a test case to jsFiddle?\n. Closing, Please open again if there is in fact a bug -  with test case.\n. In \n{{each(x, col) Columns}}\n    {{tmpl(row) col.Template}}\n{{/each}}\nyou have no Template variable in scope. You need col.Template, right?\nAnd PLEASE (!) don't do:\n$(\"#grid tbody\").html($(\"#data_table_body\").tmpl(data, {}))\nSee the doc topics such as http://api.jquery.com/tmpl/ where it shows examples and calls out: \"The .tmpl() method is designed for chaining with .appendTo, .prependTo, .insertAfter or .insertBefore as in the following example.\"\nYou need instead to do:\n$(\"#data_table_body\").tmpl(data, {}).appendTo(\"#grid tbody\");\nThanks for putting it up onto jsFiddle...\n. You have \"#tplPrimaryLink\" but there is no such template in your page. \nVariable d in your tplTextPrimary template is not defined.\nYou are missing a semi colon at the end of this line.\nvar data = $.extend({}, fauxAjaxResponce, pluginFauxConfig)\nThis bug should stay closed now. There is no issue about passing the template name in a variable. A test case would be small minimalistic proof that changing from a string value to a variable templateName (one which IS in scope and is defined) with that string as value caused {{tmpl(...) templateName}} not to work.\nThanks...\n. Eric, your test case is huge. Your template is named tplPrimaryLink in the data but tplTextPrimary. etc. etc. It takes time to debug your page. A test case is JUST the minimal few lines of code that show the problem and nothing else. \nIf this works for you, then that shows that you it is absolutely possible to pass the template name or selector as as string value from a variable.\n<script id=\"movieTemplate\" type=\"text/x-jquery-tmpl\">\n    <li>\n        {{tmpl(Name) Template}}\n    </li>\n</script>\n<script id=\"red\" type=\"text/x-jquery-tmpl\">\n    RED\n</script>\n<script id=\"blue\" type=\"text/x-jquery-tmpl\">\n    BLUE\n</script>\n<ul id=\"movieList\"></ul>\n<script type=\"text/javascript\">\n    var movies = [\n        { Name: \"The Red Violin\", Template: \"#red\" },\n        { Name: \"Eyes Wide Shut\", Template: \"#blue\" }\n    ];\n    $( \"#movieTemplate\" ).tmpl( movies )\n        .appendTo( \"#movieList\" );\n</script>\nBTW in  your fiddle you have {{if Template == \"tplPrimaryLink\"}}, but the value of Template is set to \"#tplPrimaryLink\" in the data (note the #) and there is no tplPrimaryLink template in the page, only a differently named  tplTextPrimary template.       \n. Not sure what you are trying to do here. If you have a template defined in a script block, then clearly the browser parser will see the </script/> closing tag as closing the block in which your are defining the template. You can use $.template( \"myTemplate\", \"templatestring\" ); to create a named template which the html markup (including the script tag) in the templatestring. That should work. If not, please post a test case on jsFiddle and reopen the issue....\n. Yes, I agree with Ben on all points. The trick for breaking up the script closing tag can be used if you need to define your template in a script block rather than via an HTML string, but it has a (tiny) perf cost which is better avoided. \n. The right test is {{if typeof DATA_PROPERTY===\"undefined\"}}\nIn JavaScript code if (DATA_PROPERTY==undefined) will not work unless you have a variable called undefined which is undefined. :). In your context, you don't...\nClosing the issue.\n. Clarification and update: Following the roadmap change (link in comment above), ongoing work is current happening in JsRender and JsViews, rather than in jquery-tmpl. We will subsequently determine whether changes get pulled back into jquery-tmpl, or whether we stay as a new JsRender/JsViews plugin. \n. Works for me. Try putting ${false} instead of ${isEnabaled}. If that shows up as false then you probably have a bug somewhere that isEnabaled is actually true. Otherwise can you post a repro on jsFiddle?\n. You should definitely not render templates in that way. The correct way is as shown in the docs and all the examples, as in: http://api.jquery.com/tmpl/ where it shows examples and calls out: \"The .tmpl() method is designed for chaining with .appendTo, .prependTo, .insertAfter or .insertBefore as in the following example.\"\nYour approach above is not supported an will lead to memory leaks.\nYou should do $(template).tmpl(data).appendTo(container);\n. I updated the title and description to make it clearer that you are creating the form by using a template which includes the form tag. I doubt we can fix this in templates though. You might try experimenting outside of templates with inserting a form tag using innerHTML or appendNode, and seeing if Submit works,or whether you can re-bind the submit button action to get it to work...\n. You are using a template with no content here. Is that your goal? \n. OK, thanks. I'll keep this open for considering adding in that support.\n. TODO See corresponding fix \nhttps://github.com/BorisMoore/jsrender/commit/5a579d233c9830785ffcde734c63ab2490da3b0e\n. This could be a result of not using the correct API for rendering into the DOM. Are you using a chained appendTo, or equivalent, as stated in the documentation? http://api.jquery.com/tmpl/\n. Do the live examples on this page work for you? http://api.jquery.com/template-tag-tmpl. If so, then it is something in your templates/scenario/data that is specific, so I would need a repro on jsfiddle or jsbin. \nAlso, have you tested your app on other version of FireFox, or other browsers? Is this specific to that version?\n. Probably a dup of https://github.com/jquery/jquery-tmpl/issues/70.\nTry using {{if $data.foo && 1}}. \n. Closing, per comment above. If foo is false {{if foo &&1}} works but if foo may be undefined you need to put {{$data.foo && 1}} (assuming foo is a field you are testing for on your data).\n. You mean the value of ${name} shows up as \"data-id\"? If you are passing in {}, then it is perhaps because you have something which sets a global variable 'name'. \n. Can you put a complete (but minimal) test case which shows the issue, on jsbin or jsfiddle? It is not possible to determine the cause of the problem just from the gist above....\n. Yup - seems not to be anything to do with templates. Closing.\n. Sorry, we can't remove issues as far as I know. Only close them...!\n. Wrapping in a div is not supported. Browsers serialize in ways that will break templates. Bringing the templates as an HTML file is probably not a good idea. If you can't get the scripttag content from the file, you will have to fetch the template(s) as string, e.g. in a text file or js file. \nThis is the same problem (trying to use HTML content as a template) as in the following:\nhttps://github.com/jquery/jquery-tmpl/issues/5\nhttps://github.com/jquery/jquery-tmpl/pull/31\nNote that templates are not necessarily even well-formed HTML, so it is not possible in general (and is not supported) to get them from HTML content as such...\n. ${getName()} will call the function, but the context of the call will not be $data, so the 'this' will not be the data object, but the templateItem, so you would need to do this.data.firstName in the function. If you are using this.firstName (or similar) in the function, then, yes, ${$data.getName()} is the right way to call the function, so that the 'this' context it the data item.\n. Thanks, you are right.\nFixed in https://github.com/jquery/jquery-tmpl/commit/c5189d02f217a0bfa7454332a190a89208cced76\n. Thanks for the fix wbotelhos! I have just fixed the links using markdown syntax, instead of adding the space, since the markdown approach is probably more robust, but thanks for contributing (so quickly!)\n. Calling item.update() will re-render that item it will still mean rebinding. (For click actions etc, best just to use delegate from higher up, so you don't need to bind on the template-rendered elements.)\nJsViews is all about integrating templates and data link, and that will allow updating just the inserted data values. That's what you really want. See https://github.com/BorisMoore/jsviews and http://borismoore.github.com/jsviews/demos/index.html. \nSee also https://github.com/jquery/jquery-tmpl/issues/122 for a bit more context. \n. The only tmplItem that does not have a nodes property is the topTmplItem, which has key 0. The second condition should prevent entering the if block, in that case, since pntNode will be zero. Can you provide a test case in which that type error occurred? \n. Closing, since no reply to request for test case...\n. How are your defining/creating the template? Is it declared in the usual way as the conten of a script element?\n. That is part of what JsViews is intended to allow: Rendering a template on the server, and activating in the client if js is enabled. \nSee http://www.borismoore.com/2011/04/jquery-bay-area-conference-presentation.html for some links, but be warned that this work is not yet documented or stable.. I'm working hard to get it to that point...\nJsRender has no DOM dependency, but for running it on the server you still need jQuery. If you generate HTML through PHP rendering (without templates), yes you can still activate in the client. But this will not be possible with just jQuery Templates in the current form. Rather it will need the JsViews/JsRender implementation in the client. You need to have appropriate annotations in the rendered HTML - and those are not yet documented, so it is still a bit early to begin using this scenario. \n. update renders the template, so the element this will be removed from the DOM when you call update. Therefore $(this).tmplItem() will not be what you want on the next line. \nvar item = $(this).tmplItem()\nitem.data; // returns associated model fragment\n// manipulate data\nitem.update(); // update renderes template with the updated data\n// data gets rendered correctly\nvar test = item.data; // data is not empty!\n. Yes, the one thing you should avoid within any template tag is }}. Just separate them with white-space.\nThe following should work:\n{{html myFunctionName({\"hello\": {\"to\": \"you\" } })}} \nThis is deliberate, 'by design', not a bug, so the parser can assume }} is the tag delimiter...\n. It should return a jQuery object, ret, wrapping a single text node, so ret.text() = \"https://user@email.com:32323232@exaple.com/app/api\"\nHowever jQuery objects wrapping only text nodes are not really reliable. jQuery does not provide real support for wrapping content that starts or ends with a text node. Outer text nodes are sometimes stripped, to trying to chain with appendTo or similar will probably not work. JsRender is the future version of jQuery templates which will provide full support for rendering strings, and having templates with no HTML content. See also JsViews .\n. Templates are about string concatenation. You can do data-item=\"${foo}\" where foo is any expression that returns a string, and it will work fine. If it returns an object, then it is converted by toString(). data attributes are supported but treated in the same way as other attributes...\n. Can you describe the feature you want? Are you suggesting that if it is a data attribute, it adds it to jQuery,data? And are you suggesting that it adds objects as objects, without doing a string conversion...?\n. OK. For the specific scenario, you have $.tmplItem, and .tmplItem already which allow you get the item from any element rendered by that template. So you don't need to go through a special data-item feature. \nMore generally, I'm not sure the special semantics are a good idea. A template is to do with string concatenation, and should be able to render as an HTML string, so with the following template \n<div class=\"item\" data-bar=\"${bar}\">\nyou would get the rendered HTML\n<div class=\"item\" data-bar=\"valueOfBar\">\nInserting that HTML as innerHTML will make the string value of Bar available through .data (that is already the case because .data detects the data attributes) - but will not allow you to get back to the object 'prior to string conversion'.\nThe new implementation of jQuery Templates is JsRender and JsViews, which makes the string concatenation role of templates more explicit.\n. Yes, use {{tmpl}} rather than {{each}}. Even with your feature, you would not have an item for each iteration of the {{each}}, so would need to use {{tmpl}}\n. The intention was to use $item, rather than this, to get the current tmplItem.\nSo it is not necessary to define a new $parent variable...\nCan you confirm that this works for you?\nParent's sorting: ${$item.parent.data.sorting}<br />\n{{each $data.prices}}\n    Parent's sorting in Each: ${$item.parent.data.sorting}<br />\n. Hi Steven,\nSee this post for a jQuery conference where I spoke of the roadmap for jQuery Templates, and JsViews, as I see it.\nhttp://www.borismoore.com/2011/10/jsviews-presentation-at-jquery.html\nI hope to post specifically on the roadmap aspect, probably tomorrow.\nThe short answer is that I won't be working on jquery.tmpl, as such, given jQuery UI's ownerships and plans. But my work on templates is by no means 'dying', but is moving forward with JsRender and JsViews...\nI hope also to be able to change the readme on jquery.tmpl to something providing a bit more context...\nBoris\n-----Original Message-----\nFrom: Steven Black [mailto:reply@reply.github.com] \nSent: Saturday, October 08, 2011 4:22 PM\nTo: Boris Rivers-Moore (MOORE)\nSubject: Re: [jquery-tmpl] Add \"set\" tag with syntax {{set(variable) value}} to set variable without affecting template output (#128)\n@BorisMoore are you still maintaining jquery-tmpl at https://github.com/BorisMoore/jquery-tmpl or is that dead as well?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jquery/jquery-tmpl/pull/128#issuecomment-2333666\n. Yes, it sounds like you are exploring in one of the directions which is provided by https://github.com/BorisMoore/jsviews. JsViews is the ongoing work that integrates jQuery templates (new version) with data link. Can you take a look and see if that addresses your scenarios? \nBoris\n. You can't nest tags, so you can't do {{foo ...{{blah }} }}, nor can you do {{foo ... ${x} ..}}. It is more a limitation of the parser than a bug. You can do tricks like \"$\" + \"{\" to get around that limitation, as you did above. To support that would be too expensive in extra parsing code...\n. I'd need to have a small test case on jsfiddle showing the problem. Did you look at the samples using {{html}}? -https://github.com/jquery/jquery-tmpl/blob/master/demos/step-by-step/0_tmpl-read-only/2_html-tag.html \n. I think that is a good test case. This may not be fixed until the next version - which will be based on JsRender code:\nhttps://github.com/BorisMoore/jsrender. Thanks for the example...\n. Wrapping in a div is not recommended. Firefox will actually create an img element, and may modify the src attribute, so it will no longer be \"${srcUrl}\". Wrapping in a script block ensures the browser does not validate or modify the markup (which may not be valid or even well-formed).\n. <select id=\"test\"></select>    \n<script id=\"template-test\" type=\"text/x-jquery-tmpl\">\n    <option value=\"${cod}\" {{if  $item.selected != cod}}disabled{{/if}}>${name}</option>\n</script>\nWorks for me and gives \n<select id=\"test\"><option value=\"1\" disabled=\"\">test 1</option><option value=\"2\">test 2</option><option value=\"3\" disabled=\"\">test 3</option></select>\n. But disabled is not defined on items 2 and 3. This works without throwing: if $data.disabled... Or define disabled:false on the other data items.\n. IE will create global vars for ID'd elements. If this is in IE, this will be the reason... Not a bug in tmpl. But you have to avoid have ids with the same name as data variables you are testing for. This can also break regular javascript if you test for undefined on something which has the same name as an ID for an element.\n. Try using $data.nullNested... But if you do  paths a.b.c.d the template engine will not test for undefined all the way down the chain, nor does it do a try catch. Perf would be impacted if it did...\n. Doing string-based rendering without a DOM dependency is one of the goals of the 'next-generation' work going on at JsRender. Take a look at this post for more context.\n. You would need to post a simple test case to jsfiddle, for someone to help you here. It may be your issue is an error in your code, or template, not in jquery.tmpl....\n. Better would be:\n```\n\n  ${title}\n\n\n  <div>\n    {{each(i, sub) parent}}\n      ${sub.title}\n      {{tmpl(sub) \"#inTmpl\"}}\n    {{/each}}\n  </div>\n\n\n$(function() {\n  $(\"#outTmpl\").tmpl({\n    \"parent\": [\n      {\"title\": \"a\"},\n      {\"title\": \"b\"}\n    ]\n  }).appendTo(\"body\");\n});\n\n```\nYou can find archived documentation here: http://web.archive.org/web/20120921050105/http://api.jquery.com/template-tag-tmpl/. Very nice. Thanks Wayne. This leads the way. :). This is one topic, from the 13 that are listed here, so logically, this process could be continued to add the other twelve. (And then, for more fun, adding in the demos :))\nI know a lot of folks are missing the docs a lot, so this is great. I did receive an email suggesting I add the docs to my blog, which could also be an option. Otherwise just adding to this README might be fine, especially if navigation between topics can be included, as hash anchor links, within the readme.md document... Maybe we should keep this issue open, since so far we just have one documentation topic out of 13.\n. I have changed the README  and provided a link to the archived documentation. See https://github.com/BorisMoore/jquery-tmpl/issues/177\n. Cool, thanks Wayne. This leads the way. :). This is one topic, from the 13 that are listed here, so logically, this process could be continued to add the other twelve. (And then, for more fun, adding in the demos :))\nI know a lot of folks are missing the docs a lot, so this is great. I did receive an email suggesting I add the docs to my blog, which could also be an option. Otherwise just adding to this README might be fine, especially if navigation between topics can be included, as hash anchor links, within the readme.md document...\n. Is this supposed to be a JsViews issue? Can you close this and open it on the JsViews project?\n. Yes - the documentation is no longer maintained on the jQuery API site. I have changed the README to make that clearer, and provide a link to the archived documentation.\n. Thanks - the live example link has been corrected.\nAs to being active here, you are right, and this is stated in the ReadMe - that jQuery UI took over this project, and then decided to abandon it - and as they stated, it is no longer being actively developed or maintained. \nIt was returned to my GitHub account, since I was the developer for jquery-tmpl (following an initial prototype from John Resig). Of course other people are welcome to contribute, or to fork and create their own versions. \nMeantime, as explained in the linked blogs etc., I had decided to take the work forward to where I would have liked to take jQuery templates, had it been an active project, rather than being adopted then abandoned by jQuery UI.\nThat next-generation jquery templates is JsRender (and JsViews for data binding, MVVM etc,). \nI don't have time to invest in both jQuery templates and JsRender, and I am working hard on getting JsRender to V1.0. It is already more stable, more performant, and more feature rich than jQuery templates.\nI wish I was able to do more...!\n. This looks to be an issue for jsviews, not jquery-tmpl. It should go here: https://github.com/BorisMoore/jsviews/issues.\n. Thanks - yes, makes sense to do this. I will try to verify and pull within a few days...\n. Yes, sure I'll let you know. I didn't manage to get to this yet, but not forgotten. Hopefully soon. (If it is more than a week more, feel free to ping me :)\n. I'm looking at AMD and Node.js support, as appropriate, in JsRender and JsViews, along with  the jquery-tmpl case, so I'm working on them all in parallel, for a consistent approach. For jquery-tmpl and JsViews we need jQuery and the DOM - so node.js on the server will not be a scenario. So I think we can remove CommonJS support other than for JsRender.  Does that make sense?\n. Yes, you could do that. Thanks...\n. Thanks. I have merged the changes locally, but need to do a sanity check / run tests, before pushing. Unfortunately I am heading out tomorrow for a trip abroad, and may not be able to complete the pull for the moment - until returning... If I can get to it sooner, I will...\n. Thanks. Is there a reason not to just use the {{= ... }} syntax in this scenario, rather than providing a third alternative syntax for the same scenario? ${...}. #{...} and {{=...}} \n. No, jquery-tmpl only works with the HTML DOM - and also requires jQuery. So you can't use it on Node, unless you also use a Node.js HTML DOM implementation - and that scenario has not been tested. It is not designed for use on the server.\nIt sounds like it would be much better for you to use JsRender instead, which does not require a DOM, and is optimized also for use on Node.js.   See http://www.jsviews.com/#jsr-node-quickstart.\n. Sorry, but jquery-tmpl is no longer actively supported. \nAlso, this question is not a bug/issue in jquery-tmpl - and concerns PHP as much as jquery-tmpl. You can try asking on stack overflow: http://stackoverflow.com/questions/tagged/jquery-templates\nClosing this issue.\n. @balaram123: You are receiving emails because at some point you clicked on Watch! You need to simply click on Unwatch to stop receiving them.\nhttps://help.github.com/articles/watching-repositories/\n. You problem is not a jQuery Templates bug/issue - so I will close this. In fact what you are looking for is a an issue with HTML in general - namely that you cannot simply truncate HTML markup to make it display with fewer characters. Obviously if you truncate it it will likely no longer be well formed HTML. Either you have to simply display the text content and truncate that, or you have to parse, or step through the HTML nodes, and remove or truncate the text nodes at the end.\n. Sorry, jQuery templates is no longer maintained. You could take a look at https://github.com/BorisMoore/jquery-tmpl/blob/master/demos/samplesCore/composition.html, or better, switch to JsRender. See for example: \n- https://www.jsviews.com/#tagsyntax@composition\n- https://www.jsviews.com/#samples/jsr/composition\n- or this search result: https://www.jsviews.com/#search?s=composition \n. Sorry, but jquery-tmpl is no longer maintained. I may be able to pull in this fix at some point, but I'm not sure when (or whether)... Currently my priority is on JsRender work moving to V1.\n. Yes, sure. Thanks for posting it...\n. jQuery templates (jquery-tmpl) are no longer supported or maintained. I strongly encourage you to switch to JsRender, which is more powerful, more performant, fully supported, and has simpler APIs.\nhttp://www.jsviews.com/#jsr-quickstart . On the server (node.js) the DOM is  (generally) not available, and nor is jQuery, so  I think supporting CommonJS may be unnecessary. Do you agree?\n. When loaded by AMD loaders, I'm not sure we can be certain that the second parameter is undefined, so we should probably write }(function( jQuery ) {\nSo the whole thing could look like this:\n(function( factory ) {\n    if (typeof define === 'function' && define.amd) {\n        // Loading from AMD script loader. Register as an anonymous module.\n        define( ['jquery'], factory );\n    } else {\n        // Browser using plain <script> tag\n        factory( jQuery );\n    }\n}(function( jQuery ){\n...\n. ",
    "wailqill": "I actually have the same problem, but I realize that the problem really lies inside jquery, and not the tmpl-plugin.\nWhat I do is basically:\n    $.template($('div#template').html())\nAnd then use that template generating markup. I did not use a script-tag for the template code, but instead read it from a DOM element.\nThe problem then is that IE removes any quotes from attributes without spaces while serializing. So \n    \nbecomes \n    \nwhich of course doesn't work very well with values with spaces in it...\nI'll go over to jquery core and see if anyone submitted a bug for this, though it most certainly will be resolved as \"wont-fix\" =)\n. ",
    "MarcusJT": "Thanks for looking into that, sounds like Riley's satisfied with the new results, and I am too. Keep up the great work!\n. ",
    "rileydutton": "Indeed. The only other thing I would throw out is that it's important to note that the second benchmark that I did used a way of doing the templating that is not well documented or being used by most tutorials out there ( template_object($, payload).join(\"\"); ). So I would say that the official templating plugin is speedy when used correctly. If you're just going to append the result onto the DOM, using .tmpl() is wasting a lot of processing time creating an unparented DOM fragment that you're not even going to use.\nSo I would say, if nothing else, the issue that needs to be addressed is helping people become more aware of the different ways in which to use the plugin, and getting away from the .tmpl()-for-all information that seems to be out there right now.\n. ",
    "mridgway": "Just tested in Chrome on OS X and it appears to be working correctly.\n. I found a workaround but I'll leave the issue here to discuss whether this should be happening or not.\nThe issue I was having was caused by having a string, converting to a jquery object, and then calling tmpl() on it:\nvar template = '<img src=\"${thumb}\" alt=\"${name}\" />';\n$(template).tmpl({name: 'small', thumb: 'thumb.png'});\nDoing the following does work:\nvar template = '<img src=\"${thumb}\" alt=\"${name}\" />';\n$.tmpl(template, {name: 'small', thumb: 'thumb.png'});\n. ",
    "zackd": "check the docs - two different fncs : .tmpl() and jQuery.tmpl()\nthe docs for .tmpl() state \"Take the first element in the matched set and render its content as a template, using the specified data.\"  - so you can't use it with a markup string (i think!): http://api.jquery.com/tmpl/\n. ",
    "Kissaki": "There is no input type textbox.\nhttp://www.w3.org/TR/html401/sgml/dtd.html#InputType\nYou are probably looking for ?\n. In those input[type=text] it wouldn\u2019t matter, but for <pre>-style blocks it would.\nBut I dunno if he was referring to that, as he didn\u2019t seem to \u2026\n. Indeed, a template function should only do that, templating, and not more logic like minimizing.\nIt should only do so if a parameter or the function(name) indicates it is also minifying.\n. Allowing for pruning via a parameter(/option) would be a viable solution.\n. ",
    "mathewpeterson": "No, it was text.. However, that isnt the point. The actual generated output by this plugin does not preserve the line breaks that are in the template. I have the examples in this but github isnt recognizing the code..\n. @coiscir: Yes, you are correct. I believe this plugin should preserve the line breaks that are in the template. I don't want to be dependent on some third party plugin to auto-format my source code. It's much faster for me to ctrl+a ctrl+u to view my source. \n@Kissaki: Again, it's not the value of the input I am talking about, merely the line breaks between the tags.\n. I do believe the issue is here: https://github.com/jquery/jquery-tmpl/blob/master/jquery.tmpl.js#L326\nNot able to test at the moment, let me know if anyone can confirm this.\n. ",
    "coiscir": "Is it safe to assume you mean the markup itself is not formatted when returned?\nIf so, why would it need to be? Considering it's generated content, is there really any benefit to having it come out pretty? Any further interaction with the resulting markup would normally be through the UI it creates or an element inspector (such as that in Firebug or Chrome) which display the DOM in a tree structure.\nAm I missing something?\nBTW: Indent your code by 4 spaces on every line to have it print out properly in your comments. See the docs for GitHub Flavored Markdown -- link at the bottom-right, under the comment textarea.\n. ",
    "kof": "@coiscir I have 4 points about it:\n- as @kissaki already said about pre tags\n- template engine shouldn't modify markup in places user doesn't expect it. I think the correct behaviour is also not to prettify the output, but to leave it as it is.\n- practical example would be: if I want to debug the generated markup, I want to see its string representation, not a rendered by browser dom view, because its not the same. So if you cut the new lines etc. its all 1 line then and is difficult to read.\n- another use case: I maintain nodejs port of jquery-tmpl, https://github.com/kof/node-jqtpl, html is rendered serverside and the output is always 1 line, which is difficult to inspect without to render it by browser and then use firebug.\n. @BorisMoore nice to hear it, I maintain nodejs port https://github.com/kof/node-jqtpl\nI am doing a lot of unneeded work just because the current implementation is too much integrated into jquery and DOM.\nIt would be great if you provide a way to overwrite this dependencies, so I can use the original engine and provide some integration stuff for express.\n. @BorisMore I like this Idea with \"verbatim\" tag which will say tmpl engine to ignore all tags inside of it, do you want to implement it?\n. sure, thanks\n. https://github.com/jquery/jquery-tmpl/issues/90\n. ",
    "defunctzombie": "imho this is a very serious issue that doesn't seem to be getting any attention? Is there some reason that a simple fix isn't available? Seems like it wouldn't be too bad (but I don't know).\n. ",
    "gregf": "I want this as well, but for different reasons. I'm appending my output to a textarea and was expecting my linebreaks in my template to go over to my textarea. As it is right now it's all on a single line. Only way to work around this in the current state is to have separate templates for each section with manual line breaks inserted at the end. Be a lot nicer if white space was preserved.\n. ",
    "alandecastro": "what happenned to this issue? is it solved?\n. ",
    "rubyruy": "@BorisMoore - how can the content of <pre> or <textarea> tags not considered as part of the HTML visual layout? \nWhy does the plugin bother stripping out the original linebreaks anyway? What purpose does that serve exactly?\n. Oh right I forgot JS doesn't really roll with multiline strings. Having said that, why not a trivial fix like so:\ndiff\ndiff --git a/data/js/jquery/other/jquery.tmpl.js b/data/js/jquery/other/jquery.tmpl.js\nindex 213d136..cc5ee0c 100644\n--- a/data/js/jquery/other/jquery.tmpl.js\n+++ b/data/js/jquery/other/jquery.tmpl.js\n@@ -323,7 +330,9 @@\n            // Convert the template into pure JavaScript\n            jQuery.trim(markup)\n                .replace( /([\\\\'])/g, \"\\\\$1\" )\n-               .replace( /[\\r\\t\\n]/g, \" \" )\n+               .replace( /\\n/g, \"\\\\n\")\n+               .replace( /\\r/g, \"\\\\r\")\n+               .replace( /\\t/g, \"\\\\t\")\n                .replace( /\\$\\{([^\\}]*)\\}/g, \"{{= $1}}\" )\n                .replace( /\\{\\{(\\/?)(\\w+|.)(?:\\(((?:[^\\}]|\\}(?!\\}))*?)?\\))?(?:\\s+(.*?)?)?(\\(((?:[^\\}]|\\}(?!\\}))*?)\\))?\\s*\\}\\}/g,\n                function( all, slash, type, fnargs, target, parens, args ) {\n. ",
    "rdworth": "Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. jQuery can still have and benefit from a single template engine, it will just be maintained by the jQuery UI team. The previous version wasn't developed with them as stakeholders and so had different design goals. For this reason, the design and development was started afresh, rather than continuing in this project.\nSurely there will always be plenty of choices when it comes to templating engines. jQuery UI will provide an interface that will support using your own favorite template engine, but will only fully support the one it ships. This is an example of a goal that wasn't initially part of the jquery-tmpl project.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this pull request. Unfortunately this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Added semicolon at end of min files. Closed by 4ca14d3cf325dd191465e60cf733d8c57749cf0f - Missing semicolumn at the end of jquery.tmpl.min.js\n. This is a quick fix but it's not clear what would prevent this from happening in the future. I'm not sure what mechanism was used to create the min files as there are no build files in this repo.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this pull request. Unfortunately this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. The plugin is not stable at this point. The design is now being done at http://wiki.jqueryui.com/Template . You're invited to contribute there. For more info on this change, see http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this pull request. Unfortunately this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this pull request. Unfortunately this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Knowing that you can invest in and depend on a plugin that is well supported by the jQuery Team is precisely the reason we felt this change was necessary (that was unfortunately not the case with jquery-tmpl as no sub-team within the jQuery project took ownership of it). I'm sorry we took as long as we did to make the decision final and communicate it more widely.\n. Not here and if there is another place today, I don't know of it. This repo is no longer accepting or reviewing issues/patches. Any of the 166 current forks or a future fork could take that on. I don't know if any has such an interest. If one does, I'd be happy to point people to it from this repo.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this pull request. Unfortunately this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Software is tested and then abandoned all the time. This software was released as beta, not final, meaning not supported. While in beta, despite the interest from the community and the adoption that took place, there was no sub-team within the jQuery project that could agree to take it from beta to final and provide support for it (which for the jQuery project means indefinitely and completely for free), so that never happened. That will happen (as explained in http://blog.jquery.com/2011/04/16/official-plugins-a-change-in-the-roadmap/ ) but it will be an entirely new template plugin, not this one.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Thanks for taking the time to submit this issue. Just wanted to let you know this plugin is no longer being actively developed or maintained by the jQuery team. See README for more info.\n. Please note the messages at the top of this page https://github.com/jquery/jquery-tmpl as well as at the top of this page https://github.com/jquery/jquery-tmpl/blob/master/README.md\n. Do take note of the message on the homepage\n\"A templating plugin for jQuery. BETA. NO LONGER IN ACTIVE DEVELOPMENT OR MAINTENANCE. Issues remain open but are not being worked.\"\nas well as in the README\n. See https://github.com/jquery/jquery-tmpl and README \"BETA. NO LONGER IN ACTIVE DEVELOPMENT OR MAINTENANCE. Issues remain open but are not being worked.\"\n. You're looking for support in using something that we don't support people using. As to what you should use, you might seek help on the forum https://forum.jquery.com/using-jquery-plugins\n. See the README. This project is no longer in development.\n. +1\n. ",
    "catamphetamine": "You should fix this issue\n. I'm also having this issue.\nRemoving \"a\" tag from subtemplate removes the error, but we need \"a\" tag in the subtemplate.\n. ",
    "can3p": "The same markup on gist - http://gist.github.com/633867\n. I've found mistakes in my code. The plugin works as expected. Thanks for your work!\n. ",
    "jrduncans": "It looks like you are passing in \"checkboxes\" but checking for \"selectable\" in the nested template.\n. ",
    "MoOx": "In the templating, i use a \"return\" variable like this\n{{if return}}\nSo when the code is eval, the problem is for the special word \"return\" which is a special keyword of the language.\nSo note to not use return as a var :)\n. ",
    "MathieuDSTP": "After I parsed the resulting code created by concatenating all those strings, I have discovered that the \"with\" keyword seems to cause a problem. I'm looking for a way to replace it so the javascript could be parsed successfully. \n. ",
    "dvv": "Sure. Due to with() _ can be brought in by the context. E.g., sammy (http://code.quirkey.com/sammy) has a rendering plugin which passes context which is merged from many pieces, starting from Sammy.Application with its helpers. I used to use _ as a shortcut to a simple i18n function, and got confused. Also, underscore defines _.\n. Frankly, I'd get rid of with(). You see, when user is not defined in the context passed, with(context){var a = user;} throws, but var a = context.user; behaves more gently and more right. imho, at least\n. Right. I opened instead issue #11 concerning ReferenceError\n. I keep thinking pure internal template variables should not clash with anything, documentcloud's _ being an ordinary common case.\n. Sure. Being pure internal, it could be named as _____________ in hope it'd never clash with anything. Instead, they chose simple _, which is already chosen by many.\n. Please, look at BorisMoore's comments above. The point is in \"who wins\" during lookup for a variable, and I presume with(...){...}, which is used in templating engine, breaks some assumptions.\nBTW, any function in JS is a closure, and it captures the context in which it is defined. I've discovered it only recently. I'd recommend to read http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/\n. with () is bad since v5 discards it in strict mode (which is the future of JS, as Crockford puts)\n. I want to include recaptcha in my signup form. recaptcha is essentially a script which replaces (or creates) a certain div and document.write()s its contents.\n. Right. The following:\n// fixup firefox\n$('script[id]').each(function(i, x){\n    window[$(x).attr('id')] = x;\n});\nwhen run on document.ready in firefox, solves the issue. Frankly, I like firefox way and I've feeling that something wrong is with assumption on window cashes scripts by their ids.\n--Vladimir\n. globalization is performed not only by IE -- webkit + opera does so either. That led me to think that is the project assumption :)\ntmpl \"#...\" syntax looks good. Thanks\n--Vladimir\n. Well, I use {{each}} and want to cache some stuff for every iteration. Keeping pure internal template logic out of template defeats encapsulation.\n. Nothing but calculations being done in wrong place. If being precautioned I still want to do some calcul within templates, do I have means to store something, or it's express prohibited by jquery.tmpl design?\n. I see. Thanks for the kludge.\nPersonally, I'd be content with jquery.tmpl \"push\" flavor of templating, but am trying to cope with some (seeming unavoidable to a noob as me; so far, I hope) issues when using http://knockoutjs.com . There they render templates internally so I have little if any control on rendering.\n--Vladimir\n. I'd vote for reserving _ for underscore.js. This lib is of wide use, good would be to just respect this.\n. Exactly. Please consider renaming.\nTIA,\n--Vladimir\n. ",
    "givankin": "Hi, I reproduced variable collision with global _.\nIn short, if there is a global _ and an {{each [,]}} or {{each {length:3} }} or a similar construction (which I used for iterating N times within a template: imagine paginator), script dies with \"_.push is not a function\" error.\nHere are tests that reproduce the issue:\n- No global _. Everything is fine.\n- Introducing underscore.js. See the error.\n- Using underscore's noConflict method plus \"delete window._\". I'd use this happily if it didn't break IE < 8.\n. @dvv\nDo you understand how and why that clash occurs? _ in jquery.tmpl.js seems to be really pure internal.\n. That's right, but templates' _ is within a closure, so as far as I understand it shouldn't collide with global _. What am I missing?\n. Thanks for explanation!\nIf your lack of support for {{each [,]}} was somehow documented I suppose it would save developers some time and nerves ;-)\nAnd yes, if there is no _ in global scope, {{each [,]}} works as expected, so I think you can't say that it is truly not supported. Maybe there is a simple workaround for this? What's the reason for not supporting this syntax?\n. ",
    "esuslo": "Boris,\nOn behalf of all beautiful ladies in Copenhagen, I am asking you to prioritize the _ issue, as this is the only reason our project doesn't work correctly on IE, thus preventing hot girls to meet nice guys, as you are ;)\nEugene\n. ",
    "glebm": "I believe nested data access should be permitted as well, e.g.: a.b.c, but not a.b().c.\n. Awesome, thanks BorisMoore\n. ",
    "mikesamuel": "In the draft spec, http://wiki.jqueryui.com/w/page/37898666/Template , if you wish to restrict substitutions you can implement a verifier pass that rejects any \"=\" node that has content that does not fall in some subset of member expressions.  See plugin compiler passes in section 9.\nBe aware though that you cannot rely on control not escaping just because there is no explicit function call.  Implicit valueOf, toString can cause control to escape, (new Image).src=\"javascript:...\", and getters/setters can all cause non-obvious side-effects.\n. The unabbreviated syntax {{=sum(recorde, function (r) { return r.value; })}} should address your need.\n. This should be possible under the draft specification.  See section 9 of http://wiki.jqueryui.com/w/page/37898666/Template specifically:\n\"\"\"\nFlexible loading. Since a plugin takes a map of parse trees, it can find {{tmpl}} calls to templates that are neither in the map of parse trees nor previously compiled; then find their source, parse it, and insert the result into the map of parse trees. The loader that finds ",
    "schuyler1d": "what are the possibilities of including a verifier in core?  As default?\nI can write the verifier, if a patch would be accepted.\n. thanks.  It was a good goal--jquery would have benefited from a single templating engine--but there seems to be contradicting usecases in JS world to truly consolidate.  Long live handlebars.js?\n. ",
    "abackstrom": "It hasn't been a problem in any browsers I've tried, but it did cause PHP's DOMDocument to end the script tag parsing prematurely. So, PHP itself is able to output the script blocks, and the browsers are fine, but if I read in the HTML document or fragment with DOMDocument it will fail. I asked a related question on StackOverflow that has a bit more information.\n. jsRender allows templates in <script> tags, so this issue would still affect templates used by the newer libraries. It hasn't inconvenienced me recently, so I'll leave the decision to carry this issue forward up to Boris et al.\n. ",
    "Somebi": "+1 please fix that.\n. ",
    "tommoor": "Unfortunately this restriction is very real, and very frustrating:\nSee official documentation:\nhttp://cookbooks.adobe.com/post_Avoid_JavaScript_security_errors_in_the_AIR_applic-8083.html\nAny suggestions on how to overcome this?\n. parseJSON seems to work fine. \nWe are still using jquery-tmpl, the work around has been to compile all of the templates when the application starts, before the body onload event as obviously it is only the compilation that generates the sandbox violation.\n. when the application starts means before the onload event.\nIs it an acceptable workaround? Probably not.\nIs it a problem for the jquery-tmpl team? Probably not.\nUnfortunately it's an inherent limitation of Adobe Air, and on reflection it probably isn't worth the time figuring out a fix.\n. ",
    "jzaefferer": "$.parseJSON uses JSON.parse when available, which is probably the case in Adobe AIR.\n. Could you clarify what \"when the application starts\" means? Is that an acceptable workaround, or is this issue still big enough that it should be resolved within the template plugin?\n. There are also enough template languages which follow exactly this fail-fast approach. If you've got a typo in your variable name and never catch because it just fails silently, you usually have a harder time debugging the issue.\nI elsewhere promoted the approach of enhancing data before passing it to the templating engine - in this case you would make sure that the list is always defined, even if otherwise empty.\n. With all the available templating languages for node.js and even a direct port, I don't think this should be a priority.\n. After some discussion with Boris on this: We can have both. The plugin needs some refactoring to enable use of the text rendering on both client- and serverside, and still have DOM integration for the clientside.\n. A good bunch of tests, salvaged from previous work by borgar and shellscape, is now commited: https://github.com/jquery/jquery-tmpl/commit/6a353f44f12e33764f9490e1b63bda600c7a1953\n. Open issues:\n- whitespace handling: disabled most tests that deal with input and output whitespace. Output is currently restricted as I'm using jQuery's text() method to get back at the text from Text nodes. This messes whitespace up to some extend. Considering the plan to seperate template rendering from DOM insertion, I'd say we adapt those tests to work against the plain rendering once in place. That should also fix most tests that cover whitespace within input - with the output mangling, these tests fail for now.\n- There were tests for an empty {{}} tag, with and without whitespace inbetween. The with-whitespace-empty-tag currently fails with a Template not found: \" \" error message. Which is probably fine.\n- Two tests (line 97 and 98 in tests/core.js) for disallowed operations fail: ${ new Object() } and ${ delete a }, while they are expected to throw a SyntaxError, like all the other disallowed operations\n- I can't currently test any html escaping, as that gets messed up when using the .text() method to extract text from the Text nodes\n- Some tests for comments fail, involving some weird constructs, starting with line 139 in tests/core.js. Not sure if we need to support these.\n- If nested lookups on undefined objects are supposed to fail silently, then thats broken currently. \n- Disallowed operations tests all fail to fail, e.g. having ${ a += 1 }. Dunno if that is supposed to work or fail.\n- {{each}} on object (instead of array) fails with an Unexpected end of input error.\n- There were tests for nesting {{tmpl}} within {{each}} and then using the loops $index within the template. Fails currently, not sure if that is supposed to work.\n. Was there a 1.0 release? In any case, the versioning scheme for jQuery would be 1.0pre or 1.0.1pre. So anything not an actual release is just the next version number with the pre-suffix.\nWas there a reason for this pull request? Or didn't you get write access to this repo? If so, we need to fix that.\n. You should initialize your data with any necessary defaults, instead of putting that into the template.\n. That would invite a ton of otherwise unnecessary features. If you can't modify the original data, you can always make a deep copy with $.extend(true, {}, originalData)\n. Why not just put an Array of numbers into your data before calling the template?\n. Sure, and there are unlimited numbers of other cases where you could just extend the data instead of the template engine.\n. That commit looks like its against a very old version or something. Can you apply your change against master? Better yet, provide a testcase - it sounds like that issue should be solved elsewhere.\n. Does this fail only in IE or anywhere? Having it fail only in IE would be bad.\nIn general, access to nested properties of undefined variables should fail, just like it does right now with ${somethingUndefined.nestedProperty}.\n. Do any calculations before calling the template. Easy to cache then, and keeps logic out of the template.\n. Even if you need to calculate something for each iteration, that can be done beforehand. Templating is about rendering data to markup, whats wrong with enhancing the data before rendering it?\n. Afaik the _ variable is only internally used and not a part of the documented public API (see http://api.jquery.com/category/plugins/templates/ ). So it should be safe to rename it.\n. There's a macro for comments, though not yet documented: https://github.com/jquery/jquery-tmpl/blob/master/tests/core.js#L134\n. That seems to be an actual Safari issue, not a tmpl issue. To verify, enter this on the Safari console:\n$(\"<areas><area></area></areas>\").appendTo(\"body\")\nThe check the Elements tab to see that it appended an areas element, but without the area child.\n. JavaScript has various reservered keywords that aren't used in the language, but should be avoided nonetheless. \"class\" is one of those.\nLeaving this open as we should at least look into improving the error handling.\n. Its very likely that the automatic function invokations will get removed, making an explicit call necessary while removing problems like this. The context would then be the object containing the function\n. ",
    "benkank": "The following used within a template produces an error in all versions of IE.\n\n<div class=\"help\" alt=\"&#60;p&#62;&#60;b&#62;Usage:&#60;/b&#62; Blah Blah Blah &#60;/p&#62;\" ></div>\nThis used in template produces an error in all browsers.\n\n<div class=\"help\" alt=\"<p><b>Usage:</b> Blah Blah Blah</p>\" ></div>\n\n. ",
    "rwaldron": "FYI - This will require a run through the minifier, as there is no documentation provided or build process.\n. ",
    "jamiemthomas": "@DrZim, I would agree that this is likely due to the memory consumption required to produce the HTML as a single large string before inserting it into the DOM.  As you noted here (https://github.com/jamiemthomas/jquery-datalink/issues/closed#issue/1/comment/516553), the fork of jquery-datalink I am working on does improve the situation by delaying the insertion of data until after the template result has been inserted in the DOM, but in practice this will inevitably also reach a ceiling with the same issue when the HTML structure itself is too large.  \nBased on the current implementation, the template engine cannot be certain that template content represents valid HTML that by itself can be inserted into the DOM incrementally, because you as the user could be doing something funky/creative in your nested templates.  However, if, through a hint, the engine knew that template content was valid HTML, it could inject the HTML for each tmplItem before rendering the next tmplItem.  I do not see a way to both allow partial HTML in templates (malformed HTML if incrementally rendered) and also support incremental rendering without a hint from the developer.\nAlso, you appear not to have hit this yet, but if you continue to render progressively larger datasets, you will inevitably get the dreaded dialog indicating that the current script is taking too long.  We are getting this in some cases, and ideally efforts to support incremental rendering to address memory concerns would also include the option to yield to the browser (set a timeout) so it does not think it is stuck in an infinite loop.\n. ",
    "protz": "I also experienced an error (\"InternalError: script stack space quota is exhausted.\"). I previously used a custom template (i.e. just a large string of HTML I was generating by myself) and I didn't hit this problem. Could it be because jquery-tmpl keeps a pointer to all tmplDatas in the data set event though it already has rendered part of them? My data does have nested data sets and nested templates...\n. I also worked around it by splitting the data in chunks and generating the template 50 items at a time, but I would definitely not consider this as solved =).\n. ",
    "DrZim": "We got around this error by looping through the elements and rendering each individually:\n$('#productTemplate')\n.tmpl(Products[index])\n.appendTo(\"#divProducts\")\n. I apologize.  I couldn't differentiate issues to fix from my inability.  LOL.\n. ",
    "timmolendijk": "cool\n. ",
    "sconover": "There's a lot of buzz in the circles I run in around reusing JS templates on the server for initial render.  Jquery-templates is the natural js form of something like erb...it would be a missed opportunity if templates were unnecessarily bound to jquery.\n. ",
    "webwurst": "There is some work to bring jQuery Templates to Node.js and CouchDB:\nhttps://github.com/kof/node-jqtpl\n. ",
    "jeremychone": "@webwurst this is great. I can probably take the .js file and put it in Rhino. Should work fine. \nThanks a lot for updating this issue. \n. @jzaefferer I agree, as long as the direct port is well maintained, and works on any JS engine, we are good. \nI guess there are two school of thoughts in template design: it should be well integrated with a specific framework (in this case jQuery) or it should be independent of any framework and mostly be text based. Personally, I am prefer the later, but I understand the arguments of the former.\n. @jzaefferer Wow, this is great news! \nIf that work, I will migrate my Freemarker templates to Javascript/jQuery template on the server as well. \nJavascript template is the only way to do truly distributed templating (server and client). \nThis mean that now, the server could run the template for \"SEO\" reason, and the client can use the same templates for \"partial refresh.\" As long as the Model is represented in simple JSON (on the server and client) everything is transparent. \n. P.E.R.F.E.C.T  This is making jQuery-tmpl the best option for templating server & client\n. @kirbysayshi look at jsrender.js https://github.com/BorisMoore/jsrender I think this is the next version Boris is working on. \nThis jquery-tmpl is on a refactoring path now, since the jQuery-UI took it, so, I am planning to go with jsrender until I see some activities on the jQuery UI one.\n. @Boris, so just to make sure, the JSRender.js does not have any dependency on jQuery and can be run on the sever, right? \n. Thanks Boris for the clarification.\n. GREAT NEWS! The less dependency for a template engine the better. If I can use it on my java server for my service templating (using rhino) I would be golden.\nThanks for the update.\n. ",
    "gondo": "it would be good, if there would exist some kind of 'template standard', what would be integrated by javascript frameworks and as well by server side frameworks.\nthis way, if the standard would introduce new features, by version number we would know if our server side and javascript frameworks are compatible.\notherwise, current situation allows anyone change anything. and if template ll be integrated deeply in the javacript framework (like it is now with server side frameworks), we would not be able to update to the latest JS framework version without changing server side framework, if we would like to keep same template for both.\non other hand, if backwards compatibility in JS framework will be guaranteed, we should be fine. anyway, standards are good :)\n. ",
    "kirbysayshi": "@BorisMoore, was any progress ever made on making the templates portable? \n. Thanks, I didn't even know this existed!\nAm I correct in my understanding that the goal of jsrender is to create a\ncompiled function/template that does not have any jQuery/jsrender\ndependencies?\nOn Tue, May 10, 2011 at 2:35 AM, jeremychone \nreply@reply.github.comwrote:\n\n@kirbysayshi look at jsrender.js https://github.com/BorisMoore/jsrender I\nthink this is the next version Boris is working on.\nThis jquery-tmpl is on a refactoring path now, since the jQuery-UI took it,\nso, I am planning to go with jsrender until I see some activities on the\njQuery UI one.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jquery/jquery-tmpl/issues/23#comment_1129314\n. It appears not :) :\nhttps://github.com/BorisMoore/jsrender/blob/master/jquery.render.js#L316\n\nOn Tue, May 10, 2011 at 12:31 PM, Andrew Petersen kirbysayshi@gmail.comwrote:\n\nThanks, I didn't even know this existed!\nAm I correct in my understanding that the goal of jsrender is to create a\ncompiled function/template that does not have any jQuery/jsrender\ndependencies?\nOn Tue, May 10, 2011 at 2:35 AM, jeremychone \nreply@reply.github.comwrote:\n\n@kirbysayshi look at jsrender.js https://github.com/BorisMoore/jsrender I\nthink this is the next version Boris is working on.\nThis jquery-tmpl is on a refactoring path now, since the jQuery-UI took\nit, so, I am planning to go with jsrender until I see some activities on the\njQuery UI one.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jquery/jquery-tmpl/issues/23#comment_1129314\n. Yes, I appreciate the clarification too. This was actually my main concern,\nthat you still needed jquery on the server to use JsRender.\n\n\nThanks again!\nOn Tue, May 10, 2011 at 7:46 PM, jeremychone \nreply@reply.github.comwrote:\n\nThanks Boris for the clarification.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jquery/jquery-tmpl/issues/23#comment_1134749\n. \n",
    "acyl10": "Never mind,\nUsing {{tmpl($data.inner[$index]), \"#innerTemplate\"}} works. I was trying with ${$index}. \n. ",
    "clarkbox": "see this patch: \nhttps://github.com/clarkbox/jquery-tmpl/commit/993e6fa128c5991723316032abe12ff0cbbb9805\n. more comments about this issue here:\nhttps://github.com/jquery/jquery-tmpl/pull/33\n. hmmmm.... $index is only available when an array has been passed to the template. If a dev creates a template to be used against an array AND single object, and does not handle the undefined case (of $index), the template will break. \nShould $index always be set?\n. you can break the index of an {{each}} the same way as pointed to in above links - by manipulating the dom. but i do get your point. there are differences in the implied ways to use {{tmpl}} and {{each}} tag, it could be much more common to reuse a template and insert in dom without an update(). \ni admit, it did not occur to me to use the $.inArray approach to get the index from the parent. one problem would be performance in large data sets. i also found in my scenario that i could not use the $.inArray approach, as i was only using templates to setup the initial render, and manipulate the dom from then on - NOT keeping my bound object in sync. but thats just my narrow scenario. I happen to not care about the actual index after initial render as well.\n. i think this is a dup. see issue:\nhttps://github.com/jquery/jquery-tmpl/issues#issue/28\npatch:\nhttps://github.com/clarkbox/jquery-tmpl/commit/993e6fa128c5991723316032abe12ff0cbbb9805\n. ",
    "enyim": "i do not see why would for example rerendering an item rule out the index property.\non the other hand you force the users to craft all kinds of workarounds whihch are all suboptimal (see for example the sample code for rendering items with alternate styles)\nas long as all the caveats are noted in the documentation $index should be part of the package\n. ",
    "dotnetCarpenter": "I definitely support this one. Super useful\n. Good news albeit I'm concerned that http://ajax.microsoft.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js will be shut down. Any news on that account?\n. I just had a experience with the same error message. It turned out that I was building unclosed divs. E.g.  lorem ipsum as in no closing div.\nWhen utilizing nested templates, complicated logic ect. this can easily happen. If this is the issue, I don't think it should be fixed but a more descriptive error message would be appropriate.\nCheers, Jon.\n. oops, lost the tags.\n     Lorem ipsum\n. ",
    "hawkett": "The use case I have is a template that is very commonly used, and the default behaviour produces a html block that contains a lot of default css classes (~20). User contributed javascript utilises the templates in a widget kind of pattern. I need to make it optional for the user to override the css styles on the widget, but as a percentage of actual uses, this is not common. Being forced to do it in the data means my users need to supply the ~20 default css classes in the template data, when in general they really just want to supply the data object received from the server. The additional js code overhead is significant, especially when I don't want to burden them with even being aware of the css classes until they discover a need to override them.\nSure I could wrap/proxy my various template calls in additional js methods that modify the data, but again, it is a lot messier than needed. It also means I introduce a non-standard API for template use - it is much easier to say to someone 'learn jqeuery templates' than 'learn my custom API that I needed to write to handle defaults'. This is a fairly specific use case (default values) and I can see a lot of situations beyond mine where this feature would significantly reduce the complexity of the client code. Cheers,\nColin\n. ",
    "pingvinen": "I too see a need for default values.\n1) I want my view/template to decide what it wants to output as default values, not my logic behind the view.\n2) Most templating engines (not just js) supports default values. I know that \"the others are doing it\" is not much of an argument, but sometimes other people have good ideas :)\n. ",
    "doctyper": "In this particular instance, I needed to generate a  elements of years. Rather than statically add each year to the template, I chose this route.\nYour solution is impractical. There is no value to appending a data object with an array that has no other purpose than to provide a hook to loop through.\n. ",
    "hdragomir": "I've added a file in the demos to illustrate the problem: https://github.com/hdragomir/jquery-tmpl/blob/master/demos/samplesCore/firefox_href.html\nHowever, the bug does not appear when storing the template in a script tag, so I guess there is no need for a fix.\nThanks for the idea of storing templates in script tags, by the way. Much cleaner!\n. @circlecycle yes, it was the DOMParser and abiding by the best practice fixed the issue.\nI don't think solving this problem would create so much value, anyway.\n. ",
    "BuairtRi": "I just noticed this in a pure javascript string as well.  I have the following template embedded in a javascript file:\nsite.views.thumbnailTemplate = '<div>' +\n    '<li style=\"display: none;\">' +\n        '<a href=\"${$item.link}\">' +\n            '{{if !($item.assetUrl == \\'/null\\')}}' +\n                '<img src=\"${$item.assetUrl}\" alt=\"{{= ProductName}}\" />' +\n            '{{else}}' +\n                '<img alt=\"{{= ProductName}}\" />' +\n            '{{/if}}' +\n            '{{= ProductName}}' +\n            '{{if ($data.PriceBookEntryIsOnSale)}}' +\n                '<strong><span>$ {{= PriceBookEntryUnitPrice}}</span> $ {{= PriceBookEntrySalePrice}}</strong>' +\n            '{{else}}' +\n                '<strong>$ {{= PriceBookEntryUnitPrice}}</strong>' +\n            '{{/if}}' +\n        '</a>' +\n    '</li>' +\n'</div>';\n\nThis template renders fine in Chrome, but when I went to test it in Firefox, the ${} tags in the src and href attributes had the encoding.\n. ",
    "circlecycle": "[EDIT - i start to understand - in FF only (not webkit), if DOMParser is used and the nodes given are in any HTML namespace - then FF will escape the contents of src and href \"for you\". I expected .innerHTML to do this, but DOMParser? Wow. So i could parse my XML (HTML) in another namespace (like the url of the document, the default) and avoid this effect, presumably, but FF won't treat those non HTML-namespaced nodes as HTML (a subtle issue i dealt with earlier today) so it's a no- go to use jquery tmpl to print those out... unless I could change the namespace of nodes /after/ they've been made, which might be a way to \"hack\" around this issue, but i haven't found the way to do that. I took the method below and run it on all strings /before/ they hit .template(x) and things are okay (and i don't have to alter jquery-tmpl.js as a bonus) but it's a total PITA that (apparently) the coders of FF \"cheated\" and use the same parser for innerHTML as DOMParser.]\n---- original comment -----\nI still don't understand WHERE firefox has the opportunity to do the replacement! Surely it's not doing it in the script tag - it doesn't even know that's html. It shouldn't be doing it when the template is made -- it's just a string being processed! And it can't do it after the template is stamped out, otherwise the replace operation indicated in the first post wouldn't work at all! \nSo where, precisely, is this ghost replacement of src and href attributes occurring?? Anyway as a gift to the participants now or in the future, i made a function to decodeURI ONLY the src and href attributes in a block of text, which is safer and more comprehensive then the first poster's solution, since this will also decode all chars where the first poster was only changing \"{\", \"}\", and the space char.\nIt's used like \"markup  = decodeURIForSpecificAttributesOnly(['src', 'href'], markup);\" and yields a string where ONLY where src and href attributes are defined (as text, of course, none of this is going through .innerHTML which is why i'm perplexed, above) where it has been treated by decodeURI. If i must do this (god, why, FF?) this is the \"best way\" I can determine. \nYour input greatly appreciated! Text of method follows:\n```\n    //written by James Robey, jrobey.services@gmail.com\nvar decodeURIForSpecificAttributesOnly = function(attrs, string_to_examine){\n            //make a copy of the string, we don't want to alter it\n            string_to_examine = String(string_to_examine);\n        //stores the table of things to replace (key) with what to replace it with (value)\n        var replaces = {};\n\n        //always deal with N attrs to decode\n        if(!(attrs instanceof Array))\n            attrs = [attrs];\n\n        for(var i = 0; i < attrs.length ; i ++){\n            //the attr we are looking to decodeURI the contents of:\n            var attr = attrs[i];\n\n            //the intermediate_str holds the string as we check it\n            var intermediate_str = String(string_to_examine);\n\n            //the index for the start of an expanse to be considered for replacement\n            var startidx;\n\n            //for each instance of the attribute we find in the text\n            while((startidx = intermediate_str.indexOf(\" \"+attr+\"=\\\"\")) != -1){\n                //chop off all before it so we start at the text to replace\n                var intermediate_str = intermediate_str.slice(startidx+attr.length+3);\n\n                //find, and chop off all after, the end of the text to replace\n                var repl_str = intermediate_str.slice(0, intermediate_str.indexOf(\"\\\"\"));\n\n                //store the string to replace as the key and the string to replace it with as the value\n                //includin the attribute name to be very sure only it gets replaced (i.e. not accidentally replacing somehing not in the attr)\n                var attr_prefix = \" \"+attr+\"=\\\"\";\n                var attr_postfix = \"\\\"\";\n                replaces[attr_prefix+repl_str+attr_postfix] = attr_prefix+decodeURI(repl_str)+attr_postfix;\n            }\n        }\n\n        //do the actual replacements with as few operations as possible and only where needed (the point of the exercise)\n        for(var repl_str in replaces)\n            string_to_examine = string_to_examine.replace(repl_str, replaces[repl_str], 'g')\n\n        return string_to_examine;\n    }\n\n```\n. Aye, I doubt very much others will care as I did. I will be releasing an open source framework for html5 app development very soon where this issue did come up, and i'll point out where and how when it came up when I do, deal? Thanks for posting this, anyway, without i would not have honed in on a solution (that avoids altering jq-tmpl.js!) as quickly as I did.\n. ",
    "psayre23": "Yes, I'll get an example up and running, then post it.\n. ",
    "lgersman": "Hello Boris,\nthanks for the hint ! \nThe (forthcoming) documentation should point to this issue ... :-)\nI have rewritten my snippet to look like this : \n```\n     \n        $(window).ready( function() {\n            $( '#template_default').tmpl({ \n                isEnabled : function() { \n                    return true; \n                }, \n                title : function() { \n                    return 'foo'; \n                }\n            }).appendTo( 'body');\n        });\n    \n\n        {{tmpl( $data) \"#fragment_transition\"}}\n    \n",
    "andy-clusta": "I have got innerShiv to work with jquery-templ by adding innerShiv to the private function named build. Refactoring the jQuery( middle ) call on line 296 to allow this to be easily overridden would be very helpful.\nLine 296: frag = jQuery( innerShiv ( middle ) ).get();\n. eg. a PreInject or OnInjecting method which could be overloaded, to add innerShiv as required.\n. My latest approach has been to patch jQuery itself, rather than jQuery plugins individually. The following code works fairly reasonably for my use cases. Crucially, it ensures scripts returned in a partial are also evaluated, but after dom insertion.\n```\nvar init = $.fn.init;\nvar html = $.fn.html;\n// used by Jquery Templates\n// tests to see if html passed to constructor\n$.fn.init = function (selector, context) {\n    if ($.browser.msie && typeof selector == 'string' && selector.indexOf('>') != -1 && selector.indexOf('<') != -1) {\n        return new init(innerShiv(selector, false));\n    }\nreturn new init(selector, context);\n\n};\n// used by Jquery Unobtrusive Ajax in ASP.NET MVC\n// only matches  tags, without @src and @type\n$.fn.html = function (value) {\n    if ($.browser.msie && value != null) {\n        var scriptsRegex = new RegExp('([\\w\\W]*)', 'gim');\n        var scripts = value.match(scriptsRegex);\n        var el = html.apply(this, [innerShiv(value, false)]);\n    for (var i in scripts) {\n        var js = scriptsRegex.exec(scripts[i]);\n        if(js != null)\n            $.globalEval(js[0]);\n    }\n\n    return el;\n}\n\nreturn html.apply(this, arguments);\n\n};\n```\n. ",
    "KrofDrakula": "+1, in HTML5 apps, this is a blocker issue, since no widgets can use HTML5 elements in their templates; the fix by andy-clusta did help, but would love to see this integrated upstream.\n. I've done some more testing on a live example; seems the simple wrapping with innershiv doesn't work correctly, since instead of DOM elements, it returns a document fragment that botches up rendering. I didn't have time to investigate further, but something to help with the resolution.\n. @andy-clusta: I've modified your script a bit (added function name to avoid having the var declarations) and added innershiv to the file: https://gist.github.com/822134\n. ",
    "tehnorm": "if it matters +1 for this fix being worked in. We are using HTML5 and are experiencing IE's \"challenges\" with HTML5. Also - thanks again for jquery-tmpl - great stuff!!\n. ",
    "Akkuma": "@KrofDrakula & @andy-clusta\nI've now made a jQuery 1.5+ compatible version, which integrates the innerShiv directly into the function to remove it from the global namespace.\nhttps://gist.github.com/887560\n. ",
    "rosshadden": "Is there any way the tmpl plugin can be fixed to correct this, so no additional code is required? This is hands-down an issue with jquery-tmpl, so modifying jQuery and/or the shiv are not the best approaches.\n. ",
    "jwynveen": "That method works. However, I found a more efficient way to do it. When I receive the html response from my ajax call that has all of the templates in it, I use $('script', response).each(..) to loop through every ",
    "voidfiles": "Cool, thanks. \n. ",
    "GeoffreyBooth": "trailer is a string. You're right, it looks like it was corrupted by another template. In my backend admin page I have something akin to\n    {{html trailer}}\nwhich introduces the __tmplitem_ tags into the trailer markup. Looks like I might've found two bugs.\nI'm trying to set up a repro on jsfiddle but no luck so far . . .\n. Example on jsfiddle: http://jsfiddle.net/DiegeticShadow/YdWL5/\n. ",
    "tauren": "Boris,\nI just updated to the latest jquery-tmpl.js from master and cannot seem to get template commenting to work. From your comment, it sounds like this should work:\nBefore {{! <p>${x}</p> }} After\nHowever, it renders to this:\nBefore <p></p> }} After\nTry it:\n$.tmpl(\"Before {{! <p>${x}</p> }} After\",{x:\"Hello\"})\nShouldn't this work?\n. Boris,\nThat's the point I was trying to make. While debugging, it would be nice to be able to comment out a bunch of HTML, even if it includes other tags. Right now that isn't possible.\nThanks,\nTauren\n. ",
    "julesbou": "i'm having the same problem:\nhere is a simple testcase => http://jsfiddle.net/wH5Kb/ (look at  _tmplitem=\"1\" in the textarea)\nIs there any workaround ? or maybe i'm missing something ..\nanyway thank you!\n. ",
    "Gedis": "not true - passing $ objects without any difficulties. If your $ object has collections, use {{each}}\n. you are referring outerHTML feature, which is not natively available in jQuery (and this is not tmpl problem). Although you could use this workaround:\n$( .... ).wrapAll( '' ).parent().html()\n. +1 vote for this feature - after update nodes attributes becomes empty\n. quick unofficial fix :)\nfunction tiUpdate() {\nvar coll = this.nodes;\nvar _renderedContent$ = jQuery.tmpl( null, null, null, this).insertBefore( coll[0] );\njQuery( coll ).remove();\nreturn _renderedContent$;\n} \n. Bug test case example:\ntemplates:\n         \n            <div title=\"${Name}\">${Name}</div><br />\n            {{each Places}}\n                {{tmpl( $value ) \"#PlacesTemplate\"}}<br />\n            {{/each}}\n         \n<script id=\"PlacesTemplate\" type=\"text/x-jquery-tmpl\"> \n        <div title=\"${Place}\">${Place}</div>                       \n        <select name=\"options\">{{html GetOptions()}}</select>\n    </script>\nHTML:\n    \nResult:\nChange place\n\n\nJS:\n    function OuterHTML( data$ )\n    {\n        return data$.wrapAll( '' ).parent().html();\n    }    \n```\nGetOptions = function( data$ )\n{\n    return OuterHTML( $( '#selectOptionsTemplate' ).tmpl( _options ) );\n}\n_options = { Items : [ { key : 1, value : \"one\" }, { key : 2, value : \"two\" }, { key : 3, value : \"three\" }] };\n_data = { Name : \"Tom\", Places : [ { Id : 1, Place : 'London' }, { Id : 3, Place : 'Berlin' }, { Id : 5, Place : 'Brno' } ] };\n$( ':button' ).click( function( event )\n{\n    var _templateItem$ = $.tmplItem( $( 'div[title=Brno]' ) );\n    _templateItem$.data.Place = 'newPlace';\n    _templateItem$.update();\n});\n$( '#TestTemplate' ).tmpl( _data ).appendTo( 'body #Result');\n```\nAfter clicking button, Brno changes into newPlace and $.tmplItem( $( 'div[title=newPlace]' ) ) object's data = {}, parent = null and tmpl = null, although before template update $.tmplItem( $( 'div[title=Brno]' ) ) object's data = { Id : 5, Place : Brno } and parent pointed to the TestTemplate template item object.\n. doesn't work - at least for me, took the screenshot after clicking the button ( $.tmplItem( $( '[title=newPlace]' ) ) command):\nhttp://img717.imageshack.us/i/templateupdatebug.png/\nI am sorry, left selectOptionsTemplate, so this is the complete code:\nHTML:\n```\n\n\n \n\n<script id=\"selectOptionsTemplate\" type=\"text/x-jquery-tmpl\"> \n    {{each Items}}\n        <option value=\"${key}\">${value}</option>\n    {{/each}}\n</script>\n\n<script id=\"TestTemplate\" type=\"text/x-jquery-tmpl\"> \n    <div title=\"${Name}\">${Name}</div>            \n    {{each Places}}\n        {{tmpl( $value ) \"#PlacesTemplate\"}}            \n    {{/each}}\n</script>\n\n<script id=\"PlacesTemplate\" type=\"text/x-jquery-tmpl\"> \n    <div title=\"${Place}\">${Place}</div>                       \n    <select name=\"options\">{{html GetOptions()}}</select>\n</script>\n\n \n\nResult: \nChange place \n \n \n```\nJS:\n$(document).ready(function()\n{\n    function OuterHTML( data$ )\n    {\n        return data$.wrapAll( '' ).parent().html();\n    }    \n```\nGetOptions = function()\n{\n    return OuterHTML( $( '#selectOptionsTemplate' ).tmpl( _options ) );\n}\n_options = { Items : [ { key : 1, value : \"one\" } ] };\n_data = { Name : \"Tom\", Places : [ { Id : 5, Place : 'Brno' } ] };\n$( ':button' ).click( function( event )\n{\n    var _templateItem$ = $.tmplItem( $( 'div[title=Brno]' ) );\n    _templateItem$.data.Place = 'newPlace';\n    _templateItem$.update();\n});\n$( '#TestTemplate' ).tmpl( _data ).appendTo( 'body #Result'); \n```\n}\n);\n. can everybody perform this test case - I have uploaded all needed files (html, javascript, jquery, templates) in two storages:\nhttp://uploading.com/files/med2165c/test2.7z/ and \nhttp://depositfiles.com/files/98zgdiolp\nload test2.html and execute $.tmplItem( $( 'div[title=Brno]' ) ) command (I get in firebug object taken in http://img829.imageshack.us/i/beforeupdate.png/), click \"Change place\" button and then execute $.tmplItem( $( 'div[title=newPlace]' ) ) command (I get object in http://img202.imageshack.us/i/afterupdate.png/).\nIs the result you got the same as I getting? Notice the data, parent and tmpl keys change in the result object. After template update (line 21 in test2.js) data becomes {}, parent - null and tmpl - null. \nTested in Firefox 3.6.13 (official build) and jQuery 1.4.4. Tested on several windows machines with the same consistent output\n. actually this is not an issue. I ran into empty data/parent/template issue when rendering options - look into the issue 61 (https://github.com/jquery/jquery-tmpl/issues/61)\n. shouldn't this be {{tmpl( myParameter ) myNestingTemplate}} for nesting templates and for the unescaped html - {{html myProperty}}?\n. ",
    "sievlev": "{{html}} doesn't accept $ objects. A simple script below doesn't work correctly:\n$(document).ready(function() { \n\u00a0\"$.tmpl(\"{{html param}}\", { param: $(\"<p>Param</p>\")}).appendTo(\"body\");\n})\nI see \"[object Object]\" instead of \"Param\" in my browser. It's looks very strong for jquery plugin ;)\n. ",
    "pagles": "Changed it and got the same results. Current test.js :\n```\n$(document).ready(function(){\n    var movieTemplate = [\n    \"\",\n    \"${Name}\",\n    \"{{tmpl(Languages.results) 'languageTemplate'}}\",\n    \"</tr\",\n    ].join(\"\\n\");\nvar languageTemplate = \"<em>${Name} </em>\";\n\n$.template(\"movieTemplate\", movieTemplate);\n$.template(\"languageTemplate\", languageTemplate);\n\n$( \"#foreignBtn\" ).click( function() {\ngetMovies( \"Foreign\", 0, 4 );\n});\n\n$( \"#dramaBtn\" ).click( function() {\ngetMovies( \"Drama\", 0, 4 );\n});\n\n})\n```\n. Seems I can't reopen a closed issue, I 'll have to open a new one I guess.\n. ",
    "ibjhb": "Do you have a code example because I haven't had any problems?\n. No worries.  I never had that problem so I was thrown off.\n. ",
    "richbern": "Nope, because I'm just being dumb.  Stupid not reading my own code.  slaps head\n. ",
    "aaronshaf": "+1 vote\n. +1... er... already did that :)\n. +1 :)\n. I have multiple events bound to an element using live. The first event runs tmplItem.update(), but all other events are then lost. None of the subsequent bound events run on the element.\n. My fix was to trigger an \"afterUpdate\" event from within the update event which updated the template.\n. Is the problem perhaps with jQuery itself? \"name\" is not undefined on the global space on jquery.com, etc.\n@jcinteractive, when passing null the problem remains.\n. In the Chrome developer tools console the global \"name\" variable was still showing a value of \"data-id\", even when I cleared my web app entirely (i.e. a blank page with zero JavaScript). I suspected it had to do something with a Chrome extension. After disabling my extensions and then re-enabling them, and then restarting my browser, there is no longer a problem.\nOddly, the global \"name\" variable still is defined as a blank string in Chrome on every site, even with all extensions disabled. \nSorry if this is no help. Feel free to close the issue at your discretion.\n. ",
    "flosse": "+1\n. ",
    "ehynds": "\nThe ${field} syntax is a shortened form of the alternative syntax: {{= field}}.\n. \n",
    "achuprin": "Thanks a lot. Closed the issue.\n. ",
    "davidpadbury": "Good catch - cheers guys!\n. ",
    "ghost": "Gotta get this on in there.\n. Cool. Thanks guys.\n. Hey lars,\nNot sure if I misunderstand the bug but here is what I see when running your code:\nYou create a textarea with the default value 'hello world' in the foo template and that is added to the body of the document, so far so good. Now, this is where I get a little lost. Do you want to add halali to the text area or as an attribute of the textarea tag.\nCurrently it generates the following, which is exactly what your template tells it to do:\n<textareahalali>hello world</textareahalali>\nIf the intention was to add it as an attribute then your code needs to change to the following:\n<textarea {{tmpl '#bar'}}>hello world</textarea>\nAnd if you wanted to add it into the textare then it would have to be:\n<textarea>hello world {{tmpl '#bar'}}</textarea>\nAs I mentioned, I might be misunderstanding your problem but this is what I see when running the code you provided.\nSchalk\n. hi i justfound out what happend on ie\nu have this code: \nif ( (key = el.getAttribute( tmplItmAtt ))) {\n                while ( pntNode.parentNode && (pntNode = pntNode.parentNode).nodeType === 1 && !(pntKey = pntNode.getAttribute( tmplItmAtt ))) { }\n                if ( pntKey !== key ) {\n                    // The next ancestor with a _tmplitem expando is on a different key than this one.\n                    // So this is a top-level element within this template item\n                    // Set pntNode to the key of the parentNode, or to 0 if pntNode.parentNode is null, or pntNode is a fragment.\n                    pntNode = pntNode.parentNode ? (pntNode.nodeType === 11 ? 0 : (pntNode.getAttribute( tmplItmAtt ) || 0)) : 0;\n                    if ( !(tmplItem = newTmplItems[key]) ) {\n                        // The item is for wrapped content, and was copied from the temporary parent wrappedItem.\n                        tmplItem = wrappedItems[key];\n                        tmplItem = newTmplItem( tmplItem, newTmplItems[pntNode]||wrappedItems[pntNode] );\n                        tmplItem.key = ++itemKey;\n                        newTmplItems[itemKey] = tmplItem;\n                    }\n                    if ( cloneIndex ) {\n                        cloneTmplItem( key );\n                    }\n                }\n                el.removeAttribute( tmplItmAtt );\n            } else if ( cloneIndex && (tmplItem = jQuery.data( el, \"tmplItem\" )) ) {\n                // This was a rendered element, cloned during append or appendTo etc.\n                // TmplItem stored in jQuery data has already been cloned in cloneCopyEvent. We must replace it with a fresh cloned tmplItem.\n                cloneTmplItem( tmplItem.key );\n                newTmplItems[tmplItem.key] = tmplItem;\n                pntNode = jQuery.data( el.parentNode, \"tmplItem\" );\n                pntNode = pntNode ? pntNode.key : 0;\n            }\n            if ( tmplItem ) {\nthe value of tmplItem  remain undefined means all been killed after at\n. sry worng button\n. seem error on my part didnt close tag but i do suggest add alert in the template system so will know \n. ",
    "mgutz": "NM. I put in some console.log trace statements jquery-tmpl rendered almost as quickly as string substitution. Seems to be an issue with jQuery.\n. ",
    "geekbuntu": "it doesn't appear easier (atm), but then again, having sub-templates defined and just calling them inline doesn't seem unreasonable.  if you're having difficulty explaining it, then maybe relating it to a stack would help?\ne.g. you need to show 5 vars on the page.\nthe first template evaluates/publishes the first 3, but the blog date/post count are handled individually?\n//start: template name main = handles the first3\n{{2nd template id = handles blog count}}\n{{3rd template id = handles the blog date}}\n//end of main template.\nlikewise, any css will only be used if the template is used, but then again.\nplease explain if i'm missing the point. i just started using this last week.\n. {too bad}\n. is there an escape char for html safe tmpl output?\ni have a form i want to include, the form renders in firebug under the json tab, but will not inside the template.\ntia,\ngreg\n. can you use external js to select by id/class inside the template? have it load your controller js outside the template - it selects/manipulates if the template is being used?\nmay need to use .delegate though - since depending on how you're using it, the tag may not exist at load time?\n. ",
    "i-sinister": "As a workaround I wrap boolean values with an object: {{tmpl({value: BoolProp}) \"#tmplBoolean2\"}} and use {{ if $data.value.... in template\n. ",
    "gregerolsson": "Ah, good to know, thanks for the reply. \n. ",
    "bakesteve": "Had a look at doing this and for our internal testing code, have added in the following code.\nI modified the data item bind template code, and keep an array of errors within the generated template function.  For now, I'm using a custom event trigger to pass the error data out - although given there is no meaningful element to trigger this off it seems strange so maybe better to raise an event from the template item, or a global tmpl event - (jQuery.tmpl.templateError?) - something similer to the tmplPlus rendered event perhaps?\nThis fits our needs, and think should work for others scenarios.  For other errors (missing nested templates, etc) should be simple to just add to the _error collection, and maybe extend the object (at the moment just Id and Message) to have a type or some identifier?  perhaps the tmpl tag?  Let me know your thoughts\nthe changes are:\nline 241:\nopen: \"if($notnull_1){__.push($.encode($1a));}\" + \"else{_errors.push({Id:'$1',Message:'Property not found'});}\"\nline 320:\n\"var _error=[];\" +\nline 359:\n\"');} if(_errors.length>0){$(document).trigger('tmpl.error',_errors);} return __;\"\n. ",
    "derek-holmes": "I don't see how this answers the issue. I have the same problem.. its an existing select list they I dont want to build.\n. ",
    "alekstorm": "You can construct the <select> tag in its own template, passing in the names of the options and which one to select.\njavascript\n    <script id=\"select-template\" type=\"application/x-jquery-tmpl\">\n        <select>\n            {{each options}}\n                <option {{if $value==selected}}selected{{/if}}>${$value}</option>\n            {{/each}}\n        </select>\n    </script>\nCalling this:\njavascript\n$('#select-template').tmpl({options: ['blue', 'green', 'red'], selected: 'red'});\nwill output the list in the original example.\n. Perhaps you could post the relevant code on http://jsfiddle.net?\n. Since the variable has a space in it, value=${lname} becomes value=Doe Johnson. Without quote characters, HTML parses only Doe as the value of the value attribute. Change it to value=\"${lname}\".\n. I think you've misunderstood the templating language. How is only a \"small subset\" of functions available?  The text immediately after the if is copied directly into a Javascript if (cond) statement, no matter how complex it may be.\nThe $.template() function allows users to pre-compile templates for later, repeated use, so any difference in speed would only be apparent during the compilation step.\n. As far as I know, yes.  Please provide an example on http://jsfiddle.net/ if you find an expression that can't serve as an argument to an {{if}} statement (other than something containing }}, of course).\n. Pull request #128 (which I submitted) adds a {{set}} tag for variable assignment.  In the meantime, you can do ${var a = 0, ''}.  Beyond that, I can't imagine any Javascript syntax that wouldn't be available in jQuery templates.\n. Good question. Every assignment in Javascript returns the value of the right-hand side - the value of var foo = 5 is 5, which is why you can do bar = (foo = 5). Therefore, using ${var a = 0} in a template would output 0 in the middle of the HTML. If we still want to perform the assignment, but return a different value, we can suffix the statement with a comma, followed by another expression - in this case, the empty string ''.\nThis is a hack that only developers of at least intermediate ability would think of, which is why we need a {{set}} tag.\n. ",
    "garann": "Unless I'm missing what you're trying to do, no. That would be fine for just storing HTML in the variable, but I need the contents of the variable to be interpreted by the template engine.\n. ",
    "mattfysh": "It seems rather counter-intuitive to repeat the same 'Success' content twice, especially with extensive markup. There are two reasons why this should work as expected:\n1. The following works\n{{if $data.conditional1 || $data.conditional2}}\n2. It is a valid JavaScript expression, and the API doc doesn't mention any restrictions for\n{{if expression}}\nI've forked the project, so I'll take a look this weekend. Besides this small issue, the entire project is nothing short of amazing. I can't even begin to imagine how many hours I've saved using it :)\n. Right, that makes much more sense. I get where you're coming from now, but shouldn't all variables in a template be resolved against the current data object? That is,\n{{if conditional1 || conditional2}}\nShould automatically be interpreted as\n{{if $data.conditional1 || $data.conditional2}}\nI guess the cleanest way to implement this would be\n{{if $item.hasConditional()}}\nInitiating the template like so\n.tmpl( data, {hasConditional: function(return this.data.conditional1 || this.data.conditional2 ) {} } )\n. True, the parsing of expressions to search for identifiers should be kept well out of scope. I'll use the $item extension instead, much more readable :) Thanks Boris!\n. ",
    "cstavro": "Hi Boris, I just ran into an issue with my fix when it comes to nested templates. I have fixed this and committed it to my fork here but I'm new to github and not sure how to handle this. Another pull request? close this pull request and open a new one?\nAnyways, I realize you're not going to be getting to this immediately anyway, but just be aware of the second fix.\nThanks!\n. Admittedly I was pretty new to this when I attempted to fix that last and in all honesty I've abandoned this approach completely anyway in favour of working with the original implementation. I've simply resorted to ensuring I'm passing complete data objects with all template field values defined in the data object to ensure it is picked up in the with block properly.\nThat being said, I still don't like the with block.\nI'm closing this pull request as I don't think it properly solves the problem.\n. ",
    "benblank": "Am I missing something?  This appears to completely break the = tag:\n- Working example using jquery/jquery-tmpl/master.\n- The same example, broken by switching to cstavro/jquery-tmpl/master.\n. My thoughts:\n1. As Boris points out, this is due to the way browsers parse HTML and can't be affected by the plugin.\n2. Needing to embed a script tag in a template should be very rare.  With your tweet button, for example, the template only needs to contain the link; the script can be included just once at the page level and it will still work.\n3. You can use the same trick to insert a </script> tag into a template that you do to insert one into inline Javascript \u2014 splitting it up.  </scr{{= \"\"}}ipt> seems to work well.\n. ",
    "pekkaklarck": "Apparently adding the semicolon wasn't automated as it's missing again since the last commit.\n. ",
    "colinsullivan": "Just to elaborate, I started using the {% verbatim %} tag for Django, which i thought was mentioned here but apparently is not.\nYou can find it here:\nhttps://gist.github.com/629508\nThe ssi tag works if you do not want any server-side logic in the generation of your template, but you can use the {% verbatim %} tag if you want to generate some parts of a client-side template using a Django template.\n. ",
    "nickretallack": "The jsfiddle link is broken.\n. ",
    "digitalxero": "No but I will make one tomorrow\n. ",
    "edoloughlin": "In putting together the test case I noticed a typo (generating templates from Coffeescript, so it wasn't immediately obvious), so my templates were at fault. However, if that code is where these things come off the rails, it would be useful to have a warning rather than a runtime error.\n. ",
    "btipling": "Agreed. I want to show HTML in a textarea without the _tmplitem garbage being added.\n. Oh nevermind. saw #42.\n. ",
    "mAu888": "+1, I'm having trouble because of this right now. I'm developing a one page app and my jQuery object keeps on growing because of all those cached tmplItems. Would be a very nice (and handy) feature!\n. After some debugging and profiling I figured, that all those tmplItems where created by using the {{html}} tag. Maybe I'm wrong, but for now I switched the template engine and my memory leak went away.\nAnybody may have a look into the {{html}} tag and check if it's leaking?\n. ",
    "yangjh": "If you don't need the tmplItem, maybe you should try another template lib\njsRender, but you can cleanup these object manually, they are stored in the\ndataobject of each root of the rendered instance.\nOn Aug 19, 2011 7:42 AM, \"mAu888\" \nreply@reply.github.com\nwrote:\n\n+1, I'm having trouble because of this right now. I'm developing a one\npage app and my jQuery object keeps on growing because of all those cached\ntmplItems. Would be a very nice (and handy) feature!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jquery/jquery-tmpl/issues/80#issuecomment-1850209\n. \n",
    "pascalsaul": "It's not a bug but has to do with: http://www.w3schools.com/TAGS/tag_bdo.asp\nNever heard of it before...\nIssue can be closed :)\n. ",
    "RoyJacobs": "We are also running into memory leaks in combination with Knockout. Disabling template rendering causes the memory leak to disappear, so we are assuming it is related to jquery.tmpl somehow.\nThe fiddle is available here: http://jsfiddle.net/4KSXe/\n. To remove knockout from the equation, I have modified the jquery.tmpl \"each\" sample to continually rerender the same template. In this case, memory usage also continually increases.\nThe fiddle is here:\nhttp://jsfiddle.net/PqSrT/\nHowever, if I use the appendTo provided by jQuery.tmpl, this is what calls the 'complete' callback which clears the DOM cache 'newTmplItems'. Then, the memory usage remains bounded:\nhttp://jsfiddle.net/PqSrT/1/\nSo there probably should be either an external way to clear this cache (exposing a clearCache() function or something) or a way to 'automatically' clean this cache, I suppose?\n. I've also identified the cause of the leak in KO: jquery.tmpl adds data with key 'tmplItem' to the rendered elements. This is not cleared by Knockout when it removes DOM nodes, since it does this 'outside' of jquery.tmpl and therefore the data does not get removed.\n. Excellent. KO has also improved support and now uses the proper methods!\n. Good :) As far as I'm concerned this issue can then be closed, though others may want to weigh in as well.\n. ",
    "johnfields": "I'm also running into memory leaks with knockout/jquery.tmpl.  Please let me know if you'd like me to provide more details or demo code.\n. ",
    "thelinuxlich": "+1\n. ",
    "yori-s": "I also got bit by something similar extracting html strings for use with dataTables, which takes html but not dom nodes or jquery objects as custom column output:\n// leaks jQuery.data\nreturn $('<div />').append($(\"#template\").tmpl(someData)).html();\n// ok\nreturn $('<div />').append($(\"#template\").tmpl(someData).removeData(\"tmplItem\")).html();\nMaybe this is more pertinent to #80, but it would be nice to have appendTo, etc. perform the removal by default\n. append was just shorthand and (pleasantly) appears to work as appendTo (complete gets called anyway), so ignore for the moment. The jQuery.data issue applies to appendTo as well - the following uses jquery 1.6.2 and templates beta from the cdn: http://jsfiddle.net/XKWXU/1/\n- first button doesn't clear data by setting innerHTML (resulting in jQuery.cache growing unbounded)\n- second removes pre-existing data via .empty()\n- third uses appendTo/removeData\n- fourth uses append/removeData\n. ",
    "ericwebster": "http://jsfiddle.net/ericwebster/PJvnX/36/ \nThere is my fiddle example.\nThanks for helping out on this.\n. For some reason append was nto working for me earlier on fiddle, so I changed it to html and it worked. I may have had bad syntax somewhere.\nI possibly misunderstood you, I updated my jsFiddle with what you stated and it still did not work?\nhttp://jsfiddle.net/ericwebster/PJvnX/36/\n. Sorry I am new to fiddle, here is the right link to the update source code..\nhttp://jsfiddle.net/ericwebster/PJvnX/#base\nthanks again for the help with this.\n. \"You have \"#tplPrimaryLink\" but there is no such template in your page.\"\nI do indeed have a template.. its in the HTML\n\n    <td class=\"primary\"><a href=\"${d.results[i][Parameters.Link]}\">${d.results[i][Parameters.Text]}</a></td>\n\n\"Variable d in your tplTextPrimary template is not defined.\"\nd is defined in fauxAjaxResponce which is passed in\nvar fauxAjaxResponce = {\n    \"d\": {\n        \"results\": [ ...\n}\nconcatenated into data with this line ..\nvar data = $.extend({}, fauxAjaxResponce, pluginFauxConfig)\nI don't understand how this is not a bug, or at least mis-documented on the plugin site ..\ninside the each if I put ${Template} it will echo out \"#tplTextPrimary\" but I cannot use \"Template\" as a variable in a nested  {{tmpl}} .. please enlighten me ..\n. I guess I don't understand how my test case is not proof of a bug ..\nThis fiddle I just entered shows that Template is in scope and the data is being passed to the template\nhttp://jsfiddle.net/ericwebster/upvpK/5/\nEverything works in the fiddle I sent, except we want to abstract the \"if's\" into separate templates which are dynamically populated\nsorry for all the back and fourth, this is the only thing holding me up, otherwise I will ahve to switch everything back to Resig's micro templates .. http://ejohn.org/blog/javascript-micro-templating/\n. Well Boris I appreciate your help and Proof that this is a glitch in something im doing, sorry about all the back and fourth.. time to bang my head against a wall for a bit.\n. ",
    "mesetar": "I am trying to add google+, tweet and fb recommend buttons into my template\n\n\n\n\n\n\n```\n        \nTweet\n!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");\n\n\n\n\n\n```\nThis is the code I need to put into my classified view template.... if I put it directly, the thing does not work as expected...\nany suggestions?\n. ",
    "kagemusha": "Ok did that but didn't help with my specific problem (which perhaps more an IE problem but still affects plugin usage).  Tried adding a callback IE was not passing form elem variable (very weird)!  So finally took the  tag out of the template and used the template for the body of the form.  That worked.\n. Yeah, seems the best solution for me is to leave the form tag outside the template.  I had some attributes set in the form tag, but moved them to a separate div in the template.  Requires a little extra effort, but works.\n. ",
    "2beers": "yes. I know I can make a check to see if the template is empty , but I though this might be an error so I reported. \nI think it's more a problem of debate. To me even if the template has no content it shouldn't throw an error, it will just return \"\"\n. ",
    "kwokso": "Yes for the parent tmpl it is using appendTo, below is how I'm calling the parent tmpl:\n$('#tmpl_exerciseAttempts').tmpl(result).appendTo('#exercise-past-attempts tbody');\nInside the #tmpl_exerciseAttempts, I'm using a nested tmpl with the {{tmpl}} tag which causes the problem.\n. Yes the live examples work, I'll try and get a stripped down version and see if it works. It only happens in Firefox 3.5 specifically, versions above are fine, also fine in other browsers so very strange.\n. Just to update you, it was another library that caused it to break. Thanks for the help, apologies for wasting your time.\n. ",
    "jc1arke": "Just a suggestion, but you can just send through null instead of {}, as the template engine works with the jQuery.data() property system, thus the data-id as (data-id-variable: data-value-variable) :)\nSo basically your code will be:\nvar _array = [ {name: null}, {name: 'This should show'} ];\n$.tmpl('userTemplate').appendTo($('#user_add'));\n. ",
    "dfsq": "name is a property of the window object.\n. ",
    "chadwhitacre": "Could you work around this by working with the template as a string instead of using the <script> method?\n. ",
    "svilenkov": "I can't believe i just missed one bracket } in the template file. Please remove my issue report before anyone sees it :)\n. ",
    "tobsn": "thats actually not common. but a good idea ;)\n. ",
    "Evgenus": "I think that is must have feature. Using such thing a lot in Mako and Jinja2 python template engines.\nOther way is something like this:\n{{each(i, item) stuff}}{{if item.foo}}blah{{else}}urgh{{/if}}{{/each}}: those are the results.\nbut that is less readable\n. ",
    "nylen": "I agree that this would be very valuable.  My case (HTML tags that are built via a loop but that need to have no space between them) may be more common:\n{{each(i, dir) result.pathComponents}}\n    <a href=\"#${dir.query}\" class=\"query ${result.type}\">${dir.name}/</a>\n{{/each}}\nI'm building a breadcrumb-style navigation control and I want there to be no space between the path components (unless I decide to tweak the CSS later).\n. ",
    "chrismarx": "i realize this could be avoided by using a script tag to contain the template, but im using ajax to bring in a html file multiple templates, and jquery parsed out the scripts when getting the content, and made it so i couldn't access templates inside scripts tags-\n. ok, thanks for the info, i worked out what was going on with the jquery ajax call for the remote html file with scripts, this works now:\nBasePanel.getTemplate = function(){\n  var $templates;\n  //use filter to just get script nodes, and not other text or comment nodes\n  $.get(JsUtils.baseUrl + \"scripts/app/templates/template_compilation.html\",function(data){ \n    $templates = $(data).map(function(i, template){ return $(template); }).filter(function(){ return typeof(this.attr(\"id\")) !== \"undefined\"; });\n  });\n//memoize\n  BasePanel.getTemplate = function(templateName){\n    return $templates.filter(function(){ \n      return this.attr(\"id\") === templateName; \n    })[0];  //note a template call should only ever return one match, this is enforced here, and also to return the actual element and not an array of jquery elements\n  };\n};\n. ",
    "mysterycommand": "It's not super obvious from any documentation that I've seen \u2026\u00a0tmplItem doesn't seem to be too well documented, but I do this quite often:\n``` javascript\n// store the tmpl and tmplItem\ntmpl = $.tmpl(template, data).appendTo(element);\nitem = $.tmplItem(tmpl);\n// \u2026 then later \u2026\nitem.data = newData;\nitem.update();\n```\nHope that helps!\n. Thank you so much for your quick response \u2026\u00a0I'll check out the links, and eagerly anticipate the future!\n. ",
    "nobuf": "The below code gets \"Uncaught TypeError: Cannot call method 'push' of undefined\" jquery.tmpl.js:429\nBut once I replace 'a' element to span or div on #testTmpl then it works peacefully. \nChrome14/Firefox6.0\n``` html\n\n\n\n\n    <div>\n        <a>test</a>\n    </div>\n\n\n    <a>\n    {{tmpl() \"#test2Tmpl\"}}\n    </a>\n\n\n$(document).ready(function(){\n    $('#testTmpl').tmpl().appendTo('body');\n});\n\n\n```\n. ",
    "patridge": "That may be a symptom of the fact that a colon (\":\") isn't valid character in a JavaScript name. I won't comment on whether the colon should be used or not, but, in this case you can work around that limitation with object array notation: ${prop[autn:summary]}. It will take a tiny bit of tweaking on your {{each}}, but here is a stripped-down sample jsFiddle.\n. It appears to be something with not being able to access myfunc rather than any problem with foo. I have never tried to access a global function in a template, but I have had luck with passing functions into my tmpl call as I did in this version of your jsFiddle. Hope that helps.\ntemplate\n{{html $item.myfunc($item.foo, $value.bar)}}\njs\n$.tmpl( 'mytpl', data, {foo:'additional', myfunc: myfunc} ).appendTo( '#container' );\n. I put together a proof-of-concept for this issue on jsFiddle, though I am not sure how you set your template up for omitting the terminating comma.\nAs well, there is a work-around in there for getting by until a better solution is found. The work-around revolves around rendering some a string variable after each item, but it doesn't handle omitting the terminating comma either.\n${$data}${\", \"}\n. ",
    "abraham": "I ran into the same issue and fixed it by caching templates like this var jqTemplate = $('#jqTemplate').template('jqTemplate');\n. ",
    "jan--f": "yes it is...framed by script-tags with the appropriate type. then i just call $(\"#template\").tmpl(jsonObject)\ni am working on an example reproduction of the error right now. also i'll test the caching workaround.\n. ok i found the issue and its not an tmpl issue. i used Array.filter() within the template which breaks of course since IE8 does not implement this method. but since i am unfamiliar with IE and its issues....well my bad...i apologize.\nfix: add Array.prototype.filter method.\n. ",
    "jorrit": "I did not intend this issue as a bug, but as a feature request, I should have been more clear about that. Would it be a lot of effort to check if an assignment is made to an attribute that starts with data-?\n. The first option sounds like what I want. The end result would be that calling .data('item') on the divs with class item from my example would return the item object that was used in that loop.\n. In this case, that doesn't work because I need the object in the loop and tplItem gives the object that was passed to the entire template. But now I think of it, I can probably use a subtemplate in the loop and call tplItem on the subtemplate. In any case, I'll close this issue. Thanks for your time.\n. ",
    "Hoazl": "Yes, it works when using $item. Thank you very much!\n. ",
    "trans": "+1\nwithout it some code can get a lot more complex then need be, because you have pre-collect all the data you plan to use up front rather than as the template is being rendered.\n. Here is small piece of code I am working on:\n```\n Included Modules \n{{if includes}}\n\nIncluded Modules\n\n  {{each(i,x) includes}}\n    ${doc = Rebecca.documentation_by_key[x],''}\n    \n${doc.name}\n\n  {{/each}}\n  \n\n{{/if}}\n Constants \n{{if constants}}\n\nConstants\n\n  {{each(i,x) constants}}\n    ${doc = Rebecca.documentation_by_key[x],''}\n    ${doc.name}\n${doc.comment}\n  {{/each}}\n  \n\n{{/if}}\n```\nAnd it goes on like this for a few more sets.\nIf I had to collect all these doc upfront, it would require building and storing arrays that I don't really need to keep and it would also require that I write a special method to handle it, adding more complexity then is really required.\nI certainly do not recommend that anyone put hefty chunks of logic in their templates, but for a temporary variable, being able to do this is invaluable.\n. So now how/where does one submit this issue/patch?\n. @benatkin well, javascript is ugly. Adding more syntax memes isn't going to help that.\n@alekstorm  but you can you put arbitrary javascript between {[ }}, e.g. set a counter ?\n. @alekstorm\nWell, I meant something like {{ var a = 0; }}.\n@benatkin\nThanks. I was somewhat hopeful that there were reasons why tmpl's approach might be considered better --especially in the light of the fact that jQuery is making it official.\nI am using jqote2 presently and I am reasonably satisfied. I thought about switching to tmpl b/c it is becoming standard --obviously there's a compulsion towards defacto framework. But, both speed and the potential limitations I mentioned before discouraged me from doing so and made me wonder, \"why tmpl\"?\n. What's the , '' part for?\n. Will {{set}} make it in? B/c I can't seem to get the var thing to work.\n. Ah, interesting. That makes sense. I'll add my +1 to the {{set}} feature, as I concur with you.\nStill can't get the var bugger to work in my case though.\n{{if modules}}\n      {{each(i,x) modules}}\n        ${var doc = Rebecca.documentation_by_key[x],''}\n        <li class=\"${doc['!']}\"><a href=\"${doc.id}\">${doc.name}</a></li>\n      {{/each}}\n    {{/if}}\nWhere Rebecca is my project's toplevel object. In firebug console I'm getting:\nsyntax error\n  em):(modules)),function(i,x){with(this...r doc = Rebecca.documentation_by_key[x\n. Trick was not to use var at all.\nThanks for the help.\n. ",
    "drewwells": "It may be cool to do something like this on the fly inside templates, but I don't believe templates are meant as a replacement for JavaScript code.  \nIs there an example of a time that it would be more suitable to be setting variables on the fly inside a template rather than organizing your data in a template/html friendly way prior to rendering?\n. In this example, I personally would remove the duplicated code in template and pass along a title field.  That way the first two lines of the template will use the same code.  Then you can branch the ul, dl stuff with the following code.  I try to setup up my templates to expand an array and remove the {{each}} too, but it's not always possible.\nFor instance,\n//var data = { lots, of, stuff };\ndata.name = data.includes? 'includes' : 'constants';\ndata.title = data.includes ? 'Includes' : 'Constants';\ndata.arr = $.map( /* same named array, or data[ name ] */, function( n ){\n    return Rebecca.documentation_by_key[ n ];\n});\nNow for the the minor HTML things that are repeated/slightly different.  You could use data.name or use data.title.  Throwing a lot of ifs in there makes templates look very ugly, so your preferred solution may be to do {{if name === 'includes'}} and {{ else }} and continue to use the repeated code.\nMy two cents,\n. Hmm... that was 6 months ago.  We are heavily depending on this plugin, that is quite unfortunate.  If I had known it was DOA in April, I wouldn't have touched this thing.\n. ",
    "fcsonline": "Oh! So interesting project!\nI will take a look, and if I can suggest you some improvement I will do.\nThanks!\n. ",
    "reconbot": "What sample page?\n. This isn't how javascript evaluates them. Boolean({}) === true Boolean([])=== true You can always do\n```\n{{if array.length }}\n{{/if}\n```\nOr just use a {{each array}} statement.\nAs for the second part, I'm not sure what you're getting at or why you'd want it.\n. What are you trying to do?\n. ",
    "tyson-benson": "Let me know if you need any more information if it will help you reproduce this error.\n. ",
    "uhtred": "Any help?\n. Sorry man, when i build the code on jsFiddle to post here, it works.\nhttp://jsfiddle.net/drfranca/N3u2S/\nMy code problema...\nTks.\n. Sorry http://jsfiddle.net/aYSBX/3/\n. Sorry again http://jsfiddle.net/drfranca/aYSBX/5/\n. Give \"disabled is not defined\".  And tks\n. Excelent! Thank you!\n. ",
    "tholder": "This is a shame. Really don't want to see this get sucked in to the horrible world of jQuery UI. Still, perhaps this might restore my faith after being jaded from the use of UI calendar.\n. ",
    "atulkamboj": "Yes, your are right. Thank you so much for your reply. I really appreciate it.\n. ",
    "benatkin": "Because curly braces mixed with angle brackets is ugly. Case in point: your example is wrong.\n. @trans Well this is one particular template language. Whether or not jQuery should have adopted a template language is debatable. At least they don't try to compel everyone to use it. It's also debatable whether they picked the best kind of template engine. The kind you're referring to, ejs, is available in several different incarnations. I like ejs, and I might prefer ejs-style templating to jquery-tmpl, but I'm glad they at least went with something closer to ejs than mustache.\nI agree that the curly braces and angle brackets mixed aren't a serious problem. It's one valid approach. It has a drawback of looking a bit messy to some.\nI hope you find a client-side templating setup that you're comfortable with.\n. ",
    "longXE": "yes, it is clear now. thank you for your reply.\n. ",
    "timkuijsten": "alright, tnx for notifying me.\n. ",
    "wackyphill": "Sorry, I imagine it actually needs to be in quotes. My mistake.\n. ",
    "lincolnq": "Ah, sorry - I didn't realize it was browser specific. Firefox doesn't reproduce, but Chrome does. Don't have an IE to test with.\n. ",
    "eirikwang": "Latest version from GIT has this problem as well. \n. Made a workaround, ensuring all nested objects are assigned \"dummy\" value if null. \n. ",
    "row1": "I have an array of strings and want the value to be printed more than once. A more realistic example:\n<td><div class='${}'>${}</div></td>\n. ",
    "kusog": "We greatly appreciate how this tmpl engine was put out for people to use and then dropped, leaving users like this with canned responses to questions.  Software Development Politics at its best!\n. ",
    "martinbean": "Oh. That's a blow :-(\n. ",
    "marlun78": "Yeah, sorry about that! It was not a jquery.tmpl problem. Well sort of. The problem had to do with whitespace in the template file. Once I removed that, it worked fine.\n. ",
    "PrisonerZERO": "I am getting the same issue, but I have no white spaces.  In the meantime:\nThis returns a TextNode?\n$('${Text}').tmpl(instance)\n...and yes, instance contains a property called 'Text' (e.g. instance.Text\n)\nThis returns EMPTY?\n$(\"\").tmpl(instance)\nThis returns EMPTY?\n$('').tmpl({})\n. ",
    "ChrisMalone": "First and foremost, each template needs a wrapper.. This is a dummy tag.  Any template not contained in a script tag must be wrapped within a dummy tag. (this is probably because the resulting selectors \u201cHTML()\u201d method is used to return desired markup). Additionally, invalid html will cause it to return empty object. \nFor example, putting a td tag inside a div.\nAlso see http://bugs.jquery.com/ticket/7188\n. ",
    "TheCodeBuccaneer": "Sorry, too eager to find the issue I guess :)\n. ",
    "sheelasurisetty": "So, I edited the function buildTmplFn on 342 in tmpl.js and changed the following code:\nIn buildTmplFn changed Line1 below with Line2 below:\n.replace( /\\${([^}])}/g, \"{{= $1}}\" )    --> Line1\n.replace( /\\${([^}])}/g, \"{{= \\$item.data.$1}}\" )       -->Line2\nwhich fixed the problem. \nI hope this helps!\n. ",
    "fedeghe": "if u can forget about cache\njavascript\nfunction replaceall(tpl, o, dD, Dd) {\n    var reg = new RegExp((dD || '%') + '([A-z0-9-_]*)' + (Dd || '%'), 'g'), str;\n    return tpl.replace(reg, function (str, $1) {return o[$1] || $1; });\n}\nhope it helps\n. ",
    "xiunen": "${word} is a element show in the template, not the template  variable. how can i make it possible.\n. ",
    "sachinvkatkar": "Hi rdworth,\nThanks for your quick response.\nI have also tested my code using http://jsfiddle.net/rniemeyer/cnzeg/ and it is working perfect in Mozilla as well.\nhow the sample application on Jquery official site are working in all the browser ?\nDo we need any additional plugin to be used..?\n. ",
    "tomatojacky": "```\n\n    <div>\n          {{each parent}}\n              ${$value.title}\n          {{/each}}\n    </div>\n\n\n  $(function() {\n    $(\"#outTmpl\").tmpl({\n      \"parent\": [\n        {\"title\": \"a\"},\n        {\"title\": \"b\"}\n      ]\n    }).appendTo(\"body\");\n  });\n\n```. @BorisMoore  ok,thanks,i will try . @BorisMoore  $(\"#companyTmpl\").tmpl({country:\"USA\",sex:\"girl\",age:\"18\"}).wrapAll('div').parent().html(); can get all html ,i'll read the jsviews todady ,thank you. ",
    "scottgonzalez": "I'd like to just delete the note and not put anything in its place. Unless we want to just point people to Handlebars :-)\n. Well, I don't have a vested interest in seeing us maintain this in any way. So I don't plan on handling #173 (or any other issue, besides this one).\n. 2f96204784d56a387fc3a0fa95292abcad1f6015 That's even worse than patch-1, right?\n. ",
    "ajpiano": "Then you're really not going to like #173 :(\n. FWIW i'm ok with not putting anything in its place, I just want the innacurate information out.\n. This is massively appreciated, @waynedenier.  Going to pull this in in a single commit and if there are more improvements to be made, \"others are welcome to make it how they like it,\" as you said :)\n. Merged in at 489cf3ed78d6c33, thanks @waynedenier\n. GH markdown automatically generates anchor links for headers in .md, so if you just use regular headers in the content and regular markdown links in the TOC you should be fine @waynedenier\n. ",
    "felquis": "+1 I needed this today, but.. =/\n. ",
    "waynedenier": "If anyone is still interested in this, I've submitted a pull request that should go towards correcting the issue. https://github.com/jquery/jquery-tmpl/pull/175\n. No problem, Boris! It was nice starting with a parser to get me most of the way there. I'll look into how we might expand to include all 13 sections in the README.md using jump links (if the feature is available in GitHub Markdown)\n. ",
    "vendethiel": "\"Note: The jQuery team has decided not to take this plugin past beta. It is no longer being actively developed or maintained.\"\n. ",
    "SumitJambhale": "This issue is close,It will be shifted to jsviews.\n. ",
    "djessup": "Thanks Boris, let me know if there is anything else I can do to help.\n. Sorry! I completely missed these messages.\nThe code in the PR is just standard boilerplate loader code and I can't see any reason why your modified version wouldn't work just fine. Would you like me to update the PR?\n. Ok, CommonJS has been removed from the factory method - sorry I've been so slow with updates! Let me know if there is anything else you think needs attention to merge.\n. No problem, I'm sure it can wait a little bit longer :-)\nI did run the existing unit tests on both the raw and minified code, there are a few that it fails, but they also fail it the current non-AMD version so I figured they were just a little out of date.\n. ",
    "xiangtao123": "I actually wanted to customize this prefix.  thank you!\n. ",
    "inviajay": "Thanks a lot sir.  I am just looking for my solution. It't not a template issue but also I am not able to apply any function like i used in createdDate. \nCan I use some function after whole parsing of html?\n. ",
    "sebasladino": "Thanks @BorisMoore for the answer, i see jsviews.\nThanks :+1: \n. ",
    "VadimPushtaev": "OK, just let it be here in case somebody stucks with the same problem.\n. Thanks!\n. ",
    "waranvignesh16": "Hi @VadimPushtaev, For this fix create any other impact ? Can you please explain it. Thanks in advance . ",
    "paulvales": "replaced to https://github.com/BorisMoore/jsrender/issues. "
}