{
    "lamielle": "@technosophos: is this still a task the maintainers are interested in?  I just started looking into it.  Seems like a nice way to simplify the Glide code.\n. Ok, I have started in on it.  Is it worth continuing given that you two would still be focused on bug fixes?  I suppose the risk of new regressions is high so I can stop for now if you're focusing on stabilization.\nAlso, I noticed the project lacks any unit tests, I was looking to add some minimal coverage as I make the transition to the VCS library.  Have you had any discussions about testing in Glide?\n. I reviewed most of the code (and opened a new PR for formatting).  There's lots of places that make sense to me to have some test coverage.  Here's a brain dump of what I was thinking:\n- At a high level, testing each cookoo cmd would be ideal (but maybe not necessary in many cases)\n- GetImports/UpdateImports commands would be good to test\n  - Below these VcsGet and VcsUpdate are called, which depend on the global instances of the VCS implementations (GoGetVCS, GitVCS, SvnVCS, BzrVCS, and HgVCS).\n  - To test GetImports/UpdateImports without a 'real' VCS implementation, we need to be able to stub out these globals.\n  - We can add a new struct type (type vcsTypes struct { goGet VCS git VCS ... }) and pass the value of this in to VcsGet/VcsUpdate via the cookoo context.  That gets pulled out just like cfg.  Then we pass it in to VcsGet/VcsUpdate as a second argument.\n  - Now we can stub out the VCS implementations in our tests with mock VCS implementations and assert various behavior of GetImports/UpdateImports.\n- Once we have the VCS cli command code tested, we can test the VCS-specific pieces in isolation.  Really they should be straight wrappers around go.tools/go/vcs.Cmd instances.  However, we could write some integration-style tests that would require having git/bzr/hg/svn installed to run.\n- drop_shell.go: if we had a standard stubbable interface for forking/waiting for external commands, we could assert that drop_shell.go is doing the right thing without actually spawning sub-processes (and thus test plugin support).\n- godeps.go: This one should be pretty easy, test that the parser produces the expected dependency slices.\n- guess_deps.go: seems like we could switch the working directory to a temp dir the test creates, set up an expected set of files there, then run GuessDeps and assert that it finds/guesses what we think it should.\n- init_glide.go: may not be super useful, but we could do the same working dir trick and assert that this command creates the expected file (or doesn't when glide.yaml already exists).\n- in_gopath.go/in_out.go: similar working dir switch trick?\n- link_package.go: working dir trick, and assert that the correct symlink is created after LinkPackage is called.\n- parse_yaml.go: should be pretty straight forward to write some parser tests to assert that the proper Config/Dependency structures are created for a given input file.\n- rebuild.go: this one may be tricky, and the test coverage benefits may not be worth it?\n- status.go: pretty simple code but the test should be just as simple so may be nice to have coverage.\n- update_references.go: leans on VCS related code and the output is an updated Config struct, so a nice bit of code to test.\nMost of the code should be testable as is, but a bit of dependency reshuffling will be needed for the VCS stuff.  We'll have to weigh the cost of writing some of these tests against the value they provide, but in general there's a good chunk we could cover without too much effort.\nIn the context of this specific ticket, getting coverage on the VCS code would be my first goal so that changes to switch to go.tools/go/vcs could be made with more confidence.\n. No problem!  : )\n. The Homebrew maintainers didn't like @intabulas' approach of using Glide's prebuilt binaries (they prefer building from source).  So, I took over and wrote up an Homebrew formula and submitted a pull request for that: https://github.com/Homebrew/homebrew/pull/32824\n@mattfarina unfortunately, Glide's Makefile was a little too hardcoded for leaning on in the formula.  It appears that the Homebrew maintainers also prefer explicit listings of the external software that is downloaded, so I based my formula on the similar Go build of NSQ.\nPlease take a look at the build steps I'm using in the formula for details.  If you have suggestions on changes, please let me know!\n. The 0.1.0 Glide formula has been merged.  I just posted a documentation pull request to update the README.md to note that installation via Homebrew is available.\n. Thanks Matt!\n. Great, thanks guys!\n. Could one of you enable Travis builds for this repo?  I enabled then on my fork to test it out and looks to be working just fine.  Since I don't have write access to this repo I won't be able to do it here.\n. I'm more than willing to do it but of course I don't have proper access rights on the repo to control that.  Let me know if you need anything else from me on getting that set up (it was just a few clicks from github to Travis to enable it for my fork).\n. Awesome!  Thanks @mattfarina!\n. This one might be slightly controversial, let me know if there's a solid reason for the existing color scheme.\nAlso, the git color change may not be wanted either.  Maybe yellow/red/boldred is better for that case?\n. ",
    "technosophos": "Yes, very much. @mattfarina and I have discussed not doing it until after the 1.0 release of Glide so that we can focus on bug fixing. But we have a pretty deep interest in using go.tools's VCS because that will keep glide even closer to Go's built-in behavior.\n. By all means, go ahead. If it gets stable before we get 1.0 out the door, we'll probably just include it. If not, we'll just track it on a branch until it's ready.\nFor testing, I don't think we've had any real conversations, other than a few informal discussions about creating some integration tests in addition to unit tests. What are your thoughts?\n. I've merged the formatting pull request. Thanks!\nFor my part, I agree with the testing plan, and think we should start (as you suggest) with the VCS code. Thoughts, @mattfarina ?\n. This is now fixed.\n. Just so I understand...\nIf I create a glide.yaml like this:\nyaml\npackage: main\nimport:\n  - package: github.com/Masterminds/cookoo\n    subpackages:\n      - foo\nYou are suggesting that this should emit an error or warning?\n. If you set up both to use explicit repo: and vcs: attributes, then it should use git instead of go get to install both packages. By not using go get, you will avoid its automatic building process, which means dependencies won't be resolved until after the branch is checked out later.\nSo, if I'm understanding you right, your glide.yml would look like this:\nyaml\nimport:\n  - package: github.com/conformal/btcrpcclient\n    vcs: git\n    repo: git@github.com:conformal/btcrpcclient.git\n  - package: github.com/conformal/btcws\n    repo: git@github.com:/monetas/btcws\n    vcs: git\n    ref: no-import-path-modifications\nDoes that help?\n. You're right. That would be really annoying.\nI just created 'feature/defer-build' to try and fix this problem. It uses go get -d URL to defer building until later. That should stop the situation you described above. I've tested it a little and it seems to work on your code base... but then again, I'm not sure what to look for.\nWould you be willing to try out feature/defer-build and see if that fixes it?\n. Good. I'll merge that onto master for the next release.\n. Thanks. I can reproduce this locally. I've never tried mixing test package names like this, so maybe there's an issue with Glide's GOPATH resolution. I'll spend some time on it and let you know what I find.\n. The easy work-around would be to follow the convention set out in the \"testing\" package's docs, which is to put your _test.go files in the same package as the code they're testing:\nhttp://golang.org/pkg/testing/\nBut I did find the problem.\nWhen go test compiles tests for the package waddrmgr_test, it sees itself in the package waddrmgr_test. It resolves the import \"github.com/conformal/btcwallet/waddrmgr\" into \"$GOPATH/src/github.com/conformal/btcwallet/waddrmgr\". With Glide, this happens to be a different path than the \"waddrmgr_test\" source files (whose path resolves to \"./waddrmgr\"). Since the package paths don't match, go test doesn't build the waddrmgr package's test files. So internal_test.go is not built. This appears to be the consequence of using what I thought was a very clever symbolic linking trick. sigh\nI'm trying to figure out how we might fix this in Glide. It is sort of an edge case, but I'm betting it won't be the only time we see this issue, so I'll keep working on it.\n. I was taking another look at your repo and saw your oneliner.\nDo you mind if I start working on a glide command based on it?\nbash\n go list -f '{{join .Deps \"\\n\"}}' |  xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'\nIt'd be useful to have glide be able to generate package imports based on that.\n. This is resolved now that we don't munge GOPATH.\n. We've been trying to figure out a clever way around that situation. If you happen to think of one, let us know. Having to relegate that to a \"troubleshooting tip\" is not the solution we really wanted.\n. @JacekLach Hmmm... that's an idea I hadn't thought about.\nglide gopath prints out the value for GOPATH, which is probably all you'd really need. I wouldn't want to mess too much with people's env unless that was necessary. There's a tool called envdir that I think handles the shell generalization part. \nBut what @mattfarina is talking about is the experimental feature in Go 1.5 that automatically includes the subdir vendor/ in  a project's GOPATH. That'd mean Glide may not have to manage GOPATH at all. We have our fingers crossed that that works out.\n. So I've got two potential solutions to this:\n1. Resolve shell using exec.LookPath()\n2. Switch to using login instead of getting the shell from the environment.\nI decided to try the first option. It's in the branch feature/login. Would you mind trying it out and seeing if it works better for you? I'm doing some local testing, and it seems to be okay when I set SHELL=zsh.\nAlso, if you have thoughts about using login vs. the current shell, I'd be happy to hear them. \n. @roblillack Thanks! I'm marking this ticket as closed now.\n@mattfarina I merged feature/login into master. ,That has the last few changes I needed to make before 0.2.0. So feel free to do what you need on your branch and merge to master.\n. That seems like a good idea to me. I'll also put that on feature/login. Current testing looks good. If you'd like to test and get back to me, I'll merge it to master.\n. Merged to master.\n. Thanks!\n. The beginnings of this are now available in cmd/guess_deps.go\n. @dz0ny 's patch is now in master.\nTwo quick questions:\n- Should we call it glide guess, or is there a better name?\n- Should we do this automatically on glide create?\n. Is glide pin (undocumented, but in the current build) what you are thinking of with glide shrinkwrap?\nI think we could alter glide create to do what you suggest as glide init. Right now it just creates a basic YAML file. But it would be pretty easy to add flags to scan. Something like this, maybe?\n$ glide create --pkg=my/package/name --scan\n. I think we should refer to that typo as \"the ifttt effect.\" Or maybe \"the ifttt efffect.\"\nThanks!\n. Awesome. Thanks!\n. Fantastic!\n. @intabulas Thanks for getting this off the ground, and thanks @lamielle for getting a version through the Homebrew process. I really, really appreciate the work both of you did on this.\n. Fantastic! Merging now!\n. I hereby volunteer @mattfarina :-)\n. I'm in the middle of working on the YAML parser anyway, so I just modified it to run strings.TrimWhitespace() on important YAML values. Still working on writing a unit test, though.\n. Unit tests added, too.\n. I am working on implementing this, with YAML being:\nyaml\n- package: some/package\n  os:\n    - linux\n  arch:\n    - amd64\nLike the subpackage directive, we can shorten the above to:\nyaml\n- package: some/package\n  os: linux\n  arch: amd64\nIn either case, os and arch are whitelists. When they are present and non-empty, the package will only be fetched if it's runtime.GOOS is in the os list and its runtime.GOARCH is in arch.\n. I don't remember why I made Info yellow instead of green, etc. I think you're right, though. Your color scheme follows the principle of least surprise.\n. The reason for using HTTP was that it was the most likely to \"just work\". But I've gone ahead and changed it to HTTPS. Clearly it's the better option. (I've done the same for Mercurial repos, too.)\n. Marking this as closed.\n. Oooo!\n```\n$ glide about\nGlide is a tool for managing Go package dependencies and Go workspaces.\nName:\n    Aside from being catchy, \"glide\" is a contraction of \"Go Elide\". The idea is\n    to compress the tasks that normally take us lots of time into a just a few\n    seconds.\nTo file issues, obtain the source, or learn more visit:\n    https://github.com/Masterminds/glide\nGlide is licensed under the MIT License:\nCopyright (C) 2014, Matt Butcher and Matt Farina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n```\n. Should we drop version info in there, too?\n. The main difference is that install does extra steps that update does not. Specifically, it creates directories and symbolic links. I suppose we could try to rewrite them into one function. I'll have to look at the code and see if that's plausible.\nLike many (maybe most) package managers, Glide does not assume that you are making local changes to 3rd part packages. So it proceeds as if the local copy were always just a read-only clone of the parent. This seems to be consistent with go get -u.\nI'd be open to checking for local mods and failing, provided (a) it really does seem to be the best thing to do, and (b) a clear path to fixing that is obvious to the user. Maybe we could accomplish (b) with a --force flag or something.\nUpdate does definitely check the glide.yaml for new dependencies or changes to older ones.\nI'm curious to hear from others what they think about whether install and update feel redundant, and also how we should deal with local modifications.\nAs always, thanks for the input.\n. 1. Agreed -- and that should be a separate issue.\n2. This one we definitely need to figure out. I think we should consider that to be the primary purpose of this issue.\n3. This is a bug, and should be a separate issue.\n4. We should file a new issue for the --force flag\n5. I'd still like to hear multiple opinions about the value of having one command or two separate commands.\n6. Yes, you're TOTALLY right about this. I can't believe we haven't done it already. We need an issue for it. \n. This is definitely the better route to go for Glide, since @jarod 's case is clearly the more common use case for GOBIN tools. Merging.\n. To be more specific: -delete applies only to go up[date], right?\n. Agreed.\nOn Tuesday, June 16, 2015, Matt Farina notifications@github.com wrote:\n\n@technosophos https://github.com/technosophos Do you think this should\nbe a --delete flag to opt-in to deleting or a --preserve-unused to\nopt-out of deleting? I'm tempted to do the opt-out because I think deleting\non update is the better default.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/34#issuecomment-112433681.\n\n\nhttp://technosophos.com\nhttps://github.com/Masterminds\n. Great idea! I'd like to add this! Any objections, @mattfarina ?\nMight be cool to do something like a dirname $GOPATH/.. to show where GOPATH is set... but that might just make the prompt line too long.\n. Yeah, that looks like a bug.\nIf you remove /skiplist from the package URL, it should work fine. You can also add subpackage: ... if you want that package to be prebuilt into a .a file. \n. I can see the following as valid options:\nCheck _vendor Into Your VCS\nIn this case, your build env doesn't have to do any remote fetching.\nAdvatages:\n- No changes to Glide at all\nDisadvantages:\n- You basically have to fix the thing with repos checked into your repo, which will probably devolve into submodules or subtrees, and then nobody will like you.\nUse multiple glide.yaml files\nThe use case here is actually similar to what we had in mind when we first wrote glide pin. In that case, we wanted dev to always get the most recent version of packages, but then we wanted to be able to freeze the file for deployments.\nBasically, someone could post-process a Glide file (maybe with a plugin) and set up the import paths to use mirrors.\nAdvantages:\n- Meh\nDisadvantages:\n- Meh\nSupport environment variable interpolation in glide.yaml\nThe idea here is that glide.yaml files can contain environment variables.\nAdvantages:\n- Sounds elegant on paper\nDisadvantages:\n- Is icky in practice.\nSupport Local Packages\nThe idea here is that Glide allows you to set the VCS to something like local, which then looks somewhere on your filesystem for a package and creates a symbolic link into _vendor for that. I built a plugin to do this for GPM, and it actually worked better than I expected.\nAdvantages:\n- Conceptually simple\n- Solves some other problems (like sharing common repositories across multiple projects)\nDisadvantages:\n- Defers the problem of actually fetching those packages to something else. Of course, you could create special glide projects for production and dev that fetch the actual repos from their sources and then reference those.\n. I think we can mark this closed now, right @mattfarina ?\n. If the VCS provider goes down, and we can't get an update, will this stop builds? It looks like it will. And that's my only hesitation. Say I have one package on an unreliable Git server. I'd rather not have it fail just because that server went down. My CI system would hate that.\nOtherwise, I think I am good with @roblillack 's patch.\nI'm not sure this patch makes the state of _vendor any worse than it already is. So I wouldn't hesitate on that front. And I think that rather than using a \"two-pass\" system, I'd ultimately rather go to a rollback-on-fail if that's feasible. But that's way beyond the scope for this request.\n. I'm thinking we should give this patch a try if we go ahead with #45. Are you okay with that, @mattfarina ?\n. I am very interested in discovering what the root of this issue is. Can you post your $GOPATH?\n. Just a quick update: @mattfarina and I are both looking into this one. Please let us know if you find out anything else.\n. YES! YAY! Excellent patch! This fixes a major limitation of glide. I am so excited to see this!\n@mattfarina If you okay too, I will merge.\n. I'm definitely good with this patch. @mattfarina if you're okay with it, I'll merge.\n. It was intentional. I had done it so that you could use go get to fetch, but still tell it which VCS was being used. That was a weird edge case that probably nobody cares about, and your appraoch makes more sense. I think we should go with yours.\n. Yes, we've been following this development pretty closely, and I would very much like to integrate it.\nI guess we should build the nightlies and see how much of an impact this would have, but my reading of RSC's posts suggest that the integration should be pretty easy.\nI'm very excited for the possibility that Glide would be able to focus on version and dependency management, and let the GOPATH management problems fade into the distance.\n. That's a good idea. The glide import godeps command can parse a Godep file and generate a Glide.yaml, so we could probably go the other way as well. And the Godep format is pretty simple.\n. I'll be testing glide + godep workflows in the next few weeks. Let me find out for sure and get back to you.\n. I'm thinking this would be a good plugin.\n. No, we haven't implemented a plugin ourselves. I don't think it would be too hard to do, but it's a little off the beaten path for us, so we probably won't get to it in the very near future.\nI know Heroku wants to add Glide support: https://github.com/heroku/heroku-buildpack-go/issues/106, and there's currently a working for (linked from that ticket)\n. Have you tried glide guess for resolving dependencies?\n. Now that 0.5 is out, I'll do my best to answer. Up until recently, the approach that we've used is that if Project B has other dependencies, the top-level project needs to have them in its glide.yaml file.\nTo make it slightly easier, we add glide guess, which will attempt to figure out all of those dependencies for you, and emit glide.yaml data.\nIn the newest versions, we added glide get --import, which will attempt to import Godeps and GPM dependency files, too. But we're still working on an even better way to fetch deeply nested dependencies.\nIf you have an idea for how you think it ought to work (and I think you sorta hinted at it by calling these dependency types \"transitive\"), let us know. We have been encouraging a more explicit treatment of dependencies, and hadn't really focused on non-reproducible builds.\n. And we're now working on glide guess --get, which will do a deep analysis of the code, fetching transitive dependencies as it goes.\n. With the new feature/flatten branch, this will now automatically introspect code and pull down transitive dependencies. As soon as that is merged, we can mark this issue closed.\n. I believe this is fixed completely in Glide >= 0.9.0\n. I think that's a good idea. I would suggest that we support similar rules to gopkg.in, but with more precision:\nv1 matches v1, v1.x, v1.x.y\nv1.1 matches v1.1 and v1.1.y\nv1.1.1 matches v1.1.1\nAnd since one version of semver requires the v, while the other does not, we'd want to support the version without v, too.\n. This is an interesting idea.\nglide up does optionally read other files like Godeps/Godeps.json. We could allow them to optionally be checked out at the top level, though right now we check them out into vendor/ directories inside their respective projects (to avoid version conflicts). For sure, we should extend this to support manifest.json.\nBecause of things like SQL side-effect imports, we do still need to solve the problem where two dependencies clash. I was thinking of adding a directive that let you specify how to collapse dependencies. Something like:\nrequired: [never, once, VERSION]\nWhere never makes sure we never ever get the dependency (a necessity in cases where people hand-vendor and then check things in), once gets a dependency only once (storing in the top level), preferring the newest version, and VERSION would be a specific version number.\nFinally, we probably won't add git-specific merge logic, but I like the idea behind it. To this point, our approach has been to make it easy for users to add that last VCS-specific step.\n. I think we should leave it open, with the desired outcome to be:\n- glide can do glide import gb and import manifest files\n- glide get --import and glide up --import will automatically parse and read manifest files\n. Did we add the option to manually override the name? I know the code supports it, but I can't remember if we added a flag for that.\n. There is the glide -y FILENAME flag, which sets the name of the YAML file.\n. How about something like allowMultipleCopies with values yes, and no. For the never case, maybe we should handle that separately.\n. At this point, I'm pretty sold on the name flatten. It's not totally intuitive to newcomers, but I think it's close enough.\n. With #70 merged, I think we should close this.\n. Is this just a matter of calling NormalizeName() on cmd.Get's name? Or is this a problem with getRepoRootFromPackage()? (That name's a little Java-ish, isn't it?)\n. Sorry, I think I'm the one who came up with that name. I looked at the\nNormalizeName function, and I think it is reasonably correct.  I'm not sure\nwhat the rules are for vanity domains.\nOn Saturday, August 22, 2015, Matt Farina notifications@github.com wrote:\n\nThere's a bug in getRepoRootFromPackage() (and the name is java-ish isn't\nit... glad it's an internal function).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/56#issuecomment-133730029.\n\n\nhttp://technosophos.com\nhttps://github.com/Masterminds\n. I'm nervous about the potential for misuse/security/accidents with this feature. If it was a popularly requested feature, I'd be inclined to do it. But...\n. I'm closing this one, because it just doesn't feel in scope, and we haven't really had an requests for it.\n. I think this should be fixed by re-fetching the VCS package. I just pushed a fix.\n. Having trouble reproducing on master. Here's what I get with the same glide.yaml:\n\u21d2  glide pin\n[WARN] Could not get commit on code.google.com/p/cascadia: Cannot detect VCS[WARN] Could not get commit on bitbucket.org/kardianos/osext: exit status 255[WARN] Could not get commit on code.google.com/p/go.net: exit status 255package: main\nimport:\n  - package: golang.org/x/net\n    ref:     7654728e381988afd88e58cabfd6363a5ea91810\n  - package: github.com/gorilla/context\n    ref:     1c83b3eabd45b6d76072b66b746c20815fb2872d\n  - package: code.google.com/p/cascadia\n  - package: github.com/codegangsta/negroni\n    ref:     c7477ad8e330bef55bf1ebe300cf8aa67c492d1b\n  - package: github.com/PuerkitoBio/goquery\n    ref:     b4440419d81240f8451a505b2f806c853bc2befc\n  - package: github.com/gorilla/mux\n    ref:     ee1815431e497d3850809578c93ab6705f1a19f7\n  - package: github.com/boltdb/bolt\n    ref:     90fef389f98027ca55594edd7dbd6e7f3926fdad\n  - package: bitbucket.org/kardianos/osext\n  - package: github.com/GeertJohan/go.rice\n    ref:     ada95a01c963696fb73320ee662195af68be81ae\n  - package: github.com/daaku/go.zipexe\n    ref:     a5fe2436ffcb3236e175e5149162b41cd28bd27d\n  - package: code.google.com/p/go.net\nAnd I agree -- we need to fix those warnings.\n. Oh, I see... since subtree squashes the commits into the local repo's reflog, a vcs call would only see the last commit on the local repo. Any idea how to get the older repo commits on a subtree? If, for example, you know the git command, that might help. Also @mattfarina might know.\n. Glide does support \"plugins\", which actually are more like the git porcelain/plumbing model.\nThe idea is that a separate program called glide-subtree would be available as the command glide subtree. We haven't built any plugins since very early in Glide's history, and this seems like it might be the perfect candidate for one.\n. I'm also curious about whether or not this is a feature that the VCS library would be able to provide, @mattfarina \n. I agree with the intent behind @abourget's last comment. I feel like a truly good vendoring tool will be as easy to use as possible for the end user, and not even having to install Glide is about as easy as it could get for them. Subtrees are a good route to get there.\nKeeping in mind that this is not a thing we seem to be able to do with all 4 VCSes, I'm feeling like we should provide a generic (albeit sort of destructive) version as @mattfarina suggests. This would make it possible for maintainers to vendor packages into the current VCS, regardless of what the original VCS was.\nBut I think that there is the potential to add a git-specific plugin that maybe even allowed an extra YAML attribute like subtree-ref that would make it easy to track the upstream subtree against the locally checked out copy.\n. What's the value of the initial package: in the glide.yaml file?\n. Yes, basically. It uses the go/build library directly. The project gets its own name from the package: line on the current file (instead of looking at the parent directories). So if the package line is main, it believes its package is main, and would then see github.com/abourget/myproject as a separate project.\n. Actually, this is a vestige of the previous version of Glide, where the import path go list reported might not have been correct (because we were managing GOPATH at the time). I think it's time for me to take a look at this and see if we can do better now.\n. Now that i look at the code, I see that we did refactor it to do essentially what go list does. Would you mind giving us an example of a problematic glide.yaml? I'm trying to reproduce locally and not having any luck.\n. Can you post a redacted glide.yaml? Particularly, if ref is set to a particular commit, then Glide will update the repo, but stay checked out on commit ref.\nEdit: Oh, you mean it's not even pulling the code down?\n. @mattfarina is this because glide get sets the repo to the unresolved repository path? Should it set repo to the actual repository path?\n. Okay, so here's what I did:\n- Added support for multiple Gopaths\n- When I had to choose one particular path before doing something, I pick the first\n- When trying to resolve where something is, I scan paths until I find one that looks like a match.\n@Taik If you can, please try against master and see if this meets your needs. There are some cases where I'm really not sure what the right action is, so some input would help a lot.\n. Great! We're going to go ahead with today's release and include this fix. For now I'll close this issue. But please open a new one if you run into additional problems.\n. That doesn't sound right...\n$ brew info glide\nglide: stable 0.5.0 (bottled)\nSimplified Go project management, dependency management, and vendoring\nhttps://github.com/Masterminds/glide\nNot installed\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/glide.rb\n. This looks great! As I understand the patch, flattening will always favor the version that is declared in the top-level 'glide.yaml'. So if the top pins on version 1.1.1 and another dependency pins on 1.1.0, the top level will \"win\", right?\nDo you think we ought to allow setting a default Flatten behavior at the Config level, and then be able to override it in subsequent Dependency sections?\n. I think emitting a warning would be good if mismatched refs were found. @mattfarina may have some ideas on how the VCS code might tackle that in a more sophisticated way.\n. I think we should totally do strict comparison for now. But I think we will move to something more sophisticated in the future.\nFor example, if a top level says v1 and a dependency says v1.2.2, we might choose the dependency's version (in other words, specificity wins). But that we can definitely do later.\nWe've learned from experience that people prefer to explicitly specify when things should be deleted. Should we rely on the existing --delete flag?\nhttps://github.com/Masterminds/glide/blob/master/glide.go#L278\n. That is a good question. Let's start safe and go with --delete-flatten.\nI'm really excited about this feature. Thank you!\n. I am with @mattfarina on the idea that I'd rather merge some basic flattening support, collect some feedback from the community, and then see what the best behavior is when it comes to recursive behavior. We'll really need to think about the implications of recursive flattening. I agree with @hilyjiang that in some cases it seems like expected behavior, but I am worried that we may end up with some really subtle bugs creeping in when a top level package makes decisions about dependencies of dependencies (of dependencies....).\nI think we should leave the flag as --delete-flatten because the idea is that it indicates that files will be deleted when the flag is added. We can flatten without deleting.\n. I just finished a code review, and at this point I think we should merge it. Even if we decide to build something more sophisticated in the future, this is definitely the foundation we'd start with.\nI'll leave it to @mattfarina to give his sign-off and merge it.\n. That was my mistake. I had that messaging in there from the pre-0.5 release.\n. The exact line that is causing the problem is right here:\nhttps://github.com/Masterminds/glide/blob/master/cmd/util.go#L43\n. I'm gonna copy @interlock on this, since he's working on the flattening logic.\n. I feel like:\n- A --flatten flag is dangerous because it relies upon the developer to remember to consistently apply, so we probably shouldn't do it\n- A project-wide 'flatten' setting in glide.yaml is good for teams that have strong preferences, but...\n- by default, flattening should be off and...\n- package declarations in a glide.yaml should be able to override the project-wide flatten\nThat would let us do something like:\nyaml\npackage: main\nflatten: true\nimport:\n  - package: foo   # Dependencies here get flattened because they inherit default\n  - package: bar\n    flatten: false   # Does not get flattened\nI feel like that's about the best we could do in terms of trading off ease of use and functionality. That's the way you were already going, right @interlock ?\n. Should we close this one now that #70 is merged?\n. @mattfarina is correct. Our original intent was to flatten things that were declared in the top-level glide.yaml file. But we could do it differently.\n. Oh, yeah... I forgot about that case.\n. Some simple flattening should still be possible... many times projects will have the same version. What if we tried for a naive approach where if no dependency version is specified or if the versions are the same, we flattened? For any conflict, we could avoid flattening and warn the user?\n. I can test it on Deis, which has nearly 100 dependencies.\n. @janeczku If you have a moment or two for some experimentation, I've been looking into building more tooling around figuring out what dependencies are used. Today I committed glide tree and glide list as commands that inspect code, like glide guess.\n- Tree presents package imports organized as a tree.\n- List lists all of the packages that a project imports.\nIf you're up for giving them a test run, I'd really appreciate it.\n. I'm also chatting with @mattfarina about whether we ought to add the capability to glide guess that would cause it to automatically fetch (into vendor/) and packages that are not already present. Something like glide guess --get. Is that something that you'd find helpful? Any thoughts on that?\n. I'm good with this. I am sorta in favor of removing the conditional and adding buildContext to the context so that any command that needs it can access it. guess, tree, and list definitely need it. I think get will likely need it in the near future.\n. I was thinking about the utility function approach, too. It's slightly more consistent with what Go does, and what we've done elsewhere in our codebase. But the dependency injection style is the way we usually use Cookoo. In the present usage, though, I'm not sure we're gaining much by using DI.\nI think that @mattfarina is right -- we should refactor this as a utility function to be called on demand.\nEDIT: That said, I would LOVE to see this patch get wrapped up and merged soon. It's great, and I think we can get it into 0.6.\n. Huge thanks, @janeczku !\n. Yeah, you're right. Definitely related to #74 and #75. The Goroot flag on the imports of core packages should have been set to true, but with no $GOROOT, it doesn't get set correctly.\n. I believe that we used to do a git fetch --all and then do a git checkout to do this before. IIRC (and I'm working from memory here), that worked even on detached heads.\n. Yes, we should do a release for this.\n. I would say that no ref means \"checkout the latest\"\n. Hmm... I wonder if this is a special case. I don't think C is present in $GOROOT. From the Go docs:\nThe rand package imports \"C\", but you'll find there's no such package in the standard Go library. That's because C is a \"pseudo-package\", a special name interpreted by cgo as a reference to C's name space.\nSo I think I need to special-case this one in.\n. If you have a moment to test master, I'd appreciate it. I added special handling for C to glide guess, \nglide tree and glide list.\n. Oh, man... the glide tree and glide list issues were really stupid mistakes I made. I'll go fix those and then look at guess too.\n. @mattfarina since this error caused a panic, we should release 0.6.1 when this fix is confirmed.\n@gdm85 I tested on your project (thanks for pointing me to that), and it seems to be working as expected. C is ignored by tree, list, and guess now.\n. Can someone propose how this would look in the glide.yaml file?\n. Yeah, that makes sense to me. I guess we could do them as a YAML list:\ntags:\n  - unsafe\n  - amd64\nAnd that would make parsing easy.\n. I am thinking about a solution, and I will propose it tomorrow morning.\nIt'll involve a change to the lock format, so I need to think through it...\nBut I think it will solve the main problems.\nOn Sun, Mar 13, 2016, 1:08 PM \u65e0\u95fb notifications@github.com wrote:\n\nAny updates? Glide feels broken without this support, can't vendor\ndependencies with build tags.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/83#issuecomment-196022066.\n. That is a little beyond my original intent with the command... but I kind of like the idea. Originally, I anticipated use cases that might do things with .a or .so files or other non-source things. But in practice, I think we all just use it for source files.\n\nAre we just interested in directories with *.go files in them?\n. @itsjamie If you would like to give that a try, it should work as you describe.\n. Ugh... I forgot to add back in the elipses.\nOn Sun, Sep 20, 2015 at 1:56 PM, Jamie Stackhouse notifications@github.com\nwrote:\n\nglide nv\ncontrollers interfaces middleware models schedule server services .\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/84#issuecomment-141827445.\n\n\nhttp://technosophos.com\nhttps://github.com/Masterminds\n. Should be fixed now. Directories come back with ./DIRNAME/...\nI don't have any special casing for the testdata directory. I wonder if we need that.\n. Certain Go tools (notably build) ignore the testdata directory. I don't know all of the rules about the conditions under which it is ignored. In particular, I don't know if go test is supposed to use files in that folder.\nI'll poke around and fix as necessary.\n. I've been playing with Elixir this weekend, and I like the fact that their tool has support for dev, test, and prod \"environments\".\nI wonder if we could borrow a fragment of that, yet basically keep the same idea as is presented here.\nFor example, we could say that by default, Glide is in dev mode, but provide a global flag for setting modes. glide -m prod would explicitly be prod mode, while glide -m dev would explicitly be dev mode.\nEach mode would by default first look for glide-MODE.yaml (or some similar pattern TBD), and then fall back to glide.yaml.\nThen glide pin -m prod would generate glide-prod.yaml. While glide up -m prod would update based on the glide-prod.yaml file (if it exists).\nIf we were to go this way, what really are the modes? Ruby and Elixir break down into prod, dev, and test. Those seem reasonable to me... though I'm not really sure what the use case for test would be.\n. I actually lost sleep over this last night. I find the idea to be really compelling, but I'm worried that if we don't do it just right it will become a huge headache.\nThat said, I like the idea of tying pinned yaml files to VCS tags (e.g. having a v1.2.3.yaml file for v1.2.3), but that might be excessive. \nMaybe we could enumerate some use cases and that would give us a little more clarity on how we should build this (and what the problems are to solve).\nFor me, CI/CD tooling is a really big deal here, since that was my original target for the pin logic. So I'll start with a few use cases:\n- As a CI/CD dev, I want to capture an exact specification for dependencies so that I can reproduce builds\n- As a CI/CD dev, I want to not have to guess which glide file is the right one for a build\n- As a CI/CD dev, I do not want to have to worry about recursive dependency resolution; that should be handled by someone more familiar with the code\n. That is a case I think is probably common. I'll have to think about it.\nI think you can omit the >, since IIRC the pin command takes a filename, and defaults to STDOUT if no filename is given.\n. The more I think about the workflow above, the more I like it. It's a brilliant way of keeping a dev environment up to date, but still unsurprising -- and still keeping the CI/CD workflow repeatable. Once we have semver support finished, it'll be even better.\n. @mattfarina any objections?\n. A new idea has been floating around, and might solve this problem a different way. I'd really like @itsjamie 's input.\nWhat if we change the workflow to allow two commands: glide pin and glide unpin, and we changed the YAML format to add a pin: field\nglide pin would add the pin: COMMIT_ID to every dependency. glide unpin would remove the pin field.\nSo here's how it would work:\nCommands that update and install (glide up, for example) would pull the pin: version if present, or else go back to the ref: version. That would mean we could have things like:\npackage: foo\nref: v1.2    # SEMVER constraint\npin: afe45  # Exact version\nDevelopers would largely work in unpinned mode when updating dependencies, but then everything could be pinned at will. Since the same file is checked into VCS, VCS would have an exact record of what was pinned and when, but we wouldn't need extra files to do that. This would give both repeatable build artifacts and an easy path to updating, but using weaker references like branches and semver constraints.\nDoes that make sense? Think we could make that work?\n/cc @kalbasit\n. I agree with @itsjamie that we should allow per-package pin/unpin/repin. I have mixed feelings about using ./... to mean \"all packages\" because it implies that we are working with path globs, which we're not. Or is there a situation in which we would?\n. We're currently discussing how pinning, unpinning, and repinning should work. The idea is that instead of needing multiple files, we could store pin information in addition to ref information. So consider something like this:\nyaml\npackage: github.com/technosophos/pika\nimport:\n  - package: github.com/foo/bar\n    ref: feature/whatever\nRight now that means the package foo/bar is on a particular branch. If we ran glide pin, it would generate this:\nyaml\npackage: github.com/technosophos/pika\nimport:\n  - package: github.com/foo/bar\n    ref: 17c2da2566839baf3631d71d62b8d689e31ad712\nNow you have two choices:\n- replace glide.yaml with this pinned version, in which case there is \"no going back\" to the old one, or\n- start maintaining multiple files, like maybe a glide-pinned.yaml\nWhat we've started talking about is tracking pin state inside of the glide.yaml file, but separately from the ref field. So running glide pin would change glide.yaml to this:\nyaml\npackage: github.com/technosophos/pika\nimport:\n  - package: github.com/foo/bar\n    ref: feature/whatever\n    pin: 17c2da2566839baf3631d71d62b8d689e31ad712\nDuring update operations (install, up, etc.) glide would use pin fields as the definitive source. And now we have the opportunity to add some new features:\n- glide unpin removes the pin field(s)\n- glide repin removes the pin, updates to the latest, and then adds the pin back (glide unpin && glide up && glide pin)\nThe theory is that this workflow would improve a couple of different developer workflows:\n- people like me, who prefer to only pin for releases, can easily do that by pinning right before a release, and unpinning afterward.\n- others who prefer to keep dependencies static most of the time can easily leave things pinned, but at the start of a new development cycle (or whatever), they can quickly repin\nSo it's different in approach from npm shrinkwrap, but the idea is to make it easy to flip back and forth between explicit commit-based checkouts and more open \"stay on head\" workflows.\nThat's the idea, anyway.\n. This would be a breaking change to glide pin, since it would render glide pin FILENAME irrelevant. Further, I'd like to support glide pin github.com/foo/bar to allow selective pin (same with unpin and repin). That would make this command work the same as glide get and glide up.\nAny objections? And advice on how we can do this without causing people major headaches?\n. I'm good with this change. I think we can merge it.\n. lol... I just realized it was already merged. Thank you @gcmt !\n. I should actually see if there is any reason why we require glide init to be called first. It seems to me that glide guess would make a logical first command to run.\n. I hadn't thought of displaying the output in terms of what's in GOPATH vs. what's in vendor/. That's a great idea. It would actually be really helpful. Let's mark this as a feature.\nFWIW, present means its installed. If it's marked \"no\", then there is an unresolved dependency somewhere in your tree.\n. This is what the new output looks like:\n$ glide list\ngithub.com/Masterminds/cookoo (Location: vendored)\ngithub.com/Masterminds/cookoo/io (Location: vendored)\ngithub.com/Masterminds/glide/cmd (Location: gopath)\ngithub.com/Masterminds/glide/gb (Location: gopath)\ngithub.com/Masterminds/vcs (Location: vendored)\ngithub.com/codegangsta/cli (Location: gopath)\ngithub.com/kylelemons/go-gypsy/yaml (Location: missing)\n. I think @tve is right about expectations. Now that we are encouraging users to use glide get to get their dependencies (instead of downloading them by hand and then adding to glide.yaml), we should also allow single-package updates with glide up.\n. Can we open a separate ticket for -dryrun?\n. I've added support for the ticketed feature. You can now do: glide update foo\nYou can also do glide update foo bar baz and have all three updated. This brings glide up into line with the new glide get feature.\nI'm opening a new ticket for -dryrun. Did I miss anything?\n. exit status 128 is coming from Git.\n. @mattfarina This might be the sort of thing where attaching the output of the VCS command to the error would be helpful. I would guess that the data present in CombinedOutput might give a better indication of what went wrong than just the error returned -- at least in the case of Git.\n. I just now had a network failure cause an exit status 128 while fetching github.com/codegangsta/cli.\n. I traced this back to here: https://github.com/Masterminds/vcs/blob/master/git.go#L66\n. I submitted an upstream pull request on VCS. I figured @mattfarina should probably double-check that before merging.\n. That makes sense to me.\nThe one thing we'd be giving up is the (straightforward) ability to create flags specific to a package (like the --version= flag that has been discussed). But that's probably something we could accomplish in another way.\n. @mattfarina  I left the cmd.Get function there, even though I believe it is now unused. It functions fine. Is there any reason to keep it, though? Are we treating the public API as frozen even though we're still pre-1.0?\n@hkjn Let me know how this functionality feels to you.\n. I think I'd feel better just removing it, then, since otherwise we'll end up maintaining two very similar functions.\n. Excellent! Thanks.\n. Yes, this looks right. @mattfarina any objection to changing the command name? \n. The main design of glide get was to mirror go get quite closely, but put the downloaded packages into vendor, and track it in glide.yaml. Pinning is an additional step that isn't really close to the default Go way of doing things (not that that's right -- just that it's expected).\nThat said, I can understand why many developers prefer to pin their dependencies. Some even want to always keep them pinned. To facilitate that, I'd be okay with a --version or --pin, -p flag. I would not be comfortable with moving the default glide get behavior further from go get, though.\nI think @albrow might have given us a suitable workaround for our previous --version problem. If --pin is specified, we could simply pin all of the specified dependencies.\nSo assume this:\n$ go get -p github.com/foo/bar bitbucket.org/sticks/stones\nThe behavior would be to get both dependencies and then immediately ad pin entries for them. That would facilitate the strong pinning workflow that @albrow uses, while still staying close to go get and also still allowing multiple package gets.\nThoughts?\n. What is \"latest released version\" in this context? Last tag?\n. I think that at this point we're going to follow this suggestion of pinning by default. @albrow is right that that's the best default behavior. I think we should defer till 0.8 to make sure we do this right. (0.7 will be out in the next few days)\n. Yeah, can you file two separate issues for those? We need to fix both of them.\n. I have fixed the behavior for glide get and glide up foo.\nThis turned out to play nicely with several other features we're working on! Hopefully, these things all settled in correctly.\nOnce feature/semver gets merged, that will solve the remaining checkout issue and we should be able to close this.\n. My initial intent when I added devImports was for test and build dependencies.\n. Is there a precedent for writing non-error information to stderr? If this is the way it should be done, it should be a nice easy change for us to make. Just msg.go and msg_windows.go need to be changed.\n. That's good enough for me. Fixed. This actually makes several things much easier.\nIt's on the feature/flatten branch right now, but will merge into Master hopefully this week.\n. On the new feature/flatten branch, all import commands accept -f outfile.yaml. This matches the design for glide up -f modified.yaml.\nAs soon as this is merged, we can mark this resolved.\n. This has been merged. Please let me know if it's not working as expected.\n. Other changes coming with this:\n- I am deprecating the --import flag. This will now be the default.\n- I am deprecating the --delete-flatten flag, since it doesn't do anything in this context.\nI am not sure whether we need to set up an option to allow only shallow loops through the repo (e.g. a --no-recursive option). If we want that, I can add it.\n. Now that it's merged, I think we can call it closed. I'm sure we'll have related bugs.\n. FWIW, I toyed around with a few Dockerfiles. Here they are so you can take a look: https://github.com/technosophos/goglide I doubt that they'll meet your current requirements, but if you have any improvements, I'd love to hear. I was playing with the ONBUILD directives so that an ideal Dockerfile might look like \nFROM onglide\nCOPY . /app\n(Or something like that.)\nOkay... to you're actual point...\nI am for the idea of distributing as a tgz file instead. We just need to modify this build target, I think: https://github.com/Masterminds/glide/blob/master/Makefile#L35\nWhat's your opinion, @mattfarina? \n. The branch feature/flatten is our revised way of doing this. It moves all dependencies to the top vendor directory (there are no more nested vendor directories). I think that accomplishes what you are asking for.\n. feature/flatten has been merged. Please re-open this if you feel like there's still something we should do here.\n. Can you give the particular error? We've been chatting about this for a while. Since Glide keeps the repos as they are, if you try to check in the vendor folder, Git will treat this as a submodule (is that right, @mattfarina ?), which gets weird. We've talked about a few solutions, but nothing has emerged as particularly easy for users. So if you have some ideas, we'd be happy to hear.\nWe're re-working pinning to make that easier to do, and the big commit that happened today switched from nested vendor folders to a flatter architecture (because nesting causes some bad behaviors). The 0.7 version will be a pretty big change.\n. @albrow keep us posted, please. I, too, have been frustrated that it seems like go get becomes unusable for glide projects.\nI'm pondering what it would take to build a remote service along the lines of gopkg.in that could do this interim step of pulling a set of glide dependencies and then making them go get-able. I was recently told that Bundler and npm both do some server-side magic to allow their respective platforms to more quickly perform dependency resolution, and I think that could possibly be something we looked into.\nWhat I'm imagining would be some service that could answer a go get ... request, and in the background check out a project, run a glide install, and then return the combined results to the requesting client.\n. Here are the new changes that are making an impact:\n- Glide is now recursive by default (probably good)\n- Glide flattens dependencies to the top level directory (definitely good)\n- Glide now inspects all source code and tries to pull in anything it doesn't have (probably the source of slowness).\nLet me disable just that last part and see if that makes a difference.\n. Here are my results:\nGlide with source code inspection:\ntime glide -y random.yaml up\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/codegangsta/negroni.\n[INFO] Fetching updates for github.com/gorilla/mux.\n[INFO] Fetching updates for github.com/boltdb/bolt.\n...\nglide -y random.yaml up  2.57s user 1.64s system 6% cpu 1:04.00 total\nResetting the environment and disabling scanning, we get:\ntime glide -y random.yaml up\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/gorilla/context.\n[INFO] Fetching updates for github.com/PuerkitoBio/goquery.\n[INFO] Fetching updates for github.com/GeertJohan/go.rice.\n...\n[INFO] Project relies on 11 dependencies.\nglide -y random.yaml up  1.90s user 1.07s system 10% cpu 28.117 total\nThat's a pretty substantial difference, especially for a small project like this. Note, however, that the first one located three packages that were not explicitly declared by Godeps, GPM, gb, or Glide.\nI started to test on Kubernetes, but it takes a really long time.\nIf you don't mind testing, @akutz, I'd like to hear whether disabling the source code scanning helped yours, too. I'm checking this into master right now.\n. @akutz I added a feature you might find useful. If you do a glide up -f myfile.yaml it will do an update and then generate a glide.yaml with all of the discovered dependencies listed. It's like doing a guess followed by a get, except the logic is better because it is aware of Godep, GPM, and gb files and will pin accordingly.\n'Course it's probably too late for your present use case... but hopefully it will come in handy in the future.\n. @akutz last night I started working on #85 , which will change the way pinning works -- hopefully for the better. If you feel like weighing in on the design, you can check that thread and scroll down to the really big post about 3/4 of the way through. (I know there must be some way to link directly to a comment, but I can't figure it out).\nI think I totally miscalculated how popular pin would be, and @mattfarina and I are trying to make it a better experience for people who rely on it.\nFinally, as far as this issue goes, I'm going to add a flag (--scan-source or something) to enable source code scanning, and then re-commit. I'll consider that to be the last step of this ticket.\nThanks, BTW, for running on master. ;-) Would have been bad to go to production with this before discovering how poorly it performs.\n. Nice! Wow... that was a lot of work. Looks good to me.\n. I don't have any strong preference, but I don't like making changes with no actual reason other than stylistic preference.\nEssentially there are two acceptable variants of the same thing. Portability is cited as a reason, but I don't see what makes $() more portable than ${} when both are interpreted by make. What is the specific reason for merging this vs. keeping the current?\n. LOL... I was just too eager. :-)\n. Ah, that makes sense. We'll switch our Travis to build from master.\n. I read through this and it all looks like what I was envisioning when you described it to me. I think we should definitely merge this into 0.7.\n. By default, Glide installs whatever is in the glide.yaml file, and does not inspect packages for undeclared dependencies. We're in the process of changing that default behavior. In the meantime, glide guess will figure out the dependencies and give you a better glide.yaml file.\nIn the next release, 0.8, we're going to try to have the default behavior do more introspection. We had it in 0.7, but it was really slow, so we commented it out. Here's the code, if you'd like to see:\nhttps://github.com/Masterminds/glide/blob/master/cmd/flatten.go#L242\n. I'm not sure I understand the request. Where in particular where you looking for us to support something different?\nIf I recall correctly, the -y flag will take any extension and still attempt to parse it as YAML.\nThe -f flag lets you set whatever filename you want, and will write to it regardless of the extension.\nThe default filename is Glide.yaml. I'm not sure it's a good idea to have more than one default filename, which is essentially what we'd get if we allowed Glide.yaml and Glide.yml. That would lead to unpredictable results if both a Glide.yaml and a Glide.yml file were present. But it's certainly possible today to do glide -y Glide.yml up.\n(At one point, were were talking about naming the default file Glidefile. We added .yaml simply so that editors could provide syntax and highlighting.)\nThanks!\n. In my view, we're not talking about supporting .yml as a general extension. We do that already. You can use it with -y and -f flags, etc. All we're really talking about in this issue is a very simple question:\n- Is there a good reason to support TWO default filenames (Glide.yaml and Glide.yml) instead of one?\nThere are three big issues surrounding the proposal to support two default names: \n1. Two is definitely an increase in complexity in both finding and generating files. It's not a horrible increase in complexity, though. \n2. It also makes for a less-clear user experience (\"What if we have both?\"). But again, not horrible.\n3. Finally, is it common to see programs like this that have multiple default files? I'm not aware that Bundler, Composer, Gems, Berkshelf, Mix, and other common ones do this. Am I wrong about that?\nWe need to table the JSON vs. YAML topic on this issue @mattfarina. It's going to confuse things. Though I suppose that if we're claiming that it's too confusing to have two extensions for the same file, it's an obvious leap that it's too confusing to have two entirely different formats.\n. Wait... you're getting off topic again, @h2non. We do support .yml. The only relevant question is whether we support ONE default filename (Glide.yaml) or TWO default filenames (Glide.yaml and Glide.yml). You can already use Glide.yml as a file name using switches like -f and -y.\nAt this point, I'd welcome any PRs that support both filenames.\n. This looks correct to me. I believe you can safely run make bootstrap build... but I think I actually prefer that as two steps in the instructions.\n. Yeah, glide list is very new, and uses an improved algorithm for determining dependencies. But it's still slow (and apparently can get caught in an infinite loop #136 ). So I am trying to improve its performance and then roll the new method back into guess.\n. This appears to be related to caching. @mattfarina is there a way to disable that?\n. So doing an export HOME=. glide up would be a quick work-around?\nOn Sun, Nov 8, 2015 at 8:24 AM, Matt Farina notifications@github.com\nwrote:\n\nThe issue is it assumes there's always a home path. This happens when the\nos package can't detect the home directory or \"\" was passed in as the\nhome directory.\nIn the short term you could set the environment variable GLIDE_HOME to\nthe users home directory.\nI'll release a fix in the next few days to gracefully handle no home\ndirectory.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/135#issuecomment-154833468.\n\n\nhttp://technosophos.com\nhttps://github.com/Masterminds\n. Thanks. I'll take a look at that. This is with 0.7.0, right?\n. To speed up dev on this, I did a quick ack of the codebase for references to glide.yaml.\n```\n$ ack 'glide.yaml' ./cmd/*.go\ncmd/flatten.go\n176:    gp := path.Join(dir, \"glide.yaml\")\n193:    Info(\"Found glide.yaml in %s\", gp)\ncmd/get_imports.go\n67:         Warn(\"Package %q is already in glide.yaml. Skipping\", root)\ncmd/init_glide.go\n33:// Among other things, it creates a default glide.yaml.\n36://   - filename (string): The name of the glide YAML file. Default is glide.yaml.\n39: fname := p.Get(\"filename\", \"glide.yaml\").(string)\ncmd/link_package.go\n29:     return nil, fmt.Errorf(\"glide.yaml is missing 'package:'\")\ncmd/util.go\n37:// Most importantly, it fails if glide.yaml is not present in the current\n40: fname := p.Get(\"filename\", \"glide.yaml\").(string)\ncmd/vendor_path.go\n14: filename := c.Get(\"yaml\", \"glide.yaml\").(string)\n20: // Find the directory that contains glide.yaml\ncmd/vendor_path_test.go\n11: filename := \"glide.yaml\"\ncmd/yaml.go\n14:// ParseYaml parses the glide.yaml format and returns a Configuration object.\n22: fname := p.Get(\"filename\", \"glide.yaml\").(string)\n102:            Warn(\"Package %s is already in glide.yaml. Skipping.\\n\", dep.Name)\n```\n. Here's an example I just saw:\n$ cat glide.yaml\nparent: null\npackage: github.com/deis/helm\nimport:\n- package: github.com/codegangsta/cli\n  version: f445c894402839580d30de47551cedc152dad814\n- package: github.com/deis/pkg\n  subpackages:\n  - /prettyprint\n- package: github.com/Masterminds/vcs\n- package: github.com/Masterminds/semver\n- package: speter.net/go/exp/math/dec/inf\n- package: golang.org/x/crypto\n- package: github.com/aokoli/goutils\n- package: github.com/pborman/uuid\n- package: github.com/google/go-querystring\n- package: github.com/google/go-github\n$  glide get gopkg.in/yaml.v2\n[INFO] Preparing to install 1 package.\n[INFO] Package gopkg.in/yaml.v2 manages its own dependencies\n[INFO] Setting version for github.com/codegangsta/cli to f445c894402839580d30de47551cedc152dad814.\n[INFO] Project relies on 11 dependencies.\n$  cat glide.yaml\npackage: github.com/deis/helm\nimport:\n- package: github.com/Masterminds/vcs\n- package: speter.net/go/exp/math/dec/inf\n- package: golang.org/x/crypto\n- package: github.com/pborman/uuid\n- package: gopkg.in/yaml.v2\n- package: github.com/codegangsta/cli\n  version: f445c894402839580d30de47551cedc152dad814\n- package: github.com/deis/pkg\n  subpackages:\n  - /prettyprint\n- package: github.com/Masterminds/semver\n- package: github.com/aokoli/goutils\n- package: github.com/google/go-querystring\n- package: github.com/google/go-github\n$ glide --version\nglide version 0.7.1\n. That looks like a corrupted Git checkout (Git failed on something before it managed to set the writable bit on the mode). If you blow away vendor and try again, do you get the same problem?\n. Actually, you should be able to just remove vendor/github.com/Masterminds/glide and then try again\n. I assume that whatever you did a glide get on had a dependency on that package?\n. We have temporarily disabled the automatic recursive dependency resolution on glide get and glide up in Glide 0.7 while we try to figure out how to speed it up. It was taking way too long.\nIn the meantime, you can use glide guess or glide list to do the dependency resolution for you. glide guess generates a glide.yaml file that you can use. glide list will generate a list of dependencies.\nWe're hoping to have the automatic dependency resolution enabled again on 0.8.\n. What's the use case for --aggressive? I don't think I've ever seen a package manager that behaved that way.\n. This looks pretty straightforward to me. I don't understand why we'd need to loop over subpackages separately, though.\n. How many dependencies? I am actively working on that code to try to speed it up. Anything you can provide to help me understand where it's slow would be great.\nIf we can't get it significantly faster, we will probably pull it back out before the 0.8 release.\n. Thank you. I did leave the debug logging on when I shouldn't have. @mattfarina found some of the leaks, so I'm going to rework the logic on a branch and then re-test.\nThank you very much.\n. Here's the diagram for how we could do this:\n\nThe source for the diagram (generated with PlantUML) is here:\nhttps://gist.github.com/technosophos/7c5139be3a068145a262\n. I'm still interested in solving this problem. @mattfarina and I have been having some conversations about changes we need to make to Glide in order to systematically support this kind of requirement. Having Glide dogfood the approach is desirable.\n. I think I'd be okay with testing this with --strip-vcs and a committed vendor/ directory. With Go 1.6, that should work just fine.\n. Remove the version field and run a glide up. Does that fix it?\nAs you have things configured above, you are \"pinned\" to a particular commit. glide up respects your version pinning and will not advance you to a newer version.\nWe're making a big change to this, though.\nIn the past, we've recommended people use the glide pin command to manage this stuff, but in Glide 0.8 (coming hopefully later this week) we will change things. We're moving to the model where Glide generates a lock file. That file will lock your dependencies until you run glide update, then it will update them. Basically, I think that's the workflow you're already after.\nSo in the future (Glide 0.8 and on), you will use version to specify fuzzy version constraints (e.g. >2.3 or ~1.4), and the exact version pinning will be tracked in the glide.lock file.\nSorry for the confusion on that. We're working on making that part of the experience better! And if you have any feedback on how you'd expect things to work, we're all ears.\n. You are right in assuming that. We just haven't gotten to implementing it yet.\nMy initial plan was to allow a --dev or --with-dev flag that would install dev imports, too. But we decided to hold off implementing it until other parts of the system were more stable. (Primarily the lock file logic that we're finally getting into version 0.8)\n. I've done a pretty thorough test of this on pipeviz, Deis Helm, Deis Etcd, and Glide itself.\n. Is it as simple as adding an ignore: list to the glide.yaml file?\nThe logic would have to go something like this:\n- A global ignore list is created\n- During update, any package that is an exact match or a subpackage of an ignored item is skipped\nI don't think install would have to know anything about ignored packages.\n. I think printing a warning in this case is probably sufficient. Does that sound about right, @adamreese? \n. Good idea. Prior to Go 1.5, we managed GOPATH directly.\n. opt-out is my preference. Since not doing this has a (non-edge-case) likelihood of causing errors, I think we should continue doing it by default. When the user disables, it would be doing so with the awareness that this may cause errors.\n. Also, the values of $GOROOT and $GOPATH would help. I could see how this would happen if $GOPATH happened to point to core packages. The scanning for whether or not a package is core relies pretty heavily on what Go thinks its environment is.\n. This is an error where the runtime is not correctly locating the GOROOT. Something about the Homebrew binary or build must be causing this. We had a similar problem a while back with a Homebrew build that favored the built-in GOROOT location instead of the one specified on $GOROOT. Do you remember that one @mattfarina ?\n. These directories are supposed to be prefixed with _ (e.g. _examples). But I know you can't always get repo owners to change that. The best solution is to use the ignore property.\n@mattfarina I'm not sure what you mean.\n. The answer to the original question is this. We have tracked the list of subpackages for the following reasons:\n- It's easy to get during a scan, but much harder to track manually\n- glide rebuild uses it to build .a files. Prior to 1.4/1.5, rebuild was very useful\n- We figured that at some point in the future we could use this information to make optimizations\n. Just to make sure... the place where the go build command is being run is inside of $GOPATH, right?\n. I am thinking that probably what we will do is add a --dev flag to the relevant commands, and that will read the devImports section of a Glide file as well as the regular imports section.\nI'm wondering if we should have a separate lock file for dev dependencies.\n. Is there a reason why we have the repo in there? I think we can safely just remove it, right?\n. I'd be curious to see what the glide.lock file looks like if it's generating the output above. Something doesn't look quite right. Working with Kubernetes, with over 200 dependencies, I still see glide install times of between 1 and 2 minutes on Travis.\nFWIW, some of the \"Scanning...\" lines that appear to be duplicates are actually not re-scanning. There's a cache check that occurs after that line, and if the scan is in the cache, it's skipped.\n. For comparison, this is what the output of glide install ought to look like on a Travis-like system. This is for https://github.com/pipeviz/pipeviz:\n\u21d2  time glide install\n[INFO] Fetching updates for github.com/armon/consul-api.\n[INFO] Fetching updates for github.com/codegangsta/inject.\n[INFO] Fetching updates for github.com/bugsnag/panicwrap.\n[INFO] Fetching updates for github.com/bradfitz/gomemcache.\n[INFO] Fetching updates for github.com/coreos/go-etcd.\n[INFO] Fetching updates for github.com/cpuguy83/go-md2man.\n[INFO] Fetching updates for github.com/garyburd/redigo.\n[INFO] Fetching updates for github.com/getsentry/raven-go.\n[INFO] Fetching updates for github.com/go-martini/martini.\n[INFO] Fetching updates for github.com/goji/param.\n[INFO] Fetching updates for github.com/golang/protobuf.\n[INFO] Fetching updates for github.com/gorilla/websocket.\n[INFO] Fetching updates for github.com/inconshreveable/mousetrap.\n[INFO] Fetching updates for github.com/jarcoal/httpmock.\n[INFO] Fetching updates for github.com/kardianos/osext.\n[INFO] Fetching updates for github.com/agtorre/gocolorize.\n[INFO] Fetching updates for github.com/boltdb/bolt.\n[INFO] Fetching updates for github.com/bugsnag/bugsnag-go.\n[INFO] Fetching updates for github.com/bugsnag/osext.\n[INFO] Fetching updates for github.com/BurntSushi/toml.\n[INFO] Fetching updates for github.com/kr/pretty.\n[INFO] Fetching updates for github.com/kr/pty.\n[INFO] Fetching updates for github.com/kr/text.\n[INFO] Fetching updates for github.com/magiconair/properties.\n[INFO] Fetching updates for github.com/mitchellh/mapstructure.\n[INFO] Fetching updates for github.com/mndrix/ps.\n[INFO] Fetching updates for github.com/philhofer/fwd.\n[INFO] Fetching updates for github.com/revel/revel.\n[INFO] Fetching updates for github.com/robfig/config.\n[INFO] Fetching updates for github.com/robfig/go-cache.\n[INFO] Fetching updates for github.com/robfig/pathtree.\n[INFO] Fetching updates for github.com/russross/blackfriday.\n[INFO] Fetching updates for github.com/shurcooL/sanitized_anchor_name.\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n[INFO] Fetching updates for github.com/spf13/cast.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/spf13/jwalterweatherman.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for github.com/stretchr/objx.\n[INFO] Fetching updates for github.com/stretchr/testify.\n[INFO] Fetching updates for github.com/tinylib/msgp.\n[INFO] Fetching updates for github.com/tobi/airbrake-go.\n[INFO] Fetching updates for github.com/ttacon/chalk.\n[INFO] Fetching updates for github.com/ugorji/go.\n[INFO] Fetching updates for github.com/unrolled/secure.\n[INFO] Fetching updates for github.com/xeipuuv/gojsonpointer.\n[INFO] Fetching updates for github.com/xeipuuv/gojsonreference.\n[INFO] Fetching updates for github.com/xeipuuv/gojsonschema.\n[INFO] Fetching updates for github.com/xordataexchange/crypt.\n[INFO] Fetching updates for github.com/zenazn/goji.\n[INFO] Fetching updates for golang.org/x/crypto.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for golang.org/x/text.\n[INFO] Fetching updates for golang.org/x/tools.\n[INFO] Fetching updates for google.golang.org/appengine.\n[INFO] Fetching updates for gopkg.in/fsnotify.v1.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Setting version for github.com/agtorre/gocolorize to f42b554bf7f006936130c9bb4f971afd2d87f671.\n[INFO] Setting version for github.com/coreos/go-etcd to 003851be7bb0694fe3cc457a49529a19388ee7cf.\n[INFO] Setting version for github.com/gorilla/websocket to ecff5aabe41f13b4cdf897e3c0c9bbccbe552a29.\n[INFO] Setting version for github.com/codegangsta/inject to 33e0aa1cb7c019ccc3fbe049a8262a6403d30504.\n[INFO] Setting version for github.com/cpuguy83/go-md2man to 71acacd42f85e5e82f70a55327789582a5200a90.\n[INFO] Setting version for github.com/goji/param to da86c81e3e3c23b1948bc7a003d381250a032aa7.\n[INFO] Setting version for github.com/jarcoal/httpmock to 145b10d659265440f062c31ea15326166bae56ee.\n[INFO] Setting version for github.com/golang/protobuf to 68415e7123da32b07eab49c96d2c4d6158360e9b.\n[INFO] Setting version for github.com/garyburd/redigo to 6ece6e0a09f28cc399b21550cbf37ab39ba63cce.\n[INFO] Setting version for github.com/inconshreveable/mousetrap to 76626ae9c91c4f2a10f34cad8ce83ea42c93bb75.\n[INFO] Setting version for github.com/kardianos/osext to 8fef92e41e22a70e700a96b29f066cda30ea24ef.\n[INFO] Setting version for github.com/kr/pretty to e6ac2fc51e89a3249e82157fa0bb7a18ef9dd5bb.\n[INFO] Setting version for github.com/bradfitz/gomemcache to 72a68649ba712ee7c4b5b4a943a626bcd7d90eb8.\n[INFO] Setting version for github.com/bugsnag/panicwrap to e5f9854865b9778a45169fc249e99e338d4d6f27.\n[INFO] Setting version for github.com/getsentry/raven-go to 3966f3ab8333308d76b6cc83a29776a266bbdd92.\n[INFO] Setting version for github.com/bugsnag/bugsnag-go to 02e952891c52fbcb15f113d90633897355783b6e.\n[INFO] Setting version for github.com/BurntSushi/toml to 056c9bc7be7190eaa7715723883caffa5f8fa3e4.\n[INFO] Setting version for github.com/kr/pty to f7ee69f31298ecbe5d2b349c711e2547a617d398.\n[INFO] Setting version for github.com/philhofer/fwd to 4dbda5e2904d044d23cc4bef84e8360c458caf7f.\n[INFO] Setting version for github.com/magiconair/properties to 23b847ebbbdaada7234bf4b3da1e50e601fbf63b.\n[INFO] Setting version for github.com/armon/consul-api to dcfedd50ed5334f96adee43fc88518a4f095e15c.\n[INFO] Setting version for github.com/mndrix/ps to 33ddf69629c1bcea76b04f4a4e9e00e4cce82eb6.\n[INFO] Setting version for github.com/kr/text to bb797dc4fb8320488f47bf11de07a733d7233e1f.\n[INFO] Setting version for github.com/boltdb/bolt to c2745b3c62985affcf08d0522135f4747e9b81f3.\n[INFO] Setting version for github.com/revel/revel to a9a2ff45fae4330ef4116b257bcf9c82e53350c2.\n[INFO] Setting version for github.com/robfig/go-cache to 9fc39e0dbf62c034ec4e45e6120fc69433a3ec51.\n[INFO] Setting version for github.com/robfig/pathtree to 41257a1839e945fce74afd070e02bab2ea2c776a.\n[INFO] Setting version for github.com/mitchellh/mapstructure to 281073eb9eb092240d33ef253c404f1cca550309.\n[INFO] Setting version for github.com/bugsnag/osext to 0dd3f918b21bec95ace9dc86c7e70266cfc5c702.\n[INFO] Setting version for github.com/robfig/config to 0f78529c8c7e3e9a25f15876532ecbc07c7d99e6.\n[INFO] Setting version for github.com/shurcooL/sanitized_anchor_name to 10ef21a441db47d8b13ebcc5fd2310f636973c77.\n[INFO] Setting version for github.com/spf13/cast to ee815aaf958c707ad07547cd62150d973710f747.\n[INFO] Setting version for github.com/go-martini/martini to 15a47622d6a9b3e6a1eaca2681e4850f612471ea.\n[INFO] Setting version for github.com/stretchr/objx to 1a9d0bb9f541897e62256577b352fdbc1fb4fd94.\n[INFO] Setting version for github.com/russross/blackfriday to 510be64de022c25096c6f476b7b7c240a8eca1a5.\n[INFO] Setting version for github.com/spf13/cobra to 2e6a42892123dda608922f8af8ce85c3bff19575.\n[INFO] Setting version for github.com/Sirupsen/logrus to 9c060de643590dae45da9d7c26276463bfc46fa0.\n[INFO] Setting version for github.com/spf13/jwalterweatherman to c2aa07df593850a04644d77bb757d002e517a296.\n[INFO] Setting version for github.com/spf13/viper to e37b56e207dda4d79b9defe0548e960658ee8b6b.\n[INFO] Setting version for github.com/spf13/pflag to 08b1a584251b5b62f458943640fc8ebd4d50aaa5.\n[INFO] Setting version for github.com/stretchr/testify to e4ec8152c15fc46bd5056ce65997a07c7d415325.\n[INFO] Setting version for github.com/xeipuuv/gojsonpointer to 636edb2500d21f2ed09ea96a00deb36bbd07cf70.\n[INFO] Setting version for github.com/ttacon/chalk to e66ca4d608eb6dc36d012bceeb08ef9f379134c1.\n[INFO] Setting version for github.com/unrolled/secure to 9b725bb5ee80564334176a116a99dd926cab63a1.\n[INFO] Setting version for github.com/tobi/airbrake-go to a3cdd910a3ffef88a20fbecc10363a520ad61a0a.\n[INFO] Setting version for github.com/xordataexchange/crypt to 749e360c8f236773f28fc6d3ddfce4a470795227.\n[INFO] Setting version for github.com/ugorji/go to 357a44b2b13e2711a45e30016508134101477610.\n[INFO] Setting version for github.com/xeipuuv/gojsonreference to 2df3c0c802434c5cb984dbc21425f5960bda4d16.\n[INFO] Setting version for github.com/zenazn/goji to 845982030542a0fd9c8e8cbf76a84c7482cb3755.\n[INFO] Setting version for github.com/xeipuuv/gojsonschema to 71b85f61a135e79143f3d3238d5175a4f29b6689.\n[INFO] Setting version for golang.org/x/crypto to 7b85b097bf7527677d54d3220065e966a0e3b613.\n[INFO] Setting version for golang.org/x/net to fa33dc7b893a6db61a44637ced689a85ee5208c4.\n[INFO] Setting version for golang.org/x/text to dd164d33a23c6e075adc2b75ac1ae939b81324aa.\n[INFO] Setting version for google.golang.org/appengine to 7f9f17f358c21d90f402980f83776898c53cb377.\n[INFO] Setting version for github.com/tinylib/msgp to cd4fb1548c31d88af25205dc021be20935aec720.\n[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.\n[INFO] Setting version for gopkg.in/fsnotify.v1 to 2cdd39bd6129c6a49c74fb07fb9d77ba1271c572.\n[INFO] Setting version for golang.org/x/tools to c0008c5889c0d5091cdfefd2bfb08bff96527879.\nglide install  9.43s user 9.88s system 56% cpu 34.280 total\n\u21d2  wc -l glide.lock\n     162 glide.lock\n. I'm not sure syncing between GOPATH and vendor is something that I'd want to bite off as a supported feature. Maybe a plugin for that would be an option.\nWe've got some logic to grab things out of GOPATH into vendor (using --cache-gopath). We also just re-did the import scanning, so it should be much faster (and pull far fewer dependencies).\nI don't think we should close this issue, since there are some interesting ideas here that we need to think harder about.\nAnd as a total aside... for the grep thing, a friend just pointed me to ag (Silver Searcher), which is a really cool grep-like search tool that obeys .gitignore (and hence doesn't search vendor). I thought that was pretty cool.\n. Is it looping?\n. It seems impossible to please everyone on this, and I don't think we will be able to. But we're working our way toward what we think will be the happy medium.\nFollow the Leaders\nRather than make arbitrary decisions, we're trying to learn as much as we can from other package managers. I have yet to see one that computationally removes files from dependencies. So I'm not strongly inclined to do that simply because a few developers want it. If you could point to existing package managers that implement patterns like the things you are asking for, I'd like the chance to learn from them.\nWhen it comes to removing files from external projects, I would really like to understand why this is a desired feature. Is it because disk space on a dev workstation is not available? Is it because some CI/CD system doesn't like it? When we're talking about just a few k (if that) of files, what's the impetus to incur the computational overhead it would take to remove and then continually manage those files.\nDon't Modify Package Contents\nThere's widespread _dis_agreement on which files should be removed. Removing vendor will actually break some packages (etcd immediately comes to mind). A few developers have informed me that it is a requirement of theirs that they be able to run go test on all of their dependencies. And there are licenses, like LGPL, that have serious legal ramifications if we modify the package computationally.\nFaster\nPerformance is a frequently cited issue. Many people seem to have some internal target for how long they think an update should take. We're trying to speed things up, but we've opted for correctness first (which, of course, is the right order). Even with huge repos like Kubernetes, I don't typically see updates that last for more than a few minutes. And since update should be an infrequent operation, this doesn't seem like a terrible thing to me. But I think we can cut it by 50% by implementing @mattfarina's parallelized git fetches.\nHow many dependencies do we fetch?\nIt's sometimes hard to know, based on the code currently in a repo, which pieces of the code are going to be used in the future. It's not a particularly good developer experience to partially pull dependencies based on a code scan at time t, only to have builds fail at time t+1 because the developer imported a package from a project that they already fetched, but that was missing dependencies that we did not resolve. To take @LK4D4's case, the issue there is intent. Glide can't tell whether LK4D4 intends to only use that subpackage, or if that's just the first subpackage the code happens to be importing when the dev runs glide up. Maybe @LK4D4 is only planning on using pkg/pubsub, or maybe that's just the first piece, and a moment later LK4D4 is going to also add api/types. I, for one, think it's sort of strange that we would download the entire source code for a package, but only allow for some percentage of it to build correctly. But, I understand why some people want it, especially when working with giant monorepos like Docker and Kubernetes.\nIn the near term, we've opted to simply prevent that problem by fetching all of the dependencies during a glide up. But we're looking at optimizing that process (mainly by guessing intent based on the import graph). Maybe we will just get really aggressive about only traversing narrow paths, and just pass the onus on to the developer to have to run glide up every time they add a new import to their code. It feels like a stilted workflow, but it would definitely trim down the number of dependencies.\nSo that's under active consideration. (I actually had code to do it, but abandoned it because I found it annoying to have to keep re-scanning things I already downloaded.)\nChecking in dependencies\nFinally, there's the issue of checking in dependencies. I know that the Go community does this sometimes. I guess we'll support it in Glide. But it's a painful workflow to deal with. Every update has to completely re-pull the entire upstream source code repository for every touched dependency, which is like incurring the initial glide up overhead on every single update. Modifications to the local source tree become untraceable to Glide, and we have to start worrying about things like accidentally overwriting someone's local modifications. In short, it's an exercise in trying to guess whether the remote state is more important than the local state, but without all of the usual tools that help (e.g. git, mercurial, and bzr).\nWhen the vendor directory contains VCSes, then Glide can track state in a meaningful way. So we strongly prefer that. Yes, it means that the initial checkout takes longer. But the trade-off is a long-term more reliable way of managing the dependencies.\nIf you take a look at the checked-in dependencies in Kubernetes, you'll see how badly that system eventually degenerates. There are a number of dependencies in that tree that are aging poorly. (Some of the packages there have moved to different domains or GitHub projects, even.) But the longer these packages stay checked in as-is, the harder it gets to keep them updated. Security issues sneak in. Bugs go unfixed. When we actively track this stuff in Glide, we can help the developer avoid this.\nAll we're really trying to do is build a really strong tool. While Go has some differences from other languages, it's not so different that we need to re-invent dependency management. While we know that we can't please all developers all of the time, we're just trying really hard to build a tool that implements the best practices. It'll still take us some time, though, to sort out exactly how to do that.\n. We were basically convinced by this issue and a few others that we should change our approach on dependency resolution. In Glide 0.9, we now only fetch packages that are required to build. (Basically, we switched from tree scanning to import scanning).\nThanks for convincing us.\nDoes that solve this issue, @LK4D4 and @dnephin?\n. I tested cmd.NormalizeName with the above examples, and I can't reproduce there. Looking for other normalization functions. I think there was another place where we were normalizing package names.\n. I don't think it's just when packages are redirected. I think it's when one package is manually moved to a new repo, and the old one is marked private. I seem to recall testing this with another repo and the redirect was fine.\n. What's the status on this one?\n. glide up does rescan dependencies, doesn't it? But it will just try to re-download them if the only copy of a dependency is on $GOPATH.\nIs there a reason to not use glide get PKG instead of go get PKG?\n. It does now! Yay! I think we can close this out.\n. We should open a new issue for warning on unused dependencies. I need to test how it actually treats discovered dependencies. I might have backed out the change that allowed that, because we talked about it being dangerous to include directly imported packages that were not explicitly set.\n. @kshlm I am so sorry for letting this PR languish for so long. Is this something you still need after that massive change I did with 0.9?\nAgain, I am so sorry for leaving this out here.\n. Is this done with the new glide rm command? Can we close this?\n. I believe this is exactly how glide rm works in the new 0.9 release. Marking this closed. Feel free to re-open if I misunderstood.\n. Can we close this issue out?\n. We could do this a few ways:\n1. We could require the user to specify a target directory\n2. We could walk backwards up the directory structure until we hit a glide.yaml file\n3. We could parse PWD and try to figure out where we are in relation to GOPATH\nI suspect that (1) is too cumbersome for the user (but might be a nice additional option)\nWhile (3) seems easy, it's actually a huge pain because GOPATH can have multiple paths in it, and because symlinked directories don't quite work as expected.\nAnd (2) only suffers from one drawback: If you cd into a vendor subdirectory that has a glide.yaml file in it, that'll be the one that is modified instead of the one in your code. But I think that is probably an acceptable situation.\nAm I missing any other methods?\n. @mattfarina  Can we close now that the solution to #1 and #3 are merged onto master?\n@arvenil If you feel like re-testing off of master, we'd appreciate any input. This new version should be much better at selectively importing what is necessary, not blindly importing everything.\n. @mattfarina  Is this fixed now? I know we changed GOPATH handling in a few places before merging the no-cookoo branch.\n. Yeah, that looks like a bug in the way it's building the URL to resolve during rebuild. I'll look into it.\nOut of curiosity, are you seeing much in the way of performance improvements with rebuild? It was really optimized for Go 1.3-1.4, and doesn't seem to have as much of an impact with 1.5 because of the way it does vendoring. I haven't yet retested on 1.6-RC. I'd like to find out whether people are finding it useful, still, and how effective it is. (And if you have any ideas of how to make it more so, I'd be up for hearing those as well).\n. Just to wind this down... the point of glide rebuild was to build .a files in $GOPATH/pkg`, which used to substantially speed up things like editor support, build times, and test runs. Once the vendor experiment was introduced, the speed advantage pretty much disappeared.\nIf enough people use this feature, I'd like to take another shot at improving this. Otherwise, I think we should deprecate it before 1.0\n. Based on my discussions with @arschles, this would be distinct from glide up in that it would not update any of the pinned versions for existing non-removed dependencies.\n. I think this is all done now.\n. Did you forget to do export GO15VENDOREXPERIMENT=1? \n. Is there anything left here that Glide needs to resolve?\n. The glide rebuild command was designed to speed this up for you (by caching .a and .o files), but recent toolchain changes in Go 1.5 have sort of reduced the value of glide build. Unfortunately, we seem to be at the mercy of the Go toolchain on this one.\n. It's on a feature branch due to be merged very shortly (feat/no-cookoo).\n. @mattfarina can I close this now that we have this feature merged onto master?\n. 1. We will not do anything to computationally alter a package. It's a mess. We then have to do all kinds of VCS-specific operations, many of which are error prone.\n2. However, unless a project imports the vendor/ path explicitly (like etcd does), we have to treat it like a global dependency in order to allow other packages to interoperate. (@mattfarina has an example of this problem somewhere)\n3. And in one very weird edge case, we cannot programmatically alter certain repos without impacting the license state of your code (viz LGPL -- if you remove any part of their code, it's an alteration, and hence you have to release your code under LGPL)\nSo for the time being, we are not going to change this behavior at all. We'll just accept the fact that some packages will include files that don't get used.\nHowever, we'd appreciate it if others filed issues against packages that check their dependencies in. It adds bloat for all of us when they do.\n. @mattfarina can you add a ticket for a pin command. I'm not sure what you are thinking it would do, other than simply generating a lock file based on the current local state.\n. Well... turns out Glide is smarter than I thought. This makes everything shiny and happy:\n$ GOOS=linux glide up\nIs there any reason to add glide --os=linux up or anything like that? If not, we can just close this.\n. Which seems like it should be the default? I'd go for the import path as the default, and the file walker as an option.\n. Wait! I'm wrong! It's not a loop. It's just that the AWS package has an insane amount of import statements.\n\u21d2  glide tree > out.log\n\u21d2  wc -l out.log\n  224324 out.log\n. Testing reproducing this. I am using head, and ran glide init followed by glide tree. Here's the first 250 lines:\nconfigo\n|-- github.com/ahmetalpbalkan/go-linq   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/ahmetalpbalkan/go-linq)\n|-- github.com/mitchellh/mapstructure   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/mitchellh/mapstructure)\n|-- github.com/op/go-logging   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/op/go-logging)\n    github.com/zeroturnaround/configo/exec  (glide get github.com/zeroturnaround/configo/exec)\n    github.com/zeroturnaround/configo/flatmap   (glide get github.com/zeroturnaround/configo/flatmap)\n    github.com/zeroturnaround/configo/sources   (glide get github.com/zeroturnaround/configo/sources)\n|-- github.com/BurntSushi/toml   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/BurntSushi/toml)\n|-- github.com/ghodss/yaml   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/ghodss/yaml)\n|   |-- gopkg.in/yaml.v2   (/Users/mbutcher/Code/Go/src/configo/vendor/gopkg.in/yaml.v2)\n|-- github.com/hashicorp/hcl   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl)\n|   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/parser   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/parser)\n|   |   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/scanner)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/json/parser   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/parser)\n|   |   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/json/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/scanner)\n|   |   |   |-- github.com/hashicorp/hcl/json/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/json/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/printer   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/printer)\n|   |   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/parser   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/parser)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/scanner)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/scanner)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/parser   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/parser)\n|   |   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/scanner)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/ast   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/ast)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/json/scanner   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/scanner)\n|   |   |-- github.com/hashicorp/hcl/json/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/json/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/json/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/json/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|   |-- github.com/hashicorp/hcl/hcl/token   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/token)\n|   |   |-- github.com/hashicorp/hcl/hcl/strconv   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/hashicorp/hcl/hcl/strconv)\n|-- github.com/magiconair/properties   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/magiconair/properties)\n|-- github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |-- github.com/aws/aws-sdk-go/aws/credentials   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/credentials)\n|   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |-- github.com/go-ini/ini   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/go-ini/ini)\n|   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |-- github.com/aws/aws-sdk-go/aws/client   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client)\n|   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |-- github.com/aws/aws-sdk-go/aws/ec2metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/ec2metadata)\n|   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |-- github.com/aws/aws-sdk-go/aws/client   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client)\n|   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |-- github.com/aws/aws-sdk-go/service/sts   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/service/sts)\n|   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/query   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/query)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/query/queryutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/query/queryutil)\n|   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol/query/queryutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/query/queryutil)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/json/jsonutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/json/jsonutil)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/rest   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/rest)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol/query/queryutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/query/queryutil)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/xml/xmlutil)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol)\n|   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/jsonrpc   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/jsonrpc)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/json/jsonutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/json/jsonutil)\n|   |   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/private/protocol   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/rest   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/rest)\n|   |   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\n|   |   |   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awsutil   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awsutil)\n|   |   |   |   |   |   |   |   |   |   |-- github.com/jmespath/go-jmespath   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath)\n|   |   |   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/client/metadata   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/client/metadata)\n|   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/private/protocol/rest   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/private/protocol/rest)\n|   |   |   |   |   |   |   |-- (Recursion) github.com/aws/aws-sdk-go/aws   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/awserr   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/awserr)\n|   |   |   |   |   |   |   |-- github.com/aws/aws-sdk-go/aws/request   (/Users/mbutcher/Code/Go/src/configo/vendor/github.com/aws/aws-sdk-go/aws/request)\nglide --version\nglide version 0.8.1-128-g6aaecf2\n. I have been totally replying to this on the wrong issue. #241 \nThe short version is that I verified after a LOOOONG run that it's not infinite recursion... just a whole lot of imports. If you have a moment @bsideup, can you take a look at this proposal and see if it meets your needs better? #246 \n. We're checking into this. Out of curiosity, does everything still build okay?\n. I'll PR in the progress bar I wrote, which does not alter performance beyond starting a goroutine and sending messages over a channel.\n. That sounds like a good idea. I'll look into that library.\nOut of curiosity, did you find out anything interesting? Most of my admittedly basic tests have shown that the vast majority of time is spent in exec waiting for git to do the clone or update.\n. First, this may help you understand one thing about Glide: Any glide operation from glide create onward should leave your environment in a buildable state, and should leave your glide.lock file accurate. To make it otherwise would be poor design. Users would quickly become frustrated.\nThe resolution logic for glide get updates other packages so that the version analysis and pinning can be done correctly. Before doing version analysis, we want to make sure that all of the repos are at their latest, otherwise we may end up with dependencies that are referencing repo tags that do not exist in the present tree. (Keep in mind that for any given package, N other packages may depend on it, and may stipulate particular version requirements.)\nThis differs from other package managers because we are always working on VCS repos, not packaged distributions. So scanning VCS repos is a common and necessary case when learning about the version of any given package.\nSecondarily, we can (and must) updated the glide.lock for any glide.get operation. Otherwise the lock file is out of sync with your explicitly declared dependencies, which is precisely the situation we want to avoid. So more commands than glide up modify the lock file.\n. Warnings to not result in an error code.\nWas that really the last line of output from Glide?\n. If @mhoglan's suggestion doesn't fix the problem,  it would be helpful to be able to see the import() line that is causing those errors.\n. Your import paths don't need to include the vendor prefix. As the error\nsuggests, you should just import github.com/Sirupsen/logger.\nOn Sun, Feb 21, 2016, 6:42 PM jsxqf notifications@github.com wrote:\n\n@technosophos https://github.com/technosophos @mhoglan\nhttps://github.com/mhoglan\nglide.yaml\npackage: bitbucket.org/jsxqf/hpack-cliimport:\n- package: github.com/Sirupsen/logrus\n  version: 0.9.0\n  repo: git@github.com:Sirupsen/logrus.git\n- package: github.com/codegangsta/cli\n  version: master\n  repo: git@github.com:codegangsta/cli.git\nmain.go\nimport (\n    \"bitbucket.org/jsxqf/hpack-cli/util\"\n    log \"bitbucket.org/jsxqf/hpack-cli/vendor/github.com/Sirupsen/logrus\"\n    \"bitbucket.org/jsxqf/hpack-cli/vendor/github.com/codegangsta/cli\"\n    \"os\"\n    \"time\"\n)\nPS.\nGOPATH: /Users/xuqingfeng/Godir\nexport GO15VENDOREXPERIMENT=1 is removed\nAlso note that I update golang to 1.6 and glide to 0.9.0, but still can't\nmake it work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/261#issuecomment-186966865.\n. Does go get not run the Makefile's build target? For some reason I thought Go had some baked-in logic for using Makefiles if they were present (instead of just running go build).\n. Just for some background, we've used the linker injection method for quite a while:\n\nhttps://github.com/Masterminds/glide/blob/master/Makefile#L5\nIt works really well as long as you build with make, and not go get. The problem with go get is that there is just no convenient way to have it inject the information at build time.\nWe could generate  a version.go file at tagging time (e.g. go generate && git commit version.go && git tag $VERSION). It won't be as precise as the other method, but I suppose it's better than dev.\n. I see that @mattfarina has looked at this. Take a look at #278, which is an even simpler solution. Thanks for getting us on the right track. We really appreciate it.\n. If we do a custom build context, we'll probably have to whitelist instead of blacklist. I'll try to look into that this weekend.\nThanks for the quick catch @LK4D4 and @bwiggs \n. What if we set build.Context.BuildFlags manually to include the known architectures and operating systems? Essentially, I think we could build a \"whitelist\" that way.\n. Yeah, you're right.\nOn Mon, Feb 22, 2016, 5:00 AM Matt Farina notifications@github.com wrote:\n\n@technosophos https://github.com/technosophos Build flags can be both\npositive (included) and have the ! to be excluded. If something on that\nwhite list is a ! in the file won't that file be excluded?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/273#issuecomment-187143750.\n. Yeah, I just reproduced this. My glide.lock shows this for terraform:\n\n- name: github.com/hashicorp/terraform\n  version: 938ab99d51195f04fbde54d7bcc9f2e53e0ffcfc\n  subpackages:\n  - dag\n  - command\n  - helper/logging\n  - plugin\n  - terraform\n  - config\n  - config/module\n  - state\n  - state/remote\n  - rpc\n  - dot\n  - flatmap\nBut dag doesn't seem to import any other subpackages. So something is wrong there.\nThe Godeps file is only supposed to be used for pinning versions, but I wonder if there's a lingering bug there.\n. I think I found the problem:\n\u21d2  glide --debug get github.com/hashicorp/terraform/dag\n[DEBUG] Creating vendor\n[INFO] Preparing to install 1 package.\n[WARN] Package \"github.com/hashicorp/terraform/dag\" is already in glide.yaml. Skipping\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/hashicorp/terraform.\n[DEBUG] Attempting to find current branch for https://github.com/hashicorp/terraform\n[DEBUG] Saving default branch for https://github.com/hashicorp/terraform\n[DEBUG] Error saving https://github.com/hashicorp/terraform to cache - Error: open cache/info/https-github.com-hashicorp-terraform.json: no such file or directory\n[INFO] Resolving imports\n[DEBUG] Adding local Import /Users/mbutcher/Code/Go/src/technosophos.com/x/scratch/vendor/github.com/Masterminds/cookoo to queue\n[INFO] Found Godeps.json file.\n[DEBUG] Trying to open /Users/mbutcher/Code/Go/src/technosophos.com/x/scratch/vendor/github.com/hashicorp/terraform\n[DEBUG] Package github.com/hashicorp/terraform imports github.com/hashicorp/go-checkpoint\n[DEBUG] Missing github.com/hashicorp/go-checkpoint. Trying to resolve.\n[INFO] Fetching github.com/hashicorp/go-checkpoint into /Users/mbutcher/Code/Go/src/technosophos.com/x/scratch/vendor\n[DEBUG] Attempting to find current branch for https://github.com/hashicorp/go-checkpoint\n[DEBUG] Saving default branch for https://github.com/hashicorp/go-checkpoint\n[DEBUG] Error saving https://github.com/hashicorp/go-checkpoint to cache - Error: open cache/info/https-github.com-hashicorp-go-checkpoint.json: no such file or directory\n[INFO] Setting version for github.com/hashicorp/go-checkpoint to e4b2dc34c0f698ee04750bf2035d8b9384233e1b.\n[DEBUG] Package github.com/hashicorp/terraform imports github.com/hashicorp/hcl\nIt looks like we automatically import the package at the base of the repo:\n[DEBUG] Trying to open /Users/mbutcher/Code/Go/src/technosophos.com/x/scratch/vendor/github.com/hashicorp/terraform\n[DEBUG] Package github.com/hashicorp/terraform imports github.com/hashicorp/go-checkpoint\nIn the case of terraform, the base package imports tons of stuff.\nIn pre-0.9, it makes sense for us to have done that. But now, it doesn't. The problem is that the current glide.yaml file doesn't indicate whether or not I need to import the base package. I'll have to chat with @mattfarina about how we want to handle this.\n. Yeah, it does sound like that issue.\nWhat if we only pull the base package if the subpackage . (or ./) is in the list? Example:\npackage: technosophos.com/x/scratch\nimport:\n- package: github.com/hashicorp/terraform\n  subpackages:    # Do NOT pull the base package\n  - dag\n- package: github.com/Masterminds/sprig\n  - .   # Pull the base package\n. ^^ @dmitris actually, looking at your earlier pull request, adding support for . would be a tiny change, right? You already cover the case where a package is specified, but no subpackages are.\nSo if I'm thinking about this correctly, what we want is to support two distinct cases. I think they go like this:\nI don't want the base package:\nyaml\npackage: technosophos.com/x/scratch\nimport:\n- package: github.com/hashicorp/terraform\n  subpackages:\n  - dag\nI do want the base package:\nyaml\npackage: technosophos.com/x/scratch\nimport:\n- package: github.com/hashicorp/terraform\n  subpackages:\n  - .\n  - dag\n. This does not look like the place Go would expect to find source: /tmp/TMP/abraracourcix\nThere's also this: [INFO] Not found in vendor/: github.com/nlamirault/abraracourcix/api (1)\nWhat's your $GOPATH and where is the source code located?\n. @nlamirault  I just managed to reproduce this, and I think I see the problem.\n- Normally with Glide, you don't check the vendor/ directory in, because doing so either confuses Git or removes the revision information that Glide uses (depending on how you do the commit).\n- You should check in your glide.lock file. This makes glide install builds reproducible, and also speeds things up.\nIf I rm -rf vendor and then glide install, things work fine.\nIf you really want to check in vendor/, we support that with some special CLI commands. First, you can skip glide install (because those are already there). And when you want to do a glide update, you just add the flag --update-vendored. The same flag can be passed to glide install.\nI'm going to file a bug on the error messages you got. They should be better than they are.\nLet me know if this gets you any further.\n. Yeah, this is a much, much better UX. Awesome.\n. I've pointed this out a few times: This feature constitutes modification of source code, which means many licenses (and most notably, LGPL and its variants) automatically come into play in new and interesting ways. I don't feel like it's right for Glide to computationally make licensing decisions on behalf of users.\nThat said, the Glide plugin system should make it really easy for someone to implement this feature and use it in their workflow.\n. IANAL. The speculation on the street is that removing a .git repo does NOT constitute a license breach because it is not part of the source distribution, but is an object generated locally. Any change to something that is checked into the repository, in contrast, constitutes a source change.\n. Yeah, we're still trying to reproduce. If you can reproduce, can you give us some details?\n. Reviewed the code. LGTM.\nI am so excited about this one! Thanks, @mcuelenaere!\nAs soon as 0.9.2 is tagged this week, can we please merge this one? I believe that leaves Govend as the last big one we don't yet support.\n. @deluan With the same stack trace? Or is it different than the original one?\n. @thockin I've been curious about the legal ramifications of modifying packages (like Godeps does) and then checking in the modified code to your source repository. Have the attorneys at Google vetted that procedure? There's no danger of triggering, say, the LGPL viral clause because of that, is there?\n. Good catch @fschl! LGTM\n@mattfarina Can we merge this big fix for 0.9.2?\n. LGTM. @mattfarina can we merge this for 0.9.2? It's a minor bug fix.\n. LGTM.  That was my fault.\n. Is it actually fetching twice? There is a map that tracks fetches, but\nlooking at what you typed, I am wondering if there is an edge case where\nthat map isn't shared between two fetch contexts (initial fetch and fetches\nduring addition dependency resolutions).\nI've noticed that a few log messages are actually a little misleading. They\nprint before duplicate checks are run.\nOn Sat, Mar 5, 2016, 11:39 PM Jack Spirou notifications@github.com wrote:\n\n@thockin https://github.com/thockin https://github.com/govend/govend\nuses a map[string]bool for that purpose:\nhttps://github.com/govend/govend/blob/master/deps/vend.go#L54\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/308#issuecomment-192815425.\n. Ah! Now I see what you were talking about in the issue. I had mentally confused VCS gets and dependency resolution. Really, there shouldn't be a case where a VcsGet operation is even requested twice, so there is some case in dependency resolution where we are not catching this case and it is trickling to the VcsGet layer. I'll be looking for that.\n\nThanks again!\n@mattfarina I'd vote for putting this into 0.9.2 as well. It does clearly fix a bug that is clearly a performance issue.\n. ~~You expected correctly, @thockin. We need to check whether that's a bug or a spurious message.~~\n. I misspoke earlier. Instead of using glide get to update, we use glide up. You can trick glide get into doing updates, but we have been trying to segregate true update functionality into the dedicated glide update command. (glide get -u does something different than go get -u. We probably shouldn't have done that.)\nThat said, I think we might have an issue.\nGiven this, glide up PKG should fetch the most recent version that adequately matches the version requirements in glide.yaml.\nConsider glide.yaml has something like this (generate from glide get github.com/Masterminds/sprig#1.1.0):\nyaml\npackage: technosophos.com/x/pkgtest\nimport:\n- package: github.com/Masterminds/sprig\n  version: 1.1.0\nThis should pull exactly version 1.1.0. And it does. And if I want to make that directive more flexible, I can add SemVer ranges (e.g. version: ^1.1). That all works.\nBut if I delete the version: field (or never add one in the first place), then any checkout will satisfy the version rule. It appears that in some cases, a package will hit this state and will NOT be updated during a glide up.\nSo if I change the above YAML to this:\nyaml\npackage: technosophos.com/x/pkgtest\nimport:\n- package: github.com/Masterminds/sprig\nAnd then do glide up, looking at the Git log for Sprig shows me this:\ncommit 2493695b1e81bd6ef2ac18d2591fcf46725e5a50 (HEAD, tag: 1.1.0)\nThat's not what I expected. I expected it to run to the tip of master.\nIf I add version: master into the YAML file, then do glide up, then check Sprig's git log, I see the head is this:\ncommit fd057ca403105755181f84645696d705a58852dd (HEAD, tag: 1.2.0, origin/master, origin/HEAD, master)\nThat is what I would have expected from an empty version. I suspect that somewhere in the 0.9 tree, we made a \"performance fix\" that introduced this behavior (or we're missing a SetVersion() on packages that don't declare a version). Or it could be that we did this intentionally in the name of caution. Any thoughts on this @mattfarina ?\n. LGTM. @mattfarina if you're good with this, can we merge in time for 0.9.2?\n. We've talked about this in the past. And maybe it's time to talk about it again.\nTo keep you from getting bogged down while we discuss, would the output of glide list help you solve the problem without a change to the glide.yaml file?\n. Looks good to me.\n. I'm not sure there is a clear distinction between \"managed\" and \"unmanaged\" repositories.\nSay I manually vendor \"foo\", and then use glide get to vendor \"bar\", but \"bar\" depends on \"foo\". For all intents and purposes, Glide now treats \"foo\" as a managed dependency simply because of \"bars\" transitive dependency. It will now automatically do all the other Glide-y operations on \"foo\". In fact, the only dependencies that Glide won't de facto manage are the ones that are simply not imported at all.\nSo effectively, either route will get you the same outcome. You might as well start with the easy case and just do 1.\n. Glide list only shows packages that the source imports. It doesn't use the glide.yaml file at all. It is also sensitive to GOOS and GOARCH.\n. I agree with @thockin on the error message.\nMy worry about the interactive mode is that it opens the door for glide having to retain a lot of new state information. Either the prompting would have to happen every time someone did a glide get or a glide up, or we'd have to store information about how the question was answered last time. And if we decide to store it, we have to store it somewhere where that information is actually committed to the VCS. Neither the lockfile nor the top-level glide.yaml file are semantically the place for that information.\nThat said, if we didn't store that information, simply doing an interactive mode makes sense to me.\nWhen it comes to not showing conflict messages, that's a similar can of worms. Any given glide get operation has the potential to introduce new conflicts, so we can't simply suppress those messages for some operations. Likewise, tracking state on when we've shown conflicts is equally dubious, and makes assumptions that the \"user\" (which may be a script) that last \"saw\" the warning actually read the warning.\nI think that when we have time to turn our attention toward streamlining glide get to only re-resolve the dependencies directly impacted, this will make some of the problem go away.\n. This is the reason we check all dependencies when updating one. More than one package may depend on the package you are updating. So we have to scan all of the other packages to see whether they depend on the package you've updated. Then we may need to re-negotiate the versions of shared packages because of this.\nIn order to make sure that we can re-negotiate correctly, we have to fetch all of the repository updates even if we don't change the actual version that is locked.\nIf you really want to just update one dependency, you have to do this manually by going into vendor/ and running the right VCS operation. However, this may leave your other dependencies broken.\n. Also maybe the output of glide --debug up?\n. Man... this makes me nervous... but I think we should do it. I'd like to get it merged in ASAP so we can get lots of tire kicking before the release.\nCode LGTM.\n. At this point, we've gotten confirmation from GitHub that this was not likely rate limiting on their part. Closing this.\n. I have seen this error, and have worked around it by using version: master in the glide.yaml file. That, however, is not the intended behavior. We need to get a fix for this into Glide.\n. @russmatney Are you setting the VCS fields (vcs, repo) in the glide.yaml file? \nhttps://github.com/Masterminds/glide/blob/master/docs/glide.yaml.md\n. I think @mattfarina may know why the VCS error is showing up. But the reason it's a stopping condition is that once a VCS can't be updated, we can't guarantee the consistency of the version tree anymore.\nLet me know if setting version: master works.\n. This is certainly an area we might be able to do better in post-1.0. We might be able to trail the dependencies during resolution and figure out which ones might need an update.\n. Yeah, I traced this down to getRootFromGoGet, which calls an http.Get.\nThe reason for this is because certain packages uses aliases built into HTTP headers. We might be able to special-case this for glide list... but we'd lose some functionality.\nI wonder how feasible it is to shorted the timeout to 5 seconds instead of 30. Suggestions, @mattfarina ?\n. I was originally going to suggest that we do not include dev dependencies by default (e.g. that we have --include-dev instead). But as I thought about the use case, it feels to me like the cases where we'd not want dev imports are for CI/CD and stuff like that. So I agree with this choice.\nWhen we encounter Glide.yaml files in dependencies, do we obey this flag in regards to those? I'm kinda thinking no. But I could be swayed the other way.\n. Maybe we should step back a moment and describe what devImports is for. I think @alde may be right: we may not need to go through the _test.go files to get what we want.\nHere's my first pass:\n- devImports is for packages that are required to develop on the local project (not anything in vendor/)\nExamples of devImports:\n- An assert library that is used only in testing (for the local project), e.g. Ginkgo\n- An external Go tool that is used for something like go generate\nMy assumption is that by default, when I import with devImports, I can do things like run go test on the project. But I am not assuming that I'd be able to cd into vendor and run go test ./... and have that work.\nDoes that sound similar to what you were thinking @mattfarina and @alde ?\n. So based on the comments of @alde @mattfarina and me, it sounds like we're down to just this use case:\n- devImports is for libraries necessary only for running tests on the present project (not on things in vendor)\nDoes that sound right?\n. I'm imagining that the flags provided to glide will then have to be the same ones passed to go build. Which feels sane to me in the places where you need to control build flags.\nSo let's take the case of glide up:\n- For most users, simply doing glide up will be sufficient, since most users are building on the platform they are running on.\n- For users who cross-compile, they'll also have to cross-build their dependencies\n- For users who use specialized build tags, they'll have to submit their build flags to glide as well as to their go build.\nSo... yeah... for users who are doing more complex things, this requires more complexity on the glide commandline -- just as it does on the Go commandline. \n. @mattfarina The way it works today, we still have to supply GOOS and GOARCH on the CLI if you want to cross-build, right? So for me, I still do GOOS=linux glide up on my Mac because one of our build targets is Linux, and Docker has Linux-specific dependencies.\nThe problem with that is that if anyone on the team does glide up without that, and then checks in the file, the build is broken.\nSo that's the primary use case for this. The build flags just seemed like a natural extension of that.\n. Okay, I'm basically convinced by @kron4eg, @mattfarina, and @sdboyer that this would be a bad idea, and introduce a crappy user experience. So I'm closing this.\n. Yeah, this looks good to me. I'm slightly worried about the UX, since it's a little ambiguous what exclude means in comparison to ignore. I guess we could call it excludeDirs, but I honestly prefer simplicity in naming.\n. Is the package still referenced in the code? The glide.lock file will have the referenced package there if something is still importing it. (Otherwise, you may have found a bug.)\nBy default, I think we decided not to remove stuff from vendor/. I believe you have to pass --delete to delete the files. Like glide up --delete\n. I was under the impression that those hooks had to fire client-side, which means it would become a prerequisite for committing to Glide. That would make me a little uncomfortable.\n. Man... this is gonna be dangerous. I agree with adding some messaging. I wish there was a way to make this really clear to users (up front) that this is an experimental feature, and that it is destructive.\nThat said, I feel like the community has expressed a strong desire to at least have the option of doing this. I still think we should go ahead with it.\n. I am very interested in this idea. A few others in the community have expressed interest in something like this too.\n. The intention is to flatten all of the dependencies, with the only exceptions being cases where the import paths specifically reference the vendored copy. We aren't currently planning on changing this.\n. Wow. That's fabulous.\n. LGTM. Super excited to see this go in!\n. YAY! Yes, we should merge!\n. LGTM.\n. That is a fabulous idea. Knowing that a commit ties to a tag actually makes life much easier for us.\n. Out of curiosity, if you set version: master in your glide.yaml, does that force it to the tip of master?\n. Hmmm, I believe you found a bug. It should work the same with version: master as it does without version: master. Thanks for reporting this.\n. See also #327\n. There are two ways to handle this:\n1. Don't commit vendor/ (which is what we usually recommend). glide init will re-fetch those dependencies on each system, and you won't need the overhead of checked-in dependencies.\n2. Use the --strip-vcs (-s) flag, which will remove the various VCS folders. You can then safely check in your vendor/ directory. When you update, you'll need to use glide up -u to have it re-calculate the dependency changes.\n. Does using glide --no-color fix it for you?\n. We'd be happy to receive a pull request for this. I'll leave this issue open in case somebody wants to do it.\n. Is there a better way to scan for this than looking for the word color in the $TERM env var? e.g. TERM=xterm-256color\n. If tput doesn't work on Alpine Linux out of the box, we probably can't use it. I don't see it in the Busybox man pages. But maybe whatever tput is doing, we can replicate in Go.\n. What's your $GOPATH set to? /tmp/glidetest/one does not look like a valid GOPATH\n. For the Go tools, as of 1.5, you need to set the GOPATH correctly. Otherwise the built-in vendor logic does not work. Glide simply uses the Go libraries for this.\n. Oh, interesting... I'm looking at your PR.\n. Can you drop your glide.lock in here, too?\n. Also, just to rule out one possibility... did you commit your vendor/ directory to VCS? The error above is sometimes related to trying to check one git repo into another git repo.\n. Hmm... I tried to reproduce and can't get that result.\nMy glide.yaml file:\nyaml\npackage: technosophos.com/x/example\nimport:\n- package: github.com/pborman/uuid\n- package: github.com/uber/tchannel-go\n- package: github.com/onsi/ginkgo\n- package: github.com/onsi/gomega\n- package: github.com/Sirupsen/logrus\n- package: github.com/cactus/go-statsd-client\n  subpackages:\n  - statsd\nMy console:\nconsole\n\u21d2  glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/uber/tchannel-go.\n[INFO] Fetching updates for github.com/pborman/uuid.\n[INFO] Fetching updates for github.com/onsi/ginkgo.\n[INFO] Fetching updates for github.com/cactus/go-statsd-client.\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n[INFO] Fetching updates for github.com/onsi/gomega.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file.\n[INFO] Fetching golang.org/x/net/context into /Users/mattbutcher/Code/Go/src/technosophos/x/example/vendor\n[INFO] Setting version for golang.org/x/net to 6c89489cafabcbc76df9dbf84ebf07204673fecf.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 7 dependencies.\n\u2603 @ENG001590.local ~/Code/Go/src/technosophos/x/example \u00ab/Users/mattbutcher/Code\u00bb\n\u21d2  glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/onsi/gomega.\n[INFO] Fetching updates for github.com/uber/tchannel-go.\n[INFO] Fetching updates for github.com/onsi/ginkgo.\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n[INFO] Fetching updates for github.com/cactus/go-statsd-client.\n[INFO] Fetching updates for github.com/pborman/uuid.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] golang.org/x/net is already set to version 6c89489cafabcbc76df9dbf84ebf07204673fecf. Skipping update.\n[INFO] Setting version for golang.org/x/net to 6c89489cafabcbc76df9dbf84ebf07204673fecf.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 7 dependencies.\nGo env:\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/mattbutcher/Code/Go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nI'm on Glide 0.10.1\n. I'm going to tag @mattfarina on this one, since he's the owner of the VCS code, too. I took a look again this morning, and am not sure why a detached head state should cause a problem in this case.\n. Any chance you could try with 0.10.1?\n. I'm not sure I understand why this is a good idea. Wouldn't this simply break the cases for anyone who is using ../ inside of a proper GOPATH?\n. Okay. Ping me or drop into the Gitter room if you need to chat about it.\n. Interesting idea. We'll have to think about this. Do you have a suggestion for the syntax?\n. I like this a lot.\n. It sounds like the original request was merely to make it possible to tell Glide to pin the glide.yaml to a VCS commit ID (e.g. explicitly set version: <SHA>. I wouldn't mind adding that as a flag to glide get, but that is the sort of thing that I thought we were trying to steer people away from. Ultimately, everyone is healthier if we set this to SemVer (range) instead of to VCS identifiers.\nWhen it comes to intuitions about whether we should track head or automatically pin, you will find there are two fairly vocal sides on this one. (A read through the issue queue and Gitter backscroll will show this). Some people want the go get-like behavior of tracking master by default. Others favor stability. While both can be done explicitly, it's tough to decide which should be default.\nI'd be most comfortable with just adding a flag to glide get that instructs glide to pin the glide.yaml to the current commit. That will let people who want that behavior be able to get it, but it won't defeat the push to stop using commit IDs and start using SemVer ranges.\n. I believe @arschles is also working on this. If the git protocol were\nrestricted to HTTP, would we be able to sneak in an HTTP proxy solution?\nOn Tue, Apr 5, 2016, 7:05 PM Matt Farina notifications@github.com wrote:\n\n@sectioneight https://github.com/sectioneight this is actually a\nduplicate of #39 https://github.com/Masterminds/glide/issues/39. I\nidentified early on that we need this.\nHaving overriding aliases is definitely something we need to have for many\nenterprise environments and some places that require high control. Where I\nwork we need the same level of control your SREs require.\nIf you're going to craft this for your own needs would you want to try and\ncontribute it?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/372#issuecomment-206059048\n. @crsmithdev That is sorta the direction I was thinking, as well. I guess we could do something like \"load the global .gliderc, and if there's a local .gliderc (e.g. in same dir as glie.yaml), merge that with the global\". But even starting with a global config gives us a strong starting point.\n. LGTM\n. I really like the config structs. Too much organic growth led to some icky function signatures. This is much cleaner.\n. It sounds like we're getting close to agreeing on this:\n- The version: field can take a SEMVER, a TAG, or a VCS REVISION\n\nThe resolution would be something like this (in order):\n1. If the version string is a VCS REVISION, use it as-is\n2. If the string is a SEMVER version or range, use it as such\n3. If the string is a TAG, use the VCS REVISION for that tag\n4. Else emit an error (or warning)\nI'm leaning away from allowing version: to contain a branch because (a) branches behave differently than the others, (b) user intent for branches is different (about tracking head on that branch, vs locking to a semantic range), and (c) the ambiguity between a branch and the other concepts forces us to solve a lot of edge cases introduced. So for my part, I'd like to see:\n- A branch: introduced into Glide.yaml\n- The algorithm tweaked so that \"if isset(version) use version; else if isset(branch) use branch else use HEAD on master\" (roughly speaking; details will be more nuanced.)\n- A strategy for programmatically updating existing glide.yaml files for this new fix.\nThe remains a notable unsolved problem:\n- If A requires B version: 1.0.0 and C requires B branch: feature/tinkertoys, what do we do to resolve?\n/cc @mattfarina @sdboyer \n. @franciscocpg This is awesome. Thanks!\n. I like the idea of SemVer ranges for this.\nNot sure I follow with the \"nested\" thing. Are you suggesting that one could do:\ngo: >= 1.6\n    glide: > 0.10\ngo: ~1.5\n    glide: 0.9.1\n. Ah, that makes sense. Okay.\n. @mattfarina feel free to merge this whenever you have a chance to review it. I removed an entire section of the README that looks like it was from the pre-Go 1.5 days \n. :ship: I like it.\nTested on Kubernetes Helm.\n. My test:\n- Started with github.com/kubernetes/helm\n- Changed a test to use github.com/arschles/assert\n- Ran glide get --test github.com/arschles/assert\nThe good news is that the testImport entry was correctly created, the fetch worked, and the glide.yaml|lock files were generated. The bad news is that something with fetching Kubernetes broke:\nconsole\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/client/unversioned/remotecommand.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/kubectl/cmd/util.\n[INFO]  Fetching updates for github.com/golang/protobuf/ptypes/any.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/client/unversioned/clientcmd.\n[WARN]  k8s.io/kubernetes/pkg/client/unversioned/remotecommand appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  k8s.io/kubernetes/pkg/kubectl/cmd/util appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  github.com/golang/protobuf/ptypes/any appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  k8s.io/kubernetes/pkg/client/unversioned/clientcmd appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Fetching updates for github.com/ghodss/yaml.\n[INFO]  Fetching updates for github.com/golang/protobuf/proto.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/api.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/labels.\n[INFO]  Fetching updates for github.com/golang/protobuf/ptypes/timestamp.\n[WARN]  github.com/golang/protobuf/proto appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Fetching updates for golang.org/x/net/context.\n[WARN]  k8s.io/kubernetes/pkg/api appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  k8s.io/kubernetes/pkg/labels appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  github.com/golang/protobuf/ptypes/timestamp appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/kubectl/resource.\n[WARN]  golang.org/x/net/context appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/client/unversioned/portforward.\n[WARN]  k8s.io/kubernetes/pkg/kubectl/resource appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  k8s.io/kubernetes/pkg/client/unversioned/portforward appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/api/meta.\n[INFO]  Fetching updates for google.golang.org/grpc/metadata.\n[WARN]  k8s.io/kubernetes/pkg/api/meta appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN]  google.golang.org/grpc/metadata appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Fetching updates for k8s.io/kubernetes/pkg/client/unversioned/fake.\n[WARN]  k8s.io/kubernetes/pkg/client/unversioned/fake appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO]  Setting version for github.com/Masterminds/semver to 1.1.0.\n[INFO]  Detected semantic version. Setting version for github.com/Masterminds/sprig to 2.2.0.\nAnd the relevant portion of glide.lock:\ndiff\n   - pkg/storage\n   - pkg/kubelet/qos\n   - pkg/master/ports\n+  - pkg/api/testapi\n+  - federation/apis/federation\n+  - federation/apis/federation/install\n+  - federation/apis/federation/v1alpha1\n+- name: k8s.io/kubernetes/pkg/api\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/client/unversioned/clientcmd\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/client/unversioned/portforward\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/client/unversioned/remotecommand\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/kubectl/cmd/util\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/kubectl/resource\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n+- name: k8s.io/kubernetes/pkg/labels\n+  version: 9990f843cd62caa90445cf76b07d63ba7b5c86fd\n. Does it exist in vendor/?\n. Closed as a duplicate of #252\n. Yeah, we need to find a sensible way to determine which things to update on glide get. We've taken the most basic approach (regarding dependency resolution) that we'd try to get the latest of any un-pinned packages (e.g. those that don't have a version: specified in glide.yaml), but we should probably get more conservative than that.\nI'm not sure whether to wait for @sdboyer 's resolver change or whether to try to do this before that. Thoughts, @sdboyer? \n. @mattfarina I can't think of any cases where sorting like this would cause a problem. Can you?\n. @mattfarina Yup, that is probably it.\n. This repo has a committed vendor/ directory so that go get github.com/Masterminds/glide works in a 100% predictable fashion.. When you did the workaround, did it delete a bunch of dependencies? I was looking into the possibility of doing this, and the main issue is that if it doesn't scan your current codebase, any transitive dependencies that are not in glide.yaml will ignored.. I'm curious as to why you changed the len(gopath) to a string comparison. Since even an empty string allocates a slice, I would think that the len() comparison would be faster. Of course, the compiler probably optimizes away any difference anyway.\nI certainly wouldn't disapprove of the patch because of this, but I am curious why you'd make this change.\n. Makes sense. I have an unhealthy interest in microoptimizations, so I was\nwondering if it was a performance thing.\nOn Friday, September 25, 2015, Giacomo Comitti notifications@github.com\nwrote:\n\nIn cmd/link_package.go\nhttps://github.com/Masterminds/glide/pull/89#discussion_r40433214:\n\n@@ -21,7 +21,7 @@ func LinkPackage(c cookoo.Context, p *cookoo.Params) (interface{}, cookoo.Interr\n    here := \"../..\" + strings.Repeat(\"/..\", depth)\ngopath := Gopath()\n-   if len(gopath) == 0 {\n-   if gopath == \"\" {\n\nI just think that comparing gopath against and empty string makes it\nclear that we are expecting a string from Gopath() instead of a more\ngeneral slice.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/89/files#r40433214.\n\n\nhttp://technosophos.com\nhttps://github.com/Masterminds\n. So the way I read this, if I do -y foo.yml and I have two files, one named foo.yml and one named foo.yaml, then foo.yaml will get loaded even though I explicitly said foo.yml, right?\n. Please leave the alias. We have it here for backward compatibility.\n. @mattfarina What should we do here?\n. I guess at some point we should investigate having VcsUpdate take an Installer as an arg.\n. What if there is an error from Rel?\n. ",
    "mattfarina": "go/tools/vcs turned out to be a limiting package. For example, using it there was no easy way to checkout branches. It is designed to do what go get needs and isn't really extensible beyond that. So, I created github.com/masterminds/vcs that attempts to create a unified interface across VCS. Using that instead.\nYou can see this starting in version 0.5.0-beta1\n. @technosophos right now that situation would provide no info, warning, or error at any given point. It would silently skip it. As someone who is prone to spelling mistakes it would be really useful to have a warning.\n. This issue was with glide prior to the 0.5 release. Is this still an issue?\n. @JacekLach given the way Go is headed on vendoring we may have a workaround by leveraging what will be optional in Go 1.5 and default in Go 1.6. We're investigating that now.\n. I prefer using the current shell. That would make testing easier for issues. If I'm a zsh user (and I am) I could test bash, zsh, and other environments without having to alter my login shell for each of those.\n. @roblillack Nice catch. Thanks.\n. Can you pull and test master? I think I fixed the inability to work with -y last night and the silent errors this morning.\n. @dz0ny can you provide a little user story or reason to have glide run? How would this be useful and why?\n. Yes. glide pin will will create a glide.yaml file with the currently used dependencies. Just tested with 0.5.\n. I updated the readme in ffc4d25e7e58149dc33653de854cf5c64989ec8b\nGoing back to the other things documented here:\n\nglide init - create initial file {aks user for package name, ask about detecting packages, runtime}\nglide shrinkwrap - create/update godeps file basede on current enviroment (https://www.npmjs.org/doc/cli/npm-shrinkwrap.html)\nglide run {named script} - yaml file would contain runnable scripts (https://www.npmjs.org/doc/cli/npm-run-script.html)\nglide install - install dependencies based on godeps, if file is not present use go get, install runtime..(https://github.com/pwoolcoc/goenv)\n\nThere is already a command to create the initial file. At install time there's an --import flag to work with Godeps and GPM. glide pin locks down a version similar to shrinkwrapping.\nThat leaves the suggestion of a glide run command. I've added #59 to address that discussion.\nI think everything else here is handed so I'm closing the issue. If there's still something outstanding please open a new issue or re-open this one.\n. This issue isn't one with glide but rather a function of how godoc works. godoc doesn't work on the main package which is what glide uses as it's a program. For a quick understanding see http://stackoverflow.com/questions/21778556/can-i-document-package-main-in-godoc\ngodoc.org does handle it but it appears to handle cli/apps differently from packages. See http://godoc.org/github.com/Masterminds/glide\n. Given that this is expect behavior for main packages I'm going to close this. This happens in all apps that have a main package.\n. Thanks @intabulas!!! This is fantastic.\nI'd like to keep this open to track that pull request. Once that goes in we should document it on the readme.\n. @lamielle Thanks!\n. If @technosophos doesn't get to it before, I'll look at this before the weekend.\n. Travis CI is setup and passing.\n. I can confirm this is happening. Should we trim any excess whitespace off the start and end? That's what I'm thinking at the moment.\n. @technosophos what do you think of Glide going up the directory structure to look for a glide.yaml? So commands can be executed from a sub-directory?\n. I moved the license and some about info to a command to remove the other files and the need for a zip. See 84b175ea5f9c0eecf3a0980e94a8a4d27c4e695c\n. I've found myself, in practice, making local modifications to dependencies. Sometimes I make changes to a dependency, such as a library I'm working on, and testing it in an application before I push any of it anywhere else. In one of the projects I recently started working on this exact situation came up today.\nIf there are local changes and the ref in the yaml files changes it might be worth failing on an error. If they want to do it anyway have a --force option. Imagine someone modifying some code to test something or before they committed work only to have it accidentally blown away by a tool. I've had it happen and wasn't happy.\nWhen I think of install and update I think of different expectations as to what I'm doing. In one case it's the first go. In another case I'm updating the dependencies. These are what I'm doing. When I think of what the code does the difference is quite minimal. It might make sense to simply make one an alias to the other.\nI looked at composer, the PHP package manager, and they are essentially the same. The real difference is in how they handle lock files which is something we don't have.\n. I've gone and broken out 1, 3, 4, and 6 into separate issues so we can focus on 2 and 5 here.\n. I'd like to close this issue out. Most of the elements have their own issues carrying forward. In 0.5.0 install and update are commands aliased to each other. It's a matter of semantics at that point.\nIf there is some unresolved issue not documented somewhere please re-open or create a new issue.\n. #30 fixed the issue for git but not other VCS types.\n. This will be fixed in 0.5.0 and is currently fixed on the feature/go15 branch.\n. With the closing of #159 we can close this one as well.\n. That was the plan. I started the code (very rough) as a separate command so it could be reused elsewhere if we decided to. I need to get back to this.\n. @technosophos Do you think this should be a --delete flag to opt-in to deleting or a --preserve-unused to opt-out of deleting? I'm tempted to do the opt-out because I think deleting on update is the better default.\n. I've been using $(basename ${GOPATH##*:}) in my prompt to tell me the end of the path for some time. This telling of the last directory level has been quite useful. But, I think this is a little custom for me.\nI like this example. I tested it and it works.\n. Should we look for github packages, pull off those that are subpackages and append them to the subpackage list automatically?\n. This should now be fixed with b78f4d78775e1f9c345ef76e16494f683087bd14. If there's still a problem please re-open the issue.\n. @technosophos nice go at coming up with advantages and disadvantages of my idea that I just wrote down off the cuff.\nThe issue is, I think, more complicated than a local system. More than one developer may be working on the project and you may use a CI/CD system with multiple nodes. Each environment would need access to the mirror.\nI think that nixes the idea of local packages.\n. @wav I like the idea of this being pluggable. That way alternative approaches could be used.\n. @mhoglan I'd like a glide native way to do this that's easily sharable and works across systems.\nThere are lots of environments where it's not allowed or wise to much with the /etc/hosts file. Mucking with that feels like a bit of a hack.\nA Git specific mechanism doesn't work for SVN, Bzr, or Mercurial. All three of those are supported by Go and Glide.\nI'd like to have something elegant that supports all the supported VCS.\n. This was just merged to master. See the mirror command and subcommands.\n. @roblillack thanks for providing this. I'll take a look at it soon.\n. I think so. If there is a continued issue that's not been address or isn't in one of the other issues this can be re-opened.\n. I spoke with @technosophos and we need to think this one over. Since I spoke with him I've wondered about a couple different issues here. Wanted to let you know we had not forgotten about this.\n. @roblillack I'd like @technosophos to speak up as well. I'm wondering if displaying an Error and exiting like this is a good idea state wise. Two things come to mind.\nFirst, should we use a two pass system. On the first pass glide looks for things that will lead to errors, report them, and then not try the action. The idea is to catch something that could put the environment into a bad state and stop it before it happens.\nSecond, I don't like that it's easy to leave _vendor is a bad state. Both prior to this change and after the change. I'm not sure of the best approach, other than a 2 pass system, but I'd like to explore it.\nAny ideas?\n. After talking this over with @technosophos we're going to pass on merging this. It's quite out of date given all the changes recently and most things are warnings now where we don't want to exit.\n. Reviewed and tested. Thanks for the fix.\n. @jriquelme Thanks for the details. This is the kind of thing we needed.\nHere's how I reproduced and what I observed. I cloned the repo at https://github.com/jriquelme/yutubaas. Then from the root of the repo I ran:\n$ glide install\n$ go test -coverprofile=cover.out\n$ go tool cover -html=cover.out -o coverage.html\nThis failed because the second command created a cover.out file with the wrong paths. But, If i changed directory to _vendor/src/github.com/jriquelme/yutubaas and re-ran the second two commands it worked.\nIt seems the go cover tool expects to be nested down inside the GOPATH when generating coverage. I don't have a fix yet but I'm better understanding the problem.\n. I've discovered deep inside the go source (see inside the go/build package) it looks for directories inside the src directory and treats that differently from those that don't have a parent src directory. It expects a package to be inside a GOPATH. This is bubbling up to a problem here.\nI don't have a fix, yet. Suggestions welcome.\nIn unrelated news, Go has goto and uses it in the go/build package.\n. Glide 0.5.0 took a quite different path. It now uses the Go vendor experiment and works with Go 1.5 and newer. In this new setup this should no longer be an issue. We're working within the bounds of what the go tool expects.\nPlease re-open if there is still a problem.\n. This is great. Needs a tweak before I want to merge.\nNote, this only works if the switch is to git. If the repo type changes from git to hg this doesn't work. I'm ok with that for now but there must be a way to add this to other VCS more cleanly.\n. I have a fix for the directory bubbling up so I'll merge this and then add the fix. Thanks for bringing this up @roblillack.\n. @roblillack Nice job. Tested and it works great.\n. Done. See pre-release 0.5.0-beta1 and we'll soon be releasing 0.5.0. This is a major change for glide so we appreciate any feedback. We are fully embracing GO15VENDOREXPERIMENT.\n. @szank Sorry about that. Not gliding in was not a case tested. I'll work to get a fix out soon. Likely sometime next week.\nThere will be some changes coming to glide over the next year that do some breaking. For example, we're going to support the movement to vendor/ in Go.\n. Glide 0.5.0 now has import features in glide up and glide get when using the --import flag. This is in addition to the glide import command.\nGiven the new vendor support in Go proper it might be worth updating the heroku buildpack to support that.\n. @dz0ny and @technosophos given the latest functionality, is this now no longer an issue? I think\u2122 we can close this.\n. Right now glide.yaml is only for the top level application. We don't iterate over the dependent projects.\nI would like to add this functionality. I'm shooting for the 0.5 release but there might be enough other changes in that release for it to wait for the 0.6 release. Lots of good/fun/useful things are coming.\n. I think this is fixed. If not please re-open.\n. @JanSichula Prior to glide 0.5.0-beta1 I don't think glide will work on Windows. At least not out of the box. It was dependent on shells being there which is very Linux/Mac/*nix.\nglide 0.5.0-beta1, which is designed to work with go 1.5 and the new vendor setup coming as part of Go itself, should work on Windows... sort of. I tested it today and it worked except for the command prompt colors which are still shell based. Instead of colors windows users see some funny characters. That needs to be fixed.\nBut, glide 0.5.0 isn't going to be backwards compatible with previous versions. That's because go 1.5 is making a change and we're embracing and supporting it.\nI'm going to leave this open as I work out the remaining Windows issues.\n. Glide 0.5.0 is out with a Windows release. Please open a new issue if there are still Windows issues. I hope everything works well.\n. @JanSichula I looked at what it would take to make glide 0.4 work on windows and it's a non-trivial amount of work. If it were easy I would make bugfix release. I'm happy to make things work on windows. When you're ready to go in on Go 1.5 I hope you'll consider using glide for your dependencies.\n. Yes! As a user of tools like npm and composer I know exactly what you mean. This seems like a good candidate for the 0.6.0 release.\n. I'm looking at two methods for version comparisons. One is strict to SemVer and the other is looser. I blogged about them recently at http://engineeredweb.com/blog/2015/go-version-compare/\n. For anyone wanting to follow along, the first step is to support branches and tags on Masterminds/vcs. I started the branch feature/references to begin that work (and it's started). It will take me at least a few days to work through the best way to do this for each of the VCS.\n. Started the work on the feature/semver branch.\n. To keep the details up to speed for anyone wondering, there is an initial version on the feature/semver branch. But, we're not all that keen on the constraints we can use and how this is working. I've been trying some existing semver libraries.\nDue to the lack in features I've started a semver library. The goal is to have many of the features you get in similar libraries in other languages. Once this is in good shape (in maybe a week) I'll update the feature/semver branch and we'll look at merging.\nThis is the big thing I'm working on at the moment for Glide.\n. #114 (a pull request from a feature branch) added SemVer support. Still needs to be documented but it's there.\n. With the basic docs being present I'm going to close this. Happy SemVer'ing.\n. @abourget thanks for the thoughts.\nQuick note, You might want to read up on glide up --import as it can read and import from Godeps and GPM. Might be a good idea to add gb-vendor support as well.\nI would like to see a common format for describing packages and their dependencies. But, this is going to get hard and I would love input on how to simplify it. For example, package managers for other languages (e.g., npm and composer) allow you to specify constraints around semantic versions in addition to checking out tags, branches, and commit id. This is something I'm hoping to support in an upcoming version (See #52 ).\nHow can we have a common format while supporting differing features?\nIf I read your comment correctly, you're suggesting the dependent project have their dependencies all pulled into your local projects vendor/ folder. Why would you want that? The current setup in glide pulls the dependencies into each dependent projects vendor/ folder. This keeps a similar separation and if I understand it correctly works similarly to npm in practice.\nIf two packages each have their own version of a dependency they should be fetching them from their own vendor/ folder. That means if my package depends on packages A and B and both A and B depend on different versions of package C it's ok. Glide sticks dependent packages in the right vendor/ folders and the compiler appears to handle this ok.\nglide pin is a command that will look at your immediate dependencies and let you pin them down.\nI'm not sure where you're going with the git merge -s subtree command. Is that for vendoring?\n. @abourget This week @technosophos added basic gb-vendor support with the commits 2821e2f11086236ed6179ff80e5685925cb97e7b, e4c80b23225fd9ec9c7aa3b80a83b3d6c8df12c7, and b390c8bf57f15096008d4d2903101bba7c2c3701.\nDoes this close this issue out?\n. Thanks.\n. Thanks for the feedback. I'm not sure about dropping the extension. When you do that IDEs and text editors can't pickup the type for do source highlighting correctly. Some of these tools will even do linting and find bugs for you and that would stop working.\n. We've not implemented that yet.\n. With glide -y FILENAME up you can do something like glide -y Glidefile up --import. This will be recursive, too. For dependent projects it will look for a glide.yaml file. The only one affected by -y is your local file.\nThis does mean that others won't be able to use your projects glide config as a dependency.\nI'm going to mark this as close as I think it's handled for now.\n. @saulshanabrook We need to handle sub-packages better. There's another issue open for that. I'd like to get that fixed soon.\n. There's a bug in getRepoRootFromPackage() (and the name is java-ish isn't it... glad it's an internal function). This should be a quick fix. I'll look into it on Monday or Tuesday.\n. I found the problem. It has to do with some of the security inside the github.com/Masterminds/vcs packages. When you try to checkout a repo like golang.org/x/net it uses a funny lookup. That url should be fetched as \"https://golang.org/x/net?go-get=1\" and it responds with something like:\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"go-import\" content=\"golang.org/x/net git https://go.googlesource.com/net\">\n<meta name=\"go-source\" content=\"golang.org/x/net https://github.com/golang/net/ https://github.com/golang/net/tree/master{/dir} https://github.com/golang/net/blob/master{/dir}/{file}#L{line}\">\n<meta http-equiv=\"refresh\" content=\"0; url=https://godoc.org/golang.org/x/net\">\n</head>\n<body>\nNothing to see here; <a href=\"https://godoc.org/golang.org/x/net\">move along</a>.\n</body>\n</html>\nThe meta tag go-import is the important one here. It provides the name you requested, the vcs type, and the location to actually check it out from.\nNow, try this with golang.org/x/net/context and you'll see the issue:\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<meta name=\"go-import\" content=\"golang.org/x/net git https://go.googlesource.com/net\">\n<meta name=\"go-source\" content=\"golang.org/x/net https://github.com/golang/net/ https://github.com/golang/net/tree/master{/dir} https://github.com/golang/net/blob/master{/dir}/{file}#L{line}\">\n<meta http-equiv=\"refresh\" content=\"0; url=https://godoc.org/golang.org/x/net/context\">\n</head>\n<body>\nNothing to see here; <a href=\"https://godoc.org/golang.org/x/net/context\">move along</a>.\n</body>\n</html>\nThe first part of the go-import content doesn't have the /context on the end so the values don't match. Trying to figure out how to best handle the security issue before fixing.\n. Note, this bug should only appear for anyone using one of the redirects. Sub-packages on github, etc should work ok.\n. So, if I understand it right the dependencies are vendored, that is part of the parent projects codebase rather than part of their own VCS projects. Is that right?\nIf so, there is no way to get a pinned version as no information is available.\nThe warnings may because the code is vendored and there's no local VCS information. I'll try to poke at this later today.\n. @abourget For glide update what do you think of a flag to tell glide to update the vendored version. If the flag is present it will remove the directory in vendor/, fetch the repo, set the new version, and then remove the vcs directory?\n. Since #62 is working with subtrees and 9ab138b fixed the issue of the wrong version (now it doesn't do a version if no vcs to get it from) and I added #66 to deal with the warnings I'm going to close this. If there is still an issue please re-open.\n. I've used both subtrees and submodules. I get how and when to use them and I've seen that they are a niche thing. I also wonder if it matters for those who vendor the dependencies in their app repo and aren't using git.\nWhat about a flow that allows for something like glide up --update-vendored (a short flag name, too) that checks if a package location exists but is not a VCS repo. If so, it deletes it, fetches the specified version, in the glide.yaml file, and then deletes the VCS directory (e.g., .git).\nI've figured out the basics of doing something like this but am less sure of the best way to track it. A flag? Something in the glide.yaml file?\nIt could be smart enough to only do this for the packages that are vendored and this should work with git subtree as well.\n. For reference, in case anyone else is following along...\nhttps://developer.atlassian.com/blog/2015/05/the-power-of-git-subtree/\nhttp://www.git-scm.com/book/en/v1/Git-Tools-Subtree-Merging\n. @abourget since this is a Git specific feature request and we now have a way to update vendored dependencies where git subtree could be used independently to push the changes to different locations I'm going to close this.\nIf you want to write a subtree add on (we handle add-ons in a Git style) I'd be happy to list it in the Readme and share its existence. I'd like to keep the features in Glide itself as being VCS agnostic (as best as possible) and I don't foresee @technosophos or I creating this ourselves.\nThank you for this suggestion. It caused me to look at this problem in a new way which lead to my view (and bug catching) around vendoring.\n. Using this script against the latest mater I got\n[INFO] Found reference to mama\n[INFO] Found reference to papa\npackage: main\nimport:\n  - package: mama\n  - package: papa\nI didn't add the package boo but it also misnamed it as main.\n. I moved the boo directory inside a foo one. Other than that the same as the script above with the latest on master and I get...\n[INFO] Found reference to mama\n[INFO] Found reference to papa\npackage: foo/boo\nimport:\n  - package: mama\n  - package: papa\nDoes this fix the problem? Or, is something else still going on?\n. It should be working. Can you provide any error messages? Is your project in the GOPATH and you have the environment variable GO15VENDOREXPERIMENT=1? Do you have an example?\n. I took that yaml file and created a package with a glide.yaml file at https://bitbucket.org/mattfarina/glide-bitbucket-example. When I run glide up from the root of this code (when it's cloned to $GOPATH/src/bitbucket.net/mattfarina/glide-bitbucket-example) it just worked.\nI can't seem to replicate the problem. Can you provide some more detail?\n. @gedw99 If you look at the glide.yaml file in the repo you'll see github projects.\nyaml\npackage: main\nimport:\n  - package: github.com/pilu/traffic\n    repo:    https://github.com/pilu/traffic\n    vcs:     git\n  - package: github.com/pilu/config\n    repo:    https://github.com/pilu/config\n    vcs:     git\n  - package: github.com/Unknwon/bra\n    repo:    https://github.com/Unknwon/bra\n    vcs:     git\n. @tony-spataro-rs thanks for the details. I can replicate the problem. Working on a fix.\n. @tony-spataro-rs can you pull the latest glide and give it a try. Use go get -U github.com/Masterminds/glide. The issues was on the VCS package and I fixed it. The issue was in the hg handling.\n. The problem may be in the format of your glide.yaml. file. You're missing the import: part. Your example above should be:\n```\npackage: main\nimport:\n  - package: bitbucket.org/ww/goautoneg\n    repo:    https://bitbucket.org/ww/goautoneg\n    vcs:     hg\n```\nTruthfully, you should be able to just do\n```\npackage: main\nimport:\n  - package: bitbucket.org/ww/goautoneg\n```\nIt should automatically detect the repo type from bitbucket.\nWhat version of Glide are you using? The latest on master or the last release? There's an issue with golang.org/x/[pkg] that's been fixed but not released yet. That release is coming soon when a couple other bugs are fixed.\nDoes that help?\n. I have a fix for the google.golang.org and golang.org/x cases. I'll try to get it in tomorrow.\n. I have another idea what it might be. This might be related to #66. I'm working on that today.\n. I just posted a fix for #66. Can you try getting that fix and trying again.\n. @piotrkowalczuk thank you for all those details. Now I have enough information to figure this out. I think I know what's going on.\n. @piotrkowalczuk The repo property is designed to handle actual git repos. golang.org/x/[package] and google.golang.org/[package] both use a go specific redirect system and it's not a VCS repo.\nIn this update I removed the automatic setting of the repo and vcs as they aren't needed by default.\nCan you try again without the repo and vcs being set?\n. I see what's going on...\ngoogleapi is a sub-package or the api package. So, something like this works...\nyaml\npackage: main\nimport:\n  - package: google.golang.org/api\n    subpackages:\n        - googleapi\nI added #71 to address this.\n. I think I see the issue. In our handling of the GOPATH we expect it to be a single path rather than a list of paths separated by a :.\nYou can see an example of how the Go build tool deals with it at https://github.com/golang/go/blob/91976aa676706d579331cb34090550e44f4505df/src/cmd/doc/main.go#L266\n. We have an idea for a fix. What would happen if we just assumed the first path found in the GOPATH?\n. I agree with @technosophos about emitting a message when the versions are different. That will help developers see the issues. This will be useful when we get to SemVer #52 (which is being discussed as a recommendation for Go packages, too).\nWe may need a common way to get tags/branch names for comparison purposes. That would need to live in https://github.com/Masterminds/vcs and work for all the VCS. There are clues in golang.org/x/tools/go/vcs to how we could do this.\nNote, I'd jump on the VCS work myself but that will likely need to wait a week or so as some other things have come up as a higher priority. Pull requests welcome.\n. Sorry for any confusion I caused. Any magic checking should go in later. Basically, what @technosophos said.\n. I'm going to try to find some time and give this a good review today (I hope).\nWhat we need is a base set of functionality. This should not try to solve all the problems here. Once a sound base is in we can iterate.\n. @interlock thanks for all your work on this.\nA couple things, and @technosophos can feel free to disagree with me here:\n1. I don't expect this pull request to be perfect. I see numerous place to fix non-ideal code or to add features. I'm happy to work on those myself in follow-up commits or to accept pull requests for those.\n2. I'm not sure about the name --delete-flatten. Should it be just --flatten?\nI'd like to wait for @technosophos to provide feedback before merging this.\n. @technosophos @interlock I'll merge this on Tuesday. Given that people pull directly from the tip of master to use Glide and we're about to step into a holiday weekend in the US (where I will be offline) I'd prefer to wait until then. It just seems safer.\n. @interlock thanks for the feature. This will be useful.\n. This was fixed via b78f4d78775e1f9c345ef76e16494f683087bd14\n. There are problems that can crop up with nested dependencies the way Go lets you. This is part of the way Go works right now. To provide a fix we currently have a pull request at #70 for issue #55.\n. I think there is a gap between how it's implemented and what's expected.\nI \"think\" the expectation is that if you set flatten to be true at the global level all dependencies are all flattened unless a sub-file opts out of flattening it.\nIt's implemented that only those explicitly listed in the top level file are flattened. Any not explicitly stated are not flattened.\n@technosophos shall we flatten all the things if set to true?\n. Let's make sure the documentation is crystal clear\n. Thanks for such a great bug report!\nThe issue is in the go/build package and how it looks for packages. We'll need to deal with the situation where no $GOROOT is set. The go toolchain has diverged from this package.\nI'll fix this in the next day or two.\n. This is a bit complicated and I need a little feedback.\nWe discover the imports using the go/build package. This package knows the environment including the $GOROOT which it picks up from the environment. If your $GOROOT isn't set there will be errors.\nSo, I'm confused how you got this error with the default installer. I tried it with both the 1.5 and 1.5.1 installers and was unable to reproduce the problem. When I intentionally misconfigured my $GOROOT the go tool gave me errors.\nCan you try this again with 1.5.1 which was just released? There was issue with the go/build package relating to the $GOROOT that was fixed in this release.\n. @janeczku I've installed Go from the installer on golang.org and tried glide guess without an issue. I'm having trouble reproducing the problem.\nI'm using the tip of master. Which version are you using? Is there something else I should be looking at?\nDependencies are basically imported using go/build which knows the right location for the GOROOT.\nI'm having trouble tracking down your problem. Any additional help would be immensely appreciated.\n. @janeczku I finally figured it out. The way to test this is to use glide built from a homebrew installed Go on system where Go was installed via the installer on golang.org. This is specific to the binary distribution method. The binary appears to have the wrong default $GOPATH when one is not set.\nI think the fix for this is going to require us to create our own import context rather than using the default one in the go/build package.\nThanks for being patient with me while I figured this out.\n. @janeczku thanks for starting this.\nI'd like to see a tweak to this. There are lots of times where $GOROOT isn't set and it's not required to be set. We can do something more intelligent.\nInstead, it'd like to see a context builder as a utility function. It could be similar to the defaultContext function from the go/build package. Instead of getting the $GOROOT and other environment variables from the runtime package it could use the go env [VAR] command to get them (e.g., go env GOROOT). Or, if it's faster just parse the output of go env (without the variable name) to get the needed information.\nThe reason I suggest it as a utility function rather than on every run of Glide is because of the calls to the go program. Limit those to only the times it's needed. Essentially lazy load the information.\nI filed golang/go#12567 to see if we can get easier access to the data. But, that wouldn't be for awhile and we can tackle this now.\n. I'm reviewing now and testing some situations out (e.g., Windows)\n. @janeczku can you try the latest (0.6.0) to see if this is fixed.\n. Thanks\n. I know what the issue is. Will fix it soon.\n. Now that Masterminds/vcs#3 has been fixed can you try this again and let me know if it's fixed. The issue was in that project.\nIf you grab master go get -u github.com/Masterminds/glide you can test it instead of a binary. If you already retrieved it that way you may need to go get -u github.com/Masterminds/vcs first to get that fix.\nBasically, Update() on a git repo needed to only pull when not in a detached head state. Pulling in a detached head state causes the error you saw.\n. @technosophos should we do a new build? Maybe a 0.5.2 release? The change was in a dependency so the only change for those using a binary would be the CHANGELOG. But, it would help anyone using a binary copy rather than getting via go get.\nThoughts?\n. Note, i've tested the fix and everything appears to be working.\n. 0.6.0 is tag and being released. Closing with the release.\n. @itsjamie if the ref can't be checked out it will, today, provide an error. We don't silently fail.\n. The latest codebase now takes no ref as being either the latest (svn) or the tip of the default branch.\n. @derekdowling flattening is now automatic and doesn't need to be enabled for two reasons:\n1. That's the recommendation from the Go team and those who've been working with the GO15VENDOREXPERIMENT.\n2. If you won't flatten you can easily run into problems. Here's an example.\nBecause of these there was a move to always flatten in Glide.\n. @nii236 those are commands on the tip of master and will be in the 0.6.0 release out something in a matter of hours (hopefully). If you want to run the tip of master you can install glide with go get github.com/Masterminds/glide and use it from the same place other Go tools are installed.\n. @nii236 Thanks for the bug report. I'll take a look at this case. I have an idea what's causing this error.\n. @nii236 You are right that the location for the .a files is important. When the GO15VENDOREXPERIMENT is enabled the go tool looks in the vendor/ folder, then the $GOPATH, and finally the $GOROOT for a package. Is your install not finding the .a files in the vendor/ folder?\nWith the vendor/ folder multiple dependencies can also have share a dependency but have different versions. For example,\n- test\n  |- main.go\n  |- vendor/\n     |- foo\n     |- bar\n        |- vendor/\n           |- foo\nIn this case both foo packages exist and can be different versions. The versions here could be different from the versions in the $GOPATH, too. The .a files need to be able to account for all these differences.\nThe go tool is \"supposed\" to be smart enough to get the right version from the right place without you needing to use an import path like import github.com/nii236/project1/vendor/github.com/UserName/Repo. In the above example main.go importing of foo would get it from inside the vendor/ folder without vendor/ needing to be in the import statement.\nIf retrieving the appropriate .a files isn't happening from the vendor/ folder in the same way there is a bug somewhere. Possibly in the go tool itself.\nThe go build command tries to detect when a package is in the vendor/ folder and use the appropriate version.\nDoes Gocode autocompletion work for the vendor/ folder, yet?\n. @gdm85 thanks for bringing this up. Can you share the details about your environment and how you installed glide? If you run go env it will give a bunch of useful details. The OS and install method are important. For example, if you are on Mac and installed go with the package install from golang.org it makes a difference compared to being installed with brew.\nAlso, what version of glide are you running (can get with glide --version)?\nNote, the OS/install method issue (see in #76) is fixed on the tip of master. Just tying to diagnose what you're seeing.\n. @technosophos I'll do a 0.6.1 today.\n. @szank thanks for bringing this to our attention.\n@technosophos I was poking at the docs for codec and it does talk about using unsafe.\nI'm wondering if build flags is a good thing to grab as a string (as opposed to something like unsafe as a bool). It could be used to also grab constraints such as the OS/Arch as well (compared to the current filter method).\nThoughts?\n. @Unknwon we care. We just have a few higher priorities. The highest is cleanup the codebase to 1) remove old unused code and 2) make the internal architecture easier for people to contribute.\nOnce that is done doing the tags will be easier for me or someone else.\n. So do I\n. @Unknwon Glide 0.9.3 (the latest stable release) scans all build tags to pickup all possible dependencies. So, Glide does capture all dependencies needed including those needed to cross compile.\nTechnically, Glide tries to scan all the source files no matter the build tags. If there is an error (such as two packages with different names based on differing build tags - this is a real world case) is detects the build tags and performs a multi-pass to scan the different tag combinations. This way it can pick up all possible dependencies.\nWhat more are you looking to do?\n. @Unknwon I can help with these...\n1. We want to have some version information outside of releases. Ideas on how we can do this are welcome. There's an issue for it at #268.\n2. I just ran glide up on gogs using the tip of master for Glide and it found github.com/mattn/go-sqlite3. There was a bug that prevented this which I fixed a couple weeks ago. The latest release and the tip of master have this fixed. Can you use go get -u github.com/Masterminds/glide to update your local version or download the latest release and try again?\n. @Unknwon glide install does a few things none of which are calls to go install.\n1. If there is a glide.lock file Glide will fetch, using github.com/Masterminds/vcs, each of the repos and set them to the locked/pinned version. We use this library to handle version control systems because it allows us to work with branches and some other features not supported by go or golang.org/x/tools/go/vcs.\n2. If there is no glide.lock file an glide update is performed.\n   - This scans the local codebase looking for dependencies. Scanning uses go/build.Context.ImportDir() on the directories in the local codebase. It sets UseAllFiles to true so that all dependencies are found for all build tags. This way all dependencies are caught for all environment. If there is an error using UseAllFiles there is a fallback that scanner that looks at all the build tag variations to determine the dependencies.\n   - By default it then follows the imported dependencies scanning the explicit dependencies for dependencies. It scans the whole tree and fetches any missing dependencies along the way.\n   - When a new repo is fetched it looks for Glide, Godep, GB, and other config files to try and figure out the versions to use.\n   - There is a flag to fetch all possible dependencies instead of the import path followed. Directory scanning rather than import scanning for each found package. This is useful for some development situations.\nWe started using more of go but found the features we wanted to implement required some custom development.\n. @Unknwon it fetches them and checks out the right version. It doesn't build package .a files.\n. @itsjamie thanks for bringing this up.\nWhile I have my opinion on workflow and i'm sure @technosophos does as well, I'm not sure Glide should enforce just one. Instead I'd like it to enable developers. Sometimes there cases, even edge cases, that you may need something like this for.\n@technosophos I kinda like your suggestion. I'm trying to come up with some real world use cases it satisfies. Any pointers on Ruby and Elixir I could look at?\nFor test, maybe you have a mocked monitoring library or some other tool pulled instead of the real thing. I'm not saying this is ideal but may provide some reason for it.\n. @itsjamie great point on the recursive case!\n. No objections\n. @technosophos I think making breaking changes is OK right now. We're pre-release and the GO15VENDOREXPERIMENT is opt-in. It's early adopters who are using it. It would be better to make the change now than later. I'm for it.\n. Now that #156 has been merged and we have a lockfile I believe this is closed. If not please feel free to reopen.\n. @nizsheanez Thanks for the bug report.\nThis relates to #71.\nThis particular case is caused by the go-get redirect system. Go uses a custom redirect system to have references such as golang.org/x/net that actually live on github.com.\n. @kalbasit I just tried the glide.yaml file you shared here using glide 0.6.1 (latest release) on Mac.\nGlide checked out the repo at https://github.com/kalbasit/go.notmuch.git to the location github.com/zenhack/go.notmuch. It did checkout your fork and put it in the path location of the package name (the original).\nThe .git/config file has this in it...\n[remote \"origin\"]\n    url = https://github.com/kalbasit/go.notmuch.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\nAre you seeing something different?\nNote, the path in the vendor/ directory is that of the package name. This is important so Go resolves everything.\nDoes this help?\nIf you're still seeing the issue please provide some more detail. I'd like to be able to reproduce it.\n. I'm glad you're not having the issue any longer. Thanks for letting us know.\n. @erbridge That bug was fixed this morning. Can you install from master (e.g., go get -u github.com/Masterminds/glide) and see if that fixes the problem?\n. Thanks for the feedback.\nThe current behavior appears to be that present says yes if the package is in either the GOPATH or the vendor directory. @technosophos is this what it was supposed to do?\nI like the idea of telling you if the package being used is in missing, in the gopath, or in the vendor directory. I've personally run into the problem of using a package in the gopath when I thought it was in the vendor directory. Version issues ensued and was a headache to troubleshoot.\n@technosophos before I mark this as an enhancement do you have any feedback?\n. As I think about this there are ideal and practical elements at work.\nIdeally, Glide operates in a similar manner to NPM, Composer, Bundler, and the other package managers. In these cases you have a manifest file that describes the dependencies and the versions to use. Installing or updating sets up the dependencies with the specific versions and they are usually set with SemVer. This lets you manage the versions of dependencies in use well. This is how Glide was designed. For projects that don't specify a version and are using Git, which is the case for most packages, the tip of the default branch is the set version.\nPractically speaking, most Go packages are not SemVer or versioned at all. This is problem enough there is a proposal to recommend projects start using SemVer in the Go proposal system.\nIf projects managing their dependencies are using these unversioned projects and vendoring their dependencies it makes sense they may only want to update one at a time. This only really makes sense if they are vendoring the dependencies, that is checking them into the local project repo. Outside of vendoring this becomes an issue because the next person to checkout the project and glide up will get the tip of all the projects rather than the same versions previously used by a different developer.\n@tve I noticed you're not storing the vendor package in the repo on go-boilerplace. If you're only updating one package what's the use case for that? I'm trying to understand the use case and expectation you have.\nOr, maybe there's a different angle I'm not thinking of. Can you enlighten me?\nThanks.\n@technosophos I'm wondering about updating in the vendored use case. Would it be useful to have this in glide or as a plugin?\n. I'm an atom user and I use it to develop glide itself. It sounds like you are using the go-plus community package and you have the format tool set to goimports. That's the common setup that causes the import rewriting. Is this right?\nIt looks like atom isn't picking up the GO15VENDOREXPERIMENT meaning it's not turned on.\nIn Go 1.5 the GO15VENDOREXPERIMENT needs to be enabled. It's off by default. The plan is for it to be on by default in Go 1.6. Do you have this enabled in your environment? You'd need the environment variable GO15VENDOREXPERIMENT=1 set along with launching atom from the command line (to open the app for the first time not just to open a new project or file in it). This causes atom to use this environment variable setting.\nIt doesn't appear that go-plus has the ability to enable this outside of launching atom this way.\nCan you test this and let me know how it goes?\n. I've not experienced the atom difficulty you are. I use the latest atom with go-plus and have no issues. I wonder what's causing the issues. You may want to open an issue on go-plus or dig around in their docs/issues. You may not be the first person to experience this problem.\nGlides recursive handling looks for glide.yaml files to perform the imports. If the --import flag is specified on glide up it will work with gb, godep, and GPM files as well.\nWe've talked about a flag to introspect each package to pull its imports as well but have not done so yet. If you'd like to file a separate issue asking for that we'd look at it.\nSince the main issue is an atom one I'm going to close this.\nThanks again for talking with us here about this. We're happy to be helpful.\n. @jchauncey the latest release of glide is 0.6.1 which is reflected in homebrew. Are you not seeing that version on install?\nThe tip of master is currently 9 commit ahead of 0.6.1 and we're working on the 0.7.0 release.\nWhat are you seeing and what are you expecting? We're you expecting the tip of master? I'm happy to try and help. Just trying to understand what you're looking for.\n. @jchauncey no problem. This has happened to me, too.\n. @hkjn thanks for reaching out. This is one place we can do better with our error messages.\nDo you happen to already have github.com/golang/glog in your vendor/ folder? Does the directory vendor/github.com/golang/glog already exist?\n. We could capture the output from the VCS command and display it when there's an error. All the parts are there to do that we just need to glue them together.\n. The gist is that repo instances should have a real logger attached before performing a command and then if there's an error write the contents of the log to sdtout. There is a logger property that's supposed to be a Go logger.\n. I just merged in the change by @technosophos and tested it on the tip of master for glide. This provides a much more detailed message now.\nPlease re-open if there are further issues.\n. @technosophos let's not consider the public API frozen yet. It will annoy a few people but we're prerelease and GO15VENDOREXPERIMENT is still opt-in. This is a good time for us to make useful changes and annoy as few people as possible.\nThe only public things I can find calling the cmd package are forks of glide.\n. @jonboulle thanks for catching that and the pull request.\n. Thanks for the feedback here.\nMy original thought was to specify a version as a flag. For example, glide get github.com/Masterminds/cookoo --version 1.2.0. But, over on #96 there was a discussion of retrieving more than one dependency with glide get. That changes how you can handle dealing with versions.\nYou are very right that not specifying a version leads to unreproducible builds. This is an area we'd like to improve the experience.\n. Should --pin get the latest commit on the default branch or the latest released version?\n. With #156 being merged glide get will pin by default but you can't specify a version in the package path, yet. So, I'm going to leave this open for the time being.\n. Thanks for the feedback. There's a discussion going on #85 around modifying the way glide pin works to make it more useful. Can you take a look at the suggestions there?\n. Command output not prints to stdErr, which is common. Any output that should be passed to another command goes to stdout.\n. @albrow thanks for the feedback. I can fill in a little detail here.\nFirst, if you're already at the right reference it should skip updates. That's on the feature/semver branch right now via 1ec3886b9bc7cd135d0f7faa5aaa6c8b6b21b923. I expect that will land on master in the next couple weeks before the 0.7.0 release.\nWe'll need to poke at glide get to see why it's checking all the things. Thanks for pointing that out.\n. I had not thought about this before. What's happening here is the go/build package has two separate things for imports. Imports is for your code and TestImports is for any imports in test code. We are just using the former and end up missing test imports.\nShould test imports be on the Imports list in the yaml file or should they be on devImports?\n@technosophos any thoughts on this?\n. I've added #320 to track resolving test imports.\n. Please see #461 which is trying to fix the management of test imports. Reviews appreciated.\n. Fixed. Tip of master now handles test imports.\n. @gedw99 This is a git thing. Let me explain.\nWhen git sees another git repo it treats it as a submodule which is what you have here. This is not how we recommend you do things. Submodules can be powerful but can add an extra complication.\nWhat we usually suggest is that you add vendor/ to your gitignore. Then the packages aren't checked into your local project but are instead ignored all together. If someone wants to get the packages they can run glide install and get them. They can even get the versions you specified in your glide.yaml file.\nif you want to stored the packages in your projects vcs, also known as vendoring, you can remove the .git directory form each project in the vendor/ folder. When you add, commit, and push the files they will show up in your project. When you run glide up it will see that you vendored the packages and check for updates. It will need to clone the repos to compare for updates so updating becomes a more expensive operation.\nHope this helps.\n. @gedw99 you left the .git directory in each vendored project. That causes git to see those as submodules which caused what you saw. If you don't want that just delete the .git directory from each project you pulled down into the vendor/ folder. Commit those projects to your codebase rather than using submodules. Then you can keep using Glide to manage updates as it will see that you vendored the code and handle it.\n. Adding the --insecure flag makes sense. there are a few places we assume https://.\n. @sandeeplinux I added the --insecure flag. Can you try the latest code on master go get -u github.com/Masterminds/glide. If this doesn't work please re-open the issue.\n. @technosophos what will it take to close this now that the flatten branch has been merged to master?\n. @dnephin what would your ideal set of options be? Docker image? Straight binary? I'm happy to try and comply with more options.\n. Thanks. When I do the 0.7.0 release I'll rework the options.\n. @sandeeplinux what command were you trying to use the --insecure flag on?\n. I think the issues are are with the git submodule workflow.\nI typically suggest two different workflows.\n1. Don't check the vendor folder in and set the ref in the glide.yaml file. This lets glide manage the versions of dependencies in each environment.\n2. Checkin the vendor/ folder but don't keep the VCS (e.g., .git) directories. This avoids submodules. Then glide.yaml can have the references and will still manage the updates. Glide will detect the stuff is versioned and update to the latest or the referenced version when glide up is run. It will take longer since it needs to get the repo rather than just the changed updates.\nGoing down the submodule route will bring in the submodule commands. I'm not entirely sure the best way to do that since I don't use submodules. That's the referenced stuff, as I'm reading it, from the original issue description.\nDoes that help? I know I'm not answering your exact question. I'm not sure the best way to use submodules.\n. @fervic if you use glide to track your version (reference or in the near future semantic version) than I would not use submodules. Instead let glide manager your version.\nI would be wary of checking in vendor/. Be careful how you do so and Glide is going to try to flatten out vendor items. Let me explain...\n- $GOPATH/foo\n    - vendor/\n        - a\n        - bar/vendor/a\n        - baz/vendor/a\nIn the above structure the package a shows up 3 times. For the project foo and for two of the included projects by foo. Go will see these as 3 different packages. Each one will be included in the binary. Instances of objects/types from one are not directly compatible with the others even if it's the same version in each case.\nThe way Go searches for the right a package to use it by looking up the directory tree for it being in a vendor/ directory. If it doesn't find it there it tries the $GOPATH and then the $GOROOT. If a is removed from the foo and bar projects it will use the one in foo/vendor. This is what we call flattening.\nIf all the projects check in their dependencies to the vendor/ folder and are then included by other projects there is potential for issues. We suggest just keeping dependencies at the top application level. Glide can flatten dependencies recorded from Godep, GPM, and gb as well.\nIf you do choose to check dependencies in I would suggest removing the VCS (e.g., .git) directory and letting Glide manage the version.\nDoes that help?\n. I see where you're coming from now. There's a difference between theory and practice. Let me explain and possibly provide a path forward.\nGlide is doing this for you because you're using Git. Glide works with git, svn, bzr, and hg. It's not tightly coupled to git but works with it. So, in theory it's up to the user to manage their vendor/ directory the way they would like for their VCS of choice.\nGlide doesn't rely on submodules. Instead it's like composer or npm in that storing the packages or not is left as an exercise for the end user.\nIn practice there are cases where things like this can happen that aren't entirely clear. Given the VCS agnostic nature of Glide, how would you suggest conveying some good practices? There is a section in the FAQ about checking the vendor/ folder into your VCS.\nNote, pinning to a commit will become less necessary in the future. We're going to start supporting semantic versioning in the future. Thoughts?\n. @fervic there is a proposal for the Go community to adopt semver. Before moving forward they want some systems to implement semver. We already have gopkg.in but need more to move this forward. Some things already use it.\nCommit ids really aren't useful enough. If someone releases a security release or bug fix and you only have commit ids will you know if you have a version with that security release or bug fix? This is an issue for package maintainers on systems like Ubuntu (according to Dave Cheney). So, we are looking to help move this along.\n. First, this isn't about my opinion. More a matter of something we need to take into account for anything we craft.\n\nNow that you\u2019ve seen the difficulties of the submodule system, let\u2019s look at an alternate way to solve the same problem.\n\nThis is from the Git documentation. Many find submodules to be difficult to work with and they can be a source of confusion. I learned this answering questions about submodules in the past. Anyone attempting to leverage them I would suggest paying attention to your audience to make sure they are a good solution.\nAgain, I'm neither for or against them. More, I'm aware of the usability issues that can happen and how that affects a project.\n. @stevvooe and @sym3tri A few things...\n1. You can't just remove the .git directories. Go and Glide support SVN, hg, and Bzr as well. Any tool that removes VCS directories should support all four.\n2.  If the VCS directory isn't present Glide detects that and can update the code.\n3. That means the missing element is something to strip the VCS directories in the first place. I'm not sure if that should be in Glide proper or a plugin. @technosophos and I need to chat about it. Glide can have plugins in the same way Git does. If someone created a plugin I would link to it. I would ask that it be built to be cross platform for Windows support. If you want to make a case for it to be in Glide proper I'm ready to listen.\n. Glide now:\n- No longer stores and vcs metadata in the vendor/ directory. Only exported sources.\n- Previous commands to manipulate the metadata, such as --strip-vcs, are removed.\n- If you want to mangle the material in vendor/ there is the glide-vc plugin.\nBecause of that I'm going to close this issue. If there are continued discussions please open a new issue and we can continue that conversation.\nThanks for all the thoughts here.\n. I've seen this. there is something going on here.\n. @akutz Normally a change this big wouldn't land until a bug like this is worked out. I didn't notice it until after the merge and what's happening is it's taking a long time. This needs to be fixed soon. If @technosophos doesn't poke at it first I'm going to look at it tomorrow.\n. @technosophos I ran time go run glide.go --debug up on the glide codebase before and with 40a9a6b. Before the commit it took 3 minutes 9.06 seconds. With that commit it took 9.41 seconds. With the scanning it's 20x as long on glide which isn't a large codebase.\nThis may be better behind a flag.\n. We've fixed the system that scans unmanaged code so it is quite fast now. Used kubernetes as a test case due to its size. So, I'm closing this.\n. @shtripat you can get from the tip of master or wait for the 0.8 release tomorrow.\n. @dolmen I'm not sure what the windows compatibility issue is. If you're using cygwin it shouldn't be an issue. ${} is the syntax or variables in a Makefile. I've tested this on windows and have not found an issue.\nCan you explain the reason for the switch in more detail. What am I not seeing?\n. @technosophos soooo... I've not implemented the version property yet. Switch to ref and try again. I'm going to get to version next. I merged the semver work in before doing that so you'd be able to use it (with the bug fixes) sooner.\n. As of commit bb1a93462101978c3fcb1f9a44b8d2d940ed8cf1 this should now be fixed.\n. @technosophos This was an issue in github.com/Masterminds/vcs. Version 1.1.3 (released on Wednesday) fixed that issue. Can you update, rebuild, and try again?\n. @gdm85 I believe that issue is now fixed.\nThe branch we tag from is master. In the next couple weeks we'll have a pretty big release with the fix for that included. Have you tried to get the latest from master?\n. @gdm85 I thought I built the 0.6.1 release from the tagged source. I'll need to look into that.\n. The branch issue is unexpected. I'm able to duplicate your problem and I will work on this next. This was caused by the semantic version support that recently went in. I hope to have a fix for this on Wednesday. Sorry about that.\n. @akutz This should be fixed. I tested it the glide.yaml file you shared above and it's working now. If there is still a problem with this please re-open the issue.\n. @akutz thanks. I was just running glide up to see if I could reproduce the issues. I'll look over there.\n. @leonfs what version of glide are you using? You can run glide --version to get the details.\n. @leonfs I believe we've fixed that on master already. A new release (0.7.0) should becoming next week that will include that fix. We have a couple features we want to land before we push that out.\nCan you try glide from master?\n. @tcurdt By default Glide only resolves the import tree referenced in code. So, it looks at the packages your codebase imports, gets their imports, scans them, and so forth. All possible packages are not fetched, by default.\nImagine you import a single package from kubernetes. Do you want to fetch the complete tree for all of kubernetes or just for the package you imported? The former would be a lot of extra work and code not in use.\nIf you use the --all-dependencies flag on glide up it will get all possible dependencies in the tree.\n. @ansel1 When glide was resolving top level packages that weren't used in the code it was seen as a bug which is why that behavior was fixed.\nLet me ask you this...\n- Are you checking in migrate and it's deps to your repo or just need to fetch it on demand?\n- Are you always wanting to track the tip of migrate or keep it at a certain version?\n. I've run into this exact problem with here and with other tools. Thanks for the contribution.\n. @leonfs thanks for the feedback. We're trying some new \"caching\" strategies. We'd like glide to be smarter. when would you like this smarts to work? Any thoughts?\nRight now it tries to put or use a copy in the gopath. If it can't it tries in a cache folder.\nI'm very open to thoughts on this. We can use flags to provide changes.\nWhat do you think and why?\n. @leonfs I've been unsure of the aggressive caching being on by default. That included pulling things to the $GOPATH by default. I've updated the aggressive nature to be opt-in. In the 0.8.0 release we'll look at improving this. See #128 as an option.\nWhat do you think?\n. @gedw99 unfortunately, doing it as a tree breaks things. I posted an example at http://github.com/mattfarina/golang-broken-vendor. We tried a tree first and ran into practical issues.\n. Just prior to the release of 0.7.0 I fixed this issue. If there is still a problem with the original issue please let me know.\n. @milosgajdos83 Hi. You most certainly can use Glide where there are no Go files in the root of the repo.\nThe go get command is used to programmatically add packages to the glide.yaml file. So, running glide get github.com/Masterminds/vcs would add that package to your glide.yaml file as well as download it to the vendor/ folder. This command is similar to go get.\nIf you want to install the packages listing in the glide.yaml file and set them to the listed version use the glide install command.\nDoes that help?\n. @milosgajdos83 Sorry it took me a few days to respond. I was traveling for work and a bit sporadic at handling these things.\nA couple things might help...\n- If this is not an application but rather a collection of packages I recommend not storing the source of the external packages in your VCS. If you do store them there (whether you use Glide or not) there is potential to have build problems. I put an example and explanation at https://github.com/mattfarina/golang-broken-vendor.\n- You can use a single vendor/ directory for all the dependencies of all your sub-packages and can manage it with Glide. If seen that done before.\nDoes that help?\n. Closing due to lack of activity. If the problem still persists please re-open the issue.\n. FYI, I'm looking at how we handle config files. Looking at a couple ways to change things up to make it easier.\n. @h2non There are a couple things going on here. First, with the yaml file...\n1. Isn't it that case that a majority of the time Glide is creating it for you?\n2. What happens when you have a glide.yaml and glide.yml file?\nThe delay on acting on this is because we're looking at moving to a json spec. It seems folks would prefer json (and don't worry we'll fall back to the glide.yaml). I'm working on github.com/mattfarina/pkg. When I incorporate that handling I'll rewrite that code. This is my next big change to Glide.\nAny thoughts on json v. yaml?\n. @gedw99 did you have the GO15VENDOREXPERIMENT turned on? That needs to be enabled for Glide (and will be on by default in Go 1.6).\n. You're right that this is a documentation bug. make bootstrap retrieves dependencies to the vendor/ folder (for the vendor experiment) and make build will create the Go binary. make install will build and put the glide app in /usr/local/bin.\nI'm happy to update the README but it might be a day or two. Pull requests are always welcome.\n. Did you perform a make bootstrap before a make build?\n. The issue is it assumes there's always a home path. This happens when the os package can't detect the home directory or \"\" was passed in as the home directory.\nIn the short term you could set the environment variable GLIDE_HOME to the users home directory.\nI'll release a fix in the next few days to gracefully handle no home directory.\n. @technosophos If you do that it will put a .glide directory in the current directory but otherwise it should work.\n. @technosophos seems we'll need some kind of recursion detection. I'm shooting for a bug fix release on Tuesday. Since we have an example I think we can fix it for that. I'm happy to take a shot at it on Monday unless you want to tackle it.\n@suguru thanks for bringing this to our attention.\n. This PR was incomplete and is no longer compatible with the current codebase so I'm going to close it. If someone wants to pursue this change we're happy to discuss it. Closing due to the state and it's comparison to master.\n. Good catch. Found the issue (I think). Will fix this next.\n. I think this is happening as part of the flattening process. The dependency list is turned into a map and then back into a slice here.\n. @kyteague can you test the latest on master. I believe this is fixed. Want to make sure you're not still seeing the issue. If everything is good I'll release 0.7.2 on Monday.\n. @kyteague we talked about sorting them in alpha order or some other useful manner. We have a problem in Go right not that makes that difficult. Let me explain because you may see something we don't.\nMost Go packages don't provide a useful version, such as SemVer. Instead they just use commit ids. This is a big difference between the Go community right now and every other language community.\nSo, if you have multiple declarations of the same dependency to different commit ids who wins? For example, I was looking at kubernetes the other day. It's dependencies and it's dependencies dependencies will pull in the same package at different commit id versions. One of them wins but which one?\nRight now we take the stance that the first one wins and we tell you about any conflicts that arise. You normally only see this on complicated projects (like deis/helm). If you want a different one to win you move it to a higher point in the glide.yaml file and it will win.\nSo, order can matter on a complicated project. Especially with nested dependency declarations and it's not pretty because of all the commit ids being used.\nI've got some ideas to solve the problem and then you can order by alpha. But, we need to solve that first. Any ideas?\n. I've been trying to replicated this problem. For example, I tried the glide.yaml file here along with the commands you suggested and did so on OS X 10.11. Are you still seeing this problem? Any pointers on how I can reproduce it?\n. @imikushin what's the use case? Why prune all the packages that aren't specified at a more detailed level? \"As a developer, ....\"?\n. e370601b1e2e44ac90e31bc887eafe3ba01699ca has glide update writing a lock file (glide.lock).\n. Anyone following along, now is a good time to test the feat/lockfile branch. The init, update, and install commands are all in working shape. Docs do still need updating.\n. This should remain open until purge has been implemented. The other elements are ready to be tested.\n. @imikushin thanks for the pull request.\nWe're working on a change for locking/pinning (#143 for details) and this includes prune functionality. I'd like to hold off a few weeks on this until we get far along in that so the prune feature can be tied to that. The branch that work is happening on is quickly diverging from master. We're trying to keep master stable because so many people pull from that directly rather than a release.\nThat ok for you?\n. This PR is no longer compatible with the current state of the codebase. A PR against the current state of the codebase (there were major changes) is something we'd be happy to look at. Closing.\n. @allan-simon thanks for pointing this out.\n@technosophos A couple things...\n- I created a feat/code-scanning branch for this work. We can have hundreds of clones per day (I'm guessing CI/CD) off the tip of master. So, I wanted to get the slowness out of the way so we can work it out.\n- It looks like code scanning is running on Go core packages (those in the GOROOT). For example, when I tried it on Glide it hung on the io package. Given the graph of packages used by io I was a bit surprised.\n\n- I created #146 to handle code scanning as a feature and linked in other issues I knew about.\nGoing to close this unless there is continued slowness.\n. Note, the code in ae478dcfd64a5cfe1892a6aab1d6639261484b1e happens to scan core packages (GOROOT) such as io. I've seen this be slow for some reason.\n. @technosophos I'm trying to figure out where the separation between glide init and glide up happens and what goes in the glide.yaml file. Will a glide init create an initial glide.yaml file and perform all the actions of a glide up? Are you planning that the glide.yaml only has the deps from the List Deps step near the start while the glide.lock contains everything?\nI ask for scanning because this has to do with how much scanning happens at what steps. Does the glide init scanning need to scan the dependencies? Or, does that wait until glide up?\nI have my ideas but I wanted to get yours.\n. @dopgm so, here's the thought right now and I'll relate it to npm/composor.\nWe create a glide.lock file. This is similar to npm shrinkwrap or composer.lock. If there's a composer.lock it contains the pinned versions (e.g., commit id or tag which is an alias to a commit id). composer install looks for a composer.lock file and if present uses those pinned versions.\nThen glide install looks for the glide.lock file and installs the pinned versions. glide update can be used to update the glide.lock file based on the versions or ranges specified in the glide.yaml file.\nFor projects that don't manage their own dependencies we get those and lock to a commit id. This way you install the locked version and it's always reproducible.\nOthers, like Rust (Cargo) and PHP (Composer), do this today. It also solves for packages that don't do anything special to specify their versions. We can still pin them.\n. Scanning unmanaged imports (and the lockfile) are on master now. Closing. If there's something else please let us know.\n. @gdm85 you are absolutely right. In the past week I was looking at strategies to handle errors.\n. I have some plans on how I want to handle this. I'd like to make the implementation clean. It will be a few weeks out though. I have a pretty big feature I'd like to finish first.\n. @paulmach thanks for bringing this up.\nThere are some fairly large cons that should be noted.\n- The codebase is no longer just the application code. It's the application plus a copy of all dependencies.\n- The repo will grow significantly larger.\nYou may be able to see my preference to not store outside dependencies in another projects repo.\nYou are right that the current bootstrap process isn't ideal because of versions. When 0.8 comes out we'll have something in better shape.\nWhile we have a glide.yaml file for glide itself we're trying to keep the tip of master installable. Is there something not working with go install github.com/Masterminds/glide today?\n. I'll talk with @technosophos about it. This is something we'll need to carefully consider.\n. @technosophos now that the --strip-vcs flag is in Glide should we start to vendor as outlined here?\n. This PR has become out of date and can't be merged. I've setup the same functionality at #352. Due to the stale nature of this request I'm going to close.\n. @krancour thanks for sharing this issue. Glide shouldn't panic but instead share an error. So, I'm going re-open so we can clean up the experience.\n. @dnephin what version of Glide are you using and how are you getting it? What's the image this is running in? And, do you have an example project I could test?\nGlide drops down to the VCS tool, in this case git, to handle its operations. Is the user running Glide root or a different user?\n. @dnephin thanks!\n. @umayr the go tool requires code be in the GOPATH. If you look at the go source you'll see it's required. This is a byproduct of the way Google organizes their code. We used to try and do project based with the go tool but ran into lots of issues.\n. @colemickens what version of glide are you using (glide --version) and can you share what you're glide.yaml file looks like? Sub-packages should work just fine.\n. #320 has been added to track resolving test imports to devImports\n. Test imports are being worked on in PR #461. Reviews appreciated.\n. Fixed. Tip of master now handles test imports.\n. We've made a couple passes on the readme with updates.\n. I've been having issues with the gopath copying myself. we need to do something about that.\nI'm considering:\n- opt-in to gopath copying.\n- making sure the gopath version isn't dirty. But, this won't find anything being ignored.\n- trying to introspect what's ignored or not along with dirtyness to figure out what to copy or skip. This would be complex.\nCaching and reuse are hard.\n. 8615f59981536a4f8a143e151f34f62208fb2294 made the copying from the GOPATH opt-in. This will be in the next release.\n. @rubenhazelaar any chance you can provide the exact error message text? That would help me find where the issue is happening.\n. @rubenhazelaar I just downloaded the 0.8.0 release from the releases page and tested on Windows. I had no issues. I'm not yet able to reproduce the problem.\n1. What version of Glide are you using. glide --version will provide that.\n2. Where did you get Glide from? Did you install a binary? Did you use go get to retrieve it?\n3. Can you open and edit the glide.yaml by hand?\nI'd like to be able to reproduce this problem. So far I've not been able to.\n. Ah, I have an idea what it might be.\nGlide supports the go tool. The go tool requires that all code be within the GOPATH. So, your project needs to be in the GOPATH (e.g., GOPATH/src/foo/bar). Glide will put code in the vendor/ folder in the project (e.g., GOPATH/src/foo/bar/vendor/) and the glide.yaml file should be at  GOPATH/src/foo/bar/glide.yaml.\nThe go tool does not support project based structures. It's heavily tied to the GOPATH which is a product of how Google internally manages code.\nIn your initial go was your code inside the GOPATH/src? If not that would have been the problem.\nIf you want a project based build tool you'd need to replace the go tool with something like gb.\nDoes this help?\n. @rubenhazelaar thanks for all the details. I'm glad you were able to get a working version.\nYou've given enough details I can try to setup a fresh windows 8 system and try to reproduce this next week. Thanks.\n. @rubenhazelaar one more question, which of the windows binary builds were you using?\n. I've been attempting to re-create this situation and have failed to reproduce the same problem. I've setup Windows 8 and the type of setup described here. Does anyone have more detail?\n. It doesn't scan for new dependencies on update in the local source. Just in the dependencies themselves.\nShould this be a bug to fix in 0.8.1?\n. Glide should not be detecting the stdlib packages. It should skip detection of those. Looking at your project I don't see something that would make it unhappy. I tried to see if I could replicate the problem and I can't.\nSo, let's see if we can get to the bottom of this. I have a few questions.\n1. What os/version are you on?\n2. Can you run glide --version and share that version.\n3. How did you install glide? Did you use one of the binaries, fetch and compile yourself, or use something like homebrew for mac?\nThanks.\n. @justinfx I just installed 0.8.0 from homebrew and cannot reproduce the problems on your project. I have a similar setup to yours on el capitan.\nWhat version of OS X are you on?\n. @technosophos I remember this one. I have an idea what's causing it now.\n. Good question. Right now the ignore property in the glide.yaml file is a list of packages to ignore. For example,\nyaml\nignore:\n- github.com/Masterminds/vcs\n- gopkg.in/yaml.v2\nDoes that solve your problem?\n@technosophos it may be a good idea to add a way to ignore directories in the local project.\n. With the merge of #240, which will be happening soon, Glide can walk just the imports being used and include those rather than walking the whole possible tree.\n. One master Glide only walks the packages used by a project instead of all the packages possible. Does that fix the problem?\n. @dmitris what version of Glide are you using? The behavior is documented on RTD.\n. @fschl There was a bug with ignored packages. Version 0.9.3, that was released last week, fixed the bug. Can you try again?\n. @dmitris are you still having issues.\nNote, #334 is currently in progress to exclude directories from the local codebase from scanning.\n. Since we have both ignore and excludeDirs I think this can be closed. If there is still an issue please re-open.\n. @kshlm While I take a look into this problem you may want to try to ignore property in the glide.yaml file. It is a list of packages to ignore fetching and is respected through the dependency tree.\nFor example,\nyaml\nignore:\n- github.com/coreos/etcd\nI'll try and reproduce the problem with the panic, which shouldn't happen.\n. I can reproduce this and I'll ship a fix in 0.8.1 which will be out in the next day or so.\n. Working with Go packages and versions is a bit complicated because there is technically no higher level \"project\" grouping. Version control systems group packages at a higher level and versions are at this level. So, you can't (and shouldn't) have two different versions of packages within github.com/coreos/etcd.\nWhen you use go get or the other tools that fetch dependencies they do so at the repo level. They have to get everything. Try cloning a subdirectory from a git repo on GitHub. It doesn't work that way. So, have to fetch everything from a repo.\nWe could be better with sub-package handling for cleanup and walking the tree. Our first priority is to cleanup some internals in Glide so it's easier to maintain and contribute to. Better handling will come.\nPart of the reason we have issues like this is the use of monorepos where clients and everything is in one repo. It may be easier for the developers (or they think it is) of the project. But, for consumers of things like a client it's harder. I had not run into such a prevalence of clients being part of the repo/project it communicates with until working in Go.\n. If we can accurately scan the dependency tree in use and only pull down those dependencies that would be a useful optimization. I welcome a pull request to add this in (with an opt-in feature flag initially). I don't see us adding this right away, unless someone comes in with a pull request, because\n1. It would change the way scanning works if we encounter projects from Godeps, GPM, and GB which glide can import from. While those systems have the ability to specify dependencies I've found in practice that they will include dependencies that aren't in their config files. Specifically, sub-packages. That means we'd need to implement a multi-pass system on those to accurately detect sub-packages. This is a bit of work.\n2. We are cleaning up the internals right now. We can reduce the code and complexing which will make it easier to maintain and for people to contribute to. After that we have a few highly requested features to implement. That means this is a little lower priority.\nI like this idea and have marked it as an enhancement.\n. There are two things here.\nFirst, there are all the packages in something like golang.org/x/crypto. We can't avoid pulling down all the different crypto packages because they are part of the same repo. The go get tool fetches them all today.\nSecond, we could be smarter about pulling down dependencies of this project to pull down fewer. Maybe out of the box Glide only pulls down the code path in use and there's a switch (e.g., --all) that pulls down everything. That would be useful in active development when adding new imports.\n. @davecgh Glide doesn't pull the dependencies used by the tests following the Go rules for that (e.g., _test.go files). If packages are being pulled it's because they are in normal Go files like applications files. I'm starting to discover that the Go conventions for tests aren't being followed by some packages so the tests appear as normal Go files to any automation.\n. Yup. Glide can get smarter with the packages imported. This this a great example of the difference. Thanks.\n. On Monday, barring any major issues being found, I'm going to merge in the feat/no-cookoo branch. This is a major internal reworking that includes a simplified dependency resolution architecture.\nIn the new setup the dependency package contains a resolver. That needs to be updated to that the local project resolution can do directories (ResolveLocal method) while the tree walking (ResolveAll method) walks the import path.\n. It took an extra day because I found a bug that should have been fixed before people started complaining on master.\nBlockers to this are now removed.\n. @dmitris way to catch this. A fix went out in 0.9.1.\n. Can you share your environment from go env? Do you have the GO15VENDOREXPERIMENT enabled? In go env you'll should see GO15VENDOREXPERIMENT=1\n. @conikeec My confusion is in the error message. When the GO15VENDOREXPERIMENT is enabled you get an error message in the form:\n$ go build\nglide.go:51:2: cannot find package \"foo/bar\" in any of:\n    /Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/foo/bar (vendor tree)\n    /usr/local/Cellar/go/1.5.2/libexec/src/foo/bar (from $GOROOT)\n    /Users/mfarina/Code/go/src/foo/bar (from $GOPATH)\nBefore it looks in the $GOPATH or $GOROOT it looks in the vendor tree. I don't see that in your error message which usually says the GO15VENDOREXPERIMENT is off (equal 0). This is the confusing part.\nWhat are the exact commands you used? Was it:\nsh\n$ go build\n. Glide puts packages in the vendor/ folder and manages fetching dependencies. Go handles the rest. Glide is there to complement Go. The issue of not picking up the vendor/ folder when GO15VENDOREXPERIMENT is enabled is in your Go setup. You might want to check the gvm issue queue.\n. There does seem to be a problem here. I see stdlib packages in your glide.yaml. If that was created with glide create then you may want to update to the latest release where a bug causing that was fixed.\nIn any case, not looking in the vendor/ directory is a Go thing and has nothing to do Glide here. I'm not sure whey that's not in your search path.\n. @Tinche have you tried running go version and go env to make sure things are right? Looking in the vendor directory is part of the go tool. If it's not working (and if it can't find the package it will tell you it looked in the vendor directory) then the place to look is in Go itself.\n. @Tinche What is your GOPATH? Your project needs to be within the GOPATH and cannot be outside of it. Also, the root of your project can't be the GOPATH. Go requires there to be a src directory inside the GOPATH with the source inside that. Some things break when you don't follow that.\nBasically, you can't have project based GOPATHs and use the go toolchain. We tried that prior to Go 1.5 and Glide 0.5.\nIs that what you're trying to do?\n. The vendor/ directory needs to be inside the src directory.\nGo requires you to use a setup like:\nGOPATH\n \u2514\u2500\u2500 src\n     \u2514\u2500\u2500 YOURAPP\n            \u251c\u2500\u2500 your source code\n            \u2514\u2500\u2500 vendor/\nThe GOPATH is a workspace and applications are supposed to be within in it. The base of your application doesn't work well as the root of an application like this.\n. @Tinche Glide puts the vendor/ directory next to the glide.yaml. This is because of the way Go itself does the vendor/ directory lookups. Go starts looking in the current directory for a vendor/ directory with an imported package. Then it walks up the directory tree looking for a vendor/ directory with the import. Putting the vendor/ directory next to the glide.yaml and glide.lock let's us know that this one is managed by these files.\nThere are a few other reasons but this is a big one.\n. There is a devImports option in the glide.yaml for this that doesn't actually work at the moment. It's not wired up. It's currently the next most highly requested feature so we will be implementing it in the near future.\n. @pspeter3 yes. See #152 and #103. We're currently cleaning up the internals of Glide which will remove some old code and make it easier for people to contribute. Once that is done this is one of the higher priority items. It will be coming soon since much of that cleanup work is done.\n. I've been waiting for someone to comment on this. I got bit by this today when I was doing Windows testing.\n. I can add a little context and our direction which might help\n- Glide now detects dependencies in unmanaged repos (where Glide, Godep, GPM, and GB aren't managing them) the dependencies are now detected and fetched. That could take longer.\n- glide up now generates a glide.lock file. If that file exists glide install will install from there rather than detect dependencies. It downloads and sets the versions, when glide install is run using concurrency so it's much faster. We recommend checking glide.lock into your VCS alongside the glide.yaml file.\n- We're going to update glide update to use concurrency which will speed things up. Hope to have that in the next release.\n- There's an open issue to be smarter with the scanning to only fetch the packages being called and used. I'd support a pull request for that but don't think I'll have time right now to implement that. Doing that would make fetching something like Docker or k8s faster.\n- Why are you doing a glide update when some packages are vendored (e.g., docker)? Should the --update-vendored flag be used? That will likely not speed things up though.\n- I'm considered trying to fetch checkouts from GitHub instead of checking out repos. This would be an http request and faster than checking out a git repo. This is how some other tools work (like Composer for PHP which I was reading the source on this morning).\nGiven this do you have any suggestions or thoughts? I do want to make update faster in the next release. We're hoping that most people can use install with a lockfile to get some good speed increases.\n. @thinkong what version of Glide do you have? You can run glide --version to get it. The point version matters which is why I ask. Also, what's your output when using the --debug flag (for example glide --debug up)?\nIn the next version of Glide, currently being worked on in branches, there will be some speed improvements.\n. @thinkong what commit is Glide on? There was a recent bug that in some situations could cause this that's already been fixed. Can you test the tip of master?\n. I ran some numbers for comparison between master and 0.8.3\n| Project | 0.8.3 | master |\n| --- | --- | --- |\n| go-boilerplate | 10.607s | 3.092s |\n| rsc | 24.780s | 7.025s |\nSince rsc is managed by Godep I used glide init to generate a glide.yaml file.\nWe've sped up Glide a fair amount so I'm going to close this. There are a few other improvements we can still make but this is quite a speed up.\nIf there are still performance issues please let us know.\n. Input validation could work. This is the kind of case that could even be automatically fixed. I'll get to this eventually unless you (or someone else) wants to do a pull request before that.\n. Ideally, I'd like both. For a URL I'd like it to normalize and even handle the https v. http case. For something that's completely invalid I'd like it to error and exit.\n. It does not have that feature at the moment. Currently, something like a Makefile is used for that. But, make is not cross platform.\nGlide projects are inside the GOPATH meaning installed binaries are inside GOPATH/bin. Do you think versioning needs to be apart of fetching binaries like this? If so, how does that work in a multi-project world where there could be different versions?\nToying with the idea of a bin or _bin directory inside a project feels like a hack. Not to say it's not a good solution (you see it in other programming language projects).\nBecause this can be used by go:generate we should figure this out.\n. @tamird the problem with that is the vendor/ directory is a part of the go tool. Adding a bin directory to that would be to deviate from the built in behavior.\n. @tamird glide install isn't a direct corollary to go install. This is likely part of the confusion. It's more akin to the install commands in other dependency managers.\nI'm thinking about this request though.\n. Can you help me understand your use case a little more.\nHow would you handle two projects with a shared dependency needing different versions of it? Where you switch between working on the two on a regular basis.\nThe first time you run glide update it will install the dependencies into the vendor/ folder. On large codebases the first pass can take a couple minutes. I'm already working to speed that operation up as most of the slow points have opportunities to be faster. This has been tested on Kubernetes which is a rather large codebase.\nAfter the first time it will be faster.\nWhat is the issue? Is there too much disk space being used? Duplication of code on your system? Avoiding bandwidth on download?\nDuplication of code allows each project to have its own version of dependencies without another project changing the versions.\n. @favadi thanks for all the detail. This is a great bug report. Before I even try to repeat the problem I can trace it right to the code block where the issue is stems from.\n. @payneio thanks for the info. Can you tell me what version of Windows you're on, what your setup looks like (is the parent project in the GOPATH, etc), how you got Glide (was it a binary download or go get) and what architecture (386/amd64)? Does it work for projects that aren't the aws-sdk-go?\nI'll try to reproduce the problem.\n. @flawedmatrix how did you install Glide? Binary download? Homebrew?\nOn 10.11.1 using Glide 0.8.1 I can't reproduce the problem. I've not had an opportunity to test on windows, yet. Any details to help reproduce this outside windows would be helpful. I still need to test it there.\n. @markwaddle thanks for the details. With this I know two things.\nFirst, all projects that use the go tool need to be in a properly setup GOPATH. Your example doesn't fit the GOPATH layout required by Go. What you need is a layout like:\n- GOPATH\n    |- src/\n    |- pkg/\n    |- bin/\nYour application source needs to live within the src/ directory. Go isn't really designed for a per project GOPATH. Personally, this was one of the confusing and annoying aspects I had to accept and work with. It comes from Google who uses a monorepo for all their source.\nIf you're not familiar with the details of the GOPATH there is a wiki page and documentation on organizing your code.\nI think this may be what is causing your problem.\nSecond, this leads me to the section of code where the issue is happening. With that I can work on a fix and even a warning when a project is outside the GOPATH. This was just the level of detail I needed to find this bug. Thank you.\n. I think I found the issue. When the GOPATH isn't setup properly this can happen. glide update and other commands have CowardMode to catch this. It was missed on glide get. Added CowardMode here to catch this situation.\nIn the examples with enough detail here the GOPATH was the project root directory. Go, unfortunately, does not work that way. See code organization in the Go docs for more information. The go tool requires this setup. So, the project you work on needs to be inside a properly setup GOPATH.\nIf there are still problems please re-open.\n. These two things have already come up.\nThe prune functionality in #143. Pruning was part of the plan from the beginning of locking and glide up has a --delete flag today. There has been discussion, and I'm sorry I don't remember the issue, as to the the level of pruning. How aggressive should it be and why?\nIn #166 we've been discussing having a smarter way to scan the codebase and pull down dependencies.\nUsing the import graph can be problematic. For example, when actively developing if you specify packages that have dependencies that have not been pulled down. Or another example, if you try to prune out parts of Docker other than the sub-package you're going to spend more time and work on updates.\nIt's worth noting, you shouldn't delete all licenses. To do so will violate many licenses. Many companies need to make sure take care of this so a tool that does that by default will be difficult for them.\nI'm basically saying, it's complicated so we're being careful to think this through.\nBoth of these are really the result of monorepos in projects like docker and kubernetes. It's one of the dangers of monorepos. Unfortunately, I've heard a lot of complaining about this problem in docker and k8s. To ease the burden in other platforms in other languages I've seen many systems be logically broken up which eases that pain.\nIf you're looking for a Docker API library I'd recommend looking at their recommendation list.\nWe're not going to build Glide for every use case for everyone. You can't make all the people happy all the time. I'm saying that when it comes to this stuff we will put thoughtful consideration into it. Still working out what that means and what a wise opinion here would mean.\n. Thanks for the input and idea.\nMost languages have their own package manager. For example Cargo for Rust, Composer for PHP, npm for JavaScript, Maven for Java, and so on. In this case we'd targeted Glide at Go and we leverage Go specific features such as scanning the codebase to find imports. That way we can get the whole tree and lock it to a version.\nI'm amazed that you've been able to use Glide with C++. I don't think we can easily make it work well for Go users while decoupling it from Go (e.g., the GOPATH, GOROOT, and so on).\nSomeone could possibly use the projects under Masterminds and some parts of Glide to build a package manager targeted at C++.\n. I can add a little detail.\nWhen you run commands like glide up use the --use-gopath flag. For example,\nsh\n$ glide --use-gopath up\nThis will tell Glide to check for a package in the GOPATH. If it's there, has the same repo as the one we're asking for, and isn't dirty (uncommitted changes) then copy it to the vendor/ folder. Once in the vendor/ folder the package will be updated and the version will be set to the one in the Glide configuration.\nThere are also the --cache and --cache-gopath flags. The --cache flag tells Glide to cache dependencies in the ~/.glide folder. This keeps them out of the GOPATH but keeps a repo copy locally. The --cache-gopath puts any dependencies found in the GOPATH. This can be useful in combination with the --use-gopath flag.\nAll caching is currently opt-in. Depending on your network connection, disk speeds, and tree complexity it may be less performant to use the cache. This is something you should test for your situations.\nDoes that help?\n. When a version is set in the glide.yaml file that version will be set. It's not checked when the copying happens. Instead, it makes sure it's the same vcs repo. If so, it does an update after copying. Then it explicitly sets the version (or in the case of a SemVer range it finds and then sets the version).\nIt explicitly sets versions rather than assuming something is at the right version.\n. When glide update or glide get are run it explicitly sets the version based on what's in the glide.yaml file. When glide install is run it explicitly sets the version based on what's in the glide.lock file.\nIf you run glide up --use-gopath with no version set in the glide.yaml file you could get some unexpected results because the version will relate to the GOPATH. I would always specify a version, even if it's a branch.\n. @dmitris you're right. Thanks for the correction.\n. The cache is not a default thing that just works (no on/off) flags. If there are continued questions or issues with the cache please open an issue.\n. I believe Install is complete. Tested it with both vendored and non-vendored. Though, I didn't test all permutations of all options.\n. I read the Create code and ran some tests. It appears to be working.\n. While importing from godep appears to work the functionality is odd now that the create command can auto-import and you already need a glide.yaml file to run the command (which is how it worked before the update).\n@technosophos should we revisit how the import commands work?\n. Tested importing gb and it appears to work. Again, the import functionality is still confusing. But, that's there today. The import combines what's in the glide.yaml file with the imported GB contents and displays them rather than saves them. For example, if the glide.yaml file has been created and has no dependencies and you import from GB it will only print to the screen what was in the GB file. But, if you used glide init to create the yaml file and it picked up projects not listed in the GB manifest those additional ones will be included in the print display.\nhttps://github.com/hypocenter/webgetter is a project you can see this in action on.\n. Tested GPM import which is working.\n. Just reviewed the Update commands needs some work. Right now it does a single pass and does not handle imports. If the initial dependencies aren't present it can't get their dependencies. In the dependency tree it's only able to resolve a couple steps and not the complete tree. And, it can't handle imports from other package managers.\n. We still have an open todo to fix up dependency handling inside the installer. It goes between deps, string names, and deps where some info can be lost along the way. For example, subpackages aren't showing up in lock files along with other info.\n. This is closed with the merger of #222.\n. Glide has special logic to find the top of VCS repos. Are all of these in the same VCS repo?\nOne place this happens inside GetRootFromPackage. In here it tries a variety of methods to figure out the root repo.\nThe sub-packages are the suffix to the root package. You can see some of this logic at work in NormalizeName.\nCan you share more detail about your layout? What VCS? How is it laid out? Is this private or public? Do you have a go-get redirect in place?\n. @dmitris thanks for all the detail. I think we are getting somewhere. This is really helping to make progress. I think the issue is in the logic around the go-get redirects.\nIf a package like go.corp.company.com/dmitris/go-simple-canary-cmd is queried does it return one or more go-import meta tags? You can test this with curl via:\n\ncurl \"https://go.corp.company.com/dmitris/go-simple-canary-cmd?go-get=1\"\n\nAm I right to think there are more than one go-import statements?\nI'm guessing the issue is how we match a go-import to a response.\n. Upon reviewing more source, I'm not sure the issue is with multiple go-import statements. But, depending on the response the problem could be there. I'd be really curios to know the response from the curl command in the previous comment.\n. If you fix the problem manually in your glide.yaml file and run glide up does it work as expected?\nI ask because I'm trying to identify if the issue is in glide init or glide up. The initialization code scans directories and packages while the update code does de-duping.\n. @dmitris that tells me a big more about where the problem is. Thanks.\nWhen Glide reads a glide.yaml file it processes it first. That happens before the configuration gets to the logic from glide get. The messages you see tell me something is likely happening when the glide.yaml file is being loaded.\nI created a branch bug/issue-182 with some extra debug calls. Can you please fetch glide, checkout that branch, install it, and run glide --debug up.\nI have some ideas where along the way the issues are happening and this tries to find some of that.\nSorry this is taking so long. There is an edge case bug here that's hard to find.\n. @dmitris can you try it with the manually edited file you shared including\n- package: go.corp.company.com/dmitris/go-simple-canary-lib\n- package: go.corp.company.com/dmitris/go-simple-canary-lib\n- package: go.corp.company.com/dmitris/go-simple-canary-lib-three\n- package: go.corp.company.com/dmitris/go-simple-canary-lib-two\n. @dmitris Thanks for the pull request. My hope with caching was also to catch cases like golang.org/x/net/context being part of golang.org/x/net but there are cases this is a bad idea. Sorry about that bug.\nI just pushed up b07f081 which builds on your fix to avoid some more http requests.\nPlease let me know how this goes.\n. @dmitris thanks for finding this issue.\nFor anyone else looking for the commentary see #182.\n. @colemickens I can help with k8s. It's something I've worked with in a similar way. K8s being such a large monorepo with so many dependencies is a great way to test Glide. It's even lead to ideas on how to speed up Glide (some of which are still coming).\nWithin k8s there are a couple packages, in the full tree, that have moved. The GitHub case causes auth to be triggered on GitHub in case the repo is private. These are cases where a redirect isn't setup.\nTry adding the following to your glide.yaml file:\nyaml\n- package: github.com/steveeJ/gexpect\n  repo: https://github.com/coreos/gexpect\n- package: launchpad.net/gocheck\n  repo: https://github.com/go-check/check\n- package: code.google.com/p/goprotobuf\n  repo: https://github.com/golang/protobuf\nThis will tell Glide to pull those packages from the repo location instead.\nThere's also an example module that references a fictitious appengine package. To skip that try adding the following to your glide.yaml file:\nyaml\nignore:\n- appengine\nI recently did the same type of thing in helm/helm#363 if you're looking for an example.\nDoes that help?\nThere are a number of us who wish the k8s client was its own git repo right now.\n. @colemickens can you share your glide.yaml file? I'm interested in the entry for github.com/dustin/go-humanize or the one that has something to include that. I want to try and replicate the issue.\n. @colemickens we're aware of issues working with k8s. Helm has kubernetes as an import and on occasion I do an import, add a few aliases to the glide.yaml file generated, and test Glide on k8s. It's the aliases that fix the issues I'm aware of.\n. When glide up creates a glide.lock file it generates a hash of the glide.yaml configuration and puts it in the glide.lock file. Running glide install generates a new has of the glide.yaml configuration and then checks it agains the value in the glide.lock file.\nIs the content of your glide.yaml file changing anywhere?\nIf you run the following so you see the error:\nsh\n$ glide up && glide --debug install\nCan you share your project or glide.yaml file? I'd like to try and reproduce the problem.\n. I created the branch issue/185 with some addition debug code. Can you compile that branch and try it? If you run glide up and glide install now it will print out more information. Does something in there help you see the problem?\n. I just pushed another update with another line of debug code. This is important because it's the hash at write time which is a different point than the hash is generated for the lock.\nI added fmt.Println calls to print out the glide.yaml representation of the Config instances when they are written on update and when the hashes are being compared on install. Do you see a difference in the yaml?\nThe hash is of a yaml representation of the config. On a mac I just ran:\n$ shasum -a 256 glide.yaml\nand it produced the same hash inside my glide.lock file.\n. Thanks for the detail! I know what's going on now and can fix this.\n. @Barberrrry I created the branch issue/185-fix (in pull request #187). Can you test this and see if it fixes your problem?\n. I have merged the fix into master and will be releasing 0.8.3 with it soon. \n. The packages being updated are passed into Flatten for up (links are to code where this is happening). My first thought is the problem is there.\n. @technosophos in addition to fixing this I added errors and warnings if there are missing packages (not being updated) that would cause a bad glide.lock file to be generated.\n. @atinmu what version of Glide are you using? glide --version will tell you. What environment are you running in?\n. I can't explain the permission issue. That's something on your system.\nThere was a point when this error happened in the code and we fixed it. Can you get the commit id for the version you're running? Go fetches the repo so you should be able to go to the directory and get it. Want to see if this is the old bug or a new one.\nGlide attempts to use the home directory (in the ~/.glide directory).\nAlso, are you running it in a Docker (rkt, etc) container?\n. Your script is using 0.8.1. There was a but in 0.8.1 when doing glide get --update-vendored that we fixed for 0.8.2.\nCan you test this with 0.8.2? I tried with the tip of master and can't reproduce the problem.\n. I can replicate the problem now. Thanks for the bug report.\n. The issue appears to be that flattening isn't working for vendoring. There's a section of code that doesn't handle vendoring properly. VCSUpdate already handles updating, getting, and vendoring so we can simplify the logic around the bug.\n. @favadi thanks for the detail. I tested the fix with your script at https://github.com/favadi/glide-get-error/blob/test/.travis.yml.\n. Placing code this way is something we've explored. We observed some things when operating that way:\n1. If you do this for everything you will have duplication in the binary for every instance of a package leading to bloat.\n2. You have to shield packages in nested vendor/ directories from outside code or you will get errors. For example, see this triangle case.\nConversations with other Go developers (including the Go team) have lead to the conclusion you should only have one vendor/ directory per application.\nWhat you're asking for is not something you can do with the GOPATH today.\nThat being said, it is a possible situation. Our current stance is lib2 and lib3 would have to manually handle these or the app developer would need to. I will need to think about this some more.\n@technosophos any thoughts on this?\n. I wish it were that easy. It depends on application intent and usage of a package. If something is exposed outside the parent package it can't be in separate vendor/ directory or you'll have this problem.\nI want to map this out in detail to understand the pros, cons, and more detail. It's not as simple as it seems.\n. I do want to poke at this more. While the situation isn't optimal there may be a work around... even if it's opt-in and sub-optimal. It's on my todo list.\n. @bjorn-tf Glide There are two places \"go-import\" is used.\n1. When Glide attempts to retrieve the root package. I think this is what you are seeing.\n2. When Mastermincs/vcs retrieves the package. vcs uses all 3 parts of the \"go-import\" statement to find the right location to the package. Cannot detect vcs is an error returned from the vcs package.\nDo you already have a version of the dependent package checked out? Does it have the .git or other VCS directory in the root of the repo? I ask because Masterminds/vcs provides that message when it looks in the directory and can't find VCS information.\n. Also, you can use private repos with Glide.\nyaml\npackage: foo/bar\nimport:\n- package: github.com/private/package\n  repo: git@github.com:private/package.git\n  vcs: git\nThat will tell glide to checkout git@github.com:private/package.git using git and put it into github.com/private/package. The local user will need access to  git@github.com:private/package.git and it can be anything the local user has access to with the VCS.\n. @bjorn-tf Does the --insecure flag solve the problem? Or, do you need the ability to work with a self-signed cert on https?\n. The --insecure flag set the repo to be the http version of the url to the package. If you have http access what is the error?\n. The --insecure flag is on glide get no glide install.\nIf you have an import like:\nyaml\n- package: ourcompany.net/example/package\nyou can update it to be (this is what glide get with --insecure does):\nyaml\n- package: ourcompany.net/example/package\n  repo: http://ourcompany.net/example/package\nor\nyaml\n- package: ourcompany.net/example/package\n  repo: http://ourcompany.net/example/package\n  vcs: git\nif you know the VCS type.\n. @bjorn-tf Now I understand the problem. Thanks for all the detail.\n. What we need to do is have an --insecure flag on the install and update commands to allow for automatically detecting insecure dependencies within all levels of the tree and allowing them to be fetched.\n. You are right that Glide should rescan dependencies in a project. In #162 I was thinking about adding that to glide update. So it happens without more work from users. What do you think of that?\n. @technosophos glide up does not scan your codebase for new dependencies. It just scans the dependencies in the vendor/ folder for changes. I think the suggestion here is to rescan your codebase. That way you don't need to glide get PKG to make sure everything is present. A little extra automation.\n. @technosophos should it update the glide.yaml with the additions and warn of any unused in the glide.yaml?\n. I have a couple questions to try and understand your setup more clearly.\n1. Can you provide the output of go env.\n2. Is your project checked out within the GOPATH?\n. @aboukirev Thanks for the additional detail.\n. I just pushed a change to the branch issue/194. Can you try that out in your windows setup? It uses filepath.FromSlash to switch from path to filesystem separators in the proper environments.\n. @aboukirev I thought we'd switched all the path splitting to use filepath.SplitList to handle different operating systems correctly. Thanks for catching that.\n. Can you try the latest on the issue/194 branch and let me know if this fixes the issues\n. @thinkong does this latest update (issue/194 branch) fix your issues?\n. If cmd.exe and MSYS2 for Git do paths differently does anyone have a pointer on how to make that work for a cli?\n@aboukirev We used to use the tooling behind go get. But, we can't use the command itself because it doesn't support the vendor/ directory and the libraries behind it doesn't support some of the things we need to make SemVer work. So, we moved away. I'll need to take a look at how it handles paths again.\n. I think this is fixed with the latest commits. I was able to reproduce the problems in my own environment and able to see them go away with the latest commits (now on master).\nIf the issue persists please re-open. If there are other Windows related issues please open a new issue.\nThanks for all the help. I want Glide to work well on Windows. Providing so much information has been quite useful. Thanks.\n. @lukef documentation on the glide.yaml would be useful. I'd be happy to look at a pull request for it.\n. @kshlm Can you help me understand your use case?\nI see two cases. One where you need to snapshot and restore the entire dependency tree. This is important for reproducible builds. To have a reproducible build you have to have the complete dependency tree. The complete tree in the glide.lock file is used by glide install. If the complete tree isn't available you can't restore to a known state. State is important and without the whole tree you don't have a complete record of the state to reproducibly restore to.\nThe other is the case to have info your project. In that case why would pinning to commit id be useful?\n. @kshlm thanks for the details\n@technosophos what do you think about this until we can automatically detect the code paths being used?\n. @kshlm I've not forgotten about this. @technosophos has been pulled into some meetings and has not been available this week. Hope to get some of his time next week to discuss this.\n. @emilevauge We (@technosophos actually) is working to make dependency smarter to look at the ones actually being used. That should lighten the load while still fetching the in use tree.\n. @kshlm Can you describe a base where you would want a reproducible build and not wanting to recurse? I'm having a little trouble visualizing this one. An example would help me.\n. @sdboyer the usability hiccup is when you have to run glide up to regenerate the glide.lock because you modified something non-interesting (license, updated version range but it doesn't affect your pin, etc) and you have a large project (like helm which pulls in k8s) to figure out.\nI also ran into a weird issue that on Windows a known working hash (tested on Mac) was saying it wasn't the right one. A later update fixed it and I never found out why. I think that lowered my trust.\nI'm considering removing the check but keeping it in the file. Maybe a message rather than simply failing glide install.\n. @sdboyer potentially. It would require the hash calculation to be more work (create an alpha ordering) and less usable with other tools. For example, is you run shasum -a 256 glide.yaml on the glide.yaml in the Glide project you'll see the value that's inside the glide.lock file.\n. Note, I've backed off exiting if the hash doesn't match. Instead there is a warning for now.\n. Instead of an error this is now a warning. So, it doesn't stop you but it helps you identify if something is out of date. I'm happy with that.\n. What do you think should happen and why?\n. @tamird what version of Glide are you using (glide --version), what OS are you on, and can you share your environment (go env)? This will help me in reproducing the issue.\n. @tamird thanks for the incredibly fast reply.\nI think that was fixed in #185 and #187. Using the tip of master I'm not able to reproduce the problem. I'm shooting for a 0.8.3 release tomorrow with the fix in it.\nCan you test the tip of master?\n. @tamird Great. I'll be release 0.8.3 tomorrow (Wednesday) with this fix in it.\n. @jrick can you try the issue/194 branch? On that branch there is a fix for an issue with path separator handling (: on POSIX) that could affect handling different drives on Windows.\n. I was able to finally reproduce the problems seen here. Thanks so much for the glide.yaml file, example project, and setup. It's what I needed to reproduce the problem. With commit 2a54584 I believe this is fixed. This is now on master.\nPlease re-open the issue if the problem persists.\n. Thanks for catching this documentation bug.\n. I caught another place a loop can happen with 285779832ef12946ddc451a81b0f2fefea42b706. Can you try again?\n. @jrick can you fill me in on your environment (e.g., go env)?\nI posted a fix at 285779832ef12946ddc451a81b0f2fefea42b706 that could cause an infinite loop on scanning in some situations (most notably Windows). Is it any better using the tip of master now?\n. @thinkong You've been a great help in making Glide more stable on Windows. Don't feel bad. I appreciate it.\nGlide calls out to git directly to clone or update the repo. From the native console can you execute commands like:\ngit clone somerepo\nor:\ngit fetch origin\nAlso, a little trick (which I need to add to --debug) is if you open up cmd/get_imports.go, uncomment lines 29-33 (an init() function), compile Glide, and use this version you'll see the complete details of each VCS request. You'll see what caused the exit status 128. Does that provide any insight?\n. Glide drops down to the git command. It should be executing it as the same system user that called glide.\nI wonder if this as something to do with the PWD handling inside the Masterminds/vcs package. On POSIX (mac, linux, etc) the PWD environment variable is the path to your working directory. So, when the environment is setup to execute the git command that's altered. The go tool itself does this.\nDoes anything here look like it could be causing a problem?\n. Does the one from git for windows have any special environment needs? I'm trying to understand what's going on to find that fix.\n. Do any of those use the PWD environment variable?\n. Good call. Thanks for the suggestion.\n. So, the fix here would be to use relative paths instead of absolute ones.\nThat change should happen here instead of in Masterminds/vcs.\n. @douglaswth what version of Glide are you running (glide --version)?\n. Ah, yes. we fixed on issue inside the vcs package but the issue of relative vs absolute paths is something we'd not worked on yet.\n. I'm going to punt this to 0.12 because we'll be making changes, sooner rather than later, to use a cache directory for resolution. I have some windows difficulties and \"I think\" this will make it easier.\nNote, \"I think\" are famous last words. I realize this and I look forward to the easy.\n. I think this is fixed in the tip of master. I was able to reproduce these problems while moving to the use of a central user/system cache and correct the cases I found. Is this still an issue? I can no longer reproduce it.\n. If this problem still exists please file an issue.\n. I understand your pain point. We're not going back to the old system but we'll move to something better than the old system and what's there now. Let me explain.\nIf Glide only fetches what's listed in the glide.yaml file you need to have the complete tree of dependencies listed there. That's your projects dependencies, the dependencies of your dependencies, etc. This is hard to keep track of especially when you bring version support to the table. Each project should manage their own dependencies. This is how every other major package manager in every language works for good reasons.\nBut, Glide is fetching all possible dependency chains rather than the ones being used. This can lead to too many dependencies being fetched. Previous Glide didn't fetch all the dependencies. Now it fetches everything possible. At some point soon we will update the resolution to pull the paths in use rather than all of them. To try and find the useful middle ground.\n. I removed the duplicate label because I can't find the other issue.\nThe gist, there is a feature request to only follow the package paths being referenced rather than to get all the things.\n. @termie We have a feat/no-cookoo branch we're actively working to clean up the architecture. The things you noted, like the cmd sub-package are something we're in flight on fixing.\nAs part of that we have a fairly new dependency resolver. It was initially designed to scan directories which is needed for a root project. The Go code could reside in the top level folder or start in subdirectories. We need to handle that.\nOnce we know package paths things need to be handled a little different. Rather than scan entire codebases we can follow full package paths. We need a dependency handler to do that.\nIf you give us a few more days (to sometime next week) I hope to have the rework back on master and we can start to tackle this a little better.\n. I just did some more work on the new architecture branch. I \"should\" be able to merge it in the middle of next week. We have one glaring issue left I'll fix I can fix before then.\n. This has been worked on by @technosophos and we'll be merging it in soon. See #240.\n. Glide, on master right now, only walks the import tree being used and imports the needed packages. There is a flag to get all things if that is still desired. With that I'm going to close this issue. If there is a problem with the new functionality please let us know.\n. Thanks for submitting this. I have some ideas how this can be done.\n. I found the problem. The github.com/gin-gonic/gin project requests the golang.org/x/net project at the version 621fff363a1d9ad7fdd0bfa9d80a42881267deb4. This version is prior to the the inclusion of http2. This is a case of the first requestor wins. It is an example of why using commit ids to specify versions can cause problems.\nCan you try the glide.yaml file:\nyaml\npackage: github.com/dschool\nimport:\n- package: github.com/labstack/echo\n  version: \"1.3\"\n- package: golang.org/x/net\n  version: master\nBy specifying the dependency here with a version it will be picked up with the newer version (tip of master).\n. @dhanunjay The unsafe package is part of the standard library. Glide does not manage those. Look in your vendor/ folder and you should not have the unsafe package.\nLooking at docs on Appengine it appears you can't use the unsafe package there. It's an appengine limitation likely put in place for security.\n. @dmitris I'm open to the idea. I would ask that you wait on a PR until we finish the feat/no-cookoo branch. We are cleaning up the internal architecture right now to make it easier to contribute and remove legacy code.\n. Thanks for catching this.\n. @arvenil I think I can answer your question. This is where vendor/ practices get confusing and I'm happy to take feedback here.\n1. github.com/aws/aws-sdk-go uses all those dependencies within its codebase. Now, it does have 2 dependencies in a vendor/ folder. Where things get difficult is that each vendor/ folder is a different location and the same dependency in two different vendor/ folders, even if the same version, cannot share instances of types and will be in the compiled binary each time. This can lead to build issues and binary bloat. So, the recommendation, which Glide does automatically, is to only have one vendor/ folder at the top level of an application. To flatten the dependencies. Do you have a suggestion on how to do this better? I'm happy to have a conversation on it. If you want to chat in realtime you can find me in the #masterminds room on Freenode IRC.\n2. That messaging is poor on our part. We're currently reworking this part of the logic and the next release should have better messaging.\n. @arvenil We're currently working to make #1 and #3 better. Optimization can be hard.\n. @arvenil I can try to answer your questions here. And, there may be room for optimization in Glide.\nFirst, Glide complements the go tool. So, building binaries and so forth are handled there. This is important because any ignoring of vendor/.../vendor/ to build a binary has to happen in the go tool. Glide can't affect that.\nIt's generally considered a bad practice for a library to have packages in the vendor/ folder unless they explicitly have a reason for it. For example, they are using a fork or it only works with a specific version. Otherwise you get into binary bloat and issues of sharing instances of types.\nGlide does not check if a package is already in the vendor/ folder and skip downloading it. That could be another optimization.\nI'm going to have to look at how glide get is generating the lock file. The lock should have github.com/aws/aws-sdk-go and any known dependencies. I'll check that for a bug. Thanks.\n. @arvenil I can explain what's happening now.\n1. When glide get downloads a package it inspects that packages and fetches it's dependencies. The root of github.com/aws/aws-sdk-go has no sub-packages to fetch so it doesn't. If you had should code that used it in your application it would walk the used imports and fetch more.\n2. When glide up is run to update it looks at the import path used in your code and follows those import paths to fetch everything imported. The parts of github.com/aws/aws-sdk-go and their dependencies will be fetched when used in your application code.\nWe can likely give this a better experience somehow.\n. @gkalabin Glide should be able to work with multiple GOPATHs and handle stdlib packages. Can you provide some information about your environment (e.g., go env, OS/version, version of glide (glide --version), and how you got Glide)? This will help me troubleshoot.\n. @james-lawrence on Monday, barring any huge issues, i plan to merge in the feat/no-cookoo branch which does a major internal re-architecture. At that point this will either be fixed or shortly there after since there will be just one place to fix it then.\nA fix is coming soon.\n. Two things.\n1. glide rebuild was used for prior to the vendor experiment. Everyone should use go install instead.\n2. The issue here is an error inside the resolver. The following is stuck in a loop:\n[DEBUG] Found /Users/mfarina/Code/go/src/github.com/colemickens/azkube/vendor/code.google.com/p/go-uuid\n[DEBUG] Dependency code.google.com/p/go-uuid has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/mfarina/Code/go/src/github.com/colemickens/azkube/vendor/code.google.com/p/go-uuid/uuid\n[DEBUG] ImportDir error on /Users/mfarina/Code/go/src/github.com/colemickens/azkube/vendor/code.google.com/p/go-uuid/uuid: open /Users/mfarina/Code/go/src/github.com/colemickens/azkube/vendor/code.google.com/p/go-uuid/uuid: no such file or directory\nSo, we have a bug. Thanks for finding this.\n. To add some more detail...\n- code.google.com/p/go-uuid is aliased to github.com/pborman/uuid\n- The package code.google.com/p/go-uuid/uuid is being imported (notice the subdirectory). The uuid directory doesn't exist in github.com/pborman/uuid.\n. Glide now catches this recursion and reports the underlying error.\nI also added a new deprecating rebuild with a note to use go install instead.\nIf there is still an issue please let us know.\n@colemickens thanks for all the great feedback.\n. @christophberger Thanks for bringing this up. Can you please provide a little more information. What version of Glide are you using (glide --version), how did you get Glide (go get, binary download, something else), and can you share your glide.yaml file or provide some example representation.\nI'd like to try and reproduce the problem to verify, understand, and test any fixes.\n. @christophberger Thanks. Did you create this by hand?\nNone of these sub-package entries should exist. Did you add them?\n. @james-lawrence fantastic catch. When we make devImport work, in the near future, we can fix this.\n. I think I found what's going on. There are two files with slightly differing formats. In the glide.yaml file it's import and devImport. In the glide.lock file it's imports and devImports.\nSince the lock file shouldn't usually be manually altered (it's being rewritten by Glide each time glide up it run) this should be ok. It's not perfect but it should be ok.\n. @Akagi201 Prior to Go 1.6 you need to set GO15VENDOREXPERIMENT=1 for the go tool to pick up things in vendor/ folders. Once Go 1.6 is out that will be on by default.\nWe ask about this because you'd have a 3rd search path listed with the vendor/ folder if that were enabled.\n. As a general rule, the go tool requires your code to be in the GOPATH. Some things don't work right when outside that or symlinked in.\nPersonally, I find this rather frustrating.\n. Is this happening in the go tool specifically? If so you might want to file an issue with Go.\n. Sometime soon, likely next Monday so I can be around to fix bugs as they arise, we're going to merge in the feat/no-cookoo branch. This is a massive internal reworking of Glide to make it easier to maintain and work on. There was a lot of left over cruft in the codebase from the past.\nUnfortunately, that will completely invalidate this pull request. The cmd directory won't even exist anymore.\nOn the bright side, that should make it easier to work on.\n. @fabian-z The implementation details can matter. For example, the amount of work being done overall inside the applications can be very different to come to the same outcome. Want to make sure we use the best approach if there are multiple being developed.\n. @hectorj @fabian-z On the pull request at #240 we have a walker capable of just walking the imports rather than the whole file tree. One advantage is that it only walks what's used rather than walking everything and filtering down to what's used.\nAny thoughts?\n. I just merged the other branch. Thanks for the efforts here. That method is a little more code but it is less of the tree to walk. We can build upon and improve things over there.\n. I can verify the issue.\n. Since this is fixed in Masterminds/vcs it will be fixed on master here and in the next release. If there is still an issues please re-open.\n. If it has anything to do with running the go command it's not an issue with Glide. What commands are acting slow?\n. I had the same expectation of go run so I understand. Glad you got this worked out.\n. No problem. This vendor/ directory thing is going to take some getting used to.\n. Thank you for the contribution!\n. I can help with this. Two things:\n1. Helm uses the ignore property to skip that. Try doing the same thing.\n2. We are going to try and make waling the import tree more intelligent so it automatically skips things like this.\nDoes that help?\n. For now I wanted to replicate the 0.8.3 setup. In other package managers, such as composer for PHP, it installs the packages whether is needs to figure them out first or already has an existing lock file so it doesn't need to do that work.\n. Thanks for the fix.\n. There is a problem here. I'm trying to figure out the best way to handle it.\nUnder Glide 0.8.3 there are no errors. But google.golang.org/cloud is set to f20d6dcccb44ed49de45ae3703312cb46e627db1 and it has an import of google.golang.org/api/container/v1beta1. Glide 0.8.3 checkout out google.golang.org/api as master where this package doesn't exist. So, it's not catching the problem even though it is present.\nGlide on master catches this problem.\ncoreos, using Godep, vendors google.golang.org/cloud and it is listed in the Godeps.json file. But, google.golang.org/api is not vendored.\nI think the fix is for Glide to walk the used dependency tree rather than all possibilities. Coreos must not be using the part of google.golang.org/cloud that calls to google.golang.org/api/container/v1beta1.\nThis may be solved by #220 or some of the other work we've talked about.\n. @zh-lab Good questions.\n1. Glide will import packages but does not alter the contents of a repo it imports. Right now Glide pulls down VCS repos. If the contents of them are altered it makes the repo dirty and difficult to switch versions.\n2. Libraries, that is non-main applications, really should not have a vendor/ folder unless there is a specific known reason. There are a couple reasons for that and Glide attempts to flatten the tree to solve them.\n   - If another package imports the same dependency in a different vendor/ folder it will end up in the compiled binary twice. Each location the dependency is imported is a different location to import. Before of this the discussions in the Go community have lead to the understanding that you should have the vendor/ folder at the app level unless you have a specific reason not to. Is that the case with testify?\n   - Instances of a type created with a package in one vendor/ folder are not compatible with the same package in other vendor/ folders. If you try to pass instances around you get errors. Here's an example\n3. Since the vendor/ location for packages like testify will be used even if Glide flattens the tree we can likely add an optimization to not fetch the code again and provide a message. This part of the resolver code is being worked on right now so I'll wait for that work to be completed before I look into this.\n. Thanks for catching that.\n. Thanks for providing this bug. I know what's going on. Working with the filesystem in a cross platform manner can cause bugs like this to pop up. I'll fix it shortly.\n. @colemickens Can you check the latest on master. I think I fixed this.\n. Thanks for your patience. I'm now setup to work on this in my Windows environment and I'll test it against the Azure SDK for Go.\n. @colemickens @garimakhulbe can you take a look at the latest on master. I have it working in my Windows environment now.\n. @colemickens I'll take a look at that.\n. The latest on master is not venerating the right subpackages for me. Can you try again.\n. @colemickens Well, that typo of mine messes with the meaning. Sorry about that. The latest on master is now generating the right subpackages for me. Can you please try again?\n. This latest commit should fix the issue where the same package is present with and without the leading /.\nThe pkcs12 package imports the pkcs12/internal/rc2 package which is why it shows up in the lock file. It's imported in the pkcs12/crypto.go file. This is the complete tree of referenced packages which is why it's present in the lock.\nIs there anything else here that needs fixing?\n. I think we can close this one, then. If there are more issues please let us know.\n. You've identified a bug and asked for an enhancement at the same time.\nThe bug is the --use-gopath isn't working. This likely happened in the recent refactor.\nThe feature request is to be able to snapshot the current tree, without updating, into a lockfile.\n. Upon further examination it's actually copying from the GOPATH but performing an update after it does this. So, there isn't a bug. I added some better messaging to make it clear when it's copying from the GOPATH. There is more detail when using the global --debug flag.\nWhen it comes to getting a snapshot of the current tree we're looking at bringing back a command to do that.\nNote, Glide is designed to work with the vendor experiment, that's a default feature as of Go 1.6. That way multiple projects can have different versions of dependencies. Something you cannot easily do with a single GOPATH. Where the GOPATH will be a location we can copy from don't expect Glide to work primarily there.\nI'm going to leave this open until we add the pin command. I'll make sure it has the ability to copy from the GOPATH without updating.\n. @hyper-carrot Glide does not have a build command. What are you trying to do?\nGlide manages dependencies. You use the go tool to build, run, or otherwise work with your code. Glide complements that.\nI recently wrote up a getting started guide that might help.\n. @technosophos I was thinking the same thing for the switch. The switch is useful in some dev cases when you want all possible things.\n. @rubenhazelaar 20 minutes is unusual. Even on projects with hundreds of dependencies I don't usually see that. A few things.\n1. Can you share your glide.yaml file? There may be some dependencies that are causing the long time.\n2. You noted your internet connection. How fast is it (relatively speaking)?\n3. Glide on the tip of master, which will soon be released as 0.9.0, has been measured to take far less time to download dependencies. That may help.\n. @rubenhazelaar What version of Glide are you using (glide --version) and how did you install Glide?\n@technosophos A lot of the tree is duplication which is caught in the resolver and skipped while glide tree has to walk it to display it all.\nI use ran glide up with the initial glide.yaml file using the tip of master. I got...\nsh\n\u25cb time glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/julienschmidt/httprouter.\n[INFO] Fetching updates for github.com/natefinch/lumberjack.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/mailgun/godebug.\n[INFO] Fetching updates for github.com/kardianos/service.\n[INFO] Fetching updates for gopkg.in/fsnotify.v1.\n[INFO] Fetching updates for github.com/jlaffaye/ftp.\n[INFO] Fetching updates for github.com/mattn/go-sqlite3.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file.\n[INFO] Fetching github.com/kardianos/osext into /Users/mfarina/Code/go/src/github.com/Masterminds/test/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 9 dependencies.\nglide up  1.59s user 1.62s system 29% cpu 10.956 total\nIt ran is just under 11 seconds.\nDoes the tip of master produce the long times?\n. @arschles that doesn't mean what it appears to mean. It has to do with directories passed in with no go source files but were already cloned and looking for imports to follow.\nThe latest on master no longer has this message.\n. @bsideup I've tested and I see the issue on master. Thanks for the report.\nWhat are you using glide tree for? We'd discussed dropping it and I'm looking for uses of it. I'll fix this issue before the next release which will happen soon.\n. @bsideup what version of Glide are you using (glide --version) and how did you get Glide?\nThe tip of master now only walks the dependency tree in use rather than all branches to minimize the dependencies fetched. Are you on the latest master code?\n. @bsideup glide tree traces the import tree not the file system tree. You can end up with many paths that are the same or similar. Glide does detect recursion (which you can see near the bottom of the previous comment).\nI say that because @technosophos let glide tree run for awhile and it finished. The import tree produced an output that's 224324 lines long. This is one massive tree when all the import paths are traced.\n. @stroborobo what version of Glide are you using (glide --version) and how did you get Glide?\n. @stroborobo can you try Glide 0.9.0 RC1? It's available at https://github.com/Masterminds/glide/releases/tag/0.9.0-rc1.\nThe section of code that does this work was rewritten between 0.8.3 and the release candidate. It may already be fixed.\n. @stroborobo I think I've figured out the problem.\nGlide follows the same path conventions Go itself does when looking at remote packages and the repos they live in. Go expects patterns like src.ybit.eu/ybit/yamcha.git/helpers. Notice the .git in there. In Go you can trace that back to a regular expression used inside go get. Glide follows this same behavior.\nThis has to do with Glide, or go get, walking the import statements as much as it does for the glide.yaml file.\nI'm open to suggestions to handle this differently. Right now we are following what Go itself does.\n. @itscaro This is something we're going to have to really think about.  To change the patterns is to break compatibility with go get naming conventions. That's why we do what we do.\nWe've gotten enough requests we will talk about it.\n. @davidzhao A couple things that may help...\nFirst, you can use Glide with private packages using something like this in your glide.yaml file...\nyaml\n- package: github.com/user/repo\n  repo: git@github.com:user/repo\n  vcs: git\nThis will tell Glide to use the Git repo at that location for a package with that path. If you're going off GitHub or using GitHub Enterprise as your own domain the package name may need a mild variation.\nSecond, I'm working to make repo detection for URLs like git@github.com:user/repo easier.\n. @davidzhao I think I know what happened. Glide expects the package to be a go compatible path. That means the package should be github.com/davidzh/privaterepo. The glide.yaml docs for package touch on this. If you want to dig into the Go code look here and here. Does that help?\n. @technosophos There used to be a - in front of the fetching which worked for glide install but looked funny when glide up was scanning and fetching in the tree.\nWould putting => in front of Fetching help?\n. @akutz A few things\n1. The errors were caused by a recent bug I wrote. Sorry about that. I fixed it in a349665. There was a spot the NotFound handler, that fetches the code, was failing to run.\n2. I ran a couple tests on time with rexray. Do you see numbers like this?\n   - When there is no vendor/ directory 1min 34s to complete a Glide run.\n   - With a populated vendor/ directory it took 43s to complete the run.\n3. Glide does concurrent fetching in the initial downloads. We've not yet instituted concurrent fetching when resolving imports. I'd started that work but kept finding it took longer than what we have now for most cases. Trying to make that path faster most of the time before bringing it in.\nI'm going to start to work on the messaging bit and see if we can do something better. We've started to talk about things such as progress bars but you want to do stuff like this that doesn't impact performance. For example, the progress bars in npm cause it to take 3x the time to run. Turning them off is a large time saver.\n. @mhoglan There are a few things going on here.\nAre you familiar with package management in other languages? Such as Rust, Java, PHP, Python, JavaScript, Perl, or others. Glide is modeled after the best and successful practices from these so I'm curious of your foundation in them.\n- glide create isn't just guessing. It's inspecting the imports in the local project. It also reads information from Godep, GB, and GPM to aide it.\n- glide get retrieves a package and its dependencies. Transitive dependencies need to be resolved for their versions across everything else. They are resolved within the version constraints.\n- glide update walks the dependencies and transitive dependencies to find the latest version that matches the version constraints. If there are no constraints it uses the tip of the default branch.\nCan you share the project your having difficulty with. I can take a look at it and see what's going on.\n. @james-lawrence you're right. That should be an error instead of a warning. We'll get that fixed prior releasing.\n. @colemickens There are two steps to an update in Glide. There are the direct dependencies of the local codebase and then there are the dependencies of the dependencies to form the tree. When we update a direct dependency the dependency tree needs to be re-resolved for any changes. This makes updating just a single dependency difficult. Or rather, it means to make it simple isn't so simple.\nWe used to have something sorta like this feature. I had not realized it was dropped. We should put something smart back. @technosophos is there a reason i don't know that we dropped this?\n. @atombender it turns out this is more difficult than it seems when you default to versions and ranges. To do this you need to update the one dependency and then walk the tree to make sure the transitive dependencies are picked up and all the versions mesh.\nAre you using versions or ranges in your glide.yaml file? I do so I don't tend to run into this problem as much as others do. That's why it's not been such a high priority with all the other requests coming in.\nPRs are welcome.\n. @atombender I see what's going on.\nFirst, the way the GOPATH forces structure can be incredibly annoying. There are a bunch of people unhappy about it. Some so much so that GB came into existence.\nThe go tool forces a certain structure and that's built into the go/build package in the standard library which Glide uses. That package is what lets us do things like walk the import tree. That package requires you to be within the GOATH and causes problems with numerous tools when you symlink outside of it.\nWe know about this symlink problem because Glide prior to version 0.5 did something similar to what you suggest. We kept running into problems.\nFor Glide 1.0 we're moving ahead with using the vendor/ directory and working with the GOPATH. In future versions I'd like to possibly have a pluggable mechanism for import walking. Then we could support multiple systems.\nI agree with your frustration and at some point in the future I hope we can make it better. In order to fit your use case we'd need a custom replacement for go/build and that's no small task. If you want to start writing one I'd love it.\n. @atombender when you hard link do all the Go tools work properly?\n. @james-lawrence glide get already supports that. You can read about it in the docs. I just added a link to the readme pointing to the docs. We're just getting started with them.\n. @james-lawrence no problem. I realized the documentation for it wasn't all the visible because of the issue.\n. @chancez @pbennett the warn you saw was fixed by @james-lawrence PR. I've also updated this to be info rather than a warning because that makes more sense. That change was in 8e813cf.\n. @chancez I like the idea of making the output usable for other tools. I'm wondering if we should support a couple formats. Text by default but also a flag for json. Thoughts?\nNote, we need to make sure the output goes to standard out, too.\n. @jrsanz1 Glide supports the same patterns the go tool does for import paths including the naming for VCS related paths.\nThe go tool has a lookup that does special cases for GitHub, BitBucket, and some others. For others it expects the root repo location to end in .git, .hg, etc. For example, test.com/foo.git/bar/baz.\nGlide supports git, hg, bzr, and svn (the 4 VCS supported by the go tool) using the same patterns the go tool does.\nI'm not sure this is documented clearly anywhere by the Go team which means it can be a little confusing. Does this help?\n. Is the top level package, bitbucket.org/soandso/package, inside the GOPATH properly? Glide has a step that should detect the top level package being referenced and remove it if present.\nWhat OS, version, and can you share the output of go env?\n. @jrsanz1 I'm unable to replicate this under Windows. Can you provide some more detail?\nIs you codebase somewhere in the GOPATH\\src and you're operating on it from there rather than a symlink? I ask because I've seen what you describe when the codebase is outside the GOPATH.\n. @jrsanz1 Thanks for sharing. I had no idea that could happen. It's useful for me to know this for anyone else who comes along with the same problem.\n. This was fixed in #278.\n. @xuqingfeng you shouldn't reference packages in the vendor/ folder directly. For example, instead of importing \"bitbucket.org/jsxqf/hpack-cli/vendor/github.com/Sirupsen/logrus\" import \"github.com/Sirupsen/logrus\". Go will add vendor/ folders to the resolution locations.\n. @mhoglan Aside from the PR #265 is there anything else here?\n. Caching is now always on. There is no on/off switch. The entire flow of handling has changed. I believe this is overcome by events.\nIf there is an issue with the latest code please let me know.\n. I think there's an issue ensuring the cache directory is properly in place, too. I'll look at this and the whole issue in a day or two. Would like to get this whole thing fixed for 0.9.1 release.\n. This looks good. I'll fold it into 0.9.1 and, if someone else doesn't merge first, I'll merge it in on Tuesday.\n. First, I absolutely love that you created a brew command. That's the kind of command I would personally use as I put stuff in Homebrew.\nBut, this is the kind of thing that belongs in a plugin rather than a core part of Glide. A lot of people won't use it and it's not required for package management. Is that something you'd consider doing?\nIf so we'd like to link to it as an example of a plugin. Would love to tell people about it.\n. @LK4D4 Thanks for the issue.\nFirst, @technosophos and I were recently chatting about the OS dependency issue. Glide works the same the go tool does. For example, to pickup linux dependencies on darwin you'd do:\nsh\n$ GOOS=linux glide up\nThis isn't ideal. In the next release (likely 0.10) I'd like to make this situation better. I'll look at using UseAllFiles. Given our typical pace I would expect this out in the next month.\nNow, can you provide a detailed example of the os and arch work you did. That should be working and I'd like to try to reproduce your problem if you can.\n. @LK4D4 Two things:\n1. In the not to distant future we'll do a release likely using UseAllFiles to bring back better dependency walking. It's a small change and the current situation is a bug that comes up most often in docker work. Thanks for pointing this out.\n2. The os and arch properties are on each import. So an import can only be used in certain environments. It's not for the entire file. I just looked at the docs and found them lacking here. I consider that a bug, too. I'll get that updated before the 0.9.1 release.\n. This fix will go out in version 0.9.1 early next week. Thanks again.\n. This would be useful. Not yet sure of the best to handle this so I'm open to suggestions.\n. Go doesn't do anything special for Make that I can find. There are 3 phases outlined in runGet. The docs note that the build tool can only build Go source files and they did not do anything with Makefiles.\n. The problem with Makefiles is Windows. Go and Glide support windows.\n. @sdboyer you can't shoehorn in Makefiles because you don't have make in every system Go is available in. Or, did you mean something else?\n. I'll look at this in the next few days. A little swamped with a few things at the moment.\n. @DavidJFelix is your root project properly in the GOPATH? You need to have something like GOPATH/src/path/to/root/project/vendor/github.com.... The go toolchain expects the root project to be in the GOPATH and specifically looks for the src directory.\n. @DavidJFelix thanks for sharing your Dockerfile. I see what's going on.\nThe GOPATH cannot be a vendor/ directory. This is hard coded into Go. You need something like...\n```\nWORKDIR /go/src/app\nCOPY ./gosrc /go/src/app\nRUN glide install\nRUN go build\n```\nThe GOPATH here is /go. The GOPATH is required to have a directory inside named src where your source lives. The vendor/ directory is inside your source. This is non-negotiable for the go tool.\nIf something worked in glide 0.8 it was a fluke really.\nBeing held the GOPATH this way is a common compliant. We won't likely see a change before Go 2.x.\n. @itscaro @bwiggs are you pulling the tip of master or using the released version?\n@akutz I see your case. It's pulling the tip of master. I think you're seeing a problem because of #267. If you build in appengine there are some special appengine packages available. The change in #267 allows glide to scan all possible dependencies, irregardless of build mode, so it can get the full picture. Unfortunately, that means it tried to find appengine based dependencies as well.\nI'm debating between two possible fixes.\n1. Skip appengine dependencies.\n2. Provide a flag to only build for the current environment (GOOS/GOARCH)\n. @akutz I'm thinking of handling both options. Appengine is an annoying special case and the flag would be useful.\n. The appengine import is appengine and not a remote location. It's a special case build mode for appengine where the SDK (import of appengine) is available in the same way standard library packages are. It's a special case where two Google products (appengine and Go) are colluding in a non-standard way.\n. This should now be fixed. If not please re-open the issue.\n. I seem to have missed an app engine specific package.\n. @akutz this \"should\" now be fixed and I tested against rexray.\n. @LK4D4 please feel free to post issues against master. I'll take a look at this in a bit.\n. If you use the --resolve-current flag on update it will disable UseAllFiles. Hopefully this can unblock anyone until I get a better look at it.\n. To add a little more detail... since you can't have two packages with different packages loaded in the same directory this is because build flags are skipped. In both examples here the differing package had a build flag of:\n// +build ignore\nNote, ignore has no special meaning. It's just not going to be matched so the file is ignored.\n. @technosophos Build flags can be both positive (included) and have the ! to be excluded. If something on that white list is a ! in the file won't that file be excluded?\n. FYI, I'm working on a fix. hope to have something up for review in the next day.\n. Can you please test the fix in the pull request. Any feedback would be appreciated.\n. I think this fixes it.\n. @nlamirault what version of Go are you using, what version of Glide are you using (glide --version), and how did you get glide?\n. Can you please take a look at the pull request on #286\n. This is a duplicate of #276. Working on a fix today.\n. @LK4D4 You're right. Looking into that now.\n. @LK4D4 and @technosophos can you test this out?\n. @LK4D4 using the latest code on this pull request I can't reproduce the error. Can you give me an example?\n. Never mind, I figured out how to replicate it.\n. @LK4D4 This works for me to do both a glide init on Docker and import the archive package into another project.\n. @LK4D4 Thanks. If you've got other issues I'm happy to poke at them.\n. @dmitris A 0.9.1 will be coming within the next day barring something unforeseen happening.\n. What version of Glide are you using (glide --version)? What version of Go and what operating system are you on?\nIs the project you're working on public?i If so, I'm happy to take a look at it.\nThere should be two state. If you see another one, please let me know.\n1. You ignore the vendor/ folder. In that case Glide will create and populate it.\n2. Your packages being vendored (stored in your projects VCS) in the vendor/ folder. If that happens you'll see messages such as gopkg.in/yaml.v2 appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag. Glide detects packages without a VCS directory and you can opt-in to updating those by using a flag.\nIt looks like there was some problem along the way or the vendor/ directory is in some state. If I had enough information to reproduce I might be able to help more.\n. @LK4D4 I'll start with the first one.\ngithub.com/docker/notary has a Godeps.json file that sets the version of github.com/docker/distribution to fed58bd2d3c096055c0e69c2fb86c9a4965d1b8b. This version doesn't contain github.com/docker/distribution/manifest/manifestlist. Something in the codebase is trying to import github.com/docker/distribution/manifest/manifestlist. Hence the error.\nIf docker has a glide.yaml file then updating the entry for github.com/docker/distribution to have a version of version: master causes the errors to go away. The reason for this is the first to set the version wins. Any time a differing version comes up after that a warning occurs.\nMy working glide.yaml followed by the shell output is up in a gist. \nDoes this help?\n. Fixed in e2c79cf6ec45fd07031b71756c5a671a63faa0b0\n. Can you please look at the pull request on #286\n. Fixed in #286.\n. @colemickens I'm glad this was a false alarm. We're really open to better error messages as well. I'll have to think about it here.\nOnce you hit Resolving imports Glide is scanning code. This happens in two possible ways:\n1. Glide reads the imports from a package to know about other imports to look at. The go/build package is used to do this. That package reads the code up through the import declaration to parse the imports.\n2. There are rare cases where a directory will have multiple packages. When Glide reads the .go files it skips +build flags so it can fetch dependencies for all environments rather than the one Glide was run in. If Glide encounters multiple packages it falls back to scanning the code to discover the build tags used and then scans based on the different permutations to build a list.\nHope this helps.\nIn the next major release we'll see if we can put a better message here.\n. I've tinkered with ways to handle this and none of it makes me happy. Pushing out another release.\n. Automating things safely is hard. I have to agree with @technosophos on the license issue. Glide is used by organizations that care about legal issues and we don't want to create automation that may cause an issue.\nWe're open to ideas on how to handle that well. I'm willing to have discussions.\nThe Glide plugin system would allow someone to create a Glide command that strips elements from a project. You can include parts of Glide such as the cfg or dependency resolver packages to figure out what's imported and what's not.\nWriting the code for this is easy. Dealing with the other complications is hard.\n. Here is an idea.\nDisclaimer: this is an idea, I'm not a lawyer, check with a proper legal expert, this may be worth experimenting with. This is playing with fire so mind the licenses.\nA plugin could be built that:\n- Looks at all the projects in the vendor folder\n- Removes the VCS directory. Go supports Git, Svn, Bzr, and Hg. So, it's worth making sure you handle all cases.\n- Inspect the licenses. The glide.yaml file has a field for the license in an SPDX format.\n- Have a configuration file of licenses you can strip files from. That way users can control the ones they know are safe for their situation.\n- The tool can read the config file to know the safe licenses to alter the codebase for, iterate over the projects in the vendor/ directory, check the license (like by inspecting the glide.yaml file license filed), and then strip files on the codebases that are safe to do so.\nYou might be thinking, this sounds like a pain. Following the letter and intent of software licenses can require a little bit of work. Rings true if you're making a tool for the masses. Especially if people are going to post their code + the vendored code on someplace like GitHub where they're now distributing something. That's right, checking in other projects into the vendor/ directory means you now need to mind the distribution section of the licenses.\nIf someone wants to start something like this as a plugin I'm happy to point out how to get started.\nAt the very least, I hope y'all understand why we're tentative at touching features like this.\n. I have two additional thoughts that may be useful:\n1. I wrote up a post titled \"Why Glide Doesn't Strip Unused Packages\". I find that forcing myself to write something for others helps me to clarify the thoughts. This explains the reason for the way we do things.\n2. From a glide.lock file you have everything you need to know which packages to keep. If someone does know it's ok to modify all their packages they have it would be easy to use this information to build a script that does modification work.\n. @daniel-garcia I understand the difference between stripping the VCS data and stripping unused code (a modification). I'm in the process of ferreting out what's ok and not ok to do. My goal is utility that's also safe for users.\nDon't consider this a dead issue. Behind the scenes I'm attempting to figure out what's ok to do.\n. I'm formulating a plan that may be workable for these use cases. More to come but first...\nThe functionality in Glide is starting to get large and we like the unix idea of different applications working together. Some pieces of functionality can have multiple purposes. With that in mind...\nI've created a utility that strips VCS directories from a tree. It's called rmvcsdir and handles the VCS that go and glide support (Git, Hg, Bzr, and SVN).\nIt can be used like:\nsh\n$ glide up && rmvcsdir ./vendor\nThis will update dependencies, fetch any new ones, and make sure the VCS data is stripped from the directories.\nrmvcsdir is written in Go. It can be teamed up with other vendoring tools or even non-package management uses.\n. Correction... the last shell snippet should have been...\nsh\n$ glide up --update-vendored && rmvcsdir ./vendor\nThis will tell Glide to update the vendored dependencies and any new ones that are fetched in resolution will have their VCS directories stripped.\n. @smousa There are two reasons to pull the repo and some future things we're exploring. Let me explain:\nReasons to pull the whole repo:\n1. You need to pull the whole directory structure. Do you know of a way to pull just part of the directory structure of a Git repo?\n2. The meta-data, such as tags, is needed to do version and version range lookups locally.\nTo handle resolving the tree across versions you need the data.\nSo, why not prune out unused packages? We don't do that in the core of Glide because that's not about package management but rather an optimization that's useful if you store the external packages in your projects repo. Some, but not all, do this. If you do that the safe default for following licenses and compliance purposes is to store it all. That is if the licenses and distribution allow those to even be stored/distributed together.\nIf you know it's safe to prune for your case than that optimization can be applied. We're working to make that easier.\n. @smousa @LK4D4 We've talked it over and for the next release we'll be adding a --strip flag that removes VCS directories from the vendor/ folder. This is one of a handful of new features that will be coming but I thought you might be interested.\n. @smousa @LK4D4 if you have a moment can you weigh in on #318. It relates to this issue.\n. What version of Glide are you using (glide --version), how did you install Glide (homebrew, go get, a binary), and what OS/version are you running?\nGlide has logic that detects when an import package is the same as the one it's in. We need to understand why that's not happening.\n. @neilpa This is a tough one. I can't remember seeing this. Can you share the results of go env. How did you install Go?\n. @neilpa Do you have any symlinks to the to any of the projects involved?\n. @veqryn The errors are blocking the glide.lock file from being generated. Can you share your glide.yaml file or a representative version?\n@neilpa are you on the latest 0.9.3 now? I asked because we fixed a number of bugs between 0.9.1 and 0.9.3. At the moment I'm a bit stumped because I cannot reproduce it (and I've tried on a couple macs). Any insight would be useful.\n. @veqryn I think the problem may be that your top level package is . rather than the path within the GOPATH. Can you update and try again. We use that path to determine things. If that's the issue it will help me determine a better experience for this problem.\n@tve are you also using . as the package name or is it something else?\n. @blackgold A fews things:\n1. If you use the --no-color (e.g., glide --no-color install) it will remove the characters around WARN, etc. This may make your output easier to read.\n2. What version of Glide are you using (glide --version) and how did you get it (binary, homebrew, go get, etc)?\n3. Before running glide install what's at the location /src/src/voyager/vendor/github.com/gorilla/context? It is an empty directory? A file? symlink? Something else?\n. Folks, what version of Glide are you using? Running glide --version will show it. The latest release of 0.10.2 should have this fixed. We need to know if this isn't fixed in the latest release.\n. Thanks for the level of detail. Are you using Cygwin, PowerShell, cmd.exe, or something else?\n. I think this is an issue where the parent directory needs to exist before the Git repo can be cloned into it on Windows. We'll try to get to this before the next release. If you're interested in working on a pull request to add this feature let us know and we can point you to the right place.\n. That would be great! The work needs to be on the Masterminds/vcs project. Creating the directory, like what was done for bzr, needs to be added to Git.\n. Thanks for the PR. I'll look at it this week.\n. I'll be releasing a 0.9.2 bugfix release in the next week. Holding off on merging new features until after that.\n. I've gone back and forth on this. Should this be silent or automatic? Should it be an error to catch the users attention? I don't know if I like just doing it because this is the kind of change a user should be aware of.\nI wonder if this is something we should put behind the --force flag.\n. @colemickens if you want to explore this in a pull request I'm open to it. As long as the UX is sane. Given all the other todos I'm likely not going to get to it myself anytime soon.\n. What version of Glide are you using, how did you get it (download a binary, go get, something else), what OS are you on, and what is your GOPATH?\n. @ruiyang2015 In Go you cannot escape the GOPATH. Glide does use the the go tool for some things. What happens if the GOPATH is set and your project is within it?\nIf that fixes it we need to put a better error message in place.\n. If you want to strip the VCS information from the vendor/ directory and have Glide still manage the updates you can do that. I wrote about it yesterday.\nWe have some plans to enable doing this in an better and easier manner in the future.\n. While it's very new, someone just tweeted about https://github.com/sgotti/gvc. It's worth checking out. I'm going to poke at it some more in the coming week.\n. I can explain what's happening.\nGlide, like the go tools, scans the file system to figure out the dependencies. This was a feature request some time ago and it's an expectation because tools like go get do it as well.\nThis issue may be due to the Windows path length issues that come up in node.js with the deep nesting. Is that a problem? What version of npm are you using?\n. Glide walks the complete tree to be able to fetch all the dependencies. Glide creates reproducible packages and versions. Go projects can have go files in nested subdirectories to it needs to scan for them.\nGlide can ignore some packages now. We likely need to add the ability to ignore some directories. That would solve your issue. I can look into that in the next week or two.\n. @kumarharsh I've personally got this as a use case so I'm working on it this week. Right now I'm attempting to figure out the new key for the glide.yaml file.\n. @kumarharsh Can you review the PR on #334?\n. @kumarharsh There was a bug with directory separators between *nix and Windows preventing subdirectories. Thanks for catching that. I just fixed it on master.\nWith that I believe this can be closed. If there's anything else please let us know.\n. I think I have an idea what's going on. Glide follows the same package name syntax that the go tool does. If a package can't also be fetched with go get it will have trouble in Glide.\nGitHub, Bitbucket, Launchpad, and a few others have special cases built into the toolchains. Once you move outside those you need to use package names like github.plaid.com/plaid/go-plogger-client.git and github.plaid.com/plaid/go-plogger-client.git/example/pkg in the import statements and the glide.yaml file.\nIf you switch that does it work?\n. There are a few things going on here. This may help add context.\nFirst, Go is opinionated on the import path. Putting .git in an import like github.plaid.com/plaid/go-plogger-client.git is a Go proper thing. You have to have things like that for go get to work. If you want to poke at the source you can look here or even at the specific external resolution expressions.\nWhen I first encountered this I was annoyed. We try to hold to the syntax used by the Go tool because breaking from that appears to cause more questions and issues than using it.\nSecond, Glide has a goal to get the dependencies right for a system. We strive for a complete dependency environment needed for an application. Prior to scanning the code that was the number 1 request. Adding it met the requestors needs and allowed us to get the whole tree.\nThe glide.yaml file allows us to have version information and details on repos when that's required. Details that are additive to what can be worked out automatically.\nThird, vcs and repo are only there when the name doesn't give enough detail or the right detail. For example, if there is a fork and you want to use the fork. There are cases where the repo location won't contain enough detail to detect it. Did you know some hosts, like SVN hosts (and Go supports SVN), don't have an extension on their repo locations? We need a way to capture it when it can't be detected.\nIn your case this should work:\nyaml\n- package: github.plaid.com/plaid/go-plogger-client.git\n  version: 6d7a49971a9273ca885599004f850b4a6486010c\n  subpackages:\n  - plog\nThis will be fetched over https://.\nDoes that help?\n. I think we can do some magic to detect GitHub Enterprise.\n1. We know the layout for projects in it\n2. Responses return the X-GitHub-Request-Id header\n3. The top level works for ?go-get=1\n. @albrow There are two things...\n1. We need to have a detailed discussion on breaking with the semantics of go get and its rules. The reason for some of the pain is supporting go get compatibility. I opened #498 to have this conversation.\n2. Because GitHub Enterprise uses ?go-get=1 in some places I think the idea would be to help that along a little more which would benefit others doing the same thing (e.g., GitLab on prem). Both Glide and Go have special rules for some domains and services so we're already prepared for them. I would expect this to be an extension of that.\nI would be happy to see a PR. I'm OK with some service specific things in there since we (and Go) already do that. Special case logic is ok. This may also affect the Masterminds/vcs package as well.\n. The hope is to merge gps in during the 0.13 release cycle. This issue has an impact there so I'm moving to 0.13 for discussion.\n. Let me state a few things:\n1. I would like a central metadata repo (see http://packagist.org for an example with PHP)\n2. Conversations have been happening for some time. I don't personally have the time but am working to help find the right home for something.\n3. What should and should not be in something like this is under discussion. The Glide issue queue isn't the right place for those conversations.\nFor now I'm going to close this. If nothing happens in the Go community in the near future something may happen around Glide and I may try to organize people.\nIt's staying on the minds of a bunch of collective folks.\n. @thockin I'm happy to try and help.\nWe like the unix philosophy. Particularly:\n\ncombining \"small, sharp tools\" to accomplish larger tasks\n\nGlide handles the package management side of things but that doesn't mean you need to store the external packages in your projects repo. That's up to you and many, for a variety of reasons, don't want to or choose to store external packages in their projects repo. It's common in most of the other modern languages not to store them.\nThat being said we're not opposed to this kind of vendoring, we support it to a certain extent, and I'm currently working to make that aspect easier.\nThe glide init command figures out what's being used and will import information from Godep and others. The glide.yaml file is a configuration file designed to hold intent, versions (including branches, tags, and commit ids), and version ranges (like semver ranges). Running glide update will download the external dependencies, resolve versions, make sure the complete tree is available, and generate a glide.lock file with the complete tree pinned to commit id.\nWith a glide.lock file the glide install command will reproducibly install all the same versions to the vendor/ folder. If the glide.lock file isn't present the update action will be performed.\nAlso, there's a flag (because we opt-in to this) to update vendored packages (when VCS data isn't available). glide up --update-vendored if you vendor as you do. VCS data for those that were vendored in the first place is not there on vendored repos after an update.\nTo update a dependency it's glide up [PACKAGE]. The reason you see a bunch of other things happen is because Glide attempts to re-resolve versions given this new data. It will look at SemVer ranges and work out what versions to use before pinning to commit ids again.\nIn Glide the first version specified in the glide.yaml or encountered wins. If you need to specify a version it works to put it in there.\nOther details are in the docs.\nThat manages the dependencies. But, what about storing just the packages?\nWe take the safe road for the masses. Some companies and projects don't want stripping and some combination of licenses you can't vendor and then distribute in open source. So, it's all opt-in.\nThe first step is stripping VCS data in the first place. I wrote about that yesterday.\nFor the next release I'm working on what's needed to enable stripping packages not being used. It will follow the unix philosophy (allowing to be combined with other tools). We'll make it easy to work with Glide, too.\nWe already have the ability to resolve just the package tree in use. I'm estimating that the next release of Glide with more details on this will come out in March.\nDoes that help?\nI'm in the k8s slack channel (username is mattfarina) if you want to talk sometime when I'm in there. I'm happy to help.\n. @thockin thank you for the feedback. We're discussing what to put in the 0.10 release right now. So, the timing is great.\nI understand why you want to check external packages into k8s repo. I've seen some of the k8s dependencies go away or move without a redirect being put in place. Working with other languages that fetch them at install time, even from GitHub, I've not encountered the level of change I've seen in k8s.\nMy hope is to support both the case where someone stores in their repo or fetches at install time.\nDecisions like this we (@technosophos and I) talk about. So, I'm going to try and get some of his time in the next couple days to talk this out. We've had a number of deep discussions on this so I want to make sure we're on the same page. I'll post back here as soon as we have some direction.\n. @thockin Here's what we're thinking. This would be for the 0.10 release coming out the middle of this month.\n- Add a --strip flag that removes the VCS data (directories like .git).\n- Add an interactive resolver for conflicts. This may still be a little bit of manual work for a project with the number of dependencies k8s has but it's possible. I've got some UI ideas to make aide the person making the decisions on conflict resolution.\nI'm struggling to see a good experience if packages are stripped from a repo. If the packages are stripped and someone working on the project needs another package that's part of a library they are already using they'll need to go out and fetch it again. This can create a complicated, and sometimes difficult, experience for anyone doing active development. If you see something else or a way to make a good experience I'm happy to talk about it.\nIf you want to discuss any of this I'm happy to connect on slack (I likely won't be back on there until Monday) or jump on a Hangout. Just let me know.\n. @thockin no objections on PRs. We like PRs. I'm mostly unavailable until Monday. I'll look at them this week.\n. @thockin @sgotti if you have a moment can you weigh in on #318. It relates to this issue.\n. #319 is an issue to track an interactive mode.\n. I would like to see this. Someone has already started work on Masterminds/vcs#10 to get this going. I need to find a few minutes to finish getting that in and then we can roll that up the higher levels. It would be great if you did the PR here. It will get it in far faster that way.\n. @dmitris I'm going to put some focus on Masterminds/vcs now and we'll get some of this in soon.\n. @dmitris That case is actually not handled yet. But, it's coming. I'll be continuing to iterate on it. I'll post here once that's in.\n. @dmitris this is now on the tip of master for github.com/Masterminds/vcs.\n. Thanks for the report. I can reproduce this.\n. This is a good and difficult question.\nI don't think there's a license issue with removing vendored packages from a dependency. But, that's the least of the problems.\nHere are a couple examples.\n1. What if you don't strip VCS information. Stripping the vendor/ directories from dependencies will cause those repos to become dirty. Working with them becomes significantly harder. Especially for those who work on a dependency at the same time as the parent and push the dependency repo. This can quickly get messy to manage.\n2. If a nested dependency has a reason to store a specific version.\nThis makes it hard for a tool to automate things.\nAs a rule, libraries should not vendor/ dependencies unless they have a very good reason.\nI'm not sure how to do this better than we do today for the go toolchain. There is a possible opportunity to detect if a dependency is vendored by a project and skip fetching it.\n. @sgotti at the moment I would prefer something like glide-vc handle stripping nested vendor directories. I may be persuaded to change my mind but I don't really want to add a bunch of complexity into Glide for that right now.\nDirty would be hard to detect for a vendored repo. If the VCS data isn't available the VCS can't easily do it for us. This is complicated. What's dirty? Missing files? Changed files? With a VCS it's pretty easy. Without it we just ignore it which is, in part, why updating vendored is opt-in.\nI think stripping vendor directories should be in the hands of the developer. They know what they're building and can deal with the consequences. This is really why libraries should not vendor. This is, in part, why storing outside packages in your VCS isn't common (or even allowed) in some other toolchains.\nYet, I understand the issues k8s and others are having that leads to this.\n. @thockin This is where things get hard.\nThe way go build and the other go tools work is to look in the vendor/ directory a requesting package is in to find a dependency. If it doesn't find it there it walks up the directory tree searching in each vendor/ directory for it. If not found in a vendor/ directory it goes back to the traditional methods of the GOAPTH and then GOROOT.\nThis is why the discussions in places like the go nuts mailing list have been to not vendor outside dependencies in your project if you're building a library for others to use.\nSo yeah, repo/vendor/foo.com/bar/vendor/... is respected. When I asked about it I was told that different people may want to vendor different versions or forks in their codebase. So, it's intentional and people are doing this.\nBringing this back to Glide, we've been wary to add something that alters a codebase to Glide which is what you're asking will do. The project glide-vc is working to be able to do this with numerous options. With this installed you'll be able to do things like run:\nsh\n$ glide vc\nWe're also going to add a scripts section to Glide. Consider this in the glide.yaml:\nyaml\nscripts:\n  setup: go get -u github.com/sgotti/glide-vc\n  install:\n  - glide install --update-vendored --strip-vcs\n  - glide vc\nThen you can run:\nsh\n$ glide run setup\n$ glide run install\nWe need the scripts for varying reasons such as installing applications used by generators. None of the scripts would be run automatically (for security reasons). It would be great to just use make but that's not always available or cross platform.\nThoughts? This is something we may want to get on a hangout to discuss in more detail.\n. @thockin thanks for being patient with me while I work through my thinking on this and taking so much time for your responses.\nIf you get a few moments can you take a look at #339. It's a pull request I just wrote on the topic.\n. I like where this is going but I don't like that this information was added to the config object. I'd like to avoid those becoming a junk drawer. I have a couple ideas to clean this up.\n. @thockin I like what you started. I'm in the process of building on in.\n. I'm going to close this because of #315 (which builds on this code). Details in that pull request.\n. I can't seem to reproduce this problem. I'd like to. Can you share an environment or provide some instructions?\n. @sgotti since this is machine to machine communication, would it be best to get the output of glide list as json?\n. @hyper-carrot A couple things:\n1. Glide tries to detect go-get redirects. Is gitlab.intra.wesai.com available at https://gitlab.intra.wesai.com? Or, is it http only?\n2. Can you run $ glide --debug up?\n. @hyper-carrot I think I see the problem.\nIs go.pkg.wesai.com/p/base_lib also available at go.pkg.wesai.com/p/base_lib.git? When it comes to package names Glide currently follows the patterns from go get. You can see the naming conventions in Go as a regex. Your convention is the last on the list.\nThe package in Glide needs to match these naming conventions.\nThe way Go has chosen to do this is a little confusing. You're not the first person to run into this.\n. @hyper-carrot Glide has an insecure mode like go get. That may be the problem. glide get --insecure go.pkg.wesai.com/p/base_lib can add it to the glide.yaml. In the glide.yaml it will look like:\nyaml\n- package: go.pkg.wesai.com/p/base_lib\n  repo: http://go.pkg.wesai.com/p/base_lib\nDoes that help?\n. @F21 Can you try running glide --debug install? This will provide a lot more information which will help track down the problem.\nAlso, can you try the tip of master. I found a problem related to Windows path separators that I just fixed.\n. @F21 There is a different error this time. My suspicion is that Docker is checked out (by one of the packages) to a version prior to those sub-packages being there. One of the dependencies is likely pinning to an old version and Glide detects that.\nIn your glide.yaml file can you try adding:\nyaml\n- package: github.com/docker/docker\n  version: ^1.10\nThat will tell Glide to use the latest version after 1.10 but before 2.0.\n. Folks, can you take a look at #325. It attempts to implement this feature.\n. With the merger of #325 I think this is complete. If not please re-open.\n. I've added Masterminds/vcs#17 to track getting commit metadata\n. I've started with more detailed conflict message in #350.\n. Now the #350 is merged I'm going to start on #353 to continue the enhancements.\n. I'm removing the milestone as this is now more of an epic with different features landing at different times. Those features can have milestones.\n. @IvanMalison A PR was started in #331. It still needs to be finished.\n. I'm moving this to the 0.11 release since it's not complete. The work has already been started.\n. Implemented on the tip of master.\n. Can you share your glide.yaml file?\n. @abiosoft The glide.yaml file is about the intent. The version listed in there is the intended version with the tip of the default branch being the default. The version can be a semantic version, semantic version range, a branch (to follow), a tag, or a commit id. The glide.lock file holds the current state. If you're following a branch it holds the commit id from the last update. If you're using a semantic version range it holds the commit id for the latest version resolved on update.\nDoes that help? Are you familiar with package manager tools for node.js, Rust, PHP, or other languages with similar tools?\n. What about an option where a commit is fetched at a tar file and decompressed rather than pulling the repo. We can detect GitHub and others. For example, the pattern https://github.com/{username}/{projectname}/archive/{sha}.zip can be used.\n. @jchauncey I've already read that. There are a few things that jump out:\n1. The repo in question is similar to Helm specs or Homebrew. It's the store of packages and versions. Something Packagist, NPM, and others have as an API service. This is different than normally cloning libraries for use in something.\n2. Part of their problem is the giant directory tree. A problem Go libraries don't have. Not to that scale.\n3. I've poked at the idea of using Shallow clones. This was great to teach me about how GitHub uses them.\nAside from that it's useful to look at other projects that solve things in a similar way. Composer for PHP is a good choice because PHP is insanely popular (more than 80% of sites are PHP powered) and Composer fetches libraries from their repo sites like GitHub. And, you don't run into this problem with Composer.\nComposer has drivers (for places like GitHub, Bitbucket, etc) and those have the ability to get a dist (for example, see the GitHub one).\nThe API they hit to get the archive is rate limited. To help get around this they cache the archives locally in a cache directory.\nHere's an example hitting that API:\nsh\n\u00b1 curl -I \"https://api.github.com/repos/Masterminds/semver/zipball/master\"\nHTTP/1.1 302 Found\nServer: GitHub.com\nDate: Wed, 09 Mar 2016 19:37:15 GMT\nContent-Type: text/html;charset=utf-8\nContent-Length: 0\nStatus: 302 Found\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 58\nX-RateLimit-Reset: 1457555822\nCache-Control: public, must-revalidate, max-age=0\nExpires: Wed, 09 Mar 2016 19:37:15 GMT\nLocation: https://codeload.github.com/Masterminds/semver/legacy.zip/master\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Allow-Origin: *\nContent-Security-Policy: default-src 'none'\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\nX-Content-Type-Options: nosniff\nX-Frame-Options: deny\nX-XSS-Protection: 1; mode=block\nVary: Accept-Encoding\nX-Served-By: b0ef53392caa42315c6206737946d931\nX-GitHub-Request-Id: 44312B5C:101B7:888EFB7:56E07B6B\nWhile I'd imagine it's not official, there is also https://github.com/{username}/{projectname}/archive/{reference}.zip where the reference can be a tag, branch, or commit id. For example, https://github.com/Masterminds/semver/archive/master.zip This is a 302 redirect just like hitting the API. For example,\nsh\n\u00b1 curl -I https://github.com/Masterminds/semver/archive/master.zip\nHTTP/1.1 302 Found\nServer: GitHub.com\nDate: Wed, 09 Mar 2016 19:42:18 GMT\nContent-Type: text/html; charset=utf-8\nStatus: 302 Found\nCache-Control: no-cache\nVary: X-PJAX\nLocation: https://codeload.github.com/Masterminds/semver/zip/master\nX-UA-Compatible: IE=Edge,chrome=1\nSet-Cookie: logged_in=no; domain=.github.com; path=/; expires=Sun, 09 Mar 2036 19:42:18 -0000; secure; HttpOnly\nSet-Cookie: _gh_sess=eyJzZXNzaW9uX2lkIjoiYjJhNzAyNzhjYzEyZmY4NTFmY2ExNzMxMzNkNjA2NzIiLCJzcHlfcmVwbyI6Ik1hc3Rlcm1pbmRzL3NlbXZlciIsInNweV9yZXBvX2F0IjoxNDU3NTUyNTM4fQ%3D%3D--12bea283647df8c0558c99968c0cccece5dc4c3b; path=/; secure; HttpOnly\nX-Request-Id: d63a504d113323fa0fe48215ff107f44\nX-Runtime: 0.017566\nContent-Security-Policy: default-src *; base-uri 'self'; block-all-mixed-content; child-src 'self' render.githubusercontent.com; connect-src 'self' uploads.github.com status.github.com api.github.com www.google-analytics.com api.braintreegateway.com client-analytics.braintreegateway.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action 'self' github.com gist.github.com; frame-src 'self' render.githubusercontent.com; img-src 'self' data: assets-cdn.github.com identicons.github.com www.google-analytics.com checkout.paypal.com collector.githubapp.com *.gravatar.com *.wp.com *.githubusercontent.com; media-src 'none'; object-src assets-cdn.github.com; plugin-types application/x-shockwave-flash; script-src assets-cdn.github.com; style-src 'self' 'unsafe-inline' assets-cdn.github.com\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\nPublic-Key-Pins: max-age=300; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"JbQbUG5JMJUoI6brnx0x3vZF6jilxsapbXGVfjhN8Fg=\"; includeSubDomains\nX-Content-Type-Options: nosniff\nX-Frame-Options: deny\nX-XSS-Protection: 1; mode=block\nVary: Accept-Encoding\nX-Served-By: 3e68290776c691d4ed02ce5a0c891c6a\nX-GitHub-Request-Id: 44312B5C:2E31:F0749DD:56E07C9A\nFor glide install it could be possible to have a --skip-vcs flag that just fetches zips and unpacks them into vendor.\n. To provide a little insight into Composer cache layout...\nsh\nmfarina at Matts-ATG-MBP in ~/.composer/cache/files/hpcloud/hpcloud-php go:(go)\n\u25cb ls\nee0dcd156acfebaf15a107396406121ade2f78ce.zip\nIt's also worth noting that GitHub does rate limiting by IP addy. Other things running in Travis CI would impact API rates if it happened before it on the same IP setup.\n. @russmatney Glide keeps compatibility with go get on remote package names. If you go to the import section on the glide.yaml docs you'll see the rules listed under the package property for a name.\n@technosophos should we keep go get compatibility? This is one of those places I'd love to have a lively conversation on.\n. @sdboyer godep compat? Do you mean go get compat?\n. @atombender A couple quick questions...\n1. In the directory vendor/github.com/aws/aws-sdk-go do you have a .git directory?\n2. Do you have the external dependencies checked into your projects repo (vendored)?\n. A couple things....\nGlide resolves the complete version hierarchy. When a new package is retrieved it reworks the right version to use for everything. That way if a new package you retrieved relies on a specific version or version range the entire tree is resolved to try and make that work.\nTo make sure it has all the possible versions to resolves it gets an update. This causes changes if you're following the tip of a branch (such as the tip of the default branch) but doesn't if you're using versions.\nSomewhere in the backlog is a request to resolve the tree on Get without updating the info we have.\n. @james-lawrence if you fetch a new dependency how do you know the locked versions are still the right ones? For example, say you have dependency A with a dependency on B at a version of >= 1, < 2. You project resolved dependency B to version 1.4.6 and locks it. Then, you glide get dependency C and it has a dependency on B but to a version >= 1, < 1.3. The locked version of B is no invalid. You need to re-resolve the complete tree.\nThis example doesn't deal with the reason for an update but rather why the need to re-resolve. An optimization would be to look at the imported dependency, it's tree, and see if anything else needs to be updated. That's an optimization we've not gotten around to.\nWhat if dependency C needed ^1.5 of B? That would also not resolve in the above example. And there are numerous cases where you would need to fetch updates to get newer versions.\nDoes that help explain why? There certainly are optimizations that could speed things up and pull requests are welcome.\n. @tcurdt can you make a case for not re-resolving on get? Glide needs to resolve packages and versions for things like dependencies of dependencies of dependencies.\n. Because of the way Go handles paths the fork should be checked out to the same location as the original. Otherwise you will have problems.\nIf you are specifying a fork as an import set the package to the original name. Then set the repo property to the fork location. Glide will check it out to the original location.\n. Note, this implements #320.\n. @alde This is a good start. Thanks. It still needs to have the resolver get the imports from the test files and put them into the devImports.\n. @technosophos The external tools become a little more difficult to use for devImports. The generator is a great example. How do you detect it's a tool that should be installed and install it rather than just put it in vendor? I was considering scripts for the case. Then devImports can be things like imports only used in tests.\n. @alde Is this something I should pickup and finish completing or is this something you wanted to finish rounding out?\n. Here's a thought, should it change from devImports to testImports to clear up some confusion?\n. Early next week I'll have a PR to more formalize this. The hard part is already done.\n. @timstudd Thanks for bringing this up. It's definitely a bug.\nTwo things:\n1. Did you know there is a conf.HasIgnore() method?\n2. Ignored packages should not be on confcopy. That earlier bug should be found and squashed.\nDo you want to take a shot at finding why ignored packages are ending up on confcopy or shall I look into it?\n. So, I'm going to approach this from a UX point of view. What will the experience be like for end users and what do they expect to happen?\nLet me start by asking, why would a user want to opt-in to build tags rather than just have everything in one place? What's the use case?\nOr to put it another way, what experience is likely to produce the fewest questions in issues by people who don't read the docs?\nI'm not convinced that opting in to build tags will be an improvement to the experience. Can someone convince me?\n. @technosophos The way it works today is that Glide gets all dependencies for all build tag variations. You can cross-compile and use go build without having to do anything special with Glide. This includes working with users specialized build tags.\nThe trade off for projects that Glide fetches all the packages even if you don't need them for an environment instead of having to figure out the right environment to switch to or having the users do anything extra. Less cognitive work for users for the case you need to get more.\nFor projects like k8s that store their dependencies in the VCS for varying build tags this becomes more complex as well.\nWhat's the win for users?\n. I'm not really happy with the name exclude but ignore was more useful before there was import tree walking. ignore is far less useful now.\nThe exclude name is used other places such as:\n- In Composer where it's exclude-from-classmap.\n- Cargo (Rust) uses exclude though the context is a little different. It's for package files to send to the central repo.\n- NPM uses and ignore file and is similar to Cargo in intent.\nI'm going to update to excludeDirs to avoid confusion. It will happen and I'd prefer to answer fewer questions later.\n. If we want to be more fine grained we could use a commit hook to alter it on each commit.\n. Thanks. Merged and cleaned up the messages to be in the format:\nFound Godeps.json file in vendor/github.com/opencontainers/runc\n. @sgotti good catch. I was looking at Kubernetes because it's a more complicated example than most. Some of the packages it imports have Godeps storing the dependencies in the vendor/ folder and others in the _workspace/src folder with rewrites. Somewhere in the process Godeps resolves all of this. Rewrites are a pain. We may need to undo them.\n. @thockin We have desire for something as elegant and simple (not sure it's really simple) as is available in Rust, Python, JavaScript, PHP, and other languages. The way the Go ecosystem for dependencies has grown up we have to be a little pragmatic until we have a better overall situation (hopefully someday). I'm trying to figure out where to be pragmatic.\nFeedback helps shape that. I'm not going to let the tail wag the dog but I will take everything I can to be pragmatic. I'm an engineer not a scholar. I'm looking for solutions not theoretically proper.\nIt might surprise you but there is a fair rewriting that needs to be undone to remove the Godeps/_workspace directory. From a quick pass of a quick import you can see the files that need to have their rewrites removed. Godeps does this for you as well.\n@sgotti This is opt-in for a reason. It has potential to break things. Before releasing we'd need to add some messaging around that.\n. I've been ponder this and a few things are relevant:\n1. I think we need to support Godeps/_workspace and undoing rewrites for awhile. Godep users are moving to vendor directories but we need to support the old way for awhile. So, this functionality is deprecated from the moment it goes in because it will be removed at some point.\n2. I moved the stripping functionality to a custom sub-package within godep. Go uses vendor, Godep is moving to that and has its legacy method, GB uses vendor/src, and most other tools now use vendor. Everything but the old Godep is handled by the vendor stripping. I considered a plugin here but I don't thing another method is going to come along.\n3. Docs are important and I added some docs to help including a note about the old Godep method.\nWith that I think it's ready to go.\n. I'm up for this and have been for some time. To link in other issues, #39 and #128 are related to this.\n. This has been implemented. See the mirror command and subcommands.\nIn the future I would like to add patterns to the mirror setup. Now that the groundwork has been laid it should be easy. Any takers?\n. @aaronkavlie-wf I agree. Most of the underlying work (which included tests) ended up in github.com/Masterminds/vcs which has tests. That said, we need more tests here. It would save me on all the manual tests I run when changes are made here.\nPull requests are welcome.\n. This cache code was all removed now that the cache is all default. The VcsGet code is now far simpler.\n. Can you share your glide.yaml file or is this project public? A little more detail would make it easier to figure out the problem.\n. Overcome by #351 \n. @ninhdh0 A few things...\n1. Version 0.9.3 is in homebrew. I would suggest updating.\n2. As @james-lawrence suggests, this is a duplicate of #328.\n3. Glide is designed to work with versions (semver, semver ranges, tracking branches, etc). The default when no version is given is to track the tip of the default branch (usually master for Git projects). When a new dependency is fetched the versions in use need to be re-resolved to make sure the tree is using the correct versions. This is why that happens. If versions are in use this isn't as big an issue.\nI'm closing because this is a duplicate.\n. @brycefisher Nested vendor directories is complicated.  There are a couple things to know.\n1. Instances created from a version of a package in one vendor directory are NOT compatible with the same package, even the same version, in another vendor directory. I wrote up an example.\n2. Each instance of a package in a vendor directory will end up in the final binary. That makes it easy to get to binary bloat.\nThat means the safest method is to use one vendor directory at the top of an application. This is where we are today.\nI'd like to be able to be smarter with the vendor directory handling. For example, if a package is using a different version from others and isn't exposing any instances put it in a different vendor directory. We've had some recent conversations about it and if you'd like to join us we're on Gitter.\nWe've learned, through a bit of experience, to craft a solution that brings about the fewest support issues and problems. We experimented with different solutions early on. A top level vendor directory does that. Moving to a more nuanced solution is something I'm open to but we need to provide a great experience.\n. @brycefisher Also, I've not looked into why you didn't get to the error about a conflict. I think the previous error stopped it from getting to that step. There is a point, if code didn't call a package not there in the checked out version, that a message comes up notifying you about the conflict.\n. @technosophos @thockin this is work in progress but I'd be curious of your take on this type of information. For example,\nsh\n[WARN] Conflict: github.com/aws/aws-sdk-go rev is currently bf2f8fe7f45e68017086d069498638893feddf64, but github.com/google/cadvisor wants 72440a9c5a884936f1c679591fcf04e31a9b772a\n[INFO] github.com/aws/aws-sdk-go reference bf2f8fe7f45e68017086d069498638893feddf64:\n[INFO] - author: Jason Del Ponte <delpontej@gmail.com>\n[INFO] - commit date: Mon, 21 Dec 2015 11:30:48 -0800\n[INFO] - subject (first line): Tag release v1.0.7\n[INFO] github.com/aws/aws-sdk-go reference 72440a9c5a884936f1c679591fcf04e31a9b772a:\n[INFO] - author: Jason Del Ponte <delpontej@gmail.com>\n[INFO] - commit date: Tue, 16 Feb 2016 14:36:47 -0800\n[INFO] - subject (first line): Tag release v1.1.3\n[INFO] Keeping github.com/aws/aws-sdk-go bf2f8fe7f45e68017086d069498638893feddf64\nThis is still a work in progress. Looking for feedback before I continue.\n. @technosophos @thockin As a next step I'd like to get smarter with commit ids. I think we can extract a tag if one is available and use that. So, if someone has a Godep file with a commit id we can extract the actual tag tied directly to that commit. If it's SemVer we can extract meaning or, at the very least, display the tag. See #353 for more details.\n. It's now displayed. See #459.\n. A couple things.\n1. If no version is specified the glide.yaml file the default is to follow the tip of the default branch.\n2. Running glide update will resolve the dependency tree and versions based on the glide.yaml file. If it's following the tip of master on a project it will update to the latest commit. The new state will be written to the glide.lock file.\nYou shouldn't have to remove a dependency to update it. Glide does that for you.\n. I'm rather confused. I just started with this glide.yaml:\nyaml\npackage: tt\nimport:\n- package: github.com/juju/errors\nIt was created using glide init on the codebase. I then ran glide update and it produced the following glide.lock file:\nyaml\nhash: c5d0b5564bb639895d120e9a72eb397a6eb6efc23a772e808c9a49e20db395de\nupdated: 2016-03-27T20:59:57.085268681-04:00\nimports:\n- name: github.com/juju/errors\n  version: b2c7a7da5b2995941048f60146e67702a292e468\ndevImports: []\nThis does have the latest commit. This is using Glide 0.10.1. I wish I could reproduce your issue.\nDoes your git client have a cache? Glide drops down to git to make calls to GitHub.\n. Are you using glide update or glide install? glide install installs what's listed in the glide.lock file. glide update re-resolves the tree and generates a new lock file.\n. What environments does test -n $TERM && tput colors 2 work on? All unix, linux, mac, and bsd?\n@sdboyer the windows vs non-windows coloring loads separately and for Windows we don't have color right now. So, we don't have to worry about it, yet.\n. I'm not sure about using github.com/gdamore/tcell to detect this one thing. The way LookupTerminfo works is by going to a database that needs to be built in. The database knows all the terminals and details about them. It's not small.\nIt would be easy to create a slimmed down database that only had to know about colors from this with a simple lookup. Would be much smaller (less of an impact on final binary size) and far less to vendor.\n. Now that I'm back from vacation I'll take a look at this.\n. To help with investigating... there are a few things at play here.\n1. There are two phases. First is the update and then there is the version setting.\n2. When in a detached head state Git does a fetch but doesn't pull (because it would cause an error).\n3. When version setting happens if there is no version set it skips setting the version.\nIf this is the case there is a possibility to get into a detached head state and updates stop. This is a bug. What we need to do if try to make the default (when no version is set) smarter so this detached head state isn't such an issue.\n. @ax-nathan I'd actually like to automate some of those things. I recently made changes to the vcs package to allow me to do that more easily. So, I agree completely.\n. A couple things....\n- Can anyone who had this try to reproduce. I think the latest codebase fixes this problem.\n- Using the --debug flag will now display the output to a failed vcs command if there was any. No need to path in a logger now.\n. @ippy04 did you try the tip of master? The latest code as of today?\n. @ippy04 thanks for checking. Glad this is fixed.\n. I think the LocRelative would need to be brought into the glide tree command as well.\n@technosophos any thoughts on this implementation?\n. @tmm1 thanks for the contribution!\n. @schickling you can do this today. If you have 4 packages and one of them is vendored Glide will automatically identify that just that one is vendored. If you run glide up -u it will update everything and just that one package will have it's vcs metadata removed afterwards.\nGlide is smart enough to identify all the packages already vendored and keep them that way.\nWhat it doesn't do is the initial stripping of the vcs directory.\n. I just updated the docs to explain this. Please re-open if there is further need.\n. @tzneal thanks for the contribution!\n. @chancez First, nice work on this. I like seeing this as json and json-pretty. I can use that myself.\nI do have some feedback for changes (more on that in a moment). If you're not going to have time just let me know and I can make them via an additional commit.\n. @chancez thanks for the contribution. I finished the tweaks off.\n. Since this problem is generally going to go away I would suggest this as a plugin. I've seen this request a couple times. Basically, I could suggest a plugin that copies the contents of the vendor/ folder to the appropriate location in the GOPATH. Would that work?\n@sdboyer The timestamp is to tell people or tooling when the last update occurred. If nothing has changed we can likely skip updating the timestamp.\n. Two address the issues here.\n- The timestamp is now only changed if the content has changed.\n- With Go 1.7 not allowing for the disabling of the vendor experiment and security updates only for 1.7 and 1.6 I think we can skip the copy to gopath functionality.\nI'm going to close this. If k8s does adopt glide and we need the copy-to-gopath I can make a plugin as part of my k8s time.\n. @thockin with the exception of the new client-go that resides within the staging area of k8s and needs to be copied to vendor/ you can do that. Do you need to maintain that workflow for long?\n. @thockin I need to get a bugfix release out in the next day or so. After that I'll look into this. We were talking about this issue earlier in the day. I'm going to look for the fastest and least complicated solution for this.\nCan I assume https://github.com/thockin/kubernetes/tree/glide is where you're working on this? If I had a suggested change would you be open to a pull request there? Note, I am under the Google CLA already.\nRight now the --strip-vendor flag should cause the godep rewrites to be undone if they are vendoring in the Godeps/_workspace directory. This will happen inside of Update.\n. @thockin There are a couple things we'll be doing.\n1. vsolver is coming and with it we will be doing some changes to the way things are handled.\n2. I'm going to work on get to make it a better experience no matter how solving improves. In support of that I've been working on lower level VCS functionality (because Go does more than git) to support what's next this week and hope to come back around to get and some other Glide work next week.\nThe work your doing on kubernetes also gave me an idea for a plugin (some of which makes sense to roll into Glide). You'll see more of me on this stuff next week.\nHaving working compatibility with 4 VCS can take more time than I'd like.\n. The get, update, and install commands all do their work outside the vendor/ directory now. If all of the work was successful it exports the packages and moves the export to the vendor/ location.\nSo, if there is a problem in the middle of resolving it exits without mangling the vendor/ directory. This brings about more safety.\nI'm going to close this issue out now that the original problem are, I think, all fixed. If not please open new issues.\n. There is a way for glide get to put version information into the glide.yaml file.\nsh\n$ glide get github.com/coreos/etcd#v2.3.1\nThe glide get command can get one or more dependencies. Each dependency has it's location and then an optional # followed by any version Glide works with.\nIn the etcd example it's a tag name. When the glide.lock file is generated it will have the associated commit id for that tag.\nDoes that help?\n. I should also note that it's acceptable manually edit glide.yaml files.\nI've been known to run glide init to generate the initial glide.yaml file and then edit it to add the versions or ranges I wanted to use. I prefer to have versions or ranges in my glide.yaml file as they are easier to understand than revisions. While this is my workflow I know now everyone will use it.\n. @thockin to ferret out your thinking a little more, would you want it to grab the latest stable release if there was a release otherwise the latest commit rev? Or, just the latest rev?\nI'm also thinking about adding a way for glide update and glide get to not update the entire tree but only specified packages and their direct dependencies. Thoughts?\n. @thockin I have some ideas on how to get there. Before I work on that I'm making changes to the vcs package to support the work here. Once that has a release (hopefully next Monday or Tuesday) I'm going to switch to some work here.\n. @jtblin might bitbucket.org/jtblin/some-repo/apipb be a private repo? Or, is the repo path correct?\nI was just able to reproduce this error when the endpoint on bitbucket.org is an inaccessible or nonexistent repo. If this is a private repo can you updated the glide.yaml entry to look like:\nyaml\n- package: bitbucket.org/jtblin/some-repo\n  repo: git@bitbucket.org:jtblin/some-repo\n  subpackage:\n  - apipb\nThis will tell git to use your credentials to access the repo.\nIf this is the case we may be able to catch this bitbucket error and provide better context.\n. @jtblin I get this error when there's an access issue to the repo. When the package is set to bitbucket.org/jtblin/some-repo and no repo is set it will try to clone as https://bitbucket.org/jtblin/some-repo. If this is a private repo, even if you can otherwise push to it, Glide may have issues pulling. That's why I suggested setting the repo to the ssh style syntax that would cause Glide to use your ssh keys for auth.\nThis error shouldn't be picked up by protobuf.\nWhen you get the error:\nsh\n[ERROR] Error looking for bitbucket.org/jtblin/some-repo/apipb: XML syntax error on line 7: expected attribute name in element\nI believe it's saying the repo bitbucket.org/jtblin/some-repo is inaccessible. It's not able to fetch bitbucket.org/jtblin/some-repo. This is something we need a better message on.\n. I just ran a couple more tests. On bitbucket.org when the repo is private and no repo property is set in the glide.yaml I get an error of XML syntax error on line 9: expected attribute name in element. When the repo doesn't exist on bitbucket.org I consistently get the error XML syntax error on line 7: expected attribute name in element.\nI've not tracked this yet but am able to reliable reproduce these errors.\nI'm going to see if I can get to the bottom of these errors (as I didn't expect this error at all) and provide a better message.\nYou can get more information running glide --debug up. This will provide far more output that can pinpoint where the issue is happening.\n. What version of Glide are you using and how did you install it? \"I Think\" that Cannot detect VCS error was recently fixed. I'll run some tests today.\n. @jtblin now that I know how you got to this I'll look into fixing this.\n. This should not be fixed on the tip of master with the use of the latest vcs package.\n. @vishr I didn't note it in the release notes but this should now be improved. If there's a not found or access denied it should tell you.\n. I've seen this before. We are relying on the package name to detect other projects that import the parent. This isn't the first time this has caused an issue. We may want to auto-detect it and do some handling around that.\n. @sectioneight this is actually a duplicate of #39. I identified early on that we need this.\nHaving overriding aliases is definitely something we need to have for many enterprise environments and some places that require high control. Where I work we need the same level of control your SREs require.\nIf you're going to craft this for your own needs would you want to try and contribute it?\n. @technosophos @sdboyer I think it's far easier than that. When a vcs.Repo instance is created we do a lookup on the remote from a list. If the one we were going to use is there and an alternative is listed use that instead.\n. I hope to have this fixed (with a release) in the next day.\n. There's a fix posted to #376.\n. If there was a restore function, like we're talking about on #366, would this be needed?\n. @thockin I want per-project GOPATH. Prior to the GO15VENDOREXPERIMENT we tried to do this on Glide and I've spoken with Dave Cheney about it for GB. There are a number of hard coded things in the go toolchain or the official add-ons that are brittle when you try to do per-project GOPATHs. We ran into a bunch of those.\nThere are a couple routes if you want to go there. First, you can rewrite parts of the go toolchain like GB is doing. Second, you can fake a proper environment with lots of copying. The latter is a bit slow due to all the copying. I've experimented with cross platform copying (I actually used k8s as an example to get big project support) and it's a bit of work to make it fast cross-platform.\nWhen the vendor experiment came along we decided to try that and it's better than nothing if we want to use the core go toolchain.\nGodep for go 1.4 is able to munge the GOPATH because of the Godeps/_workspace/src directory. A second directory in the GOPATH can be pointed to the _workspace directory and it mostly works. This is how Glide worked for go 1.4. It had the dependencies in the _vendor/src directory.\nSo, we've put a lot of thought into it.\nHow long do you need to support Go 1.4 for? I wonder if it's worth trying to create a go14 compatibility plugin for the short term.\n. Also, if anyone wants to talk per-project workspaces I'm game. It's not a small simple topic though.\n. @thockin I was just looking at the Go release support cycle. The Go team isn't supporting 1.4, even for security issues, any longer. Is there anything detailing why Kubernetes is supporting Go versions the Go team is no longer supporting? Trying to wrap my head around this.\n. @thockin if there a place to look (e.g., a SIG) to work on the Go 1.5 and 1.6 slowness. I may have someone I can point at that (in a week or so) who has performance skills.\n. Glide doesn't honor build tags because it's trying to resolve the complete cross platform dependency tree. The dependencies may span multiple go versions, operating systems, and so forth. If only one platform had their tree vendored or only the dependencies for particular environment were locked it would cause problems in other environments. Especially in the windows vs linux setups where it's common to use build tags to separate work.\nFor #373 I'll have a fix in the next day. I'm marking this as a duplicate and closing in favor of that issue.\n. This is a good question. @technosophos do you remember why it was done this way?\n. Pull request to fix this at #383. Reviews welcome.\n. @crsmithdev thanks for trying to clean this up. I had a chance to skim it (I'll give it a finer pass later).\nFrom this one question came up. There are both conf and confcopy. The reason confcopy is passed into the installer is because transitive packages are added to this. We need both a pristine copy of conf and a version containing the transitive dependencies for doing things like writing the lock file.\nHere is seems the installer skips confcopy (if not I might have missed it). That's going to create some issues.\nDoes that make sense?\n. This is now out of sync and about to be superseded by the gps integration work. Closing.\n. Thanks for the contribution!\n. @franciscocpg thanks for the pull request. I like being able to pull more information.\nWhy the addition of the version property to the glide.yaml file? Shouldn't this information be pulled from the underlying VCS the code resides in? Setting aside Svn, there are ways to call into the VCS to get a version like 1.5.1 (a tag) or 1.5.1-11-gd93703f that says it's 11 commits past 1.5.1 and the commit id (short version). Wouldn't this be better than doing double duty to maintain versions in both tags and in the glide.yaml file?\n. @franciscocpg We may not be explaining the version handling well. Being that version handling and VCS is common in software we may be jumping over some details.\nThese may be details you already know but I don't want to assume anything.\n- A version should only point to a single commit. So, version 0.10.2 of Glide is really 2d0eb388e16d833ba3c55068335b3577b6b09ff0. This should never change.\n- A version to a single point in time is needed for reproducible builds. Only in that single commit will you be sure to have the same behavior.\n- Versions provide meaning that commit ids don't. That's where their use comes in. SemVer provides for semantic format. A stable release with a version is giving the intent the author(s) believe the release is stable. Otherwise it may not be.\n- The common way to handle releases in software is a tag in a version control system. This assumes you are using version control (and all software should be under version control... I'm happy to explain why for anyone who doesn't know).\nIf the version were listed in the glide.yaml file and carried between versions how could you tell which version was the release?\nFor example, in git I can run git describe --tags. If I were on the 0.10.2 release it would return that. If I were after it I would get something else like 0.10.2-3-g77c0ee9. This is 3 commits after the release and the short hash is on the end. This is between releases and unique.\nVersion ranges are entirely different. They are great for solving for the right versions to use and Glide supports those. It's just not good here.\nDoes that help?\n. @franciscocpg thanks for the contribution.\nI did update the help text but otherwise this works. We can, in the future, add version handling that talks with the VCS.\n. @sdboyer first, wow... that's a huge changeset. It's going to take a little bit to look at that.\nSecond, in your quick review request of c708bf7d75ce8e87295546ced286b8af2b2a2a42, I'll need to look further at why you're asking for the manifest / lock pairing to understand what's going on.\nI would prefer that the mechanism that looks for external imports be pluggable rather than hard coded. So, it would iterate over a list of the things rather than go one by one. Though, this is an area the current importer could really improve on.\n. @sdboyer Two pieces of feedback so far...\n1. The use of github.com/Sirupsen/logrus is going to create an odd UX if debugging is enabled (which it should be). We should talk this part through.\n2. Need to deal with dependencies in test files. This is a big ask and someone already started a PR. It's currently the most requested feature.\nI'm going to keep poking at this but I wanted to record these before I switched off reviewing for the day.\n. @sdboyer can you use the normal logger interface for your application and pass in logrus for your test runs? Then anything implementing the logger interface can be passed into vsolver. I can even make a logger interface for the msg package so it can work fluidly with Glide. I'm happy to discuss the details.\n. @sdboyer A few things.\n1. Keep up the good work.\n2. I like the example where someone can use gps with just a few (well 30) lines of code.\n3. It seems there is still a long way to go on features. For example, the go-get redirects. I'm curious of the plan.\nIf you want we can get on a videochat and talk sometime.\n. @sdboyer Thanks for the updates on this. I just pulled the latest and ran into another problem.\nFirst, I ran go run glide.go up and it proceeded to successfully go through an update and generate a new glide.lock file exiting with a 0 status. This was great to see.\nI next tried to run go run glide.go up again. I wanted to test if the new versions worked to generate new version (which should really come to the same conclusion that just happened). What I got was an error.\n``` sh\n$ go run glide.go up\ngithub.com/Masterminds/glide/vendor/gopkg.in/yaml.v2\nvendor/gopkg.in/yaml.v2/error.go:4: \"ERROR: the correct import path is gopkg.in/yaml.v2 ... \" evaluated but not used\ngithub.com/Masterminds/glide/vendor/github.com/sdboyer/gps\nvendor/github.com/sdboyer/gps/constraints.go:53: undefined: semver.Constraint\n```\nThe new glide.lock file reads:\nyaml\nhash: 3975bda2fdb43b0cccab2b038f89cbe099f5b6f25b77084b4769d7e15a1f62a8\nupdated: 2016-09-15T09:25:57.859680773-04:00\nimports:\n- name: github.com/armon/go-radix\n  branch: master\n  revision: 4239b77079c7b5d1243b7b4736304ce8ddb6f0f2\n- name: github.com/codegangsta/cli\n  version: v1.14.0\n  revision: 71f57d300dd6a780ac1856c005c4b518cfd498ec\n- name: github.com/kr/pretty\n  version: go.r60\n  revision: a6f3cf47d962d7c6eae13b363e2b860eb561e528\n- name: github.com/Masterminds/semver\n  version: v1.1.1\n  revision: 8d0431362b544d1a3536cca26684828866a7de09\n- name: github.com/Masterminds/vcs\n  version: v1.8.0\n  revision: fbe9fb6ad5b5f35b3e82a7c21123cfc526cbf895\n- name: github.com/sdboyer/gps\n  version: v0.10.0\n  revision: 278a227dfc3d595a33a77ff3f841fd8ca1bc8cd0\n- name: github.com/termie/go-shutil\n  revision: bcacb06fecaeec8dc42af03c87c6949f4a05c74c\n- name: gopkg.in/yaml.v2\n  branch: master\n  revision: bec87e4332aede01fb63a4ab299d8af28480cd96\ntestImports: []\nNotice the version for semver here isn't right. You can see the update run at https://gist.github.com/mattfarina/4171e5f18db51a3ee8110a27e779854c. You'll see the message about the 2.x conflict.\nWhat's going on?\n. This has been merged into the gps-integration branch. We can continue the development there. Smaller PRs and incremental work.\n. @Vektah Handling this well in a CI system is important to me.\nFirst, imports can have alternative VCS information. For example,\nyaml\nimport:\n- package: github.com/myorg/privaterepo\n  repo:  https://<username>:<token>@github.com/myorg/privaterepo\nThis should work today. For the package at that location locally the repo used will be the one here.\nBut, a glide.yaml file checked into a project really shouldn't have credentials in it. This is just not a good idea for securely storing those credentials.\nInstead, we need a way to supply overriding aliases that the CI system can supply with credentials. The CI system can securely store them. See #39, #372, and #380 to see where this is going. I'd like to have the alias system in place soon.\nWhat do you think?\n. @ungsophy are you sure you're running glide 0.10.2? I ask because a top level package with that name could have generated an error like:\nsh\n[WARN] The name listed in the config file (.) does not match the current location (glidetest)\nI was also unable to reproduce the error using the same version of OS X and Glide. Were you having any network issues when this happened?\n. @dpmcnevin thanks for the contribution\n. @sdboyer First, I'm really glad this happened because it means we get to catch the issue and work it out before end users have to deal with this. Thanks for bringing this up explicitly.\nHere is the start of me trying to think it through (it's a little stream of thought)...\nThe first thing we have to do is be pragmatic and build a system with the least about of WTF.\nTo put it another way, we need to build a system that minimizes the number of support requests (because many users will walk away at issues and not file a request and those that do we don't have piles of time to help).\nThis makes me relate to the repo and vcs properties. Originally Glide followed the same patterns that go get did for specifying repos and identifying the type. For the cases it couldn't happen automatically from the repo content the vcs property could explicitly hold the type.\nBut, there were numerous times people expected the repo to be auto-detected when it wasn't. I would get asked, why wouldn't git@example.com:foo/bar be detected as git? Why do that extra work when the tooling can figure it out?\nPeople wanted to automation to detect common use cases.\nI think adding an additional property to specify the type of version falls when it comes to making users think. Today it can figure out the type but requires some extra computational work (including talking with the repos). Asking people to add something extra will both not be compatible with glide.yaml files today (possibly breaking some CI toolchains) and be extra non-obvious work.\nBut, let's continue but digging into the technical...\nGlide today checks if something is an existing reference (tag, branch, or commit id). If it's not it then goes down the SemVer path. Internally, a VCS reference is prioritized higher than SemVer.\nThe systems, like Crates or NPM, that have a central repo of packages are able to enforce SemVer in the packages that are pushed. So, we can't look to them for guidance because we can't control things to the same level.\nPackagist is a hybrid solution. It talks to the systems, such as GitHub, for the code while holding a metadata store in the registry. Composer will let me specify branches using the syntax dev-[branch name]. Or, if config maps a branch to a version range it could be 3.0.x-dev. For an example see the versions for html5.\nTo keep the metadata up to date Packagist does daily polling or allows web hooks to be setup when code is pushed. This allows the central repo to keep up to date. A client side thing handling versions has to pull to get the latest versions.\nIf there is going to be a local cache of possible values it will need to be derived from repos. If that cache holds the versions why can't it hold all the branches, tags, and versions knowing which is which? Why can't that be calculated automatically and stored in some local cache for the software to use later?\nThis could be useful because branches or unknown versions would force going out to the network to check for updates.\nThoughts?\n. @sdboyer Thanks for going so deep on this.\nFirst, User ease. I have already been planning a bunch of work here. We can do a lot better when it comes to this. I'm glad to see you're thinking about something similar. I have plans to even go beyond this but that's a conversation for another time.\nSecond, I'm very wary of adding another config field no matter how we try to ease it. A configuration option for every possibility isn't the path to take. That ends up in user confusion and pain. Yet, you do need to have just enough. And we can have automation try to fill in the rest. The goal is to target the 80% and provide sane default solutions (often not exposing them).\nIf we have to add a configuration option for this we'll have failed our users. I don't want to do that. So, let's exhaust all other options for automation or flexibility.\nSo, let's look into other options.\n1. Start with modifying the glide.lock file. This is auto-generated and managed by Glide. What if a reference or branch property were added to an import. If the version is a tag, branch, or other reference it's set to true. Then, if the property is not present or set to false, the glide.yaml has not changed, and a branch comes in we can detect it.\n2. When Glide adds something to the glide.yaml like 2.x and there is no reference for that it makes it ^2x. For 2.0.x it makes it ~2.0.x. If someone manually edits the glide.yaml we tell them if they've done something like 2.x and the possible problem if it's not already in the glide.yaml. This will not completely remove the potential for the problem but will decrease the opportunity for it.\nThis is by no means exhaustive. But, I don't want to fail to find an option that keeps the UX simple. We need to hide the complexity.\nRisk, complexity, and user experience needs to be weighed. My stance is the best user experience possible, hide as much complexity as we can, and keep the risk low. Risk can never be eliminated (if that's even possible) without making the experience painful for the long tail which isn't acceptable.\n. So, this is entirely a micro-optimization but...\nSince the root name is already being normalized then the extra is the only part that needs to have it done. Can that happen here instead?\n. Maybe we need to tweak the use of normalizeSlash.\n. @jrick thanks for the contribution!\n. Note, the failed test was due to a bug in Glide fixed in #395.\n. @franciscocpg thanks for creating the PPA and loading Glide there. Before I merge, a couple things.\n1. What was the plan for updates on new releases?\n2. Can you add @technosophos (technosophos on launchpad.net) and I (mattfarina on launchpad.net) to the masterminds team. I'd just like to make sure more than one person can update for new releases.\nI also need to run a couple tests to make sure the things are working.\n. @franciscocpg when I create a new Glide release I also do a new homebrew release. It only takes a couple minutes.\nWere you thinking of updating the ppa every time there is a glide release?\n. Also, the CI error here can be ignored. It's been fixed on master and I know what it is.\n. @franciscocpg thanks. this has been merged.\n. @shawnps thanks for the contribution.\nNote, the failed test was due to a bug in Glide that was picked up on Go tip. It was fixed in #395.\n. Yup, totally\n. Please see #420. It's a PR to implement this change.\n. Closing as there's a better way to do this now. PR for that coming soon.\n. @ansel1 I saw this once before when there were uncommitted changes to your project that pulls in the dependencies. I ran into it myself and then somehow it went away before I could duplicate it. Have you tried a fresh clone of your project? Do VCS metadata directories exist in those projects (e.g., .git directories). If so, try deleting them.\nWe are working on some changes that will take the possibility of an error like this away completely.\n. A couple questions:\n1. What version of Go and Glide are you using?\n2. Can you share your glide.yaml file?\n. @franciscocpg First, thanks for working on this and contributing to expand it.\nBefore I make any calls on this I'd like to have a chat with @technosophos. I'll try to do that asap.\nCan you add a License file to the glide-ppa project? License matters for accepting contributions and using it. Glide uses an MIT license. Please no GPLv3 or AGPL as we likely won't be able to accept it.\n. @franciscocpg If we can get a good license in the project we'd be happy to take it into the Masterminds org. Would you be willing to still be an admin for the project there and be active in running it?\n. @franciscocpg The repo has been setup as you requested. If you go to the org page you'll have an invite you can accept to join the org and you should have access to the repo.\n. @Integralist what version of Glide are you using? Glide now does detection. For Go 1.5 it makes sure it's enabled. In Go 1.6 it checks to make sure it's no disabled. In Go 1.7 (in dev) the environment variable is removed so detection is skipped.\n. @Integralist you can also use go get -u github.com/Masterminds/glide to tell go get to pull the latest bits and install.\n. @medcl For two reasons we cannot do this.\n1. For later updates it will be slower. See the link from @sdboyer.\n2. We will not have enough data to resolve versions. This is only useful if you are getting the tip of the default branch.\n. @medcl I have a couple questions for you. CI environments are a target for us and we do want to speed things up there. It's just complicated to do that well and meet all our use cases.\n1. Do you use glide update or glide install in your CI environment?\n2. Do you checkin your glide.lock file?\n3. Where do most of your dependencies come from? GitHub.com and Bitbucket.org? Someplace else you can share?\nI'm all for speeding things up and I've talked with (and will again) those at GitHub about this. I have some ideas other than a shallow clone I'd like to pursue and your input will help.\n. @dcu are the packages already in the vendor/ folder?\nCan you share tools that don't work with the vendor/ directory? I'd like to make sure issues are filed against them then Go 1.4 is no longer supported by the Go team and Go 1.7 will be coming out soonish without a flag to turn off vendor/.\nWhat uses do you have for copying it to the GOPATH as well? We're going to do some internal refactoring soon and I would like to know some uses cases folks have.\n. An alternative if you want a specific version is...\nyaml\ninstall:\n  - wget \"https://github.com/Masterminds/glide/releases/download/0.10.2/glide-0.10.2-linux-amd64.tar.gz\"\n  - mkdir -p $HOME/bin\n  - tar -vxz -C $HOME/bin --strip=1 -f glide-0.10.2-linux-amd64.tar.gz\n  - export PATH=\"$HOME/bin:$PATH\"\n. @davecgh thanks for the report.\nDo you use the os filtering? With Go's ability easily cross compile I was considering pulling this filtering feature. Can you share your use case for keeping it?\nThe other cases I know of someone using this feature have since stopped.\n. @davecgh do you ever cross compile? For example, compile a linux binary on Windows or a Windows binary on Mac? The issue is one of tradeoffs.\nLet me share a common enough example.\n- An application is developed that will be distributed for Windows, Mac, and Linux.\n- The application is developed on Mac and the main CI/CD system is Linux. The binaries for all 3 delivery platforms are built on Linux since this is a feature of Go.\n- Glide does not execute Go commands but is instead a helper.\nNote, Mac is the No. 1 choice for developers.\nIn this setup Glide should get the Windows specific parts for both development (e.g., running tests locally) and for the CI/CD system.\nNow, imagine a second case where this is an open source project or in an environment with mixed developer environment setups. Using the os filter can cause some issues.\nThis is why it's use has fallen out of favor.\nI understand you setup and needs. I just want to make sure the whole picture is communicated and documented.\n. @AlmogBaku did you try running brew update? I typically update homebrew myself the same day I perform a release.\n. I have a feeling this is due to concurrently calling Git.\n. Does dep handle this well?. @sdboyer have you thought about what a good solution would be?. So, the parent application can set ranges and an imported library, via it's glide.yaml. When a library is imported that doesn't meet the requirement we can error.\n. Thanks for catching this. Would you like to submit a PR to fix this or shall I do it? I'm fine either way.\n. #414 fixed this problem and has been merged. Thanks.\n. @kngu9 thanks for the contribution.\n. Please see #420.\n. @zjx20 What is the issue you're seeing? golang.org/x/net uses go-get redirects. That does require network requests to resolve.\nThere may be a place we can cache some data to avoid lookups.\n. First, if you can you should try switching to dep.\nSecond, There's a plugin for what you're looking for in https://github.com/sgotti/glide-vc.. Can you please test #461 which handles resolving test deps.\n. Fixed. Tip of master now handles test imports.\n. @silasdavis I've created a docs pull request at #431 and a proposal for the future of the property at #430. Your feedback would be appreciated.\n. @silasdavis Glide does code scanning on each run to properly detect the entire tree in use. There is also the --all-dependencies flag that will walk all the file trees.\n. @timoreimann Thanks for the report. I've been wondering when something like this would happen. I've added an issue to the VCS project where this should live.\nPRs are welcome or I'll get to it soon-ish.\n. @yanyiwu the problem with this is it's telling people to install the tip of master rather than a release version. We don't ask people to install Go at the tip of master so why should we ask people to install Glide that way?\n. @yanyiwu You bring up a good point. Making it easier to install would be useful.\nWhen you install brew, etc you get the latest release rather than the tip of development. That's my concern.\nToday you can:\n- Install via a binary\n- Install with brew install glide\n- Add an apt repo and install with apt-get install glide under ubuntu.\nWhat do you think of the method brew and helm provide with a script and a native windows method?\n. @franciscocpg releases are generated by running make dist. See https://github.com/Masterminds/glide/blob/master/Makefile#L30. It should be fairly easy to build distributions for other environments and create a shell script (for those crazy enough to run them).\n. I don't really want to advocate installing the latest dev snapshot as the primary method.\nThere is now a shell script that can install on *nix. It's in homebrew and we have a PPA.\nNext steps are for binaries for more platforms (freebsd, arm, etc). There are other issues for that.\nWould also be good to have a oneget install for Windows (e.g., Install-Package glide). But, I think that's for a future issue.\n. There were some issues with this in the past. Can you update to Glide 0.10.2 and try again?\n. Can you share your glide.yaml file and projects directory structure? It would make it easier for me to figure out what's going on.\n. @radamsfc Thanks for a fantastic bug report.\nGlide should have been using 6acef71eb69611914f7a30939ea9f6e194c78172 of golang.org/x/net when scanning. I wonder if another one of the imports is referencing this new package.\nNew additions to the standard library are rare, thankfully. I'll fix this shortly.\n. @radamsfc can you test the PR on #434 of Glide. I think it's fixed there.\n. @technosophos if you have 10 minutes to review.\n. @kenkouot We normally have a 0.X release every month or two with bugfix releases in between. We're in the middle of the push for the next 0.X release which will be in June. I'm debating doing another patch release for this issue before then that would be this cherry picked over to the last patch release.\n. @sdboyer he's interested in knowing the pinned version in addition to the revision.\n. @klnusbaum This makes sense. Look forward to your contributions.\n. @klnusbaum thanks for the contribution.\n. I really like this change.\nUnfortunately, I case where project can be added to itself. For example,\nyaml\npackage: github.com/foo/bar\nimport:\n- package: github.com/foo/bar\n  subpackages:\n  - baz\n  - qux\nI discovered this on a private project so I can't share.\nOnce we get this fixed I'll be happy to merge this. I'll try to dig into it more later this week. If you find the solution before then that would be great, too.\nNote, updated to fix formatting.\n. @klnusbaum I've been traveling and then had a holiday weekend so I got a little behind. Need to figure out that bug so we can merge this.\n. @klnusbaum I found the problem, fixed it, and merged into master. Thanks for the contribution.\n. Two things:\nFirst, If I understand it right you may not have a the GOPATH setup right. Given what I see I would expect:\n- e:\\Workbench\\DIS\\auth\\src\\\n    |- dis\\auth\\authz\n    |- dis\\auth\\authn\n    |- dis\\auth\\mgo_session\n    |- dis\\auth\\server\nYour entire codebase needs to be inside the GOPATH. Have you read the docs on organizing your code? It's different from other languages.\nSecond, I think there is a bug in path separator handling. Ignoring should work even if your code organization has a problem.\n. Fixed by #544\n. @arschles if you did this it would generate a glide.lock file for a specific build environment. What if someone decides to get and build your project in a different environment? If they glide install the locked dependencies or use what you have vendored some packages may be missing. How would you handle that?\n. @arschles even if glide only fetched the dependencies for the current environment what would you do for cross compiling? The go command cross compiles with easy and that feature set is widely used. \n. @nguyenxuantuong Glide leverages version ranges to track them. If you don't specify a version it tracks the tip of the default branch. For github.com/cactus/go-statsd-client have you considered using releases rather than tracking the tip of development?\n. @thockin @technosophos I'd be really curious to know what you think about this? It's a big change designed to be helpful when setting up a project to use Glide.\n. @thockin Rather than a code review I'd be curious as a user usage review. So, grab the code, install it, and try glide init on a project. Particularly one that imports from Godep.\n. @thockin if you're buried and coming up on a vacation don't feel pressure to review.\nThis turns glide init into a wizard. It will try to detect versions from commit ids, try to offer release versions if nothing is detected, and help you setup using ranges for projects that use releases. It's a start and i'm curious on the wizard interaction model.\nAnd, it's interactive. For example, if a project uses semver your choice for ranges may be to follow patch or minor releases.\n. @thockin That alone is fantastic feedback. This is the kind of thing I was looking for.\n. @technosophos and anyone else... I would love feedback on this new version. Less intrusive and you can use the wizard later.\n. @cescoferraro Are you asking for arm64 or some other architecture? Go has numerous arm options.\n@franciscocpg thanks for jumping on this.\n. When I do the next release I'll try to make the installation process better.\n. With the v0.12.0 release there are arm binaries. Does this work (you should be able to use the install script).\n. There are multiple ARM architectures. Are you asking for arm64 or a different variant?\n. Do you mean GOARM=7?\n. I've been using gox for cross compilation. It seems gox doesn't let you set the GOARM variable. Will need to look into alternative setups to build the release.\n. With the v0.12.0 release there are arm binaries.\n. @redhatlinux10 Can you try this again? A couple days ago gopkg.in was having some issues.\n. Is https://gopkg.in blocked by the China firewall?\n. According to that site github.com is blocked. That would be a problem.\n. @tugberkugurlu In go 1.5 you needed to opt-in with the environment variable, in go 1.6 you can opt-out by setting it to 0, and in go 1.7 it will be on all the time no matter what.\n. go is what resolves the package locations. Glide is simply a helper that puts packages where Go expects them and helps you manage things like the versions of the packages. You can't store your code in at structure because go won't resolve it there. This has nothing to do with Glide and is about Go resolution.\n. @s-urbaniak thanks for fixing the bug.\n. @mhemmings We need to hold off on doing this right now because of one reason. Order matters. The first reference to a dependency and version wins right now. That means you can alter the order in the glide.yaml file to have a different version win.\nThis is especially true when importing a dependency of a dependency.\n@sdboyer is working on a smarter resolver. Once that's done we can, hopefully, start keeping track of things in alpha order.\nThis is a good question and I hope we can get there someday.\n. PR #461 takes this and makes test imports work. Reviews appreciated.\n. Fixed. Tip of master now handles test imports.\n. Note, if you strip vcs the .git directories will be removed. How is it seeing anything to treat as submodules?\nDo you have the vendor/ directory in your .gitignore?\nSome changes will be coming in the next release to remove this issue.\n. I was able to reproduce this in my own local testing. Thanks for filing the bug.\n. @zcahana can you test #460? I think this fixes it.\n. @ches test imports should end up on testImport. But, if the import is also used in the app it will show up in import instead. testImports is for imports that are only used in tests and nowhere else.\nThis is done because you can't safely have different versions of the same import in use.\n. @technosophos fixed the broke thing.\n. @piotrkowalczuk thanks for filing the bug. Can you share the glide.yaml file it saved before creating this error? I'd like to track this problem down to fix it and that would help.\n. Found the bug. Will fix on Tuesday.\n. I believe this is fixed with the merger of #463. Please let me know if the issue is still happening.\n. If you have access denied I'm not sure how Glide can even operate in your environment.\nDo you have any suggestions or an idea for a fix?\n. We should provide a message but we may not need to fail so strongly.\n. I've had a few offline conversations on this. Moving and changes to 0.13 since in involves gps and it's still under debate.\n. @franciscocpg thanks for putting this together. I want to give this a good once over and I can put the shell script on glide.sh.\n. I like where this is going but I'd like a few changes...\n1. the version URL should be https://glide.sh/VERSION. That could be a text file with just the tag in it. A simple PR to that repo would make that work. That would let us control the release.\n2. The install script be either in the glide site repo or in a separate repo. I think I prefer the first option. Then it can be coupled to the version script.\n3. It should be executed as non-root but ask for password if someone wants to install (and ask for location) and root is needed to do so. This last part could be a separate flow after just getting it works.\n. @franciscocpg Thanks for the rvm pointer. Had not looked at that one, yet.\nHelm, Brew, and rvm all seem to do this a little differently.\nI'm thinking out loud but I envision...\n1. It downloads the right version of glide and puts the binary in the current working directory (telling you that)\n2. prompts for the place to put it (defaults to /usr/local/bin).\n3. Prompts for password if needed to copy there.\nOr, should it put it in $GOPATH/bin?\nIf it fails to copy to the final location it lets you know that it couldn't and tells you where it's at.\nThoughts? I'm always wary magic or asking for passwords on internet shell scripts.\n. @franciscocpg sounds good to me. Want to make the request on the project at https://github.com/Masterminds/glide.sh\nAlso, the part about doing the builds... it doesn't appear that gox properly handles arm builds. For arm there are different architectures and those don't appear to be happening. Any thoughts on that?\n. @franciscocpg Before you fork gox see if there is interest there. Dealing with ARM properly has been overlooked numerous times.\nWhat makes gox interesting is the parallel builds. Doing them in series may take too long.\n. We can work with the fork.\n. Now that the curl script is merged (and live) I'm going to close this.\nWe can handle the GOARM separately.\n. Glide scans the code to know where in the import tree to fetch. It starts with references in your application and follows the referenced import tree. Do you have references in your code? \nIf you want to follow all possible trees, not just the referenced imports, you can use the --all-dependencies flag.\nIs this what's going on?\n. So, the issue is slightly different than what's being done in the PR #470.\nGlide expects the package names to conform to the way go get does. In this case go-superlib isn't a valid remote location name.\nIf you are using stash 3.8.0 or later the package name should be stash.local.net/superlib/go-superlib. Glide should be able to work with this (in theory).\nThere's an issue on Atlassians site related to this.\nUnrelated to that is the idea of breaking from conforming with go get package paths. @technosophos or anyone else... any thoughts?\nNote, if we start to skip following go get compatibility it should happen in the way normalizing root / subpackages happens in the normalization.\n. First, thank you for putting some time into this. I appreciate the time put in and I appreciate that folks want this fixed.\nA change to support package names that don't conform with go get should happen in name normalization. I would start inside util.NormalizeName. If the regex lookup and go-get search don't find anything then handle this case.\n. @rhcarvalho thanks for the fix!\n. @rhcarvalho thanks for the fix!\n. If it's a private repo use the repo property in the glide.yaml file to set the repo for the package to be something like git@github.com/[org]/[repo].git and make sure git on that machine has access to the repo. This will work for private ones.. @gyuho Thanks for the fix!\n. Dependencies are complicated. There's even a wikipedia page call Dependency Hell that talks about the complications. One simple example is diamond dependencies. You have two dependencies that rely on a 3rd dependency (transitive). What happens when they rely on different versions of that dependency?\nIn Glide we capture more information than the dependency name and location. There is version information (see the version property in the yaml). When none is supplied we assume the tip of the default branch is the version.\nWhen you fetch a new dependency you need to make sure it and it's dependencies work with the rest of the dependencies in the tree. So, it resolves the tree and the versions. When no versions are specified it resolves the tree to the tip of master which is why you may see many updates.\nWe're looking into doing more limited updates when we can. This is not a simple issue when dealing with transitive dependencies and trees of dependencies.\n. This is where deps start to get hard. Dependency management is sometimes called dependency hell (link is to wikipedia).\nTop level applications are the only thing that really should have a lock file because of fluidity in dependency trees. For example, if you have dependencies A and B that both depend on C. If A and B depend on different versions you have a problem. They way bundler and others handle is it so use supported ranges. So, you can same A depends on >= 1.2.3, <  2 for C. And B can set >= 1.0.0, < 1.4.0. The goal of the dependency manager is to try and find the latest version that meets constraints.\nIf you pin to revision ids this causes a problem.\nRight now Glide is strong in it's usage of outside metadata and will lesson over time as folks switch to version ranges and we improve the resolver (which is in development).\nGlide uses versions to try and figure out the best and latest versions to fulfill the need. This is the same way bunder, npm, composer, and the others do it as well. When no version is specified we assume the latest commit on the default branch.\nDoes this make sense?\n. @7imon7ays thanks for fixing that.\n. @sapiens-sapide thanks for reporting this and @franciscocpg thanks for pointing this to the right place so quickly.\n. Is this a docs bug or implementation bug? <= 2.x should be equivalent to < 3.\n. @gm42 When the hash was originally put in it was mandatory. This ended up causing problems (even though it shouldn't have). I like the idea of adding this back in to some degree.\nAre you up for a pull request to add this? Or, should someone else do it?\n. I'm still open to merging a change that does that.. @lucab I'm happy to try and improve this.\nLet's start with the deps directly referenced in the local codebase. I was already planning on noting those that are in the codebase but not in the glide.yaml and offer the option to add them. I was considering adding elements of the wizard to ask about using a version/range.\nWhat do you think makes sense beyond that? Providing a warning or other message about packages that do not have a version/range specified?\nThen there is the matter of transitive dependencies. Any thoughts on those?\n. @HeathNaylor what version of Glide are you using? Could this be related to #206.\n. And now v0.12.0 is out. I believe this issue is either fixed or there are instructions on fixing it in the output. Is this still an issue or can we close the ticket?\n. I'm pondering this approach and some deviations from it with semantic differences from it.\nWe have some cases in the past where something similar caused problems problems. I want to test those scenarios.\n. I ran some tests and found:\n- There is a performance improvement (less network calls)\n- Generated glide.lock files were equivalent.\n. @derelk thanks for the fix!\n. @heewa thanks for the contribution!\n. Thanks. Coming soon (in the next week).\n. Do we have an initial list of plugins to include? I'm aware of:\n- glide-vc\n- glide-hash\nWhat others are out there?\n. #501 implements this.\n. Done. See http://glide.readthedocs.io/en/latest/plugins/\n. @sdboyer I'm not sure when vsolver will be merged in (mostly because I'm behind on it). This is a major change no matter when or how it happens and I wanted to open it up for discussion.\n. @dmitris A GOPATH is hard to use as a cache for a couple of reasons (that I'm happy to discuss and find better solutions for).\n1. Forks. If you have a project at github.com/example/foo and a fork at github.com/me/foo that you want used for github.com/example/foo how do you consistently manage that? Without some outside application mucking with things in a way you can't see or work with? Dealing with alternative locations, sometimes multiple ones, is a use case for Glide and complicates things.\n2. Access controls. https://example.com/foo/bar.git can be different from git@example.com:foo/bar.git. Some hosts allow different users to have see different branches and tags. I'm aware of multiple systems used in on-prem implementations that do this. To respect access we need to treat those differently.\nThe general open source case where you get it from the root source is easy. Managing the complicated cases get's harder.\nBut, using the cache (which can be hot and update only the missing bit) can allow for some real speed improvements. It's in place but turned off because the copy from cache element is too slow. It's implemented in a cross platform way (to support things like windows). For many the network is actually faster.\nPart of this end up making the cache operations much faster. For example, if a commit being installed was already in the cache there's no reason to update. Exporting (using the vcs optimized tools) is amazingly fast and can be used.\n. This was just merged.\n. Good catch. I don't think we thought of that when crafting those scripts.\n. An issue brought up in other tickets... just to add context... is the Great Firewall of China that blocks some requests to sites that offer the ?go-get=1 redirect functionality. This breaks Glides ability to put something in the right place even when they can set the repo to the right one and access it.\nWithout suggesting how to fix this it is one that would be nice to fix because there are so many users there.\n@albrow GitHub Enterprise is an easy-ish one to make better without breaking compatibility (technically). go get github.example.com/foo/bar will work because that will invoke the ?go-get=1 behavior. It's when you get to sub-packages that a problem comes up.\nIn a glide.yaml file the top level package for an import is the repo level. glide get could figure out this separation for you a little more intelligently.\nThis isn't a break in compatibility for the import statement in code.\n. I think we need to define compatibility so let me take a shot.\n1. Import paths in code. go get has a certain (and evolving) structure it supports reading and finding.\n2. go get pulls outside packages into your GOPATH. Once there you can manually manage the checked out version, alternate remotes and the commits they have. In essence, go get is a project retrieval tool that does not deal with versions. Because of this we can't do an apples to apples comparison between go get and Glide.\nGlide package paths and those used in imports code statements need to be the same format that go get requires.\nThe way to look at solving for this is from a user experience point of view. What experience will give the users the fewest WTF moments and why?\n. The definition I was referring to, in terms of scope, is with the paths used in import statements and the ability to figure out where to get the source for the remote path. This relates to the code scanning.\nFor example, when github.com/example/foo/bar/baz is encountered there are special rules used to figure out where to fetch from. Or, using the go-get redirect we can see the golang.org/x/net and figure out where the source is due to an intermediate redirection server implementing an API. Or, git.example.com/foo/bar.git/bax can be discovered by reading the URL against rules.\nEach of these works with go get and Glide today for package paths.\nThe question is, should Glide instead allow you to map:\nyaml\n- package: foo/bar\n   repo: https://git.example.com/baz/foo.git\n   subpackages:\n   - bar\ngo get will not be able to figure out where foo/bar resides remotely when found in an import statement. This breaks the mapping of package path to remote location mapping with go get.\nWhen it comes to the version of the source to use there is an intentional break.\n. Thanks for the contribution\n. This is a good question.\nFirst, Glide doesn't care if the SemVer tag begins with a v or not. It handles both through the same process.\nThere are a few reasons for the change:\n1. GB recently started supporting SemVer but it requires the v and they don't appear to be interested in making it optional. This has been a long standing view espoused by Dave Cheney.\n2. On the release page for GitHub they recommend SemVer and the v prefix.\n3. An overwhelming majoring of Go apps and package that use SemVer have the v prefix. I did an analysis several months ago and found it to be a majority. I recently went back and looked again. The majority using the v has actually increased.\nSo, with that in mind I wanted package and sub-packages to work with other tools. At this release I added the v.\nDoes that help?\n. Thanks for filing the bug. I usually follow up a change release with at least one bug release before we work on more interesting changes. I'll add this to that release which should be out in the next week.\n. I believe #512 fixes this. If there are no issues found I'll merge on Tuesday.\n. @diwakergupta Have you stripped the VCS metadata from the projects in your vendor/ directory? I have an idea what this might be (and it may be a legitimate bug).\n. @peterbourgon does the --debug flag provide what you're looking for is are you thinking of something different?\n. @henryaj My stance with Glide is that you should switch to dep. That feature is in dep.\nIn fact, by not putting it in here it's motivation to switch which will help me to have less to maintain.. @rjeczalik I'll take a look into it. Thanks.\n. @ansel1 that's the fix I'd recommend. Pinning to old versions like this is sometimes a problem. Especially with projects that have large dependency trees where it can be difficult to safely update them.\n. @ansel1 are you directly importing this in your test files or is one of your test files importing it?\n. @ansel1 you answered my question. thanks.\nI'm looking to get a 0.11.1 release out soon. I'd like to get this fixed and in that release.\n. @ansel1 I'm having trouble reproducing this. Using the tip of master for Glide I see....\nsh\nmfarina in ~/Code/go/src/github.com/Masterminds/example/vendor/github.com/stretchr/testify on master\n\u00b1 git remote -v\norigin  https://github.com/ansel1/testify.git (fetch)\norigin  https://github.com/ansel1/testify.git (push)\nI copied and pasted your snippet. The only thing I noticed is that it's testImport and not testImports.\nMy exact section looks like:\nyaml\ntestImport:\n- package: github.com/stretchr/testify\n  repo: https://github.com/ansel1/testify.git\n  subpackages:\n  - assert\n  - require\nI updated the glide.yaml file and then ran glide up.\nCan you help me reproduce this?\n. @ansel1 might you have github.com/stretchr/testify imported in a non-test file? One that doesn't end in _test.go?\n. This is a little bit of a complicated issue.\nFirst, the quick fix. Have you looked at glide-vc?\nRight now Glide does not strip unused packages from a repo. We've not tackled that in part due to license concerns. A repo under a license and modification of that matters. We're being conservative while we learn more on the topic.\nIn the meantime there's a plugin you can use.\n. We have a plugins section in the docs and this is a common enough question it's the first plugin listed.... http://glide.readthedocs.io/en/latest/plugins/\n. Thanks for the bug report. It appears there's a race condition between publishing the tag and updating the site.\n. I'm leaving open to track and ultimately fix the underlying issue.\n. Does the dependency, currently listed under testImport also show up in non-test code?\n@sinbad thanks for sharing the glide.yaml file. I can use that to try and replicate the problem.\n. There are two separate bugs listed here. One is the case where there are testImports but no imports. The second has to do with something being listed in both imports and testImports.\nFix coming soon.\n. Anyone interested can test the fix on #545. If there are no complaints I'll merge on Friday.\n. LGTM\n. @tejasmanohar did you already have a populated vendor/ directory starting to use Glide?\n. Using the tip of master I cannot reproduce this problem with the following:\nmain.go:\n``` go\npackage main\nimport (\n    \"fmt\"\n_ \"github.com/gin-gonic/gin\"\n\n)\nfunc main() {\n    fmt.Println(\"test\")\n}\n```\nglide.yaml:\nyaml\npackage: foo\nimport:\n- package: github.com/gin-gonic/gin\nglide.lock:\nyaml\nhash: 1b9c474483dd1c98724d72487cacd0dc3fa6cd0f876bb422b44779250d66b6f3\nupdated: 2016-08-30T20:59:16.182465175-04:00\nimports:\n- name: github.com/gin-gonic/gin\n  version: f931d1ea80ae95a6fc739213cdd9399bd2967fb6\n  subpackages:\n  - binding\n  - render\n- name: github.com/golang/protobuf\n  version: 2402d76f3d41f928c7902a765dfc872356dd3aad\n  subpackages:\n  - proto\n- name: github.com/manucorporat/sse\n  version: ee05b128a739a0fb76c7ebd3ae4810c1de808d6d\n- name: golang.org/x/net\n  version: f315505cf3349909cdf013ea56690da34e96a451\n  subpackages:\n  - context\n- name: gopkg.in/go-playground/validator.v8\n  version: c193cecd124b5cc722d7ee5538e945bdb3348435\n- name: gopkg.in/yaml.v2\n  version: e4d366fc3c7938e2958e662b4258c7a89e1f0e3e\ntestImports: []\nYou'll notice both github.com/golang/protobuf/proto and gopkg.in/go-playground/validator.v8 are present and they are in the vendor/ directory.\nCan you provide me a way to reproduce this?\n. @whitlockjc This is a good questions. Right now Glide tries to work out the best version and tell you about any conflicts it can't solve. Then you can resolve them by changing you glide.yaml file as you see fit.\nIn the near future we hope to have an update that solves the exact problem you are asking about without ever needing for you to manually make a change. The PR exists and is nearly ready so the feature is coming.\n. @jonbo what version of Windows are you on and how are using it (cmd.exe, cygwin, etc)?\nHave you tried running the --debug flag. Running glide --debug init or glide --debug update to get a more verbose output.\n. I'm keeping an eye on it and we'll have this in some manner before the next release.\nI want to see if Mitchell will merge upstream.\n. It seems Mitchell has not merged this upstream and has not responded to emails either. I will likely look at using the fork for now.\n. @franciscocpg thanks for the contribution.\nFor gox I'm pulling from your repo for the time being. If in the next couple release cycles upstream gox doesn't merge the work we'll deal with it.\n. @franciscocpg I'm going to start a Masterminds/gox fork... as you have suggested. I'm going to add you to the repo. This was a collective we can maintain it.\nNote, I've emailed Mitchell about gox and if anything comes in I'll let you know.. There are a couple things here (with a near term solution at the end).\n1. You have to fetch and download a complete repo. The repo systems do not provide another means of just fetching subdirectories. Tools that alter this either strip directories or copy in directories to final locations.\n2. Dependencies all have licenses. Removing sub-directories may be seen as altering a codebase and subject to clauses in those licenses. Right now we're not stripping directories as to not touch on this issue until we have a better idea of the legal impact and how we should proceed.\nThe short term fix is there's a plugin called glide-v that can strip out unused elements.\n. Thanks for your contribution.\nI understand your frustration. Thanks for helping to make it better.\n. I understand this version issue. There are two things I can tell you about it:\n1. The current quick fix is to list the version you want in your glide.yaml file. That version (or range) will be used instead of the nested version and it will warn you about that difference later.\n2. With the merger of gps (see #384) this \"should be fixed\". That is coming soonish (when that codebase is ready for production use).\n. Thanks for the PR. Before merging I'd like to understand what's going on here and why. Also, I want to make sure it works across nix/windows.\n. @Fugiman could you detect a symlink and resolve the location? The tailing / is something I don't really trust cross platform which we need to work. There is an IsLink function to detect symlinks. In the resolver there is also a function to return the base directory for a symlink. These may be helpful.\n. @Fugiman thanks for the contribution!\n. There are a few things....\n1. There is a flag (use glide help update to see them) to copy from the GOPATH. There's already an opt-in flag for that.\n2. If Glide doesn't scan the codebase for imports it can't generate an accurate glide.lock file and handle things like reproducibility. This is a problem for many use cases.\n3. The glide.yaml file can hold details including VCS information and explicit type. See the docs. Does this work for you?\n4. Glide does want import paths to follow the same conventions as go get to keep some form of compatibility. There's an issue discussing it at #498.\n. @jollyroger thanks for investing in RPM. Why do you think the RPM build should be part of the main glide repo? I ask because setup to create debian package is in a separate repo. If you can provide more insight it would be helpful.\n. @jollyroger I'll look at this shortly. I need to get back up to speed on RPMs before making a decision. This needs to be forward compatible since as we continue working (it may already be and I'm just not aware).\n. What to write that? PRs welcome.\n. @arekkas glide does handle tests. It seems you're using a dev version rather than a release. When is this dev version from? Can you try a release version?\n. @arekkas so, you have two packages with different names in the same directory? Is that the issue?\nThat should work as well. If that is the case we'll need to look into that.\n. Interesting. Tomorrow I'm going to push a rather large change (as a PR) to the resolution work. The way this part of the code is handled will have changed. I think that will have fixed this.\n. @abhin4v thanks for the contribution\n. Not sure why GitHub didn't register the passing travis tests. that's at https://travis-ci.org/Masterminds/glide/builds/151840337.\n. @sdboyer A few things...\n1. I think changing override to mirror makes the intent clearer.\n2. The GOPATH is a mirror here. I would not recommend using it so the docs should be updated for that. The mirror was the goal of the old flags though it was not clearly communicated.\n3. We need to help people be successful and mirrors are required for that. But, with that power people can shoot themselves in the foot. No idea how to avoid that.\n4. Is extra metadata required for any tooling to work? Sure, someone could put an errant commit somewhere, like a mirror, and distribution will be a problem. But, how often is that situation a reality? In other tools that already support mirrors?\n. @sdboyer thanks for the link and all the thoughts on this. I think there might be a use case gap here. So, let me outline a couple.\n1. As a developer, I need my CI/CD system to pull from a local mirror to my environment. An example of this, in a network sense, is the CI system for OpenStack. It does more volume than Travis CI, last I checked, and they do a lot of dependency installation. The CI system is distributed in several regions of several public clouds. To put the dependencies close to the CI runs for fast installation they have mirrors in each region.\n2. As a developer, I need to only use dependencies from my companies trusted store. These are public packages but the trusted ones are stored in a mirror for me. A place I've seen this several times with with debian packages of libraries. Many enterprises use them.\nYour example of Bundler installing Gems is an interesting one. The link you provided is about switching from Gems to the source and the rules around that switch. In Go we always use the source. What caught my attention was the way you can configure bundler to use a mirror for your gems.\nBundler is a different case because it's a central package repo. Go is distributed so the mirroring functionality needs to handle distributed.\nAnother place to look is at PyPI mirrors and caches. Once you have a mirror up you can specify it in your pip.conf file.\nI renamed it to mirrors rather than overrides because a true mirror use case is the primary one I had in mind.\nNow, some folks are going to use this to route to their GOPATH or possibly some other development environment. This is where the real possibility of trouble comes in.\nWhat kinds of problems can come up if a developer doesn't push commits from a dependency stilling in a dev environment to their public normal distribution locations?\n- A CI system or other developer that needs to install a version (release or revision) cannot find that version and exits in error.\n- A CI system or other developer resolving releases installs an older release, because the newer one isn't accessible in the public/sharing location.\nThe first one, where it exits in error, is due to a glide.lock file and there will be an error. For someone, other than the original developer who failed to push the commits publicly, this may be a bit perplexing of an error.\nThe second one, at first, seemed a bit more painful. But, if the resolver matches for compatible versions than you should be ok. It's not idea but it matched the version range support. It's not ideal.\nCan you think of other bad situations and explain how they would be bad in ways where something doesn't tell you? I imagine there are other cases.\nAgain, using mirrors for a dev environment is not the goal of this. It never was the goal of the gopath flags in glide either. I just realize there will be some abuse of that situation.\n. Two more notes:\n- I'm open to additional changes to stop people from hurting themselves. This PR is already large enough so those can go in as additional changes. I'm a fan of more small changes than fewer large ones.\n- The mirrors.yaml file being a separate file from any configuration file was intentional. It can be shared to different environments, like CI systems separately from any other configuration.\n. @sdboyer I don't think we really can block file:// paths because you could have your mirror be a shared filesystem. Mounting a shared filesystem (like NFS) isn't uncommon.\nRewrite rules is an interesting idea some of us have talked about in the past. That's worth doing.\n. @tve working on two interconnected things can be a real problem. It's also a problem for resolvers that want to make changes to the repo as a way to workout a version.\nYet, we do need to make this work.\nHow often do you make a change in the GOPATH that needs to be reflected in vendor/?\nWhat kind of workflow would you like to use to switch in and out of a mode where you're using a local copy?\n. @tve you'll be impacted by #547. You might want to take a look at that.\n. @tve A few things...\n- The -u flag on glide up is going away. No longer needed. The intermediate cache is going to be used which should make things a lot faster for those who had been doing glide up -u.\n- Things from the local system (using the file:// URI) will be pulled into the cache before being exported to their final destination. In the cache resolution occurs safely without impacting an external system.\n- Only committed changes are passed around.\nIn theory you can use the mirror to point to dev in the GOPATH and it should be pretty quick because the intermediate cache means only unknown commits are passed around now. But, keep in mind, If you pin something and put the app without the dependency having the commit pushed too it will be a pain for others.\nTo share some numbers. Prior to the change I ran glide up -u on a project at it took 2:53.17 in total time. After that change (with a warm cache) glide up (with the deprecated -u built in) took 51.432 in total time.\nThere is also the option of circumventing the things while developing. In your vendor/ folder you could delete the dependency you're developing on and then go will just resolve it to the GOPATH location. When done switch back to having it in the vendor/ folder.\n. @tve have you tried symlinking the location in your GOPATH to the corresponding location in vendor/ for this kind of development?\n. @tve if symlinks don't work and an rsync style solution is best... it might be worth writing a glide plugin to sync a project from the GOPATH in a cross platform way. I'm really curious about your experience.\nI could see glide sync github.com/foo/bar that pull over the code minus the VCS and vendor directories. Would need to consider the way to handle glide config files in doing so (and I'm sure Sam will help with that). Just pondering for now.\n. Can anyone share a glide yaml and lock file to reproduce this?\n. @timoreimann and @shafreeck can you test the PR fix at #557? I think this fixes it.\n. @timoreimann thanks for the example repo. It helped me to reproduce the problem, understand what was happening (and why my previous change didn't work, fix the problem, and prove it.\n. Thanks for the fix.\n. Can you test the PR at #556.\n. Merged PR. This is fixed.\n. Can you test the PR on #556.\n. Merged PR. This is fixed.\n. @timoreimann this is a good question.\n- This is happening now rather than in earlier versions because test imports are now managed by Glide.\n- A transitive dependency (dependency of a dependency) is asking to use github.com/prometheus/client_model. That's why it ends up in the imports section.\n- A fix for this, right now, is to list this package in your import section with the version you want to use and remove from your testImport.\nAny thoughts on a better UX here?\n. @sdboyer going to start asking some questions as I dig through these. Here's a start:\n1. Is the detection in Masterminds/vcs the level of detection supported or is there more? If there's more can you give me a pointer. I ask because the vcs property is used regularly by some big Glide users. I ended up needing to use it this morning.\n2. If the name is changing from s/import/dependencies what's the handling for backwards compatibility? There are thousands of glide.yaml files in existence.\n3. Did you work it out so varying locations can point to the same package and this work cross projects? So project A could pull package C from its source and project B could pull package C from a fork and the resolution just works.\n. > \"what use case is there for an explicit vcs property that can't be satisfied by having the vcs extension literally written in the import path?\"\nHow would you handle a location on the filesystem? People use those right now for a handful of things. I didn't consider the file:// based locations until others brought it up from their use.\n. @sdboyer I have a hard time thinking I could go to the Glide power users, such as @akutz, and tell them that in glide.yaml files and mirror settings they could not use file:// paths. Something they can do, and some already do, today.\nWhat would you suggest telling these folks that they would accept?\n. @sdboyer I have some questions/comments...\n1. I've tried using the code on the PR to update Glide itself and Helm. In both cases it failed with a panic. The panic on helm was panic: canary - *should* be impossible to have a pkg-only selection here which came right after \u2190 backtrack: no more versions of gopkg.in/yaml.v2 to try. \n2. Does this have anything to do with lacking a default version when one is not specified? Right now Glide tracks the default branch for a repo. When no version is specified that is used. This is a cached piece of information.\n3. Can you share why cache key names use a different strategy than what Glide uses today? I'm curious of the reason(s).\n4. When I try to run glide install with a legacy lock file I see it failing to make the conversion it says it's trying...\n[WARN]  glide.yaml was in a legacy format. An attempt will be made to automatically update it.\n[WARN]  glide.lock was in a legacy format. An attempt will be made to automatically update it.\npanic: interface conversion: gps.Revision is not gps.PairedVersion: missing method Underlying\nI keep running into trouble when I go to try it. Can you give me some pointers to help get up to speed more quickly?\n. This issue is due to inconsistent error message responses between different operating system. Glide attempts to detect a problem that can arise at a lower level and correct. Fix coming shortly. \n. This was merged in #582 \n. It appears your GOPATH is set to a GOROOT location rather than a proper GOPATH. It picks up stdlib packages because the stdlib is in your GOPATH.\n. @albrow thanks for pointing this out. That debug code should all be removed. It was left in by accident.\nBecause I'm releasing today (if all things go well) I'll make this fix. Thanks so much for catching this.\n. I setup a test environment and am not able to reproduce this.\nCan you share what your go environment looks like (e.g., go env)? An error like this usually comes up when Glide is unable to get a proper GOPATH.\n. Hey folks, sorry for the slow response. I was at a conference with limited connectivity and then traveling with no connectivity over the weekend.\nI understand the frustration at this issue.\nI have a feeling there are a couple things going on here.\nFirst, an element in the cache may be corrupt. You can clear the cache with glide cc and try again. I only ran into a corrupt entry in the cache once in all my testing. If this is the case I'd love more detail. I think we need to try some automated cache handling for an error or better instructions.\nSecond, and error like:\n[ERROR] Error scanning github.com/decred/dcrd/txscript: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/txscript: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\nUsually means the version for the repo has been set to one that doesn't have a subpackage. That there are incompatible changes that occurred. I didn't imagine this coming along with a corrupt cache.\n. @mischief Glide has trouble with putting the package itself into the glide.lock when the top package in the glide.yaml file isn't the real location in the GOPATH. It should warn you when that happens. Did that happen? \n. Oh, Oh, Oh, PR coming.\n. Can y'all please test the PR at #588? I think this fixes it.\n. First, let me cc @sdboyer as he needs to be in the loop.\nGlide's intent was to manage your vendor folder. We'd not considered having manually vendored packages alongside Glide managed ones. Manually vendoring means nothing has the true recorded state of the things (which is what a lockfile, like glide.lock).\nFeedback, discussion, and suggestions are very welcome. I'm pragmatic.\n. @mandarjog I'm sorry I didn't figure some folks would be putting generated code in the vendor/ directory.\nThe reason for that is the intent of the vendor/ directory is for external dependencies. Generated code that's for your application isn't an external dependency. Protocol buffers that are part of another application or library should have their generated source checked in and that external package can be imported and is external so it fits in vendor/. For example, the Go blog notes of generated code:\n\nit must be checked into the source code repository to be available to clients\n\nI had not anticipated generated code being in vendor/ and this is the first I've heard of someone doing it.\n. @nxvl I may be able to address your comments which are a little different from the original.\n- Glide can handle private packages using the repo property. See the glide.yaml file docs. You can specify a repo, such as git@git.example.com/foo/bar.git. If you're using a build environment that does not know how to access your private packages check them into the app.\n- The packages that need manual building.... vendor/ was designed for external dependency storage rather than our internally generated elements. In writing responses here I double checked the intent of vendor/ from the original authors. This may not be the best place for your built elements.\n. On non-Windows environments this error was consistent to detect and handle the copy instead. It seems Windows errors significantly different here. Windows does have the cross-device error we are detecting but that's not what being returned where we expected it.\nThis is a bug. In the installers Export function.\nWe'll need to detect this case under Windows and make sure it works for non-English languages since I believe this error is coming directory from the system rather than Go.\n. @kofalt we actually have the ability to copy if over if the problem is different disks. It's just run based on the detection of a moving error (rather than other errors). This moving error is different than I'd previously seen in the code. Go, on most platforms, bubbles up a common error. Under windows it's skipping the common error and bubbling up a system error.\nThis will be easy to fix.\n. A PR with a proposed fix is up at #587\n. Thanks. Once I switch focus to 0.13 I'll merge this.\n. @tomasky Glide always had the intent of managing the vendor/ folder for you. The way it does that has changed for better vendoring, reuse, and for better error handling.\n1. In the past VCS metadata for each dependency was maintained per project. If a dependency was used more than once the metadata was held for each time it was used. A central store provides better re-use.\n2. When vendoring, that is storing outside dependencies in your VCS, Glide spent too much time downloading VCS data just to strip it away in the end. The current setup is a huge speedup. Plus, managing the stripping of VCS metadata was a pain on users (with flags) and on the code.\n3. Glide used to figure out the versions in the vendor/ directory. If a problem happened in that process it left the vendor/ directory in a broken state. Now the vendor/ directory is only exported when the dependencies were worked out without issue.\nThis was done with safety and performance in mind.\n. I'm going to have to ponder this one but will consider making changes here for 0.13.\nThe reason I have to consider it is because of intent. If you have a package called testing in your GOPATH than go build, go install, and go run will use it instead of the testing in your GOROOT. That means there is a sort of mismatch.\nIf the same package is in the GOPATH and is in the GOROOT should we have a warning?\n@sdboyer you might want to look at this one.\n. @ryanfowler it appears you are right. See https://github.com/golang/go/blob/d6098e4277bab633c2df752ed90e1e826918ca67/src/go/build/build.go#L234\n. The latest commit does a few changes. First, instead of parsing the string (which can vary) it checks for the syscall error by name. Then, on Windows it falls back to check the system error if that was returned.\n. @jrick and @kujenga I think this latest commit fixes the problem. I tested it on github.com/decred/dcrd and it appears to fix the problem. Please let me know if you still see the issue.\n. @ApsOps I'm not sure. I'll need to look. I've not had a chance to figure out the root of the gin issue, yet.\n. @imiskolee They are doing very different things.\nGodep is coping the source from the GOPATH with the version of the package in the GOPATH. This is a fairly quick operation.\nGlide is doing a bunch of things:\n- It fetches missing packages to have locally including fetching forks and storing them safely.\n- It attempts to work out the right version of the dependency to use and checks out that release (it does update VCS metadata to have versions in this process).\n- It them puts the right version of the dependency in the vendor/ directory (the equivalent step to what Godep does)\nSo, Glide is doing more.\n. @chancez you're right. This should be pretty easy to handle since we can start a goroutine, look for the signal to quit, and then do the cleanup.\n. PR on #591\n. I'm a little confused about something and I think I need some more information to understand what's going on.\nThe glide.yaml file holds the intent while the glide.lock file holds the specific revisions being pinned to. So, a version for a dependency in the glide.yaml file that's empty, tracks a branch, or has a version range causes Glide to go to the dependency source, pull down any updates, and store them locally. It does that automatically.\nThere was never the intent for someone to manually checkout a version inside the repo within the vendor/ folder. Glide tells the VCS (such as Git) to go out to the source and fetch updates.\nThis happens via the github.com/Masterminds/vcs package. For example, with Git it will drop down to git and use commands like git fetch and git pull expecting them to go out.\nIs that not happening for you?\n. @a13xb it sounds like there is a problem and one I'm not experiencing.\nCan you provide an example project or glide.yaml file? And, can you share your OS/version and Go environment (go env)?\n. Quick question, do you have github.com/gorilla/mux imported in your code? Glide code scans and follows imports found in the code to find the packages to use. If you have this in your glide.yaml file but didn't use it in your code it's dependencies won't be followed.\nI setup an example with a file:\n``` go\npackage main\nimport (\n    \"fmt\"\n_ \"github.com/gorilla/mux\"\n\n)\nfunc main() {\n    fmt.Println(\"test\")\n}\n```\nIt fetched the dependencies.\nDoes this fix your problem?\n. @G-Harmon Can you run glide --debug update. I'm curious what happened?. Faulty one. The binary releases use -ldflags \"-X main.version=${VERSION}\" where VERSION is from $(shell git describe --tags). When go install is run this doesn't happen.\nIf you go to a release and download a build you'll find it properly reports the version. I just double checked.\nIt would be nice to have the internal version report the proper released version. #497 already exists for this issue and I know there is another issue I cannot find offhand where we discussed possible solutions. They were all too complicated in automation.\nClosing only because it's a duplicate. Suggestions on fixing welcome.\n. @RochesterinNYC I might be able to help and provide a little insight.\nFirst, can you check it vendor/ exists and is not empty. If it does not exist or is empty then run glide install. This is safer no matter what version of Glide comes along.\nDepending on the Glide flags you used, glide install has gone out to the Internet for some time. That includes versions prior to 0.12.x. If you didn't see that before I'd love to see more information.\n. Can you share your go env? Can you try with the --debug flag? For example, glide --debug install.\n. @kchristidis I think I can explain this.\nGlide fetches and maintains the dependency tree in use. That is the things that are listed as import rather than all possible imports from all possible packages. That means if you import a repo but aren't using a sub-package in it the dependencies of that unused sub-package aren't fetched.\ngo install walks all the packages and subdirectories, including those in vendor/ in an attempt to install everything. So, if one of those unused sub-packages from a dependency doesn't have all its dependencies it will fail to install something.\nLots of go tools look in vendor/. Because of this we created the command glide nv. You can use it like go install $(glide nv). This will cause go install to walk all the directories except vendor.\nThis may not be ideal but highlights the issue.\nDoes this help?\n. @leprechau thanks for filing this. I'll dig into this ASAP.\n. @leprechau do you have an example glide.yaml file you can share?\n. @leprechau I created an example project at https://github.com/mattfarina/go-test2. With this I can't reproduce the problem. What I see is...\nsh\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/Masterminds/vcs.\n[INFO]  --> Fetching updates for github.com/mattfarina/go-test.\n[INFO]  --> Detected semantic version. Setting version for github.com/Masterminds/vcs to 1.7.0.\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for github.com/Masterminds/semver.\n[INFO]  --> Detected semantic version. Setting version for github.com/Masterminds/semver to v1.1.1.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/Masterminds/vcs\n[INFO]  --> Exporting github.com/mattfarina/go-test\n[INFO]  --> Exporting github.com/Masterminds/semver\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 3 dependencies.\nWhat am I missing? Can you show me how to tweak this to reproduce the problem?\n. @leprechau I think I see what's going on. Several versions of Glide ago we made a change. Glide looks at the imports in the source and only follows those paths. That means if you have a nested package in a dependency that is never references in the import tree Glide skips fetching the dependencies for that since it's not needed.\nThere is a flag, --all-dependencies that will walk the everything. Though, I just discovered a bug in that. Working on that now.\n. @leprechau in the example you shared, github.com/leprechau/glide-test2/foo and github.com/leprechau/glide-test2/bar are not imported. So, their dependencies are not fetched.\nIf I was in the directory for glide-test1 and ran:\nsh\n$ glide up\n$ go run main.go\nThis will work because Glide will get all the imports referenced (needed) by the code.\nIf github.com/leprechau/glide-test2 importedgithub.com/leprechau/glide-test2/barthen the dependencies ofbar would be fetched.\nUsing Glide 0.11.1 I just got the following...\nsh\n$ glide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/leprechau/glide-test2.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 1 dependencies.\nTo walk all the directory trees as opposed to the imports use the --all-dependencies flag.\nsh\n$ glide up --all-dependencies\nPlease note #601. I plan to release 0.12.2 with fixes either Friday or Monday.\n. @leprechau \"I think\" I see your problem. Working on it before the next release. Thanks for your patience in explaining it.\n. PR is in #603. If this works for you then I think we're ready to roll this in and do a 0.12.2 release.\n. Glide manages your dependencies for you like package managers from other languages. It uses metadata from your project plus the dependencies to do this. For example, if two dependencies of your project have a shared transitive dependency but need different through overlapping version constraints Glide works that out.\nYou can manually edit the glide.yaml file and then run glide update. It will scan the code and use the information contained in the `glide.yaml' file plus the metadata found in dependencies to fetch all the needed dependencies and try to set them to the right version.\nA lot of people want to tools that will manage their dependencies for them. That's what Glide is there to do.\n. @gburanov The project structure works like this...\nYour project lives in the GOPATH at a location like $GOPATH/src/your/project. Then dependencies live in the vendor folder at $GOPATH/src/your/project/vendor. For example,  $GOPATH/src/your/project/vendor/github.com/example/foo and  $GOPATH/src/your/project/vendor/github.com/example/bar.\nThis structure is how the go tool expects it. Glide just puts things where the go tool will find them.\nWith Go you cannot escape theGOPATH. Your project needs to be in it. Is that how this was setup?\n. @rshiva in the error you get it's not listing the vendor folder as places it didn't find it alongside the $GOROOT and $GOPATH. That means it didn't see the directory there. This usually happens when the project is outside of the $GOPATH.\nIt looks as though the $GOPATH that go sees is /Users/admin/go/src/_/Users/admin/go instead of the /Users/admin/go/ value you listed. This could be the problem.. I filed a bug on the VCS project so we can fix the issue there.\n@sdboyer will fixing it on VCS cause that fix to roll into GPS properly?\n. This is a bug in the installer script. I'll fix it shortly.\nIn the meantime you can download it from https://github.com/Masterminds/glide/releases.\n. I just updated the installer script to handle this situation. Should be fixed now.\n. @xyproto Once you get to the Resolving imports step it's resolving transitive dependencies. That is dependencies of dependencies. And, it's running into a problem doing so.\nThere are two problems I see here. Both of which have a possible fix.\n1. code.google.com/p/go.crypto/bcrypt and everything on code.google.com is gone.\n2. github.com/gophertown/fsnotify no longer exists or is private. You're being asked for GitHub credentials in case logging in provides access.\nThe solution to each of them is common. In your glide.yaml file add entries for each of these with their new locations. I think the following will work:\nyaml\n- package: code.google.com/p/go.crypto\n  repo: https://golang.org/x/crypto\n- package: github.com/gophertown/fsnotify\n  repo: https://github.com/fsnotify/fsnotify\nI think these are the right locations. Often times HTTP redirects are setup from old locations to new ones. In these cases that didn't happen.\n. Can you try the fix to Glide in PR #622? I think this fixes it.\n. Master has diverged from the 0.12.x branch of releases which is just getting bug fixes. That's where you'll find the v0.12.2 tag.\nThis is a similar to how go itself does release tags. You'll find those on the corresponding release branches.\nDoes that make sense?\n. @akutz this looks fairly straight forward. Sorry I just got around to it today.\nOverall it looks good.\nAs to not merge a change right before the weekend, I'll tackle this on Monday.\n. Glide drops down to the git cli to execute Git commands. Is anonymous access enabled for git@... addresses?  Might https://git.dayu.com/grpc_gen/ad_system_gen_go.git work?\n. I'd like to get this in for Glide and Go itself. Once GPS is pulled in completely we'll look into this.\n. @sdboyer we'll need to fix mirroring before we merge back into master. I'd really like the 0.13.x releases to only have gps as the change. so as to not complicate things.\n. @sdboyer I ran go run glide.go up twice on this branch. On the second run I got errors. You can see the second run in the gist here. Can you talk to that?\n. @breerly is the tag not being on master a problem?\nglide.go on master should be bumped. Good catch. I'll fix that.\nThere is a release branch for 0.12.x changes to keep with semver while we work on master with breaking changes.\n. Are any of the stdlib packages in the GOPATH?\n. Once make build can pass the version into the code again this looks ready.\nI like having this check.\n. @breerly thanks for the contribution.\n. I think @sdboyer is right about the API limit. they've removed the limit for some requests but it's likely better to just put the data on glide.sh as @franciscocpg suggested.\n. The ignore build tag is a convention that some folks use. It's a convention rather than something baked into Go. Right now Glide isn't supporting conventions but rather rules of the tool. So, imports may get caught.\nGiven that this is convention... I'm not sure of the right path. Suggestions welcome.\n. @piteur thanks for the contribution. It's now on master... 29b978052d840d9cb6224c6b2e12ff13149e787d. If Glide disables the cache where does it Glide get the source for a version or revision to inject into the vendor/ directory or scan (in the case of update) for transitive dependencies?\n. @myleshorton Can you provide details about your setup (glide and os versions) and any example output? Did glide up provide an error? What happened?\n. In the example above there is a warning...\n[WARN]  The name listed in the config file (umoci) does not match the current location (.)\nThe name in the config file is likely not the path within the GOPATH. That'll cause the problem.. This is a hard problem.\nIf you've never read Linus thoughts on this it's worth reading.\nOnce a git history is published it's now a shared history. So, changing things is generally a bad idea because it messes with others who are consuming something.\nThere is a command to clear the cache. If an upstream dev does force push than the downstream devs have to deal with that. In Glides case users can clear the cache. If you have ideas on how to automate I'm game to listen.\nBut, as a rule... once a history is published it's tough on downstream people when there is a force push. Read what Linus said for a better explanation.\n. @stevenroose thanks for the contribution and fixing the inconsistency.. @heyitsanthony thanks for the contribution!. Closing as the remote branch is no longer available.. @matiasanaya Thanks for the contribution.. $LGOBIN is an internal variable name. That should not have been exposed in the messaging. I fixed that.\nThe shell script uses which to find the application. If which doesn't find it the message is displayed.. @krancour this was on my todo list for the exact reason you describe and the package from mitchellh was the one I was looking at.\nIf you submit a PR I'd be happy review so we can get it in. @krancour thanks for the contribution. I'm going to work through Glide changes for a bit and release a new version prior to bringing in GPS.. With the merger of #748 I think this is fixed.. Thanks for the fix.. Gah, ok... i'll look at this soon. thanks.. Thanks for the contribution.. @thanasisk when you try to set the repo to https://GITHUB_ENTERPRISE_TOKEN@github.enterprise.url/something what happens? I'm curious of the error since I can't track this down right now.. @sdboyer does removing the timestamp from the lock cause any issues with forward porting to dep?\nThe timestamp was originally introduced to support those who wanted to know when the last run happened. I can dig back through to find the reason. I added this at the request of others. If it's not all that useful and won't impact the future shift to dep then I'm ok with it.. I wonder if we could use go env GOPATH if the GOPATH env var is empty. That may give us the right result.. There's a PR for this on #798. @philoserf thanks for the update.. Thanks for the contribution.. Is this bash installed with git? What windows version and bash version?. I've been able to reproduce on projects with a large number of dependencies. Projects I've tried with a smaller set of dependencies have not exhibited the behavior. Is this how it's worked for others?. The issue appears to be that os.RemoveAll is unable to remove some files. This had previously been an issue in Go and some other projects detect Windows to handle this case separately. The issue is closed.\nUnless someone beats me to it, I'll be:\n Filing an issue against Go about this\n Implementing a work around. Quick update... I think I have a fix but testing it has been a little hard. On Windows (cmd.exe, etc) I'm having trouble reproducing the original issue to prove it's fixed with the change. It's intermittent for me. Under Bash... the linux subsystem setup to work with the filesystem is really slow which has made testing on projects with lots of files (where this shows up) and proving the fix worked to be slow.\nIt's just taking a little longer than I expected.. When I return home, in a little bit, I'll post the code for review. Thanks.. Sorry for the delay. Took a little longer to get to the bottom of this than I expected.\nFirst, the Go issue is at https://github.com/golang/go/issues/20841 along with details to reproduce it outside of Glide.\nSecond, there is a pull request that needs testing at https://github.com/Masterminds/glide/pull/857.\nFeedback is requested. Is there a better way to handle this?. I'm not sure what this issue is for so I'm closing. Please re-open and provide more detail if there's more to it.. @arschles there's a problem of grabbing the right transitive dependencies. For example, Glide only grabs the transitive dependencies that are in use. But, if it can't walk the import tree (only grabbing top level) then it doesn't know which to import. This is dangers with Kubernetes related things because importing all possibilities can accidentally import all possible Kubernetes ones... which can take a very long time.\nAny ideas on how to make the experience better given that?. This turns out to be a harder problem that you'd think. For example, what version of a linter do you install, where does that linter get installed to, and how does that relate to other versions of the same linter installed by others?\nOne of the goals is reproducibility which is hard for dependencies like this.\nAny suggestions?. This should be fixed soon. Fox already submitted. Sorry about the delay. Happened while I was on vacation. You'll see me back on glide more regularly soon. glide.sh is back. glide get already has a --test flag for that. See glide help get for more details.. PRs welcome on this point.. Can you point me to a project I can reproduce this with?\nNote, the default filesystem on macOs is case insensitive. So, README.md and README.MD are the same file. Are you using something other than the default filesystem setup?. Thanks for the contribution.. @m0j0hn FYI, in the future you can use the repo property in the glide.yaml file to alias to a different repo instead of rewriting paths.\nThanks for your work on this one.\nClosing because #816 is in place.. @zoofood Thanks for the contribution. @mwf Your first comment and second comment have two different problem. In your most recent snippet there is a request for two different versions with major differences (breaking changes). That's a situation Glide cannot handle.\nDo you have github.com/coreos/etcd listed in your apps top level glide.yaml file?. The issue here is that two different parts of the codebase are asking for the same package with differing incompatible API versions. Looking at the release history for AWS SDK for Go I can't find a release 0.12.70. The 1.0.0 release was back in 2015 so the codebase asking for something pre 1.0.0 is pretty old.\n. Adding debug detail in PR at #859.. Glide does not currently have a CLA.. @nikhiljindal if you need this in glide please see the glide-vc plugin.. @thrawn01 software licensing is complicated. What ever is implemented should be opt-in.\nIn any case, this should be discussed in dep rather than here.. I'm going to take a look at gox vs the alternatives to see what is the best way. I'd like to cut a release soon and if there is something better now may be a good time to switch. Or, I'll look at the alternative @franciscocpg suggested.\nIf anyone knows of a good alternative to gox I'm interested in learning about it.. I've created Masterminds/gox (based on the great work of @franciscocpg) and added support for s390x. In #916 I moved glide to use that for cross compiling. Along with this change we should now be able to produce an s390x binary.. This week I'm going to try to add some more debugging code to Glide in order to detect the problem. Once that's in we may be able to track down the problem a little better.. @ITSecMedia Can you provide some more details. I'm not having an issue. Can you provide OS, go, and other details. Closing as the PR has been merged.. @jpz thanks for the contribution. Thanks for the contribution @dvrkps.. @sdboyer you might be interested in this error. Or, maybe you already have this one down.. @aaskey This may be an ordering issue when it comes to scanning. Does google.golang.org/api/container/v1 or one of its dependencies import github.com/go-openapi/spec? Try re-ordering packages in the glide.yaml file.. @aaskey yes. This gives one a bit of control.. @dfuentes77 out of curiosity, is there a reason you can't use dep itself? I ask because dep is expected to be the successor to glide. If there is a gap in your needs I'm interested in knowing about it so I can make sure the dep team has it covered.\nI'll consider the request.. glide install installs the dependencies while glide update will re-build the glide.lock file from the latest versions. Have you tried glide update?. @jhowtan @Marahin There was a window of about 30 minutes where it was broken. A character in the original release notes caused something in the shell script to break (it didn't handle the character well). \nEverything should work now.. @mspaulding06 Have you checked this against https://github.com/golang/dep? Ideally folks will move to that and I want to make sure it's handled there as well.\n/cc @sdboyer \nI'll start with the vcs PR and we can go from there.. @sdboyer I had not considered the broken nature of the context. Great job pointing that out.\nFor reference libgit2/git2go#407 points out the dep, glide, and go get are all broken for it.\nI'd like to see if this can be fixed upstream first. git2go is breaking contracts that are affecting a variety of package managers (and I can imagine other tools). Would be worth trying to fix it there.. @vearutop Interesting idea. I had not thought of this but I kind of like it.\n/cc @sdboyer your thoughts? I'm thinking if something like this would be interesting to dep. I would want a feature to land there before I add something to glide so the feature has a future.\n. Heroku supports glide. See https://devcenter.heroku.com/articles/go-dependencies-via-glide\nNot sure what you're talking about when it comes to docker. Can you provide a pointer?\nvendor.json and Glide are expected to be overcome by dep. Have you looked at that?. glide up Will look at the source of your application and find the dependencies (based on the imports). It will then you the data in the glide.yaml file and other config files picked up along the way (breath first) to figure out the versions to use.\nThe glide.lock file contains the imported repos (not individual packages in them) and the revision (hash in the case of git but can be other if using a different vcs).\nDoes that help?. It's panicing at..\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x7053e2]\ngoroutine 1 [running]:\ngithub.com/Masterminds/glide/path.StripVendor.func1(0xc42047c620, 0x64, 0x0, 0x0, 0x903b40, 0xc42037d1d0, 0x0, 0x0)\n    /home/travis/gopath/src/github.com/Masterminds/glide/path/strip.go:28 +0x42\nThe code there is...\nhttps://github.com/Masterminds/glide/blob/8463787d4a6042a1575718e8289ee76abab9368c/path/strip.go#L22-L28\nIn particular name := info.Name() is causing the issue. So, the filesystem walking is passing in a nil pointer for a os.FileInfo. This looks like an issue with go master. Am I missing something?. Agreed. I'll put a fix in there. Thanks for reporting the issue.. @prateek Thanks for the contribution. Time for another release with this change.. Closing as I think this is fixed now. Thanks for the PR. Reviewing now.. I've identified the problem and will work to get it fixed and shipped over the next day.. Closing as this is fixed with the release of 0.13.2. I checked out cookoo as an hg repo in the right place in the _vendor directory. Then I ran glide update from the root of the glide project. I saw it noted:\n[INFO] Repository changed from git@github.com:Masterminds/glide.git to git@github.com:Masterminds/cookoo.git. I'm doing a clean checkout.\nThe wrong repo was listed as the one it's coming from. When git remote -v is run from the hg repo it bubbles up all the way to glide itself and provides that info rather than staying scoped to the _vendor directory.\nFor VCS changes this is wonkey. Any ideas how we could better handle this?\n. I'm not sure I understand the change here. $(VERSION) tells the shell script to execute VERSION and return the result of that. ${VERSION} returns the value of the variable. In this case they will have the same result. But, I'm not sure of the motivation for the change.\nCan you explain? Is there something about shell scripting I'm not aware of (which could easily be the case because I rarely do it)?\nAs the one who runs the builds, the current implementation generates the correct version. Are you seeing something different?\n. What non-POSIX shell environment are you looking for support in?\n. This is looking at the sub-packages in the config while still walking the directory tree (filepath.Walk below).\nInstead of walking the file tree for packages in the vendor/ folder what about walking the Import tree? This is what @technosophos is working on at the moment.\nI'd like to hold off on this until we get to see what that looks like so we can compare them.\n. Can you update this to use https?\n. I like the name strip-vcs.\n. @technosophos An error should never happen. The reason I didn't do anything was I wanted to keep the user experience sane. I think I'll put a debugging message in.\n. What if no format is passed in?\n. The glide.go file is already fairly long. Can we move outputList into action/list.go.  Maybe instead of action.List returning something it takes in the format switch and handles the display. That's how the other commands work.\n. In the usage can you note the default format.\n. Can you add a comment describing what the type does. golint will bug us if you don't and then in the future we'll remember (if we forget).\n. Notice the UpdateTracker is attached to the Installer instead of the Vcs. In later calls it's looking for it as a property on Vcs. Can you make the tracker available in both places?\n. What do we get from this? The first thing GetRootFromPackage does is run filepath.ToSlash. GetRootFromPackage is sometimes called outside NormalizeName.\nIs there a problem in the latest code that needs to be addressed?\n. I see the bug I introduced now.\n. Is there an operating system with the path separator other than / or \\ that Go supports? Or that's in wide use? If so that's a separate issue because other things will fail.\n. I think using v = strings.Replace(v, \"\\\\\", \"/\", -1) should be enough.\n. @sdboyer can you point me to idiomatic examples of fingerprints/hashes as []byte? I'd like to read them.\n. @sdboyer I did some digging and I see what you mean. But, it raised a concern for me.\nWhat would be returned is a [32]byte. To compare the byte slices you could use something like bytes.Equal. But, that needs a type of []byte. So to handle a comparison you'd end up with...\ngo\nbytes.Equal(a[:], b[:])\nThe a[:] is shorthand for a[0:len(a)]. This is needed to convert the type from [32]byte to []byte. For anyone using this function this seems non-intuitive.\nDo we know why the standard library does things this way?\n. @silasdavis There is not as much of a reason to have it as there used to be. This was far more important prior to the code scanning we have now.\nThis is useful in the lock files because other tools can use that information such as glide-vc.\n. Why does one need to be root?\n. Good call. I'll make that change.\n. That is a great question. I'm pretty sure there is so I'm not sure why it's not complained. I'll fix this. Thanks.\nEdit: There is only parallel read. No chance of parallel write.\n. This was a goof from debugging. Thanks for catching it.\n. @sdboyer The error from Windows comes from the system and is multi-lingual. Any suggestions on how to detect it in all possible languages?\n. This does sound much better. I'll work on that today.\n. Good catch. There is a small window. Fixing...\n. By changing from a var to const the ldflags for -X main.version=${VERSION} no longer works in the make build. This is why it was a var in the first place.\nI think this needs to be switched back.\n. When no argument is passed in nothing is returned. Can you update it to provide some message?\n. Can you add a note that these are the dependency locations in the glide.yaml or glide.lock file? So that one knows what arguments should be passed in.\n. EnsureConfig doesn't load the lock file. That means it won't find transitive dependencies. It might be a good idea to load a lock, if present, and fall back to config if the lock is not there.\n. GOPATH and GOROOT have defaults now. When would those cause an error getting the version?. I wonder if the issue is also that an unhandled error is being passed as an argument into the function. That info is null because there is an error.\nWe ran into a similar problem in the vendor stripping handler. You can see that here.\nCould you look to see if handling an error being passed in fixes the problem like the other function (linked) does?. ",
    "gsalgado": "Yeah, that'd work, although it'd be a bit annoying because I have ~30 deps and many of them depend on the aliased ones. The way I ended up working around this issue was to use the master branch for the aliased packages, but for that I had to fork them into a third place.\n. Just did a 'glide install' on my project using the defer-build branch and it completed with no warnings/errors! :)\n. Cool, thanks a lot for looking into this. I'd love to be able to use glide on this project!\n. Pretty please, that'd be really useful. I stole that line from a golang-nuts thread, btw :)\n. Do you have a .bashrc (or similar) that sets your GOPATH unconditionally? If so, you have to change that as  described in the Troubleshooting section of the README\n. ",
    "Nitrino": "Oh sorry, not read to the section Troubleshooting. \nThanks for the operative help and your work on this cool project!\n. ",
    "JacekLach": "I know this is a very old thread; but FWIW, if you had something like glide env which prints out the entire env to be sourced, you could do something like:\necho 'source ~/.bashrc' > /tmp/glide-<project>\nglide env >> /tmp/glide-<project>\nbash --rcfile /tmp/glide-project\nDrawback being this is shell-dependent (i.e. zsh has a different flag; --rcs; than bash, and you'd have to swap out ~/.bashrc for ~/.zshrc, etc). \nPerhaps just having glide env would be useful (so that people can eval \"$(glide env)\" if their rcfile does stuff to gopath/gobin) and less fragile.\n. ",
    "roblillack": "Actually, according to the POSIX standard $SHELL shall contain the pathname to the user's preferred (ie. login) shell. I don't know why it's not set to a path in my VM, but your changes look fine to me.\nLike @mattfarina, I'd also prefer the \u201ccurrent\u201d shell, but there is no sane way to find out what the current shell is using the environment. You'd have to walk up the path of glide's parent processes and compare to a whitelist to find actual shell processes. All kinds of stuff can go wrong here \u2026\nI'd merge feature/login.\n. You're so right. Current master works as expected.\n. Thanks!\n. Thanks for your comments, guys! Let's brake my confusion down into different items, then. Feel free to open tickets for each point or disregard them altogether:\n1. The documentation shall be clear about what \u201cUpdate all of the existing repositories.\u201d actually means.\n2. I think, glide shall fail more often:\nAfter changing the repo and vcs (Mercurial to Git) of a dependency (I switched to a fork\u2014so a pretty normal thing to do), glide just spit out a warning, that it was not able to checkout the repository. I think it should just stop right there, or: run through all the dependencies, and at the end state clearly that the action FAILed and print all errors that occurred before.\n3. glide does not seem to check if the VCS changed, as noted above. This is probably a bug.\n4. glide shall check for changes to the checkout of dependencies (and, again, FAIL). A --force flag as per your suggestion sounds perfect.\n5. Regarding install vs. update: It's probably just me, but in essence im adding my dependencies to a config file and want the tool to setup _vendor as specified. It does not matter, if I run it the first, the second, or the 100th time. So for me, it is just as sync or apply that is happening.\n6. You might want to think about a --delete flag to remove dependencies from _vendor, which are not specified (anymore) in glide.yaml. This way the name sync or apply as per 5. may make even more sense.\nWhat do you think?\n. Pull request #41 fixes the first point, #42 the third.\n. What are those issues? I'd be happy to discuss here!\n. I don't think, merely building the software shall use a network connection at all -- see pull request #45 for a Git-specific fix. Having non-working builds, was the reason I investigated this issue in the first place: On our CI system, random issues trying to set up dependencies would fail without stopping the whole build, which in turn leads to a whole bunch of different errors way later in the build process.\n. ",
    "dz0ny": "What about: go list -e -json\n```\n$ go list -e -json\n{\n    \"Dir\": \"/home/dz0ny/project\",\n    \"ImportPath\": \"_/home/dz0ny/project\",\n    \"Name\": \"main\",\n    \"Stale\": true,\n    \"GoFiles\": [\n        \"main.go\"\n    ],\n    \"Imports\": [\n        \"encoding/xml\",\n        \"github.com/PuerkitoBio/goquery\",\n        \"github.com/go-martini/martini\",\n        \"github.com/martini-contrib/render\",\n        \"github.com/martini-contrib/throttle\",\n        \"github.com/stretchr/hoard\",\n        \"github.com/wulijun/go-php-serialize/phpserialize\",\n        \"io/ioutil\",\n        \"log\",\n        \"net/http\",\n        \"strconv\",\n        \"strings\",\n        \"time\"\n    ],\n    \"Deps\": [\n        \"bufio\",\n        \"bytes\",\n        \"code.google.com/p/cascadia\",\n        \"code.google.com/p/go.net/html\",\n        \"code.google.com/p/go.net/html/atom\",\n        \"compress/flate\",\n        \"compress/gzip\",\n        \"crypto\",\n        \"crypto/aes\",\n        \"crypto/cipher\",\n        \"crypto/des\",\n        \"crypto/dsa\",\n        \"crypto/ecdsa\",\n        \"crypto/elliptic\",\n        \"crypto/hmac\",\n        \"crypto/md5\",\n        \"crypto/rand\",\n        \"crypto/rc4\",\n        \"crypto/rsa\",\n        \"crypto/sha1\",\n        \"crypto/sha256\",\n        \"crypto/subtle\",\n        \"crypto/tls\",\n        \"crypto/x509\",\n        \"crypto/x509/pkix\",\n        \"encoding\",\n        \"encoding/asn1\",\n        \"encoding/base64\",\n        \"encoding/binary\",\n        \"encoding/hex\",\n        \"encoding/json\",\n        \"encoding/pem\",\n        \"encoding/xml\",\n        \"errors\",\n        \"fmt\",\n        \"github.com/PuerkitoBio/goquery\",\n        \"github.com/codegangsta/inject\",\n        \"github.com/go-martini/martini\",\n        \"github.com/martini-contrib/render\",\n        \"github.com/martini-contrib/throttle\",\n        \"github.com/oxtoacart/bpool\",\n        \"github.com/stretchr/hoard\",\n        \"github.com/wulijun/go-php-serialize/phpserialize\",\n        \"hash\",\n        \"hash/crc32\",\n        \"html\",\n        \"html/template\",\n        \"io\",\n        \"io/ioutil\",\n        \"log\",\n        \"math\",\n        \"math/big\",\n        \"math/rand\",\n        \"mime\",\n        \"mime/multipart\",\n        \"net\",\n        \"net/http\",\n        \"net/textproto\",\n        \"net/url\",\n        \"os\",\n        \"path\",\n        \"path/filepath\",\n        \"reflect\",\n        \"regexp\",\n        \"regexp/syntax\",\n        \"runtime\",\n        \"runtime/cgo\",\n        \"sort\",\n        \"strconv\",\n        \"strings\",\n        \"sync\",\n        \"sync/atomic\",\n        \"syscall\",\n        \"text/template\",\n        \"text/template/parse\",\n        \"time\",\n        \"unicode\",\n        \"unicode/utf16\",\n        \"unicode/utf8\",\n        \"unsafe\"\n    ],\n    \"TestGoFiles\": [\n        \"main_test.go\"\n    ],\n    \"TestImports\": [\n        \"testing\"\n    ]\n}\n```\n. I would love to see:\nglide init - create initial file {aks user for package name, ask about detecting packages, runtime}\nglide shrinkwrap - create/update godeps file basede on current enviroment (https://www.npmjs.org/doc/cli/npm-shrinkwrap.html)\nglide run {named script} - yaml file would contain runnable scripts (https://www.npmjs.org/doc/cli/npm-run-script.html)\nglide install - install dependencies based on godeps, if file is not present use go get, install runtime..(https://github.com/pwoolcoc/goenv) \n. ",
    "azylman": "Just to clarify: what's the current status of this? Does glide pin make a glide.yaml file with all of the currently-used dependencies?\n. Awesome! Could we get this documented in the README, as well?\n. fwiw, I've used gopkg.in/blang/semver.v1 before and was happy with it (used it in gitsem, which we use to version all of our libraries) - not sure if it has what you need, though, because I don't think it can match against constraints\n. Can't wait to see this!\n. Awesome, thanks! Can't wait to try this out\n. ",
    "chendo": "Awesome, thanks!\n. ",
    "gdm85": "Showing version information is a good idea, however automatically calling home to check for updates it's not, IMO. One might also want to use Glide without network and not be bothered ;)\n. Ahem..but why? Do one thing and do it well, just saying.. ;)\n. :+1: very interesting idea! @abourget any plans to write such addon? otherwise I might try something :)\nFor reference: https://github.com/jamesgraves/example-go-app/\n. @technosophos I just got back, thanks for giving a look at this.\nI've put glide in my GOPATH with go get, so I am using master, however this is what I get:\n```\n[WARN] To use Glide, you must set GO15VENDOREXPERIMENT=1\n.\n    C   ()\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x20 pc=0x48b6e5]\ngoroutine 1 [running]:\ngithub.com/Masterminds/glide/cmd.excludeSubtree(0x0, 0x0, 0x0, 0x0, 0x614f67)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:220 +0x65\ngithub.com/Masterminds/glide/cmd.walkDeps.func1(0x0, 0x0, 0x0, 0x0, 0x7f84ab0c2668, 0xc8201f36e0, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:185 +0x93\npath/filepath.Walk(0x0, 0x0, 0xc820104d28, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:394 +0xa5\ngithub.com/Masterminds/glide/cmd.walkDeps(0xc82007dad0, 0x0, 0x0, 0xc8201e45d1, 0x1, 0x0, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:213 +0xc0\ngithub.com/Masterminds/glide/cmd.displayTree(0xc82007dad0, 0x0, 0x0, 0xc8201e45d1, 0x1, 0x2, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:99 +0x86\ngithub.com/Masterminds/glide/cmd.displayTree(0xc82007dad0, 0xc82000a124, 0x1c, 0x8da348, 0x1, 0x1, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:112 +0x659\ngithub.com/Masterminds/glide/cmd.Tree(0x7f84ab0c2590, 0xc820130b40, 0xc820084260, 0x0, 0x0, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/cmd/tree.go:33 +0x6a6\ngithub.com/Masterminds/cookoo.(Router).doCommand(0xc82012f820, 0xc820131f50, 0x7f84ab0c2590, 0xc820130b40, 0x0, 0x0, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/cookoo/router.go:209 +0x86\ngithub.com/Masterminds/cookoo.(Router).runRoute(0xc82012f820, 0x8dfa90, 0x4, 0x7f84ab0c2590, 0xc820130b40, 0x8dfa00, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/cookoo/router.go:164 +0x4c9\ngithub.com/Masterminds/cookoo.(Router).HandleRequest(0xc82012f820, 0x8dfa90, 0x4, 0x7f84ab0c2590, 0xc820130b40, 0x8da000, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/cookoo/router.go:131 +0x2fc\nmain.setupHandler(0xc82015e0f0, 0x8dfa90, 0x4, 0x7f84ab0c2590, 0xc820130b40, 0xc82012f820)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/glide.go:392 +0x2aa\nmain.commands.func11(0xc82015e0f0)\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/glide.go:339 +0x5e\ngithub.com/codegangsta/cli.Command.Run(0x8dfa90, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x967860, 0x37, 0x9bf2a0, ...)\n    /home/gdm85/.gopath/src/github.com/codegangsta/cli/command.go:127 +0x1052\ngithub.com/codegangsta/cli.(App).Run(0xc8200e3500, 0xc820086000, 0x2, 0x2, 0x0, 0x0)\n    /home/gdm85/.gopath/src/github.com/codegangsta/cli/app.go:159 +0xc2f\nmain.main()\n    /home/gdm85/.gopath/src/github.com/Masterminds/glide/glide.go:102 +0x494\ngoroutine 17 [syscall, locked to thread]:\nruntime.goexit()\n    /usr/local/go/src/runtime/asm_amd64.s:1696 +0x1\n```\nIf you want to reproduce it, it should be fairly simple: checkout my drive project fork (also the original project will do the job), then enter src directory and run at your choice one of:\n- glide list\n- glide tree\n- glide init; glide guess\nThe last one will still return an error like:\nOops! cannot find package \"C\" in any of:\n    /usr/local/go/src/C (from $GOROOT)\nSo I guess this is not addressed (yet). Have you looked at how similar projects handle this? For example errcheck (for which I have recently updated the matchPackages func in the gotool dependency). I guess somewhere in Go's codebase (or in errcheck codebase) it's applying a filter for these?\n. @technosophos yeah, now it is fixed, I confirm :+1: \n. @mattfarina the issue I am reporting is that compiling 0.6.1 gives a different binary than the one on your releases. Normally the binary releases are built from the corresponding tagged source.\n. Propagating the error through the various layers is probably going to make it look less elegant, but it will be functionally more valuable. What I do for example with workers is collect all the statuses and then have them returned as a composite one (coshell is a notorious example of this pattern).\nI can try to make a PR but if you were already on it I will not, you probably have more insight on this.\n. ",
    "wav": "I think this would make sense as some sorta plugin that \"re-writes\" the package information that glide uses for sourcing. The plugin would be executed before glide does a fetch.\nThe plugin can then simply be a script that takes the package information and does a lookup.\n. ",
    "mhoglan": "Could be good to also look at how this is handled on systems currently.   There are two ways I typically handle this:\n- DNS redirection, whether that is through /etc/hosts on the machine or the DNS server it is utilizing\n- local .gitconfig that performs insteadOf on the URL\n  - this is also typically the way you make go use SSH always even if the URL is referencing https\ne.g. .gitconfig way\n[url \"git@my-git-mirror:\"]\n        insteadOf = https://github.com/\nOne use case that I think this starts a path down, is a similar concept of the repo.xml that maven has and the ability to change out the central repository you are working.   While there is no central repository here, you are changing the source of your dependencies to come from a mirror instead of the original.   That is the same concept of changing the repository that artifacts are coming from in maven.\n. Agree, I was just mentioning those as ways that people do it today, just in case there are some insights that can be gained by looking at those work arounds and the use cases they are used for.   And to help make sure a solution alleviates having to use those work arounds.\nI do think getting to where you can have a site style file which can span projects for specifying mappings is beneficial for several use cases.   It also could be the place you could start to define policies.   I would like to be able to give every development environment a configuration file that would help dictate their usage, such as only these imports are allowed, or these are not allowed.   Becomes important when considering GPL or other licensing concerns.  One of the primary reasons you use a mirror and disallow internet access to confine dependencies to a controlled list that has been reviewed and approved.\nAnother thought, those restrictions / policies are not necessarily related to the application, but to the usage of the application.   dev usage is restricted this way.  scm usage is restrict another way.  etc...  Some third party external using my open source application may have zero restrictions.    That to me helps point that this solution should be environment based versus in the application source.   Very \"profile\" like.  Passing in a profile to use when executing.\n. I added a quick instrumentation of a timer from https://github.com/rcrowley/go-metrics to the VcsUpdate call to see which update was taking so long.  Using that library you could have glide output the metrics registry when finished.   I was just outputting the timer information on a defer call to see it in the debug logs.   \nNow that there is concurrency going on with the VcsUpdate, contextual information with the logging associated with it would be nice.   Knowing which log statements belong to which.   This contextual information would also be needed for metrics to know which metric in the registry to update. \n. I didn't run before and after timings of skipping the branch detection for caching in #265 but it did feel faster as I watched the debug logs.\nThe main thing I found out on my workspace was that the aws-go-sdk and thrift repos take ~4-6x longer to download than the other repositories.   Majority of the time in a glide install seemed to be in the VcsUpdate step.   \nHad me thinking if there is any way to parallelize or speed up a git clone.  I don't think there is.   Was going to check to see if maybe there are some meta checks that could be performed on a repo to prioritize the ordering of download, put the bigger ones first so that they get one of the first goroutines since they take longer.  I know this is an advanced option, but I am working in states where docker containers are coming up and down continuously in fresh environments to do builds of multiple services.   Small things add up quickly.\nDefinitely getting some metrics and instrumentation though to point to best places would be first.  I'll see if I can add some more in and in  a way that is better to share, my current one was a complete hack ;)\n. I am pretty familiar with packaging systems across different languages and systems.  That is where some of the friction with my usage was coming from.   Lets use pip as an example.  If I do a pip install <package> it installs that package and its dependencies into my site-packages, it does not go through my source code of my workspace and process its dependencies in conjunction.  \nGoing to use the stringsvc1 example from go-kit as an example here\nroot@7982ce95e3e7:~# go get -d github.com/go-kit/kit/examples/stringsvc1\nroot@7982ce95e3e7:~# cd /go/src/github.com/go-kit/kit/examples/stringsvc1/\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[INFO] Found reference to github.com/go-kit/kit/endpoint\n[INFO] Adding sub-package transport/http to github.com/go-kit/kit\n[INFO] Found reference to golang.org/x/net/context\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# cat glide.yaml\npackage: github.com/go-kit/kit/examples/stringsvc1\nimport:\n- package: github.com/go-kit/kit\n  subpackages:\n  - endpoint\n  - transport/http\n- package: golang.org/x/net\n  subpackages:\n  - context\nI started with a clean workspace.  Created the glide.yaml file with glide create which determined the dependencies by looking at the source code.   I assumed that it was a best effort since it said it was guessing.   \nI have not created my vendor directory yet.   Doing this on purpose for this exercise   As my problem I was having in my project was causing an error during the glide update in creating the vendor directory.\nI would expect though to be able to add a new dependency via glide get and populate the vendor package with it.\nLets go get the goamz package\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide get github.com/goamz/goamz\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/goamz/goamz\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/goamz/goamz.\n[INFO] Resolving imports\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Fetching gopkg.in/logfmt.v0 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Fetching gopkg.in/stack.v1 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/goamz/goamz.\nStarts fine.  I expect that it would have downloaded the dependencies for goamz.  But then it goes and fetches all the dependencies that are in the glide.yaml. I feel it should have just updated the glide.yaml with a new dependency and ended there.  \nSuspected this is occurring because it wants to update the glide.lock file to have the new package and transitive dependencies pinned.   Since I have not done a glide update to cause a glide.lockto be generated, maybe it was triggering a glide update or respective behavior.\nHere though we can see that even with a populated vendor directory and a generated glide.lock file, it will still go through and fetch and analyze dependencies after getting the package.\n```\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# rm -rf glide.yaml glide.lock vendor/\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[INFO] Found reference to github.com/go-kit/kit/endpoint\n[INFO] Adding sub-package transport/http to github.com/go-kit/kit\n[INFO] Found reference to golang.org/x/net/context\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide update\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Resolving imports\n[INFO] Fetching gopkg.in/logfmt.v0 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Fetching gopkg.in/stack.v1 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 4 dependencies.\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide get github.com/goamz/goamz\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/goamz/goamz\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/goamz/goamz.\n[INFO] Resolving imports\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Fetching updates for gopkg.in/logfmt.v0.\n[INFO] Fetching updates for gopkg.in/stack.v1.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/goamz/goamz.\n```\nIt is this \"Resolving Imports\" stage that I am referring to should not be implicitly done.\nSimilar behavior with glide update \nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# rm -rf glide.yaml glide.lock vendor/\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[INFO] Found reference to github.com/go-kit/kit/endpoint\n[INFO] Adding sub-package transport/http to github.com/go-kit/kit\n[INFO] Found reference to golang.org/x/net/context\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# cat glide.yaml\npackage: github.com/go-kit/kit/examples/stringsvc1\nimport:\n- package: github.com/go-kit/kit\n  subpackages:\n  - endpoint\n  - transport/http\n- package: golang.org/x/net\n  subpackages:\n  - context\nLets remove the golang.org/x/net dependency\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# vi glide.yaml\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# cat glide.yaml\npackage: github.com/go-kit/kit/examples/stringsvc1\nimport:\n- package: github.com/go-kit/kit\n  subpackages:\n  - endpoint\n  - transport/http\nWhen I do a glide update, it is still going to go get the glang.org/x/net dependency due to the \"Resolving Imports\" stage.\nroot@7982ce95e3e7:/go/src/github.com/go-kit/kit/examples/stringsvc1# glide update\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/go-kit/kit.\n[INFO] Resolving imports\n[INFO] Fetching golang.org/x/net/context into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Fetching gopkg.in/logfmt.v0 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Fetching gopkg.in/stack.v1 into /go/src/github.com/go-kit/kit/examples/stringsvc1/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 4 dependencies.\nglide update to me is analogous of process my requirements.txt and populate my site-packages if coming from the pip world of things.\nHope that clarifies some of what I am seeing and thinking.   Not disagreeing with the ideas or practices that glide is based on, I agree with them and is one of the reasons I have come to use the tool from the others out there and I have liked what I have seen.  \nIn regards to my problem in my project, it did turn out to be a transitive dependency mismatch issue, just was rearing its head in a very ugly way because the change between the two versions of the dependency was that the dependency vendored one of its dependencies into an \"internal\" folder.   The latest version of that dependency was causing glide to look in the vendor folder for a directory that did not exist since in the vendor directory that dependency instance was an older version.   \ngithub.com/prometheus/common was the package that triggered all this.  \nI was trying to incrementally build my vendor directory and glide.yaml file so I can see where the trigger for this was occurring.\n. Probably is more of a philosophical or design decision discussion.   I understand and follow the points you made, and the implementation choices based on those.   There is a desire to keep everything in a consistent buildable state.  I wouldn't call it a poor or good design choice, it is a goal, and one of convenience.\nSome thoughts.  Not advocating a certain viewpoint, but asking to raise thoughts, even if contrarian.\nGlide is a dependency / vendor management tool.  It is nice that the end result of running my dependency management tool is that my workspace is in a state that will build with go build.\nHowever is this ensurance the job of a dependency management tool?   The management of the glide.yaml, glide.lock and vendor artifacts and the ensurance that they are processed in a deterministic way and stay in a consistent state seems to be the primary purpose.   If the end result of that execution is that the workspace is in a state that one can just execute go build without any externals, then that is a result of the input (glide.yaml and glide.lock) being defined in a way that created that state.   \nI would use this tool in a way to provide ensurance of a deterministic buildable state.  Those ways on top of the tool are convenience and it is nice to have some of those conveniences come with the tool.   \nThere can be both ways.   Using git terminology, the plumbing and the porcelain.  \nThat is ultimately what I am bringing up here.  There should be some separation of the two.  Whether that is additional commands or flags, either way, but the ability to do so.\n- glide.yaml is a way to specify a list of dependencies for a project.  Also provide capabilities to satisfy use cases that typically require workarounds or are tedious to perform, such as the ability to alias a dependency to a different origin (such as forks).\n- glide.lock is a way to specify a terse definition of the dependencies specified in glide.yaml and their transitive dependencies.   Satisfy the pinning use case and the ability to generate a vendor directory in a consistent fashion.\n- vendor is the golang mechanism to provide a precedence over what is present in the GOPATH;  essentially it is the projects own isolated version of GOPATH/src\nI can see the need for those 3 items to stay consistent with each other, but why does the state of my workspace influence that?   There is now the requirement that a workspace must be in a pristine state for the tool to work.   The workspace is now influencing \nIf we take the case of the glide update I did in the previous post where I remove a dependency golang.org/x/net from the glide.yaml;  I do not end up in a consistent state among the 3 items in that case.   The tool went off and downloaded golang.org/x/net to my vendor directory and added it to the glide.lock file but that was not added in my glide.yaml;   Not saying glide.yaml should be updated based off the analysis of transitive dependencies, but it is suppose to be representative of the external dependencies required of the workspace which I want to be eventually present in the vendor directory after using glide.       \nIf I were to take the glide.yaml and analyze it by hand, tracing all the dependencies, I would never find golang.org/x/net in that graph.   It is only because that glide.yaml existed in a source code workspace where a golang source file referenced it in an import did the tool go get it.  If I executed the exact same same commands and glide.yaml in a different source workspace, I would get a different result, even though the input to the tool was the same.   \nContrived use case, but what if I wanted a specific dependency to be pulled from the environment, from the GOPATH and everything else to come from the projects vendor directory.  A site override like dependency that is populated based on environment.   Cannot do that currently because the tool is requiring that the workspace be in a complete buildable state based on the glide.lock file.     \nLike I said earlier, there can be both worlds.   Convenience ways that string together the usage of the tool.  But the separation of the convenience and the plumbing. \nJust tossing this out as an idea.  I know there are existing commands and terminology etc... just showing this as example of the thoughts.\n- glide analyze - Analyze the workspace and generate a list of external dependencies found in the workspace\n  - maybe this is what glide list is doing, but I get a different list from that command than what glide create is currently doing \n- glide create - Initialize a workspace for glide usage.  Run glide analyze and use result to generate a glide.yaml\n- glide update - Process the glide.yaml and generate a glide.lock file describing all the dependencies in a pinned fashion\n- glide install - Process the glide.lock and populate the vendor directory\nThese commands can have flags (which could be defaulted to true) to ensure consistency / integrity amongst the files.   Similar to what is specified in the notes on glide install and how it currently will error if the glide.lock file is out of sync with the glide.yaml;\nThere could be convenience commands for building the workspace and other wrappers around the go tools.  Or the ability to string them together (like how glide novendor works).    \n\nReally can sum it up with this:\n- I can be in an empty workspace, void of golang code, create a glide.yaml by hand, execute glide update and have a populated vendor directory and a glide.lock describing in a pinned fashion the dependencies present in the vendor directory.\n  - This works today.\n- I should get the exact same result (glide.lock and vendor directory) if I dropped a golang source file in the workspace and executed glide update  (no changes were made to the glide.yaml);\n  - This is not true today.\n. This is similar to what I was referring to in #249 ;  Ability to separate the processing of imports, whether from  glide.yaml or the project workspace.\nThere is an argument that could be made that if you version pinned things in a semantic versioning way, that it shouldn't matter if the latest of that version range was pulled in because it should be compatible.  That is idealistic though, and reality is sometimes you want to just upgrade one dependency.  Especially if your QA process requires verification of every dependency change for a release.\n. you should try with the latest glide from source \nthis sounds like an issue with a nested vendor scenario and you could probably resolve it by removing the nested vendor directory in the dependency and flattening out the dependencies at the top level.   Such as adding Sirupsen/logrus and codegangsta/clito your glide.yaml so they are top level dependencies.\n. What about the setting of the variable in the cache.go to the value that was determined by the command line?  Then you would get the proper error returned that the cache is disabled, where right now you get the error that the directory does not exist.\n. I did look at that some too, the EnsureCacheDir was commented out and there is no where else that tries to create the cache directory.  The reason the cache directory ends up being created when you turn it on is the creation of the json to put in the cache in the VcsGet function causes the whole path to get created.  \nfrom cache.go#L90\np := filepath.Join(location, \"cache\", \"info\", key+\".json\")\n    f, err := os.Create(p)\n. Here is a repo I put together with a pared down example of how I do this in our projects.    \nhttps://github.com/mhoglan/golang_version_injection\nThe end result is your golang binary will be able to output something like this:\nroot@3e32bcca8e8e:/go/src/github.com/mhoglan/golang_version_injection# /go/bin/golang_version_injection version\n{\n  \"version_info\": {\n    \"branch\": \"master\",\n    \"build_date\": \"20160218.164912\",\n    \"build_label\": \"projectname-v0.0.1-0-ga\",\n    \"commits\": \"0\",\n    \"dirty\": \"false\",\n    \"git_describe\": \"v0.0.1-0-g0034474\",\n    \"git_sha1\": \"g0034474\",\n    \"label\": \"ga\",\n    \"version\": \"v0.0.1\"\n  }\n}\nWhich tells me everything I need to know about the workspace it was generated from.  It also supports injecting runtime based values with ENV var injection which we used to have our build servers inject host information etc...   \nGot pretty in depth in this subject as you can see :)\nYou are welcome to take this and use it.    I am working on eventually opening up the whole example this was pulled from which we use for bootstrapping golang projects. \n. I did originally look to find some native go way to do these kind of things.  The go generate that came about in 1.4 was the closest to having any ability for hooking into the go tools.   \nEnded up choosing Makefile because its pretty universal across distribution types and environments without introducing a ton of dependencies on the systems (mainly the dev systems).  Wasn't my ideal choice because of the level of complex logic we needed to get into all of our goals.   For instance the overall Makefile I took that snippet out of actually goes off and makes binaries, tarballs, RPMs, containers, etc... It also wraps docker commands to perform all of that work inside build containers.  We created it as a way to bootstrap our internal golang projects and have a way to produce the multiple artifacts we need.   \nNow for just version information injection, you could achieve that with just the go generate tie in.  The go generate command that I have in that repo runs the scripts/includetxt.go which converts a text file to a golang source file constant.  That text file is just the output of the generate_version_info.sh script.  The go generate script could have also ran the generate_version_info.sh or related git commands to generate that constant value.    \nIll see if I can put together just a go generate and go build example.   \nOther note... I know I show how you can inject symbols with the ldflags on go build, we don't ever use that.  We just did it and showed it as an example.  Its actually a pain to inject json that way.  Originally we were just inject a single label, but it grew into that we would prefer to have a complete dictionary of values.\n. ",
    "arschles": "Would aliases extend to transitive dependencies as well?\nFollowing on my comment at https://github.com/Masterminds/glide/issues/372#issuecomment-212175879 since that issue was closed.\n. ah, right. I forgot that, but it's a very important clarification. :+1: \n. thanks @technosophos \n. @mattfarina great, thanks!\n. @mattfarina :+1: on that approach!\n. :+1:\n. Late to the party here, responding to @technosophos. I've been working on a proxy (https://github.com/arschles/goprox) that I just got minimally working. It serves the same functionality as the gitolite solution that @sectioneight originally mentioned, but backs each repo to S3. On the functionality side, I'm planning on adding some other small features (like aliasing, for those who don't use glide) and a server admin tool, but it's just about feature complete now on the end-user side.\nAnyway, I discussed with @technosophos a few weeks ago, and the topic of rewriting transitive dependencies came up. What's the thinking on this?\nAs a concrete example, if I have import github.com/gorilla/mux in my code, and the git URL is aliased for the repo that corresponds to (whether with repo: or some future awesomeness), the git URL for github.com/gorilla/context, a dependency of gorilla/mux, would have to be rewritten. I wasn't clear from the above examples (like the content in ~/.glide.yaml) if the rewriting would apply to all resolved dependencies, not just top-level ones.\n. thanks for letting me know @sectioneight. fwiw, I'd want to rewrite the entire dependency tree by default. rewrites would be significantly less useful for me if I was only able to rewrite direct dependencies (i.e. at the top of the dep tree).\nThe k8s.io/kubernetes dependency tree is a good example - it's very wide and in some cases, very deep. Ideally I'd like to have all those dependencies (or, ideally packages that match a regex) rewritten. In this specific case, I'd rewrite them to a proxy to (significantly) increase download speeds.\n. @sdboyer @sectioneight is there an issue/issues that I can follow related to that work?\n. Thanks @sdboyer !\n. All good points, and I admittedly thought through few of them initially. Some answers/comments below:\n\nOperating in the current context - OS, arch, and go version - is not a safe general approach. It means that the generated glide.lock is only applicable for use on the same OS, arch, and go version\n\nExcellent point - I apologize for not being more specific - I was suggesting earlier that the glide.lock be complete, and therefore applicable to all environments, but the vendor folder end up with only the dependencies that apply to the host's build environment. I thought, however, after I read your post @sdboyer, that the dependency traversal & download logic might prohibit this. I have no idea...\n\nBut pretending the problem doesn't exist, and generating non-portable locks, is too harmful\n\n100% agree\n\nif you did this it would generate a glide.lock file for a specific build environment\n\nInteresting idea, but my fear would be that any repo would need as many glide.locks as there are build environments - a \"combinatorial explosion.\"\n\nIf they glide install the locked dependencies or use what you have vendored some packages may be missing. How would you handle that?\n\nSimilar to what I said above, I wonder if it'd be possible to have a complete glide.lock but then the glide install process could decide which dependencies apply to the host's build environment. I'm not sure if that is possible with the current glide, because the purpose of the glide.lock file seems to be to flatten the dependency graph and allow the installer to skip the resolver. Correct me if I'm wrong, of course!\nAnother option might be to annotate each package in the glide.lock with build tags (which is the cause of the problem described in the OP), so the glide install code can compare those tags with the current environment and act accordingly. That's also off the top of my head...\n. @mattfarina if glide only paid attention to go version build tags, then cross compiling should still work, as long as you use the same go binary. I agree, though, with the sentiment in responses that this is a very special case and it probably doesn't make sense to build this exception into the glide tool itself...\n. @technosophos Sorry, I don't have something concrete here. I didn't explicitly look, but I did copy over the glide.lock before running, and it didn't change much except for version numbers as I expected. If necessary, I can reproduce the whole thing -- just let me know.\nI had a few other ideas in my head, so I'll put there here:\n\nCan I pass glide a flag to only check the top-level package imports in my code?\nFor example, if my code has an import like this: import \"github.com/my/package/one/two\", can a command like glide up --top-level-only ensure only that github.com/my/package is present?\nIt could be problematic to determine when a package name is fully-qualified and references the top level of the package, unless we already have it on disk\n\n\nCan I tell glide to walk the dependency trees and fetch transitive dependencies for only the code that lives in my vendor/?\nFor example, glide up --vendor-only\nThis would allow me to do version upgrades first, then I can glide get other packages that my code needs\n\n\nCan I tell glide to upgrade only the things in my glide.lock?\nFor example, glide up --lock-only\nJust as with glide up --vendor-only, this would effectively allow me to update what I already have, and then glide get what's missing later\nThis could be also be useful for rebuilding a lost glide lock\n\n\n\nAnyway, that's way more than $0.02. Hopefully it helps a bit.. @mattfarina good point, one possibility is to have glide warn, but not fail, when it finds imports in my code that\n\nHas a dependent package in the package name (i.e. import github.com/my/package/a/b/c and github.com/my/package is in the glide.yaml)\nimports a package that doesn't exist\n\nIf it did these warnings, it seems like glide could avoid pulling in a massive set of dependencies, but still tell the user that their build is likely to fail.\nI may be missing something here. I'm looking forward to hearing your thoughts.. ",
    "ipfans": "Is there any plans to configure VCS rewrites? I think it's very useful for users from countries those has internet access restrictions. For example, in China, we need to redirect requests to sites that we can access. Some packages from Google servers will block by government.\nLike pip for python or npm for nodejs, it support a arg -i to pypi mirror:\npip install -i https://mirrors.pypiorsomething.com flask\n. ",
    "kamilchm": "$ echo $GOPATH\n/home/kamil/projects/myproject/_vendor\nI'm running go test under /home/kamil/projects/myproject\nI'll try to push myproject to github later.\nDo you know of any other project that uses glide with working cover tool? \n. I was off for the last week and probably be for the next one, so I don't mind if you just leave it till I'll provide some better sample.\n. ",
    "jriquelme": "Hi, same issue here:\ngo tool cover -html=cover.out -o coverage.html\ncover: can't find \"downloader.go\": cannot find package \"_/home/jriquelme/r/yutubaas/\" in any of:\n    /home/jriquelme/local/usr/local/go/src/_/home/jriquelme/r/yutubaas (from $GOROOT)\n    /home/jriquelme/r/yutubaas/_vendor/src/_/home/jriquelme/r/yutubaas (from $GOPATH)\nmake: *** [cover] Error 1\nto make it work, I had to edit the cover.out file from:\nmode: set\n_/home/jriquelme/r/yutubaas/downloader.go:32.88,34.2 1 1\n_/home/jriquelme/r/yutubaas/downloader.go:36.67,40.16 3 0\n_/home/jriquelme/r/yutubaas/downloader.go:48.2,50.16 3 0\n_/home/jriquelme/r/yutubaas/downloader.go:56.2,56.36 1 0\n...\nto:\nmode: set\ngithub.com/jriquelme/yutubaas/downloader.go:32.88,34.2 1 1\ngithub.com/jriquelme/yutubaas/downloader.go:36.67,40.16 3 0\ngithub.com/jriquelme/yutubaas/downloader.go:48.2,50.16 3 0\ngithub.com/jriquelme/yutubaas/downloader.go:56.2,56.36 1 0\n...\nMy environment:\n- Project folder: /home/jriquelme/r/yutubaas\n- GOPATH: /home/jriquelme/r/yutubaas/_vendor\n- GOROOT: /home/jriquelme/local/usr/local/go\nThe project is in https://github.com/jriquelme/yutubaas\n. ",
    "kardianos": "A beta should be tagged soon. You may want to wait for that. In the\nmeantime you could think about migration strategies over the course of this\nexperiment and document it.\nOn Mon, Jun 29, 2015 at 8:50 AM Matt Butcher notifications@github.com\nwrote:\n\nYes, we've been following this development pretty closely, and I would\nvery much like to integrate it.\nI guess we should build the nightlies and see how much of an impact this\nwould have, but my reading of RSC's posts suggest that the integration\nshould be pretty easy.\nI'm very excited for the possibility that Glide would be able to focus on\nversion and dependency management, and let the GOPATH management problems\nfade into the distance.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/47#issuecomment-116738939.\n. \n",
    "szank": "Thanks for a quick reply, \nWe are planning to use /vendor dir ourselves, when it becomes part of the language in go 1.5 I suppose. \nI don't mind breaking changes, as long as it doesn't delete my files :D \n. Hi, \nSorry for the late reply, somehow i go the email notification about the replies  just now. \nI am all for the string tags, example : \n- package: github.com/ugorji/go\n    repo: https://github.com/ugorji/go\n    subpackages:\n        - codec\n    ref: 5abd4e96a45c386928ed2ca2a7ef63e2533e18ec\n    vcs: git\n    tags: unsafe, amd64, etc...\nThis is the easiest way of doing things, as \n1. Tag names supported by the packages can completely arbitrary\n2. It would be easy to pass the string to the build command line\nI did have a look at the current filtering documentation. I didn't read the code though. \nIt seems reasonable to leave filtering as is, this seems like a bit different functionality.\n. ",
    "edwardmp": "Any news on this? would be a great feature\n. ",
    "JanSichula": "@mattfarina Thank you for your prompt response and all the effort. I would like to give a new version a try but on the other hand I do yet feel ready to move to a preproduction version of Go 1.5.\nP. S. It looks like so many GoLang people are on the Linux or Mac boxes that they do not remember a minority of us on Windows. :-) But good to hear that in the case of Glide, it is being amended. :-) \n. ",
    "abourget": "ok, we can close this :)\n. Yes.. ok with me.\nLe ven. 11 sept. 2015 10:03, Matt Farina notifications@github.com a\n\u00e9crit :\n\n@abourget https://github.com/abourget This week @technosophos\nhttps://github.com/technosophos added basic gb-vendor support with the\ncommits 2821e2f\nhttps://github.com/Masterminds/glide/commit/2821e2f11086236ed6179ff80e5685925cb97e7b,\ne4c80b2\nhttps://github.com/Masterminds/glide/commit/e4c80b23225fd9ec9c7aa3b80a83b3d6c8df12c7,\nand b390c8b\nhttps://github.com/Masterminds/glide/commit/b390c8bf57f15096008d4d2903101bba7c2c3701\n.\nDoes this close this issue out?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/53#issuecomment-139555647.\n. I also think this is needed.. however the semantics don't stand out as being ultra clear to me.. especially require: never and require: any.. someone not having this proposal would have a hard time knowing exactly what to expect out of this.\n\nI'm trying to think of other ways to name this.. names stick.. so let's choose well.\n. canonical: true, singlecopy: true, topmost: true, resolve: canonical, once: true, no_copy: true, no_checkout: true, \nI think the never isn't related to the fact we're doing a single import, or multiple imports, but rather the fact that we're doing an import at all.. so something like no_import: true, ref_only: true, reference: true.. but that doesn't sit well with the goal of a glide.yaml which is to list deps.. not sure about this one\nimport_nested: true, import_nested: false ? if you want any as the default strategy, then I guess that wouldn't be a good solution.. we'd need a squash: true, or reduce: true or something ?\nsquash: true (with default false) and no_copy: true ?\n. flatten: true ?\n. Seems fixed, will reopen if needed.\n. ok, it seems to report the base package's git revision, when the vendored packages are not git checkouts.. but rather only a fixed copy (like a subtree) or just some code you put up in vendor/.. \nI guess it's natural that git returns that revision, but it's false in this case, as it's not a revision for the specified \"package\".\n. in this particular case.. I didn't even use subtree .. I copied the files that gb vendor had exported from git repos.. so they were simply .git-less checkouts..\nThere wouldn't be any metadata using subtrees.. metadata would be stored in glide.yaml..\n. yes, but I might want to pin some that are git checkouts, but leave those who aren't as unpinned..\nI got that after running a simple glide guess, but it seems this failed to detect when the packages are not versioned (perhaps it could set vcs: none in that case ?).\nSo basically, the flow with \"git archive\" dumps under vendor/ is not really functional, the moment no .git ,.hg, .svn, .bzr exist in there..\n. Again, this could be a separate project.. I might be interested in working it out.. althought I'm currently having issues with panics and wrongly pinned revs! :)\nthanks for the great tool.. I think the vendor experiment is the way to go too..\n. I like the simplicity of glide.. perhaps having a niche plugin to handle a specific flow, without sticking too much features and concepts in the main tool would be good.\nI just want people to be able to checkout my repo, and hit \"go build\" right away, without needing to do any sort of external commands (let alone install them before they need them).\nMost of my users will never touch the dependencies.. those who will will be aware of the glide-subtree or whatever subtree commands there are to manage them, back and forth to upstreams.\n. it's main, but the local package is frog .. not sure why. the cmd/thing is actually cmd/frog (a \"main\" in there) if that helps.\n. What I do is go list --json|less and check for the imported things from elsewhere.. and then I glide get .. I'd assume that's what glide guess does, doesn't it ?\n. hmm.. but why would it resolve package to main ? go list --json says:\n\"Dir\": \"/home/abourget/go/src/github.com/abourget/frog\",\n        \"ImportPath\": \"github.com/abourget/frog\",\n        \"Name\": \"frog\",\n        \"Target\": \"/home/abourget/go/pkg/linux_amd64/github.com/abourget/frog.a\",\n        \"Stale\": true,\n        \"Root\": \"/home/abourget/go\",\n...\n. Use this script, reproduces the problem:\n```\n!/bin/bash\nrm -rf $GOPATH/src/boo\nmkdir -p $GOPATH/src/boo/vendor/mama\nmkdir -p $GOPATH/src/boo/vendor/papa\necho \"package mama\nvar Mama = 1\" > $GOPATH/src/boo/vendor/mama/mama.go\necho \"package papa\nvar Papa = 1\" > $GOPATH/src/boo/vendor/papa/papa.go\necho \"package boo\nimport \\\"mama\\\"\nimport \\\"papa\\\"\nimport \\\"fmt\\\"\nfunc Start() {\n    fmt.Println(mama.Mama, papa.Papa)\n}\" > $GOPATH/src/boo/main.go\ncd $GOPATH/src/boo\nglide init\nglide guess\n```\n. oh yeah :) way better thanks a lot :)\n. Sorry, just pulled latest! Fixed already.\n. ",
    "interlock": ":+1: \n. Anyone working on this? I may fork and take a stab if no one is. We can settle the semantics of naming once a PR is submitted.\n. Thanks @technosophos \nYes, right now it flattens based on the root glide.yaml. I think to do it any other way would require traversing the tree, which is not complete until you load everything.\nI do wonder if it makes sense to emit a warning if the root ref is different from one lower in the tree? I could see some frustrating bugs coming out of not having any notification that a flatten was forcing an incompatible version.\nIt would be fairly easy to make flatten a Config level setting as well. That was actually my first iteration, but I factored it out in favour of being specific. \n. @mattfarina Any reason a strict comparison of Dependency.Ref would not do for now? \nOnce semver comes another update will needed to be made to compare versions with fuzz.\n. Does it make sense to add removing a sub vendor package if it see's it marked flatten and it exists? Otherwise, adding flatten after the first install or update would require it to be manually removed. \n. Sound good. I will work in a Ref check that triggers a warning.\nDoes it make sense to overload --delete in this case or create a new specific one --delete-flatten?\n. No problem @mattfarina \nI've got delete-flatten going\nWorking on the simple brute Ref compare to generate a warning next.\nI'll update the docs, push the updated PR and remove the WIP.\n. Ready for review @mattfarina @technosophos \n- Added a dumb Reference check that Warn()'s if they differ.\n- --delete-flattenis now a thing.\n- flatten on the root yaml makes all the things flat, if you are into that.\n. @hilyjiang Believe you may be actually compiling parts of the regular glide into the project the way you have it checked out.\nYou will want to follow steps that look something like this: \n1. $GOROOT/src/github.com/Masterminds/glide\n2. git add remote interlock https://github.com/interlock/glide.git\n3. git fetch interlock\n4. git checkout interlock/flatten -b flatten\n5. go install -a ./...\nIn the mean time, I'll functionally test that one more time to confirm it works :-)\nTested all the variations of flatten, they appear to work still. Let me know if that above instructions help you work around it.\n. @hilyjiang I believe in #55 it is mentioned that flatten can presently only flatten imports in the root yaml file, since we do not have a way to build a graph of the imports to flatten further down.\nYour second test confirms that is the case. If you need to prevent a library in a vendored package from being loaded many times, include it in the root yaml. This lets you control the Reference, which could help resolving any version issues that come up. In your second test you would import package a in your root to prevent the two copies.\nIdeally we could build a import graph and figure it out, but I think golang needs to allow rewriting pkg namespaces to make that useful/practical.\n. I lied, @hilyjiang, it was in this thread I mention only imports in the root will get flattened, the global flatten just implies each import has flatten. Perhaps a doc update would make that more clear? Suggestions?\n. At least for our usecase there at still duplicate pkg imports in our tree that we do not want to flatten. So having import level control is important.\nI am definitely open to changing how flatten works at the root glide level. A test with our code bases shows is breaks a more than it fixes, but your mileage may vary.\u00a0\nI do feel making that a param on update could cause people a lot of pain. Perhaps not much harm, since they can delete and redo. At least if you have to put it in be glide file you probably understand what it implies.\u00a0\n\u2014\nSent from Mailbox\nOn Tue, Sep 1, 2015 at 11:10 PM, Hily Jiang notifications@github.com\nwrote:\n\n@interlock Why not place all nested dependence directly under root's vendor/ directory?\nWill it cause building error or else?\nActually they are just vendors for the root package.\nI don't think we should keep the nested structure for vendor packages.\nFor practice, I think nobody want to write glide.yaml with long import list to flatten, right?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Masterminds/glide/pull/70#issuecomment-136946867\n. Curious what @mattfarina and @technosophos have to say. \n\nFeels like flatten is scope creeping on us :-) \n. @mattfarina --delete-flatten actually deletes packages that are not flattened but should now be flattened. It doesn't actually flatten (or delete) anything unless the glide.yaml indicates it should. \nIts use case would be you were not flattening any pkg's, updated your glide and wanted to remove any packages that should now be flat. This fixes the case where you had a pkg conflict and want to pull everyone down to the root vendor version.\n@technosophos Agreed with the flatten to root vendors being a difficult one to solve. Looking at NPM, we would have to do fetch and cache everything. Process the glide's and implied glides. Resolving the graph and flattening what we could and could not. It is the most active part of their code base and quite complex. Ultimately, NPM just tries to guess what works globally with semver and moves on. At this point, glide is basic enough that we use a human to do it. I think that is a fair compromise for now.\nI'll confirm that pkg level flatten overrides global flatten as mentioned in #73\n. Last push adds imported pkg flatten overriding global flatten. Updated some logic around the Reference differing warning as well.\nI think this is good to merge at this point.\n. Many thanks from myself and the team at Picatic for this. I am available for bugs/support related to this issue.\n. This is discussed in #55 and addressed in the PR #70\n. Not sure how I feel about a global actual flatten, but I suppose we could do it. Do we want to change the package Config.Flatten to literally install everything in the first level ./vendor ? A matching --flatten flag could do that as well\nIf you forgot to run update --flatten subsequently it would potentially really confuse things. Removing imports at that point would literally require loading all imports, resolving the graph and rebuilding. Not something I think glide is setup to do at this point.\nI think I have talked myself in favour of being specific again. In the issue above, import the pkg and flatten it. Problem solve, and you know exactly which library you did it to.\n. We had some terrible problems with a global flatten in our tests cases, which is why I suggested we not do that. The problem predominately comes up that too different packages use the same package at different versions. A global flatten to the projects root vendor makes that a difficult problem to solve and resolve.\nOpen to ideas on how to handle that. The way other package managers deal with it is by loading a dependency graph and resolving as required. I little out of scope for glide atm, but perhaps possible in the future?\n. Could work, I think an option to toggle it on/off (not sure what a sane default should be) could make it work for simple projects. I would have to play with out dep graph, but I think it would break with that assumption. Curious to know if anyone else has projects with deep and large breadth deps... perhaps our projects are edge cases? \n. ",
    "saulshanabrook": "Ah I see, I needed to add the parent repo like this:\n- package: golang.org/x/net\n    subpackages:\n      - context\nthen it worked.\nMaybe it would be a good idea to make this a bit easier, or at least more obvious. It makes sense once I think about it, but I am just used to being able to go get that package so it wasn't obvious why this failed at first.\n. Sounds good. Thank you for the wonderful package :)\n. @mattfarina :+1: \n. ",
    "huygn": "Hi, I am using glide v0.11.0, when using glide init with this main.go: \n``` go\npackage main\nimport \"golang.org/x/net/context\"\nfunc main() {\n    context.Background()\n}\n```\nThe generated glide.yaml (this will lead to Cannot detect VCS error):\nyaml\npackage: .\nimport:\n- package: golang.org/x/net/context\nWhich results in error getting golang.org/x/net/context:\nconsole\n[INFO]  --> Fetching updates for golang.org/x/net/context.\n[WARN]  Unable to checkout golang.org/x/net/context\n[ERROR] Update failed for golang.org/x/net/context: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nExpected output of glide.yaml:\nyaml\n- package: golang.org/x/net\n  subpackages:\n  - context\n. I need to get all dependencies for a new packages because my CI is failing, but --all-dependencies flag caused errors:\n$ glide --version\nglide version 0.12.1\n$ glide get github.com/solher/arangolite --all-dependencies                                         15:46:21\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/solher/arangolite\n[INFO]  --> Gathering release information for github.com/solher/arangolite\n[INFO]  The package github.com/solher/arangolite appears to have Semantic Version releases (http://semver.org).\n[INFO]  The latest release is v1.3.0. You are currently not using a release. Would you like\n[INFO]  to use this release? Yes (Y) or No (N)\nn\n[INFO]  --> Adding github.com/solher/arangolite to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/solher/arangolite.\n[INFO]  --> Fetching updates for google.golang.org/grpc.\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2.\n[INFO]  --> Fetching updates for golang.org/x/net.\n[INFO]  --> Fetching updates for github.com/golang/protobuf.\n[INFO]  --> Fetching updates for github.com/go-kit/kit.\n[INFO]  Resolving imports\n[ERROR] Could not find /Users/huygiang/src/gitlab.com/my/pj/vendor/github.com/go-kit/kit/endpoint: open /Users/huygiang/.glide/cache/src/https--Users-huygiang-src-gitlab.com-my-pj-vendor-github.com-go-kit-kit-endpoint: no such file or directory\n[ERROR] Dependency /Users/huygiang/src/gitlab.com/my/pj/vendor/github.com/go-kit/kit/endpoint failed to resolve: open /Users/huygiang/.glide/cache/src/https--Users-huygiang-src-gitlab.com-my-pj-vendor-github.com-go-kit-kit-endpoint: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/huygiang/.glide/cache/src/https--Users-huygiang-src-gitlab.com-my-pj-vendor-github.com-go-kit-kit-endpoint: no such file or directory\n/Users/huygiang/src/gitlab.com/my/pj/vendor/github.com/go-kit/kit/endpoint is present and I have no idea why glide said such things :/\n. @sdboyer not at all, also my/pj is my private repo.\n. ",
    "xxxtonixxx": "I would love to see this feature in glide \ud83d\udc4d . ",
    "ghost": "its says its is getting them, but just does not. \nYes i have GO15VENDOREXPERIMENT=\"1\"\ni am on go 1.5.\nMy code is private, so i cant make it public.\nBut a simple bitbucket repo, where the code has a reference to a github repo should show the problem.\n. here is the glide file\npackage: main\nimport:\n- package: github.com/pilu/traffic\n  repo:    https://github.com/pilu/traffic\n  vcs:     git\n- package: github.com/pilu/config\n  repo:    https://github.com/pilu/config\n  vcs:     git\n- package: github.com/Unknwon/bra\n  repo:    https://github.com/Unknwon/bra\n  vcs:     git\n. Mhhh\nI looked at your test bitbucket repo.\nIt does not show any vendored referecnes to github projects.\nMine does have vendored code that points to github.\nMaybe this is worth trying ?\n. I'm seeing similar behavior. Consider the glide.yaml file located on my feature branch of the goa project. One of my declared dependencies is bitbucket.org/pkg/inflect. (Note that there's no ref, vcs or any other information; I'm using glide in \"needlessly vendored\" mode for this particular package, simply because I like having an explicit manifest of all my dependencies.)\nWhen I glide install, the result is an empty Mercurial repository at that location under vendor:\ntony@slingshot:~/go/src/github.com/tony-spataro-rs/goa (glide)$  ls -la vendor/bitbucket.org/pkg/inflect/\ntotal 0\ndrwxr-xr-x   3 tony  staff  102 Oct 19 19:30 .\ndrwxr-xr-x   3 tony  staff  102 Oct 19 19:30 ..\ndrwxr-xr-x  11 tony  staff  374 Oct 19 19:30 .hg\nIf I glide install a second time, that seems to fix the issue and I end up with the expected contents in my HG clone of that repository.\n. @mattfarina confirming that the fix is good. Thanks much; we owe you one (more)! :beers:\n. yes exactly. i am using go-plus in Atom, and yes i have the Format Tool set to use goimports. Default setup basically.\nfalse, I do have the Vendor environment variable set. See below:\ngedw99-MacBook-Pro:berlininfusions-web apple$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/apple/Workspace/go/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/apple/Workspace/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nI always launch Atom from the command line, using \"atom .\" \nSo not sure why its messing with my imports.\nWhen i manually edit the import to below, go build is happy, so its an atom problem.\n```\nimport (\n    \"os\"\n\"gopkg.in/alecthomas/kingpin.v2\"\n\n)\n```\nAny ideas ?\n. repo is here:\nhttps://github.com/gedw99/berlininfusions-web\n. Also i noticed when i originally did the:\nglide get gopkg.in/alecthomas/kingpin.v2\n, i also had to grab its needed dependencies with:\ngithub.com/alecthomas/units\ngithub.com/alecthomas/template\nGlide did not get the dependencies itself. Wondering if there is a flag i should have set ? No biggy though\n. I want to vendor them, so u can get the exact code back in case the github repo disappears.\nHence why I did not add a .gitignore.\nIn your last paragraph you explain how to do this. But I don't see how its different from what I am doing anyway.\nCould you try again\n. OK makes sense. Will do it. Thanks\n. Its confusing how it works now.\nIf it always uses the Vendor path then its clear.\nEven if i have to try to build stuff in vendor to find it has dependencies that i need to add to the glide file, at least its clear, and the glide guess command helps.\nthis is essentially forcing glide to always put packages that depend on other packages as a flat structure in the vendor folder, rather then a tree.\nIt might be best to allow tree versus flat to be decided in the glide config too ? I am bringing this up because its hard to get this right automatically for everyone.\n. also this might help.\nWhen i do glide list, it says that github.com/jinzhu/configor  is in the gopath and NOT in the vendor.\n??\ngedw99-MacBook-Pro:server apple$ glide list\nbitbucket.org/gedw99/berlininfusions/server/config (Location: gopath)\nbitbucket.org/gedw99/berlininfusions/server/vendor/github.com/jinzhu/configor (Location: gopath)\ngithub.com/gorilla/context (Location: vendored)\ngithub.com/gorilla/mux (Location: vendored)\ngithub.com/jtolds/gls (Location: gopath)\ngithub.com/smartystreets/assertions (Location: gopath)\ngithub.com/smartystreets/assertions/internal/oglematchers (Location: gopath)\ngithub.com/smartystreets/goconvey/convey (Location: vendored)\ngithub.com/smartystreets/goconvey/convey/gotest (Location: vendored)\ngithub.com/smartystreets/goconvey/convey/reporting (Location: vendored)\ngopkg.in/yaml.v2 (Location: gopath)\n. i changed over to godeps. \ni tried glide for about 2 weeks and was often getting hit with problems.\nWith godeps, i did what it said and in 10 minutes had everything working how it should. I turned off the Vendoring flag in the paths also as godeps wants. It found all my dependencies, rewrote the paths, made the json file, and now in bitbucket i have everything to be able to reliably do a build form nothing on the exact same dependencies.\ni am not writing this to be critical, but to explain, in the hope that it helps.\ni feel like glide is really nice but, at least for me, its still too green and unstable for now for day to day needs.\n. yes i did, but did not help.  Seriously might as well just have a seperate go path for each project i work.  Brute force encapsulation.. \n. Today I am seeing the same error on a different repo. \n[DEBUG] Attempting to find current branch for https://github.com/kr/pretty\n[DEBUG] Unable to find current branch for https://github.com/kr/pretty, error: chdir /src/src/voyager/vendor/github.com/kr/pretty: no such file or directory\n\u001b[0;33m[WARN] \u001b[mUnable to checkout github.com/kr/pretty\n\u001b[0;33m[WARN] \u001b[mUpdate failed for github.com/kr/pretty: fatal: could not create leading directories of '/src/src/voyager/vendor/github.com/kr/pretty': File exists\n: exit status 128\n..\n..\n..\n::build\nvendor/github.com/spf13/viper/viper.go:34:2: cannot find package \"github.com/kr/pretty\" in any of:\n    /src/src/voyager/vendor/github.com/kr/pretty (vendor tree)\n    /usr/local/go/src/github.com/kr/pretty (from $GOROOT)\n    /src/src/github.com/kr/pretty (from $GOPATH)\n    /src/src/voyager/vendor/src/github.com/kr/pretty\n    /src/src/voyager/vendor/stash.corp.xxx.com/scm/pla/go-log/vendor/src/github.com/kr/pretty\nmake: *** [build] Error 1\n. @mattfarina \nI am using glide version 0.8.3. I am downloading the tar from http://github.com/Masterminds/glide/releases/download/0.8.3/glide-0.8.3-linux-amd64.tar.gz and using the binary\n/src/src/voyager/vendor directory does not exist before running glide install\n. Same issue here, added more info on associated ticket\n. I would like to add a use case here. I have to use a VSTS git repo and I would like to use glide. The issue is that those repo don't use the .git extension (and in addition the url has a space in it...): https://mycompany.visualstudio.com/a%20name%20with%20space/_git/mypackage\nToday I use glide like that:\nimport:\n- package: mypackage\n  subpackages:\n  - mysubpackage\n  repo: https://mycompany.visualstudio.com/a%20name%20with%20space/_git/mypackage\n  vcs: git\nignore:\n  - mypackage/mysubpackage\nit does not spit out any error and does seems to install & update the dependency but its far from ideal. I don't think I should have to manually ignore all the subpackage in my package.\n. @sdboyer yes the pattern seems to be [acount].visualstudio.com/[project]/_git/[repo] so adding a pattern would be great, but I am not sure it would solve my use case as go did not seems to access import with space in it and using %20 neither so even if glide where to get the dependency correctly, I could not use them without having some way to alias it.\n. Oh yes sorry, looking at my library repo, it is indeed a strange state with a tag outside any branch. I have no idea how I was able to push a tag without pushing the branch with it... You can close the issue as its not something which should happen in practice.\n. Indeed, sorry for the noise then. And Thanks for the information. (they did not put anything in the doc or github page through...)\n. Also, subgroups:\ngitlab.com/group/subgroup/../repo. Might be related to #893. However go get github.com/jessevdk/go-flags works well.. Closing this, as it worked fine with another project. ",
    "piotrkowalczuk": "ad 1. Ah sory, its just a part of bigger structure. Entire .yaml file was generated by glide.\nad 2. Im using glide by go get and its dev version. \nI have just made go get -u, and bitbucket works now correctly, but google.golang.org and golang.org stays the same.\n. I have just made \nrm -rf ~/Projects/go/src/github.com/Masterminds/\nrm -rf ~/Projects/go/bin/glide\ngo get -u github.com/Masterminds/glide\ni have got:\n[WARN] Unable to checkout golang.org/x/crypto\n[WARN] Update failed for golang.org/x/crypto: exit status 128\n[INFO] Fetching updates for golang.org/x/net.\n[WARN] Unable to checkout golang.org/x/net\n[WARN] Update failed for golang.org/x/net: exit status 128\n[INFO] Fetching updates for golang.org/x/oauth2.\n[WARN] Unable to checkout golang.org/x/oauth2\n[WARN] Update failed for golang.org/x/oauth2: exit status 128\n[INFO] Fetching updates for google.golang.org/api/googleapi.\n[WARN] Unable to checkout google.golang.org/api/googleapi\n[WARN] Update failed for google.golang.org/api/googleapi: exit status 128\n[INFO] Fetching updates for google.golang.org/grpc.\n[WARN] Unable to checkout google.golang.org/grpc\n[WARN] Update failed for google.golang.org/grpc: exit status 128\n[INFO] Fetching updates for google.golang.org/cloud.\n[WARN] Unable to checkout google.golang.org/cloud\n[WARN] Update failed for google.golang.org/cloud: exit status 128\n. Situation looks more complex than i thought.  Situation under the project that I'm trying to fix is the same. \nbash\nrm -rf ~/Projects/go/src/github.com/Masterminds/\nrm -rf ~/Projects/go/bin/glide\ngo get -u github.com/Masterminds/glide\nScenario 1\nbash\ncd ~/Projects/go/src\nmkdir test\ncd test\nglide init\nglide get golang.org/x/oauth2\nyaml\npackage: main\nimport:\n  - package: golang.org/x/crypto\n    repo:    https://golang.org/x/crypto\n    vcs:     git\nbash\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /Users/xxx/Projects/go/src/test/vendor.\n[INFO] Looking in /Users/xxx/Projects/go/src/test/vendor/golang.org/x/oauth2 for a glide.yaml file.\n[INFO] Package golang.org/x/oauth2 manages its own dependencies.\nat this stage vendor directory looks as it should. So now im trying to make some mess\nbash\nglide install\n[INFO] Fetching updates for golang.org/x/oauth2.\n[WARN] Update failed for golang.org/x/oauth2: The Remote does not match the VCS endpoint\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /Users/xxx/Projects/go/src/test/vendor.\n[INFO] Looking in /Users/xxx/Projects/go/src/test/vendor/golang.org/x/oauth2 for a glide.yaml file.\n[INFO] Package golang.org/x/oauth2 manages its own dependencies.\nmore mess\nbash\nrm -rf vendor/\nglide install\n[INFO] Fetching updates for golang.org/x/oauth2.\n[WARN] Unable to checkout golang.org/x/oauth2\n[WARN] Update failed for golang.org/x/oauth2: exit status 128\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /Users/xxx/Projects/go/src/test/vendor.\n[INFO] Looking in /Users/xxx/Projects/go/src/test/vendor/golang.org/x/oauth2 for a glide.yaml file.\n[INFO] Package golang.org/x/oauth2 manages its own dependencies.\nok, I'm already confused. But lets try something different\nScenario 2\nbash\nmkdir ../test2\ncd ../test2\nnano glide.yaml\nyaml\npackage: main\nimport:\n  - package: golang.org/x/oauth2\nbash\n[INFO] Fetching updates for golang.org/x/oauth2.\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /Users/xxx/Projects/go/src/test2/vendor.\n[INFO] Looking in /Users/xxx/Projects/go/src/test2/vendor/golang.org/x/oauth2 for a glide.yaml file.\n[INFO] Package golang.org/x/oauth2 manages its own dependencies.\nonce again same trick\nbash\nrm -rf vendor/\nglide install\n[INFO] Fetching updates for golang.org/x/oauth2.\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /Users/xxx/Projects/go/src/test2/vendor.\n[INFO] Looking in /Users/xxx/Projects/go/src/test2/vendor/golang.org/x/oauth2 for a glide.yaml file.\n[INFO] Package golang.org/x/oauth2 manages its own dependencies.\nnow it works.\nWe can notice that issue appears only for complex .yaml file (auto generated). But I cant explain why in Scenario 1 glide behaves so strange.\n. @mattfarina works! Thanks :)\n. There is still some problem. Package google.golang.org/api/googleapi fetched by glide has wrong content. \nInstead of having https://github.com/google/google-api-go-client/tree/master/googleapi it has https://github.com/google/google-api-go-client .\nIn other words, it contains itself.\n. Thanks for fast response. Im not allowed to provide you .yaml file.\n. ",
    "jayunit100": "im seeing this, is this issue closed?\n[ERROR] Unable to export dependencies to vendor directory: remove /Development/golang/src/github.com/jayunit100/kube-scheduler-experimental/vendor/github.com/jmespath/go-jmespath/fuzz/corpus: directory not empty\nMy issue could be just a bug in jmespath though, since https://github.com/jmespath/go-jmespath/pull/19 was meant to fix vendoring (ignore testdata dirs)\n. ",
    "Taik": "Thanks guys for the quick fix; It seems to be working now. I'll play around with this for a few days and see if anything else comes up.\n. Same issue here.. Quick workaround to fix CI builds:\nbash\ngo get -u github.com/Masterminds/glide && \ncd $$GOPATH/src/github.com/Masterminds/glide && git checkout v0.12.3 && \ngo install github.com/Masterminds/glide. ",
    "ryanwalls": "My output:\nslkc:solver-svc ryan$ brew info glide\nglide: stable 0.2.0\nhttps://github.com/Masterminds/glide\nNot installed\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/glide.rb\n==> Dependencies\nBuild: go \u2718\nMaybe I need to update brew?  Or clear a cache?\n. Yep, I ran a brew update and it fixed the issue.  Sorry for the user error.\n. @sdboyer Yes, it is for me.  glide up does not update the commit hash of my private repo in my glide.lock file.\n. ",
    "hilyjiang": "Good job, @interlock \nI just check our your fork:\ngit clone https://github.com/interlock/glide.git -b flatten\nAnd I have set flatten: true in the root yaml config, but glide up didn't import all packages in vendor/, my config like below:\npackage: main\nflatten: true\nimport:\n....\nIs there anything wrong with my config?\n. @interlock I have remove all old work copy and follow your installation.\nYou can see that glide already have flatten option.\n```\nglide up --help | grep flatten\n    If the '--delete-flatten' flag is present, Glide will remove any depenedencies\n    markred flatten within dependencies.\n\n--delete-flatten             Delete flattened vendor packages.\n```\nBut it still not work as my expect.\nThis is a minimal test project:\n- c depends on a and b\n- b depends on a\n```\n[root@localhost ~]# cd /root/godev/src/c/\n[root@localhost c]# cat glide.yaml \npackage: c\nflatten: true\nimport:\n  - package: a\n    repo: /git/a.git\n    vcs: git\n  - package: b\n    repo: /git/b.git\n    vcs: git\n[root@localhost c]# glide up\n[INFO] Fetching updates for a.\n[INFO] Fetching updates for b.\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /root/godev/src/c/vendor.\n[INFO] Looking in /root/godev/src/c/vendor/a for a glide.yaml file.\n[INFO] Package a manages its own dependencies.\n[INFO] Looking in /root/godev/src/c/vendor/b for a glide.yaml file.\n[INFO] Doing a glide in /root/godev/src/c/vendor/b\n[INFO] Skipping importing a due to flatten being set in root config glide.yaml\n[INFO] Inspecting /root/godev/src/c/vendor/b/vendor.\n[root@localhost c]# tree \n.\n\u251c\u2500\u2500 glide.yaml\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 vendor\n    \u251c\u2500\u2500 a\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.go\n    \u2514\u2500\u2500 b\n        \u251c\u2500\u2500 b.go\n        \u2514\u2500\u2500 glide.yaml\n3 directories, 5 files\n```\nIt works!\nThen let's go ahead:\n- d depends on c\n- c depends on a and b\n- b depends on a\n```\n[root@localhost c]# cd ../d/\n[root@localhost d]# cat glide.yaml \npackage: d\nflatten: true\nimport:\n  - package: c\n    repo: /git/c.git\n    vcs: git\n[root@localhost d]# glide  up\n[INFO] Fetching updates for c.\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /root/godev/src/d/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/c for a glide.yaml file.\n[INFO] Doing a glide in /root/godev/src/d/vendor/c\n[INFO] Importing a to project /root/godev/src/d/vendor/c\n[INFO] Importing b to project /root/godev/src/d/vendor/c\n[INFO] Inspecting /root/godev/src/d/vendor/c/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/c/vendor/a for a glide.yaml file.\n[INFO] Package a manages its own dependencies.\n[INFO] Looking in /root/godev/src/d/vendor/c/vendor/b for a glide.yaml file.\n[INFO] Doing a glide in /root/godev/src/d/vendor/c/vendor/b\n[INFO] Importing a to project /root/godev/src/d/vendor/c/vendor/b\n[INFO] Inspecting /root/godev/src/d/vendor/c/vendor/b/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/c/vendor/b/vendor/a for a glide.yaml file.\n[INFO] Package a manages its own dependencies.\n[root@localhost d]# tree \n.\n\u251c\u2500\u2500 glide.yaml\n\u2514\u2500\u2500 vendor\n    \u2514\u2500\u2500 c\n        \u251c\u2500\u2500 c.go\n        \u251c\u2500\u2500 glide.yaml\n        \u2514\u2500\u2500 vendor\n            \u251c\u2500\u2500 a\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.go\n            \u2514\u2500\u2500 b\n                \u251c\u2500\u2500 b.go\n                \u251c\u2500\u2500 glide.yaml\n                \u2514\u2500\u2500 vendor\n                    \u2514\u2500\u2500 a\n                        \u2514\u2500\u2500 a.go\n7 directories, 7 files\n```\nThere are still two copies of a in the vendor directory of c.\nIt seems that all depended packages should be config in root yaml.\nRelated code: https://github.com/interlock/glide/blob/flatten/cmd/recursive_glide.go#L98\nLast test:\n```\n[root@localhost d]# rm -rf vendor/\n[root@localhost d]# cat glide.yaml \npackage: d\nflatten: true\nimport:\n  - package: c\n    repo: /git/c.git\n    vcs: git\n  - package: b\n    repo: /git/b.git\n    vcs: git\n  - package: a\n    repo: /git/a.git\n    vcs: git\n[root@localhost d]# glide up\n[INFO] Fetching updates for c.\n[INFO] Fetching updates for b.\n[INFO] Fetching updates for a.\n[INFO] Checking dependencies for updates. Godeps: false, GPM: false\n[INFO] Inspecting /root/godev/src/d/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/c for a glide.yaml file.\n[INFO] Doing a glide in /root/godev/src/d/vendor/c\n[INFO] Skipping importing a due to flatten being set in root config glide.yaml\n[INFO] Skipping importing b due to flatten being set in root config glide.yaml\n[INFO] Inspecting /root/godev/src/d/vendor/c/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/b for a glide.yaml file.\n[INFO] Doing a glide in /root/godev/src/d/vendor/b\n[INFO] Skipping importing a due to flatten being set in root config glide.yaml\n[INFO] Inspecting /root/godev/src/d/vendor/b/vendor.\n[INFO] Looking in /root/godev/src/d/vendor/a for a glide.yaml file.\n[INFO] Package a manages its own dependencies.\n[root@localhost d]# tree \n.\n\u251c\u2500\u2500 glide.yaml\n\u2514\u2500\u2500 vendor\n    \u251c\u2500\u2500 a\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.go\n    \u251c\u2500\u2500 b\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 b.go\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 glide.yaml\n    \u2514\u2500\u2500 c\n        \u251c\u2500\u2500 c.go\n        \u2514\u2500\u2500 glide.yaml\n4 directories, 6 files\n``\n. @interlock Why not place all nested dependence directly under root'svendor/` directory?\nWill it cause building error or else?\nActually they are just vendors for the root package.\nI don't think we should keep the nested structure for vendor packages.\nFor practice, I think nobody want to write glide.yaml with long import list to flatten, right?\n. @interlock I agree with you that put it in config file would be better.\nAnd for some case, import level control is really required (e.g. for different refs).\nIn my example above, although c marked as flatten, but it not actually flatten in nested glide up.\nOnly the root flatten take affected:\n[root@localhost d]# cat ../c/glide.yaml \npackage: c\nflatten: true\nimport:\n  - package: a\n    repo: /git/a.git\n    vcs: git\n  - package: b\n    repo: /git/b.git\n    vcs: git\n[root@localhost d]# tree \n.\n\u251c\u2500\u2500 d.go\n\u251c\u2500\u2500 glide.yaml\n\u2514\u2500\u2500 vendor\n    \u2514\u2500\u2500 c\n        \u251c\u2500\u2500 c.go\n        \u251c\u2500\u2500 glide.yaml\n        \u2514\u2500\u2500 vendor\n            \u251c\u2500\u2500 a\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 a.go\n            \u2514\u2500\u2500 b\n                \u251c\u2500\u2500 b.go\n                \u251c\u2500\u2500 glide.yaml\n                \u2514\u2500\u2500 vendor\n                    \u2514\u2500\u2500 a\n                        \u2514\u2500\u2500 a.go\nglide up individually in c not act the same to the recursive glide up.\nThis will cause a build error:\n```\n[root@localhost d]# go build\nd/vendor/c\nvendor/c/c.go:12: cannot use b.Test() (type \"d/vendor/c/vendor/b/vendor/a\".T) as type \"d/vendor/c/vendor/a\".T in assignment\n```\nIs it better implementation the config value with flatten to root, self and off?\n- root: flatten all vendor packages marked with flatten into root vendor directory\n- self: flatten vendor packages into current package's vendor directory\n- off: disable flatten\n. Maybe glide update should have a --flat option, then the recursive depended package will be placed directly under vendor/.\n. ",
    "erbridge": "The global flatten property doesn't seem to work.\n. Seems to work.\n. ",
    "janeczku": "@mattfarina \n\nWe discover the imports using the go/build package. This package knows the environment including the $GOROOT which it picks up from the environment. If your $GOROOT isn't set there will be errors.\n\nAgain, with the Go package installer $GOROOT does not need to be set. Here is why:\nFrom http://golang.org/pkg/runtime/\nfunc GOROOT() string\nGOROOT returns the root of the Go tree. It uses the GOROOT environment variable,\nif set, or else the root used during the Go build.\nThat indicates that the Go runtime falls back to the root path were it was build in when the env var is not set. The packages installer installs Go in that same path. Thats why GOROOT env var is not needed.\nBy the way, without GOROOT env var both the go/build and runtime packages returns the correct root path on my system:\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"go/build\"\n    \"runtime\"\n)\nvar buildContext = build.Default\nfunc main() {\n    fmt.Println(\"GOROOT runtime: \", runtime.GOROOT())\n    fmt.Println(\"GOROOT go/build: \", buildContext.GOROOT)\n}\n```\nResult:\nGOROOT runtime:  /usr/local/go\nGOROOT go/build:  /usr/local/go\n. @technosophos \nHaving glide guess --get would definitely be useful to me - especially when converting an existing project to glide. \nAs a side note: If we trust glide guess enough to fetch packages into vendor dir, i think it would only make sense to also make glide guess create/modify the glide.yaml if it is run without the --get switch.\nI will test drive the new commands later this day.\n. @mattfarina your $GOROOT env var was unset when you tested this?\n. @mattfarina\nsh\nOops! cannot find package \"fmt\" in any of:\n    /usr/local/Cellar/go/1.5/libexec/src/fmt (from $GOROOT)\n    /Users/Janek/go/src/fmt (from $GOPATH)\nI don't even have brew installed on my Mac. Where is that /usr/local/Cellar coming from? Definitely not  from $GOROOT since that env var is unset.\n. Yeah i just figured out that the Glide binary from your releases was compiled on brew and that were the GOROOT path was coming from.\n. For future reference:\nhttp://golang.org/pkg/go/build/\n\nDefault is the default Context for builds. It uses the GOARCH, GOOS, GOROOT, and GOPATH environment variables if set, or else the compiled code's GOARCH, GOOS, and GOROOT.\n. Great feedback! I might have done this as utility function in the first place, but i got distracted by what Cookoo had to offer :) I will refactor and then update this patch probably tomorrow.\n. > Instead of getting the $GOROOT and other environment variables from the runtime package it could use the go env [VAR] command to get them (e.g., go env GOROOT). Or, if it's faster just parse the output of go env (without the variable name) to get the needed information.\n\nIt already does that :) \n. Thanks back for this awesome tool! @technosophos @mattfarina \n. /cc @technosophos \n. @mattfarina this is fixed (checked with 0.6.0)\n. ",
    "itsjamie": "If there is no version information then I would say checkout the \"sane\" default.\nIf there is a ref, and the checkout fails, this should definitely toss an error and not silently checkout the default.\n. @mattfarina I wasn't sure what the current behaviour was, thanks for clearer that up. \nThanks by the way, it was super easy to convert from Godeps to Glide, I was very pleased, you also solved the issue we worked around with git config settings for HTTP based go get with the repo setting. Loving it so far, thanks!\n. If the intent of the novendor command is to add support for the usecase of go test ./... but exclude vendor packages then I think this would be nice.\nThe alternative currently is to do... go list ./... | grep -v vendor/. Perhaps thinking about it that way would be an easier way of implementing this command rather than looking for go files?\n. It's removing the folders that don't have any Go in them, however they don't follow a format that go test understands.\n. glide nv\ncontrollers interfaces middleware models schedule server services .\n. This solves what I was running into. Thanks!\n@technosophos Out of curiosity, what special cases testdata? A cursory google search revealed a couple of stdlib packages moving their fixtures to that folder, but no reference as to why.\n. Rather than allowing any mode, I would limit it to either \"pinned\" or not.\nI think this is a case where less is actually more. If I could think of another use-case where I would want to have multiple pinned dependencies for my codebase based on the environment then I would get this.. but whatever your environments look like for your product, you should really only ever have two states ongoing at any point in your codebase.\nSomething bound for prod, which might hit many environments on it's way to prod. Such as... integration -> qa -> staging -> prod and then the current dev build. Anything bound for prod in our use-case would be pinned the whole way, and the dependencies version shouldn't change based on what environment they are in (though their configuration might). \nDoes that make sense?\n. @mattfarina I understand the want to give more options.\nI just ask that you think about the case of recursive glide up's. If the default for pinned dependencies isn't tool defined and is instead driven by the -m flag, I would think there would have to be an interactive mode to list each possible glide-mode.yaml file when processing the sub-dependency.\n. Right. \nSo currently, the way that I implemented this was having two glide.yaml files. One called the default glide.yaml. This is the pinned dependencies, that will be automatically used. Second, I have one called glide-update.yaml, which has the standard refs that I want to reference (generally branches).\nUpdating the dependencies is interesting...\nglide -y glide-update.yaml up && glide -y glide-update.yaml pin > glide.yaml\nI just hope to make it slightly easier for the end user, otherwise I'll probably end up throwing that command inside a makefile.\n. The only reason I brought it up, is that as a user of third party packages, I have to rely on them providing glide.yaml as their pinned dependencies currently.\nBy making the pin filename tool specific, when doing updates tool can look for that pinned file, and if it doesn't exist it could even raise a warning saying that the build will not be reproducible.\nThis would be the ideal :+1:.\n. I'll volunteer to send a PR that does this if you want.\nglide pin - creates a glide-pinned.yaml\nglide install - utilizes glide-pinned.yaml instead of the default glide.yaml if present\n. I think that all makes sense and sounds like it would work!\nMy only two cents would be that the commands support the standard package argument. So, typing just glide unpin wouldn't do anything you would need to glide unpin <pkg>, glide pin <pkg>. To do the whole project, it would be glide pin ./... from the root. Similarily, if glide repin was added, it would also require a package argument.\nThis would be to keep the standard convention of the Go toolchain, which would be important for adoption.\n. Sorry that I haven't followed up with a PR was out. I'll take a look at starting an implementation this coming week\n. ",
    "derekdowling": "I'm running 0.8.0 and just had this happen to me after running: glide get github.com/my/dependency\n. ",
    "nii236": "I installed release 0.6.0 and it is still not working ideally. glide rebuild looks in the ./vendor folder now but places the compiled files in the wrong location.\nI run glide rebuild\nIt puts the .a files in:\n$GOPATH/pkg/darwin_amd64/github.com/nii236/project1/vendor/github.com/UserName/Repo\nAs opposed to\n$GOPATH/pkg/darwin_amd64/github.com/UserName/Repo\nThis means my import statements in my code needs to look like this:\nimport github.com/nii236/project1/vendor/github.com/UserName/Repo\nThe above is the ideal path, and is preferred as that means Gocode autocompletion will work in the editor.\n. @mattfarina Actually go build and go run commands work fine. The issue here is compatibility with Gocode's autocomplete. Without autocomplete it makes development much more difficult.\nRunning glide rebuild results in the .a files appearing in \n$GOPATH/pkg/darwin_amd64/github.com/nii236/project1/vendor/github.com/UserName/Repo\nI want them to appear in \n$GOPATH/pkg/darwin_amd64/github.com/UserName/Repo\nThe .a files do not appear in the vendor folder as only the source code is there. Even if they were there, that would not be suitable for my purposes as gocode will not support it.\nI participated in a discussion about it here, where the maintainer of gocode does not want to implement the GO15VENDOREXPERIMENT feature. In that case, I wish for glide to be as compatible as possible with tools that do not support GO15VENDOREXPERIMENT. \nI'd like glide rebuild to build everything in /vendor and then place all the .a files in \n$GOPATH/pkg/darwin_amd64/github.com/UserName/Repo\nThat way all legacy tools will still work!\nTLDR; Basically all go tools work. I can build, run, install. The exception is gocode, which does not support vendoring and bases its autocomplete on all .a files in the pkg folder.\n. I noticed your comment in the referenced conversation. Should this issue be reopened so that Glide plays well with Gocode, or should I wait for Go 1.6 to come out (6 months?)?\n. ",
    "stephendolan": "For any who find this thread in the future trying to figure out how to get glide rebuild to work, go 1.6 and onwards supports the vendor directory.\nInstead of running glide rebuild:\ngo install github.com/[user]/[package]  will attempt to install the package from the vendor directory if your project has one, and should put the .a files in your $GOPATH/pkg/[env]/github.com/[user]/[package] directory.\n. ",
    "Unknwon": "Has this been implemented?\nIt would be nice to support glide [subcommand] -tags=\"xxx\" for all commands, that could save a lot of dirty work by hand...\n. No one is caring this...?\n. @mattfarina thanks for the info! Hope this can be implemented in spring :trollface:\n. Any updates? Glide feels broken without this support, can't vendor dependencies with build tags.\n. @kron4eg \nThanks, yes I can pass any build tag to go ..., but the problem is the package is not vendored.\n@mattfarina \nTwo problems here:\n1. If I build from source code, Glide only prints dev as version, which is pretty much useless, I have to open source code to find out which version I am using.\n2. If Glide already looks for all tags, then I think this feature is broken/incomplete, or maybe I did not use it right. Take example of https://github.com/gogits/gogs, it dependents on https://github.com/mattn/go-sqlite3 in this file, but there is nothing about this package in my glide.yaml or glide.lock.\n. > We want to have some version information outside of releases. Ideas on how we can do this are welcome. There's an issue for it at #268.\nA simple solution to this is hard coded version number in the code, like this: https://github.com/gogits/gogs/blob/master/gogs.go#L20\n\nI just ran glide up on gogs using the tip of master for Glide and it found github.com/mattn/go-sqlite3. There was a bug that prevented this which I fixed a couple weeks ago. The latest release and the tip of master have this fixed. Can you use go get -u github.com/Masterminds/glide to update your local version or download the latest release and try again?\n\nThanks, I think latest version has fixed the problem.\nAnother quick question, when I execute glide install, what is the actual command running underneath? (does it just do go install or go install -tags xxx with all possible tags)\n. Thanks, so glide install only checks out version for packages in vendor?\n. Got it!\n. Thanks for the response!\n. ",
    "kron4eg": "@Unknwon After glide get github.com/ugorji/go/codec or adding it to your glide.yml and glide install you could pass any tags to go build your/app and those tags will be passed down to dependant packages... Will this solve your problem?\n. glide list appears to be broken now.\nhere is my yaml and lock files\npackage: .\nimport:\n- package: github.com/boltdb/bolt\n- package: github.com/rogpeppe/godef\n  repo: https://github.com/abourget/godef\n  vcs: git\n  version: feature/go15-vendor-experiment\nhash: 5ffeacb33c685c181509d3e0058a7f7a8e0fa5a7be85309ab2f3e6a25bcc2787\nupdated: 2016-03-12T14:00:50.961900683+02:00\nimports:\n- name: github.com/boltdb/bolt\n  version: 0fd4c0547d204c7b1cad6db6f3adad5f2cf453e5\n- name: github.com/rogpeppe/godef\n  version: 60e71fcb82867b2b0ea18d4f5625a3ec9720b5e2\n  repo: https://github.com/abourget/godef\n  vcs: git\n- name: golang.org/x/sys\n  version: 7a56174f0086b32866ebd746a794417edbc678a1\n  subpackages:\n  - unix\ndevImports: []\nand here is outputs of different commands:\n$ glide list\n[INFO] Package golang.org/x/sys/unix found in vendor/ folder\n[WARN] Version not set for package golang.org/x/sys/unix\n[INFO] Sorting...\nINSTALLED packages:\n        github.com/boltdb/bolt\n        golang.org/x/sys/unix\nNote how github.com/rogpeppe/godef is missing\nEDIT:\n$ glide --version\nglide version 0.9.3-4-gfe65195\n. Oh, my bad then, sorry. In this case change is working as intended.\n. Please don't do this, let glide fetch all possible combinations and end-user (one who runs go install) is responsible for whatever GOOS/GOARCH/custom_tags is needed will be used during compilation.\n. ",
    "13k": "Sorry to comment on this closed issue, but seems relevant.\nIsn't novendor supposed to respect the setting excludeDirs in glide.yaml? Does the excludeDirs setting has the same semantics in both resolving imports and novendor contexts?\nEdit: my reasoning is that I can still keep go files in a directory I simply want to be ignored, but still get correct behavior when installing deps (already works) and also testing with go test $(glide novendor) (not working). I think this issue can be closed, novendor does output packages in separate lines. Hit the same issue, found that the documentation mentions the config file supports a excludeDirs key. Using that solved the issues with glide trying to gather imports from \"unimportant\" directories.. ",
    "kalbasit": "Yep @technosophos that summarize what we talked about. Also possible glide repin which should glide unpin then update all dependencies (pull in master (or whichever branch ref reference) from upstream) and then glide pin again.\n. +1 @technosophos that's exactly what I'd be looking for.\n. @technosophos you can treat the argument as a possible filename (if it exists) and as a package if not. In the meantime you can start showing a warning starting now about it.\n. Interesting. I believe this was an issue in a previous version. 0.6.1 definitely fixed it.\n. UPDATE: The only fix is to retry, so it happens randomly but often.. Thanks for the info @franciscocpg, I'll close this one out as a duplicate for now. @technosophos you should probably move the files out of Github. I'm happy to donate an S3 bucket, let me know if this is something you would consider.. ",
    "albrow": "I'm currently using glide in production and have some thoughts I would like to share on this discussion based on my experience with it so far. However, it's a little unclear to me what the goal is. Would someone mind explaining exactly what problem this issue aims to solve? @itsjamie originally mentioned npm shrinkwrap, which as I understand it allows developers to specify specific versions for their dependencies' dependencies. (Without shrinkwrap, npm would always install the newest version of each nested dependency that satisfies the constraints in their respective package.json. You don't have control over the package.json file in third-party dependencies, which can cause problems for CI tools and reproducible builds). Is that still the goal here? A real-world example would be extremely helpful.\n. @mattfarina thanks for the quick response. I like the idea of specifying a version (or commit hash for projects not using SemVer) with the --version flag.\nThis issue still has relevance for cases where the --version flag is not provided. In that case, glide should assume you want the latest version and should add version information to glide.yaml to prevent the version from changing between builds. If the project is not using SemVer, glide get should pin ref to the latest commit on the master branch. If the project is using SemVer, glide get should add the latest major or minor version to glide.yaml. This is how bundler behaves in the ruby world and how npm behaves for javascript (except they always assume SemVer because of the way packages are added to the registry).\n. After reading glide help pin more carefully, I see that you can provide a filename as an argument. That's much better than just always printing to stdout, but it still strikes me as inconsistent for two reasons. 1) Many other commands like glide install, glide update, etc. use glide.yaml as the default filename and have a flag for changing it. 2) At least one other command, glide get, writes to glide.yaml directly. Why is it okay for glide get to write to glide.yaml but not for glide pin, glide guess, or others?\n. I too was frustrated by the default git submodule behavior. See this StackOverflow question for more context.\nBasically, I'm writing a library and wanted to check in the vendor directory so that users of the library would not necessarily need to install Glide. The goal is to get vendoring working with go get by default. I tried to avoid using submodules for a long time, but eventually just decided to stick with the default git behavior.\nAs far as I can tell, all the commands I want to run (e.g. go get, glide install, and git add) will work fine when using submodules. I have not run into any instances were I needed to run any submodule commands directly. That's not to say that I won't run into problems eventually, but it seems to be working for now.\nEDIT: I spoke too soon. After completely removing the project locally, attempting to install again with go get produced an error. I'm trying to figure out how to resolve this now.\n. @mattfarina thanks for the quick reply.\nAdding .git does work, but I thought the point of the vcs and repo fields in glide.yaml was to, well.. specify the VCS and repo to use for the package? If that's not the point, then what do those fields actually do?\nAlso, in order to get glide install to work, I actually had to change my source code to use github.plaid.com/plaid/go-plogger-client.git in the import statement. Updating glide.yaml alone was not sufficient. Is this intended behavior? IMO glide.yaml should be the source of truth and Glide should not override what I specified in glide.yaml with guesses based on source code analysis.\n. @mattfarina thank you for clarifying. I think I have a good understanding of how things currently work and why they work that way.\nI still think that the way Glide currently behaves violates the principle of least astonishment and is likely to cause more confusion for users in the future. I'm okay with mimicking the behavior of go get for cases where vcs and repo are unspecified. However. If I manually specify a VCS and repo to use, Glide should use that. The current behavior (for this package, at least) is to spit out an error message complaining that Glide could not detect the VCS. Can you understand why that is confusing?\nI would like to see Glide behave more like this (in pseudocode):\nif vcs != nil && repo != nil {\n    // Use the VCS and repo specified in glide.yaml\n} else {\n    // Attempt to detect VCS and repo using the same conventions as the go tool\n    if err != nil {\n        // Return an error indicating that the VCS could not be detected.\n    }\n}\nDo you think the behavior I've outlined would somehow be more confusing than the current behavior? If so, I would love to understand your reasoning. If you think this sounds like too much work or should be lower priority than other issues, I would be more than happy to take a look and submit a PR.\n. @mattfarina this is still causing us a lot of frustration at my place of work, and appears to be affecting other people as well. I don't think you have addressed my most recent comment. Do you have any thoughts to share?\n. @mattfarina I'm not sure that adding some magic to detect GitHub Enterprise is the best solution here. What about people that are using GitLab Enterprise, Bitbucket Enterprise, or any number of other code hosting solutions? Are we going to create special cases for those as well?\nIn my opinion, it would be better if Glide did not have any special casing and instead used the VCS and repo field in glide.yaml as I originally suggested. As a developer, I would greatly prefer adding this information to glide.yaml compared to adding the \".git\" suffix all over the place. Since Glide already has a way to specify this information in glide.yaml, it seems strange to me that it is not being used here.\nIf there is a way to detect X-GitHub-Request-Id that is not specifically tied to GitHub Enterprise and will work for other providers, then I have no opposition to it. However, I still wonder if that kind of solution is more complicated than it needs to be?\nPackage management is hard, and I know there's a lot on your plate. I would be happy to submit a PR if you're open to my idea.\n. I left some thoughts on https://github.com/Masterminds/glide/issues/498. I have more to add on this specific issue...\n\nWe need to have a detailed discussion on breaking with the semantics of go get and its rules.\n\ngo get does not work with nested packages on GitHub Enterprise. Any solution that we come up with is going to break compatibility with go get. While I understand there are reasons to not want to break compatibility, if we do break it, the solution I originally proposed seems more straightforward than doing magic to detect GitHub Enterprise.\n\nThere are cases where the repo location won't contain enough detail to detect it. Did you know some hosts, like SVN hosts (and Go supports SVN), don't have an extension on their repo locations? We need a way to capture it when it can't be detected.\n\nI'm not familiar with how the go tools work with custom hosting solutions for SVN. Can you elaborate? If there is not enough information in the package name and Glide supports this, haven't we already broken compatibility with go get?\n. @mattfarina thank you for opening this issue and being open to thoughts from the community.\nhttps://github.com/Masterminds/glide/issues/298 is at least part of what prompted this issue. I, and many others on that thread, would like to be able to use Glide in conjunction with GitHub Enterprise and other code hosting solutions without resorting to adding the \".git\" suffix all over the place. Note that currently the only workaround is to not only add \".git\" to glide.yaml, but to add it to every place in your source code where the package name appears, as well as to rename the relevant directories in GOPATH to include the \".git\" suffix.\ngo get does not work with nested packages on GitHub Enterprise (without specifying the \".git\" suffix). Any solution that we come up with for addressing this issue is going to be a departure from go get.\nFor my public projects, I will continue to maintain go get compatibility so that users will not be forced to use Glide if they don't want to. At work, we have a clearly defined process for hosting code on GitHub Enterprise and using Glide to manage dependencies. We don't use go get directly, so there won't be any adverse affects if we break compatibility.\nI would be curious to hear if anyone would be adversely affected by breaking go get compatibility in this way.\n. > glide has already broken go get compatibility\nI was drafting a response to point this out, but it seems @sdboyer beat me to it :)\nIn my opinion, there is not much merit in continuing to discuss whether Glide should break compatibility with go get in a general sense. By any useful definition I can think of, Glide has already broken it (unless you commit the vendor directory). It might be more prudent to look at these issues on a case-by-case basis.\nThis may be obvious, but no one has mentioned it yet. Even without specifying custom remote locations, it is trivial to set up a project which works with Glide and does not work with go get. Imagine you have a project that depends on version 1.0 of github.com/lib/foo. The latest version (on master) is 2.0 and is not compatible with version 1.0. Sure, go get knows how to download github.com/lib/foo and put it in the correct location in your GOPATH, but since it always pulls from master, the code could be broken and it may not even compile. On the other hand, if you install dependencies with glide install it will work. Practically speaking, I don't think it matters whether or not go get can download the dependencies from a remote location. What matters is whether your code actually works.\nIf you care about strict compatibility with go get, there's always the option of committing the vendor directory to version control. As I understand it, that will work with go get regardless of the remote locations or versions that Glide uses (that's not to say it doesn't come with its own issues). With the --strip-vcs option and other ongoing work, it appears that Glide is making this easier.\n. > The way to look at solving for this is from a user experience point of view. What experience will give the users the fewest WTF moments and why?\nI wholeheartedly agree.\n\nGlide package paths and those used in imports code statements need to be the same format that go get requires.\n\nI want to ask for some clarification.\nIt seems to me that the only advantage of adhering to this definition of compatibility is that you can run go get on the project. go get will successfully download the dependencies and put them in your GOPATH. It doesn't mean that go get will retrieve the same version or use the same remote location that glide install does (because it has no concept of versions or custom remote locations) and consequently it doesn't guarantee that your code will work or even compile. As you mentioned, you could take some additional steps after running go get in order to get the code to compile/work.\nWould you agree with these statements? Are there any other advantages of adhering to this definition that I did not mention?\n. @mattfarina it's been more than a month since we've heard from you on this thread.\nI don't see how the definition you have proposed is helpful for developers. I would love to hear some examples or learn more about your reasoning.\nI already mentioned that by design Glide will install different versions of a repository compared to go get. In practice this means a project that uses Glide may already break if you get the dependencies with go get, because the code will expect the versions specified in glide.yaml and go get will always install from master. Sure, you can go in and manually check out the correct version for each dependency, but that does not seem practical. In addition, doing so is likely to break other packages which may depend on different versions of dependencies in your $GOPATH. Given the impracticality, and in some cases impossibility (if you have projects depending on different versions) of manually checking out the expected version, I would already consider this \"broken\" for all intents and purposes.\nFurthermore, since Glide currently allows you to specify a different remote location via the vcs and repo fields, it is already possible to have go get and Glide disagree on what remote repository should be installed. The project may technically be go-gettable,  but go get will install from a remote location that is completely different from what the project expects. Installing a dependency from the wrong remote location is strictly worse than not being able to install it at all. The former takes more steps to correct (you have to first remove the incorrectly installed dependency) and is potentially very confusing and hard to track down.\nI have provided two reasons why your definition of compatibility with go get does not prevent developer headaches or wtf moments. This is why I'm claiming that definition is not useful. \nhttps://github.com/Masterminds/glide/issues/298, which partly sparked this discussion, describes a real-world annoyance that I and others have run into. Unless you can provide counterexamples, I maintain that fixing that issue will definitively not break compatibility with go get any more than we already have.\nAs I have already mentioned, if you care about go get compatibility, we do have an option for that. You can check in the vendor directory to version control. I'm not saying it's a perfect solution, but it will maintain complete compatibility with go get, and I would argue it is actually the only reliable way to do so. As soon as you create a tool (such as Glide) which installs something other than what go get installs, you have already broken compatibility with go get by any useful definition I can think of. This is sometimes okay :) As engineers we need to understand that and weigh the pros and cons.\nI would appreciate hearing your thoughts.\n. @mattfarina I understand pretty well what your stance is. I'm moreso asking why? Given the points I have brought up, how does adhering to this definition of compatibility help developers?\nAmong other things, I'm asking why should we allow this:\nyaml\n- package: github.com/someuser/differentrepo\n   repo: https://git.example.com/baz/foo.git\n   subpackages:\n   - bar\nAnd not this?\nyaml\n- package: foo/bar\n   repo: https://git.example.com/baz/foo.git\n   subpackages:\n   - bar\n. @mattfarina I was wondering if that was the case. Thanks for the quick response!\n. What happens if you remove the --skip-test flag? I could be wrong, but I believe that flag is telling Glide to not resolve dependencies in test files.\n. ",
    "tve": "oh, needed to run glide create first...\n. Niiice, thanks!\n. Thanks for the thoughtful reply. There are 100 different motivations for vendoring (whatever that exactly means...) so I understand it's difficult to provide a tool that satisfies lots of users.\nOur use-case expects a number of things from the package management:\n- an easy way to install dependencies for CI\n- the ability to check a dependency into the VCS when the dependency can't easily be fetched by CI due to permissions issues (private git repos)\n- the ability to pin a dependency to a specific version, which may be a branch or a commit\n- tools to verify where everything is coming from and whether there are newer versions\nIn terms of pinning versions, we like gopkg.in quite a bit. Some external dependencies use it and we trust the maintainer in general. For external dependencies that don't use gopkg.in we tend to go through a phase of rolling with it and then either fork the repo to control changes or pin to a branch or commit. For internal dependencies (i.e. repos we control) we tend to either use gopkg.in or pin to a branch eventually. We don't check a dependency into VCS unless it can't easily be fetched due to permissions or stuff like that, we don't check in to pin the version.\nThe bottom line is that there is a range of use-cases which depend on the nature of the dependency and there is a long development phase where things are not pinned to a version.\nThe situation that prompted my ticket was that I repeatedly made changes to a dependency that I maintain and wanted to bring the changes into my project but didn't want to wait for all other dependencies to be checked nor did I really want a disruption if any of them had changed.\nSomething else I've been missing is a -dryrun flag for update: tell me what you'd update and why, but don't do it.\nThanks much!!!\n. I encountered the same issue. My GOPATH was a symlink (i.e. GOPATH=/home -> /mnt/home). No symlinks under GOPATH, though. This used to work fine ('been using glide for months with this exact set-up). I understand that symlinks below GOPATH don't work, but above??\n. I'm using github.com/yyy/zzz as top-level package\n. Whoa, a bunch of more use-cases :-)\nOne thing that occurred to me is that when using GOPATH I believe the Go tools still honor the vendor dir in imported packages. What this means is that if I'm building package A that uses package B in the GOPATH and B has a vendor dir then B's vendored dependencies will be used. This runs a bit counter glide's philosophy of flattening the vendored packages. Sadly with the removal of the vendor experiment env var one can't turn off pulling in the vendor dirs anymore.\n\nHow often do you make a change in the GOPATH that needs to be reflected in vendor/?\n\nWhen iterating it can be ~hourly or less. For example, while testing my app I may run into a bug in the library. I switch my focus to the library, fix the bug, add a test case, run the tests, then switch back to the app. If I'm OK pushing to github I could push the lib, switch back to the app, run glide up -u and move on. But I don't always want to push, specially when the switch of focus wasn't for a cut&dry bug fix but to add a feature.\n\nWhat kind of workflow would you like to use to switch in and out of a mode where you're using a local copy?\n\nThat's a good question. I would assume that for any project I'm checking out I can run glide up or glide install. I don't check in the vendor dir, but I know that others do. The flow I would use:\n- check out the repos I work on into my (messy) gopath\n- blow away the vendor dirs (in my case a fresh checkout wouldn't have any)\n- run glide install --gopath-only in each project to ensure everything in the gopath meets glide.yaml requirements\n- run go build or go test as desired\n  And when I'm done I would:\n- run glide install in my application project and expect the vendor dir to be populated as usual\nI believe the main issue with the above flow is that if the user checks the vendor dir into version control then doing an add/commit requires ignoring the fact that vendor is missing and doing a checkout (for example to switch branch) requires remembering to blow away vendor again.\n. Thanks for the heads-up. Do I understand correctly that I could solve my use-case by overriding the cache location for the library to point to where I have it checked out in my gopath? This way glide pulls that into the vendor dir of the app? But I'd have to run glide up -u each time, with the resulting delay while it tries to update every dependency I use (really slow for me)?\n. Mhh, sounds painful, I guess I'll have to build some tool that rsyncs stuff into the app vendor directory :-(. Having to commit and run glide each time I switch context and then having to squash commits so they're not a total mess is not attractive to me.\nThe last paragraph you wrote \"There is also the option of circumventing the things while developing...\" is actually very incorrect, that's the first thing I tried. For example, suppose both the app and the library use the log15 logger or use context.Context. Well the app will use the package from its vendor dir and the library will use a different copy either from its vendor dir or the gopath, depending on whether the lib has a vendor dir. At that point you know what happens: you have two copies of log15.Root() and anything that sticks something into the context using a package-global var as key ends up not working across lib & app. In short: a nice corner of debugging hell.\nIf you remove the -u flag what is the method for pulling new versions from the upstream repos of dependencies?\n. I'll try the symlinking. I swore never to use symlinks again in the GOPATH after having too many issues, but that's now over a year ago, so the wounds are no longer open and I can try again :-O.\nThe issue with using the GOPATH is the removal of the GOVENDOREXPERIMENT variable. It means I can't disable vendoring, which is what I'd like to do so the GOPATH is what's being used and I can manage that. Not being able to disable vendoring means that any dependency in the GOPATH that happens to have a vendor subdir goes off into its own namespace. So I'd have to diligently delete all vendor subdirs in the GOPATH, which now means I no longer have clean checkouts, which means tools complain at the next update, and it's downhill from there.\nOK, symlinks, here I come...\n. ",
    "marians": "I just found out about this function by googling, ending up here in this issue.\nIs there a good reason this isn't documented? At least I couldn't find any hint or examples.\nAlso, it seems as if glide goes through all dependencies although I am calling it like glide update --strip-vendor github.com/org/repo. Is that expected behaviour? If not, I will gladly open an issue with more details.. ",
    "dimonomid": "So why is this issue closed? glide update github.com/org/repo still updates everything, not just github.com/org/repo.. Masterminds can afford that. :)\nThat all looks funny, and glide is surprisingly broken (especially for something with 7K stars on github), but jokes aside, it's already time to move to Go modules.. ",
    "khogeland": "Promised feature doesn't seem to exist, wontfix with zero explanation \n:clap: . ",
    "jchauncey": "my brew must have been out of date... My fault sorry about that. =)\n. You guys should read this - https://github.com/CocoaPods/CocoaPods/issues/4989#issuecomment-193772935\n. ",
    "hkjn": "Unfortunately I've been unable to reproduce the issue: I just now went to the same repo, detached from HEAD and went to the same commit I had checked out before, with a clean working directory, but this time glide init && glide get github.com/golang/glog worked just as it should. I'm not sure what's different. No vendor/ directory should have existed when I saw the issue.\nFeel free to close this out (or adapt it to be about improving error logging when things fail, your call).\n. ",
    "sdboyer": "big +1 to a --pin option.\nsince your stated objective is to mirror go get closely, i'd say that you sorta dodge the question by just doing the same thing it does - at least as a start. so, in your example:\n$ glide get -p github.com/foo/bar bitbucket.org/sticks/stones\nit's just gonna grab whatever the default fetch point is, and pin at that. this seems like a good starting point?\nnow perhaps, in a later feature, if you want to permit specifying multiple versions and pinning at something else, you include it in the argument itself:\n$ glide get -p github.com/foo/bar:master bitbucket.org/sticks/stones:v0.1.2\nthis obviously gets a little messier, but i think from a user perspective, just getting SOME version into the glide file is a helpful bump just by overwhelming a bit of \"blank page syndrome\" - to me, fixing the wrong target id seems less onerous than going through and writing them all myself, directly.\nofc, this process would have to dereference those down into immutable commit identifiers for storage in the lockfile. that's easy for now. but, when you roll in semver - which @mattfarina just told me should be soon  - that'll change this a bit. you might then, optionally, add a --deref flag:\n$ glide get -p --deref github.com/foo/bar:master bitbucket.org/sticks/stones:v0.1.2\nwhen the flag is present, it'll dereference the floating identifier into its underlying immutable commit id in the glide.yaml. otherwise, it records the floater.\n(note that i'd also love to see more pinning-related smartness in the guess tool...)\n. :beers: \n. @subfuzion this should've been solved last year - you're still encountering the issue on a recent version of glide?\n. best way to use submodules: don't use submodules.\nno, but really. there's almost nothing you can't accomplish with subtrees, and submodules are so fraught with traps, unexpected behaviors, necessary workflow changes...there is a small, almost negligible subset of workflows and use cases for which they are appropriate, but including them into a general purpose tool like glide is a recipe for heartache.\nhere's a pretty nice, fairly recent overview.\n. yeah, that line stuck out to me too - i actually had the feeling that i should note it in responding here. here's a slightly less glib breakdown (sorry, i was tired last night).\nbecause submodules track an immutable commit, not mutable ref (branch or tag), they never move unless you explicitly tell them to. and when you tell them to, that's actually a change in the parent repository. what the parent repository tracks is actually a special, git-only filetype object, as evidenced by the diff when you add a submodule:\ndiff\ndiff --git a/testrepo b/testrepo\n new file mode 160000\n index 0000000..4d59fb5\n --- /dev/null\n +++ b/testrepo\n @@ -0,0 +1 @@\n +Subproject commit 4d59fb584b15a94d7401e356d2875c472d76ef45\nthe file's \"contents\" are that string. and that file is of a special, different type, as indicated by git-ls-tree:\n$ git ls-tree HEAD .\n100644 blob 737c29c80fe97b04d2d2d1e3559a519c621f766f    README.txt\n040000 tree 0676c8fbd93260d51519c3b61528a01343d62bdc    somedir\n160000 commit 4d59fb584b15a94d7401e356d2875c472d76ef45  testrepo\ni point this out just to say that \"there be magic here.\" the primary purpose of that magic is to allow git to manage multiple discrete repositories together in a lockstep, controlled way. in fact, the case it's really designed for is managing external, vendor dependencies - they don't update often, and when they are, it's a significant event that should be reflected by a commit in the main repository.\nthat should sound familiar - it's a subset of the responsibility of a tool like glide (or npm, or composer, or bundler, or cargo, or...). which is actually an argument AGAINST their use here.\ngit submodules try to be a general solution to the problem of vendoring, but operate with fewer constraints AND less information than modern package mgmt tooling. they have their own manifests (.gitmodules), and lockfiles (invisible on disk - they're the magical 'commit' object type from the git-ls-tree output above). and, like all projects in this space, there's a whole mess to be dealt with when it comes to synchronizing the myriad states that can exist on disk vis-a-vis the manifests and lockfiles. they have a set of commands for dealing with this, but those commands have always failed to deliver because (IMO) they operate within the constraints of git's lifecycle - e.g., there's unexpected extra work to be done after a git clone.\nall of this is to say that, unlike many other parts of git, submodules should not be looked at as just another piece of git plumbing that can effectively act as a library to deliver the functionality you want in your tool. they're a standalone thing, and if you've already got your own manifests (which glide does), then they fundamentally don't offer anything except an integration headache.\n. @dnephin \nbecause:\n1. windows\n2. bzr\n3. hg\n4. svn\nFWIW, i've switched my position on this - vendor should always be committable, and SCM metadata shouldn't be left around. it's just not trivial to do.\n. what @LK4D4 said. But also:\nfind vendor/ -type f -not -path \"*/.git*\" -exec git add {} \\;\n                            not just ^  but also ^\nNow there's a 4x4 matrix. Plus x2 for windows. And, does illumos have GNU find? Well, seems like this bug is well-tended...\n. @dnephin that's a fair point. i'm kinda just swooping in dickishly right now, anyway. sorry :)\nreally, i'm doing so because, while working on my writeup, my view has shifted to where I don't believe that any user choice or interaction is necessary here, at all. it just muddies the water. both the commit-deps and don't-commit-deps cases can work equally well, and transparently, using what i call the \"sync-based\" approach. you shouldn't HAVE to write that script.\n@mattfarina and i were maybe gonna chat about that today, but it didn't come together. hopefully tomorrow. we'll see where things land.\n. @stevvooe thanks! i really do think glide has the potential to be best-in-class, across languages. It's exciting :) we'll certainly be public about whatever our plans are.\n. @tanji yes. Currently, you can either strip vcs dirs out of vendor or not, depending on the opts you pass (--strip-vcs). Doing so makes things nicely compatible with committing vendor/. once #384 lands, vendor/ will never have any vcs metadata in it, so it'll always be committable. Those opts will go away.\n. >  to remove all *.go files from packages not imported (transitively) in the project's Go sources\n@imikushin i think what you're looking for is unreachable/dead code elimination, yes? I'd say that's probably out of scope for a package manager (though I can understand why, if you were to need that, it would be convenient to attach it to the package manager).\nI'm not sure there's really anything in Go-dom that does that level of analysis outside of the compiler itself. The closest thing I can readily find is go tool vet -unreachable. But that's really limited static analysis; afaik it is based solely on whether or not an identifier is ever referenced, at all, by anything else in the search scope. What I suspect you're looking for is determining if it's possible to eliminate any Go files based on the specific identifiers that are transitively called from your entry point (the current main.main()).\nThat's a harder and more expensive problem. You'd probably have to run some version of a connected components algorithm to figure out which identifiers actually can be safely eliminated (though, thinking through it right now, it seems like a tree/map could be sufficient...), then see if there are any files comprised entirely of unused identifiers. Worth doing in a compiler if you're already traversing all the code, but...\nEnd of the day, though, I'm inclined to think it's not something glide should do because it breaks the basic guarantee that glide leaves the disk state (aka vendor/) an exact reflection of the information reflected in the lock file. It makes for at least one additional row in the diagram - disk in \"normal\" or \"aggressively pruned\" state. That necessarily introduce a possible gotcha+step in local workflows where, when a developer working off of a dependent package's godoc calls a new function that aggressive pruning had eliminated, glide has to rerun in order to recompute the new aggressively pruned disk state. ...but the developer won't know - all they'll see is a compiler error for a missing function, and scratch their head, because it's right there in the docs.\nTBH, I haven't experienced a case myself where this kind of thing would really add much value. Could you provide a link to Docker's \"cryptic shell script\"?\n. @imikushin ...tbh i'm still a bit confused about what you're asking for. You say:\n\n*.go files from the unspecified dirs\n\nI'm not sure that's what you actually want? To literally do what you're saying there, it means not removing non-*.go files from package directories that are otherwise unused, and even preserving potentially empty directories. This specific phrasing is why I inferred you were looking for dead/unreachable code elimination.\nHowever, from this:\n\nThis is possible without projects source code analysis and provides one-to-one relationship between the disk state and glide.yaml content (independent of the projects source code).\n\nAnd judging from what the docker script does, I think you're actually just asking for a tool that removes whole repositories that are present under vendor/, but not specified in glide.yaml. If that's the case, that is very much so the plan. There's an argument to be made that it should be done by all commands, being part of the guarantee of the \"blessed state\" originally described. If it's not, though, then that's exactly what prune would do, without any --aggressive option. In fact, I can't think of anything prune would do other than this, so I'm not sure what work you were imagining prune would do WITHOUT --aggressive.\n. Oh, I also meant to note in my original response - carving up stuff under vendor/ is also really out of scope for glide because that would make for dirty trees from the VCS' perspective, which would considerably complicate the interactions with them. No bueno.\n. seems like this should be easyish to take care of - i'll see if i can do so at some point.\nwould your preference be for rejection, or normalization?\n. OK, should be easy enough. I can think of one more normalization that's maybe worth doing - the common git syntax of github.com:foo/bar, which works for ssh, is not actually the valid name. Can you think of a case where swapping that colon out for a slash would be wrong? We could easily detect if there are numbers after it - for an HTTP port - and avoid that case...though I'm not actually sure that could ever be valid input here, either.\n. the point i find most convincing is the first. but the hash could still be useful there if, instead of using the hash of the entire file, you just work on a hash of the (alpha sorted) set of specified packages and their vendor ranges. if those are the only things that can affect the dep graph, then there's no reason to include other information in the hash (except the convenience of computing the file's hash as a whole).\ni have to ponder a little more on the second point. now that i'm back from the holidays, if i write that blog post that i mentioned last week, it'll entail that i work these issues through. so, hopefully, i'll do that :)\ncould you elaborate on some of the usability hiccups you've encountered?\n. @mattfarina it seems like my suggestion regarding changing what's computed in the hash would take care of that hiccup completely, no?\n. @mattfarina sure, it would make it less portable. But is there a concrete use case there? I can't imagine a workflow offhand where I would manually do shasum -a 256 glide.yaml. I'd expect glide would do that for me automatically, or provide a subcommand to tell me if it matches...but I don't know why I'd need to do that.\nIf the concern is for other Go tools' ability to work with that data, it's as simple as exporting a func that does the work.\nAt the end of the day, I don't think it makes sense to optimize that particular bit of the relationship for shell scripting. Or at least, not enough to justify hashing more than the actual data you care about.\n. Also, as a separate thought - is this perhaps one of those issues that looms much larger for the developer of the project than it would for a user?\n. I still think this is a mistake, but I'm almost done writing the article in which I lay out the broader case, so I'll let it rest until then.\n. there's no change in my view on what should happen.\nthe 'why' is in the article, which is gonna have to be completed in the next 36 hrs.\nEDIT: it wasn't, but for posterity, this is it.\n. This is an interesting discussion, and one that i'd missed previously.\ni'm fundamentally in agreement with @technosophos that the goal is to leave the repository in a buildable state, and that incorporating information from the local go source is a reasonable, often necessary part of doing that. But it does present, at minimum, possible issues when the local code is not itself in an analyzable state - what do we do then?\nThe biggest single issue with not performing analysis on the workspace is that that analysis gives us the starting points in a dependency analysis graph of packages, rather than projects. glide.yaml contains projects, but if we only look at projects, we often bring in more dependencies - many, many more, due to the Go community's fondness of public monorepos/\"kit\" repos - than we strictly need. Only by doing package-level analysis can we determine what's actually needed.\nThis is all problematic because, without those initial inputs to the package depgraph, we don't know which package import paths we actually need to follow.\n- If our workspace lists project A as a dep in glide.yaml\n- A contains A/foo and A/bar\n- Our workspace imports ONLY A/foo\n- A lists project B as a dep in glide.yaml\n- ONLY A/bar imports a package from B\nWithout workspace analysis, we end up including B. With it, we know we don't need B. In part, this is a performance optimization, but it's costly enough that it was prohibitive of glide's use for people to not have it. Additionally, it opens up more possibility for conflicts - what does B depend on? Does that conflict with any of our other deps?\nThis whole area is an issue of significant disagreement within the community of people working on go package management. The expectation that we can \"think\" in packages, but \"exchange\" in repositories is at the heart of why analogies from other language package management contexts may not apply.\nThe basic issue with introducing more commands - @mhoglan's analogy to git's plumbing is apt - is that doing so inherently opens up new possible states that the program can exit in, which means new input states we have to be able to handle. That's more than just a drag - such input states can often be ambiguous with actual user input, which in turn means more command flags in order to get things to behave correctly...it becomes a UX-tanking spiral.\nThat said, towards the end of my writeup I described what I called a \"sync-based PDM\", in which we consider the relationship between each of the four on-disk states - workspace, manifest, lock, and dependencies - as discrete functions. I could see how a single flag that essentially says, \"we don't care about workspace -> manifest sync for this op\" could probably address the issues described here, without disrupting the integrity of the remainder of the system too much.\nWe'll have to see what such a thing looks like in the new engine (#384). Today, however, the --all-dependencies flag MIGHT cover some of your use case.\n. Similar things being discussed in #368 \n\nNor does it allow you specify a version constraint.\n\nTry specifying it with a trailing # instead of trailing @. e.g., github.com/foo/bar#1.0.0\n\nit doesn't save the current version to glide.yaml (the way that npm i --save does), which I think is a mistake.\n\nI agree, that would be a mistake...but are you using the most recent glide? Because glide get does save the version to glide.yaml for me.\nWorth noting that this is one of the things that switching to the vsolver engine will address. (I almost wonder if we should have a tag for these)\n. @IvanMalison AFAIK it's not being worked on in the current mainline branch, but it's basically solved in the new engine (#384). \n(This specific thing is possible, but there's an underlying issue that cropped up which I'm working out before I can commit it.)\n. Just updating to note that, yes, this is one of the single most-requested bits of functionality in glide right now - and it is fixed in the new, gps-based version of glide, that we hope to be the next big release - v0.13.0.\nThere's still a fair bit of work between here and there, though; if you want to make it happen sooner, we could use your help! You can look at the project, or #565 in particular has a lot of individual items. Ping me (@sdboyer) in gitter or on slack if you think you may have some time, and there's nothing obvious to work on.\n. > Does go get not run the Makefile's build target? For some reason I thought Go had some baked-in logic for using Makefiles if they were present (instead of just running go build).\nHopefully we can end up shoehorning this one in via manifest...over time :)\n. @mattfarina - i was referring to a different idea, something analogous to rust/crates' build script system.\nobviously there's a lot to be figured out in introducing such a feature; i don't reference it lightly.\n. @chenziliang these issues should have been resolved, so if you're still seeing them, could you please provide a detailed description of the context in which they're occuring? your go env, glide.yaml, the shape of your current project, etc.. seems like this should be relatively easily addressed with some strategically-placed os.MkdirAll()\n. One thing that's confusing me in this thread - GH enterprise does implement the custom go-import header go get itself uses to figure out vcs type, and has for at least a couple years. That should obviate this issue, or at least the issue @albrow is having. I'm not saying that's the best or even a sufficient solution, but reading over the comments, it seems like one basic step here is to establish whether or not glide is correctly capturing something like github.plaid.com/plaid/go-plogger-client correctly by checking that HTML meta.\nOr, maybe I read the comments too quickly and missed something...\n. @banks ahh, yes, that explains it entirely. Very clear breakdown, and prompt - thanks!\nIMO, a reasonable approach to addressing this is allowing the user to declare some additional patterns for matching paths. Not as a cli opt - that'd be nuts - but in the manifest, or the global config. It'd take some doing, but I think it ought to be feasible to make a generic handler that can operate on regexes declared in a yaml file. Perhaps with a little micro-API around specific named capture groups...\n. fwiw, in the new SAT solver-based engine, the intention is to flatten as an (aggressive) default - because it's ultimately the only path to a sane system - but to allow exceptions in cases where it's provably safe automatically...and then probably in other, perhaps user-chosen situations as well.\nalso, this pretty much describes my view:\n\nI can respect (though disagree) with the position that pruning code out of a repo is an \"alteration\", but I can't buy that pruning recursive deps is an alteration.\n. This is gonna be happening anyway with the gps transition (a \".\" subpackage will be listed in the lock, when appropriate), so closing this out.. @ches one goal of vsolver is definitely to obviate any need for having VCS metadata directories under vendor - and along with it, yes, no antipattern-that-is git submodules. (at the very least, they're redundant with the information kept in the lock file.) \n\n@technosophos @mattfarina and i need to figure out (if)/when/what the plan is to integrating vsolver, and in so doing, phasing out those options (and others). In general, I think reducing choice (without reducing capability) should be pretty painless, but of course, we're gonna have to tackle it case-by-case.\n. @mattfarina sorry, why wouldn't we keep keep godep compat? the only reason i can imagine is because that means including the .git infix for custom domains, and that feels redundant with also having the vcs: git property. what am i missing?\n. @mattfarina sorry, yes, butterfingers - go get compat\n. @atombender i know it's not much solace for an immediate bug you're having now, but this will probably be resolved by the switch to the vsolver engine (i don't know exactly what's going on with this, so i can't be completely sure).\nthat's progressing in #384, if you want to follow along. with any luck, it'll be at a point soon where you could test this issue against it, and see if it's still a problem.\n. Are all of these issues still occurring with the 0.12 release?\n. @ryanwalls it seems quite strange to me that the dividing line here would be on private vs. public repos.\nI'm working through some related parts of the code now as part of #384 - maybe I'll run across something.\n. the original issue here is most likely a separate problem - if clearing the cache is solving your problems, then the fix we're working on for #592 should be what you need.. fwiw, when we get to integrating the solver engine, i've taken special care to ensure that we hit the network only when the solver actually needs it in order to proceed - and even then, as little as possible.\n. @yoshaul yeah, there's really not any disagreement THAT it's a good idea to allow granular control over updating. The problem is that it's difficult to do in glide's current design - but it's a solved problem in gps (#384). So, we're pushing to try to get gps in, ideally in 0.13.\n. @mattfarina I think that renaming would probably be helpful. I may rejigger the corresponding naming for vsolver, too.\n@ches:\n\nThe downside is that, if Glide looks at glide.yaml/lock files recursively in dependencies, it would be ideal if it didn't just install everything in import, it should probably filter out deps that it discovers are only imported in _test.go files.\n\nYeah, this is part of a more general problem - what @technosophos and I have been calling the \"bi-modal analysis\" problem: do you operate at the project or package level in building the depgraph? When you do the former, you may get excess packages; when you do the latter, you have no version information. The former is wasteful, but ultimately correct; the latter is just wrong (which is why we're all here).\nIt's not intractable, I don't think; it just involves making some tradeoffs. However, I've deferred work on it in favor of trying to get vsolver integration into glide going ASAP in #384. Once that's in, though, tackling that general problem - which would hopefully take care of this along with - is basically next on my TODO list.\n. @TommyM yes, this problem is already generally solved in the new engine (unconditionally, though - allowing a flag that would skip installing non-test imports is another can of worms).  \nso, just gotta get that in :) #384 \n. doesn't the hash in the lockfile represent input deps - which means, if those can vary on build flag inputs, there should be a hash per build flag combination?\ndoing that, ofc, basically means having a separate lock information for each combination (even if they're all in one physical file).\n\nWe don't have to solve for every architecture/os/flags combination each time\n\non balance, it might actually be better to do this. if we can precompute the build combinations with unique dep inputs (which i think is feasible?), we can - in the new solver i'm working on, at least - parallelize the solver routine for each unique combination.\nto @kron4eg:\n\nPlease don't do this, let glide fetch all possible combinations and end-user (one who runs go install) is responsible for whatever GOOS/GOARCH/custom_tags is needed will be used during compilation.\n\nwhen @technosophos and i discussed this in IRC a while back, we came to the conclusion that unifying them all together would be good. he mentioned quickly running into a use case that blows up that approach...though couldn't remember what it was. i'm hoping he does - it could provide some bounds on the problem.\n. not too bad if it's just a couple people using it - and if you can write instrumentation into the makefile that automatically injects it into the git repository (which is possible).\n. @thockin glad it's something you'd want! :clap:\nfwiw, i don't think this is a rash thing to do in general - there are well-defined ways that vendor works, and a strong and clear conceptual basis for stripping the dirs.\n. yes, WIP code would be beneficial, though...\nwhat amounts to an engine rewrite for glide over in vsolver would likely change the dynamics of how this might work. in the parlance of that system, it could probably be implemented as an alternate SourceManager (compare to the - still very much WIP - built-in, local-cache-oriented default)\n. @aaronkavlie-wf yes, it's the formal plan. with any luck, i'll have a PR up sometime next week that gets things started.\n. yeah, it's a little bit of a warren in there. i'm rigorously refactoring in vsolver.\n. mmmmm, iiiinteresting. i like taking advantage of the VCS history to show information about the author of the conflicting change.\ni think i should be on to working on conflict reporting in vsolver pretty soon...i'll have to make sure it's at least as good :)\n. big ups here. support for this is also on my TODO list in the solver.\nideally, the lock files generated should include both a tag (when applicable) and a revision. it doesn't actually obviate the need for this check - it mostly allows us to detect if/when upstream does something naughty and moves a tag. so...sorta related to this.\n. will need a windows version of the check, too :innocent: \n. agree, tcell is too much dep for this purpose\ncould we copy out what we need?\n. i might advocate for not introducing this feature, simply because merging in the vsolver engine would obviate the need  - while actually dumping things into the vendor dir will still be the purview of the implementing tool, there won't be any need to have the vcs dirs there in the first place.\n. @schickling there's no way to do it yet - it's a full-on rewrite of glide's version-selecting engine.\nso, up to the Matts how they want to phrase the plans, but if something were to be added to documentation, it would mostly be a note that plans exist to integrate that engine when it's ready. it probably would be worth keeping a list of things we expect that to change, though...\n. shows what i know :)\n. you can assign this one to me, if ya want\n. @thockin yeah, it's brought regularly into the channel, though it hasn't manifested much as an issue in the queue (i think?)\nI don't think we could safely add anything more than a warning here, anyway.\n. FWIW, i would generally prefer to see the timestamp either removed, or not updated if the file isn't changed - i'm not clear on what valuable information it's communicating by updating just the timestamp. (anybody interested in that information can effectively get it from the controlling VCS).\nMaybe @mattfarina can enlighten me?\n. > The timestamp is to tell people or tooling when the last update occurred. If nothing has changed we can likely skip updating the timestamp.\n:+1: \n. I'm not sure how difficult @mattfarina thinks this would be in the current architecture. Given that glide does a fair bit of operating in-place within the vendor directory, it might be tricky. So, this might be a bit easier to wait for vsolver on.\n(Which oughtn't be that long. If progress continues as it has, maybe as early as next week!_\n. @thockin briefly, \"this\" is the problem of doing in-place updates in vendor, rather than assembling a new vendor somewhere else, and only moving it into place when we're sure it's complete and correct.\nThe in-place approach was originally taken as a performance optimization. When people aren't committing their vendor dirs, the harm is at least less obvious, because the whole vendor dir is just treated as disposable - rm -rf and try again. (to be clear, I don't like that, or think it's OK - one of many reasons I'm writing vsolver). As glide has only recently been aiming to support the committability of vendor via those --strip-vendor and --strip-vcs commands, there are things like this that appear to be right smack in the middle of an obvious workflow but that still have problems.\nWe're working...feverishly! (I just committed the vsolver code earlier today that writes out a complete and correct vendor dir that can then be moved in to place.)\n. I believe this particular problem's essentially addressed now in the vsolver PR, #384, at least for glide install and glide update, both of which vsolver is now powering. Some caveats there, but it's fundamentally working.\nThey're really the hard part, and having them means the system fundamentally works - we can solve, and write out a vendor tree. Converting glide get to follow the same pattern is mostly trivial, now that those are working. There's some other, higher priorities first, but we'll get there soon.\nHelp is always welcome \ud83d\ude04 \n. b) should be what happens right now - it should update both glide.yaml with the HEAD of the specified project, and then recompute glide.lock. That's what it does for me when I test, anyway. You're on the most recent glide, yes?\na) is something we oughtta support, probably via a go get github.com/foo/bar@tag...just, haven't gotten there yet. I think?\n. ahh, i see what you mean. \nso, first, a quick distinction: if you're running a glide install, that just reads the lock file and ensures that the vendor directory reflects it. it won't change anything, and will ensure what's in the lock file is what's in vendor - in other words, it's pinned.\nif, however, you're running a glide update, then it'll update it. ...even if you didn't specify it for update. same goes for running glide get on a totally unrelated package. in general, this is because you can't consider dependencies separately - glide has to ensure the whole dependency graph is consistent whenever any change is made. \nthat said, i don't think this is intended behavior, but the Matts would have to confirm. IMO, it's a bug - pinned versions shouldn't change unless the user explicitly requests it. just because you 'consider' the whole graph doesn't mean you have to change parts of it. FWIW, that will be how it works when we swap in the vsolver engine. Only if you specifically request an upgrade, or if the algorithm has to change the version in order to find a solution, will a pinned version be changed.\nNot sure how entrenched this issue is - and, therefore, if it'd be reasonable to fix it, or if it's better just to wait for the new engine.\n. @ches \n\nWhen you say \"pinned\" with regard to integrating the solver, I assume that means \"there is a version already in the lock file\", correct?\n\nyep. that's the meaning of \"pinned\" in the solver - and in glide right now, as well.\n\nMy expectation from similar tools is that bare glide get would not put any version spec in glide.yaml, but it would result in the version (the revision ID of current HEAD) being stored in the lock file.\n\nIMO, it should put something into the manifest. (Otherwise, the lockfile isn't fully recreatable from the manifest - and not maintaining that as an expectation is horrifying). It should just identify the current branch tip, aka HEAD. glide does this now.\n\nThen I should be able to specify a scoped update for a different package like glide update someotherpackage, and Glide will not try updating any package other than someotherpackage, and its deps if needed. If updating someotherpackage would require updating another dependency that's locked to a specific revision, it will fail with the solver reporting some information about the version constraint that would need to be loosened.\n\neeeeexactly. i'm actually writing those very failure messages right now :)\n. ahhh, it was # - i tried @. (i imagine that's not available to us b/c it would get nasty w/ the URI-like structure of package names).\nshould probably mention this in the glide get --help docs :)\n. @thockin your request here really ends up having more to do with how glide update works than glide get, no? Because you want to be pinned to whatever rev the upstream project's HEAD happens to be when you run it, and not have that change without it being explicitly requested. If glide update were scoped to only operate on specific projects, then 'pinning' by having that information solely in the lock should be sufficient. No?\nBecause, just to be clear, glide get does save the project/package to glide.yaml. and if you specify a revision that you want to be hard-locked to, e.g., glide get github.com/foo/bar#bcacb06fecaeec8dc42af03c97c6949f4b05c74c, then it'll drop that rev into glide.yaml. But for glide to go the extra step of defaulting to saving the rev into glide.yaml is making a poor workflow choice, I think - in terms of the metaphors from my article, it's choosing the \"demon's roulette\" approach, rather than the \"hitch a ride\" approach. And demon's roulette is not a sane default - it only seems like one if glide update doesn't respect what's pinned in glide.lock.\n...I hope? :grin:\n. > I'm trying to ask for small, deliverable changes so that I can actually use glide O(soon).\nSure, quite fair \ud83d\ude00 we'll see where @mattfarina lands on this. \n\nI don't buy the \"demon's roulette\" argument, or at least, it's not particularly weighty. We test everything anyway, so it's not a huge deal.\n\nSure. I mean, for now at least, it's primarily an internal signaling issue for your folks - an indication of how kubernetes intends to follow a dependency. And really, when it comes to how y'all communicate internally, that really ought to be up to you. (And yeah, if you rigorously test everything internally, you're mitigating some of the other effects.)\nIn the bigger picture, it's less about your internals, and more about anyone who might be importing kubernetes - having revs in the glide.yaml forces everyone else into lock-step. I realize that's a down-the-road concern for you (at least, it would be for me if our positions were reversed), but causing more revs to make it into glide.yamls is systemically harmful, and thus something I'd rather avoided.\nTo that end...\n\nif glide were to offer me a better choice, something like \"at the most recent semver tag\" instead of \"head right now\",\n\nI'd agree that this is sanest - try to pick the most recent semver, and if not that the most recent version, and if not that then the default branch...some kind of cascade like that. Right now, though, the combination of:\n- Picking a branch - a floating version - by default\n- Not allowing glide update to take arguments\nCreates an awkward situation. Both of them need to be addressed; dealing with either should mitigate the nasty confluence that currently exists.\n. @thockin afaik, this will be addressed by the new engine (#384 is the first PR), but idk if it's being worked on under the current paradigm.\nI was out at a conference last week, and a few things may prevent tons of progress this week, but the ball is rolling.\n. hordes is good \ud83d\ude38 \nif any horde members are feeling particularly impatient, they can always come help out with glide/vsolver :) \n. @kimamula yep, it will be. vsolver doesn't operate directly within the vendor/ dir, so while that issue would still exist in the underlying library, it wouldn't manifest in the new system, as there is no repository nesting that could cause it.\n. hmm...XML complaints. I think this actually might not have anything to do with protobuf. You're on bitbucket - are you using git, or hg?\n@mattfarina may have a better immediate idea, but this is the first thing that jumps out at me, because hg logic parses commit information using hg's XML output style. If you are using hg, could you paste in the contents of hg log -r <rev> --style=xml from the bitbucket.org/jtblin/some-repoi/apipb, substituting in whatever the revision in question being used is for <rev?\nIf you're not using hg, then i'm not immediately sure what could be the cause here :)\n. That might do it. Looks like XML is also used in doing remote discovery/detection. Does the remote repository exist, but no commits are yet pushed to it (so, empty repo), or does it simply not exist at all?\n. I think you might be able to do this today using the repo field that you can declare on deps. Ordinarily it's used to declare aliases/forks, but I think it could be bent to this purpose.\nIf glide was to support this properly - particularly for the use pattern you're describing - I'd argue it would be preferable to have it be something where the URIs are switched in transparently - not something declared in glide.yaml. Yes, that would probably entail compiling a custom version of glide. Though, glide does have a \"plugin\" system already - perhaps that could be leveraged.\nPoint is, having to repeatedly add that information in glide.yaml is not only likely to promote errors and inconsistencies because user input, but would also result in the default behaviors of commands like glide get becoming suboptimal for your workflow (users would need to go into the glide.yaml later to add that information). Best to avoid design choices that effectively cripple other parts of the tool, if possible.\nPS - does your internal gitolite service really have more uptime 9's than github? :grin: \n. > It actually does, believe it or not :)\nI can! Mostly ribbing.\n\nThe problem is that it's opt-in, so if somebody forgets to do it (and really, it's a pain to do manually anyway)\n\nGlad we're on the same page about that :) And I realize that I think I misread your original proposal - I was assuming you were suggesting an additional stanza on a per-dep basis, but instead you were suggesting a single, additional config stanza that would perform a general rewrite on all dep URIs it runs into. My bad.\nIf the concern is really just over ensuring that the build servers aren't reaching directly out to github, wouldn't the easier solution - and more fully within the SREs' control, I imagine - be to intercept that via DNS? I didn't mention that approach at first because I thought the goal was also to affect developers' environments, but if it's just build boxes you're concerned about...\nIn any case, yes, the issue's come up in discussion, and there's probably at least one issue with a similar flavor somewhere in the queue. IMO, there is space for adding something like this.\nSince you're asking about this, though, and it does intersect a bit with something else, let me ask you: would the presence of a local cache of repositories address any of the issues here? If/when we get around to integrating the vsolver engine, glide will maintain a cache of repositories at some non-GOPATH location (configurable, defaulting to under your home dir), and reach out to upstream (e.g. github) as little as possible. They would behave in a similar fashion to a read-through cache, and replicating the cache dir/creating VM images with the cache dir prepopulated should be pretty trivial for your SREs. (That said, I don't know what synchronization strategy you're using to keep the gitolite mirrors up to date, but in both of the two I can imagine, the local-only caches will be slightly more stale.)\nTo be clear, these 'caches' are necessary whether or not you have the mirrored intermediaries. But I'm asking because one of the design choices I'm actively considering right now is how well to support \"offline\" use of these caches. left-pad-style problems, github going down, or being truly offline all fall loosely under this header; right now, I care about those in decreasing order.\n. > is what happens when somebody force-pushes their master branch, and this orphans a ref that eventually gets garbage collected?\nOr, gasp, when they move a tag to a different commit. Yep, we have to handle the bad citizen cases, and we do. Though I've opened an issue to cover it in particular: https://github.com/sdboyer/vsolver/issues/6 . Kind of less \"issue\" and more \"dump of thoughts,\" but gotta start somewhere.\n\nwe really don't want a production build to ever fail due to changes happening outside of our control.\n\nIMO, that's a significant responsibility of a package management tool.\n\nIs there a timeline on the vsolver engine? Sounds like \"TBD\".\n\nWe're trying to sort that out now. The code's coming along nicely - hopefully will be ready for integration in a matter of weeks. But there are a number of changes to glide's workflows and options that we need to sort out. @technosophos, @mattfarina and I need to talk that through.\nIn the meantime, I wouldn't at all mind you opening an issue (and/or jumping on that one I linked earlier) detailing the expectations you'd around the behavior of a local cache.\n\nI think in the interim we will patch our internal glide build to have this behavior, and then at some point we may be able to drop it.\n\nFingers crossed!\n. @technosophos restricting to http has its own weirdness, i think - it would require (potentially) ignoring, or at least rewriting, custom-set repo properties on a project. while i can see an argument for how that sorta makes sense...well, it just seems like creating a too-long-for-sanity tail of options overriding one another.\nof course, i suppose that'd also depend on the implementation you have in mind :)\n. @mattfarina ok - where is that list coming from?\nsuch a list has also been on my thoughts, because (assuming that i'm thinking what you're thinking) i need to include it as part of the identity of a source URI in the solver. basically, we're talking a list of URLs that are all capable of locating the same URI, right?\n. i started writing a response here, but ended up not putting it in because...reasons. so i'll just note that i suspect that the first post-vsolver integration release of glide (watch #384 for progress) will have this pretty much hammered out. no (more) changes to Masterminds/vcs necessary.\n. @arschles yep - initial vsolver integration is being worked on in #384 . This particular problem is second or third in line of knotty problems that need addressing before I would feel it's release-ready.\nI also jotted down some of my notes in a vsolver issue (https://github.com/sdboyer/vsolver/issues/10), though I'm now revisiting that thinking a bit. The issue is probably a bit arcane, but if you want to discuss, I'm happy to clarify as needed.\n. :sob: \n. speed might be the easiest option here. it's also the one i'd prefer, if we can get folks to accept it. the alternative adds potentially a fair bit of complexity...or at the very least, filesystem detritus. i haven't thought through whether what you're saying there actually would work, but assuming it does - it's the same sort of brittleness that's cursed previous tools. people might be used to that, but that doesn't mean it's a good pattern to replicate.\nthis is the kind of thing where i think good (read: fast, in this case) tooling should be able to render 'personal preferences' moot.\n. Ahh...yeah, IMO, it's a hard no on having versions in the manifest. \ud83d\ude22 Because I can't direct link into spots in my article (ugh, medium), here's the quote:\n\nFor example, the above Cargo manifest has a \u2018package.version\u2019 field:\n[package]\n version = \"0.2.6\"\nThink about it this a little. Yep: it\u2019s nuts! Versions must refer to a single revision to be of use. But by writing it into the manifest, that version number just slides along with every commit made, thereby ending up applying to multiple revisions.\nCargo addresses this by imposing constraints in the registry itself: publishing a version to crates.io is absolutely permanent, so it doesn\u2019t matter what other commits that version might apply to. From crates\u2019 perspective, only the first revision it sees is associated with the version.\n\nTo my mind, it's not a question of good or poor practice; allowing versions in the code itself introduces a fundamental ambiguity in the way we understand time and version. The in-code and meta-code versions are non-equivalent, and having them trying to coexist in the same packaging ecosystem system introduces undecidable problems - certainly in practice, possibly even in theory - for any tool.\nAt minimum, we have to have rules like \"use tags, but if they're not there then use a version in the manifest,\" which leads to confusing UX for users, in addition to the near-guarantee of disagreement between the two systems.\nIF Go had a central package manager like crates, then this could be feasible - we could use it to enforce the same way they do. But we don't. Go was designed around a VCS-driven ecosystem from the start, and I don't know of a way to keep the problem sane if we undermine that.\nI'm happy to go into more detail if the depth of the problem this would create isn't clear.\n\nOne of the advantages of doing this is that your app version is not tied to VCS and you can change to any other VCS without any problems.\n\nThere are tools that facilitate cross-VCS migration, certainly including tags. But, two things:\n- Changing VCS often entails changing import paths anyway (due to hosting changes), so the import path changes...so, semantically, changes in versions aren't that disruptive to downstream users, because you're already a wholly different project at a different import path.\n- The process of changing VCS itself is typically difficult enough that difficulties with your package manager are likely to be a negligible afterthought. (This, coming from a guy who architected the migration of >10,000 projects from CVS to git for the Drupal community).\nIt seems to me that the benefits on this front are pretty small, and they don't outweigh the costs.\n\nBesides that the version property is not mandatory in the glide.yaml. The idea is not to doing double duty to maintain versions in both tags and in the glide.yaml file, but to use one or another way.\n\nMandatory-ness isn't the problem. By having the data there at all, we have to decide how to reconcile it with all the other version data floating around out there.\n. to be clear, i'm not raining on the idea as a whole - just the addition of a version field\n. Yeah, so...the addition of logrus, which in turns pulls in golang/x/sys for one tiny little thing, is a really gross thing to have to add to a committed vendor dir - it's almost 100k loc. Will try to deal with that later.\n. @technosophos @mattfarina feedback on the general approach taken in Analyzer, or even just specifically with the godep support I added in c708bf7d75ce8e87295546ced286b8af2b2a2a42, would be great.\nWould also help keep the review down to a more manageable size later :)\n. @mattfarina the large changeset is almost entirely under vendor; as I noted above, it's mostly golang.org/x/sys, which is brought in by one tiny point in Sirupsen/logrus - and I'm gonna see if I can duck around that by using an earlier version.\nIf you look at diffs restricted to real, local code additions, there's very little as of now:\ngit diff master --stat -- *.go */*.go\n  action/create.go       |   2 +-\n  action/ensure.go       |   4 ++--\n  action/name.go         |   2 +-\n  cfg/config.go          |  60 +++++++++++++++++++++++++++++++++++++++++++++++++++++------\n  cfg/config_test.go     |  12 ++++++------\n  cfg/lock.go            |  36 ++++++++++++++++++++++++++++++++++++\n  dependency/analyzer.go | 105 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n  godep/godep.go         |  46 ++++++++++++++++++++++++++++++++++++++++++++++\n  repo/installer.go      |  16 ++++++++--------\n  repo/vcs.go            |   2 +-\n  10 files changed, 260 insertions(+), 25 deletions(-)\n\nI'll need to look further at why you're asking for the manifest / lock pairing to understand what's going on.\n\nRight, this is the crux of what there is to grok/review. As currently designed, vsolver expects pretty much just one thing to be injected by an implementing tool: an instance of vsolver.ProjectAnalyzer. That's what I've started building so far, in dependency/analyzer.go.\nThe sole method analyzers currently have, GetInfo(), is responsible for returning both manifest-type data, and lock-type data, from what vsolver has determined to be the root of a project. Right now, that project root determination is very locked down - repo roots only. I expect that will change, at which point analyzers may also need to provide logic for, \"given this path, find the closest project root.\" I've seen the logic glide has for that, so I'm not worried there - it's just, I'm not quite there yet with the core engine, as supporting it involves more work with the project/package level distinction.\nvsolver needs both the manifest and lock as both are relevant to the solving process:\n1. Manifests are used from both the root and non-root projects (obviously), as they provide the foundational dep lists and version constraints for which the solver is trying to find a solution.\n2. In root projects, manifests also provide three additional things:\n   1. Dev dependencies (implemented)\n   2. Aliases, which are pretty much what they sound like (not yet implemented)\n   3. Overrides, which allow the root package to define global rules that can supersede the constraints given by other projects (not yet implemented)\n3. Locks are primarily used from the root project, as they provide us the version that we should try to end up with, unless a) something new in the solving process necessitates it change or b) the user explicitly requested an upgrade.\n4. However, we also use locks from non-root projects to try to achieve more stability in deeper parts of the depgraph where no root lock has guidance. (not yet implemented)\nThis last idea is one that, as far as I know, will be unique to glide, as I first suggested in my article. @technosophos and I have discussed it several times as possibly being very helpful in dealing with the go project ecosystem \"as-is\" - full of locked deps from godep, etc.\n\nI would prefer that the mechanism that looks for external imports be pluggable rather than hard coded. \n\nThat's seems doable. I don't think it's really either/or, though - we can have the hardcoded analysis for godep, gom, etc., and if those don't work, let a plugin have a go? Or let the plugin have a go first, and then fall back on those. Either way, my concern is that the use case for this does not immediately spring to mind (though glide obviously has a history with this, so I suspect you have something concrete), but the complications for caching the returned data (which vsolver will/does) do.\n\nSo, it would iterate over a list of the things rather than go one by one.\n\nI'm confused, \"iterating over a list\" and \"go one by one\" seem like synonyms to me. Unless you're suggesting that they all run unconditionally, even if one indicates a successful analysis?\nI guess that's possible. Seems to me you'd have a mess, though, and I'm not clear on what case that's trying to cover. Some project simultaneously using, say, godep and glide, maybe? If anyone is doing that, then erroring out seems like the saner thing to do than trying to make sense of a fundamentally nonsensical situation. (The user could always be encouraged to fork that bizarre project and fix it - which really seems saner to me than trying to have tooling figure out what manner of custom crazy happens from the combination of two systems).\n. Just rebased in order to (at least temporarily) get rid of golang/x/sys - it's only needed for solaris, so we can deal with it a little later. By rebasing, it's not clogging up the history, and it makes reading the diff more feasible.\n. > The use of github.com/Sirupsen/logrus is going to create an odd UX if debugging is enabled (which it should be). We should talk this part through.\nright, so, logrus is definitely an issue. ...sort of.\ni wrote that logging layer while i was still getting the core solver algorithm right. initially, i imagined that it might be helpful for users, but immediately found (once i started using it to debug the solver) that it was difficult even for ME to use. so, i opened https://github.com/sdboyer/vsolver/issues/5, the outcome of which will specifically be a trace logger, with output looking like the linked file. it will be, dare i say, \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \nthat said, i don't think there's actually a problem here. the reason i'm using logrus in the first place is because i needed a logging framework that the implementing tool could fully control, and inject as a dependency into the solver. and logrus meets those requirements, even though its current output is mostly useless. so, just set the log level to something below Info, and you won't hear a peep. this isn't an acceptable long-term solution, of course - but that's what the aforementioned issue is for.\n\nNeed to deal with dependencies in test files. This is a big ask and someone already started a PR. It's currently the most requested feature.\n\n(we discussed a bit in gitter after you posted this, so reiterating a bit)\nyes, this is crucial. we already do half of it now: reading the dev/test deps out of the manifest. the other half is ensuring we incorporate test files in static analysis. the (untested) code is already (mostly) written for that; i ultimately put it down because the requirement was still a bit murky for me, and i felt that the work required to integrate with glide would clarify it.\nso, yeah, the static analysis part is high on the priority list. my plan was to incorporate it if not in this PR, then in the next one.\n. Small progress update:\nThe latest set of changes takes one approach at solving the issue raised in #391. It's provisional, hacky code, but it does the job well enough for now, and it can give some basis for discussion, at least.\nIn any case, having at least a temporary solution in place for that, I'm now up against the next barrier, which has turned out to be package-vs-project-level analysis. That is, since I'm working against glide itself here, and that annoying golang.org/x/sys/unix package is being brought in by logrus (as previously discussed)...well, that's not a repo root - golang.org/x/sys is.\nTackling this properly means refactoring to include at least some of the static analysis I mentioned in my last comment. There won't be much visible on this side, but there'll be a fair few changes on the vsolver side.\n. @mattfarina the logger interface doesn't do leveled logging. I was more convinced that I needed that earlier; now, I'm back to being on the fence. If all we're doing is the trace, leveled logging isn't really necessary. However, there are a lot of other classes of errors/information that it may end up being good to emit via logging, rather than just queueing up onto the Result, in which case I'll want to stick with leveled logging. \nI won't know what seems right until I start sorting out those errors, though, so It's kinda premature to say right now. For now (read: this week or so \ud83d\ude04 ), I want to stick with a leveled logger.\nFortunately, logrus provides plenty of output control options that can be used to make it interoperate nicely with msg. Or, as I noted earlier - you can just set the log level down for the moment, and it'll be like it's not there at all.\n. Short term solution: 5a71069 turns down the logging level :)\n. OK, couple upcoming changes here:\n- logrus has been removed completely; trace output is done through *log.Logger. also, the new trace output is in place.\n- vsolver now differentiates between a 'local name' (as in, what's literally in import paths) and a 'network name' (where you fetch it from). manifests not agreeing on where a project is sourced from is a failure condition. this should be equivalent to what glide has now.\n  - the mechanism to allow a root project to forcibly set the network name and ignore what other projects think isn't in yet, but it will be soon.\n  - that override mechanism is different from aliasing - that'll be a little later. in fact, they'll probably both come at the same time.\n. soooo...kinda exciting. glide update works, at least for a simple case or two :grin:\n. We discussed splitting this into separate PRs in order to keep it more manageable. A good goal, but slightly blocked on the state of the deps (semver & vcs). So, in the meantime, here's an overview of what's changed in order to ease review.\nFirst, this is the current status:\n$ git diff master --stat -- *.go */*.go\n action/create.go       |   2 +-\n action/ensure.go       |   4 +-\n action/install.go      | 110 ++++++++++++++++---------\n action/name.go         |   2 +-\n action/update.go       | 136 +++++++++++++++----------------\n cfg/config.go          | 163 ++++++++++++++++++++++++++++++++-----\n cfg/config_test.go     |  12 +--\n cfg/lock.go            |  41 ++++++++++\n dependency/analyzer.go | 213 +++++++++++++++++++++++++++++++++++++++++++++++++\n gb/gb.go               |  43 +++++++++-\n godep/godep.go         |  46 +++++++++++\n gom/gom.go             |  91 +++++++++++++++++++++\n gpm/gpm.go             |  36 +++++++++\n repo/installer.go      |  16 ++--\n repo/vcs.go            |   2 +-\n 15 files changed, 773 insertions(+), 144 deletions(-)\nIn general, changes fall into one of three categories:\n- The analyzer (dependency/analyzer.go). This is what's injected into the vsolver.SourceManager that's responsible for looking at a tree of files, and extracting manifest and/or lock data from it. All of the changes in gb, godep, gom, and gpm serve this end.\n- Changes under cfg/* are all pursuant to making the existing *cfg.Config and *cfg.Lockfile types fulfill the vsolver.Manifest and vsolver.Lock interfaces. They also include an experimental version of changes discussed in #391.\n- Changes under action/* refactor install and update to the new engine. install was working a while ago, and still is afaik; update is what I just got working last night.\n. Major progress: update and install are now powered by vsolver!\nThe basic test I've been running is just against glide itself. Check out this branch, make build, then ./glide up github.com/Masterminds/vcs. The trace logger is currently hardcoded to be on (just temporarily, for dev purposes - this is NOT a requirement!), so you'll see the solver work its way through the deps. When it's done, you should have an updated glide.lock where only github.com/Masterminds/vcs has changed. Boom, #252 et. all, fixed.\nSo, yay! \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \nOK, that said...\nCaveats\nThere are several. \n1. If you run glide up without arguments, you'll find your way to a panic. Yup, I'm workin on it - it's a general case that needs a better guard.\n2. I'm not dealing with package-level analysis at all yet, though it's pretty much on-deck.\n3. I got rid of a number of the params for those two commands, but kept the ones @mattfarina and I talked about. So, they're still there, but I haven't written support for them yet: , \n   - --cache-gopath: I just haven't touched this at all yet. Lower priority, though not ignored (#407)\n   - --strip-vendor: currently, this happens unconditionally. I'm ratcheting that back to something the tool can control: sdboyer/vsolver#24\n   - --all-dependencies: As above, I've not dealt with package-level analysis yet, but it's coming up, things are mostly in place, and I've got a plan.\n   - --resolve-current: this is kind of a sticky wicket in general, as @technosophos and I have discussed. I'm planning on punting on this for a while, until the bigger issues are dealt with; it's a whole other dimension of analysis.\n4. Obviously, we've got merge conflicts to deal with here. That's relatively small potatoes, and pretty easily dealt with.\nTo be clear, this is by no means done - though my top priority now is splitting this off into some sub-issues and putting up discrete PRs against a new branch, so this can go more in chunks. However, the path forward is, I think, starting to look pretty clear.\n. That last commit fixes the panic described in the first caveat. I'm pretty sure it works, as I used glide up to achieve the update that's in that commit :)\n. Small status update, since, holy crap it's been a month: some of the delay is that I had a very busy May, but also, bimodal analysis is tricky \ud83d\ude3c . sdboyer/vsolver#36 is where that work is ongoing. i'm decently close - just wrote a new testing harness last night that lets us deal with all the new complexity. while there are some other things to take care of, i think we're on a pretty direct path to integration after that is done.\n. last step before merge, i think - simple fixes to static analysis. then, i'll update this PR.\n. sdboyer/vsolver#36 is now merged...91 freakin commits later. oi.\ni'm sure i'll hit some rough spots and bugs when i integrate all that here, but hopefully not anything major. i'll get started in the next few days - i need a bit of a breather right now.\n. So, maybe not so much of a breather \ud83d\ude3c \nSome notes on that most recent merge:\n- The trace logger has been updated a bit, but it really needs another pass, as it's basically still project-oriented in a bimodal world: sdboyer/vsolver#41\n- --strip-vendor is now something that the tool can control, as promised earlier.\n- --all-dependencies is...well, we should probably discuss this one. @mattfarina has previously pointed out that this can be handy while developing, as it lets you rapidly pulling in additional packages from existing deps without having to rerun a command. Definitely true, but there's both internal complexity costs and UX costs.\n- I've entirely punted on os/arch for right now, but I spent enough time poking at the static analysis system that I know how I want to capture that information. (Still not quite sure how to integrate it in the solving loop, though...)\n- We do underlying comparisons on versions through revisions, now. This is most important because it also lets us match revisions - AKA what godep and most other tools encode, and what glide.lock files currently encode - with any branch or tag that resolves to that revision. (But it's got a wider scope, too - if you constrain to v2.0.0, and someone else constrains to branch foo, but those two happen to point to the same revision at the time we solve, then they transparently match. Note: this DOES NOT make it possible to get a code version you didn't ask for. It just lessens the surface area for superfluous conflicts.)\nI'm now catching this up to the latest changes in glide's master.\n. Working on adapting glide get now. sdboyer/vsolver#42 is a pre-requisite for making that smooth, though we could arguably merge without it and smooth it out later.\n. @thockin i'm at the point where testing this against kubernetes would be helpful. have you worked up a glide.yaml for kubernetes, somewhere?\nI could convert from Godeps myself, but if you've done the work to have some more realistic constraints specified, that'd make my testing more realistic and helpful.\n. vsolver has officially been renamed to gps - woohoo!\nI've been mostly working on getting kubernetes to work using gps. Pretty close, I think, but there are definitely a few more bugs. I'll update this PR again incrementally soon.\n. Updated to gps v0.8.1 and resolved conflicts. Back to grinding on getting kubernetes to work...\n. Made it all the way through a kubernetes solve last night. Sweeeeet.\n. Thanks! \ud83c\udf89 \ud83c\udf89 \n\nIt seems there is still a long way to go on features. For example, the go-get redirects.\n\nThis wasn't implemented for a minute there, but is now, I think. logic here, tests here.\nI do plan to refactor that API a bit more - if nothing else that remoteRepo type is not how i really want it to work, but i also need to fold it into SourceManager. The logic is essentially sound, though.\n\nI'm curious of the plan.\n\nMy plan wrt glide can be seen in the MVP milestone. If it's in there, then I consider it necessary for an at-least basically complete glide. As that list suggests, I don't actually think there's that much more to do.\nBig picture, though, this whole thing has gotten quite large, and I haven't necessarily popped out issues for every single issue I've run across. So, if there's a specific feature you see missing, please please open an issue for it. (Or comment on an issue I already have open so that I can see about moving it into that milestone)\nNow, gps changes are somewhat separate from actual glide integration itself. Ideally, I'd like to see this merged into a separate branch once the MVP milestone is done (or maybe before). That way we can get out of a monolith and into a more iterative mode when it comes to really baking glide around gps.\n. bump - responding to/acting on the following in my last post would be very helpful:\n\nIdeally, I'd like to see this merged into a separate branch once the MVP milestone is done (or maybe before). That way we can get out of a monolith and into a more iterative mode when it comes to really baking glide around gps.\n\nthoughts on this approach?\n\nSo, if there's a specific feature you see missing, please please open an issue for it.\n\nplease?\n\nThis wasn't implemented for a minute there, but is now, I think.\n\nor have i missed something?\n. > I don't mind testing the branch and trying to give UX feedback or whatever is helpful (including trying to build other public projects).\n:tada: :tada: :+1: :tada: :tada: :tada: :tada: :+1: :+1: :+1: :tada: :+1: :tada: :+1: :tada: :tada: :tada: \nThe last item in my MVP milestone is dragging out a bit, as it's pulled me down into a wider refactor. I'm hoping I can finish by Friday, though. Once I do, I'll return to this, and it would be ENORMOUSLY helpful to have someone else poking, testing on things, and providing feedback.\n\nI believe this is going to change some usage patterns of Glide, by necessity because the solver discussions and implementation have proven some things unsound or irreconcilable. Should there be an outline somewhere of use cases and suggested practices that Glide aims to support, and what breaking changes this may introduce?\n\nI've been trying to keep notes to this end, but it's a ball I've dropped more than not. Coming up with a list of such things is probably one of my major TODOs after the milestone is done.\n. OK, I've closed out the MVP milestone. I didn't finish up that URLs issue, but as I noted on sdboyer/gps#27, reintegrating it here should be a fairly small hiccup.\nSo, it's time to double-down on getting this all set. @ches, would you be willing to maybe own maintaining that list of differences? we could hop on voice for ~20 minutes to discuss.\n. Note that #565 is now open to discuss the major changes that introducing gps into glide will entail.\n. The latest set of changes introduce a conversion to the new config and lock file formats. I still have some tweaks to make (upon further, post-merge reflection last night), but it's pretty close.\n. The pushed commits should fix those issues. I've run glide up a few times now, with no error - hopefully it works the same for you :)\nThe single biggest issue was that the glide.yaml was only halfway converted. Like, it used the new branch key for some constraints, but all of the constraints were still under the old key name, imports, instead of under dependencies. There there was still this line in the output in your gist:\n[WARN]  glide.yaml was in a legacy format. An attempt will be made to automatically update it.\nwhich was an indication that it was using the legacy logic to interpret glide.yaml, causing all branch constraint keys to be silently ignored - the legacy handler just drops keys it doesn't know about. Now, while that's a nasty situation, I also think it's not a huge concern for actual users, because a half-converted glide.yaml is something that really only seems likely to happen in bootstrappy-type situations - that is, literally only for us, in the process of converting glide to the new system. (Not to say we couldn't/shouldn't necessarily think of ways to improve that autoconversion process - e.g., we could make it fail if the legacy importer sees a branch key)\nNow, initially I was more concerned by something else: even if the root manifest was halfway converted (and thus it didn't pick up the branch: 2.x constraint on github.com/Masterminds/semver), gps has always relied on that version of semver, and included it in its manifest since the beginning. So, why wasn't glide picking up that constraint when visiting gps' manifest and applying it to the depgraph, causing us to get the right version of semver anyway?\nTurns out, the answer's in the trace:\n| | | | | | ? attempt github.com/sdboyer/gps with 1 pkgs; 30 versions to try\n| | | | | | | try github.com/sdboyer/gps@v0.10.1\n| | | | | | | \u2717 github.com/sdboyer/gps@v0.10.1 depends on github.com/Masterminds/semver with 2.x, but that's already selected at v1.1.1\n| | | | | | | try github.com/sdboyer/gps@v0.10.0\n| | | | | | \u2713 select github.com/sdboyer/gps@v0.10.0 w/1 pkgs\nThe halfway converted root glide.yaml specified branch: master for gps, but for the same reasons above with semver, that constraint got silently dropped. With no explicit constraint, we instead accept anything, which means the solver started working from the most recent semver downwards, beginning with v0.10.1. And indeed, the glide.yaml in gps@v0.10.1 is fully converted and correct, declaring that constraint on semver to be 2.x. But, because we'd already selected v1.1.1 earlier on, that was a conflict, so the solver did what the solver does: tried the next version of gps, v0.10.0, to see if that might work.\nAnd that's where things got fun, because v0.10.0 ALSO had a halfway-converted manifest:\nyaml\npackage: github.com/sdboyer/gps\nowners:\n- name: Sam Boyer\n  email: tech@samboyer.org\nimport: # legacy name\n- package: github.com/Masterminds/semver\n  branch: 2.x # new key\n  vcs: git\n- package: github.com/Masterminds/vcs\n  vcs: git\n- package: github.com/termie/go-shutil\n  version: bcacb06fecaeec8dc42af03c87c6949f4a05c74c\n  vcs: git\nSo, we had the same problem repeating itself a layer down - glide's analyzer autoconverted that glide.yaml, silently dropped the branch constraint, which made it look like v0.10.0 was cool with any version of semver, which of course meant that there was no longer a conflict with the already-selected semver@v1.1.1 - so the algo picked gps@v0.10.0, and off we went.\nAgain, I think this is mostly a problem that's unique to the bootstrapping situation. However, this particular incident does change some of my feelings on how glide's analyzer is currently written. Right now, it tries really hard not to error on DeriveManifestAndLock(), because my thought was that it's better to include versions that might be right than to exclude them. This experience, however, even if it is mostly a product of bootstrapping, demonstrates just how fast those problems can become harmful and impossible for an end-user to debug. So, I think it's probably better to be conservative in those cases - if the metadata looks at all bad, just throw the version out.\nAlso, just to explain - the reason these half-conversions exist at all is because I had to deal with the ambiguity of semver-or-branch discussed in #391 early on, because of the 2.x branch name in github.com/Masterminds/semver. So, I introduced logic to allow that branch key long prior to formally creating the new/legacy format distinction. When those manifests were written and committed, they actually did work. They just don't now, because glide's logic has changed.\nIt's a nice reminder of how profoundly important \"backwards\" compatibility is in this domain - we kinda have to deal with all projects, across all time. Old forms don't vanish into the background in the way they often do with other software.\n. >  because it means we get to catch the issue and work it out before end users have to deal with this.\nindeed!\n\nAsking people to add something extra will both not be compatible with glide.yaml files today (possibly breaking some CI toolchains) and be extra non-obvious work.\n\nI don't think it'd be incompatible with existing glide.yaml files, at least at the level of parsing them. It'd just be adding a field. The addition of the field could, however, change the meaning of existing files - such as in the case we're seeing right now, where we want it to interpret 2.x as a branch, rather than a semver constraint. So, it's that semantic shift that you're referring to, I'm guessing?\nIt can certainly be a pain to have to specify extra data. But in this case, we're not actually talking about something the tool can figure out. 2.x, without more information, is ambiguous between a branch (or tag, for that matter) named 2.x, and >=2.0.0 <3.0.0. It doesn't matter how much information we harvest from existing repositories; it's still ambiguous input.\nSo...\n\nIf there is going to be a local cache of possible values it will need to be derived from repos. If that cache holds the versions why can't it hold all the branches, tags, and versions knowing which is which? Why can't that be calculated automatically and stored in some local cache for the software to use later?\n\nIt's not that we couldn't do this. We can, and a fair bit of it's already in place. It's that when we rely on the information available from upstream repositories in order to divine the meaning of a local constraint declaration (like 2.x), then the local system is no longer in control. \nHere's the not-unlikely nightmare scenario: you're working away on a large project, and you have some dep, A, which in turn has a dep on B constrained to 2.x. Because B has no version literally named 2.x, this gets interpreted as a semver range (which is what A wanted).\nIn the middle of your workday, the author of B pushes some new branch, called 2.x, to their upstream repository. A few minutes later, you glide get some other dependency, C. The solver runs because we need to incorporate C, and in doing so necessarily visits B, too. When it does, instead of interpreting the 2.x constraint on B as a semver range (as it had the last literally thousand times you'd run a get/up/install/sync/whatever), now the solver interprets that as referring to the branch.\nFrom here, there are several possible outcomes:\n1. If there's no other dependency on B, then great! ...sort of. Because the code that's in the 2.x branch may be vastly different than any of the released versions admitted in the >=2.0.0 <3.0.0 range - we don't even have the informal guarantees of semver to suggest otherwise. So, the solver reports success and writes out a new lock. It might be:\n   1. You get lucky, and everything just works fine.\n   2. The types are compatible, but something not encoded in the type system changes, and now you have  bugs that you really didn't expect to have, because...why did your version change in the first place?\n   3. There's type incompatibilities, and so it won't compile. Eventually, I may make this a satisfiability condition the solver checks, too - in which case, there'll now be a new, confusing failure totally unrelated to C (but you assume is related to C, because that's all that you changed)\n2. Or, maybe, C also has a dependency on B with ~2.0.0, which is semantically equivalent to 2.x. However, ~2.0.0 is still interpreted as a semver range, which means the solver suddenly starts failing with constraint type-level disagreement (branch literal vs. semver) between A and B.\n3. The previous problem, except instead of it being C (the project you were geting), it's D, some other project on which you already had a dependency. Again...you'd assume the issue is with C, because that's what you'd changed. But you'd be wrong.\nThere's some more, too, but that gives a flavor. (Remember, also, that having this issue makes the hash stored in the lock file meaningless. That is a huge loss.) I could easily see people spending hours tearing their hair out over this; these issues could easily be experienced as schroedinbugs, which are...a very special circle of hell.\nThe only real solution, as I initially suggested, is to make the constraints fully self-contained, without the need to contact any external system in determining their meaning. That's really not hard to do, but its effect on sane system design is enormous. Having/not having a central registry becomes irrelevant (on this specific issue). The drawback of that, as you noted, is the extra work for users. I think, though, that that's quite surmountable. I'll write a second comment for that...\n. When it comes to a solution, I can't see a way around needing to have the user indicate the type of version, as well as the version itself, in an unambiguous way. The goal is to not have any distributed system-like failure conditions:\n\nA distributed system is one in which the failure of a computer you didn't even know existed can render your own computer unusable.\n- Leslie Lamport\n\nIMO, encoding the type within the version string itself is never really going to be sufficient - e.g. a tag named dev-foo that is itself a tag, but composer's system would view as a branch named foo (that doesn't exist). That's just one example, but trying to encode multiple categories of meanings into a single string space is always going to be awkward. I'd rather have a separate field, where things can be quite clear, albeit more verbose.\nWith a separate field as the goal, I think there are three issues to address:\n1. How do we still make it easy for users to have the tool do autodetection for them, but avoid ambiguity?\n2. Do we optimize defaults for the short term or the long term?\n3. How do we deal with existing glide.yaml files?\nUser ease\nThe big issue here, I think, is not requiring users to manually enter a version type all the time. One way to do this is with autodetection. The change I'd propose from right now is that that autodetection is done once by the initial stages of glide get initial fetching, rather every time we enter a solver run. glide get, then, becomes responsible for putting the appropriate version + version type into glide.yaml, then attempting a solve run.\nThe advantage of this is that we can go with autodetection most of the time, but when there's an ambiguity like in our 2.x case here, we can ask the user to clear it up then and there:\n$ glide get github.com/foo/bar#2.x\n[INFO] 2.x is ambiguous for github.com/foo/bar; do you want to track the \"2.x\" branch, or do you want the semver range \">=2.0.0 <3.0.0\" [b/s]?\nThe user is only confronted with this message if we actually find a branch (or tag) named thusly; otherwise, it proceeds with the semver assumption.\nAnd, for the naked get - $ glide get github.com/foo/bar - we find the name of the default branch and actually fill it in.\nObviously this doesn't cover the case where people are hand-editing the file, but as long as the rules are consistent, then it's a small cognitive leap, and the extra typing is...well, hopefully negligible. At the very least, the way it works would not be non-obvious, which I think is really the biggest risk?\nThe best default\nAs I noted in the initial issue, we could take the approach where there's a default vtype that's applied when one isn't explicitly provided. This would be handy for the most common case if you're hand-editing the file. (It does have the drawback of making the behavior here less obvious, though.)\nI initially suggested that giving semver/versions the default slot. There are two reasons for this:\n- Because we can effectively cover two types (semver and plain version), the default is ostensibly covering more cases\n- Because the eventual hope is that the Go ecosystem picks up semver, in which case most deps most of the time will be on semversions.\n\"Eventual\" is the key word there, though. We could also optimize for the shorter term, where people are still tracking branches a lot, and have branch be the default type.\nLegacy manifests\nThis is probably the trickiest part. Having a default vtype actually makes this harder, because it would assign potentially erroneous meaning to existing manifests. It's also hard because we know we have to support whatever exists now in perpetuity - while we can require that the user fix an old manifest in their project, we have to be able to parse in data from old glide.yaml that may show up in dependencies.\nTBH, this is its whole own discussion. The cleanest thing to do is not have any defaults, because it lets us draw a line between the new and old type of data. But that default option...well, it seems compelling to me.\nWe could also entertain introducing a manifest version number into glide.yaml. I don't really like that either, though.\n. Oh, another alternative - instead of always using the version field, we could just name the fields according to the version type:\nyaml\nimport:\n- package: github.com/foo/bar\n  version: ~1.0.0\n- package: github.com/masterminds/semver\n  branch: 2.x\n. Thanks, these are helpful ideas.\nNow, I'm not quite clear from your response if you're suggesting we continue relying on checking against external repositories at solve time (as opposed to get-time) to disambiguate constraints. So, to make sure we're on the same page about this, I'm just gonna reiterate the basic, cut-and-dry decision: \nAt solve time, either the system can figure out from pure user input what the intended constraints are, or it can't. If it can, we get:\n1. Performance benefit during most solves from not having to hit network or disk to figure out what constraints mean\n2. A hash in the lock file we can actually trust to avoid a bunch of work\n3. By far most important: immunity from upstream changes confusing the tool (one of the circles of dependency hell)\nIf it can't...well...\nUser delight is important. Avoiding hitting people with a confusing number of concepts is important. But I'm not convinced it's worth the cost of intentionally allowing the user to get stuck in unresolvable situations. So, I need to be clear on where you're coming from - are you saying:\n- That you are wiling to sacrifice those three things for this aspect of UX? or...\n- That you aren't willing to sacrifice those three things, but you also don't want the extra fields, so you're looking for another way?\nYour feeling on this really informs the rest of my answer. I'm gonna mostly assume your answer is the former - sorry in advance if I misunderstood.\n\nStart with modifying the glide.lock file. This is auto-generated and managed by Glide. What if a reference or branch property were added to an import. If the version is a tag, branch, or other reference it's set to true. Then, if the property is not present or set to false, the glide.yaml has not changed, and a branch comes in we can detect it.\n\nThis is already going to be happening - lock data emitted by vsolver always contain a rev, plus a version if one's available. Sadly, nothing done in the lock can help resolve constraint ambiguity; constraints come solely from the manifest.\n\nWhen Glide adds something to the glide.yaml like 2.x and there is no reference for that it makes it ^2x. For 2.0.x it makes it ~2.0.x.\n\nSure, that could take care of some of it. But it's still just tiptoeing around the core problem. Someone could just as easily make a ~2.x branch. We have no registry that we can use to constrain the naming of branches and tags.\nNow, if what you're saying here is that you'd consider a branch or tag literally named ~2.x to be something on which it's not possible to depend in glide (on the assumption that it'll be rare), then IMO, that's a more reasonable approach. As I previously mentioned, we're trying to encode more information in a string than I think is wise, but it's not unprecedented (composer).\n\nIf someone manually edits the glide.yaml we tell them if they've done something like 2.x and the possible problem if it's not already in the glide.yaml.\n\nI assume the latter is supposed to be glide.lock? In truth, this just makes things worse. We'd have added an entire new dimension to an already very large possibility space: the lock is effectively providing constraints, thus becoming an input to itself (in a way quantitatively different from how it is right now). Solver outcomes become potentially significantly different depending on whether you have a lock or not. And, if you rm a lock file, it is impossible for even any theoretical solver to recreate that same lock file again. Or, in practical terms: people would end up treating their lock files the same as their manifests, because they'd learn pretty quickly that the solver can only reliably complete if the original lock file is there.\nIf we're already detecting that there's a problem, why allow an operation to continue? This is a case where soft failure injects bad data into the system in a way that poisons not only the current user, but other users, later. That's a much higher cost than hard failure.\n\nIf we have to add a configuration option for this we'll have failed our users. I don't want to do that.\n\nWe're also failing our users right now - see the nightmare case described above, or even just the problem that prompted opening this issue.\nI don't particularly want to add another field, either. Especially after having done it provisionally in #384. It's...gross. At this particular moment, I'm more a fan of actually adding the four fields - branch, version, semver, revision - and then validating that only one of them can be present per dep. To that end...\n\nBut, I don't want to fail to find an option that keeps the UX simple. We need to hide the complexity.\n\nThere's a lot of complexity in this domain to hide, to be sure. But I actually believe this bit is reasonable to ask people to think about: do you want to depend on a branch, a rev, a plain version, or a semver [range]? In my article, I even had my little visual metaphors for this:\n\n\n\nThis isn't one of those bottomlessly complex problems where new layers just keep on appearing. The choice of constraint type for a dep is meaningful, has easy metaphors, and the basic guidelines can be taught in a few minutes. People can casually disagree about it over beers. It's essential, not incidental, complexity. And, as I pointed out wrt glide get in a previous comment, it's still something where we can mostly automate it away.\n\nRisk can never be eliminated (if that's even possible) without making the experience painful for the long tail which isn't acceptable.\n\nOf course, there'll always be risk. Just like there'll always be bugs. But arguing that we shouldn't try to close off this entire class of bugs because \"there will always be risk\" is like arguing against seatbelts because car accidents will still happen. This is a single, specific problem, with a single, specific architectural requirement: making pure user input sufficient to determine the meaning of constraints.\nWe're very close to having this, and it's the kind of thing that could cost us literally months or years of work later (if it's fixable at all); when the ecosystem becomes more complex and interconnected, a popular project deep in the dep chain somewhere doing something wrong in this regard could have immediate, viral ripple effects. Our very own left-pad, but worse.\n. I realize, I should clarify one thing - we could take an approach where glide hits the network prior to calling Solve() (or SolveOpts.HashInputs()) in order to disambiguate any constraints in the glide.yaml. We'd have to do the same from within the analyzer, as well.\nThis would solve the useless input hash problem, at least...though it wouldn't insulate users from much craziness, and it would (obviously) make any action around the manifest -> lock step pretty slow, too.\nalso, could use @technosophos's perspective on this\n. just noticed that cargo, when it's interacting directly with git repositories rather than using crates.io, uses something similar to the multiple named-field approach:\n\nYou can specify the source of a dependency in a few ways:\n- git = \"<git-url>\" refers to a git repository with a Cargo.toml inside it (not necessarily at the root). The rev, tag, and branch options are also recognized to use something other than the master branch.\n. OK, I've reflected on this since our debate on Tuesday, and I've come up with some things. To help, I looked through six analogous systems for comparison: cargo, bundler/gems, mix (erlang/elixir), pub (dart), npm, and composer.\n- Cargo strictly differentiates between source types - there are packages from crates.io, and there's code from git (and only git) repositories. When you use their equivalent of a version field, it's restricted to crates. If you want to use git, then you're given the branch, tag, rev choice (all of which are done via exact string matching). This means there's zero potential for ambiguity between a semver range - which can only apply to packages from crates - and a literal branch or tag name, which can only come from a raw repository.\n- Bundler is basically the same as cargo (unsurprising, given the shared authorship). The main difference is that it doesn't enforce semver as crates does, presumably because rubygems predates semver. There may be a narrow possible overlapping space there - if your constraint is 2.x, and a 2.x version exists (I can't tell if it implicitly inserts = or not) - but even in that case, you're still guaranteed to be using a tag, not a branch. I'd also wager a guess that that's the sort of uncomfortable thing that they'd rather NOT have to deal with...judging from the fact that crates has cut out that possibility.\n- Mix also strictly differentiates between packages sourced from the central registry (Hex) and things sourced directly from git/github. The rules here are pretty much the same - Hex enforces semver on all published packages, which removes the 2.x ambiguity entirely, because it's not possible for that literal version string to be published.\n- Pub is also basically the same as mix and cargo: repository and registry source types are strictly separated. Only git is supported on the raw repo side. Semver is required to publish...I believe. (I can't find 100% confirmation of that in the docs, but if it's not, then the worst case is what I described above for rubygems).\n- npm is, by now, a familiar refrain. Strict separation between registry and repository source types, with only git (plus github special sauce) supported. Semver is enforced in the registry. Revs, branches, and tags are smooshed together when specifying from git[hub], but they're all as literal matches - no semver.\n- Composer behaves the least like the others, and the most like glide does now (though still, notably differently). There's just the one version field, and they compress a lot of information into it. But the dev- prefix they require (enforced by packagist) when constraining to a branch inherently resolves the potential for mistaking a semver range for a branch - the original case here. They do allow forms of aliasing which would allow a semver constraint to incorporate a branch, though that's to support a specific case.\n\nLooking through all this has helped me to see the real kernel of the problem here. Hopefully, it can help focus discussion.\nThe base issue is that we have several different namespaces for different types of versions, all of which potentially overlap. That overlap entails that, if all we have is a \"version\" string from the user, we may not know which type of version they actually intended. Autodetection can tell us what's available, but that's not the same as user intent. Loosely, the three types are what I identified in my article with the three images I dropped in earlier:\n- Branches - or, 'floating' versions that we expect to change over time (indeed, that's the express reason to rely on them instead of tags).\n- Tags - semver mostly, though not necessarily; the expectation is that these mostly won't ever change (though it is possible)\n- Revisions - immutable identifiers. The only reason to specify a constraint this way is if there is no associated tag, meaning that you've basically gone in and plucked out that revision yourself.\nAll six of the other tools have rules to clearly disambiguate how user input corresponds to these version types. User input alone is sufficient to determine exactly one version type to allow (with only one, specific, carefully thought-out exception). That all six tools adhere hew to this line suggests how important it is that the user be in clear and complete control over whether they're relying on a branch or a version.\nSome of these disambiguation rules rely on explicitness from the user - e.g., the branch, rev, tag fields - while others arise from limits on the types of versions offered by a source - e.g., a tool reliant on a registry that offers only semver (crates, pub, hex, npm) can safely enforce that all user input must be a valid semver constraint. For those which allow semver and versions (rubygems), if the input isn't a valid semver constraint, then it can be safely assumed to be a literal match on a plain version (which is still of the same general type).\nComposer is an outlier in that it allows slightly more overlap between the branch namespace and the version namespace. (Packagist allows semver tags OR branches). This is all in service of its goal of allowing dependees to specify a constraint that admits EITHER a tag series (e.g. 0.6.x) OR a branch from which the author creates tags in that series. This overlapping can either be done with explicit aliasing (as described in that link), or by just naming your branch e.g. 0.6.x (which packagist represents as 0.6.x-dev). However, if you were to push a branch named 0.6.8, packagist would convert that to 0.6.8.x-dev. Even literally specifying 0.6.8 will not match the branch. So there is overlap, but it's narrow and specific, not the default case.\n(In fact, the way that composer achieves this is to classify branches as existing in semver's specified prerelease space, which composer classifies using its 'stability' system, then allow users to select stability levels. In other words, they've formally defined a semver relationship between branches and tags, which means the namespaces are no longer 'overlapping,' but 'intersecting'.)\nNow, reading through these various approaches has made me think that I may need to make some changes to vsolver's version handling. I'd assumed a strict separation between the four types (branch, plain tag, semver tag, revision), but it may be better to not be quite so strict. I'm not sure how I feel about composer's approach - if allowing that particular branch-or-tag case is really worth the added cognitive and logical overhead - but if it is, I'll need to change it up.\nThat said, there is still a major problem here. Every single other system I've reviewed takes extensive steps to ensure that branch and tag namespaces don't get mixed up, and many take even more steps than that. Composer is the only real exception, and does so in a very specific limited circumstance which is still visibly obvious to anyone scanning a composer.json - and that includes the tooling.\nglide's current approach does not rise to this standard. It does not go the full distance of disambiguating semver/plain tags, branches, and revs, nor the lesser disambiguation of branch and tag.\nNow, having spent some more time reading glide's current code related to this, it makes more sense to me, and I understand better why the current approach has worked well so far. That's great. If I've been disparaging of that, I'm sorry. But we have a problem to solve that is qualitatively harder than every one of those other tools: there's no registry that can guarantee only semver to match against, and we have more vcs types to support than any other tool. glide has to rise to at least the level of rigor that the rest of the tools do on this front.\nThis could, probably, be done by keeping the single version field and encoding additional information into the version value. (I guess?) It could also be done with the typed fields I already described. Either way, the information has to be encoded somewhere in order to remove an ambiguity that six other major systems do not allow. If it's crucial that we allow that branch-or-semver use pattern that composer admits, OK. But that can, and so should, probably be its own discussion.\nNow, given that these six other solidly successful tools have encoded this same information and everything's been OK, I don't think it should be a stretch for glide. However, here are some points directly on the UX front:\n- One thing that good UX surely does is hide away unnecessary complexity, particularly for newer and less experienced users. However, it is also a tenet of good UX that such hiding should not be done at the expense of more expert users. The current approach does that by making it impossible for them to unambiguously specify their constraints.\n- I say \"expert\" users, but it's not even really them who suffer here. In an ecosystem without a registry, the thought isn't, \"I'm gonna depend on 2.x.\" It's \"I'm gonna depend on the 2.x {branch,tag}\". Asking people to provide this information isn't asking them to deal with a foreign concept - it's something they're already thinking about. There is a negligible amount of additional cognitive load here that doesn't already exist.\n- If it is foreign, then it's a lesson they have to learn to use a tool like this safely. That's a reality; autodetection doesn't change it.\n- This case is not analogous to the vcs field. In that case, there is only one possible right answer, so autodetection is possible. Where there is ambiguity, as in this case, unguided autodetection is not safe.\n- Doing this hampers other aspects of UX. For one, I can't look at a glide.yaml and know how someone intends to rely on other projects, because that information just isn't there. Knowing if someone's chasing branches or not is a handy thing to know.\n- The vast majority of the time, deps are going to be added via glide get, during which time it's perfectly fine to prompt the user to clarify their intent. There's ample opportunity there for helpful info text.\n- Requiring the glide.yaml to be well-formed with these appropriately-named fields means that most anyone hand-editing it will always have examples to draw from.\n- While relying on validation and error messages is sorta the UX equivalent of driving down the highway by bouncing off the guardrails, tight definitions for how these constraints have to work makes it very feasible to provide correspondingly clear, tight guidance.\nFinally, let's please remember that the risks here is not to one person at a time. Ambiguous constraints mean people cannot defend against upstream craziness. That makes it an ecosystem-level threat. That is, it's not \"Person A makes a mistake, and only Person A is affected.\" It's \"Person A makes a choice, and persons B, C, D, and E's builds break, they have to take drastic steps to fix it, which in turn might even cause further breakages.\" (e.g., they each fork A's project and alias in the fork, making B, C, D, and E become mutually incompatible. This screws over F, who relied on the previously-compatible B and C.)\n. sounds pretty good to me. couple notes:\n\nIf the string is a TAG, use the VCS REVISION for that tag\n\nwhen you say \"use,\" you mean what ends up in the lock file, right?\nvsolver emits both a tag and the underlying revision in solutions; you can keep both, or discard the tag.\n\nElse emit an error (or warning)\n\nwell...eh, timing.\nmaybe this just ends up being semantics, but because i favor an approach where the user's input gets turned into a well-formed constraint, with well-understood boundaries, independent of what happens to be in the repository, let me try rephrasing this in those terms and see if it still meets with your expectations:\n1. If the version string conforms to a pattern that indicates it's a VCS REVISION, then for the purposes of determining compatibility with other projects' deps, it will match only if the other projects' dep is also that exact revision.\n   - In git and hg, this pattern is 20 hex-encoded bytes (40 0-f chars).\n   - bzr's a little more complicated, but matchable.\n   - svn ???\n2. ELSE, If the version string is valid semver, then interpret it as a semver constraint, which will allow it to match only semver-conformant tags that pass the semver match check.\n3. ELSE, assume the version string is intended to match a literal tag name.\nIt would be possible (and I don't think harmful), to allow 2 and 3 to coexist - semver range, but also allow a literal tag as a fallback. That's only safe, though, if the literal match is used as a fallback - if it supercedes the semver constraint, then in effect, we're changing the semantics of semver ranges.\nHow does that sound?\n\nThe algorithm tweaked so that \"if isset(version) use version; else if isset(branch) use branch \n\nSure, though I think it might make the files easier to understand if glide were to reject having both branch and version present at the same time; seems like allowing both to be present would be confusing. Doesn't really matter to me, though.\n\nelse use HEAD on master\" (roughly speaking; details will be more nuanced.)\n\nYeah, there's a bunch more detail here. Default branch is one way to go, and the simplest one.\nJust spitballing, but, there is another option: it could be treated as a total, any-type wildcard. So, it could match a branch, or a tag, or any rev. In vsolver-land, at least, the version that ultimately gets picked is determined by the order in which the available versions are tried. That would mean:\n1. valid semver tags (in descending or ascending order; the tool controls that)\n2. non-valid semver tags (alphasort)\n3. branches (alphasort right now, though we could probably put default branch first)\nBranches could also be put before non-semver tags...that might be a good change to make in general, anyway.\n\nA strategy for programmatically updating existing glide.yaml files for this new fix.\n\nI have a few thoughts on this, but yeah, a strategy must be had. We ALSO have to retain support for old glide.yaml files, and have a way for interpreting them on-the-fly into the new system, so that deps using the old form still more or less work.\n\nThe remains a notable unsolved problem:\n If A requires B version: 1.0.0 and C requires B branch: feature/tinkertoys, what do we do to resolve?\n\nThat seems pretty straightforward to me: it's an unresolvable conflict. [re]solving fails.\nNow, there's one avenue I haven't yet explored - you could try to check and see if 1.0.0 and feature/tinkertoys have the same underlying rev. If they do, then they match. Outside of that, though, this seems like a run-of-the-mill example of a case where it should fail, because the constraints are incompatible.\n. Well...I mean, there are other approaches. But I think they necessarily involve ignoring version constraints in some way. There's two I can readily think of:\nFirst, you can try to just ignore the conflict: see if you can safely encapsulate B at 1.0.0 under a nested vendor dir within A, or do the same for B at feature/tinkertoys within C's nested vendor dir. I've talked about this as a possibility a fair bit, but doing it safely is far away. Plus, at least for vsolver, a pre-req will be swapping in immutable datastructures, basically so that we can rewind to arbitrary earlier failure points.\nSecond, there's always the static analysis approach: use static analysis to determine if C is type-compatible with B at 1.0.0, and/or if A is type-compatible with B at feature/tinkertoys. If either of those works, pick it as a solution.\n. Hmm, yeah, it does sound like the issue might be with glide not pulling in force-pushed tag changes as it should. Will have to investigate...\n. Probably not, because using shallower clones decreases performance significantly in the longer term.\nhttps://github.com/CocoaPods/CocoaPods/issues/4989#issuecomment-193772935\n. Providing a choice to the user about how the repositories are cloned could make correct operation of the tool difficult, if not impossible. We take whatever steps we can to ensure the minimum amount of network activity.\nEfforts to further optimize and reduce network activity would be welcome, of course - you'd need to dig into the code and find ways of doing so that don't break other things.\n. CI environment's aren't an easy question - particularly the disposable ones provided by most of the CI services. If you spin up from nothing every time, then there's no question that the costs can get high.\nIt might be feasible to have a param that, on install (and ONLY install), makes the choice to use shallower clones. That's one approach. However, it's still generally slower than grabbing tarballs when they're made available by the upstream source (which github does). And that's probably slower still than using things like, say, CircleCI's disk caching mechanism to carry pre-cloned repos between builds. Most importantly, though, those approaches don't potentially compromise the correctness of the system in the same way that messing with git clones does.\n. @medcl checking in the glide.lock is really a strongly-preferred method of operation. Particularly in the Go ecosystem, you get very little no build reproducibility without it.\nIt also allows considerable performance boosts (though I can't recall offhand if glide install has those implemented right now). When you have no lock file, glide has to recompute a lock file on the way to installation. That necessarily means it has to clone repositories, in order to get the version information contained therein. If, however, you have a lock file, and the upstream source is something like github.com that offers tarball downloads for refs, then it's possible for glide to skip the clone altogether and just grab tarballs.\n. @yanyiwu yeah, I just looked through, and it's...implied, at best. Seems like something that should probably be stated more clearly.\nTo be clear, there are use cases for not checking in glide.lock...but my goal, at least, is to reduce that set to nonexistence.\n. > tools that don't use the vendor dir\nCould you give an example of the tools you mean? Anything compiled with go 1.6 (or 1.5 with GOVENDOREXPERIMENT=1) and relying on the stdlib build package should pretty much pick up vendor dirs transparently.\nI know there are still rough edges in places - my own vim setup still has some issues - but specifics would help.\n. @mattfarina seems like we should be able to add a flag for --serial-fetch or something, no?\nI'll make a note of this in vsolver - I haven't implemented parallel fetch there yet, anyway, so the timing of this report is good.\n. we don't right now, no. we do have a logical choke point we could exploit to enforce it relatively easily, but there hasn't been a direct complaint about it yet over there, so I've deferred it in favor of other things. . The only one i've been able to come up with doesn't necessarily qualify as \"good\" - probably more like \"passable\" \ud83d\ude04\nWe use the aforementioned choke point to throttle down all network activity to the point where all network calls are serialized. An environment variable (preferred) or flag (i'd rather not increase the surface area of the interface for this) then determines whether the throttling behavior is active.. I'd been considering for a while the idea that having a field for glide's version in the manifest would be useful, if only for figuring out how to parse manifests, given the possibility of future change. But if we're talking about a semver range...I'm confused, is the idea to expressly have features that older versions of glide can't work with? Because...\n\nThis would allow cases like a feature being added to the standard library and being required by the application.\n\n...this seems like it's just about the Go version. Really, a go toolchain version dependency and a glide version dependency seem orthogonal. I guess I'm missing something?\n. Sure, I think that all makes sense. #396 is there to address the specific issue of the not changing the timestamp if nothing's changed when a new lock file is computed. I think fixing that would address your issue?\n. I'm not sure where @mattfarina and @technosophos stand, but I view this as a major (though not necessarily bad) additional class of behavior. In the terminology of my writeup, adding this totters on the difference between having a PDM and an LPM.\nThe biggest issue I see with it is that it's actually got nothing to do with the depgraph of the project itself, and conflating it in could create unnecessary problems. For example: say that your actual source code depends on github.com/foo/somelib, and that one of the binaries you want also depends on that lib. If the deps are all treated as part of the same vendor - which seems to be what you're suggesting - then your project and the binary you want to install have to agree on a version of github.com/foo/somelib to use, even though, by design, they'll never have to be compiled at the same time. In other words, it's a conflict where there needn't be one.\nA better design is to keep separate the dependencies for your project and any supporting binaries. That's mostly feasible, except that if you want to truly pin them, you still need to have some kind of locking in place, because it's not (yet!) safe to trust the Go ecosystem to have done that. So...there's still a need for some level of control from within your manifest, I guess.\n\u26c5 \u26c5 \nI need to ponder this one...\n. > I do not see a use-case where I would want a binary and a library from a same repo but at different versions.\nIt's just the next step here - say, wanting to have gometalinter or go-bindata. There's no reason I can think of that either of those particular tools should need a shared dep tree with your source - but maybe I've missed one?\n\nAs I said, my use-case is mostly for code generators, and it is usually important to use the same version of the lib and the generator.\n\nRereading the original issue, you listed linters and code generators, but I was focused on the former to the exclusion of the latter - sorry. Yes, where there is a joint binary and library, as in tinylib/msgp, they of course should be at the same version, and so should be part of your project's depgraph proper.\nOTOH, tinylib/msgp is the only lib I happen to be aware of (just coincidence there) that works quite that way. As I mentioned above, I can think of no such need for go-metalinter or go-bindata. Now, that's not a reason not to support this pattern - just noting that, really, there are two distinct cases here.\n\nThe only issue I would have left is that Glide does not seem to pick-up packages imported in main packages (which totally makes sense if you don't plan on installing the binary)\n\nThis may be the rub, more than anything else. The only reasonable general assumption glide can make is that it should follow the import graph from the current project when deciding what dependencies to bring in - and that necessarily excludes any main packages contained in deps.\nI suspect there's probably an elegant solution here, one that covers both use cases: glide could do the static analysis to determine whether the main project and supporting binary's depgraphs should be conjoined or not. Or, even if it's explicit/not based on analysis, a simple configuration option that lets glide then take care of the rest.\nI think that'd probably end up being tricky to do everything sanely, though - not surprising, given that this starts bridging the gap between LPM and PDM. IMO, if you want to try for a PR, go for it - but for now, the best approach may be a complementary tool that works for at least some cases, helps map out the problem space a little more, and can then later be merged into glide once the implications are clearer.\nThen again, it's not up to me :)\n. @xeger idk what they think about scope creep, but the good news is, i'm probably gonna end up adding support for optionally incorporating dependencies' main packages into the depgraph as part of sdboyer/vsolver#36.\nThat won't be available to glide until #384 is in, though, and even then, glide will have to decide if/how to incorporate that option into its manifest.\n. Updating to note - I didn't actually end up including support for this in sdboyer/gps#36. However, I did open a separate issue - sdboyer/gps#42 . That doesn't mention this use case explicitly (it's focused instead on facilitating e.g. glide get), but nevertheless, it's the mechanism by which a tool would be able to easily support it.\n. I don't think gitignoring vendor shouldn't affect things.\nMaybe have a look at #360, see if that seems like it might be your root cause?\n. IIRC, @mattfarina had some concerns about the licensing implications of stripping out source files. Not sure if it extended to test files, though.\nAbsent licensing issues, I'm +1 to this being an option. Actually, I'd argue it should be an opt in the manifest, not a CLI opt, b/c that way the behavior will be invariant across all users of the project. It's a nasty gotcha to require users to make a workflow change for this or that project when it can easily be avoided.\n. I think this is another flavor of a known issue: #320 \n. The basic reason for them is because, even if you generally depend on e.g. the package github.com/foo/bar, it doesn't mean you depend on github.com/foo/bar/baz. And, if that baz package has additional external dependencies, then you'd have to fetch that, too, even though they'd never be a part of the build. This will, particularly if you're depending on a monorepo, significantly reduce the size of your import space.\nThis is the essential problem of project-level vs. package-level analysis. go get has it easy and just does package-level analysis, but we also have to incorporate project-level, because project-level (aka VCS-level) is the only level at which proper version information is available.\nThat said, I'm murky on subpackages need to be explicitly recorded. Thus far, I haven't seen the need to have them explicitly recorded in the new engine I'm working on, given that they can be determined directly from on-disk analysis. It may have had something to do with trying to make things work with os/arch. I vaguely recall that @technosophos may have been the one to add them...?\n. This kind of flattening - that is, pulling transitive deps up to the top-level vendor folder - is one of the foundational things glide should generally be doing already...it's not immediately clear to me why it isn't now. Do things get saner if you run with --update-vendored --strip-vcs --strip-vendor?\n. Honestly, I'm not sure why that cleared it out either. Glad you got it settled, though \ud83d\ude04 \n. > when we use a tool, for example,vim,brew or others, we dont care about their version as long as it can work.\nI think this is a false comparison.\nYou might not care about what version of vim, brew, or others that you're using, but you're afforded the convenience of not caring because you ARE getting stable versions of them. That's a guarantee provided by the design of whatever system you're using to get those packages.\ngo get is not designed to get stable versions - just, whatever the latest HEAD is. Ironically, this is one of the arguments for having something like glide exist in the first place.\nThe best, most stable thing that could probably be done is providing a script that allows installation via something like curl <URL> | sh.\n. @elan100cs it's an important case, and not currently handled by anything else. But, we're planning an orthogonal config option for the next major release that covers it. so, still no need to keep these around :). This may be related to some special handling logic that went in to glide in order to accommodate the core team's committing golang.org/x/netcontext into a vendor dir. I hadn't seen that most commit @veqryn referenced before, but maybe that's somehow created a new problem, or made the existing one worse.\n. ...or, yeah, it's the issue with needing to deal with release tags, as well as build tags, when deciding what to analyze.\n. @wchrisjohnson by default, glide init should look for a godeps file and pull versions from there. did it not do that?\n. @mattfarina ahh, right, i see now\n@wchrisjohnson i know that @mattfarina recently added some internal capabilities oriented towards working backwards from a rev/hash to a version, but i don't think it's exposed anywhere yet for you to be able to figure this out yourself.\nSo there's actually still some clarity needed here - when you say, \"starting with glide from scratch,\" that means no other package manager in use, but you DO have some existing code checked into your vendor dir? Did you populate that vendor yourself somehow, or was it copied from GOPATH? A more detailed breakdown of the order of things you're doing, and where the functionality you want would ideally fit into that process, would help me formulate a clearer response.\nNote - i do know that the new engine (#384) will always issue a glide.lock file, at least, containing both a version and a rev, if a version exists to go with the rev.\n. @wchrisjohnson ok, sounds like you and @mattfarina have this covered\n. > Files with build tags that do not apply to the current Go version should be ignored when traversing the dependency graph.\nOperating in the current context - OS, arch, and go version - is not a safe general approach. It means that the generated glide.lock is only applicable for use on the same OS, arch, and go version, which makes for a lot of gotchas in pretty standard circumstances: \"sorry {Linux/OSX} users, I have no idea if this will work for you or not.\" \nCertainly, considering all possibilities is a considerably harder problem than simply dealing with the current context. But it's not unsolvable. glide doesn't deal with it completely now, nor does the new engine. But pretending the problem doesn't exist, and generating non-portable locks, is too harmful. It's better to solve the problem when we can, and bail when we can't.\n. @arschles: \n\nI was suggesting earlier that the glide.lock be complete, and therefore applicable to all environments, but the vendor folder end up with only the dependencies that apply to the host's build environment.\n\nAhh, sorry, I misunderstood. Yes, I'd say that's generally the ideal - at least for the default case. As @mattfarina noted, of course, there's the question of whether you intend for a committed vendor dir to be sufficient for either cross-compilation, or for a different arch at all.\nTo my mind, if/when glide is able to parameterize on build tags, then this is something that's pretty easy to control with a flag (preferably in the manifest): indicate if you want a cross-platform set of deps, or not. If your workflow does not involve committing vendor, then it may be better not to grab everything...unless you're expressly interested in cross-compiling.\n\nInteresting idea, but my fear would be that any repo would need as many glide.locks as there are build environments - a \"combinatorial explosion.\"\n\nWe were discussing this very issue in the #vendor gopher slack the other day, actually. While it's possible it could get nasty, I think it's also entirely possible to write a lock file that, rather than expressing a fully separate tree for each different combination of build tags, just annotates each individual dep. This would address most of the combinatorial problem.\n. This is a known issue, related to #252, and also sorta-explained in #321.\nThis particular issue is already fixed in the new engine, but that's not ready for primetime just yet.\n. > Always ask \"what would a paranoid person who has been repeatedly burned by\n\ntrusting ANYONE want?\".  That's me. :)\n\nthis calls to mind a reddit conversation we had :)\n. yep, this is a known issue, and it's a goal to support not updating everything at once. see #252 (among others).\n. unless i'm missing something (and it's late, so that's not unlikely), it seems like the only problem with @gobwas's requested structure is that he wants to put deps under vendor/src, rather than under vendor itself.\nThat doesn't seem like the substance of the request, though. It seems like the main ask here is to have glide.yaml in a parent dir of his own project's go code, and have that control the subdirs. That, I think, should work fine.\n. @gobwas no, I think we're back to a misunderstanding now. glide does not mess with GOPATH, and glide does not allow a configurable vendor/ directory, because as @mattfarina said, that IS a product of how Go works. We can't, and don't want to, change that.\n. mmm, i see how my comment left ambiguity, though:\n\nit seems like the only problem with @gobwas's requested structure is that he wants to put deps under vendor/src, rather than under vendor itself.\nThat doesn't seem like the substance of the request, though...\n\nWhat I was saying here is that that's simply not possible, as it's not how vendor works - the specification entails that there is no src dir under vendor, unlike with normal GOPATH where everything lives at GOPATH/src/<import path>. And glide doesn't do GOPATH manipulation, because other tools over the years have made it amply clear how brittle that makes your environment.\nWhat I was trying to say, @gobwas, is that as long as you drop that src/ dir from under vendor, then then the corresponding glide.yaml at the root will cover deps for everything under src/my_app.\n. indeed, once we have that new system in place, ensuring alpha order on the deps in glide.yaml will be totally feasible; it will have no bearing on the outcome.\nOTOH, there's also a school of thought here that says it's better to preserve the original order the user declared, so as to avoid meaningless churn in the file itself. i don't really have an opinion as to whether one or the other is really better.\n. @dudymas I don't think that'd be a good idea. The .gitmodules file is basically a less capable version of glide.lock (in that it only helps with git-based dependences). \nAlso, submodules induce a rather specific workflow. Trying to have glide support both a with-submodule and without-submodules workflow would just muddy the waters for everyone. That's especially true, given that the feasibility of using submodules could change without warning due to just a small shift in the depgraph - whoops, a new transitive dep, and now suddenly there's some bzr mixed in there!\nWriting a glide plugin could be a way to do it, but IMO, it'd be opening a can of worms to have glide itself support writing redundant information out to disk in order to support one specific (and not really encouraged) workflow.\n. Oh, and also because, using submodules isn't likely to work at all after #384.\n. I've been musing on this issue a lot recently, since I've been working on the static analysis piece in vsolver. Deciding what's best to do when static analysis encounters a problem (which may or may not mean that the code won't compilable) is a big question.\nMy thoughts so far, in rough order:\n- The key to keeping this sane is being able to correctly categorize static analysis failures. Such categorization would let us decide whether it's safe to proceed or not.\n- It's important to remember that most Go tooling works so well and smoothly because it only operates on well-formed code. Dragons await when you step off the island of requiring syntactic validity.\n- If possible, it's probably good to be a little more lenient with errors in the main project. Doing so could make things a LOOOT better for users.\n- If there are errors in statically analyzing deps, though, that's pretty much cause for trying another version of that dep (or an abort); otherwise, we're knowingly pulling in broken code that the user doesn't necessarily own.\n. @ulrichSchreiner yep, i can't think of any real use case for NOT fetching transitive deps here.\n(note that this issue is also fixed by #384, as it stands right now)\n. @gnhuy91 huh...that's some weirdness in those errors. have you set up any mirrors, e.g. via glide mirror?\n. yeah, glide is clearly chasing its own tail, here - treating the repo in the source cache as an upstream, rather than being the actual cache repo.\ni know we've been slow to move on this - sorry. i can't promise an immediate resolution, either :( but the output everyone's reporting is pretty strongly indicative of the class of problem. hopefully one of us can find time to get to this soon.\nin the meantime, if someone could create some steps to reproduce, using publicly-available code, that would be TREMENDOUSLY helpful.. So, it is quite interesting that @neocortical's modification makes a difference. But I don't think it's the right solution. The IterativeScan() path deals with packages that have slightly non-vanilla structures - there are different package <name>s declared in the same dir (and not <name>_test; pulling out that call would cause glide to begin failing in those cases.\nBut it still tells us a lot about where the actual problem is - so that's quite helpful :) My guess is that somewhere higher up in the call chain, an import path SHOULD be used, but an absolute path is being used instead.. @s-urbaniak atm, glide uses a simple algorithm - first-to-c's constraint wins.\nvsolver is a new engine that we're working on integrating into glide (#384) which will change that to allow constraint reconciliation and formal conflict handling in arbitrarily complex depgraphs.\n. Yeah, there's a lot of discussion around this. Probably the best issue for the full view of what's upcoming is #252 . tl;dr - it's very much a planned feature, but one that will likely only get here once the new engine is in place.\ntill then...well, yeah, I do that same, awkward hash editing thing that you do \ud83d\ude26 \n. @silasdavis - just to add a bit to what @mattfarina said (which is all spot on)\n\nthe solution would be to give preference to glide.lock dependency versions of my dependencies unless I explicitly override them in my glide.yaml.\n\nThe new engine (#384) will - though perhaps not right away - allow using locked versions expressed in a transitive dep's lock file as a \"preferred\" version. Basically, that means it'll try to use the locked version, unless another constraint makes that impossible. This has been my planned solution to the issue you're raising for several months now; we'll have to see how it goes in practice, but I think it'll cover the issues you're concerned about.\n. Issue for lock-preferred versions is sdboyer/vsolver#16\n. > Most projects I am depending on are not using version ranges in their glide.yaml, perhaps part of the answer is to see more tagging by dependencies, but there is still is a hangover from 'just depend on master' 'google does it' and there's not that much semantic versioning.\nSadly, this is the very large-scale catch-22 in which the Go community is currently caught. People do not use version ranges/semver - indeed, often no tagging at all - because there is no tooling to support it (c.f., golang/go#12302); at the same time, there is no tooling to support ranges and general matching because no one uses it. The only thing we can really do to break that up is to build a tool that supports version ranges/semver without hampering other use cases, and hope that then unblocks the other side of the equation.\nglide aims to do just that, and once we get vsolver in, it'll do so, transitively and completely. (right now, glide still relies on \"first dep to state a version requirement wins\")\n\nHowever if this was the case, why bother having the lockfile? These approaches are slightly at odds.\n\nThey're complementary, and used at different stages in the process. Manifests describe constraints with many possible solutions; lock files describe a complete, repeatable build, more or less as you noted. If you want a ludicrously-much longer explanation, I wrote this \ud83d\ude04 .\n. Oh, and...\n\nPerhaps the general answer would be to allow to specify conflict resolution strategies. This adds complexity but probably necessary complexity. Gradle (which I'm sure you don't want to be as complex as!) allows you to specify default strategies or handle individual cases.\n\nThis is something we've started to explore. I have one pet strategy I'm particularly hot to try out, but a number are possible, and they can probably be mixed together. There's also benefit to be had from Go's easy, fast static analysis - we can do a lot of inference and possibility narrowing without needing user intervention. \nIMO, though, we start dealing with conflict resolution strategies later - it's less of a priority than getting the community to take up some sane versioning strategies.\n. > Actually I have read and shared your blog post before!\nyay! \ud83d\ude03 \ud83c\udf89 \ud83c\udf89 \n\nI do see the approach of having glide up upgrade everything including transitive dependencies using manifests, particularly when you have multiple paths to different versions of the same dependency -- perhaps you want to upgrade to the latest available for stability.\n\nSo, the way vsolver works right now (as this discussion is increasingly not applicable to glide in its current form) is to allow you to specify that all dependencies should be updated - that is, their locked versions (if any) should be disregarded - or that only certain specific dependencies should be updated. Neither of these let us bypass version constraints specified in manifests, of course - it just lets us explore the full range of version options allowed by those constraints.\n\nBut the argument for glide uping upgrading your direct dependencies and then trying to use lockfiles for their transitive dependencies is one of repeatability.\n\nIndeed, there is additional stability afforded by relying on versions of transitive deps that your dep has actually tested with (we assume), as opposed to \"should work with\" as indicated by some version range constraint. And there's a strong argument to be made for erring on the conservative side, which would mean keeping those transitively-locked versions even when the \"upgrade all\" flag is passed (assuming they still satisfy version constraints).\n\nI think supporting both of these is a good idea\n\nYeah, I think it might be a saner default to have things operate in this conservative fashion. I'll keep it in mind - I haven't really dealt with this specific question yet, as I haven't implemented the preferred versions logic. That said...\n\nand probably requires some sort of lightweight 'conflict resolution strategy' if you want it to work per dependency.\n\nIt's important to clarify one thing here: there's two different senses of 'conflict'. One is simply where a version of a dep (e.g. one from a lock), doesn't satisfy a version constraint. This is a normal occurrence, and not really a \"conflict\" per se; when it happens, we just move along to the next available version and try again.\nAnother instance of this first type of conflict occurs if we encounter two separate project's constraints on a third project that are mutually exclusive. This may seem like a stronger class of conflict, but we still handle it the same way: keep trying other versions to see if any of them DON'T have mutually exclusive constraints.\nThe second type of conflict - when we might want to consider a conflict resolution mechanism - only occurs when we've exhausted the queue of possible versions for a given project, with none of them satisfying all the various constraints. Right now in the solver, the only option we have is to trigger backtracking - essentially, walking even further back up the versions we've selected and trying new combinations, to see if some other combination of versions can work everything out.\nIn the future, however, we could also choose to sidestep such type-2 conflicts. My aforementioned pet strategy is to see if it's safe to just allow the conflict, which we could do by putting one version of the conflicted transitive dep under a nested vendor dir, and keeping the other version in the top-level vendor dir. \"Seeing if it's safe\" is quite hard, though, and this is an approach with serious possible side effects. Not something I'm approaching lightly.\nPer-dependency is...even harder, and presents a level of choice to the user that I think would be more hindrance than help. To that end...\n\nyaml\n- name: github.com/tendermint/tmsp\n  version: 7ffd2899092f47110a5ffebe20247a9b7f80f4ad\n  transitive:\n    - lockfile\n    - manifest\n    - godeps\nor:\nyaml\n- name: github.com/tendermint/tmsp\n  version: 7ffd2899092f47110a5ffebe20247a9b7f80f4ad\n  transitive: ignore\n\nHmm...how to explain this.\nIf we were to allow these additional properties, I think we actually make the overall problem worse. What happens when two different projects, both relying on github.com/tendermint/tmsp, specify different directives for transitive? What does it even mean to disagree on that property? Is there a way to determine equivalency, like we do with versions by transparently looking at the underlying revision?\nThe only real answer is that we have to consider that disagreement itself a type-1 conflict. Maybe, maybe, we could say, \"if one is root then override the other,\" but that just solves one problem. What we've really done here is just open up more surface area for disagreement between projects, and on a fairly abstruse point that, I'm pretty confident, almost no one will really know WTF's going on when the solver fails because of a conflict like this. Inscrutable solver failures are the path to dependency hell :)\nWe have to consider them a disagreement because those directives would necessarily have to control the way that information itself flows into the solving process, rather than just being different information within the structured flow. I'm honestly not even sure what effect such changes in the information flow would have on the algorithm's consistency or correctness; that's a level of meta-control that I have not yet seen the need to allow in vsolver (which, to be clear, is generally already quite abstracted and flexible).\nFor reference, the way vsolver works is to have a single ProjectAnalyzer which the tool relying on vsolver injects. The ProjectAnalyzer is responsible for deciding how to interpret all types of manifests and/or locks. What that means should be reasonably evident from the WIP analyzer for glide. So, a tool tells vsolver what the version constraints are, but vsolver is still deciding the order in which to do things. (SAT solvers are incremental algorithms, and as such owe most of their mechanics and correctness properties to ordering.)\nNow, this might actually be loosely compatible with what you're saying - glide could allow directives like that in the yaml file, and use that to determine how its analyzer works. But the engine is still going to decide the order by which possible solutions are visited and tested, as its fundamental responsibility is dealing with type-1 conflicts in an ordered, reliable fashion.\nIn general, I think the much simpler solution is the 'lock-preferred' approach with perhaps another SolverOpts property that allows for granular control over that. That, and/or providing overriding control to the root project: if you want a particular transitive dep not to change, then you name an override constraint for it in the root. Overrides - not yet implemented, but more or less trivial - let the root project control the depgraph, but are ignored if the project is not the root. That way, you don't mess up other peoples' flexibility.\n. Just updating to note that sdboyer/vsolver#16 is now done :)\n. @silasdavis no config will be needed. However, since this is part of the new vsolver engine, the behavior won't be available until the new engine is merged - #384.\n. gps-integration is where the work currently is. things have gotten a bit sidetracked in the last month, and my obligations to the pm committee have cut into the time i'd have for this, as well. so, it's progressing, but i'm sorry, it would be unwise to give an ETA :(\nthere's also #565 , which is a bit of a checklist of issues.. Fair, yes, we should probably provide a better error message. Huh. That's an interesting case. Maybe I've forgotten some arcane rule that we're following with that, but just off the cuff, I'd tend to agree.\nCould you open an issue against https://github.com/Masterminds/semver? That's where the fix would go.\n. Sorry, I wasn't clear - it IS an implementation error. Before writing my previous comment, I added a quick line to one of Masterminds/semver's table tests to see if 3.0.0 is accepted by a <=2.x constraint. And lo, it is.\nSo the documentation is accurate with respect to how the semver lib works; we can't update glide's documentation until the issue is addressed over there.\n. > it IS an implementation error.\n. Actually, I'm not sure that it's a bug with semver's master branch - i did my test against 2.x\n. Ah cool, OK - so then it's probably fine to fix it in the glide docs now, as the problem is just with 2.x. And that's not primetime yet.\nglances sidelong at his TODO list\n. Thanks!\n. ### tl;dr\nI think there are maybe just two situations we really want to uncover and potentially warn the user about:\n- Deps that enter the depgraph unconstrained, or with only a \"preference\" from e.g. godep, a la #479 - so that the user can add a constraint to their manifest.\n- Constraints expressed in a [root] manifest on transitive dependencies, where another project with that direct dependency also expresses a constraint - so that the user can maybe drop that constraint from their manifest.\n\n\nIn the context of rkt workflow, it may make sense to have a glide switch that warns (or abort without side-effects, I'm not sure) at update time whenever a lockfile entry does not have its counterpart in manifest.\n\nHmm...I'm not sure this is the best approach to promote. Maybe it's fine, but let me explain.\nOnce glide switches to vsolver with #384, there are a handful of notably different contexts under which a package can enter the depgraph (this may also be true of glide right now, but I haven't applied the same rigorous analysis there):\n- Via the root project, with a proper constraint expressed in the root project's manifest\n- Via a dependency, with a proper constraint in that dependency's manifest\n- Via a dependency, relying on inference from a different system, like godep, that doesn't have manifests - only something like a lock\n- Via the root OR a dependency, purely by reading the import graph and without a constraint expressed in the project's manifest\nLemme split this up.\nThe Ideal\nIn an ideal world - one that I hope glide well help us to achieve - pretty much everything is coming from the first or second. We're a long way off from there, but this is one of those \"be the change you want to see in the world\", or at least \"fake it till you make it\" situations - the only way we get there is if everyone does it.\nIt's important to understand that constraints expressed through either the first or second route have the same effect. If your dep, say A, already expresses a constraint on its dep, say B, there is no benefit to re-expressing that constraint on A in your manifest. In fact, it's harmful.\nWhen you pull up that constraint on B, you're effectively preventing A from being able to change its own constraint. Even if your manifest allows newer versions of A, and even if you explicitly request an upgrade of A, if newer versions of A have changed that constraint on B that you copied up to your manifest, then you'll be stuck with your original version. In other words, duplicating constraints silently masks the natural avenue you would otherwise have for discovering the possibility (not necessity!) of bringing in a new version of A.\nIf you take an even wider view, things get much worse. Say that B depends on C, which depends on D. If everyone in that chain uses \"tightly constrained manifests,\" and there's a security update to D, then C has to release a new manifest which takes the new version of D, then B on C, then A on B. That'd only take...what, weeks? months?\nThis is a subtle issue, and can be hard to appreciate from the perspective of any one project in the ecosystem. However, if you look at the bigger picture, too many projects being too restrictive in their manifest constraints can cause the entire system to seize up. I suspect this is the reason why cargo defaults to interpreting e.g. 2.0.0 as ^2.0.0. At that point, the only option you personally have is setting override constraints - where the root project dictates the constraint for packages, and everyone else's constraint is ignored - which, in turn, creates its own tragedy of the commons.\nThe bottom line is, you're doing more harm than good if you just reflexively pull up all your deps into your manifest. That's really not what manifests are for - it's what lock files are for. Trust your lock file! Though...\nGritty Reality\nFirst and foremost, you can't really trust your lock file right now, because glide does not allow you to do minimal, targeted updates - #252. (This is already fixed by vsolver; #384). So for now, at least, you may have to pull up some of those constraints to defend yourself against that problem. I'm hoping we have vsolver in before gophercon, though, so that concern should be short-lived.\nThe bigger issue is when you have dependencies entering in the third or fourth context - via a godep-style lock, or with no constraint at all. Now, the third isn't quite so bad - we get a lot of stability out of that, and we were just discussing its implications the other day in #479. But still, it's generally unwise to have something in your depgraph that's totally unconstrained.\nToday, when unconstrained, glide will pick the first available version it sees (idk the exact algorithm for what determines that), and stick with that version. Once the switch to vsolver is made, it will attempt all available versions, in the following order:\n1. Semantic version tags, in descending order (with prereleases - alpha, beta, etc. - forced to the bottom)\n2. Branches, in descending lexicographic order\n3. Non-semver tags, in descending lexicographic order\nClear rules and ordering are helpful, but it's still probably a good idea to add some constraints in your root. Problem is...projects might, at any time, adopt glide, at which point we're suddenly back in the 'ideal' camp, where you want to avoid duplicating deps.\nThe Upshot\nGiven all of this, it seems to me that there are two things we really want to uncover and potentially warn the user about. (this reiterates the tl;dr):\n- Deps that enter the depgraph unconstrained, or with only a \"preference\" from e.g. godep, a la #479 - so that the user can add a constraint to their manifest.\n- Constraints expressed in a [root] manifest on transitive dependencies, where another project with that direct dependency also expresses a constraint - so that the user can maybe drop that constraint from their manifest.\nThoughts?\nI realize this is a lot. Hopefully it makes decent sense. Happy to try to clarify further if needed \ud83d\ude04 \n. @lucab no worries on the delay, thanks for the response. Also, @thockin or maybe @vishh, it'd be great to have your feedback on this.\nI think this may be too tricky to solve in glide's current architecture given the difficulties around #252, but @mattfarina might have some ideas about how it could be accomplished.\nBut, for the post-vsolver glide world, I've opened sdboyer/vsolver#46. I don't think the implementation should be terribly difficult.\n. Oh, though:\n\nyour TLDR proposal should be enough to help us in most cases.\n\nIs there a particular case you can think of that I've missed? Or is that just standard, totally-reasonable \"That sounds nice and all, but I won't actually trust this wild idea until it's covered in battle scars\" engineer hedging? \ud83d\ude04 \n. Yep, big +1. \nAlso, this is what vsolver does already. If you're seriously considering merging in vsolver anytime soon, you might want to hold off on doing this work, as it'll be redundant.\nThat doesn't necessarily mean #384 itself per se, as that's about using the solving engine for making actual decisions. It could just mean merging in vsolver in order to use the SourceManager as a workhorse. That would probably entail other changes, too, but it's still a smaller target. (we can also get sdboyer/vsolver#27 squared away, too)\n. @mattfarina sure, makes sense. It's near enough to MVP now that I do have docs near the top of my TODO list. Those should help.\nWork towards a central cache might also be an opportunity to catch up with the piece that's more easily grokked (the SourceManager), which could make the rest of the grok less daunting. It'd also make the transition itself less significant for glide in general.\n. @dmitris you can set the location of the cache, though somewhat indirectly - you set the location of glide's \"home\", and the cache is located under there. So, no, you can't set it to an existing GOPATH.\nThere are two separate things in your question, though, so lemme address them separately\n\nsuch as a different GOPATH where you already have the correct origin/version of the dependencies\n\nIn the general case, the only safe assumption we can make is that GOPATH is an unkempt mess of versions, specifically because GOPATH tends to have been populated by go get, the honey badger of versioning. Inferring the user's intended version from them is the source of a lot of the problems that drove the creation of something like glide in the first place.\nThe good news there is that the init process is generally responsible for pulling the information from your GOPATH into the glide.yaml manifest - so that information can still be used. But it's not really appropriate to use at solve-time, which is more what this issue is about.\n\nso that they would not have to be fetched over networked. For us it would greatly speed up the builds.\n\nThis is much more doable, and is in part what the --use-gopath opt is intended to accomplish. However, that only helps for the specific situation where there's a repo on your GOPATH that's not in the cache yet - which, the more you use glide, becomes an increasingly uncommon situation. So, while copying the repos from the GOPATH to the cache could be a bit of a one-time speedup, it sounds like you're thinking of across-the-board gains. I'm not sure how that would happen; maybe you're imagining that this central cache would do something it doesn't?\n. I think you probably want to run most of your glide commands - get, update and install - with --strip-vcs --strip-vendored --updated-vendored. This will give you a vendor dir that's free of .git directories, allowing you to commit it. Then, you'll no longer have to re-download those dependencies in your build environment.\nIs that what you're looking for?\n. IMO, the case @mattfarina presented in the OP actually has very little to do with glide. This is the kind of thing that's easy to go in circles on, because the question we're asking is kinda circular:\n1. What is the network URL from which a given rooted import path should be sourced?\n2. What import path does a given network URL correspond to?\nThe go toolchain has variable answers for the first (owing to the regex-cum-?go-get=1 behavior that admits multiple schemes), and no capacity to give anything other than one, strict answer to the second.\nglide, even today, has different, more variable answers for the first, and a looser, though still mostly single answer to the second. That repo field is what blows it all wide open: \n- It means that both the client and the server (via a ?go-get=1 redirect) can service a rooted import path from an arbitrary URL - and that one can supercede the other, or combine with each other. \n- It also means that a single repo could, in theory anyway, serve multiple rooted import paths. \nSo, as @albrow pointed out over in #298, adding the repo field technically means glide has already broken go get compatibility. It's already possible to express import path->network location relationships that go get would miss. This is not because of differences in parsing, but because go get doesn't know about these client-side transforms. This might seem like a different kind of compatibility, but it's not  - that's just the circular nature of the problem playing tricks.\nTake, for example, the particular case presented in the OP:\n\nyaml\n- package: example.com/foo/bar\n  repo: https://example.com/foo/bar.git\n  subpackages:\n  - baz\nAnd then reference example.com/foo/bar/baz in their import statements.\n\nThe only reason we're talking about this case is because the obvious transformation from repo to package is obvious. And yet, this:\n\nyaml\n- package: github.com/Masterminds/semver\n  repo: github.com/sdboyer/semver\n\nis TOTALLY go get incompatible, but glide supported it just fine in #384 for several weeks. In the game of go get compatibility, these are not different cases. Trying to separate these cases is a mistake, based on a superficial red herring - the obviousness of the transform for this particular case.\nMoreover, the red herring is harmful - it takes us wandering into the territory of the second question I initially gave - \"what import path does a given network URL correspond to?\" Here's why:\n- First, they're not logically equivalent. If example.com/foo/bar.git == example.com/foo/bar, then example.com/foo/bar.hg == example.com/foo/bar...so, example.com/foo/bar.git == example.com/foo/bar.hg?? Clearly not, so, how do we know when these equivalencies apply?\n- Second, though related, is that it's impossible to know without inspecting the contents of https://example.com/foo/bar.git whether it internally expects to be referenced with or without the .git. All answers to that involve code scanning, and some involve import path rewriting. Also, lots of new combinatorial failure modes.\nBottom line: we can't answer any of these classes of questions, or even know how to apply configuration that a user has explicitly given, until we've inspected the source. And THAT is itself version-specific...because what if the author of example.com/foo/bar reads this discussion, and changes its internal root import path from including .git, to not including it, or vice-versa? Now, no matter how you declare it, it's a mismatch for osme part of the history.\nSo, my thought: glide has already broken go compatibility. Embrace it, but do so by adding regex-based matchers. Something like this:\nyaml\n- repo-patterns\n - my-ghe\n  - pattern: '^(?P<importroot>(?P<root>github\\.example\\.com)/([A-Za-z0-9][-A-Za-z0-9]*[A-Za-z0-9]/[A-Za-z0-9_.\\-]+))(?P<packages>(?:/[A-Za-z0-9_.\\-]+)*)$'\nTotal pseudocode there, but the point is, named capture groups with specific, magic names, which we could then plug in to a generic matching algorithm. People can write support for their own hosting platforms into their glide.yaml, or into a global config.\n. Maybe it is just silly semantics - we do need a definition. But import rewriting, while IMO worth contemplating, should not be conflated into this property. It's a wholly different kind of operation relying on a different class of information.\nSome kind of declarative solution, whether it's the regex or something else, should be sufficient for this need, and render glide no more \"broken\" than it already is.\n. sorry, i edited that too much, i meant:\n\nBut import rewriting, while IMO worth contemplating, should not be conflated into this property. It's a wholly different kind of operation relying on a different class of information.\n\nto be in an agree-y tone, not a disagree-y tone :)\n. No, it should not be allowed.\n. @Cedric-Venet is foo.visualstudio.com that a central hosting service? If so, IMO that's actually something that we should be able to resolve with a separate import pattern, sorta orthogonal to the discussion in this issue.\n. It sounds like all your expectations of glide are the right ones. I think all your woes should be solved by replacing this:\n\ncd $GOPATH\nglide --verbose get -s github.com/user/projX\n\nwith this:\ncd $GOPATH/src/github.com/me/myProj\nglide --verbose get -s github.com/user/projX\nThe key is that glide is always operating relative to a single project, rather than the global mess that is $GOPATH. And it infers that project by walking back up the tree from cwd to find a glide.yaml. If you're working from the root of $GOPATH, glide has no way of knowing which project you're wanting to work with - and, by design, it does not work globally on $GOPATH, for reasons you noted.\nNow, I don't fully follow what this means:\n\nFor reasons beyond my control, our automated process will pull all dependencies first, and then build. There is no iteration between building and fetching. It's just 2 steps:\n\nBut hopefully, this'll solve your problem. Once you move to that directory, glide should (on most commands) recursively walk, resolve, and fetch transitive deps into your desired vendor dir.\n. > What should my glide.yaml look like?\nFrom what I can quickly glean from these error messages, package: hgapg is all you should need to change in your glide.yaml. Then glide knows how to interpret local imports within your project (e.g. hgapg/foo imports hgapg/bar - both are below the named project root, so glide knows not to go looking for them).\nWhile the particular reasons for the build constraints you have to adhere to might be unique, the upshot is a pretty common use pattern, I think. You commit your glide.lock, and also your vendor/, which makes the system go get-able, but also fetchable with nothing more than git. You'll need --strip-vcs --update-vendored and possibly --strip-vendor to make that mode of operation work well.\n. > But that's very tough since I do not control how the source-code is obtained.\nI don't understand what you're expecting to control here.\n\nSo instead, I have moved all the Go code under a src/ directory in my repo itself.\n\nThis is not the intended use pattern. Maybe it could work...but I don't see what problem you're trying to solve, per the previous. It does kinda sound like you might be fighting some basic Go toolchain requirements more than glide's own.\n\nYou can repeat that yourself easily:\n\nNeither a branch nor a tag named glide is present in github.com/pb-cdunn/hgapg (as of a couple seconds ago), so I can't replicate.\n. > I do not control how source-code is pulled from the web.\nWhat kind of \"control\" are you expecting to have? \nAre you expecting that glide just provides a list of repos to clone, and you write a script that then clones them into a place that you decide? Or, something else?\n. > I expect to control the VCS operations myself. I only want glide to obtain and update the dependencies.\nIf \"VCS operations\" refers to checkout/commit/branch switching on your project, then yes, you have complete control. If it refers to granular control about how your project's dependencies are checked out, then...well, I think you'll be hard-pressed to find any tool that allows that kind of control. It sorta obviates the purpose of having a tool.\nThough, now that I've had a look at the glide branch is up in your repo, I think I have a better sense of what you're trying to do. This probably seems obvious, and like you've described it several times to me already, but let me write it out to make sure I'm correct: it looks like you're trying to define a root $GOPATH directory, with the intention that that $GOPATH be used exclusively for your project, and that you control the versions of the things in there.\nThis, generally, is not how GOPATH is intended to be used. Even the now mostly-defunct tools that did GOPATH manipulation didn't go this far, and it certainly doesn't work well for anything you're publishing publicly for others to use...as you seem to be discovering. GOPATH is intended to be a general dumping pool for code, not one in which you try to carefully control what's in it. If you try to swim upstream against that, you'll probably have a very bad time.\nAssuming I understand your constraints correctly, this is what I'd do:\n1. Stop trying to have your project live at $GOPATH/src/hgapg. You say in your README that it's not expected this project live at that path for terribly long, which is (I guess?) why you're trying to avoid that network path. But I don't see how that helps with the future name change - it just means, in the future they'll have to go from a working, simple network/local path relationship to another one, rather than going from a custom system to a simple network/local path. The change will still happen. No? So, to that end:\n2. Let it live at github.com/pb-cdunn/hgapg, as its network identity would ordinarily dictate. \n3. Change the contents of glide.yaml's package directive to github.com/pb-cdunn/hgapg.\n4. Run your glide commands from within $GOPATH/src/github.com/pb-cdunn/hgapg. This will create and manipulate $GOPATH/src/github.com/pb-cdunn/hgapg/glide.yaml, and automatically populate $GOPATH/src/github.com/pb-cdunn/hgapg/vendor with the appropriate dependencies.\n5. Commit the deps glide has checked out in $GOPATH/src/github.com/pb-cdunn/hgapg/vendor; this will not only make the package go get-able, if you care about that, but should meet with your ops folks' requirements that all source code can be checked out without go being installed.\n. np - hope you get this all sorted out.\n. yeah, known issue, see #252.\nswitching to a gps engine will fix this - #384.\n. unlikely, as it's quite complicated for glide to undertake, but you can do it in dep!\nOn October 18, 2017 11:40:56 AM EDT, Henry Stanley notifications@github.com wrote:\n\nThis has been an issue for years - is it going to be fixed?\n-- \nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Masterminds/glide/issues/510#issuecomment-337634207\n. (the issue I usually refer wrt this problem is #252. it's the same basic underlying issue, even though it's not glide get. #328 is also in the family)\n\n@technosophos It's hard to say. On the one hand, I'm honestly not sure how difficult it would be to control this in glide as-is. My guess would be that it might be fairly gnarly, but it could be reasonably straightforward.\nOn the other, gps is pretty close now. (Like, I-could-actually-use-some, y'know, help-level-of-close \ud83d\ude04 ). As I explained on the main PR, I have two things left in my \"MVP\" milestone, which is my basic guess about what's necessary. \nPersonally, I'd prefer to see the effort that would go into solving this maybe-knotty problem instead invested in getting gps integrated. (And, hey, there's great docs!)\n. @whitlockjc yes, it would work as you expect. The 1.3.x constraint and 1.x constraint are intersected together - the result of which is 1.3.x, as you note - and that constraint is what's ultimately enforced on Kubernetes' version.\n. seems like the issue arises specifically when relying on the package <pkg>_test idiom? i have a feeling i might know where the issue is...\nAh, yep. The current resolver only reads build.Package.TestImports, but does not include build.Package.XTestImports. Imports from the secondary test package are kept in the latter property.\n. yep, i got it\n. in general, i think this looks good. \ud83c\udf89 \ni do have some concerns about the implications of overrides, though. i'm going to try to return to write that up this evening.\n. So, overrides. Lemme preface by saying that I think this is a crucial use case - #548 is just the most recent example. I just want to make sure we do it in such a way that we minimize the potentially nasty second-order effects.\nMy basic concern is, from the examples given, overrides allow/encourage the user to name local paths as substitutions for ordinary upstream paths. As a result, lock files produced when such overrides are in place may be non-portable, as they now rely on potentially arbitrary versions of code that just happen to be on peoples' local system. If the goal is to create a portable lock file (which...yes, right?), then the list of weird failures modes preventing that goes something like this:\n1. There is no .git/.bzr/.hg dir at the root to which the user points\n2. There is a .git/.bzr/.hg dir, but in a parent or a child of the dir to which the user points\n3. There are committed changes that have not been pushed upstream\n4. There are uncommitted changes\n5. There are extra files the VCS knows nothing about\nAll of these are cases in which glide would either be unable to write out a rev to the lock, or would write out one that's incorrect or unusable.\nNow, I realize that these were all situations that could occur without this PR if the appropriate flags were passed and packages were sourced from GOPATH (although I'm not sure how lock files were written in those cases). That was always a problem for reproducibility, but it was at least somewhat implicit and aligned with how existing go tooling works.\nThis PR, though, introduces a new element - instead of implicitly searching GOPATH, the user can specify a local path. I don't have a specific example of how \"misuse\" could become problematic, but it's introducing new user choice to cover use cases that I suspect we'll find better solutions for, reasonably soon. When they arrive, we may want to roll this back.\nSadly, I don't have a really good alternative right now. The work I just finished (sdboyer/gps#83) lays the groundwork for \"path-based\" import satisfaction, which is how I envision satisfying this class of requirement. But it's not there yet. The only real idea I have at this point is to define \"portability\" levels, and incorporate that information into the lock file, so that we can at least provide saner errors to other users when they fail to install from a glide.lock that was generated with overrides on.\n. Oh, also - do you have specific stories around referencing GOPATH in your mind? The two important use cases I can currently recall that would be helped by this feature are \n1. #548 \n2. Facilitating organizations that want to have a bloc of dependencies pre-loaded on a machine at specific, set versions, rather than having them be negotiated by the tool\nI do not think the \"performance/waste\" argument for this is valid - the one that goes, \"it's already on my GOPATH, why redownload it?\" That can be mitigated, and is a one-time cost anyway.\n. Ugh, I did forget a couple things. Sorry.\nFirst, kinda more a nit, but - gps has a thing called overrides (which is generally consistent with what other comparable systems call overrides). These allow the root project to constraints and source locations for imports that will override anything declared by any dep that's brought in. You said you were considering naming this mirroring, though, so...\nSecond - if this kind of information is going to be included, there's also an approach here that puts this information in the manifest. Yes, it's a bunch more work to decide on how to reconcile it with everything else, but...having it in the manifest at least makes it publicly visible (to humans, and to solvers on other machines/importing this as a dep) that \"this path is not sourced from a repo.\" \nIf that doesn't match the use case you have in mind, then a) good, let's talk use cases and b) i think that should highlight how varied the use of this may be, and maybe some of the classes of problems that could arise.\n. > We need to help people be successful and mirrors are required for that. \nCould you please explain that requirement in terms of use cases? Are there ones beyond what I already described?\n\nIs extra metadata required for any tooling to work?\n\n\"any tooling\" referring to, e.g., bundler/npm? Well, bundler calls them \"local git repos,\" and yes, they require that it be a valid repository, and they have several other requirements as well, in order to ensure that the generated lock file remains sane:\n\nBundler does many checks to ensure a developer won't work with invalid references. Particularly, we force a developer to specify a branch in the Gemfile in order to use this feature. If the branch specified in the Gemfile and the current branch in the local git repository do not match, Bundler will abort. This ensures that a developer is always working against the correct branches, and prevents accidental locking to a different branch. (docs link)\n\nemphasis mine, to highlight that yes, they consider it important that the generated lock file is portable.\n\nBut, how often is that situation a reality?\n\nMy subjective experience? Often. Just last night, when I was updating #384, I had an error occur because I had extra uncommitted files in my local gps tree that I unintentionally rsynced into glide's vendored copy (I have to use a weird workflow to pull in updates). Even though that workflow is weird, it's symptomatic of case no. 5. Unpushed changes (no. 3) happened to me all the time when using that feature in bundler, and no. 4 bit me on a hobby project this past winter.\n\nBut, with that power people can shoot themselves in the foot. No idea how to avoid that.\n\nI think we do it by focusing on the strict use cases the feature is trying to meet, satisfying those, and then constraining its power or layering on additional checks/requirements that reduce and clarify the failure modes. IMO, not having bad failure modes is also an important component of success.\nUsers may still be shooting themselves in the foot, but we can give them a BB-gun instead of a bazooka. \n. Ahh cool, OK - I realize my comments were probably too focused in on file:///. It seems we both fundamentally agree that relying on GOPATH is more or less an abuse - which means I think we're mostly on the same page here.\n\nAs a developer, I need to only use dependencies from my companies trusted store. These are public packages but the trusted ones are stored in a mirror for me. A place I've seen this several times with with debian packages of libraries. Many enterprises use them.\n\nCool, this is the use case I was trying to describe in my earlier comment.\n\nAs a developer, I need my CI/CD system to pull from a local mirror to my environment. An example of this, in a network sense, is the CI system for OpenStack. It does more volume than Travis CI, last I checked, and they do a lot of dependency installation. The CI system is distributed in several regions of several public clouds. To put the dependencies close to the CI runs for fast installation they have mirrors in each region.\n\nAh, yes. Pretty much functionally identical to the other use case (which is why they can both be serviced by the one feature).\n\nThe link you provided is about switching from Gems to the source and the rules around that switch. In Go we always use the source.\n\nRight, so, let's dispatch with this first - the issue I was really centrally focused on was allowing file:///. From the OP: \n\nOr, file:///path/to/local/repo if you want to fetch from the GOPATH or other local location.\n\nIf we allow file:///, then it's no longer true that, as you put it, we \"always use the source.\" Now, sometimes we use the source, and sometimes we just use whatever happens to be at that location. Maybe it's source, maybe it isn't, but because we can't reliably infer anything from it, it creates all those nasty failure modes I enumerated above. This is a garbage-in makes for garbage-out-type situation. If we want to avoid spitting out garbage, we have to avoid taking it in.\n\nCan you think of other bad situations and explain how they would be bad in ways where something doesn't tell you? I imagine there are other cases.\n\nYes, I gave five, one of which I think is equivalent to the two you gave. The latter three all involve subtle, reasonably easy slip-ups that the dev could make during the course of normal development - I did.\n\n\nBundler is a different case because it's a central package repo. Go is distributed so the mirroring functionality needs to handle distributed.\n\nRight, SO! This is the crux of the issue. It's also a facet of a general problem in distributed architectures - who decides what names mean? (I won't wax poetic - just want to point out that this is known, and not easy.)\nI think the safest way to approach the issue is to allow for a URL rewrite - perhaps as a regex - that is applied during the process of transforming an import path into a URL for source retrieval. This would, I think, satisfy #372. I haven't written support for doing it into gps yet, but doing so would be trivial - one of the express design goals in sdboyer/gps#83 is supporting this. There's also validation in there that precludes expressing file:///.\nNow, URL rewrites + scheme validation would, I think, cover the true mirroring cases. True mirrors don't need to be reflected in the lock file, because they generally don't affect build outcomes (in practice they do, but those are distributed systems problems that we don't need to touch in this discussion).\nURL rewrite + scheme validation would not cover #548, however, as that use case, while important, is not for a mirror; it's a fundamentally different type of source. I'm moving gps in the direction of supporting different source types - sdboyer/gps#83 introduced the explicit notion of a source, and that there can be types of them, and that there's a formal system for mapping different import paths to different source types, and that all that can ultimately be reflected in the lock.\n. @mattfarina I don't see how NFS is relevant? I could have source files mounted RO through ZFS into a container with the host machine synchronizing them over the network through a Cassandra-backed FUSE filesystem...or just have them on local disk. The filesystem is not the problem; provenance is. Knowing provenance is how a tool can create a lock file, because provenance tells us how we can recreate the source code later. This is exactly why bundler imposes the requirements it does.\nIf file:/// is allowed without restriction, then the word \"mirror\" is just wishful thinking. We're talking about a different type of source. These different sources - one a proper upstream vcs, the other some random filepath - might happen to contain the same code, but unless the tool has a way of knowing that source code's provenance, it can't provide any guarantees. Right now, vcs interaction is our only tool for handling provenance.\n. In reading #548, i realize that i'd, again, misunderstood something about how you're intending that this be used. Sorry.\nYou're picturing that whatever's at that location be treated as a source. So, we have to inspect the path, determine if it is, or contains, a repo - or read this from the mirror.yaml file. And, if any of that doesn't work out, then we have a hard failure.\nOK, yeah, I think this is a lot less harmful. Lemme ponder a bit, too. (The mechanism to feed this in to gps will be interesting...and the rewrites are still probably a good idea.)\n. ah i see\n. > Mhh, sounds painful, I guess I'll have to build some tool that rsyncs stuff into the app vendor directory :-(. Having to commit and run glide each time I switch context and then having to squash commits so they're not a total mess is not attractive to me.\nYeah, the optimal workflow for this use case really is to just let it source directly from GOPATH - no need to commit for it to be used in your build. As you noted, though, that creates an issue with shared deps; if the secondary project is sitting on GOPATH, it won't be able to access the deps placed under the main project's vendor/.\nThis is really the kind of case where just dropping in a symlink would be ideal, but then you've got the go toolchain's weirdness about symlinks (so I'm not actually even sure that that would work?). Honestly, absent some changes in the toolchain, I wonder if the easiest solution here might be to just fall back to rsync if available, else sloooow copying. (man do i wish someone would write a fast, native Go impl of recursive copying)\n. Yep, the nested vendor dir is why I'd prefer to have a copying/rsync solution - that way, at least, we can just exclude the vendor dir from what's pulled over. No way to do that with symlinks. \n. IMO, it would be preferable to allow regex rewrites, rather than swapping in one domain for another. The requirements described in #372 would not be met by this, but rewrites would cover everything this could do.\n. @timoreimann all of this that you've described is already done, working, and tested in gps :)\nWell, almost all. We don't annotate packages in the resulting lock file as being test-only or not. It's not a trivial refactor, but it's not a terrible one, either...though I'm not sure how important it is as an immediate, practical matter. Issue for it is sdboyer/gps#44. I've also noted this on the list on #565 \n. @timoreimann \n\nis it reasonable to consider backporting the working solution from gps to glide? Or are the two fundamentally too different to justify such an effort (which is my assumption)?\n\ncorrect, it's not feasible. fundamentally different algorithms. best thing to do is get gps merged in \ud83d\udcaf \n\nThe least we should do from my perspective is to help the user understand what's going on and make sure the vendor folder isn't touched in case of this error (which summarizes my two bullet points). Having to ask the user for manual resolution is not ideal but hopefully rather cheap to implement and better than what we have now, at least until glide/gps is able to deal with this autonomously.\n\nThe topic of how much \"automated\" resolution is good is one that's come up quite frequently in the community discussions in this space. I expect the committee that's forming will deal with it quite extensively.\n\nBy the way, what's the actual benefit of classifying into build and test imports in glide currently?\n\nThe main one I always think of is the ability to conditionally download only those dependences that are needed for the task at hand. (The same applies to tagging for os/arch).\n\nMy expectations of gps are so high by now, if this thing won't be able to resolve dependencies fully automatically while also brewing my morning coffee at the same time, I'll be heavily disappointed. ;-)\n\nI am truly loathe to oversell things, but when people bring up specific cases that I've addressed, I feel OK saying something about it :) There are holes in gps, and I'm sure we'll find more as time goes on...but this isn't one of them.\n. @ches - this is the closest thing to that outline you'd asked about in #384\n. > Is the detection in Masterminds/vcs the level of detection supported or is there more? If there's more can you give me a pointer. I ask because the vcs property is used regularly by some big Glide users. I ended up needing to use it this morning.\nYes, there's considerably more (Masterminds/vcs detection isn't used at all). It's wrapped up in a larger system, contained within the SourceManager. There are several public-facing entry points, but they unify at SourceMgr.deducePathAndProcess, and hten SourceMgr.deduceFromPath(). The latter's internals will look more familiar to you; the former is basically just negotiating the futures returned from the latter.\nThere's a lot of logic here, all there for considered reasons, but not all necessarily germane to the question of a vcs property. So, to focus this discussion, the key question that I haven't had an answer for is, \"what use case is there for an explicit vcs property that can't be satisfied by having the vcs extension literally written in the import path?\"\nIf I have a clear view on what that use case is, then I can figure out where it's appropriate to incorporate that control.\n\nIf the name is changing from s/import/dependencies what's the handling for backwards compatibility? There are thousands of glide.yaml files in existence.\n\nYep, there's a checkbox for this on #384 right now, and it's my currently in-progress code on my local. Basically, my approach is to have structs for the new version of the manifest and lock files, and structs for the old version. ConfigFromYaml() and LockfileFromYaml() then attempt the new versions first, and if they don't work, try the legacy version, and (if possible) automatically convert them into the new version. A third return value is added, indicating whether the legacy autoconversion took place, so that the user can be notified. (messages are not printed directly from the function, as we don't want those funcs printing when autoconversions are done on yaml/lock files in deps - only the root project).\n\nDid you work it out so varying locations can point to the same package and this work cross projects? So project A could pull package C from its source and project B could pull package C from a fork and the resolution just works.\n\nThere are three answers to this: \"No\", \"Yes,\" and \"I'd like to but it's hard. All are true, depending on the specific constraints.\nThe \"Yes\" is because it's possible for the root project to indicate an override, which unilaterally chooses the location from which to source C. It could be what A says, or what B says, or something else entirely. This is a workable solution that gives the user the control they need to proceed with their own work, but it's not a scalable or healthy solution, because:\n1. That override has to be restated by every root project that encounters the conflict\n2. Once that override is written into a manifest, it's likely to stay around for much longer than it may be needed - (say, once B goes back to being fine with using the canonical source of C)\nThe \"No\" refers to the general case: given that \"one import path, one package\" is (at least for now) a requirement of the system, if A and B indicate that C should be sourced from a different location/URL, that is, at base, an irreconcilable conflict. There may be ways we can squirrel around that, but that brings us to...\n\"I'd like to, but it's hard\"; while there are a bunch of strategies we could use to make this work in some common cases, they involve doing some acrobatics, and I want to tease out the specific constraints of those cases more before investing the necessary time. \nFor example, in the use case you gave, I think the ideal solution would be that if we treated A's request for the canonical C as a 'default', which could later be superceded by B's request for sourcing C from a fork, then that might work well. However, with the way the solver is currently designed, depending on ordering, things could look different:\n- If, while solving, we encounter B first, then we'd know to use the fork of C - we pull a list of versions from it, perform other compatibility checks (e.g., are required pkgs present?) against it, etc. Then, when we encounter A, we can compare the source URL requirements, say, \"oh, A wants the canonical, it's OK to supercede with a fork,\" and continue on.\n- If, however, we encounter A first, then solving proceeds with canonical C. When we encounter B, we now know that we want to supercede with the fork of C. The problem is that the solver has (potentially) made a bunch of checks based on canonical C already. Correct operation of the solver is built around the idea that we've made a series of checks/choices, all of which are acceptable at the current step. So, if we're going to swap in a fork, we need to make sure all those checks we've already made would still be valid with the fork. And, in order to support backtracking - which is basically how most sane modern solvers fundamentally work - that transition from canonical -> fork has to be reversible.\nWe're more or less talking about defining \"equivalency\" between sources, which has a lot of dimensions if we're going to keep it safe. Frankly, the easiest way to address this is simply to restart the entire solver, with a marker to always use the fork for C. That's not a crazy approach, necessarily, but it has its own costs.\nSo, yeah - we have at least a short-term solution, but more use case exploration and refinement is needed.\n. > How would you handle a location on the filesystem? People use those right now for a handful of things. I didn't consider the file:// based locations until others brought it up from their use.\nAs in the mirroring idea implemented in #547? Or as in \"there's code, but no vcs to manipulate, at file://path/to/source - use that for import path x/y/z\"? \nMy answers are quite different, depending on which one you're curious about.\n. > I have a hard time thinking I could go to the Glide power users, such as @akutz, and tell them that in glide.yaml files and mirror settings they could not use file:// paths. Something they can do, and some already do, today.\n\nWhat would you suggest telling these folks that they would accept?\n\n...??\nI don't understand why you wrote this. The question I asked was, \"are you referring to the mirrors feature you just shipped, or to this other thing?\" You responded with, \"mirrors are an important feature, how do I tell people they don't get them?\" Could you please answer the question I ask, particularly when it's a straight up either/or? Or, if it's not clear what I'm talking about (which I know happens often, and I'm sorry), ask for a clarification?\nIn any case, I take it that you want to discuss mirrors, not the other thing.\nI didn't say that mirrors are something gps can't/won't support. Not at all. I was only referring to that vcs property. But, I'm guessing you jumped ahead to mirroring because, in glide's current approach, that vcs prop is necessary to discover the vcs type of the local \"mirror.\" Right? If there's a different or additional reason(s), please tell me.\n. (I've pushed a commit that should fix this panic: panic: interface conversion: gps.Revision is not gps.PairedVersion: missing method Underlying - glide is now updating for me)\nIt's indeed possible that the panic with Helm there may be tied to issues with gopkg.in - I'll have to investigate more later. I've just opened up sdboyer/gps#97, which is about pre-filtering acceptable versions based on what the import path looks like - effectively, respecting gopkg.in's semantics. As much as that's possible, anyway.\n\nCan you share why cache key names use a different strategy than what Glide uses today? I'm curious of the reason(s).\n\nI actually wasn't looking at glide when I wrote it. It's based on simple string replacement - https://github.com/sdboyer/gps/blob/master/source_manager.go#L17, which is run on the results of url.String().\nas the TODO notes, i'm not the happiest with it. looking at output, though, it seems to look like packagist's (while glide's looks a bit more like npm's).\n\nDoes this have anything to do with lacking a default version when one is not specified? Right now Glide tracks the default branch for a repo. When no version is specified that is used. This is a cached piece of information.\n\nSo, there's a few pieces, here. First is the background context - whenever we talk about version selection, defaults, etc. in gps, we're ultimately talking about the relative order of versions inside a queue. The order of versions in that queue is the order in which we \"try\" a version. \"Trying\" means checking it against version constraints (among other things), so it's not a problem if the correct version to pick isn't first in the queue - only that it's the first in the queue that satisfies constraints.\nThe way these queues get populated is a little complicated, but in the general case, gps uses this sort ordering on the set of versions returned from interrogating the vcs. That means, absent any constraint information, semver will always be tried first, then plain tags, then branches.\nNow, the tool is in full control of the constraints that are used, so glide could effectively alter that behavior to prefer branches: whenever returning a manifest (whether for the root or a dep), if glide sees there's no constraint declared, it could put in a gps.AnyBranch() (not yet implemented, but pretty easy - sdboyer/gps#72). I'd also have to do sdboyer/gps#65 for that to work, but it's not terrible.\nThat said, I'd like to suggest that it might be better for glide to prefer selecting a semver tag if one is available, and if not, then taking the default branch. That seems to me to be the world we want to nudge towards. (For that, I'd need to do sdboyer/gps#65 and sdboyer/gps#98)\n. sdboyer/gps#65 and sdboyer/gps#98 are now complete. I've rolled v0.11.0 now, after pushing back a couple of the things that were in it to v0.12.0. The only thing that's of immediate relevance here that I bumped is the the pre-filtering of available versions from gopkg.in ticket, sdboyer/gps#97.\nThere's a couple API changes in v0.11.0 that I'll need to resync into #384 before it'll work. Nothing huge, though.\n. @silasdavis sorry, i've been very swamped this week - but i'm thrilled that you're interested in helping! i'll try to find a bite-size chunk for you over the weekend.. @silasdavis thanks for the bump. sorry, my work in this general domain has been really focused towards the new official tooling, gps, and semver - between that and the holidays, it's been hard to find time for glide directly.\nThe most useful thing to start with would be building glide from the gps-integration branch, trying some things you're used to doing with glide, and providing feedback on what does/doesn't work, and where you're surprised by the tool's new behavior. Ideally, just keep a running stream-of-consciousness diary of everything you do as you do it, and your thoughts when you notice/run into things.. @silasdavis i most surely could :)\ni'm not sure that i can promise any particularly low-hanging fruit issues, but here's a starting list:\n\nI've generally put a lot of effort into testing gps, and while there are some powerful, expressive test harnesses, the tests are still far from perfect. sdboyer/gps#135, sdboyer/gps#109, and sdboyer/gps#63 are all testing-oriented - and hey, looking at tests is a great way to grok a project \ud83d\ude04 \nIf you're comfortable writing custom depth-first search algorithms (nothing terribly fancy), sdboyer/gps#127 could use an eye\nThe implementation of sdboyer/gps#113 is likely to be pretty straightforward, though because I don't have a settled API in mind already, you'd need to wear a bit of a design hat on and spend some grok time\nsdboyer/gps#125 will likely have a very simple implementation, and understanding the \"why\" would take you a long way towards grokking gps\nsdboyer/gps#99 is likely to be a fairly intensive refactor, but it's something we definitely need to do and there's a lot of code out there to draw from\nIf you like graph algorithms, we need cycle detection in sdboyer/gps#66. Trick is, it should ideally be an incremental cycle detection algorithm, rather than just brute-forcing with something like Tarjan SCC every time. Yeah, as they exist now, I think they can be safely removed. I don't see a need for them in the manifest at all, probably even in the long term.\n\nI do see a case for them in the lock file, though gps (at least) doesn't support that planned behavior yet. (I've removed os and arch in #384 in both manifest and lock, though we could always put them back in)\n. any chance 'testing' is being imported by a non-test file in your trees? (not sure that's relevant, but trying to eliminate variables). Yeah, I've spent a while thinking about the best handling for this case, but until people actually came up with examples where it was the only option, I deferred action on it.\nI think that the key question, @mandarjog and @nxvl, is whether these packages that you're currently storing under vendor/ have to be stored there, or if they can be placed under the local package tree?\nIf so, is it considerably more difficult to place them under the local tree than under vendor/?\n\nThe generated code uses non absolute imports from within the protobuf tree.\n\nJust to be clear - this means it's using relative imports, like ../protob/some/path?\n. > they require make binutils to be run to create the infrastructure/bindata.go file. If that file is not created the build will fail since Asset is not declared. So i manually vendor it to remove that file from gitignore and check it into my repo.\nThat's...nasty. They require code depending on their code to generate something within their code tree in order for it to work correctly? Yikes. Yeah, gotta think about that one.\n. @nxvl hmm...I read a little more about goad - what's wrong with just running their make binutils as part of your CI process, if it's something you need?\n. It's an intentional design change - vendor/ is now treated as disposable, and something to be fully managed by glide. Some relevant discussion in #579 \n. gps hard-ignores stdlib packages. That has the effect of, in the context of this issue, prioritizing GOROOT over GOPATH. which per @ryanfowler's note, is how things work now.\n. i'm pretty sure the answer is \"no,\" but just to be sure: have any of you who are experiencing this bug done any direct manipulation of the ~/.glide/cache dir?\nalso, if anyone is able to create some exact steps to reproduce, it would be tremendously helpful in solving this problem.\n. @jmazzitelli  \ud83d\udc7c \ud83d\udc7c \u2728 \ud83d\udc96 \ud83c\udf89 \ni won't have time to actually run these through until later today or tomorrow, but these kinds of reproducibility procedures are like manna from heaven.\n. sorry, i've had a ridiculous couple weeks, and just totally forgot about this \ud83d\ude1e i'll look today\n. > 4: Run \"glide update\"\nThis is hitting another, i guess different issue:\n\n[ERROR]   Error scanning k8s.io/client-go/1.4/kubernetes: open /Users/sdboyer/.glide/cache/src/https-k8s.io-client-go/1.4/kubernetes: no such file or directory\n\nit went away when I glide install'd, after which i could glide update successfully. I'll have to investigate this later, too...\n\n12: To confirm the cache is now bad, go to it and look at what is checked out of git:\n\nYep, I figured the issue would be something like this. The git commands glide is issuing to get information from the repo aren't working correctly because they're using porcelain commands that have subtle dependencies on local repo state. Specifically, git pull doesn't do anything unless you have the right local branch checked out, and it's set up to track the right remote branch.\nI need to track down where the actual calls are in the code to fix this up, but it shouldn't be too terrible to deal with.\nAlso, just a note for the future - the cache having a particular version checked out in the working directory isn't necessarily an indication that it's \"bad\". The technique we use to quickly get files onto disk under vendor/ is not copying what's checked out, but rather doing some under-the-hood git goodness to perform that process quickly. Right now, it's probably an accurate indicator, but in the future the working directory may be something totally different, but you'll still have the right thing in your vendor/.\n. So, the fix over in #703 should address this. The only note to make is that you have to specify the branch you want to follow in glide.yaml -  it won't move properly if you don't. (Yeah, I'm not happy about that either).\nI've verified this against @jmazzitelli's replication procedure, but if someone else could try with that PR, that'd be awesome.. > I tried with both version: and ref: and it all works but, again, it only worked IF YOU SPECIFY the master branch when you go back.\nRighto, this is what I meant by:\n\nthe only note to make is that you have to specify the branch you want to follow in glide.yaml - it won't move properly if you don't.\n\nref is deprecated, please don't use that at all. (It will stop working entirely under gps, anyway). The more I think about this, the more I think I need to go back in and see if I can make this work without having to specify the branch name. It's absolutely not acceptable that there would be two different outcomes to glide update depending solely on the state of the cache dir; in effect, that's changing the semantics of glide.yaml.. Yes, v0.12.0 introduced a new system for retrieving and caching upstream repositories in a central location, and the change is, no doubt, a side effect of that.\nI don't know if it's feasible in glide's current design to avoid that call, or not. (This is something that gps - #384 - has taken some steps towards, but it's not yet to the point where it would completely avoid touching the network in the case you describe.)\n. Sure, happy to provide information. Sadly, there is not a way around this - this kind of central cache is to be the way of things moving forward. I hate to say it, but your best immediate bet is probably to downgrade :(\nThis is the first time I've seen someone report actually report this use case, though, so while it's been on my radar for a while, seeing that it's actually affecting someone boosts the priority of work towards the \"no network\" use case. Unfortunately, even if we do get gps merged in for glide v0.13.0, this particular fix is still probably a couple months away.\n. @RochesterinNYC yes, if you already have a fully populated vendor directory, then running glide install would be redundant.\nI don't think a command exists now that does that. If one does, though, there's a low limit on the amount of \"checking\" it could do without relying on VCS repository data.\nBasically, it could make sure that the directories specified in glide.lock exist, and that they have at least some go files in them...but that's it.\n. @RochesterinNYC \ud83d\udc4d \nNow, if the cache isn't populated already with the repos named in the lock file, then there's a limited to the amount of checking that can be done: you can't verify that what's there is correct, just that it's present. And there's not enough information to check for subpackages.\nBut still - a command that checks based on what information is on hand in the lock file? Sure, that sounds reasonable to me. @mattfarina?\n. > I want to edit the file and update the lock file but without touching the pinned versions already in the lock file. That is, I don't actually want to update any packages, just sync yaml and lock files.\nWhat are you imagining would be synced between the manifest and lock file, if not the pinned versions? Just the hash digest?\n. @a13xb ah, ok. that, then, is a generally known issue; see #252 and #328.\nit's also something that will be solved by gps, which is tentatively slated for v0.13.0.\n. interesting. yes, you're definitely right that it only runs git fetch, not git fetch --tags.  i suspect this hasn't been reported before because of the default git fetch mechanics:\n\nBy default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in. This default behavior can be changed by using the --tags or --no-tags options or by configuring remote..tagOpt. By using a refspec that fetches tags explicitly, you can fetch tags that do not point into branches you are interested in as well.\n\nSo, most repos probably tag on-branch, which means the tags have been picked up. Find a repo that tags off-branch, though, and this problem will arise.\n. @mattfarina yep yep - gps calls out to Masterminds/vcs for the Update() action, so it'll get the fix as soon as the dep itself is updated.\n. Expected, yes, but desired, no. Known issue (#328), and one that'll be resolved with the move to gps (#384).\n. very common problem. also, very not easy to solve, as it cuts to the heart of a lot of issues. the pm committee is wrestling with this quite a bit. i expect that'll be evident when we release our first round of docs...i believe that's scheduled for next week.\nthe big issue with wiring something into glide right now is that, because we lack a good solution that's safe, predictable, covers the bases, etc., anything added to glide itself would have nasty second-order effects, as well as creating a use pattern that we end up having to support, even as a legacy situation, in the future.\ni'd love to see someone put together even a slapdash approach, and we could at least recommend that while we deal with the deeper issues. something like \"run a daemon that notifies on fs changes and rsyncs the appropriate dirs over to the appropriate vendor dir.\"\n. > the big issue with wiring something into glide right now is that, because we lack a good solution that's safe, predictable, covers the bases, etc., anything added to glide itself would have nasty second-order effects, as well as creating a use pattern that we end up having to support, even as a legacy situation, in the future.\n. actually...maybe that wouldn't be so harmful. i have to ponder.\nsorry, i need to not answer design questions first thing after waking up.\n. If you're using dep, https://github.com/GetStream/vg is also designed to help with this general workflow. (haven't used it myself, but we're in regular contact with the author, @JelteF). @reorx of course not, no offense taken - constructive feedback is always welcome \ud83c\udf89 i have a post-it up to actually respond to you over on the other issue \ud83d\ude04 . no - \"install\" means \"'install' my deps into vendor so that i can actually compile stuff.' the naming is derived from tools like, say, npm. though, yeah, in a compiled lang context, that can be a bit misleading.\nactually compiling or placing binaries anywhere for use is strictly outside of glide's current scope.\n. I think there's a basic misunderstanding here. Let's go back to this:\n\nlike go install -a github.com/mattn/go-sqlite3 will install binary of that\n\nThat's not what's happening there. That go-sqlite3 package is not a main package, which means there is no binary TO install. What it does do is [re]compile the archive file, which lives at e.g., $GOPATH/pkg/darwin_amd64/github.com/mattn/go-sqlite3.a (if you're on a 64-bit OSX machine).\n\nand you never have to compile it again.\n\nIf the version/contents of the original source don't change, then you don't need to compile it again. If the source does change, though, then it has to be recompiled. Go's toolchain has no native concept of versioning (compare to, say, Rust/Cargo, where compiled objects are placed under a versioned directory hierarchy), so there's only ever one stored compiled object at a time. Addressing that particular issue is outside of glide's scope.\nThe important thing to understand here is that glide is project-based, whereas your questions seem to be more GOPATH-based.\nFor example \"install them all\": I assume you mean, basically, everything on your GOPATH. Or, in the case of go install -a github.com/mattn/go-sqlite3, everything transitively reachable from that package. The semantics there are, \"find this path on my global $GOPATH, and recompile everything from there on down (and if it's a package main, place the compiled binary into $GOPATH/bin)\". That assumes the idea of a GOPATH, that it's global, and that you can run the command from anywhere.\nglide's commands are scoped to the project that it is operating within. Your cwd determines the scope; you have to be at or below the level of $GOPATH/src/github.com/foo/bar for it to work. There's no specifying of a package name on which to operate.\nThat's because glide (along with most of the other tools nowadays) aim to create a self-contained build environment that has all the correct source code present in it, generally through the use of a vendor directory. The work being done here is all about picking of dependencies to use, recording those choices, and then making that a reality on disk in a way that all the existing tooling (go build, go test, go install) will transparently work with.\nThat's why glide is a dependency manager, not a build tool.\n. > thank you, that's great information. I'm starting to understand better.\nyay! \ud83c\udf89 \ud83d\ude04 \n\nSo, then if my go build take 30 seconds and i'm spending tons of time re-compiling not only stuff from vendor, but section of my own code that haven't changed, what's an eger developer to do?\n\nTHAT's surprising (unless you're actually changing your vendor dir all the time) - those .a files should be cached, just like everything other transitive compile. Is the project you're working on public, so that I can try to replicate?\n. It's an interesting idea, but...\nHaving glide not only infer repository locations from import paths, but infer new patterns from the manifest for inferring repository locations would quickly become a rat's nest. In what order are the patterns read in? How general should the inferred patterns be? How would inferred patterns interact when they suggest something slightly different? What does \"suggesting something slightly different\" even mean?\nIt would also break importability of any manifest expecting that to happen, as there's no sane algorithm  for picking dependencies if, every time you pick a dependency, this inference from the manifest has the potential to change the way that you interpret the import path/names of all your other dependencies.\nIt seems like your immediate need would be solved by simply using the import path \"stash.verizon.com/scm/abc/config.git\" directly (no need for a repo: directive, then), and \"stash.verizon.com/scm/abc/xyz.git\" for the other one. Would it not?\n. As of glide v0.12.0, the vendor dir is removed and rebuilt as needed. There's a fair bit of pushback on this, and we're actively discussing it - see #579\n. @breerly some of glide's core internals are only partially covered in general. The current resolver has some tests, but not a ton. There's a fair bit of complexity involved in setting up such tests.\n...which is not a good argument in general for not having tests. It's a horrible one, in fact. However, it's kinda more acceptable here, because all of this is logic that's also slated to be replaced by gps. And gps has extensive test fixtures covering all manner of weird solver paths.\nso, it's less valuable to do relatively complex work here when it's slated to be thrown away in the next version.\n. @breerly i've tried to make the README a reasonable starting point\n. @mattfarina right, this is against the gps-integration branch, not master. it merges IN master in order to resolve conflicts - something that, IMO, we should be doing as we go in order to minimize conflicts and integration work once we finish other things in the checklist.\nno?\n. just updating here what we discussed in gitter - that issue may be related to a known problem in gps with concurrent fetches. when @mattfarina re-ran the command, the error didn't re-occur.\nI've opened sdboyer/gps#106 to deal with that underlying bug.\n. i haven't thought through all the implications of this, but in general it seems like a great idea\n. @breerly yes, that i understand - that's the intended effect. when i use \"implication,\" i'm referring to potential second-order, unintended effects.\nthis isn't a knock against the PR; it's just a caveat about the depth of my review.\n. Generally speaking, glide picks the \"first\" version available for a given project that's admitted by constraints. Offhand, I don't know how glide decides that - i.e., if it tries semver first, or branches...\nHowever, gps may also be of some help here (once integrated), as it has a trace mode for the solver. Here's some recent output: https://gist.github.com/mattfarina/4465b759406a196aac1b9375e7963783 as an example of what that looks like. The UX still needs love, for sure, but the basic info is there. (And in gps, I can tell you for sure the order in which versions are tried).\nExactly how glide makes use of that trace mode, though, is still an open question - #565. There's a lot of output currently generated by glide that simply won't be possible anymore, so we've got some decisions to make on how to wedge all these pieces together.\n. Need more context, please.\n- What command were you running when you encountered the error?\n- Does the error recur if you rerun the command?\n- What version of glide are you using?\n- What's in your glide.yaml?\n- What's your go env look like?\n- Is this the first time glide is working with influxdb for this project, or has it been a dependency for a while and suddenly stopped working?\n. glide reads imports to determine what dependencies are actually required. The problem is those import paths.\nYou can always set an ignore in glide.yaml for google/protobuf - that should address that issue, at least.. The OP's issue is stranger - are you, perhaps, running that on a machine without a GOROOT set up, somehow? (not the env var, i mean literally no stdlib). Can't right now, known issue. We're working on it!\n252\n. My first would be that you're running into GitHub's anonymous request rate limiting. Since you've already committed the script, if you modify it so that HTTP header information is printed to the console, you'd be able to verify that that's what's actually causing the failures when the next one occurs.\n. Sorry for the delayed response. This may well be a duplicate of a number of other open issues. Simplest way to figure that out - does the problem go away if you glide cc?. It's not necessary to do this (unless you actually want to add a constraint for those deps). The import path simply being present in your project is sufficient to ensure those imports are considered when computing dependencies.. Please file a proper bug report. Simply copying in an error message, absent any context, is not helpful.. steps to reproduce would help a lot, if anyone has the time to put them together.. @penhauer-xiao \"steps to reproduce\" need more context - please see http://www.chiark.greenend.org.uk/~sgtatham/bugs.html\nideally, steps to reproduce should take me from absolutely clean state, step by step, to the problem you're seeing.\n@arichardet thanks, that's most of what i need. other details, though:\n\nhashicorp/go-getter does not, itself, import docker/docker, or any of its subpackages. Presumably, then, something else in your project does?\nAssuming \"yes\" to the previous, of the docker subpackages listed in that error message (api/types/blkiodev, api/types/strslice, api/types/network, api/types/registry, api/types/version, pkg/term/windows), which is your project currently importing?\n\nif you're able to paste in a full, currently-working glide.lock and glide.yaml, that would also help enormously.. @SydOps we really can't. As we were just discussing over at #692, \"cache\" is not exactly the best word, but it's close enough that we use it. It'd be more accurate to call it \"scratch space,\" or something.\nYeah, this is a use case we're very cognizant of. It is, in general, hard to coordinate activity between processes (of course). We may have a solution where multiple glide processes can share access to a single cache at the same time, but that's not on the short or medium horizon.\nFortunately, it's not hardcoded to .glide/cache. You can pass the --home parameter, which otherwise defaults to ~/.glide. Generate a random dirname in your jenkins job, and you should be fine (albeit with potentially a lot of wasteful network activity).. it exists - $GLIDE_HOME. the issue here is most likely what we're discussing in #592. the glide authors have been a bit taken up with other things of late, but this particular fix should not, i don't think, be heinous.\nclosing issue in favor of that one.. I'm glad your issue went away, but...\n\n- package: github.com/dolmen-go/shuffle-slice/shuffle\n\nEven if this works for now, it's not the intended use pattern. You provide the project/repo root in the package list, and the tool statically analyzes your code to determine which packages are actually needed.. > I would go as far as to say that this should be the default behavior. I feel this is a reasonable request since .glide is supposed to be a cache and remote vcs is always right.\nThis is the intended behavior, absent any flags, for the reason you give. So no, we won't add a flag, because it should just do this anyway :) #592 is the issue for the fix. . Sorry, but not checking transitive dependencies really isn't something we plan to allow. The problem of dependency management is already quite hard. It becomes even harder if it's valid for the tool to produce demonstrably incorrect outputs.\nIs there a specific part of the \"dependency checking\" process that you've involved as being so costly? How long is the process taking for you as-is, and do you have a threshold below which you'd find the length of time acceptable? It's possible (though we don't really know yet) that the move to gps slated for the next major version of glide could result in some dramatic speed increases.. Though, actually, I should clarify one thing: in your example of glide up -v example.com/lib, passing the argument has no effect on the behavior of glide up. It still tries to update everything. That itself is probably a significant part of the cost you're facing...and that will definitely be changed in a gps-based glide (it already is). On that, see #252. sorry for the delay in response. some questions.\n\n[ERROR] Error scanning github.com/cyphar/umoci/third_party/user: open cache/src/https-github.com-cyphar-umoci/third_party/user: no such file or directory\n\nthis path suggests that you have a cache directory within the project directory (that you've set glide's home directory to the project directory).\n\nYou have to force-push to master to fix these things. In particular, it means you have to push broken code to master to fix things.\n\nIf committing and pushing to your upstream repository in any way affects the behavior of glide, then it suggests you're using glide in a way we did not intend. Could you please provide detailed, step-by-step reproduction problems for the problems you're seeing? Cloning  github.com/cyphar/umoci (and optionally then checking out some specific rev therein) would be a fine way to do that.\n\nAnd not to mention that the ~/.glide/cache needs to be forcefully purged by myself in order to update anything -- because it stores the old versions of the structure.\n\n592 is likely relevant\n\nAlso, I would seriously advise implementing something like my hack/vendor.sh which cleans up the vendored imports (to not use packages I didn't import in the actual code). Inside umoci this reduced the size of the repository by 20x.\n\nhttps://github.com/sgotti/glide-vc covers this need, i think. Yes, this is the intended behavior. glide 'flattens' all deps up to the topmost level, and (if you pass -v, which you should) will strip out any vendor directories contained within dependencies.\nNot flattening has many negative consequences. Here's one big example.. yep, you're identifying some definite problems with the glide cache implementation as it exists today. and i agree - the error message should be improved.\nstill, handling these states is tricky; i wouldn't expect an improved error message until after we move glide to gps (and even then, i've not implemented a specific error for that particular failure mode just yet). we should at least, however, be able to avoid strictly incorrect behavior that owes to treating the local state as though it were the remote state. (related: #592). Need more context, please. Is the project you're working on public? Can you provide the glide.yaml and glide.lock for this project where you're experiencing the problem? Do you know the repository it's reaching out to github for that's triggering this prompt, and if so, is that repository private?\n. Please file a proper bug report.. Possibly an issue with the Chinese firewall? #449. is there anything...odd about the environment in which you're invoking glide? e.g., is it changing users?\ni ask because glide currently just shells out to git, so it should pick up anything in your environment - like ~/.gitconfig.. Honestly I'm baffled. I don't even know where to start, let alone how to replicate :(. I don't think we have a good story for this right now, sadly. It's something I've been loathe to delve too far into until we've solved more fundamental problems with version selection and checking out code, as directly including support for this sort of thing as part of the tool amounts to arbitrary code execution, and thus is a significant attack vector.\nSo, yeah, for now, glide does none of those sorts of things. Standard practice would be to wrap up the necessary commands in your build tool, which is (presumably) also invoking glide.. Sorry, simplest PR ever. Should've been easy to merge :)\nNote that the need for this will go away pretty soon, as packages will soon no longer be listed in glide.yaml.. there don't strictly need to be two files - it would be possible to hold all the information in a single file. but they hold very different types of information, and so, we keep them in two files.\nnote that the two-vs.-one file debate, as well as whether to keep the files under vendor or at the project root, are extraordinarily well-traveled territory in the general discussions of go package management. you may find the design space doc, put together by the pkg mgmt committee, informative. the tool spec doc (where we settled on two files at the repo root, like glide) may also be informative.. at the moment, they don't serve a huge purpose. what they represent, though, is a valuable bit of information: a complete picture of the the package import graph that the generated lock should utilize. at minimum, this is useful for tools that may want to strip out unnecessary files from a vendor/ directory - if it's not in the subpackages list, then it's (probably) safe to remove.. sorry, but it's not feasible to return to the model of having the .git dirs (or other vcses) present under vendor/.\nwe realize that this does hamper the multi-project development case, and are working on more comprehensive solutions. in the meantime, you might be interested to have a look at the discussions in #548 - they've got some scripts going there, at least.. I suspect the issue here is basically what's laid out in sdboyer/gps#42, which I've punted on so far - when running glide get on something, it's typically not actually imported yet by the current project. When that's the case, the named package is never visited and analyzed for its own dependencies.\nI'm not sure how easy the fix is in the current version of glide. It seems like we might be able to add a parameter to installer.Update() that allows explicitly import paths to be passed in...and that might be sufficient. idk the side effects, but eh, it's probably worth a try.... Nope, it does not consider them additional roots. This is part of what that essay I linked you to a few days ago was grappling with.\nAt minimum, the issue there is that the expectation is (or will be soon) that a project root is what's listed in glide.yaml under import. Such roots may or may not actually point to real go packages, and even if they do, it's quite possible that only some set of their subpackages are actually imported. There is the subpackages list in glide.yaml, of course, but it's not used (honestly idk the history there); we're getting rid of it, primarily because we consider it a poor design to duplicate state held in the manifest that is readily available in the source code itself. That we can do such analysis actually one of the structural advantages Go has as a lang in this problem domain - I'd go so far as to say that utilizing it is idiomatic.\nI'm gonna have a PR you can try in a minute here...lessee if it addresses the problem.. I don't think you've really misunderstood anything, so much as bumped up against a rough edge that we haven't sanded down yet. \n\n(If that is not intended to be true, what is get intended to do?)\n\nThe committee has spent quite some time discussing this very question. It's why there is no get command in the loose spec. Basically, get sits in at an awkward midpoint, and having something like it runs against the grain of the kind of tool we're trying to build.\nWhat it does do for now, at least, is add a constraint to the manifest for you, and IMO should at least put the named project into vendor/ as a result of the first run. (That belief is why I made that PR). That way, you can indeed build the project...or at least, maybe you can. Because:\n\nTo be able to build and depend on foo, get foo must also vendor foo's transitive dependencies.\n\nIs vendoring foo's transitive dependencies sufficient? Or, if there are subpackages, e.g. foo/bar, do we also then vendor THEIR transitive deps?\nI'm not saying these are unanswerable questions. I'm saying that designing a tool with consistent, orthogonal commands and avoids state duplication requires us to step back and think about how this sort of thing should work.\nBeyond that, I'm not sure what else to say without repeating what I've already said, so I'll refer you again to the essay I wrote; that more fully illustrates the tradeoffs at hand.. Yep, closing wontfix - thanks for the bump.. Yaaaaargghhhh...yes, it's not OK that we do this, and you're exactly right about why it happens. Your particular use case is even one that I've literally recommended - pinning a dep is a rather drastic measure that should be temporary, and come with an explanatory comment.\nThis is gonna require a wholly different approach to how we write out the config files.. i'd be open to that. @mattfarina ?. this would be a fair bit of work.\n\"cache\" isn't really the best word to describe the behavior of that subsystem, but it's close enough and it's in the right ballpark, so we use it. in fact, it's more like a scratch/workspace for the tool. it's not a simple matter to bypass.\n...which isn't a \"no\" to this, or saying this is impossible. just, please don't think it's as easy as bypassing a cache might be in other circumstances \ud83d\ude38 . If that's an acceptable solution for your case, then you can achieve the same effect today with the --home parameter. The cache dir is always a subdir of the homedir. (sorry, I realize this isn't documented directly). Ahhhh ok, i was imagining the goal to be that it not use the intermediary scratch space at all. If it's sufficient to just clean up the space it uses when it's done, then that's very different.\nstill, idk about an option for it (@mattfarina thoughts?), but hey, at least i understand the goal.. seems like probably safe to close this, then :). i suppose probably this is the same underlying issue as #411...\nthe typical solution here is to use an ssh-agent so that ssh doesn't need to prompt you for the password. is that not feasible in your environment?. We've had a few issues raised about the underlying issue here (recreating the vendor dir in its entirety, every time). Handling this particular case might not actually be that bad, though. Lemme see.... Yeah, I think it's pretty unequivocal that we have to do this. All the git handling needs to be made recursive.\nThat's more or less easy for clones and fetches, but I'm concerned about how it's going to affect our checkout logic for within the installer.\ngps suffers from this same issue...it could benefit from the same fixes in Masterminds/vcs.. well i think those fixes in Masterminds/vcs should do it. This works in my testing...but I had to abstract out the cross-link error handling a bit, and I don't have a suitable test environment at hand in which to test that that branch is working as expected.. set up an env, we're good.. Mmm, I can see how that wording could be read that way. The emphasis, however, is more on \"put\" than \"checked out\". The repo property was never intended to have anything to do with whether or not vcs metadata directories were left in the vendor/ dir. We made the decision to move to this model in 0.12.0. \nSome relevant discussion is in #579 . Is the important part here that it's a fork, or that you have the repo under vendor/ so that you can work on it directly right there? \nIf it's the former, nothing's changed about that, that's what the repo field does.\nIf it's the latter, we see that as a critically important, and annoyingly difficult problem. One that kinda goes to the foundational assumptions of glide. See #548. Sorry, but this is working as intended. ignore in glide.yaml is about ignoring packages during analysis, not about the behavior of how packages are installed into vendor. As of 0.12.0, glide does not attempt to maintain any state that it does not create itself in vendor/. See #579.\nIf you need custom code, put it somewhere that's not under vendor/.. Fair criticisms for a general name like http-timeout, but go-get-timeout is still not a good enough name. We're not invoking go get under the hood, which is the most reasonable interpretation of that name.. So, for starters, let's be clear - kill -9 is not something that true graceful recovery is really possible with. At least, not possible, short of designing crash-only software (the essential guarantee of which is that there is never a moment in which physical state on disk is incorrect). Achieving that standard is quite difficult, and I don't think we ever plan to have glide rise to that level of guarantee.\nglide manipulates disk state, and manipulating disk state is a hard problem in general. We shell out to the individual vcs commands for various purposes; as such, we inherit all of their (potentially problematic) guarantees. \nThere are weaker standards we could try to rise to - for example, defensively coding against the possibility of any bad state in the cache dirs, and trying to restore it to good state on first touch. And maybe that's something we could explore. But glide's design isn't terribly amenable to that right now, as there isn't a layer that clearly controls access to repo initialization in a way that we could hook in to. We might be able to explore something like that in gps (which will be powering glide soon) as such a layer does exist.\n(I am a big surprised about this outcome, though - signals sent via kill, AFAICT, do not propagate to child processes automatically, so I would've expected the git processes to run to completion when you kill the parent. I guess? not sure how this really supposed to work). @aeijdenberg have you tried migrating to dep? we've put a fair bit of work into resilience in scenarios like these; it's unlikely such improvements will be made in glide.. if you've not seen it already, #592 may be related.\nthere are a handful of problems with the state management in the central cache that was introduced in v0.12.0. what you're describing here seems like a first, but it also may be a combination of these known issues.\ni'm really swamped this week, but will look at the output you provided more when i get some time.\nin the meantime...mmm, well, would you be willing to throw an hour at building glide from the gps-integration branch and seeing if these issues persist? idk if you'll run into some failure before you even get to this point, but if you don't, at minimum, you'll be able to specify the only deps you want to allow to update via a parameter to glide update.. @nsilberman that's the other half of the issue that got conflated in with #468, i think - note the double-nested path within the cache directory. i think i aim to deal with that one separately. oh oh, it's awesome that you did this! this has been sitting around some TODO list of mine for a while.\ni'll have a look at the implementation as soon as i get a chance (i hope later this week). yes, the difference between glide and govendor wrt listing packages vs. projects has been a significant point of discussion for a while; i've also had a couple thoughts on the best way to implement.. Sorry, but this is an explicit design choice, and it's here to stay. See #249 for protracted discussion.\nI'm not sure if the current ignore directive would address your problem (you could ignore the package with the problem import, even if temporarily), but it's worth a shot.. @thockin https://github.com/sgotti/glide-vc may strip them out for you.\nsorry we haven't progressed further, here. my obligations on the pkg mgmt committee have taken a lot of the time that might otherwise have gone towards getting a gps-based glide finished, unfortunately :(. Sorry, but none of the glide folks know Chinese (afaik) - english, please?. though if the question was \"does glide work on win os\" (just guessing), the answer is \"yes, it should\". thanks, @qindj!. > I deleted a git repo\nAs in, you deleted the an upstream source, such as a github repo?\n\nI confirmed this running ps aux.\n\nWere you able to determine if it was glide itself (so e.g., http requests) that were hanging, or was it a git subprocess?. > Using glide in vscode\nI don't know what it means to \"use glide in vscode.\" Please clarify, and be specific, either providing or linking to examples or documentation.\n\ncan`t complete dependency code\n\nNo idea what this means.. If gocode doesn't work, it's because it's not reading properly from the vendor directory, which isn't a glide issue.\nI realize there's a language barrier here, and I'm sorry, but I really can't do more without a real bug report.. As I mentioned on the mailing list, you're not the first to raise this issue. Some issues with at least some overlap: #372 and #594. \nI suspect we may not get to this in glide, in favor of working on it instead in the new tooling. But it's not a forgotten use case - just one that we can't get to right away.\nIn the meantime, I do agree with the assessment others have made of this statement:\n\nMany organizations will be required to work under SOC2 due to requests from customers (especially for customer data security) and in this case Go is totally out, can't even be evaluated as an option.\n\nI don't think this requirement eliminates Go - only go get, glide, and most (all?) other current dep mgr tooling. It's perfectly possible for you to construct such build environments from pre-verified code yourself; the compiler works exclusively on local disk. I realize that's probably small solace, but it's still an important distinction.. First, I have no problem interacting with https://gopkg.in/mgo.v2, whether directly via git, or with curl, or via glide. Perhaps the timeout you had was a transient issue?\nIf you want to force glide to use http, use repo: http://gopkg.in/mgo.v2 in glide.yaml.\nIf you want to specify a version in that list, it doesn't need to conform to semver. Just specify the string name of the tag - e.g. r2013.11.18 in the version field in glide.yaml.\nBoth of these are in the docs.. Sorry, yeah, this is a known issue: #468 #690. @mattfarina it does not - dep currently doesn't have anything analogous to the timestamp. I'm \ud83d\udc4d  here.. @dt hah, i didn't even see it, thanks for the ping.\nI totally never knew that submodules did this. Huh. Since 1.7.8, it seems...I wonder how I missed it for so long.\nAnyway, LGTM - thanks!. ah, thanks for the heads-up! we moved away from directly using build.ImportDir and rely directly on go/parser now, so we're set.. thanks for the ping. huh. interesting. yeah, no, that case hadn't occurred to me - what amounts to an intentionally broken git repository. just one more reason to hate submodules!\nhonestly, my first reaction is that git2go is the one breaking contracts here, and they should refactor their tests (which is the only reason I can immediately think of to have an intentionally broken .gitmodules file, but I'll go verify that assumption) to create that file on demand as part of testing, rather than having it pollute normal behavior.. sorta-nit: I wonder if returning []byte is more idiomatic than returning string here?\nI realize this is consistent with the similar method on configs, but as long as a new instance of it is being added, I figured I'd raise the question.\n. ahh, saw this too late - s/checkout out/checked out/\n. it's probably preferable to write out to a temporary directory, then remove the old vendor dir and move the new one into in place if and only if creating the new one succeeded\n. I haven't seen any, but asking just in case - is there any possibility of parallel goroutine access to this map?\n. cool cool, then we're good.\n. oh, i may have had this problem before, if the issue was os.RemoveAll() failing on windows? if so, it's fixed in go1.7, but for previous versions, this will fix it.\n. if it's going to sniff the err for a particular string on *nix (i guess implicitly?), shouldn't it sniff for windows, too?\n. thaaat sounds much better. would be better to do the same kind of check for other arches, too\n. This isn't actually returning anything?\n. No need for the variable to be named as a justification for the change. Just client would be fine, please.. Please name the parameter something that describes its purpose. http-timeout would be fine.. Please name the variable something related to its purpose. The provenance of this timeout is not relevant when it comes to variable naming.. ",
    "subfuzion": "This is really needed. Shouldn't have to go in and edit glide.yaml as a subsequent step.\n. ",
    "dnephin": "I think there are some issues here that aren't covered by #85.\n1) Info() writes to stdout instead of stderr. So trying to do glide import godeps > tmp creates an invalid yaml file, beucase the [Info]line is in the stdout.  I think all log messages (info, debug) should go to stderr so they don't conflict with commands that write the \"normal program output\" to stdout.\n2) glide import doesn't accept a filename , so there's no option to write it directly to glide.yaml or any other file\nLet me know if you feel there should be a separate issue for either of these\n. cool, created #104  and #105\n. I'm having trouble finding a reference, but the rule I follow is:\nstdout is for \"normal program output\". Ex: glide import should output the configuration to stdout\nstderr is for everthing else.\nIn this case logging of actions it not \"normal program output\". \nI believe the golang log module uses stderr for all messages (https://golang.org/pkg/log/)\n. Single file binary install would be my preferred option. It makes it easy to install into an image with curl+chmod.\n.tar.gz would be my second choice, since I can extract just a single file to stdout (not supported by zip).\n. I don't understand why this is an issue. \nCan't you just find vendor/ -type f -not -path \"*/.git*\" -exec git add {} \\; ?\nThat way git won't add submodules. I believe the .git directories are even \"gitignored\" by default.\n. So I guess I can expand that find to exclude directories for bzr, hg, and svn, but windows I don't know about.  Is there no equivalent to find on windows?\n. @sdboyer I don't think that's true. The target SCM is always consistent for any given user, so the second git is fine, assuming this is just something that you you add yourself as a script to the repo.\nI guess it would be nice to have this as a plugin, or a go binary, but it feels like it's not absolutely necessary that it's part of glide core, because it's pretty easy to implement externally.\n@LK4D4 at least it's just one line of bash that you only run when you add entirely new dependencies!  if you're adding a single dependency, you can probably just do git add vendor/path/to/dep/* no real need for a script.\n. I just hit this as well, using git (not hg), running in a container, as root.  I was able to work around it by running chown root:root -R vendor in the container. I don't fully understand why it's a problem when files are owned by a non-root user, since root would be able to read/write them.\n. I started on 0.6.2, then upgraded to 0.8.2. I got a similar panic with both versions. The base image is golang:1.5 with just glide installed. The project directory (including vendor/) is mounted as a volume to the host -v $PWD:/go/src/github.com/dnephin/project\nI unfortunately don't have an example project to test at this time. I believe what I had done was chown daniel:daniel -R vendor at some earlier time, then when I came back to it and ran glide up I  was getting the panic midway through the run while it was working on transitive dependencies.\nI'll see if I can reproduce it with a minimal example.\n. https://gist.github.com/dnephin/8046cca0b87e2d1b62ee\nI've included the stack trace and the necessary files to reproduce it. Note that the first run is successful, it's on the second run, after doing a chown, that it panics.  I guess it was actually in the vcs HG calls.\n. Sounds like it, thanks!\n. looks like this line is duplicated?\n. I just tried it out and I don't think armv{5,6,7} are valid. It just ignores the arch's it doesn't know about.\nI believe only arm and arm64 are valid.\n. fwiw, I built with just arm and it's working fine on armv7.\n. ",
    "ches": "Just scanning through issues, seems like this can be closed at this point.\n. Apologies for commenting on a closed issue, this seems to be the place with the most appropriate context but there are a lot of issues so if I've overlooked another that would be better, or if I should open a new one for questions raised below, please let me know. (It seems like #289 could be closed at this point, by the way).\nI'm a newcomer to Glide, but given that --strip-vcs (and --strip-vendor) are implemented since I've started using it, it's my standard practice to use them for projects where I deem it appropriate to check vendor/ into source control: I want builds that are resilient to problems with remote services or left-padGate, and I don't wish to use submodules in most cases. (Also FWIW, with the vendor experiment in effect and vendor/ checked in, a teammate or contributor can build and test with the go tool without even needing to install or be well-acquainted with Glide, up to the point that they need to make changes to project dependencies. This turns out to be a pretty nice property).\nI'd go so far as to say that I wish I could make these options default for all glide get, glide install, and glide update operations, so that's easier for everyone working on the project\u2014perhaps with a glide.yaml setting?\nWith this sort of workflow though, most glide operations become very noisy with Unable to set new version. Consider the '--update-vendored' flag warnings for everything. Sometimes repeatedly for the same package. And even on glide install with a lock file in place, which to my understanding should not be attempting any updates whatsoever when I haven't added any new packages. This noise could largely be alleviated by more conservative updates I think (see #328, #368, maybe others).\nBut it leads me to question whether I'm \"going against the grain\", using the tool in a way that's not really intended or optimal. I'm pretty familiar with similar tools for multiple languages, though granted most of them have package directories where fetching actual VCS repos is not the norm. And it seems that Glide is just in a time of a lot of flux, so I believe it's not the case that I'm using it particularly wrongly.\nIf it's not weird, then what are some next steps for making the experience with this workflow better? I don't see anything in the 0.11 milestone yet that relates.\n- Should this even be a warning? It seems like it will be a very common scenario. If there's a version in the lock file then Glide should know how to treat the packages.\n- Should --update-vendored be automatic? @technosophos made the point above that Glide effectively takes over vendor/ by force anyway. One of Glide's strengths is that it makes it easy to work with forks/branches of packages\u2014people really should not be modifying code directly in vendor/ in Glide projects, IMO it's a sinful practice :smile:  And at worst, if you changed it you did so under version control, right? :innocent: \n- Should we draft something like a wiki page documenting common/suggested workflows?\n- @sdboyer has mentioned solver integration\u2014that sounds involving but like a very positive enhancement. Has it been discussed where that fits on the roadmap?\nThanks for reading these long, meandering questions!\n. > I'd go so far as to say that I wish I could make these options default for all glide get, glide install, and glide update operations, so that's easier for everyone working on the project\u2014perhaps with a glide.yaml setting?\nSee #362 on this, and some points about whether solver would imply that VCS dirs have no place ever being kept. Might raise some question of whether submodules would be supported at all if Glide can make it just as easy to point at forks/branches.\n. > Should we draft something like a wiki page documenting common/suggested workflows?\nhttps://github.com/Masterminds/glide/issues/112#issuecomment-149675710 might be a starting point.\n. > We do this currently for fresh and I would love for our dependency management solution to cover this use case. Otherwise, do I need to have a separate way (makefile, ant, etc) of telling my developers to go get a half-dozen packages at specific versions/urls/etc?\nDitto.\nBy comparison, I've been happy using gb on application-only projects, but am hoping Glide can take its place for projects with a library component so they can be go get-able. With gb, executables from vendored dependencies get built into vendor/bin, which is similar to how some analogs like Bundler in Ruby behave. My teams standardized on direnv with a project .envrc like the following, so that the project's executables including vendored tools like ginkgo are readily available:\nsh\nexport GOPATH=\"$PWD/vendor:$PWD\"\nPATH_add \"$PWD/vendor/bin\"\nPATH_add \"$PWD/bin\"\nOf course gb eschews GOPATH entirely, so that allows for flexible answers to what to do about the executables (GOPATH in the .envrc is just to make tools like gocode, goimports, etc. play along with the project FWIW).\nWould it be viable for Glide to install the devImports executables in vendor/bin (and possible without gross hacks around what go/build wants to do naturally\u2014I'm not familiar with the internals)? It seems reasonably convenient for users to invoke project-local tools from there without needing anything extra like direnv, and there's some similar precedent, but I'm not sure if it would run afoul of any current or foreseeable assumptions/conventions of Glide, go tooling, or others\u2026\nI start to wish that Go vendor experiment had followed vendor/{bin,pkg,src} like gb does\u2026\n. > I was originally going to suggest that we do not include dev dependencies by default (e.g. that we have --include-dev instead). But as I thought about the use case, it feels to me like the cases where we'd not want dev imports are for CI/CD and stuff like that.\n\n...\n- devImports is for libraries necessary only for running tests on the present project (not on things in vendor)\nDoes that sound right?\n\nI think that a critical conflation of dev versus test has pervaded the thread\u2014I was first confused by @technosophos's quoted mention of CI. I thought, \"I certainly do not want to use --without-dev on CI if Ginkgo is in devImport\", but @lpetre's example of fresh is exactly a case where you would. (Though, it's not really an \"import\", you don't import fresh in project code\u2014maybe devPackages?).\nRuby's Bundler supports arbitrary groups with dev and test being common convention; all are installed by default, and typically --without=dev is used on CI and --without=dev,test in production. This is akin to possibilities @xeger proposed in #168.\nBut presumably Go build tooling does a fine job already of keeping test libraries from bloating production artifacts when they're only imported in _test.go files. So it seems to me like devImports is all that is really needed (arbitrary groups/tags seem overkill for now), but test dependencies do not go there but in import instead (and something must be worked out about executables like the ginkgo runner, as well as dev executables like fresh, as discussed earlier).\nIn that case I think it becomes the clear choice that devImports is only considered for the local project and not recursively within vendor, as @technosophos's first version above suggested. Thus making the option an opt-out --without-dev seems more convenient for the common use case to me.\nThe downside is that, if Glide looks at glide.yaml/lock files recursively in dependencies, it would be ideal if it didn't just install everything in import, it should probably filter out deps that it discovers are only imported in _test.go files. @davecgh made the fair point on #103 that go get doesn't waste time and space fetching test dependencies by default, unless you use -t. Maybe it would be easier to additionally have testImport, then? Doesn't help avoid waste for deps that don't use Glide, though, if test imports aren't already being omitted there (I'm not sure). Personally I don't care if go test ./... errors in the default case, I'm practically never going to use that without glide novendor so I support the opt-in -t equivalent.\n. > Here's a thought, should it change from devImports to testImports to clear up some confusion?\n@mattfarina If we've resolved that the semantic is meant to be analogous to go get -t, then yes I think that makes sense and focuses the discussion (and it sounds like it's pretty much what @alde's PR was conceived as, modulo naming).\nConsideration of a feature for dev tooling like the go generate support and fresh examples could be cleanly moved to a subsequent ticket, it seems.\n. There's generally a simpler approach taken to this problem than consulting terminfo or the like: just check if stdout is not a TTY. This deals with the cases of piping or redirection.\nThat does not of course handle automatically checking for whether an actual interactive terminal doesn't support color, but IMHO that should be so unusual in 2016 that it should be up to the user to use --no-color in such a case, rather than having baggage in Glide to support it automatically. Piping and redirection is the real practical problem.\nI'm pretty surprised that Go doesn't seem to have an isatty equivalent in the standard lib, but there's a small package, with Windows support: https://github.com/mattn/go-isatty.\n. @tmm1 I can't access your repo/snippet thing, but I assume it deals with the fact that GOPATH=$(pwd)/vendor would expect things to be under a src subdir of vendor, which Glide doesn't?\nNot to disparage Glide on it's own project space, but I quite happily used gb for that kind of workflow on private application projects. The downside is those projects are not go get-able so it's not very tenable for published library projects, so that's where Glide is promising to me.\n. @sdboyer When you say \"pinned\" with regard to integrating the solver, I assume that means \"there is a version already in the lock file\", correct? My expectation from similar tools is that bare glide get would not put any version spec in glide.yaml, but it would result in the version (the revision ID of current HEAD) being stored in the lock file. Then I should be able to specify a scoped update for a different package like glide update someotherpackage, and Glide will not try updating any package other than someotherpackage, and its deps if needed. If updating someotherpackage would require updating another dependency that's locked to a specific revision, it will fail with the solver reporting some information about the version constraint that would need to be loosened.\nI believe that's what you're saying. And completely agree, the current tendency for almost any Glide operation to \"consider\" and potentially update anything in the graph is awfully confusing, and risky (see #328, for one).\n. > The glide get command can get one or more dependencies. Each dependency has it's location and then an optional # followed by any version Glide works with.\nRight, I had found the hash syntax (somewhere) and was aware of it, @sdboyer makes a fair point that it's a bit hard to find currently. My expectation/question was that/if a bare glide get or just putting a package into glide.yaml with no version should result in it locking to current HEAD revision in the lock file, and staying that way unless subsequently updated directly, or by way of updating another dependency that depends on it. I believe that's exactly what @thockin is asking for and also the behavior that @sdboyer is suggesting here when the solver is integrated (aside from possibly putting some version in glide.yaml automatically as well?).\nThat is riskier than setting a version constraint explicitly from the start of course, but if updates are scoped to usually one or a select few packages at once (strongly discouraging the practice of ever doing a broad glide update of everything), it's usually quite manageable.\nSorry for belaboring the discussion, not sure if I've added to it or taken it into the weeds at this point :innocent: \n. > I'm also thinking about adding a way for glide update and glide get to not update the entire tree but only specified packages and their direct dependencies. Thoughts?\nI consider this critical beyond the immediate term, personally. glide update updating the entire tree is like chaos, it allows the surface area of potential breaking changes to be so wide in a project with many dependencies. If the project is security-sensitive, for instance, then I want to scope my updates as narrowly as possible so that it's reasonable to vet the changes I'm pulling in at once. (Personally I want this in just about any project\u2014no whack-a-mole of build breakages, only the components I knew would be affected by the one dep I'm willfully updating because of a fix or new feature. SemVer violations do occasionally happen, too).\n\nI wouldn't mind adding that as a flag to glide get, but that is the sort of thing that I thought we were trying to steer people away from. Ultimately, everyone is healthier if we set this to SemVer (range) instead of to VCS identifiers.\n\nThis seems redundant if the revision is already what's written to the lock file by default when you glide get without a version. Redundant if that dep doesn't get updated again unless I ask it to, i.e. again support for glide update somepackage and that being strongly encouraged as common usage of the update command.\n. @mattfarina Is there a ticket yet specifically for the scoped glide update somepackage functionality? That seems to be the crux of what @sdboyer and I ended up getting into here and advocating, and it's somewhat off topic\u2026\nI think it can sort of be faked right now by changing a version constraint for a single package in glide.yaml, and doing glide install, right? The version could be master if you want to track HEAD similar to go get\u2026\n. I'm excited for this, I believe it's ultimately the solution for a number of issues with Glide where I just can't predict or have confidence in its current behavior. I don't have any projects nearly of the scope of Kubernetes, but I don't mind testing the branch and trying to give UX feedback or whatever is helpful (including trying to build other public projects).\nI believe this is going to change some usage patterns of Glide, by necessity because the solver discussions and implementation have proven some things unsound or irreconcilable. Should there be an outline somewhere of use cases and suggested practices that Glide aims to support, and what breaking changes this may introduce?\n. Tried this out on a (albeit small) project that's using Ginkgo and Gomega, and it picked them up and installed them as expected \ud83d\udc4d \nOne question: should this be writing to the testImport section of glide.yaml? Because that didn't happen for me. I ran rm -rf vendor glide.* on a copy of a project, then glide init followed by glide install.\n. This is killing me, subscribed to #252 for awhile\u2014I'm excited for gps.\n. ",
    "davecgh": "I see the opposite with https://github.com/syndtr/goleveldb.  There are several dependencies that are only needed to run the tests which are included in the imports section of the lock file.\nGlide should gain a -t flag (or an aptly named option in the yaml) just like go get has in my opinion.  Specifically:\nThe -t flag instructs get to also download the packages required to build\nthe tests for the specified packages.\nOne of the primary purposes of glide is, of course, to provide reproducible builds and installs to end user and developers alike.  To that end, testing of dependencies is squarely aimed more at developers than end users and thus should really be opt-in with a flag/optional keyword, just like go get does it.  A normal end user will typically want to the produce the final stable binary without needing or wanting to download the additional packages only needed for testing, particularly of dependencies.\nIt is slightly debatable whether the test-only dependencies of the project itself are included by default, but packages only required by the tests in dependencies should most definitely not be included given the version was specifically pinned because it is already known good and tested.\n. Unless there is a specific need to have a single exit point (such as a required defer, for example), a simple call to os.Exit(code) from anywhere in the CLI tool would do the trick.  Obviously you would not want to call it from a package, but exiting from anywhere in the CLI process is almost always acceptable.\n. I'd also like to see this.  Perhaps I'm in the minority, but honestly, I think this is how get should work by default with the flag being to use the current get behavior (that is to say fetching a single dep and updating the glide.yaml file would be something like glide get --dep or even glide getdep).  Ideally it would also install the fetched project to $GOPATH.\nMy reasoning is that it would be a smoother transition from the go tool.  With that change, fetching a project with all its deps at the appropriate version per the project's glide.yaml and/or glide.lock, building it, and installing it would be practically identical to the go tool:\nCompare:\nbash\n$ go get example.com/foo/bar\nTo\nbash\n$ glide get example.com/foo/bar\nEither way though, if it ends up being glide get --gopath that is still a huge win imo.\n. I agree with @aboukirev in regards to this issue.  For example, we use ripemd160 from golang.org/x/crypto, but glide pulls all the other packages in the golang.org/x/crypto which aren't used or needed.\n. Right, I wasn't very clear.  I understand there is no way to avoid pulling the repo and checking out the appropriate version.  That is of course one of the major reasons for using glide to lock specific versions.\nI was more referring to your second point.  Right now, glide also pulls the dependencies of all of the packages in the repo instead of just the ones needed by the active code path.  For example, consider the gokit repository.  You may only want to use the circuitbreaker and ratelimit packages.  However, glide also pulls the dependencies for all of the other unused subpackages too which include dependencies that are not needed.  For example, the metrics/prometheus subpackage has a dependency on the prometheus client which is not needed at all for any of the other packages, but glide pulls it too.\nAlong the same lines, glide even pulls the dependencies only used by the tests, which, in my opinion, really should require a setting to enable (much like how go get has -t for this purpose).  For example, we make use of goleveldb, which ends up needing 3 additional dependencies (ginkgo, gomega, and protobuf) that are only used in the test path.  Those dependencies are not needed in order to make use of the package.  The main reason for using glide is to lock your already tested and known good dependencies for reproducible builds, so I don't believe that it should be pulling down the test-only deps by default given the author has already vetted and tested them.\n. @mattfarina: Alright, so after looking more closely you're correct that it's the result of a testutil subpackage in goleveldb that imports the unneeded deps as opposed to a _test.go file.\nI made a test repository to show the difference between go get and glide.  Perhaps it'll be useful for testing in the future.\n``` bash\n$ export GOPATH=/d/tmpgo && go get -u -v github.com/davecgh/glidetest\ngithub.com/davecgh/glidetest (download)\ngithub.com/syndtr/goleveldb (download)\ngithub.com/golang/snappy (download)\ngithub.com/syndtr/goleveldb/leveldb/util\ngithub.com/syndtr/goleveldb/leveldb/comparer\ngithub.com/golang/snappy\ngithub.com/syndtr/goleveldb/leveldb/cache\ngithub.com/syndtr/goleveldb/leveldb/storage\ngithub.com/syndtr/goleveldb/leveldb/filter\ngithub.com/syndtr/goleveldb/leveldb/opt\ngithub.com/syndtr/goleveldb/leveldb/errors\ngithub.com/syndtr/goleveldb/leveldb/iterator\ngithub.com/syndtr/goleveldb/leveldb/journal\ngithub.com/syndtr/goleveldb/leveldb/memdb\ngithub.com/syndtr/goleveldb/leveldb/table\ngithub.com/syndtr/goleveldb/leveldb\ngithub.com/davecgh/glidetest\n$ tree -d $GOPATH/src\n/d/tmpgo/src\n\u2514\u2500\u2500 github.com\n    \u251c\u2500\u2500 davecgh\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 glidetest\n    \u251c\u2500\u2500 golang\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 snappy\n    \u2514\u2500\u2500 syndtr\n        \u2514\u2500\u2500 goleveldb\n            \u251c\u2500\u2500 leveldb\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 cache\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 comparer\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 filter\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 iterator\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 journal\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 memdb\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 opt\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 table\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 testutil\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 util\n            \u2514\u2500\u2500 manualtest\n                \u251c\u2500\u2500 dbstress\n                \u2514\u2500\u2500 filelock\n23 directories\n```\nNotice how go get does not grab ginkgo, gomega, or protobuf because they are only used in a package that is not imported within glidetest.  Also notice there are only 23 directories in the tree of deps.\nNow, here is the same thing with glide using the glide.yaml file in the test repo.  I put *** next to the lines that are dealing with packages that are not imported.\n``` bash\n$ cd $GOPATH/src/github.com/davecgh/glidetest && glide up\n[INFO] Fetching updates for github.com/syndtr/goleveldb.\n[INFO] Scanning github.com/syndtr/goleveldb for dependencies.\n[INFO] ==> Unknown github.com/onsi/ginkgo (github.com/onsi/ginkgo) \n[INFO] ==> Unknown github.com/onsi/ginkgo (github.com/onsi/ginkgo/config)\n[INFO] ==> Unknown github.com/onsi/gomega (github.com/onsi/gomega)\n[INFO] Fetching updates for github.com/onsi/ginkgo.\n[INFO] Fetching updates for github.com/onsi/gomega.\n[INFO] Fetching updates for github.com/golang/snappy.\n[INFO] Scanning github.com/golang/snappy for dependencies.\n[INFO] Scanning github.com/onsi/ginkgo for dependencies.\n[INFO] Scanning github.com/onsi/ginkgo for dependencies.\n[INFO] Scanning github.com/onsi/gomega for dependencies.\n[INFO] ==> Unknown github.com/golang/protobuf (github.com/golang/protobuf/proto)\n[INFO] ==> Unknown github.com/golang/protobuf (github.com/golang/protobuf/proto)\n[INFO] Fetching updates for github.com/golang/protobuf.\n[INFO] Scanning github.com/golang/protobuf for dependencies.\n***[INFO] Scanning github.com/golang/protobuf for dependencies.\n[INFO] Project relies on 5 dependencies.\n[INFO] Writing glide.lock file\n$ tree -d vendor\nvendor\n\u2514\u2500\u2500 github.com\n    \u251c\u2500\u2500 golang\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 protobuf\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpb\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 jsonpb_test_proto\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 proto\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 proto3_proto\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 testdata\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 protoc-gen-go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 descriptor\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 generator\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 grpc\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 plugin\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 testdata\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 multi\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 my_test\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 snappy\n    \u251c\u2500\u2500 onsi\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 ginkgo\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 extensions\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 table\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ginkgo\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 convert\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 interrupthandler\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 nodot\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 testrunner\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 testsuite\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 watch\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 integration\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 _fixtures\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 convert_fixtures\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 nested\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 nested_without_gofiles\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 subpackage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 convert_goldmasters\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 coverage_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 external_coverage_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 does_not_compile\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 eventually_failing\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 exiting_synchronized_setup_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 fail_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 failing_after_suite\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 failing_before_suite\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 failing_ginkgo_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 flags_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 focused_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 hanging_suite\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 more_ginkgo_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 no_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 passing_ginkgo_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 passing_suite_setup\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 progress_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 skip_fixture\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 suite_command_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 synchronized_setup_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 tags_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 test_description\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 watch_fixtures\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 A\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 B\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 C\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 D\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 xunit_tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 codelocation\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 containernode\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 failer\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 leafnodes\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 remote\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 specrunner\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 suite\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 testingtproxy\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 writer\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 reporters\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 stenographer\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 types\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 gomega\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 format\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 gbytes\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 gexec\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 _fixture\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 firefly\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 ghttp\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 protobuf\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 internal\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 assertion\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 asyncassertion\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 fakematcher\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 oraclematcher\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 testingtsupport\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 matchers\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 support\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 goraph\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u251c\u2500\u2500 bipartitegraph\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u251c\u2500\u2500 edge\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u251c\u2500\u2500 node\n    \u2502\u00a0\u00a0     \u2502\u00a0\u00a0         \u2514\u2500\u2500 util\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 types\n    \u2514\u2500\u2500 syndtr\n        \u2514\u2500\u2500 goleveldb\n            \u251c\u2500\u2500 leveldb\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 cache\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 comparer\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 filter\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 iterator\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 journal\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 memdb\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 opt\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 storage\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 table\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 testutil\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 util\n            \u2514\u2500\u2500 manualtest\n                \u251c\u2500\u2500 dbstress\n                \u2514\u2500\u2500 filelock\n119 directories\n```\nSo, the end result is glide is ending up with 119 directories in the tree of deps versus 23.\n. For reference, this branch breaks things for me on Windows.  On master with no vendor directory or glide.lock file, running glide up gives me:\nbash\n$ glide -v\nglide version 0.8.2-8-ga9410c3\n$ glide up\n\n[INFO] Fetching updates for github.com/btcsuite/btclog.\n[INFO] Fetching updates for github.com/btcsuite/btcutil.\n...\n[INFO] Scanning github.com/btcsuite/btclog for dependencies.   _<-- hangs here_\n\nWith the issue/194 branch I get:\nbash\n$ glide -v\nglide version 0.8.2-10-geee5327\n$ glide up\n\n[INFO] Fetching updates for github.com/btcsuite/btclog.\n[WARN] Unable to checkout github.com/btcsuite/btclog\n[WARN] Update failed for github.com/btcsuite/btclog: fatal: could not create work tree dir 'D:\\tmpgo\\src\\github.com\\btcsuite\\btcd\\vendor\\github.com\\btcsuite\\btclog': No such file or directory\n: exit status 128\n. @aboukirev: Yep, I'm using MSYS2.  However, I also see the same behavior with cmd.exe:\nD:\\tmpgo\\src\\github.com\\btcsuite\\btcd>d:\\tmpgo\\bin\\glide.exe -v\nglide version 0.8.2-10-geee5327\nD:\\tmpgo\\src\\github.com\\btcsuite\\btcd>d:\\tmpgo\\bin\\glide.exe up\n[INFO] Fetching updates for github.com/btcsuite/btclog.\n[WARN] Unable to checkout github.com/btcsuite/btclog\n[WARN] Update failed for github.com/btcsuite/seelog: fatal: could not create work tree dir 'D:\\tmpgo\\src\\github.com\\btcsuite\\btcd\\vendor\\github.com\\btcsuite\\btclog': No such file or directory\n: exit status 128\n. For some additional data, I noticed the stall goes away on master if I change the GOPATH to the C: drive although it takes ages to scan and look for the stdlib packages.\n[INFO] Fetching updates for time.\n[WARN] Unable to checkout time\n[WARN] Skipped getting time: Cannot detect VCS\n\nEDIT: I should also note that my go installation is installed at D:\\go.  So, the following environment is when the hang (on master) is triggered:\n\n$ go env\nset GOARCH=amd64\nset GOOS=windows\nset GOPATH=D:\\tmpgo\nset GOROOT=D:\\go\n\nHowever, the following environment does not hang, although, as mentioned, the stdlib packages are not detected:\n\n$ go env\nset GOARCH=amd64\nset GOOS=windows\nset GOPATH=C:\\tmpgo\nset GOROOT=D:\\go\n\nAlso, @jrick created a separate issue #199 regarding the inability to find the stdlib packages in the latter case.\n. Along these lines, I'd suggest using filepath.Join throughout versus first + os.PathSeparator + second.\nThe function properly works with both *nix and Windows paths (including those with drives and even UNC paths), only adds separators as needed, and the result is automatically cleaned (per the aforementioned filepath.Clean).\n. As @jrick notes, the issue here is the vcs package is using absolute Windows paths instead of operating like the Go tooling does where it effectively changes to the directory itself (by setting the .Dir field on the exec.Cmd type) and using a relative path.  This allows the Go tooling to avoid the need to use absolute paths and therefore it will work with msys2 git as well as git-for-windows and any other variant.\n. @krancour:  That's a good point.  It can be solved by checking out a specific revision after you use go get to obtain glide.  For example, in .travis.yml you could do:\nYAML\ninstall:\n  - go get -v github.com/Masterminds/glide\n  - cd $GOPATH/src/github.com/Masterminds/glide && git checkout e73500c735917e39a8b782e0632418ab70250341 && go install && cd -\n  - glide install\n...\nThen, whenever you want to update your build environment to a new version of glide, you would simply need to update the .travis.yml to include a newer commit hash.\n. @mattfarina:  The linked package is a real one that we make use of in order to support running as a service on Windows.  Since the way Windows services have to be run is so unique compared to other Operating Systems, the package only applies to Windows.  In that regard, it would be nice to avoid fetching it altogether on the OSes to which it does not apply.\nThat said, on the plus side, the package effectively is ignored when you try to compile it on !Windows (using Go's build tags and file naming constraints), so fetching the package (and checking out the locked revision) on those systems doesn't break anything, however it is a bit wasteful from a resources perspective to download a package that doesn't apply to a given Operating System or architecture and deal with managing setting its revision appropriately.\nGiven that, I personally would like to see the feature remain and fixed from a pure efficiency perspective, however, everything is working properly without it, so it's not at all high priority for us.\n. ",
    "krancour": "I am running into this as well.  I have a project of just integration tests written in go.\nMy workaround has been to include a dummy non-test file that looks like this:\n```\npackage tests\nimport (\n    // This is a workaround for the fact that glide seems not to recursively resolve packages needed\n    // only for testing.\n    _ \"k8s.io/kubernetes/pkg/client/unversioned\"\n)\n```\nBut I'd rather not have to do that, obviously.\n. Specifically, it seems to be failing when transitively vendoring bitbucket.org/ww/goautoneg.\n. And here is why... within a container, assuming my local worspace has been mounted into the container, when hg paths is run on bitbucket.org/ww/goautoneg, this is what happens:\n/go/src/github.com/krancour/deis-v2-router-poc/vendor/bitbucket.org/ww/goautoneg # hg paths\nnot trusting file /go/src/github.com/krancour/deis-v2-router-poc/vendor/bitbucket.org/ww/goautoneg/.hg/hgrc from untrusted user 1000, group 50\nnot trusting file /go/src/github.com/krancour/deis-v2-router-poc/vendor/bitbucket.org/ww/goautoneg/.hg/hgrc from untrusted user 1000, group 50\nAnd that doesn't match the regex in Masterminds/vcs.\n. So, ultimately, that's a permissions issue... not at all a glide bug.  Closing.\n. Possibly related to #149.\n. fwiw, have a look at github.com/deis/docker-go-dev.  It's a fully loaded, containerized go development environment.  Then look at any project that uses it (e.g. github.com/deis/router).  We use the Travis build type generic, require Docker, and use carefully crafted Makefiles that delegate the build to the container.  It solves the problem of how to elegantly install glide on Travis because you will no longer have to... but you also realize many other benefits-- namely your contributors no longer need to jump through hoops to maintain a local go dev environment that's compatible with your project.  This is by no means the \"official\" answer to this question, but you may find it helpful nonetheless.\n. > If you're ok with always pulling the glide master branch, this should be sufficient.\nThis is something to be cautious of.  You can't guarantee your tests and builds are deterministic if the version of your dependency manager can change underneath you from one run to the next.\n. > Just add vendor directory to .gitignore, and you're done.\nThat is so far from the truth. That will only stop further changes to the vendor directory from being tracked. There are additional steps required to remove the vendor directory from the remote repository (i.e. github).\nBut much more importantly, there's a question of whether vendor should be removed. I have worked on many projects that deliberately don't include it and many that deliberately do. There are defensible reasons for both. I am certain that the glide team didn't decide to track vendor without weighing the pros and cons of that against the pros and cons of not tracking it.\nAt any rate, it's not right to so casually dismiss this issue.. > i mean why this repo has vendor directory?\ni think if a repo does not have vendor dir. then glide will create the directory.\n@IndraGunawan this comment was the explanation for that already:\nhttps://github.com/Masterminds/glide/issues/760#issuecomment-280690477\nIf vendored code isn't tracked in this project, then you need glide to build glide. That self-referential dependency is an unresolvable chicken and egg problem.. Disclaimer: I've made modest contributions to glide, but I'm not a member of the team. I do think I can shed some more light on your inquiry though.\nWhile what you have suggested above might work, as a general principle, it's probably better not to completely rely on the previous version to build the current one. Glide's own dependencies are managed with glide, but because vendor is tracked, you don't have to have the previous version of glide to build it. It would be optional and only needed if you intend to update the dependencies.\nSo glide uses glide, but isn't entirely dependent on it. Why is this important?\nRequiring the previous version of any given tool to build the current version of that tool complicates things greatly. Imagine all versions of such a tool are enumerated in the order of their release, using cardinal numbers 1..n. To build a version k, where k <= n, you would require version k - 1. To have that would require that you can build k - 1 using k - 2, and build that using k - 3. This regression continues until you need to build version 1, but you can't because there exists no version 0.\nYes... this is a very academic argument, for sure. And while what you have proposed is possible, that is due only to the pre-compiled binaries for each official release being readily available. In general, however, many projects like to retain the ability to rebuild any version from source only at any time and then my argument applies.. You aren't wrong. And I mean, tbh, I generally do not like including vendor in my own projects. I'm articulating one possible rationale for the decision wrt this project. And that may not even be the rationale that the team actually used when deciding to track vendor. My only point here has been to highlight that the question of tracking vs not tracking vendor is a nuanced one and there isn't necessarily a one size fits all answer. It could be worthy of further discussion, so I wouldn't rush to close this. We should let someone more in touch with the original decision like @technosophos or @mattfarina farina weigh in to explain why they chose this.. Y'all do realize that the proposal to remove vendor or to start using git submodules are both major changes and it seems they're being proposed for what reason? Because of a personal aversion to tracking vendor? Just hang tight and wait for a maintainer to respond to this.. ",
    "sandeeplinux": "we dont use https.\nwill it create a problem even though --insecure tag is added?\n. Thank you. It worked \n. Is --insecure registry https://github.com/Masterminds/glide/issues/107 working with new merge? \nIt seems it is not working for me.please update\n. I was trying to use glide to get stash packages on HTTP \nglide get --insecure stash/package\n. ",
    "fervic": "I'll play a little bit with it in order to provide more details. My first impression is that treating it as submodule is a great approach but don't know what the side effects or complications it brings.\nI cannot classify it as an error, it was just that I initialized a glide project, added some dependencies, commited the changes (including the vendor folder), then a co-worker cloned it and when he tried to glide up it was requesting git credentials for each of the dependencies it was trying to download, but even entering the credentials, it didn't download anything.\nBut, again, I'll play with it a little bit more and provide better detail. I just wanted to know if I was missing some steps or if that was already expected/known behavior.\nThanks!\n. Based on @mattfarina's comment and reading the article @sdboyer shared:\n\nFinally, the submodule commit referenced by the container is stored using its SHA1, not a volatile reference (such as a branch name). Because of this, a submodule does not automatically upgrade which is a blessing in disguise when it comes to reliability, maintenance and QA\n\nSo if vendor/ is checked in as I initially wanted it to, project collaborators would have to use submodule commands for pulling or updating them unless Glide becomes smart (complex) enough and does that upon glide up.\nWill submodules continue being the preferred road?\n. @mattfarina yes that helps, thanks!\nBut the thing is, in a normal workflow, Glide will use GIT submodules by default, that's what happened to me. And the vendor/ folder is not ignored unless the user does it.\nLet me explain what I did (this is all using v0.6.1):\nI had an existing project, so I went into its root folder and issued the following commands:\n$ glide create\n$ glide glide get github.com/<user A>/<project>\n$ glide glide get github.com/<user B>/<project>\n...\n$ glide glide get github.com/<user N>/<project>\n$ glide install\nThen:\n$ git add -A # to add everything Glide created for me\n$ git commit\n$ git push\nIn my repo (local) it downloaded all files from external packages, but on the remote (Github), it pushed the following files:\nvendor/github.com/<user A>/<project>\nvendor/github.com/<user B>/<project>\n...\nvendor/github.com/<user N>/<project>\nWhere each is a text file with the commit hash (as this is how Git manages submodules)\nI see this as the current default behavior of Glide, so I don't know if the README should have some of this stated more clearly or if glide create should be somehow smarter and create or append to the .gitignore file and if each glide get should pin by default to the latest master commit, then the user decides if wants to change it? I may be missing what's the reasoning behind not pinning by default?\nRegards!\nP.S. I can help contributing with code, but wouldn't want to go unaligned with your ideas. For example what about @sdboyer's suggestion of not using submodules? He makes a good point about that Glide shouldn't rely on it for delivering certain functionality.\n. @mattfarina \nJust as a quick side note, I remember reading somewhere in Go documentation that they (Go authors) didn't want to impose any versioning system for packages (like semver). I like semver, but Glide would depend on the community that generates packages to use semver. So maybe sticking to a VCS reference is not such a bad choice.\nRegarding Git and submodules, please forgive my ignorance and misunderstanding, I thought you were using the submodule feature on purpose, now I see this behavior is just the result of basic nested  git cloning and actually taking the submodule route is one of the approaches users could take.\nThat said, my only thought is to do some small edits to the README, be a little more emphatic about why it is discouraged to check-in the /vendor folder and then in the troubleshoot section add specific problems that may arise in the different VCS's if this is done. For example in the case of Git, extra space doesn't seem to be a concern, but extra work is. I have no idea of problems when using other VCS's.\nThanks again!\n. ",
    "fwip": "@albrow Was the error something along the lines of No submodule mapping found in .gitmodules for path 'vendor/...' ?  If so, this is due to a bug in Go 1.5's submodule handling.  It should be fixed for 1.6 (commit here: https://github.com/golang/go/commit/761ac75a948e14fcd8472684effedf75f3fc316e ).  In the meantime, you should be able to workaround the issue by executing go get mypackage ; go get -u mypackage - the update command successfully updates the submodules, it's just the initial get that's broken.\nPersonally, I like the idea of using git submodules to track dependencies - it's basically just an association of \"package = url + revision\". A tool like glide could assist you with picking out the correct revision, whether by comparing semver, tracking a branch, etc, while restoring go-gettability (with the above caveats).\n. ",
    "stevvooe": "@mattfarina Shouldn't glide be removing the .git portion of the dependency? This behavior is fairly surprising. Otherwise, we'd need to have an extra step to remove these files, making glide less useful. We want to vendor the dependencies.\nAn option can be added for those who wish to experience the pain of submodules.\n. @mattfarina I understand the issue here. glide opts not to remove source control directories, since other glide users may not check dependencies into source control. \nTo clarify, our requirements for a dependency management system are somewhat like the following:\n1. The project should work with go get and should adopt all the implications that come with this.\n2. Dependencies should be checked into the vendor/ folder.\n3. Building the project shouldn't require more than basic knowledge of git, go build tools or make.\nFrom some of what you've written, it seems glide may not agree with number 2, albeit it is supported with submodules. Given number 3, however, submodules or plugins are a non-starter. If glide provided an option, possibly enabled by default, to remove the source control directories from vendored dependencies, number 2 and 3 would would be satisfied and we could probably use glide.\nHow would this look? The project maintainer could setup glide to instruct it to remove .git, .bzr, etc:\nconsole\nglide init --remove-repository-directories\nThe configuration file would have an option in the glide.yaml file:\nyaml\npackage: github.com/docker/swarm-v2\nvendor:\n   repository_directories: remove\nimport:\n- package: github.com/gogo/protobuf\n  subpackages:\n  - /gogoproto\n...\nThen, glide would be used normally by those submitting PRs. The options could also be set at a later date, where glide would remove the directories on the next run.\nThis is probably not an ideal solution but I hope it helps to provided a little clarity. If you choose to take the project in another direction, I completely understand.\n. Anything that requires bash or powershell fails requirement 3 above:\n\n\nBuilding the project shouldn't require more than basic knowledge of git, go build tools or make.\n\n\nWhile a little bit of find is okay for a personal project, but having to instruct others to do it correctly, in varying platforms, is a problem. It is extremely interruptive to the contribution process, open source or not. We already have issues trying to help contributors to use godep. If we switch to something else, we'd not like to trade one confusion for another.\n@sdboyer I had a quick run through of your write up. It seems that your head is on straight. Just let us know which direction you intend to take glide. Keep up the great work!\n. ",
    "sym3tri": "For what it's worth, I tried out glide and found it to be a really awesome tool. Great work so far!\nHowever this is the single issue that's blocking me and my company from using it in all of our projects. Removing the .git stuff is all that should be needed for us. Seems like a trivial change, and we'd be happy to help with the change if the maintainers are ok with this direction.\n. ",
    "LK4D4": "@dnephin nooooo, no more bash pls :)\n. Also, up could be much faster if glide wouldn't download all subdepndencies.\nFor example, I use github.com/docker/docker/pkg/pubsub, glide downloads the whole docker, and it's dependencies(like libnetwork, grpc).\nImport graph definitely should be used.\n. @technosophos godep is an example of package manager that does that. However, I agree that you shouldn't try to satisfy everyone with Glide.\n. @technosophos Thanks!\n. @mattfarina Yup, I'll post my experiments little later.\nHere is my glide.yaml - https://gist.github.com/298554a176e9a1b37083\nHowever it doesn't feel right :/ Seems like os and arch should be arguments to create.\nLet me know how I can achieve glide.yaml for mutliple os\n. @mattfarina Ok, thanks. Actually just os, arch args for glide create would work for us, but UseAllFiles will be just awesome.\n. @mattfarina \nFailed to build an initial list of packages to scan: no buildable Go source files in /home/moroz/project/workspace/src/github.com/docker/docker/profiles/seccomp\nin docker :/\nLooks like you're ignoring tags. I still think that you need to parse all tags as well.\n. @mattfarina Now I have old error:\nFailed to build an initial list of packages to scan: found packages archive (archive.go) and main (example_changes.go)\n. @mattfarina seems like work now. There are new errors, but I think it's for another issue.\n. @mattfarina I have four errors which unrelated to multiple packages:\n[ERROR] Error scanning github.com/docker/distribution/reference: open /home/moroz/project/workspace/src/github.com/docker/docker/vendor/github.com/docker/distribution/reference: no such file\nor directory\n[ERROR] Error scanning github.com/docker/distribution/manifest/manifestlist: open /home/moroz/project/workspace/src/github.com/docker/docker/vendor/github.com/docker/distribution/manifest/manifestlist: no such file or directory\n[ERROR] Error scanning github.com/docker/distribution/manifest/schema1: open /home/moroz/project/workspace/src/github.com/docker/docker/vendor/github.com/docker/distribution/manifest/schema1: no such file or directory\n[ERROR] Error scanning github.com/docker/distribution/manifest/schema2: open /home/moroz/project/workspace/src/github.com/docker/docker/vendor/github.com/docker/distribution/manifest/schema2: no such file or directory\nAnd so, there is no packages:\ngithub.com/docker/distribution/manifest/manifestlist\ngithub.com/docker/distribution/manifest/schema1\ngithub.com/docker/distribution/manifest/schema2\ngithub.com/docker/distribution/reference\nThey imported from github.com/docker/docker/distribution and github.com/docker/docker/reference. I don't see any tags or something tricky there, so it's better to look yourself.\n. @mattfarina thanks! I'll take a look tomorrow \n. @mattfarina Cool, thanks. Your tool is first which is able to do docker vendoring.\n. I think it's a dupe of #112. However, I believe that it's an excellent feature to have - cleaning packages from .git, tests, testdata, binaries and unused subpackages. I will use glide for Docker venoring if it supports \"vendor-stripping\". Godep, docker hack/vendor.sh and my toy-vendor-tool https://github.com/LK4D4/vndr can do that for reference, but they lack other important features which present in glide.\n. @daniel-garcia that's a good point, indeed.\n. I agree that 1 is simpler. And I think it's broken use case to use different vendor strategies within single project.\n. ",
    "jrick": "If you need that find functionality on Windows it's easily added in powershell:\nGet-ChildItem . -File -Recurse -Exclude '*\\.git\\*' | ForEach-Object { Resolve-Path -Relative $_.FullName | & git add $_ }\nMight be a better way to write that (I'm still a bit inexperienced in PS) but it beats relying on a compatible unix find being installed.\n. I also could not reproduce any stall (even with master) when both my Go installation and GOPATH were on C:\n. I don't believe the two shells need to be handled any differently.  msys2 does provide a unix-like filesystem layout (the typical /usr, /etc, /bin... of the msys2 installation root) and merges it with paths for Windows drives (so C:\\Users\\jrick becomes /c/Users/jrick).  But I think that this distinction only matters for unix tools compiled for msys2, that have to use the unix paths, or otherwise be rewritten for windows.  Environment variables should always be Windows-style (e.g. even when using the msys2 bash shell, you'd want to set GOPATH with export GOPATH='C:\\Path\\To\\Gopath') and the glide Windows binary should only need to understand the Windows paths.\n. Also note that I was running a glide \"dev\" version built from commit a9410c3c368472e6540f8010baeefb6c0e578982 (I was not running the 194 branch at the time).\n. It stalls when using that branch.\njrick@rig  /d/Go/src/github.com/btcsuite/btcd\n$ glide up\n[WARN] To use Glide, you must set GO15VENDOREXPERIMENT=1\n[INFO] Fetching updates for github.com/btcsuite/btclog.\n[INFO] Fetching updates for github.com/btcsuite/btcutil.\n[INFO] Fetching updates for github.com/btcsuite/fastsha256.\n[INFO] Fetching updates for github.com/btcsuite/go-flags.\n[INFO] Fetching updates for github.com/btcsuite/go-socks.\n[INFO] Fetching updates for github.com/btcsuite/golangcrypto.\n[INFO] Fetching updates for github.com/btcsuite/goleveldb.\n[INFO] Fetching updates for github.com/btcsuite/seelog.\n[INFO] Fetching updates for github.com/btcsuite/websocket.\n[INFO] Fetching updates for github.com/btcsuite/winsvc.\n[INFO] Fetching updates for github.com/davecgh/go-spew.\n[INFO] Scanning github.com/btcsuite/btclog for dependencies. <--stalls here\nMy glide.yaml in case you want to test using our repo (github.com/btcsuite/btcd):\npackage: github.com/btcsuite/btcd\nimport:\n- package: github.com/btcsuite/btclog\n- package: github.com/btcsuite/btcutil\n  subpackages:\n  - .\n  - bloom\n- package: github.com/btcsuite/fastsha256\n- package: github.com/btcsuite/go-flags\n- package: github.com/btcsuite/go-socks\n  subpackages:\n  - socks\n- package: github.com/btcsuite/golangcrypto\n  subpackages:\n  - ripemd160\n- package: github.com/btcsuite/goleveldb/\n  subpackages:\n  - leveldb\n  - leveldb/iterator\n  - leveldb/opt\n  - leveldb/util\n- package: github.com/btcsuite/seelog\n- package: github.com/btcsuite/websocket\n- package: github.com/btcsuite/winsvc\n  os:\n  - windows\n  subpackages:\n  - eventlog\n  - mgr\n  - src\n- package: github.com/davecgh/go-spew\n  subpackages:\n  - spew\n. Seems to be fixed for me on master now (glide up works no matter what drive my GOPATH is on, and is working in all shells).  Thanks!\nFWIW: my go env environment variables were the same in both shells:\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=D:\\Go\nset GORACE=\nset GOROOT=C:\\Go\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\n. I'm seeing similar with powershell.  If I change one of our dependencies to use a git@github.com:foo/bar.git ssh clone url, ssh pubkey auth fails.\n```\nPS C:\\Users\\jrick\\go\\src\\github.com\\btcsuite\\btcd> glide up\n[WARN] To use Glide, you must set GO15VENDOREXPERIMENT=1\n[INFO] Fetching updates for github.com/btcsuite/btclog.\n[WARN] Unable to checkout github.com/btcsuite/btclog\n[WARN] Update failed for github.com/btcsuite/btclog: Cloning into 'C:\\Users\\jrick\\go\\src\\github.com\\btcsuite\\btcd\\vendor\\github.com\\btcsuite\\btclog'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n: exit status 128\n```\nCloning manually works.\nPS C:\\Users\\jrick\\go\\src\\github.com\\btcsuite\\btcd> git clone git@github.com:btcsuite/btclog.git\nCloning into 'btclog'...\nEnter passphrase for key '/c/Users/jrick/.ssh/id_ed25519':\nremote: Counting objects: 62, done.\nReceiving objects:  50% (31/62)   d 0 (delta 0), pack-reused 62eceiving objects:  43% (27/62)\nReceiving objects: 100% (62/62), 14.57 KiB | 0 bytes/s, done.\nResolving deltas: 100% (30/30), done.\nChecking connectivity... done.\nThe pubkeys it should be picking up are in C:\\Users\\jrick\\.ssh.  Perhaps it's setting an incorrect ssh username?\nI also think it would be helpful, with --debug, for glide to print the commands that it's shelling out for (especially in the case that they exited with a nonzero code).\nI'm using (an albeit outdated) Git installed from http://git-for-windows.github.io/, and the directory is added to my path:\n```\nPS C:\\Users\\jrick> Get-Command git\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nApplication     git.exe                                            2.5.0.0    C:\\Program Files\\Git\\cmd\\git.exe\n```\n. Same error with 2.6.0.  It must be some environment thing if it works from the git bash shell, but not cmd.exe or powershell.\nedit: diffed the output of the msys2 env command from both powershell and the git-for-windows bash shell, and there's no difference.\n. Doesn't appear so.\n```\nPS C:\\Users\\jrick> mkdir test\nDirectory: C:\\Users\\jrick\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         1/6/2016   9:14 AM                test\nPS C:\\Users\\jrick> cd test\nPS C:\\Users\\jrick\\test> echo $env:PWD\nPS C:\\Users\\jrick\\test> $env:PWD=\"C:\\Users\\jrick\"\nPS C:\\Users\\jrick\\test> echo $env:PWD\nC:\\Users\\jrick\nPS C:\\Users\\jrick\\test> git clone git@github.com:Masterminds/glide.git\nCloning into 'glide'...\nEnter passphrase for key '/c/Users/jrick/.ssh/id_ed25519':\nremote: Counting objects: 2494, done.\nremote: Total 2494 (delta 0), reused 0 (delta 0), pack-reused 2494 eceiving objects:  97% (2420/2494)\nReceiving objects: 100% (2494/2494), 610.10 KiB | 0 bytes/s, done.\nResolving deltas: 100% (1711/1711), done.\nChecking connectivity... done.\nPS C:\\Users\\jrick\\test> ls\nDirectory: C:\\Users\\jrick\\test\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         1/6/2016   9:20 AM                glide\n```\nThe process is still running relative to C:\\Users\\jrick\\test and is ignoring the PWD environment var.\n. That error is from git.\nMasterminds/vcs#11\n. Oops, intended to add a testcase for this and it fails because it just concats the root + extra, which no longer matches the initial input.  Fixing shortly.\n. No. That will convert the backslashes to forward slashes, but the returned subpackage will still contain the full root since the TrimPrefix just above it did not remove the root.\n. I'm not sure why it's failing on Travis now.  Passes locally.\n. Oh.. I see.\nFrom filepath/path.go:\nfunc ToSlash(path string) string {\n    if Separator == '/' {\n        return path\n    }\n    return strings.Replace(path, string(Separator), \"/\", -1)\n}\nSeparator is os.PathSeparator so this has different behavior on Windows vs Unix.  Specifically, on Unix, it won't replace backslashes with forward slashes since backslashes are not a separator character on those platforms, causing the new test to fail there.\nWhat do you want to do in this case?  Should glide replace uses of filepath.ToSlash with its own version that works consistently on all platforms?\n. Looks like we could just use that instead of filepath.ToSlash.\nSuggestions on how to use it though? it's unexported in another package.  Copy it into util?\n. glide itself is go getable (with vendored deps checked into git), it just won't include the exact commit hash in the binary this way.  If you're ok with always pulling the glide master branch, this should be sufficient.\n. This was done using 0.12.0 release on both machines.\n. Oh, and since more changes have gone to master since opening this issue, to help reproducibility, all of this was done with dcrd checked out to commit 1c9d038acd64494435abe59fc5a2b136c1793354.\n. @kujenga I'm seeing the same, no https-github.com-decred-dcrd directory in my case (and it is there on Windows).  What OS?\n. I do the majority of my development on Windows and am working on another project which imports this one, so that would make sense why it worked there.  After doing a glide install on that project from the bitrig box, I do now see the directory in cache, and glide update works again.\n. $ pwd\n/home/jrick\n$ go env GOROOT\n/home/jrick/go\n$ go env GOPATH\n/home/jrick/src/go\n$ glide cc\n[INFO]    Glide cache has been cleared.\n$ cd src/go/src/github.com/decred/dcrd\n$ glide update\n[INFO]    Downloading dependencies. Please wait...\n[INFO]    --> Fetching github.com/btcsuite/go-socks.\n[INFO]    --> Fetching github.com/btcsuite/winsvc.\n[INFO]    --> Fetching github.com/btcsuite/btclog.\n[INFO]    --> Fetching github.com/decred/blake256.\n[INFO]    --> Fetching github.com/btcsuite/go-flags.\n[INFO]    --> Fetching github.com/btcsuite/websocket.\n[INFO]    --> Fetching github.com/btcsuite/seelog.\n[INFO]    --> Fetching github.com/btcsuite/golangcrypto.\n[INFO]    --> Fetching github.com/decred/ed25519.\n[INFO]    --> Fetching github.com/decred/dcrutil.\n[INFO]    --> Fetching github.com/decred/dcrrpcclient.\n[INFO]    --> Fetching golang.org/x/crypto.\n[INFO]    --> Fetching github.com/davecgh/go-spew.\n[INFO]    --> Fetching github.com/decred/bitset.\n[INFO]    --> Fetching github.com/btcsuite/goleveldb.\n[INFO]    --> Setting version for github.com/btcsuite/seelog to v2.1.\n[INFO]    Resolving imports\n[ERROR]   Error scanning github.com/decred/dcrd/addrmgr: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/addrmgr: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/blockchain: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/blockchain: no such file or director\ny\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/blockchain/stake: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/blockchain/stake: no such file\n or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/chaincfg: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/chaincfg: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/chaincfg/chainec: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/chaincfg/chainec: no such file\n or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/chaincfg/chainhash: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/chaincfg/chainhash: no such\nfile or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/database: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/database: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/dcrjson: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/dcrjson: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/limits: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/limits: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/mining: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/mining: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/peer: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/peer: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/txscript: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/txscript: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/wire: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/wire: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/dcrec/edwards: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/dcrec/edwards: no such file or di\nrectory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/dcrec/secp256k1: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/dcrec/secp256k1: no such file o\nr directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[ERROR]   Error scanning github.com/decred/dcrd/dcrec/secp256k1/schnorr: open /home/jrick/.glide/cache/src/https-github.com-decred-dcrd/dcrec/secp256k1/schnorr\n: no such file or directory\n[ERROR]   This error means the referenced package was not found.\n[ERROR]   Missing file or directory errors usually occur when multiple packages\n[ERROR]   share a common dependency and the first reference encountered by the scanner\n[ERROR]   sets the version to one that does not contain a subpackage needed required\n[ERROR]   by another package that uses the shared dependency. Try setting a\n[ERROR]   version in your glide.yaml that works for all packages that share this\n[ERROR]   dependency.\n[INFO]    --> Fetching github.com/btcsuite/snappy-go.\n[ERROR]   Failed to retrieve a list of dependencies: Error resolving imports\n$\n. Can confirm this fixes the issue with being unable to update.  The newly created glide.lock no longer has references to the project itself.  However I do see that it still vendored the project github.com/decred/dcrd into its own vendor directory.  Might be due to an A -> B -> A dependency on another of our repos.\n. Oops yes, i'm an idiot.  Was looking at glide.yaml not glide.lock.  The lockfile does still reference the project itself.\n. Looks good!\n. If the vendor directory is removed, and you don't already have glide built to populate the directory, how are you going to build glide?\nIt's a bootstrapping issue.  Most projects can get away with not committing the directory, but glide needs to.. The issue is that name contains backslashes.  The root is normalized, but the full name is not, so the prefix trim doesn't work as intended.\nWith github.com\\foo\\bar\\baz as input:\n// name == \"github.com\\foo\\bar\\baz\"\nroot := GetRootFromPackage(name) // root == \"github.com/foo/bar\"\nextra := strings.TrimPrefix(name, root) // extra == \"github.com\\foo\\bar\\baz\"\n. Not to my knowledge.  Should this only replace backslashes then?\n. If you use sha256.Sum256 instead of using the hash.Hasher interface, you can return a [32]byte or *[32]byte instead of a slice.  Arrays of equal size can be compared with == so there's no need to use bytes.Equal for them.\n. I believe the *LinkError returned by Rename should have the Err field set to a syscall.Errno, which is a uintptr and can be compared against a Win32 error code.\nLooking at https://msdn.microsoft.com/en-us/library/cc231199.aspx, it's probably 0x11 ERROR_NOT_SAME_DEVICE.\n. ",
    "tanji": "Has a clear decision been made on this subject? Because it still exists right now.\nAnd FWIW, I see that Masterminds has committed the vendor directory to the repo.\n. ",
    "akutz": "I'm enabling the --no-recursive switch to see if that helps.\n. That seemed to do the trick! https://travis-ci.org/emccode/rexray/builds/86488607\n. Hi @mattfarina,\nWell, it wasn't good, that's for sure. It broke prod builds since I use go get to get glide. I will switch that to a static version in the future for sure. Thanks for looking into it!\n. Hi @mattfarina,\nWell, yeah, I mean obviously :) Same here with my software. We all get bit sometimes. That's why they're called bugs :) No biggie in the long run -- it was just a pain to figure out since I was running silent on Travis (no output) and locally I hadn't updated Glide. So it was an hour or so before I realized what was happening (after I showed the output on Travis). \n. Hi @technosophos,\nThat appears to have addressed the issue. It was night and day. \nFWIW, I disable recursive by default because I only \"lock\" my dependencies prior to a release. I guess it comes from working with Maven for so long.\n. Hi @technosophos,\nThat sounds cool! Yeah, when we locked dependencies prior to the last release I did a glide guess followed by a glide pin to generate a file that was relevant for that release. One thing was was confusing is why glide pin wasn't working at first. It took me far too long to realize that I actually had to already have glide manage a dependency before it could pin it (hence the glide guess).\n. I've been using the master branch for all my builds since I set them up on Travis and aside from this issue (to which the authors responded promptly) and one other, it's all been smooth sailing. Thanks all!\n. I take that back, the latest builds apparently break it completely. sigh Here's a local vendor dir after updating glide locally and pulling things using version instead of ref in the glide.yaml:\n[0]akutz@pax:rexray$ git --git-dir=vendor/github.com/spf13/viper/.git --work-tree=vendor/github.com/spf13/viper log -n 5 --oneline\n1967d93 Fixed #36: Changed Marshal to Unmarshal throughout.\n0a4a93b [110] Default Values Specify Type\n3c0ff86 running tests again\n09ba0a6 fixing second slice type needed\nd028fd6 changing import statements back\nYet if we look at the remote:\n[0]akutz@pax:rexray$ git --git-dir=vendor/github.com/spf13/viper/.git --work-tree=vendor/github.com/spf13/viper remote -v\norigin  https://github.com/akutz/viper.git (fetch)\norigin  https://github.com/akutz/viper.git (push)\n[0]akutz@pax:rexray$\nAnd then at my config:\n- package: github.com/spf13/viper\n    version: support/rexray\n    repo:    https://github.com/akutz/viper.git\n    vcs:     git\nAnd then at that branch on the remote (https://github.com/akutz/viper/commits/support/rexray):\n\nThis has broken my builds, and I'm currently trying to figure out how to best backtrack to an earlier, working glide build. I don't suppose you'd reverse that merge request, would you? It appears to be FUBAR.\n. Okay, it may be me? I updated Glide locally and reverted the \"bad\" commit, and it's actually still broken. At some point did you remove support for branch names?\n[0]akutz@pax:rexray$ $GOPATH/bin/glide up\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Fetching updates for github.com/goamz/goamz.\n[INFO] Fetching updates for github.com/emccode/goscaleio.\n[INFO] Fetching updates for github.com/emccode/goxtremio.\n[INFO] Fetching updates for github.com/akutz/golf.\n[INFO] Fetching updates for github.com/go-yaml/yaml.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for gopkg.in/yaml.v1.\n[INFO] Setting version for gopkg.in/yaml.v2 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/goamz/goamz to d864e94f00efde9785b51e0d9f9e3ed04e2e6ecd.\n[INFO] Setting version for github.com/emccode/goscaleio to ff8bf10008603307944f5b14cc2bc21bc6b411b2.\n[INFO] Setting version for github.com/emccode/goxtremio to 89e87d4bdf43837a161fd36ad8dd32e0ce42ae98.\n[INFO] Setting version for github.com/akutz/golf to v0.1.1.\n[INFO] Setting version for github.com/go-yaml/yaml to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/spf13/pflag to b084184666e02084b8ccb9b704bf0d79c466eb1d.\n[INFO] Setting version for github.com/spf13/cobra to 363816bb13ce1710460c2345017fd35593cbf5ed.\n[WARN] The reference 'support/rexray' is not valid\n[WARN] Failed to set version on github.com/spf13/viper to support/rexray: improper constraint: support/rexray\n[INFO] Setting version for gopkg.in/yaml.v1 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Package gopkg.in/yaml.v2 manages its own dependencies\n[INFO] Package github.com/goamz/goamz manages its own dependencies\n[INFO] Package github.com/emccode/goscaleio manages its own dependencies\n[INFO] Package github.com/emccode/goxtremio manages its own dependencies\n[INFO] Package github.com/akutz/golf manages its own dependencies\n[INFO] Package github.com/go-yaml/yaml manages its own dependencies\n[INFO] Package github.com/spf13/pflag manages its own dependencies\n[INFO] Package github.com/spf13/cobra manages its own dependencies\n[INFO] Package github.com/spf13/viper manages its own dependencies\n[INFO] Package gopkg.in/yaml.v1 manages its own dependencies\n[INFO] Setting version for gopkg.in/yaml.v2 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/goamz/goamz to d864e94f00efde9785b51e0d9f9e3ed04e2e6ecd.\n[INFO] Setting version for github.com/emccode/goscaleio to ff8bf10008603307944f5b14cc2bc21bc6b411b2.\n[INFO] Setting version for github.com/emccode/goxtremio to 89e87d4bdf43837a161fd36ad8dd32e0ce42ae98.\n[INFO] Setting version for github.com/spf13/pflag to b084184666e02084b8ccb9b704bf0d79c466eb1d.\n[INFO] Setting version for github.com/spf13/cobra to 363816bb13ce1710460c2345017fd35593cbf5ed.\n[WARN] The reference 'support/rexray' is not valid\n[WARN] Problem setting version on github.com/spf13/viper: improper constraint: support/rexray (flatten)\n[INFO] Setting version for github.com/akutz/golf to v0.1.1.\n[INFO] Setting version for github.com/go-yaml/yaml to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for gopkg.in/yaml.v1 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Project relies on 10 dependencies.\n[0]akutz@pax:rexray$\nNote that the portion of my config using a branch name fails. I used to use them. Your documentation uses master. Something up?\n. Hi All, \nMy manager and cohort on REX-Ray, among other things, @clintonskitson, noted that this appears to have regressed in 0.8.0, and was working in 0.7.2 (https://github.com/emccode/rexray/issues/221#issuecomment-166715284). \n. Hi @mattfarina,\nIt's apparently an ordering issue with transitive dependencies. Please see this PR https://github.com/emccode/rexray/pull/237\n. Hi @mattfarina,\nYup, no worries. Please feel free to re-order the goof dependency where it was prior to the change in the PR, run make deps, and then you should see the issue crop up.\n. I think so, but mine still appears to be hanging locally as well. I'm working with large projects with large dependencies. Either much better feedback is needed or there needs to be a way to disable parallel fetching as well as simply better communication while getting a single package. As I said, I can no longer get deps with Glide locally. It always times out or errors.\n. For an example try cloning this project (https://github.com/emccode/rexray) and running glide up on it locally.See if that ever completes for you.\n. Here's my local run via Make:\n[0]akutz@pax:rexray$ make deps\n/Users/akutz/Projects/go/bin/glide --debug up\n[DEBUG] Creating vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Fetching updates for github.com/akutz/goof.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for github.com/emccode/goscaleio.\n[INFO] Fetching updates for github.com/goamz/goamz.\n[INFO] Fetching updates for github.com/emccode/goxtremio.\n[INFO] Fetching updates for github.com/akutz/gofig.\n[INFO] Fetching updates for github.com/go-yaml/yaml.\n[INFO] Fetching updates for github.com/akutz/gotil.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Fetching updates for gopkg.in/yaml.v1.\n[INFO] Fetching updates for github.com/rackspace/gophercloud.\n[INFO] Fetching updates for google.golang.org/api.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/emccode/govmax.\n[INFO] Fetching updates for github.com/akutz/golf.\n[INFO] Fetching updates for github.com/emccode/goisilon.\n[INFO] Fetching updates for github.com/appropriate/go-virtualboxclient.\n[DEBUG] Attempting to find current branch for https://github.com/akutz/goof\n[DEBUG] Saving default branch for https://github.com/akutz/goof\n[DEBUG] Attempting to find current branch for https://github.com/akutz/golf\n[DEBUG] Saving default branch for https://github.com/akutz/golf\n[DEBUG] Attempting to find current branch for https://github.com/akutz/goxtremio.git\n[DEBUG] Attempting to find current branch for https://github.com/akutz/gotil\n[DEBUG] Saving default branch for https://github.com/akutz/goxtremio.git\n[DEBUG] Saving default branch for https://github.com/akutz/gotil\n[DEBUG] Attempting to find current branch for https://github.com/emccode/goisilon\n[DEBUG] Saving default branch for https://github.com/emccode/goisilon\n[DEBUG] Attempting to find current branch for https://github.com/akutz/gofig\n[DEBUG] Saving default branch for https://github.com/akutz/gofig\n[DEBUG] Attempting to find current branch for https://github.com/emccode/govmax\n[DEBUG] Saving default branch for https://github.com/emccode/govmax\n[DEBUG] Attempting to find current branch for https://github.com/clintonskitson/go-virtualboxclient\n[DEBUG] Saving default branch for https://github.com/clintonskitson/go-virtualboxclient\n[DEBUG] Attempting to find current branch for https://github.com/emccode/goscaleio.git\n[DEBUG] Saving default branch for https://github.com/emccode/goscaleio.git\n[DEBUG] Attempting to find current branch for https://github.com/spf13/pflag\n[DEBUG] Saving default branch for https://github.com/spf13/pflag\n[DEBUG] Attempting to find current branch for https://github.com/akutz/cobra\n[DEBUG] Saving default branch for https://github.com/akutz/cobra\n[DEBUG] Attempting to find current branch for https://github.com/akutz/viper.git\n[DEBUG] Saving default branch for https://github.com/akutz/viper.git\n[DEBUG] Attempting to find current branch for https://github.com/akutz/yaml.git\n[DEBUG] Saving default branch for https://github.com/akutz/yaml.git\n[DEBUG] Attempting to find current branch for https://github.com/akutz/yaml.git\n[DEBUG] Saving default branch for https://github.com/akutz/yaml.git\n[DEBUG] Attempting to find current branch for https://github.com/akutz/yaml.git\n[DEBUG] Saving default branch for https://github.com/akutz/yaml.git\n[DEBUG] Attempting to find current branch for https://github.com/clintonskitson/goamz\n[DEBUG] Saving default branch for https://github.com/clintonskitson/goamz\n[DEBUG] Attempting to find current branch for https://github.com/golang/net\n[DEBUG] Saving default branch for https://github.com/golang/net\n[DEBUG] Attempting to find current branch for https://github.com/clintonskitson/gophercloud.git\n[DEBUG] Saving default branch for https://github.com/clintonskitson/gophercloud.git\n[DEBUG] Attempting to find current branch for https://github.com/google/google-api-go-client.git\n[DEBUG] Saving default branch for https://github.com/google/google-api-go-client.git\n[INFO] Setting version for github.com/akutz/goof to master.\n[INFO] Setting version for github.com/goamz/goamz to 5c85623a00092be41b679e53ef47772cf8ded1da.\n[INFO] Setting version for gopkg.in/yaml.v1 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/emccode/govmax to 39eb25ef96221a595aea883ffded341d37750d51.\n[INFO] Setting version for github.com/emccode/goxtremio to 89e87d4bdf43837a161fd36ad8dd32e0ce42ae98.\n[INFO] Setting version for github.com/akutz/gotil to master.\n[INFO] Setting version for github.com/akutz/gofig to master.\n[INFO] Setting version for github.com/spf13/pflag to b084184666e02084b8ccb9b704bf0d79c466eb1d.\n[INFO] Setting version for google.golang.org/api to fd081149e482b10c55262756934088ffe3197ea3.\n[INFO] Setting version for github.com/emccode/goisilon to f9b53f0aaadb12a26b134830142fc537f492cb13.\n[INFO] Setting version for golang.org/x/net to master.\n[INFO] Setting version for github.com/go-yaml/yaml to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for gopkg.in/yaml.v2 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/rackspace/gophercloud to 42196eaf5b93739d335921404bb7c5f2205fceb3.\n[INFO] Setting version for github.com/emccode/goscaleio to 29678665e99b627013b8b9f2727bbdaed79bbd05.\n[INFO] Setting version for github.com/spf13/cobra to 363816bb13ce1710460c2345017fd35593cbf5ed.\n[INFO] Setting version for github.com/akutz/golf to v0.1.1.\n[INFO] Setting version for github.com/appropriate/go-virtualboxclient to e0978ab2ed407095400a69d5933958dd260058cd.\n[INFO] Setting version for github.com/spf13/viper to support/rexray.\n[INFO] Resolving imports\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gofig to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/Sirupsen/logrus to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gotil to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/docker/docker/pkg/mount to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/goof to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/handlers to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/mux to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/opencontainers/runc/libcontainer/label to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz/aws to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz/ec2 to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net/context to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/oauth2/google to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api/compute/v1 to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goisilon to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/servers to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio/types/v1 to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/appropriate/go-virtualboxclient/virtualboxclient to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/govmax/api/v1 to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goxtremio to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/golf/logrus to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/cobra to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/pflag to queue\n[DEBUG] Adding local mport /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/yaml.v1 to queue\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/goof\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/pflag\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/cobra\n[DEBUG] Package github.com/spf13/cobra imports github.com/cpuguy83/go-md2man/md2man\n[DEBUG] Found on GOPATH, not vendor: github.com/cpuguy83/go-md2man/md2man\n[INFO] Fetching github.com/cpuguy83/go-md2man/md2man into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/cpuguy83/go-md2man\n[DEBUG] Saving default branch for https://github.com/cpuguy83/go-md2man\n[DEBUG] Package github.com/spf13/cobra imports github.com/inconshreveable/mousetrap\n[DEBUG] Found on GOPATH, not vendor: github.com/inconshreveable/mousetrap\n[INFO] Fetching github.com/inconshreveable/mousetrap into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/inconshreveable/mousetrap\n[DEBUG] Saving default branch for https://github.com/inconshreveable/mousetrap\n[DEBUG] Package github.com/spf13/cobra imports github.com/spf13/pflag\n[DEBUG] In vendor: github.com/spf13/pflag\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/viper\n[DEBUG] Package github.com/spf13/viper imports github.com/BurntSushi/toml\n[DEBUG] Found on GOPATH, not vendor: github.com/BurntSushi/toml\n[INFO] Fetching github.com/BurntSushi/toml into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/BurntSushi/toml\n[DEBUG] Saving default branch for https://github.com/BurntSushi/toml\n[DEBUG] Package github.com/spf13/viper imports github.com/kr/pretty\n[DEBUG] Found on GOPATH, not vendor: github.com/kr/pretty\n[INFO] Fetching github.com/kr/pretty into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/kr/pretty\n[DEBUG] Saving default branch for https://github.com/kr/pretty\n[DEBUG] Package github.com/spf13/viper imports github.com/magiconair/properties\n[DEBUG] Found on GOPATH, not vendor: github.com/magiconair/properties\n[INFO] Fetching github.com/magiconair/properties into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/magiconair/properties\n[DEBUG] Saving default branch for https://github.com/magiconair/properties\n[DEBUG] Package github.com/spf13/viper imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[INFO] Fetching github.com/mitchellh/mapstructure into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/mitchellh/mapstructure\n[DEBUG] Saving default branch for https://github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/spf13/viper imports github.com/spf13/cast\n[DEBUG] Found on GOPATH, not vendor: github.com/spf13/cast\n[INFO] Fetching github.com/spf13/cast into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/spf13/cast\n[DEBUG] Saving default branch for https://github.com/spf13/cast\n[DEBUG] Package github.com/spf13/viper imports github.com/spf13/jwalterweatherman\n[DEBUG] Found on GOPATH, not vendor: github.com/spf13/jwalterweatherman\n[INFO] Fetching github.com/spf13/jwalterweatherman into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/spf13/jwalterweatherman\n[DEBUG] Saving default branch for https://github.com/spf13/jwalterweatherman\n[DEBUG] Package github.com/spf13/viper imports github.com/spf13/pflag\n[DEBUG] In vendor: github.com/spf13/pflag\n[DEBUG] Package github.com/spf13/viper imports gopkg.in/fsnotify.v1\n[DEBUG] Found on GOPATH, not vendor: gopkg.in/fsnotify.v1\n[INFO] Fetching gopkg.in/fsnotify.v1 into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://gopkg.in/fsnotify.v1\n[DEBUG] Saving default branch for https://gopkg.in/fsnotify.v1\n[DEBUG] Package github.com/spf13/viper imports gopkg.in/yaml.v2\n[DEBUG] In vendor: gopkg.in/yaml.v2\n[DEBUG] Marking gopkg.in/yaml.v2 to be scanned.\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Setting version skipped.\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz: no buildable Go source files in /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz\n[DEBUG] No subpackages declared. Skipping github.com/goamz/goamz.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio\n[DEBUG] Package github.com/emccode/goscaleio imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[INFO] Fetching github.com/Sirupsen/logrus into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/akutz/logrus\n[DEBUG] Saving default branch for https://github.com/akutz/logrus\n[INFO] Setting version for github.com/Sirupsen/logrus to feature/logrus-aware-types.\n[DEBUG] Package github.com/emccode/goscaleio imports github.com/emccode/goscaleio/types/v1\n[DEBUG] In vendor: github.com/emccode/goscaleio/types/v1\n[DEBUG] Marking github.com/emccode/goscaleio/types/v1 to be scanned.\n[DEBUG] Dependency github.com/emccode/goscaleio has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/emccode/goscaleio has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goscaleio has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goxtremio\n[DEBUG] Package github.com/emccode/goxtremio imports github.com/emccode/goxtremio/api/v3\n[DEBUG] In vendor: github.com/emccode/goxtremio/api/v3\n[DEBUG] Marking github.com/emccode/goxtremio/api/v3 to be scanned.\n[DEBUG] Dependency github.com/emccode/goxtremio has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/emccode/goxtremio has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goxtremio has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/golf\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gofig\n[DEBUG] Package github.com/akutz/gofig imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com/akutz/gofig imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/akutz/gofig imports github.com/akutz/gotil\n[DEBUG] In vendor: github.com/akutz/gotil\n[DEBUG] Marking github.com/akutz/gotil to be scanned.\n[DEBUG] Dependency github.com/akutz/gotil has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/akutz/gotil has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/akutz/gotil has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/akutz/gofig imports github.com/spf13/pflag\n[DEBUG] In vendor: github.com/spf13/pflag\n[DEBUG] Package github.com/akutz/gofig imports github.com/spf13/viper\n[DEBUG] In vendor: github.com/spf13/viper\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gotil\n[DEBUG] Package github.com/akutz/gotil imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/akutz/gotil imports github.com/kardianos/osext\n[DEBUG] Found on GOPATH, not vendor: github.com/kardianos/osext\n[INFO] Fetching github.com/kardianos/osext into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/kardianos/osext.git\n[DEBUG] Saving default branch for https://github.com/kardianos/osext.git\n[INFO] Setting version for github.com/kardianos/osext to master.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/go-yaml/yaml\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/yaml.v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/yaml.v2\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api: no buildable Go source files in /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api\n[DEBUG] No subpackages declared. Skipping google.golang.org/api.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net: no buildable Go source files in /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net\n[DEBUG] No subpackages declared. Skipping golang.org/x/net.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/govmax\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/govmax: no buildable Go source files in /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/govmax\n[DEBUG] No subpackages declared. Skipping github.com/emccode/govmax.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goisilon\n[DEBUG] Package github.com/emccode/goisilon imports github.com/emccode/goisilon/api/v1\n[DEBUG] In vendor: github.com/emccode/goisilon/api/v1\n[DEBUG] Marking github.com/emccode/goisilon/api/v1 to be scanned.\n[DEBUG] Dependency github.com/emccode/goisilon has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/emccode/goisilon has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goisilon has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/appropriate/go-virtualboxclient\n[DEBUG] Package github.com/appropriate/go-virtualboxclient imports github.com/appropriate/go-virtualboxclient/virtualboxclient\n[DEBUG] In vendor: github.com/appropriate/go-virtualboxclient/virtualboxclient\n[DEBUG] Marking github.com/appropriate/go-virtualboxclient/virtualboxclient to be scanned.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gofig\n[DEBUG] Package github.com/akutz/gofig imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com/akutz/gofig imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/akutz/gofig imports github.com/akutz/gotil\n[DEBUG] In vendor: github.com/akutz/gotil\n[DEBUG] Package github.com/akutz/gofig imports github.com/spf13/pflag\n[DEBUG] In vendor: github.com/spf13/pflag\n[DEBUG] Package github.com/akutz/gofig imports github.com/spf13/viper\n[DEBUG] In vendor: github.com/spf13/viper\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/Sirupsen/logrus\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gotil\n[DEBUG] Package github.com/akutz/gotil imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/akutz/gotil imports github.com/kardianos/osext\n[DEBUG] Found on GOPATH, not vendor: github.com/kardianos/osext\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/docker/docker/pkg/mount\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/docker/docker/pkg/mount: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/docker/docker/pkg/mount: no such file or directory\n[ERROR] Error scanning github.com/docker/docker/pkg/mount: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/docker/docker/pkg/mount: no such file or directory\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/goof\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/handlers\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/handlers: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/handlers: no such file or directory\n[ERROR] Error scanning github.com/gorilla/handlers: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/handlers: no such file or directory\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/mux\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/mux: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/mux: no such file or directory\n[ERROR] Error scanning github.com/gorilla/mux: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/gorilla/mux: no such file or directory\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/opencontainers/runc/libcontainer/label\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/opencontainers/runc/libcontainer/label: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/opencontainers/runc/libcontainer/label: no such file or directory\n[ERROR] Error scanning github.com/opencontainers/runc/libcontainer/label: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/opencontainers/runc/libcontainer/label: no such file or directory\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz/aws\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/goamz/goamz/ec2\n[DEBUG] Package github.com/goamz/goamz/ec2 imports github.com/goamz/goamz/aws\n[DEBUG] In vendor: github.com/goamz/goamz/aws\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/oauth2/google\n[DEBUG] ImportDir error on /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/oauth2/google: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/oauth2/google: no such file or directory\n[ERROR] Error scanning golang.org/x/oauth2/google: open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/oauth2/google: no such file or directory\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api/compute/v1\n[DEBUG] Package google.golang.org/api/compute/v1 imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Package google.golang.org/api/compute/v1 imports golang.org/x/net/context/ctxhttp\n[DEBUG] In vendor: golang.org/x/net/context/ctxhttp\n[DEBUG] Marking golang.org/x/net/context/ctxhttp to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Package google.golang.org/api/compute/v1 imports google.golang.org/api/gensupport\n[DEBUG] In vendor: google.golang.org/api/gensupport\n[DEBUG] Marking google.golang.org/api/gensupport to be scanned.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Package google.golang.org/api/compute/v1 imports google.golang.org/api/googleapi\n[DEBUG] In vendor: google.golang.org/api/googleapi\n[DEBUG] Marking google.golang.org/api/googleapi to be scanned.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goisilon\n[DEBUG] Package github.com/emccode/goisilon imports github.com/emccode/goisilon/api/v1\n[DEBUG] In vendor: github.com/emccode/goisilon/api/v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack\n[DEBUG] Package github.com/rackspace/gophercloud/openstack imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack imports github.com/rackspace/gophercloud/openstack/identity/v2/tokens\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/identity/v2/tokens\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/identity/v2/tokens to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack imports github.com/rackspace/gophercloud/openstack/identity/v3/tokens\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/identity/v3/tokens\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/identity/v3/tokens to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack imports github.com/rackspace/gophercloud/openstack/utils\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/utils\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/utils to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Marking github.com/rackspace/gophercloud/pagination to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots imports github.com/rackspace/gophercloud/testhelper\n[DEBUG] In vendor: github.com/rackspace/gophercloud/testhelper\n[DEBUG] Marking github.com/rackspace/gophercloud/testhelper to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/snapshots imports github.com/rackspace/gophercloud/testhelper/client\n[DEBUG] In vendor: github.com/rackspace/gophercloud/testhelper/client\n[DEBUG] Marking github.com/rackspace/gophercloud/testhelper/client to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v1/volumes imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions imports github.com/rackspace/gophercloud/testhelper\n[DEBUG] In vendor: github.com/rackspace/gophercloud/testhelper\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/blockstorage/v2/extensions/volumeactions imports github.com/rackspace/gophercloud/testhelper/client\n[DEBUG] In vendor: github.com/rackspace/gophercloud/testhelper/client\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/extensions/volumeattach imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/servers\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/servers imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/servers imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/servers imports github.com/rackspace/gophercloud/openstack/compute/v2/flavors\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/compute/v2/flavors\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/compute/v2/flavors to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/servers imports github.com/rackspace/gophercloud/openstack/compute/v2/images\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/compute/v2/images\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/compute/v2/images to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/servers imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio\n[DEBUG] Package github.com/emccode/goscaleio imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com/emccode/goscaleio imports github.com/emccode/goscaleio/types/v1\n[DEBUG] In vendor: github.com/emccode/goscaleio/types/v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio/types/v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/appropriate/go-virtualboxclient/virtualboxclient\n[DEBUG] Package github.com/appropriate/go-virtualboxclient/virtualboxclient imports github.com/appropriate/go-virtualboxclient/vboxwebsrv\n[DEBUG] In vendor: github.com/appropriate/go-virtualboxclient/vboxwebsrv\n[DEBUG] Marking github.com/appropriate/go-virtualboxclient/vboxwebsrv to be scanned.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/govmax/api/v1\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi\n[DEBUG] Found on GOPATH, not vendor: github.com/vmware/govmomi\n[INFO] Fetching github.com/vmware/govmomi into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/clintonskitson/govmomi\n[DEBUG] Saving default branch for https://github.com/clintonskitson/govmomi\n[INFO] Setting version for github.com/vmware/govmomi to 4739ba797cc0c7240e0848e724fb733e6b08bc9c.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/find\n[DEBUG] In vendor: github.com/vmware/govmomi/find\n[DEBUG] Marking github.com/vmware/govmomi/find to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/object\n[DEBUG] In vendor: github.com/vmware/govmomi/object\n[DEBUG] Marking github.com/vmware/govmomi/object to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Marking github.com/vmware/govmomi/property to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Marking github.com/vmware/govmomi/vim25/methods to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Marking github.com/vmware/govmomi/vim25/mo to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Marking github.com/vmware/govmomi/vim25/types to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/emccode/govmax/api/v1 imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goxtremio\n[DEBUG] Package github.com/emccode/goxtremio imports github.com/emccode/goxtremio/api/v3\n[DEBUG] In vendor: github.com/emccode/goxtremio/api/v3\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/golf/logrus\n[DEBUG] Package github.com/akutz/golf/logrus imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com/akutz/golf/logrus imports github.com/akutz/golf\n[DEBUG] In vendor: github.com/akutz/golf\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/cobra\n[DEBUG] Package github.com/spf13/cobra imports github.com/cpuguy83/go-md2man/md2man\n[DEBUG] Found on GOPATH, not vendor: github.com/cpuguy83/go-md2man/md2man\n[DEBUG] Package github.com/spf13/cobra imports github.com/inconshreveable/mousetrap\n[DEBUG] Found on GOPATH, not vendor: github.com/inconshreveable/mousetrap\n[DEBUG] Package github.com/spf13/cobra imports github.com/spf13/pflag\n[DEBUG] In vendor: github.com/spf13/pflag\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/pflag\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/yaml.v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/cpuguy83/go-md2man/md2man\n[DEBUG] Package github.com/cpuguy83/go-md2man/md2man imports github.com/russross/blackfriday\n[DEBUG] Found on GOPATH, not vendor: github.com/russross/blackfriday\n[INFO] Fetching github.com/russross/blackfriday into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/russross/blackfriday\n[DEBUG] Saving default branch for https://github.com/russross/blackfriday\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/inconshreveable/mousetrap\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/BurntSushi/toml\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/kr/pretty\n[DEBUG] Package github.com/kr/pretty imports github.com/kr/text\n[DEBUG] Found on GOPATH, not vendor: github.com/kr/text\n[INFO] Fetching github.com/kr/text into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/kr/text\n[DEBUG] Saving default branch for https://github.com/kr/text\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/magiconair/properties\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/mitchellh/mapstructure\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/cast\n[DEBUG] Package github.com/spf13/cast imports github.com/spf13/jwalterweatherman\n[DEBUG] Found on GOPATH, not vendor: github.com/spf13/jwalterweatherman\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/spf13/jwalterweatherman\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/fsnotify.v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/gopkg.in/yaml.v2\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/Sirupsen/logrus\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goscaleio/types/v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goxtremio/api/v3\n[DEBUG] Package github.com/emccode/goxtremio/api/v3 imports github.com/Sirupsen/logrus\n[DEBUG] Found on GOPATH, not vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/akutz/gotil\n[DEBUG] Package github.com/akutz/gotil imports github.com/akutz/goof\n[DEBUG] In vendor: github.com/akutz/goof\n[DEBUG] Package github.com/akutz/gotil imports github.com/kardianos/osext\n[DEBUG] Found on GOPATH, not vendor: github.com/kardianos/osext\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/kardianos/osext\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/emccode/goisilon/api/v1\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/appropriate/go-virtualboxclient/virtualboxclient\n[DEBUG] Package github.com/appropriate/go-virtualboxclient/virtualboxclient imports github.com/appropriate/go-virtualboxclient/vboxwebsrv\n[DEBUG] In vendor: github.com/appropriate/go-virtualboxclient/vboxwebsrv\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/golang.org/x/net/context/ctxhttp\n[DEBUG] Package golang.org/x/net/context/ctxhttp imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api/gensupport\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api/googleapi\n[DEBUG] Package google.golang.org/api/googleapi imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Package google.golang.org/api/googleapi imports golang.org/x/net/context/ctxhttp\n[DEBUG] In vendor: golang.org/x/net/context/ctxhttp\n[DEBUG] Package google.golang.org/api/googleapi imports google.golang.org/api/googleapi/internal/uritemplates\n[DEBUG] In vendor: google.golang.org/api/googleapi/internal/uritemplates\n[DEBUG] Marking google.golang.org/api/googleapi/internal/uritemplates to be scanned.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tokens\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tokens imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tokens imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tokens imports github.com/rackspace/gophercloud/openstack/identity/v2/tenants\n[DEBUG] In vendor: github.com/rackspace/gophercloud/openstack/identity/v2/tenants\n[DEBUG] Marking github.com/rackspace/gophercloud/openstack/identity/v2/tenants to be scanned.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/identity/v3/tokens\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v3/tokens imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v3/tokens imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/utils\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/utils imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/pagination\n[DEBUG] Package github.com/rackspace/gophercloud/pagination imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/testhelper\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/testhelper/client\n[DEBUG] Package github.com/rackspace/gophercloud/testhelper/client imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/testhelper/client imports github.com/rackspace/gophercloud/testhelper\n[DEBUG] In vendor: github.com/rackspace/gophercloud/testhelper\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/flavors\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/flavors imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/flavors imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/flavors imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/compute/v2/images\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/images imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/images imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/compute/v2/images imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/appropriate/go-virtualboxclient/vboxwebsrv\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi\n[DEBUG] Package github.com/vmware/govmomi imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi imports github.com/vmware/govmomi/session\n[DEBUG] In vendor: github.com/vmware/govmomi/session\n[DEBUG] Marking github.com/vmware/govmomi/session to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi imports github.com/vmware/govmomi/vim25\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25\n[DEBUG] Marking github.com/vmware/govmomi/vim25 to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Marking github.com/vmware/govmomi/vim25/soap to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/find\n[DEBUG] Package github.com/vmware/govmomi/find imports github.com/vmware/govmomi/list\n[DEBUG] In vendor: github.com/vmware/govmomi/list\n[DEBUG] Marking github.com/vmware/govmomi/list to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi/find imports github.com/vmware/govmomi/object\n[DEBUG] In vendor: github.com/vmware/govmomi/object\n[DEBUG] Package github.com/vmware/govmomi/find imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/find imports github.com/vmware/govmomi/vim25\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25\n[DEBUG] Package github.com/vmware/govmomi/find imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/find imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/object\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/session\n[DEBUG] In vendor: github.com/vmware/govmomi/session\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/task\n[DEBUG] In vendor: github.com/vmware/govmomi/task\n[DEBUG] Marking github.com/vmware/govmomi/task to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25/progress\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/progress\n[DEBUG] Marking github.com/vmware/govmomi/vim25/progress to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/object imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/object imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/property imports github.com/vmware/govmomi/vim25\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25\n[DEBUG] Package github.com/vmware/govmomi/property imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/property imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/property imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/property imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/property imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/vim25/methods imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/vim25/methods imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/vim25/methods imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/vim25/mo imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/vim25/mo imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/vim25/mo imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/vim25/mo imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/types\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/russross/blackfriday\n[DEBUG] Package github.com/russross/blackfriday imports github.com/shurcooL/sanitized_anchor_name\n[DEBUG] Found on GOPATH, not vendor: github.com/shurcooL/sanitized_anchor_name\n[INFO] Fetching github.com/shurcooL/sanitized_anchor_name into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[DEBUG] Attempting to find current branch for https://github.com/shurcooL/sanitized_anchor_name\n[DEBUG] Saving default branch for https://github.com/shurcooL/sanitized_anchor_name\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/kr/text\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/google.golang.org/api/googleapi/internal/uritemplates\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/rackspace/gophercloud/openstack/identity/v2/tenants\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tenants imports github.com/mitchellh/mapstructure\n[DEBUG] Found on GOPATH, not vendor: github.com/mitchellh/mapstructure\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tenants imports github.com/rackspace/gophercloud\n[DEBUG] In vendor: github.com/rackspace/gophercloud\n[DEBUG] Package github.com/rackspace/gophercloud/openstack/identity/v2/tenants imports github.com/rackspace/gophercloud/pagination\n[DEBUG] In vendor: github.com/rackspace/gophercloud/pagination\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/session\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/vim25\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/session imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/session imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25\n[DEBUG] Package github.com/vmware/govmomi/vim25 imports github.com/vmware/govmomi/vim25/methods\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/methods\n[DEBUG] Package github.com/vmware/govmomi/vim25 imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/vim25 imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/vim25 imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/vim25/soap imports github.com/vmware/govmomi/vim25/debug\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/debug\n[DEBUG] Marking github.com/vmware/govmomi/vim25/debug to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi/vim25/soap imports github.com/vmware/govmomi/vim25/progress\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/progress\n[DEBUG] Package github.com/vmware/govmomi/vim25/soap imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/vim25/soap imports github.com/vmware/govmomi/vim25/xml\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/xml\n[DEBUG] Marking github.com/vmware/govmomi/vim25/xml to be scanned.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/vmware/govmomi/vim25/soap imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/list\n[DEBUG] Package github.com/vmware/govmomi/list imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/list imports github.com/vmware/govmomi/vim25/mo\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/mo\n[DEBUG] Package github.com/vmware/govmomi/list imports github.com/vmware/govmomi/vim25/soap\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/soap\n[DEBUG] Package github.com/vmware/govmomi/list imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/list imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/task\n[DEBUG] Package github.com/vmware/govmomi/task imports github.com/vmware/govmomi/property\n[DEBUG] In vendor: github.com/vmware/govmomi/property\n[DEBUG] Package github.com/vmware/govmomi/task imports github.com/vmware/govmomi/vim25/progress\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/progress\n[DEBUG] Package github.com/vmware/govmomi/task imports github.com/vmware/govmomi/vim25/types\n[DEBUG] In vendor: github.com/vmware/govmomi/vim25/types\n[DEBUG] Package github.com/vmware/govmomi/task imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/progress\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/shurcooL/sanitized_anchor_name\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/debug\n[DEBUG] Trying to open /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor/github.com/vmware/govmomi/vim25/xml\n[INFO] Downloading dependencies. Please wait...\n[DEBUG] Dependency github.com/emccode/goxtremio has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/BurntSushi/toml has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/kr/pretty has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/magiconair/properties has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/mitchellh/mapstructure has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/spf13/cast has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/spf13/jwalterweatherman has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/fsnotify.v1 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/kardianos/osext has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/russross/blackfriday has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/kr/text has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/shurcooL/sanitized_anchor_name has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for github.com/docker/docker.\n[DEBUG] Dependency github.com/spf13/cobra has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for github.com/gorilla/handlers.\n[DEBUG] Dependency github.com/emccode/goscaleio has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for github.com/gorilla/mux.\n[DEBUG] Dependency github.com/spf13/pflag has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for github.com/opencontainers/runc.\n[DEBUG] Dependency github.com/akutz/gofig has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for golang.org/x/oauth2.\n[DEBUG] Dependency gopkg.in/yaml.v1 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/goamz/goamz has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/akutz/golf has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/akutz/gotil has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/emccode/goisilon has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/spf13/viper has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/emccode/govmax has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/cpuguy83/go-md2man has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/akutz/goof has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-yaml/yaml has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/inconshreveable/mousetrap has already been pinned. Fetching updates skipped.\n[DEBUG] Attempting to find current branch for https://github.com/gorilla/handlers\n[DEBUG] Saving default branch for https://github.com/gorilla/handlers\n[DEBUG] Attempting to find current branch for https://github.com/gorilla/mux\n[DEBUG] Saving default branch for https://github.com/gorilla/mux\n[DEBUG] Attempting to find current branch for https://go.googlesource.com/oauth2\n[DEBUG] Saving default branch for https://go.googlesource.com/oauth2\n[DEBUG] Attempting to find current branch for https://github.com/opencontainers/runc\n[DEBUG] Saving default branch for https://github.com/opencontainers/runc\n[DEBUG] Attempting to find current branch for https://github.com/docker/docker\n[DEBUG] Saving default branch for https://github.com/docker/docker\n[INFO] Setting references for remaining imports\n[DEBUG] Dependency github.com/akutz/goof has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/spf13/pflag has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/spf13/cobra has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/spf13/viper has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/goamz/goamz has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goscaleio has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goxtremio has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/akutz/golf has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/akutz/gofig has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/akutz/gotil has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/go-yaml/yaml has already been pinned. Setting version skipped.\n[DEBUG] Dependency gopkg.in/yaml.v1 has already been pinned. Setting version skipped.\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/rackspace/gophercloud has already been pinned. Setting version skipped.\n[DEBUG] Dependency google.golang.org/api has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/govmax has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/emccode/goisilon has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/appropriate/go-virtualboxclient has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/cpuguy83/go-md2man has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/inconshreveable/mousetrap has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/BurntSushi/toml has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/kr/pretty has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/magiconair/properties has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/mitchellh/mapstructure has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/kardianos/osext has already been pinned. Setting version skipped.\n[DEBUG] Dependency gopkg.in/fsnotify.v1 has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/vmware/govmomi has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/spf13/jwalterweatherman has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/spf13/cast has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/kr/text has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/shurcooL/sanitized_anchor_name has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/russross/blackfriday has already been pinned. Setting version skipped.\n[INFO] Project relies on 39 dependencies.\nAn Error has occured\n.gomk/include/deps.mk:29: recipe for target 'glide.lock' failed\nmake: *** [glide.lock] Error 2\n[2]akutz@pax:rexray$\n. Hi @mattfarina,\nThe patch fixed the issue, thank you!\n. HA! I'm literally trying to solve the same issue! https://travis-ci.org/emccode/rexray/builds/110459662\n. FWIW, not Go 1.6 issue as happened on 1.5.1 on Travis as well. I bumped to 1.6 to see if that helped. Same error. See previous builds in my linked build's history for same error with 1.5.1.\n. Here's a build with 1.5.1 with same error. https://travis-ci.org/emccode/rexray/builds/110452312\n. Hi @mattfarina,\nFWIW, here's the bit from the Makefile that handles Glide. In a branch I update REX-Ray to use Gomk for builds, which I've designed to enable selecting the version of Glide I want to use. Currently it's using the tip of master.\ndeps: _pre-make _deps _post-make\n_deps:\n    @if [ -z \"$$OFFLINE\" ]; then \\\n        echo \"target: deps\"; \\\n        printf \"  ...installing glide...\"; \\\n        go get github.com/Masterminds/glide; \\\n            $(PRINT_STATUS); \\\n        printf \"  ...glide up...\"; \\\n            cd $(BASEDIR); \\\n            $(GLIDE) up $(MAKE_LOG_FD); \\\n            $(PRINT_STATUS); \\\n        printf \"  ...go get...\"; \\\n            go get -d $(GOFLAGS) $(NV); \\\n            $(PRINT_STATUS); \\\n    fi\n. Hi @mattfarina,\nAh, thanks for the response. Yes, I had to do something similar in Gomk for go vet as that tool did not function correctly when using an OS/ARCH separate from the host.\n. FWIW, I think option number two makes the most sense.\n. Why is Appengine so annoying? Just curious. Because it's on Github but has import path from Google?\n. Ruxin from the League agrees :)\n\n. Hi @mattfarina,\nSo it failed on Travis again. https://travis-ci.org/emccode/rexray/builds/110459662\nHowever, it worked locally when I updated Glide. I am resending my commit to Travis instead of just rerunning the build in case Travis had cached the Glide sources. I don't tell it to, but I don't know another explanation.\n. Nope, still failing - https://travis-ci.org/emccode/rexray/builds/110483778. I just nuked my local vendor dir and am trying a full glide up again locally to see if the reason it worked locally earlier was from caching.\n. Hi @mattfarina,\nIt's failing locally. The reason it worked was because I had not actually upgraded Glide to 0.9 locally. I neglected the -u flag in go get. I just used it to upgrade to the tip of master, and it's failing locally as well. \n[0]akutz@pax:rexray$ glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for github.com/goamz/goamz.\n[INFO] Fetching updates for github.com/akutz/golf.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Fetching updates for github.com/akutz/goof.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/akutz/gotil.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/emccode/goscaleio.\n[INFO] Fetching updates for github.com/akutz/gofig.\n[INFO] Fetching updates for github.com/emccode/govmax.\n[INFO] Fetching updates for github.com/appropriate/go-virtualboxclient.\n[INFO] Fetching updates for github.com/rackspace/gophercloud.\n[INFO] Fetching updates for github.com/emccode/goisilon.\n[INFO] Fetching updates for google.golang.org/api.\n[INFO] Fetching updates for github.com/emccode/goxtremio.\n[INFO] Fetching updates for gopkg.in/yaml.v1.\n[INFO] Fetching updates for github.com/go-yaml/yaml.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Setting version for github.com/goamz/goamz to 5c85623a00092be41b679e53ef47772cf8ded1da.\n[INFO] Setting version for github.com/rackspace/gophercloud to 42196eaf5b93739d335921404bb7c5f2205fceb3.\n[INFO] Setting version for gopkg.in/yaml.v1 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/spf13/pflag to b084184666e02084b8ccb9b704bf0d79c466eb1d.\n[INFO] Setting version for github.com/akutz/goof to master.\n[INFO] Setting version for github.com/akutz/gofig to master.\n[INFO] Setting version for github.com/emccode/goxtremio to 89e87d4bdf43837a161fd36ad8dd32e0ce42ae98.\n[INFO] Setting version for github.com/emccode/goscaleio to 29678665e99b627013b8b9f2727bbdaed79bbd05.\n[INFO] Setting version for github.com/emccode/goisilon to f9b53f0aaadb12a26b134830142fc537f492cb13.\n[INFO] Setting version for golang.org/x/net to master.\n[INFO] Setting version for gopkg.in/yaml.v2 to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/go-yaml/yaml to b4a9f8c4b84c6c4256d669c649837f1441e4b050.\n[INFO] Setting version for github.com/spf13/viper to support/rexray.\n[INFO] Setting version for github.com/spf13/cobra to 363816bb13ce1710460c2345017fd35593cbf5ed.\n[INFO] Setting version for github.com/akutz/gotil to master.\n[INFO] Setting version for github.com/emccode/govmax to 39eb25ef96221a595aea883ffded341d37750d51.\n[INFO] Setting version for github.com/akutz/golf to v0.1.1.\n[INFO] Setting version for google.golang.org/api to fd081149e482b10c55262756934088ffe3197ea3.\n[INFO] Setting version for github.com/appropriate/go-virtualboxclient to e0978ab2ed407095400a69d5933958dd260058cd.\n[INFO] Resolving imports\n[INFO] Fetching github.com/cpuguy83/go-md2man/md2man into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/inconshreveable/mousetrap into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/BurntSushi/toml into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/kr/pretty into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/magiconair/properties into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/mitchellh/mapstructure into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/spf13/cast into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/spf13/jwalterweatherman into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching gopkg.in/fsnotify.v1 into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/Sirupsen/logrus into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Setting version for github.com/Sirupsen/logrus to feature/logrus-aware-types.\n[INFO] Fetching github.com/kardianos/osext into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Setting version for github.com/kardianos/osext to master.\n[INFO] Fetching github.com/docker/docker/pkg/mount into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/gorilla/handlers into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/gorilla/mux into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/opencontainers/runc/libcontainer/label into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching golang.org/x/oauth2/google into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/vmware/govmomi into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Setting version for github.com/vmware/govmomi to 4739ba797cc0c7240e0848e724fb733e6b08bc9c.\n[INFO] Fetching github.com/russross/blackfriday into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/kr/text into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/gorilla/context into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching google.golang.org/appengine into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching google.golang.org/cloud/compute/metadata into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/shurcooL/sanitized_anchor_name into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching github.com/golang/protobuf/proto into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[INFO] Fetching appengine_internal into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[WARN] Error looking for appengine_internal: Cannot detect VCS\n[INFO] Fetching appengine_internal/base into /Users/akutz/Projects/go/src/github.com/emccode/rexray/vendor\n[WARN] Error looking for appengine_internal/base: Cannot detect VCS\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for appengine_internal/base.\n[INFO] Fetching updates for appengine_internal.\n[WARN] Unable to checkout appengine_internal\n[ERROR] Update failed for appengine_internal: Cannot detect VCS\n[WARN] Unable to checkout appengine_internal/base\n[ERROR] Update failed for appengine_internal/base: Cannot detect VCS\n[ERROR] Could not update packages: Cannot detect VCS\nCannot detect VCS\n[1]akutz@pax:rexray$\n. I'm an idiot. Didn't realize just added the flag. Thought you were also handling appengine as a special case. The flag works :)\n. Yep.\n. No. I don't want Glide to be orthogonal to Go's build process; instead it should work with & enhance it. One reason I use Makefiles to manage my projects' build processes instead of something like gb is because it replaces Go's toolchain and the surrounding ecosystem instead of enhanching it. Sure, the go command makes some odd choices. For one, using a Makefile would soo much easier if the Go packages weren't compiled with the pack option by default. An object file per source file would make things far simpler to manage via Make. However, I worked around that instead of invoking the Go compiler directly. It's just too much of a moving target to try and replace these fundamental tools.\nTo that end, if Glide were to break compatibility, I'd just have to stop using new versions of Glide. As crappy of a boyfriend it makes me, I think this is the classic Elaine issue from Seinfeld. I won't date someone who is a bad breaker upper. In this case it means I don't want to buy into a tool that I cannot easily replace if something happens to its maintainer or its direction. I love Glide today because even with all the tremendous value it adds, if @mattfarina  turned out to be an alien who is returning to his home planet and taking his code with him, ultimately it won't be the end of the world. I may have to replace Glide, but I won't have to shift my understanding of my projects' entire dependency workflows.\n. I never include the extension and it works fine for me.\n. I disagree that enabling a package to point to a different repo location is breaking compatibility. I guess I need go get compatibility defined. To me it still adheres to it because no code is being rewritten. I don't mind that @mattfarina and Glide are simply being cheeky about what they clone and where. To me that's far more preferable than rewriting import statements.\n. Hey, I'm all against import rewriting. I thought that's what you were suggesting. My point is if Glide didn't enable importing forks into primary repo locations, import rewriting would be required. Glide avoids this by virtue of what I mentioned. To me that doesn't break go get compatibility specifically because it avoids import rewriting. To me Glide enhances a process without breaking it. If it rewrote imports, then, IMO, it would be breaking it.\n. Hi @mattfarina / @sdboyer,\nAny additional thoughts on this? Thanks!\n. Hi @mattfarina / @sdboyer,\nAny additional thoughts on this? Thanks!\n. I amended the commit to reflect the proper comment. It was written before I realized your functions prefer to print/die instead of return.\n. ",
    "shtripat": "@mattfarina Even I started facing this issue today.\nif I do \"go get github.com/Masterminds/glide\" next time, would it solve the issue?\n. Thanks Matt!!\nOn 10 Dec 2015 00:10, \"Matt Farina\" notifications@github.com wrote:\n\n@shtripat you can get from the tip of master or wait for the 0.8 release\ntomorrow.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dolmen": "ping\n. @h2non I don't think that multiple names would help. So far you have not told us your reason why you want this feature.\nIf you want to call your file Glide.yml (maybe because your text editor prefers it), either fix your text editor or just make a symbolic link: ln -s Glide.yaml Glide.yml.\n. This morning it works without any change on my side (well, just a good night of sleep). Is it a GitHub issue?\n. In any case it would be helpful to have verbose log for this case.\n. I suspect I would have solved the issue by cleaning ~/.glide/cache...\n. > $(VERSION) tells the shell script to execute VERSION and return the result of that.\nNo, $(VERSION) is expanded my make before the shell even sees it. ${VERSION} is also expanded by make (before being seen by the shell), but as it is the same syntax as the shell, this is confusing (readers may expect like you did that the expansion is done by the shell) and must be avoided. To really let the shell see the reference to a VERSION environment variable, you have to write $${VERSION}, but this is not portable with non-Unix shells (for example, on Windows) while the expansion by make is.\nYou should read a make manual.\n. > As the one who runs the builds, the current implementation generates the correct version. Are you seeing something different?\nThis is more a matter of style and portability to non-POSIX shell than an error.\n. > What non-POSIX shell environment are you looking for support in?\nWindows.\n. ",
    "octopepper": "Sorry this library has been closed...\n. ",
    "leonfs": "Hi @mattfarina. I'm running version 0.6.1. I've checked before creating the issue, in case I was running an old version, but as it seemed to be the latest so I though this was a bug. \n. Yeap. Just did. \ngo get {master}\nmake install\nglide -v shows the new build. \nBut \"glide guess\" still throws the error. =(\n. @mattfarina my fault... Is working.. \n. ",
    "bmatsuo": "Sounds good. I hadn't seen the change.. ",
    "tcurdt": "This stills seems to be a problem for me (with glide version 0.9.1).\nWas this supposed to be solved?\n. There should be a glide up <some packagename> that updates only that dependency - plus the child dependencies.\n. @mattfarina the reason why a re-resolve might(!) be needed is clear. It's just very very unfortunate to make it all automatically on a get.\n. ",
    "ansel1": "Would be nice to have an attribute in glide.yaml that would mark a single, top-level dependency as needing all child dependencies...or perhaps adding some additional source root to the dependency tree routine.\nIn our case, we vendor migrate because we build it's command line tool as part of our build.  We don't import it in our code at all.\nInterestingly, it seemed that in glide 0.10.2, if I specified this in glide.yaml:\n- package: github.com/mattes/migrate/...\n...glide would resolve all the transitive dependencies.  but that isn't working now in 0.11\n. 1. we check it in.  we're trying to make that build completely self-contained.\n2. we're currently tracking tip, because migrate doesn't have recent versions/tags, and changes seldom.\nIt's a pattern we have used a handful of times: Either our build scripts or our runtime environment has dependencies on 3rd party executables written in go.  Our source doesn't depend on them, but they are still dependencies which we want to control.  We could have put the already-built binaries on a server somewhere, and had the build fetch them...or checked in the binaries to our project, but managing the sources with glide and building the tools during our build felt more manageable (better able to track versions and their provenance).\nIt feels a bit like patterns used in node/ruby/python projects: some declared dependencies are not referenced in the project's source control, but are used in the project's build scripts, or tests, or whatnot.\n. Unfortunately, I worked around the problem by deleting the affected dependencies from the vendor folder.  Since then it hasn't happened again.  I did have uncommitted changes in my local repo.  I'm not sure about the nested VCS folders under vendor.  I think maybe glide, when you update, puts all those folders back, resolves everything, then deletes them again.  Is that right?  If that's the case, it's possible there were some VCS folders there, because I think the error message was causing glide to bomb out before it stripped the VCS folders back out.\n. Workaround: explicitly specify github.com/docker/docker in top level dependencies with an explicit version.  I think maybe one of the other dependencies (github.com/cloudfoundry-incubator/candiedyaml) had a godeps file which specified an older version of docker/docker which was incompatible with libcompose, but because libcompose had no metadata explicitly specified the version of docker/docker it required, glide didn't see this as a version conflict.\nHere's the workaround yaml which worked:\nyaml\npackage: github.com/ansel1/glidetest\nimport:\n- package: github.com/docker/docker\n  version: master\n- package: github.com/docker/libcompose\n  subpackages:\n  - docker\n. :) I don't think I understand that question.  Do you mean, is it a first-order dependencies of my tests, or a transitive dependency of my tests?  It's a first-order dependency.  Most of by *_test.go files directly import \"github.com/stretchr/testify/assert\" or \"github.com/stretchr/testify/require\".  \nThey don't import the parent package (\"github.com/stretchr/testify\").  Not sure if that matters.\n. awesome, thanks\nOn Wed, Jul 20, 2016 at 10:49 AM Matt Farina notifications@github.com\nwrote:\n\n@ansel1 https://github.com/ansel1 you answered my question. thanks.\nI'm looking to get a 0.11.1 release out soon. I'd like to get this fixed\nand in that release.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/514#issuecomment-233972896,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMXENUnIqkVe6ARRTtoNm2lvG3NLTks5qXjWQgaJpZM4JQXG0\n.\n. Try using the strip vcs and strip vendor options.  It looks like I have one\nproject where it works correctly, and one which exhibits the bug, and the\nmain difference is that the latter is stripping the VCS metadata.\n\nOn Wed, Jul 20, 2016 at 4:31 PM Matt Farina notifications@github.com\nwrote:\n\n@ansel1 https://github.com/ansel1 I'm having trouble reproducing this.\nUsing the tip of master for Glide I see....\nmfarina in ~/Code/go/src/github.com/Masterminds/example/vendor/github.com/stretchr/testify on master\n\u00b1 git remote -v\norigin  https://github.com/ansel1/testify.git (fetch)\norigin  https://github.com/ansel1/testify.git (push)\nI copied and pasted your snippet. The only thing I noticed is that it's\ntestImport and not testImports.\nMy exact section looks like:\ntestImport:- package: github.com/stretchr/testify\n  repo: https://github.com/ansel1/testify.git\n  subpackages:\n- assert\n- require\nI updated the glide.yaml file and then ran glide up.\nCan you help me reproduce this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/514#issuecomment-234072751,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMdA7zgcbS1GL94pNyxrngLz3ys2kks5qXoWggaJpZM4JQXG0\n.\n. Hmm...no, there are no references to testify in the project's source files, except for those in *_test.go files.  However, there are references to it in other dependencies.  i.e. testify is a transitive dependency of the project's non-test sources.  Maybe that's the issue.\n\nSeems like I should only be worried about my direct dependencies in glide.yaml, and that I should be declaring them accurately.  i.e. if testify is a direct test dependency, and not a direct non-test (what's the right name for these?), then I should be declaring testify in the testImport section.  The fact that it is also a transitive non-test dependency...should probably not impact how I declare my direct dependencies.\n. ",
    "milosgajdos83": "Hi @mattfarina, thanks for your swift answer. Yes I have initially used glide get packge_name to populate the glide.yaml but since glide get gets the package from master just like go get I figured I would edit glide.yaml and get actual git revisions as oppose to master ref since I noticed in the docs you can provide a revision. So I did that and hoped that glide get would work.\nMy understanding of the tool is clearly a bit off as I thought package reference in glide.yaml would be passed as parameter to glide get and then all the imports specified in the glide yaml would be fetched (go geted) into vendor/ without the requirement to run glide get package_name for every external package dependency :-/\nI don't [really] want to install these external packages - I merely want to vendor them somewhere, ideally into vendor/ so that I could run GO15VENDOREXPERIMENT=1 go test ./... and all external dependencies would resolve into vendor/\nMaybe my question should be: Can I use glide to vendor external dependencies of any of my subpackages? The repo itself really is just a collection of packages rather than one massive package.\n. ",
    "h2non": "IMHO this should be transparently supporting during the glide YAML file discovery process.\nIf  glide.yaml doesn't exists, fallback looking for glide.yml. Is that simple. Specific flag is great but useless except you're using a file with another completely different name.\n. Things are simpler. Officially both .yml and .yaml file extensions are registered and supported for the YAML language. \nIf you need an real example of an extended use case of the simplified file extension I'm proposing here, just  take a look to this repository and verify that Travis config file is called .travis.yml.\nWe're just talking here about a trivial change that will help users significantly and provides a convenient implementation based on YAML community standards.\nResolving one or other file is trivial, and I can only list benefits, such as: doesn't introduces any kind of constrain in terms of the utility behavior, makes the utility more useful and robust for end users and it's less error prone.\n. > Isn't it that case that a majority of the time Glide is creating it for you?\nIn my personal case I created the file manually. Not a big deal anyway, but users should be able to pick how they want to create the manifest file.\n\nWhat happens when you have a glide.yaml and glide.yml file?\n\nSimple: for back-draws compatibility and legacy behavior coherency, lookup first for glide.yaml, if it doesn't exists in the current (or even ancestors) directory, fallback looking for glide.yml following the same lookup algorithm. If no one exists, fail with an error. \nRegarding to the Go pkg spec, I think it's a good initiative, so well done, but IMHO I wouldn't tend to use JSON to declare the manifest file, mostly because it's a machine interchange focused language, instead of a human interchange language. Also I think it's too much error prone for human editing (I had a lot of bad experiences with package.json/bower.json files when developers edit them manually and forget to close a quote or add a comma).\nIt's true that JSON is faster and simpler to parse and serialize and has native support in modern languages, including Go, but I'd prefer picking another more declarative human focused languages such as YAML or TOML.\n. Honestly, I can't see any of the problems you exposed like a significant problems which has more constraints than benefits.\nThe YAML extension ambiguity is far away from a new discussion, and most utilities that works with YAML-based files and worth to respect supports both extensions, mostly by a simple main reason: back-draws compatibility. \nAt this point the discussion seems to me far away from obvious things, however to give you another rationale, if Glide uses TOML, XML or JSON instead of YAML, we don't have anything to discuss in this matter, but you've picked YAML, and YAML has two official extensions. Everyone supporting YAML has to support both extensions. That's the reality.\nThe most extended extension for YAML is .yml, and you can verify its adoption looking Travis, Ruby on Rails, CodeClimate... just to mention a few.\nI agree about moving the discussion outside of the issue, but no one said supporting to different formats.\n. Roger that! Take a look to the PR!\n. I've just pushed a new commit which should look first at .yaml, and then to .yml, so now you're right. Having multiple files with the same name but with a different extension is an edge scenario and a mistake by the end user.\n. Done!\n. ",
    "hypirion": "Right, that's what I thought \u2013 thanks for verifying that.\nI'm still somewhat puzzled that make build did not work as intended on my machine though. Even if I do export GO15VENDOREXPERIMENT=1, I end up with the error message I posted in the description, as if the vendor directory is ignored.\n. I did, but I did not place the glide directory on the $GOPATH, which was the issue I had. I'll send a pull request with improved build steps.\n. @atombender: I hit the exact same problem as you did. After I figured out that the issue was symlinking, I found out that reversing the symlink also works (put the actual dir on your GOPATH, then symlink from ~/Projects). Presumably as the absolute path would now be placed on the GOPATH, it ends up working.\nSo in your case that would be \nmkdir -p ~/.go/src/github.com/atombender/myproject\nln -s ~/.go/src/github.com/atombender/myproject ~/Projects/myproject\nIt's not optimal if you want to perform backups or use tools that doesn't walk symlinks, but if said tool walks over $GOPATH anyway then this may be an option.\n. Have a look at the documentation on glide.yaml.\nThe short story is that you can include repo, which will be the remote repository location. In your case, that would be\nyaml\npackage: git.dayu.com/grpc_data_provider/admin_web_api\nimport:\n- package: git.dayu.com/grpc_gen/ad_system_gen_go\n  repo: git@git.dayu.com:grpc_gen/ad_system_gen_go.git\n. ",
    "kyteague": "Downgrading to 0.6.1 fixes the issue.\n. Trying to test but running into this issue now:\nhttps://github.com/Masterminds/glide/issues/141\n. Confirmed that the main issue is fixed.  Now the dependency is added to the end of the file.\nHowever, this is not how bundler or pip handle this.  They both resort the package list based on the package name.  This makes it easy to look up versions of packages when looking at the file.  This would also grouped related dependencies together.\n. Yeah I was able to get it to work again by deleting the vendor folder.  It may have just been my network connection going out.  Is there a timeout for glide get?\nThis line seems pretty weird as well.  Why would it be fetching this during glide get?\n[INFO] Fetching updates for github.com/mattn/go-colorable.\n. I did a glide get on glide itself.  That dependency exists in my glide.yaml but I didn't explicitly fetch it.\n. Why does glide update look at all of the go files again when update is ran?\nThis is really non-standard behavior for package mangers.  I understand looking through the files to generate the initial glide.yaml, but after that it creates a lot of headaches.  In fact, I believe this behavior is the cause of most issues on GitHub.\nI really want to use glide, but it just behaves in unpredictable ways and I have spent way too much time getting it to work (and still doesn't).\n. ",
    "suguru": "Yes. This is with 0.7.0. glide guess works without any problems.\n. ",
    "oharlem": "Hi @technosophos , \nthank you!\n. @technosophos  @mattfarina \n2c. \nWas just thinking about handling subdependencies and realized that we have an issue: \n- suppose we lock version numbers of the declared packages\n- in other dep. managers (bower, composer) all packages have declaration files of their own, thus if you lock the \"top\" package, you 1) can keep the subdependencies 2) do not need to specifically discover them, just read the declaration file (a-la glide.yml) in the root of each package\n- EXCEPT for the cases when subdeps will use *, or ^ for compat\n- so majority if not all existing managers are suffering from this - even locking top packages explicitly theres no guarantee that the new update won't break the code\nSO\nTwo things:\n1. If we want to implement at least standard locking, we need to require ALL packages to have their own dep management. ta-da\n2. It took me quite a while to go from \"composer install\" during releases to... pushing ALL dependency/vendor folder into the repo (same for bower). Just don't laugh... That turned out to be the safest method to sleep well and proved itself multiple and multiple times. I remember cursing several times at Amazon during 2015 for changing auth schemes (invisibly for me) in their SDK package on some my projects w/o full vendor/deps in git. If you'll google this topic, you'll find quite a number of arguments pro and con, with pro arguments primarily coming from more mature devs.\nOK, #2 was a little leading to a different topic, but in fact my proposal would be create a dependency management standard requiring all packages to have a declaration file. Yes, this may be similar to same code existing for bower and npm, but so what? If Glide is more comfortable this idea will get traction as the dep management is beneficial for package developers as well.\nSorry for maybe somewhat chaotic thoughts, just in between other tasks in a hurry, but hope you got the idea. W/o support from package developers you'll have to do their work youreself - scan, guess their deps, make decision on wether to lock subdep versions or allow them be upgradeable etc.\nBest!\nD.\n. @mattfarina \nYes, sounds really good.\n\nFor projects that don't manage their own dependencies we get those and lock to a commit id. This way you install the locked version and it's always reproducible.\n\nYep. Just to make sure we are on the same page: we are still looking for glide.lock or glide.yaml in all dependencies. If found - using it. If not found - doing our own scan. Sounds right?\nBtw.\n@mattfarina @technosophos \nHere's a really good article on install/update/lock : https://blog.engineyard.com/2014/composer-its-all-about-the-lock-file\n. ",
    "imikushin": "Regarding prune command: it would be great to have an option (--aggressive?) to remove all *.go files from packages not imported (transitively) in the project's Go sources, not just the unspecified subpackages (in glide.yaml). All non-.go files except LICENSE(.md), and empty dirs, would also be removed. \n. Well, if you want to store go libraries under version control, you find\nyourself wanting to minimize the amount of vendored code to the bare\nminimum. Docker does it with a cryptic shell script. I'd like to use glide\n:)\nOn Tue, Nov 24, 2015, 20:34 Matt Butcher notifications@github.com wrote:\n\nWhat's the use case for --aggressive? I don't think I've ever seen a\npackage manager that behaved that way.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/143#issuecomment-159305945.\n. @sdboyer Thanks for your reply. The proposed --aggressive option is an ideal (very) nice to have feature, but definitely not a hard requirement. \n\nA must have though, is the prune command that will remove the unspecified packages (per glide.yaml), i.e. *.go files from the unspecified dirs. This is possible without projects source code analysis and provides one-to-one relationship between the disk state and glide.yaml content (independent of the projects source code).\nThe cryptic shell script I mentioned is this one: \nhttps://github.com/docker/docker/blob/master/hack/.vendor-helpers.sh\nAnd here is it's usage: https://github.com/docker/docker/blob/master/hack/vendor.sh \nI failed to adapt it to my project and instead patched glide :)\n. Sorry for not expressing my use case clearly enough. Here it is, in full. Maybe I'm doing something you guys think is stupid. If that's the case, I want to know what it is. Here's the use case:\nAs a maintainer of a project written in Go programming language, using quite a few of source code dependencies (one of which is docker and is pretty large), I need to manage these dependencies. The project has a policy (imposed by the project owner) to store all source level dependencies under version control. \nI don't need to store these dependencies entirely. Storing just the relevant parts is fine, as long as the tool ensures repeatability: given the same dependency specification, the tool should put the same content into the ./vendor directory.\nNow, minimizing dependencies' footprint is important because most of these files are just taking up space and bandwidth, slowing down the project checkouts and builds. \nSo, I need a tool to retrieve the specified dependencies and strip the unneeded parts. \nI'm currently using my own glide fork to work on RancherOS:\n1. Edit glide.yaml\n2. Run ~/bin/glide up -u --quick --skip-gopath --cache --delete. This puts all dependencies to ./vendor dir. To my surprise --delete only works before retrieving dependencies, so I also need to:\n3. Run ~/bin/glide del, which is my custom command, based on a patched version of glide's delete.go\nThis is good enough, but glide can do better:\n- To have the del (or call it prune) command implemented in upstream glide\n- Better yet have it as an option to the up command (--delete doesn't work, who'd guess?)\n- Have prune remove the packages not explicitly specified in glide.yaml. (Ideally, remove the non-imported code, but I agree, that is way too much for the tool to stay simple.)\nBy removing packages I mean removing all files from the corresponding directories (except LICENSEs and READMEs) and then remove empty dirs as well. \nWhy not just remove the dirs with rm -rf? Because, we might need a subpackage, but not its parent package, e.g. like this:\n- package: github.com/docker/libcompose\n  version: 0919e089edff3ba95d84119228f46d414882ded1\n  subpackages:\n  - cli\n  - docker\n  - logger\n  - lookup\n  - project\n  - utils\nIn this particular case I'd like ./vendor/github.com/docker/libcompose dir to only contain cli, docker, logger, lookup, project and utils sub-directories and maybe the license notice and a readme, but nothing else.\n. I needed to remove unused packages after glide up, because I vendor dependencies and want to have leaner checkouts, but didn't want to mess up with what people are used to.\nUsage: glide del\n. @mattfarina I'm looking forward to #143 being implemented. \nI'll remove the delete command from this PR and will only leave the small fixes to delete.go. They are basically dealing with path prefixes:\ne.g. github.com/docker/docker is a valid path prefix for github.com/docker/docker/api, but not for github.com/docker/dockerinit\nI guess, I'll have to use my fork for a while to delete unused packages from vendor: we (@ Rancher Labs) have a policy to store the vendored libs under version control, so the prune feature is pretty much a requirement. \n. ",
    "allan-simon": "@technosophos , i'm going to ask my colleagues to take part of this ticket to give you the number and type of dependencies we have. but with an initial glide.yaml of maybe 5 direct dependencies, we finished with a huge output of scanning \n. ",
    "kihamo": "+1\n. ",
    "d-ulyanov": "+1\n. ",
    "d0xin": "+1\n. ",
    "paulmach": ":100:% agree with the cons, that's why we make so much use of glide. I guess I'm saying that the pros outweigh the cons for a core utility like glide. Having go installablity with the proper dependencies and thus embracing the go tool chain is a major pro.\ngo install works, but you're not locking to specific dependency versions. Which is kind of weird for a dependency manager. But I guess that could be fixed by add some git reset --hard sha to the makefile, but then there is still a makefile.\n. ",
    "mikeln": "I'm getting a similar issue.  I have created a golang1.6 (+glide 0.10.2) container.   Doing a glide install with kubernetes as a dependency:\n[DEBUG] Package github.com/prometheus/common/expfmt imports bitbucket.org/ww/goautoneg\n[DEBUG] Missing bitbucket.org/ww/goautoneg. Trying to resolve.\n[INFO] Fetching bitbucket.org/ww/goautoneg into /go/src/github.com/samsung-cnct/barrel/vendor\npanic: runtime error: index out of range\nI do not appear to have file permission issues.  Initial assessment is that this may be the first dependency that uses hg  vs git.   This dependency is autodetected by glide (i.e. I have not specifically stated it in glide.yam).  I also suspect this may be an SSH vs HTTPS issue, but I don't have any debug to show what command is being run.   \nBy hand in the container, I do know that hg clone ssh path does not work, but hg clone https path does work.  What does glide use by default?  \nShould this go into a new ticket?\ngist: https://gist.github.com/mikeln/d26d261f8fff7655f95eaab85d8d1744\n. ok, my bad, I do see the same issue:\noot@de56a551c717:/go/src/github.com/samsung-cnct/barrel/vendor/bitbucket.org/ww/goautoneg# hg paths\nnot trusting file /go/src/github.com/samsung-cnct/barrel/vendor/bitbucket.org/ww/goautoneg/.hg/hgrc from untrusted user 1000, group staff\nnot trusting file /go/src/github.com/samsung-cnct/barrel/vendor/bitbucket.org/ww/goautoneg/.hg/hgrc from untrusted user 1000, group staff\n. So, the error I saw, had to do with SSH (in hg) requires the key file to be owned by the user running glide.  On os-x the user running in the Docker container is not the same as the filesystem owner (i.e. the user doing the docker run).  I added a script before running a golang+glide container that queried the filesystem UID/GID, and used that to set the uid:gid of the apparent user running inside of the container.\n. Ok, it WAS my issue...but hopefully this will help others that run into this.\nThe issue was the specified git repo was the ssh version.  The container did not have any ssh keys known to github.  Changing it to the https:// version fixed the issue. \n. Closing this since it wasn't a glide issue!\n. No.  We use the github repo https://  url vs the ssh version - git@github.com:\n. ",
    "umayr": "In order to make GO15VENDOREXPERIMENT flag work, project should be placed in ${GOPATH}/src. \nClosing this since its not a valid glide issue, my bad.\n. ",
    "colemickens": "This should help illuminate things hopefully:\n```\n$ glide --version\nglide version dev\n$ cat glide.yaml\npackage: azkube-deploy\nimport:\n- package: github.com/Azure/azure-sdk-for-go\n  version: 84843207ea0c77c8c8aecbe2e16ac77caa8ce9cc\n  subpackages:\n  - /arm/resources\n- package: github.com/cloudflare/cfssl\n  version: 755f4128c7c69bad69117e44ffa028c1847a0608\n  subpackages:\n  - /crypto\n- package: github.com/spf13/cobra\n  version: 1c44ec8d3f1552cac48999f9306da23c4d8a288b\n$ glide get github.com/Azure/azure-sdk-for-go/arm/network\n[INFO] Preparing to install 1 package.\n[WARN] Package \"github.com/Azure/azure-sdk-for-go\" is already in glide.yaml. Skipping\n[INFO] Package github.com/Azure/azure-sdk-for-go/arm/network manages its own dependencies\n[INFO] Setting version for github.com/Azure/azure-sdk-for-go to 84843207ea0c77c8c8aecbe2e16ac77caa8ce9cc.\n[INFO] Setting version for github.com/cloudflare/cfssl to 755f4128c7c69bad69117e44ffa028c1847a0608.\n[INFO] Setting version for github.com/spf13/cobra to 1c44ec8d3f1552cac48999f9306da23c4d8a288b.\n[INFO] Project relies on 3 dependencies.\n$ cat glide.yaml\npackage: azkube-deploy\nimport:\n- package: github.com/Azure/azure-sdk-for-go\n  version: 84843207ea0c77c8c8aecbe2e16ac77caa8ce9cc\n  subpackages:\n  - /arm/resources\n- package: github.com/cloudflare/cfssl\n  version: 755f4128c7c69bad69117e44ffa028c1847a0608\n  subpackages:\n  - /crypto\n- package: github.com/spf13/cobra\n  version: 1c44ec8d3f1552cac48999f9306da23c4d8a288b\n```\nSimilarly, as originally mentioned, I can't get glide up [anything] to update the version ref for azure-sdk-for-go. I've tried the top level repo, specific packages, nothing seems to do what I'd expect.\n. I think that sounds like what I'm looking for. I'll be sure to give it a shot whenever the new version is out. If you want, you can close this, otherwise I'll close it I'll try out 0.8 on Friday or next week and update this accordingly. Thanks!\n. This has been behaving as I expected since Glide 0.8 was out. Closing.\n. And again:\n[INFO] Found Godeps.json file.\n[INFO] Found Godeps.json file for \"github.com/coreos/rkt\"\n[WARN] Conflict: github.com/appc/cni ref is 2a58bd9379ca33579f0cf631945b717aa4fa373d, but also asked for 5b7aa09e52da1c490ace2ec2c940fe5ef1575d27\n[INFO] Keeping github.com/appc/cni 2a58bd9379ca33579f0cf631945b717aa4fa373d\n[WARN] Conflict: github.com/bradfitz/http2 ref is 3e36af6d3af0e56fa3da71099f864933dea3d9fb, but also asked for f8202bc903bda493ebba4aa54922d78430c2c42f\n[INFO] Keeping github.com/bradfitz/http2 3e36af6d3af0e56fa3da71099f864933dea3d9fb\n[WARN] Conflict: github.com/coreos/go-iptables ref is 83dfad0f13fd7310fb3c1cb8563248d8d604b95b, but also asked for 74b0926558061d3a23824e9c18c9cf9c1b9c11f4\n[INFO] Keeping github.com/coreos/go-iptables 83dfad0f13fd7310fb3c1cb8563248d8d604b95b\n[WARN] Conflict: github.com/coreos/go-semver ref is d043ae190b3202550d026daf009359bb5d761672, but also asked for 6fe83ccda8fb9b7549c9ab4ba47f47858bc950aa\n[INFO] Keeping github.com/coreos/go-semver d043ae190b3202550d026daf009359bb5d761672\n[WARN] Conflict: github.com/coreos/go-systemd ref is b4a58d95188dd092ae20072bac14cece0e67c388, but also asked for d7b08942d0d85bfcb4694864881c4af7324784d2\n[INFO] Keeping github.com/coreos/go-systemd b4a58d95188dd092ae20072bac14cece0e67c388\n[WARN] Conflict: github.com/godbus/dbus ref is c7fdd8b5cd55e87b4e1f4e372cdb1db61dd6c66f, but also asked for 41608027bdce7bfa8959d653a00b954591220e67\n[INFO] Keeping github.com/godbus/dbus c7fdd8b5cd55e87b4e1f4e372cdb1db61dd6c66f\n[WARN] Conflict: github.com/golang/protobuf ref is 7f07925444bb51fa4cf9dfe6f7661876f8852275, but also asked for 6dfb160b2754e3b3fa583fbd0c207dfab2e836e5\n[INFO] Keeping github.com/golang/protobuf 7f07925444bb51fa4cf9dfe6f7661876f8852275\n[WARN] Conflict: github.com/gorilla/context ref is 215affda49addc4c8ef7e2534915df2c8c35c6cd, but also asked for 50c25fb3b2b3b3cc724e9b6ac75fb44b3bccd0da\n[INFO] Keeping github.com/gorilla/context 215affda49addc4c8ef7e2534915df2c8c35c6cd\n[WARN] Conflict: github.com/gorilla/mux ref is 8096f47503459bcc74d1f4c487b7e6e42e5746b5, but also asked for e444e69cbd2e2e3e0749a2f3c717cec491552bbf\n[INFO] Keeping github.com/gorilla/mux 8096f47503459bcc74d1f4c487b7e6e42e5746b5\n[WARN] Conflict: github.com/kr/pty ref is 05017fcccf23c823bfdea560dcc958a136e54fb7, but also asked for f7ee69f31298ecbe5d2b349c711e2547a617d398\n[INFO] Keeping github.com/kr/pty 05017fcccf23c823bfdea560dcc958a136e54fb7\n[WARN] Conflict: github.com/pborman/uuid ref is ca53cad383cad2479bbba7f7a1a05797ec1386e4, but also asked for cccd189d45f7ac3368a0d127efb7f4d08ae0b655\n[INFO] Keeping github.com/pborman/uuid ca53cad383cad2479bbba7f7a1a05797ec1386e4\n[WARN] Conflict: github.com/spf13/cobra ref is 1c44ec8d3f1552cac48999f9306da23c4d8a288b, but also asked for 66816bcd0378e248c613e3c443c020f544c28804\n[INFO] Keeping github.com/spf13/cobra 1c44ec8d3f1552cac48999f9306da23c4d8a288b\n[WARN] Conflict: github.com/spf13/pflag ref is 08b1a584251b5b62f458943640fc8ebd4d50aaa5, but also asked for 67cbc198fd11dab704b214c1e629a97af392c085\n[INFO] Keeping github.com/spf13/pflag 08b1a584251b5b62f458943640fc8ebd4d50aaa5\n[WARN] Conflict: github.com/syndtr/gocapability ref is 2c00daeb6c3b45114c80ac44119e7b8801fdd852, but also asked for 8e4cdcb3c22b40d5e330ade0b68cb2e2a3cf6f98\n[INFO] Keeping github.com/syndtr/gocapability 2c00daeb6c3b45114c80ac44119e7b8801fdd852\n[WARN] Conflict: github.com/vishvananda/netlink ref is 1e2e08e8a2dcdacaae3f14ac44c5cfa31361f270, but also asked for ecf47fd5739b3d2c3daf7c89c4b9715a2605c21b\n[INFO] Keeping github.com/vishvananda/netlink 1e2e08e8a2dcdacaae3f14ac44c5cfa31361f270\n[WARN] Conflict: golang.org/x/crypto ref is 346896d57731cb5670b36c6178fc5519f3225980, but also asked for a7ead6ddf06233883deca151dffaef2effbf498f\n[INFO] Keeping golang.org/x/crypto 346896d57731cb5670b36c6178fc5519f3225980\n[WARN] Conflict: golang.org/x/tools ref is 4f50f44d7a3206e9e28b984e023efce2a4a75369, but also asked for 27e692e6ec36d8f48be794f32553e1400c70dbf2\n[INFO] Keeping golang.org/x/tools 4f50f44d7a3206e9e28b984e023efce2a4a75369\n[WARN] Conflict: k8s.io/kubernetes ref is e310e619fc1ac4f3238bf5ebe9e7033bf5d47ee2, but also asked for 53ec66caf4e952a1384ec93b9f0cde37616e4caf\n[INFO] Keeping k8s.io/kubernetes e310e619fc1ac4f3238bf5ebe9e7033bf5d47ee2\n[INFO] Setting version for github.com/cznic/exp to 36265f1914ea00990ff0b73f72350edf9b1850df.\nUsername for 'https://github.com':\n. I've been trying for the last half hour to vendor k8s.io/kubernetes/pkg/client/unversioned/clientcmd/api and I keep getting the above errors or it just seems to hang, without the cpu doing anything...\n. Hi @mattfarina,\nFor my needs, it was easier to copy the small struct from the Kubernetes project than pay the cost of vendoring the entire repo.\nIt sounds that there is a bug in how glide handles redirected packages. Is there another issue to track that problem?\n\nThere are a number of us who wish the k8s client was its own git repo right now.\n\nYes, I can see why. Go + third party libs is enough... add vendoring and big mono-repos and it only gets more fun...\n. I don't really know. I do know that the very first example is neither a moved, redirected or private repository...\n. The packages in question must be redirecting anyway, or they'd never build correctly in the first place without glide.\n. I'm not really sure. I abandoned trying to vendor Kubernetes, didn't save a repro and didn't post the glide.yaml when I made the bug. Bad bug reporting on my part. I'll close this and reopen with more information if I run into it again.\n. :+1: :+1: I'm vendoring kubernetes once again for the client. Build times are much longer now but Glide is handling the vendoring like a champ. Thanks again for Glide.\n. Apologies, it looks like this is due to me not clearing out the relevant repo under vendor/ before \"switching\" via the alias. I executed rm -rf vendor/  and then glide was able to install normally.\n. RE performance: for the Go versions, are you referring to the changes to Go that have changed it's compile speed? If so, I can't say that I've ever noticed a difference, even when using glide rebuild, but the projects that I'm using Glide with generally have a relatively small number of packages and I only rebuild when I suspect it will help vim-go figure out my completions.\nAs for this bug... actually, when I pull that revision on my project, delete the lock file, and use whatever glide is available at this very second... glide install is actually hanging:\n```\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/Azure/azure-sdk-for-go.\n[INFO] Fetching updates for code.google.com/p/go-uuid.\n[INFO] Fetching updates for golang.org/x/crypto.\n[INFO] github.com/spf13/cobra is already set to version 9c9300901990faada0c5fb3b5730f452585c7c2b. Skipping update.\n[INFO] code.google.com/p/go-uuid is already set to version dee7705ef7b324f27ceb85a121c61f2c2e8ce988. Skipping update.\n[INFO] github.com/Azure/azure-sdk-for-go is already set to version 05d01d05e50f0fba241862806cc3d6ee20ee8585. Skipping update.\n[INFO] golang.org/x/crypto is already set to version 147b0a0d44eaebb0e4b9c780d01b9af728575d49. Skipping update.\n[INFO] Setting version for github.com/spf13/cobra to 9c9300901990faada0c5fb3b5730f452585c7c2b.\n[INFO] Setting version for code.google.com/p/go-uuid to dee7705ef7b324f27ceb85a121c61f2c2e8ce988.\n[INFO] Setting version for github.com/Azure/azure-sdk-for-go to 05d01d05e50f0fba241862806cc3d6ee20ee8585.\n[INFO] Setting version for golang.org/x/crypto to 147b0a0d44eaebb0e4b9c780d01b9af728575d49.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[WARN] Conflict: golang.org/x/crypto ref is 147b0a0d44eaebb0e4b9c780d01b9af728575d49, but also asked for 346896d57731cb5670b36c6178fc5519f3225980\n[INFO] Keeping golang.org/x/crypto 147b0a0d44eaebb0e4b9c780d01b9af728575d49\nnothing happens, glide is still running\n``\n. @garimakhulbe Can you try this on your Windows machine and report back the diff between glide.lock before and after runningglide up?\n. @mattfarina We confirmed that we were on the very latest of glide when that was generated. It seems to not be resolved.\n. CC @boumenot\n. @mattfarina It looks like there might be one remaining issue, since it's trying to add the unused subpackages in Windows still.\n. @mattfarina Sorry, I don't follow, are you saying there's a problem withazure-sdk-for-gomaster?\n. @garimakhulbe Can you give it a shot again? I still don't have a Windows machine setup with the relevant stuff.\n. I still see two issues:\n- To my knowledge,rc2is still being improperly added.azure-sdk-for-godoes not directly use therc2package. (Actually, I think even the references to pkcs12 have been removed, I should remove it entirely)\n-/autorestandautorest` are being treated as different subpackages.\n. I'm just not sure why rc2 was only added in Windows. Transitive\ndependencies are normally shown in the lock file, not the yaml file, in my\nexperience.\nOn Feb 9, 2016 11:04 PM, \"Garima Khulbe\" notifications@github.com wrote:\n\n[image: image]\nhttps://cloud.githubusercontent.com/assets/9362976/12938929/a3451a1e-cf6e-11e5-93fe-91764bfa04f2.png\nLGTM. @colemickens https://github.com/colemickens, please confirm.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/235#issuecomment-182200973.\n. Maybe the exception is when the transitive dependency is a subpackage or\nfrom the same repo? But it doesn't get added in Linux (that was about two\nweeks ago though).\nOn Feb 9, 2016 11:09 PM, \"Cole Mickens\" cole.mickens@gmail.com wrote:\nI'm just not sure why rc2 was only added in Windows. Transitive\ndependencies are normally shown in the lock file, not the yaml file, in my\nexperience.\nOn Feb 9, 2016 11:04 PM, \"Garima Khulbe\" notifications@github.com wrote:\n\n[image: image]\nhttps://cloud.githubusercontent.com/assets/9362976/12938929/a3451a1e-cf6e-11e5-93fe-91764bfa04f2.png\nLGTM. @colemickens https://github.com/colemickens, please confirm.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/235#issuecomment-182200973.\n. We can safely ignore my first comment from a few hours ago since we are in fact looking at the lock file in the diff. \n\n\nI updated glide on my Linux box. It is now producing the same diff as what @garimakhulbe has shown above. \nHowever, rc2 has always been required by pkcs12... so it looks like we were actually seeing another bug here that has been fixed in the last few weeks. Does that sound accurate @mattfarina? If so, we can certainly close this.\nThanks for being so responsive.\n. Also, when I execute that, the yaml it inserts is this:\n- package: github.com/Azure/go-autorest\n  subpackages:\n  - autorest\nwhich also seems wrong. go-autorest is not a package, just a repo.\n. But correcting it to:\n- package: github.com/Azure/go-autorest/autorest\n  subpackages:\n  - azure\ndoesn't help either. (And I need the azure subpackage as well).\n. False alarm. I had the wrong import path in my code (which is where glide got it).\nError message is a bit confusing though. Something could hint me towards checking my source rather than a glide file.\n(In fact, I don't even expect glide to be scanning my code at this point... why is it? Why is this error coupled to the glide up process even though it successfully pulled down the repo and wrote the glide.lock file.)\n. I guess in retrospect it's pretty obvious what the message is telling me. Not sure if it's worth the code to special case changing the repository.\nI'm actually going to close this after reconsidering. Feel free to reopen it if you want to do something about it, but I think it's probably fine as-is.\n. I assume this is related to the source code scanning which I still don't understand the need for.\n. seems like setting the project to the fully qualified name in glide.yaml resolved this.\n. Thanks @mattfarina. Even just a warning would be great.\n. ",
    "pib": "Ok, just wanted to make sure I wasn't somehow missing something :D\nI guess I'll just set my testing libs as regular dependencies until then.\nThanks!\n. ",
    "edrex": "yes please. \nwe're using glide for vendor, but we also need to build some third party binaries for our build. building them from vendor doesn't work, because they don't find their own dependencies. I tried symlinking $GOPATH/src -> vendor, but this leads to some weird infinite loops since now our project is in its own vendor dir.\nI've settled on setting GOPATH=$PROJECT_ROOT for the src deps of these third party binaries, but have no way to pin versions currently (short of committing everything, which we're currently not doing).\nIt would be lovely if we could use the same tools to manage vendor/ and $GOPATH.. #328 . I think (guessing) that deprecation notice is meant to apply to glide rebuild not glide tree. \nI'm seeing the panic too.\nReopen?\n. ",
    "ax-nathan": "I'd vote for \"opt-in to go path copying\" as a quick, safe fix. Seems like the current method is an overly aggressive performance optimization, but results in \"surprising\" behavior for the development use case. At a minimum, perhaps the README needs a \"Gotchas\" section where things like this are called out?\n. Just to help those who (like me) have been repeatedly bitten by this, adding version: master for every package in your glide.yaml file seems to be an acceptable workaround for the moment...\n. @mattfarina, sounds like a good idea to me!\n. ",
    "adamreese": "Sounds about right\n. ",
    "conikeec": "My GOPATH is not resolving to the vendored packages .\nhttps://github.com/Masterminds/glide/issues/167\nAm I missing anything here\n. Is there any immediate workaround/solution to address the $GOPATH issue.\n\"go build\" is not working for me with a slide based project.\n. Hi Matt\nHere goes\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/XXX/.gvm/pkgsets/go1.5/global\"\nGORACE=\"\"\nGOROOT=\"/Users/XXX/.gvm/gos/go1.5\"\nGOTOOLDIR=\"/Users/XXX/.gvm/gos/go1.5/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. GO15VENDOREXPERIMENT is enabled\nHowever, it's skipping the vendor tree completely\ngo build\nmain.go:8:2: cannot find package \"github.com/jeffail/gabs\" in any of:\n    /Users/xxx/.gvm/gos/go1.5/src/github.com/jeffail/gabs (from $GOROOT)\n    /Users/xxx/.gvm/pkgsets/go1.5/global/src/github.com/jeffail/gabs (from $GOPATH)\nmore glide.yaml\npackage: .\nimport:\n- package: github.com/jeffail/gabs\n. Removed GVM based go install\nReinstalled go1.5\nSet GO15VENDOREXPERIMENT=1\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/xxx/gopath\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nSame issue exists\ngo build\nmain.go:8:2: cannot find package \"github.com/jeffail/gabs\" in any of:\n    /usr/local/go/src/github.com/jeffail/gabs (from $GOROOT)\n    /Users/xxx/gopath/src/github.com/jeffail/gabs (from $GOPATH)\nmore glide.yaml\npackage: .\nimport:\n- package: fmt\n- package: github.com/jeffail/gabs\n- package: go/build\n- package: runtime\n. ",
    "rubenhazelaar": "Ofcourse:\nOops! glide.yaml is missing from C:\\Path\\to\\project\nAbove path corresponds to: $GOPATH/src/github.com/ruben/project. \nI have also tried running glide get in an Administrator console, however unfortunatly it's the same.\n. I'm also using 0.8.0. I downloaded the binary from the releases page, so no\ngo get performed (should I have?). Glide.yaml is in the folder and I can\nopen it by hand and edit it. Edited or unedited, it makes no difference.\nStrange..., could it be the location of the executable? Stuck the binary I\ndownloaded in C:/Go/bin.\nOn Dec 12, 2015 1:09 AM, \"Matt Farina\" notifications@github.com wrote:\n\n@rubenhazelaar https://github.com/rubenhazelaar I just downloaded the\n0.8.0 release from the releases page\nhttps://github.com/Masterminds/glide/releases and tested on Windows. I\nhad no issues. I'm not yet able to reproduce the problem.\n1. What version of Glide are you using. glide --version will provide\n   that.\n2. Where did you get Glide from? Did you install a binary? Did you use go\n   get to retrieve it?\n3. Can you open and edit the glide.yaml by hand?\nI'd like to be able to reproduce this problem. So far I've not been able\nto.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/161#issuecomment-164108315.\n. I discovered that when I run glide create & glide get directly in my $GOPATH folder, the dependencies are downloaded correctly. Of course this is not as intended with glide. It should be in $GOPATH/src/some/project.\n. Thanks for the tip on gb, looks good!\n\nIt could be that my main code was originally in GOPATH/src (don't\nremember), however does the go tool really remember this? If so, it could\nbe the problem. However I don't understand why go would remember this\nalthough the structure has been changed for a long time.\n2015-12-12 16:01 GMT-03:00 Matt Farina notifications@github.com:\n\nAh, I have an idea what it might be.\nGlide supports the go tool. The go tool requires that all code be within\nthe GOPATH. So, your project needs to be in the GOPATH (e.g.,\nGOPATH/src/foo/bar). Glide will put code in the vendor/ folder in the\nproject (e.g., GOPATH/src/foo/bar/vendor/) and the glide.yaml file should\nbe at GOPATH/src/foo/bar/glide.yaml.\nThe go tool does not support project based structures. It's heavily tied\nto the GOPATH which is a product of how Google internally manages code.\nIn your initial go was your code inside the GOPATH/src? If not that would\nhave been the problem.\nIf you want a project based build tool you'd need to replace the go tool\nwith something like gb http://getgb.io.\nDoes this help?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/161#issuecomment-164176252.\n. Ok, I have tested the following:\n\nReset my GOPATH to another folder and organized it the idiomatic way. Setup a simple helloworld.go and executed glide create. Gilde.yaml was create however not found by glide get as before. \nSo still the same issue with the binary I downloaded for Windows.\nThen i removed it and executed go get github.com/Masterminds/glide, with my GOPATH\\bin folder in my Path I was able to use glide create & also glide get some/project seems to be working (still running at the moment).\nPerhaps something wrong with the Windows binary? For glide --version I get back gilde version dev now. Which - considering go get looks at HEAD - is not strange of course.\n. Great, hope it works out and your able to reproduce the case :). If you\nneed anything else please let me know.\nI used the amd64 binary for Windows.\nOn Dec 12, 2015 7:18 PM, \"Matt Farina\" notifications@github.com wrote:\n\n@rubenhazelaar https://github.com/rubenhazelaar one more question,\nwhich of the windows binary builds were you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/161#issuecomment-164198637.\n. To give some closure to this: I downloaded the new 0.8.3 version from the releases page and it works as expected :)\n. 1) My glide.yaml:\n\nyaml\npackage: bitbucket.org/rubenhazelaar/ECObox\nimport:\n- package: github.com/mailgun/godebug\n- package: github.com/julienschmidt/httprouter\n- package: golang.org/x/net\n  subpackages:\n  - /context\n- package: github.com/natefinch/lumberjack\n- package: github.com/jlaffaye/ftp\n- package: github.com/kardianos/service\n- package: github.com/mattn/go-sqlite3\n- package: gopkg.in/fsnotify.v1\n2) 1.6Mbps, with pings ranging from 80 - 400ms (on a good day)\n3) Great will try it, or should I be patient and wait for the release?\nI also have the output output of go get:\n[INFO] Preparing to install 1 package.\n[WARN] Package \"github.com/mattn/go-sqlite3\" is already in glide.yaml. Skipping[INFO] Walking the dependency tree to calculate versions[INFO] Fetching updates for github.com/mailgun/godebug.\n[INFO] Fetching updates for github.com/julienschmidt/httprouter.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for github.com/natefinch/lumberjack.\n[INFO] Fetching updates for github.com/jlaffaye/ftp.\n[INFO] Fetching updates for github.com/kardianos/service.\n[INFO] Fetching updates for github.com/mattn/go-sqlite3.\n[INFO] Fetching updates for gopkg.in/fsnotify.v1.\n[INFO] Found Godeps.json file.\n[INFO] Found Godeps.json file for \"github.com/mailgun/godebug\"\n[INFO] Fetching updates for bitbucket.org/JeremySchlatter/go-atexit.\n[INFO] bitbucket.org/JeremySchlatter/go-atexit is already set to version 4d24881b3b10dc2e60d3e6b3b6fce38d3bda546d. Skipping update.\n[INFO] Setting version for bitbucket.org/JeremySchlatter/go-atexit to 4d24881b3b10dc2e60d3e6b3b6fce38d3bda546d.\n[INFO] Fetching updates for golang.org/x/tools.\n[INFO] golang.org/x/tools is already set to version 3ecc311976cc3f7c7b7a50314929bdc1b07c4c9d. Skipping update.\n[INFO] Setting version for golang.org/x/tools to 3ecc311976cc3f7c7b7a50314929bdc1b07c4c9d.\n[INFO] Fetching updates for github.com/jtolds/gls.\n[INFO] github.com/jtolds/gls is already set to version 9a4a02dbe491bef4bab3c24fd9f3087d6c4c6690. Skipping update.\n[INFO] Setting version for github.com/jtolds/gls to 9a4a02dbe491bef4bab3c24fd9f3087d6c4c6690.\n[INFO] Fetching updates for github.com/kylelemons/godebug.\n[INFO] github.com/kylelemons/godebug is already set to version 808ac284003ce2b08ef590da08f95379e8a06936. Skipping update.\n[INFO] Setting version for github.com/kylelemons/godebug to 808ac284003ce2b08ef590da08f95379e8a06936.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] gopkg.in/yaml.v2 is already set to version 49c95bdc21843256fb6c4e0d370a05f24a0bf213. Skipping update.\n[INFO] Setting version for gopkg.in/yaml.v2 to 49c95bdc21843256fb6c4e0d370a05f24a0bf213.\n[INFO] Fetching updates for github.com/0xfaded/eval.\n[INFO] github.com/0xfaded/eval is already set to version d7460625a04165fdb12302d5b278d9c27ddbaa93. Skipping update.\n[INFO] Setting version for github.com/0xfaded/eval to d7460625a04165fdb12302d5b278d9c27ddbaa93.\n[INFO] Fetching updates for github.com/peterh/liner.\n[INFO] github.com/peterh/liner is already set to version 1bb0d1c1a25ed393d8feb09bab039b2b1b1fbced. Skipping update.\n[INFO] Setting version for github.com/peterh/liner to 1bb0d1c1a25ed393d8feb09bab039b2b1b1fbced.\n[INFO] Fetching updates for github.com/kisielk/gotool.\n[INFO] github.com/kisielk/gotool is already set to version d678387370a2eb9b5b0a33218bc8c9d8de15b6be. Skipping update.\n[INFO] Setting version for github.com/kisielk/gotool to d678387370a2eb9b5b0a33218bc8c9d8de15b6be.\n[INFO] Scanning bitbucket.org/JeremySchlatter/go-atexit for dependencies.\n[INFO] Scanning github.com/0xfaded/eval for dependencies.\n[INFO] Fetching updates for github.com/0xfaded/go-testgen.\n[INFO] Scanning github.com/0xfaded/go-testgen for dependencies.\n[INFO] Scanning github.com/jtolds/gls for dependencies.\n[INFO] Scanning github.com/kisielk/gotool for dependencies.\n[INFO] Scanning github.com/kylelemons/godebug for dependencies.\n[INFO] Scanning github.com/peterh/liner for dependencies.\n[INFO] Scanning golang.org/x/tools for dependencies.\n[INFO] Scanning gopkg.in/yaml.v2 for dependencies.\n[INFO] Scanning github.com/julienschmidt/httprouter for dependencies.\n[INFO] Scanning golang.org/x/net for dependencies.\n[INFO] Fetching updates for golang.org/x/text.\n[INFO] Fetching updates for golang.org/x/crypto.\n[INFO] Scanning golang.org/x/text for dependencies.\n[INFO] Scanning golang.org/x/crypto for dependencies.\n[INFO] Scanning github.com/natefinch/lumberjack for dependencies.\n[INFO] Scanning github.com/jlaffaye/ftp for dependencies.\n[INFO] Scanning github.com/kardianos/service for dependencies.\n[INFO] Fetching updates for github.com/kardianos/osext.\n[INFO] Fetching updates for golang.org/x/sys.\n[INFO] Scanning github.com/kardianos/osext for dependencies.\n[INFO] Scanning golang.org/x/sys for dependencies.\n[INFO] Scanning github.com/mattn/go-sqlite3 for dependencies.\n[INFO] Scanning gopkg.in/fsnotify.v1 for dependencies.\n[INFO] Setting version for bitbucket.org/JeremySchlatter/go-atexit to 4d24881b3b10dc2e60d3e6b3b6fce38d3bda546d.\n[INFO] Setting version for golang.org/x/tools to 3ecc311976cc3f7c7b7a50314929bdc1b07c4c9d.\n[INFO] Setting version for github.com/jtolds/gls to 9a4a02dbe491bef4bab3c24fd9f3087d6c4c6690.\n[INFO] Setting version for github.com/kylelemons/godebug to 808ac284003ce2b08ef590da08f95379e8a06936.\n[INFO] Setting version for gopkg.in/yaml.v2 to 49c95bdc21843256fb6c4e0d370a05f24a0bf213.\n[INFO] Setting version for github.com/0xfaded/eval to d7460625a04165fdb12302d5b278d9c27ddbaa93.\n[INFO] Setting version for github.com/peterh/liner to 1bb0d1c1a25ed393d8feb09bab039b2b1b1fbced.\n[INFO] Setting version for github.com/kisielk/gotool to d678387370a2eb9b5b0a33218bc8c9d8de15b6be.\n[INFO] Project relies on 21 dependencies.\n[INFO] Writing glide.lock file\nIt seems that also glide install seems to having issues with speed, BTW. Hope this helps.\n. I'm in the process of installing a new depedency with glide get, however it still takes a long time (in for over 15 minutes now). Previously I used 0.8.3 and now am on dev, installed with go get github.com/Masterminds/glide. My internet connection is not fast and kind of unstable. Is there perhaps some debug flag I can use? Slowness seems to occur with all commands (get, install), haven't tried update yet. \nI use Cmder on Windows as my console, which shows which executable is running when a command is running and it seems that most of the time during the command is spent by git.exe:\ngit --version\ngit version 2.7.0.windows.1\nPerhaps this has something to do with this? Maybe it's just git\n. ",
    "justinfx": "Thanks for the quick feedback!\nI'm using the OSX  (10.9.5) homebrew-provided 0.8.0 glide install, and the following go-1.5.1 env:\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/justin/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/justin/src/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n$GOROOT is not set by me. \nIf you think trying glide from tip will make a difference, I can do that. I have a really simple env, and basically just tried doing your standard glide create in the root of the project. \n. Interesting. I just removed the brew 0.8.0 version, and installed glide from tip. It does not have this same problem. What could be the difference here between the brew package and tip?\n. Awesome. Thanks for the quick support!\n. ",
    "netroby": "```\nhuzhifeng@s ~/go/src/github.com/netroby/gosense (master*) $ glide list\n[ERROR] Could not find /home/huzhifeng/go/src/github.com/netroby/gosense/vendor/github.com/gin-gonic/contrib/sessions/examples: found packages maincookie (example_cookie.go) and mainredis (example_redis.go) in /home/huzhifeng/go/src/github.com/netroby/gosense/vendor/github.com/gin-gonic/contrib/sessions/examples\n[ERROR] Dependency /home/huzhifeng/go/src/github.com/netroby/gosense/vendor/github.com/gin-gonic/contrib/sessions failed to resolve: found packages maincookie (example_cookie.go) and mainredis (example_redis.go) in /home/huzhifeng/go/src/github.com/netroby/gosense/vendor/github.com/gin-gonic/contrib/sessions/examples.\nOops! found packages maincookie (example_cookie.go) and mainredis (example_redis.go) in /home/huzhifeng/go/src/github.com/netroby/gosense/vendor/github.com/gin-gonic/contrib/sessions/examples\n``\n. By default, we using go get to add package to project.\nso we need a tools likeglide rescanto rescan dependencies again\n. If merge this feature intoglide updateseems not bad.\nGood for me at least. if i runglide update`, i mean update everything, dependencies and version up to date\n. ",
    "baliw": "@mattfarina @technosophos \nWe could really use a way to ignore directories in dependencies.\nI'm trying to use Echo and it has a recipes directory that ends up causing all kinds of dependencies to get loaded that I don't need.\nI tried the \"ignore:\" trick but it's long and didn't seem to work anyway.   Also, I have to keep updating that as the project ads more examples.\n- package: github.com/labstack/echo\n    vcs: git\n    ignore:\n      - github.com/akavel/rsrc\n      - github.com/astaxie/beego\n      - github.com/beego/goyaml2\n      - github.com/BurntSushi/toml\n      - github.com/codegangsta/negroni\n      - github.com/codegangsta/inject\n      - github.com/bradfitz/gomemcache\n      - github.com/beego/x2j\n      - github.com/belogik/goes\n      - github.com/clbanning/x2j\n      - github.com/boltdb/bolt\n      - github.com/couchbaselabs/go-couchbase\n      - github.com/dgrijalva/jwt-go\n      - github.com/daaku/go.zipexe\n      - github.com/couchbase/gomemcached\n      - github.com/couchbase/cbauth\n      - github.com/couchbase/go-couchbase\n      - github.com/cupcake/rdb\n      - github.com/couchbaselabs/go_n1ql\n      - github.com/dustin/go-broadcast\n      - github.com/edsrzf/mmap-go\n      - github.com/facebookgo/clock\n      - github.com/facebookgo/stats\n      - github.com/facebookgo/httpdown\n      - github.com/facebookgo/grace\n      - github.com/garyburd/redigo\n      - github.com/GeertJohan/go.incremental\n      - github.com/GeertJohan/go.rice\n      - github.com/gin-gonic/gin\n      - github.com/go-martini/martini\n      - github.com/go-sql-driver/mysql\n      - github.com/goji/param\n      - github.com/gocraft/web\n      - github.com/golang/snappy\n      - github.com/golang/protobuf\n      - github.com/gorilla/websocket\n      - github.com/jessevdk/go-flags\n      - github.com/julienschmidt/httprouter\n      - github.com/justinas/alice\n      - github.com/kardianos/osext\n      - github.com/lib/pq\n      - github.com/manucorporat/sse\n      - github.com/manucorporat/stats\n      - github.com/martini-contrib/render\n      - github.com/mattn/go-colorable\n      - github.com/mattn/go-isatty\n      - github.com/onsi/ginkgo\n      - github.com/oxtoacart/bpool\n      - github.com/onsi/gomega\n      - github.com/peterh/liner\n      - github.com/Pallinder/go-randomdata\n      - github.com/rs/cors\n      - github.com/rs/xhandler\n      - github.com/siddontang/goredis\n      - github.com/siddontang/go\n      - github.com/siddontang/ledisdb\n      - github.com/siddontang/rdb\n      - github.com/speps/go-hashids\n      - github.com/stretchr/objx\n      - github.com/stretchr/testify\n      - github.com/syndtr/goleveldb\n      - github.com/thoas/stats\n      - github.com/ugorji/go\n      - github.com/zenazn/goji\n      - github.com/tylerb/graceful\n      - github.com/wendal/errors\n      - golang.org/x/crypto\n      - golang.org/x/net\n      - golang.org/x/text\n      - gopkg.in/bluesuncorp/validator.v5\n. ",
    "dmitris": "is there a documentation on the ignore property -  how it works and what exactly gets ignored?  I'm trying to make glide skip including an unnecessary dependency (dependency of a \"root\" package when only a small dependency-light subpackage is needed), the glide update does say: [INFO] Ignoring: go.corp.sometld.com/org/repo but that package is still being included in glide.lock and checked out into the vendor/ directory.  The \"ignoring\" [INFO] message also comes after the one saying that the package you want to ignore is being fetched into vendor.  Is it the expected behavior?\n. no, looks ok - did not notice any problems related to ignore (but also did not have to use ignore much after the dependency resolution improved)\n. I added another example of a case where glide includes dependencies that are not needed by the project:\nhttps://github.com/dmitris/deptest4glide\nwith a short write-up in the README.  The example uses only golang.org/x/net package (with the html golang.org/x/net/html and [transitively] golang.org/x/net/net/atom subpackages) - but glide update also pulls in golang.org/x/crypto and golang.org/x/text which are packages that are not required to build the program or its dependencies.\nI looked at the source of the golang.org/x/net  package in search of where it uses the golang.org/x/crypto one (using grep -r -l 'golang.org/x/crypto' * in a fresh clone of https://go.googlesource.com/net) - the only case I find is in http2/h2i/h2i.go which is a package main' program (an interactive HTTP/2 console). I believe glide should not pay attention to the 'package main' imports when scanning imported packages for transitive dependencies.  Similarly, the golang.org/x/text is used in the golang.org/x/net/html/charset subpackage which is not used by my example program.\nTo avoid such false positives, I wonder if it would be possible to (optionally) rely on go list [...] .Deps output as in the command below for the cases where you already have all the dependencies installed in your GOPATH - or at least double-check against what go list indicates?\ngo list -e -f '{{join .Deps \"\\n\"}}' ./... | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'\nI would be happy to help with testing or implementation if needed.  I pulled a patch by @hectorj from https://github.com/hectorj/glide/tree/feature-166 and it seems to work fine for this case - it created glide.lock with only one dependency -  golang.org/x/net, as expected:\nhash: 7fde8e6242edcd1e55bb5f40fc1e29a66e3871e9b1ccfc835ac35268d52eb0b0\nupdated: 2016-01-22T13:12:32.822942006+01:00\nimports:\n- name: golang.org/x/net\n  version: 2e9cee70ee697e0a2ef894b560dda50dec7dff58\n  subpackages:\n  - /html\ndevImports: []\npractically identical to my \"wish\" version https://github.com/dmitris/deptest4glide/blob/master/glide.lock.want\n. :+1: - rooting for the success of that big refactoring piece you are doing. The world needs glide as a great dependency management tool - and it seems many people are eager to contribute in different ways! :smile: \n. I believe it is now fixed (thanks @hectorj for the patch!) as mentioned in https://github.com/Masterminds/glide/releases/tag/0.9.0-rc1 Does anyone still see this being a problem?  I checked it with https://github.com/dmitris/deptest4glide (README has a description of the original problem) and it looks fine there; same with several of our projects I checked.  I believe we can close the issue now.\n. I think I jumped up too soon...  It may be partially fixed but still not working correctly.  I updated my minimal case to demonstrate: github.com/dmitris/deptest4glide. This package imports github.com/dmitris/deptesthuge/deptestsmall which is a dependency-free subpackage of github.com/dmitris/deptesthuge where the root package has massive dependencies (coreos, docker).  Of course both go get and glide have to check out the repo for the \"root\" package (github.com/dmitris/deptesthuge) but go get stops there and correctly determines that the dependencies of the deptesthuge are not needed; glide on the other hand pulls everything imported in the parent directory of the used subpackage.\nHere's the go list [...] .Deps ouptut for github.com/dmitris/deptest4glide:\n$ go list -e -f '{{join .Deps \"\\n\"}}' ./... | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'\ngithub.com/dmitris/deptesthuge/deptestsmall\n(the dependency set is calculated correctly)\nand here's the output of glide -debug update - which pulls docker, coreos etc. - https://gist.github.com/dmitris/dbb1fce06b4f28f67aab\nThe resulting glide.lock file is: https://gist.github.com/dmitris/ff6e10ffa0d2f678b12e\nI'm not sure which syntax in glide.yaml should be used when you just want to import a subpackage:\nimport:\n- package: github.com/dmitris/deptesthuge/deptestsmall\nor\nimport:\n- package: github.com/dmitris/deptesthuge\n  - subpackage: deptestsmall\n(@kshlm asked above as well) - I tried both but still, glide pulls unneeded packages with both configurations.\n/cc  @technosophos\n. I think we should close this unless anyone else sees any further problems.\n. > On large codebases the first pass can take a couple minutes\nI've seen a project (internal one) where \"glide up\" takes 30-40 minutes and the resulting vendor folder is a few hundreds of MBs! :smile: \nBut even for smaller projects I would prefer to live without the \"vendor\" folder with all the dependencies \"globbed\" into the local folder.  I don't regularly have to switch between the projects with very disparate sets of dependencies - quite the opposite.  My development workflow is: in the normal add-test-fix-test daily grind mode, I'm happy with what I have in my GOPATH and just using \"go install\" and \"go test\".  When I submit a PR, we have a Travis-like CI system that checks out from a clean slate, builds, run tests etc - that's where I would like to run \"glide update\", generate the vendor folder and use it.  For the cases where I want to run the build as the CI system would do it, we have a Makefile that imitates the same action (building from scratch in a \"GOPATH sandboxed\" place etc.) - in that case I don't mind and expect slower builds.\nI dislike having the vendor source tree locally under each project because it requires extra keystrokes to filter-grep vendored files when running tests, you have to update it every time one of your own libraries change (in every project that depends on it), it litters search results in the editor with irrelevant hits etc. - of course, there is a work-around for all of those but it seems rather unnecessary pain (IMO of course).\nHere what would be the functionality of my \"pie-in-the-sky-dream\" dependency tool:\n- \"init\" - quickly run through the GOPATH and record all the dependencies including transitive ones -  like \"glide init\" does now but record all the packages with vcs, repo, and version taken directly from the GOPATH repositories.  (Maybe this could be an option - to turn off all recursive version calculation based on Godeps or glide.yaml files in the \"upstream\" dependencies - just use what is currently in the GOPATH.  ) So if I have github.com/foo/bar checked out from the \"git@opensource.git.company.com:foo/bar\" internal mirror, that value would be placed in glide.yaml (\"repo: git@opensource.git.company.com\"), the same for vcs and version.  Currently I have to go manually and add those fields.   Also If possible, I would use an option to turn off all recursive version calculation based on Godeps or glide.yaml in the dependencies - just use what is currently in the GOPATH.\n- \"update\" - sync the state of the dependencies in the GOPATH into the 'manifest' (either glide.lock or glide.yaml).  Personally, I would love to \"glide update\" or some other command to do the following with glide.yaml - update all the versions for packages but only where they are recorded.  Probably an explanation is in order: I tend to think about glide.yaml as a kind of template where some pieces are left as \"variables\" that are to be filled during the \"runtime\" (when you create glide.lock and install).  So I would like to use glide.yaml to fully pin down the external (3rd party / open-source) dependencies (with repo/vcs/version) but leave those for the internal packages \"free\" (no version recorded) so that the CI system would fetch the latest versions and I would not need to update the sha1 sum in the version field every time one of them changes.  I would check in glide.yaml (the \"template\") for the CI and maybe keep glide.lock (complete list) generated by \"glide update\" for documentation of what exactly was used for the build.\n- \"install\" - create glide.lock based on glide.yaml, setup the vendor directory based on glide.lock and download all the dependencies - I think exactly as is now\n- \"diff\" - show the version differences between the state of the GOPATH and what is recorded in the glide manifest (glide.yaml and/or glide.lock).\nIt would also be great to have a command that would be a reverse of init - to sync your GOPATH with the manifest and make sure it has the same versions as recorded in glide files (after you checked with diff that it is what you want).  So that if a teammate sent a new version of the manifest that has a couple of packages updated, you can quickly upgrade your GOPATH set without going into every directory :smile: \nI hope it does not sound too crazy :smile:  - I'm still trying to figure out the best mode of using the tool and the possibilities. I feel glide comes very close to the ideal dependency tool and has a real chance to fill the hole left by the go tool (\"go dep\")!  For example, it allows you go reconcile the requirement of using only internal sources / mirrors and desire to use the original pathnames for \"gopkg.in\"-hosted packages - since you can \"pin\" the actual source to vcs+repo+version - :100:  Thanks for all your great work on this!\n. > $ glide --use-gopath up\nI believe it's the other way around: glide up[date] --use-gopath\nFrom `glide help update':\nOPTIONS:\n   --use-gopath         Copy dependencies from the GOPATH if they exist there.\n. Yes, they are all the same VCS (git).\nThe layout is:\ngo-simple-canary-cmd\ngo-simple-canary-lib\ngo-simple-canary-lib-two\ngo-simple-canary-lib-three\neach one is part of the package name like \"go.corp.company.com/dmitris/go-simple-canary-cmd\" (the domain is not the real one).  The dependency chain is: cmd -> lib -> lib-two -> lib-three (toy projects to test dependency resolution by the CI system).\n'go list -e -f' finds them all fine:\n$ go list -e -f '{{join .Deps \"\\n\"}}' ./... | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'\ngo.corp.company.com/dmitris/go-simple-canary-cmd\ngo.corp.company.com/dmitris/go-simple-canary-lib\ngo.corp.company.com/dmitris/go-simple-canary-lib-three\ngo.corp.company.com/dmitris/go-simple-canary-lib-two\nand \"go get\" installs them correctly.\nThere is indeed a go-get \"redirect\" with the meta tags  (like for golang.org/x):\nFetching https://go.corp.company.com/dmitris/go-simple-canary-cmd?go-get=1\nParsing meta tags from https://go.corp.company.com/dmitris/go-simple-canary-cmd?go-get=1 (status code 200)\nget \"go.corp.company.com/dmitris/go-simple-canary-cmd\": found meta tag main.metaImport{Prefix:\"go.corp.company.com/dmitris/go-simple-canary-cmd\", VCS:\"git\", RepoRoot:\"ssh://git@git.corp.company.com/dmitris/go-simple-canary-cmd\"} at https://go.corp.company.com/dmitris/go-simple-canary-cmd?go-get=1\nMaybe it would be possible (and even simpler) to \"seed\" glide.yaml in 'glide init' from the output of 'go list' - at least, as an option?  Thanks a lot for looking into this.\n. maybe I did not make it clear - go-simple-canary-cmd, go-simple-canary-lib etc. are all in their separate Git repos with distinct remote.origin.url:\n$ git config --get remote.origin.url\ngit@git.corp.company.com:dmitris/go-simple-canary-cmd.git\n$ cd ../go-simple-canary-lib\n$ git config --get remote.origin.url\ngit@git.corp.company.com:dmitris/go-simple-canary-lib.git\netc.\n. @mattfarina - I don't think there are multiple go-import statements\n$ curl \"https://go.corp.company.com/dmitris/go-simple-canary-cmd?go-get=1\"\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"go-import\" content=\"go.corp.company.com/dmitris/go-simple-canary-cmd git ssh://git@git.corp.company.com/dmitris/go-simple-canary-cmd\">\n  </head>\n  <body>\n    <p>Nothing to see here.</p>\n  </body>\n. I tried to put all the packages as output by \"go list\" in glide.yaml but when running glide up it was putting \"two\" and \"three\" as subpackages and did not pay attention to the real packages listed in glide.yaml\n. I tried one more time - I put the following in my glide.yaml file:\n- package: go.corp.company.com/dmitris/go-simple-canary-lib\n- package: go.corp.company.com/dmitris/go-simple-canary-lib\n- package: go.corp.company.com/dmitris/go-simple-canary-lib-three\n- package: go.corp.company.com/dmitris/go-simple-canary-lib-two\nand when I ran glide --debug up, I got the following output:\n$ glide --debug up\n[INFO] Fetching updates for go.corp.company.com/dmitris/go-simple-canary-lib.\n[DEBUG] Attempting to find current branch for ssh://git@git.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Saving default branch for ssh://git@git.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] ---> Inspecting /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor for changes (1 packages).\n[DEBUG] ----> Scanning go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/vendor/ for a manifest file.\n[INFO] Scanning go.corp.company.com/dmitris/go-simple-canary-lib for dependencies.\n[DEBUG] => Scanning go.corp.company.com/dmitris/go-simple-canary-lib-two\n[DEBUG] Setting final version for 1 dependencies.\n[INFO] Project relies on 1 dependencies.\n[INFO] Writing glide.lock file\nThe resulting glide.lock file then was the following:\nhash: 538fb2dd7a18fe6a3692fc67534c2154d7f70892cff8ebfaca1e04bb75918a37\nupdated: 2015-12-22T18:13:28.718975472+01:00\nimports:\n- name: go.corp.company.com/dmitris/go-simple-canary-lib\n  version: 50cfa0f24c75a099648c023a5548ea37f20e9fdc\n  subpackages:\n  - -three\n  - -two\ndevImports: []\nI ran go get -u -v github.com/Masterminds/glide right before that so i'm using the latest and greatest dev version of glide.\n. I also tried glide --debug get go.corp.company.com/dmitris/go-simple-canary-lib-two, here's the output:\n$ glide --debug get go.corp.company.com/dmitris/go-simple-canary-lib-two\n[INFO] Preparing to install 1 package.\n[WARN] Package \"go.corp.company.com/dmitris/go-simple-canary-lib\" is already in glide.yaml. Skipping\n[INFO] Walking the dependency tree to calculate versions\n[INFO] Fetching updates for go.corp.company.com/dmitris/go-simple-canary-lib.\n[DEBUG] ---> Inspecting /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor for changes (1 packages).\n[DEBUG] ----> Scanning go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/vendor/ for a manifest file.\n[INFO] Scanning go.corp.company.com/dmitris/go-simple-canary-lib for dependencies.\n[DEBUG] => Scanning go.corp.company.com/dmitris/go-simple-canary-lib-two\n[DEBUG] Setting final version for 1 dependencies.\n[INFO] Project relies on 1 dependencies.\n[INFO] Writing glide.lock file\nThe glide.lock file has not changed after the glide get command.\n. Here's what I get with the issue-182 branch:\n$ glide --debug init\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[DEBUG] go-import: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[INFO] Found reference to go.corp.company.com/dmitris/go-simple-canary-lib\n$ cat glide.yaml\npackage: go.corp.company.com/dmitris/go-simple-canary-cmd\nimport:\n- package: go.corp.company.com/dmitris/go-simple-canary-lib\n$ glide --debug update\n[DEBUG] before name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] go-import: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] after name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] subpkg:\n[INFO] Fetching updates for go.corp.company.com/dmitris/go-simple-canary-lib.\n[DEBUG] Attempting to find current branch for ssh://git@git.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Saving default branch for ssh://git@git.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] ---> Inspecting /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor for changes (1 packages).\n[DEBUG] ----> Scanning go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/vendor/ for a manifest file.\n[INFO] Scanning go.corp.company.com/dmitris/go-simple-canary-lib for dependencies.\n[DEBUG] => Scanning go.corp.company.com/dmitris/go-simple-canary-lib-two\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Setting final version for 1 dependencies.\n[INFO] Project relies on 1 dependencies.\n[INFO] Writing glide.lock file\n$ cat glide.lock\nhash: e22bb0a0fd2d5bd3e544b1880a95c664e34e06f14f5047453e1dd760c565fb24\nupdated: 2015-12-22T19:07:21.303544857+01:00\nimports:\n- name: go.corp.company.com/dmitris/go-simple-canary-lib\n  version: 50cfa0f24c75a099648c023a5548ea37f20e9fdc\ndevImports: []\n. I think the problem is in the checkRemotePackageCache function and the fact that it uses the prefix check to check for hits while returning only the prefix portion of the package:\nhttps://github.com/Masterminds/glide/blob/master/util/util.go#L101\nfor k := range remotePackageCache {\n        if strings.HasPrefix(pkg, k) {\n            return k, true\n        }\n    }\nThe cache contains the package like go.corp.company.com/dmitris/go-simple-canary-lib which happens to be a prefix of go.corp.company.com/dmitris/go-simple-canary-lib-two and go.corp.company.com/dmitris/go-simple-canary-lib-three, so it is the shorter version that is being returned from the cache and consequently used by the callers.\nOne of the debug messages I added shows:\n[DEBUG] checkRemotePackageCache - found go.corp.company.com/dmitris/go-simple-canary-lib-three returning go.corp.company.com/dmitris/go-simple-canary-lib\nIf I modify the function to contain:\nfor k := range remotePackageCache {\n        if pkg == k {\n            msg.Debug(\"checkRemotePackageCache - found %s returning %s\", pkg, k)\n            return k, true\n        }\n    }\nthen glide.lock contains all the expected packages:\nhash: f8a6aa7b0f80a58d8cb2da4f0b8855c11a22537db671693ef140947fbc9e7325\nupdated: 2015-12-22T22:57:41.832630641+01:00\nimports:\n- name: go.corp.company.com/dmitris/go-simple-canary-lib\n  version: 50cfa0f24c75a099648c023a5548ea37f20e9fdc\n- name: go.corp.company.com/dmitris/go-simple-canary-lib-three\n  version: 3fd7cce64311260b89b8be4917eda70d9b12f312\n- name: go.corp.company.com/dmitris/go-simple-canary-lib-two\n  version: 6b13a9d0d0cfa8892388fae1d995402681054f96\ndevImports: []\n\nThe output of glide --debug up with the manually edited glide.yaml as you suggested:\n$ glide --debug up\n[DEBUG] before name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] go-import: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] after name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] subpkg:\n[DEBUG] before name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] after name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] subpkg:\n[DEBUG] before name: go.corp.company.com/dmitris/go-simple-canary-lib-three\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] after name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] subpkg: -three\n[DEBUG] before name: go.corp.company.com/dmitris/go-simple-canary-lib-two\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] after name: go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] subpkg: -two\n[INFO] Fetching updates for go.corp.company.com/dmitris/go-simple-canary-lib.\n[DEBUG] ---> Inspecting /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor for changes (1 packages).\n[DEBUG] ----> Scanning go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in /Users/dmitris/go/src/go.corp.company.com/dmitris/go-simple-canary-cmd/vendor/go.corp.company.com/dmitris/go-simple-canary-lib/vendor/ for a manifest file.\n[INFO] Scanning go.corp.company.com/dmitris/go-simple-canary-lib for dependencies.\n[DEBUG] => Scanning go.corp.company.com/dmitris/go-simple-canary-lib-two\n[DEBUG] GetRootFromPackage (getRootFromGoGet): go.corp.company.com/dmitris/go-simple-canary-lib\n[DEBUG] Setting final version for 1 dependencies.\n[INFO] Project relies on 1 dependencies.\n[INFO] Writing glide.lock file\n. sent a one-line fix in https://github.com/Masterminds/glide/pull/183\n. It works fine now, thanks! Closing the issue.\n. I would think that (3) is more in line with how the go tools usually work (GOPATH-based).  I think it would be great to be able to specify the package as the target (such as github.com/foo/bar and make glide to translate it internally into the $GOPATH/src/github.com/foo/bar directory.  If there is no target provided by the user, I would default to the current package as in the output of go list.\n. I would disagree that GOPATH-based target is a big problem - I used go install <package> and go test <package> so many times, it is especially useful for build scripts and building/CI infrastructure.  I guess I got used to Go's symlink aversion as a feature long time ago - maybe it indeed simplifies some things.  \nA big benefit of (3) is that is PWD-independent - as long as you specify the GOPATH, the current directory where you happen to execute the command is not important and you don't have to jump through the hoops of continuously doing OLDPWD=$(pwd) && cd $GOPATH/src/<package> && glide update && glide install && cd ${OLDPWD} but instead can be much less verbose and more to the point: glide update <package> && glide install <package>.  Liberation from the current 'PWD oppression' is the main motivation of this issue (at least for me) :smile: \n. actually after some thought (and fixing failing builds), I would be in favor of keeping the commands' functionality focused and free from overlaps - so that glide update and glide install each does its own thing without calling each other.  Maybe we could turn the bug into the feature and document accordingly? I don't think it is big overheard or problem for users to call go update && go install if you don't have a lock file...\n. thanks for the quick fix and response!\n. I also verified that running glide up --all-dependencies in github.com/dmitris/deptest4glide still fetches all the dependencies of the base package github.com/dmitris/deptesthuge, as currently.\n. closing in favor of #278 , thanks for fixing this problem.\n. the problem sounds similar to https://github.com/Masterminds/glide/issues/166#issuecomment-184689515 and https://github.com/Masterminds/glide/pull/270 (\"overzealous\" pulling of dependencies from the base packages) - maybe it would be possible to make sure that the same resolution mechanism is used for both for consistency (if it's not the case already)?\n. I find the subpackage . both confusing and unnecessary.  It also seems unclear what you mean as 'I do want the base package' - you want the code of the base package? but normally you already have it due to the source code grouping by the repos, at least in the typical  github.com/user/repo case.  Or do you mean 'I want all the dependencies of the base package` - the question is then why if they are not used...\nI would like glide to behave more like go get - if my code and the code that my code needs (and so on, transitively) does require dependencies of the base package, then by all means pull them (without the user having to specify that in some special way), but pull only what is required.  If the user wants to pull more than required, there is already that --all-dependencies option:\n--all-dependencies      This will resolve all dependencies for all packages, not just those directly used.\nHere's how I would like to be able to test glide - it should pull all the repositories required to build the project declaring glide.yaml, but only those ones.  (I guess the test dependencies are special cases - maybe there should be a special option like -t for go get to indicate whether to bring in dependencies that are used only for testing; for now I think it's ok to pull them always to avoid breaking builds relying on them).  I would expect the set of repositories pulled with go get <project> be the same as what you find under vendor/ after running glide init && glide update.  Does it make sense?\n. I could not replicate with the latest version from master - ran the command and got a lockfile as below.  With master version, I'm getting Project relies on 12 dependencies, and with the #270 fix - 11 (golang.org/x/sys is not being pulled).\n$ cat glide.lock\nhash: e05c505ed7990bdbccc33e7fd8cf4b339759a9e04f7a19aa2ea7482d1e205d13\nupdated: 2016-02-22T19:15:59.673690323+01:00\nimports:\n- name: github.com/boltdb/bolt\n  version: 2f846c3551b76d7710f159be840d66c3d064abbe\n- name: github.com/garyburd/redigo\n  version: 836b6e58b3358112c8291565d01c35b8764070d7\n  subpackages:\n  - redis\n  - internal\n- name: github.com/golang/snappy\n  version: e2923611954f008a6e6c8dfb5ae11052aa913332\n- name: github.com/hashicorp/logutils\n  version: 0dc08b1671f34c4250ce212759ebd880f743d883\n- name: github.com/labstack/echo\n  version: c782b3fc755dd875907c832ca9402808091b726c\n  subpackages:\n  - middleware\n- name: github.com/labstack/gommon\n  version: bfff5bf04688a4048a5cb4dd3b3f0697caaad19c\n  subpackages:\n  - log\n  - color\n- name: github.com/mattn/go-colorable\n  version: 9cbef7c35391cca05f15f8181dc0b18bc9736dbb\n- name: github.com/mattn/go-isatty\n  version: 56b76bdf51f7708750eac80fa38b952bb9f32639\n- name: github.com/syndtr/goleveldb\n  version: e7e6f5b5ef25adb580feac515f9ccec514d0bda8\n  subpackages:\n  - leveldb\n  - leveldb/cache\n  - leveldb/comparer\n  - leveldb/errors\n  - leveldb/filter\n  - leveldb/iterator\n  - leveldb/journal\n  - leveldb/memdb\n  - leveldb/opt\n  - leveldb/storage\n  - leveldb/table\n  - leveldb/util\n- name: golang.org/x/net\n  version: b6d7b1396ec874c3b00f6c84cd4301a17c56c8ed\n  subpackages:\n  - context\n  - websocket\n- name: golang.org/x/sys\n  version: 50c6bc5e4292a1d4e65c6e9be5f53be28bcbe28e\n  subpackages:\n  - unix\n- name: gopkg.in/mgo.v2\n  version: d90005c5262a3463800497ea5a89aed5fe22c886\n  subpackages:\n  - bson\n  - internal/sasl\n  - internal/scram\ndevImports: []\n. that seems to work - tested on https://github.com/dmitris/deptest4glide as well as our internal projects that don't build with the current master version because of dependencies' handling.\nWould you consider cutting a 0.9.1 release to address Glide now looks, by default, at the import tree in use rather than the complete possible tree of imports, please?  Thanks.\n. I see there is already https://github.com/Masterminds/vcs/pull/14 - would it solve the issue? (Don't want to duplicate the effort and waste reviewers' time :smile: )\n. In my case, https://github.com/Masterminds/vcs/pull/14 did not help though I just installed the current glide with 'go get -u github.com/Masterminds/glide'.  I'm still getting errors: \n[ERROR] Update failed for github.com/dimfeld/httptreemux: Cannot detect VCS\nThe import entry looks similar to:\n- package: github.com/dimfeld/httptreemux\n  repo: git@opensource.mirror.acompany.com:dimfeld/httptreemux\n  version: 25b5c5c1171b178c6df897f2043af4f72f488225\nI think it is clear from the repo value that the vcs is Git; it would be great to avoid having to enter the redundant vcs: git for every import.\n. ok thanks.\n. @brycefisher - I believe flattening the vendor/ directory is a core glide feature and design decision, see\nhttps://glide.readthedocs.org/en/latest/vendor/ and \nhttp://engineeredweb.com/blog/2015/glide-flatten-dependencies/\nThe following may be relevant (even if partly outdated):\nhttps://github.com/Masterminds/glide/issues/108\nhttps://github.com/Masterminds/glide/issues/73\nMy appeal to the glide owners would be to please keep the vendor/ directory flattened  and not get in the mess of including different versions of the same package in the executable - which is known to likely lead to problems with init() functions and overall brittleness and complexity (see the \"Problems\" in the first link).  I believe it is the right thing to let the user (building package main) to figure out which single version of the dependency will work for them and if needed to specify it explicitly in glide.yaml. \n/cc @mastermind  @technosophos \n. adding my modest \"+1\" for the request to make 'glide get' to insert the dependency with the git SHA1 that it currently finds in the $GOPATH or that you pass as an option on the command line.  Something like glide update -version cff893e7f9fc3999fe4f1f50f5b504beb67e1164 github.com/Masterminds/vcs would also be great for updating glide.yaml to the newer versions of the package.  \nSo far we've been using glide init to set up the initial version of glide.yaml but afterwards we manually edit the file to add version field (as well as repo - for mirrors).\n. would it be possible to customize the cache location?  It would be great if you could pass as a parameter an alternative locaion such as a different GOPATH where you already have the correct origin/version of the dependencies, so that they would not have to be fetched over networked.  For us it would greatly speed up the builds.\n. @mattfarina - did you have a chance to check this?  I'd love to use glide-report to check for the updates.. > i'll look at this soon. thanks.\n@mattfarina - wanted to follow up on this; would really like to have functional glide-report, would be very useful for us \ud83d\ude04 . lgtm. I'm not the repo admin - @mattfarina is.. ",
    "fschl": "We haven a similar issue using the latest dev version (master branch) of glide for public go packages.\nThe build system puts our private go dependencies inside the vendor directory. After that, glide is supposed to install the publicly available packages. At this point, glide is supposed to ignore our private packages.\nglide.yaml looks sth. like this:\npackage: gitlab.corp.com/org/package-to-build\nignore:\n  - gitlab.corp.com/org/repo1\n  - gitlab.corp.com/org/repo1/vendor\n  - gitlab.corp.com/org/repo2/\n  - gitlab.corp.com/org/repo2/subpackage\nWhen doing glide install public packages get installed correctly, and ignored packages are flagged as such:\n[INFO] Resolving imports\n[INFO] Ignoring: gitlab.corp.com/org/repo1\nBut after this message:\n[INFO] Downloading dependencies. Please wait...\nit still tries to update the ignored packages:\n[ERROR] Update failed for gitlab.corp.com/org/repo1: Cannot detect VCS\n[WARN] Unable to checkout gitlab.corp.com/org/repo1\nwhich results in a failing build.\nI am currently looking into that.\nEDIT: If I understand https://github.com/Masterminds/glide/issues/157#issuecomment-162760465 correctly, lines like\n```\n  - gitlab.corp.com/org/repo1/vendor\n  - gitlab.corp.com/org/repo2/subpackage\n```\nshould not be needed in glide.yaml if the whole package is ignored.\n. @mattfarina You should rather ask @dmitris if he still has problems.\nMy issue was fixed, when you merged my PR #305  ;-) \n. ",
    "kshlm": "@mattfarina Looking forward to the fix. Thank you.\n. Should I rather just use the following,\nyaml\n- package: github.com/coreos/etcd/client\n  version: v2.2.2\n. @mattfarina I just wanted to confirm what the expected behaviour of subpackages is.\nI think we agree that using subpackages should cause only the dependencies of the subpackages should be vendored.\nThis is not how glide works currently, but is something that is being aimed at in a later release. Can we convert this issue to an enhancement request then?\n. I changed the title of the issue to make it more relevant to the enhancement request.\n. Lockfile generation was disable for non-recursive vendoring as a fix for #165. But lockfile are useful for pinning packages as the glide pin command has been removed now.\n@mattfarina What do you think?\n. As I'd mentioned in #165, I do not want to pull in the huge dependencies for things I don't use. The only way to do it till #166 is done is to use --no-recursive and manually add the required dependencies to glide.yaml. Without the lock file I would need  to manually pin in glide.yaml, so the glide up installs the correct versions. I'm okay with manually pinning packages with versions in glide.yaml, but do not want to add commit-hashes manually. glide pin helped with this earlier.\n. My main reason for getting this to work is to avoid downloading ~100 dependencies several of which are large, when I know my build works just fine with ~11. Having the smaller set of dependencies is a huge speed up for me.\n. @technosophos Could you take a look please? Thank you.\n. @technosophos With glide-0.9, I don't require this. But I still think, having lockfiles for non-recursive vendoring is useful, when trying to get reproducible builds.\n. ",
    "GeertJohan": "Glide /could/ use the set of subpackages to only recursively vendor dependencies of the mentioned subpackages, instead of recursively vendoring the imports for all subfolders. See #165 for reasons why.\n. > When you use go get or the other tools that fetch dependencies they do so at the repo level. They have to get everything. Try cloning a subdirectory from a git repo on GitHub. It doesn't work that way. So, have to fetch everything from a repo.\nWhen you go get a package named A, only A's dependencies are retrieved. go get doesn't search through all the folders in the the repository where package A resides to get dependencies for those subfolders. So yes we should clone the whole repo, but only the dependencies for the actually used packages should be retrieved recursively.\nI agree with @kshlm that this issue could be labeled as enhancement request. Or maybe even bugfix.\n. ",
    "aboukirev": "My projects use context, http2, and websocket subpackages from the golang.org/x/net.  Those do not require any further dependencies (project builds fine).  However, glide starts pull all dependencies for the entire golang.org/x/net, which results into dozens of unused packages in vendor folder.  If anything, I preferred the original glide where I would add all necessary packages to vendor manually with glide get.  Now that command triggers recursion regardless.\n. Same here.  My go env is (using MSYS2 on Windows x64 in C:\\local):\nset GOARCH=amd64                                   \nset GOBIN=                                         \nset GOEXE=.exe                                     \nset GOHOSTARCH=amd64                               \nset GOHOSTOS=windows                               \nset GOOS=windows                                   \nset GOPATH=D:\\Go                                   \nset GORACE=                                        \nset GOROOT=C:\\local\\go                             \nset GOTOOLDIR=C:\\local\\go\\pkg\\tool\\windows_amd64   \nset GO15VENDOREXPERIMENT=1                         \nset CC=gcc                                         \nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0   \nset CXX=g++                                        \nset CGO_ENABLED=1\nMy project is under D:\\Go\\src as is proper, i.e. in GOPATH.\nWhat I noticed is that combining paths glide produces a mix of forward and back slashes and I know some other instances where it causes a lot of problems.  Look at the [DEBUG] Looking in ... in the log from original poster.  My guess is that same applies when glide is checking the built-in packages and results into failure to locate those.\nPerhaps, use http.Dir(path) to convert to native path separators.  This appears to work for serving static files in Echo framework, for instance.\n. Somewhat better (see below) but I am getting output like this\n[WARN] Directory is missing: D:\\Go\\src\\example.com\\vendor\\bytes[INFO] Scanning fmt for dependencies.  \n[WARN] Directory is missing: D:\\Go\\src\\example.com\\vendor\\fmt[INFO] Scanning fmt for dependencies.\nIn the output above all path separators are correct but it looks for packages in a wrong location.  Notice also that there is no line break after warning message..\nI am going to try and troubleshoot it tomorrow.\n. Found it.  Lines 215 and 226 in tree.go split GOPATH and GOROOT by ':'.  In Windows colon is used to separate drive from the rest of the path.  The separator of paths is ';' semicolon.   Not sure how exactly to fix it though.  I think the symbol should be ListSeparator constant from the path/filepath package.  In fact, I am having success with code like:\nfor _, r := range filepath.SplitList(b.GOPATH) {\n. It works overall but I have a different issue that is MSYS2 specific, nothing to do with glide.  Some MSYS2 applications/scripts do not like Windows paths (it's a slow process of fixing all such instances) and git is having trouble with chdir to a Windows path.  Never mind that though, I'll see what I can do in MSYS2 to resolve it. \n. Dave, that's exactly what I'm getting and I believe it's MSYS2 (it expects *nix paths).  Is that what you use for git?  I had troubles with MSYS2 git when building atom editor plugins and and early versions of Rust.\nI can see that glide uses its own package to wrap calls to VCS cli.  I wonder if golang built-in tooling from go get could be used instead.\n. ",
    "hectorj": "\nI welcome a pull request to add this in (with an opt-in feature flag initially)\n\nJust a detail, but how would you name this flag?\nAnd another question concerning this case: https://github.com/Masterminds/glide/issues/166#issuecomment-164425722\nShould the new feature also kick-in in that case, or only if subpackages are explicitely listed?\n. The merged fix is actually from @technosophos : #240 \nBut yeah, this is fixed.\n. https://github.com/Masterminds/glide/issues/166#issuecomment-164742093\n\nIt would change the way scanning works if we encounter projects from Godeps, GPM, and GB which glide can import from.\n\nThe choice made here is to only apply this new logic only if no Godeps, GPM nor GB file is found (so only for mergeGuess)\nI tested it on one of our internal project, and it seems to work well, reducing the number of dependencies by ~ 1/3 in our case which is nice.\n. Noted, I 'll try to redo my work on top of that branch, thanks.\nOn Thu, Jan 21, 2016, 21:49 Matt Farina notifications@github.com wrote:\n\nSometime soon, likely next Monday so I can be around to fix bugs as they\narise, we're going to merge in the feat/no-cookoo branch. This is a\nmassive internal reworking of Glide to make it easier to maintain and work\non. There was a lot of left over cruft in the codebase from the past.\nUnfortunately, that will completely invalidate this pull request. The cmd\ndirectory won't even exist anymore.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/220#issuecomment-173593594.\n. Ok, I managed to do the same thing on the new master branch.\n\nStill gotta add the flag to make it optional\n. Ok, can you do a first review and tell me what you think of it?\n. Haven't tested yet, but that sounds great and way better than this PR\nOn Thu, Feb 4, 2016, 22:59 Matt Farina notifications@github.com wrote:\n\n@hectorj https://github.com/hectorj @fabian-z\nhttps://github.com/fabian-z On the pull request at #240\nhttps://github.com/Masterminds/glide/pull/240 we have a walker capable\nof just walking the imports rather than the whole file tree. One advantage\nis that it only walks what's used rather than walking everything and\nfiltering down to what's used.\nAny thoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/220#issuecomment-179915661.\n. I wasn't sure if it was a bug in the old version or the new one, thanks for the investigation. It should indeed be fixed when issue #166 is resolved.\n\nTemporary fix in case someone has the exact same issue : add \nyaml\nignore:\n- google.golang.org/api\nto your glide.yaml\nClosing.\n. I'd totally understand if this is judged out-of-scope, in which case I'll see about developing a complementary tool or just forking this one.\n\nyour project and the binary you want to install have to agree on a version\n\nI do not see a use-case where I would want a binary and a library from a same repo but at different versions.\nAs I said, my use-case is mostly for code generators, and it is usually important to use the same version of the lib and the generator.\nRight now I am using glide to vendor the repo, and a Makefile to install the bin from vendor.\nNow that I think about it, I could indeed make a simple separate tool to install a list of binaries from the vendor dir...\nThe only issue I would have left is that Glide does not seem to pick-up packages imported in main packages (which totally makes sense if you don't plan on installing the binary)\n. Other example which behaves like tinylib/msgp: https://github.com/mailru/easyjson\n. I just saw the warning saying the command is deprecated... Closing, feel free to re-open if you think it is worth fixing.\n. ",
    "Tinche": "I think I'm running into the same issue, using Go 1.6 on both Ubuntu and OS X. Glide gets my deps into $GOPATH/vendor, but go build never even looks there. go env always shows GO15VENDOREXPERIMENT=\"1\".\n. I agree this is probably either a problem in Go itself or just me doing something fundamentally wrong (which is an option since I'm not that knowledgeable about Go's packaging). Glide seems to be doing its job as it's supposed to (getting stuff into /vendor), it's just go build that's failing. I commented here since I saw another person having a similar issue. :) As far as I'm concerned this issue, here, can be closed.\nI do feel kinda dumb for not getting this to work, though. By now I've tried using Go 1.6 in three ways: installed from the lxd-stable PPA on an Ubuntu server machine, installed using Ubuntu Make on my desktop and installed through brew on my work Mac. No installation has mentioned looking inside vendor/ upon go build failure (the vendor directory exists and there are packages inside, just like there'd be in src/ if I just go get-ted them). go env always reports GO15VENDOREXPERIMENT=\"1\", and setting it manually to 1 doesn't actually change anything.\nHere's a hello world project I put together for testing: https://gist.github.com/Tinche/5919cf9a3741db5a4778. GOPATH is set to . (not actually \".\" since they can't be relative, the absolute path).\n$ go build src/tin/hello.go \nsrc/tin/hello.go:4:8: cannot find package \"github.com/codegangsta/cli\" in any of:\n    /home/tin/.local/share/umake/go/go-lang/src/github.com/codegangsta/cli (from $GOROOT)\n    /home/tin/pg/golang-helloworld/src/github.com/codegangsta/cli (from $GOPATH)\nAny ideas? \u00af(\u30c4)/\u00af\n. @mattfarina Thank you for helping :)\nMy GOPATH is /home/tin/pg/golang-helloworld - that's the root directory of the gist I linked (https://gist.github.com/Tinche/5919cf9a3741db5a4778). So I do have a src/ directory directly under my GOPATH. My code is in GOPATH/src/tin/. vendor/ is also directly under the GOPATH. Is this wrong?\nIf I use go get, the third party library gets installed in GOPATH/src, and the build works. If I use Glide, the third party library gets installed in GOPATH/vendor, and the build doesn't work.\n. Yeah, that works, thanks. We'll reorganize a little.\nJust out of curiosity, how does Glide determine where to put the vendor/ directory? Current working directory, right next to glide.yaml/lock, or another way?\n. ",
    "seufagner": "I setup up my project under GOPATH but happens the same that @Tinche described above. When I install dependencies from go get it works, but go compiler don't see vendor directory\ngo version\n\ngo version go1.8.1 darwin/amd64\n\ngo env\nshell\nOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/fagner/Development/somoseducacao/golang\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.8.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.8.1/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pp/jwfb_mpn1hl_q3qxy2zp9r9c0000gp/T/go-build544545838=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nPKG_CONFIG=\"pkg-config\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\". ",
    "gcperrin": "@seufagner I'm having the exact same issue on my environment...OSX + homebrew.. ",
    "xeger": "Thank you; a devImports plus an opt-in --dev flag would fit the bill quite nicely. I stand ready to test -- I'd offer to help implement but it sounds like you're moving quickly and I'm not up to speed on your project yet, so I'll be a guinea pig instead.\n. I'd really appreciate this feature too! I don't think glide needs to grok a subpackages stanza as currently represented in glide.yaml, but it's crucial to me that I be able to install a binary from vendored source. Otherwise, Glide cannot version packages that contain a code-generator tool!\nLet me provide a workaround for the people with this issue, plus illustrate the situation I'm talking about. My app uses the goa HTTP framework which includes a code-generating tool, goagen. I use make with my go project, which enables me to do this:\n$(GOPATH)/bin/goagen: $(shell find vendor/github.com/goadesign/goa/goagen -name \\*.go)\n        cd vendor/github.com/goadesign/goa/goagen && \\\n        go get `glide list 2> /dev/null | grep -A100 MISSING | grep -v MISSING | awk '{$$1=$$1};1'` && \\\n        go build -o $(GOPATH)/bin/goagen\nThis helps ensure that goagen will generate code that targets the vendored goa that my app uses. However, it feels like Glide could make this substantially easier on me.\nIf glide could detect which of my packages/subpackages contained a main, track their dependencies, and build binaries on request, that would be superb!\nI rather suspect that @mattfarina and @technosophos feel this to be mission creep, but for the code-gen case it's really necessary. As my workaround shows, it's not mission creep for glide; the fundamentals are already built into the tool. I'm happy to work on a PR if I've got buy-in on the idea.\n. The problem with go install is that I can't version a code-gen tool binary (goagen) alongside a vendored library dependency (goa). Makes things a bit difficult to work with. Is there a best practice for this + glide?\n. @mattfarina I left a comment on #430 about the future of subpackages; I understand that their original purpose has fallen by the wayside, but there's an itch that's left unscratched, relating to versioning the binaries that one go installs by hand, and their dependencies on vendored source... Not sure that it's glide's place to scratch this itch but I was hoping to hear your perspective.\n. ",
    "pspeter3": "Is there an open issue that is tracking this development?\n. ",
    "thinkong": "Has there been any update on this?\nI am getting a hard time updating.\nI only have 9 vendored in my glide.yaml file and it is taking too long when doing an glide update/install\nI keep thinking that it may be stuck on \"scanning\"\n. @mattfarina \n\u03bb glide --version\nglide version dev\nI am on windows atm\nhere is the debug stuff\n\u03bb glide --debug up\n[INFO] Fetching updates for myproj.\nmyproj@192.168.0.10's password:\nmyproj@192.168.0.10's password:\n[INFO] Fetching updates for github.com/tealeg/xlsx.\n[INFO] Fetching updates for github.com/satori/go.uuid.\n[INFO] Fetching updates for github.com/mattn/anko.\n[INFO] Fetching updates for github.com/daviddengcn/go-colortext.\n[INFO] Fetching updates for github.com/elgs/gostrgen.\n[INFO] Fetching updates for github.com/mitchellh/mapstructure.\n[INFO] Fetching updates for github.com/dancannon/gorethink.\n[INFO] Fetching updates for github.com/gin-gonic/gin.\n[INFO] Fetching updates for github.com/julienschmidt/httprouter.\n[DEBUG] ---> Inspecting d:\\myproj\\src\\main\\vendor for changes (10 packages).\n[DEBUG] ----> Scanning myproj\n[DEBUG] Looking in d:\\myproj\\src\\main\\vendor/myproj/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in d:\\myproj\\src\\main\\vendor/myproj/vendor/ for a manifest file.\n[INFO] Scanning myproj for dependencies.\n[DEBUG] => Scanning encoding/json\n. I just used go get github.com/Mastermind/glide\nI also tested with the binaries given here but got the same result. Ill have to try this again after the holidays. \nMerry christmas\n. well sorry for the late reply. \nI don't exactly get what you mean by \"tip of master\" but i just did a git pull and then another go install github.com/Masterminds/glide but same thing happens..\nI use windows 7 64bit and go 1.5.1 \n. I just created a seperate issue.. due to my issue being a windows only issue\nhttps://github.com/Masterminds/glide/issues/194\n. go env \nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=D:\\gopath\nset GORACE=\nset GOROOT=C:\\Go\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=1\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nbranch issue/194 seems to give the same result \nglide version is \nglide --version\nglide version 0.8.2-9-gf437844\nstill getting stuck at encoding/json\n. well.. the latest issue/194 it does look like it is the problem with msys..\nusing windows shell(cmd.exe) to do a glide up seems to work (kinda.. windows doesn't have ssh.. so i can't download via ssh)\ni use cmder(which uses conemu and msysgit) to do most of my shell stuff.. and it seems that is causing problems\n. latest pull confirmed working :+1: \n. seems to be a similar issue that I added https://github.com/Masterminds/glide/issues/202 \n. actually the problem I was having wasn't occuring when i was using msys2. \nWhen i do use msys2 it was asking for my password.. which i think is the proper behaviour.. but on windows console.. it never asks for my password. I'll have to try this when i get back to work tomorrow. \n. hmm.. uncommenting what the lines you mentioned shows no additional insight.. \ngit works properly because the other go packages featured on github using https works.\nits just the ones that use ssh with a public key that seems to have problems with me\n. hmm... I checked my environment.. and it seems like it had different versions of git.\nusing the git from msysgit works.. but the one installed from git for windows doesn't seem to work :(\nkinda weird...\nusing git for windows by it self seems to work correctly though\n. I just updated to a newer version of git-for-windows and it seems to work now.. i THINK the problem could have been the ssh client that I had installed when installing the previous version.. but i can't recall   what I installed exactly. I think it was the ssh using putty. this time I installed openssh.. and that could be the temporary fix for this case\n@jrick  you should try to install the latest version too\nedit : it seems I have spoken too soon.. using gitbash supplied with git for windows worked.. but something happened when i use cmd.exe. \n. ",
    "tamird": "I think having a bin directory inside of vendor is the way to go; it's going to require that users add ./vendor/bin to their PATH, but it's the path of least friction and the only reasonable way to proceed\n. I thought the go tool was only aware of vendor/ to the extent that it will look for imports in there, but never writes anything into that directory. What's the harm, then, in adding vendor/bin?\nI suppose there is a slight danger of conflict with a package that has an import path starting with bin/, but that seems unlikely, and can be alleviated with the use of a different top-level directory (after appropriate bikeshedding).\n. @mattfarina by the way, the readme says that glide installs dependencies with go install, but that doesn't seem to be the case - at least not for subpackages. If glide install would go install each subpackage, that would adequately resolve this issue for me.\n. $ glide --version\nglide version 0.8.2\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/tamird/src/go\"\nGORACE=\"\"\nGOROOT=\"/Users/tamird/src/go1.5\"\nGOTOOLDIR=\"/Users/tamird/src/go1.5/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n$ uname -a\nDarwin Tamirs-MacBook-Pro.local 15.2.0 Darwin Kernel Version 15.2.0: Fri Nov 13 19:56:56 PST 2015; root:xnu-3248.20.55~2/RELEASE_X86_64 x86_64\n. Yep, seems fixed on master.\n. ",
    "pyros2097": "What about having a scripts declaration like npm and then do a glide run errcheck and I suppose it would look like this\nyaml\npackage: github.com/Masterminds/glide\nscripts:\n- name: \"errcheck\" \n  cmd: \"go run vendor/github.com/kisielk/errcheck/main.go\"\nThen you wouldn't need a bin directory and don't need to use makefiles but of course it would be slow running those commands since they need to be compiled and its a bit verbose.\nEven if its not used for this use case I think some scripting functionality is necessary for glide and this would be cross platform.\nHulk Smash! :hurtrealbad:\n. Just go run main.go maybe its an issue with the go compiler I guess it doesn't compile cgo based libraries in vendor packages and put them in this folder pkg/linux_amd64 and I think it might be recompiling them everytime just running the sqlite example takes a minute if its vendored.\n. Yeah I sorted this one out by manually doing a go install but I thought go run should do this but I guess its not meant to work that way.\n. ",
    "favadi": "So --update-vendored is causing the problem here.\nIn build 7, I stop deleting .git directory in '/vendor' but keep go get with --update-vendored and it still failed with same error.\nIn build 8, I remove --update-vendored and it passed.\n. I copy the wrong link, acutally I tested with 0.8.2: \nhttps://github.com/favadi/glide-get-error/blob/test/.travis.yml.\nYou can see the build log, I will try with master branch.\nOn December 24, 2015 7:34:53 PM Matt Farina notifications@github.com wrote:\n\nYour script is using \n0.8.1. \nThere was a but in 0.8.1 when doing glide get --update-vendored that we \nfixed for 0.8.2.\nCan you test this with 0.8.2? I tried with the tip of master and can't \nreproduce the problem.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Masterminds/glide/issues/189#issuecomment-167104860\n. Somehow I grep the wrong directory, this bug is invalid. Sorry for the noise.\n. \n",
    "flawedmatrix": "I have the same problem on OS X (10.10.4).\nbash\n$ go version\ngo version go1.5.2 darwin/amd64\n$ brew install glide\n...\n$ glide --version\nglide version 0.8.1\n$ mkdir test_workspace\n$ cd test_workspace/\n$ export GOPATH=$PWD\n$ export PATH=$GOPATH/bin:$PATH\n$ export GO15VENDOREXPERIMENT=1\n$ glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n$ glide get github.com/aws/aws-sdk-go\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/aws/aws-sdk-go\n[INFO] Walking the dependency tree to calculate versions\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/client/metadata)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/client)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/ec2metadata)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/client)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/sts)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/corehandlers)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/ec2metadata)\n....\n. @technosophos Yes, it was looping for what seems to be forever.\n@mattfarina I installed Glide via homebrew and it seems to install Glide 0.8.1 correctly.\n. ",
    "markwaddle": "i have the problem in Windows 10 Pro (10.0.10586). Binary download; amd64. It hangs on the final line and appears to be in a loop because it consumes a CPU core.\n```\n\nver\nMicrosoft Windows [Version 10.0.10586]\nglide --version\nglide version 0.8.1\nmkdir test_workspace\ncd test_workspace\n\ntest_workspace>set GOPATH=%cd%\ntest_workspace>set GO15VENDOREXPERIMENT=1\ntest_workspace>glide init\n[INFO] Generating a YAML configuration file and guessing the dependencies[INFO] Attempting to import from other package managers (use --skip-import to skip)\ntest_workspace>glide --debug get github.com/aws/aws-sdk-go\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/aws/aws-sdk-go\n[INFO] Walking the dependency tree to calculate versions[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[DEBUG] Attempting to find current branch for https://github.com/aws/aws-sdk-go\n[DEBUG] Saving default branch for https://github.com/aws/aws-sdk-go\n[DEBUG] ---> Inspecting C:\\Users\\MarkW\\test_workspace1\\vendor for changes (1 packages).\n[DEBUG] ----> Scanning github.com/aws/aws-sdk-go\n[DEBUG] Looking in C:\\Users\\MarkW\\test_workspace1\\vendor/github.com/aws/aws-sdk-go/Godeps/ for a Godeps.json file.\n[DEBUG] Looking in C:\\Users\\MarkW\\test_workspace1\\vendor/github.com/aws/aws-sdk-go/vendor/ for a manifest file.\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[DEBUG] => Scanning github.com/aws/aws-sdk-go/aws/awserr\n[DEBUG] => Scanning github.com/aws/aws-sdk-go/aws/credentials\n[DEBUG] => Scanning io\n```\n. ",
    "rxwen": "I met a similar issue too. I'm using go v1.5.2, glide hash f8f06478 (I installed it with go get), windows 7.\nYou may try to run glide install for this repo: https://github.com/rxwen/livelyweb-firmware.\nOn my windows box, the glide install command hung in  \"[INFO] Scanning github.com/gorilla/mux for dependencies.\". And from task manager, it showed glide was consuming cpu. After check with procmon, it seems glide is stucked in a loop visiting c:\\vendor\\bytes file.\nI also checked the vendor dir in my repo, the mux repo has been pulled. But its dependencies can't be pulled.\n. ",
    "andrewzeneski": "I'm running into this exact issue on OS X 10.11.3 with Glide 0.8.3, Go 1.5.3 and Git 2.7.0. All were  installed from Homebrew. The Gopath is valid; no errors or warnings from Glide. I'd love to get this to work, any ideas?\n``` bash\n$ mkdir example\n$ cd example/\n$ export GOPATH=$PWD\n$ env\nGO15VENDOREXPERIMENT=1\nOLDPWD=/Users/Shared\nPATH=/usr/local/bin:/usr/bin:/bin\nPWD=/Users/Shared/example\nPS1=$ \nSHLVL=1\nGOROOT=/usr/local/opt/go/libexec\nGOPATH=/Users/Shared/example\n_=/usr/bin/env\n$ go version\ngo version go1.5.3 darwin/amd64\n$ git version\ngit version 2.7.0\n$ glide -version\nglide version 0.8.3\n$ mkdir -p bin pkg src/hello vendor\n$ cat << EOF > src/hello/main.go\n\npackage main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello world\")\n}\nEOF\n\n$ go install hello\n$ tree\n.\n|-- bin\n|   -- hello\n|-- pkg\n|-- src\n|-- hello\n|       -- main.go-- vendor\n5 directories, 2 files\n$ glide init\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n$ glide get github.com/aws/aws-sdk-go \n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/aws/aws-sdk-go\n[INFO] Walking the dependency tree to calculate versions\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Fetching updates for github.com/stretchr/testify.\n[INFO] Fetching updates for github.com/lsegal/gucumber.\n[INFO] Fetching updates for github.com/jmespath/go-jmespath.\n[INFO] Fetching updates for github.com/go-ini/ini.\n[INFO] Fetching updates for golang.org/x/tools.\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/awserr)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/credentials)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws)\n...\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/private/signer/v4)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/aws/request)\n[INFO] ==> Unknown github.com/aws/aws-sdk-go (github.com/aws/aws-sdk-go/service/workspaces)\n[INFO] Scanning github.com/aws/aws-sdk-go for dependencies.\n(continues looping)\n```\n. Just wanted to followup, this may be related to dependencies. I have successfully been able to install packages without dependencies and those with dependencies but which also use glide.\nWorking examples\ngithub.com/Masterminds/sprig\ngithub.com/gmallard/stompngo\ngithub.com/bitly/go-simplejson\ngithub.com/cihub/seelog\nProblem Examples\ngit.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.golang.git\ngithub.com/aws/aws-sdk-go\ngithub.com/golang/protobuf\ngopkg.in/redis.v3 \nAll of these continue to loop scanning dependencies.\n. Turns out \"vendor\" is supposed to be in src/hello rather than in GOPATH directly. This was my misunderstanding. This is working for me now perfectly.\n. This resolves #175 for me.\n. Turns out I didn't fully understand where the \"vendor\" directory was supposed to go. This pull request turns out to be moot. Please disregard.\n. ",
    "jurgen-kluft": "Hello Matt and thanks for the explanation.\nI am aware that other languages have very good package managers, C++ however not so much. Therefor i was quite jealous of Go and Rust to so easily be able to import packages directly from BitBucket, Github or other places. \nI have integrated and tested both Glide (Go) and Cargo (Rust) to provide the service to pull in the dependency packages which saves me time to develop this myself and this works very well.\nThe additional scripts that i have depend on a pom like project descriptor that lists the dependencies, i then save out the glide.yaml for Glide which then installs or updates them. So i only use this part of Glide (or Cargo). Perhaps in the future i might look into integrating the C++ scanning into a fork of Glide.\nThanks\n. ",
    "jeffellin": "This is very helpful.  Do you know what happens when you specify a version in the glide.yaml?  Will the version be checked when using the --use-gopath flag?\n. Then it explicitly sets the version\nAre you referring to what is set int he lock file?\n. Thanks a lot for the information, it has been very helpful.  Is this in the docs somewhere and I missed it?\n. ",
    "vpbarb": "I don't make changes in glide.yaml between glide up and glide install. glide up successfully makes glide.lock and puts hash in it, as you said. If I make one more glide up, only updated field is changed, hash is still the same. Anyway, glide install continues to return error.\nUnfortunately, I can't share glide.yaml with you, because there is a lot of private repos in it.\nI will try to build glide binary file from source instead of using homebrew build and report about results.\n. The same result is with Glide 0.8.2 builded from the source.\n. I've tried out and hashes are different:\n[WARN] Lockfile hash: 2d75bf86c2d24e3bbf1da70e1a286d23bfa06ee4f8bb17b9d37f75548a83ac18\n[WARN] glide.yaml generated hash: 36a281dd849ec9142b380a3199a5d9f04a6d5cad45c918d1d13c976acc661133\nI repeated glide up and glide install many times and these hash values were the same every time.\nAs I understand, hash of glide.yaml is calculated not from file content, but from struct Config decoded from YAML. Maybe Config is changing while glide up is working and these changes affect hash that is put to glide.lock finally. glide install open the file, decodes it to Config and reveals that the hash is different.\n. Cool! I think, the problem is revealed.\nThe difference between two states of yaml is in version ranges of some packages. I have this in glide.yaml:\n- package: bitbucket.org/lazadaweb/go-trace\n  version: ~1.0\n- package: bitbucket.org/lazadaweb/go-logger\n  version: ~1.0\nbut Glide is transforming it to following code while resolving version with other packages which use these same packages:\n- package: bitbucket.org/lazadaweb/go-trace\n  version: ~1.0, ~1.x\n- package: bitbucket.org/lazadaweb/go-logger\n  version: ~1.0, ~1.x, ~1.x, ~1.x\nSo glide install takes hash from first original version, whilst glide up calculates hash from the second version and puts it to glide.lock.\nAnd of course, if I do glide get <some_package> file glide.yaml is automatically rewrited and I get the second version again. \n. Thank you for fix! I will check it as soon as possible and let you know\nabout results.\n\u0441\u0440\u0435\u0434\u0430, 23 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2015 \u0433. \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Matt Farina \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\n@Barberrrry https://github.com/Barberrrry I created the branch\nissue/185-fix (in pull request #187\nhttps://github.com/Masterminds/glide/pull/187). Can you test this and\nsee if it fixes your problem?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/185#issuecomment-166946922.\n\n\n\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c,\n\u041f\u0435\u0442\u0440\u043e\u0432 \u0412\u0430\u0434\u0438\u043c\nvadim.petrov@gmail.com\n. With issue/185-fix everything is alright, thank you! Which version would include this fix?\n. ",
    "atinmu": "@mattfarina : its the dev version\nAlso when I try to to pull the latest using go get -u I get the following error:\namukherj@atinmu:~/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com$ go get -u github.com/Masterminds/glide\ngo install github.com/Masterminds/glide/gb: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/Masterminds/glide/gb.a: permission denied\ngo install github.com/Masterminds/cookoo/io: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/Masterminds/cookoo/io.a: permission denied\ngo install github.com/Masterminds/glide/msg: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/Masterminds/glide/msg.a: permission denied\ngo install github.com/Masterminds/semver: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/Masterminds/semver.a: permission denied\ngo install github.com/Masterminds/vcs: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/Masterminds/vcs.a: permission denied\ngo install github.com/codegangsta/cli: open /home/amukherj/codebase/PoCs/go_workdir/pkg/linux_amd64/github.com/codegangsta/cli.a: permission denied\n. @mattfarina I am on Fedora23\n. @mattfarina : The problem went away when I deleted ..../pkg/bin/..../Masterminds/glide\nThanks for your help\n. ",
    "sergei-svistunov": "I think Glide can be smarter:\nMake dependences flat if it's possible. If there is a conflict then add vendor folder to dependency. \n. ",
    "ccll": "@sergei-svistunov I've running into the same issue, but unfortunately, as @mattfarina said, although the source code can be placed into separate vendor directory, you still need separated $GOPATH to store compiled binaries, which seems complicated/impossible for now.\n. ",
    "bjorn-tf": "@mattfarina Thank you for fast response. I think that i found a problem - detectVcsFromRemote function:\n- always tries to use https - but we are using http\n- has no option to skip self-signed cert error\nI think, that \"insecure\" flag can help here.\n. @mattfarina As far as i can see glide install know nothing about insecure flag, it just prints help message.\nYes, it will be great to have ability to work with http and self-signed certs on https.\n. glide install --insecure do nothing, just show help message\n. I've tried glide --insecure get gorep.ourcopmany.net/package:\n[WARN] Package \"gorep.ourcompany.net/package\" is already in glide.yaml. Skipping\nOf course i can add proper repo for package to glide.yaml by hands, but it will not help, because package relies on other packages(located in other private repos) and glide will fail during install phase.\nI suggest to add support of --insecure flag to glide install and glide update commands.\n. ",
    "charneykaye": "In my case also, we require an --insecure flag because we are using a private repository behind a firewall, that only offers HTTP and not HTTPS.\n. +1 .. As of this morning, I'm experiencing the same failure.\n. Same thing happening to us here. Every time we add deps via glide get or do a glide update these dependencies that ought to be ignored keep being re-added to the glide.lock file under testImports only. Thanks!\n. :shipit:\n. ",
    "iJanki": "I would really need this too.. ",
    "melkus": "I have this problem on windows 7. What branch should I use to get it resolved?\n. ",
    "emilevauge": "This would be very useful because recursive vendoring could be unusable in some cases: in http://github.com/EmileVauge/traefik, glide is downloading more than 600 Mo in vendor/ :'(\n. I fixed it using repo: https://github.com/containous/oxy.git instead of repo: git@github.com:containous/oxy.git:\n- package: github.com/vulcand/oxy\n  vcs: git\n  repo: https://github.com/containous/oxy.git\n  version: 1ca0a134a818f7b8ea85de6e6554fe3312f144c2\nThe issue is that it was working perfectly on my laptop, but not in a docker container. Indeed, glide was trying to clone the github.com/containous/oxy repo using SSH without any credentials.\n1. The error given by glide was Unable to get repository. I think there is room for more details here :smile:.\n2. I got this example in the documentation https://glide.readthedocs.io/en/latest/glide.yaml/:\n- package: github.com/Masterminds/vcs\n  version: ^1.2.0\n  repo:    git@github.com:Masterminds/vcs\n  vcs:     git\nIt would be better to use https instead of ssh in this example because the majority of us will use glide to build a project on jenkins/travis/circle, and will get stuck on the cryptic error message Unable to get repository.\nWDYT?\n. @franciscocpg that's what I was pointing in my previous comment https://github.com/Masterminds/glide/issues/476#issuecomment-226936940. Errors in glide should definitely be more explicit, because when you only get a Unable to get repository, you can't really guess what's wrong. I think it would be better to wrap errors using fmt.Errorf that would keep the original error. I don't get why there is a need to \"hide\" originals errors behind a generic one. WDYT?\n. ",
    "gm42": "\nNote, I've backed off exiting if the hash doesn't match. Instead there is a warning for now.\n\n@mattfarina that makes the hash much less useful. As of now, there is no way to verify (via CLI exit code) that you are using what you are supposed to be using.\nI created #484 to outline this problem.\n. @mattfarina yes I can follow up with a PR, but not earlier than +12h from now.\nI will add it as an option --verify-hash, is that OK?\n. @bkleef I did some work, then stopped halfway. I think now it should be picked again from scratch due to code changes in master. ",
    "ecbaldwin": "I'm pretty new to glide. My problem with the hash is that it (and the updated field written on the next line) are merge conflict generators. Let's say I create one commit to update one library and another commit to update another. In most cases, these two commits could easily be merged together and I can test the result. As it is, the hash and updated fields always end up in a merge conflict and the only way I know to resolve it is to rerun glide to regenerate them. This is painful. I don't see these fields as beneficial. I'd recommend revisiting the idea to remove them.. ",
    "douglaswth": "I'm running into this issue trying to run Glide under Cygwin.\n. I am seeing it with 0.8.3 and I also tried 0.9.0-rc1 with the same problem.\n. ",
    "Trane9991": "Hello, \nI'm trying to run automated build on Azure WebService and I'm getting error:\n[INFO]  --> Fetching golang.org/x/net.\n[INFO]  --> Fetching golang.org/x/sys.\n[INFO]  --> Fetching gopkg.in/yaml.v2.\n[WARN]  Unable to checkout github.com/gorilla/context\n[ERROR] Update failed for github.com/gorilla/context: Unable to get repository\n[WARN]  Unable to checkout github.com/hashicorp/go-cleanhttp\n[ERROR] Update failed for github.com/hashicorp/go-cleanhttp: Unable to get repository\n[WARN]  Unable to checkout github.com/fsouza/go-dockerclient\n[ERROR] Update failed for github.com/fsouza/go-dockerclient: Unable to get repository\n[ERROR] Failed to install: Unable to get repository\nUnable to get repository\nUnable to get repository\nthe previous build has an error:\n[WARN]  Unable to checkout github.com/Sirupsen/logrus\n[ERROR] Update failed for github.com/Sirupsen/logrus: Unable to get repository\n[ERROR] Failed to install: Unable to get repository\nnext time:\n[WARN]  Unable to checkout github.com/hashicorp/go-cleanhttp\n[ERROR] Update failed for github.com/hashicorp/go-cleanhttp: Unable to get repository\n[WARN]  Unable to checkout github.com/juju/ratelimit\n[ERROR] Update failed for github.com/juju/ratelimit: Unable to get repository\n[WARN]  Unable to checkout github.com/ugorji/go\n[ERROR] Update failed for github.com/ugorji/go: Unable to get repository\n[ERROR] Failed to install: Unable to get repository\neach time like 60-80% of dependencies are downloaded OK and rest of them are failing...\n. ",
    "termie": "this is marked a duplicate, but of what?\nI am running into this in a huge way, anything that tangentially mentions Docker pulls in 500MB of dependencies.\n. related,  i think coreos/go-systemd might mention docker somewhere (the two private repos don't) and I end up with 733MB worth of deps (was 132MB on glide 0.2) https://gist.github.com/termie/885e092351be6951a734 \n. @mattfarina i will happily write that for you do you have some pointers on where to start? spending 10 hours on this will save me 2 - 20 minutes 15 times a day\n. k, after spending a couple hours tracing code through the \"cookoo.Registry\" and get_imports.go, my conclusions (and heap of unsolicited advice, no offense meant just being direct with my opinionated observations) are: \n1. I can add a single line to my glide.yaml and turn off recursion altogether to end up with a 24MB vendor folder (vs 733MB) since there is only a single subdependency that needs to be pulled in (vs what seems like 100 that are attempted with recursion on)\n2. you're kind of bypassing the point of having a static type system by using your homerolled cookoo library, the compiler can't do anything at all to help you and you're expecting other devs to learn a whole new DSL to do the equiv of packages := options.Packages\n3. you've put almost all your code in the cmd subpackage, which kind of defeats the point of the subpackage since it doesn't really separate the code that defines commands and command structure from the code that is core to glide (updating things from vcs, looking for dependencies), and the command structure code is almost completely in the \"routes\" command (despite codegangsta/cli being included)\nthere is probably a situation where it is nice to recurse all these dependencies, but in every case for our existing projects doing a glide install --no-recursive followed by a go build listed the 1 or 2 deps that we needed to add to glide.yaml to have the project build. With that in mind, a glide freeze command seems useful to output what would be the contents of glide.lock based on what version of things i have in vendor (i feel like i saw such a command before but i can't find it anymore)\n. i guess the question to ask is, what does go build know that we don't when it tells us we are missing a dependency and how do we do that ourselves\n. @mattfarina cool, those all sound like good ideas :+1: I didn't get deep enough into how the build context was deciding on packages to know what needs to be done (I started by doing top level deps only, then when I tested to see how many were still being complained about and only saw 1 missing dep I shortcircuited my patch).\n. ",
    "dhanunjay": "I have tried glide get golang.org/x/net/http2 after glide up as mentioned above. But it did not pull http2. Can it be overwrite issue?\n. With the above workaround, i was able fix the build issue with go build. However i am facing another issue when compiled for google appengine. It might not be glide issue. Thanks for looking into it.\nAppengine compiler issue\n2016/01/07 10:51:59 go-app-builder: Failed parsing input: parser: bad import \"unsafe\" in vendor/github.com/siddontang/go/hack/hack.go\n. ",
    "bscott": "I still get this even while removing vendor directory. . ",
    "sparkLogic": "Yes, I still see this error even after rm -rf vendor. ",
    "JeanMertz": "Getting the same error, even after rm:\n[ERROR] Failed to set version on github.com/sirupsen/logrus to : The Remote does not match the VCS endpoint\n[ERROR] Failed to set references: The Remote does not match the VCS endpoint (Skip to cleanup)\nupdate rm -r ~/.glide did the trick \ud83d\udc4d . ",
    "Connor-McGuinness": "We had the same problem and solved it by modifying the glide.yaml to case-strict match the VCS endpoint (github.com/Sirupsen/logrus became github.com/sirupsen/logrus) then clearing the glide cache (glide cc).. ",
    "bkleef": "Or try something like this:\nsh\nglide cc; rm -rf ~/.glide; rm -rf vendor; rm glide.lock; glide install --force --strip-vendor. @gm42 did you ever implement --verify-hash? IMHO CI/CD should fail on failing hash check. To do so we need a flag like that.. ",
    "sjansen": "For the benefit of anyone brought here by Google...\nsolution: https://github.com/sirupsen/logrus/issues/553#issuecomment-306591437\nreason: https://github.com/sirupsen/logrus/issues/570#issuecomment-313933276. For the benefit of anyone brought here by Google...\nsolution: https://github.com/sirupsen/logrus/issues/553#issuecomment-306591437\nreason: https://github.com/sirupsen/logrus/issues/570#issuecomment-313933276. ",
    "ufukomer": "glide cc only \ud83d\udc4d. ",
    "james-lawrence": "+1 was coming to make a request for this feature myself.\n. @mattfarina make sure you are using the filepath.ListSeparator.\nI see its used https://github.com/Masterminds/glide/search?utf8=%E2%9C%93&q=ListSeparator\nbut not sure if its used everywhere its needed to.\n. no it wasn't the last line sorry but the fact a dependency can't be fetched should be an error.\n. great sorry, for the spurious issue. =)\n. try tip, I fixed one of those the other day.\nhttps://github.com/Masterminds/glide/pull/251/files\n. imo glide needs to actually support git (and other vcs) natively. this https crap causes too many issues.\n. going to investigate my env a little bit more. sorry, will get back to you this weekend.\n. seems like something was funky with my environment as well when I ran into this, it is no longer an issue for me. sorry I couldn't provide more details on the exact start that caused it.\n. just ran into this myself, seems extremely odd behaviour by default. kind of defeats the purpose of the lock to the version you originally fetched.\n. @mattfarina I understand why it does it, I disagree that it does it well enough to be worth doing automatically. since most of the time it seems to do the wrong thing.\nedit: especially with no option to disable it.\n. duplicate? https://github.com/Masterminds/glide/issues/328\n. debug flag surfaced the issue:\n[DEBUG] Output was: Cloning into '/home/jatone/.glide/cache/src/https-gopkg.in-yaml.v2'...\nerror: RPC failed; HTTP 301 curl 22 The requested URL returned error: 301\nfatal: The remote end hung up unexpectedly[DEBUG]   Unlocking https-gopkg.in-yaml.v2\n. I was able to fix it by setting: git config --global http.followRedirects true.. mux was just an example basically all my packages updated. there was no reason for the update. I was removing a package. not adding new ones. The state shouldn't have changed except to remove pre-existing packages that were no longer needed.. check using --debug flag.. correct me if i'm wrong but git uses ssh by default?\nwouldn't you want git@my.host.com:1234/path/repo.git. sorry just noticed: you're commands are attemting to fetch --debug. You're not actually seeing the debug output.\nrun glide get --debug git@my.host.com:1234/path/repo.git. what version of glide are you using?. my bad, glide --debug get git@my.host.com:1234/path/repo.git\nglide --debug get git@github.com:jackc/pgx.git\n[DEBUG] No mirrors.yaml file exists\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package git@github.com:jackc/pgx.git\n[INFO]  --> Gathering release information for git@github.com:jackc/pgx.git\n[DEBUG] Setting up the cache directory\n[DEBUG] Locking https-git-github.com-jackc-pgx.git\n[DEBUG] Attempting to find current branch for https://git@github.com:jackc/pgx.git\n[DEBUG] Unable to find current branch for https://git@github.com:jackc/pgx.git, error: Unable to retrieve checked out version\n[DEBUG] Output was: [DEBUG] Problem getting tags: Unable to retrieve tags\n[DEBUG] Output was: [DEBUG] Unlocking https-git-github.com-jackc-pgx.git\n[INFO]  --> Adding git@github.com:jackc/pgx.git to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[DEBUG] Locking https-git-github.com-jackc-pgx.git\n[INFO]  --> Fetching git@github.com:jackc/pgx.git.\n[DEBUG] Adding git@github.com:jackc/pgx.git to the cache for the first time\n[WARN]  Unable to checkout git@github.com:jackc/pgx.git\n[ERROR] Update failed for git@github.com:jackc/pgx.git: Unable to get repository\n[DEBUG] Output was: Cloning into '/home/james-lawrence/.glide/cache/src/https-git-github.com-jackc-pgx.git'...\nfatal: unable to access 'https://git@github.com:jackc/pgx.git/': Illegal port number[DEBUG] Unlocking https-git-github.com-jackc-pgx.git\n[ERROR] Failed to checkout packages: Unable to get repository\n[DEBUG] Output was: Cloning into '/home/james-lawrence/.glide/cache/src/https-git-github.com-jackc-pgx.git'...\nfatal: unable to access 'https://git@github.com:jackc/pgx.git/': Illegal port number. sorry was just trying to help you debug it so that there is sufficient information for someone to fix it. =). no you didn't miss anything this issue has been brought up repeatedly and afaik they are working towards something.. ",
    "arvenil": "\nMy point is, the doc says that in case if there is already vendor dir it's not going to fetch any dependencies, just vendor dir. However glide currently works differently, it doesn't care if vendor dir is there, it will always scan everything for dependencies. I'm not saying behavior is wrong, I'm saying that either I don't understand doc or doc says it wrong.\nok\nI have another problem, that something like glide get github.com/z/somepackage scans all subpackages for dependencies, while I not necessary might want it. Maybe I only want somepackage package, not any other subpackage. I think this is somehow related to #166 #164 I would expect to be able glide get github.com/z/somepackage or glide get github.com/z/somepackage/... or glide get github.com/z/somepackage/subpackage\n\n(~~and I also run right now into a problem when glide get ended up in infinite dependency loop:/ but didn't figure out yet, why the hell:/~~ nvm, my fault)\n. Wow, indeed it works better, fetches way less dependencies. 31 vs 51. Good job guys!\nI still however have this remaining question for 1.\nThe how it works section states:\n\nIt then recursively walks through the downloaded packages looking for those with a glide.yaml file (or Godep, gb, or GPM config file) that don't already have a vendor directory and installing their dependencies to their vendor directories.\n\nbut\n1. github.com/aws/aws-sdk-go has vendor directory and now I'm not sure if the new version works like the doc says, so  github.com/aws/aws-sdk-go is not scanned at all for dependencies because it has a vendor dir, or it is still scanned and the doc is misleading? \n2. and installing their dependencies to their vendor directories is also false now? As glide installs dependencies to top level vendor dir?\n. I also found out one inconsistency with fetching dependencies that is related to my questions.\nI think code is the simplest way to explain this :)\nglide get github.com/aws/aws-sdk-go fetches only one dep... so it looks like it cares about vendor dir and doesn't scan it for dependencies?\nsh\nbash-3.2$ glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\nbash-3.2$ glide get github.com/aws/aws-sdk-go\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/aws/aws-sdk-go\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[INFO] Resolving imports\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\nbash-3.2$ cat glide.lock\nhash: f0e0abd12e6cf5a81e2863ad24fcafedae90eef238a1108ed41c6efaa6bff74f\nupdated: 2016-02-10T14:16:53.052542434Z\nimports:\n- name: github.com/aws/aws-sdk-go\n  version: 0d8e5fdff6a7f73e2c8b84c02330c3c030650b82\ndevImports: []\nNow I'm trying to fetch dependency (github.com/uniplaces/osin-dynamodb) that depends on github.com/aws/aws-sdk-go (more precisely on github.com/aws/aws-sdk-go/service/dynamodb)\nsh\nbash-3.2$ rm glide.lock glide.yaml\nbash-3.2$ glide create\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\nbash-3.2$ glide get github.com/uniplaces/osin-dynamodb\n[INFO] Preparing to install 1 package.\n[INFO] Importing github.com/uniplaces/osin-dynamodb\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/uniplaces/osin-dynamodb.\n[INFO] Resolving imports\n[INFO] Fetching updates for github.com/RangelReale/osin.\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[INFO] Fetching updates for github.com/pborman/uuid.\n[INFO] Fetching updates for github.com/go-ini/ini.\n[INFO] Fetching updates for github.com/jmespath/go-jmespath.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/uniplaces/osin-dynamodb.\nbash-3.2$ cat glide.lock\nhash: f9b467e54af5991537817e9f40ef526311e41a8b51dfae4527f5fd17c2fa06c5\nupdated: 2016-02-10T14:32:49.801943376Z\nimports:\n- name: github.com/aws/aws-sdk-go\n  version: 0d8e5fdff6a7f73e2c8b84c02330c3c030650b82\n  subpackages:\n  - aws\n  - service/dynamodb\n  - aws/awserr\n  - aws/credentials\n  - aws/awsutil\n  - aws/client\n  - aws/client/metadata\n  - aws/request\n  - private/protocol/jsonrpc\n  - private/signer/v4\n  - private/waiter\n  - private/protocol/json/jsonutil\n  - private/protocol/rest\n  - private/protocol\n- name: github.com/go-ini/ini\n  version: 193d1ecb466bf97aae8b454a5cfc192941c64809\n- name: github.com/jmespath/go-jmespath\n  version: 0b12d6b521d83fc7f755e7cfc1b1fbdd35a01a74\n- name: github.com/pborman/uuid\n  version: 0f1a46960a86dcdf5dd30d3e6568a497a997909f\n- name: github.com/RangelReale/osin\n  version: 2d8139c3efb5d19649fea4215969840122a39f8e\n- name: github.com/uniplaces/osin-dynamodb\n  version: a96212a5fd9159d83d80ed956032204e238fe65e\ndevImports: []\nNotice github.com/jmespath/go-jmespath in dependencies. This is purely dependency of github.com/aws/aws-sdk-go but why it shows if it's in github.com/aws/aws-sdk-go vendor dir? Especially that glide get github.com/aws/aws-sdk-go didn't fetch it. I'm just guessing that this is related to the fact that github.com/uniplaces/osin-dynamodb is dependent on subpackage of github.com/aws/aws-sdk-go and maybe so glide doesn't see a vendor dir because he doesn't check parent dir (or in other words root package).\nBelow is a proof that vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath is actually used, and that vendor/github.com/jmespath/go-jmespath is unnecessary fetched (and unused) dependency.\n``` sh\nbash-3.2$ ls vendor/github.com/jmespath/go-jmespath\nLICENSE         api_test.go     compliance_test.go  interpreter_test.go parser_test.go\nMakefile        astnodetype_string.go   functions.go        lexer.go        toktype_string.go\nREADME.md       cmd         fuzz            lexer_test.go       util.go\napi.go          compliance      interpreter.go      parser.go       util_test.go\nbash-3.2$ go build -v -x 2>&1 | grep --color go-jmespath\ngithub.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath\nmkdir -p $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath/obj/\ncd /Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath\n/Users/kamil/.gobrew/versions/1.5.3/pkg/tool/darwin_amd64/compile -o $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath.a -trimpath $WORK -p github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -complete -buildid 4da3618a1da31cc431aadbdc9ac0d7338d5167e6 -D /Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -I $WORK -pack ./api.go ./astnodetype_string.go ./functions.go ./interpreter.go ./lexer.go ./parser.go ./toktype_string.go ./util.go\n/Users/kamil/.gobrew/versions/1.5.3/pkg/tool/darwin_amd64/compile -o $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil.a -trimpath $WORK -p github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil -complete -buildid 42944d3fe42c2f8d7884f09360a5cc68c0d11f05 -importmap github.com/jmespath/go-jmespath=github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -D _/Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil -I $WORK -I /Users/kamil/go/pkg/darwin_amd64 -pack ./copy.go ./equal.go ./path_value.go ./prettify.go ./string_value.go\nbash-3.2$ rm -rf vendor/github.com/jmespath/go-jmespath\nbash-3.2$ go build -v -x 2>&1 | grep --color go-jmespath\ngithub.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath\nmkdir -p $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath/obj/\ncd /Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath\n/Users/kamil/.gobrew/versions/1.5.3/pkg/tool/darwin_amd64/compile -o $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath.a -trimpath $WORK -p github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -complete -buildid 4da3618a1da31cc431aadbdc9ac0d7338d5167e6 -D /Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -I $WORK -pack ./api.go ./astnodetype_string.go ./functions.go ./interpreter.go ./lexer.go ./parser.go ./toktype_string.go ./util.go\n/Users/kamil/.gobrew/versions/1.5.3/pkg/tool/darwin_amd64/compile -o $WORK/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil.a -trimpath $WORK -p github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil -complete -buildid 42944d3fe42c2f8d7884f09360a5cc68c0d11f05 -importmap github.com/jmespath/go-jmespath=github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/vendor/github.com/jmespath/go-jmespath -D _/Users/kamil/go/src/github.com/uniplaces/glide-vendor-test1/vendor/github.com/aws/aws-sdk-go/aws/awsutil -I $WORK -I /Users/kamil/go/pkg/darwin_amd64 -pack ./copy.go ./equal.go ./path_value.go ./prettify.go ./string_value.go\nbash-3.2$ cat main.go\npackage main\nimport (\n    _ \"github.com/uniplaces/osin-dynamodb\"\n)\nfunc main() {\n    panic(\"test\")\n}\n``\n. I also wonder if there is a way to ignorevendor/.../vendor/dirs to avoid some complications with including several times the same library... I know I could justrm -rfall vendor dirs under rootvendor` dir... but maybe glide provides some functionality to do that.\n(beside, that, let me state this... first package manager for golang that actually works for me... great job)\n. There is a big issue with detecting vendor directory by golang I run into multiple times. Usually my project is in a directory like ~/projects/awesomeproject and under $GOPATH/src/github.com/arvenil/ I've always had simlink pointing out to ~/projects/awesomeproject. This worked well but doesn't work with the vendor directory.\nIf I cd to ~/projects/awesomeproject it doesn't work and vendor search path is not mentioned. If I cd to $GOPATH/src/github.com/arvenil/ it works - correctly looks for vendor dir.\nMaybe this is an issue @Akagi201 was experiencing.\nBecause of that and problems because of the configuration CircleCI I also wonder if there is a way to force/ask glide to install deps under $GOPATH instead of vendor dir - I can create separate issue for that.\n. Yes, I understand that, but having a simlink always worked for me in the past... however not with vendor dir, and the worst thing is you are in the project dir, you can see vendor dir with ls yet go tools don't pick it up and you have no idea why. Really bad user experience :) Anyway now I know I need to cd $GOPATH/src/github.com/vendor/project, so I'm fine :)\n. Hi guys,\nWhat's the status of that?\nThe lack of vendoring imports from tests is pretty big issue for me, as basically you can't run tests that relay on some packages that aren't required in the code itself. To bypass the issue right now I do cp somepackage_test.go somepackage_x.go; glide up; rm somepackage_x.go.\nBtw this was working couple months ago, as then glide was fetching ALL dependencies... I love that it doesn't do that anymore but yeah since then it doesn't parse dependencies from test files:/\n. Something like this (without this patch) fixes the issue for me\n``` go\nindex dc88f62..62b4731 100644\n--- a/dependency/resolver.go\n+++ b/dependency/resolver.go\n@@ -266,7 +266,7 @@ func (r *Resolver) ResolveLocal(deep bool) ([]string, error) {\n                return err\n            }\n        } else {\n-           imps = p.Imports\n+           imps = append(p.Imports, p.TestImports...)\n        }\n    // We are only looking for dependencies in vendor. No root, cgo, etc.\n\n```\nI've started to think that maybe a good idea would be to merge just that one line to fix the issue with _test.go deps not being vendored... and then, in next versions, you could guys improve that with that e.g. by separating app and test deps. I don't see a drawback of fixing the issue first, and then working on improvements. Fixing this like that right now doesn't collide with moving later deps from imports to devImports in yaml\n. glide up behavior to update only glide.lock is correct. glide.yaml is used to define dependencies and version ranges for them. It is a recipe. glide.lock defines current snapshot, a snapshot you can later update with glide up. Beside bundler, composer also does the same: https://getcomposer.org/doc/01-basic-usage.md#updating-dependencies-to-their-latest-versions\nI think the issue here is that @drasko you've added new dependency to the code and there don't seem to be a way to automatically re-scan and  add new dependency to glide.yaml?\nI think the best could be to implement glide get without params or new cmd glide rescan, which would re-scan source tree and add missing deps to glide.yaml.\nglide up could also do that in theory however the question is if it already re-scans directory, otherwise it can be resource consuming and it won't be in pair with other dependency managers - though this could be indeed expected behavior.. ",
    "gkalabin": "No stdlib detection in this environement:\n```\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gkalabin/go:/Users/gkalabin/langgo/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.5.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.5.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n$ glide --version\nglide version 0.8.3-2-g66ba663\n$ uname -a\nDarwin trolley 14.5.0 Darwin Kernel Version 14.5.0: Tue Sep  1 21:23:09 PDT 2015; root:xnu-2782.50.1~1/RELEASE_X86_64 x86_64\n```\nWhen I drop second item from gopath, it works fine: \n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gkalabin/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.5.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.5.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nI installed glide by cloning the repository and building it like make bootstrap && make build && make install\nIf I you need more details, just ask what do you need and I'll try my best to help\n. ",
    "christophberger": "@mattfarina I used the binary from glide-0.8.3-windows-amd64.zip. For my attempt to fix the issue, I cloned the master branch at tag 0.8.3-2-g66ba663. \nHere is my glide.yaml:\npackage: sieblog\nimport:\n- package: github.com/Sirupsen/logrus\n  subpackages:\n  - github.com\\Sirupsen\\logrus\n- package: github.com/christophberger/start\n  subpackages:\n  - github.com\\christophberger\\start\n- package: github.com/ogier/pflag\n  subpackages:\n  - github.com\\ogier\\pflag\n- package: github.com/pkg/profile\n  subpackages:\n  - github.com\\pkg\\profile\n- package: github.com/pombredanne/ahocorasick\n  subpackages:\n  - github.com\\pombredanne\\ahocorasick\nAnd of course it is a Windows-only problem.\n. @mattfarina This yaml file was generated from an internal package. But the problem is not within the yaml file anyway. I assume that you can replicate this with any glide.yaml as long as you do a glide install or glide update on Windows. You should then see that the generated URL's contain backslashes:\n[WARN] Update failed for github.com\\pkg\\profile: Cloning into 'C:\\[...]\\src\\sieblog\\vendor\\github.com\\pkg\\profile'...\nfatal: unable to access 'https://github.com\\pkg\\profile/': The requested URL returned error: 502\nI think the HTTP 502 is due to the corporate firewall/proxy/gateway I was behind when I got that error. I cannot tell what error occurs without a firewall as I have no Windows at home. But anyway, backslashes in URL's are wrong per se, so the problem is not tied to a specific yaml file nor to a corporate firewall.\n. ",
    "fabian-z": "This branch is working fine for me when merged on top of master. I searched for a solution because glide suddenly imported 44 dependencies for my project. Using this feature flag cuts it down on 20 with identical functionality (and I believe identical with go get, but I will have to check).\n. ",
    "cyrilleverrier": "see PR: https://github.com/Masterminds/vcs/pull/13\n. ",
    "MathieuDoyon": "@cyrilleverrier use gopkg.in/mgo.v2 instead for now\n. ",
    "abrykajlo": "@mattfarina yes thank you\n. ",
    "walktall": "@mattfarina \nPackage like testify has its own vendor. If we do not want to use testify's vendor content, we should delete its vendor. But this make the repo dirty. What should we do for this case?:flushed:\n. ",
    "garimakhulbe": "Below is the glide up output with glide.lock diff.\n\n\n. After fetching the latest glide repo. \n\n. \nRan with all latest. \n. \nLGTM. @colemickens, please confirm. \n. ",
    "ruflin": "What is the current state here? I expected without setting a specific version in my glide.yml file and using glide up --use-gopath that it would copy all dependencies from my $GOPATH in case they exist there. I also tried to set the version to the same version in my local path but with the same result.\n@mattfarina You mentioned above that it first copies then then tries to update. But that would mean assuming I'm offline it should already have copied the dependencies to the vendor directory when the connection error is shown?\nI'm on version 0.10.2\n. ",
    "hyper0x": "@mattfarina OK, I see. I wanted to build the project code like gb build.I solved it by using go build. Thank you.\n. I modified glide.yml:\npackage: go.pkg.wesai.com/p/go.pkg.wesai.com\nimport:\n- package: github.com/gin-gonic/gin\n- package: go.pkg.wesai.com/p/base_lib\n  subpackages:\n    - log\n  vcs: git\n  repo: http://gitlab.intra.wesai.com/platform_base/base_lib.git\nthen, removed glide.lock & vendor/, and glide up:\n$ glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib.\n[INFO] Fetching updates for github.com/gin-gonic/gin.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file.\n[INFO] Fetching github.com/manucorporat/sse into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for github.com/manucorporat/sse to ee05b128a739a0fb76c7ebd3ae4810c1de808d6d.\n[INFO] Fetching golang.org/x/net/context into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for golang.org/x/net to f315505cf3349909cdf013ea56690da34e96a451.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/base.\n[WARN] go.pkg.wesai.com/p/base_lib/log/base appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/base to . Err: Cannot detect VCS\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/base to . Err: Cannot detect VCS\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/logrus.\n[WARN] go.pkg.wesai.com/p/base_lib/log/logrus appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/logrus to . Err: Cannot detect VCS\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/logrus to . Err: Cannot detect VCS\n[INFO] Fetching github.com/golang/protobuf/proto into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for github.com/golang/protobuf to 2402d76f3d41f928c7902a765dfc872356dd3aad.\n[INFO] Fetching gopkg.in/go-playground/validator.v8 into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for gopkg.in/go-playground/validator.v8 to c193cecd124b5cc722d7ee5538e945bdb3348435.\n[INFO] Fetching github.com/Sirupsen/logrus into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Fetching golang.org/x/sys/unix into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/base.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/logrus.\n[WARN] go.pkg.wesai.com/p/base_lib/log/base appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] go.pkg.wesai.com/p/base_lib/log appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] go.pkg.wesai.com/p/base_lib/log/logrus appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO] Setting references for remaining imports\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log/logrus to : Cannot detect VCS\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log/base to : Cannot detect VCS\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log to : Cannot detect VCS\n[INFO] Project relies on 11 dependencies.\nAn Error has occurred\nit looks Okey, although there are some errors.\n. @mattfarina Thank you for reply.\n1. gitlab.intra.wesai.com is available at http://gitlab.intra.wesai.com only.\n2. The result of glide --debug up\uff1a\n$ glide --debug up\n[DEBUG] Creating vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/gin-gonic/gin.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log.\n[WARN] Unable to checkout go.pkg.wesai.com/p/base_lib/log\n[ERROR] Update failed for go.pkg.wesai.com/p/base_lib/log: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\n. I ran glide --debug up after modified glide.yaml (added subpackages\u3001vsc and repo for package go.pkg.wesai.com/p/go.pkg.wesai.com), then got:\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/gin-gonic/gin.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib.\n[INFO] Resolving imports\n[DEBUG] Adding local Import /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/gin-gonic/gin to queue\n[DEBUG] Adding local Import /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/go.pkg.wesai.com/p/base_lib/log to queue\n[INFO] Found Godeps.json file.\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/gin-gonic/gin\n[DEBUG] Package github.com/gin-gonic/gin imports github.com/gin-gonic/gin/binding\n[DEBUG] In vendor: github.com/gin-gonic/gin/binding\n[DEBUG] Marking github.com/gin-gonic/gin/binding to be scanned.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/gin-gonic/gin imports github.com/gin-gonic/gin/render\n[DEBUG] In vendor: github.com/gin-gonic/gin/render\n[DEBUG] Marking github.com/gin-gonic/gin/render to be scanned.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/gin-gonic/gin imports github.com/manucorporat/sse\n[DEBUG] Found on GOPATH, not vendor: github.com/manucorporat/sse\n[INFO] Fetching github.com/manucorporat/sse into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for github.com/manucorporat/sse to ee05b128a739a0fb76c7ebd3ae4810c1de808d6d.\n[DEBUG] Package github.com/gin-gonic/gin imports golang.org/x/net/context\n[DEBUG] Found on GOPATH, not vendor: golang.org/x/net/context\n[INFO] Fetching golang.org/x/net/context into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for golang.org/x/net to f315505cf3349909cdf013ea56690da34e96a451.\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/go.pkg.wesai.com/p/base_lib/log\n[DEBUG] Package go.pkg.wesai.com/p/base_lib/log imports go.pkg.wesai.com/p/base_lib/log/base\n[DEBUG] In vendor: go.pkg.wesai.com/p/base_lib/log/base\n[DEBUG] Marking go.pkg.wesai.com/p/base_lib/log/base to be scanned.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/base.\n[WARN] go.pkg.wesai.com/p/base_lib/log/base appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/base to . Err: Cannot detect VCS\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/base to . Err: Cannot detect VCS\n[DEBUG] Package go.pkg.wesai.com/p/base_lib/log imports go.pkg.wesai.com/p/base_lib/log/logrus\n[DEBUG] In vendor: go.pkg.wesai.com/p/base_lib/log/logrus\n[DEBUG] Marking go.pkg.wesai.com/p/base_lib/log/logrus to be scanned.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/logrus.\n[WARN] go.pkg.wesai.com/p/base_lib/log/logrus appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/logrus to . Err: Cannot detect VCS\n[WARN] Unable to set verion on go.pkg.wesai.com/p/base_lib/log/logrus to . Err: Cannot detect VCS\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/gin-gonic/gin/binding\n[DEBUG] Package github.com/gin-gonic/gin/binding imports github.com/golang/protobuf/proto\n[DEBUG] Found on GOPATH, not vendor: github.com/golang/protobuf/proto\n[INFO] Fetching github.com/golang/protobuf/proto into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for github.com/golang/protobuf to 2402d76f3d41f928c7902a765dfc872356dd3aad.\n[DEBUG] Package github.com/gin-gonic/gin/binding imports gopkg.in/go-playground/validator.v8\n[DEBUG] Missing gopkg.in/go-playground/validator.v8. Trying to resolve.\n[INFO] Fetching gopkg.in/go-playground/validator.v8 into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[INFO] Setting version for gopkg.in/go-playground/validator.v8 to c193cecd124b5cc722d7ee5538e945bdb3348435.\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/gin-gonic/gin/render\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/manucorporat/sse\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/golang.org/x/net/context\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/go.pkg.wesai.com/p/base_lib/log/base\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/go.pkg.wesai.com/p/base_lib/log/logrus\n[DEBUG] Package go.pkg.wesai.com/p/base_lib/log/logrus imports github.com/Sirupsen/logrus\n[DEBUG] Missing github.com/Sirupsen/logrus. Trying to resolve.\n[INFO] Fetching github.com/Sirupsen/logrus into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[DEBUG] Package go.pkg.wesai.com/p/base_lib/log/logrus imports go.pkg.wesai.com/p/base_lib/log/base\n[DEBUG] In vendor: go.pkg.wesai.com/p/base_lib/log/base\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/golang/protobuf/proto\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/gopkg.in/go-playground/validator.v8\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/github.com/Sirupsen/logrus\n[DEBUG] Package github.com/Sirupsen/logrus imports golang.org/x/sys/unix\n[DEBUG] Found on GOPATH, not vendor: golang.org/x/sys/unix\n[INFO] Fetching golang.org/x/sys/unix into /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor\n[DEBUG] Trying to open /Users/haolin/Office/Wesai/golang/src/go.pkg.wesai.com/p/go.pkg.wesai.com/vendor/golang.org/x/sys/unix\n[INFO] Downloading dependencies. Please wait...\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/logrus.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log/base.\n[WARN] go.pkg.wesai.com/p/base_lib/log/base appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[DEBUG] Dependency github.com/golang/protobuf has already been pinned. Fetching updates skipped.\n[WARN] go.pkg.wesai.com/p/base_lib/log/logrus appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[DEBUG] Dependency go.pkg.wesai.com/p/base_lib has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/go-playground/validator.v8 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/manucorporat/sse has already been pinned. Fetching updates skipped.\n[INFO] Fetching updates for go.pkg.wesai.com/p/base_lib/log.\n[WARN] go.pkg.wesai.com/p/base_lib/log appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO] Setting references for remaining imports\n[DEBUG] Dependency go.pkg.wesai.com/p/base_lib has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/manucorporat/sse has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/golang/protobuf has already been pinned. Setting version skipped.\n[DEBUG] Dependency gopkg.in/go-playground/validator.v8 has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/gin-gonic/gin has already been pinned. Setting version skipped.\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log to : Cannot detect VCS\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log/base to : Cannot detect VCS\n[ERROR] Failed to set version on go.pkg.wesai.com/p/base_lib/log/logrus to : Cannot detect VCS\n[INFO] Project relies on 11 dependencies.\nAn Error has occurred\n. @mattfarina  I see, but there is no problem using go get -insecure go.pkg.wesai.com/p/base_lib or gb vendor fetch -precaire go.pkg.wesai.com/p/base_lib.\nbtw, \nbash\n$ go get -insecure -v  go.pkg.wesai.com/p/base_lib\nFetching https://go.pkg.wesai.com/p/base_lib?go-get=1\nhttps fetch failed: Get https://go.pkg.wesai.com/p/base_lib?go-get=1: dial tcp 10.2.2.9:443: getsockopt: connection refused\nFetching http://go.pkg.wesai.com/p/base_lib?go-get=1\nParsing meta tags from http://go.pkg.wesai.com/p/base_lib?go-get=1 (status code 200)\nget \"go.pkg.wesai.com/p/base_lib\": found meta tag main.metaImport{Prefix:\"go.pkg.wesai.com/p/base_lib\", VCS:\"git\", RepoRoot:\"http://gitlab.intra.wesai.com/platform_base/base_lib.git\"} at http://go.pkg.wesai.com/p/base_lib?go-get=1\ngo.pkg.wesai.com/p/base_lib (download)\ngo.pkg.wesai.com/p/base_lib\nbash\n$ go get -insecure -v  go.pkg.wesai.com/p/base_lib/log\nFetching https://go.pkg.wesai.com/p/base_lib/log?go-get=1\nhttps fetch failed: Get https://go.pkg.wesai.com/p/base_lib/log?go-get=1: dial tcp 10.2.2.9:443: getsockopt: connection refused\nFetching http://go.pkg.wesai.com/p/base_lib/log?go-get=1\nParsing meta tags from http://go.pkg.wesai.com/p/base_lib/log?go-get=1 (status code 200)\nget \"go.pkg.wesai.com/p/base_lib/log\": found meta tag main.metaImport{Prefix:\"go.pkg.wesai.com/p/base_lib\", VCS:\"git\", RepoRoot:\"http://gitlab.intra.wesai.com/platform_base/base_lib.git\"} at http://go.pkg.wesai.com/p/base_lib/log?go-get=1\nget \"go.pkg.wesai.com/p/base_lib/log\": verifying non-authoritative meta tag\nFetching https://go.pkg.wesai.com/p/base_lib?go-get=1\nhttps fetch failed: Get https://go.pkg.wesai.com/p/base_lib?go-get=1: dial tcp 10.2.2.9:443: getsockopt: connection refused\nFetching http://go.pkg.wesai.com/p/base_lib?go-get=1\nParsing meta tags from http://go.pkg.wesai.com/p/base_lib?go-get=1 (status code 200)\ngo.pkg.wesai.com/p/base_lib (download)\ngo.pkg.wesai.com/p/base_lib/log/base\ngo.pkg.wesai.com/p/base_lib/log/logrus\ngo.pkg.wesai.com/p/base_lib/log\nUse gb:\nbash\n$ gb vendor fetch -precaire  go.pkg.wesai.com/p/base_lib\nfetching recursive dependency github.com/Sirupsen/logrus\nfetching recursive dependency github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\nfetching recursive dependency github.com/coreos/etcd/client\nfetching recursive dependency github.com/coreos/etcd/Godeps/_workspace/src/github.com/ugorji/go/codec\nfetching recursive dependency github.com/coreos/etcd/pkg/pathutil\nfetching recursive dependency github.com/coreos/etcd/pkg/types\nbash\n$ gb vendor fetch -precaire  go.pkg.wesai.com/p/base_lib/log\nfetching recursive dependency github.com/Sirupsen/logrus\nfetching recursive dependency github.com/coreos/etcd/Godeps/_workspace/src/golang.org/x/net/context\nfetching recursive dependency github.com/coreos/etcd/client\nfetching recursive dependency github.com/coreos/etcd/Godeps/_workspace/src/github.com/ugorji/go/codec\nfetching recursive dependency github.com/coreos/etcd/pkg/pathutil\nfetching recursive dependency github.com/coreos/etcd/pkg/types\n. @mattfarina  I have set:\n- package: go.pkg.wesai.com/p/base_lib\n  subpackages:\n    - log\n  repo: http://gitlab.intra.wesai.com/platform_base/base_lib.git\nThat's OK. Thank you.\n. ",
    "sitano": "Same problem.\n20 minutes. No load.\nUbuntu 16.04.2 LTS\nGolang 1.8.1\nglide 0.12.3\nhttps://github.com/tendermint/basecoin/\n$ glide up\nsometimes it fails to install existing repo log15. ",
    "joshrosso": "I also experience a very slow time on glide up -v if I clear my cache.\nreal    20m46.966s\nuser    1m53.937s\nsys 0m57.667s\nglide.yaml : https://github.com/coreos/alb-ingress-controller/blob/4ee62d9acf4fcf4b0ccbe328029fda7b2d9dee76/glide.yaml. ",
    "bsideup": "@mattfarina I'm trying to figure out where my transitive dependency is coming from, and glide tree is a great tool for it.\nAlso, I was using glide tree to debug Glide :D for some reason I see a dependency on docker but my dependencies don't include it. Looks like it comes from some dependency's test, but I can't figure out which one and why.\nThanks!\n. @mattfarina \"go get ...\", latest from master\n. @technosophos yes, glide find sounds good :)\n. ",
    "stroborobo": "Yes, looks fine after glide install, just tested it with an empty GOPATH dir just to make sure.\n. Latest release: glide version 0.8.3\n. Oh, via brew :)\n. Tried it, didn't fix the problem unfortunately, but the output changed:\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/jinzhu/gorm.\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n[INFO] Fetching updates for golang.org/x/crypto.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha.\n[INFO] Fetching updates for github.com/gorilla/mux.\n[INFO] Resolving imports\n[INFO] Fetching github.com/gorilla/context into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/jinzhu/inflection into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/lib/pq/hstore into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/didip/tollbooth into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/gorilla/sessions into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/facebookgo/grace/gracehttp into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/gorilla/handlers into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Found Godeps.json file.\n[INFO] Fetching github.com/gorilla/securecookie into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/facebookgo/httpdown into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/juju/ratelimit into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Setting version for github.com/juju/ratelimit to aa5bb718d4d435629821789cb90970319f57bfe5.\n[INFO] Fetching github.com/facebookgo/clock into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/facebookgo/stats into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/helpers.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/storage.\n[WARN] src.ybit.eu/ybit/yamcha/helpers appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/apibase.\n[WARN] src.ybit.eu/ybit/yamcha/storage appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[WARN] src.ybit.eu/ybit/yamcha/apibase appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/server.\n[WARN] src.ybit.eu/ybit/yamcha/server appears to be a vendored package. Unable to update. Consider the '--update-vendored' flag.\n[INFO] Setting references for remaining imports\n[WARN] Failed to set version on src.ybit.eu/ybit/yamcha/apibase to : Cannot detect VCS\n[WARN] Failed to set version on src.ybit.eu/ybit/yamcha/helpers to : Cannot detect VCS\n[WARN] Failed to set version on src.ybit.eu/ybit/yamcha/server to : Cannot detect VCS\n[WARN] Failed to set version on src.ybit.eu/ybit/yamcha/storage to : Cannot detect VCS\n[INFO] Project relies on 21 dependencies.\nI quadro-checked the repo path and import path now, definitely no typo.\nThis is what the yamcha repo looks like, if that helps:\nyamcha/\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 apibase\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 apibase.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 context.go\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 errors.go\n\u251c\u2500\u2500 helpers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 errcaller.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 helpers.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 math.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pidfile.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reader.go\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 runes.go\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 seoshop.go\n\u251c\u2500\u2500 server\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 server.go\n\u2514\u2500\u2500 storage\n    \u251c\u2500\u2500 README.md\n    \u2514\u2500\u2500 storage.go\n(The Makefile is only for putting godoc into the readmes, so no fancy building mechanism.)\n. Now that you're saying that I've never go get'ed one of our private repos before, that really doesn't work: unrecognized import path \"src.ybit.eu/ybit/seoshop/cmd/seoshop\". Adding the \".git\" after \"yamcha\" makes it fail complaining about an \"insecure protocol\", but it works when I enforce SSH like this:\ngit config --global url.\"git@src.ybit.eu:\".insteadOf \"https://src.ybit.eu/\"\nSo I changed the package to src.ybit.eu/ybit/yamcha.git, leaving the subpackages, that didn't do it. Then I made the subs independent packages with the added .git, but also not the desired result. So what should I put in my glide.yaml then?\nFor all four in both cases:\n[WARN] Unable to checkout src.ybit.eu/ybit/yamcha/helpers\n[WARN] Skipped getting src.ybit.eu/ybit/yamcha/helpers: Cannot detect VCS\nBtw, using the 0.9.0 RC1 I got this in both cases:\n[...]\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha.git.\n[INFO] Resolving imports\n[INFO] Fetching github.com/gorilla/context into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/jinzhu/inflection into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[INFO] Fetching github.com/lib/pq/hstore into /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor\n[ERROR] Error scanning src.ybit.eu/ybit/yamcha/apibase: open /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor/src.ybit.eu/ybit/yamcha/apibase: no such file or directory\n[ERROR] Error scanning src.ybit.eu/ybit/yamcha/helpers: open /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor/src.ybit.eu/ybit/yamcha/helpers: no such file or directory\n[ERROR] Error scanning src.ybit.eu/ybit/yamcha/server: open /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor/src.ybit.eu/ybit/yamcha/server: no such file or directory\n[ERROR] Error scanning src.ybit.eu/ybit/yamcha/storage: open /Users/bo/src/go/src/src.ybit.eu/ybit/seo360/vendor/src.ybit.eu/ybit/yamcha/storage: no such file or directory\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/apibase.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/server.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/helpers.\n[INFO] Fetching updates for src.ybit.eu/ybit/yamcha/storage.\n[WARN] Unable to checkout src.ybit.eu/ybit/yamcha/server\n[WARN] Update failed for src.ybit.eu/ybit/yamcha/server: Cannot detect VCS\n[WARN] Unable to checkout src.ybit.eu/ybit/yamcha/apibase\n[WARN] Update failed for src.ybit.eu/ybit/yamcha/apibase: Cannot detect VCS\n[WARN] Unable to checkout src.ybit.eu/ybit/yamcha/storage\n[WARN] Update failed for src.ybit.eu/ybit/yamcha/storage: Cannot detect VCS\n[WARN] Unable to checkout src.ybit.eu/ybit/yamcha/helpers\n[WARN] Update failed for src.ybit.eu/ybit/yamcha/helpers: Cannot detect VCS\n[ERROR] Could not update packages: Cannot detect VCS\nCannot detect VCS\nCannot detect VCS\nCannot detect VCS\nHowever I still wonder why that's important when I'm specifically saying where the repo is and what kind of VCS to use.\n. ",
    "davidzhao": "I'm having the same issue here with a private git repo. How does glide fetch private/internal repos?\n. @mattfarina I think this is a fairly important issue as it relates to the ability to use private packages. (hosted on GH or elsewhere). Go get  works fine, but the VCS host detection fails to interpret git@github.com:user/repo pattern. We really like the design of glide, but are unable to use it until we could properly reference our private packages.\n. @mattfarina Thanks for the tip! your workaround solved that problem. Tho I ran into a related problem with subpackages.\nOur glide config looks like this\n- package: davidzh/privaterepo\n  repo: git@github.com:davidzh/privaterepo\n  vcs: git\n  subpackages:\n  - subpackage1\n  - subpackage2\nWhile it fetches the privaterepo just fine, it gave me the following errors at the end:\n[ERROR] Failed to set version on davidzh/privaterepo/subpackage1 to : Cannot detect VCS\n[ERROR] Failed to set version on davidzh/privaterepo/subpackage2 to : Cannot detect VCS\nIs this related to private repo?\n. ",
    "elan100cs": "Hey i am having the same issues. I suggest that if it is already specified within the glide.yaml as an import package, then it shouldn't try to update it subpackages.\nI imagine to implement this, requires a key value pair which stores packages that's already been updated during the 'glide update' and do a check whether a package which about to be updated is a subpackage of that. \n. I created a pull request for this. The fix suggested here seems work for me.\n. One possible use case of specifying subpackage is when we want to force to pull the dependency of that subpackage. This is useful when a project define 1 repository for all of it's common library, which doesnt guarantee for all of the subpackages gets imported within the root packages.\nSince now, the way to use glide is to specify it's root package, i find that if we dont have any imports of the subpackage within the root package, the dependencies of the subpackage doesnt gets fetch automatically, though i thought the old version of glide does this automatically.\nCan we use subpackage to fulfill this use case? Or does it already being handled by some other features in glide ?. ",
    "itscaro": "@mattfarina \nIs it possible to append to vcsList (util.go) something like following so that GetRootFromPackage() return correctly the root package in this case:\n{\n        pattern: `^(?P<rootpkg>[A-Za-z0-9.\\-]+/[A-Za-z0-9_.\\-]+/[A-Za-z0-9_.\\-]+)(/[A-Za-z0-9_.\\-]+)*$`,\n    },\nThis regex is based on my case: (same naming as github.com/user/repo)\n- package: domain/first_level/package\n  vcs: git\n  repo: git@domain/first_level/package.git\n. Should it be like this? GOPATH must not be vendor directory\n```\nRUN glide install\nRUN GOPATH=/opt/evolution-master go build\n```\n. - rename gosrc => src\n- GOPATH \n- in src, run glide install\nBut I recommend you set up like this:\nGOPATH = /a/dir/\nthe checkout your repo to /a/dir/src/github.com/hatchery/evolution\nin the checked-out directory, you put all contents of your current gosrc dir.\n\nbootstrap/\nDockerfile\nevolution-master.go\nglide.lock\nglide.yaml\nLICENSE\nREADME.md\n. What is the ticket I need to follow? You quoted the same ticket here.\n\nThanks.\n. Env: go 1.6 windows/amd64 - glide 0.9.1\nI have no problem with Masterminds/glide\nglide install\nPS C:\\Users\\itsca_000\\workspace\\git\\go\\src\\github.com\\Masterminds\\glide> glide i\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/Masterminds/semver.\n[INFO] Fetching updates for github.com/Masterminds/vcs.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Fetching updates for github.com/codegangsta/cli.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references.\n[INFO] Setting version for github.com/Masterminds/vcs to 9c0db6583837118d5df7c2ae38ab1c194e434b35.\n[INFO] Setting version for github.com/Masterminds/semver to 513f3dcb3ecfb1248831fb5cb06a23a3cd5935dc.\n[INFO] Setting version for github.com/codegangsta/cli to c31a7975863e7810c92e2e288a9ab074f9a88f29.\n[INFO] Setting version for gopkg.in/yaml.v2 to f7716cbe52baa25d2e9b0d0da546fcf909fc16b4.\nglide init\nPS C:\\Users\\itsca_000\\workspace\\git\\go\\src\\github.com\\Masterminds\\glide> glide init\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[INFO] Found reference to github.com\\Masterminds\\semver\n[INFO] Found reference to github.com\\Masterminds\\vcs\n[INFO] Found reference to github.com\\codegangsta\\cli\n[INFO] Found reference to gopkg.in\\yaml.v2\n. PowerShell\n```\nMajor  Minor  Build  Revision\n\n5      0      10586  63\n```\nCMD: same issue\nCygwin: same issue\n\nThe issue is the git I used in command line was the git of cygwin, after changing to use the git for windows, all works.\nMayby a check to warn not to use cygwin-git on windows?\n. On windows, I think there is an issue with this configuration: (Other packages are installed correctly, except an issue with subpackages)\n- package: github.com/mattn/go-isatty\n    os:\n      - win\n[ERROR] Failed to set version on github.com/mattn/go-isatty to 95b19fc23a6e8a63f2f0929f83c107fb85b869c3: open C:\\workspace\\git\\go\\src\\app\\vendor\\github.com\\mattn\\go-isatty: Le fichier sp\u00e9cifi\u00e9 est introuv\nable.\n. I would be happy to work on a PR.\n. Why would you like to push dependency codes into your projet? The idea with a dependency manager is that you just need a configuration file and when you checkout your project you ask the dependency manager to get all dependencies at the version you defined in your configuration file.\n. ",
    "rschmukler": "I am also running into the same issue that @davidzhao is experiencing. Worth noting that I'm using an https+git endpoint instead of git via ssh\n. @mattfarina for me the repo is a Go getable path myurl.com/my-package/path. It is worth noting that it is a Gogs private repo, so perhaps it could be an issue with gogs lacking go-import metadata on private repos (See gogits/gogs/#2825)?\nedit: Looking into the source code it looks like it attempts to ping the repo... So I will bet that for me, the issue will be resolved with go-import metadata being provided (but I only just skimmed the source)\n. Just ran into this as well...\n. This is a duplicate (more generically) of #373 \n. ",
    "bryanpaluch": "I had a similar issue where a private repo that had 3 subpackages wasn't being created properly in the glide.yaml. I fixed the issue the same way @stroborobo does in this first comment by adding the submodules by had and removing the extra packages. I hit the same issue when I was trying to do a glide update/install and get the can not detect VCS type. It doesn't make sense to me that glide would try to look in the subpackages folder for the VCS info as I think it is. I created a work around which adds packages to the alreadySeen map if they are subpackages in dependency/resolver.go\nfor _, dep := range r.Config.Imports {\n  for _, sub := range dep.Subpackages {\n    alreadySeen[dep.Name+\"/\"+sub] = true\n  }\n}\nhttps://github.com/bryanpaluch/glide/commit/7deada10d5cfe9ec606e19e786e6c0072c2282f3\nI'm not entirely sure if this breaks the purpose of subpackages but it produces a valid glide.lock and my project builds fine now. \nI don't think this is a good workaround but maybe it helps identify the problem a little better. \n. ",
    "jmatosp": "Hi Guys I'm having a related issue\nUsing a package\n    \"github.com/Sirupsen/logrus\"\nand a sub package\n    \"github.com/Sirupsen/logrus/formatters/logstash\"\nWhen doing a glide install says OK\nbut glide update says \n...[ERROR] Error scanning github.com/Sirupsen/logrus/formatters/logstash: open /Users/jose.pinto/projects/go/src/github.com/jmatosp/hawkeye/vendor/github.com/Sirupsen/logrus/formatters/logstash: no such file or directory...\nmy glide.yaml looks similar to\npackage: github.com/jmatosp/hawkeye\nimport:\n- package: github.com/Sirupsen/logrus\n  subpackages:\n  - formatters/logstash\n- package: github.com/hashicorp/consul\n  subpackages:\n  - api\n- package: github.com/julienschmidt/httprouter\n- package: golang.org/x/net\n  subpackages:\n  - context\nany help is very much appreciated\n. ",
    "goloveychuk": "@mattfarina \nHow to reproduce problem.\ngo version go1.6 darwin/amd64\nglide version 0.11.1\njson\n- package: github.com/golang/protobuf\n  subpackages:\n  - proto\nwhen running glide install first time, when no glide.lock exists, it's ok. \nNow we're running glide install - everthing ok.\nBut after removing rm -rf vendor\nwhile running glide install it produces\n[WARN]  Unable to checkout github.com/golang/protobuf/proto\n[ERROR] Update failed for github.com/golang/protobuf/proto: Unable to get repository\n. The solution could be having \n- name: github.com/golang/protobuf\n  version: c3cefd437628a0b7d31b34fe44b3a7a540e98527\n  subpackages:\n  - proto\n- name: github.com/golang/protobuf/proto\n  version: c3cefd437628a0b7d31b34fe44b3a7a540e98527\nin your glide.lock file, remove subpackage lines\n- name: github.com/golang/protobuf\n  version: c3cefd437628a0b7d31b34fe44b3a7a540e98527\n  subpackages:\n  - proto\nthis will work nicely.\n@mattfarina \nI think when glide.lock is generating it shouldn't write subpackages into lock file. (also they same commit number as parent, so it don't have any additional information)\n. ",
    "marioluan": "Any news about this issue being fixed? :)\n. The problem is related to symbolic links, I'm going to reopen the issue with another explanation.\n. Hi @franciscocpg, thanks for your feedback.\nI think the main cause of the problem is related to symbolic linking. When I upgraded from go 1.6.2 to 1.6.3, my IDE also got broken, because it could not follow the symbolic link which I created myself.\nWhen I removed the symbolic link and created a hard link instead, it worked perfectly. So I think it is not related to gvm nor glide, but with the way I defined my directory structure.\nI'm closing the issue now.\nCheers!\n. Same here. I had to add gin's dependencies to my own project in order to make it work.\n. @gyuho did you make it work with symlink? I've tried but failed to make it work.\n. @gyuho uhm... I think I did it the wrong way too. Thanks for sharing the solution.\n. ",
    "leninmehedy": "@mattfarina similar to public repository, it should not try to set version for subpackages of a private repo in glide.lock file. \nWhen I remove the lines (i.e. name and version) related to subpackages from glide.lock file, it works nicely.\n. ",
    "AnoopPutta": "@mattfarina @stroborobo @technosophos @davidzhao @elan100cs \nEven i am facing this issue just with glide update. For any packages which has dependent sub pacakges while resolving imports it prompts for password. I can understand removing the sub package stuff from glide.lock before I execute glide install. But in my case glide update is also prompting for password.  I Have gone through the code ,when the dependency struct is initialised repo literal are not set as per its parent repo details.\n. ",
    "adewes": "I'm also having issues with this approach: In my project, I import subpackages using a local naming scheme (e.g. my-org.com/my_project/my_package). These imports are local in the sense that they are satisfied by the repository itself. Now, when I run glide update it tries to resolve and download these dependencies, which obviously does not make any sense.\nComing from Python, the behavior is a bit surprising to me as I would simply expect that glide fetches the packages indicated in the glide.yaml file and installs them into the vendor directory, instead of automagically including imports from my code. Just my personal opinion though, as I'm not yet very experienced with the Go eco-system I might have a wrong understanding of this problem.\n. ",
    "shashankmehra": "I am a beginner at Go, and maybe my case is very specific, but I will leave it here. There are certain portions of my code which are generated, and the generator is also written in Go (go-swagger). That generator uses goimports to manage imports, so naturally it needs some go packages to be \"discoverable\". I thought of using glide alone to get those packages but when running glide install it throws a no such file or directory error when it tries to resolve imports. Obviously that file doesn't exist yet as it is yet to be generated using the generator for which I am installing dependencies, and I end up with a Catch-22 situation. I expected glide to work as pip would, as @mhoglan mentioned. I did not expect a dependency tool to check if my code is buildable. I had a separate dependency file for that.\nMaybe keeping the generated code uncommitted in my repo is not a good idea. I am still experimenting with it. I am going to put go get commands in my build script for now just to initially bootstrap the generator. But I feel like being a developer tool it should not abstract out two tasks as one task. Maybe, let me run an install command with --skip-resolve flag and provide another command to make sure my project is ready to be built. That way I have full control of the tool.. ",
    "atombender": "I'd like this, too.\nIt's annoying to find that glide up <some packagename> runs without complaining about the superfluous argument, but actually updates everything. What is the argument list used for?\n. @mattfarina Any update om this? It's truly annoying to have to undo changes to glide.lock when you only want to update a single dependency.\nSometimes I just give up and commit the whole file because I don't know the transitive relationships between packages. For example, if I add a new dependency X, and glide.lock\u00a0now contains 3 new packages, I don't know if these are a result of adding X, or if a coworker had previously forgot to run glide when they added a different dependency.\n. Not using versions/ranges. I should be, of course, but I've been simply relying on glide get \u2014 it doesn't save the current version to glide.yaml (the way that npm i --save does), which I think is a mistake. Nor does it allow you specify a version constraint. Looks like I will have to add the versions manually. It's particularly awkward since glide get\u00a0doesn't print the version it added to the lockfile either. Knowing the version ahead of time means having to go to the upstream git repo and peeking at what the current version is, as far as I can tell. This workflow could do with some improvement.\n. @sdboyer Thanks, I didn't know about the hash syntax. If I use that syntax, it adds the version. Without the hash, it doesn't\u00a0(I'm using 0.10.2). I would argue that it ought to add a version constraint (NPM uses ~>, which is a good choice) regardless.\nSecondly, it raises the question of how to find the version in the first place. Right now, the workflow seems to require that I go to Github (or wherever), and look for a vX.Y tag. For gopkg.in packages, there seems to be a different system in use which I don't know, and which curiously enough doesn't use a v prefix (though at least the version number is shown on the web page):\n[INFO] Detected semantic version. Setting version for github.com/jackc/pgx to v2.8.1.\n[INFO] Detected semantic version. Setting version for gopkg.in/readline.v1 to 1.2.\n(Where is this stuff documented?)\nPerhaps there could be a flag to get the latest semantic version, or maybe something like glide get github.com/foo/bar#latest. This would put ~>1.5 or whatever into glide.yaml.\n. Thanks for the detailed explanation. Glad to hear that I'm not the only one.\nI just discovered that I can cheat, for now, by using OS X hard links (this tool is necessary) to link my project under $GOPATH. On Linux you can accomplish the same thing with mount --bind.\nThe only problem is that invoking the glide command must be done with the current directory set to the project under $GOPATH. I can live with that.\n. Looks like it. But again, you need to be in the $GOPATH structure \u2014 it won't reverse-lookup your other (real) path.\n. Don't know if this applies to you, but this will happen if your project is not located in $GOROOT according to the Go maintainers' specifications. I discovered this when I tried using symlinks.\n. If you're using symlinks, then it's the same issue.\n. @technosophos @mattfarina: We're seeing something that looks like this problem, but it doesn't happen for me, only for my colleagues. Here are the outputs of the exact same commands on my machine (good.txt) and one of theirs (bad.txt).\nWe're using the same version of Go and Glide. It's all on OS X. The only difference seems to be that my colleagues check out Git repos using the git protocol, whereas I use https.\nSetting version: master fixes the issue.\n. I can reproduce it consistently now, but I'm not sure if it represent the original failure scenario exactly. First, I create this glide.yaml in a clean directory, with one package:\nyaml\npackage: github.com/t11e/glidebug\nimport:\n- package: github.com/aws/aws-sdk-go\n  version: 6f62fc3ff9aa98c629b350376825cda566658d75\n  subpackages:\n  - aws\n  - aws/awserr\n  - aws/session\n  - service/s3\nThen I run glide install. Everything good so far.\nThen I remove version: 6f62... and run glide up. Now my lock file is:\nhash: 1ac04a04efbc1f1153bf98b3876e0e722b49e5b702a87bf0dde64e0212d1e702\nupdated: 2016-05-06T14:35:39.336813296-04:00\nimports:\n- name: github.com/aws/aws-sdk-go\n  version: 6f62fc3ff9aa98c629b350376825cda566658d75\n  subpackages:\n  - aws\n  - aws/awserr\n  - aws/session\n  - service/s3\ndevImports: []\nNotice old version still remains. glide up does not refresh anything.\nStill doesn't explain why it's otherwise working fine for me on my own repo and not my colleagues'.\n. Great. After deleting my vendor directory and doing glide i; glide up, I now get the same exact same issue as my colleagues, ie. no changes on update.\n. Here's another data point:\nshell\n$ cd vendor/github.com/aws/aws-sdk-go\n$ cat .git/HEAD\n6f62fc3ff9aa98c629b350376825cda566658d75\n$ git status\nHEAD detached at 6f62fc3\nnothing to commit, working directory clean\nI see in git.go that if HEAD is detached, an update does nothing. Could this be the cause?\n. @mattfarina Could this be related to #360?\n. @technosophos @mattfarina: Can you spare some time to look at this?\n. @mattfarina: (1) Yes. (2) No.\n. (You may have missed this since you're asking whether it has a .git directory.)\n. Here's another data point: I find that I generally have to run glide up twice to make it pick up a new upstream Git version. Here's my starting point:\n``` shell\n$ grep -A1 glidetest glide.yaml\n- name: github.com/t11e/glidetest\n  version: branch_x\n$ (cd vendor/github.com/t11e/glidetest && git rev-parse HEAD)\n399832009187ce47fde554d6d174b83ce58d13e2\n$ grep -A1 glidetest glide.lock\n- name: github.com/t11e/glidetest\n  version: 399832009187ce47fde554d6d174b83ce58d13e2\n```\nNow I edit glide.yaml\u00a0to move to a different branch:\n``` shell\n$ grep -A1 glidetest glide.yaml\n- name: github.com/t11e/glidetest\n  version: branch_y\n$ glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/t11e/glidetest.\n[INFO] Setting version for github.com/t11e/glidetest to branch_y.\n[...]\n$ grep -A1 glidetest glide.lock\n- name: github.com/t11e/glidetest\n  version: 399832009187ce47fde554d6d174b83ce58d13e2\n$ (cd vendor/github.com/t11e/glidetest && git rev-parse HEAD)\n399832009187ce47fde554d6d174b83ce58d13e2\n```\nSecond try:\n``` shell\n$ glide up\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/t11e/glidetest.\n[INFO] Setting version for github.com/t11e/glidetest to branch_y.\n[...]\n$ grep -A1 glidetest glide.lock\n- name: github.com/t11e/glidetest\n  version: f28c1858bf5a4b0c4a23c33b09a97dc6cc6683bb\n```\nPerhaps git fetch is not being done? It ought to always be doing a fetch + git reset --hard to move HEAD to the new version, but evidently not.\n. @mattfarina I have a working dir with the problem, where I can reproduce the problem consistently \u2014 ie.,  glide up does nothing even though HEAD is behind, no matter how many times I run it. This is a private repo, so I can't share the code, though. How can we debug this?\n. Never mind, I don't have a repo. But I may be able to create one.\n. @mattfarina So can we expect anything to happen here? I can't imagine I'm the only one hit by this problem.\n. This should closed in favour of #252.\n. Great, I'll test it when it's merged.\n. Having what I believe is the same problem, during glide get and glide up:\n[INFO]  Found Godeps.json file in /Users/alex/.glide/cache/src/https-github.com-stretchr-testify\n[INFO]  --> Parsing Godeps metadata...\n[INFO]  --> Fetching updates for github.com/stretchr/objx.\n[INFO]  --> Setting version for github.com/stretchr/objx to cbeaeb16a013161a98496fad62933b1d21786672.\n[INFO]  --> Fetching updates for github.com/pmezard/go-difflib.\n[INFO]  --> Setting version for github.com/pmezard/go-difflib to d8ed2627bdf02c080bf22230dbb337003b7aba2d.\n[INFO]  --> Fetching updates for github.com/lann/builder.\n[INFO]  --> Fetching google/protobuf.\n[WARN]  Unable to checkout google/protobuf\n[ERROR] Error looking for google/protobuf: Cannot detect VCS\nWhere does google/protobuf\u00a0come from?\nI boiled it down to some Go files in my repo (generated by Protobuf). If I stash them, glide works again. I can reproduce this consistently. They contain these imports:\nimport proto \"github.com/golang/protobuf/proto\"\nimport fmt \"fmt\"\nimport math \"math\"\nimport _ \"github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api\"\nimport google_protobuf \"google/protobuf\"\nimport google_protobuf2 \"google/protobuf\"\nNow, obviously the last two imports aren't correct, but why on earth is Glide reading them?\n. It seems to generally be golang.org repos. I've tried fetching their repos in a loop (without Glide), but I'm not able to get any network errors or any other kind of error.. ",
    "DallanQ": "I've gotten around this by removing the version number in the lock file for a package that I want to update more frequently than the others. Deleting the package files from the vendor directory followed by glide install updates the package to the latest version. This is not a great solution, but I haven't come up with a better way. \nI agree it would really be nice to have glide up <some packagename>\n. ",
    "IvanMalison": "Is anyone working on this actively?\n. Status?\n. ",
    "pbennett": "Seeing same (w/ 0.9.0-rc1)\n. ",
    "chancez": "This might deserve a new issue, but it would also be good if glide list had a flag so it could also inspect my project's test files imports, and include those in the list. \n. Yah having text and json would be awesome. Json could have lots of\nmetadata, one json object per line (event stream basically) and it could\neasily be consumed by lots of tools.\nOn Mon, Feb 15, 2016 at 8:01 AM Matt Farina notifications@github.com\nwrote:\n\n@chancez https://github.com/chancez I like the idea of making the\noutput usable for other tools. I'm wondering if we should support a couple\nformats. Text by default but also a flag for json. Thoughts?\nNote, we need to make sure the output goes to standard out, too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/256#issuecomment-184271465.\n. @mattfarina Yeah, sorry, I was planning on finishing it off, but you were so quick, so I don't mind! Thanks.\n. This is what i would prefer. I think the global cache lock is a good idea, and most people who want multiple glide processes can have multiple cache directories (each with their own lock). It seems like it would also make it easier to support updating individual vendored packages at a time.\n. Seems racy to me. Nothing else gets blocked on the signal, so after you unlock it, another go routine could potentially acquire (create) a lock after this call, and before the exit. \n. \n",
    "jrsanz1": "Had a chance to look at the code this morning. Looking at glide/utitl/util.go there's a set of regex for supported VCSs along with their hostnames. Easy fix for me is to hard-code my git repo hostname and regex pattern into this list.\nWould be nice to dynamically define valid hostnames for glide to use thru a command and/or configuration file.\n. It does, thanks.\n. I'm also seeing this but only on windows version: 0.9.0-rc1\nOn osx using version : 0.9.0-rc1-4-gd0a4453 the result is empty import.\npackage: bitbucket.org/soandso/package\nimport: []\n. I'm able to replicate this on Windows 10 64-bit\nglide -v\nglide version 0.9.0-rc1\ngo env\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=C:\\dev\\go\\\nset GORACE=\nset GOROOT=C:\\go\nset GOTOOLDIR=C:\\go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=1\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nglide.exe is located in %GOROOT% and %GOPATH% contains the expected 'src' directory \n. Ok I have discovered why this is happening. Just to clarify my codebase is under GOPATH so all of that is normal. I've been using Visual Studio Code for development, and in has this option to right click on the working folder and select 'Open in command prompt' from there I've been executing my go commands and the 'glide create' which yields the invalid yaml file. If I start up the command prompt normally, navigate to my working folder and run 'glide create' the yaml file with the empty import gets created. Sorry for the confusion this is obviously an issue with my setup and how I'm running VSCode. Thanks.\n. ",
    "xuqingfeng": "@technosophos @mhoglan \nglide.yaml\nyaml\npackage: bitbucket.org/jsxqf/hpack-cli\nimport:\n  - package: github.com/Sirupsen/logrus\n    version: 0.9.0\n    repo: git@github.com:Sirupsen/logrus.git\n  - package: github.com/codegangsta/cli\n    version: master\n    repo: git@github.com:codegangsta/cli.git\nmain.go\n``` go\nimport (\n    \"bitbucket.org/jsxqf/hpack-cli/util\"\n    log \"bitbucket.org/jsxqf/hpack-cli/vendor/github.com/Sirupsen/logrus\"\n    \"bitbucket.org/jsxqf/hpack-cli/vendor/github.com/codegangsta/cli\"\n    \"os\"\n    \"time\"\n)\n```\nPS. \nGOPATH: /Users/xuqingfeng/Godir\nexport GO15VENDOREXPERIMENT=1 is removed\nAlso note that I update golang to 1.6 and glide to 0.9.0, but still can't make it work.\n. @technosophos \nWhich means I also need to go get github.com/Sirupsen/logger while using glide?\n(I want Sirupsen/logger only exists in vendor folder not $GOPATH/src/github.com folder)\n. Thanks Guys! \n. ",
    "bacongobbler": ":tada: \n. I'm also seeing this. Clean environment using glide v0.12.3 in a docker container with https://github.com/kubernetes/helm/commit/787d486cf06c9d79fb38588f5c047240997a17be.\n\u03bb docker run -itv /c/Users/bacongobbler/go/src/k8s.io/helm:/go/src/k8s.io/helm golang:1.9 bash\nroot@e724bc173c49:/go# cd src/k8s.io/helm/\nroot@e724bc173c49:/go/src/k8s.io/helm# glide up\nbash: glide: command not found\nroot@e724bc173c49:/go/src/k8s.io/helm# cd ../..\nroot@e724bc173c49:/go/src# mkdir -p github.com/Masterminds\nroot@e724bc173c49:/go/src# cd github.com/Masterminds/\nroot@e724bc173c49:/go/src/github.com/Masterminds# git clone https://github.com/Masterminds/glide\nroot@e724bc173c49:/go/src/github.com/Masterminds# cd glide/\nroot@e724bc173c49:/go/src/github.com/Masterminds/glide# git checkout v0.12.3\nroot@e724bc173c49:/go/src/github.com/Masterminds/glide# make build\nroot@e724bc173c49:/go/src/github.com/Masterminds/glide# mv glide /go/bin/\nroot@e724bc173c49:~# cd /go/src/k8s.io/helm/\nroot@e724bc173c49:/go/src/k8s.io/helm# glide up\n[ERROR] Error scanning github.com/stretchr/testify/assert: cannot find package \".\" in:\n        /root/.glide/cache/src/https-github.com-stretchr-testify/assert\n[ERROR] Failed to retrieve a list of test dependencies: Error resolving imports\nI can work around this if I do a bare git clone https://github.com/stretchr/testify /root/.glide/cache/src/https-github.com-stretchr-testify then call glide up.\nThe repository does not have github.com/stretchr/testify imported anywhere other than in a test file.\nroot@e724bc173c49:/go/src/k8s.io/helm# git grep testify\nglide.lock:- name: github.com/stretchr/testify\nglide.yaml:- package: github.com/stretchr/testify\npkg/chartutil/files_test.go:    \"github.com/stretchr/testify/assert\"\nUsage: https://github.com/kubernetes/helm/blob/787d486cf06c9d79fb38588f5c047240997a17be/glide.yaml#L85-L89. rm -rf ~/.glide/cache.. do you have an example glide.yaml and glide.lock that can reproduce this failure?. do you have an example glide.yaml and glide.lock that can reproduce this failure?. turns out this is because I'm running with --strip-vendor so I'm shooting myself in the foot. Closing!. Glide acts similar to how bundler works with their Gemfile and Gemfile.lock. One is the defined list of semver ranges you want for your library, and the lockfile is the actual version that was fetched using glide. Makes sense?. https://github.com/Masterminds/glide/releases/tag/v0.13.2 was released yesterday with a bugfix for this particular issue. This stack trace in particular was fixed for Helm, so it's likely fixed for other projects.. https://github.com/Masterminds/glide/releases/tag/v0.13.2 was released yesterday with a bugfix for this particular issue. This stack trace in particular was fixed for Helm, so it's likely fixed for other projects. This PR may be defunct in that case and should probably be closed.. certainly. Done\n. ",
    "heewa": "Oh, I didn't know about plugins. I'll do that instead. Thanks!\n. Pending changes from PR #489, here's the plugin version of this change: glide-brew\n. There's glide-brew for turning glide deps into Homebrew resources.\n. ",
    "hasmichaelh": "I don't think you want to have to keep a file in the source like a version.go that has to be bumped each time.  It will constantly be out of alignment as things occur.  Especially on branches and development work.   Relying on just the tagging annotation and the git workspace information like commits ahead, branch etc... is good.  \nAlso a build is more than just the git information, it is also the environment that it came from.  That was our reason for injecting it all at build time and generating the version information then and not checking it in.  I wanted to be able to check any binary on a system and know if it was an official blessed build or did someone build it locally and transfer it in.\nAre you bringing up the go get as you want to be able to have a solution that will allow someone to download the source via go get which will automatically build and install it?  But I don't believe it will automatically do go generate.\nShould also note, my situation is a little different.  I am deploying binaries and not golang source to be built on the system.  So its easier for me to rely on a method that is at build time on a controlled server.\n. ",
    "xentek": "For what it's worth, go1.7 will remove the environment variable and the vendor feature may not have a way to be disabled... meaning that this change won't last for much longer than 6 months when 1.7 comes around...\n. ",
    "hanyong": "Seems new guru tool support go vendor good, I agree that work without go vendor feature is useless.\n. ",
    "DavidJFelix": "I've been using glide per the usage section since go 1.5 successfully.\nHere is exactly what I'm doing. You can repeat the results with docker\nIt's not clear what I'm doing wrong, since it used to work in 1.5\n. I've tried that too. Nothing but moving vendor into vendor/src helps.\n. @mattfarina that seems to work, thanks!\n. ",
    "bwiggs": "Same here:\n[INFO] Fetching appengine/cloudsql into /home/ubuntu/.go_workspace/src/github.com/...../vendor\n[WARN] Error looking for appengine/cloudsql: Cannot detect VCS\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for appengine/cloudsql.\n[WARN] Unable to checkout appengine/cloudsql\n[ERROR] Update failed for appengine/cloudsql: Cannot detect VCS\n. We're having a similar issue:\n[ERROR] Error scanning github.com/lib/pq/oid: found packages oid (doc.go) and main (gen.go) in /home/ubuntu/.go_workspace/src/github.com/evosure/kraken/vendor/github.com/lib/pq/oid\n. ",
    "soul9": "couldn't this be a warning instead of an error? since go happily builds these packages. some of these packages ( e.g. golang.org/x/text/encoding/charmap ) are even on golang.org.\nedit: does this have anything to do with go1.6?\n. ",
    "nickveenhof": "This issue drastically  improved the speed of glide for us. Huge huge thanks for this.\n. ",
    "advanderveer": "Yea, it awesome! Thanks\n. ",
    "nlamirault": "i'm using go 1.6 and a fresh glide dev : \n```\n$ go version\ngo version go1.6 linux/amd64\n$ glide -v\nglide version dev\n```\n. I update the test : \n```\n$ echo $GOPATH\n/home/nlamirault/Apps/golang\n$ cd $GOPATH/src/github.com/nlamirault\n$ git clone https://github.com/nlamirault/abraracourcix\nCloning into 'abraracourcix'...\nremote: Counting objects: 1985, done.\nremote: Compressing objects: 100% (91/91), done.\nremote: Total 1985 (delta 39), reused 0 (delta 0), pack-reused 1884\nReceiving objects: 100% (1985/1985), 6.91 MiB | 1.04 MiB/s, done.\nResolving deltas: 100% (492/492), done.\nChecking connectivity... done.\n$ cd abraracourcix\n$ glide install\nglide install\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for gopkg.in/mgo.v2.\n[INFO] Fetching updates for github.com/boltdb/bolt.\n[INFO] Fetching updates for github.com/labstack/echo.\n[INFO] Fetching updates for github.com/syndtr/goleveldb.\n[INFO] Fetching updates for github.com/garyburd/redigo.\n[INFO] Fetching updates for github.com/hashicorp/logutils.\n[INFO] Resolving imports\n[ERROR] Error scanning github.com/labstack/echo/middleware: open /home/nlamirault/Apps/golang/src/github.com/nlamirault/abraracourcix/vendor/github.com/labstack/echo/middleware: no such file or directory\n[ERROR] Error scanning github.com/garyburd/redigo/redis: open /home/nlamirault/Apps/golang/src/github.com/nlamirault/abraracourcix/vendor/github.com/garyburd/redigo/redis: no such file or directory\n[ERROR] Error scanning github.com/syndtr/goleveldb/leveldb: open /home/nlamirault/Apps/golang/src/github.com/nlamirault/abraracourcix/vendor/github.com/syndtr/goleveldb/leveldb: no such file or directory\n[ERROR] Error scanning gopkg.in/mgo.v2/bson: open /home/nlamirault/Apps/golang/src/github.com/nlamirault/abraracourcix/vendor/gopkg.in/mgo.v2/bson: no such file or directory\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 6 dependencies.\nAn Error has occured\n``\n. Hi,\ni clone the repository into $GOPATH, deletevendordirectory and do aglide install` and it works fine.\nAnother question : it is possible to push golang dependencies code into remote repository (like [1]).\nMy remote repository doesn't contains code [2], but beats project seems to push  dependencies code [3].\nHow to do this ?\n[1] : https://github.com/elastic/beats\n[2] : https://github.com/nlamirault/abraracourcix/tree/master/vendor/github.com/garyburd\n[3] : https://github.com/elastic/beats/tree/master/vendor/github.com/garyburd/redigo\n. Thanks it works fine. But concerning code dependencies ?\nit is possible to push golang dependencies code into remote repository (like [1]).\nMy remote repository doesn't contains code [2], but beats project seems to push dependencies code [3].\nHow to do this ?\n[1] : https://github.com/elastic/beats\n[2] : https://github.com/nlamirault/abraracourcix/tree/master/vendor/github.com/garyburd\n[3] : https://github.com/elastic/beats/tree/master/vendor/github.com/garyburd/redigo\n. To be safe the recovered code (broken repository, deleted repository, ....). Beats seems to used glide and add dependencies code too.\n. Thanks it works now using the new tool.\n. ",
    "nadermx": "I'm also getting this, and as @itscaro said you refrenced the same issue @mattfarina  trying to upgrade but can't seem to figure it out.\n. ",
    "hstern": "Was this ever fixed?. ",
    "brasilikum": "Unfortunately, the project is not public.\nIt is worth noting that the vendored projectfolders appear to be git submodules. \nIf I run git submodule status i get No submodule mapping found in .gitmodules for path 'vendor/github.com/Sirupsen/logrus' and there is no .gitmodules file.\nI use glide 0.9.0 on OSX El Capitan.\nI prefer solution 2 as I like the idea of reproducible builds.\n. ",
    "hero0926": "Same Error happens on Glide v.0.13.1 and Golang 1.9.4\nD:\\go_workspace\\src\\hero0926-api-test>glide install\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gorilla/mux\n[WARN]  Download failed.\n[ERROR] Update failed for github.com/gorilla/mux: Unable to update repository: exit status 128\n[ERROR] Failed to do initial checkout of config: Unable to update repository: exit status 128. @alon-abadi Why does glide stopped? Is it because of dep or other reason??. ",
    "smousa": "The reason why I am asking about it is because I have run into an issue where a dependency was no longer available, and it was breaking glide up (migrating from GoDeps). \n. Another question, and this might be a little off topic, but if the glide.yaml file allows you to specify certain subpackages within a repo, why does it still pull the whole repo?  (I am running 0.9.0, so I don't know if this has been fixed on the master branch)\n. Hi, this could be related to the conversation here: https://github.com/Masterminds/glide/issues/289\n. ",
    "daniel-garcia": "@technosophos @mattfarina  removing the VCS directories is equivalent performing an 'svn export' / 'git export' and does not constitute modifications of software. The act of checking in source in the vendor directory is carried out by the end user and not by glide. Furthermore, glide does not check any license  to see if it is compatible with the current project. License compliance is the responsibility of the entity composing the software and not of the management tool. \nLicense compliance is another topic altogether and glide has no support for license compliance or auditing. There are many commercial products for that purpose already.\n. ",
    "neilpa": "Similarly glide init generates a yaml file where the main package depends on itself. Using this project as an example if I nuke the existing glide.yaml and regenerate it\n```\n~/code/go/src/github.com/masterminds/glide \u276f rm glide.yaml glide.lock\n~/code/go/src/github.com/masterminds/glide \u276f glide init\n[INFO] Generating a YAML configuration file and guessing the dependencies\n[INFO] Attempting to import from other package managers (use --skip-import to skip)\n[INFO] Found reference to github.com/Masterminds/glide/action\n[INFO] Adding sub-package cfg to github.com/Masterminds/glide\n[INFO] Adding sub-package dependency to github.com/Masterminds/glide\n[INFO] Adding sub-package gb to github.com/Masterminds/glide\n[INFO] Adding sub-package godep to github.com/Masterminds/glide\n[INFO] Adding sub-package gpm to github.com/Masterminds/glide\n[INFO] Adding sub-package importer to github.com/Masterminds/glide\n[INFO] Adding sub-package msg to github.com/Masterminds/glide\n[INFO] Adding sub-package path to github.com/Masterminds/glide\n[INFO] Adding sub-package repo to github.com/Masterminds/glide\n[INFO] Adding sub-package tree to github.com/Masterminds/glide\n[INFO] Adding sub-package util to github.com/Masterminds/glide\n[INFO] Found reference to github.com/Masterminds/semver\n[INFO] Found reference to github.com/Masterminds/vcs\n[INFO] Found reference to github.com/codegangsta/cli\n[INFO] Found reference to gopkg.in/yaml.v2\n~/code/go/src/github.com/masterminds/glide \u276f cat glide.yaml\npackage: github.com/masterminds/glide\nimport:\n- package: github.com/Masterminds/glide\n  subpackages:\n  - action\n  - cfg\n  - dependency\n  - gb\n  - godep\n  - gpm\n  - importer\n  - msg\n  - path\n  - repo\n  - tree\n  - util\n- package: github.com/Masterminds/semver\n- package: github.com/Masterminds/vcs\n- package: github.com/codegangsta/cli\n- package: gopkg.in/yaml.v2\n``\n. I'm using version 0.9.1 installed via homebrew on OSX 10.11.3\n. Just tried viago getand see the same issue.\n. In my case I'm not using symlinks and everything is under$GOPATH(~/code/go` as above).\n. I installed go via homebrew. \nsh\n~ \u276f go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/neilpa/code/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nI can help debug this further if you point me toward potential offending code since I can repro this against glide master.\n. No symlinks whatsoever.\n. After updating to 0.9.3 I can't repro consistently anymore. I was able to repro the glide init issue from above a couple of times but most of the time it works. \n. ",
    "sbxalex": "I have the same case as the OP: I have a project of the form github.com/myorg/myproject that contains several sub-packages, and if I glide up, I get the selfsame project github.com/myorg/myproject vendored into itself, thereby losing local changes during go build.\nI'm also on Glide 0.9.1 on OS X 10.11.3, installed via Homebrew:\n``` bash\n$ glide --version\nglide version 0.9.1\n$ go version\ngo version go1.6 darwin/amd64\n$ brew info glide\nglide: stable 0.9.1 (bottled), HEAD\nSimplified Go project management, dependency management, and vendoring\nhttps://github.com/Masterminds/glide\n/usr/local/Cellar/glide/0.9.1 (5 files, 11.6M) *\n  Poured from bottle\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/glide.rb\n==> Dependencies\nBuild: go \u2714\n``\n. @atombender Thanks, that's helpful. The problem indeed goes away when I enter my$GOPATHdirectly, instead of being in a different path on the filesystem that is symlinked under$GOPATH`. It looks like these two issues might be closely related.\n. ",
    "hjkelly": "For the record, I had this problem and it was because my $GOPATH/src/github.com/<username>/<project> was a symlink to the more convenient directory I normally work in. Deleting the symlink and moved the convenience directory there kept it from finding/installing duplicates of my submodules.\n. ",
    "veqryn": "I can confirm I have the same or a similar issue to the original poster.\nI am running:\nWindows 7, updated to latest service pack, etc.\nGolang 1.6.\nGlide version 9.3 pulled right from master today (2014-03-14, commit d5fc6b676a752b37f2646d91e9a463c97eb00519).\nI have no symlinks at all, and GOPATH is set properly.\nglide update fails to update my glide.lock file with the new commit hashes.\nIf I update them manually and then glide install it will work fine.  And if I glide update inside a docker container that has golang and glide installed, that also works just fine.\nI run my commands, such as glide update through either git-bash or mingw.  I don't seem to have these issues if I run them through the horrible cmd.  I have a feeling this is a Windows issue.\nExample output below.  In this case api/ciolite is my own code, and glide should not be trying to update it.  It also fails to update the version of logrus in the lock file, though it doesn't say any errors about it below.\n$ glide update\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n...\n[INFO] Resolving imports\n[INFO] Fetching api\\ciolite into c:\\Users\\xxxxxx\\workspace\\xxxxxx\\golang\\src\\vendor\n[ERROR] Error looking for api\\ciolite: Cannot detect VCS\n...\n[WARN] Unable to checkout api/ciolite\n[ERROR] Update failed for api/ciolite: Cannot detect VCS\n...\nCannot detect VCS\n. My yaml looks approximately like this, but with more packages (all of which start with github.com):\npackage: .\nimport:\n- package: github.com/Sirupsen/logrus\nI can also confirm that I got the error today on linux ubuntu, when specifying the yaml file:\nglide --home ./src/glide.yaml install\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n...\n[INFO] Resolving imports\n[INFO] Fetching api/ciolite into /xxxxxx/xxxxxx/vendor\n[ERROR] Error looking for api/ciolite: Cannot detect VCS\n...\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for api/ciolite.\n...\n[WARN] Unable to checkout api/ciolite\n[ERROR] Update failed for api/ciolite: Cannot detect VCS\n...\nCannot detect VCS\n. @mattfarina do you mean that my glide.yaml and glide.lock file should be underneath a subdirectory of $GOPATH/src?\n. Not sure if related, but I tried going up a directory (to $GOPATH/src/api/).\nWhen running glide init inside a regular windows cmd terminal, Glide generated a yaml file like this:\npackage: api\nimport:\n- package: github.com/Sirupsen/logrus\n  subpackages:\n  - github.com\\Sirupsen\\logrus\n- package: github.com/aws/aws-sdk-go\n  subpackages:\n  - github.com\\aws\\aws-sdk-go\\aws\n  - github.com\\aws\\aws-sdk-go\\aws\\credentials\nThis looks fine I suppose, except that the slashes are forwardslash instead of backslash under subpackages, and the subpackages needlessly duplicate the regular package, and that the subpackages contain the root of the packages.\nAnd when I ran glide init under mingw, I get something like this:\npackage: api\nimport:\n- package: api/ciolite\n  subpackages:\n  - api\\ciolite\n- package: github.com/Sirupsen/logrus\n  subpackages:\n  - github.com\\Sirupsen\\logrus\n- package: github.com/aws/aws-sdk-go\n  subpackages:\n  - github.com\\aws\\aws-sdk-go\\aws\n  - github.com\\aws\\aws-sdk-go\\aws\\credentials\nI have no idea why it is insisting on listing my own code as a package...\n. Git symlinks on windows also cause this error message to come up, forcing me to delete my .glide folder every time I want to update my vendor directory.\nSee example here: https://github.com/prometheus/procfs/issues/60\n. I too am getting this error, with glide 0.10.2.\nIt only started happening after I added an additional subpackage to golang.org/x/net.\nAfter adding that item to the glide.yaml file, I deleted the glide.lock file so that glide could regenerate it with the correct info.  It was at that point when everything broke with the same error.\nHere is the before yaml:\n- package: golang.org/x/net\n  subpackages:\n  - context\nHere is the after yaml:\n- package: golang.org/x/net\n  subpackages:\n  - context\n  - publicsuffix\nHere is the error text:\n+ glide install\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/DavidHuie/gomigrate.\n[INFO] Fetching updates for github.com/ant0ine/go-json-rest.\n[INFO] Fetching updates for github.com/sendgrid/smtpapi-go.\n[INFO] Fetching updates for github.com/Sirupsen/logrus.\n[INFO] Fetching updates for github.com/davecgh/go-spew.\n[INFO] Fetching updates for github.com/speps/go-hashids.\n[INFO] Fetching updates for github.com/lib/pq.\n[INFO] Fetching updates for github.com/aws/aws-sdk-go.\n[INFO] Fetching updates for github.com/jmoiron/sqlx.\n[INFO] Fetching updates for github.com/sendgrid/sendgrid-go.\n[INFO] Fetching updates for github.com/garyburd/go-oauth.\n[INFO] Fetching updates for github.com/golang/protobuf.\n[INFO] Fetching updates for golang.org/x/text.\n[INFO] Fetching updates for google.golang.org/grpc.\n[INFO] Fetching updates for github.com/nabeken/aws-go-sqs.\n[INFO] Fetching updates for github.com/dgrijalva/jwt-go.\n[INFO] Fetching updates for github.com/robfig/cron.\n[INFO] Fetching updates for github.com/asaskevich/govalidator.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Setting version for github.com/golang/protobuf to 89238a3245885ada85d2f4fdbe76adae392df69b.\n[INFO] Setting version for google.golang.org/grpc to b564fc98e00f97388fe2076ab6ea86d912085acc.\n[INFO] Resolving imports\n[INFO] Fetching updates for golang.org/x/sys.\n[INFO] Fetching updates for github.com/hashicorp/go-multierror.\n[INFO] Fetching updates for github.com/motemen/go-loghttp.\n[INFO] Fetching updates for github.com/go-ini/ini.\n[INFO] Fetching net/http/httptrace into /var/golang/src/vendor\n[WARN] Error looking for net/http/httptrace: Cannot detect VCS\n[INFO] Fetching updates for github.com/hashicorp/errwrap.\n[INFO] Fetching updates for github.com/jmespath/go-jmespath.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for net/http/httptrace.\n[WARN] Unable to checkout net/http/httptrace\n[ERROR] Update failed for net/http/httptrace: Cannot detect VCS\n[ERROR] Could not update packages: Cannot detect VCS\nHere is the full BEFORE glide.yaml:\npackage: .\nimport:\n- package: github.com/DavidHuie/gomigrate\n- package: github.com/Sirupsen/logrus\n- package: github.com/ant0ine/go-json-rest\n  subpackages:\n  - rest\n- package: github.com/asaskevich/govalidator\n- package: github.com/aws/aws-sdk-go\n  subpackages:\n  - aws\n  - aws/credentials\n  - aws/session\n  - service/sqs\n- package: github.com/davecgh/go-spew\n  subpackages:\n  - spew\n- package: github.com/dgrijalva/jwt-go\n- package: github.com/garyburd/go-oauth\n  subpackages:\n  - oauth\n- package: github.com/jmoiron/sqlx\n- package: github.com/lib/pq\n- package: github.com/nabeken/aws-go-sqs\n  subpackages:\n  - queue\n  - queue/option\n- package: github.com/robfig/cron\n- package: github.com/sendgrid/sendgrid-go\n- package: github.com/sendgrid/smtpapi-go\n- package: github.com/speps/go-hashids\n- package: golang.org/x/text\n  subpackages:\n  - language\n- package: google.golang.org/grpc\n  version: b564fc98e00f97388fe2076ab6ea86d912085acc\n  subpackages:\n  - .\n  - credentials\n- package: golang.org/x/net\n  subpackages:\n  - context\n- package: github.com/golang/protobuf\n  version: 89238a3245885ada85d2f4fdbe76adae392df69b\n  subpackages:\n  - proto\nHere is the full BEFORE glide.lock file:\nhash: 7ade2d20710e616d50c20935fc55b195865589dd780da0da71cc3dd754d98845\nupdated: 2016-05-17T22:23:10.51609493Z\nimports:\n- name: github.com/ant0ine/go-json-rest\n  version: cfd0da14df1db088980175e1c3c7e77c11b90718\n  subpackages:\n  - rest\n  - rest/trie\n- name: github.com/asaskevich/govalidator\n  version: 37d5f827499d1c346df42f2ad7fcb7f453833a57\n- name: github.com/aws/aws-sdk-go\n  version: 7bad22e9cff8295edef29844b4daa55ecfb057b9\n  subpackages:\n  - aws\n  - aws/credentials\n  - aws/session\n  - service/sqs\n  - service/sqs/sqsiface\n  - aws/awserr\n  - aws/awsutil\n  - aws/client\n  - aws/client/metadata\n  - aws/request\n  - private/protocol\n  - private/protocol/query\n  - private/signer/v4\n  - aws/corehandlers\n  - aws/defaults\n  - private/endpoints\n  - private/protocol/query/queryutil\n  - private/protocol/xml/xmlutil\n  - private/protocol/rest\n  - aws/credentials/ec2rolecreds\n  - aws/ec2metadata\n- name: github.com/davecgh/go-spew\n  version: 5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\n  subpackages:\n  - spew\n- name: github.com/DavidHuie/gomigrate\n  version: 1b90a570dc6b7aaaefa233eacf304be363a89603\n- name: github.com/dgrijalva/jwt-go\n  version: 40bd0f3b4891a9d7f121bfb7b8e8b0525625e262\n- name: github.com/garyburd/go-oauth\n  version: 719b069913e1151a73ea30d2ea4f90deda3ce234\n  subpackages:\n  - oauth\n- name: github.com/go-ini/ini\n  version: 12f418cc7edc5a618a51407b7ac1f1f512139df3\n- name: github.com/golang/protobuf\n  version: 89238a3245885ada85d2f4fdbe76adae392df69b\n  subpackages:\n  - proto\n- name: github.com/hashicorp/errwrap\n  version: 7554cd9344cec97297fa6649b055a8c98c2a1e55\n- name: github.com/hashicorp/go-multierror\n  version: d30f09973e19c1dfcd120b2d9c4f168e68d6b5d5\n- name: github.com/jmespath/go-jmespath\n  version: 0b12d6b521d83fc7f755e7cfc1b1fbdd35a01a74\n- name: github.com/jmoiron/sqlx\n  version: 398dd5876282499cdfd4cb8ea0f31a672abe9495\n  subpackages:\n  - reflectx\n- name: github.com/lib/pq\n  version: ee1442bda7bd1b6a84e913bdb421cb1874ec629d\n  subpackages:\n  - oid\n- name: github.com/motemen/go-loghttp\n  version: f1552ae0d8e6d1980d67843f78b761a5fade8f67\n  subpackages:\n  - global\n- name: github.com/nabeken/aws-go-sqs\n  version: 251de2ff3f19156c15bc5ecd155cc3f904c4fe29\n  subpackages:\n  - queue\n  - queue/option\n- name: github.com/robfig/cron\n  version: 8dc4916d418b9d0b2e23c9c1e68351dc9a1d6573\n- name: github.com/sendgrid/sendgrid-go\n  version: 6ea8b2b2d54b2e54efcf8668867289a1838d96fd\n- name: github.com/sendgrid/smtpapi-go\n  version: b616837442153d876b2d0b84d09e5e48a2aa91ee\n- name: github.com/Sirupsen/logrus\n  version: cd7d1bbe41066b6c1f19780f895901052150a575\n- name: github.com/speps/go-hashids\n  version: d1d57a886aa7e3ef6092b70ceab077e35ee8e0ce\n- name: golang.org/x/net\n  version: ef00b378c73f107bf44d5c9b69875255ce89b79a\n  subpackages:\n  - context\n  - http2\n  - trace\n  - http2/hpack\n  - internal/timeseries\n- name: golang.org/x/sys\n  version: d4feaf1a7e61e1d9e79e6c4e76c6349e9cab0a03\n  subpackages:\n  - unix\n- name: golang.org/x/text\n  version: f773ec03ce334298742df7f3108fc0d402646d22\n  subpackages:\n  - language\n  - internal/tag\n- name: google.golang.org/grpc\n  version: b564fc98e00f97388fe2076ab6ea86d912085acc\n  subpackages:\n  - .\n  - credentials\n  - codes\n  - grpclog\n  - internal\n  - metadata\n  - naming\n  - transport\n  - peer\ndevImports: []\n. I don't think it was a matter of adding that extra subpackage, I think it was an issue with having it regenerate the lock file, because even if I keep the same yaml file as before, but regenerate the lock file, then I still get the same error.\n. This is the commit to golang.org/x/net that showed this problem in glide: https://github.com/golang/net/commit/3b993948b6f0e651ffb58ba135d8538a68b1cddf\nGlide can't find net/http/httptrace in the stdlib and decides to try downloading it.\nSeems the maker's of x/net are using a library in a future version of golang...\n. ",
    "chenziliang": "May i ask i how to get this workaround ? i still saw this issue by using version  0.12.3. ",
    "giniedp": "I am facing the same issue. However, i can workaround that in my case but i am not totally happy with the solution. Here is the setup\n\nthe projects main directory is called gbc3\nit is located in a convenient location.\nit is symlinked into the $GOPATH/src directory\nmain directory does not contain any go code\nall go code is in the subdirectory backend\n\nGlide vendors all local dependencies if i run glide init from within $GOPATH/src/gbc3 (or CONVENIENTDIR/gbc3) \nGlide vendors only external dependencies if i run it from $GOPATH/src/gbc3/backend. This is currently my workaround. However, i would like be able to run glide from the projects root directory.\nMy Env:\n macOS Sierra\n glide version 0.12.3 via homebrew\n* glide version 0.13.0-dev via go get\nhere is the go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/alex/repositories/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/opt/go/libexec\"\nGOTOOLDIR=\"/usr/local/opt/go/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/k1/wpppkyn91v7239smq8l90flh0000gn/T/go-build837011296=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\". ",
    "ggerrietts": "I came here with this problem -- I have /Volumes/source/golang as my GOPATH and a symlink in my home directory ~/golang for ease of navigation. I kept seeing my subpackages vendored and I could not understand why.\nI'm glad this issue exists, but it might be a good FAQ entry.. ",
    "sunzl1989": "Has this issue been looked at? We are also seeing the same issue. \n. The issue cannot be reproduced reliably. And the libraries failed to be installed are different each time.\nAs @ghost pointed out, the errors are always like:\nfatal: could not create leading directories of XXX: File exists\nFailed to set version on XXX to YYY: open XXX: no such file or directory\n. ",
    "sectioneight": "I'm also running into this issue on my build servers:\nThe error is coming from VcsUpdate: https://github.com/Masterminds/glide/blob/815d933fc6de40fb433c05b5e717716f0129013d/repo/vcs.go#L48-L51\nHere is an excerpt of the build logs, running glide install with an empty vendor directory (fresh clone):\n[INFO] Fetching updates for golang.org/x/crypto.\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for golang.org/x/sys.\n[INFO] \u001bFetching updates for gopkg.in/fsnotify.v1.\n[WARN] Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: fatal: could not create leading directories of '/var/cache/build/vendor/golang.org/x/sys': File exists\n: exit status 128\n[INFO] \u001bFetching updates for gopkg.in/validator.v2.\n[WARN] \u001bUnable to checkout golang.org/x/net\n[ERROR] Update failed for golang.org/x/net: fatal: could not create leading directories of '/var/cache/build/vendor/golang.org/x/net': File exists\n: exit status 128\nGoogling around for the \"could not create leading directories\" error, this seems to be coming from git itself. Which makes sense. Basically, it looks like a race where two simultaneous git clones are run, although I can't reproduce this (perhaps git is doing its own locking?)\n. That sounds about right -- we're seeing issues on Ubuntu Precise servers, but not on Debian Jessie, which has a more recent git\n. Confirmed that it's due to an old git. The following script will panic on git 1.7:\n```\n\u276f\u276f\u276f cat test.go                                                                                                                                                                    \u23ce\npackage main\nimport (\n    \"fmt\"\n    \"os/exec\"\n    \"sync\"\n)\ntype r struct {\n    Source      string\n    Destination string\n}\nfunc main() {\n    var wg sync.WaitGroup\n    repos := []r{\n        {\n            Source:      \"https://github.com/golang/crypto\",\n            Destination: \"vendor/golang.org/x/crypto\",\n        },\n        {\n            Source:      \"https://github.com/golang/net\",\n            Destination: \"vendor/golang.org/x/net\",\n        },\n    }\n    for _, repo := range repos {\n        wg.Add(1)\n        go func(repo r) {\n            defer wg.Done()\n            cmd := exec.Command(\"git\", \"clone\", repo.Source, repo.Destination)\n            bs, err := cmd.CombinedOutput()\n            fmt.Println(string(bs))\n            if err != nil {\n                panic(err)\n            }\n        }(repo)\n    }\n    wg.Wait()\n}\n\u276f\u276f\u276f go run test.go\nfatal: could not create leading directories of 'vendor/golang.org/x/crypto': File exists\npanic: exit status 128\ngoroutine 5 [running]:\nmain.main.func1(0xc82000a360, 0x54e280, 0x20, 0x54a140, 0x1a)\n    /home/aiden/test.go:34 +0x2b0\ncreated by main.main\n    /home/aiden/test.go:36 +0x1af\ngoroutine 1 [semacquire]:\n...\n\u276f\u276f\u276f git --version                                                                                                                                                                  \u23ce\ngit version 1.7.9.5\n```\nWorks fine on 2.3 (which is what's on our Debian Jessie servers)\n. Just tested with 0.10.2, and the issue is still present:\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/BurntSushi/toml.\n[INFO] Fetching updates for github.com/getsentry/raven-go.\n[INFO] Fetching updates for github.com/codahale/hdrhistogram.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for github.com/kr/pretty.\n[INFO] Fetching updates for github.com/spf13/cast.\n[INFO] Fetching updates for github.com/pborman/uuid.\n[INFO] Fetching updates for github.com/spf13/jwalterweatherman.\n[INFO] Fetching updates for github.com/hashicorp/hcl.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Fetching updates for github.com/apache/thrift.\n[INFO] Fetching updates for github.com/kr/text.\n[INFO] Fetching updates for github.com/magiconair/properties.\n[INFO] Fetching updates for github.com/mitchellh/mapstructure.\n[INFO] Fetching updates for github.com/mgutz/ansi.\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for github.com/cactus/go-statsd-client.\n[WARN] Unable to checkout github.com/spf13/jwalterweatherman\n[ERROR] Update failed for github.com/spf13/jwalterweatherman: fatal: could not create leading directories of '/home/aiden/build/vendor/github.com/spf13/jwalterweatherman': File exists\n: exit status 128\n$ glide --version\nglide version 0.10.2\n$ git --version\ngit version 1.7.9.5\n. You can run test -n $TERM && tput colors 2 in a terminal to detect if a terminal supports colors. If the command exits non-zero, you're attached to a terminal that doesn't support colors.\n. I've tested it on linux and Mac. There may be a better way, but my\nunderstanding is that this is the most portable.\nOn Tue, Apr 5, 2016 at 11:07 AM Matt Farina notifications@github.com\nwrote:\n\nWhat environments does test -n $TERM && tput colors 2 work on? All unix,\nlinux, mac, and bsd?\n@sdboyer https://github.com/sdboyer the windows vs non-windows coloring\nloads separately and for Windows we don't have color right now. So, we\ndon't have to worry about it, yet.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/358#issuecomment-205923765\n. It actually does, believe it or not :)\n\nAnyway, yes, we can (and do) accomplish this today by hand, by editing the glide.yaml file to point to our mirror. This all works well. The problem is that it's opt-in, so if somebody forgets to do it (and  really, it's a pain to do manually anyway), then our build hosts will be pulling from github.com, which is considered a non-starter to our SRE team.\nWhat you've suggested, transparently rewriting the URLs in a custom glide, is the approach that seems easiest (nothing to maintain for you, we can write code specifically tailored to our needs internally).\nBefore I start going down that road, I was curious whether this issue has come up before, and whether it's worth making generic for you. Happy to do it either way. It sounds like a custom glide on our build servers is the best way to go for now.\n. DNS rewriting is interesting, but wouldn't be an out-of-the-box solution, in our case. It's not just hostname rewriting (regardless of the implications of SSH key verification), but the path attribute that comes after needs to have a \"github/\" prefix.\nI think the local cache would totally solve our use case. The only behavior I'm not sure would be defined for the filesystem cache, as opposed to the gitolite cache, is what happens when somebody force-pushes their master branch, and this orphans a ref that eventually gets garbage collected? Rare, and totally avoidable if people are being good citizens, but we really don't want a production build to ever fail due to changes happening outside of our control.\nIs there a timeline on the vsolver engine? Sounds like \"TBD\".\nI think in the interim we will patch our internal glide build to have this behavior, and then at some point we may be able to drop it.\nI'll close this for now. If somebody finds this issue at a future point in time and would like to see our code upstreamed, please re-open and I'll share.\nThanks!\n. Good question about transitive dependencies. We're currently solving this by patching masterminds/vcs internally, but there will likely need to be a PR to vcs as well to support transitive dep rewrites.\n. Yes, our end goal is the same: transparent rewrites including transitive dependencies\n. @crsmithdev would you like me to take over this PR?\n. I think you need to add me as a collaborator on https://github.com/crsmithdev/glide so I can push the branch associated with this PR\n. @mattfarina added the Tracker onto the VCS as well\n. This is not ready for merging yet though, this appears to have broken something:\n[INFO] Fetching updates for golang.org/x/net.\n[INFO] Fetching updates for golang.org/x/sys.\n[INFO] Fetching updates for gopkg.in/fsnotify.v1.\n[INFO] Fetching updates for gopkg.in/validator.v2.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references.\n[ERROR] Failed to set version on github.com/Sirupsen/logrus to be52937128b38f1d99787bb476c789e2af1147f1: open github.com/Sirupsen/logrus: no such file or directory\n[ERROR] Failed to set version on github.com/stretchr/testify to ^1.1.3: open github.com/stretchr/testify: no such file or directory\n[ERROR] Failed to set version on github.com/spf13/cobra to : Unable to retrieve checked out version\n. OK, functionality should be restored now, but I'd like an extra set of eyes on this given that I'm unfamiliar with the code and the path that was broken doesn't seem to be covered by existing tests.\nWhere would be the best place to add such tests?\n. ",
    "jacobpgallagher": "I upgraded my build servers from git 1.7 to git 2.x and that seemed to fix it.\n. ",
    "blackgold": "We have git 2.4 on build servers and we are seeing these errors sporadically.\n. ",
    "avarabyeu": "+1 also can reproduce\ngit version 2.14.1\nglide version 0.12.3\nIs it possible to make some lock-file or smth like that to at least make install sequential?. ",
    "ruiyang2015": "I use go get to install the glide, OS is OSX 10.11.3.\nGOPATH is empty, I am using go 1.6, with a vendor directory at the project root.\n. ",
    "deluan": "I have the same issue with my project: http://github.com/deluan/gosonic. \nGlide 0.10.0 (homebrew)\nMac OS X 10.11.3\nPWD: /Users/deluan/Development/go/src/github.com/deluan/gosonic\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/deluan/Development/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. Very similar:\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x20 pc=0xe3d33]\ngoroutine 1 [running]:\npanic(0x549da0, 0xc8200140f0)\n    /usr/local/Cellar/go/1.6/libexec/src/runtime/panic.go:464 +0x3e6\ngithub.com/Masterminds/glide/dependency.srcDir(0x0, 0x0, 0xc81ffcd1bd)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/dependency/resolver.go:893 +0x33\ngithub.com/Masterminds/glide/dependency.IsSrcDir(0x0, 0x0, 0xc81ffcd1bd)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/dependency/resolver.go:889 +0x2b\ngithub.com/Masterminds/glide/tree.walkDeps.func1(0x0, 0x0, 0x0, 0x0, 0xe085e0, 0xc82065c840, 0x0, 0x0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:48 +0x92\npath/filepath.Walk(0x0, 0x0, 0xc8206fe7f8, 0x0, 0x0)\n    /usr/local/Cellar/go/1.6/libexec/src/path/filepath/path.go:394 +0xa5\ngithub.com/Masterminds/glide/tree.walkDeps(0xc820196a90, 0x0, 0x0, 0xc820701ee1, 0x12, 0x0, 0x0, 0x0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:93 +0xc0\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0x0, 0x0, 0xc820701ee1, 0x12, 0x6, 0x0, 0xc82065c6f0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:19 +0x77\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0xc820618a40, 0x3f, 0xc8204cf281, 0x1e, 0x5, 0x0, 0xc8204e6390)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0xc8205a5770, 0x41, 0xc8206b89c1, 0x20, 0x4, 0x0, 0xc82019f500)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0xc8206d1ae0, 0x41, 0xc820123e61, 0x20, 0x3, 0x0, 0xc8206937d0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0xc8204d7640, 0x39, 0xc8201b8ba1, 0x18, 0x2, 0x0, 0xc82019f170)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc820196a90, 0xc82000e1c4, 0x3a, 0xc8201913e1, 0x19, 0x1, 0xc82017ed00, 0xc82019ecc0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/action.Tree(0xc82000e1c4, 0x3a, 0xc820194200)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/Masterminds/glide/action/tree.go:32 +0x385\nmain.commands.func13(0xc820194280)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/glide.go:575 +0x31\ngithub.com/codegangsta/cli.Command.Run(0x5ee5b0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x693ea0, 0x37, 0x0, ...)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/codegangsta/cli/command.go:174 +0x1399\ngithub.com/codegangsta/cli.(*App).Run(0xc820135cc0, 0xc82000a300, 0x2, 0x2, 0x0, 0x0)\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/src/github.com/codegangsta/cli/app.go:187 +0x112b\nmain.main()\n    /private/tmp/glide20160324-23307-1mcrn74/glide-0.10.0/glide.go:117 +0x644\n```\n. ",
    "kumarharsh": "I'm using npm v3 which has already flattened the folder structure as far it can.\n1. why is glide even going in those folders? can i disable some folders?\n2.  failing that, maybe glide can support long paths? like some node packages like rimraf do?\n. Thanks. I understand that that's how go works, but if we are \"absolutely\" sure that no go file can be in some directories, it might be useful to save that trouble (and time) on every glide update\n. @mattfarina any updates on this?\n. @mattfarina looks good, although I don't understand what you mean by review... I did this:\n1. I pull your changes into the existing glide folder in my Go workspace, and then I built it using this command:\ngo build .\\github.com\\Masterminds\\glide\\glide.go\nwhich gave me a glide.exe which I then placed in my project folder (for ease-of-use) and ran this:\n./glide.exe update\nand it still gives me the same error. Is there some more step involved, or maybe I'm doing something wrong since I'm not very familiar with how go builds the executable...\nAlso, the excludes option is set to node_modules - does it apply recursively, or only on first-level directories? Maybe that is why the error is coming\n. Yes, I've verified it, it works! Only top-level directories are ignored right now. For my use-case that's more than enough. Thanks a ton! :smile: \n. yeah, maybe excludeDirs would be a better name to avoid confusion. But it's great nonetheless, I can actually use glide now! :confetti_ball: \n. I get this same error on powershell too. It's not a WSL problem, but rather something to do with windows filesystem locking some file while glide is doing it's thing. And it's always random repositories, it's not just due to any one dependency. So there's not real way to stop this from happening apart from this:\nrm -r ./vendor; glide install\nwhich sucks!\n. Replying to https://github.com/Masterminds/glide/issues/778#issuecomment-287961222, @mattfarina this happens even with the latest Git for Windows version (2.13.0 at the time of writing this), and with powershell or cmd or git bash (mingw64 bash). Glide version is the latest (but it's still lacking those windows fixes merged into master) (0.12.1 at the time of writing).\nTo easily reproduce the issue, running a simple glide update after glide install on this glide.yaml should throw the error on Windows.. > Should we file something against microsoft/BashOnWindows?\n@djensen47 - not sure about that. I get same errors using powershell or cmd or git's mingw bash. But I also don't know if WSL would affect normal powershell either, so \u00af_(\u30c4)_/\u00af. @djensen47 I tried clearing cache and running glide update again. Still the same error.\n\n[ERROR] Unable to export dependencies to vendor directory: remove C:\\Workspace...\\vendor\\github.com\\chzyer\\readline\\example: The directory is not empty.. @mattfarina Yes, it happens consistently with large number of dependencies.. @mattfarina - I have a system where I always get this error. Maybe if you can share the code/glide binary, I can try it out and report if all goes well. It works for me too on Windows proper (on powershell)!. It works for me on Windows proper \ud83c\udf86. Have given this only one shot - but it worked without any error, whereas the glide.exe taken from releases didn't. I'll give it more tries later tomorrow. \ud83d\udc4d  . Its not merged, so no. Not resolved yet.\nYou can clone my fork and build it and place the glide.exe in your path. \n",
    "brendangibat": "This was astonishing to me as well this past week when including a reference to a privately hosted go lib. Despite the opinionated approach of golang I've been using glide specifically to mitigate the issues of dependency management and this case (and output) were both frustrating and confusing.\nIt is reasonable to expect that when vcs and repo are specified that glide should be able to manage the configuration appropriately. \n. ",
    "saswatp": "+1 For private repositories user shouldn't be adding a .git in the import statement when he has already specified vcs: git. This is indeed confusing. \n. ",
    "banks": "This request makes sense to me without violating compatibility with existing go toolchain or being \"surprising\".\nIn my case glide is the ONLY go tool that can correctly vendor a complicated sub-packaged repo with dependencies on things like coreos/rkt which is itself a complicated subpackaged repo with many transitive deps vendored with Godep...\nWhile the current behaviour does mirror the rest of the Go toolchain, nothing else until now has required me to have .git extensions everywhere. Not just in imports in the code but also ensure that all my colleagues remember to checkout local versions as <package>.git.\nHowever without doing all that I end up with a total mess of Cannot detect VCS, glide vendoring the current package into its own vendor dir at current HEAD and same libs being vendored as both  and  possibly at different versions...\nWithout thinking too hard it seems the request here would solve this without changing default behaviour or being \"surprising\":\n- Allow vcs in glide.yml to override the URL. \n  - With this in place we can manually specify git as VCS in YAML for our own Github Enterprise hosted repos and not have to rename with .git extensions (there are other minor downsides to not doing that in the go toolchain but they have never been blockers to getting things working). \n. @sdboyer good question.\nI can confirm that in our case the repos in question do have correct go-import meta (Github Enterprise).\nI can go get a repo that contains a single package just fine (e.g. github.example.com/foo/bar)\nThe problem is that Github Enterprise does NOT handle sub-packages in the same way. When go get tries to fetch github.example.com/foo/bar/pkg/baz?go-get=1 that is a 404 in Github enterprise as on Github.com since the URL scheme would place the browse URL as github.example.com/foo/bar/tree/master/pkg/baz.\nThe reason (I suspect) that subpackages work on github.com is that it's one of the magical exceptions where to go tooling knows about the url scheme and quirks.\nFor subpackages to work correctly with go-import meta, Github Enterprise would have to have a special case for it's routing which detects ?go-get=1 or something and uses alternateive routing at least to output a page with the correct meta tag.\n. ",
    "dcu": "+1 I have the same issue\nif you can add support for private git repos that would be a huge advantage over go get\n. @alanma just set repo: git@.... it works well. in our case it's apex https://github.com/apex/apex\nbut in general the option says it caches the packages to the $GOPATH and it isn't\n. since this flag is deprecated I'm closing this ticket\n. has someone found a workaround for this?\n. ",
    "alanma": "We're using github enterprise too. Any workaround to solve the \"Cannot detect VCS\" issue when using sub-packages in glide.yaml? Thanks!. @dcu thanks David!. ",
    "subbu05": "Resolved the issue. After going though the Glide code understood the root cause. Its not the glide issue. Glide must have a flag to ignore server certificates.\nSolution: Get Common CA certificates\nUbuntu - https://launchpad.net/ubuntu/xenial/+package/ca-certificates\nSimilarly search for other OS and install and try.. Also do run following:\ngit config --global http.sslVerify \"false\"\nadd vcs: git for every package in glide.yaml. Resolved the issue. After going though the Glide code understood the root cause. Its not the glide issue. Glide must have flag to ignore server certificates.\nSolution: Get Common CA certificates\nUbuntu - https://launchpad.net/ubuntu/xenial/+package/ca-certificates\nSimilarly search for other OS and install and try..  https://github.com/xkeyideal/glide\nThis didn't work for me. I am stilling same VCS issue.. Resolved the issue. After going though the Glide code understood the root cause.  Its not the glide issue. Glide must have flag to ignore server certificates.\nSolution: Get Common CA certificates \nUbuntu - https://launchpad.net/ubuntu/xenial/+package/ca-certificates\nSimilarly search for other OS and install and try.. ",
    "thockin": "\ndoesn't mean you need to store the external packages in your projects repo\n\nWe have had upstream projects disappear, move, and have git history re-written.  In fact all of those have happened.  There's no way we're NOT going to copy deps into our repo. :)\n\nThat being said we're not opposed to this kind of vendoring, we support it to a certain extent\n\nI am having a hard time comprehending this statement.  It APPEARS that glide supports it directly - in fact far more easily that godeps.  The only thing that is confusing to me is that godeps trims what it stores down to the bare minimum, and glide doesn't.  It's not a deal killer (I think), just different and less efficient.  Additionally, some of our deps use Godeps, which means we copy their Godeps/_workspace/src tree into our vendor tree, which is just inane.\n\nVCS data for those that were vendored in the first place is not there on vendored repos after an update\n\nThat is not what I am seeing.  I am seeing all vendored deps retaining their .git directories.\n\nThe first step is stripping VCS data in the first place. I wrote about that yesterday.\n\nBlech!  Sorry.  I want less deps and less tools and less steps for this.  Our instructions are already too complex.  I'd reaaaaaaallly rather this as a --strip-vcs-data flag to go along with --update-vendored.\nI did read the docs, FWIW.  It's a little tricky because what you describe as \"vendoring\" isn't exactly what I/we think of as vendoring.  Vendoring without copying deps into my tree seems almost pointless (or hopelessly naive, at best).  As such, I was a little surprised that the whole CLI doesn't do that by default. :)\nI'll try to take another look today or this weekend.  The transition has revealed that we have some existing deps that use godep rewriting, which means that glide imports their Godeps as packages.  I want to update those, but they have a tree of deps that ALSO need to be updated.  This is terrifying and tedious, and something I really wish the import tool would help with.  Specifically, consider this.\nkubernetes depends on github.com/coreos/rkt/api/v1alpha, which transitively depends on github.com/golang/protobuf/proto\nI want to update rkt to a newer release.  I put their semver tag into glide.yaml and run some glide command to re-vendor it.\nThe build fails because newer rkt needs a newer protobuf.  What other newer libs does it depend on?  I have no idea.  Now I am scared to update because I will almost certainly miss an update, and I do not have time to go through rkt's Godeps file by hand and see if the git hashes they use (because, sadly, it is all git hashes, not semvers) are \"newer\" or \"older\" than the ones I already have vendored.\nI want glide to say \"I see you're updating 'rkt' and that has its own deps.  I will go through them one-by-one and offer you a choice\".  If glide doesn't do that, then I have to do it by hand, and anything I do by hand I will probably screw up.  Am I asking for something impossible?\nI feel like dep management is a Really Big Deal and should at least have an option to defer to humans, rather than ignoring conflicts.  At least that way, when it screws up, it is my fault rather than yours :)\n. I feel like I might hack this weekend, but I'd love some guidance.\n1) Are you saying you're against stripping out VCS metadata in glide itself?  I can't see any reason why a --update-vendored run would want to keep vcs info, and I am not super keen on making our instructions even more complicated...\n2) Any feeling on an \"interactive mode\" which lets the use choose which dep to use in case of conflict?\n. A --strip flag sounds perfect and an interactive resolver will at least give me a chance of doing the right thing.  I know that some of it will be manual, but even just pausing and asking me which one I want gives me a big leg up on hunting it all down manually.\nI'm hacking a little bit now, just to understand the flow of the tool and to see if I can make the output more obvious.  Two things jump out.  First, there's a lot of output I don't care about (\"X is already set to version V.  Skipping update\") that I would like to suggest not be output at all (or relegated to debug).  Second, there's stuff in debug that is interesting that is NOT printed by default (\"X imports Y\") which I think would give a lot of context.\nI'd like to make some PRs around this just so I can understand the tool better - objections?\nI also want to augment the \"Conflict\" messages to make it clear why there is a conflict.  \"X (@fe345def28592fbc) imports Y @47369daab367, but you already have @925255deaf24c.  Skipping\".  As a first step towards interactive mode, this would be super useful.  It looks like it requires a significant amount of plumbing to pass around a queue of structs that represent the graph edges (from, to) rather than just the dep.  Objections?\n. As for minimizing packages, I think that is the least of my concerns.  If that is the only thing about the changeover that gives me pause, I'll be pretty darn content.\n. No sweat.  I just don't want to spend a lot of time on something if you can\nrecognize it as a dead end right away.\nOn Mar 5, 2016 1:55 PM, \"Matt Farina\" notifications@github.com wrote:\n\n@thockin https://github.com/thockin no objections on PRs. We like PRs.\nI'm mostly unavailable until Monday. I'll look at them this week.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/300#issuecomment-192748852.\n. I was running into this today, too.  I want glide to see that a dep has a\nGodeps file (or glide or ...) and import the deps into the root BUT NOT\nsave them in vendor/.\n\nAs an example:  Kubernetes vendors heapster.  heapster vendors a client lib\nfrom kubernetes, which has a wide fan-out and transitively includes most of\nkubernetes.  I am now making a copy of most of kubernetes/... in\nkubernetes/vendor/.../heapster/Godeps/_workspace/src/.../kubernetes.\nThankfully glide seems to be smart enough to not recursively vendor that\n(or I would have kubernetes/vendor/.../kubernetes/... :)\nStripping out deps' vendor/ and Godeps/ and so on will save a lot of\nugliness and confusion.  I don't actually know if Go will respect\nrepo/vendor/foo.com/bar/vendor/... or not - I hope not, but I suspect so.\nOn Fri, Mar 11, 2016 at 12:06 PM, Matt Farina notifications@github.com\nwrote:\n\n@sgotti https://github.com/sgotti at the moment I would prefer\nsomething like glide-vc handle stripping nested vendor directories. I may\nbe persuaded to change my mind but I don't really want to add a bunch of\ncomplexity into Glide for that right now.\nDirty would be hard to detect for a vendored repo. If the VCS data isn't\navailable the VCS can't easily do it for us. This is complicated. What's\ndirty? Missing files? Changed files? With a VCS it's pretty easy. Without\nit we just ignore it which is, in part, why updating vendored is opt-in.\nI think stripping vendor directories should be in the hands of the\ndeveloper. They know what they're building and can deal with the\nconsequences. This is really why libraries should not vendor. This is, in\npart, why storing outside packages in your VCS isn't common (or even\nallowed) in some other toolchains.\nYet, I understand the issues k8s and others are having that leads to this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/303#issuecomment-195526172.\n. > The way go build and the other go tools work\n\nYeah, that all makes sense EXCEPT when you're vendoring something that vendors.\n\nThis is why the discussions in places like the go nuts mailing list have been\nto not vendor outside dependencies in your project if you're building a\nlibrary for others to use.\n\nThat's great in theory.  A large number of libs that we use are part of a repo\nthat also includes a binary.  Etcd.  Rkt.  Heapster.  Cadvisor.  Docker.\nAsking every repo to break itself into a \"libs only\" repo and a \"binary only\"\nrepo is a non-starter.\nGiven that, what happens once everyone uses glide (world domination, yay)?\n1) heapster (the binary) uses and vendors kubernetes/pkg/client\n2) glide imports all of kubernetes (because you don't want to prune files, more on that later)\n3) heapster now has a vendor/k8s.io/kubernetes/vendor/... dir.\n4) kubernetes vendors the heapster client lib\n5) kubernetes now has a vendor/k8s.io/heapster/vendor/k8s.io/kubernetes/vendor/... directory\nAt this point you've gone full-recursive.  There's not ACTUALLY a cyclical\ndependency between Go packages (which are the true unit of import), but glide\nhas made a problem by claiming that a full repo is the unit of dependency.\nSomething has to be the turtle at the bottom.  Godep respects go packages (plus\nlicenses and other metadata) so this is not an issue.\nI think any vendoring tool HAS TO break the false cycle here, and the way to do\nthat is to first interrogate the user (which version do you want to keep) and\nthen discard the recursive deps.  Perhaps one answer to \"which version do you\nwant\" is \"both\" in which case it leaves the recursive deps alone - does that\nput enough freedom in the users' hands, while still doing something sane by\ndefault?\n\nBringing this back to Glide, we've been wary to add something that alters a codebase\n\nWell, our lawyers were pretty clear that this is not an alteration in the\nsense of triggering redistribution clauses of licenses.  It is established\npractice within the Go ecosystem.  But you shouldn't trust MY lawyers - you\nshould consider it yourself.  That said, I think stripping out\nvendor/... and Godeps/_workspace/... and similar things is EVEN LESS\nworrisome than pruning down to the minimum set required.  I think pruning\nrecursive deps has to happen.\nRegarding glide-vc: if that's the best we can do, we'll do it, but I'll go on\nrecord as it being more clumsy than it needs to be.  I can respect (though\ndisagree) with the position that pruning code out of a repo is an \"alteration\",\nbut I can't buy that pruning recursive deps is an alteration.  I think the\ndefault should be to process-and-prune recursive deps.  If you want to leave\nminimization to glide-vc, so as to put the users fingerprints on it, I am fine\nwith that (but probably won't do it).\nScripts is a cute hack, but it means that everyone's repo will be different\nwith different target names.  It's Makefile all over again.\n. It does end up calling VcsUpdate() twice.\nOn Sun, Mar 6, 2016 at 12:31 PM, Matt Butcher notifications@github.com\nwrote:\n\nIs it actually fetching twice? There is a map that tracks fetches, but\nlooking at what you typed, I am wondering if there is an edge case where\nthat map isn't shared between two fetch contexts (initial fetch and fetches\nduring addition dependency resolutions).\nI've noticed that a few log messages are actually a little misleading. They\nprint before duplicate checks are run.\nOn Sat, Mar 5, 2016, 11:39 PM Jack Spirou notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin https://github.com/govend/govend\nuses a map[string]bool for that purpose:\nhttps://github.com/govend/govend/blob/master/deps/vend.go#L54\n\u2014\nReply to this email directly or view it on GitHub\n<https://github.com/Masterminds/glide/issues/308#issuecomment-192815425\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/308#issuecomment-192983499.\n. I had the same feeling, but it was that or literally pass a 2nd arg\neverywhere conf was passed. Open to ideas. I am not attached to this, so\nfeel free to close and replace it if you get there before me.\nOn Mar 7, 2016 7:09 AM, \"Matt Farina\" notifications@github.com wrote:\nI like where this is going but I don't like that this information was\nadded to the config object. I'd like to avoid those becoming a junk drawer.\nI have a couple ideas to clean this up.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/309#issuecomment-193289925.\n. Another alternative would be just to sleep a private may in vcs-management\ncode...\nOn Mar 7, 2016 7:32 AM, \"Matt Farina\" notifications@github.com wrote:\n@thockin https://github.com/thockin I like what you started. I'm in the\nprocess of building on in.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/309#issuecomment-193300641.\n. I see.  You should document that glide get -u != go get -u especially since it talks about updating vendored code :)\n. I may have totally horked my testing tree.  I'll try to rebuild my experiment from scratch.  Still, interesting error...\n\nI will be OOO for 3 days, so not until after that at earliest\n. I rebuilt my whole repo and walked through glide init and glide install again, and I can not repro it either.\n. Agree simpler is better.\n. YES!  Specifically, I think the context should change from:\n[WARN] Conflict: github.com/docker/docker ref is 0f5c9d301b9b1cca66b3ea0f9dec3b5317d3686d, but also asked for a34a1d598c6096ed8b5ce5219e77d68e5cd85462\nto something like:\nConflict: github.com/docker/docker is currently 0f5c9d301b9b1cca66b3ea0f9dec3b5317d3686d but github.com/foo/bar wants a34a1d598c6096ed8b5ce5219e77d68e5cd85462\nThe primary info here is WHY - show me who asked for a different version.  If you can then offer clues as to which is newer or list any tags at the same ref, then that is just awesome.\nIt would also be nice if there was some way to not get the messages every time I run a glide operation.  For example, if I add a new dep (glide get -u) or I change the ref on an existing dep (and then glide up -u, I guess?) I want to see and answer any transitive conflicts.  If I just run glide up -u, it should be a no-op, so I don't really want to hear about conflicts.  I am not sure how to properly reason about this, though.  I know that our codebase has a lot of conflicts...\n. I don't think Kubernetes has any deps that rewrite, or at least those don't get used by us.  That said, yeah, rewriting is a good loophole here that probably needs to be either un-rewritten or left as-is (probably with a warning).  Anyone who is doing rewriting needs to stop, or tools like glide will be come hopeless.\n. This patch looks like what we want.  You need to be careful, though, that you don't let the tail wag the dog.  As much as I appreciate your enthusiasm, many of these issues are subtle, and the kubernetes approach is just one of potentially many valid approaches.  As maintainer, you get the fun job of considering all you users and trying to strike balance.\nThat said, aside from the rewrites mess, I would totally use this.\n. If we started with only nuking recursive /vendor dirs, there's less danger,\nmaybe?  Do any tools do rewriting AND store in /vendor?\nThat said, I think \"Godep rewriting is not supported\" is not such a bad\nposition to take, IMO.  Then you can do better IFF it is actually a pain\npoint for people.\nOn Thu, Mar 17, 2016 at 3:12 PM, Matt Butcher notifications@github.com\nwrote:\n\nMan... this is gonna be dangerous. I agree with adding some messaging. I\nwish there was a way to make this really clear to users (up front) that\nthis is an experimental feature, and that it is destructive.\nThat said, I feel like the community has expressed a strong desire to at\nleast have the option of doing this. I still think we should go ahead with\nit.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/339#issuecomment-198105070\n. That looks...amazing.  Staggering.  OMG so helpful.\n\n@vishh because we talked about some of this.\nOn Wed, Mar 23, 2016 at 6:53 PM, Matt Butcher notifications@github.com\nwrote:\n\nLGTM. Super excited to see this go in!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/pull/350#issuecomment-200612079\n. Is this manifesting as a real issue?  We use symlinks in various ways to get compat across older and newer Go versions and so far it seems to work OK.  Please don't break it if you don't have to.\n. @vishh a less huge issue for kubernetes\n. Both suggestions sound good to me.\n\nSpecifically:\n1) something like glide copy-to-gopath which copies from vendor/ to GOPATH\n2) don't change timestamp on glide update unless something has changed\nOn Tue, Apr 5, 2016 at 11:04 AM, Matt Farina notifications@github.com\nwrote:\n\nSince this problem is generally going to go away I would suggest this as a\nplugin. I've seen this request a couple times. Basically, I could suggest a\nplugin that copies the contents of the vendor/ folder to the appropriate\nlocation in the GOPATH. Would that work?\n@sdboyer https://github.com/sdboyer The timestamp is to tell people or\ntooling when the last update occurred. If nothing has changed we can likely\nskip updating the timestamp.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/366#issuecomment-205923053\n. Given that we're going to embrace go-1.6, I only really need the fix to not touch timestamp unless other things have changed.  thoughts?\n. I think the main requirement is to test that I can recreate the currently\ncommitted vendor/ tree from the various upstream sources.\n\nOn Fri, Aug 19, 2016 at 10:15 AM, Matt Farina notifications@github.com\nwrote:\n\nTwo address the issues here.\n- The timestamp is now only changed if the content has changed.\n- With Go 1.7 not allowing for the disabling of the vendor experiment\n  and security updates only for 1.7 and 1.6 I think we can skip the copy to\n  gopath functionality.\nI'm going to close this. If k8s does adopt glide and we need the\ncopy-to-gopath I can make a plugin as part of my k8s time.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/366#issuecomment-241077944,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFVgVFG3aLVlx01973ylZRUa2O3RcWkAks5qheS2gaJpZM4H-eZp\n.\n. The client-go hack?  yeah, that's a temporary hack.  The general \"must be\nable to restore from the wild\" flow we want.\n\nOn Mon, Aug 22, 2016 at 10:52 AM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin with the exception of the new\nclient-go that resides within the staging area of k8s and needs to be\ncopied to vendor/ you can do that. Do you need to maintain that workflow\nfor long?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/366#issuecomment-241494196,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFVgVP4bCyklnjrErIN47dhtroC8NHmgks5qieHUgaJpZM4H-eZp\n.\n. I added a spew.Dump() before and after the call to installer.Update in the get path, and then diffed them.  What I see is some new subpackages like \"Godeps/_workspace/src/github.com/coreos/go-semver/semver\" being slurped in.\n\nIt would make sense that, if a recursively vendored dep was newer than my vendored version, and that dep included other packages that I don't, that what I am experiencing might happen.  Do we need to undo Godep rewriting before processing?\n. hmm, no, that's wrong.   I did the same dump on update and I seethe same sorts of thing.\nOne thing I notice is that the \"before\" case for update has the Pin field set, but the get has Pin: \"\" for everything.  That's the diff except for pointer values and the actual new package (from get).\n. @vishh this is the biggest blocker to using glide for kubernetes right now.\n. That is the correct github tree, and if you have proposed changes I am all\nears - either PR me or email a patch or whatever. :)\nThanks.\nOn Tue, Apr 5, 2016 at 3:53 PM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin I need to get a bugfix release out\nin the next day or so. After that I'll look into this. We were talking\nabout this issue earlier in the day. I'm going to look for the fastest and\nleast complicated solution for this.\nCan I assume https://github.com/thockin/kubernetes/tree/glide is where\nyou're working on this? If I had a suggested change would you be open to a\npull request there? Note, I am under the Google CLA already.\nRight now the --strip-vendor flag should cause the godep rewrites to be\nundone if they are vendoring in the Godeps/_workspace directory. This\nwill happen inside of Update.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/367#issuecomment-206024554\n. Any news here?  Given that we are going to embrace go-1.6, our change to Glide is even easier -- assuming we can understand/fix this issue (or document whatever I am doing incorrectly)\n. I don't actually know what \"this\" is.  To my eyes, get just doesn't work,\nand I am sort of baffled how something so fundamental to the tool is\n\"broken\".  That said, I understand that my usage pattern might be outside\nof what people think of as normal (but then what do you think is \"normal\"?)\n\nWe can't commit to glide until we can get packages, I'm relatively\nambivalent about exact solutions\nOn Tue, Apr 12, 2016 at 11:43 PM, Sam Boyer notifications@github.com\nwrote:\n\nI'm not sure how difficult @mattfarina https://github.com/mattfarina\nthinks this would be in the current architecture. Given that glide does a\nfair bit of operating in-place within the vendor directory, it might be\ntricky. So, this might be a bit easier to wait for vsolver on.\n(Which oughtn't be that long. If progress continues as it has, maybe as\nearly as next week!_\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/367#issuecomment-209256540\n. Sounds great - though an out-of-place rebuild of vendor/ which gets swapped\ninto place also sounds OK to me (less debris upon failure).\n\nI'm happy to sit on it for a bit, but I just wanted to be very clear that\nget is a requirement for us :)\nOn Wed, Apr 13, 2016 at 10:38 AM, Sam Boyer notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin briefly, \"this\" is the problem of\ndoing in-place updates in the vendor directory, rather than assembling a\nnew vendor directory somewhere else, and only moving it into place when\nwe're sure it's complete and correct.\nThe in-place approach was originally taken as a performance optimization.\nWhen people aren't committing their vendor dirs, the harm is at least less\nobvious, because the whole vendor dir is just treated as disposable - rm\n-rf and try again. (to be clear, I don't like that, or think it's OK -\none of many reasons I'm writing vsolver). As glide has only recently been\naiming to support the committability of vendor via those --strip-vendor\nand --strip-vcs commands, there are things like this that appear to be\nright smack in the middle of an obvious workflow but that still have\nproblems.\nWe're working...feverishly! (I just committed the vsolver code earlier\ntoday that writes out a complete and correct vendor dir\nhttps://github.com/sdboyer/vsolver/blob/master/result.go#L22 that can\nthen be moved in to place.)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/367#issuecomment-209558653\n. For your amusement - I got some pushback to do the move to vendor/ separately from the move to glide.  I tried.  I can't - we still have some deps that use path rewrites and godep isn't smart enough to un-rewrite itself.  But Glide is.  Or would be if get worked :)\n. I managed to convert our tree to a vendor dir, but now many people are asking \"what about glide\"?  So what about it...\n. It didn't put a version in glide.yaml, so the next update operation will\npick a new version, won't it?\nOn Apr 3, 2016 6:30 AM, \"Sam Boyer\" notifications@github.com wrote:\nb) should be what happens right now - it should update both glide.yaml\nwith the HEAD of the specified project, and then recompute glide.lock.\nThat's what it does for me when I test, anyway. You're on the most recent\nglide, yes?\na) is something we oughtta support, probably via a go get\ngithub.com/foo/bar@tag...just, haven't gotten there yet. I think?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/368#issuecomment-204976873\n. I don't have a particular revision I want to use, I just want glide to take\nwhatever is head RIGHT NOW and lock to that, so it never changes unless I\nask for a change, in which case I am likely to repeat this process.\n\nCan we add a --lock-to-now flag or something?\nOn Tue, Apr 5, 2016 at 6:35 AM, Matt Farina notifications@github.com\nwrote:\n\nThere is a way for glide get to put version information into the\nglide.yaml file.\n$ glide get github.com/coreos/etcd#v2.3.1\nThe glide get command can get one or more dependencies. Each dependency\nhas it's location and then an optional # followed by any version\nhttp://glide.readthedocs.org/en/latest/versions/ Glide works with.\nIn the etcd example it's a tag name. When the glide.lock file is\ngenerated it will have the associated commit id for that tag.\nDoes that help?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/368#issuecomment-205808039\n. For a lot of packages there just isn't a tag or anything to use, so we just\nwant \"head as of right now\".  For those packages that have tags, maybe\noffering a list of tags would be nice, but this again goes to some\ninteractive mode.\n\nIf I say glide get --interactive example.com/foo/bar and it offered me\n\"HEAD\" vs \"pin to hash abcdef12345 (current head)\" vs \"tag v1.2.3\" vs\n\"branch release-1.2\", that would be pretty awesome.  But the minimum viable\nsolution would simply be to say \"you didn't ask for a specific tag, so I am\nassuming you want HEAD\" with an optional flag --lock-to-now which would\nsay \"you didn't ask for a specific tag, so I am assuming you want hash\nabcdef12345 (current head)\"\nI'm trying to be minimal in what I ask for :)\nOn Tue, Apr 5, 2016 at 10:12 AM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin to ferret out your thinking a\nlittle more, would you want it to grab the latest stable release if there\nwas a release otherwise the latest commit rev? Or, just the latest rev?\nI'm also thinking about adding a way for glide update and glide get to\nnot update the entire tree but only specified packages and their direct\ndependencies. Thoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/368#issuecomment-205902447\n. I agree.  Operating like go get is the right thing to do.  I just want a\nflag that I can use to opt into (what we consider to be) sane behavior :)\n I understand that \"sane\" is in the eyes of the beholder.\n\nOn Tue, Apr 5, 2016 at 10:49 AM, Matt Butcher notifications@github.com\nwrote:\n\nIt sounds like the original request was merely to make it possible to tell\nGlide to pin the glide.yaml to a VCS commit ID (e.g. explicitly set version:\n. I wouldn't mind adding that as a flag to glide get, but that is\nthe sort of thing that I thought we were trying to steer people away from.\nUltimately, everyone is healthier if we set this to SemVer (range) instead\nof to VCS identifiers.\nWhen it comes to intuitions about whether we should track head or\nautomatically pin, you will find there are two fairly vocal sides on this\none. (A read through the issue queue and Gitter backscroll will show this).\nSome people want the go get-like behavior of tracking master by default.\nOthers favor stability. While both can be done explicitly, it's tough to\ndecide which should be default.\nI'd be most comfortable with just adding a flag to glide get that\ninstructs glide to pin the glide.yaml to the current commit. That will\nlet people who want that behavior be able to get it, but it won't defeat\nthe push to stop using commit IDs and start using SemVer ranges.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/368#issuecomment-205917499\n. Any update on the ability to save \"head as of now\" in a get?\n. @sdboyer I'm trying to ask for small, deliverable changes so that I can actually use glide O(soon).  Yes, I agree it is doing more work than it should right now, but I can live with that in exchange for getting off of godep.\n\nI don't buy the \"demon's roulette\" argument, or at least, it's not particularly weighty.  We test everything anyway, so it's not a huge deal.  But let me put it another way - if glide were to offer me a better choice, something like \"at the most recent semver tag\" instead of \"head right now\", I would take that choice.  Or another alternative: FORCE me to specify a version.  If I want to use \"floating head\" (which is the default and is, IMO, insane) I need to say github.com/foo/bar#HEAD or --floating-head something.  This way I get an error on a get and I am forced to go look at the repo and decide what tag I want to use.  Of course, github makes it hard to see what hash is \"current head\" without checking the repo out, which is further pain.\n. A month later, any update on this?  We've moved our repo to vendor/ with godep, which continues to be somewhat painful.\n. I am literally fighting back the hordes who want to switch Kubernetes to\nGlide.  Just waiting on it actually working for us :)\nOn Mon, May 16, 2016 at 8:43 AM, Sam Boyer notifications@github.com wrote:\n\n@thockin https://github.com/thockin afaik, this will be addressed by\nthe new engine (#384 https://github.com/Masterminds/glide/pull/384 is\nthe first PR), but idk if it's being worked on under the current paradigm.\nI was out at a conference last week, and a few things may prevent tons of\nprogress this week, but the ball is rolling.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/368#issuecomment-219459887\n. Some people want dedicated per-project GOPATH and some share. For people\nwho share, restore is a bad answer.  If it is fast enough, it might be\nOK, but we have a lot of Makefiles that do godep go build (discovered as\nwe try to change over to glide)\n\nOn Tue, Apr 5, 2016 at 12:38 PM, Matt Farina notifications@github.com\nwrote:\n\nIf there was a restore function, like we're talking about on #366\nhttps://github.com/Masterminds/glide/issues/366, would this be needed?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/374#issuecomment-205961646\n. We'll be supporting go-1.4 for at least another go release or two, I\nsuspect.\n\nOn Tue, Apr 5, 2016 at 2:07 PM, Matt Farina notifications@github.com\nwrote:\n\nAlso, if anyone wants to talk per-project workspaces I'm game. It's not a\nsmall simple topic though.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/374#issuecomment-205984837\n. I rescind this request.  We're going to press ahead, I think.  Go 1.5 and 1.6 are measurably slower on several of our tests, but we're making progress.\n. We are getting help on this.  One of the perks of working at Google is that\nI can pretty literally call the core Go team and ask for help :)  They are\nkeenly interested in the problem.\n\nOn Wed, Apr 13, 2016 at 9:34 AM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin if there a place to look (e.g., a\nSIG) to work on the Go 1.5 and 1.6 slowness. I may have someone I can point\nat that (in a week or so) who has performance skills.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Masterminds/glide/issues/374#issuecomment-209534316\n. Looking forward to this one...  We have only a small list of issues left...\n. Can you summarize the change?  I'm not equipped for this as a code review.\n. Can you summarize?  I'm beyond buried at the moment, and coming up on a\nvacation.  If you want feedback before July...\n\nOn Fri, May 27, 2016 at 10:33 AM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin Rather than a code review I'd be\ncurious as a user usage review. So, grab the code, install it, and try glide\ninit on a project. Particularly one that imports from Godep.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/pull/444#issuecomment-222207348,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AFVgVB1TKcoE9BzUiyn_zkWhDVg9k1vhks5qFyr_gaJpZM4ImvOk\n.\n. That's interesting!  I think I would want first to do a transliteration -\ndon't change ANYTHING.  Let me convince myself it compiles and works.\nCommit that.  Then I might want to optimize more (e.g. using tags instead\nof hashes, or ranges)\n\nOn Fri, May 27, 2016 at 12:01 PM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin if you're buried and coming up on a\nvacation don't feel pressure to review.\nThis turns glide init into a wizard. It will try to detect versions from\ncommit ids, try to offer release versions if nothing is detected, and help\nyou setup using ranges for projects that use releases. It's a start and i'm\ncurious on the wizard interaction model.\nAnd, it's interactive. For example, if a project uses semver your choice\nfor ranges may be to follow patch or minor releases.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/pull/444#issuecomment-222228000,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AFVgVNXWCi83RM1_rB1PMul7pYvjBa-Bks5qFz-WgaJpZM4ImvOk\n.\n. Always ask \"what would a paranoid person who has been repeatedly burned by\ntrusting ANYONE want?\".  That's me. :)\n\nOn Fri, May 27, 2016 at 12:40 PM, Matt Farina notifications@github.com\nwrote:\n\n@thockin https://github.com/thockin That alone is fantastic feedback.\nThis is the kind of thing I was looking for.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/pull/444#issuecomment-222236101,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AFVgVB78h8ejFwVsoldSUeqT3UGX9MDWks5qF0iRgaJpZM4ImvOk\n.\n. @mikedanese FYI. NP, I was just trying it, to see where things were.  I'll catch up with Jess\n\nOn Wed, Dec 14, 2016 at 4:36 PM, sam boyer notifications@github.com wrote:\n\n@thockin https://github.com/thockin https://github.com/sgotti/glide-vc\nmay strip them out for you.\nsorry we haven't progressed further, here. my obligations on the pkg mgmt\ncommittee have taken a lot of the time that might otherwise have gone\ntowards getting a gps-based glide finished, unfortunately :(\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/714#issuecomment-267201329,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFVgVNRbqvqL2Ys8ZkFxN6J-4_ZnZ_vbks5rIIuMgaJpZM4LMjsH\n.\n. my only nitpick would be that the name could be more obvious.  --rmvcs or --strip-vcs or something would be clearer, but I'm not looking a gift horse in the mouth.\n. codewise, do you want to hardcode anything godep in a non-godep dir?  If it were me, I would do something like:\n\nmain():\nplugins := []ToolPlugin{NewGoToolPlugin()}\nplugins = append(plugins, godep.ProbePlugins()...)\nplugins = append(plugins, gom.ProbePlugins()...)\n// etc\n...where ToolPlugin is an interface.  One of the methods on ToolPlugin might be RemoveVendoredJunk().  So here you would just loop over all plugins and have them remove their own vendored junk.\nSomething like that...(I am a big fan of opaque plugins)\n. ",
    "sgotti": "@thockin @mattfarina I wrote some thoughts on vendor flattening and nested vendor folders in #303 \nAdditionally I wrote an initial glide vendor cleaner here: https://github.com/sgotti/gvc (will probably be renamed to  glide-vc and I'm preparing other fixes/changes thanks to @mattfarina suggestions).\nIt's not clear to me if, as I understand from some comments here, something similar will be part of glide. In this case I'll be happy to open a PR to merge it in glide.\n. @mattfarina Thanks for your answer.\nI just noticed other tools do (or want to do) \"hard\" flattening. For example I found some issues on godep like tools/godep#428 and tools/godep#224. In this last one @thockin talks about something similar to this issue (soft vs hard flattening) and, in the end, he prefers \"hard\" flattening (I apologize if I misunderstood something).\nProbably there isn't an automatic solution given pros and cons of soft vs hard flattening and actually it's very difficult if not impossible to detect when a nested vendor is needed or not (since I can put anything inside a vendor folder without any vendoring tool information to detect the package version, sometime also without a source repo etc...).\nProbably the unique solution is to let the user choose what's better.\nWhat I'd like to propose is to add some options to Glide to give the user the ability to choose the preferred behavior but I'm not sure how to specify it (options? config file?. What I had in mind was:\n- \"soft\" flattening (like now)\n- \"hard\" flattening (remove al nested vendor/ folder at any level)\n  - Define some nested vendor folders to keep (for example because that dependency uses an incompatible pkg). But the difficult part is on how can we specify what to preserve in a config options? I can think only about specifying the full path (I don't see other solutions since a vendor directory can be at any level inside a dependency not just at the root level of the dependency, plus there can be multiple level of nested vendor folders...)\nIf this actually doesn't fit directly inside Glide, I'm temped to initially add this to https://github.com/sgotti/glide-vc. Something like --no-nested-vendor and --nested-vendor-keep=\"list of paths\" in addition to the current/future option (considering I'm going to change them to opt in like proposed by you). I'll also add a note specifying that doing this will change the build and also runtime (since another package is used to compile a dependency) behaviors.\nWhat do you think about this approach?\nReturning to your questions:\n\nWhat if you don't strip VCS information. Stripping the vendor/ directories from dependencies will cause those repos to become dirty. Working with them becomes significantly harder. Especially for those who work on a dependency at the same time as the parent and push the dependency repo. This can quickly get messy to manage.\n\nGood point. Will be possible to improve the--update-vendored option to also detect if a repo is dirty and act the same (replacing the repo)?\n\nIf a nested dependency has a reason to store a specific version.\n\nSee above (explicit keeping of some nested vendor directories).\n\nAs a rule, libraries should not vendor/ dependencies unless they have a very good reason.\n\nI can understand it, but on the other side it's difficult to define why a library should not vendor a specific version of a package if it needs to.\nIt's more difficult to distinguish what can be defined to be a library since many packages I use are part of a larger repo and usually there's a vendor folder at the root of the project so also if I'm using just this package (without any vendor folder in it), with glide, since I'm getting the whole repo, I  get also all its parent vendor folders.\n. @mattfarina Thanks for listening and working in this. I think that the work done for glide 0.10 (strip-vcs and strip-vendor) is a good base solution for this issue.\nAs also explained in #349 handling some incompatible packages with same name could be done installing them as separate nested vendors dirs (some like in npm v3) but as explained this is a tricky problem (causing possible incompatibilities).\nAnd now glide-vc can be used just to remove all unneeded packages and files (better than doing vendor management inside it) if license permits this and to preserve space when committing the vendor directory.\nIf you want this issue should be closed and perhaps future updates will go in new issues.\n. @technosophos sorry for being late but due to a too much aggressive gmail filter I lost some github notifications.\n\nTo keep you from getting bogged down while we discuss, would the output of glide list help you solve the problem without a change to the glide.yaml file?\n\nYeah, I was thinking, as an alternate solution to reuse the glide list code for doing this.\n. @mattfarina I wanted to avoid parsing the current glide list output. But if glide list will provide a json output (or have I lost something and it's already available?) I think it can be used.\n. @mattfarina @technosophos For glide vc there's actually the need of two kind of information:\n- The required packages (provided by glide list @mattfarina noticed now #365 . )\n- The required packages root path (required to keep root path files or licensing information)\nNow they are both provided by glide.lock but, other than what this PR tries to fix I noticed that the glide.lock can also contains unneeded subpackages if they are defined in some dependency's godep.json file. I think this is probably wanted so the solution will be to not rely on glide.lock but get the above two information somewhere.\nActually glide list just provides the first information (but I'm waiting for a json format). I can get the latter using glide's util.GetRootFromPackage but since I'm trying to avoid calling code (or I'd also just call resolver.ResolveLocal(true) to get the first information) I'd like to avoid this if possible. What about providing it in glide list json output? Other ideas?\n. Thanks for doing this.\nGodeps/_workspace cannot be removed if the project used godep save -r since all project import paths were rewritten to point to it and compilation will fail.\nMany projects actually uses it since it was the best solution to make it self contained before GOVENDOREXPERIMENT.\nI don't see a direct way to detect if this option was used in the Godeps.json file without scanning packages imports in the source.\nInstead of scanning for its usage and given that this option is deprecated and not allowed with go 1.6 (godep uses standard vendor dirs) probably the fastest solution will be to not remove them.\n. ",
    "pmyjavec": "I'm new to glide and trying to understand how nested vendor directories are handled presently.\nFrom what I can understand, \"soft-flattening\" is now happening by default, but \"hard-flattening\" is  optional. Do this sound accurate?\nFor example, all dependencies end up at the top level vendor, but all nested vendor directories can be removed on request by specifying --strip-vendor. ",
    "jackspirou": "@thockin https://github.com/govend/govend uses a map[string]bool for that purpose: https://github.com/govend/govend/blob/master/deps/vend.go#L54\n. You might want to take a look at https://github.com/govend/govend.  It acts like go get.\n. ",
    "ericchiang": "Since glide has a global cache as of 0.12.0 this is resolved, right?. ",
    "F21": "I am still receiving an error with tip:\nGlide.yaml:\n``` yaml\npackage: github.com/F21/someproject\nimport:\n- package: github.com/fsnotify/fsnotify\n- package: github.com/mitchellh/cli\n- package: github.com/go-yaml/yaml\n- package: github.com/docker/libcompose\n- package: github.com/fatih/structs\n- package: github.com/docker/docker/pkg/archive\n```\n```\n[DEBUG] Creating vendor\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/fsnotify/fsnotify.\n[INFO] Fetching updates for github.com/mitchellh/cli.\n[INFO] Fetching updates for github.com/go-yaml/yaml.\n[INFO] Fetching updates for github.com/docker/libcompose.\n[INFO] Fetching updates for github.com/docker/docker.\n[INFO] Fetching updates for github.com/fatih/structs.\n[INFO] Resolving imports\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\mitchellh\\cli to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-playground\\validator to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-yaml\\yaml to queue [DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\filters to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\docker to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\project to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\fatih\\structs to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\golang.org\\x\\net\\context to queue\n[DEBUG] Adding local Import C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\fsnotify\\fsnotify to queue\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\mitchellh\\cli\n[DEBUG] Package github.com\\mitchellh\\cli imports github.com/armon/go-radix\n[DEBUG] Missing github.com/armon/go-radix. Trying to resolve.\n[INFO] Fetching github.com/armon/go-radix into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\mitchellh\\cli imports github.com/bgentry/speakeasy\n[DEBUG] Missing github.com/bgentry/speakeasy. Trying to resolve.\n[INFO] Fetching github.com/bgentry/speakeasy into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\mitchellh\\cli imports github.com/mattn/go-isatty\n[DEBUG] Missing github.com/mattn/go-isatty. Trying to resolve.\n[INFO] Fetching github.com/mattn/go-isatty into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-playground\\validator\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-playground\\validator: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-playground\\validator: The system cannot find the path specified.\n[INFO] Fetching github.com\\go-playground\\validator into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-yaml\\yaml\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client: The system cannot find the path specified.\n[INFO] Fetching github.com\\docker\\engine-api\\client into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Marking github.com/docker/engine-api/types/container to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/filters\n[DEBUG] In vendor: github.com/docker/engine-api/types/filters\n[DEBUG] Marking github.com/docker/engine-api/types/filters to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Marking github.com/docker/engine-api/types/network to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/registry\n[DEBUG] In vendor: github.com/docker/engine-api/types/registry\n[DEBUG] Marking github.com/docker/engine-api/types/registry to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/go-connections/nat\n[DEBUG] Missing github.com/docker/go-connections/nat. Trying to resolve.\n[INFO] Fetching github.com/docker/go-connections/nat into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/go-units\n[DEBUG] Missing github.com/docker/go-units. Trying to resolve.\n[INFO] Fetching github.com/docker/go-units into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\filters\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\docker\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/Sirupsen/logrus\n[DEBUG] Missing github.com/Sirupsen/logrus. Trying to resolve.\n[INFO] Fetching github.com/Sirupsen/logrus into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/builder\n[DEBUG] In vendor: github.com/docker/docker/builder\n[DEBUG] Marking github.com/docker/docker/builder to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/builder/dockerignore\n[DEBUG] In vendor: github.com/docker/docker/builder/dockerignore\n[DEBUG] Marking github.com/docker/docker/builder/dockerignore to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/cliconfig\n[DEBUG] In vendor: github.com/docker/docker/cliconfig\n[DEBUG] Marking github.com/docker/docker/cliconfig to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/archive\n[DEBUG] In vendor: github.com/docker/docker/pkg/archive\n[DEBUG] Marking github.com/docker/docker/pkg/archive to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/fileutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/fileutils\n[DEBUG] Marking github.com/docker/docker/pkg/fileutils to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/homedir\n[DEBUG] In vendor: github.com/docker/docker/pkg/homedir\n[DEBUG] Marking github.com/docker/docker/pkg/homedir to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/jsonmessage\n[DEBUG] In vendor: github.com/docker/docker/pkg/jsonmessage\n[DEBUG] Marking github.com/docker/docker/pkg/jsonmessage to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/progress\n[DEBUG] In vendor: github.com/docker/docker/pkg/progress\n[DEBUG] Marking github.com/docker/docker/pkg/progress to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/stdcopy\n[DEBUG] In vendor: github.com/docker/docker/pkg/stdcopy\n[DEBUG] Marking github.com/docker/docker/pkg/stdcopy to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/streamformatter\n[DEBUG] In vendor: github.com/docker/docker/pkg/streamformatter\n[DEBUG] Marking github.com/docker/docker/pkg/streamformatter to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/pkg/term\n[DEBUG] In vendor: github.com/docker/docker/pkg/term\n[DEBUG] Marking github.com/docker/docker/pkg/term to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/reference\n[DEBUG] In vendor: github.com/docker/docker/reference\n[DEBUG] Marking github.com/docker/docker/reference to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/registry\n[DEBUG] In vendor: github.com/docker/docker/registry\n[DEBUG] Marking github.com/docker/docker/registry to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/docker/runconfig/opts\n[DEBUG] In vendor: github.com/docker/docker/runconfig/opts\n[DEBUG] Marking github.com/docker/docker/runconfig/opts to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/client\n[DEBUG] In vendor: github.com/docker/engine-api/client\n[DEBUG] Marking github.com/docker/engine-api/client to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Marking github.com/docker/engine-api/types to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/types/filters\n[DEBUG] In vendor: github.com/docker/engine-api/types/filters\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/engine-api/types/strslice\n[DEBUG] In vendor: github.com/docker/engine-api/types/strslice\n[DEBUG] Marking github.com/docker/engine-api/types/strslice to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/go-connections/nat\n[DEBUG] In vendor: github.com/docker/go-connections/nat\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/go-connections/sockets\n[DEBUG] In vendor: github.com/docker/go-connections/sockets\n[DEBUG] Marking github.com/docker/go-connections/sockets to be scanned.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/go-connections/tlsconfig\n[DEBUG] In vendor: github.com/docker/go-connections/tlsconfig\n[DEBUG] Marking github.com/docker/go-connections/tlsconfig to be scanned.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/libcompose/logger\n[DEBUG] In vendor: github.com/docker/libcompose/logger\n[DEBUG] Marking github.com/docker/libcompose/logger to be scanned.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/libcompose/lookup\n[DEBUG] In vendor: github.com/docker/libcompose/lookup\n[DEBUG] Marking github.com/docker/libcompose/lookup to be scanned.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/libcompose/project\n[DEBUG] In vendor: github.com/docker/libcompose/project\n[DEBUG] Marking github.com/docker/libcompose/project to be scanned.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/libcompose/utils\n[DEBUG] In vendor: github.com/docker/libcompose/utils\n[DEBUG] Marking github.com/docker/libcompose/utils to be scanned.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports github.com/docker/libcompose/version\n[DEBUG] In vendor: github.com/docker/libcompose/version\n[DEBUG] Marking github.com/docker/libcompose/version to be scanned.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\libcompose\\docker imports golang.org/x/net/context\n[DEBUG] Missing golang.org/x/net/context. Trying to resolve.\n[INFO] Fetching golang.org/x/net/context into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\project\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/cloudfoundry-incubator/candiedyaml\n[DEBUG] Missing github.com/cloudfoundry-incubator/candiedyaml. Trying to resolve.\n[INFO] Fetching github.com/cloudfoundry-incubator/candiedyaml into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/libcompose/logger\n[DEBUG] In vendor: github.com/docker/libcompose/logger\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/libcompose/utils\n[DEBUG] In vendor: github.com/docker/libcompose/utils\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/flynn/go-shlex\n[DEBUG] Missing github.com/flynn/go-shlex. Trying to resolve.\n[INFO] Fetching github.com/flynn/go-shlex into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\fatih\\structs\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Using Iterative Scanning for github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(windows), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive: found packages archive (archive.go) and main (example_changes.go) in C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/fileutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/fileutils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/idtools\n[DEBUG] In vendor: github.com/docker/docker/pkg/idtools\n[DEBUG] Marking github.com/docker/docker/pkg/idtools to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/ioutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/ioutils\n[DEBUG] Marking github.com/docker/docker/pkg/ioutils to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/pools\n[DEBUG] In vendor: github.com/docker/docker/pkg/pools\n[DEBUG] Marking github.com/docker/docker/pkg/pools to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/promise\n[DEBUG] In vendor: github.com/docker/docker/pkg/promise\n[DEBUG] Marking github.com/docker/docker/pkg/promise to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Marking github.com/docker/docker/pkg/system to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Marking github.com/docker/docker/pkg/longpath to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\golang.org\\x\\net\\context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\fsnotify\\fsnotify\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\armon\\go-radix\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\bgentry\\speakeasy\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\mattn\\go-isatty\n[DEBUG] Package github.com\\mattn\\go-isatty imports golang.org/x/sys/unix\n[DEBUG] Missing golang.org/x/sys/unix. Trying to resolve.\n[INFO] Fetching golang.org/x/sys/unix into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\go-playground\\validator\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/client/transport\n[DEBUG] In vendor: github.com/docker/engine-api/client/transport\n[DEBUG] Marking github.com/docker/engine-api/client/transport to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/client/transport/cancellable\n[DEBUG] In vendor: github.com/docker/engine-api/client/transport/cancellable\n[DEBUG] Marking github.com/docker/engine-api/client/transport/cancellable to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/filters\n[DEBUG] In vendor: github.com/docker/engine-api/types/filters\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/registry\n[DEBUG] In vendor: github.com/docker/engine-api/types/registry\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/time\n[DEBUG] In vendor: github.com/docker/engine-api/types/time\n[DEBUG] Marking github.com/docker/engine-api/types/time to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/go-connections/sockets\n[DEBUG] In vendor: github.com/docker/go-connections/sockets\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/go-connections/tlsconfig\n[DEBUG] In vendor: github.com/docker/go-connections/tlsconfig\n[DEBUG] Package github.com\\docker\\engine-api\\client imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\container\n[DEBUG] Package github.com\\docker\\engine-api\\types\\container imports github.com/docker/engine-api/types/blkiodev\n[DEBUG] In vendor: github.com/docker/engine-api/types/blkiodev\n[DEBUG] Marking github.com/docker/engine-api/types/blkiodev to be scanned.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\engine-api\\types\\container imports github.com/docker/engine-api/types/strslice\n[DEBUG] In vendor: github.com/docker/engine-api/types/strslice\n[DEBUG] Package github.com\\docker\\engine-api\\types\\container imports github.com/docker/go-connections/nat\n[DEBUG] In vendor: github.com/docker/go-connections/nat\n[DEBUG] Package github.com\\docker\\engine-api\\types\\container imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\filters\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\network\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\registry\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\go-connections\\nat\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\Sirupsen\\logrus\n[DEBUG] Package github.com\\Sirupsen\\logrus imports golang.org/x/sys/unix\n[DEBUG] In vendor: golang.org/x/sys/unix\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\builder\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/builder/dockerignore\n[DEBUG] In vendor: github.com/docker/docker/builder/dockerignore\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/archive\n[DEBUG] In vendor: github.com/docker/docker/pkg/archive\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/chrootarchive\n[DEBUG] In vendor: github.com/docker/docker/pkg/chrootarchive\n[DEBUG] Marking github.com/docker/docker/pkg/chrootarchive to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/fileutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/fileutils\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/gitutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/gitutils\n[DEBUG] Marking github.com/docker/docker/pkg/gitutils to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/httputils\n[DEBUG] In vendor: github.com/docker/docker/pkg/httputils\n[DEBUG] Marking github.com/docker/docker/pkg/httputils to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/ioutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/ioutils\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/progress\n[DEBUG] In vendor: github.com/docker/docker/pkg/progress\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/streamformatter\n[DEBUG] In vendor: github.com/docker/docker/pkg/streamformatter\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/symlink\n[DEBUG] In vendor: github.com/docker/docker/pkg/symlink\n[DEBUG] Marking github.com/docker/docker/pkg/symlink to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/tarsum\n[DEBUG] In vendor: github.com/docker/docker/pkg/tarsum\n[DEBUG] Marking github.com/docker/docker/pkg/tarsum to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/pkg/urlutil\n[DEBUG] In vendor: github.com/docker/docker/pkg/urlutil\n[DEBUG] Marking github.com/docker/docker/pkg/urlutil to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/docker/reference\n[DEBUG] In vendor: github.com/docker/docker/reference\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Package github.com\\docker\\docker\\builder imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\builder\\dockerignore\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\cliconfig\n[DEBUG] Package github.com\\docker\\docker\\cliconfig imports github.com/docker/docker/pkg/homedir\n[DEBUG] In vendor: github.com/docker/docker/pkg/homedir\n[DEBUG] Package github.com\\docker\\docker\\cliconfig imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Using Iterative Scanning for github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(windows), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive: found packages archive (archive.go) and main (example_changes.go) in C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\archive\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/fileutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/fileutils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/idtools\n[DEBUG] In vendor: github.com/docker/docker/pkg/idtools\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/ioutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/ioutils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/pools\n[DEBUG] In vendor: github.com/docker/docker/pkg/pools\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/promise\n[DEBUG] In vendor: github.com/docker/docker/pkg/promise\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Package github.com\\docker\\docker\\pkg\\archive imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\fileutils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\fileutils imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\homedir\n[DEBUG] Package github.com\\docker\\docker\\pkg\\homedir imports github.com/opencontainers/runc/libcontainer/user\n[DEBUG] Missing github.com/opencontainers/runc/libcontainer/user. Trying to resolve.\n[INFO] Fetching github.com/opencontainers/runc/libcontainer/user into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\jsonmessage\n[DEBUG] Package github.com\\docker\\docker\\pkg\\jsonmessage imports github.com/docker/docker/pkg/jsonlog\n[DEBUG] In vendor: github.com/docker/docker/pkg/jsonlog\n[DEBUG] Marking github.com/docker/docker/pkg/jsonlog to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\jsonmessage imports github.com/docker/docker/pkg/term\n[DEBUG] In vendor: github.com/docker/docker/pkg/term\n[DEBUG] Package github.com\\docker\\docker\\pkg\\jsonmessage imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\progress [DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\stdcopy\n[DEBUG] Package github.com\\docker\\docker\\pkg\\stdcopy imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\streamformatter\n[DEBUG] Package github.com\\docker\\docker\\pkg\\streamformatter imports github.com/docker/docker/pkg/jsonmessage\n[DEBUG] In vendor: github.com/docker/docker/pkg/jsonmessage\n[DEBUG] Package github.com\\docker\\docker\\pkg\\streamformatter imports github.com/docker/docker/pkg/progress\n[DEBUG] In vendor: github.com/docker/docker/pkg/progress\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\term\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term imports github.com/Azure/go-ansiterm/winterm\n[DEBUG] Missing github.com/Azure/go-ansiterm/winterm. Trying to resolve.\n[INFO] Fetching github.com/Azure/go-ansiterm/winterm into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term imports github.com/docker/docker/pkg/term/windows\n[DEBUG] In vendor: github.com/docker/docker/pkg/term/windows\n[DEBUG] Marking github.com/docker/docker/pkg/term/windows to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\reference\n[DEBUG] Package github.com\\docker\\docker\\reference imports github.com/docker/distribution/digest\n[DEBUG] Missing github.com/docker/distribution/digest. Trying to resolve.\n[INFO] Fetching github.com/docker/distribution/digest into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\docker\\reference imports github.com/docker/distribution/reference\n[DEBUG] In vendor: github.com/docker/distribution/reference\n[DEBUG] Marking github.com/docker/distribution/reference to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\reference imports github.com/docker/docker/image\n[DEBUG] In vendor: github.com/docker/docker/image\n[DEBUG] Marking github.com/docker/docker/image to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\reference imports github.com/docker/docker/image/v1\n[DEBUG] In vendor: github.com/docker/docker/image/v1\n[DEBUG] Marking github.com/docker/docker/image/v1 to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\registry\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/distribution/registry/api/errcode\n[DEBUG] In vendor: github.com/docker/distribution/registry/api/errcode\n[DEBUG] Marking github.com/docker/distribution/registry/api/errcode to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/distribution/registry/client/auth\n[DEBUG] In vendor: github.com/docker/distribution/registry/client/auth\n[DEBUG] Marking github.com/docker/distribution/registry/client/auth to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/distribution/registry/client/transport\n[DEBUG] In vendor: github.com/docker/distribution/registry/client/transport\n[DEBUG] Marking github.com/docker/distribution/registry/client/transport to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/opts\n[DEBUG] In vendor: github.com/docker/docker/opts\n[DEBUG] Marking github.com/docker/docker/opts to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/pkg/httputils\n[DEBUG] In vendor: github.com/docker/docker/pkg/httputils\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/pkg/ioutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/ioutils\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/pkg/mflag\n[DEBUG] In vendor: github.com/docker/docker/pkg/mflag\n[DEBUG] Marking github.com/docker/docker/pkg/mflag to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/pkg/stringid\n[DEBUG] In vendor: github.com/docker/docker/pkg/stringid\n[DEBUG] Marking github.com/docker/docker/pkg/stringid to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/pkg/tarsum\n[DEBUG] In vendor: github.com/docker/docker/pkg/tarsum\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/docker/reference\n[DEBUG] In vendor: github.com/docker/docker/reference\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/engine-api/types/registry\n[DEBUG] In vendor: github.com/docker/engine-api/types/registry\n[DEBUG] Package github.com\\docker\\docker\\registry imports github.com/docker/go-connections/tlsconfig\n[DEBUG] In vendor: github.com/docker/go-connections/tlsconfig\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\runconfig\\opts\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/docker/opts\n[DEBUG] In vendor: github.com/docker/docker/opts\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/docker/pkg/mflag\n[DEBUG] In vendor: github.com/docker/docker/pkg/mflag\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/docker/pkg/mount\n[DEBUG] In vendor: github.com/docker/docker/pkg/mount\n[DEBUG] Marking github.com/docker/docker/pkg/mount to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/docker/pkg/signal\n[DEBUG] In vendor: github.com/docker/docker/pkg/signal\n[DEBUG] Marking github.com/docker/docker/pkg/signal to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/engine-api/types/blkiodev\n[DEBUG] In vendor: github.com/docker/engine-api/types/blkiodev\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/engine-api/types/strslice\n[DEBUG] In vendor: github.com/docker/engine-api/types/strslice\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/go-connections/nat\n[DEBUG] In vendor: github.com/docker/go-connections/nat\n[DEBUG] Package github.com\\docker\\docker\\runconfig\\opts imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/client/transport\n[DEBUG] In vendor: github.com/docker/engine-api/client/transport\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/client/transport/cancellable\n[DEBUG] In vendor: github.com/docker/engine-api/client/transport/cancellable\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types\n[DEBUG] In vendor: github.com/docker/engine-api/types\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/filters\n[DEBUG] In vendor: github.com/docker/engine-api/types/filters\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/registry\n[DEBUG] In vendor: github.com/docker/engine-api/types/registry\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/engine-api/types/time\n[DEBUG] In vendor: github.com/docker/engine-api/types/time\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/go-connections/sockets\n[DEBUG] In vendor: github.com/docker/go-connections/sockets\n[DEBUG] Package github.com\\docker\\engine-api\\client imports github.com/docker/go-connections/tlsconfig\n[DEBUG] In vendor: github.com/docker/go-connections/tlsconfig\n[DEBUG] Package github.com\\docker\\engine-api\\client imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/filters\n[DEBUG] In vendor: github.com/docker/engine-api/types/filters\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/network\n[DEBUG] In vendor: github.com/docker/engine-api/types/network\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/engine-api/types/registry\n[DEBUG] In vendor: github.com/docker/engine-api/types/registry\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/go-connections/nat\n[DEBUG] In vendor: github.com/docker/go-connections/nat\n[DEBUG] Package github.com\\docker\\engine-api\\types imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\strslice\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\go-connections\\sockets\n[DEBUG] Package github.com\\docker\\go-connections\\sockets imports github.com/Microsoft/go-winio\n[DEBUG] Missing github.com/Microsoft/go-winio. Trying to resolve.\n[INFO] Fetching github.com/Microsoft/go-winio into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[DEBUG] Package github.com\\docker\\go-connections\\sockets imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\go-connections\\sockets imports github.com/opencontainers/runc/libcontainer/user\n[DEBUG] In vendor: github.com/opencontainers/runc/libcontainer/user\n[DEBUG] Package github.com\\docker\\go-connections\\sockets imports golang.org/x/net/proxy\n[DEBUG] In vendor: golang.org/x/net/proxy\n[DEBUG] Marking golang.org/x/net/proxy to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\go-connections\\tlsconfig\n[DEBUG] Package github.com\\docker\\go-connections\\tlsconfig imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\logger\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\lookup\n[DEBUG] Package github.com\\docker\\libcompose\\lookup imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\libcompose\\lookup imports github.com/docker/libcompose/project\n[DEBUG] In vendor: github.com/docker/libcompose/project\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\project\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/cloudfoundry-incubator/candiedyaml\n[DEBUG] In vendor: github.com/cloudfoundry-incubator/candiedyaml\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/libcompose/logger\n[DEBUG] In vendor: github.com/docker/libcompose/logger\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/docker/libcompose/utils\n[DEBUG] In vendor: github.com/docker/libcompose/utils\n[DEBUG] Package github.com\\docker\\libcompose\\project imports github.com/flynn/go-shlex\n[DEBUG] In vendor: github.com/flynn/go-shlex\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\utils\n[DEBUG] Package github.com\\docker\\libcompose\\utils imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\libcompose\\utils imports github.com/cloudfoundry-incubator/candiedyaml\n[DEBUG] In vendor: github.com/cloudfoundry-incubator/candiedyaml\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\libcompose\\version\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\golang.org\\x\\net\\context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\cloudfoundry-incubator\\candiedyaml\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\flynn\\go-shlex\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\idtools\n[DEBUG] Package github.com\\docker\\docker\\pkg\\idtools imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\ioutils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\ioutils imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Package github.com\\docker\\docker\\pkg\\ioutils imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\pools\n[DEBUG] Package github.com\\docker\\docker\\pkg\\pools imports github.com/docker/docker/pkg/ioutils\n[DEBUG] In vendor: github.com/docker/docker/pkg/ioutils\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\promise\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\system\n[DEBUG] Package github.com\\docker\\docker\\pkg\\system imports github.com/docker/go-units\n[DEBUG] In vendor: github.com/docker/go-units\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\longpath [DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\golang.org\\x\\sys\\unix\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client\\transport\n[DEBUG] Package github.com\\docker\\engine-api\\client\\transport imports github.com/docker/go-connections/sockets [DEBUG] In vendor: github.com/docker/go-connections/sockets\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\client\\transport\\cancellable\n[DEBUG] Package github.com\\docker\\engine-api\\client\\transport\\cancellable imports github.com/docker/engine-api/client/transport\n[DEBUG] In vendor: github.com/docker/engine-api/client/transport\n[DEBUG] Package github.com\\docker\\engine-api\\client\\transport\\cancellable imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\time\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\engine-api\\types\\blkiodev\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\chrootarchive\n[DEBUG] Package github.com\\docker\\docker\\pkg\\chrootarchive imports github.com/docker/docker/pkg/archive\n[DEBUG] In vendor: github.com/docker/docker/pkg/archive\n[DEBUG] Package github.com\\docker\\docker\\pkg\\chrootarchive imports github.com/docker/docker/pkg/idtools\n[DEBUG] In vendor: github.com/docker/docker/pkg/idtools\n[DEBUG] Package github.com\\docker\\docker\\pkg\\chrootarchive imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Package github.com\\docker\\docker\\pkg\\chrootarchive imports github.com/docker/docker/pkg/reexec\n[DEBUG] In vendor: github.com/docker/docker/pkg/reexec\n[DEBUG] Marking github.com/docker/docker/pkg/reexec to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\pkg\\chrootarchive imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\gitutils [DEBUG] Package github.com\\docker\\docker\\pkg\\gitutils imports github.com/docker/docker/pkg/symlink\n[DEBUG] In vendor: github.com/docker/docker/pkg/symlink\n[DEBUG] Package github.com\\docker\\docker\\pkg\\gitutils imports github.com/docker/docker/pkg/urlutil\n[DEBUG] In vendor: github.com/docker/docker/pkg/urlutil\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\httputils\n[DEBUG] Package github.com\\docker\\docker\\pkg\\httputils imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\docker\\pkg\\httputils imports github.com/docker/docker/pkg/jsonmessage\n[DEBUG] In vendor: github.com/docker/docker/pkg/jsonmessage\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\symlink\n[DEBUG] Package github.com\\docker\\docker\\pkg\\symlink imports github.com/docker/docker/pkg/longpath\n[DEBUG] In vendor: github.com/docker/docker/pkg/longpath\n[DEBUG] Package github.com\\docker\\docker\\pkg\\symlink imports github.com/docker/docker/pkg/system\n[DEBUG] In vendor: github.com/docker/docker/pkg/system\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\tarsum\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\urlutil\n[INFO] Found Godeps.json file.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\opencontainers\\runc\\libcontainer\\user\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\jsonlog\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\Azure\\go-ansiterm\\winterm\n[DEBUG] Package github.com\\Azure\\go-ansiterm\\winterm imports github.com/Azure/go-ansiterm\n[DEBUG] In vendor: github.com/Azure/go-ansiterm\n[DEBUG] Marking github.com/Azure/go-ansiterm to be scanned.\n[DEBUG] Dependency github.com/Azure/go-ansiterm has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Azure/go-ansiterm has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\Azure\\go-ansiterm\\winterm imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\term\\windows\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term\\windows imports github.com/Azure/go-ansiterm\n[DEBUG] In vendor: github.com/Azure/go-ansiterm\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term\\windows imports github.com/Azure/go-ansiterm/winterm\n[DEBUG] In vendor: github.com/Azure/go-ansiterm/winterm\n[DEBUG] Package github.com\\docker\\docker\\pkg\\term\\windows imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[INFO] Found Godeps.json file.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\digest [DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\reference\n[DEBUG] Package github.com\\docker\\distribution\\reference imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\n[DEBUG] Package github.com\\docker\\docker\\image imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\docker\\image imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\docker\\image imports github.com/docker/docker/layer\n[DEBUG] In vendor: github.com/docker/docker/layer\n[DEBUG] Marking github.com/docker/docker/layer to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[INFO] Setting version for github.com/docker/docker to 0f5c9d301b9b1cca66b3ea0f9dec3b5317d3686d.\n[DEBUG] Package github.com\\docker\\docker\\image imports github.com/docker/engine-api/types/container\n[DEBUG] In vendor: github.com/docker/engine-api/types/container\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1: The system cannot find the file specified.\n[DEBUG] Found C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\api\\errcode\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\client\\auth\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client\\auth imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client\\auth imports github.com/docker/distribution/registry/client\n[DEBUG] In vendor: github.com/docker/distribution/registry/client\n[DEBUG] Marking github.com/docker/distribution/registry/client to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client\\auth imports github.com/docker/distribution/registry/client/transport\n[DEBUG] In vendor: github.com/docker/distribution/registry/client/transport\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\client\\transport\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\opts\n[DEBUG] Package github.com\\docker\\docker\\opts imports github.com/docker/docker/pkg/mflag\n[DEBUG] In vendor: github.com/docker/docker/pkg/mflag\n[DEBUG] Package github.com\\docker\\docker\\opts imports github.com/docker/docker/pkg/parsers\n[DEBUG] In vendor: github.com/docker/docker/pkg/parsers\n[DEBUG] Marking github.com/docker/docker/pkg/parsers to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\opts imports github.com/docker/docker/pkg/ulimit\n[DEBUG] In vendor: github.com/docker/docker/pkg/ulimit\n[DEBUG] Marking github.com/docker/docker/pkg/ulimit to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\docker\\opts imports github.com/docker/docker/volume\n[DEBUG] In vendor: github.com/docker/docker/volume\n[DEBUG] Marking github.com/docker/docker/volume to be scanned.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\mflag\n[DEBUG] Package github.com\\docker\\docker\\pkg\\mflag imports github.com/docker/docker/pkg/homedir\n[DEBUG] In vendor: github.com/docker/docker/pkg/homedir\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\stringid [DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\mount\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\signal\n[DEBUG] Package github.com\\docker\\docker\\pkg\\signal imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\Microsoft\\go-winio\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\golang.org\\x\\net\\proxy\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\reexec\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\Azure\\go-ansiterm\n[DEBUG] Package github.com\\Azure\\go-ansiterm imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer: The system cannot find the file specified.\n[DEBUG] Found C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1: The system cannot find the file specified.\n[ERROR] Error scanning github.com\\docker\\docker\\image\\v1: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\image\\v1: The system cannot find the file specified.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\client\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution\n[DEBUG] In vendor: github.com/docker/distribution\n[DEBUG] Marking github.com/docker/distribution to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/context\n[DEBUG] In vendor: github.com/docker/distribution/context\n[DEBUG] Marking github.com/docker/distribution/context to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/reference\n[DEBUG] In vendor: github.com/docker/distribution/reference\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/registry/api/errcode\n[DEBUG] In vendor: github.com/docker/distribution/registry/api/errcode\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/registry/api/v2\n[DEBUG] In vendor: github.com/docker/distribution/registry/api/v2\n[DEBUG] Marking github.com/docker/distribution/registry/api/v2 to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/registry/client/transport\n[DEBUG] In vendor: github.com/docker/distribution/registry/client/transport\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/registry/storage/cache\n[DEBUG] In vendor: github.com/docker/distribution/registry/storage/cache\n[DEBUG] Marking github.com/docker/distribution/registry/storage/cache to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\registry\\client imports github.com/docker/distribution/registry/storage/cache/memory\n[DEBUG] In vendor: github.com/docker/distribution/registry/storage/cache/memory\n[DEBUG] Marking github.com/docker/distribution/registry/storage/cache/memory to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\parsers\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\pkg\\ulimit\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\volume\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer\n[DEBUG] ImportDir error on C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer: The system cannot find the file specified.\n[ERROR] Error scanning github.com\\docker\\docker\\layer: open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\docker\\layer: The system cannot find the file specified.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\n[DEBUG] Package github.com\\docker\\distribution imports github.com/docker/distribution/context\n[DEBUG] In vendor: github.com/docker/distribution/context\n[DEBUG] Package github.com\\docker\\distribution imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\distribution imports github.com/docker/distribution/reference\n[DEBUG] In vendor: github.com/docker/distribution/reference\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\context\n[DEBUG] Package github.com\\docker\\distribution\\context imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Package github.com\\docker\\distribution\\context imports github.com/docker/distribution/uuid\n[DEBUG] In vendor: github.com/docker/distribution/uuid\n[DEBUG] Marking github.com/docker/distribution/uuid to be scanned.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Package github.com\\docker\\distribution\\context imports github.com/gorilla/mux\n[DEBUG] Missing github.com/gorilla/mux. Trying to resolve.\n[INFO] Fetching github.com/gorilla/mux into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[INFO] Setting version for github.com/gorilla/mux to e444e69cbd2e2e3e0749a2f3c717cec491552bbf.\n[DEBUG] Package github.com\\docker\\distribution\\context imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\api\\v2\n[DEBUG] Package github.com\\docker\\distribution\\registry\\api\\v2 imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\distribution\\registry\\api\\v2 imports github.com/docker/distribution/reference\n[DEBUG] In vendor: github.com/docker/distribution/reference\n[DEBUG] Package github.com\\docker\\distribution\\registry\\api\\v2 imports github.com/docker/distribution/registry/api/errcode\n[DEBUG] In vendor: github.com/docker/distribution/registry/api/errcode\n[DEBUG] Package github.com\\docker\\distribution\\registry\\api\\v2 imports github.com/gorilla/mux\n[DEBUG] In vendor: github.com/gorilla/mux\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\storage\\cache\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache imports github.com/docker/distribution\n[DEBUG] In vendor: github.com/docker/distribution\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache imports github.com/docker/distribution/context\n[DEBUG] In vendor: github.com/docker/distribution/context\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\registry\\storage\\cache\\memory\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache\\memory imports github.com/docker/distribution\n[DEBUG] In vendor: github.com/docker/distribution\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache\\memory imports github.com/docker/distribution/context\n[DEBUG] In vendor: github.com/docker/distribution/context\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache\\memory imports github.com/docker/distribution/digest\n[DEBUG] In vendor: github.com/docker/distribution/digest\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache\\memory imports github.com/docker/distribution/reference\n[DEBUG] In vendor: github.com/docker/distribution/reference\n[DEBUG] Package github.com\\docker\\distribution\\registry\\storage\\cache\\memory imports github.com/docker/distribution/registry/storage/cache\n[DEBUG] In vendor: github.com/docker/distribution/registry/storage/cache\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\docker\\distribution\\uuid\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\gorilla\\mux\n[DEBUG] Package github.com\\gorilla\\mux imports github.com/gorilla/context\n[DEBUG] Missing github.com/gorilla/context. Trying to resolve.\n[INFO] Fetching github.com/gorilla/context into C:\\Work\\src\\github.com\\F21\\someproject\\vendor\n[INFO] Setting version for github.com/gorilla/context to 14f550f51af52180c2eefed15e5fd18d63c0a64a.\n[DEBUG] Trying to open C:\\Work\\src\\github.com\\F21\\someproject\\vendor\\github.com\\gorilla\\context\n[INFO] Downloading dependencies. Please wait...\n[DEBUG] Dependency github.com/mitchellh/cli has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/fsnotify/fsnotify has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Microsoft/go-winio has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/gorilla/mux has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/cloudfoundry-incubator/candiedyaml has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/go-units has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/fatih/structs has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/flynn/go-shlex has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/opencontainers/runc has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Azure/go-ansiterm has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/bgentry/speakeasy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/armon/go-radix has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/mattn/go-isatty has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-playground/validator has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-yaml/yaml has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Fetching updates skipped.\n[INFO] Setting references for remaining imports\n[DEBUG] Dependency github.com/fsnotify/fsnotify has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/go-yaml/yaml has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/mitchellh/cli has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/gorilla/mux has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/fatih/structs has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/docker has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/bgentry/speakeasy has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/armon/go-radix has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/Microsoft/go-winio has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/mattn/go-isatty has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/cloudfoundry-incubator/candiedyaml has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/go-playground/validator has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/flynn/go-shlex has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/engine-api has already been pinned. Setting version skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/go-connections has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/opencontainers/runc has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/go-units has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/Azure/go-ansiterm has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/distribution has already been pinned. Setting version skipped.\n[DEBUG] Dependency github.com/docker/libcompose has already been pinned. Setting version skipped.\n[INFO] Project relies on 24 dependencies.\nAn Error has occurred\n``\n. Thanks, pinning docker to1.10fixed the error!\n. I am seeing the same problem here on Windows 10 64-bit. Glide is 0.13.0-dev and Go is 1.7.3. The error only happens when I runglide get ...to pull in new packages, and does NOT happen when I runglide install ...`.\nHere's my glide.yaml:\nyaml\npackage: github.com/F21/myproject\nimport:\n- package: github.com/hashicorp/raft\n- package: github.com/hashicorp/serf\n  version: ^0.8.0\n- package: github.com/Sirupsen/logrus\n  version: ^0.11.0\n- package: github.com/hashicorp/raft-boltdb\n- package: github.com/pkg/errors\n  version: ^0.8.0\n- package: k8s.io/client-go\n  version: ^2.0.0-alpha.0\n- package: github.com/hashicorp/vault\n  version: ^0.6.2\n  subpackages:\n  - api\n- package: github.com/mitchellh/mapstructure\nglide.lock:\nyaml\nhash: 02353925878776cd1117ea4f5d9c78874f94a7f3f7a7c19d5643854be3f6202c\nupdated: 2016-11-15T16:46:27.5033815+11:00\nimports:\n- name: cloud.google.com/go\n  version: 3b1ae45394a234c385be014e9a488f2bb6eef821\n  subpackages:\n  - compute/metadata\n  - internal\n- name: github.com/armon/go-metrics\n  version: 3df31a1ada83e310c2e24b267c8e8b68836547b4\n- name: github.com/blang/semver\n  version: 31b736133b98f26d5e078ec9eb591666edfd091f\n- name: github.com/boltdb/bolt\n  version: 4b1ebc1869ad66568b313d0dc410e2be72670dda\n- name: github.com/coreos/go-oidc\n  version: 5644a2f50e2d2d5ba0b474bc5bc55fea1925936d\n  subpackages:\n  - http\n  - jose\n  - key\n  - oauth2\n  - oidc\n- name: github.com/coreos/pkg\n  version: fa29b1d70f0beaddd4c7021607cc3c3be8ce94b8\n  subpackages:\n  - health\n  - httputil\n  - timeutil\n- name: github.com/davecgh/go-spew\n  version: 5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\n  subpackages:\n  - spew\n- name: github.com/docker/distribution\n  version: \"\"\n  subpackages:\n  - digest\n  - reference\n- name: github.com/emicklei/go-restful\n  version: 89ef8af493ab468a45a42bb0d89a06fccdd2fb22\n  subpackages:\n  - log\n  - swagger\n- name: github.com/fatih/structs\n  version: dc3312cb1a4513a366c4c9e622ad55c32df12ed3\n- name: github.com/ghodss/yaml\n  version: 73d445a93680fa1a78ae23a5839bad48f32ba1ee\n- name: github.com/go-openapi/jsonpointer\n  version: 46af16f9f7b149af66e5d1bd010e3574dc06de98\n- name: github.com/go-openapi/jsonreference\n  version: 13c6e3589ad90f49bd3e3bbe2c2cb3d7a4142272\n- name: github.com/go-openapi/spec\n  version: 6aced65f8501fe1217321abf0749d354824ba2ff\n- name: github.com/go-openapi/swag\n  version: 1d0bd113de87027671077d3c71eb3ac5d7dbba72\n- name: github.com/gogo/protobuf\n  version: e18d7aa8f8c624c915db340349aad4c49b10d173\n  subpackages:\n  - proto\n  - sortkeys\n- name: github.com/golang/glog\n  version: 44145f04b68cf362d9c4df2182967c2275eaefed\n- name: github.com/golang/protobuf\n  version: 8616e8ee5e20a1704615e6c8d7afcdac06087a67\n  subpackages:\n  - proto\n- name: github.com/google/gofuzz\n  version: bbcb9da2d746f8bdbd6a936686a0a6067ada0ec5\n- name: github.com/hashicorp/errwrap\n  version: 7554cd9344cec97297fa6649b055a8c98c2a1e55\n- name: github.com/hashicorp/go-cleanhttp\n  version: ad28ea4487f05916463e2423a55166280e8254b5\n- name: github.com/hashicorp/go-msgpack\n  version: fa3f63826f7c23912c15263591e65d54d080b458\n  subpackages:\n  - codec\n- name: github.com/hashicorp/go-multierror\n  version: 8c5f0ad9360406a3807ce7de6bc73269a91a6e51\n- name: github.com/hashicorp/go-rootcerts\n  version: 6bb64b370b90e7ef1fa532be9e591a81c3493e00\n- name: github.com/hashicorp/hcl\n  version: c3e054bfd4dcf77b9965ed2b79b22afa2f41d4eb\n  subpackages:\n  - hcl/ast\n  - hcl/parser\n  - hcl/scanner\n  - hcl/strconv\n  - hcl/token\n  - json/parser\n  - json/scanner\n  - json/token\n- name: github.com/hashicorp/memberlist\n  version: 7ad712f5f34ec40aebe6ca47756d07898486a8d2\n- name: github.com/hashicorp/raft\n  version: 5f09c4ffdbcd2a53768e78c47717415de12b6728\n- name: github.com/hashicorp/raft-boltdb\n  version: a8adffd05b79e3d8b1817d46bbe387a112265b3e\n- name: github.com/hashicorp/serf\n  version: b9642a47e6139e50548b6f14588a1a3c0839660a\n  subpackages:\n  - coordinate\n  - serf\n- name: github.com/hashicorp/vault\n  version: 22619b6786724c8eca5340a63395bf3058e1e3f7\n  subpackages:\n  - api\n  - helper/compressutil\n  - helper/jsonutil\n- name: github.com/jonboulle/clockwork\n  version: 72f9bd7c4e0c2a40055ab3d0f09654f730cce982\n- name: github.com/juju/ratelimit\n  version: 77ed1c8a01217656d2080ad51981f6e99adaa177\n- name: github.com/kubernetes/client-go\n  version: b22087a53becae45931ed72d5e0f12e0031d771a\n  subpackages:\n  - pkg/api\n  - pkg/watch\n- name: github.com/mailru/easyjson\n  version: d5b7844b561a7bc640052f1b935f7b800330d7e0\n  subpackages:\n  - buffer\n  - jlexer\n  - jwriter\n- name: github.com/miekg/dns\n  version: 58f52c57ce9df13460ac68200cef30a008b9c468\n- name: github.com/mitchellh/go-homedir\n  version: 756f7b183b7ab78acdbbee5c7f392838ed459dda\n- name: github.com/mitchellh/mapstructure\n  version: f3009df150dadf309fdee4a54ed65c124afad715\n- name: github.com/pborman/uuid\n  version: ca53cad383cad2479bbba7f7a1a05797ec1386e4\n- name: github.com/pkg/errors\n  version: 645ef00459ed84a119197bfb8d8205042c6df63d\n- name: github.com/PuerkitoBio/purell\n  version: 8a290539e2e8629dbc4e6bad948158f790ec31f4\n- name: github.com/PuerkitoBio/urlesc\n  version: 5bd2802263f21d8788851d5305584c82a5c75d7e\n- name: github.com/sethgrid/pester\n  version: 2a102734c18c43c74fd0664e06cd414cf9602b93\n- name: github.com/Sirupsen/logrus\n  version: d26492970760ca5d33129d2d799e34be5c4782eb\n- name: github.com/spf13/pflag\n  version: c7e63cf4530bcd3ba943729cee0efeff2ebea63f\n- name: github.com/ugorji/go\n  version: f1f1a805ed361a0e078bb537e4ea78cd37dcf065\n  subpackages:\n  - codec\n- name: golang.org/x/net\n  version: e90d6d0afc4c315a0d87a568ae68577cc15149a0\n  subpackages:\n  - context\n  - context/ctxhttp\n  - http2\n  - http2/hpack\n  - idna\n  - lex/httplex\n- name: golang.org/x/oauth2\n  version: 3c3a985cb79f52a3190fbc056984415ca6763d01\n  subpackages:\n  - google\n  - internal\n  - jws\n  - jwt\n- name: golang.org/x/sys\n  version: 8f0908ab3b2457e2e15403d3697c9ef5cb4b57a9\n  subpackages:\n  - unix\n- name: golang.org/x/text\n  version: 2910a502d2bf9e43193af9d68ca516529614eed3\n  subpackages:\n  - cases\n  - internal/tag\n  - language\n  - runes\n  - secure/bidirule\n  - secure/precis\n  - transform\n  - unicode/bidi\n  - unicode/norm\n  - width\n- name: google.golang.org/appengine\n  version: 4f7eeb5305a4ba1966344836ba4af9996b7b4e05\n  subpackages:\n  - internal\n  - internal/app_identity\n  - internal/base\n  - internal/datastore\n  - internal/log\n  - internal/modules\n  - internal/remote_api\n  - internal/urlfetch\n  - urlfetch\n- name: gopkg.in/inf.v0\n  version: 3887ee99ecf07df5b447e9b00d9c0b2adaa9f3e4\n- name: gopkg.in/yaml.v2\n  version: 53feefa2559fb8dfa8d81baad31be332c97d6c77\n- name: k8s.io/client-go\n  version: b22087a53becae45931ed72d5e0f12e0031d771a\n  subpackages:\n  - discovery\n  - kubernetes\n  - kubernetes/typed/apps/v1alpha1\n  - kubernetes/typed/authentication/v1beta1\n  - kubernetes/typed/authorization/v1beta1\n  - kubernetes/typed/autoscaling/v1\n  - kubernetes/typed/batch/v1\n  - kubernetes/typed/certificates/v1alpha1\n  - kubernetes/typed/core/v1\n  - kubernetes/typed/extensions/v1beta1\n  - kubernetes/typed/policy/v1alpha1\n  - kubernetes/typed/rbac/v1alpha1\n  - kubernetes/typed/storage/v1beta1\n  - pkg/api\n  - pkg/api/errors\n  - pkg/api/install\n  - pkg/api/meta\n  - pkg/api/meta/metatypes\n  - pkg/api/resource\n  - pkg/api/unversioned\n  - pkg/api/v1\n  - pkg/api/validation/path\n  - pkg/apimachinery\n  - pkg/apimachinery/announced\n  - pkg/apimachinery/registered\n  - pkg/apis/apps\n  - pkg/apis/apps/install\n  - pkg/apis/apps/v1alpha1\n  - pkg/apis/authentication\n  - pkg/apis/authentication/install\n  - pkg/apis/authentication/v1beta1\n  - pkg/apis/authorization\n  - pkg/apis/authorization/install\n  - pkg/apis/authorization/v1beta1\n  - pkg/apis/autoscaling\n  - pkg/apis/autoscaling/install\n  - pkg/apis/autoscaling/v1\n  - pkg/apis/batch\n  - pkg/apis/batch/install\n  - pkg/apis/batch/v1\n  - pkg/apis/batch/v2alpha1\n  - pkg/apis/certificates\n  - pkg/apis/certificates/install\n  - pkg/apis/certificates/v1alpha1\n  - pkg/apis/extensions\n  - pkg/apis/extensions/install\n  - pkg/apis/extensions/v1beta1\n  - pkg/apis/policy\n  - pkg/apis/policy/install\n  - pkg/apis/policy/v1alpha1\n  - pkg/apis/rbac\n  - pkg/apis/rbac/install\n  - pkg/apis/rbac/v1alpha1\n  - pkg/apis/storage\n  - pkg/apis/storage/install\n  - pkg/apis/storage/v1beta1\n  - pkg/auth/user\n  - pkg/conversion\n  - pkg/conversion/queryparams\n  - pkg/fields\n  - pkg/genericapiserver/openapi/common\n  - pkg/labels\n  - pkg/runtime\n  - pkg/runtime/serializer\n  - pkg/runtime/serializer/json\n  - pkg/runtime/serializer/protobuf\n  - pkg/runtime/serializer/recognizer\n  - pkg/runtime/serializer/streaming\n  - pkg/runtime/serializer/versioning\n  - pkg/selection\n  - pkg/third_party/forked/golang/reflect\n  - pkg/types\n  - pkg/util\n  - pkg/util/cert\n  - pkg/util/clock\n  - pkg/util/errors\n  - pkg/util/flowcontrol\n  - pkg/util/framer\n  - pkg/util/integer\n  - pkg/util/intstr\n  - pkg/util/json\n  - pkg/util/labels\n  - pkg/util/net\n  - pkg/util/parsers\n  - pkg/util/rand\n  - pkg/util/runtime\n  - pkg/util/sets\n  - pkg/util/uuid\n  - pkg/util/validation\n  - pkg/util/validation/field\n  - pkg/util/wait\n  - pkg/util/yaml\n  - pkg/version\n  - pkg/watch\n  - pkg/watch/versioned\n  - plugin/pkg/client/auth\n  - plugin/pkg/client/auth/gcp\n  - plugin/pkg/client/auth/oidc\n  - rest\n  - tools/clientcmd/api\n  - tools/metrics\n  - transport\ntestImports: []\nHere's some partial debug output:\n[DEBUG] Locking https-golang.org-x-sys\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-sys\n[DEBUG] Locking https-github.com-hashicorp-raft-boltdb\n[DEBUG] Locking https-github.com-mailru-easyjson\n[DEBUG] Dependency github.com/mailru/easyjson has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-mailru-easyjson\n[DEBUG] Locking https-gopkg.in-yaml.v2\n[DEBUG] Dependency gopkg.in/yaml.v2 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-gopkg.in-yaml.v2\n[DEBUG] Locking https-google.golang.org-appengine\n[DEBUG] Dependency google.golang.org/appengine has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-google.golang.org-appengine\n[DEBUG] Locking https-cloud.google.com-go\n[DEBUG] Dependency cloud.google.com/go has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-cloud.google.com-go\n[DEBUG] Locking https-github.com-coreos-pkg\n[DEBUG] Dependency github.com/coreos/pkg has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-coreos-pkg\n[DEBUG] Locking https-github.com-PuerkitoBio-urlesc\n[DEBUG] Dependency github.com/PuerkitoBio/urlesc has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-PuerkitoBio-urlesc\n[DEBUG] Locking https-golang.org-x-oauth2\n[DEBUG] Dependency golang.org/x/oauth2 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-oauth2\n[DEBUG] Locking https-github.com-kubernetes-client-go\n[DEBUG] Locking https-github.com-docker-distribution\n[DEBUG] Locking https-github.com-PuerkitoBio-purell\n[DEBUG] Dependency github.com/PuerkitoBio/purell has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-PuerkitoBio-purell\n[DEBUG] Locking https-golang.org-x-text\n[DEBUG] Dependency golang.org/x/text has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-text\n[DEBUG] Locking https-github.com-jonboulle-clockwork\n[DEBUG] Dependency github.com/jonboulle/clockwork has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-jonboulle-clockwork\n[DEBUG] Locking https-github.com-coreos-go-oidc\n[DEBUG] Dependency github.com/coreos/go-oidc has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-coreos-go-oidc\n[DEBUG] Locking https-github.com-golang-protobuf\n[DEBUG] Dependency github.com/golang/protobuf has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-golang-protobuf\n[DEBUG] Unlocking https-github.com-emicklei-go-restful\n[DEBUG] Unlocking https-github.com-hashicorp-raft-boltdb\n[DEBUG] Unlocking https-github.com-kubernetes-client-go\n[INFO]  --> Setting version for github.com/docker/distribution to cd27f179f2c10c5d300e6d09025b538c475b0d51.\n[INFO]  --> Detected semantic version. Setting version for github.com/Sirupsen/logrus to v0.11.0.\n[ERROR] Failed to set version on github.com/docker/distribution to cd27f179f2c10c5d300e6d09025b538c475b0d51: Unable to update checked out version\n[DEBUG] Output was: error: Your local changes to the following files would be overwritten by checkout:\n        .mailmap\n        AUTHORS\n        Dockerfile\n        Godeps/Godeps.json\n        MAINTAINERS\n        Makefile\n        README.md\n        ROADMAP.md\n        blobs.go\n        circle.yml\n        cmd/registry/main.go\n        configuration/configuration.go\n        configuration/configuration_test.go\n        context/http.go\n        contrib/docker-integration/README.md\n        contrib/docker-integration/docker-compose.yml\nPlease commit your changes or stash them before you switch branches.\nAborting[DEBUG] Unlocking https-github.com-docker-distribution\n[INFO]  --> Detected semantic version. Setting version for github.com/pkg/errors to v0.8.0.\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[ERROR] Failed to set references: Unable to update checked out version\n[DEBUG] Output was: error: Your local changes to the following files would be overwritten by checkout:\n        .mailmap\n        AUTHORS\n        Dockerfile\n        Godeps/Godeps.json\n        MAINTAINERS\n        Makefile\n        README.md\n        ROADMAP.md\n        blobs.go\n        circle.yml\n        cmd/registry/main.go\n        configuration/configuration.go\n        configuration/configuration_test.go\n        context/http.go\n        contrib/docker-integration/README.md\n        contrib/docker-integration/docker-compose.yml\nPlease commit your changes or stash them before you switch branches.\nAborting[INFO]  Exporting resolved dependencies...\n[DEBUG] Locking https-github.com-hashicorp-raft\n[DEBUG] Locking https-github.com-hashicorp-serf\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[DEBUG] Locking https-github.com-hashicorp-raft-boltdb\n[DEBUG] Locking https-github.com-pkg-errors\n[DEBUG] Locking https-k8s.io-client-go\n[DEBUG] Locking https-github.com-hashicorp-vault\n[DEBUG] Locking https-github.com-mitchellh-mapstructure\n[DEBUG] Locking https-github.com-fatih-structs\n[DEBUG] Locking https-github.com-hashicorp-go-multierror\n[DEBUG] Locking https-github.com-hashicorp-go-cleanhttp\n[DEBUG] Locking https-github.com-sethgrid-pester\n[DEBUG] Locking https-github.com-golang-glog\n[DEBUG] Locking https-github.com-hashicorp-go-rootcerts\n[DEBUG] Locking https-golang.org-x-net\n[DEBUG] Locking https-github.com-ugorji-go\n[DEBUG] Locking https-golang.org-x-sys\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-armon-go-metrics\n[DEBUG] Locking https-github.com-hashicorp-hcl\n[INFO]  --> Exporting github.com/hashicorp/raft\n[INFO]  --> Exporting github.com/Sirupsen/logrus\n[INFO]  --> Exporting github.com/hashicorp/serf\n[INFO]  --> Exporting github.com/mitchellh/mapstructure\n[INFO]  --> Exporting github.com/fatih/structs\n[INFO]  --> Exporting github.com/hashicorp/raft-boltdb\n[INFO]  --> Exporting github.com/hashicorp/vault\n[INFO]  --> Exporting github.com/pkg/errors\n[INFO]  --> Exporting github.com/hashicorp/go-cleanhttp\n[INFO]  --> Exporting github.com/sethgrid/pester\n[DEBUG] Unlocking https-github.com-fatih-structs\n[DEBUG] Locking https-github.com-hashicorp-go-msgpack\n[INFO]  --> Exporting github.com/hashicorp/go-rootcerts\n[INFO]  --> Exporting github.com/golang/glog\n[INFO]  --> Exporting github.com/hashicorp/go-multierror\n[INFO]  --> Exporting github.com/hashicorp/hcl\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[DEBUG] Locking https-github.com-miekg-dns\n[INFO]  --> Exporting k8s.io/client-go\n[DEBUG] Unlocking https-github.com-hashicorp-raft\n[DEBUG] Locking https-github.com-boltdb-bolt\n[DEBUG] Unlocking https-github.com-mitchellh-mapstructure\n[DEBUG] Locking https-github.com-hashicorp-memberlist\n[INFO]  --> Exporting golang.org/x/net\n[DEBUG] Unlocking https-github.com-hashicorp-go-cleanhttp\n[DEBUG] Locking https-github.com-hashicorp-errwrap\n[INFO]  --> Exporting github.com/ugorji/go\n[DEBUG] Unlocking https-github.com-hashicorp-raft-boltdb\n[DEBUG] Locking https-github.com-mitchellh-go-homedir\n[INFO]  --> Exporting github.com/armon/go-metrics\n[INFO]  --> Exporting github.com/davecgh/go-spew\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Locking https-github.com-go-openapi-spec\n[DEBUG] Unlocking https-github.com-sethgrid-pester\n[DEBUG] Locking https-github.com-gogo-protobuf\n[DEBUG] Unlocking https-github.com-hashicorp-go-rootcerts\n[DEBUG] Locking https-github.com-spf13-pflag\n[INFO]  --> Exporting golang.org/x/sys\n[INFO]  --> Exporting github.com/hashicorp/go-msgpack\n[DEBUG] Unlocking https-github.com-armon-go-metrics\n[DEBUG] Locking https-gopkg.in-inf.v0\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-google-gofuzz\n[INFO]  --> Exporting github.com/miekg/dns\n[INFO]  --> Exporting github.com/boltdb/bolt\n[DEBUG] Unlocking https-github.com-golang-glog\n[DEBUG] Locking https-github.com-pborman-uuid\n[INFO]  --> Exporting github.com/mitchellh/go-homedir\n[INFO]  --> Exporting github.com/hashicorp/memberlist\n[INFO]  --> Exporting github.com/hashicorp/errwrap\n[INFO]  --> Exporting github.com/go-openapi/spec\n[INFO]  --> Exporting github.com/gogo/protobuf\n[DEBUG] Unlocking https-github.com-hashicorp-go-msgpack\n[DEBUG] Locking https-github.com-emicklei-go-restful\n[INFO]  --> Exporting github.com/spf13/pflag\n[DEBUG] Unlocking https-github.com-hashicorp-hcl\n[DEBUG] Locking https-github.com-juju-ratelimit\n[DEBUG] Unlocking https-github.com-ugorji-go\n[DEBUG] Locking https-github.com-blang-semver\n[INFO]  --> Exporting github.com/google/gofuzz\n[INFO]  --> Exporting github.com/pborman/uuid\n[INFO]  --> Exporting gopkg.in/inf.v0\n[INFO]  --> Exporting github.com/juju/ratelimit\n[INFO]  --> Exporting github.com/emicklei/go-restful\n[INFO]  --> Exporting github.com/blang/semver\n[DEBUG] Unlocking https-github.com-pborman-uuid\n[DEBUG] Locking https-github.com-go-openapi-jsonpointer\n[DEBUG] Unlocking https-gopkg.in-inf.v0\n[DEBUG] Locking https-github.com-go-openapi-jsonreference\n[DEBUG] Unlocking https-github.com-hashicorp-memberlist\n[DEBUG] Locking https-github.com-go-openapi-swag\n[DEBUG] Unlocking https-github.com-google-gofuzz\n[DEBUG] Locking https-github.com-ghodss-yaml\n[DEBUG] Unlocking https-github.com-juju-ratelimit\n[DEBUG] Locking https-golang.org-x-oauth2\n[DEBUG] Unlocking https-github.com-blang-semver\n[DEBUG] Locking https-github.com-coreos-go-oidc\n[INFO]  --> Exporting github.com/go-openapi/jsonreference\n[INFO]  --> Exporting github.com/go-openapi/jsonpointer\n[INFO]  --> Exporting github.com/go-openapi/swag\n[INFO]  --> Exporting github.com/ghodss/yaml\n[INFO]  --> Exporting github.com/coreos/go-oidc\n[DEBUG] Unlocking https-github.com-hashicorp-errwrap\n[DEBUG] Locking https-github.com-docker-distribution\n[DEBUG] Unlocking https-github.com-mitchellh-go-homedir\n[DEBUG] Locking https-github.com-PuerkitoBio-purell\n[DEBUG] Unlocking https-github.com-go-openapi-swag\n[DEBUG] Locking https-github.com-mailru-easyjson\n[INFO]  --> Exporting github.com/docker/distribution\n[INFO]  --> Exporting github.com/PuerkitoBio/purell\n[INFO]  --> Exporting github.com/mailru/easyjson\n[DEBUG] Unlocking https-github.com-go-openapi-jsonreference\n[DEBUG] Locking https-gopkg.in-yaml.v2\n[INFO]  --> Exporting golang.org/x/oauth2\n[DEBUG] Unlocking https-github.com-boltdb-bolt\n[DEBUG] Locking https-google.golang.org-appengine\n[DEBUG] Unlocking https-github.com-go-openapi-spec\n[DEBUG] Locking https-cloud.google.com-go\n[DEBUG] Unlocking https-github.com-PuerkitoBio-purell\n[DEBUG] Locking https-github.com-coreos-pkg\n[INFO]  --> Exporting github.com/coreos/pkg\n[DEBUG] Unlocking https-github.com-go-openapi-jsonpointer\n[DEBUG] Locking https-github.com-jonboulle-clockwork\n[INFO]  --> Exporting github.com/jonboulle/clockwork\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  --> Exporting google.golang.org/appengine\n[INFO]  --> Exporting cloud.google.com/go\n[DEBUG] Unlocking https-gopkg.in-yaml.v2\n[DEBUG] Locking https-github.com-PuerkitoBio-urlesc\n[DEBUG] Unlocking https-github.com-hashicorp-go-multierror\n[DEBUG] Locking https-golang.org-x-text\n[INFO]  --> Exporting github.com/PuerkitoBio/urlesc\n[DEBUG] Unlocking https-github.com-PuerkitoBio-urlesc\n[DEBUG] Locking https-github.com-golang-protobuf\n[DEBUG] Unlocking https-github.com-spf13-pflag\n[DEBUG] Locking https-github.com-kubernetes-client-go\n[DEBUG] Unlocking https-github.com-miekg-dns\n[DEBUG] Unlocking https-github.com-coreos-go-oidc\n[INFO]  --> Exporting github.com/golang/protobuf\n[INFO]  --> Exporting github.com/kubernetes/client-go\n[INFO]  --> Exporting golang.org/x/text\n[DEBUG] Unlocking https-github.com-jonboulle-clockwork\n[DEBUG] Unlocking https-github.com-ghodss-yaml\n[DEBUG] Unlocking https-github.com-coreos-pkg\n[DEBUG] Unlocking https-github.com-emicklei-go-restful\n[DEBUG] Unlocking https-golang.org-x-oauth2\n[DEBUG] Unlocking https-github.com-mailru-easyjson\n[DEBUG] Unlocking https-github.com-hashicorp-serf\n[DEBUG] Unlocking https-golang.org-x-sys\n[DEBUG] Unlocking https-google.golang.org-appengine\n[DEBUG] Unlocking https-github.com-golang-protobuf\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Unlocking https-cloud.google.com-go\n[DEBUG] Unlocking https-golang.org-x-text\n[DEBUG] Unlocking https-github.com-docker-distribution\n[DEBUG] Unlocking https-k8s.io-client-go\n[DEBUG] Unlocking https-github.com-kubernetes-client-go\n[DEBUG] Unlocking https-github.com-gogo-protobuf\n[DEBUG] Unlocking https-github.com-hashicorp-vault\n[INFO]  Replacing existing vendor dependencies\n[DEBUG] Cross link err on Windows, trying manual copy: rename C:\\Users\\user\\AppData\\Local\\Temp\\glide-vendor701207259\\vendor D:\\Work\\src\\github.com\\F21\\myproject\\vendor: The system cannot move the file to a different disk drive.\n[INFO]  Removing nested vendor and Godeps/_workspace directories...\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\github.com\\docker\\distribution\\vendor\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\github.com\\hashicorp\\go-multierror\\vendor\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\github.com\\hashicorp\\serf\\vendor\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\github.com\\hashicorp\\vault\\vendor\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\github.com\\kubernetes\\client-go\\vendor\n[INFO]  Removing: D:\\Work\\src\\github.com\\F21\\myproject\\vendor\\k8s.io\\client-go\\vendor\nAn Error has occurred\n. A temp work around is to explicitly import google.golang.org/genproto/protobuf yourself.. It seems that the problem is that git is not prompting for my ssh key's password when used with glide. It does prompt for it if I use git clone directly:\n```\n[WARN]  Unable to checkout gitlab.com/company/myproject\n[ERROR] Update failed for gitlab.com/company/myproject: Unable to get repository\n[DEBUG] Output was: Cloning into 'C:\\Users\\user.glide\\cache\\src\\git-gitlab.com-company-myproject'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.[DEBUG]       Unlocking git-gitlab.com-company-myproject\n[ERROR] Failed to do initial checkout of config: Unable to get repository\n[DEBUG] Output was: Cloning into 'C:\\Users\\user.glide\\cache\\src\\git-gitlab.com-company-myproject'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```. @sdboyer Thanks, I was able to set up git bash to run the ssh agent on start up by using this guide: https://help.github.com/articles/working-with-ssh-key-passphrases/#platform-windows and got it working.\nHowever, in my case, I was never prompted to enter my ssh passkey, unlike #411 . ",
    "terinjokes": "OK. I think I've tracked down what happened.\nOriginally my package was \"github.com/terinjokes/foo-bar\", and was located as such underneath the $GOPATH. I developed the library first, later adding the CLI tool. As I was developing the CLI tool, the package was renamed to \"github.com/terinjokes/foobar\" and my CLI tool imported that path. I realized the \"package\" in glide.yaml was wrong, as well as my checkout under $GOPATH, so I corrected both. However, by this point the checkout had been created in vendor/ and the item added to the lockfile.\nRemoving it from the lockfile would only result it in being readded the next time glide ran. I suppose since it was being imported, glide would attempt resolution, finding it under vendor/ and thus adding it to the lockfile. Deleting it from both the lockfile and the vendor directory results it in remaining gone.\n. @sdboyer Yep, definitely. Didn't think that issue would be relevant.\nI got stung by this when working on a project on a flight, I expected all my dependencies to be there.\n. ",
    "abiosoft": "Yeah I am familiar with npm and composer. I take that as a similar behaviour to latest. \nThanks.\n. ",
    "russmatney": "I'm seeing similar behavior, just want to add that I'm seeing Cannot detect VCS errors on the private repo's subpackages. The error is fair, but I wouldn't expect that to prevent a glide.lock update for the rest of the packages, especially when vendor/ updates just fine.\n. @technosophos glide.yml is as such:\npackage: myproj.domain/namespace/proj\nimport:\n- package: myproj.domain/namespace/firstdep\n  vcs: git\n//etc\nThe errors/warnings are for firstdep's subpackages, which may not have a detectable vcs as they belong to firstdep's git repo. Ideally they'd throw \"soft\" warnings rather than fail the whole glide.lock update \u2013 all I need is firstdep to update itself, assuming that's the intended behavior. For now I'm updating the version in the .lock file by hand, but can move to the version: master fix.\n. @technosophos @mattfarina my mistake \u2013 I misread the errors and jumped to the wrong conclusion, namely that the private repo VCS errors were preventing the glide.lock write. The issue is caused by an actual error in resolving x/net/context, same as https://github.com/Masterminds/glide/issues/373.\nThe private repo VCS warnings is a result of the state of gogs and go-import metadata: https://github.com/gogits/gogs/issues/2825\nI'm seeing proper glide.lock updates now (if the x/net version is set to an earlier commit, that is).\n. ",
    "oryband": "Anything new with this issue? Been 3 months and no progress. This is a serious bug.\n. PING\n. ",
    "adangert": "\ud83d\udc4d  same here, having problems with glide.lock not updating to the glide.lock version.\n. same problem I was having \"rm -rf ~/.glide/cache/\" worked for me, glide.lock was not updating to the latest commit hash regardless of doing a glide update\n. ",
    "cep21": "I have the same issue.  I removed the repository inside ~/.glide/cache/src and rerun glide up, and noticed I now had the latest version.  The code in ~/.glide/cache/src/ was not getting updated to master.\n. Just to clarify, if I want to get the latest code when I run glide up I need to change my yaml to have version: master on every package like:\nimport:\n- package: a\n  version: master\n- pacakge: b\n  version: master\n- package: c\n  version master\n- package: d\n  version master\n?\nThis seems like it should be the default.  Maybe it's worth documenting that it's not.. Any update on this?  We see it frequently here and doing glide cc before every glide command is making the program almost unbearably slow.\n. ",
    "radomirml": "Same issue here. As noted by @cep21 , deleting repo from the cache helps.. ",
    "yoshaul": "I also think that glide get should at least should add an option to disable automatic updates.\nThe procedure I'm currently doing is that after glide get I revert all the changes to the lock file besides the newly added packaged and also revert the updated dependencies in the vendor folder. \n. ",
    "droslean": "Recently I tried to add 2 more packages to my vendor folder. If I will just copy paste them into the vendor's folder, everything looks ok. But if I try to do this with glide get pgk, glide is destroying everything, since its trying to fetch the changes, with the result that all the other packages are failing to compile.\nSo my question is: How I can tell glide to just clone the package I want, into the vendor's directory, and update the .yaml and .lock file?. ",
    "prashantv": "A shorter timeout would be great. I think there should be some logging (or at least debug logging) when it tries to hit any URL for others trying to debug why it's taking so long.\n. I tried to update a package to use testImport and hit a similar issue,\n[ERROR] Failed to set version on github.com/apache/thrift to bcad91771b7f0bff28a1cac1981d7ef2b9bcef3c: Unable to update checked out version\n. @mattfarina You can see the full glide.yaml and glide.lock causing failures here:\nhttps://github.com/yarpc/yab/pull/95\nThere is no overlap between the normal imports and test imports:\nhttps://github.com/yarpc/yab/blob/eaaea58e33966aea27e4d8545131d3fc4b5c3d73/glide.yaml\n. can unexport this\n. I'd prefer to keep the visibility the same as it was previously as part of this change.\nHowever since this is a main package, other's can't import it anyway.\n. ",
    "Akagi201": "Will the package: line not use the absolute path name. just use the repo name. In my case, the package: line should be package: bms4upyun\n. ",
    "alde": "Cheers, I'll try to fix that this weekend, or on monday.\n. My idea with --without-dev was that if you know that you won't be running the tests for example you'd know that you don't want/need them installed\nI am however having some issues with the resolver, as in I'm not sure I fully understand what it's meant to do. I assumed at first it went through the .go files and found imports, and as such it would need to go through the _test.go files for dev imports, but that doesn't seem to be the case\n. Yes, that was my thought, and the reason I started trying to patch it.\n. Yeah, sorry, I've got it a bit hectic atm.\nIf you want to finish it, please feel free, I don't know when I'll have the time to focus on it again :(\n. ",
    "lpetre": "I wanted to +1 @technosophos's comment for this use-case:\n\nAn external Go tool that is used for something like go generate\n\nWe do this currently for fresh and I would love for our dependency management solution to cover this use case. Otherwise, do I need to have a separate way (makefile, ant, etc) of telling my developers to go get a half-dozen packages at specific versions/urls/etc?\n. ",
    "mmindenhall": "Please note that it's also possible for test files in package foo to declare their package as foo_test (from go help test):\n\nTest files that declare a package with the suffix \"_test\" will be compiled as a\nseparate package, and then linked and run with the main test binary.\n\nIf the list of test imports is being collected from the Package struct, the entire set of imports would include:\ngo\n    imps := p.Imports                      // imports from GoFiles, CgoFiles\n    imps = append(imps, p.TestImports...)  // imports from TestGoFiles\n    imps = append(imps, p.XTestImports...) // imports from XTestGoFiles\n. ",
    "TommyM": "Is there any news on this PR or similar functionality (vendoring test dependencies) going into glide anytime soon?\n. ",
    "kevin-cantwell": "I know this is closed, but perhaps this will be helpful for those trying to vendor their test deps with glide. It's a crazy stupid long one liner in bash that passes all recursive test deps into glide get:\n$ glide create\n$ ( go list -f '{{join .TestImports \"\\n\"}}' $(glide novendor) | xargs go list -f '{{join .Deps \"\\n\"}}'  | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' ; go list -f '{{join .XTestImports \"\\n\"}}' $(glide novendor) | xargs go list -f '{{join .Deps \"\\n\"}}'  | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' ) | grep -v $(go list) | xargs glide get\nUnfortunately, this only works if your vendor directory is empty. Otherwise you'll end up with a bunch of subpackages in your glide.yaml with the \"vendor/\" prefix.\n. I'm also seeing this behavior. Running git ls-files --stage | grep 160000 (160000 indicates a gitlink, which is used to create submodules). However, there appears to be no way to remove the gitlink and just check in the damn files. Or at least, I'm not good enough with git to do so...\n. I receive this type of error often when I try to glide install a new revision of a dependency that exists only in my GOPATH. This happens when our team has private project dependencies that I'm working on in parallel. The only solution that works for me is to commit the dependency revision to master before attempting to glide install in the current project.. ",
    "timstudd": "@mattfarina I found that the issue was due to my local environment.  I'm using OS X and had symlinks with both GOROOT and GOPATH to a outside directory.  This apparently caused the issue as removing the symlink from GOROOT resulted in glide.yaml no longer including the local sub-packages.  Thanks for your consideration, but I'll close this PR.\n. ",
    "andradei": "Also, should glide rm remove the package from the vendor/ directory as well as the glide.yaml entry?\n. You're correct about the imports in code affecting the decision in glide.lock.\nThanks for glide up --delete I haven't found that switch option until glide up --help.\nThis is a great project.\n. ",
    "aaronkavlie-wf": "I can put up my WIP code. Didn't seem too complicated to add, though I got tripped up a bit by the implementation details in repo/vcs.go.\nThinking about it more, I'm not sure that \"remote cache\" adequately describes this functionality. A cache is often temporary and ephemeral. It would act like a cache only in that you fall back to fetching as usual (and that could even be potentially disabled, for companies with strict requirements for 3rd-party packages).\n. @sdboyer are @mattfarina & co planning to use vsolver for glide at some point, or is that speculative?\n. Could those manual tests be turned into an integration test script that others could run? That would go a long way.\n. ",
    "plutov": "We have same issue, attached our glide.yml:\npackage: logpacker\nimport:\n- package: github.com/hpcloud/tail\n- package: github.com/Pallinder/go-randomdata\n- package: github.com/bluele/slack\n- package: github.com/bradfitz/gomemcache\n  subpackages:\n  - memcache\n- package: github.com/c9s/goprocinfo\n  subpackages:\n  - linux\n- package: github.com/fsnotify/fsnotify\n- package: github.com/vjeantet/grok\n- package: github.com/go-ini/ini\n- package: github.com/go-sql-driver/mysql\n- package: github.com/gorilla/mux\n- package: github.com/influxdata/influxdb\n  subpackages:\n  - client\n- package: github.com/lib/pq\n- package: github.com/nu7hatch/gouuid\n- package: github.com/sdming/goh\n  subpackages:\n  - Hbase\n- package: github.com/subosito/twilio\n- package: github.com/tarantool/go-tarantool\n- package: github.com/wblakecaldwell/profiler\n- package: gopkg.in/Shopify/sarama.v1\n- package: gopkg.in/mgo.v2\n  subpackages:\n  - bson\n- package: gopkg.in/olivere/elastic.v2\n- package: gopkg.in/olivere/elastic.v3\n. ",
    "MiguelMoll": "After further investigation, I see it supported here https://github.com/Masterminds/glide/blob/70b5387d87677f4f2f2aa93971aec8877bcd3760/util/util.go#L57-L65. I have to see what I'm doing wrong.\n. ",
    "brycefisher": "Yes, I use \ud83c\udf7b instead of $ in my shell.\n. @mattfarina your insights are much appreciated. I totally understand points 1. and 2. you raise above -- somewhat counterintuitive at first, but I completely understand the desire to flatten dependencies as much as possible. I don't think I'm asking you to rewrite glide completely from scratch.\nMy understanding from reading the glide docs though is that if I specify a direct dependency on FOO v1 and BAR v1, and BAR v1 vendors FOO v2, glide will not try to flatten BAR's vendored copy of FOO v2. This was my understanding from reading https://github.com/Masterminds/glide/issues/303 and from https://glide.readthedocs.org/en/latest/vendor/ . \nDo I misunderstand the intended behavior of glide in the case I describe here?\n. @mattfarina any response on the expected behavior of glide?\n. @technosophos -- thanks for clarifying my question about the intended functionality.\n. ",
    "vishh": "Woot\n. ",
    "ernestoalejo": "That is precisely what I want glide to do; but it's not the current behaviour. Running glide update with the following pair of files does nothing to update to the latest commit (b2c7a7da...).\nglide.yaml:\nyaml\npackage: tt\nimport:\n- package: github.com/juju/errors\nglide.lock:\nyaml\nhash: c5d0b5564bb639895d120e9a72eb397a6eb6efc23a772e808c9a49e20db395de\nupdated: 2016-03-28T02:44:51.503697917+02:00\nimports:\n- name: github.com/juju/errors\n  version: 797449fa4bdba2948dfc581cdc3acf625272a8d6\ndevImports: []\n``` shell\n \ue0b0 glide update\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/juju/errors.\n[INFO] Resolving imports\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 1 dependencies.\nStill on 797449...\n\ue0b0 glide install\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/juju/errors.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references.\n[INFO] Setting version for github.com/juju/errors to 797449fa4bdba2948dfc581cdc3acf625272a8d6.\n\ue0b0 glide -v\nglide version 0.10.1\n``\n. I made up a newglide.yamlfile to use a public repo; ignore the timestamp in theupdatedfield. Suppose that theglide.lockfile was generated in a previousglide updaterun 1 month ago and797449was the last commit at the moment. Now a new commit (b2c7a7da5`) is available and I want to update to it.\nIf you don't have a previous glide.lock file it works well; it's like the first run and everything gets resolved from scratch. However, if you do have a previous glide.lock file, you have to delete the lib or the whole file altogether to force the update.\n. Both; though I only expected glide update to work as you said. See the console output here: https://github.com/Masterminds/glide/issues/356#issuecomment-202178538\nglide update is not updating the lock file correctly, the timestamp changes but the commit is the same as before and doesn't resolve anything.\n. It works with version: master\n. ",
    "dhawal55": "Great. --strip-vcs was what i was looking for.\n. ",
    "uluyol": "Yes, though ideally this would be autodetected.\n. It looks like github.com/gdamore/tcell will do the job\n```\n$ cat main.go \npackage main\nimport (\n    \"fmt\"\n    \"os\"\n\"github.com/gdamore/tcell\"\n\n)\nfunc main() {\n    ti, err := tcell.LookupTerminfo(os.Getenv(\"TERM\"))\n    if err != nil {\n        fmt.Printf(\"Err: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"colors: %d\\n\", ti.Colors)\n}\n$ go run main.go\ncolors: 256\n$ TERM=dumb go run main.go\nErr: terminal entry not found\n$ TERM=screen go run main.go\ncolors: 8\n```\n. I made a package that does exactly this: https://github.com/uluyol/tcolor.\n. I think that glide should also check if TERM == \"dumb\". Dumb terminals don't support most escape sequences and this would be sufficient for acme users (myself) and possibly emacs users as well.\n. ",
    "tmm1": "Was hoping this would be fixed with #354, but I confirmed it's still not working in glide 0.10.1\n. You can see in the bootstrap.sh, I set GOPATH=$(pwd)/vendor. This approach works great for regular local imports, but there seems to be an issue when one subpackage tries to import another using the ../ prefix (there is no issue with ./ imports).\n. I realize this is not the recommended way to use go and GOPATH, but this sort of workflow makes things a lot easier for non-go devs trying to use a new tool that just happens to be written in go. Most developers expect to be able to clone a repo anywhere and run a command inside the repo to build it.\nglide makes this trivial workflow trivial, except for this particular issue which only manifests when subpackages refer to each other using relative imports. I'm happy to provide a patch that fixes the problem if someone can point in the right direction.\n. Oops, I thought I had made it public. It is now.\ngb looks interesting, but I didn't want to have to stop using go build and other standard commands (especially when they're generally being invoked by Atom plugins and other tools).\nAnyway, this issue has been resolved with https://github.com/Masterminds/glide/issues/361 and things are working quite well for me with that patch.\n. Yea, you're right, this doesn't make much sense. I'm not even sure why it works, but I will dig further and update this PR with an isolated fix to the ignore logic.\n. With the latest change here, relative imports (starting with either ./ or ../) are marked with a new LocRelative. This new type of import is ignored in the existing switch statements throughout the resolver, thereby ignoring relative imports and fixing all the issues I was having.\n. I ran into this issue because of a stale lockfile. I only figured it out once I entered the cache directory and tried to issue the checkout myself. Would be useful if glide displayed git's stderr in these scenarios.\nvagrant@vagrant-ubuntu-trusty-64:~/.glide/cache/src/https-github.com-tmm1-blevex$ git checkout 58782622cfc67561b97cb8eee1f85bd973175e78\nfatal: Unable to create '/home/vagrant/.glide/cache/src/https-github.com-tmm1-blevex/.git/index.lock': File exists.. ",
    "dnathe4th": "yaml\n~/gocode/src/example$ cat glide.lock\nhash: 508d7f512759bda6eb412a18ab30d992fbfdcd05fd0ded5d50511345ca065181\nupdated: 2016-03-30T01:01:41.170110135Z\nimports:\n- name: github.com/cactus/go-statsd-client\n  version: 5517f304319b9a066354b84860cb264c89655f69\n  subpackages:\n  - statsd\n- name: github.com/onsi/ginkgo\n  version: c3a655f9b37a2207fa39721b078b3173ee9218d6\n  subpackages:\n  - config\n  - internal/codelocation\n  - internal/failer\n  - internal/remote\n  - internal/suite\n  - internal/testingtproxy\n  - internal/writer\n  - reporters\n  - reporters/stenographer\n  - types\n  - internal/containernode\n  - internal/leafnodes\n  - internal/spec\n  - internal/specrunner\n- name: github.com/onsi/gomega\n  version: 7ce781ea776b2fd506491011353bded2e40c8467\n  subpackages:\n  - internal/assertion\n  - internal/asyncassertion\n  - internal/testingtsupport\n  - matchers\n  - types\n  - internal/oraclematcher\n  - format\n  - matchers/support/goraph/bipartitegraph\n  - matchers/support/goraph/edge\n  - matchers/support/goraph/node\n  - matchers/support/goraph/util\n- name: github.com/opentracing/opentracing-go\n  version: 01498abd158dfdbe8e251856bc7d14cb0f046fa3\n- name: github.com/pborman/uuid\n  version: c55201b036063326c5b1b89ccfe45a184973d073\n- name: github.com/Sirupsen/logrus\n  version: 4b6ea7319e214d98c938f12692336f7ca9348d6b\n- name: github.com/uber/tchannel-go\n  version: 8f1ed1aa5bb22b4e9f2ced0e736ff771b34dcb39\n  subpackages:\n  - atomic\n  - tnet\n  - typed\n- name: golang.org/x/net\n  version: 6c89489cafabcbc76df9dbf84ebf07204673fecf\n  subpackages:\n  - context\n- name: golang.org/x/sys\n  version: 320cb01ddbbf0473674c2585f9b6e245721de355\n  subpackages:\n  - unix\ndevImports: []\nNo committed vendor/, in this example I haven't actually even run git init in ~/gocode/src/example so the only repos are the git dependencies.\n. Strange, thanks for investigating so far. I'm building glide from a1e937bc21cfb026c83fbe0282f25f6cff7ae3cd, which looks like it's 0.9.3 and then some.\n. No dice on 0.10.1-1-g844a771, or 0.9.3 proper.\nSomething strange though, why does your output say [INFO] Project relies on 7 dependencies. but I get [INFO] Project relies on 9 dependencies.? Something is still inconsistent between our setups.\n. ",
    "ippy04": "This seems to work now for me with v0.11.1_1 installed from homebrew if I specify version: master in my glide.yaml. Previously setting version: master still mostly didn't work, and I'd have to delete the vendor/github.com/repo directory as a workaround before running glide up to ensure the last version made it into glide.lock.\nWithout version: master though glide.lock still isn't being updated properly.\n. @mattfarina Just tried with latest tip of master and everything seems to work without version: master. Didn't realize how many of my vendored packages were out of date!\n. ",
    "schickling": "What about:\nyml\n- package: github.com/aws/aws-sdk-go\n  strip_vcs: true\n  subpackages:\n  - aws\n  - aws/credentials\n  - aws/session\n  - service/s3\nstrip_vcs would be false as default\n. > I want to just strip the VCS for private repos in order to have them available all the time and leave it for public dependencies.\nMaybe someone could add some documentation on how to achieve my described goal using the vsolver method like @sdboyer mentioned?\n. Thanks @mattfarina! I guess it would be quite useful to mention this somewhere in the docs! :+1: \n. ",
    "rbuckland": "+1\nI would go slightly further - until you are comfortable where the problem actually lies / and has been subsequently resolved. I would go so far as to error right out of the build; except allow --ignore-sym-link-detection flag.\n. ",
    "kimamula": "I found that when I download a package with glide get --strip-vcs and then download another package with glide get --strip-vcs, the version for the first downloaded package in glide.lock is updated to the commit hash of my own project.\nThe direct cause of this problem is the implementation of GitRepo#Version(), which returns the commit hash of the ancestor's directory in the absence of .git in the downloaded package's directory.\nhttps://github.com/Masterminds/vcs/blob/master/git.go#L163-L170\nCan I expect this to be solved by @sdboyer's work as well?\n. That's great, thanks!\n. ",
    "martinb3": "I'm seeing this too. Asking to glide get --quick a single dependency seems to make glide try to touch the remote repos for all dependencies.\n. ",
    "doroginin": "The same for me. Maybe we don't understand meaning of this option? -). ",
    "jtblin": "No I use git not hg. I don't have any commit yet as the repo is not pushed yet (developing locally), could that be the issue?\n. I pushed some commits and I'm still getting the same error so it doesn't look like it's the issue. Given the error message specifically mentions the code generated from protobuf, it does seem like this is what causing the issue. There are 2 types of files in this directory .proto and .go, not sure which one is causing the issue. Is there any advise to troubleshoot further?\n. Thank you @mattfarina, sorry I missed your previous answer. Yes it is a private repo but it is set as ssh in the local git config. \nAdding repo: git@bitbucket.org:jtblin/some-repo (with or without .git at the end) in the yaml file yields a different error:\n\n[ERROR] Update failed for bitbucket.org/jtblin/some-repo: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS \n\nIf I do a glide get bitbucket.org:jtblin/some-repo it is able to fetch the packages imported by this repo but it fails to import the repo itself, always with the same error.\n\n[ERROR] Update failed for bitbucket.org/jtblin/some-repo: XML syntax error on line 9: expected attribute name in element\n\nThe import is for the correct path and my IDE is able to see the imported package so I can confirm that everything is correct from this perspective.\nI tried deleting all the glide files and started the entire process but same issue. The repo is added in the glide.lock file btw, but it doesn't make it to the vendor directory.\nI tried with another bitbucket private repo which doesn't have protobuf and I am getting the same error so protobuf is not the issue indeed. It seems it just doesn't work with bitbucket private repos.\n. I have 0.10.1 installed via brew.\n. ",
    "vishr": "With installation from HEAD, xml parsing error is gone but I still get Cannot detect VCS. It is a private bitbucket repo.\n. ",
    "crsmithdev": "@technosophos @mattfarina I'm working with @sectioneight and may submit a PR with this functionality in the near future (rewrite rules)...how would you feel about supporting this in some kind of global config (~/.gliderc or similar)?  It could be applicable on a per-project or global basis; for us, being able to specify it globally makes it easier to ensure that all of our engineers are using it and they don't have to add it to every single project using Glide.\nThen again, it's adding a new global config file, so I figured I'd ask specifically first.\n. Yes...that was a source of some confusion for me as well.  Would a workable approach be to replace the installer / vcs Config value, from conf to confcopy, after confcopy is created, and then swap it back @ the end of whatever function is creating the copy?  Or is there a better way, somehow?\n. I've updated this w/ more careful treatment of config copies.\n. @sectioneight yes, is there anything I need to do in order to transfer / reassign to you?\n. ",
    "vektah": "\nI guess we could do something like \"load the global .gliderc, and if there's a local .gliderc (e.g. in same dir as glie.yaml), merge that with the global\". But even starting with a global config gives us a strong starting point.\n\nI would love to see this.\nIn our CI stack the infrastructure is shared between multiple projects with different config, writing to the $HOME is likely to cause concurrency and clean up issues. A file that can be git ignored and put into the project dir by the initialization hook would be great.\n. Ah thanks, that's perfect for now.\nBig ol' :+1: to the .gliderc idea, its in line with how other dependency managers work. Its great to see that there is some thought going into this.\nI'll close this as there seem to be other tickets covering the ongoing work.\n. ",
    "bfitzsimmons": "Ran into this today.\n. ",
    "raphael": "Thank you, makes sense.\n. ",
    "dlsniper": "I'd be happy to send a PR to fix this if wanted.\n. ",
    "franciscocpg": "Hi @mattfarina.\nI agree with you that this is a best practice, but I think that it should not be mandatory. Some people prefer to control versions outside the VCS. One of the advantages of doing this is that your app version is not tied to VCS and you can change to any other VCS without any problems.\nBesides that the version property is not mandatory in the glide.yaml. The idea is not to doing double duty to maintain versions in both tags and in the glide.yaml file, but to use one or another way.\n. Hi @sdboyer.\nThank you for the explanation.\nI read your article and your considerations and removed the version field.\nI have merged with version field to my master branch in my fork because I am still tending to think that code version (every commit and its hashs, for example), build version and release version can be different things. \nBut I can change my mind in the future, :smile:. \nMaybe for golang and the VCS-driven ecosystem model really doesn't make sense. I don't know, still confused, :confused:.\nAnyway, I hope you guys can approve my PR now, :grinning:.\n. @mattfarina, yes.\n. Hi @mattfarina \n1. Thats a good point. How are you guys doing with homebrew?\n2. Done!\n. @mattfarina, The homebrew release is a manual process?\nYes, I can update the ppa for every glide release.\n. Hi @mattfarina \nI added the MIT license to the project.\nYes, I can be the admin for the project and I am commited on running it on every glide release.\n. @mattfarina According to this link Transferring a repository, it's not possible to transfer from an user to an organization without admin privileges on that organization.\nSo, I think it's better you create glide-ppa repository at Masterminds, clone franciscocpg/glide-ppa and push to this new repository.\nThen I am going to destroy franciscocpg/glide-ppa and fork Masterminds/glide-ppa.\nDo you think that is the best way to manage this transfer?\n. Hello @fj.\nWe are trying to make it work with snappy, but now that you opened this issue I realized that we should publish to PPA for xenial release while this work is in progress.\nI am going to do this ASAP and close this issue when it's done.\n. Hi @fj \nGlide is available now to Xenial thought PPA.\nCould you please try again?\n. Hi @mattfarina.\nCould you approve the glide-ppa PR too?\n. I think that @sdboyer suggestion (curl <URL> | sh) is really a good option.\nBut for this to work we need to have releases for all supported platforms.\nAccording to this link, here is the list of supported (cgo) platforms:\n\"darwin/386\":      true,\n\"darwin/amd64\":    true,\n\"darwin/arm\":      true,\n\"darwin/arm64\":    true,\n\"dragonfly/amd64\": true,\n\"freebsd/386\":     true,\n\"freebsd/amd64\":   true,\n\"freebsd/arm\":     true,\n\"linux/386\":       true,\n\"linux/amd64\":     true,\n\"linux/arm\":       true,\n\"linux/arm64\":     true,\n\"linux/ppc64le\":   true,\n\"android/386\":     true,\n\"android/amd64\":   true,\n\"android/arm\":     true,\n\"netbsd/386\":      true,\n\"netbsd/amd64\":    true,\n\"netbsd/arm\":      true,\n\"openbsd/386\":     true,\n\"openbsd/amd64\":   true,\n\"solaris/amd64\":   true,\n\"windows/386\":     true,\n\"windows/amd64\":   true,\n@mattfarina: By the way, how are you doing the releases?\n. Ok @mattfarina \nI am going to start working on this.\n. Hi @cescoferraro \nAs mentioned in the README of this project there is repo for these ubuntu distros (and here is the project https://github.com/Masterminds/glide-ppa)\nUbuntu Precise(12.04), Trusty (14.04), Wily (15.10) or Xenial (16.04)\nAre you asking for a debian wheezy repo?\n. I think this issue is related to issue https://github.com/Masterminds/glide/issues/448 and PR https://github.com/Masterminds/glide/pull/428.\nI see no problem adding the wheezy dist to ppa, but I really think that curl <URL> | sh script with the github release is a better option to reach all supported golang platforms.\n. Hi @cescoferraro \nI opened this issue proposing a PR, but no response yet.\n. According to this site, no.\n. But golang.org is blocked. It has something to do with?\n. Hi @mattfarina.\nOne need to be root because i am forcing location to /usr/local/bin.\nIf we let user decide where to install, then he can decide if it needs to execute as sudo or not.\nBut I still think it's a good practise for *nix users to install things at /usr/local/bin.\nOr we can take an approach like rvm (https://rvm.io/rvm/install and https://get.rvm.io).\nIf the user is not running the script as root then they call Single-User Install and install location is ~/.rvm. If the user is running as root then they call  Multi-User Install and the install location is /usr/local/rvm.\nAnother thing to take note is that https://get.rvm.io just redirects to https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer.\n. @mattfarina \nTo be honest I loved your idea about $GOPATH/bin.\nGolang is a pre-requisite for using glide so it makes sense.\nBesides that, putting in $GOPATH/bin reduces the complexity because we only need to verify if $GOPATH env is set.\nSo, if $GOPATH is not set then we fail with a message otherwise we install at  $GOPATH/bin.\nWhat do you think?\n. @mattfarina \nAccording to this link https://github.com/golang/go/wiki/GoArm#supported-architectures, we need only to set  GOARM variable.\nI can prepare a PR that is going to remove gox and use some approach like this http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5 to build.\nOr I can fork https://github.com/mitchellh/gox and prepare a PR (this approach takes longer, but would be better for open source community) with the ability to use GOARM.\n. Yes,  I thought about the parallelism too.\nBut even if gox doesn't have interest in the PR (I started the thread here) we can work with our fork, right?\nBecause we need that for sure.\n. So @mattfarina \nI created the PR https://github.com/Masterminds/glide.sh/pull/3 with the new version of install.sh and removed it from this PR.\nASAP I am going to work on gox.\n. @brikis98 \nI'm not the maintainer neither but I know the community is putting some effort on https://github.com/golang/dep.\nI wouldn't say that this project is abandoned now, but it certainly has low activity.. I am getting the same error using an internal gitlab\n. Hi @gavbaa and @fanningert.\nThe problem here is not with glide, ssh and aliases. \nIndeed the problem is that you don't have the appropriate ssh keys at the environment you are building.\n. Hi @fanningert \nThis is a log from a vagrant machine without an a ssh key trying to clone glide repository using ssh\n```\ngit clone git@github.com:Masterminds/glide.git\nCloning into 'glide'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\nSo yes, you need it, :).\nI take a look at the issue https://github.com/gogits/gogs/issues/3284 and https://gist.github.com/jakschu/f66b0b5863d06cf6d61577cd94bc4e41.\nTry to run with --debug flag, for example: glide --debug up.\nFor me it looks more that you are getting some network problem when you are running glide up.\nI just run glide up (using version 0.11.0 ) now  at github.com/gogits/gogs without any problem.\nglide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/go-macaron/captcha.\n[INFO]  --> Fetching updates for github.com/go-macaron/gzip.\n[INFO]  --> Fetching updates for github.com/go-macaron/csrf.\n[INFO]  --> Fetching updates for github.com/go-macaron/session.\n[INFO]  --> Fetching updates for github.com/Unknwon/cae.\n[INFO]  --> Fetching updates for github.com/go-macaron/i18n.\n[INFO]  --> Fetching updates for github.com/gogits/chardet.\n[INFO]  --> Fetching updates for github.com/go-macaron/cache.\n[INFO]  --> Fetching updates for github.com/Unknwon/com.\n[INFO]  --> Fetching updates for github.com/gogits/cron.\n[INFO]  --> Fetching updates for github.com/gogits/go-gogs-client.\n[INFO]  --> Fetching updates for github.com/go-xorm/core.\n[INFO]  --> Fetching updates for github.com/go-macaron/toolbox.\n[INFO]  --> Fetching updates for github.com/codegangsta/cli.\n[INFO]  --> Fetching updates for github.com/gogits/git-module.\n[INFO]  --> Fetching updates for github.com/Unknwon/i18n.\n[INFO]  --> Fetching updates for github.com/Unknwon/paginater.\n[INFO]  --> Fetching updates for github.com/go-sql-driver/mysql.\n[INFO]  --> Fetching updates for github.com/go-macaron/binding.\n[INFO]  --> Fetching updates for github.com/go-xorm/xorm.\n[INFO]  --> Fetching updates for github.com/issue9/identicon.\n[INFO]  --> Fetching updates for github.com/kardianos/minwinsvc.\n[INFO]  --> Fetching updates for github.com/lib/pq.\n[INFO]  --> Fetching updates for github.com/mattn/go-sqlite3.\n[INFO]  --> Fetching updates for github.com/mcuadros/go-version.\n[INFO]  --> Fetching updates for github.com/microcosm-cc/bluemonday.\n[INFO]  --> Fetching updates for github.com/msteinert/pam.\n[INFO]  --> Fetching updates for github.com/nfnt/resize.\n[INFO]  --> Fetching updates for github.com/russross/blackfriday.\n[INFO]  --> Fetching updates for github.com/satori/go.uuid.\n[INFO]  --> Fetching updates for github.com/sergi/go-diff.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[INFO]  --> Fetching updates for golang.org/x/net.\n[INFO]  --> Fetching updates for golang.org/x/text.\n[INFO]  --> Fetching updates for gopkg.in/gomail.v2.\n[INFO]  --> Fetching updates for gopkg.in/ini.v1.\n[INFO]  --> Fetching updates for gopkg.in/ldap.v2.\n[INFO]  --> Fetching updates for gopkg.in/macaron.v1.\n[INFO]  Resolving imports\n[INFO]  Fetching github.com/bradfitz/gomemcache/memcache into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching gopkg.in/redis.v2 into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/klauspost/compress/gzip into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/go-macaron/inject into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/go-xorm/tidb into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/ngaut/log into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/pingcap/tidb into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching gopkg.in/alexcesaro/quotedprintable.v3 into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching gopkg.in/asn1-ber.v1 into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/jaytaylor/html2text into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/shurcooL/sanitized_anchor_name into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching golang.org/x/sys/windows/svc into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching gopkg.in/bufio.v1 into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/klauspost/crc32 into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/juju/errors into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/klauspost/cpuid into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/golang/protobuf/proto into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/pingcap/tipb/go-tipb into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/petar/GoLLRB/llrb into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/pingcap/goleveldb/leveldb into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/rcrowley/go-metrics into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/twinj/uuid into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/golang/snappy into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/smartystreets/goconvey/convey into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/jtolds/gls into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/smartystreets/assertions into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Fetching github.com/gopherjs/gopherjs/js into /Users/fguima4/go/src/github.com/gogits/gogs/vendor\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Project relies on 61 dependencies.\n. Hi @gavbaa .\nYour repo config is wrong. Repo must be the repository address so the correct is\nyaml\npackage: github.com/franciscocpg/test\nimport:\n- package: github.com/jhoonb/archivex\n  version: 60319bf17b608b56a3d34717d1501024c1a9f1eb\n  repo: git@github.com:gavbaa/archivex.git\n  vcs: git\nI've made a test using version 0.11.0 and voila\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/jhoonb/archivex.\n[INFO]  --> Setting version for github.com/jhoonb/archivex to 60319bf17b608b56a3d34717d1501024c1a9f1eb.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 1 dependencies.\n. yes, I agree with you, but it's not a simple work.\nGlide works with a lot of VCS and would be necessary to map each of these address variations according to each protocol those VCS supports to do a proper validation.\nI think that @mattfarina can point out this for us.\nAnd PRs are always welcome too, :)\n. @creshal \nWhat comands are you trying to run?. Could you try glide --debug up and post the output here?. Hi @sapiens-sapide \nI don't see any glide source code error in your panic stack, so for me It look likes more a go bug than a glide bug.\nAnyway, I successfully installed with your steps in this environment:\nFreeBSD  10.2-RELEASE-p18 FreeBSD 10.2-RELEASE-p18\ngo version go1.6.1 freebsd/amd64\n. Just for reference\nhttps://github.com/golang/go/issues/16136\n. hi @ansel1. Which glide version are you using?\n. Well, you complain about testImport: section, so you must be using 0.11.0.\n. hi @marioluan.\nThe problem you explained is not about glide itself but golang environment and gvm.\nAs you mentioned even go run is  working as expected.\nI think this issue https://github.com/moovweb/gvm/issues/189 is somehow related to your problem.\nCertainly the right place to create this issue (or maybe to find the solution for your problem) is at https://github.com/moovweb/gvm project.\n. Nice and KISS for sure!\n. Hi @7heo.\nThe script is here https://github.com/Masterminds/glide.sh/blob/master/get.\nCould you close this issue and open a new one at the repository https://github.com/Masterminds/glide.sh?\nThen, when you propose the PR you can reference this new issue.\n. @robvdl, I can confirm what @jonbo said using glide version v0.12.1, go 1.6.2 and ubuntu 16.04.\nWhich glide version are you using?\nhere is my tests results\nwith empty main.go\n```\nglide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gin-gonic/gin.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/gin-gonic/gin\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 1 dependencies.\nls vendor \ngithub.com\n```\nwith @mattfarina suggested main.go\n```\nglide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gin-gonic/gin.\n[INFO]  Resolving imports\n[INFO]  Found Godeps.json file in /home/francisco/programas/glide/cache/src/https-github.com-gin-gonic-gin\n[INFO]  --> Parsing Godeps metadata...\n[INFO]  --> Fetching updates for github.com/manucorporat/sse.\n[INFO]  --> Setting version for github.com/manucorporat/sse to ee05b128a739a0fb76c7ebd3ae4810c1de808d6d.\n[INFO]  --> Fetching updates for golang.org/x/net.\n[INFO]  --> Setting version for golang.org/x/net to f315505cf3349909cdf013ea56690da34e96a451.\n[INFO]  --> Fetching updates for github.com/golang/protobuf.\n[INFO]  --> Setting version for github.com/golang/protobuf to 2402d76f3d41f928c7902a765dfc872356dd3aad.\n[INFO]  --> Fetching updates for gopkg.in/go-playground/validator.v8.\n[INFO]  --> Setting version for gopkg.in/go-playground/validator.v8 to c193cecd124b5cc722d7ee5538e945bdb3348435.\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/gin-gonic/gin\n[INFO]  --> Exporting github.com/manucorporat/sse\n[INFO]  --> Exporting github.com/golang/protobuf\n[INFO]  --> Exporting golang.org/x/net\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  --> Exporting gopkg.in/go-playground/validator.v8\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 6 dependencies.\nls vendor\ngithub.com  golang.org  gopkg.in\n```\nSo it's working fine.\n. Hi @jonbo. Did you try with the latest go stable release (1.6.3)?\n. Cool @jonbo.\nThe  restart-your-computer fix is quite common on windows environment, :)\n. Hi @dnephin. Thanks for the warning.\nFixed!\n. @mattfarina \nDo you think that it makes sense to have a Masterminds/gox fork?\n. Nice @mattfarina! :+1: . @jmazzitelli \nI think this would be\nvcs: git\nversion: d3a0e3ccb068e354fc61c5811a24414792e6159b\nhttps://github.com/Masterminds/glide/blob/master/docs/glide.yaml.md. Thank you @mattfarina \nSo this PR is going to fix a problem that was occurring in glide-ppa build script because I was expecting that master always has the latest release.\n. @breerly, maybe this is useful?\nhttps://github.com/Masterminds/glide/issues/616\n. I just run it now and here is my output\ncurl https://glide.sh/get | sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3241  100  3241    0     0   4721      0 --:--:-- --:--:-- --:--:--  4717\nDownloading https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-amd64.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   608    0   608    0     0    636      0 --:--:-- --:--:-- --:--:--   636\n100 3344k  100 3344k    0     0   406k      0  0:00:08  0:00:08 --:--:--  582k\nglide version v0.12.3 installed succesfully\nMaybe you can download the get script and then add some debug information in the method downloadFile.\n. I think @sdboyer suggestion could be valid. \nPrinting this LATEST_RELEASE_JSON=$(curl -s \"$LATEST_RELEASE_URL\") and adding a verbose flag to curl (curl -sv \"$LATEST_RELEASE_URL\") should help to understand what's going wrong. \nBesides that, I think the script can be improved to check the http status code and then print the correct error information to the user. \n. This PR https://github.com/Masterminds/glide.sh/pull/10 has some improvements about catching erros.\nAfter merged this should show a better output when errors with http calls occurs.\nAbout this issue, like @sdboyer mentioned, github api has rate limits. This sequence of commands shows it:\ncurl -s https://api.github.com/rate_limit\ncurl -s https://api.github.com/repos/Masterminds/glide/releases/tags/v0.12.3\ncurl -s https://api.github.com/rate_limit\nTake a look at key rate.limit, it is decreasing.\nMy suggestion when using a CI tool is to install with apt-get install glide or build with a docker image like rest4hub/golang-glide.\n@mattfarina, On the glide side, we are making the call to the github API just to get the latest download URL. Maybe you should publish this URL to the https://github.com/Masterminds/glide.sh repository (like you do with version for example) so glide get script doesn't have to deal with this github API rate limits.\n. Example adding ppa to travis: https://docs.travis-ci.com/user/installing-dependencies/#Installing-Packages-from-a-custom-APT-repository\nSo it would be something like this\nyaml\nbefore_install:\n  - sudo add-apt-repository ppa:masterminds/glide -y\n  - sudo apt-get update -q\n  - sudo apt-get install glide -y\n. @jraede,  also building with a docker image requires sudo too,  :(. \nSomeone already requested adding glide to container apt source  whitelist here https://github.com/travis-ci/apt-source-whitelist/issues/318.\nBut it looks like this can take months to happen.\n. @jraede, I don't know if you already have a workaround, but according to https://docs.travis-ci.com/user/migrating-from-legacy/#How-Do-I-Install-Custom-Software%3F this should works by now. \nbefore_script:\n  - wget https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-darwin-amd64.tar.gz -O /tmp/glide-v0.12.3-darwin-amd64.tar.gz\n  - tar -xvf /tmp/glide-v0.12.3-darwin-amd64.tar.gz\n  - export PATH=$PATH:$PWD/darwin-amd64/\nAgain, this is just a temporary solution while not bypassing github API. \n. @jmazzitelli, if you are using travis https://github.com/Masterminds/glide/issues/639#issuecomment-255521986\n. @hirikarate, about removing the vendor directory it is an expected behavior and here is the explanation: https://github.com/Masterminds/glide/issues/585. \nAbout having to close LiteIDE because of access denied that's the way Windows works with its file lock mechanism. Maybe you could submit an issue at LiteIDE project but I am not sure if could help. Anyway, this is not a glide error. \n. @alex4Liang, you stated that go get golang.org/x/crypto/bcrypt return\npackage golang.org/x/crypto/bcrypt: unrecognized import path \"golang.org/x/crypto/bcrypt\" (https fetch: Get https://golang.org/x/crypto/bcrypt?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nAs you can see, there is a i/o timeout from your machine to 216.239.37.1:443.\nI just run the command now without any problem.\nThis means that you are running into some connection issue.\n. This is currently in discussion as you can see on these two issues.\nhttps://github.com/Masterminds/glide/issues/608\nhttps://github.com/Masterminds/glide/issues/548\n. Hi @vpol \nYes\nTake a look at this doc and take note of this:\nversion: A semantic version, semantic version range, branch, tag, or commit id to use. For more information see the versioning documentation.\nSo this should work\nyaml\n- package: github.com/stretchr/testify\n  version: dev\n  subpackages:\n  - assert\nIf you are using a fork then you should also use the repo config.. IMO timeout should be an environment variable with some default value (like the 5 seconds) . Take a look at this issue.  https://github.com/Masterminds/glide/issues/639\nProbably you're hitting the github rate  limits and there is a bug in the script that's showing this erroneous message. \nThe message bug is handled on this https://github.com/Masterminds/glide.sh/pull/10 and this  https://github.com/Masterminds/glide/issues/639#issuecomment-255095785 has a proposed solution for not having to deal with github rate limits. . That's because you didn't hit the github limits. . hi @wuhuanhost \nYour question is more about go than glide.\nYour project structure is strange, you cannot have a project on the $GOPATH/src root.\nI recommend you reading this. That's nice @wuhuanhost \nCould you please close the issue?. version: master\nBut you have to run glide cc to clean up the cache and glide up to update the glide.lock file . hi @jacek99, \nrepo in glide.yaml does not help?. I see @jacek99 \nJust some thoughts about it:\n\nIt would be great if glide could allow specifying a single master private repo and ONLY look in that repo for all the packages and their dependencies\nBasically tell it in one central location that you are allowed to look in this git repo\n\nI don't think golang was designed to work with a centralized repository.\nYou can read more here https://golang.org/doc/articles/go_command.html, topics Configuration versus convention and Go's conventions\nAlso I am not sure if glide wants to break go get compatibility: https://github.com/Masterminds/glide/issues/498\nMaybe git insteadof may help you. \nAnd I recommend the reading of go help importpath command output.\nI am not saying that your idea is good or not, but definitely is not following the golang conventions (which we know is a very opinionated language).   . @argentum47 \nWhich glide version are you using?\nCould you run glide --debug i and post the output here?. and if possible your glide.yaml. :+1: \nMaybe glide cache-clear would had helped you too.. Could you close this issue then?. @aymone \nDid you set GOBIN env variable?\nAlso did you add GOBIN to your PATH?. To be honest I don't know why @mattfarina named it as LGOBIN in the script. But yes, consider it the same . @aymone \nCould you share your solution please?. Duplicated\nhttps://github.com/Masterminds/glide/issues/708\nhttps://github.com/Masterminds/glide/issues/639\nPossibles workarounds\nhttps://github.com/Masterminds/glide/issues/639#issuecomment-255097289\nhttps://github.com/Masterminds/glide/issues/639#issuecomment-257431434. And possible solution\nhttps://github.com/Masterminds/glide/issues/639#issuecomment-255095785\nwith\nhttps://github.com/Masterminds/glide.sh/pull/10. @brenol \nThe default for glide (just like go get tool) is to use https.\nI tested https://bitbucket.org/brenol/psa and it's a private repo so the best option is to use ssh in the repo attribute like you did.. Well, my answer was based on your issue description and you didn't mentioned about using .gitconfig file.\nIf you are using .gitconfig file this works.\nyaml\n- package: bitbucket.org/brenol/psa\n  version: 1.x\n  vcs: git\nYou have at least to inform which vcs system your package is using.\nGlide deals with a lot of vcs system and it has a seperate repository for this.\nhttps://github.com/Masterminds/vcs\nGiven a go package, eg bitbucket.org/brenol/psa, the default URL is https://bitbucket.org/brenol/psa.\nWhen glide has just the default URL info (which in turn does not say anything about vcs system) it tries to guess the vcs system. \nIn the case of bitbucket it could be git or mercurial. So glide tries to ask the bitbucket API which vcs system the repository is using. Because this repository is private glide receives the error Access Denied from the Bitbucket API. \nYou can check most of the logic here\nhttps://github.com/Masterminds/vcs/blob/master/vcs_remote_lookup.go#L81.\nMaybe the solution here (to cover not setting the vcs manually) would be implementing bitbucket authentication using a consumer key. . I've created a new project importing github.com/rubyist/circuitbreaker and it's working fine for me\nglide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching github.com/rubyist/circuitbreaker.\n[INFO]  --> Detected semantic version. Setting version for github.com/rubyist/circuitbreaker to v2.2.0.\n[INFO]  Resolving imports\n[INFO]  --> Fetching github.com/cenk/backoff.\n[INFO]  --> Fetching github.com/facebookgo/clock.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/facebookgo/clock\n[INFO]  --> Exporting github.com/cenk/backoff\n[INFO]  --> Exporting github.com/rubyist/circuitbreaker\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 3 dependencies.. You need to add vcs: git option . Hi guys\nYou may want to run curl https://raw.githubusercontent.com/Masterminds/glide.sh/master/get | sh\nhttps://github.com/Masterminds/glide.sh is the repo for glide.sh. @umair0538, you're right\nIt's using https://glide.sh/version :disappointed: \nBut as already said https://github.com/Masterminds/glide/issues/784#issuecomment-287705352, go get -u github.com/Masterminds/glide doesn't get the latest stable release.. I think the only person who knows this one is @mattfarina . @Nayana-ibm, i don't think that @mitchellh has any plans for merging new incoming PRs for https://github.com/mitchellh/gox. The last commit was about 1 year ago.\nI think it makes sense to do something like this.\n. Hi @MadWombat \nAs you have multiple locations in your GOPATH you'll need to set GOBIN env.\nReference here\nMaybe the message could be ($GOPATH/bin) folder not found. Please create it or set $GOBIN before continue .. Also the script could evolve to do just like go get. Check if GOPATH is a list (colon-separated string) and get the first one.. It just works for me\ncurl https://glide.sh/get | sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  4201  100  4201    0     0   4201      0  0:00:01 --:--:--  0:00:01  5707\nARCH=amd64\nOS=linux\nUsing curl as download tool\nGetting https://glide.sh/version\nTAG=v0.13.0\nLATEST_RELEASE_URL=https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.0\nGetting https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.0\nGLIDE_DIST=glide-v0.13.0-linux-amd64.tar.gz\nDownloading https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-linux-amd64.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   622    0   622    0     0    622      0 --:--:-- --:--:-- --:--:--   897\n100 3557k  100 3557k    0     0   148k      0  0:00:24  0:00:24 --:--:--  130k\nglide version v0.13.0 installed successfully. If no format is passed in then the help command is printed. Format is a mandatory option.\n. As explained in the first conversation of this PR you must use a gox fork to work. \n. Nice, but as stated here \n\nIn cross compilation situations, it is recommended that you always set an appropriate GOARM value along with GOARCH.\n. \n",
    "thanasisk": "Are there any updates on this topic as I really need oath token support for github (as generated by Personal Access Tokens\"). ",
    "ungsophy": "@mattfarina I'm on 0.10.2. It works this time. Maybe it is networking issue. Sorry for the confusion.\n. ",
    "emersion": "Happened once to me too, on OS X with Glide 0.11. Re-ran it and everything worked fine. Maybe a rare race condition or something.\n. ",
    "halstead": "From an ops perspective the most important attributes of a package management system are safety and predictability. If a fresh install on a clean server could possibly end up with different source code than what my developer had intended then I need to essentially ignore the package manager and build another process to ensure reproduciblity.\nIt doesn't matter if it's because my developer used an ambiguous string in his or her yaml file. Or if the dev has a lock file that's been around for weeks and I'm starting fresh. Or if upstream changes cause the package manager to install something else for me then it did for the dev. Any of those cases break the tool from a systems perspective.\n. ",
    "wchrisjohnson": "I just hit this issue.\nI had gone thru my glide.yaml file and added version: entries for all of the packages that didnt have them, based on the glide.lock file. I got a bunch of errors like the above. I cleared out the vendor folder with rm -rf vendor and tried again. This time it worked, but there was a huge number of changes when I did a `git status'. When I looked deeper, every change was in a package that was a dependency of one of my packages.\nSo, the questions are: am I using Glide incorrectly? If not, should I add dependencies of my packages to my glide.yaml file and version them in there too? \n. I should add that I am now in good shape. I ended up basically taking my last good glide.lock file, and using that as a reference to pin all packages in my Glide.yaml file. This includes dependencies of the packages I need in my app. Once I did that, I was able to glide up -u -s. git now shows the only thing changed is my glide.yaml and glide.lock, and the only changes in the .lock file are a very few packages that I had missed because they were testing related.\n. Oh cool - that's great to know. I use Atom with a plugin that does a variety of these kinds of things with every save. I should def check to be sure I'm excluding the vendor folder if possible.\n. @sdboyer This is a new project, no godeps file. Starting with glide from scratch. And the versions in the initial yaml file are hashes, not true tags of a specific version. Given the background of this project, and the inspiration taken from other similar tools like bundler and pip, and given the example glide.yaml noted here - https://github.com/Masterminds/glide#glideyaml - I would expect this tool to focus on tag based versions, not hashes.\n. @sdboyer When I say scratch, I mean scratch. No GODEPS in use, no vendor folder; that's why I chose to use Glide, I wanted a simple solution that worked; GODEPS felt really clunky, so I didn't even try it. IIRC, when I did the glide init, it created a .yaml file and a .lock file as well, with versions of packages I am currently using expressed as hashes. In other projects, I've used bundler and pip, as I noted earlier, which had a very expressive way to indicate what tagged version I wanted; not a hash of a specific commit. That's what I'm interested in here.\nAfter I generated the .yaml file, I attempted to update the file with versions instead of hashes; it ws very tedious to have to go to github for each package, discover if they had a tagged version, replace the hash with a tagged version. I would think this would be easy enough to go retrieve as a part of building the .yaml file automatically (get the latest tagged version, as a starting point).\nTalk to @mattfarina - he and I have discussed this.\n. ",
    "maleck13": "When this happend to me, it was after I had ran go fmt ./... which also formatted the vendor files and modified them. Then when I next ran glide get <some dep> it failed on the dependencies that had been modified. Adding this incase it helps someone else\n. ",
    "fiatjaf": "I'm seeing this after amending a commit in another package on my machine, which is a dependency of the project where glide is being used.\nAfter trying to manually set the version number on glide.lock, I've tried deleting the entire ./vendor directory, remove all references to the package from glide.yaml and glide.lock and install it back with glide get. It shows the same error. I've erased the package from my machine and tried to make glide fetch it directly from GitHub: same error. It doesn't make sense.\nFor the record, the package is https://github.com/fiatjaf/hyperscript-go/commit/6e2a0bea670221cd63d1f304f66708e728698f5c.\n. I also did a git push -f.\n. ",
    "raboof": "I'm having the same issue, also after removing my glide.lock and complete vendor folder...\n. Fixed it by clearing out $HOME/.glide/cache/. Might have had to do with either:\n- the fact that I did a git push -f to the dependency git repository at some point\n- the fact that I was specifying a custom 'repo' and 'version' for this dependency\n. @fiatjaf in that case it sounds like our issue (the ~/.glide/cache not responding well to git push -f'd repos) might have been separate from the original issue that started this thread - perhaps we should file separately?\n. ",
    "kylev": "Maybe it happens when your upstream package force pushes? I ran into this today using echo.\nglide.yml:\nyaml\npackage: github.com/redacted/thingy\nimport:\n- package: github.com/labstack/echo\n  version: ^3.0.0\nGlide is cranky:\nconsole\nbash$  glide install\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/labstack/echo.\n[ERROR] Update failed for github.com/labstack/echo: github.com/labstack/echo contains uncommitted changes. Skipping update\n[ERROR] Failed to do initial checkout of config: github.com/labstack/echo contains uncommitted changes. Skipping update\nOver in ~/.glide/cache/src/https-github.com-labstack-echo something had massively re-arranged things:\n``` console\nbash$ git status\nOn branch v3\nYour branch and 'origin/v3' have diverged,\nand have 1 and 6 different commits each, respectively.\n  (use \"git pull\" to merge the remote branch into yours)\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\nChanges to be committed:\nmodified:   .gitignore\nmodified:   context.go\nmodified:   context_test.go\nmodified:   middleware/cors.go\nmodified:   middleware/cors_test.go\nmodified:   router.go\nmodified:   router_test.go\nmodified:   website/Makefile\nmodified:   website/config.json\nmodified:   website/content/guide/customization.md\nmodified:   website/content/guide/faq.md\nmodified:   website/content/guide/installation.md\ndeleted:    website/content/guide/migrating.md\nnew file:   website/content/guide/migration.md\nmodified:   website/content/middleware/cors.md\nmodified:   website/layouts/partials/footer.html\nmodified:   website/layouts/partials/head.html\nmodified:   website/layouts/partials/sidenav.html\nnew file:   website/static/scripts/main.js\n\nUnmerged paths:\n  (use \"git add ...\" to mark resolution)\nboth modified:   README.md\nboth modified:   website/content/index.md\n\n```\nSure enough, the git log last commit that I have is f41453 with the summary line \"updated docs, readme and benchmark tests (#718)\". That is now 0fca54 on the v3 branch.\nAt least in my case, it appears to support the amend/force-push patterns mentioned.\n. ",
    "zwass": "I am also experiencing this issue, which seems likely to be due to a force push on the remote.\nDeleting ~/.glide/cache/offending_repo.git seems to fix the problem on the next glide install.. ",
    "Eriner": "In the same boat as @zwass and others here. Deleting the cache fixed the issue after I force-pushed one of my packages. . ",
    "homme": "git checkout -b new-branch triggered this issue for me.  Deleting and repopulating ~/.glide/cache solved it.  My .gitignore is as follows:\n$ cat .gitignore \nvendor/*\n.glide/*. ",
    "stevecrozz": "glide cc fixes my setup, seems slightly less aggressive deleting the cache folder manually although it might be exactly the same thing in the end.. ",
    "tranhung301293": "I  also met this issue  and I solve it by using \"git reset --hard\" to remove modified file by origin file. Hope it help. ",
    "yanyiwu": "@mattfarina \n1. go version\ngo version go1.6 linux/amd64\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/yanyiwu/golang\"\nGORACE=\"\"\nGOROOT=\"/home/yanyiwu/local/go1.6\"\nGOTOOLDIR=\"/home/yanyiwu/local/go1.6/pkg/tool/linux_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\n1. glide.yaml is  https://github.com/yanyiwu/practice/blob/master/go/glide/test1/glide.yaml\npackage: github.com/yanyiwu/practice/go/glide/test1\nimport:\n- package: github.com/yanyiwu/gojieba\n. It failed on CentOS 6.5 but it works fine on Ubuntu14.04\n. checking in glide.lock should be written in README.md, when I use this project  at first, i can not figure out glide.lock is needed to be checked in. And i find nothing about it in README.md. \n. can you simplify the installation process(based on source code, for example, go get or anything else) of glide?\n. @jrick Thank you sooooo much!!!\n glide itself is go getable should be written in README.md, because it is so useful for any newbee of glide\n. https://github.com/Masterminds/glide/issues/408\n. To the most users, they meet this project at first time, they want to find the way to use it as easier as possible , when they can not find out, they will leave.\nwhen i introduce this project to others, they alway complain installation is too sophisiticated. \nwhen we use codes in our project ,the version of codes is important, when we use a tool, for example,vim,brew or others, we dont care about their version as long as it can work.\n. ",
    "Integralist": "@mattfarina interestingly if I run glide -v I get back glide version dev ?\n. OK so although I had done a go get github.com/Masterminds/glide I already had an old version and so it was just reusing that code base. I jumped into the location of glide in my GOPATH and did a git pull from master and then a fresh go install and so running glide -v now gives me back glide version 0.11.0-dev (which matches up to go run glide.go -v as well so I at least know I'm using the same version as what's in the master branch)\n. Closed the issue as it seems the upgrade to the latest version of Glide resolved the problem\n. So, since opening >> https://github.com/Masterminds/glide/issues/427 << and subsequently fixing the problem by clearing out everything except my glide.yaml file (which resolved that other issue linked to), I then tried a glide update and it worked (i.e. it pulled in the latest version of a dependency that I was expecting it to).\nNot sure why this was broken before, but I guess I can close this issue now?\n. If I run glide install --update-vendored --strip-vcs --strip-vendor then my tree looks like:\n.\n\u251c\u2500\u2500 stuff and folders\n\u251c\u2500\u2500 glide.lock\n\u251c\u2500\u2500 glide.yaml\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 vendor\n    \u251c\u2500\u2500 github.com\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bbc\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mozart-api-common\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Godeps\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 Godeps.json\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 Readme\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 caching\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 cache.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 mock_cache.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 redis_cache.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 logger\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 logger.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 statsd_hook.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 storage\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 error.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 mock_storage.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 s3_storage.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 storage.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bradfitz\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 gomemcache\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 memcache\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 memcache.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 memcache_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 selector.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 selector_test.go\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 integralist\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-elasticache\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 Makefile\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 elasticache\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 elasticache.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 elasticache_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 glide.lock\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 glide.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 joho\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 godotenv\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENCE\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 autoload\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 autoload.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 cmd\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 godotenv\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0     \u2514\u2500\u2500 cmd.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 fixtures\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 equals.env\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 exported.env\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 plain.env\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 quoted.env\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 godotenv.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 godotenv_test.go\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 wercker.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 julienschmidt\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 httprouter\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 LICENSE\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 README.md\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 path.go\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 path_test.go\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 router.go\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 router_test.go\n    \u2502\u00a0\u00a0         \u251c\u2500\u2500 tree.go\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 tree_test.go\n    \u2514\u2500\u2500 gopkg.in\n        \u251c\u2500\u2500 more packages\nThe thing I've noticed noticed here is that my go-findroot package isn't found at all now (I'm guessing because it's not appearing in my glide.lock or glide.yaml files (as it's a sub dependency within go-elasticache) \n. So I've decided to delete my glide.lock and my vendor directory (note: my application isn't within the root of my project's directory, it's instead within a src folder and inside that folder is my application code and vendor directory etc)\nMy glide.yaml looks like:\npackage: github.com/bbc/mozart-requester/src\nimport:\n- package: github.com/julienschmidt/httprouter\n- package: gopkg.in/yaml.v2\n- package: gopkg.in/godo.v2\n- package: github.com/joho/godotenv\n- package: github.com/integralist/go-elasticache\n- package: github.com/bbc/mozart-api-common\nI've run glide install from inside my src folder and I can see the following output:\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/julienschmidt/httprouter.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Fetching updates for github.com/joho/godotenv.\n[INFO] Fetching updates for github.com/integralist/go-elasticache.\n[INFO] Fetching updates for github.com/bbc/mozart-api-common.\n[INFO] Fetching updates for gopkg.in/godo.v2.\n[INFO] Resolving imports\n[INFO] Found Godeps.json file in vendor/github.com/bbc/mozart-api-common\n[INFO] Fetching github.com/bradfitz/gomemcache/memcache into /Users/M/Projects/golang/src/github.com/bbc/mozart-requester/src/vendor\n[INFO] Fetching github.com/integralist/go-findroot/find into /Users/M/Projects/golang/src/github.com/bbc/mozart-requester/src/vendor\n[INFO] Downloading dependencies. Please wait...\n[INFO] Setting references for remaining imports\n[INFO] Project relies on 8 dependencies.\nMy glide.lock now looks like:\nhash: 9a195b8f2fed77bdbeaffae53286bc2f34262ca3d3116bdd889a0f57ca624528\nupdated: 2016-05-18T13:59:06.665086971+01:00\nimports:\n- name: github.com/bbc/mozart-api-common\n  version: e18f7db9f9614f35bd01b52259c4da8bb557b539\n  subpackages:\n  - logger\n  - Godeps/_workspace/src/github.com/Sirupsen/logrus\n  - Godeps/_workspace/src/gopkg.in/alexcesaro/statsd.v1\n- name: github.com/bradfitz/gomemcache\n  version: fb1f79c6b65acda83063cbc69f6bba1522558bfc\n  subpackages:\n  - memcache\n- name: github.com/integralist/go-elasticache\n  version: 98137cc2d86f06f5300c01d9d71b57fe72923498\n  subpackages:\n  - elasticache\n- name: github.com/integralist/go-findroot\n  version: ac90681525dc30c2163cc606675922b7fdb9c041\n  subpackages:\n  - find\n- name: github.com/joho/godotenv\n  version: 4ed13390c0acd2ff4e371e64d8b97c8954138243\n- name: github.com/julienschmidt/httprouter\n  version: 77366a47451a56bb3ba682481eed85b64fea14e8\n- name: gopkg.in/godo.v2\n  version: b5fd2f0bef1ebe832e628cfad18ab1cc707f65a1\n- name: gopkg.in/yaml.v2\n  version: a83829b6f1293c91addabc89d0571c246397bbf4\ndevImports: []\n. Hmm, so that seems to have resolved things?\nNot sure how it got so out-of-whack, but it appears OK now.\nI guess I'll close this issue then :-)\n. ",
    "fj": "It works, although the Xenial release seems to be a different version than the Wily release (0.10.2~xenial vs.0.10.2.patch1~wily).\nUninstalling Wily version:\n\u256d\u2500\u2500 jxf@turbo \u00b7 2016-05-03 \u00b7 22:54:53\n\u2502   (master *)\n\u2502   /home/jxf/src/projects/jxf/jxf-dot-me-site\n\u2570\u2500\u25b6 \u03c8 sudo apt remove glide\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages will be REMOVED:\n  glide\n0 upgraded, 0 newly installed, 1 to remove and 8 not upgraded.\nAfter this operation, 8,180 kB disk space will be freed.\nDo you want to continue? [Y/n] y\n(Reading database ... 312999 files and directories currently installed.)\nRemoving glide (0.10.2.patch1~wily) ...\nInstalling Xenial version:\n\u256d\u2500\u2500 jxf@turbo \u00b7 2016-05-03 \u00b7 22:55:01\n\u2502   (master *)\n\u2502   /home/jxf/src/projects/jxf/jxf-dot-me-site\n\u2570\u2500\u25b6 \u03c8 sudo apt install glide\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following NEW packages will be installed:\n  glide\n0 upgraded, 1 newly installed, 0 to remove and 8 not upgraded.\nNeed to get 1,828 kB of archives.\nAfter this operation, 8,184 kB of additional disk space will be used.\nGet:1 http://ppa.launchpad.net/masterminds/glide/ubuntu xenial/main amd64 glide amd64 0.10.2~xenial [1,828 kB]\nFetched 1,828 kB in 7s (245 kB/s)                                                                                                                                                \nSelecting previously unselected package glide.\n(Reading database ... 312997 files and directories currently installed.)\nPreparing to unpack .../glide_0.10.2~xenial_amd64.deb ...\nUnpacking glide (0.10.2~xenial) ...\nSetting up glide (0.10.2~xenial) ...\n. Regardless, this resolves the original issue I raised. I'll close this. Thanks!\n. ",
    "medcl": "leave a option and let user to choose will be better, if the repo with a lot of commits, and update is not such a frequent operation, i'd like to fetch a small but full content\n. @sdboyer i understand what you mean about reduce network activity, for some case it can reduce network traffic and fetch diff commits only, but if i am using in CI environment, we clean up everything first and then fetch the remote repo content, so it will be heavy and take really a long time for preparing the build,and every time, that's the pain.\n. @mattfarina Thanks, to  your question:\n1. I use glide update  --no-recursive in my Makefile\n2. I dont have the glide.lock checkin\n3. only Github.com\nHope that helps.\n. @sdboyer Thanks, i will try to use glide.lock\n. ",
    "willis7": "Would be cool to get a documented, preferred approach.\n. ",
    "sagikazarmark": "Not sure if it was available at that time, but currently there is an installation script. The only problem is that it calls the API to check if the URL exists, so API Rate Limit kicks in from time to time.\nA slightly better option could be to check if the build URL exists, like this:\ncurl --output /dev/null --silent --head --fail \"$url\"\nThere is no real overhead, since this would replace the API call, the number of HTTP calls would be the same.\nSee other options here: http://stackoverflow.com/questions/12199059/how-to-check-if-an-url-exists-with-the-shell-and-probably-curl. I wonder why the API call is necessary in the first place. You could just check if the generated download URL returns anything and fail if not. I can't think of any extra overhead, since this would replace the API call.. I made a gist out of it https://gist.github.com/sagikazarmark/b61ffdc0a6520d5d405b15fbef37e61d\n/cc @jmazzitelli . I have a similar issue: Failed to generate lock file: Generating lock produced conflicting versions of google.golang.org/grpc. import (), testImport (^1.0.5) (Yes, it's ONLY a dev dep)\nyaml\nimport:\n- package: github.com/Sirupsen/logrus\n  version: ^0.11.2\ntestImport:\n- package: google.golang.org/grpc\n  version: ^1.0.5. ",
    "zerok": "What brew version are you referring to? https://github.com/Homebrew/homebrew-core/blob/master/Formula/glide.rb points to 0.10.2 :-)\n. ",
    "AlmogBaku": "@mattfarina sorry, i guess the reason was that i haven't update the brew... (in the meanwhile i compiled glide from the go sources)\n. @mikeln have you succeed to force the container to use the ssh key?\n. for whom who look for a solution- you can define a repo for a dependency and force it to use ssl. also- make sure you update your glide.lock file\n. ",
    "nubunto": "Also, not sure if this is related:\nGlide version (glide --version): glide version 0.10.2\nWhen I run glide install, the following happens:\n```\n[INFO] Lock file (glide.lock) does not exist. Performing update.\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/julienschmidt/httprouter.\n[INFO] Fetching updates for github.com/pkg/errors.\n[INFO] Fetching updates for github.com/thermeon/go-errors.\n[INFO] Fetching updates for github.com/thermeon/go-logs.\nUsername for 'https://github.com': Username for 'https://github.com': nubunto\nPassword for 'https://nubunto@github.com': Password for 'https://MY PASSWORD GOES HERE AFTER I TYPE IT@github.com': \n[WARN] Unable to checkout github.com/thermeon/go-logs\n[ERROR] Update failed for github.com/thermeon/go-logs: Cloning into '/home/bruno/go-workspace/src/github.com/thermeon/forwarding-service/vendor/github.com/thermeon/go-logs'...\nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/thermeon/go-logs/'\n: exit status 128\n[WARN] Unable to checkout github.com/thermeon/go-errors\n[ERROR] Update failed for github.com/thermeon/go-errors: Cloning into '/home/bruno/go-workspace/src/github.com/thermeon/forwarding-service/vendor/github.com/thermeon/go-errors'...\nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/thermeon/go-errors/'\n: exit status 128\n[ERROR] Failed to do initial checkout of config: Cloning into '/home/bruno/go-workspace/src/github.com/thermeon/forwarding-service/vendor/github.com/thermeon/go-logs'...\nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/thermeon/go-logs/'\n: exit status 128\nCloning into '/home/bruno/go-workspace/src/github.com/thermeon/forwarding-service/vendor/github.com/thermeon/go-errors'...\nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/thermeon/go-errors/'\n: exit status 128\n```\n. ~~Some of those are private repositories, FWIW~~\nAll of the failing packages are private repositories.\n. ",
    "ironcladlou": "As a workaround, can you add the offending key(s) to your SSH agent?. ",
    "hasufell": "\nAs a workaround, can you add the offending key(s) to your SSH agent?\n\nThat's quite a use case assumption. SSH agent is a security problem and not everyone wants to use it.. ",
    "luigi-riefolo": "any update?. ",
    "kngu9": "I can do it.\n. ",
    "zjx20": "@mattfarina As you may know the GFW, a firewall at the network backbone in China. Unfortunately, golang.org is blocked by the firewall. We just can't access to golang.org:\nshell\n$ curl https://golang.org/x/net/context?go-get=1\ncurl: (7) Failed to connect to golang.org port 443: Operation timed out\nSo calling getRootFromGoGet(\"golang.org/x/net/context\") will just return \"golang.org/x/net/context\" in my computer, but \"golang.org/x/net\" is expected.\nI know this PR is too specific, I totally understand if you don't accept it. But if you do, I will be appreciated :)\n. @mattfarina I can use glide mirror to solve the issue now. Thank you very much!\n. @gloomyzerg I'm afraid glide mirror isn't the silver-bullet for GFW, I had that illusion just because GFW temporarily unblocked golang.org at that time (as of 7 Sep 2016).\n~Since this PR hasn't been accepted, you can use my own fork of glide (https://github.com/zjx20/glide), and then use the repo aliasing to break the GFW.~ (not recommended)\nAlternatively, if you have a socks5 proxy or a ssh tunnel, you can use this tool (https://github.com/zjx20/socks-cli) to solve the problem out of the box.. ",
    "gloomyzerg": "@zjx20  How to configure glide mirror? to break GFW?  thanks !. @zjx20  Thank you very much!  . ",
    "alienspaces": "I would also appreciate this feature! Have an application using https://github.com/mattes/migrate and now need to install the package specifically instead of being able to depend on the glide tool alone to manage dependencies.\nOtherwise glide is awesome!. ",
    "roboll": "I wrote a tool to install binaries from vendor deps - https://github.com/roboll/go-vendorinstall.. ",
    "aeneasr": "Better: Make the option true by default when running > Go 1.6 or GO15VENDOREXPERIMENT\n--skip-strip-tests\n. > Absent licensing issues, I'm +1 to this being an option. Actually, I'd argue it should be an opt in the manifest, not a CLI opt, b/c that way the behavior will be invariant across all users of the project. It's a nasty gotcha to require users to make a workflow change for this or that project when it can easily be avoided.\nI second that.\n. > What to write that? PRs welcome.\nSorry, I'm confused. Did you mean: \"Want to write that\"?\n. glide list gives me:\n```\nINSTALLED packages:\n        github.com/Sirupsen/logrus\n        github.com/cenk/backoff\n        github.com/davecgh/go-spew/spew\n        github.com/go-errors/errors\n        github.com/golang/mock/gomock\n        github.com/golang/protobuf/proto\n        github.com/hailocab/go-hostpool\n        github.com/oleiade/reflections\n        github.com/ory-am/common/compiler\n        github.com/ory-am/common/pkg\n        github.com/pmezard/go-difflib/difflib\n        github.com/stretchr/testify/assert\n        github.com/stretchr/testify/require\n        golang.org/x/crypto/pbkdf2\n        golang.org/x/net/context\n        golang.org/x/sys/unix\n        gopkg.in/dancannon/gorethink.v2\n        gopkg.in/dancannon/gorethink.v2/encoding\n        gopkg.in/dancannon/gorethink.v2/ql2\n        gopkg.in/dancannon/gorethink.v2/types\n        gopkg.in/fatih/pool.v2\n``\n. When renamingladon_testtoladon, everything works as expected.\n. Having packages likeladon_test` around is quite important because it avoids import cycles when writing tests:\n- package a\n- package b imports package a\n- package a_test imports package b\nadditionally, foo_test isn't a package you can import which makes sense to keep all Test* functions out of autocomplete.\n. i update glide using go get -u github.com/masterminds/glide\n. let me clarify, it is not about foobar_test.go, it's about naming a package package foobar_test instead of package foobar\n. Running\n```\n$ cd $GOPATH/src/github.com/Masterminds/glide\n$ git checkout v0.11.1\n$ go install .\n$ which glide\n/Users/aeneas/workspaces/go/bin/glide\n$ cd other_go_project\n$ glide install / up / init\n```\nyields the same outcome.\n. > @arekkas so, you have two packages with different names in the same directory? Is that the issue?\nexactly, see OP:\n\nI have two packages in one directory. One is ladon and one is ladon_test. \n. It doesn't seem to be linked solely to having two packages in the same directory. For example: https://github.com/ory-am/fosite/blob/master/integration/helper_setup_test.go#L8 \n\nDirectory /integration knows only package integration_test and is importing as the only package github.com/gorilla/mux and gorilla/mux is missing in glide.yaml/glide.lock. You can probably reproduce this by doing:\n```\n$ go get -d github.com/ory-am/fosite\n$ cd $GOPATH/src/github.com/ory-am/fosite\n$ rm glide.*\n$ glide create\n$ glide up\n$ cat glide.yaml | grep mux\nshould be empty\n$ cat glide.lock | grep mux\nshould be empty\n```\n. This problem is annoying because you find the missing dependencies only on a clean GOPATH, which happens most likely on your CI system, which then again takes 5-10 minutes to run.\n. Thanks for tracing this, unfortunately I have no idea how to fix this, so it's probably better if somebody else takes a shot at it\n. i can confirm this: https://travis-ci.org/ory-am/dockertest/jobs/153426938\n. I can confirm this. I am using the latest master (because no easy way to install binaries on windows).\nglide.yaml\npackage: github.com/ory-am/editor-platform/firewall-reverse-proxy\nimport:\n- package: github.com/Sirupsen/logrus\n  version: ~0.10.0\n- package: github.com/golang/mock\n  subpackages:\n  - gomock\n- package: github.com/ory-am/common\n  subpackages:\n  - compiler\n  - env\n- package: github.com/ory-am/fosite\n  version: ~0.3.2\n- package: github.com/ory-am/hydra\n  version: ~0.5.2\n  subpackages:\n  - firewall\n  - sdk\n- package: github.com/ory-am/ladon\n  version: ~0.2.0\n- package: github.com/pkg/errors\n  version: ~0.7.0\n- package: golang.org/x/net\n  subpackages:\n  - context\ntestImport:\n- package: github.com/stretchr/testify\n  version: ~1.1.0\n  subpackages:\n  - assert\n  - require\nlog:\n...\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  --> Exporting github.com/spf13/jwalterweatherman\n[INFO]  --> Exporting github.com/stretchr/testify\n[INFO]  --> Exporting github.com/spf13/cast\n[INFO]  --> Exporting gopkg.in/dancannon/gorethink.v2\n[INFO]  --> Exporting github.com/kr/fs\n[INFO]  --> Exporting gopkg.in/fatih/pool.v2\n[INFO]  --> Exporting golang.org/x/text\n[INFO]  --> Exporting gopkg.in/square/go-jose.v1\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Failed to generate lock file: Generating lock produced conflicting versions of github.com/stretchr/testify. import (~1.1.3), testImport (~1.1.0)\n. > I think the best solution is to don't have a version constraint on your test dependencies.\nI strongly disagree. ",
    "nikhiljindal": "Came here looking for this exact feature.\nThere seems to be a PR for this: https://github.com/Masterminds/glide/pull/869 (last updated in July). It will be great to have this!\nAny progress?. ",
    "silasdavis": "I can see the point of not fetching dependencies for github.com/foo/bar/baz, but as you say seems like we should be able to work out which packages we actually depend on by analysing the imports. If we don't specify any subpackages does it mean we get none of the sub-package dependencies pulled in?\n. If a project baz has the following glide.yaml:\nyaml\n- name: foo\n- name: bar\n  version: 1.0.0\nIt occurs to me you could interpret this as \"baz will work with any future version of foo that becomes available.\"\nHowever, I think this is not a very useful interpretation as it is rather optimistic and assumes that glide up is not a destructive/dangerous action, which seems contrary to the core design. When I run glide up I know I have to make my project work again before committing my glide.lock.\nSo for me respecting the glide.lock makes more sense, and allows you to grab an entire transitive tree of dependencies that will work together (as they were checked in).\n. Another data point (before I stop talking to myself) is that I'm pretty sure the comparable Gemfile.lock of Ruby's Bundler would work in this way (building the dependency graph using the lockfile)\n. Thanks for responses. Most projects I am depending on are not using version ranges in their glide.yaml, perhaps part of the answer is to see more tagging by dependencies, but there is still is a hangover from 'just depend on master' 'google does it' and there's not that much semantic versioning. For running such projects glide install usually gives you a working version, but this won't work for transitive dependencies. For these projects I need to manually manage my transitive dependencies, which glide can help with a bit, but then I'll need to manually fix. \nI do see the generality though - if the glide.yaml capture all working versions with ranges then perhaps we can use that to find a mutually compatible version. However if this was the case, why bother having the lockfile? These approaches are slightly at odds. Though i can see myself wanting both, but the lockfile preferring one much more often in my case. The lockfile represents the set of dependencies that the person pushing their code has committed as working. When versions conflict you'll only be able to help some of the time anyway, so it seems better to try and use the locked version where possible.\nPerhaps the general answer would be to allow to specify conflict resolution strategies. This adds complexity but probably necessary complexity. Gradle (which I'm sure you don't want to be as complex as!) allows you to specify default strategies or handle individual cases. @sdboyer the prefer lockfile functionality sounds like it will scratch my itch so I look forward to that.\n. Actually I have read and shared your blog post before! \nI do see the approach of having glide up upgrade everything including transitive dependencies using manifests, particularly when you have multiple paths to different versions of the same dependency -- perhaps you want to upgrade to the latest available for stability.\nBut the argument for glide uping upgrading your direct dependencies and then trying to use lockfiles for their transitive dependencies is one of repeatability.\nI think supporting both of these is a good idea, and probably requires some sort of lightweight 'conflict resolution strategy' if you want it to work per dependency. Perhaps:\nyaml\n- name: github.com/tendermint/tmsp\n  version: 7ffd2899092f47110a5ffebe20247a9b7f80f4ad\n  transitive:\n    - lockfile\n    - manifest\n    - godeps\nor: \nyaml\n- name: github.com/tendermint/tmsp\n  version: 7ffd2899092f47110a5ffebe20247a9b7f80f4ad\n  transitive: ignore\nThe transitive directive gives a priority list of which strategy to use when resolving the chain of transitive dependencies (unless a link in the chain is overriden to use a different transitive dependency strategy). It seems like this would not be too hard to implement. Any transitive dependency conflicts can be resolved as they are now, by putting them explicitly in the glide.yaml.\n. Great, do we need to apply any config to give preference to dependency lockfiles, or will that now be the default?\n. Any idea of an ETA on this? What's the relevant branch where the dependency work for this is now happening?. I made a glide plugin to address my problems. It's not hugely general or very beautiful but it works for me: https://github.com/silasdavis/glide-lock-transitive.\n@sdboyer informs me that preferred versions will provide a way to do this in golang/dep#622. Is there anything that I could pick up to help with this effort? I don't have a huge amount of time to dedicate to it, but if there was something I've got a chance of writing a reasonable PR for I'd be up for it.. @sdboyer bump (though no rush - I'm not going anywhere). @sdboyer perhaps you could use me on gps?. Could we have a note to say why we might care. As I understand it it is prevent all the (transitive) dependencies being fetched for a package within a repo that you don't use. Is that all?\n. ",
    "timoreimann": "This was fixed through #43, so closing.\nThanks for the fix!\n. Meant to ref Masterminds/vcs#43 -- sorry for the link pollution!\n. I experience similar issues, presumably rooted at the same underlying problem:\n```\n[DEBUG] Unlocking https-github.com-docker-go-units\n[WARN]  github.com/stretchr/testify appears to be a vendored package. Unable to set new version. Consider the '--update-vendored' flag.\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[WARN]  gopkg.in/yaml.v2 appears to be a vendored package. Unable to set new version. Consider the '--update-vendored' flag.\n[DEBUG] Unlocking https-gopkg.in-yaml.v2\n[DEBUG] Locking https-github.com-pmezard-go-difflib\n[WARN]  github.com/pmezard/go-difflib appears to be a vendored package. Unable to set new version. Consider the '--update-vendored' flag.\n[DEBUG] Unlocking https-github.com-pmezard-go-difflib\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0xdec2e]\ngoroutine 1 [running]:\npanic(0x402700, 0xc4200140c0)\n    /usr/local/Cellar/go/1.7/libexec/src/runtime/panic.go:500 +0x1a1\ngithub.com/Masterminds/glide/cfg.Locks.Less(0xc42044b880, 0x3, 0x3, 0x1, 0x0, 0xc42043f820)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/cfg/lock.go:147 +0x7e\ngithub.com/Masterminds/glide/cfg.(Locks).Less(0xc42043f820, 0x1, 0x0, 0x8)\n    :9 +0x78\nsort.insertionSort(0x639420, 0xc42043f820, 0x0, 0x3)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:25 +0x6e\nsort.quickSort(0x639420, 0xc42043f820, 0x0, 0x3, 0x4)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:207 +0x1eb\nsort.Sort(0x639420, 0xc42043f820)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:222 +0x80\ngithub.com/Masterminds/glide/cfg.NewLockfile(0xc4202b6300, 0x41, 0x60, 0xc420279a80, 0x3, 0x4, 0xc420420cc0, 0x40, 0xc42011e630, 0x4, ...)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/cfg/lock.go:225 +0x47d\ngithub.com/Masterminds/glide/action.Update(0xc4201ab440, 0x10100)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/action/update.go:90 +0x41f\nmain.commands.func13(0xc4201ae3c0)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/glide.go:606 +0x3d1\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.Command.Run(0x467f29, 0x6, 0x466886, 0x2, 0x0, 0x0, 0x0, 0x473442, 0x1f, 0x0, ...)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/command.go:179 +0xbbe\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.(App).Run(0xc4200c71e0, 0xc420074050, 0x5, 0x5, 0x0, 0x0)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:196 +0xc00\nmain.main()\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/glide.go:122 +0x5a0\n```\nIt's at a different section of lock.go but apparently also related to the fact that an element of Locks (a pointer to Lock) is nil.\nTested with the latest master, i.e., commit 3e49dce57f4a3a1e9bc55475065235766000d2f0. Version 0.11.1 does not seem to have this problem.\nHappy to share more information if needed.\nThanks!\n. git bisect tells me the culprit is commit ee9b54d6057a6f6cdb504bafea0bfde5772931b3.\n. @mattfarina sorry for not getting back to you earlier in order to pass on my glide.yaml/.lock files. I just tried the PR but it still panics:\n```\n[INFO]  --> Exporting golang.org/x/text\n[INFO]  --> Exporting k8s.io/kubernetes\n[INFO]  --> Exporting bitbucket.org/ww/goautoneg\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  Replacing existing vendor dependencies\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n    panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0xe5a0d]\ngoroutine 1 [running]:\npanic(0x40b4c0, 0xc4200140c0)\n    /usr/local/Cellar/go/1.7/libexec/src/runtime/panic.go:500 +0x1a1\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.HandleAction.func1(0xc4207f57d8)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:472 +0x29e\npanic(0x40b4c0, 0xc4200140c0)\n    /usr/local/Cellar/go/1.7/libexec/src/runtime/panic.go:458 +0x243\ngithub.com/Masterminds/glide/cfg.Locks.Less(0xc4206e81b0, 0x5, 0x6, 0x1, 0x0, 0xc42024ac80)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/cfg/lock.go:147 +0x3d\ngithub.com/Masterminds/glide/cfg.(Locks).Less(0xc42024ac80, 0x1, 0x0, 0x8)\n    :9 +0x78\nsort.insertionSort(0x6484a0, 0xc42024ac80, 0x0, 0x5)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:25 +0x6e\nsort.quickSort(0x6484a0, 0xc42024ac80, 0x0, 0x5, 0x6)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:207 +0x1eb\nsort.Sort(0x6484a0, 0xc42024ac80)\n    /usr/local/Cellar/go/1.7/libexec/src/sort/sort.go:222 +0x80\ngithub.com/Masterminds/glide/cfg.NewLockfile(0xc42027c000, 0x43, 0x60, 0xc4202e1480, 0x3, 0x4, 0xc4201bef00, 0x40, 0xc4201326e0, 0x4, ...)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/cfg/lock.go:225 +0x483\ngithub.com/Masterminds/glide/action.Update(0xc4201bf480, 0x470100)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/action/update.go:74 +0x30b\nmain.commands.func13(0xc4201d43c0, 0x0, 0x0)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/glide.go:662 +0x3cd\nreflect.Value.call(0x3f91e0, 0x4b1cc0, 0x13, 0x470b54, 0x4, 0xc4207f5778, 0x1, 0x1, 0x92738, 0x465b80, ...)\n    /usr/local/Cellar/go/1.7/libexec/src/reflect/value.go:434 +0x5c8\nreflect.Value.Call(0x3f91e0, 0x4b1cc0, 0x13, 0xc4207f5778, 0x1, 0x1, 0xf8ad, 0x140, 0x140)\n    /usr/local/Cellar/go/1.7/libexec/src/reflect/value.go:302 +0xa4\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.HandleAction(0x3f91e0, 0x4b1cc0, 0xc4201d43c0, 0x0, 0x0)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:481 +0x1e0\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.Command.Run(0x471b83, 0x6, 0x4704c4, 0x2, 0x0, 0x0, 0x0, 0x47d2a4, 0x1f, 0x0, ...)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/command.go:186 +0xc26\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.(App).Run(0xc42015c600, 0xc420096000, 0x5, 0x5, 0x0, 0x0)\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:235 +0x60c\nmain.main()\n    /Users/treimann/Development/go/src/github.com/Masterminds/glide/glide.go:122 +0x55c\n```\nI suppose my glide files would still be helpful to you; will try to publish them shortly.\n. @mattfarina I put together an example repo that enables to reproduce the issue by running glide up -v -s. Please see the glide.yaml file.\nLet me know if you need anything more from me. Thanks!\n. @mattfarina thanks for the quick feedback.\nIt seems to me that the user might actually not be able to reliably determine when a particular dependency can be considered test-only or not -- at least not over time as the number of dependencies evolve. I feel like it should be up to glide exclusively to make that judgement by means of analyzing the direct and transitive dependencies and \"shifting\" packages between the the import and test import groups as appropriate. Technically, this could mean that the testImport configuration key from glide.yaml disappears in future versions, and classification decisions are recorded in the lock file only.\nDoes that seem conceivable and reasonable to do?\nApart from that, I wonder if we can improve the way glide deals with this error in the current implementation:\n- The import version in the error message is empty. Shouldn't that be something non-empty? Perhaps the error message should be completely different, saying something along the lines of \"the package  is requested as both an import and test-import; move the test-import into the import section to resolve the issue\"?\n- My understanding was that glide works on a temporary directory when updating dependencies and only swaps vendor folders when it's clear there's no error. As mentioned earlier, my vendor folder looked pretty dirty after the failing update run. Is that a bug we need to tackle possibly?\n. @sdboyer is it reasonable to consider backporting the working solution from gps to glide? Or are the two fundamentally too different to justify such an effort (which is my assumption)?\nThe least we should do from my perspective is to help the user understand what's going on and make sure the vendor folder isn't touched in case of this error (which summarizes my two bullet points). Having to ask the user for manual resolution is not ideal but hopefully rather cheap to implement and better than what we have now, at least until glide/gps is able to deal with this autonomously.\nBy the way, what's the actual benefit of classifying into  build and test imports in glide currently? I suppose you want to enable a cleaner separation between installing dependencies required for production vs. testing. Is there already a glide work flow supporting this model, along with a set of commands / switches?\n(Why I am pondering about this: If testImport isn't really leveraged yet, it might be worth thinking about withdrawing the parameter again or hiding it behind a flag until the feature is fully ready for prime time.)\nSide note: My expectations of gps are so high by now, if this thing won't be able to resolve dependencies fully automatically while also brewing my morning coffee at the same time, I'll be heavily disappointed. ;-)\n. Any chance we can move forward with this issue in a way that doesn't require waiting for gps to get merged? (Unless that's a thing close to completion, which it wasn't last time I checked.)\nAs mentioned, I see two possible short term solutions:\n1. Remove/disable testImport until gps is in. My assumption here is that features like conditional downloads aren't part of glide yet, so we'd lose nothing.\n2. Improve the log message and prevent glide from messing up the vendor folder when the problem occurs.\nI'd be happy to try to implement either of two approaches or any third one that might be preferred.\nThanks.\n. FWIW, I don't think I have experienced this problem with Glide 0.11 and my Kubernetes dependencies have been about the same for quite a while.\n. @mattfarina @seh I just checked out PR #622 and used it to repopulate my sample Kubernetes client's dependencies (among which k8s.io/client-go is).\nglide update ran to completion just fine again (whereas v0.11 would consistently loop forever). \ud83c\udf89 \nFrom my perspective, this is ready to \ud83d\udea2 !\n. @seh I think I have seen this error before and fixed it by clearing my cache: glide cache-clear.\n. I don't think the cache will be uploaded. Rather, I believe glide does just some small-volume book-keeping to make sure the cache is up to date on each run.\nThe purpose of the cache is to speed up installation of dependencies. Run glide install twice in a row from an uncached clean slate (glide cc) to see what I mean.. ",
    "bestofmukul": "I am using glide version 0.10.2 and also tried to put flatten: true at top level package. Glide fetched glog in two locations.\n. This is how my dir structure looks like\ntree -L 1\n.\n\u251c\u2500\u2500 alertconfig\n\u251c\u2500\u2500 am\n\u251c\u2500\u2500 configserver\n\u251c\u2500\u2500 glide.lock\n\u251c\u2500\u2500 glide.yaml\n\u251c\u2500\u2500 healthwatcher\n\u251c\u2500\u2500 promeconfig\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 tm-sidekick\n\u2514\u2500\u2500 vendor\nand glide.yaml is \n```\npackage: .\nflatten: true\nimport:\n- package: github.com/coreos/etcd\n  subpackages:\n  - client\n- package: github.com/golang/glog\n- package: github.com/golang/mock\n  subpackages:\n  - gomock\n- package: github.com/google/gofuzz\n- package: github.com/gorilla/handlers\n- package: github.com/gorilla/mux\n- package: github.com/onsi/ginkgo\n  subpackages:\n  - config\n- package: github.com/onsi/gomega\n- package: github.com/spf13/cobra\n- package: github.com/spf13/pflag\n- package: github.com/spf13/viper\n- package: github.com/taviti/caldav-go\n  subpackages:\n  - webdav\n  - webdav/entities\n- package: golang.org/x/net\n  subpackages:\n  - context\n- package: gopkg.in/inf.v0\n- package: gopkg.in/validator.v2\n- package: k8s.io/kubernetes\n```\nVendor dir struct\ntree -L 3\n.\n\u251c\u2500\u2500 github.com\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 BurntSushi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 toml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 coreos\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 etcd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 golang\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 glog\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mock\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 onsi\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ginkgo\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 gomega\n...\n\u2514\u2500\u2500 k8s.io\n    \u2514\u2500\u2500 kubernetes\n        \u251c\u2500\u2500 api\n        \u251c\u2500\u2500 vendor\n        \u2514\u2500\u2500 www\nand kubernetes vendor dir struct\n```\nvendor/k8s.io/kubernetes/vendor$ tree -L 3\n.\n\u251c\u2500\u2500 bitbucket.org\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bertimus9\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 systemstat\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ww\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 goautoneg\n\u251c\u2500\u2500 github.com\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 coreos\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 etcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-etcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-oidc\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-semver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 go-systemd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkg\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 rkt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 golang\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 glog\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 groupcache\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 mock\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 protobuf\n```\n(removed a bunch of entries for readability)\n. ",
    "khatribharat": "@mattfarina I'm facing the same issue here. Has support for flatten been removed? I can't see it in the documentation as well.. Using master branch fixes the issue though. I see that the releases on GitHub have stopped a while back and you get 0.12.3-2 on running curl https://glide.sh/get | sh. ",
    "radamsfc": "So what is interesting is that we have locked golang.org/x/net in glide.yaml \n- package: golang.org/x/net\n  version: 6acef71eb69611914f7a30939ea9f6e194c78172\nwhich is from back in February.  Is there anyway to force glide to use this and not HEAD for it's analysis?  Is this a challenge specific to glide's implementation or would I hit this with native vendoring?\nAny advice on how we can unblock development would be appreciated - Thanks!\n. My temporary work around for now is to \ngo get -v github.com/someuser/arepo\nNote the imported packages and add to glide.yaml (for book keeping - doesn't do anything)\n- package: github.com/someuser/arepo\n  version: e8e0db9016175449df0e9c4b6e6995a9433a395c\n- package: github.com/anotheruser/secondrepo\n  version: 99c3df83b51532e3615f851d8c2dbb638f5313bf\nIn the glide.lock I just add\n- name: github.com/someuser/arepo\n  version: e8e0db9016175449df0e9c4b6e6995a9433a395c\n- name: github.com/anotheruser/secondrepo\n  version: 99c3df83b51532e3615f851d8c2dbb638f5313bf\nA glide install generates a warning for now but at least creates the necessary vendor directory.\n. Thanks :)\n. ",
    "kenkouot": "@mattfarina I built a version from your fix and it resolved our issues with net/http/trace.\n. Thanks a bunch for the fix! I built a version for local testing, but would love official release binaries for CI. What is the normal release cadence?\n. ",
    "ash2k": "Could someone release a fixed version please?\n. ",
    "ebuchman": "I'm still having this issue with latest master on go1.6. Is it supposed to be fixed?\n. ",
    "VoR0220": "same...I am running into problems here with this on just the install command. Same net/http/httptrace problem. \n. okay...well that makes much more sense now. Thanks a ton for the pointer. \n. any word on this and if it's being worked on? . ",
    "intoxicated": "looks like patch was only for http/trace but i am having trouble with golang.org/x/net/publicsuffix.. . ",
    "klnusbaum": "Hey @mattfarina, any updates on this?\n. awsome! Thanks @mattfarina !\n. ",
    "bruceauyeung": "yes,my directory structure is the same as what you expects.and i organize my code just as what https://golang.org/doc/code.html#Organization suggested. i just did not mention that.\nbut i think i did set GOPATH wrong. i should set GOPATH=d:\\GOPATH\\EXT;e:\\Workbench\\DIS\\auth\\\n, not set GOPATH=d:\\GOPATH\\EXT;e:\\Workbench\\DIS\\auth\\src\nand a question comes out. \n\nglide init Scan a codebase and create a glide.yaml file containing the dependencies. \n\nwhich path does the codebase metioned before refer to  in my case ? e:\\Workbench\\DIS\\auth\\ or e:\\Workbench\\DIS\\auth\\src ?  in other words,  which directory is the working directory while i run glide init and glide update?\n. @oleksandr-minakov thanks for your reply.\nwhen you ran that command, do you have a empty 'glide.yaml' file ?\ni have configured git to use a proxy\n\ngit config --global -l\nhttp.proxy=http://proxy.of.ourcompany:80\nhttp.sslverify=false\nhttps.proxy=http://proxy.of.ourcompany:80\n\nand i ran the command behind our company proxy. did glide get use proxy settings to detect vcs type?\n. i tried and failed again.\n\nglide get gopkg.in/yaml.v2\n[INFO] Preparing to install 1 package.\n[INFO] Importing gopkg.in/yaml.v2\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[WARN] Unable to checkout gopkg.in/yaml.v2\n[ERROR] Update failed for gopkg.in/yaml.v2: Cannot detect VCS\n[INFO] Resolving imports\n[INFO] Downloading dependencies. Please wait...\n[ERROR] Failed to set version on gopkg.in/yaml.v2 to : Cannot detect VCS\nAn Error has occurred\n. i was using a HK proxy, my git was using it, and my firefox can visit https://golang.org and https://github.com well with this HK proxy.\n. \n",
    "abhin4v": "I get the same error on OSX 10.10.5:\n$ ~/.gocode/src/github.com/Masterminds/glide/glide tree\n[... some output ...]\ngoroutine 1 [running]:\npanic(0x5723a0, 0xc8200120e0)\n        /usr/local/Cellar/go/1.6/libexec/src/runtime/panic.go:464 +0x3e6\ngithub.com/Masterminds/glide/dependency.srcDir(0x0, 0x0, 0xc81ffe5553)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/dependency/resolver.go:1035 +0x33\ngithub.com/Masterminds/glide/dependency.IsSrcDir(0x0, 0x0, 0xc8201060b9)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/dependency/resolver.go:1031 +0x2b\ngithub.com/Masterminds/glide/tree.walkDeps.func1(0x0, 0x0, 0x0, 0x0, 0xd18888, 0xc820355590, 0x0, 0x0)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:48 +0x95\npath/filepath.Walk(0x0, 0x0, 0xc8201cc3a8, 0x0, 0x0)\n        /usr/local/Cellar/go/1.6/libexec/src/path/filepath/path.go:394 +0xa5\ngithub.com/Masterminds/glide/tree.walkDeps(0xc82018cc30, 0x0, 0x0, 0xc8202ace21, 0x12, 0x0, 0x0, 0x0)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:93 +0xc0\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0x0, 0x0, 0xc8202ace21, 0x12, 0x7, 0x0, 0xc820355410)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:19 +0x77\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc820356000, 0x6d, 0xc820290d81, 0x1f, 0x6, 0x0, 0xc820354120)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc82028e5b0, 0x6d, 0xc8201332f1, 0x1f, 0x5, 0x0, 0xc820290720)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc820010d70, 0x4d, 0xc8201d7e41, 0x32, 0x4, 0x0, 0xc820132750)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc820010820, 0x4b, 0xc82026ac41, 0x30, 0x3, 0x0, 0xc8201b1020)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc820270ae0, 0x51, 0xc820189681, 0x36, 0x2, 0x0, 0xc820257620)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/tree.Display(0xc82018cc30, 0xc8200100a4, 0x46, 0xc82019815b, 0x2b, 0x1, 0xc820182f00, 0xc8201b0660)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/tree/tree.go:40 +0x846\ngithub.com/Masterminds/glide/action.Tree(0xc8200100a4, 0x46, 0xc82018e500)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/action/tree.go:32 +0x385\nmain.commands.func14(0xc82018e500)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/glide.go:619 +0x31\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.Command.Run(0x6186e8, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c0ac0, 0x37, 0x0, ...)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/command.go:179 +0x1399\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.(*App).Run(0xc8200a5080, 0xc82000a220, 0x2, 0x2, 0x0, 0x0)\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:196 +0x137c\nmain.main()\n        /Users/abhinav/.gocode/src/github.com/Masterminds/glide/glide.go:122 +0x750\n. ",
    "cescoferraro": "@franciscocpg yeah, wheezy is gonne. Jessie would be better. I am buliding it with go for now.\n. @mattfarina rpi 2 uses armv6 while the rpi3 uses armv7. \n. armv6 is the rpi2.\narmv7 is for the rpi3\n. @mattfarina have you filed it as a bug upstream? it seems odd\n. ",
    "jlburkhead": "gopkg.in seems to be having problems today...\n. https://github.com/Masterminds/glide/commit/9c45100debdd40a24478281db3e5e7e716949972 is the last commit where this successfully glide gets. The error is generated from this line in github.com/Masterminds/vcs, so may be this issue should be moved over there?. ",
    "wiget": "Suitable for my BananaPi - armv7h :smile: . Users of Raspberry Pi 2/3 will benefit from this too.\n. Yes\n. ",
    "oleksandr-minakov": "@redhatlinux10 \nFor me it works as expected (glide 0.10.2)\n$ glide get gopkg.in/yaml.v2\n\n[INFO] Preparing to install 1 package.\n[INFO] Importing gopkg.in/yaml.v2\n[INFO] Downloading dependencies. Please wait...\n[INFO] Fetching updates for github.com/spf13/viper.\n[INFO] Fetching updates for github.com/gorilla/mux.\n[INFO] Fetching updates for github.com/boltdb/bolt.\n[INFO] Fetching updates for github.com/spf13/cobra.\n[INFO] Fetching updates for gopkg.in/yaml.v2.\n[INFO] Resolving imports\n[INFO] Fetching updates for golang.org/x/sys.\n[INFO] Fetching updates for github.com/gorilla/context.\n[INFO] Fetching updates for github.com/inconshreveable/mousetrap.\n[INFO] Fetching updates for github.com/spf13/pflag.\n[INFO] Fetching updates for github.com/BurntSushi/toml.\n[INFO] Fetching updates for github.com/fsnotify/fsnotify.\n[INFO] Fetching updates for github.com/hashicorp/hcl.\n[INFO] Fetching updates for github.com/magiconair/properties.\n[INFO] Fetching updates for github.com/mitchellh/mapstructure.\n[INFO] Fetching updates for github.com/spf13/cast.\n[INFO] Fetching updates for github.com/spf13/jwalterweatherman.\n[INFO] Downloading dependencies. Please wait...\n. \n",
    "HuKeping": "Have came cross the same issue and I'm quite certain that it was caused by the GFW \n. ",
    "atomi": "Same issue on rPi trying to build http://github.com/gogits/gogs \n\n\n\nlog\n[INFO]  --> Fetching github.com/shurcooL/sanitized_anchor_name.\n[INFO]  --> Fetching github.com/Unknwon/cae.\n[INFO]  --> Fetching github.com/Unknwon/com.\n[INFO]  --> Fetching github.com/Unknwon/i18n.\n[INFO]  --> Fetching github.com/Unknwon/paginater.\n[INFO]  --> Fetching golang.org/x/crypto.\n[INFO]  --> Fetching golang.org/x/net.\n[INFO]  --> Fetching golang.org/x/sys.\n[INFO]  --> Fetching golang.org/x/text.\n[INFO]  --> Fetching gopkg.in/alexcesaro/quotedprintable.v3.\n[INFO]  --> Fetching gopkg.in/asn1-ber.v1.\n[INFO]  --> Fetching gopkg.in/bufio.v1.\n[INFO]  --> Fetching gopkg.in/editorconfig/editorconfig-core-go.v1.\n[INFO]  --> Fetching gopkg.in/gomail.v2.\n[WARN]  Unable to checkout gopkg.in/alexcesaro/quotedprintable.v3\n[ERROR] Update failed for gopkg.in/alexcesaro/quotedprintable.v3: Cannot detect VCS\n[INFO]  --> Fetching gopkg.in/ini.v1.\n[WARN]  Unable to checkout gopkg.in/asn1-ber.v1\n[ERROR] Update failed for gopkg.in/asn1-ber.v1: Cannot detect VCS\n[INFO]  --> Fetching gopkg.in/ldap.v2.\n[WARN]  Unable to checkout gopkg.in/bufio.v1\n[ERROR] Update failed for gopkg.in/bufio.v1: Cannot detect VCS\n[INFO]  --> Fetching gopkg.in/macaron.v1.\n[WARN]  Unable to checkout gopkg.in/editorconfig/editorconfig-core-go.v1\n[ERROR] Update failed for gopkg.in/editorconfig/editorconfig-core-go.v1: Cannot detect VCS\n[INFO]  --> Fetching gopkg.in/redis.v2.\n[WARN]  Unable to checkout gopkg.in/gomail.v2\n[ERROR] Update failed for gopkg.in/gomail.v2: Cannot detect VCS\n[WARN]  Unable to checkout gopkg.in/ini.v1\n[ERROR] Update failed for gopkg.in/ini.v1: Cannot detect VCS\n[WARN]  Unable to checkout gopkg.in/ldap.v2\n[ERROR] Update failed for gopkg.in/ldap.v2: Cannot detect VCS\n[WARN]  Unable to checkout gopkg.in/macaron.v1\n[ERROR] Update failed for gopkg.in/macaron.v1: Cannot detect VCS\n[WARN]  Unable to checkout gopkg.in/redis.v2\n[ERROR] Update failed for gopkg.in/redis.v2: Cannot detect VCS\n\n\nInterestingly, it works for other gopkg.in libraries just not these.\n. ",
    "jmahowald": "any update on this? with  0.12.3 I get a slightly different error message that I'm pretty sure has the same underlying cause\n[WARN]  Unable to checkout gopkg.in/yaml.v2\n[ERROR] Update failed for gopkg.in/yaml.v2: Unable to get repository\n[ERROR] Failed to checkout packages: Unable to get repository\n. So apparently I had long ago set to not always verify https with git. Obviously bad and stupid.  But apparently the cause of this, at least for me.\ngit config --global http.sslVerify true fixed\nFrom https://github.com/niemeyer/gopkg/issues/47. ",
    "delphinus": "I've got the same error. What has been changed?\n. ",
    "kotamat": "I've got too.\n. ",
    "erutherford": "I was running into the same issue with the golang crypto, sys and net packages, but I was able to get around this by specifying the repo \nyaml\n- package: golang.org/x/sys\n  repo: git@github.com:golang/sys.git. ",
    "mweibel": "I have the same issue:\n\u00bb glide get gopkg.in/yaml.v2\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package gopkg.in/yaml.v2\n[INFO]  --> Gathering release information for gopkg.in/yaml.v2\n[INFO]  --> Adding gopkg.in/yaml.v2 to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching gopkg.in/yaml.v2.\n[WARN]  Unable to checkout gopkg.in/yaml.v2\n[ERROR] Update failed for gopkg.in/yaml.v2: Unable to get repository\n[ERROR] Failed to checkout packages: Unable to get repository\nWill do the same as @erutherford, but I guess that should be fixed in another way.. ",
    "laiwei": "git config --global http.sslVerify true  it works for me:(. ",
    "lming": "+1. Getting a new package should not automatically update all existing packages ...\n. ",
    "gobwas": "@sdboyer yes, you are completely right =)\nSome vendor_dir option in yaml configuration for glide would be very useful for me =)\n. @mattfarina you could simply say GOPATH=$PWD/vendor:$PWD go build to simply switch paths for go. And thats why feature for changing vendored packages dir in glide also be good =) I could prepare PR if this makes sense.\n. ",
    "vearutop": "Alphabetical order is very helpful when resolving conflicts in two glide.yaml. The diff could be very messy and unclear without ordering.. ",
    "jredville": "http://glide.readthedocs.io/en/latest/glide.yaml/ discusses a devImports section in the yaml, with the same format as the import section of the yaml\n. ",
    "j16r": "Hey @mattfarina, no vendor/ is not in my .gitignore. Regardless, all of vendor is in fact checked in - other people who clone the repo get the files.\n. ",
    "dudymas": "wouldn't it be fair of glide to write a .gitmodules file?\n. ",
    "mh-cbon": "I noticed that it works wih go 1.6.2, but not 1.6. not sure why..\n. I have similar problems with latest on a different repo, this time glide update did not help\n$ glide create\n[INFO]  Generating a YAML configuration file and guessing the dependencies\n[INFO]  Attempting to import from other package managers (use --skip-import to skip)\n[INFO]  Scanning code to look for dependencies\n[INFO]  Writing configuration file (glide.yaml)\n[INFO]  Would you like Glide to help you find ways to improve your glide.yaml configuration?\n[INFO]  If you want to revisit this step you can use the config-wizard command at any time.\n[INFO]  Yes (Y) or No (N)?\ny\n[INFO]  Looking for dependencies to make suggestions on\n[INFO]  --> Scanning for dependencies not using verion ranges\n[INFO]  --> Scanning for dependencies using commit ids\n[INFO]  Gathering information on each dependency\n[INFO]  --> This may take a moment. Especially on a codebase with many dependencies\n[INFO]  --> Gathering release information for dependencies\n[INFO]  --> Looking for dependency imports where versions are commit ids\n[INFO]  No proposed changes found. Have a nice day.\n$ ll\ntotal 16\ndrwxrwxr-x 2 mh-cbon mh-cbon 4096  9 juin  13:38 cmd\n-rw-rw-r-- 1 mh-cbon mh-cbon   44 10 juin  15:22 glide.yaml\n-rw-rw-r-- 1 mh-cbon mh-cbon   13  9 juin  13:41 gump.go\n-rw-rw-r-- 1 mh-cbon mh-cbon   86  9 juin  13:39 README.md\n$ glide get github.com/mh-cbon/go-repo-utils\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/mh-cbon/go-repo-utils\n[INFO]  --> Gathering release information for github.com/mh-cbon/go-repo-utils\n[INFO]  --> Adding github.com/mh-cbon/go-repo-utils to your configuration %!s(MISSING)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for github.com/mh-cbon/go-repo-utils.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n$ glide update\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for github.com/mh-cbon/go-repo-utils.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 1 dependencies\n$ glide -v\nglide version 0.10.2-109-gc25976f\n$ ll vendor/github.com/\ntotal 4\ndrwxrwxr-x 3 mh-cbon mh-cbon 4096 10 juin  15:23 mh-cbon\n$ ll vendor/github.com/mh-cbon/\ntotal 4\ndrwxrwxr-x 9 mh-cbon mh-cbon 4096 10 juin  15:23 go-repo-utils\n$ cat vendor/github.com/mh-cbon/go-repo-utils/glide.yaml \npackage: github.com/mh-cbon/go-list-tags\nimport:\n- package: github.com/docopt/docopt.go\n- package: github.com/Masterminds/semver\n- package: github.com/mh-cbon/verbose\n. > Glide scans the code to know where in the import tree to fetch. It starts with references in your application and follows the referenced import tree. Do you have references in your code? \nDo you mean import statements ? Like this\nIndeed glide get github.com/mh-cbon/verbose --all-dependencies find the recursive dependencies and import them.\nsh\n$ glide -v\nglide version 0.10.2-109-gc25976f\nBTW, notice how glide tries to update '.'\nsh\n$ pwd\ntest\n$ glide get github.com/mh-cbon/verbose --all-dependencies\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/mh-cbon/verbose\n[INFO]  --> Gathering release information for github.com/mh-cbon/verbose\n[INFO]  --> Adding github.com/mh-cbon/verbose to your configuration %!s(MISSING)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for github.com/mh-cbon/verbose.\n[INFO]  Resolving imports\n[INFO]  Fetching test into /home/mh-cbon/gow/src/github.com/mh-cbon/test/vendor\n[ERROR] Failed to fetch test: Cannot detect VCS\n[INFO]  Fetching github.com/fatih/color into /home/mh-cbon/gow/src/github.com/mh-cbon/test/vendor\n[INFO]  Setting version for github.com/fatih/color to 533cd7fd8a85905f67a1753afb4deddc85ea174f.\n[INFO]  Found GB manifest file in vendor/github.com/fatih/color\n[INFO]  --> Parsing GB metadata...\n[INFO]  Fetching github.com/mattn/go-colorable into /home/mh-cbon/gow/src/github.com/mh-cbon/test/vendor\n[INFO]  Setting version for github.com/mattn/go-colorable to 9cbef7c35391cca05f15f8181dc0b18bc9736dbb.\n[INFO]  Fetching github.com/mattn/go-isatty into /home/mh-cbon/gow/src/github.com/mh-cbon/test/vendor\n[INFO]  Setting version for github.com/mattn/go-isatty to 56b76bdf51f7708750eac80fa38b952bb9f32639.\n[INFO]  Fetching golang.org/x/sys/unix into /home/mh-cbon/gow/src/github.com/mh-cbon/test/vendor\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Fetching updates for test.\n[WARN]  Unable to checkout test\n[ERROR] Update failed for test: Cannot detect VCS\n[ERROR] Could not update packages: Cannot detect VCS\nthanks !\n. > Honest question for the glide maintainers: is this project abandoned now? \nI m not maintainer, but i don't think so.\n\nThis (blocking) bug has been open for ~9\n\nAs OP, i can say it happened once or two to me, but since them, imho, its fixed.\nSo unless someone can provide a useful trace to reproduce the problem (including the full state of each vendored repo, which i missed to add originally), and understand that issue, \ni prefer to close the thread as it bikesheding without much useful feedback.\n. > go install -a github.com/mattn/go-sqlite3\nAs mentionned by @sdboyer, this will install your go-sqlite3 global dependency to $GOPATH/pkg/darwin_amd64/github.com/mattn/go-sqlite3.a\nBut, if you have used glide to depends go-sqlite within your project (IE: it exists within your ./vendor dir), then the first command shown here wont help you.\nTo fix this, use go build -i on your project, and your dependencies will be compiled and made available at a path like $GOPATH/pkg/**/yourproject/vendor/**.\nThat s what you want 'coz one of the rule of go imports is that the longest path wins, so when go imports sqlite3 for your project it will take the one within vendor/ rather than the global one, then try to map it to a built asset, not find it, thus re compile it.\nIt s same as this SO here\n. yes, i agree, i experience a similar error, glide is stuck now.\nsh\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/home/mh-cbon/gow/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/mh-cbon/gow\"\nGORACE=\"\"\nGOROOT=\"/home/mh-cbon/.gvm/gos/go1.8\"\nGOTOOLDIR=\"/home/mh-cbon/.gvm/gos/go1.8/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build865382226=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nPKG_CONFIG=\"pkg-config\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\n$ go version\ngo version go1.8 linux/amd64\nIt won t fetch github.com/gorilla/websocket,\nbecause it failed to fetch a local package.\n```sh\n$ pwd\n/home/mh-cbon/gow/src/github.com/mh-cbon/rclone-parser\n$ pwd\n/home/mh-cbon/gow/src/github.com/mh-cbon/backup\n$ cat glide.yaml \npackage: github.com/mh-cbon/backup\nimport:\n- package: github.com/gorilla/mux\n  version: ^1.3.0\n- package: github.com/mh-cbon/gssc\n  version: ^0.0.1\n- package: github.com/mitchellh/go-homedir\n- package: github.com/gorilla/websocket\n  version: ^1.1.0\n$ cd app\n$ go list -f '{{join .Deps \"\\n\"}}' | grep rclo\ngithub.com/mh-cbon/rclone-parser/parser\ngithub.com/mh-cbon/rclone-parser/rclone\n$ cd ..\n$ go run main.go \napi/tasks.go:6:2: cannot find package \"github.com/gorilla/websocket\" in any of:\n    /home/mh-cbon/gow/src/github.com/mh-cbon/backup/vendor/github.com/gorilla/websocket (vendor tree)\n    /home/mh-cbon/.gvm/gos/go1.8/src/github.com/gorilla/websocket (from $GOROOT)\n    /home/mh-cbon/gow/src/github.com/gorilla/websocket (from $GOPATH)\n$ glide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gorilla/mux.\n[INFO]  --> Fetching updates for github.com/mh-cbon/gssc.\n[INFO]  --> Fetching updates for github.com/mitchellh/go-homedir.\n[INFO]  --> Fetching updates for github.com/gorilla/websocket.\n[INFO]  --> Detected semantic version. Setting version for github.com/mh-cbon/gssc to 0.0.1.\n[INFO]  --> Detected semantic version. Setting version for github.com/gorilla/websocket to v1.1.0.\n[INFO]  --> Detected semantic version. Setting version for github.com/gorilla/mux to v1.3.0.\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for github.com/gorilla/context.\n[INFO]  --> Fetching updates for github.com/pkg/errors.\n[INFO]  --> Detected semantic version. Setting version for github.com/pkg/errors to v0.8.0.\n[INFO]  --> Fetching github.com/mh-cbon/disksinfo.\n[WARN]  Unable to checkout github.com/mh-cbon/disksinfo\n[ERROR] Error looking for github.com/mh-cbon/disksinfo/diskinfo: Unable to get repository\n[INFO]  --> Fetching github.com/mh-cbon/rclone-parser.\n[WARN]  Unable to checkout github.com/mh-cbon/rclone-parser\n[ERROR] Error looking for github.com/mh-cbon/rclone-parser/parser: Unable to get repository\n[WARN]  Unable to set version on github.com/mh-cbon/rclone-parser to . Err: Unable to retrieve checked out version\n[ERROR] Error scanning github.com/mh-cbon/rclone-parser/rclone: open /home/mh-cbon/.glide/cache/src/https-github.com-mh-cbon-rclone-parser/rclone: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports\n$ cd ../rclone-parser/\n$ git remote -v\n$\n$ cd ../backup/\n$ glide install --force\n[WARN]  Lock file may be out of date. Hash check of YAML failed. You may need to run 'update'\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Found desired version locally github.com/gorilla/context 08b5f424b9271eedf6f9f0ce86cb9396ed337a42!\n[INFO]  --> Found desired version locally github.com/gorilla/mux 392c28fe23e1c45ddba891b0320b3b5df220beea!\n[INFO]  --> Found desired version locally github.com/mh-cbon/gssc 62a18b7291f080081e4dff8dd694ac07d16a18b4!\n[INFO]  --> Found desired version locally github.com/mitchellh/go-homedir b8bc1bf767474819792c23f32d8286a45736f1c6!\n[INFO]  --> Found desired version locally github.com/pkg/errors 645ef00459ed84a119197bfb8d8205042c6df63d!\n[INFO]  Setting references.\n[INFO]  --> Setting version for github.com/gorilla/mux to 392c28fe23e1c45ddba891b0320b3b5df220beea.\n[INFO]  --> Setting version for github.com/mh-cbon/gssc to 62a18b7291f080081e4dff8dd694ac07d16a18b4.\n[INFO]  --> Setting version for github.com/mitchellh/go-homedir to b8bc1bf767474819792c23f32d8286a45736f1c6.\n[INFO]  --> Setting version for github.com/gorilla/context to 08b5f424b9271eedf6f9f0ce86cb9396ed337a42.\n[INFO]  --> Setting version for github.com/pkg/errors to 645ef00459ed84a119197bfb8d8205042c6df63d.\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/pkg/errors\n[INFO]  --> Exporting github.com/gorilla/mux\n[INFO]  --> Exporting github.com/mitchellh/go-homedir\n[INFO]  --> Exporting github.com/mh-cbon/gssc\n[INFO]  --> Exporting github.com/gorilla/context\n[INFO]  Replacing existing vendor dependencies\n$ go run main.go \napi/tasks.go:6:2: cannot find package \"github.com/gorilla/websocket\" in any of:\n    /home/mh-cbon/gow/src/github.com/mh-cbon/backup/vendor/github.com/gorilla/websocket (vendor tree)\n    /home/mh-cbon/.gvm/gos/go1.8/src/github.com/gorilla/websocket (from $GOROOT)\n    /home/mh-cbon/gow/src/github.com/gorilla/websocket (from $GOPATH)\n```\nNote also, if i do glide up --quick, it will fail on github.com/pkg/errors\nsh\n$ glide up --quick\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gorilla/mux.\n[INFO]  --> Fetching updates for github.com/mitchellh/go-homedir.\n[INFO]  --> Fetching updates for github.com/mh-cbon/gssc.\n[INFO]  --> Fetching updates for github.com/gorilla/websocket.\n[INFO]  --> Detected semantic version. Setting version for github.com/mh-cbon/gssc to 0.0.1.\n[INFO]  --> Detected semantic version. Setting version for github.com/gorilla/websocket to v1.1.0.\n[INFO]  --> Detected semantic version. Setting version for github.com/gorilla/mux to v1.3.0.\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/mh-cbon/gssc\n[INFO]  --> Exporting github.com/gorilla/websocket\n[INFO]  --> Exporting github.com/mitchellh/go-homedir\n[INFO]  --> Exporting github.com/gorilla/mux\n[INFO]  Replacing existing vendor dependencies\n[WARN]  Skipping lockfile generation because full dependency tree is not being calculated\n $ go run main.go\nvendor/github.com/mh-cbon/gssc/gssc.go:11:2: cannot find package \"github.com/pkg/errors\" in any of:\n    /home/mh-cbon/gow/src/github.com/mh-cbon/backup/vendor/github.com/pkg/errors (vendor tree)\n    /home/mh-cbon/.gvm/gos/go1.8/src/github.com/pkg/errors (from $GOROOT)\n    /home/mh-cbon/gow/src/github.com/pkg/errors (from $GOPATH)\n$ ll vendor/github.com/gorilla/\ntotal 8\ndrwxr-xr-x 2 mh-cbon mh-cbon 4096 10 mars  01:17 mux\ndrwxr-xr-x 3 mh-cbon mh-cbon 4096 10 mars  01:17 websocket. meanwhile, i added those dep to ignore key,\nignore:\n  - github.com/mh-cbon/rclone-parser\n  - github.com/mh-cbon/disksinfo/diskinfo\n. imu, when you do docker things, it should be against a finished package.\nI mean package with a fixed set of dependencies.\nIn our case we are dealing with unfinished sets as the version of the packages we want to work with exist only in the workspace (not in vendor).\nSo in your case, in your docker, when you do glide up, all dependencies must exist with a version and a reachable remote.. ",
    "zcahana": "Attaching the example referenced above: glide-ignore-example.zip\nTo use, just unzip into $GOPATH/src, and run glide up within myorg/app folder.\n. @mattfarina indeed seems to be fixed - ignored package doesn't get into the lock file.\nI tested with both the app/lib example above, as well as the real repo I've seen this happen in.\nThanks for the prompt reply!\n. ",
    "orospakr": "Also, I installed glide itself from git (https://github.com/Masterminds/glide/commit/c25976f8059b0749f821d4e9c3faf7a205114097), and not one of the builds. \ud83d\ude0a \n. Found a clue:  masterminds/vcs's hg suport, while trying to check out bitbucket.org/pkg/inflect, is running hg paths, which is complaining about perms (probably because of that danged filesystem mount!).  There is a bug here, in that masterminds/vcs isn't properly handling errors from hg.\nroot@be0452be7bd1:/go/src/github.com/joist-engineering/force/vendor/bitbucket.org/pkg/inflect# hg paths\nnot trusting file /go/src/github.com/joist-engineering/force/vendor/bitbucket.org/pkg/inflect/.hg/hgrc from untrusted user 1000, group staff\n. ",
    "ulrichSchreiner": "hi,\ni think this is not an ideal solution. when i need a new library in my code i first install it and then use it. when invoking the current version of glide  with glide get github.com/spf13/cobra it installs the cobra library but not the dependencies.\nNow i use the cobra library in my code and get compilation errors, because the dependencies of cobra are not installed.\nI used to work with tools like goimports so i normally do not write the imports by myself. i simply use the library in the code and the tool does the import. but this only works if the library is installed. and here is the chicken-egg problem: glide wants my code to contain a import statement and other tools want a correctly installed library.\nimho it is a bug of glide to not install a library like go get. In your documentation you write glide get is similiar to go get. But it is not! It does install the library code, but it does only install the dependencies if i have an import statement.\nIt would be better to not install anything or install everything (including dependencies). but not only some parts where a subsequent compilation will fail because of missing dependencies.\n\n. ",
    "karalabe": "I'm getting the same errors:\n[ERROR] Could not find /home/karalabe/.glide/cache/src/https-golang.org-x-tools/imports: open /home/karalabe/.glide/cache/src/https--home-karalabe-.glide-cache-src-https-golang.org-x-tools-imports: no such file or directory\n[ERROR] Dependency golang.org/x/tools/imports (/home/karalabe/.glide/cache/src/https-golang.org-x-tools/imports) failed to resolve: open /home/karalabe/.glide/cache/src/https--home-karalabe-.glide-cache-src-https-golang.org-x-tools-imports: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /home/karalabe/.glide/cache/src/https--home-karalabe-.glide-cache-src-https-golang.org-x-tools-imports: no such file or directory\n. I looked into a glide alternative from Rancher, called trash, which seems to easily handle everything I needed (and it's tiny at 700 LOC so I fixed the couple corner cases where it didn't work correctly and upstreamed it).\n. ",
    "leeola": "Same,\n[ERROR] Could not find /Users/leeolayvar/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/leeolayvar/.glide/cache/src/https--Users-leeolayvar-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/leeolayvar/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/leeolayvar/.glide/cache/src/https--Users-leeolayvar-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/leeolayvar/.glide/cache/src/https--Users-leeolayvar-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\nWhen trying to run:\nglide get --all-dependencies github.com/inconshreveable/log15\n. ",
    "nsilberman": "Same error for me !. hi @mattfarina , it 's a very strange bug\nThis is what I've done (on mac os 10.11)\n- glide --version => glide version 0.12.3\n- glide install => OK but missing dependencies used by vendor libs (???)\n- glide up --all-dependencies (should be great to do that on install step) => error:\n$ glide up --all-dependencies\n...\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for golang.org/x/sys.\n...\n[ERROR] Could not find /Users/nicolas/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/nicolas/.glide/cache/src/https--Users-nicolas-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/nicolas/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/nicolas/.glide/cache/src/https--Users-nicolas-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/nicolas/.glide/cache/src/https--Users-nicolas-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory. @neocortical your fix works for me to ! maybe you can send a PR and we'll discuss about it with glide team ?. > My guess is that somewhere higher up in the call chain, an import path SHOULD be used, but an absolute path is being used instead.\nyep, seems to be that. We know \"just\" have to find where. hi @sdboyer , works well on Mac, not on TravisCI (docker instance on ubuntu 12) while executing glide up --all-dependencies\n[INFO]  --> Fetching updates for github.com/andybalholm/cascadia.\n[ERROR] Could not find /home/travis/.glide/cache/src/https-golang.org-x-sys/unix: open /home/travis/.glide/cache/src/https--home-travis-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/home/travis/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /home/travis/.glide/cache/src/https--home-travis-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /home/travis/.glide/cache/src/https--home-travis-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory. ",
    "neocortical": "Does anyone have a good workaround for this issue?\nEDIT: I was able to work around this issue in my case by hacking a one-line change into Glide and rebuilding. Here is the diff: \n```\ndiff --git a/dependency/resolver.go b/dependency/resolver.go\nindex bf59c3e..5f339f8 100644\n--- a/dependency/resolver.go\n+++ b/dependency/resolver.go\n@@ -827,7 +827,7 @@ func (r *Resolver) imports(pkg string, testDeps, addTest bool) ([]string, error)\n                if testDeps {\n                        , imps, err = IterativeScan(r.Handler.PkgPath(pkg))\n                } else {\n-                       imps, , err = IterativeScan(r.Handler.PkgPath(pkg))\n+                       imps, _, err = IterativeScan(pkg)\n                }\n            if err != nil {\n\n```\nWARNING: I know next to nothing about Glide internals and am not totally sure what I did there. YMMV.. @nsilberman Let me dig in a little into why my fix worked. Then I'll submit a PR if I can. I suspect that my fix hacked out a feature that is needed in other use cases and/or there are some deeper reasons why the method call I removed exists.. A couple more notes. \n\n\nI just tried my glide update command using v0.11.1 and it worked. Then I upgraded to v0.12.3 and it failed. (I'm on a different laptop from when I rebuilt from source).\n\n\nI traced the issues to r.Handler.PkgPath(pkg) by debugging and noting that the value of pkg pointed to a valid location in the glide cache until PkgPath() was applied. The specific Error I get is:\n\n\n[ERROR] Could not find /Users/nate/.glide/cache/src/https-github.com-lib-pq/oid: open /Users/nate/.glide/cache/src/https--Users-nate-.glide-cache-src-https-github.com-lib-pq-oid: no such file or directory\nHowever, lib pq/oid does exist here: \n/Users/nate/.glide/cache/src/https-github.com-lib-pq/oid\nSo the issue is the package path mutation that occurs in r.Handler.PkgPath(pkg).. So this has been around for a while. Issue #468, despite its title, ends up being about this issue. At the time I first encountered it, I traced the error through the Glide code and came up with a patch that fixed the issue for me. See my comment on Dec 5.\nThe patch continues to work for me (I just reencountered this problem, having forgotten about it, which led me here). Use at your own risk. Repasted here to save a click.\n```\ndiff --git a/dependency/resolver.go b/dependency/resolver.go\nindex bf59c3e..5f339f8 100644\n--- a/dependency/resolver.go\n+++ b/dependency/resolver.go\n@@ -827,7 +827,7 @@ func (r *Resolver) imports(pkg string, testDeps, addTest bool) ([]string, error)\n                if testDeps {\n                        , imps, err = IterativeScan(r.Handler.PkgPath(pkg))\n                } else {\n-                       imps, , err = IterativeScan(r.Handler.PkgPath(pkg))\n+                       imps, _, err = IterativeScan(pkg)\n                }\n            if err != nil {\n\n```\n. I am at 0.13.0-dev and it still works for me.\n. ",
    "lucaswxp": "Any workarounds to this yet? +1. @neocortical What glide version are you at? Your patch didn't work in 0.13.0-dev. ",
    "hraban": "Im having the same problem, and it essentially makes glide unusable for large projects. @neocortical's fix breaks it on the first private repository dependency, unfortunately.. @brikis98 we literally just migrated to govendor (https://github.com/kardianos/govendor) since my last comment. It handles recursive dependencies well and is under active development. I'd say give it a shot, if nothing else.. ",
    "brikis98": "Honest question for the glide maintainers: is this project abandoned now? This (blocking) bug has been open for ~9 months and there have been no new releases of glide for ~6 months. I'm grateful for all the work that's been put into this project, and I use it in a ton of my projects, but it would be great to know if there are any plans to keep Glide alive, or if I should be migrating away from it.. The same sort of issue was reported in #640 also about 9 months ago. So it's definitely not some isolated problem. I can't post an easy repro case because it involves Go code in a private repo. . Is there any workaround that doesn't involve hacking the glide code?. ",
    "priscila225": "For me, it works after did the command glide install before glide update, don't know why but ok.. For me, it works after did the command glide install before glide update, don't know why but ok.. I had this problem too, but for me works after I set this command on terminal (to use git@git.. protocol) : git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\" . ",
    "vburenin": "Any feedback on this? At least there is some interest in provided patch.\n. I tried both.\n. So I guess, we could merge this fix when I add tests, however, I do not like how I named the new parameter.\n\"nosubpackages\" kinda conflicts with existing \"subpackages\". Any better proposition?\n. ",
    "itcreator": "+1\n. ",
    "sergeyklay": "+1\n. ",
    "vovanec": "+1\n. ignore_subpackages?\n. ",
    "yulyt": "+1\n. ",
    "s-urbaniak": "@sdboyer thanks for the quick clarification! closing this, since there is nothing to be fixed.\n. ",
    "fanningert": "Hi there. I have the same problem with glide. Is there a solution (no workaround) for the problem?\n. @franciscocpg Thanks for your answer, but why is it working sometimes and sometimes it doesn't work. (vendor directory is everytime cleared) and I thought for the git clone (only download) of a repository you don't need a ssh key.\n. ",
    "gavbaa": "Also experiencing this problem, and https isn't a reasonable option for us, we need to be able to check out the aliased imports over SSH as well, just like we do the rest of the projects that aren't aliased.\n. I also disagree that this is an SSH key problem, because I'm doing it with completely public projects on Github.  \nI started a completely empty Go project, and with nothing but a directory structure and the following glide.yaml, get this issue.\nglide.yaml:\npackage: git.jcasolutions.com/jca/traininglocker\nimport:\n- package: github.com/jhoonb/archivex\n  version: 60319bf17b608b56a3d34717d1501024c1a9f1eb\n  repo: github.com/gavbaa/archivex\n  vcs: git\nRunning glide up gives:\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/jhoonb/archivex.\n[WARN]  Unable to checkout github.com/jhoonb/archivex\n[ERROR] Update failed for github.com/jhoonb/archivex: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nThat seems like a legitimate alias problem to me.\n. You are correct, that was the issue.  Shouldn't a malformed repo entry for the specified VCS throw an explicit error to the user?  Something that directly indicates the repo line is not valid?\n. ",
    "creshal": "Please give more detailed error messages. I keep getting the error on one machine, but SSH keys are set up and the configuration file isn't malformed, so there's something else broken and I'd like to know what.. glide up on a repository. Works fine on a bunch of Linux VMs, but fails on a windows VM with one specific repo. go get works fine with the exactly same repo URL, so I've verified that SSH etc. are working.. ```\n[ERROR] Update failed for internaldomain/somelib: Unable to get repository\n[DEBUG] Output was: Klone nach 'C:\\Users\\creshal.glide\\cache\\src\\internaldomain-somelib.git' ...\nPermission denied, please try again.\nPermission denied, please try again.\nPermission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.[DEBUG]       Unlocking internaldomain-somelib.git\n```\nRunning git clone git@internaldomain/somelib.git manually in the same tab works.\nThe only difference I can think of is the SSH key \u2013 I'm not running ssh-agent on this machine, and I need to enter the key password on every SSH op. Is that not supported by glide for some reason?. ",
    "sakshamsharma": "I will give a weird report on this one. I too thought it has something to do with SSH keys, but this -->\n\nBuilds fine on my laptop (without docker, on Gentoo)\nFails inside docker on my laptop\nWorks just fine on a Docker in Ubuntu 16.04\nWorks fine when build on hub.docker.com\n\nThe errors are the same. Any thoughts?\nHere are the debug logs for some of those which failed:\n[WARN]  Unable to checkout github.com/klauspost/crc32\n[ERROR] Update failed for github.com/klauspost/crc32: Unable to get repository\n[DEBUG] Output was: Cloning into '/go/src/github.com/pclubiitk/puppy-love/.glide/cache/src/https-github.com-klauspost-crc32'...\nfatal: unable to access 'https://github.com/klauspost/crc32/': Could not resolve host: github.com[DEBUG]    Unlocking https-github.com-klauspost-crc32\n[WARN]  Unable to checkout github.com/miekg/dns\n[ERROR] Update failed for github.com/miekg/dns: Unable to get repository\n[DEBUG] Output was: Cloning into '/go/src/github.com/pclubiitk/puppy-love/.glide/cache/src/https-github.com-miekg-dns'...\nfatal: unable to access 'https://github.com/miekg/dns/': Could not resolve host: github.com[DEBUG]  Unlocking https-github.com-miekg-dns\nOh, btw some github repos do work. Some just randomly fail.\nUpdate: Weird. I looked here and realized that /etc/hosts file does not persist across RUN command. The debug logs showed that it may be a DNS issue (although it does build fine on another machine in the same internal network). I tried to fix by manually adding Github to the /etc/hosts file, and voila!\nI managed to make it work. Here is the final command I ran:\nRUN bash -c \"echo 192.30.253.113 github.com >> /etc/hosts\" && ./loop.sh\nEven here, there were one or two failures. I fixed them by making loop.sh loop over glide install till it worked.\nuntil glide --debug install;\ndo\n    echo \"Retrying\"\ndone. ",
    "akhy": "completely agree with @emilevauge \nin my jenkins, running glide install inside docker build always failed due to lack of ssh keys. ",
    "bunyk": "Same issue when doing glide get github.com/__org__/__repo__ with private repository. \nFirst it asks:\n[INFO]  The latest release is v1.0.0. You are currently not using a release. Would you like\nThen \n[INFO]  Would you like to track the latest minor or patch releases (major.minor.patch)?\nAnd then:\n[WARN]  Download failed.\n[ERROR] Update failed for github.com/org/repo: Unable to update repository: exit status 1\n. Anyone knows any workarounds? . ",
    "gyuho": "np! thanks for the glide!\n. Btw, this is the commands for converting Godeps to glide\n``` bash\nconverting Godeps to glide\ncd $GOPATH/src/github.com/coreos/etcd\nrm -rf ./vendor\nrm -rf ./cmd/vendor\nmv ./cmd/Godeps .\nmv ./cmd ..\nglide create\nrm -rf ./Godeps\nglide --verbose update --delete --strip-vendor --strip-vcs --update-vendored --skip-test\nglide vc --only-code --no-tests\nmv ../cmd ./cmd\nmv ./vendor ./cmd/\ncd $GOPATH/src/github.com/coreos/etcd/cmd/vendor/github.com/coreos\nrm -f etcd\nln -s $GOPATH/src/github.com/coreos/etcd $GOPATH/src/github.com/coreos/etcd/cmd/vendor/github.com/coreos/etcd\n```\n. Sorry, it was my bad symlink. Got it to work. Thanks!\n. Yeah it works now. My symlink command was wrong\nln -s $GOPATH/src/github.com/coreos/etcd $GOPATH/src/github.com/coreos/etcd/cmd/vendor/github.com/coreos/etcd\nThis should have been\ncd $GOPATH/src/github.com/coreos/etcd\nln -s ../../../../ cmd/vendor/github.com/coreos/etcd\nThanks!\n. Got it to work by manually migrating from godep.\n. That makes sense. Thought it would fix the issue, but we still see the same behavior :0\n. Found think glide vc --no-tests removes deps in *_test.go files. Will need to find a way to work-around. Thanks.\n. ",
    "gitwangjian": "gopath error\n. ",
    "snewman": "I hit this too - I wonder if it wants to be revisited.\nHow To Reproduce\n$. export GOPATH=.\n$. glide get github.com/gorilla/mux\nWhat Is Expected\nA normal go get will give a better error in this situation, specifically (under 1.7.1) gives a more helpful error like this:\ngo get github.com/gorilla/mux\ngo: GOPATH entry is relative; must be absolute path: \".\".\nRun 'go help gopath' for usage.\nAssuming that this is the same underlying problem (and I think it is, as if I use an absolute path this goes away) then it might be a good idea to send back a better error.\n. ",
    "matt3o": "The same problem can occur if your GOROOT is wrong which was my problem. Executing the command mentioned above will expose the problem so you then can fix it: \ngo get github.com/gorilla/mux. ",
    "crazy-max": "Same thing if GOPATH ending with ; on Windows :\n```\n\nset GOPATH=C:\\dev;\nglide install -v\n[ERROR] Error getting version: exit status 2.\n```. \n",
    "Synaxis": "gopath might be a cause either. ",
    "sapiens-sapide": "Yes, seems it's a go bug.\nI can go build but go install fails. I posted on github.com/golang/go.\nThanks for your reply.\n. ",
    "derelk": "I don't have any reason to think this is an implementation error\u2014I think it's a documentation error in this project. The documentation says:\n\n<= 2.x is equivalent to <= 3\n\nBut I think it should say:\n\n<= 2.x is equivalent to < 3\n. Got it, thanks.\n. This works as expected for me against semver 1.0.0, 1.0.1, and 1.1.0. I'm running:\n\ngo\n    c, _ := semver.NewConstraint(\"<= 2.x\");\n    v, _ := semver.NewVersion(\"3.0\")\n    fmt.Println(c.Check(v))\nand it's consistently false. Thus I still believe this is simply a documentation error in this project.\n. This is broken in the 2.x branch, though. The above code with c.Matches(v) returns nil.\n. I'll file 2.x the issue in semver and a PR for this doc fix.\n. ",
    "joesis": "What the hash and updated field in glide.lock kept annoying me is frequent code conflict. Say if I ran glide up or added a package in a feature branch, and there was another commit in master updated glide.lock too, manual resolution is always required when merging, just because of the two fields. I would rather suggest removing these two fields completely, as glide.lock should always be in version control and be the final truth for CI or production build, and updated can always be derived from the file timestamp.\n. ",
    "lucab": "\nWhat do you think makes sense beyond that? Providing a warning or other message about packages that do not have a version/range specified?\n\nIn the context of rkt workflow, it may make sense to have a glide switch that warns (or abort without side-effects, I'm not sure) at update time whenever a lockfile entry does not have its counterpart in manifest.\nIn my n\u00e4if view, this would cover both direct and transitive deps (but I may be missing some crucial detail here).\n. [Sorry, I thought I had already replied here since long time, but looks like my memory is faulty]\nYour ideal scenario makes sense in an environment where versioning is already properly handled. However, in the context of rkt, we have many dependencies which are not even tagged (let alone semversioned) and that's why we would need some warnings from the toolchain. But I think that once #252 is fixed, your TLDR proposal should be enough to help us in most cases.\n. Boilerplate for \"only time will tell\" :smile:\nNo, I don't have any missing case that I can think of right now.\n. For reference, the underlying repository is at github.com/go4org/go4, but you may need to clean any glide cache to get rid of mismatches.. ",
    "HeathNaylor": "Version 0.10.2\n. ",
    "tsyardley": "Can confirm I am seeing something very similar to this running glide ontop of the official go:1.7 docker container.\nWhilst doing a glide up --all-dependencies -v\n[INFO]        Resolving imports\n[ERROR]        Dependency /go/src/<package>/vendor/github.com/benschw/opin-go/vault failed to resolve: lstat /go/src/<package>/vendor/github.com/benschw/opin-go/vault: no such file or directory.\n[ERROR]        Failed to retrieve a list of dependencies: lstat /go/src/<package>/vendor/github.com/benschw/opin-go/vault: no such file or directory\n. I was able to resolve this by using the tag:v0.11.0 - seems like there is a breaking change then in latest\n. I tested just now using v0.12.0 and I still have the same issue, from the changelog seems like there should be more explicit logs but they are identical to the errors I posted above\n. Highlighted that commit: a024c97531cdc29ebedb3c263eebcf6b83595bac works without this issue, dated: 11th Aug. \nI also tested commit: 376dedc509f0b2ba3b3dcaaab158016350696fb5 dated: 11th Aug and the issue was occuring. \nSomewhere between these commits the issue was introduced, I hope this helps. \n. ",
    "hori-ryota": "@mattfarina Can I have an example if there is a useless pattern?\n. @7imon7ays ping\n. ",
    "chr0n1x": "@mattfarina not sure how as I have not looked at the code for the implementation, but this is causing some issues with my docker (~1.1x) containers/environments.\nI have a workflow where I directly mount my local repository into a golang workspace within a docker container. This is so that I can restart running programs by just doing a docker restart after changing small bits of code. So something the equivalent of:\ndocker run -ti --rm \\\n    -v $(pwd):/gopath/src/github.com/myorg/myrepo \\\n    -w /gopath/src/github.com/myorg/myrepo \\\n    golang \\\n    bash -c \"go get github.com/Masterminds/glide && glide install && bash\"\nThe issue is that glide install ends up failing with:\n[ERROR] \u00a0\u00a0\u00a0Unable to export dependencies to vendor directory: rename /tmp/glide-vendor175037764/vendor /gopath/src/github.com/myorg/myrepo/vendor: invalid cross-device link\nA temporary workaround that I've found was something like:\ndocker run -ti --rm \\\n    -v $(pwd):/mount/myrepo \\\n    -w /gopath/src/github.com/myorg/myrepo \\\n    golang \\\n    bash -c \"go get github.com/Masterminds/glide && glide install && cp -R /mount/myrepo /gopath/src/github.com/myorg && cd. && bash\"\nWhich is very sad.\nIs this a known issue? Any ideas on how to deal with this in a saner fashion? Wont fix? Or will fix? \ud83d\ude04 \n. Oh! I just saw https://github.com/Masterminds/glide/issues/554 - which I believe is the same issue. Sorry for the spam, thanks for reading :)\n. /cc @mattfarina \n. ",
    "torfuzx": "yeah.\nThis is it.\n. ",
    "dwlnetnl": "I did have a head scratcher because I assumed the example in the opening post should work but didn't. However in some cases it looks like it works, for example github.com/bradfitz/gomemcache/memcache, this is because github.com is recognised as a special case.\nBecause of that I think the example in the opening post should work in the same way.\n. Maybe it can be implemented as a command flag.\n. ",
    "pb-cdunn": "I'll tell you why I have so much trouble with the entire GoLang universe. I am building within an enterprise. For reasons beyond my control, our automated process will pull all dependencies first, and then build. There is no iteration between building and fetching. It's just 2 steps:\n1. Fetch all source code.\n2. Build (in topological order).\nThe easy solution would be relative imports, but the Go authors seem to think I'm an idiot for wanting that. So that's a non-starter.\nThe vendor/ directory can solve a lot of problems for me. But I need a way to copy things into it. I might have to do it manually. But whenever I add a new dependency, and its dependencies, and their dependencies, ad nauseum, it's a lot of work. I really need a tool which can do that for me.\nI can remove the .git directories myself. I honestly don't understand why people request such trivial features. The hard part is acquiring all the repositories recursively.\nI hope that makes sense. Any suggestions?\n. sh\n$ cd src/myproj\n$ glide --verbose get -s github.com/gyuho/graph\n[WARN]  The name listed in the config file (.) does not match the current location (src/hgapg)\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/gyuho/graph\n[INFO]  --> Gathering release information for github.com/gyuho/graph\nUsername for 'https://github.com': pb-cdunn\nPassword for 'https://pb-cdunn@github.com':\nHmmm. I didn't see that when I ran in the GOPATH directory.\n... Oh, that's just an odd failure mode. I mis-typed the repo name.\n. sh\n$ glide --verbose get -s github.com/gyuho/goraph\n[WARN]  The name listed in the config file (.) does not match the current location (src/hgapg)\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/gyuho/goraph\n[INFO]  --> Gathering release information for github.com/gyuho/goraph\n[INFO]  The package github.com/gyuho/goraph appears to have Semantic Version releases (http://semver.org).\n[INFO]  The latest release is v2.0. You are currently not using a release. Would you like\n[INFO]  to use this release? Yes (Y) or No (N)\nn\n[INFO]  --> Adding github.com/gyuho/goraph to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gyuho/goraph.\n[INFO]  Resolving imports\n[ERROR] Failed to build an initial list of packages to scan: lstat ../../hgapg: no such file or directory\n[ERROR] Failed to resolve local packages: lstat ../../hgapg: no such file or directory\nI guess I'm expected to glide add my own project first. That's annoying because I use my own revision-control system to obtain my own package.\n\nFor reasons beyond my control, our automated process will pull all dependencies first, and then build. There is no iteration between building and fetching. It's just 2 steps:\n\nI have to use something to acquire source code before anything else happens. I cannot run go get at that point because go has not yet been installed and built. Folks have decided that we must have all source code (including gcc and go) before we being to build anything, as a pre-condition for ISO Compliance for govt/medical work. It annoys me, but that's life.\nMy solution is to put all dependencies into a single repo, which I can obtain via git clone. I want to use glide to populate my vendor/ directory. Then, people can actually run go get on my own project, and I can also build it internally without using go get at all. You see, our internal build is ISO Compliant, but we also make our source code freely available for external builds.\n. I have src/hgapg/. That's my tree within GOPATH. I have no idea how to glide get that, but it's already there, so I don't need to interact with github. What should my glide.yaml look like?\n. sh\n$ cd src/hgapg\n$ glide --verbose get -s github.com/gyuho/goraph\n...\n[ERROR] Failed to build an initial list of packages to scan: lstat ../../hgapg: no such file or directory\n[ERROR] Failed to resolve local packages: lstat ../../hgapg: no such file or directory\n$ cat ../../glide.yaml\ncat: ../../glide.yaml: No such file or directory\nOh! Maybe that's the problem. My hgapg is actually a symlink, so there is no ../../glide.yaml. I'll try replacing the symlink and post again in the morning. Thanks!\n. Well, I dropped the symlink, and then glide worked like a charm. But that's very tough since I do not control how the source-code is obtained. The repo goes where it goes. I had used a symlink to create a Go workspace to build in.\nSo instead, I have moved all the Go code under a src/ directory in my repo itself. Now, the repo root-dir is on GOPATH, and I run glide from that directory. It fails this way:\nsh\nglide --verbose get -s github.com/gyuho/goraph\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/gyuho/goraph\n[INFO]  --> Gathering release information for github.com/gyuho/goraph\n[INFO]  The package github.com/gyuho/goraph appears to have Semantic Version releases (http://semver.org).\n[INFO]  The latest release is v2.0. You are currently not using a release. Would you like\n[INFO]  to use this release? Yes (Y) or No (N)\nn\n[INFO]  --> Adding github.com/gyuho/goraph to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for hgapg/foo.\n[INFO]  --> Fetching updates for github.com/gyuho/goraph.\n[WARN]  Unable to checkout hgapg/foo\n[ERROR] Update failed for hgapg/foo: Cannot detect VCS\n[ERROR] Failed to checkout packages: Cannot detect VCS\nmake: *** [glide] Error 1\nYou can repeat that yourself easily:\nsh\ngit clone git://github.com/pb-cdunn/hgapg\ncd hgapg\ngit checkout -t origin/glide\nglide init\nmake glide #which sets GOPATH for you\nIs there a way to convince glide to ignore the VCS (aside from downloading)?\n. > Neither a branch nor a tag named glide is present in github.com/pb-cdunn/hgapg (as of a couple seconds ago), so I can't replicate.\nOops. It's there now.\n\nI don't see what problem you're trying to solve.\n\nI do not control how source-code is pulled from the web. I just use it from a given directory. go install expects a particular directory structure, so I have only a few choices:\n1. Put that src/ directory structure into the repo;\n2. Symlink the repo into src/; or\n3. Copy (or clone?) the repo into a workspace after it has been downloaded.\nI guess the last one would work with glide.\n. I expect to control the VCS operations myself. I only want glide to obtain and update the dependencies.\nDon't worry. You're operating within the GoLang ecosystem. I'm not criticizing your architecture at all. I'm just trying to find something that works.\nI really like glide's support for \"locking\" versions, so I can update easily later. But if I can't use glide in my own use-case, that's ok. You've been very helpful. Thank you.\n. Thank you very much for the thoughtful response.\n. ",
    "RochesterinNYC": "Yup, I don't have a strong opinion about the prepended v or not, I was primarily looking for clarification as to what the version tags would look like going forward (my team does some auto-updating of dependencies and glide is one of them, we watch the github tags as an indicator for new releases). And it seems that they will have the v prefix going forward. Thanks for that clarification and the helpful context!\n. Gotcha, is there a way to turn off this functionality for the time being? Our use case is using glide with a vendored app in a fire-walled environment that does not allow any external connections to be made.\nThanks so much for your clarifications.\n. Ah okay, gotcha. So the internet call might be eliminated with v0.13.0? Or did you mean that the work will still be pending until after the v0.13.0 release? Thanks for the response.\nYes, the context is that we support glide in the go buildpack for Cloud Foundry. A lot of Cloud Foundry users are enterprise companies and have completely fire-walled environments. Enterprise go developers are a thing apparently! I think for the time being, we'll stick to < v0.12.0 and keep up to date with the release notes and we'll update when, in the far future, offline capabilities are supported.\n. @mattfarina Okay, maybe our understanding of how to properly use glide is mistaken. If a vendor directory with the dependencies already exists, is running glide install redundant? Should we only be running glide install on Go apps that either do not have a vendor directory or that have an empty vendor directory?\nIf this is true, is there a non-install glide command that can check if the vendor directory has all the appropriate dependencies without calling out to internet?\n. @mattfarina any advice on glide usage under these circumstances?\n. @sdboyer I think a command like that would be valuable? It feels a little like bundle check or something. It feels a little odd to make a user that wants to check if their packages are already vendored run glide install. Moreso, if their packages are already correctly vendored and they run glide install, it ends up not truly being a no-op as it will hit the internet and etc. Open to thoughts here as we're coming here from a predominantly Ruby background.\n. @sdboyer would y'all take a pull request for something like glide check that would determine if all the packages in vendor are present?\n. ",
    "bakks": "Just to confirm - I ran glide upgrade on my project using v0.11.1 and the issue appears to have been resolved. Thanks for fixing - Glide is awesome \ud83d\udc4d \n. Chiming in here because the behavior in 0.12.0 was unexpected and just bit me. I'd vote in the direction of glide leaving existing vendor/* directories intact. I have a similar protobuf use-case as mentioned above, where I'm generating Go code from a service definition, but want to keep it specific and isolated to one of my packages. Yes, I could generate the code and and put it in the top-level package tree, but what if I want separate versions in each of my packages? This is the whole point of the vendor directory, as I understand it.\nBasically - glide seems less useful if it can't live alongside other vendored code.\nAlso - at the very least I think glide should warn the user before deleting manually vendored code, this behavior was super unexpected.\nHope this is constructive, thanks for talking through this.\n. ",
    "diwakergupta": "FYI, even after I add version information to glide.yaml (copying over from glide.lock after first run), I still get the same errors. cc/ @mattfarina to your comment in another issue, this has very high WTF-factor IMO.\n. @mattfarina  I tried with and without stripping VCS metadata -- get the same warnings.\n. @mattfarina any update on this? I'd love to start using glide, but am blocked behind this.\n. ",
    "andronat": "I have the same problem. I just created a new project and I included some deps:\npackage: testtt\nimport:\n- package: github.com/spf13/pflag\n- package: k8s.io/client-go\n  version: ^2.0.0-alpha.0\n  subpackages:\n  - kubernetes\n  - pkg/api\n  - pkg/api/errors\n  - pkg/api/meta\n  - pkg/api/unversioned\n  - pkg/api/v1\n  - pkg/apis/extensions/v1beta1\n  - pkg/fields\n  - pkg/runtime\n  - pkg/runtime/serializer\n  - pkg/util/strategicpatch\n  - rest\n  - tools/clientcmd\n- package: k8s.io/kubernetes\n  version: ~1.4.x\n  subpackages:\n  - pkg/api/annotations\nAnd I have the same problem when I run glide list. I'm in Mac OS X 10.11.6 with glide version 0.12.3 from homebrew.. ",
    "anshulagl": "Same problem here!. ",
    "peterbourgon": "Really, any glide <subcommand> that interacts with the internet can make do with a --verbose.\n. Ah! Missed it. Thank you.\n. ",
    "henryaj": "This has been an issue for years - is it going to be fixed?. Fair enough!. ",
    "garethr": "@mattfarina thanks, looks like this is fixed now - at least for this release. /version is now showing 0.11.1. Feel free to close, or leave open if you want to track the underlying issue.\n. ",
    "argon": "I am seeing this same issue sporadically, I haven't be able to identify the trigger though. Strangely when I check the vendor directory the dependency is both present and set to the correct version\n. ",
    "diabloneo": "I agree with @mh-cbon. I expect glide get only add the specific package rather than update all already installed packages.\n. ",
    "ziplizard": "So what's the solution?\n. ",
    "tejasmanohar": "Actually seems unrelated to #272. I searched vendor/, and it seems there are no instances of \"google.golang.org/api\" but there are instances of \"google.golang.org/api/... (e.g. /storage/v1) maybe Glide is trying to get a top-level package that doesn't exist but other ones do in this format?\n. Nope, I don't believe so. I'll try reproducing tonight though! Using Godeps right now (ugh)\n. ",
    "7heo": "Sure. :+1: \n. ",
    "jonbo": "I ran into the exact issue myself with Gin. It appears Glide fails to retrieve dependencies of the dependency (Gin, in this case) if it wasn't already imported in your project at the time of first installing it with 'glide up'. \nA follow-up 'glide up' should fix it (now that you have it (Gin) imported now) and retrieve those missing dependencies.\n(This was my issue/solution anyway.) \n. @robvdl Do you have gin imported in your main.go? That's what fixed it for me. Then 'glide up' worked. (Note: I haven't tested any recent builds though.)\n. @franciscocpg Okay, I tried with Go 1.6.3 with no luck (built and even tried your release binary again).\n@mattfarina I use Windows 7 (sorry, I thought I posted that earlier). I mainly use MINGW64 (from https://git-for-windows.github.io/) but also tried from cmd.exe and the terminal inside IntelliJ IDEA 15.0.6. I just tried your --debug flag suggestion, and like everything else, it just hangs the process, and doesn't print nor do anything at all (on 0.11.x).\n. Wow, the good ole restart-your-computer fix. Sorry to have bothered you guys. Although it would be nice to know what the cause ultimately was. It doesn't make sense that 0.10.2 would work but not 0.11.x. I knew something was entirely wrong when my 'go run file.go' now had the exact same issue, so I restarted and that seems to have fixed everything. Anyway, again, sorry to have bothered you all.\n. ",
    "robvdl": "Ah thank you for this, so it definitely is a bug, it isn't just me :) also good there is a workaround for now.\n. Do you have to manually create the glide.lock file, because I don't seem to have this file.\nAnyway, I am on Ubuntu 14.04, Go 1.7\nWhat I did:\n- Create an empty foo package with main.go\n- glide init\n- Add the github.com/gin-gonic dependency to glide.yaml\n- glide up\nWhat I expected to see:\n- vendor directory contains gin and all it's dependencies\nWhat I actually see:\n- vendor directory only contains gin, nothing else\nI also tried a second glide up as stated by jonob but it doesn't fetch Gin's dependencies like he experienced.\n. Interestingly, typing \"glide guess\" does list the dependencies of Gin, but glide up doesn't fetch them.\nWhat am I doing wrong? I did upgrade to glide tip before testing all this.\n. @jonob yes I did, I used the main.go sample posted here\n. I found the issue, my apologies, I am closing this.\nAlthough I somehow had the source of glide 0.12.1... for some reason I still had the binary of some older \"glide dev\" version. How did it not end up compiling the glide binary? I don't know but I have a feeling it was because I used Go-Package-Store to update things.\nI noticed because my glide up output was different, even though the glide CHANGELOG.md read 0.12.1 so something was \"off\"\nI reinstalled glide using go get -u and things are working, thanks heaps, and maybe it was an issue in Go-Package-Store (which I should really stop using anyway) but it's definitely not a glide issue.\n. ",
    "whitlockjc": "What I would hope for is that the 1.3.x constraint would be honored since any 1.3.x also honors the 1.x constraint.  I'm trying to figure out how I can say \"Build against the version of Kubernetes the building project uses as long as it's 1.x\".\n. Thanks @mattfarina.  Any answer to the specific scenario above?  I think you're saying it would work as I expect but I just want to be sure.\n. Excellent.  Thanks a lot.\n. ",
    "richardartoul": "Seconded this. I have this issue everytime I try to use glide and I'm not sure whats up with it. I have a similar project structure (although I never thought it was unusual) and glide consistently fails because it tries to vendor my source code.. ",
    "Fugiman": "Sure! I made https://github.com/Fugiman/vendortest to try and make this easier to reproduce. I ran glide up -u -v -s in that repo to generate the current state, and then ran rm -rf vendor/**/.git to ensure submodules weren't committed.\nThis repo demonstrates the current behavior of \"glide up -u -v -s does not strip nested vendor directories if vendor is a symlink\", and should be able to be used to ensure the patch works on nix/windows (I only tested on mac).\n\nAs for why appending / to vendor works: Glide uses glide/path.StripVendor to remove nested vendor directories. That uses filepath.Walk to recurse through the vendor directory. filepath.Walk users os.Lstat to determine if a file is a directory, which does not resolve symlinks. As far as I can tell, what os.Lstat does varies by platform. However, for mac appending / causes os.Lstat to return a FileInfo where IsDir is true.\nI could make this behavior more explicit by manually resolving the symlink before passing it into filepath.Walk if you want?\n. @mattfarina As requested, I now explicitly detect and resolve symlinks. I made the change to Vendor(), and then modified StripVcs() and StripVendor() to use that function.\nI added another test to Vendor() to ensure the symlink behavior remains functional, and adjusted the scaffolding of the StripVcs() test to work with the format expected by Vendor().\nPlease let me know if you'd prefer to have the change in the Strip functions rather than Vendor and I'll move it. I also set it up to resolve nested symlinks, but I don't know if that is overkill or not.\n. ",
    "svarogg": "Thanks @mattfarina for your reply.\nI am afraid none of the proposed solutions were not sufficient for various reasons.\nThe solution was way simpler, however - I simply added my company's domain to the ignore block in glide.yaml, and that was the end of it.\nThanks a lot for your help nonetheless.\n. ",
    "redbaron": "@mattfarina VCS detection is PITA and breaks glide update if your own package is not hosted on github. We hit same problem and ended up adding package to ignore list and rely on accurate list of deps in glide.yaml. ",
    "jollyroger": "@mattfarina , I know that Debian does not prefer to use upstream-provided debian/ directory and will repack the original tarball and strip off this folder before putting everything into the Debian archive. According to the Debian Policy it is prefferable to have a separate repo for the purpose of packaging. \nAs for the RPM-based distros there is no such policy afaik. But since it's just a single file it's nice to have it somewhere nearby (haven't seen any packages of glide around except the Debian ones). Especially if it's so easy to build a new version with a single command. When I needed an RPM and found none I just did packaging myself, additional changes resulted in the patch I provided earlier.\nApart from the .spec-file itself, changes in the Makefile:\n- allow to package version-aware source distribution tarball (which is great for any packaging solution)\n- allow to install additional files common for packages (license, readme)\n- support PREFIX variable commonly used during packaging to put binary files into /usr instead of /usr/local\n- support to redefine VERSION, PREFIX variables for the purposes of packaging\nSo if your concern is for spec-file only and the rest seems ok to you, I can split my patch into two.\n. Friendly bump.\n. @mattfarina thanks, I'll wait for your answer. Didn't understand your concern though. Could you please put in more details? I'll gladly answer whether this solution already fits your requirements or not.\n. Friendly bump.. ",
    "leprechau": "For what it's worth I maintain an AlpineLinux package for glide that's been accepted upstream.\n. @mattfarina yes ...\nThe glide.yaml from the ena-policy application where we are running glide up\npackage: bitbucket.xxx.xxx/ws/ena-policy\nimport:\n  - package: bitbucket.xxx.xxx/go/ena-community\n    repo: ssh://git@bitbucket.xxx.xxx:7999/go/ena-community.git\n    vcs: git\n    version: master\n  - package: bitbucket.xxx.xxx/go/ena-common\n    repo: ssh://git@bitbucket.xxx.xxx:7999/go/ena-common.git\n    vcs: git\n  - package: bitbucket.xxx.xxx/go/ena-consul\n    repo: ssh://git@bitbucket.xxx.xxx:7999/go/ena-consul.git\n    vcs: git\n  - package: bitbucket.xxx.xxx/go/ena-session\n    repo: ssh://git@bitbucket.xxx.xxx:7999/go/ena-session.git\n    vcs: git\n  - package: github.com/couchbase/gocb\n  - package: github.com/Masterminds/squirrel\n  - package: github.com/klauspost/pgzip\n  - package: github.com/klauspost/cpuid\n  - package: github.com/go-sql-driver/mysql\n  - package: github.com/klauspost/compress\n  - package: github.com/jmoiron/sqlx\n  - package: github.com/renstrom/shortuuid\n  - package: github.com/emicklei/go-restful\n  - package: github.com/klauspost/crc32\n  - package: github.com/satori/go.uuid\n  - package: github.com/lann/builder\n  - package: github.com/lann/ps\n  - package: github.com/BurntSushi/toml\n  - package: gopkg.in/yaml.v2\n  - package: github.com/hashicorp/go-cleanhttp\n  - package: github.com/hashicorp/serf/coordinate\nThis is the glide.yaml from the ena-common package that is imported by ena-policy\npackage: bitbucket.xxx.xxx/go/ena-common\nimport:\n  - package: github.com/Masterminds/glide\n    version: =v0.12.1\n    subpackages:\n    - cfg\n    vcs: git\n  - package: github.com/emicklei/go-restful\n  - package: github.com/mitchellh/cli\n  - package: github.com/Sirupsen/logrus\n    version: =v0.10.0\n  - package: github.com/rifflock/lfshook\n    version: =v1.0\n. @mattfarina It took me a bit to reproduce but I have done it with another test repo set.  The issue only seems to appear when you are importing subpackages of a target repository.\nI used this repository: https://github.com/leprechau/glide-test1\nThese are the results here ...\ncharlie:glide-test1 ahurt$ glide -version\nglide version 0.11.1\ncharlie:glide-test1 ahurt$ glide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/leprechau/glide-test2.\n[INFO]  Resolving imports\n[INFO]  Fetching github.com/Masterminds/glide/cfg into /Users/ahurt/Projects/go/src/github.com/leprechau/glide-test1/vendor\n[INFO]  --> Detected semantic version. Setting version for github.com/Masterminds/glide to v0.12.1.\n[INFO]  Fetching github.com/couchbase/gocb into /Users/ahurt/Projects/go/src/github.com/leprechau/glide-test1/vendor\n[INFO]  --> Detected semantic version. Setting version for github.com/couchbase/gocb to v1.0.0.\n[INFO]  Fetching github.com/Masterminds/vcs into /Users/ahurt/Projects/go/src/github.com/leprechau/glide-test1/vendor\n[INFO]  --> Detected semantic version. Setting version for github.com/Masterminds/vcs to v1.8.0.\n[INFO]  Fetching gopkg.in/yaml.v2 into /Users/ahurt/Projects/go/src/github.com/leprechau/glide-test1/vendor\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Project relies on 5 dependencies.\ncharlie:glide-test1 ahurt$ glide -version\nglide version 0.12.1\ncharlie:glide-test1 ahurt$ glide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/leprechau/glide-test2.\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for github.com/Masterminds/glide.\n[INFO]  --> Fetching updates for github.com/couchbase/gocb.\n[INFO]  --> Fetching updates for github.com/Masterminds/vcs.\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/leprechau/glide-test2\n[INFO]  --> Exporting github.com/Masterminds/vcs\n[INFO]  --> Exporting github.com/couchbase/gocb\n[INFO]  --> Exporting github.com/Masterminds/glide\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 5 dependencies.\ncharlie:glide-test1 ahurt$\n. @mattfarina This just broke for us in the 0.12.x release cycle and worked in previous versions.   When designing applications with importable sub packages it's very handy to just have one glide.yaml in the root of the repository to manage all dependencies of the entire project.\n. @mattfarina Sorry, you're right I hadn't pushed my last example from where I had reproduced this.  The code I had locally in glide-test1 was actually importing the two sub packages.  Sorry for not pushing that last night.\ngo\nimport (\n        \"fmt\"\n        _ \"github.com/leprechau/glide-test2/bar\"\n        _ \"github.com/leprechau/glide-test2/foo\"\n)\nIt's updated in my example repository now.  Sorry for the confusion.\n. @mattfarina Thank you and thank you for your work on glide.  It's definitely improved our Go development process and become a crucial piece of our stack.\n. I'm still getting the same behavior on my test repo with the using the latest master with #603 applied.\nAarons-MacBook-Pro:glide-test1 ahurt$ rm -rf vendor/\nAarons-MacBook-Pro:glide-test1 ahurt$ /Users/ahurt/Projects/go/src/github.com/myENA/glide/glide -version\nglide version 0.12.0-dev\nAarons-MacBook-Pro:glide-test1 ahurt$ /Users/ahurt/Projects/go/src/github.com/myENA/glide/glide cc\n[INFO]  Glide cache has been cleared.\nAarons-MacBook-Pro:glide-test1 ahurt$ /Users/ahurt/Projects/go/src/github.com/myENA/glide/glide up\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching github.com/leprechau/glide-test2.\n[INFO]  Resolving imports\n[INFO]  --> Fetching github.com/Masterminds/glide.\n[INFO]  --> Fetching github.com/couchbase/gocb.\n[INFO]  --> Fetching github.com/Masterminds/vcs.\n[INFO]  --> Fetching gopkg.in/yaml.v2.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/leprechau/glide-test2\n[INFO]  --> Exporting github.com/Masterminds/glide\n[INFO]  --> Exporting github.com/couchbase/gocb\n[INFO]  --> Exporting github.com/Masterminds/vcs\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 5 dependencies.\nAarons-MacBook-Pro:glide-test1 ahurt$\n. ",
    "shilov": "Just stumbled across this, as well. Looking forward to the fix.\n. ",
    "mook-as": "I can confirm that #547 does appear to fix the issue (at least, running the test case given above no longer reproduces the problem).\n. ",
    "VladRassokhin": "Seems new functionality completely removed my 'vendor' folder onupdate because I've /tmp on tmpfs:\ntext\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: rename /tmp/glide-vendor175416651/vendor /media/data/devel/gopath/src/github.com/mkuzmin/terraform-vsphere/vendor: invalid cross-device link\n. ",
    "jbarefoot": "@sdboyer on #608 you said you would \"love to see someone put together even a slapdash approach\".  Well I have the slapdash-iest of approaches for your consideration.  :)  \nI've written a pair of complementary bash scripts to handle this via symlinks (in the attached zip).  I call it glide-link as it is similar conceptually to npm link.  It works by renaming the appropriate directories and creating a symlink as follows (leading slashes below are just to reinforce that these are directories):\n1. Rename /dependency/vendor to /dependency/vendor_glide-link_bak\n2. Rename /current_package/dependency to /current_package/dependency_glide-link_bak\n3. Sym link /current_package/dependency -> /dependency\nIt does some sanity checks on directory existence as well, and glide-unlink just reverses the above.  This is hacktastic but does what I want.  The way I use it is to drop the 2 scripts into a directory somewhere, chmod +x them both, then add to your PATH.  \nDo you see a way this would break?\nglide-link.zip\n. Thanks for testing it out @revett.  No, I don't have them in github anywhere yet--I was waiting for opinions on whether this should just be part of the glide CLI.  If that seems best to other folks, I can re-write these in Go as glide commands.  On the other hand, if folks just want the scripts in their own repo for now for collaborative improvement, I'm fine with that too.  @mattfarina what would you advise here?. ",
    "revett": "@jbarefoot works a treat \ud83c\udf89\nHave you got these in Github? I would like to share them with the team & in a blog post.\n. We've been using @jbarefoot's solution at Vidsy this year.\nRepo: https://github.com/revett/glide-link. ",
    "eriknelson": "Is this officially on the roadmap? npm-link style functionality would be great. Doesn't have to work the same, but I'm thinking specifically about a simple workflow with a bin importing a separate lib project, and I'm actively working on both (as described in the golang wiki). Is there a recommended way to do this with glide today, or is this multi-repo setup at odds?\nIn the meantime, @jbarefoot's scripts are working well for me. Thanks!. ",
    "fewspider": "my solution tool.sh\n```sh\n!/bin/bash\nfor folder in $(pwd)/vendor/*; do\n    temp_package=basename $folder\n    echo $temp_package\n        ln -sf $(pwd)/vendor/$temp_package $(pwd)/src/$temp_package\ndone\n```\n\n. same here. glide get -v github.com/go-yaml/yaml/tree/v2 woking. ",
    "fermin-silva": "Since I do not want to mess around with symlinks, my manual approach so far is to delete the dependency from the vendor directory altogether.\nIf it's not found in the vendor dir, go build looks for dependencies in the $GOPATH, where all my projects lie, and thus finds my still-not-pushed shared dependency which I can edit on the fly.\nOf course every time I do glide up or glide install, glide puts my shared dependency back into the vendor folder, but I delete it again manually. ",
    "eriklincoln": "Works for me with installing it with:\nyaml\n      - go get github.com/Masterminds/glide\n      - cd $GOPATH/src/github.com/Masterminds/glide\n      - git checkout fix/553\n      - git pull origin fix/553\n      - go install github.com/Masterminds/glide\n      - cd $DRONE_DIR\n      - install deps, build, etc.\n. ",
    "xh3b4sd": "I was just hit by this and would like to see some progress here as well. . Thanks for your feedback. . ",
    "stevenroose": "I think the best solution is to don't have a version constraint on your test dependencies.. I have the same issue. I track a package as a fork I made and when I push updates to the fork, glide update does not make the lock file update to the latest version of the fork. Also worked after cleaning the cache.\n. I think the ~~best solution~~ easiest workaround is to don't have a version constraint on your test dependencies.. @arekkas well, \"best solution\" might have been a bad expression of what I meant. Let me rephrase to \"easiest workaround\".. Wouldn't this be as easy as pointing the cache temporarily to somewhere in\n/tmp and clean it up afterwards?\nOn 29 Nov 2016 18:49, \"sam boyer\" notifications@github.com wrote:\n\nthis would be a lot of work.\n\"cache\" isn't really the best word to describe the behavior of that\nsubsystem, but it's close enough and it's in the right ballpark, so we use\nit. in fact, it's more like a scratch/workspace for the tool. it's not a\nsimple matter to bypass.\n...which isn't a \"no\" to this, or saying this is impossible. just, please\ndon't think it's as easy as bypassing a cache might be in other\ncircumstances \ud83d\ude38\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/692#issuecomment-263644704,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA0F3MjnAMaI1Gbj-dez40vCQtx_5PSmks5rDGWygaJpZM4K_FaP\n.\n. @sdboyer well, in fact the main usage of a --no-cache option is to not have to run glide cc afterwards :p\n\nSo consider this no longer a concrete request, just the believe that it should be possible to use Glide without leaving traces.. Yeah in docker containers you want to minimize the FS. That's why you also\nremove your package dependencies after installs and use Alpine instead of\nUbuntu images. But it's nowhere near to important. I just thought it would\nbe a useful feature. Maybe an --clear-cache that clears the cache after\nthe install should even be all-right. In all honesty it's not more than not\nwanting to do glide cc afterwards :)\nOn Wed, Nov 30, 2016 at 5:08 PM, sam boyer notifications@github.com wrote:\n\nAhhhh ok, i was imagining the goal to be that it not use the\nintermediary scratch space at all. If it's sufficient to just clean up the\nspace it uses when it's done, then that's very different.\nstill, idk about an option for it (@mattfarina\nhttps://github.com/mattfarina thoughts?), but hey, at least i\nunderstand the goal.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/692#issuecomment-263914437,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA0F3OQeOeewDCO1TfP94NzavWlBtRL6ks5rDZ9_gaJpZM4K_FaP\n.\n. I think the best solution is to don't have a version constraint on your test dependencies.. It's weird, I now also get an error like that even when I don't have a version constraint on one of the dependencies.. \n",
    "clee": "@stevenroose I don't think that \"solution\" works for some of us. For example, I have a testImport for github.com/stretchr/testify with no version specified at all, but because one of my other imports already imports stretch/testify (via Godep, and with a hardcoded revision number, thanks Godep), I get this error message from glide:\n[ERROR] Failed to generate lock file: Generating lock produced conflicting versions of github.com/stretchr/testify. import (089c7181b8c728499929ff09b62d3fdd8df8adff), testImport ().\n",
    "jiangytcn": "same issue  and no version specified at all \ntestImport:\n- package: github.com/onsi/ginkgo\n- package: github.com/onsi/gomega\n  subpackages:\n  - gbytes\n  - gexec\n- package: gopkg.in/DATA-DOG/go-sqlmock.v1\nFailed to generate lock file: Generating lock produced conflicting versions of github.com/onsi/ginkgo. import (43e2af1f01ace55adbb6d7d0f30416476db1baae), testImport (). ",
    "testhmaa": "btw, if this is of any help, my go workspace $GOPATH is outside of home dir\n. ",
    "tommiv": "Oh wow. Thank you, it works now.\n. ",
    "ryanfowler": "go env:\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/ryanfowler/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.7/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/k6/mfkbnsjj1y1cqm83ypfncbtr0000gp/T/go-build615749329=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. From https://golang.org/pkg/go/build/:\n\nThe Go path is a list of directory trees containing Go source code. It is consulted to resolve imports that cannot be found in the standard Go tree.\n. @mattfarina thanks for looking at this!\n\nI'm quite sure that the GOROOT is checked before GOPATH using go build, go install, and go run. Even though I have a \"testing\" directory in my GOPATH, it appears that it always grabs the testing package from GOROOT. I think glide should match.\nRuss Cox from a thread on the golang-nuts forum:\n\nYes, it's true that we prioritize GOROOT over GOPATH.\n\nhttps://groups.google.com/forum/#!topic/golang-nuts/1CFLw7-m0Q8\n. ",
    "YueHonghui": "I have encountered the same problem. \nglide version:\nglide version v0.12.3\ngo env:\nGOARCH=\"amd64\"\nGOBIN=\"/home/darkofday/.local/go1.7.1/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/darkofday/.local/gopkg:/home/darkofday/program/goprj\"\nGORACE=\"\"\nGOROOT=\"/home/darkofday/.local/go1.7.1\"\nGOTOOLDIR=\"/home/darkofday/.local/go1.7.1/pkg/tool/linux_amd64\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build396867875=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nglide.yaml after glide init:\n...\n- package: gopkg.in/validator.v2\ntestImport:\n- package: testing\nglide install\n...\n[INFO]  --> Fetching testing.\n[WARN]  Unable to checkout testing\n[ERROR] Update failed for testing: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\n. update the PR with global option go-get-timeout. I think the solution is much more complicated than initially thought. http-timeout is not the suitable name. If we use the name http-timeout, that seems to set timeout for all http request in glide. It is difficult to select such timeout value for different size of response body. Maybe we should provide a timeout option for all http request just include time connecting and sending request, or just provide different options for every use case such as go-get-timeout. Any suggestions?. ",
    "scofieldpeng": "yeah,i face the same problem too...\nglide version:\nglide version 0.13.0-dev\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/scofield/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/1x/2v7wmyvx24178f1kc_y3br2h0000gp/T/go-build274938095=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nerror information:\n[INFO]  --> Fetching testing.\n[WARN]  Unable to checkout testing\n[ERROR] Error looking for testing: Cannot detect VCS\n[ERROR] Failed to retrieve a list of test dependencies: Error resolving imports. I solve this problem by find the testing dir on my $GOPATH, and the testing is a just a dir not a package, then I rename the dir, everything is fine :-). ",
    "erwanlbp": "I encountered the problem and finally solved it.\nIt shouldn't fetch the testing package cause it's not a dependency so it shouldn't be in the vendor, but for some reason glide thought it was a dependency.\nAfter cleaning my $GOPATH/src/ folder and re-initializing with glide init, the glide.yaml doesn't contain the - package: testing \nAnd finally the glide up worked fine :+1: . ",
    "prudyvusandriana": "another way: you can change your glide.yaml , add a line before \"import\"\n------ ignore:----------\n------  -testing --------\n. ",
    "baorv": "@scofieldpeng That's right.. ",
    "kujenga": "I'm seeing this same issue with updating dependencies with glide up for an internal repository where I work. When running glide up it fails when trying to find one of it's own packages within the cache directory, e.g. updating deps from within github.com/kujenga/myrepo would result in the message:\n[ERROR] Error scanning github.com/kujenga/myrepo/mypkg: open /Users/ataylor/.glide/cache/src/https-github.com-kujenga-myrepo/mypkg: no such file or directory\nWhen I looked in the ~/.glide folder on my local machine, the repository in question wasn't there at all.\n. I'm on Mac OS X 10.11.6\nI just found that I was able to resolve the issue by running glide install for another repository that used the first one as a dependency. That would fill the cache in ~/.glide and this avoid the error. Functional as a workaround, but definitely seems like there's an underlying bug here that can be fixed.\n. I'm seeing some additional strange behavior that seems related to this. Here are the steps I'm going through.\nLet's say I'm in repo github.com/kujenga/foo, and one of foo's dependencies is github.com/kujenga/bar. Additionally, bar imports the package github.com/kujenga/foo/baz from the current repository, so there is a dependency cycle between the repositories themselves (but not the packages within them).\nRun from within github.com/kujenga/foo:\n- run rm -rf glide.lock vendor/ to have a fresh start\n- run glide up\n- The glide.lock file that was created lists the package github.com/kujenga/foo (referencing itself) with baz as a subpackage. Additionally, github.com/kujenga/foo is present in the vendor/ folder. This causes go install -v $(glide nv) to fail with error messages of the following form, related to the use of \"internal\" packages. I'm assuming this is because the code in the repository itself is trying to compile against the packages within vendor/\npackage github.com/kujenga/foo/app\n    imports github.com/kujenga/foo/internal/db: use of internal package not allowed\nFrom this point, there are two options I tried. The first was just running glide up again. This resulted in all the packages within github.com/kujenga/foo, the current repository, being added to the glide.lock file. The current foo package was still in the vendor/ directory, and it still wouldn't compile because of the internal options.\nThe next thing I tried, which got me up and running, was directly after the initial glide up, running rm -rf vendor/, followed by glide install. The install command does not put the duplicate github.com/kujenga/foo package within vendor/ this time, and the compilation succeeds.\n. Thanks @mattfarina for the response! I'm seeing the same behavior that @jrick just posted after following those steps. My feeling is that there isn't any corruption of elements in the cache here, the actual error thats printed is a result of not handling the case where an element in the cache is totally missing, when it's looking for something from the current repo in the cache. Still, I think this is the manifestation of the problem rather than the root of it.\nIn the example posted by @jrick above, do you have a sense of why it's even looking in the cache for packages that are within the current repo? Shouldn't it just let the local ones be used? My impression was that this is occurring when a dependency of the current repo depends on the current repo, something like A -> B -> A. In my mind, the expected behavior would be for the current repository to never be vendored within itself.\n. This fixes the issue with being unable to update for me as well \ud83d\udc4d \nI'm also still seeing the package appearing within both my vendor/ directory and the glide.yaml file though after running glide up.\n. Works perfectly, thanks so much for the quick turnaround!\n. @Cedric-Venet If you aren't already aware of this change, there was a post documenting the switch from google.golang.org/cloud to cloud.google.com/go here: https://groups.google.com/forum/#!topic/google-api-go-announce/nXY-DYZGqz8\nThe legacy endpoints at google.golang.org/cloud were removed on the 12th (4 days ago) according to that post. Most likely, this isn't an issue with glide and you just need to update the references in your code.\n. Yeah, it definitely seemed like it could have been communicated better, I didn't see it referenced anywhere other than that one mailing list post....\n. @seh Just as a data point for you, none of our codebases specify the repo or vcs keys. I'm not super familiar with the way the redirects all work and you may have already tried this, but perhaps if you just take both those out it works fine? e.g.\nyaml\n- package: cloud.google.com/go\n  version: 9c1098a4debc9bf1073ed0e4872b12bd916243d8\n  subpackages:\n  - compute/metadata\n  - internal\n. Happy to help!\n. ",
    "mischief": "running into this too. i'm baffled why glide thinks that it needs to put the package itself into glide.lock.....\n. ",
    "stayfoo": "glide install\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/go-sql-driver/mysql\n[INFO]  --> Fetching updates for github.com/astaxie/beego\n[INFO]  --> Fetching updates for github.com/aliyun/aliyun-oss-go-sdk\n[INFO]  --> Fetching updates for github.com/smartystreets/goconvey\n[INFO]  --> Detected semantic version. Setting version for github.com/aliyun/aliyun-oss-go-sdk to 1.9.2\n[INFO]  --> Detected semantic version. Setting version for github.com/smartystreets/goconvey to 1.6.3\n[INFO]  --> Detected semantic version. Setting version for github.com/astaxie/beego to v1.11.1\n[INFO]  --> Detected semantic version. Setting version for github.com/go-sql-driver/mysql to v1.4.1\n[INFO]  Resolving imports\n[INFO]  --> Fetching golang.org/x/crypto/acme/autocert\n[WARN]  Unable to checkout golang.org/x/crypto/acme/autocert\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2\n[INFO]  --> Fetching google.golang.org/appengine/cloudsql\n[WARN]  Unable to checkout google.golang.org/appengine/cloudsql\n[ERROR] Error looking for google.golang.org/appengine/cloudsql: Cannot detect VCS\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports. ",
    "nxvl": "Was going to report the same issue. I use the vendored packages for:\n- packages that need manual building (bindata packages)\n- private repos (cause heroku doesn't handle them correctly)\n  since 0.12 my build has got broken.\n. @mattfarina \n- Yes, i indeed do and that works great when i build my package in circleci, but, when deploying to heroku, since they do not have deploy keys (unless i go to overhead of adding an extra buildpack and configure it) my private repos can't be fetched.\n- What i'm vendoring is https://github.com/goadapp/goad they require make binutils to be run to create the infrastructure/bindata.go file. If that file is not created the build will fail since Asset is not declared. So i manually vendor it to remove that file from gitignore and check it into my repo. \n. Yup, and reported an issue letting them know that too: https://github.com/goadapp/goad/issues/32\n. @sdboyer if i cd vendor/.../goad && make binutils go complains because it's not on the gopath and some dependencies are missing. But if i do go get github..../goad && cd .../goad && make binutils works (which is what i do and then copy the missing file.)\n. ",
    "mandarjog": "Here is the scenario.\nI have several deeply nested protobuf definitions. I can generate golang code from that. The generated code uses non absolute imports from within the protobuf tree. \nI can periodically generate and checkin the generated code as a vendored package.\nI can keep metadata associate with it out of band.\nIs there a better way to do it?\nRegards, \nSent from my Ericsson Blaze\nMandar U Jog\n\nOn Aug 24, 2016, at 12:18 PM, Matt Farina notifications@github.com wrote:\nFirst, let me cc @sdboyer as he needs to be in the loop.\nGlide's intent was to manage your vendor folder. We'd not considered having manually vendored packages alongside Glide managed ones. Manually vendoring means nothing has the true recorded state of the things (which is what a lockfile, like glide.lock).\nFeedback, discussion, and suggestions are very welcome. I'm pragmatic.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "yaa110": "I started a project with Glide, then created some local packages inside vendor folder (which makes it possible to change the path of project without worrying about GOPATH), I wrote some codes, before staging them, I ran glide install ... oops! ... my code has gone.  I marked those local packages as ignore in the manifest file, but it seems glide does not respect to its features. So, I decided to write my own package manager which respects to my manual changes: https://github.com/yaa110/rubigo. ",
    "kofalt": "For what it's worth, I found this regarding the error: https://msdn.microsoft.com/en-us/library/ms837428.aspx\nIf I'm reading this right, the core issue is that rename can't cross disk boundaries, so maybe use a move command instead?\n. Also ref https://github.com/golang/go/issues/13766\n. For the time being, you can probably grab from\nhttps://raw.githubusercontent.com/Masterminds/glide.sh/master/get\nInstead of \nhttps://glide.sh/get\nThis is not legal advice, not tested on animals, some assembly required, etc.. I'm running into this a lot with docker and docker-ish imports.\nIt would be nice to have a flag that lets me update all my other, healthy deps, and ignore the one with a problem. Right now, it's a bit of a pain to check for updates for everything else.. ",
    "LukeHowellDev": "I guess one possible solution is if there is a broken package after an update the broken package could be then version?  Open to suggestions or solutions.\n. ",
    "bweston92": "If you make use of it directly then yes that way is the package gets rid of it then you still have it.\n. ",
    "ApsOps": "Does this also fix #525 ?\n. ",
    "imiskolee": "@mattfarina thxs.\n. ",
    "a13xb": "\nIs that not happening for you?\n\nWhen I run glide update, yes, it pulls the latest from the upstream VCS into cache, but the versions in the vendor/ workspace are not updated.\nLet me clarify again: my glide.yaml is a plain list of dependencies, none of them specify a branch, a tag, a commit, or range of versions, none whatsoever. My expectation was that this will result in glide update always updating the glide.lock to the HEAD of master.\nThis doesn't seem to be happening. After the update of local cache, my glide.lock does not change, even though there are new commits in some upstream repos.\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Versions did not change. Skipping glide.lock update.\n\nThere was never the intent for someone to manually checkout a version inside the repo within the vendor/ folder. Glide tells the VCS (such as Git) to go out to the source and fetch updates.\n\nYes, that was my misguided attempt to get a pinned version of a package updated in glide.lock because glide update would not do it otherwise.\n. OSX: 10.11.6\nGlide: 0.12.0 (via Homebrew)\nGo: 1.7\nGo environment:\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/alex/workspace/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.7/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/73/jds74fnd03q8qkfyx_8zx8400000gn/T/go-build423096790=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nSample project:\nglide.yaml\npackage: github.com/a13xb/glidetest\nimport:\n- package: github.com/gorilla/mux\nglide.lock\nhash: be6ffa009beb31b542f3a93c368fa8213aaf2fed7fc7e10914021349fe65ce9f\nupdated: 2016-08-31T23:38:13.074624366+10:00\nimports:\n- name: github.com/gorilla/mux\n  version: 9fa818a44c2bf1396a17f9d5a3c0f6dd39d2ff8e\ntestImports: []\nCommit 9fa818a in the lock file is from June, actual HEAD of master is 0b13a92.\nRunning glide update:\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/gorilla/mux.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/gorilla/mux\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 1 dependencies.\n. I've added this sample Go file and it adds the transitive dependency, so it completes the example, but the problem is still there.\nI think it has something to do with cache.\nHow to replicate:\n1. Starting with the empty cache, do a glide update, the dependencies are properly updated, git repos in cache end up checked out at master.\n2. Discard changes to glide.lock file.\n3. Do a glide install, old versions from lock file get installed, cache repos are checked out at the versions in the lock file (detached HEAD). \n4. Do a glide update, update won't happen and the cache stays pointing at the commit in the lock file.\n5. Remove the cache, glide update will update correctly.\n. OK, two different issues here. (I should have probably created a separate issue for the second one.)\n1. Is it fair to say that glide rm should not remove all unrelated transitive dependencies from the lock file, and what it's doing now is not expected behaviour?\n2. Regarding the second part about manually editing the glide.yaml, what I mean is, I want to edit the file and update the lock file but without touching the pinned versions already in the lock file. That is, I don't actually want to update any packages, just sync yaml and lock files. Incidentally, glide update works the way I want by coincidence right now (because of the bug in #592), it'd be great to be able to rewrite the lock file without relying on this bug being there.\n. I've made an example project for the rm issue (0.12.2).\nWhen running\nglide rm github.com/gorilla/mux\nBoth glide.lock and glide.yaml will be empty.\n. Update: actually I've had a typo in glide.yaml file. With a fixed version, it behaves as described in the original issue:\n1. github.com/gorilla/mux with its dependencies is removed,\n2. but so are all the dependencies of github.com/influxdata/influxdb, which was not being removed.\n. > What are you imagining would be synced between the manifest and lock file, if not the pinned versions? Just the hash digest?\nMainly addition and removal of packages. For example:\n1. I removed a package from glide.yaml manually, or removed references to some packages from my code and want to prune the lock file (remove all unused packages and all their dependencies).\n2. I added a package to glide.yaml manually, or started using a non-vendored version, and now want it reflected in the lock file.\nIn either case, there is a loss of sync between the set of packages in glide.yaml and glide.lock. I want to sync the changes (so they contain the same set of packages) but without updating the pins of the packages that are not touched.\n. ",
    "karamani": "+1 \nI had the same problem.\n. ",
    "oschwald": "I had a similar issue. Removing the cache fixed it for me.\n. ",
    "vuleetu": "Same here. Seems like Glide does not switch to the latest version before export to vendor.\n. ",
    "LiamHaworth": ":+1: This also seems to affect me.\nGo Version: go version go1.6.2 linux/amd64\nGlide Version: glide version v0.12.3\nGo Environment:\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/liam/.golib\"\nGORACE=\"\"\nGOROOT=\"/usr/lib/go-1.6\"\nGOTOOLDIR=\"/usr/lib/go-1.6/pkg/tool/linux_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\n. ",
    "jmazzitelli": "I confirm this is happening to me too. I was wondering if I was doing something wrong, until I read this issue :) I even removed the entry of my dep from the glide.lock file (my dep is on github), ran update again, saw that the .lock file put the dep back, but vendor/ is still the old version and the entry in the .lock file is still the old hash. I want to pull the lastest from master branch, but it isn't setting my dep to the latest hash - the lock file is showing the git hash from the first time I pulled the dep via glide. Workaround: \"rm -rf ~/.glide/cache/src/my-dep-directory\" then run glide update. \n. @sdboyer the answer for me is \"no\" - in fact, I didn't even know this cache existed let alone where it was until I researched this issue and found someone said \"clear you cache\" and I had to go hunt for what this cache even was :) \n. @sdboyer \n\nif anyone is able to create some exact steps to reproduce,\nit would be tremendously helpful in solving this problem.\n\nI just ran through a set of replication steps for you to try. \nFYI, my versions are as follows:\n$ glide -v ; git version ; go version\nglide version v0.12.3\ngit version 2.5.5\ngo version go1.7.1 linux/amd64\n1: Clone this repo and make it your GOPATH: https://github.com/hawkular/hawkular-openshift-agent\n2: Make sure glide is in your path obviously (to do this, I run \"make install_glide\" from the root GOPATH directory - there is a Makefile in there - and glide goes in my GOPATH/bin that I then run)\n3: cd src/github.com/hawkular/hawkular-openshift-agent/   (you will find the glide yaml and lock files here)\n4: Run \"glide update\" - notice this:\n--> Fetching github.com/hawkular/hawkular-client-go.\n5: See that you have the latest code for that dependency (hawkular-client-go) in vendor directory by grepping for \"Username\" - this was a new field added in the latest PR merge and is now in the HEAD of master branch:\n$ grep Username vendor/github.com/hawkular/hawkular-client-go/metrics/types.go \n    Username    string\n6: edit the glide.yaml and add a \"ref\" so that dependency gets locked on a new hash (this hash is the one before the latest PR merge and did NOT have that \"Username string\" field) - so add the two lines \"vcs\" and \"ref\" below under the hawkular-client-go package dependency:\n- package: github.com/hawkular/hawkular-client-go\n  vcs: git\n  ref: d3a0e3ccb068e354fc61c5811a24414792e6159b\n7: Run \"glide update\" - notice this:\n--> Setting version for github.com/hawkular/hawkular-client-go to d3a0e3ccb068e354fc61c5811a24414792e6159b.\n8: Run the grep again, and notice the Username is missing (this is correct, it means glide updated the dependency source under vendor properly)\n$ grep Username vendor/github.com/hawkular/hawkular-client-go/metrics/types.go \n(...no output here - which is what you want...)\n9: Now go back to glide.yaml, remove that \"vcs\" and \"ref\" that you added in step 6 thus bringing back your dependency to the master head.\n10: Run \"glide update\" - notice this:\n--> Fetching github.com/hawkular/hawkular-client-go.\n11: Now, you are back to where we were (or we should be) - the latest code of master HEAD that has the new Username field in the dependency code. But run that grep command and see that it is missing under vendor directory:\n$ grep Username vendor/github.com/hawkular/hawkular-client-go/metrics/types.go \n(...no output here - which is NOT what you want... we should be back on master and this Username field should exist)\n12: To confirm the cache is now bad, go to it and look at what is checked out of git:\n$ cd ~/.glide/cache/src/https-github.com-hawkular-hawkular-client-go\n$ git rev-parse HEAD\nd3a0e3ccb068e354fc61c5811a24414792e6159b\nThat is NOT the git hash of the latest master. That's the git hash we put in in step 6. But we want master, which currently is:\n$ git rev-parse origin/master\n4f5da7e951592445b686f95a0acdb0f860095d70\nSo when I removed the ref: from the yaml file and I \"glide update\", it never pulled the HEAD from master - the cache stayed on the old hash that I pulled before and thus my vendor/ never updated.\nHope this helps.\n. @sdboyer - any word on this? Did my replication procedures yield any clues as to the problem and potential fix?\n. @sdboyer  those replicate steps might be slightly different - I just committed a change to that repo that changes the project structure to be more like a \"normal\" golang project. Just follow the README.adoc to install it (it should now be more as you would expect anyway). Its not really different, I just move the src/ files up to the top directory rather than committing the files under the src/github.com.... directory structure.\n. > Also, just a note for the future - the cache having a particular version checked out in\n\nthe working directory isn't necessarily an indication that it's \"bad\"\n\nThis is why I have step 11 in my replication procedure. I actually do look in /vendor to see that the code is \"bad\" there.\n. @sdboyer  I just tried it using your PR branch and it still failed. But maybe I'm not doing it right. What do you mean \"you have to specify the branch you want to follow in glide.yaml\". I was using:\nvcs: git\nref: d3a0e3ccb068e354fc61c5811a24414792e6159b\nSo I'm giving a hash reference, not an actual branch name. Is that not correct anymore?\nAnd what about tags? Can you use tag names rather than branch names?. OK, I got it to work. The missing link is that YOU MUST specify \"ref: master\" when switching back.\nIf you just delete the ref: line, it will not work. \nI tried with both version: and ref: and it all works but, again, it only worked IF YOU SPECIFY the master branch when you go back.\nSo these worked:\nThis was the commit that has the missing \"Username\" (see my replication procedures for what I mean about the \"Username\" field):\nversion: d3a0e3ccb068e354fc61c5811a24414792e6159b\nor\nref: d3a0e3ccb068e354fc61c5811a24414792e6159b\nMaster has \"Username\":\nversion: master\nor\nref: master\n. @cep21  it is the default, the problem comes when you switch to another branch, and then want to go back to master (as you do when you are working in development and you want to pick up a bug fix in some package that hasn't been merged to master yet, then when it is fixed in master, you want to go back to master).. See my replication procedures above for what steps cause the problem.. Add me to the list of hitting this problem as well. I see a few suggestions in here, but is there a recommended workaround we can use today?\n. Ok. Thanks @franciscocpg  - I tweaked that a bit so I didn't hardcode to a fixed version of Glide or to the OS/Arch. This is what I have in my .travis.yml and it seems to work\nbefore_install:\n  - GLIDE_OS_ARCH=`go env GOHOSTOS`-`go env GOHOSTARCH`\n  - GLIDE_TAG=$(curl -s https://glide.sh/version)\n  - GLIDE_LATEST_RELEASE_URL=\"https://github.com/Masterminds/glide/releases/download/${GLIDE_TAG}/glide-${GLIDE_TAG}-${GLIDE_OS_ARCH}.tar.gz\"\n  - wget ${GLIDE_LATEST_RELEASE_URL} -O /tmp/glide.tar.gz\n  - mkdir /tmp/glide\n  - tar --directory=/tmp/glide -xvf /tmp/glide.tar.gz\n  - export PATH=$PATH:/tmp/glide/${GLIDE_OS_ARCH}\n. @sdboyer I'm +1 on merging this. In the documentation you should mention that you must specify a \"version\" or \"ref\" field if going back and forth between branches, tags, commit hashes. See my comment in the issue #592 but I think you know what I mean :). ",
    "metral": "@sdboyer Are there any updates to this issue that you can shine a light on? Thanks!. To provide a bit more insight into my experience:\nI'm hitting this issue in v0.12.3, so I don't even have an alternate branch in my package to switch to that could be causing the issue. Running glide up -v with packages that are set to pull master as the version are reverting back to the older versions stored in the glide cache. It isn't until I clear the cache that the latest commits are able to be acknowledged.\nCase in point: I have a package foobar with commits A, B, C, D, where D is the most current commit in master and what glide previously set as the version the last time I updated - so far so good as this is what it should be set to. Some time later, I decide to run glide up -v again to update other packages, and is when I noticed that foobar's latest commit D reverted back to the older commit A for no good reason. Clearing the cache and rerunning glide was the only solution to update the rest of my packages without it affecting foobar as I've just described. This does not happen all of the time but rather seems to be some sort of flake.\nI've had to resort to clearing the cache before I run any update to reliably keep my packages up-to-date.. Fwiw I worked around this issue by reverting back to v0.11.1 https://github.com/Masterminds/glide/releases/tag/v0.11.1. ",
    "XANi": "got same issue. In my case setting version of package to origin/master was enough to \"fix\" it, but it was really confusing to debug it.\nAlso for some insane reason it puts cached deps that I commented out of glide.yaml and removed glide.lock into vendor dir.  Deps are in imports but I commented it out because I wanted to use GOPATH version of them.\nAside of that, if force push was applied to upstream repo, glide cache goes to hell... looks like it did pull then got into merge, instead of doing git fetch and then git checkout on required object (probably because I told it to get master)\n. change version to origin/master and do glide update. @jmcfarlane I had to use origin/master to actually force it to update on glide update. Leaving it on master made it update once to latest (when cache was empty) and then never do it again. ",
    "calvn": "I also encountered the same issue, and glide cc to clear the cache seemed to have resolved it. It seems that if the repository is cached, glide up won't update from remote, even if there is a newer commit.. ",
    "raven-chen": "Have the same issue too. It takes me hours to figure out why my fix in other packages not work. just because it was not updated by glide... Although glide cc && glide up fixed it, still not a good experience.. ",
    "tabacco": "As a new user to glide, I was very confused by this until I found this issue and tried a glide cc. So, I guess that's a +1 from me as well.. I just got burned by this too, also with gopkg.in - Maybe they made some sort of change in the last few days?. ",
    "stevenh": "glide cc didn't fix it here I still have loads of changes in glide.lock which are not present in glide.yaml as a new user I may be missing something?. In addition to the unwanted top level package files it also includes all the dependencies of said, resulting in many unneeded vendored packages.. ",
    "Tri125": "New user to glide and same issue. glide cc didn't help.. ",
    "sjmc7": "I also see this with glide v0.13; i've been in the habit of manually deleting the cached checkout of a dependency before updating.. ",
    "jmcfarlane": "The behavior suggests that glide is using the latest tag if no version is specified in glide.yaml. My observation is that most folks either want a tag or a branch (likely master) specified as the version. If this observation happens to be true, I personally recommend glide use master as the version when it's not specified, versus the latest tag.\nBut to be clear, I might be completely confused here :). ",
    "G-Harmon": "I think I hit this as well.\nglide update; go build ./... ==> build failed because k8s.io/api was not update\nrm -rf ~/.glide/cache/; glide update; go build ./... ==> build succeeded. Hi @mattfarina, are you asking for debug output on the faulty update or the successful one? I assume the faulty one, but I'm not quite sure what it takes to get into that state. I normally only run glide update once in awhile.. Hey @wellsjo, I haven't had a time to repro and provide debug data. Can you?. ",
    "jaekwon": "If a glide dependency ever gets --force updated, VcsVersion() will silently fail upon Update() and UpdateVersion(ver) which merges anything that already exists for that local branch.  Update() definitely shouldn't call git pull, and UpdateVersion() should probably do more than just git checkout.  This causes the dependency to get pinned to the wrong version, after an unwanted merge.  (assuming that glide.yaml has a dependency set to a branch).\nSee https://github.com/Masterminds/glide/pull/961. ",
    "wellsjo": "Any updates here? This is still an issue.... @G-Harmon I'll see if I can find time in the next couple days to reproduce this in a digestible way. \nI'm baffled though, this is a glaringly obvious issue that many people are facing, and it breaks one of the most important features of a dependency management system. Many projects' dependencies rely on the master branch...and they don't update. This has been an open issue since August 2016, which makes me inclined to drop glide. It's somewhat reassuring that GCP is using it, but this is clearly buggy/unfinished software.. @JelteF dep didn't work for me right out of the box because of this. It just hangs without any output on dep init.... ",
    "JelteF": "If possible I would definitely try switching to dep:\nhttps://github.com/golang/dep/\nIt's the \"official\" dependency tool and has much less of these bug bugs in\nmy opinion. The glide README also recommends it actually.\nOn Thu, Feb 1, 2018, 03:24 Wells Johnston notifications@github.com wrote:\n\n@G-Harmon https://github.com/g-harmon I'll see if I can find time in\nthe next couple days to reproduce this in a digestible way.\nI'm baffled though, this is a glaringly obvious issue that many people are\nfacing (and easily reproduced), and it breaks one of the most important\nfeatures of a dependency management system. Many projects dependencies rely\non the master branch...and they don't update. This has been an open issue\nsince August 2016, which makes me inclined to drop glide. It's somewhat\nreassuring that GCP is using it, but this is clearly buggy/unfinished\nsoftware.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/592#issuecomment-362137821,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABG8JkXUD0dXGVT0Y2t06UQb2dvq7DD-ks5tQSBogaJpZM4JxUEK\n.\n. Virtualgo (or vg) is indeed built to solve this issue (as well as some others). It also works with glide, although the integration is not as good as with dep. This workflow should work fine however. If you want to try it out I recommend you use the branch from this pull request though: https://github.com/GetStream/vg/pull/8\n\nThat pull request makes the multi project flow much nicer to work with. It should be merged in and finalised somewhere next week. Also read the README from the pull request btw if you plan to use it, it's much better than the current one and includes the changes from the PR. \nAny suggestions or remarks on the project are welcome btw. . ",
    "gonber": "I've updated from go1.2 to go1.7 and now this\n```\nglide install\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/urfave/cli.\n[INFO]  --> Fetching updates for github.com/aws/aws-sdk-go.\n[INFO]  --> Detected semantic version. Setting version for github.com/urfave/cli to v1.18.1.\n[INFO]  --> Detected semantic version. Setting version for github.com/aws/aws-sdk-go to v1.4.6.\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for github.com/go-ini/ini.\n[INFO]  --> Fetching updates for github.com/jmespath/go-jmespath.\n```\ngets stuck and does not progress\n. Hi @mattfarina. Thanks for your comment. Actually turning on --debug allowed me to see that glide was actually working hard to get all the dependencies and progressing. It works!\n. ",
    "tomasky": "ok ,i known that , it build with make ,and not go\n. ",
    "novas0x2a": "Neither of these two above yaml files produce an error for me with the current release of glide (0.12.3); however, I ran into a very similar problem. I'm not sure if this is the entire problem or not, but I think what is happening is that:\n\nTop-level glide.yaml indicates that pkg-A and pkg-B are testImport\nDuring glide update, glide notices that pkg-B has a Godeps.json that depends on pkg-A\nGlide loads pkg-A as an import even though it came in via a testImport Godeps\nConflict if pkg-B -> pkg-A (import) is a different version from pkg-A (testImport).\n\nI think common packages are almost certain to cause this problem; my conflict was on go-diff, which is a dep of testify, and my workaround was to move go-diff from a testImport to an import in my glide.yaml since import package versions trump testImport package versions.. ",
    "glibsm": "Ran into the same problem.\nCan confirm that moving to regular import works (@novas0x2a solution). Running into the same issue. Also with raven-go, but another library that uses git submodules as well.. Seems like exactly the same issue as #745. We should probably close this one and consolidate the conversation in one place.. ",
    "mwf": "I ran into the same problem.\nIt's interesting.\nAfter moving testImport to import and making glide up I moved the dependencies back to testImport. Then ran glide up again, and it ran without errors!. And BTW we have almost similar problem if the versions are incompatible:\n[INFO]  Combining github.com/coreos/etcd semantic version constraints 3.x, ~2.2.4, ~2.2.4, ~2.2.4 and ~2.2.4\n[WARN]  --> Unable to find semantic version for constraint github.com/coreos/etcd 3.x, ~2.2.4, ~2.2.4, ~2.2.4\n[WARN]  Unable to set version on github.com/coreos/etcd to 3.x, ~2.2.4, ~2.2.4, ~2.2.4. Err: Unable to update checked out version\n[INFO]  Combining github.com/coreos/etcd semantic version constraints 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4 and ~2.2.4\n[WARN]  --> Unable to find semantic version for constraint github.com/coreos/etcd 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4\n[WARN]  Unable to set version on github.com/coreos/etcd to 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4. Err: Unable to update checked out version\n[INFO]  Combining github.com/coreos/etcd semantic version constraints 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4 and ~2.2.4\n[WARN]  --> Unable to find semantic version for constraint github.com/coreos/etcd 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4\n[WARN]  Unable to set version on github.com/coreos/etcd to 3.x, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4, ~2.2.4. Err: Unable to update checked out version\nInstead of just failing the update glide keeps queuing the version and retrying the update.. Hi @mattfarina \nThe same problem preserves with v0.13.1\nHave take a look?. @mattfarina yeap, github.com/coreos/etcd 3.1.3 is listed in the top-level `glide.yaml and ^3.1.0 in several project dependencies. . ",
    "hoshsadiq": "Not having a version constraint doesn't work either:\npackage: company/team/myapp\ntestImport:\n- package: github.com/imdario/mergo\nresulting in the following error\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Failed to generate lock file: Generating lock produced conflicting versions of github.com/imdario/mergo. import (6633656539c1639d9d78127b7d47c622b5d7b6dc), testImport (). ",
    "kchristidis": "Ah, I see what you're saying. Thank you for the explanation.\n. ",
    "2upmedia": "Make sure that your Go source code is actually in the $GOPATH and that your environment is using the correct $GOPATH environment you have set. That was my mistake.. ",
    "rshiva": "@mattfarina my project structure is as you mentioned \nGOPATH : /Users/admin/go/\nGOROOT=\"/usr/local/go\"\nProject Path: /Users/admin/go/src/project\nVendor: /Users/admin/go/src/project/vendor\ngo version: go version go1.8 darwin/amd64\nwhen i try to build my \n```\ngo build main.go\nmiddleware/logger.go:8:2: cannot find package /Users/admin/go/src/project/vendor/github.com/Sirupsen/logrus\" in any of:\n    /usr/local/go/src//Users/admin/go/src/project/vendor/github.com/Sirupsen/logrus (from $GOROOT)\n    /Users/admin/go/src/_/Users/admin/go/src/project/vendor/github.com/Sirupsen/logrus (from $GOPATH)\n```\nAm i missing something? \n. ",
    "julestruong": "@mattfarina This is exactly the problem, any solution ?. any news @cpg1111  ?. ",
    "pmint93": "Same problem here, can't import package at child directory.\nanyone got solution ?. Finally, I've found the way to fix this. Because the way we import sub-package at main.go (of your project).\nEg:\nInstead of import \"./sub-package\"\nWe should use import \"github.com/your_project/sub-package\". ",
    "calebisstupid": "I have this exact same issue on a fresh go set-up (installed late last week). When I \"go env\", I see\nGOPATH=\"/Users/myuser/go\"\nGOROOT=\"/usr/local/go\"\nHowever, when attempting to build after a \"glide install\" I am getting:\ncannot find package \"_/Users/myuser/go/src/myapp/vendor/dependency\"\n/usr/local/go/src/_/Users/myuser/go/src/myapp/vendor/dependency (from $GOROOT)\n/Users/myuser/go/src/_/Users/myuser/go/src/myapp/vendor/dependency (from $GOPATH)\nTo confirm, my project is in \"/Users/myuser/go/src/..\"\nWhat is really interesting is that I can workaround this by copying my /vendor/ contents into my \"/usr/local/go/src/\" folder ad emptying the vendor folder. This is obviously not ideal.\nI'm sure there is some silly path set-up that I am missing, were @gburanov or @rshiva able to resolve?. I should have paid far more attention to my relative imports. @pmint93 nailed it above. For reasons I do not fully understand, any relative import path seems to break vendoring entirely.\nI had 2 left over \"../../\" imports that I fixed and it worked.. ",
    "xyproto": "Thanks a lot! This resolved the issues I had.\n. ",
    "caarlos0": "@sdboyer oh, I searched for it and for some reason didn't found it.\nWill close this one as dup, then.\nThanks\n. ",
    "chris-garrett": "I'm also struggling with this workflow. It would be nice to have a flag to the package that would cause it to just rsync into the vendor dir from GOPATH or something like that. \nIt looks like this issue is related: (https://github.com/Masterminds/glide/issues/548)\n. @johnnadratowski this would be awesome! I have stopped using glide because of this so I a big +1 from me.. ",
    "fasaxc": "Not sure there's any need for a daemon for MVP.  How about:\n- add a new glide.local.yaml, which overrides glide.yaml but doesn't get checked in (need somewhere to put the override config)\n- allow me to set a local directory as a source (similar to how you can set an alternative repo to get a package from) or just allow a local flag, which make it default to using the gopath\n- explicitly run glide up/install to do the rsync and vendor stripping as if it was a remote dependency.\n. This also bites if you have transitive dependencies that should be revved together.  For example, golang.org/x/net depends on golang.org/x/text.  One of my transitive dependencies caused x/net to be revved to a revision that was incompatible with the older (cached) version of x/text.. ",
    "johnnadratowski": "@fasaxc  @sdboyer @chris-garrett @mattfarina  - I've been struggling with this recently as well, where we have 2 apps and a single shared library.  I've attempted to solve this using local mirrors, and having the engineers run glide update after they check in to their local repo.  The crappy part about this is, for a feature branch off trunk, it still wants to pull from trunk.\nI want to avoid having them to symlink from the vendor folder as it's going to be cleared out on a glide update.  \nHere is the best workflow I can think of:\n1. Have the engineers merge to their local trunk [in the lib]\n2. Engineers run glide update [in the app] when they make a change to their local [lib] trunk\n3. When they want to submit their PR, they create feature branch off [lib] trunk changes and submit the new branch as a PR\n4. IMPORTANT: Put branch restrictions on the [lib] trunk for the project so no one accidentally pushes it.  Also ensure that latest remote [lib] trunk is merged to feature branch before allowing a PR merge (this is specific to certain Git hosts, github recently supports this).\nI would like to see this remedied by a simple update to the mirrors mechanism, allowing the user to specify always copying the current sources for a local file mirror.  That way, the process is simplified, where a user would just need to run glide update after they change files on their local system, regardless of the branch they are on [in the lib].\nSomething like this:\nglide mirror set https://github.com/example/foo file:///path/to/local/repo --vcs local\nWhere --vcs local tells glide \"Hey, just copy whatever is in this file system w/all dependencies\".\nI was trying to find a way to do this w/o glide update, as it is easy to forget to do.  The problem is, the way vendoring works, Golang doesn't know that libraries in the vendor folder are the same as libraries in the $GOPATH, so it's either put all libs in $GOPATH or put all libs in vendor.\n. There would also be some things that could help with this, like allowing the user to specify a single lib to glide update.  So like glide update github.com/foo/bar\n. If you guys like this idea, I'll try to find some time to do a PR for it.  I'm just really busy at work right now.\n. @bbuchanan-bcs - I haven't gotten a chance to do it.  I've never contributed to glide before, so I'd need to start looking at the sources.  I've been hesitant to do it as the repo owners haven't responded to my comment, so I wasn't sure if I put in all the work it would have been accepted.\nHow to solve this problem seems to be a point of contention, based on the prior comments.\n@mattfarina @chris-garrett @sdboyer @fasaxc - If you guys like this let me know, because I will find time to do this.  I just don't want to work on this to no end.. Ok, I feel stupid now.  I had the repo set to ssh, but I accidentally mirrored the https endpoint.  That's why the mirror didn't work, it wasn't aware it had to replace the ssh endpoint.\nIt might be a good thing to mention this in the documentation for mirror, but I'm closing this out as clearly user error.\n. ",
    "bbuchanan-bcs": "I'm running into this as well. I'm heavily in favor of making a \"local\" vsc setting that just pulls directly from my file system. This makes it inline with the same workflow in python using pip. Please implement this.. ",
    "clarsonneur": "I'm in exactly the same concern described here. \n@johnnadratowski Did you get time to work on this? . Ha, cool. I didn't know I can add those 'ignore' tags. thank you! I will try that.. ",
    "reorx": "Another one who also struggled with this, here is my solution. Please note that I'm using dep recently, but the problem and solution are fairly the same.\nThe first thing is that I've written a script to accomplish this task: https://github.com/reorx/scripts/blob/master/localvendor.sh\nThe script localvendor does one thing: rm -rf a package under vendor/, then link the local repo to the same location.\nHere is my situation, I have 3 repos, foo, bar, baz, all under namespace github.com/me. foo depends on bar and baz. bar and baz has no dependency relationships with each other. In foo's directory, I write a Makefile with command:\nmake\nensure-local:\n    # the `glide up` for dep\n    @dep ensure -v\n    @bash localvendors.sh\nthis command will first run dep ensure to get all the dependencies to vendor/, then run localvendors.sh (ignored by git as a local only file) as follows:\n```bash\n!/bin/bash\nfile localvendors.sh\nlocalvendor ../bar\nlocalvendor ../baz\n```\nAfter ensure-local finishes, vendor/ will be like:\n$ ls -l vendor/github.com/me\nbar -> /Users/me/go/src/github.com/me/bar\nbaz -> /Users/me/go/src/github.com/me/baz\nSo when you are developing this project locally, always run make ensure-local to update dependencies. When bar or baz changes its version, don't forget to update the Gopkg.toml file (or glide.yaml for using glide) to get the version specifications up to date. When doing packaging jobs in CI or other machines, just run dep ensure (glide up/install) and the build result should be the same as local.\nThis solution should works with most of the situations I can think of, and only costs very little effort and awareness. If you have any ideas about this, feel free to discuss with me :). Thanks @sdboyer and @JelteF , I've searched all around only to find issues other than solutions, vg looks really good, I'll give vg a try and use it for a while, to see if meets my situation precisely.\nTo @sdboyer , though it's a bit inappropriate to talk about another issue here, just want you to check my ideas about dep's version constraint and release management here, it's some complaints but with good heart and no offense, I hope you don't mind \ud83d\ude42. ",
    "gggin": "\n@fasaxc @sdboyer @chris-garrett @mattfarina - I've been struggling with this recently as well, where we have 2 apps and a single shared library. I've attempted to solve this using local mirrors, and having the engineers run glide update after they check in to their local repo. The crappy part about this is, for a feature branch off trunk, it still wants to pull from trunk.\nI want to avoid having them to symlink from the vendor folder as it's going to be cleared out on a glide update.\nHere is the best workflow I can think of:\n1. Have the engineers merge to their local trunk [in the lib]\n\n2. Engineers run `glide update` [in the app] when they make a change to their local [lib] trunk\n\n3. When they want to submit their PR, they create feature branch off [lib] trunk changes and submit the new branch as a PR\n\n4. IMPORTANT: Put branch restrictions on the [lib] trunk for the project so no one accidentally pushes it.  Also ensure that latest remote [lib] trunk is merged to feature branch before allowing a PR merge (this is specific to certain Git hosts, github recently supports this).\n\nI would like to see this remedied by a simple update to the mirrors mechanism, allowing the user to specify always copying the current sources for a local file mirror. That way, the process is simplified, where a user would just need to run glide update after they change files on their local system, regardless of the branch they are on [in the lib].\nSomething like this:\nglide mirror set https://github.com/example/foo file:///path/to/local/repo --vcs local\nWhere --vcs local tells glide \"Hey, just copy whatever is in this file system w/all dependencies\".\nI was trying to find a way to do this w/o glide update, as it is easy to forget to do. The problem is, the way vendoring works, Golang doesn't know that libraries in the vendor folder are the same as libraries in the $GOPATH, so it's either put all libs in $GOPATH or put all libs in vendor.\n\nNow is 2018-10-22 in China, There is no type --vcs local, just remove --vcs local will solve this problem. But the repo url must be a github.com start not a go-project-name/xxx like name. > @fasaxc @sdboyer @chris-garrett @mattfarina - I've been struggling with this recently as well, where we have 2 apps and a single shared library. I've attempted to solve this using local mirrors, and having the engineers run glide update after they check in to their local repo. The crappy part about this is, for a feature branch off trunk, it still wants to pull from trunk.\n\nI want to avoid having them to symlink from the vendor folder as it's going to be cleared out on a glide update.\nHere is the best workflow I can think of:\n1. Have the engineers merge to their local trunk [in the lib]\n\n2. Engineers run `glide update` [in the app] when they make a change to their local [lib] trunk\n\n3. When they want to submit their PR, they create feature branch off [lib] trunk changes and submit the new branch as a PR\n\n4. IMPORTANT: Put branch restrictions on the [lib] trunk for the project so no one accidentally pushes it.  Also ensure that latest remote [lib] trunk is merged to feature branch before allowing a PR merge (this is specific to certain Git hosts, github recently supports this).\n\nI would like to see this remedied by a simple update to the mirrors mechanism, allowing the user to specify always copying the current sources for a local file mirror. That way, the process is simplified, where a user would just need to run glide update after they change files on their local system, regardless of the branch they are on [in the lib].\nSomething like this:\nglide mirror set https://github.com/example/foo file:///path/to/local/repo --vcs local\nWhere --vcs local tells glide \"Hey, just copy whatever is in this file system w/all dependencies\".\nI was trying to find a way to do this w/o glide update, as it is easy to forget to do. The problem is, the way vendoring works, Golang doesn't know that libraries in the vendor folder are the same as libraries in the $GOPATH, so it's either put all libs in $GOPATH or put all libs in vendor.\n\nNow is 2018-10-22 in China, There is no type --vcs local, just remove --vcs local will solve this problem. But the repo url must be a github.com start not a go-project-name/xxx like name. ",
    "andrewarrow": "so if I have a large project with lots of deps, what's the glide way to install (real go meaning) them all? or you are saying there isn't? Could I go thru and go install -a each one? But that defeats the point of glide then right?\n. thank you, that's great information. I'm starting to understand better. So, then if my go build takes 30 seconds and i'm spending tons of time re-compiling not only stuff from vendor, but section of my own code that haven't changed, what's an eger developer to do? There must be some best practice so I can get that build back down to like 3 seconds, no?\n. ah, i get it now. closing. thanks all.\n. ",
    "yasharya1984": "No it would not. I have 20-25 repo which multi level dependencies.  If i include one repo then it may come with 15 other dependencies. I do not want to calculate that manually or work on the returned errors.\nAnd it is not working without giving repo: directive.\n[WARN]  Unable to checkout stash.verizon.com/scm/abc/config.git\n[ERROR] Update failed for stash.verizon.com/scm/abc/config.git: Unable to get repository\n[ERROR] Failed to do initial checkout of config: Unable to get repository\nIf i can tell (top level configuration) for all packages starting with \"stash.verizon.com\" use repo \"http://stash.verizon.com/scm/\", vcs:git and ref:\"master\" then it would do the trick for me.\n. ",
    "jonaz": "Im having a similiar problem trying to adopt glide in our organization. \nThis works fine:\ngo get stash.domain.local/a/internal-libs.git/go/dao\nMy custom ssh config looks like this to make go get work:\nHost stash.domain.local\n    HostName stash.domain.local\n    Port 7999\n    User git\nBut with glide install it does NOT work fine. glide init make this config:\n- package: stash.domain.local/a/internal-libs.git\n  subpackages:\n  - go/dao\nAnd then glide install errors out:\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/facebookgo/inject.\n[INFO]  --> Fetching updates for github.com/gin-gonic/gin.\n[INFO]  --> Fetching updates for github.com/satori/go.uuid.\n[INFO]  --> Fetching updates for gopkg.in/redis.v3.\n[INFO]  --> Fetching updates for gopkg.in/tylerb/graceful.v1.\n[INFO]  --> Fetching stash.domain.local/a/internal-libs.git.\n[INFO]  --> Fetching updates for github.com/lib/pq.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[INFO]  --> Fetching updates for github.com/koding/multiconfig.\n[WARN]  Unable to checkout stash.domain.local/a/internal-libs.git\n[ERROR] Update failed for stash.domain.local/a/internal-libs.git: Unable to get repository\n[ERROR] Failed to do initial checkout of config: Unable to get repository\nWhy is not glide install using same logic as go get when talking to git?\n. ",
    "seh": "I'm still getting bitten by something similar today:\n\n[WARN]    Unable to checkout cloud.google.com/go\n[ERROR]   Update failed for cloud.google.com/go: Cannot detect VCS\n\nI see the following in my glide.yaml file:\nyaml\n- package: cloud.google.com/go\n  version: 9c1098a4debc9bf1073ed0e4872b12bd916243d8\n  repo: https://code.googlesource.com/gocloud\n  subpackages:\n  - compute/metadata\n  - internal\nI can reach the URL https://cloud.google.com/go?go-get=1 without any problem, and I do see that it offers a remote import meta element.\nhtml\n<meta name=\"go-import\" content=\"cloud.google.com/go git https://code.googlesource.com/gocloud\">\nAh, now I see: Glide can't tell which VCS to use. Adding the vcs key did the trick:\nyaml\n- package: cloud.google.com/go\n  version: 9c1098a4debc9bf1073ed0e4872b12bd916243d8\n  repo: https://code.googlesource.com/gocloud\n  vcs: git\n  subpackages:\n  - compute/metadata\n  - internal\n. Indeed, removing the repo and vcs keys did fix it. Thanks for the suggestion.\n. I think I've run into the same problem using Glide version version 0.12.2. Running glide install, after Glide fetches various repositories, it grinds away emitting messages like the following:\n[DEBUG] Package github.com/go-openapi/spec imports github.com/go-openapi/jsonpointer\n[DEBUG] Missing github.com/go-openapi/jsonpointer. Trying to resolve.\n[DEBUG] Dependency github.com/go-openapi/jsonpointer has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-openapi/jsonpointer has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/go-openapi/spec imports github.com/go-openapi/jsonreference\n[DEBUG] Missing github.com/go-openapi/jsonreference. Trying to resolve.\n[DEBUG] Dependency github.com/go-openapi/jsonreference has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-openapi/jsonreference has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/go-openapi/spec imports github.com/go-openapi/swag\n[DEBUG] Missing github.com/go-openapi/swag. Trying to resolve.\n[DEBUG] Dependency github.com/go-openapi/swag has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-openapi/swag has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/gogo/protobuf/proto (/Users/seh/.glide/cache/src/https-github.com-gogo-protobuf/proto)\n[DEBUG] Trying to open github.com/gogo/protobuf/sortkeys (/Users/seh/.glide/cache/src/https-github.com-gogo-protobuf/sortkeys)\n[DEBUG] Trying to open github.com/google/gofuzz (/Users/seh/.glide/cache/src/https-github.com-google-gofuzz)\n[DEBUG] Trying to open k8s.io/kubernetes/pkg/conversion (/Users/seh/.glide/cache/src/https-github.com-kubernetes-kubernetes/pkg/conversion)\n[DEBUG] Package k8s.io/kubernetes/pkg/conversion imports k8s.io/kubernetes/third_party/forked/golang/reflect\n[DEBUG] Missing k8s.io/kubernetes/third_party/forked/golang/reflect. Trying to resolve.\n[DEBUG] Dependency k8s.io/kubernetes has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency k8s.io/kubernetes has already been pinned. Setting version skipped.\n[DEBUG] Trying to open k8s.io/kubernetes/pkg/genericapiserver/openapi/common (/Users/seh/.glide/cache/src/https-github.com-kubernetes-kubernetes/pkg/genericapiserver/openapi/common)\n[DEBUG] Package k8s.io/kubernetes/pkg/genericapiserver/openapi/common imports github.com/go-openapi/spec\n[DEBUG] Missing github.com/go-openapi/spec. Trying to resolve.\n[DEBUG] Dependency github.com/go-openapi/spec has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/go-openapi/spec has already been pinned. Setting version skipped.\n[DEBUG] Trying to open k8s.io/kubernetes/pkg/labels (/Users/seh/.glide/cache/src/https-github.com-kubernetes-kubernetes/pkg/labels)\nI've had it running continuously now for about 15 hours, and I can't tell if it's getting any closer to finishing.\n. Per @mattfarina's comment in the \"general\" channel of the \"Gophers\" Slack team, there's a symbolic link in the Kubernetes repository that's aggravating Glide's ability to finish:\nshell\n% ls -l ~/.glide/cache/src/https-github.com-kubernetes-kubernetes/vendor/k8s.io \ntotal 8\nlrwxr-xr-x  1 seh  staff   34 Sep 23 13:26 client-go -> ../../staging/src/k8s.io/client-go\ndrwxr-xr-x  4 seh  staff  136 Sep 23 13:26 heapster\n. I find that the same problem arises when my project depends on just the kubernetes/client-go repository, so I don't think that this symbolic link is the problem here.\n. I'll clone that and try it, but I may not finish before I have to give up tonight. I'll let you know by tomorrow morning.\n. Not likely related, but I ran into this problem running glide install using this patch:\ntext\n[INFO]  --> Fetching cloud.google.com/go/cmd/go-cloud-debug-agent/internal/breakpoints.\n[WARN]  Unable to checkout cloud.google.com/go/cmd/go-cloud-debug-agent/internal/breakpoints\n[ERROR] Error looking for cloud.google.com/go/cmd/go-cloud-debug-agent/internal/breakpoints: https://cloud.google.com/go/cmd/go-cloud-debug-agent/internal/breakpoints Not Found\nLater, I ran into this problem, which I didn't see with Glide version 0.11.1:\ntext\n[ERROR] Error scanning github.com/go-kit/kit/service: open /Users/seh/.glide/cache/src/https-github.com-go-kit-kit/service: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning google.golang.org/api/internal: open /Users/seh/.glide/cache/src/https-google.golang.org-api/internal: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\nMy code doesn't make reference to either of those packages.\n. My second attempt yielded about ten more cases of this error:\n\nThis error means the referenced package was not found.\n. How does one know when it's time to run glide cache-clear?\nI assumed that glide install would trigger glide update (for lack of a glide.lock file), which would update the cache. Is that not the case?\n. I ran glide cache-clear, confirmed that all the cached files were gone, and ran glide install --strip-vendor again, and it failed in the same way. At least now it completes its run, rather than getting stuck.\n\ntext\n[ERROR] Error scanning github.com/go-kit/kit/service: open /Users/seh/.glide/cache/src/https-github.com-go-kit-kit/service: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning google.golang.org/api/internal: open /Users/seh/.glide/cache/src/https-google.golang.org-api/internal: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\nI had trouble figuring out what's looking for the import path \"github.com/go-kit/kit/service\". I found this reference in one of go-kit's integration tests. I'm using the latest release of go-kit, but I assume that taking a later version won't fix the problem here, because that integration_test.go file still references this nonexistent package even in the latest version.\n. I filed go-kit/kit#366 for the aforementioned problem.\nFor the second one:\nshell\n% find ~/.glide/cache -name '*.go' -type f -exec egrep '\\Qgoogle.golang.org/api/internal\\E' {} \\; -print\n    \"google.golang.org/api/internal\"\n/Users/seh/.glide/cache/src/https-camlistore.org/vendor/google.golang.org/api/option/option.go\n    \"google.golang.org/api/internal\"\n/Users/seh/.glide/cache/src/https-camlistore.org/vendor/google.golang.org/api/option/option_test.go\n    \"google.golang.org/api/internal\"\n/Users/seh/.glide/cache/src/https-camlistore.org/vendor/google.golang.org/api/transport/dial.go\nThe \"google.golang.org/api/internal\" package does look to be available here. It's also already in my cache:\nshell\n% ls -l ~/.glide/cache/src/https-camlistore.org/vendor/google.golang.org/api/internal \ntotal 24\n-rw-r--r--  1 seh  staff  1910 Sep 30 09:21 pool.go\n-rw-r--r--  1 seh  staff  2065 Sep 30 09:21 pool_test.go\n-rw-r--r--  1 seh  staff   639 Sep 30 09:21 settings.go\n. As far as I can tell, this patch does what it intends to do. I'm still plagued by other problems, but apart from my recommendation for initializing the map's capacity above, I recommend merging it.\n. For the record, the same thing occurs when I don't touch the Git repository in the cache, but rather point at a local Git repository outside the cache via a URL with the \"file\" scheme.\n. I'm still learning my way around the Glide code base, but I'll record some findings. In file repo/installer.go's method VersionHandler.SetVersion, we see that it tells the VCS to switch to the intended version near the end with the call to VcsVersion.\nOver in file dependency/resolver.go, we see that we call on VersionHandler.Process before we call on VersionHandler.SetVersion. However, it looks like that sequence arises only when the package didn't exist, and we fetch it in between the aforementioned Process and SetVersion calls. The dependency winds up back in the queue to enjoy a subsequent call to Process again, this time after the preceding call to SetVersion.\nGiven that reading, we shouldn't wind up processing a repository before having set it to the intended version.\nIn my example, we can see Glide checking out the Git repository and changing branches, but for some reason the import path scanning winds up reading content only available on the \"master\" branch.\n``` shell\n% pushd ~/.glide/cache/src/file--Users-seh-go-src-github.com-go-kit-kit \n~/.glide/cache/src/file--Users-seh-go-src-github.com-go-kit-kit ~/go/src/github.com/go-kit/kit\n% git reflog\n2dcf581 HEAD@{0}: checkout: moving from master to seh-fix\ndf0518c HEAD@{1}: clone: from file:///Users/seh/go/src/github.com/go-kit/kit\n% git branch\n  master\n* seh-fix\n```\n. Forget it. This was my fault.\nI had a previous vendor directory that I had moved \"out of the way\", having renamed it to vendor-good. Glide was scanning the files in that directory, and that's where it was finding the offending file in go-kit's \"master\" branch version\u2014not within Glide's cache. Once I moved this vendor-good directory outside of my project directory tree, glide install completed as expected.\nSorry for the distraction.\n. Supposedly a forthcoming version of Travis CI does away with the APT source white list altogether, which explains the sluggishness in updating it. However, there isn't anything we as users/customers can do to usher in that better tomorrow any sooner.\n. I noticed the same problem today running glide update with Glide version 0.12.3.\n[ERROR] Could not find /Users/seh/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/seh/.glide/cache/src/https--Users-seh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/seh/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/seh/.glide/cache/src/https--Users-seh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/seh/.glide/cache/src/https--Users-seh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\nNote the extra \"-Users-seh-.glide-cache-src-https-\" in that file path.\nshell\n% file ~/.glide/cache/src/https-golang.org-x-sys/unix\n/Users/seh/.glide/cache/src/https-golang.org-x-sys/unix: directory\nRunning glide cc has not helped.. This bit me again today, three weeks later, again with this \"x/sys/unix\" package.\nIs there any reliable workaround?. - [x] Consider using the expected size:\ngo\nalreadySeen := make(map[string]bool, queue.Len())\n. ",
    "freeformz": "Does this work correctly? See heroku/heroku-buildpack-go#148\n. @chacken My output in the linked issue is with v0.12.2 (latest release ATM) of glide.\n. @mattfarina Sorry for the noise. Turns out I didn't have my github key loaded at the time. :-(\n. ",
    "chacken": "@freeformz I thought it was working for me locally.  But I'm using Cloud9 and deploying to Heroku.  So maybe it only worked on Cloud9 for some crazy weird reason? I may have also installed an older release by accident.\n. ",
    "rogerdehe": "@hyPiRion it helps me a lot, thanks very much, although I can not generate glide.yaml this time\n. ",
    "breerly": "No tests?\n. Sounds great.\nI'd like to read more about GPS - where could I do that?\n. For the 0.12.3 tag, version.go still shows var version 0.12.0-dev...\nhttps://github.com/Masterminds/glide/blob/84607742b10f492430762d038e954236bbaf23f7/glide.go#L37\n:(\n. @mattfarina what is actually on master?\n. @mattfarina I was expecting Glide to do something like:\n1. Latest release is always on master\n2. Releases are made off of master\n3. Changes for the next release aggregate in another branch\n4. That branch gets merged into master when ready for a new release\n631 should keep us on track going forward.\n. This first build should fail, verifying the feature. Once it does, I'll update the value of glide.Version to make it pass.\n. @sdboyer the implications is that the build will fail if go.version do not match the latest version in the changelog. In practice, this means catching issues like #629 from happening.\n. Got it, I'll switch back to var\n. @heralight I understand semver perfectly well - that's not the ask here.\nThe ask is Glide's output should show WHERE it decided package A should be installed at version X. Specifically what file lead to the decision that version X should be installed as opposed to version Y.\n. Might be useful for exterior libs to be able to get at this, in the case that they use glide as a lib.\n. Point taken - I updated to maintain the old api!\n. Sure\n. ",
    "haakonsk": "Your comments were very useful. I had a similar problem with glide install. Deleting the repo from ~/.glide/cache/src/ fixed it.\n. ",
    "marpaia": "The results, on my Windows machine, of running git_test.go is:\n=== RUN   TestGit\n--- FAIL: TestGit (4.27s)\n    git_test.go:238: Unable to export Git repo. Err was Unable to export source\n    git_test.go:243: Error checking exported file in Git: GetFileAttributesEx C:\\Users\\marpaia\\AppData\\Local\\Temp\\go-vcs-git-tests-export554721138\\src\\README.md: The system cannot find the path specified.\n=== RUN   TestGitCheckLocal\n--- PASS: TestGitCheckLocal (0.00s)\n=== RUN   TestGitPing\n--- PASS: TestGitPing (3.45s)\n=== RUN   TestGitInit\n--- PASS: TestGitInit (0.11s)\nFAIL\nexit status 1\nFAIL    github.com/Masterminds/vcs  7.917s\nError: Tests failed.\nWhereas on OS X, many tests run much faster:\n=== RUN   TestGit\n--- PASS: TestGit (1.43s)\n=== RUN   TestGitCheckLocal\n--- PASS: TestGitCheckLocal (0.00s)\n=== RUN   TestGitPing\n--- PASS: TestGitPing (0.37s)\n=== RUN   TestGitInit\n--- PASS: TestGitInit (0.02s)\n. ",
    "Christopher-Bradshaw": "Yes! Thank-you, removing the stdlibs fixed it.\n. ",
    "heralight": "You can more about Semantic Versioning 2.0.0\nhttp://semver.org/\nhttps://en.wikipedia.org/wiki/Software_versioning\nhttps://wiki.debian.org/UpstreamGuide#Releases_and_Versions\nIn your case you don't have v0.11.0 for gopkg.in/inf.v0 ... if it will be the case,  v0.11.0 > v0.9.0\n. ",
    "niyue": "I ran into similar situation as well. When I build my project, a transitive dependent library was reported with some incompatible API compilation issue, but I cannot easily where this transitive dependency actually comes from. Knowing the origin and why a dependency is needed will help for troubleshooting.. I realized this can be done by using the ignore element in glide.yaml to ignore these generated packages so that I can generate the code after glide update. Thanks.. ",
    "imkira": "By looking at \nhttps://github.com/Masterminds/glide/blob/3895d9e41edbe9186d65c9dde9c38148d9bbd49c/repo/installer.go#L270-L289\nI just noticed we are doing a local operation not a network one (ExportDir), which should normally not fail, but I guess I am being ulimit capped?\nshell\n$ ulimit -n -u\n-u: processes                       709\n-n: file descriptors                256\nhttps://github.com/Masterminds/glide/blob/3895d9e41edbe9186d65c9dde9c38148d9bbd49c/repo/repo.go#L8\nMaybe this is too much, or there should be a way to configure this?\n. I am sorry. This was an antivirus issue on my work mac. For some reason having too many git checkout-index during glide up was causing the file scanner to go blitz.\nUninstalled, now working nicely.\n. ",
    "codesuki": "It was the indentation of - package in glide.yml\n. ",
    "geekrohit": "Getting roughly same , on sunos , Go v1.7 , and latest Glide from source: \n[ERROR] Failed to set version on github.com/aws/aws-sdk-go to 90dec2183a5f5458ee79cbaf4b8e9ab910bc81a6: Unable to update checked out version\n[ERROR] Failed to set version on github.com/coreos/etcd to c400d05d0aa73e21e431c16145e558d624098018: Unable to update checked out version\n[ERROR] Failed to set version on github.com/gogo/protobuf to 909568be09de550ed094403c2bf8a261b5bb730a: Unable to update checked out version\n[ERROR] Failed to set version on github.com/hashicorp/consul to fce7d75609a04eeb9d4bf41c8dc592aac18fc97d: Unable to update checked out version\n[ERROR] Failed to set version on golang.org/x/text to a49bea13b776691cb1b49873e5d8df96ec74831a: Unable to update checked out version\n[ERROR] Failed to set version on google.golang.org/api to 9bf6e6e569ff057f75d9604a46c52928f17d2b54: Unable to update checked out version\n[ERROR] Failed to set version on k8s.io/client-go to 843f7c4f28b1f647f664f883697107d5c02c5acc: Unable to update checked out version\n[ERROR] Failed to set references: Unable to update checked out version\nUnable to update checked out version\nUnable to update checked out version\nUnable to update checked out version\nUnable to update checked out version\nUnable to update checked out version\nUnable to update checked out version (Skip to cleanup). ",
    "joelmarks-wf": "I was able to resolve a similar issue with thrift.git by removing the cached folder from /Users/logged_in_user/.glide/cache/src/https-git.apache.org-thrift.git. ",
    "cfchase": "I was getting this issue for some other dependencies but it did not go away after clearing my cache.  I had a setting in my  .gitattributes file that was giving it a problem:\n```\n.gitattributes\nAutomatically normalize line endings for all text-based files\n\ntext=auto\n```\nAfter removing that setting, glide install worked for me.  If clearing your cache doesn't work for you,  you might want to check your .gitconfig settings.  Don't know if anyone else ran into this, but I thought I'd share, just in case.. \n",
    "jmrodri": "On some git repos, if .gitattributes is enabled, files are modified during the git clone phase. So when glide attempts to get a specific version (sha) the git checkout fails. An example project would be https://github.com/mailru/easyjson.git\nIf I clone the repo by hand (with the same .gitattributes settings as @cfchase) files get modified during the clone phase.\n```\n$ git clone https://github.com/mailru/easyjson.git\nCloning into 'easyjson'...\nremote: Counting objects: 1005, done.\nremote: Total 1005 (delta 0), reused 0 (delta 0), pack-reused 1005\nReceiving objects: 100% (1005/1005), 305.53 KiB | 0 bytes/s, done.\nResolving deltas: 100% (575/575), done.\nChecking connectivity... done.\n$ cd easyjson/\n$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   parser/parser_windows.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\nThen if I try to checkout a specific commit like glide would do for a locked down version, the checkout will fail. Naturally it fails because there are modified files.\n```\n$ git checkout d5b7844b561a7bc640052f1b935f7b800330d7e0\nerror: Your local changes to the following files would be overwritten by checkout:\n    parser/parser_windows.go\nPlease commit your changes or stash them before you switch branches.\nAborting\n[jesusr@speed3 easyjson{master}]$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   parser/parser_windows.go\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\nI believe glide should print out the error that actually occurred so that it would be easier to debug what's going on. Instead of just [ERROR] Unable to update checked out version\nThe offending code I believe is in vcs/git.go under the vendor directory of glide.\nhttps://github.com/Masterminds/glide/blob/master/vendor/github.com/Masterminds/vcs/git.go#L159-L167\n```\n// UpdateVersion sets the version of a package currently checked out via Git.\nfunc (s *GitRepo) UpdateVersion(version string) error {\n    out, err := s.RunFromDir(\"git\", \"checkout\", version)\n    if err != nil {\n        return NewLocalError(\"Unable to update checked out version\", err, string(out))\n    }\nreturn s.defendAgainstSubmodules()\n\n}\n```\nOr potentially in vcs.go https://github.com/Masterminds/glide/blob/master/repo/vcs.go#L240-L242. ",
    "yoshiwaan": "Specifically for docker/distribution on Windows the issue is this: https://github.com/docker/distribution/issues/1690\nIf you try to checkout the commit manually in the glide cache directory it fails and leaves the repo in a mid updated state.\nThis will happen to any git repository with files in it that contain characters not supported by windows files/directories.. ",
    "austenLacy": "also seeing the same error as @atombender with the import statements in generated proto go files. ",
    "zhaohuxing": "Cannot detect VCS\n[ERROR] Failed to set version on golang.org/x/net/http2 to : Cannot detect VCS\n[ERROR] Failed to set references: Cannot detect VCS (Skip to cleanup). ",
    "Tigerino": "\nThe OP's issue is stranger - are you, perhaps, running that on a machine without a GOROOT set up, somehow? (not the env var, i mean literally no stdlib)\n\nThis was a good pointer for me. For me, glide tried to download the standard Go libs (as fmt, log, database/sql, ...) when I glided in a terminal hosted by GoLand. \nWhen I did the same via the Windows console, it actually worked as expected. Looks like GoLand has set some ENV vars, which glide wasn't really understanding.. ",
    "com314159": "Thank you\n. ",
    "kseo": "I also encountered the same problem. \n$ mkdir -p $GOPATH/bin\n0.49s$ curl https://glide.sh/get | sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3241  100  3241    0     0  16245      0 --:--:-- --:--:-- --:--:-- 17906\nSorry, we dont have a dist for your system: linux amd64\nYou can ask one here: https://github.com/Masterminds/glide/issues\nFail to install glide\n. ",
    "jraede": "Seems to be sporadic. I copied the file as-is, added some debug lines, changed the travis.yml to run it locally, and committed/pushed, and then it worked. Immediately restarted the successful build and got the same error as above. Might thus be a travis issue with some sort of caching rather than an issue with glide. Will keep this issue updated as I learn more.\n. Scratch the above, I am not getting that same issue. Since committing the contents of glide.sh/get into my repo, I have not had a problem. Is there an issue with the glide.sh server? In both cases we still download the release from Github so that seems to rule that out as a potential culprit.\n. And now I had the same issue even with the file committed. I might be going insane. Anyway, that means that there could be an intermittent issue with the github API returning the list of releases.\n. RE: adding PPA to Travis, that requires the \"sudo\" directive which doesn't allow you to use their new container-based (faster) infrastructure. I think bypassing github to get the releases directly in glide.sh will cover the most edge cases here. \n. ",
    "alexjomin": "@jmazzitelli works fine, thank you !. ",
    "skipor": "yaml\nbefore_install:\n  - sudo add-apt-repository ppa:masterminds/glide -y\n  - sudo apt-get update -q\n  - sudo apt-get install glide -y\nWorks now. \n. ",
    "andytom": "You can also use the apt addon which works on the container infrastructure.\nyaml\naddons:\n  apt:\n    sources:\n      - sourceline: 'ppa:masterminds/glide'\n    packages:\n      - glide. ",
    "dverbeek84": "Same issue here\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Problem parsing package at /Users/danny/.glide/cache/src/https--Users-danny-.glide-cache-src-https-golang.org-x-sys-unix for  \n[ERROR] Could not find /Users/danny/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/danny/.glide/cache/src/https--Users-danny-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/danny/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/danny/.glide/cache/src/https--Users-danny-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/danny/.glide/cache/src/https--Users-danny-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n. This issue is introduced in 0.12.0. 0.11.1 is working fine.\n. Same issue as #640\n. This problem is introduced 0.12.0. 0.11.1 is working fine.\n. Please look in old issues first. This is already mentioned in #640 and #651.\n. ",
    "rhuss": "Same issue for me when installing deps for spf13/cobra (glide version 0.12.3) :\nglide update --all-dependencies\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching github.com/spf13/cobra.\n[INFO]  Resolving imports\n[INFO]  --> Fetching github.com/inconshreveable/mousetrap.\n[INFO]  --> Fetching github.com/spf13/pflag.\n[INFO]  --> Fetching github.com/spf13/viper.\n[INFO]  --> Fetching github.com/cpuguy83/go-md2man.\n[INFO]  --> Fetching github.com/fsnotify/fsnotify.\n[INFO]  --> Fetching github.com/hashicorp/hcl.\n[INFO]  --> Fetching github.com/magiconair/properties.\n[INFO]  --> Fetching github.com/mitchellh/mapstructure.\n[INFO]  --> Fetching github.com/pelletier/go-toml.\n[INFO]  --> Fetching github.com/spf13/afero.\n[INFO]  --> Fetching github.com/spf13/cast.\n[INFO]  --> Fetching github.com/spf13/jwalterweatherman.\n[INFO]  --> Fetching gopkg.in/yaml.v2.\n[INFO]  --> Fetching github.com/xordataexchange/crypt.\n[INFO]  --> Fetching github.com/russross/blackfriday.\n[INFO]  --> Fetching golang.org/x/sys.\n[INFO]  --> Fetching github.com/pelletier/go-buffruneio.\n[INFO]  --> Fetching golang.org/x/text.\n[INFO]  --> Fetching github.com/pkg/sftp.\n[INFO]  --> Fetching github.com/shurcooL/sanitized_anchor_name.\n[ERROR] Could not find /Users/roland/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/roland/.glide/cache/src/https--Users-roland-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/roland/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/roland/.glide/cache/src/https--Users-roland-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of dependencies: open /Users/roland/.glide/cache/src/https--Users-roland-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\nI did a glide cc before.. fyi, glide 0.10.2 worked for me.. ",
    "josh-padnick": "9 months later, I'm now running into this as well:\n[INFO]  --> Fetching updates for github.com/boombuler/barcode.\n[ERROR] Could not find /Users/josh/.glide/cache/src/https-golang.org-x-sys/unix: open /Users/josh/.glide/cache/src/https--Users-josh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\n[ERROR] Dependency golang.org/x/sys/unix (/Users/josh/.glide/cache/src/https-golang.org-x-sys/unix) failed to resolve: open /Users/josh/.glide/cache/src/https--Users-josh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory.\n[ERROR] Failed to retrieve a list of test dependencies: open /Users/josh/.glide/cache/src/https--Users-josh-.glide-cache-src-https-golang.org-x-sys-unix: no such file or directory\nThis seems like quite a serious bug to remain unresolved. How have others worked around this other than hacking glide code as @brikis98 suggests?. ",
    "zouyee": "the same to me. ",
    "bassam": "This requires a way to copy whole directories too. Closing for now.\n. ",
    "RKelln": "Aha, the error goes away when I manually set the version to ^2.0.0.\nPerhaps then the error message could be clearer or the wizard detection of the version needs tweaks?\n. I'm going to close this for now, as it is likely me expecting more magic from the wizard version detection than currently implemented/possible. :)\n. ",
    "ashb": "Glide does not install binaries (currently) -- It's worth adding this as another use case in #418.\n. ",
    "mloudon": "same issue, \ngo1.6 linux/amd64\nglide version v0.12.3\n. ",
    "AaronO": "@karalabe Not a fix per say, but I built a small tool called go-vendor-clean, it's not yet open source, but I use it in conjunction with glide to get glide's versioning but lean/small vendor/ folders.\ngo-vendor-clean supports glide, godep and still works if you have neither.\nIt's something we haven't yet open-sourced but use internally GitBook, let me know if you're interested and maybe I can speed up the release process.\n\n. @karalabe Didn't know of trash, it looks pretty cool ! A more lightweight/pragmatic alternative to glide.\nglide was the closest conceptually to npm, which is what the rest of our team is familiar with (since a substantial part of our code is node).\nI'll add trash.conf support to go-vendor-clean.\ngo-vendor-clean is quite aggressive since it removes all non-go compilable files from /vendor/ (.md, ...) along with test files (see above screenshot). Some people may want to keep that, but we wanted to keep our /vendor/ dirs as small as possible so it works for us :)\n. ",
    "twest217": "Im running into this issue. It does it every other time I run the command. \n. Im getting it in an Ubuntu Vagrant machine. Through a Make target, running a series of commands that builds a binary. glide install/update is one of them. My temporary workaround is to remove vendor/ & glide.lock before executing glide install. Didn't have this problem in glide 11.0. Now I'm on 12.3 and having the issue. \n. ",
    "dshareiff": "Same Here.  Any update \n. ",
    "treeder": "ditto. Only seem to get this on windows bash shell though, might be related. \n. I think all of these issues can be reproduced with this glide.yaml:\nyaml\npackage: .\nimport:\n- package: github.com/docker/docker\n  version: master\n. ",
    "penhauer-xiao": "Can't sink for this issue.\n. How to solve this issue, Can't sink for this issue.. If You import the sub package directly in your project,  so this issue to appear.  :). @joshmello \nThe following is my solution, more than a few times, usually in the first 2 or 3 can be deleted\n for i := 0; i < 20; i++ {\n        err = os.RemoveAll(p)\n        if err != nil {\n            msg.Warn(\"Unable to clear the cache: %d: %s\", i, err)\n            continue\n        }\n        break\n}. You are right. :). I look at the source code, it is only supported tags/v1.1.2 similar to the beginning of the tags, how to support tags/r2013.11.18\n// SemVerRegex id the regular expression used to parse a semantic version.\nconst SemVerRegex string = v?([0-9]+)(\\.[0-9]+)?(\\.[0-9]+)? +\n    (-([0-9A-Za-z\\-]+(\\.[0-9A-Za-z\\-]+)*))? +\n    (\\+([0-9A-Za-z\\-]+(\\.[0-9A-Za-z\\-]+)*))?. Running into the same issue\n[INFO]  --> Exporting github.com/Sirupsen/logrus\n[ERROR] Export failed for github.com/oschwald/maxminddb-golang: Error while exporting submodule sources\n[DEBUG] Output was: Entering 'test-data'\n/usr/lib/git-core/git-submodule: 1: eval: git checkout-index -f -a --prefix=\"/tmp/glide-vendor772707223/vendor/github.com/oschwald/maxminddb-golang/$path\": not found\nStopping at 'test-data'; script returned non-zero status.[DEBUG]    Unlocking https-github.com-oschwald-maxminddb-golang\n. It have been fixed from the latest new version.. @tngan  Not found any solution for this issue. [ERROR] Error scanning golang.org/x/text/encoding/charmap: open /home/kent/.glide/cache/src/https-golang.org-x-text-encoding/charmap: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning golang.org/x/text/encoding/htmlindex: open /home/kent/.glide/cache/src/https-golang.org-x-text-encoding/htmlindex: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[INFO]  --> Fetching google.golang.org/genproto/googleapis/rpc/status\n[WARN]  Unable to checkout google.golang.org/genproto/googleapis/rpc/status\n[ERROR] Error looking for google.golang.org/genproto/googleapis/rpc/status: Cannot detect VCS\n[WARN]  Unable to set version on google.golang.org/genproto/googleapis/rpc/status to . Err: Cannot detect VCS. ",
    "miketonks": "Same issue here, with different library:\n[ERROR] Unable to export dependencies to vendor directory: remove /repos/myproject/vendor/github.com/docker/docker/daemon: directory not empty\nafter deleting the directory with rm -rf it works fine.  Other libraries seems to be ok, not sure why the docker one fails.\n. rm -rf /repos/myproject/vendor/github.com/docker/\nglide up\nsolved it for me.  Would like a better solution for long term, but as a workaround this is ok for now.. I can reproduce with the following glide.yaml in an empty folder:\nyaml\npackage: test\nimport:\n- package: github.com/docker/docker\nand simply run glide up twice:\n```\n:/repos/test$ glide up\n[WARN]  The name listed in the config file (test) does not match the current location (.)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/docker/docker.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/docker/docker\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Project relies on 1 dependencies.\n:/repos/test$ glide up\n[WARN]  The name listed in the config file (test) does not match the current location (.)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/docker/docker.\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/docker/docker\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: remove /repos/test/vendor/github.com/docker/docker/daemon: directory not empty\n```\nWith the workaround: \n:/repos/test$ rm -rf /repos/test/vendor/github.com/docker/docker/daemon\n:/repos/test$ glide up\nit works, but fails again with same error as above on second attempt. Workaround: \nrm -rf vendor && glide up\nUsing this a lot these days ....  :(. For me, I found it's a filesystem issue.  I'm using virtualboxfs, and the core golang libs seems to fail to recursively delete if there are too many files.  I did't push upstream and I think virtualboxfs may be to blame, so probably a bit of an edge case.\nAnyway I think it's not glide issue, but golang issue.. ",
    "pradyuman": "Same problem here. None of the above workarounds work for me.\n. Is there any update on this? I literally can't use glide right now.. ",
    "jonbodner": "Happens on Mac because of the .DS_Store file. Deleting it via rm .DS_Store fixes the problem.\n. ",
    "arichardet": "Not sure how helpful this will be, but here is the information on how I saw the error. With glide v0.12.3 on Ubuntu vagrant.\nI had the following errors when running glide get github.com/hashicorp/go-getter when package: github.com/docker/docker in glide.yaml had no version:\n[ERROR] Error scanning github.com/docker/docker/api/types/blkiodev: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/api/types/blkiodev: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/docker/docker/api/types/strslice: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/api/types/strslice: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/docker/docker/api/types/network: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/api/types/network: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/docker/docker/api/types/registry: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/api/types/registry: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/docker/docker/api/types/versions: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/api/types/versions: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/docker/docker/pkg/term/windows: open /home/vagrant/.glide/cache/src/https-github.com-docker-docker/pkg/term/windows: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports\nWhen I added a version: ^1.12.0 for package: github.com/docker/docker, I no longer had the above errors, and got the error referenced in this issue: \n[ERROR] Unable to export dependencies to vendor directory: remove /vagrant/godev/src/github.com/asteris-llc/converge/vendor/github.com/docker/docker/daemon: directory not empty\nRemoving vendor and glide.lock, then glide install got me past this.. @sdboyer Our project is not directly importing the docker subpackages listed in the error messages; they are dependencies of other imported packages. Here is the glide.yaml and glide.lock. Hope this helps.\nglide.yaml:\npackage: github.com/asteris-llc/converge\nimport:\n- package: github.com/BurntSushi/toml\n- package: github.com/braintree/manners\n  subpackages:\n  - test_helpers\n- package: github.com/davecgh/go-spew\n  subpackages:\n  - spew\n- package: github.com/fsnotify/fsnotify\n  version: ^1.3.0\n- package: github.com/hashicorp/errwrap\n- package: github.com/hashicorp/go-multierror\n- package: github.com/hashicorp/hcl\n  subpackages:\n  - hcl/ast\n  - hcl/parser\n  - hcl/printer\n  - hcl/scanner\n  - hcl/strconv\n  - hcl/token\n  - json/parser\n  - json/scanner\n  - json/token\n- package: github.com/hashicorp/logutils\n- package: github.com/hashicorp/terraform\n  subpackages:\n  - dag\n  - vendor/github.com/hashicorp/go-multierror\n  - vendor/github.com/hashicorp/errwrap\n- package: github.com/inconshreveable/mousetrap\n- package: github.com/kardianos/osext\n- package: github.com/magiconair/properties\n  version: ^1.7.0\n- package: github.com/mattn/go-isatty\n- package: github.com/mitchellh/mapstructure\n- package: github.com/pkg/errors\n- package: github.com/pmezard/go-difflib\n  version: ~1.0.0\n  subpackages:\n  - difflib\n- package: github.com/spf13/cast\n- package: github.com/spf13/cobra\n- package: github.com/spf13/jwalterweatherman\n- package: github.com/spf13/pflag\n- package: github.com/spf13/viper\n- package: github.com/stretchr/testify\n  subpackages:\n  - assert\n  - require\n  - vendor/github.com/davecgh/go-spew/spew\n  - vendor/github.com/pmezard/go-difflib/difflib\n  - mock\n- package: golang.org/x/net\n  subpackages:\n  - context\n- package: golang.org/x/sys\n  subpackages:\n  - unix\n- package: gopkg.in/yaml.v2\n- package: github.com/streamrail/concurrent-map\n- package: github.com/stretchr/objx\n- package: github.com/mitchellh/hashstructure\n- package: github.com/fsouza/go-dockerclient\n- package: google.golang.org/grpc\n  version: ~1.0.0\n- package: github.com/grpc-ecosystem/grpc-gateway\n  version: ^1.1.0\n  subpackages:\n  - third_party/googleapis/google/api\n- package: github.com/dgrijalva/jwt-go\n  version: ^3.0.0\n- package: github.com/fgrid/uuid\n  version: ^0.1.0\n- package: github.com/Sirupsen/logrus\n  version: ^0.10.0\n- package: github.com/deckarep/golang-set\n  version: ~1.5.0\n- package: golang.org/x/crypto\n  subpackages:\n  - openpgp\n- package: github.com/arbovm/levenshtein\n- package: golang.org/x/sync\n  subpackages:\n  - errgroup\n- package: github.com/docker/docker\n  version: ^1.12.0\nglide.lock\nhash: 16934945ed27f8335045492c5ffea6003f202fa5096e43b7fc438751b62b6fb0\nupdated: 2016-11-29T14:25:01.184215603-06:00\nimports:\n- name: github.com/arbovm/levenshtein\n  version: 48b4e1c0c4d0b8b1864f1bd2cd31bb20147e4636\n- name: github.com/aws/aws-sdk-go\n  version: 92ed7a76d078fc5b792a3b5c834274c8dc89d10a\n  subpackages:\n  - aws\n  - aws/awserr\n  - aws/awsutil\n  - aws/client\n  - aws/client/metadata\n  - aws/corehandlers\n  - aws/credentials\n  - aws/credentials/ec2rolecreds\n  - aws/credentials/endpointcreds\n  - aws/credentials/stscreds\n  - aws/defaults\n  - aws/ec2metadata\n  - aws/request\n  - aws/session\n  - aws/signer/v4\n  - private/endpoints\n  - private/protocol\n  - private/protocol/query\n  - private/protocol/query/queryutil\n  - private/protocol/rest\n  - private/protocol/restxml\n  - private/protocol/xml/xmlutil\n  - private/waiter\n  - service/s3\n  - service/sts\n- name: github.com/Azure/go-ansiterm\n  version: fa152c58bc15761d0200cb75fe958b89a9d4888e\n  subpackages:\n  - winterm\n- name: github.com/bgentry/go-netrc\n  version: 9fd32a8b3d3d3f9d43c341bfe098430e07609480\n  subpackages:\n  - netrc\n- name: github.com/braintree/manners\n  version: 82a8879fc5fd0381fa8b2d8033b19bf255252088\n  subpackages:\n  - test_helpers\n- name: github.com/BurntSushi/toml\n  version: f0aeabca5a127c4078abb8c8d64298b147264b55\n- name: github.com/davecgh/go-spew\n  version: 5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\n  subpackages:\n  - spew\n- name: github.com/deckarep/golang-set\n  version: 52ba7f28f319e9d560acbf47c7fcf9b9ee7aa7d3\n- name: github.com/dgrijalva/jwt-go\n  version: d2709f9f1f31ebcda9651b03077758c1f3a0018c\n- name: github.com/docker/docker\n  version: 1f9b3ef9e9c74c2905780ac5347d018646a20022\n  subpackages:\n  - api/types\n  - api/types/blkiodev\n  - api/types/container\n  - api/types/filters\n  - api/types/mount\n  - api/types/network\n  - api/types/registry\n  - api/types/strslice\n  - api/types/swarm\n  - api/types/versions\n  - opts\n  - pkg/archive\n  - pkg/fileutils\n  - pkg/homedir\n  - pkg/idtools\n  - pkg/ioutils\n  - pkg/jsonlog\n  - pkg/jsonmessage\n  - pkg/longpath\n  - pkg/pools\n  - pkg/promise\n  - pkg/stdcopy\n  - pkg/system\n  - pkg/term\n  - pkg/term/windows\n- name: github.com/docker/go-connections\n  version: 1494b6df4050e60923d68cd8cc6a19e7af9f1c01\n  subpackages:\n  - nat\n- name: github.com/docker/go-units\n  version: eb879ae3e2b84e2a142af415b679ddeda47ec71c\n- name: github.com/fgrid/uuid\n  version: 6f72a2d331c927473b9b19f590d43ccb5018c844\n- name: github.com/fsnotify/fsnotify\n  version: 629574ca2a5df945712d3079857300b5e4da0236\n- name: github.com/fsouza/go-dockerclient\n  version: 991e78ed454ce7de73ef3c559008095802e51fd2\n- name: github.com/go-ini/ini\n  version: 2ba15ac2dc9cdf88c110ec2dc0ced7fa45f5678c\n- name: github.com/golang/protobuf\n  version: 888eb0692c857ec880338addf316bd662d5e630e\n  subpackages:\n  - jsonpb\n  - proto\n  - protoc-gen-go/descriptor\n  - ptypes/empty\n- name: github.com/grpc-ecosystem/grpc-gateway\n  version: a8f25bd1ab549f8b87afd48aa9181221e9d439bb\n  subpackages:\n  - runtime\n  - runtime/internal\n  - third_party/googleapis/google/api\n  - utilities\n- name: github.com/hashicorp/errwrap\n  version: 7554cd9344cec97297fa6649b055a8c98c2a1e55\n- name: github.com/hashicorp/go-cleanhttp\n  version: ad28ea4487f05916463e2423a55166280e8254b5\n- name: github.com/hashicorp/go-getter\n  version: 2fbd997432e72fe36060c8f07ec1eaf98d098177\n  subpackages:\n  - helper/url\n- name: github.com/hashicorp/go-multierror\n  version: d30f09973e19c1dfcd120b2d9c4f168e68d6b5d5\n- name: github.com/hashicorp/hcl\n  version: 6f5bfed9a0a22222fbe4e731ae3481730ba41e93\n  subpackages:\n  - hcl/ast\n  - hcl/parser\n  - hcl/printer\n  - hcl/scanner\n  - hcl/strconv\n  - hcl/token\n  - json/parser\n  - json/scanner\n  - json/token\n- name: github.com/hashicorp/logutils\n  version: 0dc08b1671f34c4250ce212759ebd880f743d883\n- name: github.com/hashicorp/terraform\n  version: dce175459a9b0bc1f42b1b0f919aae294a73a138\n  subpackages:\n  - dag\n  - vendor/github.com/hashicorp/errwrap\n  - vendor/github.com/hashicorp/go-multierror\n- name: github.com/inconshreveable/mousetrap\n  version: 76626ae9c91c4f2a10f34cad8ce83ea42c93bb75\n- name: github.com/jmespath/go-jmespath\n  version: bd40a432e4c76585ef6b72d3fd96fb9b6dc7b68d\n- name: github.com/kardianos/osext\n  version: 29ae4ffbc9a6fe9fb2bc5029050ce6996ea1d3bc\n- name: github.com/magiconair/properties\n  version: c265cfa48dda6474e208715ca93e987829f572f8\n- name: github.com/mattn/go-isatty\n  version: 56b76bdf51f7708750eac80fa38b952bb9f32639\n- name: github.com/Microsoft/go-winio\n  version: ce2922f643c8fd76b46cadc7f404a06282678b34\n- name: github.com/mitchellh/go-homedir\n  version: 756f7b183b7ab78acdbbee5c7f392838ed459dda\n- name: github.com/mitchellh/hashstructure\n  version: b098c52ef6beab8cd82bc4a32422cf54b890e8fa\n- name: github.com/mitchellh/mapstructure\n  version: d2dd0262208475919e1a362f675cfc0e7c10e905\n- name: github.com/opencontainers/runc\n  version: 9b53b362e2036d3d4c41bca62edf0482b80665a6\n  subpackages:\n  - libcontainer/system\n  - libcontainer/user\n- name: github.com/pkg/errors\n  version: cc5fbb72d9b1b5f664ff3c11ed7896ee23ad9276\n- name: github.com/pmezard/go-difflib\n  version: 792786c7400a136282c1664665ae0a8db921c6c2\n  subpackages:\n  - difflib\n- name: github.com/Sirupsen/logrus\n  version: d26492970760ca5d33129d2d799e34be5c4782eb\n- name: github.com/spf13/cast\n  version: 27b586b42e29bec072fe7379259cc719e1289da6\n- name: github.com/spf13/cobra\n  version: f368244301305f414206f889b1735a54cfc8bde8\n- name: github.com/spf13/jwalterweatherman\n  version: 33c24e77fb80341fe7130ee7c594256ff08ccc46\n- name: github.com/spf13/pflag\n  version: cb88ea77998c3f024757528e3305022ab50b43be\n- name: github.com/spf13/viper\n  version: d8a428b8a30606e1d0b355d91edf282609ade1a6\n- name: github.com/streamrail/concurrent-map\n  version: 8bf1e9bacbf65b10c81d0f4314cf2b1ebef728b5\n- name: github.com/stretchr/objx\n  version: cbeaeb16a013161a98496fad62933b1d21786672\n- name: github.com/stretchr/testify\n  version: c5d7a69bf8a2c9c374798160849c071093e41dd1\n  subpackages:\n  - assert\n  - mock\n  - require\n  - vendor/github.com/davecgh/go-spew/spew\n  - vendor/github.com/pmezard/go-difflib/difflib\n- name: golang.org/x/crypto\n  version: b35ccbc95a0eaae49fb65c5d627cb7149ed8d1ab\n  subpackages:\n  - cast5\n  - openpgp\n  - openpgp/armor\n  - openpgp/elgamal\n  - openpgp/errors\n  - openpgp/packet\n  - openpgp/s2k\n- name: golang.org/x/net\n  version: 4876518f9e71663000c348837735820161a42df7\n  subpackages:\n  - context\n  - context/ctxhttp\n  - http2\n  - http2/hpack\n  - internal/timeseries\n  - trace\n- name: golang.org/x/sync\n  version: 1ae7c7b29e06598039be46c5083819ba6fd7a97e\n  subpackages:\n  - errgroup\n- name: golang.org/x/sys\n  version: d4feaf1a7e61e1d9e79e6c4e76c6349e9cab0a03\n  subpackages:\n  - unix\n  - windows\n- name: google.golang.org/grpc\n  version: 777daa17ff9b5daef1cfdf915088a2ada3332bf0\n  subpackages:\n  - codes\n  - credentials\n  - grpclog\n  - internal\n  - metadata\n  - naming\n  - peer\n  - transport\n- name: gopkg.in/yaml.v2\n  version: a83829b6f1293c91addabc89d0571c246397bbf4\ntestImports: []. ",
    "joshmello": "Any fix for this? Keep running into it.. ",
    "Hades32": "@penhauer-xiao why did you close the issue? I can't see why glide doesn't just force delete this crappy file :(. ",
    "piteur": "Soooo\u2026 does this will even being merged ?. @mattfarina - cool, thanks :). ",
    "ozbillwang": "@mattfarina \nhere is a usercase for you. \nI have issue when run in Jenkins job with glide, jenkins need isolation environment between each job, hard code cache to ~/.glide/cache as share folder is not good design. It will generate unforecast problem. \nCan we have something like virtualenv in python?\nvirtualenv ENV\n\nSo all cached, packages are saved under currently ENV folder. @sdboyer \nThanks, I will use --home from now on. . @sdboyer \nBefore you close the ticket, could we have a system environment varaible to set the glide cache path? \n. ",
    "myleshorton": "Hey sorry for the delay @mattfarina. Here's more info:\n$ glide --version\nglide version v0.12.3\nRunning Sierra:\n$ uname -a\nDarwin MacBook-Pro-4.local 16.0.0 Darwin Kernel Version 16.0.0: Mon Aug 29 17:56:20 PDT 2016; root:xnu-3789.1.32~3/RELEASE_X86_64 x86_64\nThat's the odd thing -- glide up appears to run successfully every time with no errors. I'll try to get more verbose output next time I see it.\n. Yup -- saw this again just now. Master for getlantern/interceptor just changed. getlantern/flashlight (private) depends on it (so maybe it's something with private repos?), and running glide up did not pick up the change. Here's the debug output from glide up:\n$ glide --debug up\n[DEBUG] No mirrors.yaml file exists\n[INFO]  Downloading dependencies. Please wait...\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-getlantern-edgedetect\n[DEBUG] Setting up the cache directory\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[INFO]  --> Fetching updates for github.com/getlantern/bandwidth.\n[INFO]  --> Fetching updates for github.com/davecgh/go-spew.\n[DEBUG] Locking https-github.com-getlantern-golog\n[INFO]  --> Fetching updates for github.com/getlantern/fronted.\n[INFO]  --> Fetching updates for github.com/getlantern/golog.\n[DEBUG] Locking https-github.com-getlantern-detour\n[INFO]  --> Fetching updates for github.com/getlantern/detour.\n[DEBUG] Locking https-github.com-getlantern-balancer\n[INFO]  --> Fetching updates for github.com/getlantern/balancer.\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-obfs4.git\n[INFO]  --> Fetching updates for git.torproject.org/pluggable-transports/obfs4.git.\n[DEBUG] Locking https-github.com-getlantern-borda\n[INFO]  --> Fetching updates for github.com/getlantern/borda.\n[DEBUG] Locking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-go-loggly\n[INFO]  --> Fetching updates for github.com/getlantern/go-loggly.\n[DEBUG] Locking https-github.com-getlantern-hidden\n[INFO]  --> Fetching updates for github.com/getlantern/hidden.\n[INFO]  --> Fetching updates for github.com/armon/go-socks5.\n[INFO]  --> Fetching updates for git.torproject.org/pluggable-transports/goptlib.git.\n[INFO]  --> Fetching updates for github.com/getlantern/geolookup.\n[INFO]  --> Fetching updates for github.com/getlantern/appdir.\n[INFO]  --> Fetching updates for github.com/getlantern/autoupdate.\n[INFO]  --> Fetching updates for github.com/getlantern/i18n.\n[INFO]  --> Fetching updates for github.com/getlantern/edgedetect.\n[INFO]  --> Fetching updates for github.com/getlantern/eventual.\n[INFO]  --> Fetching updates for github.com/getlantern/errors.\n[INFO]  --> Fetching updates for github.com/getlantern/filepersist.\n[DEBUG] Unlocking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-idletiming\n[INFO]  --> Fetching updates for github.com/getlantern/idletiming.\n[DEBUG] Unlocking https-github.com-getlantern-golog\n[DEBUG] Locking https-github.com-getlantern-jibber_jabber\n[INFO]  --> Fetching updates for github.com/getlantern/jibber_jabber.\n[DEBUG] Unlocking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-getlantern-keyman\n[INFO]  --> Fetching updates for github.com/getlantern/keyman.\n[DEBUG] Unlocking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-launcher\n[INFO]  --> Fetching updates for github.com/getlantern/launcher.\n[DEBUG] Unlocking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-netx\n[INFO]  --> Fetching updates for github.com/getlantern/netx.\n[DEBUG] Unlocking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-getlantern-notifier\n[INFO]  --> Fetching updates for github.com/getlantern/notifier.\n[DEBUG] Unlocking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-getlantern-ops\n[INFO]  --> Fetching updates for github.com/getlantern/ops.\n[DEBUG] Unlocking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-osversion\n[INFO]  --> Fetching updates for github.com/getlantern/osversion.\n[DEBUG] Unlocking https-github.com-getlantern-hidden\n[DEBUG] Unlocking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-pac\n[DEBUG] Locking https-github.com-getlantern-pro-server-client\n[INFO]  --> Fetching updates for github.com/getlantern/pac.\n[INFO]  --> Fetching updates for github.com/getlantern/pro-server-client.\n[DEBUG] Unlocking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-getlantern-profiling\n[INFO]  --> Fetching updates for github.com/getlantern/profiling.\n[DEBUG] Unlocking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-proxiedsites\n[INFO]  --> Fetching updates for github.com/getlantern/proxiedsites.\n[DEBUG] Unlocking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-proxybench\n[INFO]  --> Fetching updates for github.com/getlantern/proxybench.\n[DEBUG] Unlocking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-getlantern-rot13\n[INFO]  --> Fetching updates for github.com/getlantern/rot13.\n[DEBUG] Unlocking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-rotator\n[INFO]  --> Fetching updates for github.com/getlantern/rotator.\n[DEBUG] Unlocking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-getlantern-systray\n[INFO]  --> Fetching updates for github.com/getlantern/systray.\n[DEBUG] Unlocking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-tarfs\n[INFO]  --> Fetching updates for github.com/getlantern/tarfs.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-github.com-getlantern-tlsdialer\n[INFO]  --> Fetching updates for github.com/getlantern/tlsdialer.\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-getlantern-uuid\n[INFO]  --> Fetching updates for github.com/getlantern/uuid.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-getlantern-wfilter\n[INFO]  --> Fetching updates for github.com/getlantern/wfilter.\n[DEBUG] Unlocking https-github.com-getlantern-jibber_jabber\n[DEBUG] Locking https-github.com-getlantern-withtimeout\n[INFO]  --> Fetching updates for github.com/getlantern/withtimeout.\n[DEBUG] Unlocking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-getlantern-yaml\n[INFO]  --> Fetching updates for github.com/getlantern/yaml.\n[DEBUG] Unlocking https-github.com-getlantern-launcher\n[DEBUG] Locking https-github.com-gorilla-websocket\n[INFO]  --> Fetching updates for github.com/gorilla/websocket.\n[DEBUG] Unlocking https-github.com-getlantern-keyman\n[DEBUG] Locking https-github.com-kardianos-osext\n[INFO]  --> Fetching updates for github.com/kardianos/osext.\n[DEBUG] Unlocking https-github.com-getlantern-netx\n[DEBUG] Locking https-github.com-mitchellh-panicwrap\n[INFO]  --> Fetching updates for github.com/mitchellh/panicwrap.\n[DEBUG] Unlocking https-github.com-getlantern-notifier\n[DEBUG] Locking https-github.com-oxtoacart-bpool\n[INFO]  --> Fetching updates for github.com/oxtoacart/bpool.\n[DEBUG] Unlocking https-github.com-getlantern-osversion\n[DEBUG] Locking https-github.com-skratchdot-open-golang\n[INFO]  --> Fetching updates for github.com/skratchdot/open-golang.\n[DEBUG] Unlocking https-github.com-getlantern-pac\n[DEBUG] Locking https-golang.org-x-net\n[INFO]  --> Fetching updates for golang.org/x/net.\n[DEBUG] Unlocking https-github.com-getlantern-ops\n[DEBUG] Locking https-github.com-mailgun-oxy\n[INFO]  --> Fetching updates for github.com/mailgun/oxy.\n[DEBUG] Unlocking https-github.com-getlantern-proxybench\n[DEBUG] Locking https-github.com-vulcand-oxy\n[INFO]  --> Fetching updates for github.com/vulcand/oxy.\n[DEBUG] Unlocking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-getlantern-http-proxy-lantern\n[INFO]  --> Fetching updates for github.com/getlantern/http-proxy-lantern.\n[DEBUG] Unlocking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-getlantern-http-proxy\n[INFO]  --> Fetching updates for github.com/getlantern/http-proxy.\n[DEBUG] Unlocking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-getlantern-fdcount\n[INFO]  --> Fetching updates for github.com/getlantern/fdcount.\n[DEBUG] Unlocking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-buuid\n[INFO]  --> Fetching updates for github.com/getlantern/buuid.\n[DEBUG] Unlocking https-github.com-getlantern-systray\n[DEBUG] Locking https-github.com-getlantern-bytecounting\n[INFO]  --> Fetching updates for github.com/getlantern/bytecounting.\n[DEBUG] Unlocking https-github.com-getlantern-tarfs\n[DEBUG] Locking https-github.com-getlantern-checkfallbacks\n[INFO]  --> Fetching updates for github.com/getlantern/checkfallbacks.\n[DEBUG] Unlocking https-github.com-getlantern-rot13\n[DEBUG] Locking https-github.com-getlantern-connpool\n[INFO]  --> Fetching updates for github.com/getlantern/connpool.\n[DEBUG] Unlocking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-getlantern-deepcopy\n[INFO]  --> Fetching updates for github.com/getlantern/deepcopy.\n[DEBUG] Unlocking https-github.com-getlantern-uuid\n[DEBUG] Locking https-github.com-getlantern-pathreflect\n[INFO]  --> Fetching updates for github.com/getlantern/pathreflect.\n[DEBUG] Unlocking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-github.com-getlantern-measured\n[INFO]  --> Fetching updates for github.com/getlantern/measured.\n[DEBUG] Unlocking https-github.com-getlantern-withtimeout\n[DEBUG] Locking https-github.com-getlantern-tlsdefaults\n[INFO]  --> Fetching updates for github.com/getlantern/tlsdefaults.\n[DEBUG] Unlocking https-github.com-getlantern-yaml\n[DEBUG] Locking https-github.com-getlantern-waitforserver\n[INFO]  --> Fetching updates for github.com/getlantern/waitforserver.\n[DEBUG] Unlocking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-stretchr-testify\n[DEBUG] Unlocking https-github.com-kardianos-osext\n[INFO]  --> Fetching updates for github.com/stretchr/testify.\n[DEBUG] Locking https-github.com-getlantern-grtrack\n[INFO]  --> Fetching updates for github.com/getlantern/grtrack.\n[DEBUG] Unlocking https-github.com-skratchdot-open-golang\n[DEBUG] Locking https-github.com-golang-groupcache\n[INFO]  --> Fetching updates for github.com/golang/groupcache.\n[DEBUG] Unlocking https-github.com-oxtoacart-bpool\n[DEBUG] Locking https-github.com-gorilla-context\n[INFO]  --> Fetching updates for github.com/gorilla/context.\n[DEBUG] Unlocking https-github.com-mitchellh-panicwrap\n[DEBUG] Locking https-github.com-hashicorp-golang-lru\n[INFO]  --> Fetching updates for github.com/hashicorp/golang-lru.\n[DEBUG] Unlocking https-github.com-mailgun-oxy\n[DEBUG] Locking https-github.com-mxk-go-flowrate\n[INFO]  --> Fetching updates for github.com/mxk/go-flowrate.\n[DEBUG] Unlocking https-github.com-vulcand-oxy\n[DEBUG] Locking https-github.com-rcrowley-go-metrics\n[INFO]  --> Fetching updates for github.com/rcrowley/go-metrics.\n[DEBUG] Unlocking https-github.com-getlantern-fdcount\n[DEBUG] Locking https-github.com-xtaci-kcp-go\n[INFO]  --> Fetching updates for github.com/xtaci/kcp-go.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy\n[DEBUG] Locking https-github.com-klauspost-crc32\n[INFO]  --> Fetching updates for github.com/klauspost/crc32.\n[DEBUG] Unlocking https-github.com-getlantern-bytecounting\n[DEBUG] Locking https-github.com-klauspost-reedsolomon\n[INFO]  --> Fetching updates for github.com/klauspost/reedsolomon.\n[DEBUG] Unlocking https-github.com-getlantern-buuid\n[DEBUG] Locking https-github.com-pkg-errors\n[INFO]  --> Fetching updates for github.com/pkg/errors.\n[DEBUG] Unlocking https-github.com-getlantern-checkfallbacks\n[DEBUG] Locking https-github.com-klauspost-cpuid\n[INFO]  --> Fetching updates for github.com/klauspost/cpuid.\n[DEBUG] Unlocking https-github.com-getlantern-connpool\n[DEBUG] Locking https-github.com-ua-parser-uap-go\n[INFO]  --> Fetching updates for github.com/ua-parser/uap-go.\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[INFO]  --> Fetching updates for github.com/Sirupsen/logrus.\n[DEBUG] Unlocking https-github.com-getlantern-deepcopy\n[DEBUG] Locking https-github.com-getlantern-interceptor\n[INFO]  --> Fetching updates for github.com/getlantern/interceptor.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Unlocking https-github.com-getlantern-pathreflect\n[DEBUG] Unlocking https-github.com-getlantern-measured\n[DEBUG] Unlocking https-github.com-getlantern-tlsdefaults\n[DEBUG] Unlocking https-github.com-getlantern-waitforserver\n[DEBUG] Unlocking https-github.com-getlantern-grtrack\n[DEBUG] Unlocking https-github.com-hashicorp-golang-lru\n[DEBUG] Unlocking https-github.com-gorilla-context\n[DEBUG] Unlocking https-github.com-golang-groupcache\n[DEBUG] Unlocking https-github.com-mxk-go-flowrate\n[DEBUG] Unlocking https-github.com-klauspost-crc32\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[DEBUG] Unlocking https-github.com-klauspost-reedsolomon\n[DEBUG] Unlocking https-github.com-rcrowley-go-metrics\n[DEBUG] Unlocking https-github.com-ua-parser-uap-go\n[DEBUG] Unlocking https-github.com-klauspost-cpuid\n[DEBUG] Unlocking https-github.com-xtaci-kcp-go\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[DEBUG] Unlocking https-github.com-getlantern-interceptor\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-golog\n[DEBUG] Locking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-getlantern-hidden\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-getlantern-filepersist\n[DEBUG] Unlocking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-jibber_jabber\n[DEBUG] Unlocking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-getlantern-keyman\n[DEBUG] Unlocking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-launcher\n[DEBUG] Unlocking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-netx\n[DEBUG] Unlocking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-notifier\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-github.com-getlantern-ops\n[DEBUG] Locking https-github.com-getlantern-osversion\n[DEBUG] Unlocking https-github.com-getlantern-hidden\n[DEBUG] Locking https-github.com-getlantern-pac\n[DEBUG] Unlocking https-github.com-getlantern-golog\n[DEBUG] Unlocking https-github.com-getlantern-launcher\n[DEBUG] Unlocking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-getlantern-proxiedsites\n[DEBUG] Unlocking https-github.com-getlantern-jibber_jabber\n[DEBUG] Locking https-github.com-getlantern-proxybench\n[DEBUG] Locking https-github.com-getlantern-profiling\n[DEBUG] Unlocking https-github.com-getlantern-ops\n[DEBUG] Unlocking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-getlantern-rot13\n[DEBUG] Unlocking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-getlantern-systray\n[DEBUG] Unlocking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-tarfs\n[DEBUG] Unlocking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-tlsdialer\n[DEBUG] Unlocking https-github.com-getlantern-keyman\n[DEBUG] Locking https-github.com-getlantern-uuid\n[DEBUG] Unlocking https-github.com-getlantern-netx\n[DEBUG] Unlocking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-github.com-getlantern-withtimeout\n[DEBUG] Unlocking https-github.com-getlantern-detour\n[DEBUG] Unlocking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-getlantern-yaml\n[DEBUG] Unlocking https-github.com-getlantern-systray\n[DEBUG] Locking https-github.com-kardianos-osext\n[DEBUG] Unlocking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-mitchellh-panicwrap\n[DEBUG] Unlocking https-github.com-getlantern-uuid\n[DEBUG] Locking https-github.com-oxtoacart-bpool\n[DEBUG] Unlocking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-skratchdot-open-golang\n[DEBUG] Unlocking https-github.com-getlantern-rot13\n[DEBUG] Locking https-golang.org-x-net\n[DEBUG] Unlocking https-github.com-getlantern-filepersist\n[DEBUG] Unlocking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-vulcand-oxy\n[DEBUG] Unlocking https-github.com-getlantern-osversion\n[DEBUG] Locking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Locking https-github.com-mailgun-oxy\n[DEBUG] Unlocking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-http-proxy\n[DEBUG] Unlocking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-getlantern-fdcount\n[DEBUG] Unlocking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-getlantern-buuid\n[DEBUG] Unlocking https-github.com-getlantern-notifier\n[DEBUG] Locking https-github.com-getlantern-bytecounting\n[DEBUG] Unlocking https-github.com-getlantern-proxybench\n[DEBUG] Locking https-github.com-getlantern-checkfallbacks\n[DEBUG] Unlocking https-github.com-skratchdot-open-golang\n[DEBUG] Locking https-github.com-getlantern-connpool\n[DEBUG] Unlocking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-deepcopy\n[DEBUG] Unlocking https-github.com-getlantern-fdcount\n[DEBUG] Locking https-github.com-getlantern-pathreflect\n[DEBUG] Unlocking https-github.com-getlantern-pac\n[DEBUG] Locking https-github.com-getlantern-measured\n[DEBUG] Unlocking https-github.com-oxtoacart-bpool\n[DEBUG] Locking https-github.com-getlantern-tlsdefaults\n[DEBUG] Unlocking https-github.com-kardianos-osext\n[DEBUG] Locking https-github.com-getlantern-waitforserver\n[DEBUG] Unlocking https-github.com-getlantern-connpool\n[DEBUG] Locking https-github.com-stretchr-testify\n[DEBUG] Unlocking https-github.com-vulcand-oxy\n[DEBUG] Locking https-github.com-getlantern-grtrack\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Locking https-github.com-golang-groupcache\n[DEBUG] Unlocking https-github.com-getlantern-withtimeout\n[DEBUG] Locking https-github.com-gorilla-context\n[DEBUG] Unlocking https-github.com-getlantern-tarfs\n[DEBUG] Locking https-github.com-hashicorp-golang-lru\n[DEBUG] Unlocking https-github.com-getlantern-grtrack\n[DEBUG] Locking https-github.com-mxk-go-flowrate\n[DEBUG] Unlocking https-github.com-getlantern-pathreflect\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Locking https-github.com-xtaci-kcp-go\n[DEBUG] Unlocking https-github.com-getlantern-deepcopy\n[DEBUG] Locking https-github.com-klauspost-crc32\n[DEBUG] Locking https-github.com-rcrowley-go-metrics\n[DEBUG] Unlocking https-github.com-getlantern-buuid\n[DEBUG] Unlocking https-github.com-getlantern-measured\n[DEBUG] Locking https-github.com-pkg-errors\n[DEBUG] Unlocking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-klauspost-cpuid\n[DEBUG] Unlocking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-github.com-ua-parser-uap-go\n[DEBUG] Locking https-github.com-klauspost-reedsolomon\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[DEBUG] Unlocking https-github.com-getlantern-tlsdefaults\n[DEBUG] Locking https-github.com-getlantern-interceptor\n[DEBUG] Unlocking https-github.com-getlantern-bytecounting\n[DEBUG] Unlocking https-github.com-hashicorp-golang-lru\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Unlocking https-github.com-getlantern-yaml\n[DEBUG] Unlocking https-github.com-getlantern-waitforserver\n[DEBUG] Unlocking https-github.com-gorilla-context\n[DEBUG] Unlocking https-github.com-xtaci-kcp-go\n[DEBUG] Unlocking https-github.com-getlantern-checkfallbacks\n[DEBUG] Unlocking https-github.com-golang-groupcache\n[DEBUG] Unlocking https-github.com-ua-parser-uap-go\n[DEBUG] Unlocking https-github.com-mitchellh-panicwrap\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[DEBUG] Unlocking https-github.com-rcrowley-go-metrics\n[DEBUG] Unlocking https-github.com-klauspost-cpuid\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[DEBUG] Unlocking https-github.com-mailgun-oxy\n[DEBUG] Unlocking https-github.com-klauspost-reedsolomon\n[DEBUG] Unlocking https-github.com-getlantern-interceptor\n[DEBUG] Unlocking https-github.com-mxk-go-flowrate\n[DEBUG] Unlocking https-github.com-klauspost-crc32\n[INFO]  Resolving imports\n[DEBUG] Resolving local dependencies\n[DEBUG] Adding local Import github.com/getlantern/appdir to queue\n[DEBUG] Adding local Import github.com/getlantern/fronted to queue\n[DEBUG] Adding local Import github.com/getlantern/golog to queue\n[DEBUG] Adding local Import github.com/getlantern/keyman to queue\n[DEBUG] Adding local Import github.com/kardianos/osext to queue\n[DEBUG] Adding local Import github.com/getlantern/bandwidth to queue\n[DEBUG] Adding local Import github.com/getlantern/detour to queue\n[DEBUG] Adding local Import github.com/getlantern/filepersist to queue\n[DEBUG] Adding local Import github.com/getlantern/i18n to queue\n[DEBUG] Adding local Import github.com/getlantern/launcher to queue\n[DEBUG] Adding local Import github.com/getlantern/notifier to queue\n[DEBUG] Adding local Import github.com/getlantern/pac to queue\n[DEBUG] Adding local Import github.com/getlantern/pro-server-client/go-client to queue\n[DEBUG] Adding local Import github.com/getlantern/profiling to queue\n[DEBUG] Adding local Import github.com/getlantern/uuid to queue\n[DEBUG] Adding local Import github.com/getlantern/yaml to queue\n[DEBUG] Adding local Import github.com/getlantern/autoupdate to queue\n[DEBUG] Adding local Import github.com/getlantern/errors to queue\n[DEBUG] Adding local Import github.com/getlantern/ops to queue\n[DEBUG] Adding local Import git.torproject.org/pluggable-transports/goptlib.git to queue\n[DEBUG] Adding local Import git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 to queue\n[DEBUG] Adding local Import github.com/armon/go-socks5 to queue\n[DEBUG] Adding local Import github.com/getlantern/cmux to queue\n[DEBUG] Adding local Import github.com/getlantern/eventual to queue\n[DEBUG] Adding local Import github.com/getlantern/hidden to queue\n[DEBUG] Adding local Import github.com/getlantern/idletiming to queue\n[DEBUG] Adding local Import github.com/getlantern/interceptor to queue\n[DEBUG] Adding local Import github.com/getlantern/netx to queue\n[DEBUG] Adding local Import github.com/getlantern/snappyconn to queue\n[DEBUG] Adding local Import github.com/getlantern/tlsdialer to queue\n[DEBUG] Adding local Import github.com/getlantern/withtimeout to queue\n[DEBUG] Adding local Import github.com/oxtoacart/bpool to queue\n[DEBUG] Adding local Import github.com/xtaci/kcp-go to queue\n[DEBUG] Adding local Import golang.org/x/net/context to queue\n[DEBUG] Adding local Import github.com/getlantern/proxiedsites to queue\n[DEBUG] Adding local Import github.com/getlantern/rot13 to queue\n[DEBUG] Adding local Import github.com/getlantern/tarfs to queue\n[DEBUG] Adding local Import github.com/getlantern/geolookup to queue\n[DEBUG] Adding local Import github.com/getlantern/borda/client to queue\n[DEBUG] Adding local Import github.com/getlantern/go-loggly to queue\n[DEBUG] Adding local Import github.com/getlantern/jibber_jabber to queue\n[DEBUG] Adding local Import github.com/getlantern/osversion to queue\n[DEBUG] Adding local Import github.com/getlantern/proxybench to queue\n[DEBUG] Adding local Import github.com/getlantern/rotator to queue\n[DEBUG] Adding local Import github.com/getlantern/wfilter to queue\n[DEBUG] Adding local Import github.com/getlantern/systray to queue\n[DEBUG] Adding local Import github.com/mitchellh/panicwrap to queue\n[DEBUG] Adding local Import github.com/davecgh/go-spew/spew to queue\n[DEBUG] Adding local Import github.com/getlantern/edgedetect to queue\n[DEBUG] Adding local Import github.com/gorilla/websocket to queue\n[DEBUG] Adding local Import github.com/skratchdot/open-golang/open to queue\n[DEBUG] Resolving import path\n[DEBUG] Trying to open github.com/getlantern/appdir (/Users/afisk/.glide/cache/src/https-github.com-getlantern-appdir)\n[DEBUG] Trying to open github.com/getlantern/fronted (/Users/afisk/.glide/cache/src/https-github.com-getlantern-fronted)\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/eventual\n[DEBUG] In vendor: github.com/getlantern/eventual\n[DEBUG] Marking github.com/getlantern/eventual to be scanned.\n[DEBUG] Dependency github.com/getlantern/eventual has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/eventual has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Marking github.com/getlantern/golog to be scanned.\n[DEBUG] Dependency github.com/getlantern/golog has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/golog has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Marking github.com/getlantern/idletiming to be scanned.\n[DEBUG] Dependency github.com/getlantern/idletiming has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/idletiming has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/keyman\n[DEBUG] In vendor: github.com/getlantern/keyman\n[DEBUG] Marking github.com/getlantern/keyman to be scanned.\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/netx\n[DEBUG] In vendor: github.com/getlantern/netx\n[DEBUG] Marking github.com/getlantern/netx to be scanned.\n[DEBUG] Dependency github.com/getlantern/netx has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/netx has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/fronted imports github.com/getlantern/tlsdialer\n[DEBUG] In vendor: github.com/getlantern/tlsdialer\n[DEBUG] Marking github.com/getlantern/tlsdialer to be scanned.\n[DEBUG] Dependency github.com/getlantern/tlsdialer has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/tlsdialer has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/golog (/Users/afisk/.glide/cache/src/https-github.com-getlantern-golog)\n[DEBUG] Package github.com/getlantern/golog imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Marking github.com/getlantern/errors to be scanned.\n[DEBUG] Dependency github.com/getlantern/errors has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/errors has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/golog imports github.com/getlantern/hidden\n[DEBUG] In vendor: github.com/getlantern/hidden\n[DEBUG] Marking github.com/getlantern/hidden to be scanned.\n[DEBUG] Dependency github.com/getlantern/hidden has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/hidden has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/golog imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Marking github.com/getlantern/ops to be scanned.\n[DEBUG] Dependency github.com/getlantern/ops has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/ops has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/golog imports github.com/oxtoacart/bpool\n[DEBUG] In vendor: github.com/oxtoacart/bpool\n[DEBUG] Marking github.com/oxtoacart/bpool to be scanned.\n[DEBUG] Dependency github.com/oxtoacart/bpool has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/oxtoacart/bpool has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/keyman (/Users/afisk/.glide/cache/src/https-github.com-getlantern-keyman)\n[DEBUG] Package github.com/getlantern/keyman imports github.com/getlantern/byteexec\n[DEBUG] In vendor: github.com/getlantern/byteexec\n[DEBUG] Marking github.com/getlantern/byteexec to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/byteexec.\n[DEBUG] Package github.com/getlantern/keyman imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/keyman imports github.com/getlantern/keyman/certimporter\n[DEBUG] In vendor: github.com/getlantern/keyman/certimporter\n[DEBUG] Marking github.com/getlantern/keyman/certimporter to be scanned.\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/kardianos/osext (/Users/afisk/.glide/cache/src/https-github.com-kardianos-osext)\n[DEBUG] Trying to open github.com/getlantern/bandwidth (/Users/afisk/.glide/cache/src/https-github.com-getlantern-bandwidth)\n[DEBUG] Package github.com/getlantern/bandwidth imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/detour (/Users/afisk/.glide/cache/src/https-github.com-getlantern-detour)\n[DEBUG] Package github.com/getlantern/detour imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/detour imports github.com/getlantern/netx\n[DEBUG] In vendor: github.com/getlantern/netx\n[DEBUG] Trying to open github.com/getlantern/filepersist (/Users/afisk/.glide/cache/src/https-github.com-getlantern-filepersist)\n[DEBUG] Package github.com/getlantern/filepersist imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/i18n (/Users/afisk/.glide/cache/src/https-github.com-getlantern-i18n)\n[DEBUG] Package github.com/getlantern/i18n imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/i18n imports github.com/getlantern/jibber_jabber\n[DEBUG] In vendor: github.com/getlantern/jibber_jabber\n[DEBUG] Marking github.com/getlantern/jibber_jabber to be scanned.\n[DEBUG] Dependency github.com/getlantern/jibber_jabber has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/jibber_jabber has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/launcher (/Users/afisk/.glide/cache/src/https-github.com-getlantern-launcher)\n[DEBUG] Package github.com/getlantern/launcher imports github.com/getlantern/appdir\n[DEBUG] In vendor: github.com/getlantern/appdir\n[DEBUG] Package github.com/getlantern/launcher imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/launcher imports github.com/getlantern/gowin\n[DEBUG] In vendor: github.com/getlantern/gowin\n[DEBUG] Marking github.com/getlantern/gowin to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/gowin.\n[DEBUG] Package github.com/getlantern/launcher imports github.com/kardianos/osext\n[DEBUG] In vendor: github.com/kardianos/osext\n[DEBUG] Trying to open github.com/getlantern/notifier (/Users/afisk/.glide/cache/src/https-github.com-getlantern-notifier)\n[DEBUG] Package github.com/getlantern/notifier imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/notifier imports github.com/getlantern/notifier/osx\n[DEBUG] In vendor: github.com/getlantern/notifier/osx\n[DEBUG] Marking github.com/getlantern/notifier/osx to be scanned.\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/notifier imports github.com/getlantern/notifier/win\n[DEBUG] In vendor: github.com/getlantern/notifier/win\n[DEBUG] Marking github.com/getlantern/notifier/win to be scanned.\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/notifier imports github.com/skratchdot/open-golang/open\n[DEBUG] In vendor: github.com/skratchdot/open-golang/open\n[DEBUG] Marking github.com/skratchdot/open-golang/open to be scanned.\n[DEBUG] Dependency github.com/skratchdot/open-golang has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/skratchdot/open-golang has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/pac (/Users/afisk/.glide/cache/src/https-github.com-getlantern-pac)\n[DEBUG] Package github.com/getlantern/pac imports github.com/getlantern/byteexec\n[DEBUG] In vendor: github.com/getlantern/byteexec\n[DEBUG] Package github.com/getlantern/pac imports github.com/getlantern/elevate\n[DEBUG] In vendor: github.com/getlantern/elevate\n[DEBUG] Marking github.com/getlantern/elevate to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/elevate.\n[DEBUG] Package github.com/getlantern/pac imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/pro-server-client/go-client (/Users/afisk/.glide/cache/src/https-github.com-getlantern-pro-server-client/go-client)\n[DEBUG] Package github.com/getlantern/pro-server-client/go-client imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/profiling (/Users/afisk/.glide/cache/src/https-github.com-getlantern-profiling)\n[DEBUG] Package github.com/getlantern/profiling imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/uuid (/Users/afisk/.glide/cache/src/https-github.com-getlantern-uuid)\n[DEBUG] Trying to open github.com/getlantern/yaml (/Users/afisk/.glide/cache/src/https-github.com-getlantern-yaml)\n[DEBUG] Trying to open github.com/getlantern/autoupdate (/Users/afisk/.glide/cache/src/https-github.com-getlantern-autoupdate)\n[DEBUG] Package github.com/getlantern/autoupdate imports github.com/blang/semver\n[DEBUG] In vendor: github.com/blang/semver\n[DEBUG] Marking github.com/blang/semver to be scanned.\n[INFO]  --> Fetching updates for github.com/blang/semver.\n[DEBUG] Package github.com/getlantern/autoupdate imports github.com/getlantern/flashlight/proxied\n[DEBUG] Found on GOPATH, not vendor: github.com/getlantern/flashlight/proxied\n[DEBUG] Package github.com/getlantern/autoupdate imports github.com/getlantern/go-update\n[DEBUG] In vendor: github.com/getlantern/go-update\n[DEBUG] Marking github.com/getlantern/go-update to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/go-update.\n[DEBUG] Package github.com/getlantern/autoupdate imports github.com/getlantern/go-update/check\n[DEBUG] In vendor: github.com/getlantern/go-update/check\n[DEBUG] Marking github.com/getlantern/go-update/check to be scanned.\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/autoupdate imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/errors (/Users/afisk/.glide/cache/src/https-github.com-getlantern-errors)\n[DEBUG] Package github.com/getlantern/errors imports github.com/getlantern/context\n[DEBUG] In vendor: github.com/getlantern/context\n[DEBUG] Marking github.com/getlantern/context to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/context.\n[DEBUG] Package github.com/getlantern/errors imports github.com/getlantern/hidden\n[DEBUG] In vendor: github.com/getlantern/hidden\n[DEBUG] Package github.com/getlantern/errors imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Package github.com/getlantern/errors imports github.com/getlantern/stack\n[DEBUG] In vendor: github.com/getlantern/stack\n[DEBUG] Marking github.com/getlantern/stack to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/stack.\n[DEBUG] Trying to open github.com/getlantern/ops (/Users/afisk/.glide/cache/src/https-github.com-getlantern-ops)\n[DEBUG] Package github.com/getlantern/ops imports github.com/getlantern/context\n[DEBUG] In vendor: github.com/getlantern/context\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/goptlib.git (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-goptlib.git)\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/transports/obfs4)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/common/csrand to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/common/drbg to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/common/ntor\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/ntor\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/common/ntor to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/common/probdist\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/probdist\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/common/probdist to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/transports/base\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/transports/base\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/transports/base to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4 imports git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing\n[DEBUG] Marking git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing to be scanned.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/armon/go-socks5 (/Users/afisk/.glide/cache/src/https-github.com-armon-go-socks5)\n[DEBUG] Package github.com/armon/go-socks5 imports golang.org/x/net/context\n[DEBUG] In vendor: golang.org/x/net/context\n[DEBUG] Marking golang.org/x/net/context to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/cmux (/Users/afisk/.glide/cache/src/https-github.com-getlantern-cmux)\n[DEBUG] Package github.com/getlantern/cmux imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/cmux imports github.com/xtaci/smux\n[DEBUG] In vendor: github.com/xtaci/smux\n[DEBUG] Marking github.com/xtaci/smux to be scanned.\n[INFO]  --> Fetching updates for github.com/xtaci/smux.\n[DEBUG] Trying to open github.com/getlantern/eventual (/Users/afisk/.glide/cache/src/https-github.com-getlantern-eventual)\n[DEBUG] Trying to open github.com/getlantern/hidden (/Users/afisk/.glide/cache/src/https-github.com-getlantern-hidden)\n[DEBUG] Package github.com/getlantern/hidden imports github.com/getlantern/hex\n[DEBUG] In vendor: github.com/getlantern/hex\n[DEBUG] Marking github.com/getlantern/hex to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/hex.\n[DEBUG] Trying to open github.com/getlantern/idletiming (/Users/afisk/.glide/cache/src/https-github.com-getlantern-idletiming)\n[DEBUG] Package github.com/getlantern/idletiming imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/interceptor (/Users/afisk/.glide/cache/src/https-github.com-getlantern-interceptor)\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/hidden\n[DEBUG] In vendor: github.com/getlantern/hidden\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/netx\n[DEBUG] In vendor: github.com/getlantern/netx\n[DEBUG] Package github.com/getlantern/interceptor imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/netx (/Users/afisk/.glide/cache/src/https-github.com-getlantern-netx)\n[DEBUG] Trying to open github.com/getlantern/snappyconn (/Users/afisk/.glide/cache/src/https-github.com-getlantern-snappyconn)\n[DEBUG] Package github.com/getlantern/snappyconn imports github.com/golang/snappy\n[DEBUG] In vendor: github.com/golang/snappy\n[DEBUG] Marking github.com/golang/snappy to be scanned.\n[INFO]  --> Fetching updates for github.com/golang/snappy.\n[DEBUG] Trying to open github.com/getlantern/tlsdialer (/Users/afisk/.glide/cache/src/https-github.com-getlantern-tlsdialer)\n[DEBUG] Package github.com/getlantern/tlsdialer imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/tlsdialer imports github.com/getlantern/netx\n[DEBUG] In vendor: github.com/getlantern/netx\n[DEBUG] Package github.com/getlantern/tlsdialer imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/withtimeout (/Users/afisk/.glide/cache/src/https-github.com-getlantern-withtimeout)\n[DEBUG] Package github.com/getlantern/withtimeout imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/oxtoacart/bpool (/Users/afisk/.glide/cache/src/https-github.com-oxtoacart-bpool)\n[DEBUG] Trying to open github.com/xtaci/kcp-go (/Users/afisk/.glide/cache/src/https-github.com-xtaci-kcp-go)\n[DEBUG] Package github.com/xtaci/kcp-go imports github.com/klauspost/crc32\n[DEBUG] In vendor: github.com/klauspost/crc32\n[DEBUG] Marking github.com/klauspost/crc32 to be scanned.\n[DEBUG] Dependency github.com/klauspost/crc32 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/klauspost/crc32 has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports github.com/klauspost/reedsolomon\n[DEBUG] In vendor: github.com/klauspost/reedsolomon\n[DEBUG] Marking github.com/klauspost/reedsolomon to be scanned.\n[DEBUG] Dependency github.com/klauspost/reedsolomon has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/klauspost/reedsolomon has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports github.com/pkg/errors\n[DEBUG] In vendor: github.com/pkg/errors\n[DEBUG] Marking github.com/pkg/errors to be scanned.\n[DEBUG] Dependency github.com/pkg/errors has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/pkg/errors has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/blowfish\n[DEBUG] In vendor: golang.org/x/crypto/blowfish\n[DEBUG] Marking golang.org/x/crypto/blowfish to be scanned.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/cast5\n[DEBUG] In vendor: golang.org/x/crypto/cast5\n[DEBUG] Marking golang.org/x/crypto/cast5 to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/pbkdf2\n[DEBUG] In vendor: golang.org/x/crypto/pbkdf2\n[DEBUG] Marking golang.org/x/crypto/pbkdf2 to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/salsa20\n[DEBUG] In vendor: golang.org/x/crypto/salsa20\n[DEBUG] Marking golang.org/x/crypto/salsa20 to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/tea\n[DEBUG] In vendor: golang.org/x/crypto/tea\n[DEBUG] Marking golang.org/x/crypto/tea to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/twofish\n[DEBUG] In vendor: golang.org/x/crypto/twofish\n[DEBUG] Marking golang.org/x/crypto/twofish to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/crypto/xtea\n[DEBUG] In vendor: golang.org/x/crypto/xtea\n[DEBUG] Marking golang.org/x/crypto/xtea to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/xtaci/kcp-go imports golang.org/x/net/ipv4\n[DEBUG] In vendor: golang.org/x/net/ipv4\n[DEBUG] Marking golang.org/x/net/ipv4 to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Trying to open golang.org/x/net/context (/Users/afisk/.glide/cache/src/https-golang.org-x-net/context)\n[DEBUG] Trying to open github.com/getlantern/proxiedsites (/Users/afisk/.glide/cache/src/https-github.com-getlantern-proxiedsites)\n[DEBUG] Package github.com/getlantern/proxiedsites imports github.com/fatih/set\n[DEBUG] In vendor: github.com/fatih/set\n[DEBUG] Marking github.com/fatih/set to be scanned.\n[INFO]  --> Fetching updates for github.com/fatih/set.\n[DEBUG] Package github.com/getlantern/proxiedsites imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/rot13 (/Users/afisk/.glide/cache/src/https-github.com-getlantern-rot13)\n[DEBUG] Trying to open github.com/getlantern/tarfs (/Users/afisk/.glide/cache/src/https-github.com-getlantern-tarfs)\n[DEBUG] Package github.com/getlantern/tarfs imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/geolookup (/Users/afisk/.glide/cache/src/https-github.com-getlantern-geolookup)\n[DEBUG] Package github.com/getlantern/geolookup imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/borda/client (/Users/afisk/.glide/cache/src/https-github.com-getlantern-borda/client)\n[DEBUG] Package github.com/getlantern/borda/client imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/borda/client imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/borda/client imports github.com/oxtoacart/bpool\n[DEBUG] In vendor: github.com/oxtoacart/bpool\n[DEBUG] Trying to open github.com/getlantern/go-loggly (/Users/afisk/.glide/cache/src/https-github.com-getlantern-go-loggly)\n[DEBUG] Package github.com/getlantern/go-loggly imports github.com/visionmedia/go-debug\n[DEBUG] In vendor: github.com/visionmedia/go-debug\n[DEBUG] Marking github.com/visionmedia/go-debug to be scanned.\n[INFO]  --> Fetching updates for github.com/visionmedia/go-debug.\n[DEBUG] Trying to open github.com/getlantern/jibber_jabber (/Users/afisk/.glide/cache/src/https-github.com-getlantern-jibber_jabber)\n[DEBUG] Trying to open github.com/getlantern/osversion (/Users/afisk/.glide/cache/src/https-github.com-getlantern-osversion)\n[DEBUG] Package github.com/getlantern/osversion imports github.com/blang/semver\n[DEBUG] In vendor: github.com/blang/semver\n[DEBUG] Trying to open github.com/getlantern/proxybench (/Users/afisk/.glide/cache/src/https-github.com-getlantern-proxybench)\n[DEBUG] Package github.com/getlantern/proxybench imports git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] Package github.com/getlantern/proxybench imports git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4\n[DEBUG] Package github.com/getlantern/proxybench imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/proxybench imports github.com/getlantern/netx\n[DEBUG] In vendor: github.com/getlantern/netx\n[DEBUG] Package github.com/getlantern/proxybench imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Package github.com/getlantern/proxybench imports github.com/oxtoacart/bpool\n[DEBUG] In vendor: github.com/oxtoacart/bpool\n[DEBUG] Trying to open github.com/getlantern/rotator (/Users/afisk/.glide/cache/src/https-github.com-getlantern-rotator)\n[DEBUG] Package github.com/getlantern/rotator imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/wfilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-wfilter)\n[DEBUG] Trying to open github.com/getlantern/systray (/Users/afisk/.glide/cache/src/https-github.com-getlantern-systray)\n[DEBUG] Package github.com/getlantern/systray imports github.com/getlantern/filepersist\n[DEBUG] In vendor: github.com/getlantern/filepersist\n[DEBUG] Package github.com/getlantern/systray imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/mitchellh/panicwrap (/Users/afisk/.glide/cache/src/https-github.com-mitchellh-panicwrap)\n[DEBUG] Package github.com/mitchellh/panicwrap imports github.com/kardianos/osext\n[DEBUG] In vendor: github.com/kardianos/osext\n[DEBUG] Trying to open github.com/davecgh/go-spew/spew (/Users/afisk/.glide/cache/src/https-github.com-davecgh-go-spew/spew)\n[DEBUG] Trying to open github.com/getlantern/edgedetect (/Users/afisk/.glide/cache/src/https-github.com-getlantern-edgedetect)\n[DEBUG] Package github.com/getlantern/edgedetect imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/edgedetect imports golang.org/x/sys/windows/registry\n[DEBUG] In vendor: golang.org/x/sys/windows/registry\n[DEBUG] Marking golang.org/x/sys/windows/registry to be scanned.\n[INFO]  --> Fetching updates for golang.org/x/sys.\n[DEBUG] Trying to open github.com/gorilla/websocket (/Users/afisk/.glide/cache/src/https-github.com-gorilla-websocket)\n[DEBUG] Trying to open github.com/skratchdot/open-golang/open (/Users/afisk/.glide/cache/src/https-github.com-skratchdot-open-golang/open)\n[DEBUG] Trying to open github.com/getlantern/byteexec (/Users/afisk/.glide/cache/src/https-github.com-getlantern-byteexec)\n[DEBUG] Package github.com/getlantern/byteexec imports github.com/getlantern/filepersist\n[DEBUG] In vendor: github.com/getlantern/filepersist\n[DEBUG] Package github.com/getlantern/byteexec imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/keyman/certimporter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-keyman/certimporter)\n[DEBUG] Trying to open github.com/getlantern/gowin (/Users/afisk/.glide/cache/src/https-github.com-getlantern-gowin)\n[DEBUG] Package github.com/getlantern/gowin imports github.com/getlantern/winsvc/winapi\n[DEBUG] In vendor: github.com/getlantern/winsvc/winapi\n[DEBUG] Marking github.com/getlantern/winsvc/winapi to be scanned.\n[INFO]  --> Fetching updates for github.com/getlantern/winsvc.\n[DEBUG] Trying to open github.com/getlantern/notifier/osx (/Users/afisk/.glide/cache/src/https-github.com-getlantern-notifier/osx)\n[DEBUG] Trying to open github.com/getlantern/notifier/win (/Users/afisk/.glide/cache/src/https-github.com-getlantern-notifier/win)\n[DEBUG] Trying to open github.com/getlantern/elevate (/Users/afisk/.glide/cache/src/https-github.com-getlantern-elevate)\n[DEBUG] Package github.com/getlantern/elevate imports github.com/getlantern/byteexec\n[DEBUG] In vendor: github.com/getlantern/byteexec\n[DEBUG] Package github.com/getlantern/elevate imports github.com/getlantern/elevate/bin\n[DEBUG] In vendor: github.com/getlantern/elevate/bin\n[DEBUG] Marking github.com/getlantern/elevate/bin to be scanned.\n[DEBUG] Dependency github.com/getlantern/elevate has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/elevate has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/blang/semver (/Users/afisk/.glide/cache/src/https-github.com-blang-semver)\n[DEBUG] Trying to open github.com/getlantern/flashlight/proxied (/Users/afisk/gopath/src/github.com/getlantern/flashlight/proxied)\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/eventual\n[DEBUG] In vendor: github.com/getlantern/eventual\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/flashlight/ops\n[DEBUG] Found on GOPATH, not vendor: github.com/getlantern/flashlight/ops\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/fronted\n[DEBUG] In vendor: github.com/getlantern/fronted\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/flashlight/proxied imports github.com/getlantern/keyman\n[DEBUG] In vendor: github.com/getlantern/keyman\n[DEBUG] Trying to open github.com/getlantern/go-update (/Users/afisk/.glide/cache/src/https-github.com-getlantern-go-update)\n[DEBUG] Package github.com/getlantern/go-update imports github.com/getlantern/go-update/download\n[DEBUG] In vendor: github.com/getlantern/go-update/download\n[DEBUG] Marking github.com/getlantern/go-update/download to be scanned.\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/go-update imports github.com/kardianos/osext\n[DEBUG] In vendor: github.com/kardianos/osext\n[DEBUG] Package github.com/getlantern/go-update imports github.com/kr/binarydist\n[DEBUG] In vendor: github.com/kr/binarydist\n[DEBUG] Marking github.com/kr/binarydist to be scanned.\n[INFO]  --> Fetching updates for github.com/kr/binarydist.\n[DEBUG] Trying to open github.com/getlantern/go-update/check (/Users/afisk/.glide/cache/src/https-github.com-getlantern-go-update/check)\n[DEBUG] Package github.com/getlantern/go-update/check imports github.com/getlantern/go-update\n[DEBUG] In vendor: github.com/getlantern/go-update\n[DEBUG] Package github.com/getlantern/go-update/check imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/go-update/check imports github.com/kardianos/osext\n[DEBUG] In vendor: github.com/kardianos/osext\n[DEBUG] Trying to open github.com/getlantern/context (/Users/afisk/.glide/cache/src/https-github.com-getlantern-context)\n[DEBUG] Trying to open github.com/getlantern/stack (/Users/afisk/.glide/cache/src/https-github.com-getlantern-stack)\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/common/csrand (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/common/csrand)\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/common/drbg (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/common/drbg)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/drbg imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/drbg imports github.com/dchest/siphash\n[DEBUG] In vendor: github.com/dchest/siphash\n[DEBUG] Marking github.com/dchest/siphash to be scanned.\n[INFO]  --> Fetching updates for github.com/dchest/siphash.\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/common/ntor (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/common/ntor)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/ntor imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/ntor imports github.com/agl/ed25519/extra25519\n[DEBUG] In vendor: github.com/agl/ed25519/extra25519\n[DEBUG] Marking github.com/agl/ed25519/extra25519 to be scanned.\n[INFO]  --> Fetching updates for github.com/agl/ed25519.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/ntor imports golang.org/x/crypto/curve25519\n[DEBUG] In vendor: golang.org/x/crypto/curve25519\n[DEBUG] Marking golang.org/x/crypto/curve25519 to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/ntor imports golang.org/x/crypto/hkdf\n[DEBUG] In vendor: golang.org/x/crypto/hkdf\n[DEBUG] Marking golang.org/x/crypto/hkdf to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/common/probdist (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/common/probdist)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/probdist imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/probdist imports git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/common/replayfilter)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/common/replayfilter imports github.com/dchest/siphash\n[DEBUG] In vendor: github.com/dchest/siphash\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/transports/base (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/transports/base)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/base imports git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] Trying to open git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing (/Users/afisk/.glide/cache/src/https-git.torproject.org-pluggable-transports-obfs4.git/transports/obfs4/framing)\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing imports git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/csrand\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing imports git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/common/drbg\n[DEBUG] Package git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4/framing imports golang.org/x/crypto/nacl/secretbox\n[DEBUG] In vendor: golang.org/x/crypto/nacl/secretbox\n[DEBUG] Marking golang.org/x/crypto/nacl/secretbox to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/xtaci/smux (/Users/afisk/.glide/cache/src/https-github.com-xtaci-smux)\n[DEBUG] Package github.com/xtaci/smux imports github.com/pkg/errors\n[DEBUG] In vendor: github.com/pkg/errors\n[DEBUG] Trying to open github.com/getlantern/hex (/Users/afisk/.glide/cache/src/https-github.com-getlantern-hex)\n[DEBUG] Trying to open github.com/golang/snappy (/Users/afisk/.glide/cache/src/https-github.com-golang-snappy)\n[DEBUG] Trying to open github.com/klauspost/crc32 (/Users/afisk/.glide/cache/src/https-github.com-klauspost-crc32)\n[DEBUG] Trying to open github.com/klauspost/reedsolomon (/Users/afisk/.glide/cache/src/https-github.com-klauspost-reedsolomon)\n[DEBUG] Using Iterative Scanning for github.com/klauspost/reedsolomon\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([noasm])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([appengine])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning /Users/afisk/.glide/cache/src/https-github.com-klauspost-reedsolomon: found packages reedsolomon (examples_test.go) and main (gentables.go) in /Users/afisk/.glide/cache/src/https-github.com-klauspost-reedsolomon\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Trying to open github.com/pkg/errors (/Users/afisk/.glide/cache/src/https-github.com-pkg-errors)\n[DEBUG] Trying to open golang.org/x/crypto/blowfish (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/blowfish)\n[DEBUG] Trying to open golang.org/x/crypto/cast5 (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/cast5)\n[DEBUG] Trying to open golang.org/x/crypto/pbkdf2 (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/pbkdf2)\n[DEBUG] Trying to open golang.org/x/crypto/salsa20 (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/salsa20)\n[DEBUG] Package golang.org/x/crypto/salsa20 imports golang.org/x/crypto/salsa20/salsa\n[DEBUG] In vendor: golang.org/x/crypto/salsa20/salsa\n[DEBUG] Marking golang.org/x/crypto/salsa20/salsa to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Trying to open golang.org/x/crypto/tea (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/tea)\n[DEBUG] Trying to open golang.org/x/crypto/twofish (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/twofish)\n[DEBUG] Trying to open golang.org/x/crypto/xtea (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/xtea)\n[DEBUG] Trying to open golang.org/x/net/ipv4 (/Users/afisk/.glide/cache/src/https-golang.org-x-net/ipv4)\n[DEBUG] Using Iterative Scanning for golang.org/x/net/ipv4\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(dragonfly), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(netbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(openbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(solaris), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(nacl), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(plan9), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning /Users/afisk/.glide/cache/src/https-golang.org-x-net/ipv4: found packages ipv4 (bpf_test.go) and main (gen.go) in /Users/afisk/.glide/cache/src/https-golang.org-x-net/ipv4\n[DEBUG] Scanning with Arch(), OS(windows), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(android), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Package golang.org/x/net/ipv4 imports golang.org/x/net/bpf\n[DEBUG] In vendor: golang.org/x/net/bpf\n[DEBUG] Marking golang.org/x/net/bpf to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Package golang.org/x/net/ipv4 imports golang.org/x/net/internal/iana\n[DEBUG] In vendor: golang.org/x/net/internal/iana\n[DEBUG] Marking golang.org/x/net/internal/iana to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Package golang.org/x/net/ipv4 imports golang.org/x/net/internal/netreflect\n[DEBUG] In vendor: golang.org/x/net/internal/netreflect\n[DEBUG] Marking golang.org/x/net/internal/netreflect to be scanned.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/fatih/set (/Users/afisk/.glide/cache/src/https-github.com-fatih-set)\n[DEBUG] Trying to open github.com/visionmedia/go-debug (/Users/afisk/.glide/cache/src/https-github.com-visionmedia-go-debug)\n[DEBUG] Trying to open golang.org/x/sys/windows/registry (/Users/afisk/.glide/cache/src/https-golang.org-x-sys/windows/registry)\n[DEBUG] Package golang.org/x/sys/windows/registry imports golang.org/x/sys/windows\n[DEBUG] In vendor: golang.org/x/sys/windows\n[DEBUG] Marking golang.org/x/sys/windows to be scanned.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/winsvc/winapi (/Users/afisk/.glide/cache/src/https-github.com-getlantern-winsvc/winapi)\n[DEBUG] Trying to open github.com/getlantern/elevate/bin (/Users/afisk/.glide/cache/src/https-github.com-getlantern-elevate/bin)\n[DEBUG] Trying to open github.com/getlantern/flashlight/ops (/Users/afisk/gopath/src/github.com/getlantern/flashlight/ops)\n[DEBUG] Package github.com/getlantern/flashlight/ops imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/go-update/download (/Users/afisk/.glide/cache/src/https-github.com-getlantern-go-update/download)\n[DEBUG] Trying to open github.com/kr/binarydist (/Users/afisk/.glide/cache/src/https-github.com-kr-binarydist)\n[DEBUG] Trying to open github.com/dchest/siphash (/Users/afisk/.glide/cache/src/https-github.com-dchest-siphash)\n[DEBUG] Trying to open github.com/agl/ed25519/extra25519 (/Users/afisk/.glide/cache/src/https-github.com-agl-ed25519/extra25519)\n[DEBUG] Package github.com/agl/ed25519/extra25519 imports github.com/agl/ed25519/edwards25519\n[DEBUG] In vendor: github.com/agl/ed25519/edwards25519\n[DEBUG] Marking github.com/agl/ed25519/edwards25519 to be scanned.\n[DEBUG] Dependency github.com/agl/ed25519 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/agl/ed25519 has already been pinned. Setting version skipped.\n[DEBUG] Trying to open golang.org/x/crypto/curve25519 (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/curve25519)\n[DEBUG] Trying to open golang.org/x/crypto/hkdf (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/hkdf)\n[DEBUG] Trying to open golang.org/x/crypto/nacl/secretbox (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/nacl/secretbox)\n[DEBUG] Package golang.org/x/crypto/nacl/secretbox imports golang.org/x/crypto/poly1305\n[DEBUG] In vendor: golang.org/x/crypto/poly1305\n[DEBUG] Marking golang.org/x/crypto/poly1305 to be scanned.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Package golang.org/x/crypto/nacl/secretbox imports golang.org/x/crypto/salsa20/salsa\n[DEBUG] In vendor: golang.org/x/crypto/salsa20/salsa\n[DEBUG] Trying to open golang.org/x/crypto/salsa20/salsa (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/salsa20/salsa)\n[DEBUG] Trying to open golang.org/x/net/bpf (/Users/afisk/.glide/cache/src/https-golang.org-x-net/bpf)\n[DEBUG] Trying to open golang.org/x/net/internal/iana (/Users/afisk/.glide/cache/src/https-golang.org-x-net/internal/iana)\n[DEBUG] Using Iterative Scanning for golang.org/x/net/internal/iana\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning /Users/afisk/.glide/cache/src/https-golang.org-x-net/internal/iana: found packages iana (const.go) and main (gen.go) in /Users/afisk/.glide/cache/src/https-golang.org-x-net/internal/iana\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Trying to open golang.org/x/net/internal/netreflect (/Users/afisk/.glide/cache/src/https-golang.org-x-net/internal/netreflect)\n[DEBUG] Trying to open golang.org/x/sys/windows (/Users/afisk/.glide/cache/src/https-golang.org-x-sys/windows)\n[DEBUG] Trying to open github.com/agl/ed25519/edwards25519 (/Users/afisk/.glide/cache/src/https-github.com-agl-ed25519/edwards25519)\n[DEBUG] Trying to open golang.org/x/crypto/poly1305 (/Users/afisk/.glide/cache/src/https-golang.org-x-crypto/poly1305)\n[DEBUG] Resolving test dependencies\n[DEBUG] Adding local Import github.com/stretchr/testify/assert to queue\n[DEBUG] Adding local Import github.com/getlantern/http-proxy-lantern to queue\n[DEBUG] Adding local Import github.com/getlantern/tlsdefaults to queue\n[DEBUG] Adding local Import github.com/getlantern/waitforserver to queue\n[DEBUG] Adding local Import github.com/mailgun/oxy/forward to queue\n[DEBUG] Resolving import path\n[INFO]  Found Godeps.json file in /Users/afisk/.glide/cache/src/https-github.com-stretchr-testify\n[INFO]  --> Parsing Godeps metadata...\n[DEBUG] Trying to open github.com/stretchr/testify/assert (/Users/afisk/.glide/cache/src/https-github.com-stretchr-testify/assert)\n[DEBUG] Package github.com/stretchr/testify/assert imports github.com/davecgh/go-spew/spew\n[DEBUG] In vendor: github.com/davecgh/go-spew/spew\n[DEBUG] Package github.com/stretchr/testify/assert imports github.com/pmezard/go-difflib/difflib\n[DEBUG] In vendor: github.com/pmezard/go-difflib/difflib\n[DEBUG] Marking github.com/pmezard/go-difflib/difflib to be scanned.\n[INFO]  --> Fetching updates for github.com/pmezard/go-difflib.\n[DEBUG] github.com/pmezard/go-difflib is already set to version d8ed2627bdf02c080bf22230dbb337003b7aba2d. Skipping update.\n[INFO]  --> Setting version for github.com/pmezard/go-difflib to d8ed2627bdf02c080bf22230dbb337003b7aba2d.\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/analytics\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/analytics\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/analytics to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/blacklist\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/blacklist\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/blacklist to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/borda\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/borda\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/borda to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/configserverfilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/configserverfilter\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/configserverfilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/devicefilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/devicefilter\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/devicefilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/kcplistener\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/kcplistener\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/kcplistener to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/listeners to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/mimic\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/mimic\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/mimic to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/obfs4listener\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/obfs4listener\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/obfs4listener to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/opsfilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/opsfilter\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/opsfilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/ping\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/ping\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/ping to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/profilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/profilter\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/profilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/redis to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy-lantern/tokenfilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/tokenfilter\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/tokenfilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/commonfilter\n[DEBUG] In vendor: github.com/getlantern/http-proxy/commonfilter\n[DEBUG] Marking github.com/getlantern/http-proxy/commonfilter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Marking github.com/getlantern/http-proxy/filters to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/forward\n[DEBUG] In vendor: github.com/getlantern/http-proxy/forward\n[DEBUG] Marking github.com/getlantern/http-proxy/forward to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/httpconnect\n[DEBUG] In vendor: github.com/getlantern/http-proxy/httpconnect\n[DEBUG] Marking github.com/getlantern/http-proxy/httpconnect to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy/listeners\n[DEBUG] Marking github.com/getlantern/http-proxy/listeners to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/pforward\n[DEBUG] In vendor: github.com/getlantern/http-proxy/pforward\n[DEBUG] Marking github.com/getlantern/http-proxy/pforward to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/ratelimiter\n[DEBUG] In vendor: github.com/getlantern/http-proxy/ratelimiter\n[DEBUG] Marking github.com/getlantern/http-proxy/ratelimiter to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/http-proxy/server\n[DEBUG] In vendor: github.com/getlantern/http-proxy/server\n[DEBUG] Marking github.com/getlantern/http-proxy/server to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/measured\n[DEBUG] In vendor: github.com/getlantern/measured\n[DEBUG] Marking github.com/getlantern/measured to be scanned.\n[DEBUG] Dependency github.com/getlantern/measured has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/measured has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Package github.com/getlantern/http-proxy-lantern imports gopkg.in/redis.v3\n[DEBUG] In vendor: gopkg.in/redis.v3\n[DEBUG] Marking gopkg.in/redis.v3 to be scanned.\n[INFO]  --> Fetching updates for gopkg.in/redis.v3.\n[DEBUG] Trying to open github.com/getlantern/tlsdefaults (/Users/afisk/.glide/cache/src/https-github.com-getlantern-tlsdefaults)\n[DEBUG] Package github.com/getlantern/tlsdefaults imports github.com/getlantern/keyman\n[DEBUG] In vendor: github.com/getlantern/keyman\n[DEBUG] Trying to open github.com/getlantern/waitforserver (/Users/afisk/.glide/cache/src/https-github.com-getlantern-waitforserver)\n[DEBUG] Trying to open github.com/mailgun/oxy/forward (/Users/afisk/.glide/cache/src/https-github.com-mailgun-oxy/forward)\n[DEBUG] Package github.com/mailgun/oxy/forward imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Marking github.com/Sirupsen/logrus to be scanned.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/mailgun/oxy/forward imports github.com/vulcand/oxy/utils\n[DEBUG] In vendor: github.com/vulcand/oxy/utils\n[DEBUG] Marking github.com/vulcand/oxy/utils to be scanned.\n[DEBUG] Dependency github.com/vulcand/oxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/vulcand/oxy has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/pmezard/go-difflib/difflib (/Users/afisk/.glide/cache/src/https-github.com-pmezard-go-difflib/difflib)\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/analytics (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/analytics)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/analytics imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/analytics imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/common to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/analytics imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/analytics imports github.com/golang/groupcache/lru\n[DEBUG] In vendor: github.com/golang/groupcache/lru\n[DEBUG] Marking github.com/golang/groupcache/lru to be scanned.\n[DEBUG] Dependency github.com/golang/groupcache has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/golang/groupcache has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/blacklist (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/blacklist)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/blacklist imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/borda (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/borda)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/borda imports github.com/getlantern/borda/client\n[DEBUG] In vendor: github.com/getlantern/borda/client\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/borda imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/borda imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/configserverfilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/configserverfilter)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/configserverfilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/configserverfilter imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/configserverfilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/devicefilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/devicefilter)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy-lantern/blacklist\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/blacklist\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy-lantern/usage\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/usage\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/usage to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/getlantern/http-proxy/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy/listeners\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/devicefilter imports github.com/gorilla/context\n[DEBUG] In vendor: github.com/gorilla/context\n[DEBUG] Marking github.com/gorilla/context to be scanned.\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/kcplistener (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/kcplistener)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/kcplistener imports github.com/getlantern/cmux\n[DEBUG] In vendor: github.com/getlantern/cmux\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/kcplistener imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/kcplistener imports github.com/getlantern/snappyconn\n[DEBUG] In vendor: github.com/getlantern/snappyconn\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/kcplistener imports github.com/xtaci/kcp-go\n[DEBUG] In vendor: github.com/xtaci/kcp-go\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/listeners (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/listeners)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/listeners imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/listeners imports github.com/getlantern/http-proxy/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy/listeners\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/listeners imports github.com/mxk/go-flowrate/flowrate\n[DEBUG] In vendor: github.com/mxk/go-flowrate/flowrate\n[DEBUG] Marking github.com/mxk/go-flowrate/flowrate to be scanned.\n[DEBUG] Dependency github.com/mxk/go-flowrate has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/mxk/go-flowrate has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/mimic (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/mimic)\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/obfs4listener (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/obfs4listener)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/obfs4listener imports git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/obfs4listener imports git.torproject.org/pluggable-transports/obfs4.git/transports/base\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/transports/base\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/obfs4listener imports git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4\n[DEBUG] In vendor: git.torproject.org/pluggable-transports/obfs4.git/transports/obfs4\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/obfs4listener imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/obfs4listener imports github.com/getlantern/withtimeout\n[DEBUG] In vendor: github.com/getlantern/withtimeout\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/opsfilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/opsfilter)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/opsfilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/opsfilter imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/opsfilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/opsfilter imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/ping (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/ping)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/ping imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/ping imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/ping imports github.com/getlantern/http-proxy-lantern/metrics\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/metrics\n[DEBUG] Marking github.com/getlantern/http-proxy-lantern/metrics to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/ping imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/profilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/profilter)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/listeners\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/redis\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/getlantern/http-proxy/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy/listeners\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports github.com/gorilla/context\n[DEBUG] In vendor: github.com/gorilla/context\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/profilter imports gopkg.in/redis.v3\n[DEBUG] In vendor: gopkg.in/redis.v3\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/redis (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/redis)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/redis imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/redis imports github.com/getlantern/http-proxy-lantern/usage\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/usage\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/redis imports github.com/getlantern/keyman\n[DEBUG] In vendor: github.com/getlantern/keyman\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/redis imports github.com/getlantern/measured\n[DEBUG] In vendor: github.com/getlantern/measured\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/redis imports gopkg.in/redis.v3\n[DEBUG] In vendor: gopkg.in/redis.v3\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/tokenfilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/tokenfilter)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/tokenfilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/tokenfilter imports github.com/getlantern/http-proxy-lantern/common\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/common\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/tokenfilter imports github.com/getlantern/http-proxy-lantern/mimic\n[DEBUG] In vendor: github.com/getlantern/http-proxy-lantern/mimic\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/tokenfilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/tokenfilter imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy/commonfilter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/commonfilter)\n[DEBUG] Package github.com/getlantern/http-proxy/commonfilter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/commonfilter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Trying to open github.com/getlantern/http-proxy/filters (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/filters)\n[DEBUG] Package github.com/getlantern/http-proxy/filters imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/http-proxy/filters imports github.com/getlantern/http-proxy/utils\n[DEBUG] In vendor: github.com/getlantern/http-proxy/utils\n[DEBUG] Marking github.com/getlantern/http-proxy/utils to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy/forward (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/forward)\n[DEBUG] Package github.com/getlantern/http-proxy/forward imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/forward imports github.com/getlantern/http-proxy/buffers\n[DEBUG] In vendor: github.com/getlantern/http-proxy/buffers\n[DEBUG] Marking github.com/getlantern/http-proxy/buffers to be scanned.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Package github.com/getlantern/http-proxy/forward imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy/forward imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Package github.com/getlantern/http-proxy/forward imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy/httpconnect (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/httpconnect)\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/http-proxy/buffers\n[DEBUG] In vendor: github.com/getlantern/http-proxy/buffers\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/interceptor\n[DEBUG] In vendor: github.com/getlantern/interceptor\n[DEBUG] Package github.com/getlantern/http-proxy/httpconnect imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy/listeners (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/listeners)\n[DEBUG] Package github.com/getlantern/http-proxy/listeners imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/listeners imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Package github.com/getlantern/http-proxy/listeners imports github.com/getlantern/measured\n[DEBUG] In vendor: github.com/getlantern/measured\n[DEBUG] Trying to open github.com/getlantern/http-proxy/pforward (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/pforward)\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/idletiming\n[DEBUG] In vendor: github.com/getlantern/idletiming\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/interceptor\n[DEBUG] In vendor: github.com/getlantern/interceptor\n[DEBUG] Package github.com/getlantern/http-proxy/pforward imports github.com/getlantern/ops\n[DEBUG] In vendor: github.com/getlantern/ops\n[DEBUG] Trying to open github.com/getlantern/http-proxy/ratelimiter (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/ratelimiter)\n[DEBUG] Package github.com/getlantern/http-proxy/ratelimiter imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/ratelimiter imports github.com/getlantern/http-proxy/filters\n[DEBUG] In vendor: github.com/getlantern/http-proxy/filters\n[DEBUG] Package github.com/getlantern/http-proxy/ratelimiter imports github.com/hashicorp/golang-lru\n[DEBUG] In vendor: github.com/hashicorp/golang-lru\n[DEBUG] Marking github.com/hashicorp/golang-lru to be scanned.\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy/server (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/server)\n[DEBUG] Package github.com/getlantern/http-proxy/server imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Package github.com/getlantern/http-proxy/server imports github.com/getlantern/http-proxy/listeners\n[DEBUG] In vendor: github.com/getlantern/http-proxy/listeners\n[DEBUG] Package github.com/getlantern/http-proxy/server imports github.com/getlantern/tlsdefaults\n[DEBUG] In vendor: github.com/getlantern/tlsdefaults\n[DEBUG] Package github.com/getlantern/http-proxy/server imports github.com/gorilla/context\n[DEBUG] In vendor: github.com/gorilla/context\n[DEBUG] Trying to open github.com/getlantern/measured (/Users/afisk/.glide/cache/src/https-github.com-getlantern-measured)\n[DEBUG] Package github.com/getlantern/measured imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open gopkg.in/redis.v3 (/Users/afisk/.glide/cache/src/https-gopkg.in-redis.v3)\n[DEBUG] Package gopkg.in/redis.v3 imports gopkg.in/redis.v3/internal\n[DEBUG] In vendor: gopkg.in/redis.v3/internal\n[DEBUG] Marking gopkg.in/redis.v3/internal to be scanned.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Setting version skipped.\n[DEBUG] Package gopkg.in/redis.v3 imports gopkg.in/redis.v3/internal/consistenthash\n[DEBUG] In vendor: gopkg.in/redis.v3/internal/consistenthash\n[DEBUG] Marking gopkg.in/redis.v3/internal/consistenthash to be scanned.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Setting version skipped.\n[DEBUG] Package gopkg.in/redis.v3 imports gopkg.in/redis.v3/internal/hashtag\n[DEBUG] In vendor: gopkg.in/redis.v3/internal/hashtag\n[DEBUG] Marking gopkg.in/redis.v3/internal/hashtag to be scanned.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Setting version skipped.\n[DEBUG] Package gopkg.in/redis.v3 imports gopkg.in/redis.v3/internal/pool\n[DEBUG] In vendor: gopkg.in/redis.v3/internal/pool\n[DEBUG] Marking gopkg.in/redis.v3/internal/pool to be scanned.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/Sirupsen/logrus (/Users/afisk/.glide/cache/src/https-github.com-Sirupsen-logrus)\n[DEBUG] Package github.com/Sirupsen/logrus imports golang.org/x/sys/unix\n[DEBUG] In vendor: golang.org/x/sys/unix\n[DEBUG] Marking golang.org/x/sys/unix to be scanned.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/vulcand/oxy/utils (/Users/afisk/.glide/cache/src/https-github.com-vulcand-oxy/utils)\n[DEBUG] Package github.com/vulcand/oxy/utils imports github.com/Sirupsen/logrus\n[DEBUG] In vendor: github.com/Sirupsen/logrus\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/common (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/common)\n[DEBUG] Trying to open github.com/golang/groupcache/lru (/Users/afisk/.glide/cache/src/https-github.com-golang-groupcache/lru)\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/usage (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/usage)\n[DEBUG] Trying to open github.com/gorilla/context (/Users/afisk/.glide/cache/src/https-github.com-gorilla-context)\n[DEBUG] Trying to open github.com/mxk/go-flowrate/flowrate (/Users/afisk/.glide/cache/src/https-github.com-mxk-go-flowrate/flowrate)\n[DEBUG] Trying to open github.com/getlantern/http-proxy-lantern/metrics (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy-lantern/metrics)\n[DEBUG] Package github.com/getlantern/http-proxy-lantern/metrics imports github.com/rcrowley/go-metrics\n[DEBUG] In vendor: github.com/rcrowley/go-metrics\n[DEBUG] Marking github.com/rcrowley/go-metrics to be scanned.\n[DEBUG] Dependency github.com/rcrowley/go-metrics has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/rcrowley/go-metrics has already been pinned. Setting version skipped.\n[DEBUG] Trying to open github.com/getlantern/http-proxy/utils (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/utils)\n[DEBUG] Package github.com/getlantern/http-proxy/utils imports github.com/getlantern/errors\n[DEBUG] In vendor: github.com/getlantern/errors\n[DEBUG] Package github.com/getlantern/http-proxy/utils imports github.com/getlantern/golog\n[DEBUG] In vendor: github.com/getlantern/golog\n[DEBUG] Trying to open github.com/getlantern/http-proxy/buffers (/Users/afisk/.glide/cache/src/https-github.com-getlantern-http-proxy/buffers)\n[DEBUG] Package github.com/getlantern/http-proxy/buffers imports github.com/oxtoacart/bpool\n[DEBUG] In vendor: github.com/oxtoacart/bpool\n[DEBUG] Trying to open github.com/hashicorp/golang-lru (/Users/afisk/.glide/cache/src/https-github.com-hashicorp-golang-lru)\n[DEBUG] Package github.com/hashicorp/golang-lru imports github.com/hashicorp/golang-lru/simplelru\n[DEBUG] In vendor: github.com/hashicorp/golang-lru/simplelru\n[DEBUG] Marking github.com/hashicorp/golang-lru/simplelru to be scanned.\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Fetching updates skipped.\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Setting version skipped.\n[DEBUG] Trying to open gopkg.in/redis.v3/internal (/Users/afisk/.glide/cache/src/https-gopkg.in-redis.v3/internal)\n[DEBUG] Trying to open gopkg.in/redis.v3/internal/consistenthash (/Users/afisk/.glide/cache/src/https-gopkg.in-redis.v3/internal/consistenthash)\n[DEBUG] Trying to open gopkg.in/redis.v3/internal/hashtag (/Users/afisk/.glide/cache/src/https-gopkg.in-redis.v3/internal/hashtag)\n[DEBUG] Trying to open gopkg.in/redis.v3/internal/pool (/Users/afisk/.glide/cache/src/https-gopkg.in-redis.v3/internal/pool)\n[DEBUG] Package gopkg.in/redis.v3/internal/pool imports gopkg.in/bsm/ratelimit.v1\n[DEBUG] In vendor: gopkg.in/bsm/ratelimit.v1\n[DEBUG] Marking gopkg.in/bsm/ratelimit.v1 to be scanned.\n[INFO]  --> Fetching updates for gopkg.in/bsm/ratelimit.v1.\n[DEBUG] Package gopkg.in/redis.v3/internal/pool imports gopkg.in/redis.v3/internal\n[DEBUG] In vendor: gopkg.in/redis.v3/internal\n[DEBUG] Trying to open golang.org/x/sys/unix (/Users/afisk/.glide/cache/src/https-golang.org-x-sys/unix)\n[DEBUG] Using Iterative Scanning for golang.org/x/sys/unix\n[DEBUG] Scanning with Arch(), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(dragonfly), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(netbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(openbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(solaris), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([go1.4])\n[DEBUG] Scanning with Arch(386), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(arm), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([gccgo])\n[DEBUG] Scanning with Arch(amd64), OS(linux), and Build Tags([gccgo])\n[DEBUG] Scanning with Arch(sparc64), OS(linux), and Build Tags([gccgo])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([ignore])\n[DEBUG] Found multiple packages while scanning /Users/afisk/.glide/cache/src/https-golang.org-x-sys/unix: found packages unix (env_unset.go) and main (mkpost.go) in /Users/afisk/.glide/cache/src/https-golang.org-x-sys/unix\n[DEBUG] Scanning with Arch(), OS(darwin), and Build Tags([race])\n[DEBUG] Scanning with Arch(), OS(linux), and Build Tags([race])\n[DEBUG] Scanning with Arch(), OS(freebsd), and Build Tags([race])\n[DEBUG] Scanning with Arch(), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(arm64), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(dragonfly), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(arm), OS(freebsd), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(arm), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(arm64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(mips64), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(mips64le), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(ppc64), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(ppc64le), OS(), and Build Tags([])\n[DEBUG] Scanning with Arch(s390x), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(sparc64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(netbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(netbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(arm), OS(netbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(386), OS(openbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(openbsd), and Build Tags([])\n[DEBUG] Scanning with Arch(amd64), OS(solaris), and Build Tags([])\n[DEBUG] Scanning with Arch(arm), OS(darwin), and Build Tags([])\n[DEBUG] Scanning with Arch(mips64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(mips64le), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(ppc64), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(ppc64le), OS(linux), and Build Tags([])\n[DEBUG] Scanning with Arch(), OS(), and Build Tags([])\n[DEBUG] Trying to open github.com/rcrowley/go-metrics (/Users/afisk/.glide/cache/src/https-github.com-rcrowley-go-metrics)\n[DEBUG] Trying to open github.com/hashicorp/golang-lru/simplelru (/Users/afisk/.glide/cache/src/https-github.com-hashicorp-golang-lru/simplelru)\n[DEBUG] Trying to open gopkg.in/bsm/ratelimit.v1 (/Users/afisk/.glide/cache/src/https-gopkg.in-bsm-ratelimit.v1)\n[INFO]  Downloading dependencies. Please wait...\n[DEBUG] Locking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-appdir\n[DEBUG] Dependency github.com/getlantern/appdir has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-borda\n[DEBUG] Dependency github.com/getlantern/borda has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-jibber_jabber\n[DEBUG] Dependency github.com/getlantern/jibber_jabber has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-jibber_jabber\n[DEBUG] Locking https-github.com-getlantern-keyman\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-keyman\n[DEBUG] Locking https-github.com-getlantern-launcher\n[DEBUG] Dependency github.com/getlantern/launcher has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-launcher\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[DEBUG] Dependency github.com/davecgh/go-spew has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-getlantern-notifier\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-notifier\n[DEBUG] Locking https-github.com-getlantern-eventual\n[DEBUG] Dependency github.com/getlantern/eventual has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-osversion\n[DEBUG] Dependency github.com/getlantern/osversion has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-osversion\n[DEBUG] Locking https-github.com-getlantern-pac\n[DEBUG] Dependency github.com/getlantern/pac has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pac\n[DEBUG] Locking https-github.com-getlantern-pro-server-client\n[DEBUG] Dependency github.com/getlantern/pro-server-client has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-armon-go-socks5\n[DEBUG] Dependency github.com/armon/go-socks5 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-github.com-getlantern-proxybench\n[DEBUG] Dependency github.com/getlantern/proxybench has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-proxybench\n[DEBUG] Locking https-github.com-getlantern-rot13\n[DEBUG] Dependency github.com/getlantern/rot13 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-rot13\n[DEBUG] Locking https-github.com-getlantern-i18n\n[DEBUG] Dependency github.com/getlantern/i18n has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-getlantern-idletiming\n[DEBUG] Dependency github.com/getlantern/idletiming has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-idletiming\n[DEBUG] Dependency github.com/getlantern/detour has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-netx\n[DEBUG] Dependency github.com/getlantern/netx has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-netx\n[DEBUG] Dependency github.com/getlantern/bandwidth has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-errors\n[DEBUG] Dependency github.com/getlantern/errors has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-withtimeout\n[DEBUG] Dependency github.com/getlantern/withtimeout has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-withtimeout\n[DEBUG] Locking https-github.com-getlantern-yaml\n[DEBUG] Dependency github.com/getlantern/yaml has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-yaml\n[DEBUG] Locking https-github.com-getlantern-ops\n[DEBUG] Dependency github.com/getlantern/ops has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-ops\n[DEBUG] Locking https-github.com-getlantern-golog\n[DEBUG] Dependency github.com/getlantern/golog has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-golog\n[DEBUG] Locking https-github.com-mitchellh-panicwrap\n[DEBUG] Dependency github.com/mitchellh/panicwrap has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-mitchellh-panicwrap\n[DEBUG] Locking https-github.com-oxtoacart-bpool\n[DEBUG] Dependency github.com/oxtoacart/bpool has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-oxtoacart-bpool\n[DEBUG] Locking https-github.com-getlantern-fronted\n[DEBUG] Dependency github.com/getlantern/fronted has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-fronted\n[DEBUG] Locking https-golang.org-x-net\n[DEBUG] Locking https-github.com-getlantern-profiling\n[DEBUG] Dependency github.com/getlantern/profiling has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-mailgun-oxy\n[DEBUG] Dependency github.com/mailgun/oxy has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-mailgun-oxy\n[DEBUG] Locking https-github.com-vulcand-oxy\n[DEBUG] Dependency github.com/vulcand/oxy has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-vulcand-oxy\n[DEBUG] Locking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Locking https-github.com-getlantern-http-proxy\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy\n[DEBUG] Locking https-github.com-getlantern-systray\n[DEBUG] Dependency github.com/getlantern/systray has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-systray\n[DEBUG] Locking https-github.com-getlantern-buuid\n[DEBUG] Dependency github.com/getlantern/buuid has already been pinned. Fetching updates skipped.\n[DEBUG] Locking https-github.com-getlantern-balancer\n[DEBUG] Dependency github.com/getlantern/balancer has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-getlantern-bytecounting\n[DEBUG] Locking https-github.com-getlantern-hidden\n[DEBUG] Dependency github.com/getlantern/hidden has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-hidden\n[DEBUG] Locking https-github.com-getlantern-checkfallbacks\n[DEBUG] Dependency github.com/getlantern/checkfallbacks has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-checkfallbacks\n[DEBUG] Locking https-github.com-getlantern-tarfs\n[DEBUG] Dependency github.com/getlantern/tarfs has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tarfs\n[DEBUG] Locking https-github.com-getlantern-autoupdate\n[DEBUG] Dependency github.com/getlantern/autoupdate has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-pathreflect\n[DEBUG] Dependency github.com/getlantern/pathreflect has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pathreflect\n[DEBUG] Locking https-github.com-getlantern-measured\n[DEBUG] Dependency github.com/getlantern/measured has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-measured\n[DEBUG] Locking https-github.com-getlantern-tlsdefaults\n[DEBUG] Dependency github.com/getlantern/tlsdefaults has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tlsdefaults\n[DEBUG] Locking https-github.com-getlantern-waitforserver\n[DEBUG] Dependency github.com/getlantern/waitforserver has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-waitforserver\n[DEBUG] Locking https-github.com-stretchr-testify\n[DEBUG] Dependency github.com/stretchr/testify has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[DEBUG] Locking https-github.com-kardianos-osext\n[DEBUG] Dependency github.com/kardianos/osext has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-kardianos-osext\n[DEBUG] Locking https-github.com-getlantern-filepersist\n[DEBUG] Dependency github.com/getlantern/filepersist has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-skratchdot-open-golang\n[DEBUG] Dependency github.com/skratchdot/open-golang has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-skratchdot-open-golang\n[DEBUG] Dependency github.com/getlantern/proxiedsites has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-rotator\n[DEBUG] Dependency github.com/getlantern/rotator has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-rcrowley-go-metrics\n[DEBUG] Locking https-github.com-getlantern-go-loggly\n[DEBUG] Dependency github.com/getlantern/go-loggly has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-go-loggly\n[DEBUG] Unlocking https-github.com-getlantern-buuid\n[DEBUG] Locking https-github.com-klauspost-crc32\n[DEBUG] Dependency github.com/klauspost/crc32 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-klauspost-crc32\n[DEBUG] Dependency github.com/getlantern/bytecounting has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-bytecounting\n[DEBUG] Locking https-github.com-getlantern-connpool\n[DEBUG] Dependency github.com/getlantern/connpool has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-connpool\n[DEBUG] Locking https-github.com-klauspost-cpuid\n[DEBUG] Dependency github.com/klauspost/cpuid has already been pinned. Fetching updates skipped.\n[DEBUG] Locking https-github.com-getlantern-deepcopy\n[DEBUG] Dependency github.com/getlantern/deepcopy has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-deepcopy\n[DEBUG] Locking https-github.com-ua-parser-uap-go\n[DEBUG] Dependency github.com/ua-parser/uap-go has already been pinned. Fetching updates skipped.\n[DEBUG] Locking https-github.com-getlantern-tlsdialer\n[DEBUG] Dependency github.com/getlantern/tlsdialer has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Fetching updates skipped.\n[DEBUG] Locking https-github.com-getlantern-uuid\n[DEBUG] Dependency github.com/getlantern/uuid has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-uuid\n[DEBUG] Locking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-github.com-getlantern-interceptor\n[DEBUG] Dependency github.com/getlantern/interceptor has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-interceptor\n[DEBUG] Locking https-github.com-getlantern-byteexec\n[DEBUG] Locking https-github.com-gorilla-websocket\n[DEBUG] Dependency github.com/gorilla/websocket has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-getlantern-gowin\n[DEBUG] Dependency github.com/getlantern/gowin has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-gowin\n[DEBUG] Locking https-github.com-getlantern-elevate\n[DEBUG] Dependency github.com/getlantern/elevate has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-elevate\n[DEBUG] Locking https-github.com-blang-semver\n[DEBUG] Dependency github.com/blang/semver has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-blang-semver\n[DEBUG] Locking https-github.com-getlantern-go-update\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-go-update\n[DEBUG] Locking https-github.com-getlantern-context\n[DEBUG] Dependency github.com/getlantern/context has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-context\n[DEBUG] Dependency golang.org/x/net has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Locking https-github.com-xtaci-smux\n[DEBUG] Dependency github.com/xtaci/smux has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-xtaci-smux\n[DEBUG] Locking https-github.com-hashicorp-golang-lru\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-hashicorp-golang-lru\n[DEBUG] Locking https-github.com-getlantern-geolookup\n[DEBUG] Dependency github.com/getlantern/geolookup has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-mxk-go-flowrate\n[DEBUG] Locking https-golang.org-x-crypto\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-golang.org-x-crypto\n[DEBUG] Locking https-github.com-fatih-set\n[DEBUG] Dependency github.com/fatih/set has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-fatih-set\n[DEBUG] Dependency github.com/rcrowley/go-metrics has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-rcrowley-go-metrics\n[DEBUG] Locking https-golang.org-x-sys\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-golang.org-x-sys\n[DEBUG] Locking https-github.com-getlantern-fdcount\n[DEBUG] Dependency github.com/getlantern/fdcount has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-fdcount\n[DEBUG] Locking https-github.com-xtaci-kcp-go\n[DEBUG] Dependency github.com/xtaci/kcp-go has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-xtaci-kcp-go\n[DEBUG] Locking https-github.com-dchest-siphash\n[DEBUG] Locking https-github.com-klauspost-reedsolomon\n[DEBUG] Dependency github.com/klauspost/reedsolomon has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-klauspost-reedsolomon\n[DEBUG] Locking https-github.com-agl-ed25519\n[DEBUG] Dependency github.com/agl/ed25519 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-agl-ed25519\n[DEBUG] Locking https-github.com-getlantern-cmux\n[DEBUG] Unlocking https-github.com-klauspost-cpuid\n[DEBUG] Locking https-github.com-getlantern-snappyconn\n[INFO]  --> Fetching updates for github.com/getlantern/cmux.\n[DEBUG] Unlocking https-github.com-ua-parser-uap-go\n[INFO]  --> Fetching updates for github.com/getlantern/snappyconn.\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[DEBUG] Dependency github.com/getlantern/wfilter has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Dependency git.torproject.org/pluggable-transports/goptlib.git has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Dependency github.com/getlantern/byteexec has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-byteexec\n[DEBUG] Locking https-github.com-getlantern-grtrack\n[DEBUG] Dependency github.com/getlantern/grtrack has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-grtrack\n[DEBUG] Locking https-github.com-getlantern-edgedetect\n[DEBUG] Dependency github.com/getlantern/edgedetect has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-golang-groupcache\n[DEBUG] Dependency github.com/golang/groupcache has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-golang-groupcache\n[DEBUG] Locking https-github.com-gorilla-context\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-gorilla-context\n[DEBUG] Locking https-github.com-getlantern-stack\n[DEBUG] Dependency github.com/getlantern/stack has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-stack\n[DEBUG] Locking https-github.com-getlantern-hex\n[DEBUG] Dependency github.com/getlantern/hex has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-hex\n[DEBUG] Locking https-github.com-golang-snappy\n[DEBUG] Dependency github.com/golang/snappy has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-golang-snappy\n[DEBUG] Dependency github.com/mxk/go-flowrate has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-mxk-go-flowrate\n[DEBUG] Locking https-github.com-visionmedia-go-debug\n[DEBUG] Dependency github.com/visionmedia/go-debug has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-visionmedia-go-debug\n[DEBUG] Locking https-github.com-getlantern-winsvc\n[DEBUG] Dependency github.com/getlantern/winsvc has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-getlantern-winsvc\n[DEBUG] Locking https-github.com-kr-binarydist\n[DEBUG] Dependency github.com/kr/binarydist has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-kr-binarydist\n[DEBUG] Dependency github.com/dchest/siphash has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-dchest-siphash\n[DEBUG] Locking https-github.com-pkg-errors\n[DEBUG] Dependency github.com/pkg/errors has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Unlocking https-github.com-getlantern-cmux\n[DEBUG] Unlocking https-github.com-getlantern-snappyconn\n[DEBUG] Locking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Dependency gopkg.in/bsm/ratelimit.v1 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Locking https-gopkg.in-redis.v3\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-gopkg.in-redis.v3\n[DEBUG] Locking https-github.com-pmezard-go-difflib\n[DEBUG] Dependency github.com/pmezard/go-difflib has already been pinned. Fetching updates skipped.\n[DEBUG] Unlocking https-github.com-pmezard-go-difflib\n[INFO]  Setting references for remaining imports\n[DEBUG] Locking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-getlantern-hidden\n[DEBUG] Dependency github.com/getlantern/hidden has already been pinned. Setting version skipped.\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[DEBUG] Dependency github.com/davecgh/go-spew has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-getlantern-edgedetect\n[DEBUG] Dependency github.com/getlantern/edgedetect has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-getlantern-jibber_jabber\n[DEBUG] Dependency github.com/getlantern/jibber_jabber has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-jibber_jabber\n[DEBUG] Locking https-github.com-getlantern-keyman\n[DEBUG] Dependency github.com/getlantern/keyman has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-keyman\n[DEBUG] Locking https-github.com-getlantern-launcher\n[DEBUG] Dependency github.com/getlantern/launcher has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-launcher\n[DEBUG] Locking https-github.com-getlantern-netx\n[DEBUG] Dependency github.com/getlantern/netx has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-netx\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Dependency git.torproject.org/pluggable-transports/obfs4.git has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-github.com-getlantern-ops\n[DEBUG] Dependency github.com/getlantern/ops has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-ops\n[DEBUG] Locking https-github.com-getlantern-bandwidth\n[DEBUG] Dependency github.com/getlantern/bandwidth has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-pac\n[DEBUG] Dependency github.com/getlantern/pac has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pac\n[DEBUG] Locking https-github.com-getlantern-pro-server-client\n[DEBUG] Dependency github.com/getlantern/pro-server-client has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-getlantern-filepersist\n[DEBUG] Dependency github.com/getlantern/filepersist has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-getlantern-proxiedsites\n[DEBUG] Dependency github.com/getlantern/proxiedsites has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-proxybench\n[DEBUG] Dependency github.com/getlantern/proxybench has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-proxybench\n[DEBUG] Locking https-github.com-getlantern-rot13\n[DEBUG] Locking https-github.com-getlantern-borda\n[DEBUG] Dependency github.com/getlantern/borda has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-rotator\n[DEBUG] Dependency github.com/getlantern/rotator has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-getlantern-golog\n[DEBUG] Dependency github.com/getlantern/golog has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-golog\n[DEBUG] Locking https-github.com-armon-go-socks5\n[DEBUG] Dependency github.com/armon/go-socks5 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-getlantern-appdir\n[DEBUG] Dependency github.com/getlantern/appdir has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-uuid\n[DEBUG] Dependency github.com/getlantern/uuid has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-uuid\n[DEBUG] Locking https-github.com-getlantern-wfilter\n[DEBUG] Dependency git.torproject.org/pluggable-transports/goptlib.git has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-github.com-getlantern-withtimeout\n[DEBUG] Dependency github.com/getlantern/withtimeout has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-withtimeout\n[DEBUG] Locking https-github.com-getlantern-yaml\n[DEBUG] Locking https-github.com-getlantern-idletiming\n[DEBUG] Dependency github.com/getlantern/idletiming has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-gorilla-websocket\n[DEBUG] Dependency github.com/getlantern/balancer has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-balancer\n[DEBUG] Locking https-github.com-kardianos-osext\n[DEBUG] Dependency github.com/kardianos/osext has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-kardianos-osext\n[DEBUG] Locking https-github.com-getlantern-eventual\n[DEBUG] Dependency github.com/getlantern/eventual has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-go-loggly\n[DEBUG] Dependency github.com/getlantern/go-loggly has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-getlantern-geolookup\n[DEBUG] Dependency github.com/getlantern/geolookup has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-notifier\n[DEBUG] Dependency github.com/getlantern/notifier has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-notifier\n[DEBUG] Locking https-github.com-getlantern-errors\n[DEBUG] Dependency github.com/getlantern/errors has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-detour\n[DEBUG] Dependency github.com/getlantern/detour has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Dependency github.com/getlantern/rot13 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-rot13\n[DEBUG] Locking https-github.com-getlantern-http-proxy\n[DEBUG] Dependency github.com/getlantern/http-proxy has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy\n[DEBUG] Locking https-github.com-getlantern-fdcount\n[DEBUG] Dependency github.com/getlantern/fdcount has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-fdcount\n[DEBUG] Locking https-github.com-getlantern-buuid\n[DEBUG] Dependency github.com/getlantern/buuid has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-buuid\n[DEBUG] Locking https-github.com-getlantern-tarfs\n[DEBUG] Dependency github.com/getlantern/tarfs has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tarfs\n[DEBUG] Dependency github.com/getlantern/tlsdialer has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-getlantern-connpool\n[DEBUG] Dependency github.com/getlantern/connpool has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-connpool\n[DEBUG] Locking https-github.com-getlantern-deepcopy\n[DEBUG] Locking https-github.com-getlantern-i18n\n[DEBUG] Dependency github.com/getlantern/i18n has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-i18n\n[DEBUG] Dependency github.com/getlantern/yaml has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-yaml\n[DEBUG] Locking https-github.com-getlantern-measured\n[DEBUG] Dependency github.com/gorilla/websocket has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-gorilla-websocket\n[DEBUG] Dependency github.com/getlantern/fronted has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-mitchellh-panicwrap\n[DEBUG] Dependency github.com/mitchellh/panicwrap has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-mitchellh-panicwrap\n[DEBUG] Locking https-github.com-stretchr-testify\n[DEBUG] Locking https-github.com-oxtoacart-bpool\n[DEBUG] Dependency github.com/oxtoacart/bpool has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-oxtoacart-bpool\n[DEBUG] Locking https-github.com-skratchdot-open-golang\n[DEBUG] Dependency github.com/skratchdot/open-golang has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-skratchdot-open-golang\n[DEBUG] Locking https-github.com-golang-groupcache\n[DEBUG] Dependency github.com/golang/groupcache has already been pinned. Setting version skipped.\n[DEBUG] Locking https-github.com-getlantern-osversion\n[DEBUG] Dependency github.com/getlantern/osversion has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-osversion\n[DEBUG] Locking https-github.com-gorilla-context\n[DEBUG] Dependency github.com/gorilla/context has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-gorilla-context\n[DEBUG] Locking https-github.com-hashicorp-golang-lru\n[DEBUG] Dependency github.com/getlantern/profiling has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-mxk-go-flowrate\n[DEBUG] Locking https-github.com-vulcand-oxy\n[DEBUG] Dependency github.com/vulcand/oxy has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-vulcand-oxy\n[DEBUG] Locking https-github.com-rcrowley-go-metrics\n[DEBUG] Dependency github.com/getlantern/http-proxy-lantern has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Locking https-github.com-xtaci-kcp-go\n[DEBUG] Dependency github.com/xtaci/kcp-go has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-xtaci-kcp-go\n[DEBUG] Locking https-github.com-klauspost-crc32\n[DEBUG] Dependency github.com/klauspost/crc32 has already been pinned. Setting version skipped.\n[DEBUG] Locking https-github.com-getlantern-systray\n[DEBUG] Dependency github.com/getlantern/systray has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-systray\n[DEBUG] Locking https-github.com-klauspost-reedsolomon\n[DEBUG] Locking https-github.com-getlantern-bytecounting\n[DEBUG] Dependency github.com/getlantern/bytecounting has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-bytecounting\n[DEBUG] Locking https-github.com-getlantern-checkfallbacks\n[DEBUG] Dependency github.com/getlantern/checkfallbacks has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-checkfallbacks\n[DEBUG] Locking https-github.com-getlantern-autoupdate\n[DEBUG] Dependency github.com/getlantern/autoupdate has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-ua-parser-uap-go\n[DEBUG] Dependency github.com/ua-parser/uap-go has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-ua-parser-uap-go\n[DEBUG] Dependency github.com/getlantern/deepcopy has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-deepcopy\n[DEBUG] Locking https-github.com-getlantern-interceptor\n[DEBUG] Locking https-github.com-getlantern-pathreflect\n[DEBUG] Dependency github.com/getlantern/pathreflect has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-pathreflect\n[DEBUG] Locking https-github.com-getlantern-byteexec\n[DEBUG] Dependency github.com/getlantern/measured has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-measured\n[DEBUG] Locking https-github.com-getlantern-gowin\n[DEBUG] Dependency github.com/getlantern/gowin has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-gowin\n[DEBUG] Locking https-github.com-getlantern-elevate\n[DEBUG] Dependency github.com/getlantern/elevate has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-elevate\n[DEBUG] Locking https-github.com-blang-semver\n[DEBUG] Dependency github.com/blang/semver has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-blang-semver\n[DEBUG] Dependency github.com/stretchr/testify has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[DEBUG] Locking https-github.com-getlantern-context\n[DEBUG] Dependency github.com/getlantern/context has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-context\n[DEBUG] Locking https-github.com-getlantern-grtrack\n[DEBUG] Dependency github.com/getlantern/grtrack has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-grtrack\n[DEBUG] Locking https-github.com-xtaci-smux\n[DEBUG] Dependency github.com/xtaci/smux has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-xtaci-smux\n[DEBUG] Locking https-github.com-getlantern-hex\n[DEBUG] Dependency github.com/getlantern/hex has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-hex\n[DEBUG] Locking https-golang.org-x-net\n[DEBUG] Dependency golang.org/x/net has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Locking https-golang.org-x-crypto\n[DEBUG] Dependency golang.org/x/crypto has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-crypto\n[DEBUG] Locking https-github.com-fatih-set\n[DEBUG] Dependency github.com/fatih/set has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-fatih-set\n[DEBUG] Locking https-github.com-visionmedia-go-debug\n[DEBUG] Dependency github.com/visionmedia/go-debug has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-visionmedia-go-debug\n[DEBUG] Dependency github.com/hashicorp/golang-lru has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-hashicorp-golang-lru\n[DEBUG] Dependency github.com/rcrowley/go-metrics has already been pinned. Setting version skipped.\n[DEBUG] Locking https-github.com-getlantern-winsvc\n[DEBUG] Dependency github.com/getlantern/winsvc has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-klauspost-crc32\n[DEBUG] Unlocking https-github.com-getlantern-winsvc\n[DEBUG] Locking https-github.com-kr-binarydist\n[DEBUG] Dependency github.com/kr/binarydist has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-kr-binarydist\n[DEBUG] Locking https-github.com-dchest-siphash\n[DEBUG] Dependency github.com/dchest/siphash has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-dchest-siphash\n[DEBUG] Locking https-github.com-klauspost-cpuid\n[DEBUG] Dependency github.com/klauspost/cpuid has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-klauspost-cpuid\n[DEBUG] Locking https-github.com-getlantern-snappyconn\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[DEBUG] Dependency github.com/Sirupsen/logrus has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[DEBUG] Locking https-github.com-pmezard-go-difflib\n[DEBUG] Dependency github.com/pmezard/go-difflib has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-pmezard-go-difflib\n[DEBUG] Dependency github.com/getlantern/byteexec has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-byteexec\n[DEBUG] Locking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Dependency gopkg.in/bsm/ratelimit.v1 has already been pinned. Setting version skipped.\n[DEBUG] Locking https-github.com-getlantern-tlsdefaults\n[DEBUG] Dependency github.com/getlantern/tlsdefaults has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-tlsdefaults\n[DEBUG] Locking https-github.com-getlantern-go-update\n[DEBUG] Dependency github.com/getlantern/go-update has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-go-update\n[DEBUG] Locking https-github.com-getlantern-stack\n[DEBUG] Dependency github.com/getlantern/stack has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-stack\n[DEBUG] Locking https-github.com-golang-snappy\n[DEBUG] Dependency github.com/golang/snappy has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-golang-snappy\n[DEBUG] Unlocking https-github.com-golang-groupcache\n[DEBUG] Locking https-github.com-mailgun-oxy\n[DEBUG] Dependency github.com/mailgun/oxy has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-mailgun-oxy\n[DEBUG] Locking https-golang.org-x-sys\n[DEBUG] Dependency golang.org/x/sys has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-golang.org-x-sys\n[DEBUG] Dependency github.com/mxk/go-flowrate has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-mxk-go-flowrate\n[DEBUG] Unlocking https-github.com-rcrowley-go-metrics\n[DEBUG] Unlocking https-github.com-getlantern-hidden\n[DEBUG] Dependency github.com/klauspost/reedsolomon has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-klauspost-reedsolomon\n[DEBUG] Locking https-github.com-agl-ed25519\n[DEBUG] Dependency github.com/agl/ed25519 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-agl-ed25519\n[DEBUG] Locking https-github.com-pkg-errors\n[DEBUG] Dependency github.com/pkg/errors has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Locking https-github.com-getlantern-cmux\n[DEBUG] Dependency github.com/getlantern/wfilter has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-wfilter\n[DEBUG] Dependency github.com/getlantern/interceptor has already been pinned. Setting version skipped.\n[DEBUG] Locking https-gopkg.in-redis.v3\n[DEBUG] Dependency gopkg.in/redis.v3 has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-gopkg.in-redis.v3\n[DEBUG] Unlocking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Locking https-github.com-getlantern-waitforserver\n[DEBUG] Dependency github.com/getlantern/waitforserver has already been pinned. Setting version skipped.\n[DEBUG] Unlocking https-github.com-getlantern-waitforserver\n[DEBUG] Unlocking https-github.com-getlantern-interceptor\n[DEBUG] Unlocking https-github.com-getlantern-snappyconn\n[DEBUG] Unlocking https-github.com-getlantern-cmux\n[INFO]  Exporting resolved dependencies...\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Locking https-git.torproject.org-pluggable-transports-obfs4.git\n[DEBUG] Locking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-getlantern-appdir\n[INFO]  --> Exporting git.torproject.org/pluggable-transports/goptlib.git\n[DEBUG] Locking https-github.com-getlantern-borda\n[INFO]  --> Exporting git.torproject.org/pluggable-transports/obfs4.git\n[DEBUG] Locking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-balancer\n[INFO]  --> Exporting github.com/armon/go-socks5\n[DEBUG] Locking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-getlantern-edgedetect\n[INFO]  --> Exporting github.com/getlantern/appdir\n[DEBUG] Locking https-github.com-getlantern-autoupdate\n[DEBUG] Locking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-getlantern-eventual\n[INFO]  --> Exporting github.com/davecgh/go-spew\n[DEBUG] Locking https-github.com-getlantern-geolookup\n[INFO]  --> Exporting github.com/getlantern/bandwidth\n[DEBUG] Locking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-hidden\n[DEBUG] Unlocking https-github.com-armon-go-socks5\n[DEBUG] Locking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-getlantern-golog\n[INFO]  --> Exporting github.com/getlantern/autoupdate\n[DEBUG] Locking https-github.com-getlantern-fronted\n[INFO]  --> Exporting github.com/getlantern/balancer\n[INFO]  --> Exporting github.com/getlantern/filepersist\n[INFO]  --> Exporting github.com/getlantern/geolookup\n[DEBUG] Locking https-github.com-getlantern-i18n\n[INFO]  --> Exporting github.com/getlantern/errors\n[INFO]  --> Exporting github.com/getlantern/detour\n[DEBUG] Unlocking https-github.com-getlantern-geolookup\n[DEBUG] Locking https-github.com-getlantern-jibber_jabber\n[INFO]  --> Exporting github.com/getlantern/eventual\n[DEBUG] Unlocking https-github.com-getlantern-bandwidth\n[DEBUG] Locking https-github.com-getlantern-keyman\n[INFO]  --> Exporting github.com/getlantern/edgedetect\n[DEBUG] Unlocking https-github.com-getlantern-errors\n[DEBUG] Locking https-github.com-getlantern-launcher\n[DEBUG] Unlocking https-github.com-getlantern-appdir\n[DEBUG] Locking https-github.com-getlantern-netx\n[INFO]  --> Exporting github.com/getlantern/go-loggly\n[DEBUG] Unlocking https-github.com-getlantern-edgedetect\n[DEBUG] Locking https-github.com-getlantern-notifier\n[INFO]  --> Exporting github.com/getlantern/idletiming\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-obfs4.git\n[INFO]  --> Exporting github.com/getlantern/golog\n[DEBUG] Locking https-github.com-getlantern-ops\n[DEBUG] Unlocking https-github.com-getlantern-go-loggly\n[DEBUG] Locking https-github.com-getlantern-osversion\n[DEBUG] Unlocking https-github.com-getlantern-autoupdate\n[INFO]  --> Exporting github.com/getlantern/notifier\n[DEBUG] Locking https-github.com-getlantern-pac\n[DEBUG] Unlocking https-github.com-getlantern-balancer\n[DEBUG] Unlocking https-github.com-getlantern-golog\n[DEBUG] Unlocking https-github.com-getlantern-filepersist\n[DEBUG] Locking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-pro-server-client\n[INFO]  --> Exporting github.com/getlantern/osversion\n[DEBUG] Unlocking https-github.com-getlantern-eventual\n[DEBUG] Locking https-github.com-getlantern-proxybench\n[INFO]  --> Exporting github.com/getlantern/borda\n[DEBUG] Unlocking https-github.com-getlantern-osversion\n[INFO]  --> Exporting github.com/getlantern/launcher\n[INFO]  --> Exporting github.com/getlantern/pro-server-client\n[INFO]  --> Exporting github.com/getlantern/keyman\n[DEBUG] Locking https-github.com-getlantern-rot13\n[INFO]  --> Exporting github.com/getlantern/netx\n[DEBUG] Unlocking https-git.torproject.org-pluggable-transports-goptlib.git\n[DEBUG] Unlocking https-github.com-getlantern-idletiming\n[DEBUG] Locking https-github.com-getlantern-systray\n[DEBUG] Locking https-github.com-getlantern-rotator\n[INFO]  --> Exporting github.com/getlantern/ops\n[DEBUG] Unlocking https-github.com-getlantern-netx\n[DEBUG] Unlocking https-github.com-getlantern-pro-server-client\n[DEBUG] Locking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-getlantern-tarfs\n[INFO]  --> Exporting github.com/getlantern/i18n\n[INFO]  --> Exporting github.com/getlantern/systray\n[INFO]  --> Exporting github.com/getlantern/pac\n[DEBUG] Unlocking https-github.com-getlantern-notifier\n[DEBUG] Locking https-github.com-getlantern-uuid\n[INFO]  --> Exporting github.com/getlantern/proxiedsites\n[INFO]  --> Exporting github.com/getlantern/tlsdialer\n[INFO]  --> Exporting github.com/getlantern/profiling\n[INFO]  --> Exporting github.com/getlantern/jibber_jabber\n[INFO]  --> Exporting github.com/getlantern/proxybench\n[DEBUG] Unlocking https-github.com-getlantern-proxiedsites\n[DEBUG] Locking https-github.com-getlantern-wfilter\n[DEBUG] Unlocking https-github.com-getlantern-keyman\n[DEBUG] Locking https-github.com-getlantern-withtimeout\n[DEBUG] Unlocking https-github.com-getlantern-borda\n[DEBUG] Locking https-github.com-getlantern-yaml\n[INFO]  --> Exporting github.com/getlantern/rot13\n[INFO]  --> Exporting github.com/getlantern/wfilter\n[INFO]  --> Exporting github.com/getlantern/withtimeout\n[INFO]  --> Exporting github.com/getlantern/yaml\n[INFO]  --> Exporting github.com/getlantern/tarfs\n[DEBUG] Unlocking https-github.com-getlantern-systray\n[DEBUG] Unlocking https-github.com-davecgh-go-spew\n[DEBUG] Locking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-kardianos-osext\n[DEBUG] Unlocking https-github.com-getlantern-i18n\n[DEBUG] Locking https-github.com-mitchellh-panicwrap\n[DEBUG] Unlocking https-github.com-getlantern-withtimeout\n[DEBUG] Locking https-github.com-oxtoacart-bpool\n[DEBUG] Unlocking https-github.com-getlantern-ops\n[DEBUG] Locking https-github.com-skratchdot-open-golang\n[INFO]  --> Exporting github.com/getlantern/hidden\n[INFO]  --> Exporting github.com/kardianos/osext\n[DEBUG] Unlocking https-github.com-getlantern-pac\n[DEBUG] Locking https-golang.org-x-net\n[INFO]  --> Exporting github.com/getlantern/uuid\n[INFO]  --> Exporting github.com/skratchdot/open-golang\n[DEBUG] Unlocking https-github.com-getlantern-launcher\n[DEBUG] Locking https-github.com-mailgun-oxy\n[DEBUG] Unlocking https-github.com-getlantern-hidden\n[DEBUG] Locking https-github.com-vulcand-oxy\n[INFO]  --> Exporting github.com/getlantern/fronted\n[DEBUG] Unlocking https-github.com-getlantern-proxybench\n[INFO]  --> Exporting github.com/getlantern/rotator\n[DEBUG] Locking https-github.com-getlantern-http-proxy-lantern\n[DEBUG] Unlocking https-github.com-kardianos-osext\n[DEBUG] Locking https-github.com-getlantern-http-proxy\n[DEBUG] Unlocking https-github.com-getlantern-yaml\n[DEBUG] Locking https-github.com-getlantern-fdcount\n[DEBUG] Unlocking https-github.com-getlantern-fronted\n[DEBUG] Locking https-github.com-getlantern-buuid\n[INFO]  --> Exporting github.com/gorilla/websocket\n[DEBUG] Unlocking https-github.com-getlantern-wfilter\n[DEBUG] Locking https-github.com-getlantern-bytecounting\n[INFO]  --> Exporting github.com/oxtoacart/bpool\n[INFO]  --> Exporting github.com/mitchellh/panicwrap\n[DEBUG] Unlocking https-github.com-getlantern-tarfs\n[DEBUG] Locking https-github.com-getlantern-checkfallbacks\n[INFO]  --> Exporting github.com/getlantern/bytecounting\n[DEBUG] Unlocking https-github.com-getlantern-profiling\n[DEBUG] Locking https-github.com-getlantern-connpool\n[DEBUG] Unlocking https-github.com-getlantern-jibber_jabber\n[DEBUG] Locking https-github.com-getlantern-deepcopy\n[DEBUG] Unlocking https-github.com-oxtoacart-bpool\n[DEBUG] Unlocking https-github.com-getlantern-rot13\n[DEBUG] Locking https-github.com-getlantern-pathreflect\n[DEBUG] Locking https-github.com-getlantern-measured\n[DEBUG] Unlocking https-github.com-getlantern-bytecounting\n[DEBUG] Locking https-github.com-getlantern-tlsdefaults\n[INFO]  --> Exporting github.com/mailgun/oxy\n[INFO]  --> Exporting github.com/getlantern/connpool\n[DEBUG] Unlocking https-github.com-skratchdot-open-golang\n[DEBUG] Locking https-github.com-getlantern-waitforserver\n[INFO]  --> Exporting github.com/getlantern/deepcopy\n[DEBUG] Unlocking https-github.com-getlantern-detour\n[DEBUG] Locking https-github.com-stretchr-testify\n[INFO]  --> Exporting github.com/getlantern/fdcount\n[INFO]  --> Exporting github.com/getlantern/http-proxy-lantern\n[DEBUG] Unlocking https-github.com-getlantern-deepcopy\n[INFO]  --> Exporting github.com/getlantern/waitforserver\n[DEBUG] Unlocking https-github.com-getlantern-tlsdialer\n[DEBUG] Locking https-github.com-getlantern-grtrack\n[DEBUG] Locking https-github.com-golang-groupcache\n[DEBUG] Unlocking https-github.com-getlantern-fdcount\n[DEBUG] Locking https-github.com-gorilla-context\n[DEBUG] Unlocking https-github.com-getlantern-waitforserver\n[DEBUG] Locking https-github.com-hashicorp-golang-lru\n[INFO]  --> Exporting github.com/gorilla/context\n[DEBUG] Unlocking https-github.com-gorilla-websocket\n[DEBUG] Locking https-github.com-mxk-go-flowrate\n[INFO]  --> Exporting github.com/vulcand/oxy\n[INFO]  --> Exporting github.com/getlantern/pathreflect\n[INFO]  --> Exporting github.com/getlantern/tlsdefaults\n[DEBUG] Unlocking https-github.com-gorilla-context\n[INFO]  --> Exporting github.com/hashicorp/golang-lru\n[DEBUG] Locking https-github.com-rcrowley-go-metrics\n[DEBUG] Unlocking https-github.com-getlantern-rotator\n[DEBUG] Locking https-github.com-xtaci-kcp-go\n[DEBUG] Unlocking https-github.com-mitchellh-panicwrap\n[DEBUG] Locking https-github.com-klauspost-crc32\n[DEBUG] Unlocking https-github.com-hashicorp-golang-lru\n[DEBUG] Locking https-github.com-klauspost-reedsolomon\n[DEBUG] Unlocking https-github.com-getlantern-pathreflect\n[DEBUG] Locking https-github.com-pkg-errors\n[DEBUG] Unlocking https-github.com-vulcand-oxy\n[INFO]  --> Exporting github.com/xtaci/kcp-go\n[INFO]  --> Exporting github.com/klauspost/reedsolomon\n[INFO]  --> Exporting github.com/getlantern/buuid\n[INFO]  --> Exporting github.com/getlantern/grtrack\n[DEBUG] Locking https-github.com-klauspost-cpuid\n[INFO]  --> Exporting github.com/golang/groupcache\n[INFO]  --> Exporting github.com/pkg/errors\n[INFO]  --> Exporting github.com/klauspost/cpuid\n[DEBUG] Unlocking https-github.com-getlantern-buuid\n[INFO]  --> Exporting golang.org/x/net\n[DEBUG] Locking https-github.com-ua-parser-uap-go\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy-lantern\n[INFO]  --> Exporting github.com/getlantern/measured\n[DEBUG] Locking https-github.com-Sirupsen-logrus\n[DEBUG] Unlocking https-github.com-getlantern-tlsdefaults\n[DEBUG] Locking https-github.com-getlantern-interceptor\n[INFO]  --> Exporting github.com/getlantern/interceptor\n[DEBUG] Unlocking https-github.com-mailgun-oxy\n[INFO]  --> Exporting github.com/getlantern/checkfallbacks\n[DEBUG] Locking https-github.com-getlantern-byteexec\n[DEBUG] Unlocking https-github.com-klauspost-cpuid\n[DEBUG] Locking https-github.com-getlantern-gowin\n[INFO]  --> Exporting github.com/stretchr/testify\n[INFO]  --> Exporting github.com/klauspost/crc32\n[DEBUG] Unlocking https-github.com-getlantern-interceptor\n[DEBUG] Unlocking https-github.com-getlantern-checkfallbacks\n[DEBUG] Locking https-github.com-blang-semver\n[DEBUG] Locking https-github.com-getlantern-elevate\n[INFO]  --> Exporting github.com/Sirupsen/logrus\n[INFO]  --> Exporting github.com/getlantern/http-proxy\n[DEBUG] Unlocking https-github.com-golang-groupcache\n[DEBUG] Locking https-github.com-getlantern-go-update\n[DEBUG] Unlocking https-github.com-klauspost-reedsolomon\n[DEBUG] Locking https-github.com-getlantern-context\n[INFO]  --> Exporting github.com/rcrowley/go-metrics\n[DEBUG] Unlocking https-github.com-pkg-errors\n[DEBUG] Locking https-github.com-getlantern-stack\n[DEBUG] Unlocking https-github.com-getlantern-http-proxy\n[DEBUG] Locking https-github.com-xtaci-smux\n[DEBUG] Unlocking https-github.com-stretchr-testify\n[INFO]  --> Exporting github.com/getlantern/go-update\n[DEBUG] Locking https-github.com-getlantern-hex\n[INFO]  --> Exporting github.com/mxk/go-flowrate\n[DEBUG] Unlocking https-github.com-Sirupsen-logrus\n[INFO]  --> Exporting github.com/xtaci/smux\n[DEBUG] Locking https-github.com-golang-snappy\n[DEBUG] Unlocking https-github.com-rcrowley-go-metrics\n[DEBUG] Locking https-golang.org-x-crypto\n[INFO]  --> Exporting github.com/blang/semver\n[INFO]  --> Exporting github.com/getlantern/elevate\n[DEBUG] Unlocking https-github.com-klauspost-crc32\n[DEBUG] Locking https-github.com-fatih-set\n[INFO]  --> Exporting github.com/getlantern/byteexec\n[INFO]  --> Exporting github.com/ua-parser/uap-go\n[DEBUG] Unlocking https-github.com-getlantern-grtrack\n[DEBUG] Unlocking https-github.com-getlantern-go-update\n[DEBUG] Locking https-github.com-visionmedia-go-debug\n[DEBUG] Locking https-golang.org-x-sys\n[INFO]  --> Exporting github.com/getlantern/gowin\n[DEBUG] Unlocking https-github.com-getlantern-elevate\n[INFO]  --> Exporting github.com/getlantern/stack\n[DEBUG] Locking https-github.com-getlantern-winsvc\n[DEBUG] Unlocking https-github.com-getlantern-connpool\n[INFO]  --> Exporting github.com/getlantern/context\n[DEBUG] Locking https-github.com-kr-binarydist\n[INFO]  --> Exporting github.com/visionmedia/go-debug\n[DEBUG] Unlocking https-github.com-getlantern-gowin\n[DEBUG] Locking https-github.com-dchest-siphash\n[DEBUG] Unlocking https-github.com-mxk-go-flowrate\n[DEBUG] Locking https-github.com-agl-ed25519\n[DEBUG] Unlocking https-github.com-xtaci-kcp-go\n[DEBUG] Locking https-github.com-getlantern-cmux\n[DEBUG] Unlocking https-github.com-getlantern-measured\n[DEBUG] Unlocking https-github.com-blang-semver\n[INFO]  --> Exporting github.com/dchest/siphash\n[DEBUG] Locking https-github.com-pmezard-go-difflib\n[DEBUG] Locking https-github.com-getlantern-snappyconn\n[INFO]  --> Exporting github.com/getlantern/cmux\n[DEBUG] Unlocking https-github.com-xtaci-smux\n[INFO]  --> Exporting github.com/agl/ed25519\n[DEBUG] Locking https-gopkg.in-redis.v3\n[INFO]  --> Exporting github.com/getlantern/hex\n[INFO]  --> Exporting github.com/getlantern/winsvc\n[INFO]  --> Exporting github.com/golang/snappy\n[DEBUG] Unlocking https-github.com-agl-ed25519\n[DEBUG] Unlocking https-github.com-getlantern-stack\n[DEBUG] Locking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Unlocking https-golang.org-x-net\n[DEBUG] Unlocking https-github.com-getlantern-uuid\n[INFO]  --> Exporting github.com/kr/binarydist\n[DEBUG] Unlocking https-github.com-getlantern-context\n[DEBUG] Unlocking https-github.com-visionmedia-go-debug\n[INFO]  --> Exporting github.com/fatih/set\n[INFO]  --> Exporting github.com/getlantern/snappyconn\n[DEBUG] Unlocking https-github.com-getlantern-byteexec\n[DEBUG] Unlocking https-github.com-dchest-siphash\n[DEBUG] Unlocking https-github.com-fatih-set\n[INFO]  --> Exporting github.com/pmezard/go-difflib\n[INFO]  --> Exporting golang.org/x/sys\n[DEBUG] Unlocking https-github.com-getlantern-hex\n[DEBUG] Unlocking https-github.com-getlantern-cmux\n[DEBUG] Unlocking https-github.com-kr-binarydist\n[DEBUG] Unlocking https-github.com-golang-snappy\n[DEBUG] Unlocking https-github.com-pmezard-go-difflib\n[INFO]  --> Exporting golang.org/x/crypto\n[DEBUG] Unlocking https-github.com-getlantern-snappyconn\n[DEBUG] Unlocking https-github.com-getlantern-winsvc\n[DEBUG] Unlocking https-github.com-ua-parser-uap-go\n[INFO]  --> Exporting gopkg.in/redis.v3\n[INFO]  --> Exporting gopkg.in/bsm/ratelimit.v1\n[DEBUG] Unlocking https-gopkg.in-bsm-ratelimit.v1\n[DEBUG] Unlocking https-gopkg.in-redis.v3\n[DEBUG] Unlocking https-golang.org-x-sys\n[DEBUG] Unlocking https-golang.org-x-crypto\n[INFO]  Replacing existing vendor dependencies\n[INFO]  Versions did not change. Skipping glide.lock update.\n[INFO]  Project relies on 97 dependencies.\n. Just did this from another repo that's not private. Here's the diff after glide up -- it somehow managed to revert to an older version of getlantern/osversion -- 3e32bd574d362a5fffe8f14459dea41636db2498 is the one it opted for even though the version it was previously using is clearly newer at https://github.com/getlantern/osversion/commits/master\nVery frustrating.\n$ git di\ndiff --git a/glide.lock b/glide.lock\nindex d1c78a8..2b5146e 100644\n--- a/glide.lock\n+++ b/glide.lock\n@@ -1,5 +1,5 @@\n hash: 61396f9cf05b67c1701b9df2cedebda5c550d9278e0f20507f08628e1a8089b0\n-updated: 2016-10-28T10:31:12.137879932-07:00\n+updated: 2016-11-01T08:20:44.487677626-07:00\n imports:\n - name: git.torproject.org/pluggable-transports/goptlib.git\n   version: 50915b3ba5ee27c0b2fcdad9edd51156fb55192c\n@@ -52,7 +52,7 @@ imports:\n - name: github.com/getlantern/filepersist\n   version: c5f0cd24e7991579ba6f5f1bd20a1ad2c9f06cd4\n - name: github.com/getlantern/flashlight\n-  version: 0879995ad4848c54d7eb1d3d053b08949a4d3ee7\n+  version: 8a7472ce00f171f81f36c9a83bc442bc316b6cc3\n   subpackages:\n   - balancer\n   - chained\n@@ -96,7 +96,7 @@ imports:\n - name: github.com/getlantern/ops\n   version: b70875f5d689a9438bca72aefd7142a2af889b18\n - name: github.com/getlantern/osversion\n-  version: 4aedc380e3bab4f0c97b1481492cb0b81c1d91f9\n+  version: 3e32bd574d362a5fffe8f14459dea41636db2498\n - name: github.com/getlantern/pro-server-client\n   version: e8c294a69c60b7bfac7f1c9928556d947f248519\n   subpackages:\n. Sure enough glide cc fixed the above issue.\n. ",
    "gngeorgiev": "Experiencing the same here, can confirm that glide does not pick up any new versions of the packages when they are in cache, after the cache is cleaned up the new version is picked up\n. ",
    "alex4Liang": "Yeah, Thanks for reply. I just check the problem of GWT in China\u3002\nAfter I fixed my network, I rebuild my glide.yaml. When the option comes: \n[INFO]  Updating github.com/dgrijalva/jwt-go to use the release v3.0.0 instead of no release\n[INFO]  The package github.com/dgrijalva/jwt-go appears to use semantic versions (http://semver.org).\n[INFO]  Would you like to track the latest minor or patch releases (major.minor.patch)?\n[INFO]  Tracking minor version releases would use '>= 3.0.0, < 4.0.0' ('^3.0.0'). Tracking patch version\n[INFO]  releases would use '>= 3.0.0, < 3.1.0' ('~3.0.0'). For more information on Glide versions\n[INFO]  and ranges see https://glide.sh/docs/versions\n[INFO]  Minor (M), Patch (P), or Skip Ranges (S)?\nI typed M, while I chose S last time. Then I works. \n. ",
    "deinspanjer": "This has something to do with the change Docker made between 1.12.3 and 1.13.0-dev.  They removed the engine-api package and shuffled things around.\nIt looks like at some point, we put a dependency into our code based on the new 1.13.0-dev structure and I have to either refactor that back out or accept using the dev.\nIs it possible to refer to 1.13.0-dev as a semantic version?  Especially if I could accept a patch release to stable when it comes?\n. ",
    "stffabi": "Docker uses trash for fixing their dependencies, so as a first step glide would need the changes from #740. Afterwards you could fix your dependencies e.g. like here https://github.com/stffabi/watchtower/blob/feature_DependencyFixed/glide.yaml#L6. ",
    "Shashwatsh": "+1. I have this error too. +1. btw Hi @godcong . this happened because my Go version was 1.3.3, updating it to 1.8.3 solved the issue.. ",
    "cyphar": "Also, I would seriously advise implementing something like my hack/vendor.sh which cleans up the vendored imports (to not use packages I didn't import in the actual code). Inside umoci this reduced the size of the repository by 20x.\n. This keeps breaking things. Specifically it's breaking glide up if you move a package around inside your project. You have to force-push to master to fix these things. In particular, it means you have to push broken code to master to fix things. And not to mention that the ~/.glide/cache needs to be forcefully purged by myself in order to update anything -- because it stores the old versions of the structure.\nPlease fix this. /cc @mattfarina. > this path suggests that you have a cache directory within the project directory (that you've set glide's home directory to the project directory).\nWhen I first created this issue, that is what I was doing. I've since stopped (and switched to a different model of patching vendor/). However, even after no longer doing it there still is the second issue I described.\n\nIf committing and pushing to your upstream repository in any way affects the behavior of glide, then it suggests you're using glide in a way we did not intend. Could you please provide detailed, step-by-step reproduction problems for the problems you're seeing? Cloning github.com/cyphar/umoci (and optionally then checking out some specific rev therein) would be a fine way to do that.\n\nSure. Here are some example steps:\n% git clone https://github.com/cyphar/umoci && cd umoci\n% git mv pkg package # rename a package\n% git sed 's/pkg/package/g' # this is an alias I have which does a `sed` on all source files\n% git checkout glide.lock # revert all changes to glide.lock\n% glide up\n[WARN]  The name listed in the config file (umoci) does not match the current location (.)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/opencontainers/image-spec.\n[INFO]  --> Fetching updates for github.com/Sirupsen/logrus.\n[INFO]  --> Fetching updates for github.com/vbatts/go-mtree.\n[INFO]  --> Fetching updates for github.com/opencontainers/image-tools.\n[INFO]  --> Fetching updates for github.com/urfave/cli.\n[INFO]  --> Fetching updates for github.com/opencontainers/runtime-tools.\n[INFO]  --> Fetching updates for github.com/opencontainers/runtime-spec.\n[INFO]  --> Setting version for github.com/vbatts/go-mtree to master.\n[INFO]  --> Setting version for github.com/opencontainers/image-spec to v1.0.0-rc2.\n[INFO]  --> Setting version for github.com/opencontainers/runtime-spec to v1.0.0-rc2.\n[INFO]  --> Detected semantic version. Setting version for github.com/Sirupsen/logrus to v0.11.0.\n[INFO]  --> Detected semantic version. Setting version for github.com/urfave/cli to v1.18.1.\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for golang.org/x/sys.\n[INFO]  --> Fetching updates for golang.org/x/net.\n[INFO]  --> Fetching updates for github.com/cyphar/umoci.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[INFO]  Found Godeps.json file in /home/cyphar/.glide/cache/src/https-github.com-opencontainers-runtime-tools\n[INFO]  --> Parsing Godeps metadata...\n[INFO]  --> Fetching updates for github.com/syndtr/gocapability.\n[INFO]  --> Setting version for github.com/syndtr/gocapability to 2c00daeb6c3b45114c80ac44119e7b8801fdd852.\n[ERROR] Error scanning github.com/cyphar/umoci/package/idtools: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/idtools: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/cyphar/umoci/package/system: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/system: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/cyphar/umoci/package/unpriv: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/unpriv: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports\nIf I remove my cache, this is the error I get:\n% glide up\n[WARN]  The name listed in the config file (umoci) does not match the current location (.)\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching github.com/Sirupsen/logrus.\n[INFO]  --> Fetching github.com/opencontainers/runtime-tools.\n[INFO]  --> Fetching github.com/opencontainers/image-spec.\n[INFO]  --> Fetching github.com/opencontainers/runtime-spec.\n[INFO]  --> Fetching github.com/vbatts/go-mtree.\n[INFO]  --> Fetching github.com/urfave/cli.\n[INFO]  --> Fetching github.com/opencontainers/image-tools.\n[INFO]  --> Setting version for github.com/opencontainers/runtime-spec to v1.0.0-rc2.\n[INFO]  --> Setting version for github.com/vbatts/go-mtree to master.\n[INFO]  --> Setting version for github.com/opencontainers/image-spec to v1.0.0-rc2.\n[INFO]  --> Detected semantic version. Setting version for github.com/Sirupsen/logrus to v0.11.0.\n[INFO]  --> Detected semantic version. Setting version for github.com/urfave/cli to v1.18.1.\n[INFO]  Resolving imports\n[INFO]  --> Fetching golang.org/x/sys.\n[INFO]  --> Fetching github.com/cyphar/umoci.\n[INFO]  --> Fetching golang.org/x/net.\n[INFO]  --> Fetching golang.org/x/crypto.\n[INFO]  Found Godeps.json file in /home/cyphar/.glide/cache/src/https-github.com-opencontainers-runtime-tools\n[INFO]  --> Parsing Godeps metadata...\n[INFO]  --> Fetching github.com/syndtr/gocapability.\n[INFO]  --> Setting version for github.com/syndtr/gocapability to 2c00daeb6c3b45114c80ac44119e7b8801fdd852.\n[ERROR] Error scanning github.com/cyphar/umoci/package/idtools: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/idtools: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/cyphar/umoci/package/system: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/system: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Error scanning github.com/cyphar/umoci/package/unpriv: open /home/cyphar/.glide/cache/src/https-github.com-cyphar-umoci/package/unpriv: no such file or directory\n[ERROR] This error means the referenced package was not found.\n[ERROR] Missing file or directory errors usually occur when multiple packages\n[ERROR] share a common dependency and the first reference encountered by the scanner\n[ERROR] sets the version to one that does not contain a subpackage needed required\n[ERROR] by another package that uses the shared dependency. Try setting a\n[ERROR] version in your glide.yaml that works for all packages that share this\n[ERROR] dependency.\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports\nThis happens every time that I rename a package and also try to revendor something at the same time. I recognise this might be a niche thing, but it also happens if I'm working on a branch that I haven't merged into master yet (or a branch where I haven't pushed it to GitHub yet).\nI think the main issue is that you're detecting local imports (importing github.com/cyphar/umoci/... inside the project github.com/cyphar/umoci) as though they need to be vendored -- which they don't. This results in you trying to pull the latest update from GitHub to figure out what files exist in the project.. I've stopped using glide because of this issue, so I can't really comment on what setup I used a year ago. However, I didn't have my source outside of my GOPATH.. rm -rf ~/.glide does not help either.. Replacing \"errors\" with \"github.com/pkg/errors\" doesn't fix the issue (in all of the deps). But it's probably something to do with the  cache and I've had enough of debugging glide issues recently.. ",
    "AndrewSamokhvalov": "Confirming issue for release 0.13.1\n\nFor example, in umoci running glide up -v will cause glide to try to vendor the current project. This is really frustrating because it causes issues like this when I try to add new subprojects (and use them in the same commit). Why on earth is this being done?\nThis keeps breaking things. Specifically it's breaking glide up if you move a package around inside your project. You have to force-push to master to fix these things. In particular, it means you have to push broken code to master to fix things. And not to mention that the ~/.glide/cache needs to be forcefully purged by myself in order to update anything -- because it stores the old versions of the structure.. \n",
    "mdpye": "I agree that upstream forcing-pushing was rude, especially in the golang ecosystem where SHAs are the public version numbers.\nBut surely this case could be detected and the error message improved. If the cache has local changes then glide could recommend clearing the cache or even test to see if those changes are part of an open merge and hint at what might have happened.\nIt would have saved a bunch of time diagnosing the issue. For example, we weren't aware glide had a separate cache, so having checked all the possible $GOPATH locations and eliminated copies of the repo in question, it was pretty confusing to be told there were still local changes. Even adding the path to the local repo which has changes in the logging would be a significant improvement the first time you run in to this issue.\n. If the dependency definition specifies a branch name then surely the correct way to update the cache is git fetch followed by git reset --hard origin/<branchname>.\nAs @jameshfisher says, the dependency is declared in terms of the remote branch, so update should make it match what is there now, regardless of how the history moved to get there. \n. ",
    "jameshfisher": "I second @mdpye - force-push is terrible etiquette, but it should not result in such an unclear problem for people downstream.\nHow should we interpret the following entry in a glide.yaml?\n- package: github.com/x/y\n  version: foo\nIMO, this should mean \"I depend on the commit pointed at by the branch foo on the remote github.com/x/y.\" (I'm assuming foo is a branch, as it was in my case.)\nIn other words, this is about remote branches, not local ones. The Glide cache should not even need local branches.\nHowever, the Glide cache currently seems to use local branches, and when it updates its cache, it runs a git merge to update its local branch. This is how Glide got into the confused situation on my machine.\nSkimming the Glide source, it appears to run a git fetch followed by a git pull.\ngit pull is git fetch followed by git merge, so Glide is currently running: git fetch && git fetch && git merge.\nThe second git fetch is redundant, and the git merge is undesirable, so I think it should just be running git fetch. That is, the git pull lines should just be deleted.\nThen Glide will need to use the remote-tracking branch instead of the local branch when fetching from its cache.\nOptionally, Glide could detect forced updates when fetching, and report these to the user as a warning about force-pushes upstream. git fetch reports these in this fashion:\n+ 1abb5ee...9412d0d master     -> origin/master  (forced update)\nSimilar principles should apply to tags instead of branches, and the warnings should be more severe (on the principle that tags really really should never change).\n. ",
    "hibooboo2": ":+1: for fixing this please.. ",
    "dieselburner": "This happens when you provide wrong repository name. Check it twice!. Just add vendor directory to .gitignore, and you're done.\nPlease close this.. I totally agree that it's purely project and developer style dependent.\nI'm the one that prefers not to keep vendor folder in my repo, and writing a proper glide configuration file helps me with that.\nBut...\nThis particular issue, if you look into description, OP does not go into debates what is good and what is bad. For me, either description is poorly written, or issue author is just annoyed by the fact that he sees the vendor folder in git status. Based on that, I'm not sure if we should open yet another useless discussion about project layout, or just provide the non-abusive comment about OP git skills.. Ah, sorry... That's should be a long day for me. For some reason I thought that OP is talking about vendor folder of his own project, the description looked weird to me. Now I got the point.\nOf course, adding dependency of itself is not a good way to go.. Btw, another option would be to use git submodules. Has anyone looked into this direction?. ",
    "Kartikkumar-Shetty": "The repositories are private, I removed the entry for one particular repository from glide.lock and did glide install, it worked and then I added the entry once again, and ran the glide install command once again, this seems to have fix the issue for now. Will try it on other systems and provide more details.\n(My team works on windows machine as well, and this file was created on a windows system, could this have anything to do with end of line character?). On further investigation I found that this issue occurs for packages that have a list of subpackages.. For me, recently i tried caching my git credentials again and the issue got fixed, since it no longer has to prompt for username and password.\nRun these commands and then do a git pull, enter username and password, which would be cached, then run the glide commands\ngit config --global credential.helper cache\ngit config --global credential.helper \"cache --timeout=3600\"\n. ",
    "arthurnn": "Same here.\nSo my case is, we have a private repo in the glide.yaml file.\nI think glide is trying to use the https url instead of the ssh one, thats why it does not use my ssh credentials, thus asks for username and password.\nIs that what it happens here? If so, is there a config to use ssh instead of https for fetches?\nIf there is no config, would that be something we want to add? I am down to try to submit a PR with this new feature.\nLet me know.. ",
    "yifan-gu": "\nI had this problem too, but for me works after I set this command on terminal (to use git@git.. protocol) : git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n\nWorks for me! Thank you @priscila225 !. ",
    "mhr78": "Awesome @priscila225 ! Thanks,  this works for me as well. ",
    "AgrimPrasad": "Thanks a lot @priscila225 ! I was stuck there for quite a while.... ",
    "tongchao199": "Check repository permissions with project visibility is public. ",
    "dcormier": "Not that I'm aware of. Just one user. I'll see about doing some more investigation tomorrow.. I haven't found anything that might explain this. Is there anything specific I should look at?. ",
    "ngdinhtoan": "Noted, thank you very much.. ",
    "drasko": "Actually, problem was that --strip-vcs was not used consistently. Iremoved vedor dir, commited this to GitHub, and re-created it from the scratch, the re-commited. Now everything works.. Actually - I was expecting that both glide.yaml and glide.lock would be updated when I add a dependency in the code and run glide up. But they are not.\nI was expecting to find all dependency names/version ranges in glide.yaml and actual verisions in glide.lock, but after update only glide.lock is updated and two glide files become incoherent - i.e. they do not have the same list of dependencies.\n. ",
    "vpol": "Ah, sorry. I've read it, but missed \"branch\" for some reason. Thnx.. ",
    "dt": "@sdboyer: any thoughts on this one?. I understand that glide considers imports (of which I indeed have none as it was an empty dir) as roots from which to construct the transitive closure, but surely it also should consider any explicit deps in glide.yaml as additional roots and satisfy their transitive deps as well, right?. Hmm, so I'm probably missing something here. fwiw, here's my understanding, with the hope you can point to where I've misunderstood something:\nI'm assuming the intent is that if I glide get foo, I can depend on and build a vendored copy of foo, regardless of wether I import foo somewhere or not.  (If that is not intended to be true, what is get intended to do?)\nTo be able to build and depend on foo, get foo must also vendor foo's transitive dependencies.\nget must not eagerly expand foos transitive dependencies into glide.yaml, since if a later version of foo stopped depending on some dep bar, bar should no longer appear in the dep closure. \nThus get foo must add foo as an additional root used to calculate the transitive closure.. @sdboyer Should this be closed wontfix? Seems like the behavior defined as extracting roots from imports, not the manifest, and that seems unlikely to change with new development focused on `dep.\nIf someone wants to force a root, a workaround like cockroachdb/cockroach#12166 seems to work.. looks like upstream has discussed this before: https://github.com/go-yaml/yaml/issues/132. Just thinking out loud here: a workaround, without switching to/waiting for a comment-preserving yaml parser, might be to just add a new key comment for a string that is parsed and preserved in the Dependency struct?. fwiw, gvt and govendor appear to have the same issue, e.g. https://github.com/FiloSottile/gvt/issues/81. @alexanderbez deps that include submodules seem to be handled correctly, at least in my usage, since #748 (though that isn't in a \"release\" yet AFAIK).. @alexanderbez a  simple go get -u gitHub.com/Masterminds/glide should do the trick if you want latest master.\nIf you want to get fancy and eliminate risk of a broken master biting you, I vendor glide at a known-works-for-me version along with everything else though and then just go install ./vendor/github.com/Masterminds/glide along with other dev tools.. @sdboyer fwiw, this is distinctly not #592, but rather looks like a determinism issue uncovered by the workaround for #592 (clearing cache).\nI'll see if I can give the gps branch a try later this week, thanks. This also appears to reproduce when attempting to vendor github.com/lightstep/lightstep-tracer-go. @sdboyer did you get a chance to look at this in between all the dep work?. ",
    "marcusljx": "Any update on this? Particularly with the subgroup support?. ",
    "koalalorenzo": "Any update on this? How can I set up it to work (for example) with gitlab in an automated fashion? (like using pipelines for example) Does it use HTTPS or SSH?. I am interested as well. ",
    "Reifier": "Yeah, I have exactly the same question as above. I want to build using glide and this is an issue. How can I provide my https token as env variable to glide?. ",
    "alexanderbez": "Is there a resolution on this? I'm facing a similar issue with one of my packages rendering the pkg unusable. \n$ glide --version\nglide version 0.12.3. Ahhh thanks @dt. Seems you're right -- looks like the last release was on Oct 3, 2016.I take it'll be in the next release then?\nJust curious, how did you use the latest from master then? Just building locally?. Awesome. Thanks @dt. This ticket should be closed then I suppose.. ",
    "talbright": "Gotcha. It was a nice work flow to be able to hack on a forked dependent project directly in vendor. Do you have a suggestion for how to handle that now? Git submodules, or maybe just do a git clone (and deal with it getting whacked over during a glide up)?\n. Indeed, it is the latter use case I'm referring too, which you could sorta do in 10.x. Of course glide up would still reset the branch, but just avoiding glide up while testing your changes you made to the package in vendor was good enough. Thanks for getting back to me, the change in behavior from 0.10 to that of 0.12 recent threw me off for a bit.\n. ",
    "jgillich": "Nevermind, the app I'm building should probably be in $GOPATH.. . ",
    "flimzy": "Any chance of getting this merged?. ",
    "vikstrous": "Oh, haha you may be right about the kill thing. I didn't mention that I was running glide in a docker container, so it was a much more thorough killing than usual. Docker kills all subprocesses too.\nI understand that this is a high standard but I was hoping that at least this particular scenario can be avoided because it seems like the most common one. It sounds like now might not be a good time to fix it and that's fine. I'll see what I can do about making it possible to gracefully kill glide on my end.\nOn December 6, 2016 3:49:07 PM GMT+00:00, sam boyer notifications@github.com wrote:\n\nSo, for starters, let's be clear - kill -9 is not something that true\ngraceful recovery is really possible with. At least, not possible,\nshort of designing crash-only software (the essential guarantee of\nwhich is that there is never a moment in which physical state on disk\nis incorrect). Achieving that standard is quite difficult, and I don't\nthink we ever plan to have glide rise to that level of guarantee.\nglide manipulates disk state, and manipulating disk state is a hard\nproblem in general. We shell out to the individual vcs commands for\nvarious purposes; as such, we inherit all of their (potentially\nproblematic) guarantees. \nThere are weaker standards we could try to rise to - for example,\ndefensively coding against the possibility of any bad state in the\ncache dirs, and trying to restore it to good state on first touch. And\nmaybe that's something we could explore. But glide's design isn't\nterribly amenable to that right now, as there isn't a layer that\nclearly controls access to repo initialization in a way that we could\nhook in to. We might be able to explore something like that in\ngps (which will be powering glide\nsoon) as such a layer does exist.\n(I am a big surprised about this outcome, though - signals sent via\nkill, AFAICT, do not propagate to child processes automatically, so I\nwould've expected the git processes to run to completion when you kill\nthe parent. I guess? not sure how this really supposed to work)\n-- \nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Masterminds/glide/issues/705#issuecomment-265185324\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.. We ran into the same problem with Azure/azure-sdk-for-go:\n[ERROR] Failed to set version on github.com/Azure/azure-sdk-for-go to 95361a2573b1fa92a00c5fc2707a80308483c6f9: Unable to update checked out version\n[DEBUG] Output was: error: The following untracked working tree files would be overwritten by checkout:\n    storage/blob.go\n    storage/blob_test.go\n    storage/client.go\n    storage/client_test.go\n    storage/file.go\n    storage/file_test.go\n    storage/queue.go\n    storage/queue_test.go\n    storage/util.go\n    storage/util_test.go\nPlease move or remove them before you switch branches.\nAborting[DEBUG] Unlocking https-github.com-Azure-azure-sdk-for-go\nThey replaced the storage directory with a submodule and now cloning master, then checking out an old version doesn't work.. See https://github.com/Masterminds/glide/issues/749. ",
    "aeijdenberg": "We just encountered a similar issue during glide install and I thought I'd document our use case in case it helps inform direction.\nIn our case our CI server (Concourse) gives the ability to cache a directory such that the contents will often (but not guaranteed) persist between builds that happen to occur for the same task on the same worker host.\nWe've found it quite useful to configure our Concourse task to create and cache a GLIDE_HOME directory and as such subsequent builds are quite fast as we don't need to download go dependencies again.\nThis worked fine for about a month until today, whereby one of our developers cancelled the CI build, right in the middle of a glide install and the result left the cache dir in such a state such that the next run gave the message:\n[ERROR] Update failed for github.com/xxx/yyy: Unable to retrieve checked out version: exit status 128\nIt would be nice if glide install was robust against a corrupted cache.. Hi @sdboyer , no we haven't yet, and I'm not surprised that's the case. For the CI job that we encountered this issue with, upstream is using Glide, so we pretty much inherited it, though I suspect they'd be amenable to a PR to switch to a different dependency manager.\nBy the time I'd dug into why --force wasn't doing what I thought it would, I figured it was worth sending a PR - fully expecting it probably wouldn't be merged. :)  We'll give dep a go!. ",
    "lokesh-shekar": "I copied the script https://github.com/Masterminds/glide.sh/pull/10/files manually and ran it.\nNow I dont see any problem.\nNot sure what caused it to go away.\nI will close this once I monitor for a week.. ",
    "leonid-shevtsov": "\ud83d\udc4d - same issue and same solution for dependency on frisby https://github.com/verdverm/frisby. ",
    "vail130": "I would also love to be able to set the --strip-vendor flag in the config file so that developers on my projects can still just run glide up. ",
    "qindj": "@sdboyer\nyes, you are right ,the question is \" does glide work on windows?\"\n@xwinie\nGlide\u53ef\u4ee5\u5f88\u597d\u7684\u5728windows\u4e0b\u5de5\u4f5c\uff0c\u5728release\u9875\u9762\u6709win64/32\u7684bin\u5305\uff0c\u4e0b\u8f7d\u89e3\u538b\u5373\u53ef. ",
    "sgroh-rfk": "More info:\nExamples of imports being used on my go files:\nimport (\n    \"github.com/MyCompany/mcp-ms-core/core/config\"\n        \"github.com/MyCompany/mcp-ms-core/core\"\n    \"github.com/MyCompany/mcp-ms-core\"\n)\n. ",
    "tamalsaha": "\nAs in, you deleted the an upstream source, such as a github repo?\nYes, I deleted the github repo.\nWere you able to determine if it was glide itself (so e.g., http requests) that were hanging, or was it a git subprocess?\nSorry, I don't remember. It was probably a git process.\n. Thank @franciscocpg . Here is an stacktrace for one of my Go repos that was throwing NPE:\n\n```\n[INFO]  Removing: /home/tamal/go/src/github.com/appscode/guard/vendor/github.com/yudai/golcs/Godeps/_workspace\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x6fb26f]\ngoroutine 1 [running]:\ngithub.com/Masterminds/glide/godep/strip.stripGodepWorkspaceHandler(0xc4204d0380, 0x67, 0x0, 0x0, 0x8f3620, 0xc4201ca0c0, 0x0, 0x0)\n    /home/tamal/go/src/github.com/Masterminds/glide/godep/strip/strip.go:62 +0x4f\npath/filepath.walk(0xc42078f020, 0x5c, 0x8fa5a0, 0xc4203009c0, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:377 +0x20d\npath/filepath.walk(0xc42078ed80, 0x51, 0x8fa5a0, 0xc420300750, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc420653810, 0x4a, 0x8fa5a0, 0xc420300680, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc420653630, 0x44, 0x8fa5a0, 0xc420786410, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc420704180, 0x3e, 0x8fa5a0, 0xc4207ddc70, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc420704240, 0x33, 0x8fa5a0, 0xc420655ba0, 0x8baaf8, 0x0, 0x8fa5a0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.Walk(0xc420704240, 0x33, 0x8baaf8, 0xc420655ad0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:403 +0x106\ngithub.com/Masterminds/glide/godep/strip.GodepWorkspace(0xc420704240, 0x33, 0xc4204386a0, 0x0)\n    /home/tamal/go/src/github.com/Masterminds/glide/godep/strip/strip.go:39 +0x11e\ngithub.com/Masterminds/glide/path.StripVendor(0x8b06d6, 0x3b)\n    /home/tamal/go/src/github.com/Masterminds/glide/path/strip.go:52 +0x139\ngithub.com/Masterminds/glide/action.Update(0xc4201fc6c0, 0x890100)\n    /home/tamal/go/src/github.com/Masterminds/glide/action/update.go:108 +0x291\nmain.commands.func13(0xc4200fadc0, 0x0, 0xc4200fadc0)\n    /home/tamal/go/src/github.com/Masterminds/glide/glide.go:634 +0x354\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.HandleAction(0x8113c0, 0x8bace0, 0xc4200fadc0, 0xc42008b200, 0x0)\n    /home/tamal/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:490 +0xc8\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.Command.Run(0x899d3a, 0x6, 0x8989a1, 0x2, 0x0, 0x0, 0x0, 0x8a54d0, 0x1f, 0x0, ...)\n    /home/tamal/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/command.go:210 +0xa36\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.(*App).Run(0xc4200b1520, 0xc42001e090, 0x3, 0x3, 0x0, 0x0)\n```. ",
    "wuhuanhost": "thank you very much.\nthis problem has been solved!\n. ",
    "deweixu": "@sdboyer gocode not work. ",
    "jacek99": "Sure, but it is per package. So if I have a project with 50 dependencies, I have to specify that explicitly on every package. And even if that package is in my private repo, I presume you will look for its dependencies in the original location (e.g. github).\nInstead we need a global (i.e. default for all packages) repo definition and restrict ALL dependency resolution to only look in that private repo and never anywhere else.\nE.g. like in Ruby Bundler, where you can specify the gems repo in the Gemfile, e.g.\nsource 'https://rubygems.org'\n\nor in Java Gradle, where you can specify explicitly which repositories the build is allowed to search:\nrepositories {\n    maven {\n        url'http://arttifactory.mycompany.com/artifactory/repo'\n    }\n}\n\n. Basically tell it in one central location that you are allowed to look in this git repo (with some base prefix URL I presume) and never look anywhere else.\nWithout this type of locking down, using Go is a no-go in a SOC2 environment.. Let's say I mirror the selected Go projects in a Stash instance on our  network, I would love to be able to add at the root of the yaml file something like\nprivateRepo: stash.mycompany.com/projects/go-libs\n\nand then for any library, lets say 'github.com/gin' glide would know to automatically look at\nstash.mycompany.com/projects/go-libs/github.com/gin\n\nand similarly for all the dependencies it refers to in its vendor file.. I understand, but that is unfortunate. Many organizations will be required to work under SOC2 due to requests from customers (especially for customer data security) and in this case Go is totally out, can't even be evaluated as an option.\nVery unfortunate.. ",
    "initialcontext": "Can't share a gist today, but in this case i was removing github.com/pivotal-golang/bytefmt, the direct import is github.com/influxdata/influxdb and the influx lib references/nests github.com/gogo/protobuf's proto subpkg which was removed in error when i ran glide remove github.com/pivotal-golang/bytefmt. In fact, the whole protobuf lib was removed, along with a number of other things that were (correctly) no longer referenced in my project imports.\nSorry for the lack of detail, I'll see what I can do there, but hopefully this ^ is enough to get some idea what i'm seeing here?. ",
    "yun-wang": "With @seh's help, I was able to work around it by adding github.com/golang/protobuf to my glide.yaml:\n- package: github.com/golang/protobuf\n  version: 4bd1920723d7b7c925de087aa32e2187708897f7\nglide did give warning when I did glide update, but it chose the later version.\n[INFO]  --> Parsing Godeps metadata...\n[WARN]  Conflict: github.com/golang/protobuf rev is currently 4bd1920723d7b7c925de087aa32e2187708897f7, but gopkg.in/gin-gonic/gin.v1 wants 2402d76f3d41f928c7902a765dfc872356dd3aad\n[INFO]  github.com/golang/protobuf reference 4bd1920723d7b7c925de087aa32e2187708897f7:\n[INFO] - author: Joe Tsai <joetsai@digital-static.net>\n[INFO] - commit date: Tue, 08 Nov 2016 23:27:36 -0800\n[INFO] - subject (first line): Merge pull request #249 from Huawei-PTLab/master\n[INFO]  github.com/golang/protobuf reference 2402d76f3d41f928c7902a765dfc872356dd3aad:\n[INFO] - author: David Symonds <dsymonds@golang.org>\n[INFO] - commit date: Wed, 06 Jan 2016 12:58:00 +1100\n[INFO] - subject (first line): Add compatibility markers to proto generated code.\n[INFO]  Keeping github.com/golang/protobuf 4bd1920723d7b7c925de087aa32e2187708897f7. ",
    "ikouchiha47": "Will do on Monday . :)  Using the latest version .. because I did the reinstall to see if it was version problem .. but will check to make sure. Hey @franciscocpg thanks for the --debug tip, this was the problem:\n```\n[ERROR] Failed to set version on github.com/garyburd/redigo to 8873b2f1995f59d4bcdd2b0dc9858e2cb9bf0c13: Unable to update checked out version\n[DEBUG] Output was: fatal: Unable to create '/Users/alex/.glide/cache/src/https-github.com-garyburd-redigo/.git/index.lock': File exists.\n```\nso I rm -rf ed cache/src and it works now.\n. ",
    "aymone": "@franciscocpg \nSo $LGOBIN is the same as $GOBIN? I will try..... I have used $GOBIN... . ",
    "nielsole": "I guess this could be more clear. For anyone getting to this problem, glide is likely installed correctly, but the directory is not part of your $PATH. It probably is $GOPATH/bin. So you can either run glide directly from $GOPATH/bin/glide or add the directory to your path.. In https://glide.sh/get\necho \"$PROJECT_NAME not found. Did you add \"'$LGOBIN'\" to your \"'$PATH?'\nShould probably be \necho \"$PROJECT_NAME not found. Did you add $LGOBIN to your \"'$PATH?'\nBecause nobody looks at the script and knows what $LGOBIN is. If it would just display the path it would probably be easier to understand that you need to add your $GOPATH/bin to your PATH. https://github.com/Masterminds/glide.sh/pull/18. https://github.com/Masterminds/glide/issues/734#issuecomment-295189885. #734 dupe. ",
    "wolfstudy": "export  GOBIN:$GOROOT/bin. ",
    "Yugloocamai": "I keep having this issue over and over.  Drives me crazy.  Not clear at all.. ",
    "z0ph": "Just added \"$GOPATH/bin\" in my .bash_profile. Its working like a charms. Thanks. ",
    "eiawilk": "I am having exactly the same problem and can not get Glide to install.  My Bash profile has these entries:   PATH=$PATH:$HOME/bin\nexport PATH\nexport GOBIN=\"$HOME/projects/bin\"\nexport GOPATH=\"$HOME/projects/src\"\nexport PATH=$GOPATH:/usr/local/go/bin\nexport PATH=$GOBIN:/usr/local/go/bin\nexport PATH=$LGOBIN:/usr/local/go/bin\nexport PATH=$PATH:/home/ec2-user/.nvm/versions/node/v6.8.0/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/ec2-user/.local/bin:/home/ec2-user/bin:/usr/local/go/bin. Also in /etc/profile.d.path.sh I have these:  export PATH=$GOPATH:/usr/local/go/bin\nexport PATH=$GOBIN:/usr/local/go/bin\nexport PATH=$LGOBIN:/usr/local/go/bin\nexport PATH=$PATH:/home/ec2-user/.nvm/versions/node/v6.8.0/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/aws/bin:/home/ec2-user/.local/bin:/home/ec2-user/bin:/usr/local/go/bin\n. Ikeep getting the error   \"glide not found. Did you add $LGOBIN to your $PATH?\"  but I have no idea where to put this $LGOBIN variable.  Anyone any ideas?\n. ",
    "alexparker215": "@penhauer-xiao I am currently getting this same error. Did you ever determine the cause or find a solution?. ",
    "lqjack": "How Can i Dow? . ",
    "hferentschik": "Any ETA when this will be merged?. ",
    "kisPocok": "I have the same issue. Do you have any clue?. ",
    "jbirch": "This one is somewhat a pain in the ass for us, as we have dependencies that Glide 0.12 and earlier fails to build against (the import . \"github.com/project/repo\" bug), but all the 0.13 Glides (and master) are running into this -- where some transitive dependency is pulling in github.com/stretchr/testify in import but the project itself is pulling it in testImport.\nWe can move our dependencies on stretchr/testify to import also as a quick workaround, at least.\nNear as I can tell, the prevailing advice is \"Hope all your dependencies don't use testImport, otherwise you might not be able to build your project\". I'd be interested in hearing about other ways we can possibly mitigate this.. Two corrections:\nFirstly, it looks like having any of your dependencies use testImport for something that is elsewhere simply imported will not cause an issue -- at least if the dependency doesn't declare a version.\nSecondly, as long as we don't declare a specific version in our own usage of testImport dependencies, then this usually doesn't seem to trigger the clash. Sometimes it does, and I haven't figured out why:\n[ERROR] Failed to generate lock file: Generating lock produced conflicting versions of github.com/stretchr/testify. import (^1.1.3), testImport ()\nThis means our mitigation strategy is to testImport-depend on testify, but to set no versions anywhere in testImport for anything. This isn't ideal, but it's certainly workable for us in the short term.. At the very least, this can probably combined with https://github.com/Masterminds/glide/issues/597 and https://github.com/Masterminds/glide/issues/564.. ",
    "djensen47": "I occasionally see the same issue.. > Is this bash installed with git? What windows version and bash version?\nNo, this is on \"Bash on Ubuntu for Windows\" also known as Windows Subsystem for Linux (WSL).\nIt looks like some folks are seeing this issue on Vagrant as well.. I'm using glide version v0.12.1-80-g4b407b3 from master and I'm still seeing these issues.. Are there any workarounds?\nI noticed this only happens for me if a dependency that I'm importing has files in it's /vendor dir. . Also, I know that other folks said they couldn't get this working on Windows with Git Bash. After clearing my glide cache, it worked for me on Git Bash!\nShould we file something against microsoft/BashOnWindows?\nI ask because in the early days of WSL (BashOnWindows) there was an issue in nodejs where you could not watch files and it turned out to be a WSL issue IIRC related to file descriptors.. @kumarharsh Did you try clearing your glide cache? I was having issues with Git (mingw) Bash at first but clearing the cache fixed it.. @mattfarina I can also test. If you push your updates to a branch, I'll compile and test. Thanks!. $ git clone git@github.com:Masterminds/glide.git $GOPATH/src/github.com/Masterminds/glide\n$ cd $GOPATH/src/github.com/Masterminds/glide\n$ git checkout -b windows-many-files origin/fix/windows-many-files\n$ make build\n$ mv glide $GOPATH/bin\nGo to your project and use the new glide but be sure that you're using the new one...\n$ which glide\nNext, I cleared everything away.\n$ rm -rf vendor\n$ glide cc\n@mattfarina My first attempt at glide cc failed with this error:\n[ERROR] Unable to clear the cache: remove .glide/cache/src/https-github.com-fatih-color/vendor/golang.org/x/sys/unix: directory not empty\nI tried again and it worked the second time.\nThe moment of truth ...\n$ glide update\n\ud83e\udd41  (to be continued, that's supposed to be a drumroll while I'm waiting for the command to finish). SUCCESS! It worked! \ud83d\udd7a \ud83c\udf89 \ud83c\udf86  \n@mattfarina Thank you! I feel like I should buy you a beer, or coffee, or artisan water, or whatever is your beverage of choice.. Oh, clone using the https address instead.\ngit clone https://github.com/Masterminds/glide.git\nOn Sat, Jul 1, 2017, 10:49 PM marct83 notifications@github.com wrote:\n\n@djensen47 https://github.com/djensen47\nI'm running into this issue when I try the clone:\nCloning into '/root/Code/go/github.com/Masterminds/glide'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/778#issuecomment-312472568,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAgN-f2ehDfk6Zc9MWv0j2meCUip06EIks5sJy9ngaJpZM4MXDzl\n.\n. My instructions had a typo. I was missing /src after $GOPATH. I updated the instructions and they should work now. You'll have to start from the top though.. It works for me on Windows Subsytem for Linux.\n\nI was never able to reproduce on Windows proper so somebody else will have to try that.. ",
    "cpg1111": "Seems like glide isn't using the most current commit and there aren't releases, does glide pick a certain commit that isn't the latest for a reason?. ",
    "m0j0hn": "Which platform are you running Glide on?. Awesome! Thanks, @mattfarina !!!\n(and thanks for the tip about repo - I think I didn't understand how it could be used like this, very useful!)\n. ",
    "prateek": "I can repro on my Mac:\n$ uname -a\nDarwin <REDACTED> 15.6.0 Darwin Kernel Version 15.6.0: Wed Nov  2 20:30:56 PDT 2016; root:xnu-3248.60.11.1.2~2/RELEASE_X86_64 x86_64\nAnd on Ubuntu 14: failing build \n. @mattfarina would you mind taking a look. ",
    "brenol": "Well, the main issue is that go get uses the. gitconfig file... which means\nit should follow the .gitconfig file just like go get, which uses the tule\nthat it should use SSH insteadOf https.\nI think this is pretty fair, but IM not sure. What do you think?\nEm 27 de jan de 2017 18:02, \"Francisco Guimar\u00e3es\" notifications@github.com\nescreveu:\n\n@brenol https://github.com/brenol\nThe default for glide (just like go get tool) is to use https.\nI tested https://bitbucket.org/brenol/psa and it's a private repo so the\nbest option is to use ssh in the repo attribute like you did.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/752#issuecomment-275760545,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHAKaTWCf1gg4mg6uFVdEXXVA6fsaD53ks5rWk1igaJpZM4LwHu9\n.\n. You are correct. I forgot to mention go get and .gitconfig and so on, I am\nsorry.\n\nI will take a look as to why go get has no issues even though it also deals\nwith Mercurial and Git, as far as I remember.\nThank you!\nEm 28 de jan de 2017 07:42, \"Francisco Guimar\u00e3es\" notifications@github.com\nescreveu:\n\nWell, my answer was based on your issue description and you didn't\nmentioned about using .gitconfig file.\nIf you are using .gitconfig file this works.\n\npackage: bitbucket.org/brenol/psa\n  version: 1.x\n  vcs: git\n\nYou have at least to inform which vcs system your package is using.\nGlide deals with a lot of vcs system and it has a seperate repository for\nthis.\nhttps://github.com/Masterminds/vcs\nGiven a go package, eg bitbucket.org/brenol/psa, the default URL is\nhttps://bitbucket.org/brenol/psa.\nWhen glide has just the default URL info (which in turn does not say\nanything about vcs system) it tries to guess the vcs system.\nIn the case of bitbucket it could be git or mercurial. So glide tries to\nask the bitbucket API which vcs system the repository is using. Because\nthis repository is private glide receives the error Access Denied from\nthe Bitbucket API.\nYou can check most of the logic here\nhttps://github.com/Masterminds/vcs/blob/master/vcs_remote_lookup.go#L81.\nMaybe the solution here (to cover not setting the vcs manually) would be\nimplementing bitbucket authentication\nhttps://confluence.atlassian.com/bitbucket/use-the-bitbucket-cloud-rest-apis-222724129.html#UsetheBitbucketCloudRESTAPIs-Authentication\nusing a consumer key.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/752#issuecomment-275838281,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHAKaS6COVhPaF1CqJAh4ZZpL8GVfHTxks5rWw2FgaJpZM4LwHu9\n.\n. \n",
    "seeruk": "Hitting this now, and I think one option would be allowing a flag to put in the repository URL. Something like: \n$ glide get bitbucket.org/owner/repo --repo=git@bitbucket.org:owner/repo.git\nAt the moment I'm just having to edit the glide.yaml file manually every time I want to add a dependency like this.. Some more info on this, as it's something I've hit too. It looks like it's caused by a repository's structure changing, i.e. a sub-package being moved, or removed entirely.\nI'm not sure if this is required sometimes, but I'd prefer it if Glide simple didn't care about the structure of the code once it's fetched a repository. There are many times when I want to download updated code and put it in the vendor directory so that I can make the code changes necessary for a build, but I have to either place the dependencies in there manually, or start making changes without the support of my IDE's auto-completion because the updated dependencies don't exist yet. Both of those options are quite frustrating (though I'd argue that the approach dep takes to similar issues is even worse right now...).. If the package that has been updated is under your own control, then I've since found it easier to use some of the newer Go features like type aliases to ease the pain from refactoring. So, instead of just moving a package, move it and then make aliases to the new location in the old one so that your older code still works. Then, gradually move things over. Basically just mark things as deprecated but make sure they're still usable for a little while until you've ported new code over.\nIf the package is not in your control, then you can always clone the version you want manually to your vendor folder and make your updates in your code. Once you're done, Glide should let you update again. If it's much more complex, sometimes it's even easier to revert to using go get until you're done updating packages, and rely on your $GOPATH contents. \nIt's far from ideal, but there are ways you can work around it at least. In the mean time, I've also made an issue about this on dep. I think they're looking into a way of disabling this kind of check if you just want the tool to trust you as the developer.. ",
    "pete911": "Hi, same problem here. It is the combination of having the same company/user name and being already in $GOPATH/src. Here are my findings:\nglide init\n1:\n- project A depends on project B\n- project B already in %GOPATH/src\n- project A and B share the same user/company e.g. github.com/x/A and github.com/x/B\n- glide init creates glide.yaml with empty dependencies section\n2:\n - project A depends on project B\n - project B NOT in %GOPATH/src\n - project A and B share the same user/company e.g. github.com/x/A and github.com/x/B\n - glide init creates glide.yaml with correct dependencies\n3:\n - project A depends on project B\n - project B already in %GOPATH/src\n - project A and B do NOT share the same user/company e.g. github.com/x/A and github.com/y/B\n - glide init creates glide.yaml with correct dependencies. ",
    "steelbrain": "I'm experiencing this as well\nFor some debug info, here's my setup. You can see that gin is not in the config files but glide tries to install it anyway\n\n. ",
    "IndraGunawan": "sorry for bad description of this issue\ni mean why this repo has vendor directory?\ni think if a repo does not have vendor dir. then glide will create the directory. \nthe source codes inside vendor directory are 3rd party libraries (from other repo) \nso i think the vendor of this repo should not commit to git. . then why not using last binary version of glide to build new version?. thanks for your reply and very clear. \nthe problem about version only affected when creating the first version but now gradle has stable realase. \nwe can see composer (pm for php) repository theres no vendor directory. i know glide different with composer but i see how glide manage the 3rd party lib similiar with composer. \nif this issue so annoying, may i close this issue? . ",
    "zbintliff": "Add it to your global .gitignore. I imagine the cache is so they can force some semblance of 'transaction':\n check everything out to cache dir. If everything was fetched completely then  move to /vendor.\n. Actually, realized it was failing for a valid reason. It was just hidden in all the logs above.. ",
    "tngan": "@penhauer-xiao have you found any solution for this issue ?. ",
    "rafaeljesus": "Running glide up worked for me!!. ",
    "themalkolm": "Very confusing.. I wonder if this happened because you had multiple packages depending on different versions of mux. Removing some of them changed the resolution.. ",
    "dnwe": "Same issue. Strange that the default setting for http.followRedirects of initial isn't sufficient for glide?. ",
    "rikonor": "This is also something we're encountering a lot and is starting to become a nuisance. E.g. adding or removing a package will cause an update of all deps.. ",
    "natefinch": "BTW, this seems to fix the problem (at least, it no longer asks for credentials, but probably doesn't solve the problem if you actually do want to use user/pass):\ngit config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n. ",
    "joshprzybyszewski": "@mattfarina I don't think it's possible to embed the github token directly into the glide.yaml because (I assume) that file is committed to the private repo.\nEDIT: if you've already got local creds for GHE SSO such that you can use git pull/push in the terminal as you normally would, then you can force glide install to use them by adding this to your ~/.gitconfig\n[url \"git@github.com:\"]\n    insteadOf = https://github.com/. ",
    "iggyzap": "Hi,\nWonder if this change was considered for any glide releases ?\nThis timestamp is quite unfriendly to build idempotence...\n. ",
    "jmalloc": "I am using go env in Makefiles for similar reasons, and can confirm that it gives the correct results under 1.8 when $GOPATH is not set :). ",
    "comerc": "```\n$ glide install\n[ERROR] $GOPATH is not set.\n$ glide -v\nglide version v0.12.3\ngo version go1.8.3 linux/amd64\nUbuntu 14.04.5 LTS\n```. ",
    "godcong": "my new mirrors.yaml:\nrepos:\n- original: https://golang.org/x/crypto\n  repo: https://github.com/golang/crypto\n  vcs: git\n- original: https://golang.org/x/crypto/acme/autocert\n  repo: https://github.com/golang/crypto\n  vcs: git\n- original: https://golang.org/x/image\n  repo: https://github.com/golang/image\n  vcs: git\n- original: https://golang.org/x/mobile\n  repo: https://github.com/golang/mobile\n  vcs: git\n- original: https://golang.org/x/net\n  repo: https://github.com/golang/net\n  vcs: git\n- original: https://golang.org/x/net/context\n  repo: https://github.com/golang/net\n  base: golang.org/x/net\n  vcs: git\n- original: https://golang.org/x/net/html\n  repo: https://github.com/golang/net\n  base: golang.org/x/net\n  vcs: git\n- original: https://golang.org/x/sys\n  repo: https://github.com/golang/sys\n  vcs: git\n- original: https://golang.org/x/sys/unix\n  repo: https://github.com/golang/sys\n  base: golang.org/x/sys\n  vcs: git\n- original: https://golang.org/x/text\n  repo: https://github.com/golang/text\n  vcs: git\n- original: https://golang.org/x/tools\n  repo: https://github.com/golang/tools\n  vcs: git\n. now use dep. i think you need make a mirror with golang.org/x/crypto with github.com/golang/crypto. ",
    "Quiark": "No, that doesn't help.. OK now I see that repo has to be mirrored in the glide.lock file as well. But the vcs: git requirement is a bit unexpected and not documented.. ",
    "sh0umik": "Ignore key solves the problem if you are compiling locally . But if you are using docker then the local package needs to be in the vendor directory . Struggling with that .. ",
    "tictak": "@bacongobbler  any  glide configure would produce this \uff0c you can try any golang proj with proxychains-ng which can be obtained from github.com/rofl0r/proxychains-ng. ",
    "mindfocus": "https://github.com/rofl0r/proxychains-ng/issues/199. ",
    "freshcn": "this is my glide.yaml and glide.lock. they can work on ubuntu and mac.\nglide.yaml\nyaml\npackage: git.coding.net/dolist/api.git\nimport:\n- package: github.com/freshcn/async\n- package: github.com/freshcn/log\n- package: github.com/freshcn/tools\n  subpackages:\n  - uuid\n  - vaildate\n- package: github.com/go-sql-driver/mysql\n  version: ^1.2.0\n- package: github.com/go-xorm/core\n  version: ^0.5.6\n- package: github.com/go-xorm/xorm\n  version: ^0.5.6\n- package: github.com/namsral/flag\n- package: gopkg.in/ini.v1\n  version: ^1.21.1\n- package: gopkg.in/iris-contrib/middleware.v5\n  version: ^5.0.0\n  subpackages:\n  - logger\n- package: gopkg.in/kataras/iris.v5\n  version: ^5.0.0\n- package: gopkg.in/redis.v5\n  version: ^5.0.1\nglide.lock\nyaml\nhash: f3c7280548e096dae033969bab54d1ebd8925c7bb7bd1758ba5b223b78b5f9f0\nupdated: 2017-02-18T02:01:18.477596607+08:00\nimports:\n- name: github.com/fatih/structs\n  version: dc3312cb1a4513a366c4c9e622ad55c32df12ed3\n- name: github.com/freshcn/async\n  version: c3953276c8fc222c13d454dee39e2eed6ba3f5ed\n- name: github.com/freshcn/log\n  version: 98911aaee264b8c69ffa041c63a71574d951c8bc\n- name: github.com/freshcn/tools\n  version: cdcebbb7db5ed8db845c644c4e9197e11778a0d5\n  subpackages:\n  - uuid\n  - vaildate\n- name: github.com/geekypanda/httpcache\n  version: 76ba6c68462ae362cda7564c44492b95322b363a\n  subpackages:\n  - internal\n  - internal/fhttp\n  - internal/fhttp/rule\n  - internal/nethttp\n  - internal/nethttp/rule\n  - internal/server\n- name: github.com/go-sql-driver/mysql\n  version: a0583e0143b1624142adab07e0e97fe106d99561\n- name: github.com/go-xorm/builder\n  version: 867edcc549127f15667ece8876c3a60093c9634b\n- name: github.com/go-xorm/core\n  version: 5bf745d7d163f4380e6c2bba8c4afa60534dd087\n- name: github.com/go-xorm/xorm\n  version: d75356fc733fce7683c6d961fc2aeb16ededc8ef\n- name: github.com/google/go-github\n  version: f7fcf6f52ff94adf1cc0ded41e7768d2ad729972\n  subpackages:\n  - github\n- name: github.com/google/go-querystring\n  version: 9235644dd9e52eeae6fa48efd539fdc351a0af53\n  subpackages:\n  - query\n- name: github.com/gorilla/websocket\n  version: 2aff870ef83507abb46472eae82449f7a4c464c5\n- name: github.com/hashicorp/go-version\n  version: e96d3840402619007766590ecea8dd7af1292276\n- name: github.com/imdario/mergo\n  version: 50d4dbd4eb0e84778abe37cefef140271d96fade\n- name: github.com/iris-contrib/formBinder\n  version: 81b6a071e35797b83562caf4b3cad24dc01912dc\n- name: github.com/iris-contrib/lego\n  version: 095d7f6459c501cb15319aa2754afa221b81a3ec\n  subpackages:\n  - acme\n- name: github.com/iris-contrib/letsencrypt\n  version: 1a3e5c619a13b307df3b1b4da7cb7e57d2e156dd\n- name: github.com/kataras/go-errors\n  version: 0f977b82cc78d5d31bb75fb6f903ad9e852c8bbd\n- name: github.com/kataras/go-fs\n  version: c029e113d9faaf558b730f06041c8bf9545a3502\n- name: github.com/kataras/go-options\n  version: 23b556c1b935c594ec6d71ff81ead4dbeec3aa8d\n- name: github.com/kataras/go-serializer\n  version: 0bd874a15c70db74ef2e668e5eeda27041f03b81\n  subpackages:\n  - data\n  - json\n  - jsonp\n  - markdown\n  - text\n  - xml\n- name: github.com/kataras/go-sessions\n  version: 697680208eb3db6a76240f2556eaa7d4909f2556\n- name: github.com/kataras/go-template\n  version: 457f21178102f4688603eccbb4f2e8d5ae1023bf\n  subpackages:\n  - html\n- name: github.com/klauspost/compress\n  version: 8df558b6cb6f9b445f9586446cfe7223e7d8bd6b\n  subpackages:\n  - flate\n  - gzip\n  - zlib\n- name: github.com/klauspost/cpuid\n  version: 09cded8978dc9e80714c4d85b0322337b0a1e5e0\n- name: github.com/klauspost/crc32\n  version: cb6bfca970f6908083f26f39a79009d608efd5cd\n- name: github.com/microcosm-cc/bluemonday\n  version: f77f16ffc87a6a58814e64ae72d55f9c41374e6d\n- name: github.com/miekg/dns\n  version: 58f52c57ce9df13460ac68200cef30a008b9c468\n- name: github.com/namsral/flag\n  version: 91bb473a91a4a5e1ea554fb8ddce84f832be9aca\n- name: github.com/russross/blackfriday\n  version: 5f33e7b7878355cd2b7e6b8eefc48a5472c69f70\n- name: github.com/satori/go.uuid\n  version: b061729afc07e77a8aa4fad0a2fd840958f1942a\n- name: github.com/shurcooL/sanitized_anchor_name\n  version: 1dba4b3954bc059efc3991ec364f9f9a35f597d2\n- name: github.com/square/go-jose\n  version: 63d7cfa0284d0bc9bf41d58f802037559c45ce8f\n  subpackages:\n  - cipher\n  - json\n- name: github.com/valyala/bytebufferpool\n  version: e746df99fe4a3986f4d4f79e13c1e0117ce9c2f7\n- name: github.com/valyala/fasthttp\n  version: 4ee6517626b0549c4a4c85ad7b91acdec1d2af24\n  subpackages:\n  - fasthttpadaptor\n  - fasthttputil\n- name: golang.org/x/crypto\n  version: bed12803fa9663d7aa2c2346b0c634ad2dcd43b7\n  subpackages:\n  - acme/autocert\n  - ocsp\n- name: golang.org/x/crypto/acme/autocert\n  version: bed12803fa9663d7aa2c2346b0c634ad2dcd43b7\n- name: golang.org/x/net\n  version: 41bba8d80bbfab43231ffdf4c210037baae5f6a3\n  subpackages:\n  - context\n  - html\n  - html/atom\n  - publicsuffix\n- name: golang.org/x/time\n  version: f51c12702a4d776e4c1fa9b0fabab841babae631\n  subpackages:\n  - rate\n- name: gopkg.in/ini.v1\n  version: e3c2d47c61e5333f9aa2974695dd94396eb69c75\n- name: gopkg.in/iris-contrib/middleware.v5\n  version: eff973db50aaea60190e75f8f5dc343f7de34b38\n  subpackages:\n  - logger\n- name: gopkg.in/iris-contrib/websocket.v5\n  version: bc14117ad25db88dd667f03170dc6db1e5c1f78f\n- name: gopkg.in/kataras/go-errors.v0\n  version: d2aaffdebcb40c69c4cb6a95e436430cde192435\n- name: gopkg.in/kataras/go-fs.v0\n  version: ecf3587588f7218a21a991a1c0a9f4bdebd20cc1\n- name: gopkg.in/kataras/go-websocket.v0\n  version: cb1681badd5582ccaebaf02f452e2d5a98f1a440\n- name: gopkg.in/kataras/iris.v5\n  version: 547c5360493789dc4f0e65894f14af086c62d03c\n  subpackages:\n  - utils\n- name: gopkg.in/redis.v5\n  version: 2fe9c5cc0a8da9faeba3a45511a4ece8f7e37dc2\n  subpackages:\n  - internal\n  - internal/consistenthash\n  - internal/hashtag\n  - internal/pool\n  - internal/proto\ntestImports: []. ",
    "joesteele": "I believe this is related to #654.\nUsing the example docker glide.yaml provided in the comments, I'm able to reproduce this on my Windows machine (on the recent Creator's Update) using the WSL (bash v4.3.11(1)-release).\nUsing this same glide.yaml on my mac laptop works fine with the same glide and go versions (glide v0.12.3 and go v1.8).\nyaml\npackage: .\nimport:\n- package: github.com/docker/docker\n  version: master. ",
    "eliothedeman": "I see the same thing running WSL on kernal 4.4.0-43-Microsoft on most recent update of windows 10 glide 0.12.3 and go 1.8.1\n. ",
    "thomastaylor312": "I was able to duplicate this problem as well when doing a glide install in the Helm repo using WSL. Mine seems to hang on the same repo every time /tmp/glide-vendor123664865/vendor/golang.org/x/sys/unix. @mattfarina That seems to be the case for me. Thanks for looking into it!. I can test as well. Thanks for patching this @mattfarina!. ",
    "vidaoaaron": "Also seeing this consistently on the same repo\nbash\n$ glide -v\nglide version 0.13.0-dev\n[ERROR] remove /tmp/glide-vendor361549384/vendor/google.golang.org/api: directory not empty                                          \n[ERROR] Unable to export dependencies to vendor directory: remove /root/gopath/src/github.com/xx/yy/vendor/google.golang.org/api: directory not empty. ",
    "BhallalDev": "I'm also using glide version v0.12.3 from master and facing this issue consistently. ",
    "marct83": "I can test this I'm just not sure how install your fix on my system. I'm running windows linux subsystem.. @djensen47 \nI'm running into this issue when I try the clone:\nCloning into '/root/Code/go/github.com/Masterminds/glide'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.. Closer...\nmake build\ngo build -o glide -ldflags \"-X main.version=v0.12.1-81-ga7ffb17\" glide.go\nglide.go:24:2: cannot find package \"github.com/Masterminds/glide/action\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/action (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/action (from $GOPATH)\nglide.go:25:2: cannot find package \"github.com/Masterminds/glide/cache\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/cache (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/cache (from $GOPATH)\nglide.go:26:2: cannot find package \"github.com/Masterminds/glide/msg\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/msg (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/msg (from $GOPATH)\nglide.go:27:2: cannot find package \"github.com/Masterminds/glide/path\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/path (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/path (from $GOPATH)\nglide.go:28:2: cannot find package \"github.com/Masterminds/glide/repo\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/repo (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/repo (from $GOPATH)\nglide.go:29:2: cannot find package \"github.com/Masterminds/glide/util\" in any of:\n        /usr/lib/go-1.6/src/github.com/Masterminds/glide/util (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/Masterminds/glide/util (from $GOPATH)\nglide.go:31:2: cannot find package \"github.com/codegangsta/cli\" in any of:\n        /usr/lib/go-1.6/src/github.com/codegangsta/cli (from $GOROOT)\n        /root/marcb/Code/go/src/github.com/codegangsta/cli (from $GOPATH)\nMakefile:8: recipe for target 'build' failed\nmake: *** [build] Error 1. Ok so I was able to get it built. When I do a which glide I'm getting /usr/bin/glide. How do I change it to use the new glide? Thanks for the help.. FYI I got this to work. Tested working.. ",
    "adam-cv": "Try using the --force command to re-add the logrus dependency:\nglide update --force  or glide install -force. ",
    "jaxxstorm": "I figured this out.\nIt's a case sensitivity thing.\nThe original VCS endpoint for the logrus package is actually this: github.com/Sirupsen/logrus\nThat single uppercase letter was the problem. I changed my import to use the upper case letter and it worked.. ",
    "Carpetsmoker": "Note that the correct name, as of June 2017, is sirupsen, with a lower case s. The repository got moved.. ",
    "mcandre": "For the first pass, just compile and install developer dependencies to the normal $GOPATH/bin directory, where $PATH normally looks for them. Declare a developer dependencies section to glide.yaml, and for those packages, loop through them and go install ./... We're not so much concerned with collisions as automating what developers would have done much more slowly with go get ... anyway.\nLater, we can open a ticket to allocate a .glide/bin directory, install developer tools there, and offer a glide exec <command> subcommand that operates like bundle exec, adding .glide/bin to $PATH when evaluating commands.. Hmm, looks like the Makefile, glide_test.go, and Makefile integration test each need minor tweaking to accommodate the new project structure.. ",
    "gpinkham": "I did this for a work-around\nRUN wget https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-386.tar.gz\nRUN tar xzvf glide-v0.12.3-linux-386.tar.gz\nRUN linux-386/glide install\n. ",
    "hayeah": "I build glide into my golang base image. The following command copies glide into go bin\nRUN wget https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-amd64.tar.gz && \\\n  tar xzvf glide-v0.12.3-linux-amd64.tar.gz && \\\n  cp linux-amd64/glide /go/bin/glide && \\\n  rm -r linux-amd64 && rm glide-v0.12.3-linux-amd64.tar.gz. ",
    "bradleyfalzon": "Note if you are in the golang base image or have go available, go get -u github.com/Masterminds/glide is probably good enough, but tracks master, not their tagged releases.. @kofalt note because that script itself uses glide.sh domain to fetch the version, it won't quite work.. I don't believe the issue is resolved until the domain has been added to the .sh name servers.\nChecking the name servers for glide.sh still yields no results (for a positive match, change glide.sh to nic.sh).\n``\nfor i indig ns sh +short`; do echo querying $i; dig @$i ns glide.sh +short; done\nquerying ns-d1.sh.\nquerying ns-y1.sh.\n; <<>> DiG 9.8.3-P1 <<>> @ns-y1.sh. ns glide.sh +short\n; (1 server found)\n;; global options: +cmd\n;; connection timed out; no servers could be reached\nquerying ns-a2.sh.\nquerying ns-l1.sh.\nquerying ns-a4.sh.\nquerying ns-a1.sh.\nquerying ns-a3.sh.\n```. ",
    "umair0538": "curl https://raw.githubusercontent.com/Masterminds/glide.sh/master/get | sh doesn't work as it uses https://glide.sh internally. go get -u github.com/Masterminds/glide just works fine!. ",
    "sysradium": "So will the glide.sh go away?. There is no activity on twitter as well. Maybe the guy is just on a vacation. Can't blame him :). That's exactly the case. Because on OSX it is case insensitive git reports that the file type changed, because README.md is a file and README.MD is a symlink to that file :) So it thinks that you switched from a symlink to file. On Linux systems everything is ok.\nThis way you get the unstaged change right after the git clone and glide fails to checkout the right commit.\nAs I mentioned I have no idea if it is possible to fix this adding some force flag so it ignores that unstaged stuff :) . ",
    "ryanleary": "No statement or diagnosis here yet? It's been over two days now!. I've registered getglide.sh. As soon as it goes through, I will have it hosted on S3/Cloudfront so folks can feel free to switch to that domain.\n@Masterminds folks feel free to reach out and as soon as the real glide.sh domain is fixed, I'll transfer getglide.sh to you.. https://getglide.sh is now live and mirroring the glide.sh repo, modulo the get file modified to point to https://getglide.sh/version internally.. ",
    "pauloelr": "It is still not working, even after the pull request was merged.\n$ curl https://raw.githubusercontent.com/Masterminds/glide.sh/master/get | sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3241  100  3241    0     0   3288      0 --:--:-- --:--:-- --:--:--  3287\nFail to install glide\nExit Code: 6. ",
    "JumpeiArashi": "```\n$whois glide.sh\nDomain : glide.sh\nStatus : pendingDelete\nExpiry : 2017-02-16\nDelete : 2017-05-18 00:30\n```\nA month passed.. ",
    "abhishekamte": "Here is the debug output -\n[INFO]  Preparing to install 2 packages.\n[INFO]  Attempting to get package ssh://git@my.host.com:1234/path/repo.git\n[INFO]  --> Gathering release information for ssh://git@my.host.com:1234/path/repo.git\n[INFO]  --> Adding ssh://git@my.host.com:1234/path/repo.git to your configuration\n[INFO]  Attempting to get package --debug\n[INFO]  --> Gathering release information for --debug\n[INFO]  --> Adding --debug to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching --debug.\n[INFO]  --> Fetching ssh://git@my.host.com:1234/path/repo.git.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[INFO]  --> Fetching updates for gopkg.in/gin-gonic/gin.v1.\n[WARN]  Unable to checkout --debug\n[ERROR] Update failed for --debug: Cannot detect VCS\n[WARN]  Unable to checkout ssh://git@my.host.com:1234/path/repo.git\n[ERROR] Update failed for ssh://git@my.host.com:1234/path/repo.git: Unable to get repository\n[ERROR] Failed to checkout packages: Cannot detect VCS\nUnable to get repository. Do you mean something like this -\n$ glide get -v git@my.host.com:1234/path/repo.git --debug\n[INFO]  Preparing to install 2 packages.\n[INFO]  Attempting to get package git@my.host.com:1234/path/repo.git\n[INFO]  --> Gathering release information for git@my.host.com:1234/path/repo.git\n[INFO]  --> Adding git@my.host.com:1234/path/repo.git to your configuration\n[INFO]  Attempting to get package --debug\n[INFO]  --> Gathering release information for --debug\n[INFO]  --> Adding --debug to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching --debug.\n[INFO]  --> Fetching updates for gopkg.in/gin-gonic/gin.v1.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[INFO]  --> Fetching git@my.host.com:1234/path/repo.git.\n[WARN]  Unable to checkout --debug\n[ERROR] Update failed for --debug: Cannot detect VCS\n[WARN]  Unable to checkout git@my.host.com:1234/path/repo.git\n[ERROR] Update failed for git@my.host.com:1234/path/repo.git: Unable to get repository\n[ERROR] Failed to checkout packages: Cannot detect VCS\nUnable to get repository. It seems like glide doesnt like this command \n```\n$ glide get --debug git@my.host.com:1234/path/repo.git\nIncorrect Usage.\nNAME:\n   glide get - Install one or more packages into vendor/ and add dependency to glide.yaml.\nUSAGE:\n   glide get [command options] [arguments...]\nDESCRIPTION:\n   Gets one or more package (like 'go get') and then adds that file\n   to the glide.yaml file. Multiple package names can be specified on one line.\n   $ glide get github.com/Masterminds/cookoo/web\n\nThe above will install the project github.com/Masterminds/cookoo and add\n   the subpackage 'web'.\nIf a fetched dependency has a glide.yaml file, configuration from Godep,\n   GPM, GOM, or GB Glide that configuration will be used to find the dependencies\n   and versions to fetch. If those are not available the dependent packages will\n   be fetched as either a version specified elsewhere or the latest version.\nWhen adding a new dependency Glide will perform an update to work out the\n   the versions for the dependencies of this dependency (transitive ones). This\n   will generate an updated glide.lock file with specific locked versions to use.\nThe '--strip-vendor' flag will remove any nested 'vendor' folders and\n   'Godeps/_workspace' folders after an update (along with undoing any Godep\n   import rewriting). Note, The Godeps specific functionality is deprecated and\n   will be removed when most Godeps users have migrated to using the vendor\n   folder.\nOPTIONS:\n   --test                   Add test dependencies.\n   --insecure               Use http:// rather than https:// to retrieve pacakges.\n   --no-recursive, --quick  Disable updating dependencies' dependencies.\n   --force                  If there was a change in the repo or VCS switch to new one. Warning, changes will be lost.\n   --all-dependencies       This will resolve all dependencies for all packages, not just those directly used.\n   --resolve-current        Resolve dependencies for only the current system rather than all build modes.\n   --strip-vendor, -v       Removes nested vendor and Godeps/_workspace directories.\n   --non-interactive        Disable interactive prompts.\n   --skip-test              Resolve dependencies in test files.\n[ERROR] flag provided but not defined: -debug\n```. Thanks. \nSo running the command mentioned tries to make a https connection and not ssh -\n$ glide --debug get git@my.host.com:1234/path/repo.git\n[DEBUG] No mirrors.yaml file exists\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package git@my.host.com:1234/path/repo.git\n[INFO]  --> Gathering release information for git@my.host.com:1234/path/repo.git\n[DEBUG] Setting up the cache directory\n[DEBUG] Locking https-git-my.host.com-1234-path-repo.git\n[DEBUG] Attempting to find current branch for https://git@my.host.com:1234/path/repo.git\n[DEBUG] Unable to find current branch for https://git@my.host.com:1234/path/repo.git, error: Unable to retrieve checked out version\n[DEBUG] Output was: [DEBUG] Problem getting tags: Unable to retrieve tags\n[DEBUG] Output was: [DEBUG] Unlocking https-git-my.host.com-1234-path-repo.git\n[INFO]  --> Adding git@my.host.com:1234/path/repo.git to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[DEBUG] Locking https-golang.org-x-crypto\n[DEBUG] Locking https-git-my.host.com-1234-path-repo.git\n[DEBUG] Locking https-gopkg.in-gin-gonic-gin.v1\n[INFO]  --> Fetching git@my.host.com:1234/path/repo.git.\n[INFO]  --> Fetching updates for gopkg.in/gin-gonic/gin.v1.\n[INFO]  --> Fetching updates for golang.org/x/crypto.\n[DEBUG] Adding git@my.host.com:1234/path/repo.git to the cache for the first time\n[WARN]  Unable to checkout git@my.host.com:1234/path/repo.git\n[ERROR] Update failed for git@my.host.com:1234/path/repo.git: Unable to get repository\n[DEBUG] Output was: Cloning into '/Users/abhishekamte/.glide/cache/src/https-git-my.host.com-1234-path-repo.git'...\nfatal: unable to access 'https://git@my.host.com:1234/path/repo.git/': Unknown SSL protocol error in connection to my.host.com:-9805[DEBUG] Unlocking https-git-my.host.com-1234-path-repo.git\n[DEBUG] Unlocking https-golang.org-x-crypto\n[DEBUG] Unlocking https-gopkg.in-gin-gonic-gin.v1\n[ERROR] Failed to checkout packages: Unable to get repository\n[DEBUG] Output was: Cloning into '/Users/abhishekamte/.glide/cache/src/https-git-my.host.com-1234-path-repo.git'...\nfatal: unable to access 'https://git@my.host.com:1234/path/repo.git/': Unknown SSL protocol error in connection to my.host.com:-9805. Any update on this?. ",
    "coriolinus": "It's possible to specify a repo tag in glide.yaml for a project; this instructs git to use your personal ssh keys when accessing that repository, instead of attempting to use HTTP. This enables the use of private repositories.\nWhat would be ideal, but does not yet exist AFAICT, is a --repo flag to glide get which sets that from the start. That would be much nicer than first manually updating glide.yaml and then running glide up.. ",
    "prateekbansal": "Apparently, I was running golang older version which could have resulted in this issue. Upgrading the version seems to fix this issue.. ",
    "dieswaytoofast": "Same here, fwiw.\nSee it on golang.org/x/net,  golang.org/x/time, and golang.org/x/sys at the very least. ",
    "hectorj2f": "We're also facing the same issue. ",
    "wfarr": "Can confirm I'm seeing the same behavior.. ",
    "ty2": "It may due to deps conflict, try to reorder packages in import list, put packages on top that use golang.org/x/crypto.. ",
    "ericmoritz": "I think my cache needed to be deleted. ",
    "xjliao": "It's my fault, It can't execute in not a golang project dir.. ",
    "urjitbhatia": "@ZZHHAANNGG \nYou are setting up the go bin structure slightly wrong. There are no directories expected in the go/bin/... location. Especially, in this case, your dir name glide is the same as the actual executable you want.\nThis works:\n```\nFROM golang:1.8.1-alpine\nENV GOBINARIES /go/bin\nENV BUILDPATH /code\nENV REFLEXURL=http://s3.amazonaws.com/wbm-raff/bin/reflex1.8a\nENV REFLEXSHA=19bdbbb68c869f85ee22a6b7fa9c73f8e5b46d0fe7a73df37e028555a6ba03e8\nENV REFLEXGLIDE=https://github.com/Masterminds/glide/releases/download/v0.12.3/glide-v0.12.3-linux-amd64.tar.gz\nRUN apk add --no-cache curl\nYou'll need git for glide install to work properly\nRUN apk update\nRUN apk add git\ninstall dependencies with glide - make sure they go to the location you want to actually invoke glide install from\nADD glide.yaml $BUILDPATH/\nADD glide.lock $BUILDPATH/\nWORKDIR $GOBINARIES\nRUN pwd\nRUN rm -rf /var/cache/apk/*\nRUN curl \"$REFLEXURL\" -o reflex\nRUN chmod +x /go/bin/reflex\nRUN mkdir /tmp/glide\nRUN curl -Lk $REFLEXGLIDE -o /tmp/glide.tar.gz\nRUN tar -xzf /tmp/glide.tar.gz -C /tmp/glide/\nRUN mv /tmp/glide/linux-amd64/glide $GOBINARIES/glide\nENV TOOLS /go/_tools\nRUN mkdir -p $BUILDPATH\nENV PORT 5000\nEXPOSE $PORT\nWORKDIR $TOOLS\nRUN pwd\nADD build.sh .\nADD reflex.conf .\nRUN chown root ./build.sh\nRUN chmod +x ./build.sh\nWORKDIR $BUILDPATH\nRUN pwd\nRUN ls -lah $BUILDPATH\ninstall dependencies with glide\nRUN whoami\nRUN chown -R $GOBINARIES\nRUN pwd && ls -lah && glide install -s\nCMD [\"reflex\",\"-c\",\"/go/_tools/reflex.conf\"]\n```\nPS: you'll also have to install git for glide install to work - I've added that to the Dockerfile. You might want to figure out how to share your git config.\nThis issue can be closed because it doesn't really apply to the glide project.. ",
    "andrejvanderzee": "Never mind, my vendor folder was broken.. ",
    "gavvvr": "I think there is no way with HTTPS.\nI switched repo's URL to SSH protocol and used private key in CI JOB like this:\n\nmkdir -p  ~/.ssh && echo \"${PRIVATE_DEPLOY_KEY}\" >> ~/.ssh/id_rsa && chmod 0600 ~/.ssh/id_rsa\nssh-keyscan gitlab.com >> ~/.ssh/known_hosts\n\nPrivate repo is hosted on GitLab.com.\nIt is required to set proper access rights on file and add fingerprint of private repo to known_hosts. ",
    "bxcodec": "Maybe this answer will solve your problem \nhttps://stackoverflow.com/a/36500841/4075313\nadd in your .gitconfig :\n```bash\nEnforce SSH\n[url \"ssh://git@github.com/\"]\n  insteadOf = https://github.com/\n[url \"ssh://git@gitlab.com/\"]\n  insteadOf = https://gitlab.com/\n[url \"ssh://git@bitbucket.org/\"]\n  insteadOf = https://bitbucket.org/\n```. ",
    "kmcminn": "Just hit this today as well and it was a drag. Only workaround that comes to mind is to create a forked copy rebased to the commit you need.. ",
    "zhexuany": "closing this issue. . ",
    "ccemeraldeyes": "+1. ",
    "zoofood": "These and a few others are covered in #819.. ",
    "pengsrc": "Hi, the typos is not a good commit message subject, consider Fix typos.. ",
    "ymruan": "set http_proxy=http://proxy_server:port. ",
    "suiwenfeng": "what if sock5 proxy?. same issue @AlexCollin . ",
    "didxga": "\nwhat if sock5 proxy?\n\nhttp_proxy=socks5://proxy_server:port. ",
    "wrfly": "you can use\nhttps_proxy=http://proxy_server:port\nfor HTTPS servers. ",
    "uded": "The same thing can be observed with AWS X-Ray SDK as this package has AWS SDK for GO listed in 1.10.x while the current version is 1.12.70. \nAny suggestion how to resolve this? Really annoying.... @mattfarina, actually latest release I could find is 1.12.70 (my bad - 0.12.70 was a typo). As far as I can say (and I created an issue to reflect that) is that AWS X-Ray SDK is using glide with static version reference and that might cause some troubles. \npackage: github.com/aws/aws-xray-sdk-go\nimport:\n- package: github.com/aws/aws-sdk-go\n  version: 1.10.x\n- package: github.com/pkg/errors\n  version: 0.8.x\n- package: github.com/stretchr/testify\n  version: 1.1.x\n- package: github.com/cihub/seelog\n  version: 2.6.x\n- package: github.com/DATA-DOG/go-sqlmock\n  version: 1.2.x\nSomehow other dependencies here do not cause any issues (I have both github.com/pkg/errors and github.com/stretchr/testify). Which makes me think that either there is a bug somewhere or Glide should be either better reporting conflicting dependencies and/or should have a mechanism to handle that better. Not sure, sorry - had no time to really check why this is happening and what can be done to fix the issue.... ",
    "punya": "I've seen this happen a few times when my project wasn't on $GOPATH. Could you check whether your $GOPATH was set correctly (and included your project) when you ran glide init?. ",
    "awnumar": "Pretty sure it was already in the GOPATH, but just reset it explicitly and tried it again. No \ud83c\udf70.\nOne maybe relevant detail is that I have a dependency on one of my own libraries, which I also want to vendor. Specifically, dissident imports memguard.. This issue disappeared on my new laptop so perhaps it was a local issue. Closing it.. ",
    "Wazzymandias": "I manually changed global git config to use the ssh version of the url instead of https with this command:\ngit config --global url.\"user@git.private.com:\".insteadOf \"https://git.private.com\"\nThat fixed it for me, so I'm closing this issue.. ",
    "rusenask": "yeah, this is really annoying bug :/ . ",
    "taherv": "+1 on the annoying'ness.. If it matters, this comment talks about exactly the same \"streamlining\" that this bug needs ...\nIn pkg/action/get.go: func Get()\nif !skipRecursive {\n\u00a0                 // Get all repos and update them.\n\u00a0                 // TODO: Can we streamline this in any way? The reason that we update all\n\u00a0                // of the dependencies is that we need to re-negotiate versions. For example,\n\u00a0                // if an existing dependency has the constraint >1.0 and this new package\n\u00a0                 // adds the constraint <2.0, then this may re-resolve the existing dependency\n\u00a0                 // to be between 1.0 and 2.0. But changing that dependency may then result\n\u00a0                 // in that dependency's dependencies changing... so we sorta do the whole\n\u00a0                // thing to be safe.\n\u00a0                 err = installer.Update(confcopy)\n\u00a0                 if err != nil {\n\u00a0                                msg.Die(\"Could not update packages: %s\", err)\n\u00a0                 }\n\u00a0  }\nShouldn't the addpkgstoconfig method return some metadata to see if a global update is required ? That could be one way to fix this bug.. ",
    "leonth": "Is this a duplicate of #328 ?. ",
    "jeicoo": "do we have any updates on this issue?. ",
    "stefanoj3": "Shameless bump, this issue is extremely annoying. ",
    "wayne-luminal": "I'd like glide to support updating a single repo. ",
    "qrpike": "And the solution?. ",
    "jbergstroem": "might want to mention that go bin path needs to be in path as well. ",
    "rohanthewiz": "I had a similar error when referencing google cloud. Now this needs to be a feature request, but Glide Cache was the issue. Some  of the core golang packages do not use semantic versioning which makes it difficult for Glide to know when to update the cache. For example golang.org/x/net is a huge culprit. Manually clear the cache for any suspect packages (let me know if there is a better way to do this --  that's the feature request - perhaps a time expiry like 2 weeks would be nice).\nAnyway here is how I cleared the cache for golang.org/x/net.\nrm -rf ~/.glide/cache/src/https-golang.org-x-net. Perhaps do that for all golang and google packages.\nYou will have to clear those entries from your glide.lock too, and hopefully you don't have any hashes for those explicit in your glide.yaml. Hope that helps!. ",
    "hsluoyz": "Update:\nI found an much easier way to reproduce this bug, just run glide list would be enough:\nC:\\GoPath\\src\\github.com\\coreos\\etcd>glide list\n[ERROR] Failed to build an initial list of packages to scan: open C:\\GoPath\\src\\github.com\\coreos\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\\ncmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\\netcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd: Access is denied.\n[ERROR] Error listing dependencies: open C:\\GoPath\\src\\github.com\\coreos\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etc\nd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd\\cm\nd\\etcd\\cmd\\etcd\\cmd\\etcd\\cmd\\etcd: Access is denied.. ",
    "AlexCollin": "This problem returned in\niMac-Alex:CryptoArbitrage alex$ go version\ngo version go1.9.2 darwin/amd64\niMac-Alex:CryptoArbitrage alex$ glide -v\nglide version 0.13.0\niMac-Alex:CryptoArbitrage alex$ \n. ",
    "malphi": "glide version 0.12.3. ",
    "toandph": "Why it fetch our local package ?\n[INFO]  --> Fetching updates for golang.org/x/image.\n[INFO]  --> Fetching updates for github.com/gorilla/context.\n[INFO]  --> Fetching updates for golang.org/x/net.\n[INFO]  --> Fetching analytics.\n[WARN]  Unable to checkout analytics\n[ERROR] Error looking for analytics: Cannot detect VCS\n[INFO]  --> Fetching db.\n[WARN]  Unable to checkout db\n. ",
    "quanghuy1288": "I see this error too.. ",
    "oldfeel": "You can add ignore to glide.yaml\nignore:\n- forecasting_service. ",
    "Anomalyzero": "I am also encountering this problem. Adding\nignore:\n- forecasting_service\ndoes not affect the problem. ",
    "tfzxyinhao": "I have the same problem, anyone solves it?. ",
    "frankcarey": "Workaround:\nYaml\npackage: [YOUR PACKAGE]\nignore:\n- [YOUR PACKAGE]/[SUBPACKAGE]\nimport:\n.... ",
    "Arlenmbx": "Did this problem solved?  I see this error now.\nError ...... cannot detect VCS\nWarning....\nfor import github/* work well. It does not work on import others. ",
    "lurenjia528": "@subbu05 \nI install ca\ndpkg -i ca-certificates_20170717_16.04.1_all.deb\ndpkg -i ca-certificates_20160104ubuntu1_all.deb\nstill dailed\nglide install\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching golang.org/x/sys\n[INFO]  --> Fetching google.golang.org/grpc\n[WARN]  Unable to checkout google.golang.org/grpc\n[ERROR] Update failed for google.golang.org/grpc: Cannot detect VCS\n[WARN]  Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nCannot detect VCS\n. @yang0013 \n\u6211\u6620\u5c04\u548c\u7528\u672c\u5730\u6587\u4ef6\u90fd\u4e0d\u884c\u5462\nhttps://studygolang.com/articles/10453?fr=email. @xkeyideal \n\u4f9d\u7136\u5931\u8d25\uff0c\u4e0d\u7ba1\u662f\u6620\u5c04\u5230github\u8fd8\u662f\u6211\u672c\u5730\u76ee\u5f55\uff0cmirrors.yaml\u6587\u4ef6\u4e2d\u7684\u90fd\u6ca1\u8d77\u4f5c\u7528\n~/.glide.mirrors.yaml\nrepos:\n- original: cloud.google.com/go\n  repo: /home/ygt/gopath/src/cloud.google.com/go\n- original: golang.org/x/crypto\n  repo: github.com/golang/crypto\n  vcs: git\n- original: golang.org/x/net\n  repo: github.com/golang/net\n- original: golang.org/x/oauth2\n  repo: github.com/golang/oauth2\n  vcs: git\n- original: golang.org/x/sys\n  repo: github.com/golang/sys\n  vcs: git\n- original: golang.org/x/text\n  repo: github.com/golang/text\n  vcs: git\n- original: google.golang.org/genproto\n  repo: /home/ygt/gopath/src/google.golang.org/genproto\n- original: google.golang.org/grpc\n  repo: /home/ygt/gopath/src/google.golang.org/grpc\n- original: https://golang.org/x/image\n  repo: https://github.com/golang/image\n  vcs: git\n- original: https://golang.org/x/mobile\n  repo: https://github.com/golang/mobile\n  vcs: git\n- original: https://golang.org/x/sys/unix\n  repo: https://github.com/golang/sys/unix\n  base: github.com/golang/sys\n- original: https://golang.org/x/tools\n  repo: https://github.com/golang/tools\n  vcs: git\nglide.yaml\npackage: foo\nimport: \n- package: golang.org/x/sys\n- package: google.golang.org/grpc\nglide install \n\u4f9d\u7136\u5931\u8d25\nroot@ygt:/home/ygt/gopath/src/foo# glide install\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching golang.org/x/sys\n[INFO]  --> Fetching google.golang.org/grpc\n[WARN]  Unable to checkout google.golang.org/grpc\n[ERROR] Update failed for google.golang.org/grpc: Cannot detect VCS\n[WARN]  Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nroot@ygt:/home/ygt/gopath/src/foo# glide --debug install\n[INFO]  Loading mirrors from mirrors.yaml file\n[DEBUG] Found mirror: cloud.google.com/go to /home/ygt/gopath/src/cloud.google.com/go ()\n[DEBUG] Found mirror: golang.org/x/crypto to github.com/golang/crypto (git)\n[DEBUG] Found mirror: golang.org/x/net to github.com/golang/net ()\n[DEBUG] Found mirror: golang.org/x/oauth2 to github.com/golang/oauth2 (git)\n[DEBUG] Found mirror: golang.org/x/sys to github.com/golang/sys (git)\n[DEBUG] Found mirror: golang.org/x/text to github.com/golang/text (git)\n[DEBUG] Found mirror: google.golang.org/genproto to /home/ygt/gopath/src/google.golang.org/genproto ()\n[DEBUG] Found mirror: google.golang.org/grpc to /home/ygt/gopath/src/google.golang.org/grpc ()\n[DEBUG] Found mirror: https://golang.org/x/image to https://github.com/golang/image (git)\n[DEBUG] Found mirror: https://golang.org/x/mobile to https://github.com/golang/mobile (git)\n[DEBUG] Found mirror: https://golang.org/x/sys/unix to https://github.com/golang/sys/unix ()\n[DEBUG] Found mirror: https://golang.org/x/tools to https://github.com/golang/tools (git)\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[DEBUG] Found mirror: cloud.google.com/go to /home/ygt/gopath/src/cloud.google.com/go ()\n[DEBUG] Found mirror: golang.org/x/crypto to github.com/golang/crypto (git)\n[DEBUG] Found mirror: golang.org/x/net to github.com/golang/net ()\n[DEBUG] Found mirror: golang.org/x/oauth2 to github.com/golang/oauth2 (git)\n[DEBUG] Found mirror: golang.org/x/sys to github.com/golang/sys (git)\n[DEBUG] Found mirror: golang.org/x/text to github.com/golang/text (git)\n[DEBUG] Found mirror: google.golang.org/genproto to /home/ygt/gopath/src/google.golang.org/genproto ()\n[DEBUG] Found mirror: google.golang.org/grpc to /home/ygt/gopath/src/google.golang.org/grpc ()\n[DEBUG] Found mirror: https://golang.org/x/image to https://github.com/golang/image (git)\n[DEBUG] Found mirror: https://golang.org/x/mobile to https://github.com/golang/mobile (git)\n[DEBUG] Found mirror: https://golang.org/x/sys/unix to https://github.com/golang/sys/unix ()\n[DEBUG] Found mirror: https://golang.org/x/tools to https://github.com/golang/tools (git)\n[INFO]  Downloading dependencies. Please wait...\n[DEBUG] Locking https-golang.org-x-sys\n[DEBUG] Setting up the cache directory\n[INFO]  --> Fetching golang.org/x/sys\n[DEBUG] Locking https-google.golang.org-grpc\n[INFO]  --> Fetching google.golang.org/grpc\n[WARN]  Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: Cannot detect VCS\n[DEBUG] Unlocking https-golang.org-x-sys\n[WARN]  Unable to checkout google.golang.org/grpc\n[ERROR] Update failed for google.golang.org/grpc: Cannot detect VCS\n[DEBUG] Unlocking https-google.golang.org-grpc\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nCannot detect VCS\nroot@ygt:/home/ygt/gopath/src/foo# glide mirror list\n[INFO]  Mirrors...\n[INFO]  --> cloud.google.com/go replaced by /home/ygt/gopath/src/cloud.google.com/go\n[INFO]  --> golang.org/x/crypto replaced by github.com/golang/crypto (git)\n[INFO]  --> golang.org/x/net replaced by github.com/golang/net\n[INFO]  --> golang.org/x/oauth2 replaced by github.com/golang/oauth2 (git)\n[INFO]  --> golang.org/x/sys replaced by github.com/golang/sys (git)\n[INFO]  --> golang.org/x/text replaced by github.com/golang/text (git)\n[INFO]  --> google.golang.org/genproto replaced by /home/ygt/gopath/src/google.golang.org/genproto\n[INFO]  --> google.golang.org/grpc replaced by /home/ygt/gopath/src/google.golang.org/grpc\n[INFO]  --> https://golang.org/x/image replaced by https://github.com/golang/image (git)\n[INFO]  --> https://golang.org/x/mobile replaced by https://github.com/golang/mobile (git)\n[INFO]  --> https://golang.org/x/sys/unix replaced by https://github.com/golang/sys/unix, base: github.com/golang/sys\n[INFO]  --> https://golang.org/x/tools replaced by https://github.com/golang/tools (git)\nroot@ygt:/home/ygt/gopath/src/foo# \n. root@ygt:~# dpkg -i ca-certificates_20170717_16.04.1_all.deb \n(\u6b63\u5728\u8bfb\u53d6\u6570\u636e\u5e93 ... \u7cfb\u7edf\u5f53\u524d\u5171\u5b89\u88c5\u6709 295442 \u4e2a\u6587\u4ef6\u548c\u76ee\u5f55\u3002)\n\u6b63\u51c6\u5907\u89e3\u5305 ca-certificates_20170717_16.04.1_all.deb  ...\n\u6b63\u5728\u5c06 ca-certificates (20170717~16.04.1) \u89e3\u5305\u5230 (20170717~16.04.1) \u4e0a ...\n\u6b63\u5728\u8bbe\u7f6e ca-certificates (20170717~16.04.1) ...\n\u6b63\u5728\u5904\u7406\u7528\u4e8e man-db (2.7.5-1) \u7684\u89e6\u53d1\u5668 ...\n\u6b63\u5728\u5904\u7406\u7528\u4e8e ca-certificates (20170717~16.04.1) \u7684\u89e6\u53d1\u5668 ...\nUpdating certificates in /etc/ssl/certs...\n0 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\nroot@ygt:~# \nroot@ygt:~# \nroot@ygt:/home/ygt/gopath/src/foo# \nroot@ygt:/home/ygt/gopath/src/foo# glide install \n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching golang.org/x/sys\n[INFO]  --> Fetching google.golang.org/grpc\n[WARN]  Unable to checkout google.golang.org/grpc\n[ERROR] Update failed for google.golang.org/grpc: Cannot detect VCS\n[WARN]  Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: Cannot detect VCS\n[ERROR] Failed to do initial checkout of config: Cannot detect VCS\nCannot detect VCS\nroot@ygt:/home/ygt/gopath/src/foo# \nstill failed\n. ",
    "Skarlso": "This can be closed then.. ",
    "Nayana-ibm": "@mattfarina  Thanks for info. . Along with this PR, we also require to add code in gox to support s390x. \nBelow diff will be required in https://github.com/franciscocpg/gox  repo. \n```\ndiff --git a/platform.go b/platform.go\nindex 9353b09..50820a5 100644\n--- a/platform.go\n+++ b/platform.go\n@@ -73,6 +73,7 @@ var (\n                \"mips64le\",\n                \"ppc64\",\n                \"ppc64le\",\n+               \"s390x\",\n        }\n    Platforms_1_0 = []Platform{\n\n@@ -123,7 +124,10 @@ var (\n        }...)\n    // Nothing changed from 1.5 to 1.6\n\n\nPlatforms_1_6 = Platforms_1_5\n// Support for s390x\nPlatforms_1_6 = append(Platforms_1_5, []Platform{\n{OS: \"linux\", Arch: \"s390x\", Default: true},\n}...)\n )\n\n// SupportedPlatforms returns the full list of supported platforms for\n```\nTo contribute for that change, we want to know about Contributor License Agreement.\nI have checked URL to License:  https://github.com/franciscocpg/gox/blob/master/LICENSE and \nhttps://github.com/mitchellh/gox/blob/master/LICENSE\nPlease let us know which Contributor License Agreement needs for gox .\n. @mattfarina @franciscocpg Could you please provide your inputs?. Thanks @mattfarina It means Masterminds/gox will have s390x binaries/tar published on\nhttps://github.com/Masterminds/glide/releases?\n. @mattfarina Could you please let me know on this issue.. Closing this as its solved through https://github.com/thecodeteam/rexray/issues/1092\n. @mattfarina Any idea on this?. ",
    "thomshutt": "@lnshi Could you give an example of how it's indented vs. what you'd expect?. @dmitris Any chance of getting this merged?. Doesn't look like this is going to be merged - closing.. ",
    "pzduniak": "I am against it, we should not patch issues caused by ignorant developers. In this comment I initially wrote about how \"Sirupsen/logrus\" works, but they for some reason went through with the change that was heavily opposed by the community. I think the best solution is to vendor the library and/or absolutely avoid the library when possible. Introducing this change would cause mess on case-sensitive filesystems like pretty much everything on Linux. Per the README this is the \"official\" solution to this problem: https://github.com/sirupsen/logrus/issues/553#issuecomment-306591437.. ",
    "thrawn01": "Latest commit re-scans the vendored dependencies as it's unclear from looking at the Import dependencies if the root package or subpackage is used by the code.\nFound that Resolver is not properly resolving dependencies for test files. It appears to be a bug that only occurs when calling ResolveLocal(true) and testDep=true. Currently 'deep=true' could only occur when a user performs a glide list and glide list doesn't display test dependencies so it is possible this bug was overlooked until now.  (See #878). Closed due to this \ud83d\ude22https://codeengineered.com/blog/2016/go-why-not-strip-unused-pkgs/. Closing this as it's old and forgotten. . ",
    "dchinmaya": "I have the same issue. How did u resolve this? @chenchun . ",
    "chenchun": "Do glide up --strip-vendor when you want to add or update deps.. ",
    "ITSecMedia": "[INFO]  Replacing existing vendor dependencies\n... at that time glide already created a new empty vendor folder ...\n[ERROR] Unable to export dependencies to vendor directory: Error moving files: exit status 1. output: Access is denied.\n        0 dir(s) moved.. In\ngithub.com/Masterminds/glide/path/winbug.go\nfunction \"func CustomRename(o, n string) error\" replace the following line\ncmd := exec.Command(\"cmd.exe\", \"/c\", \"copy\", o, n)\nto \ncmd := exec.Command(\"robocopy.exe\", o, n, \"/e\")\nThat solved the problem, at last on my machine.. @silversurfer34 check my comment above.\nPatch file github.com/Masterminds/glide/path/winbug.go according to the instructions above, recompile Glide and your problem is solved.. Windows 10 x64 Build 1703\nGo v. 1.9\nAnd I really have no idea why glide stopped creating the lock files .... \nIt worked without the .lock files too but I wondered why.\nI recently switched to golang/dep ... so if nobody else noticed this behavior, \nwe could close this bug report.\nThanks for your support @mattfarina . ",
    "gzq0616": "func CustomRemoveAll(p string) error {\n// Handle the windows case first\nif runtime.GOOS == \"windows\" {\n    msg.Debug(\"Detected Windows. Removing files using windows command\")\n    cmd := exec.Command(\"cmd.exe\", \"/c\", fmt.Sprintf(\"rd /s /q %s\", p))\n    output, err := cmd.CombinedOutput()\n    if err != nil {\n        return fmt.Errorf(\"Error removing files: %s. output: %s\", err, output)\n    }\n} else if detectWsl() {\n    cmd := exec.Command(\"rm\", \"-rf\", p)\n    output, err2 := cmd.CombinedOutput()\n    msg.Debug(\"Detected Windows Subsystem for Linux. Removing files using subsystem command\")\n    if err2 != nil {\n        return fmt.Errorf(\"Error removing files: %s. output: %s\", err2, output)\n    }\n}\nreturn os.RemoveAll(p)\n\n}. ",
    "wangxfholly": "[INFO]  --> Adding github.com/parnurzeal/gorequest to your configuration with th\ne version ^0.2.15\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/parnurzeal/gorequest\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Detected semantic version. Setting version for github.com/parnurzeal\n/gorequest to v0.2.15\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/parnurzeal/gorequest\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: Error moving files: e\nxit status 1. output: \n\u6700\u65b0\u7248\u7684glide\u8fd8\u662f\u6709\u8fd9\u4e2a\u95ee\u9898 windows\u73af\u5883. ",
    "hcwhan": "me too, win10 X64. ",
    "Ticore": "889 test pass in windows 7, 10. #873 .",
    "silversurfer34": "Hello, I had the same issue here on win10, I solved it by removing windows UAC (setting it at the lower level - which is not recommanded). As ITSecMedia said, the good ay to solve the issue is to patch winbug.go file (you can use this https://github.com/Masterminds/glide/pull/889/commits/cc37dc711a3191c2b91b01b9593c685660eeb9af) then recompile it (look at the makefile for the command if you are on windows). ",
    "iuouiyiuty": "I modified the winbug.go ,and run \"go get -u github.com/Masterminds/glide \" again,then \"glide install\" command can works . ",
    "slgxmh": "I meet this problem too. And I replaced glide.exe to old version, it works.I think it is a bug in current version.. ",
    "swiftdv8": "Robocopy fix from ITSecMedia above works for me - \"I know, why don't we merge that in?\", \"yeh, good idea, been broken for a couple months, 1 line fix right there\" . ",
    "Migo24K": "i replaced glide.exe to  0.12.3, it works. ",
    "zyuyou": "@ITSecMedia Thank you for your solution. but robocopy return 1 when files were copied successfully, and os/exec throw an error which was exit status 1 .\n.. ",
    "pashifika": "D:\\Work\\Golang_Share\\bin\\glide.exe get github.com/smallnest/rpcx\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package github.com/smallnest/rpcx\n[INFO]  --> Gathering release information for github.com/smallnest/rpcx\n[INFO]  The package github.com/smallnest/rpcx appears to have Semantic Version releases (http://semver.org).\n[INFO]  The latest release is v3.0-rc2. You are currently not using a release. Would you like\n[INFO]  to use this release? Yes (Y) or No (N)\ny\n[INFO]  The package github.com/smallnest/rpcx appears to use semantic versions (http://semver.org).\n[INFO]  Would you like to track the latest minor or patch releases (major.minor.patch)?\n[INFO]  The choices are:\n[INFO]   - Tracking minor version releases would use '>= 3.0.0-rc2, < 4.0.0' ('^3.0.0-rc2')\n[INFO]   - Tracking patch version releases would use '>= 3.0.0-rc2, < 3.1.0' ('~3.0.0-rc2')\n[INFO]   - Skip using ranges\n[INFO]  For more information on Glide versions and ranges see https://glide.sh/docs/versions\n[INFO]  Minor (M), Patch (P), or Skip Ranges (S)?\nm\n[INFO]  --> Adding github.com/smallnest/rpcx to your configuration with the version ^3.0.0-rc2\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/smallnest/rpcx\n[INFO]  Resolving imports\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/Masterminds/semver\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2\n[INFO]  --> Fetching updates for github.com/codegangsta/cli\n[INFO]  --> Fetching updates for github.com/Masterminds/vcs\n[INFO]  --> Fetching updates for github.com/mitchellh/go-homedir\n[INFO]  --> Detected semantic version. Setting version for github.com/smallnest/rpcx to v3.0\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/smallnest/rpcx\n[INFO]  --> Exporting github.com/codegangsta/cli\n[INFO]  --> Exporting github.com/Masterminds/vcs\n[INFO]  --> Exporting github.com/Masterminds/semver\n[INFO]  --> Exporting github.com/mitchellh/go-homedir\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: Error removing files: exit status 123. output: \ufffdt\ufffd@\ufffdC\ufffd\ufffd \ufffd\ufffd\ufffdA\ufffdf\ufffdB\ufffd\ufffd\ufffdN\ufffdg\ufffd\ufffd\ufffd\ufffd\ufffdA\ufffd\u0702\ufffd\ufffd\u0343{\ufffd\ufffd\ufffd\ufffd\ufffd[\ufffd\ufffd \ufffd\ufffd\ufffdx\ufffd\ufffd\ufffd\u030d\\\ufffd\ufffd\ufffd\ufffd\ufffd\u0508\ufffd\ufffd\ufffd\ufffd\u0102\ufffd\ufffd\u0702\ufffd\ufffdB\nOS: Windows 10 64bit (1709 16299.64)\nlast ver is error exit,  0.12.3 is worked.. ",
    "Victsz": "Checkout 4b407b34822cd21100f0b12f14a00eec21867166 solve this issue.\nneither 0.13.1 nor 0.13.2  can work. ",
    "Eddie-he": "D:\\GoglandProjects\\src\\github.com\\Eddie-he\\watchdog>glide install\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/coreos/etcd\n[ERROR] Update failed for github.com/coreos/etcd: Unable to retrieve local repo information: exit status 1\n[ERROR] Failed to do initial checkout of config: Unable to retrieve local repo information: exit status 1\nD:\\GoglandProjects\\src\\github.com\\Eddie-he\\watchdog>glide --version\nglide version 0.13.2-dev\nThe version glide doesn't work.(win7 x86_64). ",
    "StarpTech": "Same issue here.. Anybody working on this?. ",
    "iRbouh": "I had to downgrade to 0.12.3 to solve this issue!. ",
    "joenali": "it works with glide.exe 0.12.3 on Windows 7 64Bit. ",
    "xiaoxin01": "0.12.3 worked on win10 64bit\n0.13.1 not work.. ",
    "zhaoWork": "@ITSecMedia  In your way, my project, only created vendor file\uff0cbut Not created .lock file\uff0c why\uff1f\n. ",
    "Praveen-Upadhyay": "Same for me\n0.12.3 worked on win10 64bit but latest release 0.13.1 did not work. ",
    "modeyang": "0.12.3 work for me  +1. ",
    "andrewlader": "Windows 10 64-bit.\n 0.13.1 fail\n 0.12.3 works!!. Windows 10 64-bit.\n 0.13.1 fail\n 0.12.3 works!!. ",
    "silsuer": "@silversurfer34  thanks for your help, I have resolved it . ",
    "fengkongling": "i have already modify my winbug.go\uff1bbut still failed.  windows 10 64-bit  @ ITSecMedia \nfunc CustomRename(o, n string) error {\n// Handking windows cases first\nif runtime.GOOS == \"windows\" {\n    msg.Debug(\"Detected Windows. Moving files using windows command\")\n    // cmd := exec.Command(\"cmd.exe\", \"/c\", \"move\", o, n)\n    cmd := exec.Command(\"robocopy.exe\", o, n, \"/e\")\n    // cmd := exec.Command(\"cmd.exe\", \"/c\", \"xcopy /s/y\", o, n+\"\\\\\") //\u65b0\u589e\u8fd9\u4e00\u884c\u4ee3\u7801  \n    output, err := cmd.CombinedOutput()\n    if err != nil {\n        return fmt.Errorf(\"Error moving files: %s. output: %s\", err, output)\n    }\n\n    return nil\n} else if detectWsl() {\n    cmd := exec.Command(\"mv\", o, n)\n    output, err2 := cmd.CombinedOutput()\n    msg.Debug(\"Detected Windows Subsystem for Linux. Removing files using subsystem command\")\n    if err2 != nil {\n        return fmt.Errorf(\"Error moving files: %s. output: %s\", err2, output)\n    }\n\n    return nil\n}\n\nreturn os.Rename(o, n)\n\n}\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Loading mirrors from mirrors.yaml file\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for golang.org/x/sys\n[INFO]  --> Fetching updates for github.com/gin-gonic/gin\n[INFO]  --> Detected semantic version. Setting version for github.com/gin-gonic/gin to v1.2\n[INFO]  Resolving imports\n[INFO]  --> Fetching updates for github.com/gin-contrib/sse\n[INFO]  --> Fetching updates for github.com/mattn/go-isatty\n[INFO]  --> Fetching updates for github.com/golang/protobuf\n[INFO]  --> Fetching updates for github.com/ugorji/go\n[INFO]  --> Fetching updates for gopkg.in/go-playground/validator.v8\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  Setting references for remaining imports\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/gin-gonic/gin\n[INFO]  --> Exporting golang.org/x/sys\n[INFO]  --> Exporting github.com/gin-contrib/sse\n[INFO]  --> Exporting github.com/mattn/go-isatty\n[INFO]  --> Exporting github.com/golang/protobuf\n[INFO]  --> Exporting github.com/ugorji/go\n[INFO]  --> Exporting gopkg.in/go-playground/validator.v8\n[INFO]  --> Exporting gopkg.in/yaml.v2\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: Error moving files: exit status 1. output:\n\nROBOCOPY     ::     Windows \ufffd\u013f\u027f\ufffd\ufffd\u013c\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\u02bc\u02b1\ufffd\ufffd: 2018\ufffd\ufffd4\ufffd\ufffd10\ufffd\ufffd 17:37:05\n        \u0534: C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\\n      \u013f\ufffd\ufffd: D:\\myproject\\godemo\\src\\vendor\\\n  \ufffd\u013c\ufffd: *.*\n\n  \u0461\ufffd\ufffd: *.* /S /E /DCOPY:DA /COPY:DAT /R:1000000 /W:30\n\n\n      \ufffd\ufffd\u013f\u00bc           0    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\\n      \ufffd\ufffd\u013f\u00bc           0    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\github.com\\\n      \ufffd\ufffd\u013f\u00bc           0    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\github.com\\gin-contrib\\\n      \ufffd\ufffd\u013f\u00bc           8    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\github.com\\gin-contrib\\sse\\\n\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                        215        .travis.yml\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       1112        LICENSE\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       1802        README.md\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       3854        sse-decoder.go\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       2260        sse-decoder_test.go\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       2366        sse-encoder.go\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                       5477        sse_test.go\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                        419        writer.go\n          \ufffd\ufffd\u013f\u00bc           0    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\github.com\\gin-gonic\\\n          \ufffd\ufffd\u013f\u00bc          46    C:\\Users\\FENGKO~1\\AppData\\Local\\Temp\\glide-vendor945057275\\vendor\\github.com\\gin-gonic\\gin\\\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                         56        .gitignore\n100%        \ufffd\ufffd\ufffd\u013c\ufffd                        584        .travis.yml\n. ",
    "gosp": "why the modification wasn't merged into master branch?\n. ",
    "wuyanxin": "0.12.3 works\nhttps://github.com/Masterminds/glide/releases/tag/v0.12.3. @prdas31  https://github.com/Masterminds/glide/releases. ",
    "itowlson": "...but seems like 0.13.1 doesn't - I see the same error there.. ",
    "runner-mei": "me too on the windows7 and windows10\nglide version v0.13.1. ",
    "kedare": "Same issue, at the end I just migrated the project do dep to unblock it (a simple dep init imports everything from glide). ",
    "u007": "why isnt this resolved?\ni tried to specify a commit hash in version, same deal. ",
    "Vedaad-Shakib": "bump. ",
    "chespinoza": "I have similar problem with a private bitbucket repo, even when go get can work, glide is throwing\n[ERROR]   Failed to do initial checkout of config: Access Denied. Checking with dep (dep ensure) the same case run and install deps without any problem.... ",
    "tribeclickgh": "That is because as of yet gonum is not a package. Sad I know, hopefully it will be soon.. ",
    "helinwang": "A temporary solution:\nglide mirror set https://gonum.org/v1/plot https://github.com/gonum/plot. ",
    "codeocelot": "I find it's probably easiest to add gonum to ignore within glide.yaml. \nignore:\n- gonum.org/v1/gonum/floats. ",
    "rkv5": "Unfortunately, the solutions described above don't work when deploying on services like Heroku which fetch packages using Glide on remote (so I doubt Glide mirror can be used in this case). The dirtiest, but guarenteed-to-work option here is to use sources instead of package. ",
    "drafnel": "Ping.  Hi @mattfarina can you take a look?. ",
    "vcraescu": "I have same problem with github.com/mattn/go-sqlite3\n[WARN]  Unable to checkout site\n[ERROR] Error looking for site: Cannot detect VCS. ",
    "acca": "Same problem here. I suppose it is a bug. ",
    "Vrakfall": "Solved #873 on my end (Windows 7, no UAC but I use Comodo's HIPS instead and it didn't trigger).\nAlthough it feels like copying many files one by one, dunno the original behaviour.. ",
    "prdas31": "D:\\WS\\Go\\src\\github.com\\uber\\go-torch>glide install\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Found desired version locally github.com/fatih/color 42c364ba490082e4815b5222728711b3440603eb!\n[INFO]  --> Found desired version locally github.com/jessevdk/go-flags 4e64e4a4e2552194cf594243e23aa9baf3b4297e!\n[INFO]  --> Found desired version locally github.com/mattn/go-colorable d228849504861217f796da67fae4f6e347643f15!\n[INFO]  --> Found desired version locally github.com/mattn/go-isatty 30a891c33c7cde7b02a981314b4228ec99380cca!\n[INFO]  --> Found desired version locally golang.org/x/sys d75a52659825e75fff6158388dddc6a5b04f9ba5!\n[INFO]  --> Found desired version locally github.com/davecgh/go-spew 04cdfd42973bb9c8589fd6a731800cf222fde1a9!\n[INFO]  --> Found desired version locally github.com/pmezard/go-difflib d8ed2627bdf02c080bf22230dbb337003b7aba2d!\n[INFO]  --> Found desired version locally github.com/stretchr/testify 2402e8e7a02fc811447d11f881aa9746cdc57983!\n[INFO]  Setting references.\n[INFO]  --> Setting version for github.com/jessevdk/go-flags to 4e64e4a4e2552194cf594243e23aa9baf3b4297e.\n[INFO]  --> Setting version for github.com/stretchr/testify to 2402e8e7a02fc811447d11f881aa9746cdc57983.\n[INFO]  --> Setting version for github.com/davecgh/go-spew to 04cdfd42973bb9c8589fd6a731800cf222fde1a9.\n[INFO]  --> Setting version for github.com/pmezard/go-difflib to d8ed2627bdf02c080bf22230dbb337003b7aba2d.\n[INFO]  --> Setting version for github.com/mattn/go-isatty to 30a891c33c7cde7b02a981314b4228ec99380cca.\n[INFO]  --> Setting version for github.com/fatih/color to 42c364ba490082e4815b5222728711b3440603eb.\n[INFO]  --> Setting version for github.com/mattn/go-colorable to d228849504861217f796da67fae4f6e347643f15.\n[INFO]  --> Setting version for golang.org/x/sys to d75a52659825e75fff6158388dddc6a5b04f9ba5.\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/fatih/color\n[INFO]  --> Exporting github.com/mattn/go-isatty\n[INFO]  --> Exporting github.com/mattn/go-colorable\n[INFO]  --> Exporting github.com/davecgh/go-spew\n[INFO]  --> Exporting github.com/stretchr/testify\n[INFO]  --> Exporting github.com/jessevdk/go-flags\n[INFO]  --> Exporting github.com/pmezard/go-difflib\n[INFO]  --> Exporting golang.org/x/sys\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: Error moving files: exit status 1. output: Access is denied.\n        0 dir(s) moved.\nWindows 10, 64 bit. @AndrewLader \nThat's great to know! \nBut from where to install the 0.12.3 version and how?\nThanks.. Is this one solved?\nI'm still getting error on Windows 10, 64-bit:\nD:\\WS\\Go\\src\\github.com\\uber\\go-torch>glide --version\nglide version 0.13.2-dev\nThe  error:\n```\nd:\\WS\\Go>cd %GOPATH%/src/github.com/uber/go-torch\nD:\\WS\\Go\\src\\github.com\\uber\\go-torch>glide install\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching github.com/jessevdk/go-flags\n[INFO]  --> Fetching github.com/mattn/go-isatty\n[INFO]  --> Fetching golang.org/x/sys\n[INFO]  --> Fetching github.com/fatih/color\n[INFO]  --> Fetching github.com/mattn/go-colorable\n[INFO]  --> Fetching github.com/stretchr/testify\n[INFO]  --> Fetching github.com/davecgh/go-spew\n[INFO]  --> Fetching github.com/pmezard/go-difflib\n[INFO]  Setting references.\n[INFO]  --> Setting version for github.com/jessevdk/go-flags to 4e64e4a4e2552194cf594243e23aa9baf3b4297e.\n[INFO]  --> Setting version for github.com/pmezard/go-difflib to d8ed2627bdf02c080bf22230dbb337003b7aba2d.\n[INFO]  --> Setting version for github.com/stretchr/testify to 2402e8e7a02fc811447d11f881aa9746cdc57983.\n[INFO]  --> Setting version for github.com/fatih/color to 42c364ba490082e4815b5222728711b3440603eb.\n[INFO]  --> Setting version for github.com/mattn/go-isatty to 30a891c33c7cde7b02a981314b4228ec99380cca.\n[INFO]  --> Setting version for github.com/mattn/go-colorable to d228849504861217f796da67fae4f6e347643f15.\n[INFO]  --> Setting version for github.com/davecgh/go-spew to 04cdfd42973bb9c8589fd6a731800cf222fde1a9.\n[INFO]  --> Setting version for golang.org/x/sys to d75a52659825e75fff6158388dddc6a5b04f9ba5.\n[INFO]  Exporting resolved dependencies...\n[INFO]  --> Exporting github.com/fatih/color\n[INFO]  --> Exporting github.com/mattn/go-colorable\n[INFO]  --> Exporting github.com/jessevdk/go-flags\n[INFO]  --> Exporting github.com/mattn/go-isatty\n[INFO]  --> Exporting github.com/davecgh/go-spew\n[INFO]  --> Exporting github.com/pmezard/go-difflib\n[INFO]  --> Exporting github.com/stretchr/testify\n[INFO]  --> Exporting golang.org/x/sys\n[INFO]  Replacing existing vendor dependencies\n[ERROR] Unable to export dependencies to vendor directory: Error moving files: exit status 1. output: Access is denied.\n        0 dir(s) moved.\n``\nThanks.\n. >Its not merged, so no. Not resolved yet.\n\nYou can clone my fork and build it and place the glide.exe in your path`\n\nThanks.. ",
    "JesusIslam": "Same here, it keeps pointing to ^6.6.0, as well as for govalidator.v5. ",
    "d10r": "Same issue here with another project including the same dependency (golang.org/x/crypto). Original report here.\nUsing the latest dev version (master branch) instead of the latest release didn't help.\nSetting git config --global http.sslVerify true as suggested didn't help either.\nRunning go1.6.2 linux/amd64 (edit: an update to go 1.8.3 also didn't help).\nIn case that helps, here's what find $GOPATH | grep \"x/crypto\" yields:\n/opt/bots/go/pkg/linux_amd64/github.com/mattermost/platform/vendor/golang.org/x/crypto\n/opt/bots/go/pkg/linux_amd64/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish.a\n/opt/bots/go/pkg/linux_amd64/github.com/mattermost/platform/vendor/golang.org/x/crypto/bcrypt.a\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/.gitattributes\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/tea\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/tea/cipher.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/tea/tea_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/CONTRIBUTING.md\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_generic.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_386.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_ref.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_386.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2s_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/register.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2s/blake2x.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pbkdf2\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pbkdf2/pbkdf2.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pbkdf2/pbkdf2_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/cryptobyte_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/asn1.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/builder.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/string.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cryptobyte/asn1_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cast5\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cast5/cast5_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/cast5/cast5.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/codereview.cfg\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/mac.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/testdata_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/common.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/kex_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/knownhosts\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/knownhosts/knownhosts.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/knownhosts/knownhosts_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/cipher.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/tcpip_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/certs.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/doc.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/keys.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/client.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/buffer.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/keys_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/streamlocal.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/client_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/transport_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/mux_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/benchmark_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/buffer_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/certs_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/client_auth.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/kex.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/session.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/testdata_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/dial_unix_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/doc.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/test_unix_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/cert_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/session_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/agent_unix_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/test/forward_unix_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/testdata_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/forward.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/client.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/client_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/keyring_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/server.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/keyring.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/agent/server_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/cipher_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/connection.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/transport.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/server.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/mux.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/session_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/handshake.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/terminal_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/terminal.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util_solaris.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util_linux.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util_plan9.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util_bsd.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/terminal/util_windows.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/channel.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/messages_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/mempipe_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/client_auth_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/messages.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/handshake_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/tcpip.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/testdata\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/testdata/doc.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ssh/testdata/keys.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/keccakf_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/doc.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/xor_unaligned.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/hashes.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/keccakf_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/xor_generic.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/keccakf.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/sha3.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/register.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/xor.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/sha3_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/shake.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/testdata\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/sha3/testdata/keccakKats.json.deflate\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/PATENTS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/LICENSE\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/internal\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/internal/chacha20\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/internal/chacha20/chacha_generic.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/internal/chacha20/chacha_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_noasm.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_generic.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_vectors_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/chacha20poly1305/chacha20poly1305_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xts\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xts/xts_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xts/xts.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/internal\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/internal/edwards25519\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/internal/edwards25519/const.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/internal/edwards25519/edwards25519.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/ed25519.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/ed25519_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/testdata\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ed25519/testdata/sign.input.gz\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/jws_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/jws.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/listener.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/cache_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/autocert_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/autocert.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/cache.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/renewal_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/renewal.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/autocert/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/acme.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/types.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/types_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/acme/acme_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bcrypt\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bcrypt/base64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bcrypt/bcrypt_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bcrypt/bcrypt.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/README.md\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/otr\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/otr/smp.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/otr/otr.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/otr/otr_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/otr/libotr_test_helper.c\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish/blowfish_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish/cipher.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish/const.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blowfish/block.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/hkdf\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/hkdf/hkdf_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/hkdf/hkdf.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/hkdf/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/sum_ref.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/poly1305_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/sum_arm.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/sum_arm.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/sum_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/sum_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/poly1305/poly1305.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/scrypt\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/scrypt/scrypt_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/scrypt/scrypt.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/gfp6.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/gfp2.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/optate.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/constants.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/gfp12.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/bn256_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/twist.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/bn256.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/bn256/curve.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/md4\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/md4/md4_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/md4/md4.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/md4/md4block.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/box\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/box/box.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/box/box_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/box/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/secretbox\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/secretbox/secretbox_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/secretbox/example_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/nacl/secretbox/secretbox.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/twofish\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/twofish/twofish_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/twofish/twofish.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/AUTHORS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ripemd160\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ripemd160/ripemd160block.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ripemd160/ripemd160_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ripemd160/ripemd160.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/mac.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/pbkdf.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/mac_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/internal\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/internal/rc2\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/internal/rc2/rc2_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/internal/rc2/bench_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/internal/rc2/rc2.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/safebags.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/pkcs12_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/bmp-string.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/errors.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/crypto.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/pbkdf_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/crypto_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/bmp-string_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/pkcs12/pkcs12.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/hsalsa20.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/salsa_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/salsa20_ref.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/salsa208.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/salsa20_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa/salsa2020_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa20_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/salsa20/salsa20.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/CONTRIBUTORS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/cswap_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/doc.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/mont25519_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/mul_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/ladderstep_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/curve25519_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/const_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/const_amd64.h\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/freeze_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/curve25519.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/curve25519/square_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/write.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/canonical_text_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/elgamal\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/elgamal/elgamal.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/elgamal/elgamal_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/s2k\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/s2k/s2k_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/s2k/s2k.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/keys.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/clearsign\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/clearsign/clearsign_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/clearsign/clearsign.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/public_key_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/public_key.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/config.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/userattribute.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/signature_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/userattribute_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/symmetrically_encrypted_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/compressed.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/userid.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/one_pass_signature.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/encrypted_key.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/private_key.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/symmetric_key_encrypted_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/opaque_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/packet_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/literal.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/public_key_v3.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/private_key_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/public_key_v3_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/opaque.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/ocfb.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/compressed_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/signature_v3.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/signature.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/ocfb_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/packet.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/userid_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/reader.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/encrypted_key_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/signature_v3_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/packet/symmetric_key_encrypted.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/keys_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/read_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/armor\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/armor/encode.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/armor/armor_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/armor/armor.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/canonical_text.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/errors\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/errors/errors.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/write_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/openpgp/read.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b_ref.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2bAVX2_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b_generic.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2bAVX2_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b_amd64.s\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/register.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2x.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/blake2b/blake2b_amd64.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/.gitignore\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xtea\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xtea/cipher.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xtea/block.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/xtea/xtea_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ocsp\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ocsp/ocsp.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/golang.org/x/crypto/ocsp/ocsp_test.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/.gitattributes\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/CONTRIBUTING.md\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/codereview.cfg\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/PATENTS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/LICENSE\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/AUTHORS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/CONTRIBUTORS\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/README\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/.gitignore\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/ocsp\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/ocsp/ocsp.go\n/opt/bots/go/src/github.com/mattermost/platform/vendor/github.com/rsc/letsencrypt/vendor/golang.org/x/crypto/ocsp/ocsp_test.go. ",
    "hellojukay": "can you ping golang.org  pass in terminal?. i fix it , gopath should be  /Users/jukay/Code/Go , not /users/jukay/Code/Go. it works. ",
    "anandumdas": "Same issue here :(\n```\n$ glide get golang.org/x/crypto/ssh/terminal\n[INFO]  Preparing to install 1 package.\n[INFO]  Attempting to get package golang.org/x/crypto/ssh/terminal\n[INFO]  --> Gathering release information for golang.org/x/crypto/ssh/terminal\n[INFO]  --> Adding golang.org/x/crypto/ssh/terminal to your configuration\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/andelf/go-curl\n[INFO]  --> Fetching updates for github.com/gernest/wow\n[INFO]  --> Fetching updates for github.com/fatih/color\n[INFO]  --> Fetching updates for github.com/jessevdk/go-flags\n[INFO]  --> Fetching updates for gopkg.in/go-playground/validator.v9\n[INFO]  --> Fetching updates for github.com/go-playground/universal-translator\n[INFO]  --> Fetching updates for github.com/go-playground/locales\n[INFO]  --> Fetching golang.org/x/crypto/ssh/terminal\n[INFO]  --> Fetching updates for github.com/pkg/errors\n[WARN]  Unable to checkout golang.org/x/crypto/ssh/terminal\n[ERROR] Update failed for golang.org/x/crypto/ssh/terminal: Cannot detect VCS\n[ERROR] Failed to checkout packages: Cannot detect VCS\n```\nPing works fine btw. ",
    "dreh23": "Same error here:\n[INFO]  --> Fetching github.com/gorilla/context\n[INFO]  --> Fetching github.com/gorilla/mux\n[INFO]  --> Fetching github.com/golang/snappy\n[INFO]  --> Fetching github.com/jinzhu/gorm\n[WARN]  Unable to checkout golang.org/x/crypto\n[ERROR] Update failed for golang.org/x/crypto: Cannot detect VCS\n[WARN]  Unable to checkout golang.org/x/sys\n[ERROR] Update failed for golang.org/x/sys: Cannot detect VCS\n[ERROR] Failed to install: Cannot detect VCS\nCannot detect VCS\nWhat can I do to help debug this. Thanks.. ",
    "yang0013": "\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6egolang.org\u955c\u50cf\u5230github.com/golang \u6765\u89e3\u51b3\uff01\nglide mirror set https://golang.org/x/crypto https://github.com/golang/crypto --vcs git\nglide mirror set https://golang.org/x/net https://github.com/golang/net --vcs git\n\u53c2\u8003http://moakap.leanote.com/post/253dcbec03a8. ",
    "lcx102737": "@lurenjia528\n\u95ee\u9898\u89e3\u51b3\u4e86\u6ca1\u6709\uff0c\u6211\u4e5f\u9047\u5230\u4e86\u540c\u6837\u7684\u9898. ",
    "tingxin": "Even i use the mirror, i still got the fellow error:\n[WARN]  Unable to checkout golang.org/x/net/context\n[ERROR] Update failed for golang.org/x/net/context: Unable to get repository: Cloning into '/Users/barry.xu/.glide/cache/src/https-github.com-golang-net-context'...\nremote: Not Found\nfatal: repository 'https://github.com/golang/net/context/' not found\n: exit status 128. ",
    "kulukyo": "glide version 0.13.1\nglide mirror list\n[INFO]  Mirrors...\n[INFO]  --> https://golang.org/x/crypto replaced by https://github.com/golang/crypto.git (git)\n[INFO]  --> https://golang.org/x/net replaced by https://github.com/golang/net.git (git)\n[INFO]  --> https://golang.org/x/sys replaced by https://github.com/golang/sys.git (git)\nsame issue:\n[ERROR] Failed to set version on golang.org/x/crypto/ssh/terminal to : Cannot detect VCS\n[ERROR] Failed to set references: Cannot detect VCS (Skip to cleanup). resolved.\n1. set correct mirrors for golang.org/x/...\n2. add golang.org/x/... to glide.yaml manually (or by glide get). ",
    "marioizquierdo": "I found out that glide-vc is normally used to cleanup the vendor folder. The glide-vc command can be used with the --keep flag to avoid removing the .proto files (or .json or .png):\n$ glide-vc --keep '**/*.proto'. ",
    "szuecs": "@vetinari There is missing godoc for the ignore list and you also should provide an additional test ;). ",
    "MadWombat": "Thanks for the workaround. I will set GOBIN.. ",
    "aaskey": "@mattfarina , that's a good point. Is there a fast way to find which package is used by which? I was trying to using \"glide tree\" but it quickly becomes untraceable with large numbers of dependencies. \nJust want to clarify, how are order defined in Glide? Is it true that the one specified in glide.yaml first, together with its dependencies recursively, will take precedence over the ones specified after?  . ",
    "dfuentes77": "I actually didn't know how far along it was, and I was waiting on Heroku support for it, which seems to be on its way: https://github.com/heroku/heroku-buildpack-go/pull/196.   \nUltimately, I would hope for the entire feature set of Glide :P  I'm spoiled from it's magic. \nIf you ever follow https://github.com/kennethreitz,  all the features that he's been adding to pipenv for python is nothing other than astounding, and a another great example.. ",
    "EronWright": "One limitation of dep that has me looking at glide again is golang/dep#1124; constraints aren't applied transitively, leading to much duplication in the top-level manifest.. ",
    "jhowtan": "ARCH=amd64\nOS=darwin\nUsing curl as download tool\nGetting https://glide.sh/version\nTAG=v0.13.0\nLATEST_RELEASE_URL=https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.0\nGetting https://api.github.com/repos/Masterminds/glide/releases/tags/v0.13.0\nGLIDE_DIST=glide-v0.13.0-darwin-amd64.tar.gz\nDownloading https://github.com/Masterminds/glide/releases/download/v0.13.0/glide-v0.13.0-darwin-amd64.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   623    0   623    0     0   2099      0 --:--:-- --:--:-- --:--:--  2104\n100 3557k  100 3557k    0     0  1890k      0  0:00:01  0:00:01 --:--:-- 4065k\nglide version 0.12.3 installed successfully\nIt appears to have rolled back to a previous release.. ",
    "mspaulding06": "I agree that this should be fixed upstream, but it still might be worth considering having an option to disable recursive submodules to avoid similar situations in the future.. ",
    "theo-schaeffer": "Very interesting idea, it would help us to easily compare deps versions in our different projects. . ",
    "coderfox": "I have known this is an issue relating to SSH cloning on GitHub. Issue closed.. ",
    "TannerMoore": "the logger repo is a repo under the organization company. Should the glide.lock file in the primary repo be updated with glide up now that the master branch of the imported logger repo has been updated? Let me know if there is any other info I should add to improve my question. . ",
    "ermolaevalexey": "@ibogdan94  did you fix this problem ? i've got just the same issue with dep. ",
    "AlekSi": "It is just a guess, but maybe incoming err is not nil? I would add something like\ngo\nerr := filepath.Walk(searchPath, func(path string, info os.FileInfo, err error) error {\n    if err != nil {\n        return err\n    }\n    // Skip the base vendor directory\n\u2026. ",
    "hitzzc": "+1. Seems set $GOBIN will resolve this problem. @DSofter $GOBIN=$GOPATH/bin. ",
    "sanket4373": "Facing the same issue.. Can someone kindly provide a fix for it?. ",
    "DSofter": "@hitzzc What should I set $GOBIN to?. ",
    "SvenSommer": "+1 $GOBIN is set correctly with\nexport GOBIN=$GOPATH/bin\nAnd I do get the same error message as mentioned above.. ",
    "hamzahamidi": "I'm still facing the same issue here. Any solution?. I found a solution though I wouldn't recommend it. I just copied the files in go-workspace/bin to user/local/go/bin. ",
    "MinweiShen": "I used this:\nexport PATH=$PATH:$GOPATH/bin. ",
    "DavidGereb": "putting it together, you need to add the following to your ~/.bash_profile or ~/.zshrc if you use zshell\nexport GOPATH=$(go env GOPATH)\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOBIN. ",
    "xkeyideal": "I feel the mirror is not work, glide still connect golang.org/x/sys/unix. Because I set mirror to local file still failed.. #943. see the repo\nhttps://github.com/xkeyideal/glide\n. \n. See the solution https://github.com/xkeyideal/glide. @subbu05 glide mirror set https://golang.org/x/sys/unix repo: https://github.com/golang/sys/unix --base github.com/golang/sys. \u4f60\u4f7f\u7528\u7684\u662f\u6211\u4fee\u6539\u540e\u7684glide\u4e48\uff1f\nsys/unix\u8fd9\u4e2a\u5b50\u5305\u5728\u6211\u7684\u9879\u76ee\u4e2d\u4e5f\u4f7f\u7528\u8fc7\uff0c\u6309\u7167\u6211\u7ed9\u51fa\u7684\u505a\u6cd5\uff0c\u6211\u672c\u5730\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\u53e6\uff0c\u5efa\u8bae\u4f60\u4f7f\u7528dep\u5427\uff0c\u6211\u5df2\u7ecf\u8f6cdep\u4e86. @lurenjia528 . ",
    "sheepbao": "I have same question. ",
    "prithviramesh": "This is happening to me as well. ",
    "hansedong": "I also encountered the same problem.. ",
    "denniswebb": "Same here. ",
    "iawia002": "Same here\n[ERROR] Could not find /Users/mac/.glide/cache/src/https-golang.org-x-sys/unix: cannot find package \".\" in:\n    /Users/mac/.glide/cache/src/https--Users-mac-.glide-cache-src-https-golang.org-x-sys-unix. ",
    "theobarberbany": "Still getting this problem.. ",
    "palsivertsen": "Changing the package name from gitlab.com/company/project/libraries/my-library to gitlab.com/company/my-library works. @zppro Change it in the glide.yaml file like so:\ndiff\npackage: my-project\nimport:\n-  - package: gitlab.com/company/project/libraries/my-library\n+  - package: gitlab.com/company/my-library\n    repo: git@gitlab.com/company/project/libraries/my-library.git\nThen imports like this should work:\nimport \"gitlab.com/company/my-library\". ",
    "zppro": "@palsivertsen where to change the package name: in reference or .yaml \ni met same problem. ",
    "wallacewy": "From git.go\nfunc (s *GitRepo) Version() (string, error) {\n    out, err := s.RunFromDir(\"git\", \"rev-parse\", \"HEAD\")\n    if err != nil {\n        return \"\", NewLocalError(\"Unable to retrieve checked out version\", err, string(out))\n    }\nreturn strings.TrimSpace(string(out)), nil\n\n}\nBecause these folders exist but aren't git repo, solve it by rm -rf these folder. Another issue in win10 x64: Unable to export dependencies to vendor directory: Error moving files: exit status 1. output: Access is denied.\nSolution:\nIn\ngithub.com/Masterminds/glide/path/winbug.go\nfunction \"func CustomRename(o, n string) error\" replace the following line\ncmd := exec.Command(\"cmd.exe\", \"/c\", \"copy\", o, n)\nto\ncmd := exec.Command(\"robocopy.exe\", o, n, \"/e\")\nThat solved the problem.\nRefer to: https://github.com/Masterminds/glide/issues/873. ",
    "ryan-ju": "My mistake, ginkgo was working properly.. ",
    "mdsantosdev": "You can use  \n\nversion: master\n\ninstead of  \n\nversion: ~x.x.x. \n",
    "rickw": "since go4 has moved and several large packages depend on it it would be good to have this\n[ERROR] Update failed for go4.org: The Remote does not match the VCS endpoint\n[ERROR] Failed to do initial checkout of config: The Remote does not match the VCS endpoint\nsince on of those packages is AWS I'll have to figure out another way to do dependancies . switched to dep. ",
    "cooppor": "@RafaRuiz  the glide is not your android glide lib, this is Vendor Package Management for Golang. . ",
    "tevren": "same issue for me as well.. ",
    "apynes2": "same issue. #955  is already created. ",
    "tyler-luminal": "Same issue as well affect our CI builds.. ",
    "adkerr": "Just to add to the chorus of \"me too\". ",
    "nathanraleigh-wf": "I'll add my \"me too\" and hope a fix gets prioritized as it's affecting our CIs as well.. Adding these lines causes an issue for me now when trying to run glide install --strip-vendor \nThe error it produces is similar to:\n[INFO]    Replacing existing vendor dependencies\n[INFO]    Removing nested vendor and Godeps/_workspace directories...\n[INFO]    Removing: /lib/go/vendor\n[ERROR]   Unable to strip vendor directories: open /lib/go/vendor: no such file or directory\nDo I need to create an Issue on this? It's causing our builds to fail now.. ",
    "Adol1111": "I see, when I run glide install, it calls NormalizeName method to get package name and extra data. If pacakge is special which like golang.org/x/net, it will call https://golang.org/x/net?go-get=1 to get a meta tag with the name go-import. Is it necessary?. ",
    "jeffzhangme": "It can be solved temporarily, by setting the mirror and modifying the local hosts configuration.\n1. Set the mirrors\nglide mirror set https://golang.org/x/net https://github.com/golang/net --vcs git\n2. Add the configuration in the hosts file\n0.0.0.0  golang.org. ",
    "zjn1234": "can anybody explain this question. ",
    "cafra": "me too. i has this problem too. ",
    "nidhi-ag": "I am also facing this issue. On removing levelDB package it is removing other packages or their sub-packages also. ",
    "jmelfi": "not a dev here but is the package you are removing (leveldb or xxxxx package) the only package that uses those other vendored deps?\nI've seen this happen as intended to ensure that the compatible deps are available.  I've not run into this particular issue myself in the case you're describing.\nAre you not able to build after glide rm xxxxx or do you need to run a glide i to get it back to it's normal state?\nTo be clear, the help document describes rm and get as the inverse operation of each other.\nGet installs a package into vendor and generates the glide.lock file with that added dependency.\nRemove uninstalls a package and generates the new glide.lock file based on the new dependencies with that removed package.\nThis is at least my understanding.. ",
    "alphayan": "I found this bug is exist already for several years.. ",
    "Piratebayy": "If there is someone that can help me with this issue over screenshare I will give him some $$ . After trying things out, I tried to fix it but now i get this error:\ncannot find package \"context\" in any of:\n        /usr/lib/go/src/pkg/context (from $GOROOT)\n        /.go/src/context (from $GOPATH)\n/.go/src/github.com/jordan-wright/email/email.go:18:2: cannot find package \"mime      /quotedprintable\" in any of:\n        /usr/lib/go/src/pkg/mime/quotedprintable (from $GOROOT)\n        /.go/src/mime/quotedprintable (from $GOPATH)\n. ",
    "joshiomkarj": "Issue is very similar to https://github.com/Masterminds/glide/issues/615 except that the cpu usage is normal. glide version is \n```\nglide version v0.13.1\n. ",
    "sjpotter": "I should note that this was working fine, until I updated my ubuntu installation from 17.04 to 17.10. using the golang-glide package in Ubuntu 17.10 (instead of my own go get version worked\n$ glide --version\nglide version v0.13.1\n$ /usr/bin/glide --version\nglide version 0.12.3-2\nfirst one fails repeatedly (its the one in my GOPATH), the second one works fine.. ",
    "eliquious": "Has anyone discovered a work around for this error?. ",
    "ravik-karn": "any solution found yet? . ",
    "yogihardi": "maybe you can try clean up the cache and do update \n$> glide cc\n$> glide up. ",
    "Somebi": "[WARN]  Download failed.\n[ERROR] Update failed for github.com/go-openapi/spec: Unable to update repository: exit status 128\n[DEBUG] Output was: fatal: unable to access 'https://github.com/go-openapi/spec/': Could not resolve host: github.com[DEBUG]    Unlocking https-github.com-go-openapi-spec\n. Tried to download manually via wget https://github.com/go-openapi/spec/ url and it downloaded it without problems.\nHow the hell it can't resolve github.com?\nVia what it resolves domain then?. Guess problem is somewhere here:\nRepository caching and data caching for improved performance.\nI have multiple vpn and networks here and there... Possibly there is some caching going on and wrong domains resolving information was cached.... ",
    "nihlaakram": "Faced the same error\nglide version v0.13.1\n```\n[WARN]  Download failed.\n[ERROR] Update failed for gopkg.in/yaml.v2: Unable to update repository: exit status 128\n[WARN]  Download failed.\n[ERROR] Update failed for gopkg.in/gomail.v2: Unable to update repository: exit status 128\n[ERROR] Failed to do initial checkout of config: Unable to update repository: exit status 128\n```\n. ",
    "jayschwa": "At first glance, the issue seems to be that stripGodepWorkspaceHandler is not checking the err input before attempting to use the other arguments.\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x6fb26f]\ngoroutine 1 [running]:\ngithub.com/Masterminds/glide/godep/strip.stripGodepWorkspaceHandler(0xc4207850e0, 0x48, 0x0, 0x0, 0x8f3620, 0xc4202c6f00, 0x0, 0x0)\n    /go/src/github.com/Masterminds/glide/godep/strip/strip.go:62 +0x4f\npath/filepath.walk(0xc420702240, 0x3d, 0x8fa5a0, 0xc4206feb60, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:377 +0x20d\npath/filepath.walk(0xc420702080, 0x32, 0x8fa5a0, 0xc4206fe8f0, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc4205548a0, 0x2b, 0x8fa5a0, 0xc4206fe820, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc4205547e0, 0x25, 0x8fa5a0, 0xc42077e820, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc4201f5620, 0x1f, 0x8fa5a0, 0xc42066c680, 0x8baaf8, 0x0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.walk(0xc4204452e0, 0x14, 0x8fa5a0, 0xc42066c5b0, 0x8baaf8, 0x0, 0x8fa5a0)\n    /usr/local/go/src/path/filepath/path.go:381 +0x2c2\npath/filepath.Walk(0xc4204452e0, 0x14, 0x8baaf8, 0xc42066c4e0, 0x0)\n    /usr/local/go/src/path/filepath/path.go:403 +0x106\ngithub.com/Masterminds/glide/godep/strip.GodepWorkspace(0xc4204452e0, 0x14, 0xc4203fc100, 0x0)\n    /go/src/github.com/Masterminds/glide/godep/strip/strip.go:39 +0x11e\ngithub.com/Masterminds/glide/path.StripVendor(0x8b06d6, 0x3b)\n    /go/src/github.com/Masterminds/glide/path/strip.go:52 +0x139\ngithub.com/Masterminds/glide/action.Install(0xc4201c7600, 0x89bf01)\n    /go/src/github.com/Masterminds/glide/action/install.go:62 +0x35b\nmain.commands.func12(0xc420234420, 0x0, 0xc420234420)\n    /go/src/github.com/Masterminds/glide/glide.go:510 +0x2bf\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.HandleAction(0x8113c0, 0x8bacd8, 0xc420234420, 0xc4201f0500, 0x0)\n    /go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:490 +0xc8\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.Command.Run(0x89a18b, 0x7, 0x8987e0, 0x1, 0x0, 0x0, 0x0, 0x8a5bfa, 0x20, 0x0, ...)\n    /go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/command.go:210 +0xa36\ngithub.com/Masterminds/glide/vendor/github.com/codegangsta/cli.(*App).Run(0xc420222000, 0xc42001e090, 0x3, 0x3, 0x0, 0x0)\n    /go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli/app.go:255 +0x6a0\nmain.main()\n    /go/src/github.com/Masterminds/glide/glide.go:104 +0x5a9\n```. ",
    "TildeWill": "We stopped getting the SIGSEGV by downgrading to go v1.9:\nbash\n$ brew uninstall glide #not sure if this is strictly needed\n$ brew uninstall go\n$ brew install go@1.9\n$ brew link go@1.9 --force\n$ brew install glide # also installs go 1.10, but is not linked on our $PATH\n$ glide update --strip-vendor #SUCCESS!. ",
    "tonyghita": "@ryanwalls if you upgrade to 3e13fd16ed5b0808ba0fb2e4bd98eb325ccde0a1, you'll find the same stack trace as @jayschwa. I've opened #990 to fix the issue. Let me know if this works for you guys.. ",
    "alon-abadi": "Glide is no longer being developed. Please consider migrating to more relevant solutions, such as dep (or vgo in the future).. ",
    "iiinsomnia": "@alon-abadi glide is much better than dep.. ",
    "luodanwg": "this fixed on my  Windows machines, thanks.. ",
    "linquize": "When will merge this fix?. ",
    "dogancelik": "Can you merge this?. ",
    "wxcsdb88": "What the help\uff1f I also need this feature, thks someone will deal it.. ",
    "gburanov": "I understand that the fix should not be done in vendor folder, but does it make sense it all? Or am I doing smth incorrect?. Is there a way to make it working other then switch to go.mod as well?. ",
    "vkamra": "@mattfarina - this is similar to your fix #953 - in the godep code path. Can we get this in? Hitting this with Go 1.10 . ",
    "danwinship": "While this patch works around the crash and is correct anyway, the real fix is to return filepath.SkipDir rather than nil if we call os.RemoveAll() later in the function (like in #956, although that also included a bunch of other refactoring). 0.13.2 includes #956, which fixes the crash when skipping vendor/ but not when skipping Godeps/_workspace/. ",
    "fxcoudert": "Can this fix (or an equivalent fix) please be merged, and a new release tagged? This is impacting distributors like Homebrew who ship go software.. Thanks so much @mattfarina !. ",
    "jimfilippou": "The dial tcp 127.0.0.1:3306: connectex: No connection could be made because the target machine actively refused it. exit status 1 error indicates that your machine is hitting localhost and possibly localhost isn't listening for TCP connections. If you are trying to connect to the cloud and not locally consider using this code below.\ngo\nfmt.Println(\"Connecting to database...\")\nconnString := \"username:password@tcp(sql.hosting.com:3306)/databaseName\"\ndb, err := sql.Open(\"mysql\", connString)\nif err != nil {\n    panic(err.Error())\n}. ",
    "wenlock": "Oh, I'm also just trying one of the examples for main.go:\n```\n/\n\nLets generate a html snippet of the members for our repo to paste into\nthe README.md\n\n/\npackage main\nimport (\n    \"fmt\"\n\"github.com/octokit/go-octokit/octokit\"\n\n)\nfunc main() {\n    url, _ := octokit.UserURL.Expand(octokit.M{\"user\": \"jingweno\"})\n    fmt.Println(url) // https://api.github.com/users/jingweno\n}\n```\nNothing special for now.. Fresh eyes in the afternoon, looks like i missed that mediaheader is no longer present in the HEAD for master on lostisland/go-sawyer.  I added this section to get an older version:\n- package: github.com/lostisland/go-sawyer\n  version: 9e5513c7034ba3db7405d865e1dcc3daeb6b8d93\n  subpackages:\n  - mediaheader\n  - hypermedia\n  - mediatype\nLooks like that did the trick.  . ",
    "deimosfr": "Hi,\nSame exact error, how did you resolved it ?\nThanks. ",
    "knusbaum": "@deimosfr I didn't, but it appears someone else did. The bug isn't present in the master branch.. ",
    "peterfraedrich": "I too am seeing this issue with a package hosted in a Gitlab subproject.\nglide version:\n0.13.1\nglide config:\nyaml\n- package: golang.org/x/sys\n  subpackages:\n  - unix\n- package: gitlab.com/somegroup/someproject/somerepo\n  repo: https://gitlab.com/somegroup/someproject/somerepo.git\n- package: github.com/dgrijalva/jwt-go\n  version: ^3.2.0\nrunning glide install:\n\u276f glide install\n[INFO]  Lock file (glide.lock) does not exist. Performing update.\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for golang.org/x/sys\n[INFO]  --> Fetching updates for github.com/gobuffalo/packr\n[INFO]  --> Fetching updates for gopkg.in/yaml.v2\n[INFO]  --> Fetching gitlab.com/taskfitio/fit-proto\n[INFO]  --> Fetching updates for github.com/dgrijalva/jwt-go\n[INFO]  --> Fetching updates for github.com/shirou/gopsutil\n[INFO]  --> Fetching updates for github.com/davecgh/go-spew\n[WARN]  Unable to checkout gitlab.com/taskfitio/fit-proto\n[ERROR] Update failed for gitlab.com/somegroup/someproject/somerepo: Unable to get repository: Cloning into '/Users/frg105/.glide/cache/src/https-gitlab.com-somegroup-someproject-somerepo'...\nremote: The project you were looking for could not be found.\nfatal: repository 'https://gitlab.com/somegroup/someproject.git/' not found\n: exit status 128\n[ERROR] Failed to do initial checkout of config: Unable to get repository: Cloning into '/Users/frg105/.glide/cache/src/https-gitlab.com-somegroup-someproject-somerepo'...\nremote: The project you were looking for could not be found.\nfatal: repository 'https://gitlab.com/somegroup/someproject.git/' not found\n: exit status 128\nIt looks that glide is expecting a certain group/project/repo format in the repo URI instead of working backwards from the end of the URI string. . Use godep\nOn Thu, Oct 11, 2018 at 4:55 AM Luke Mallon notifications@github.com\nwrote:\n\nI have just moved some of my groups to subgroups because of paid features\nwe require on gitlab.com and have come up against this issue.\nOther than not using glide or not tracking this particular set of repos in\nglide is there a work around for this?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Masterminds/glide/issues/1006#issuecomment-428875662,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGbgOch3JDnmB6ojbOlEWxwVJY0rhYNGks5ujweXgaJpZM4VuiXj\n.\n--\nPeter Christian Fraedrich\nM: 703 819 9704\n. \n",
    "moooofly": "Meeting the same issue with a package hosted in a Gitlab subproject.\n```\n$glide -v\nglide version v0.13.1\n$glide update\n[INFO]  Downloading dependencies. Please wait...\n[INFO]  --> Fetching updates for github.com/golang/protobuf\n[INFO]  --> Fetching git.llsapp.com/ops/hunter\n[INFO]  --> Fetching updates for go.opencensus.io\n[INFO]  --> Fetching updates for golang.org/x/net\n[INFO]  --> Fetching updates for google.golang.org/grpc\nUsername for 'https://git.llsapp.com': fei.sun\nPassword for 'https://fei.sun@git.llsapp.com':\n[WARN]  Unable to checkout git.llsapp.com/ops/hunter\n[ERROR] Update failed for git.llsapp.com/ops/hunter: Unable to get repository: Cloning into '/root/.glide/cache/src/https-git.llsapp.com-ops-hunter'...\nremote: The project you were looking for could not be found.\nfatal: repository 'https://git.llsapp.com/ops/hunter.git/' not found\n: exit status 128\n[ERROR] Failed to do initial checkout of config: Unable to get repository: Cloning into '/root/.glide/cache/src/https-git.llsapp.com-ops-hunter'...\nremote: The project you were looking for could not be found.\nfatal: repository 'https://git.llsapp.com/ops/hunter.git/' not found\n: exit status 128\n```\n\nIt looks that glide is expecting a certain group/project/repo format in the repo URI instead of working backwards from the end of the URI string.\n\nI think this is the key.. @nathanjsweet the error you met may be related with the situation that your target repo is on a wrong branch or tag or commit id.. ",
    "Nalum": "I have just moved some of my groups to subgroups because of paid features we require on gitlab.com and have come up against this issue.\nOther than not using glide or not tracking this particular set of repos in glide is there a work around for this?\nEdit:\nDidn't notice this in the opening comment:\nyaml\n- package: gitlab.com/silexica/cloud/api\n  repo: https://gitlab.com/silexica/cloud/api.git\n  vcs: git\n  subpackages:\n  - client\n  - client/execution\nIf you change repo from https://gitlab.com/silexica/cloud/api.git to git@gitlab.com:silexica/cloud/api.git that will work. Just figured that out now.. Nevermind my edited comment. Setting repo to the git url didn't work, not sure why it appeared to work on my other machine yesterday.\nRunning it on this machine I get the following output when running glide up\n[ERROR] Error scanning gitlab.com/group/subgroup/repo/pkg/subpkg: cannot find package \".\" in:\n        /home/nalum/.glide/cache/src/git-gitlab.com-group-subgroup-repo.git/repo/pkg/subpkg\n[ERROR] Failed to retrieve a list of dependencies: Error resolving imports\nLooking in the cache the repo is cloned directly into /home/nalum/.glide/cache/src/git-gitlab.com-group-subgroup-repo.git and not the subfolder of /home/nalum/.glide/cache/src/git-gitlab.com-group-subgroup-repo.git/repo.. ",
    "mozhata": "```\n[DEBUG] Package gopkg.in/go-playground/validator.v9 imports sync\n[DEBUG] Found on GOPATH, not vendor: sync\n[DEBUG] Trying to open sync (/home/mozhata/.glide/cache/src/https-sync)\n[DEBUG] ImportDir error on /home/mozhata/.glide/cache/src/https-sync: cannot find package \".\" in:\n    /home/mozhata/.glide/cache/src/https-sync\n[ERROR] Error scanning sync: cannot find package \".\" in:\n    /home/mozhata/.glide/cache/src/https-sync\n```. find out the problem, I build a \"sync\" package at GOPATH\nremove this package work, close . ",
    "hanzei": "V0.13.2 got released https://github.com/Masterminds/glide/releases/tag/v0.13.2. I think this issue can be closed.. ",
    "eparis": "I just had the same problem. The WalkFunc to filepath.Walk doesn't check errors. If you return the error you see the glide is deleting the directory and then trying to continue walking it...\n``\n...\n[INFO]  Removing: /home/eparis/go/src/github.com/openshift/origin/vendor/k8s.io/kubernetes/vendor\n[INFO]  Removing: /home/eparis/go/src/github.com/openshift/origin/vendor/k8s.io/sample-apiserver/vendor\n[INFO]  Removing: /home/eparis/go/src/github.com/openshift/origin/vendor/github.com/vmware/photon-controller-go-sdk/Godeps/_workspace\n[ERROR] Unable to strip vendor directories: lstat /home/eparis/go/src/github.com/openshift/origin/vendor/github.com/vmware/photon-controller-go-sdk/Godeps/_workspace/.gitignore: no such file or directory\nAn Error has occurred\n[ERROR] PID 22972: hack/update-deps.sh:37:glide update --strip-vendorexited with status 2.\n[INFO]      Stack Trace: \n[INFO]        1: hack/update-deps.sh:37:glide update --strip-vendor`\n[INFO]   Exiting with code 2.\n```. ",
    "sripathivenky": "Any update on this??. ",
    "pmalekn": "To quote @mediocregopher (from https://github.com/mediocregopher/radix/issues/50#issuecomment-441482073)\n\nHey @armsnyder , it seems like other people are having similar problems with glide, like in this issue Unfortunately there's not much I can do on my end, and I'm not really familiar with glide at all, but I'd recommend putting your two cents into that thread. Ultimately it's up to glide to properly support go modules.\nThere's also this message on the glide README:\nThe Go community now has the dep project to manage dependencies. Please consider trying to migrate from Glide to dep. If there is an issue preventing you from migrating please file an issue with dep so the problem can be corrected. Glide will continue to be supported for some time but is considered to be in a state of support rather than active feature development.\nSo maybe there's not much they'll do either, you might have to just migrate to dep =/\nGonna go ahead and close this, sorry I couldn't be more helpful here.\n\nSo I guess it all depends if glide want to support to modules (which doesn't look like it).. ",
    "seantcanavan": "I am receiving the same exact error myself. No one else in my company is experiencing this issue so I'm leaning towards the latest macOS update as being the culprit.\nI've reproduced the error on both 1.10.4 and 1.11.0 so it doesn't appear to be an issue specific to GoLang but rather with some path / directory traversal issue related to macOS.\n@LirazRom what version of macOS are you running? I'm running 10.13.6 (17G2307).\nStackoverflow posting: https://stackoverflow.com/questions/52326548/getting-error-when-downloading-dependencies. ",
    "adambkaplan": "Observed this on Fedora 28, kernel 4.18.16-200.fc28.x86_64. ",
    "ryanhartje": "Nevermind, a look at the docs doesn't say to install it this way, but when breaking convention, maybe they should state not to if that's an implicit desire.. ",
    "alisonbibm": "Is there any news on this, please, as we'd like the v0.13.2 version for s390x too. ",
    "lkelemen": "earlier version is here\nhttps://github.com/Masterminds/glide/releases/download/v0.13.1/glide-v0.13.1-linux-arm64.tar.gz\nor install the latest one from sources. ",
    "noelmcloughlin": "Here is one-liner\n$ wget https://github.com/Masterminds/glide/releases/download/v0.13.1/glide-v0.13.1-linux-arm64.tar.gz && sudo tar -zxvf glide-v0.13.1-linux-arm64.tar.gz && sudo mv ./linux-arm64/glide /usr/local/bin/. ",
    "KantarBruceAdams": "I am mistaken the cause was actually that I had a bad line in my go source\nimport \"testify\"\nrather than \nimport \"github.com/stretchr/testify\"\nI'm not sure why that should confuse glide. ",
    "databus23": "Related #990. ",
    "raja-gola": "Happens even when, I do \nglide cc\nrm -rf vendor/. ",
    "santoshkt": "+1. ",
    "stanislav-chlebec": "curl https://glide.sh/get | sh \nwill fail on arm64....\n....\nUsing curl as download tool\nGetting https://glide.sh/version\nTAG=v0.13.2\nGLIDE_DIST=glide-v0.13.2-linux-arm64.tar.gz\nDownloading https://github.com/Masterminds/glide/releases/download/v0.13.2/glide-v0.13.2-linux-arm64.tar.gz\nDid not find a release for your system: linux arm64\n..... ",
    "xexiyong": "same error occurs in mine. ",
    "justsoloyou": "I take my wife's MAC, it works. LOL. ",
    "gcmt": "I just think that comparing gopath against and empty string makes it clear that we are expecting a string from Gopath() instead of a more general slice.\n. ",
    "beono": "Hello @mattfarina \nI update my golang version from 1.9.1 to 1.10 and then I got this error from glide:\nglide update\n[ERROR] Error getting version: exit status 2.\nI upgraded golang  in a separate terminal so the one that I used with glide had outdated GOROOT path.\nI think it's important to update the error message cause it's really confusing at the moment and makes me thinking that something is wrong with my glide.yaml. ",
    "soltysh": "Switching to your proposed solution did not solve the problem, the root cause is vendor/github.com/mesos/mesos-go/api/v0/examples/Godeps/_workspace/.gitignore which is being removed earlier in the process of invoking glide update --strip-vendor and then leads to following error:\n[ERROR] Unable to strip vendor directories: lstat /data/github.com/openshift/origin/vendor/github.com/mesos/mesos-go/api/v0/examples/Godeps/_workspace/.gitignore: no such file or directory`. "
}