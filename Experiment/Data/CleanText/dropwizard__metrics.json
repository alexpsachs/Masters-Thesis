{
    "codahale": "It's converted to a Double automatically by being passed to Rate.perNanosecond(Double).\n. It does:\n```\nscala> def p(d: Double) = println(d)\np: (d: Double)Unit\nscala> p(1L / 2L)\n0.5\nscala> 1L / 2L\nres1: Long = 0\n```\n. Fix Sample#iterator size. Closed by 7fc9039c3c6cab6d7d5da14c9f36d2e66badba9e.\n. I ended up extracting the EWMA code for better testability in acf5206, which incorporates this change.\nThank you very much for this.\n. (acf52067440395a53834e8dfbbeee1e64f2bc045, that is)\n. Got this covered in 2.0.0-BETA11-SNAPSHOT after the feature/scoped-names merge.\n. Fixed in 37f88c1bb867e6bc8e971d3107bd4051365c6c9d instead, by removing the second factory method and disallowing arbitrary intervals.\n. I think you may be misunderstanding what the interval is vs. what the rate unit is.\nThe interval is the interval between ticks for the exponentially weighted moving averages. This is no longer a public value because it's an implementation detail, not a meaningful external value.\nThe rate unit is the unit of time that events are averaged over (for example requests/second). If you want req/sec, create a meter with a rate unit of TimeUnit.SECONDS and mark it each time you process a request. The resulting mean, 1-minute, 5-minute, and 15-minute rates will all be in requests per second.\n\nCoda Hale\nhttp://codahale.com\nOn Thursday, April 14, 2011 at 10:40 PM, jebl01 wrote: \n\nOk, Thank you.\nThis pull request was actually only a preparation for an other planned request. I have added a req/interval counter alongside the others, which will give you a req/sec counter if you use an interval of one sec (req/sec is something we need to feed our \"realtime\" graphing monitors displayed on eight 40\" LCD's).\nI guess this has to be done some other way then, maybe by scheduling a separate job for this for each meter.\nWe are currently evaluating the Metrics lib in favor to our own (much similar). But to feel confident we need the per sec counter :-)\nGreat work btw!\n/Jesper\nOn 15 apr 2011, at 05:59, codahalereply@reply.github.com wrote:\n\nFixed in 37f88c1bb867e6bc8e971d3107bd4051365c6c9d instead, by removing the second factory method and disallowing arbitrary intervals.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1004979\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1005273\n. @chids as well\n. Applied! Thanks!\n. Thanks!\n\n(I will admin that the number of misspellings in the Javadocs is embarrassing. Enabling the spell checking in IntelliJ now.)\n. I just published 2.9.0.RC1-compatible artifacts for 2.0.0-BETA11-SNAPSHOT to my repo, FWIW.\n. Thanks!\n. Thanks for keeping me honest.\n. Awesome! Thanks!\n. Aaaand published. Again, thanks a million.\n. I'd rather have things be correct than pretty. While I don't have any values now for which 1E-7 \u2260 0 other people might.\n. Awesome, thank you! I'll repackage this slightly, but much appreciated.\n. Thanks!\n. I'd recommend checking out sbt-eclipsify instead of baking the Eclipse files into the project. Feel free to reopen with sbt-eclipsify support, though!\n. Ah, sorry -- that's what I get for trying to go through pull requests on my phone.\n. I rebased it, resolved the conflict, and applied the patch. Thanks!\n. I really hate to do this, but I can't accept this patch. I think this is a poor metric of ongoing processes.\nI'd be open to adding a more responsive EWMA or updating the EWMA rates on a tighter schedule than 5 seconds, but the raw number of events is so prone to collection and measurement artifacts that I don't want to add it to Metrics.\nI really appreciate the effort, though, and I'm always happy to see people using Metrics for stuff like the awesome dashboards you have at Hitta.\n. Work I don't have to do? I'll take it.\n. Oof. That's embarrassing.\n. Awesome, thank you for the test case! I'll figure out what combination of servlet bells and whistles are required and get that fix in for B13.\nI'm glad you guys are enjoying it; it's been fun having an open source project kind of take off. Been getting a lot of patches.\n\nCoda Hale\nhttp://codahale.com\nOn Thursday, May 12, 2011 at 5:31 AM, smanek wrote: \n\nHey Coda,\nThis is Shaneal (Kevin's coworker from Greplin). It looks like your https://github.com/codahale/metrics/commit/4743cfc38b17ee3f8aa7faf658cd758c0ad3e12e commit didn't actually fix https://github.com/codahale/metrics/issues/8.\nI've created a small test project which demonstrates the bug and uploaded it at: http://dl.dropbox.com/u/7178/metrics-bug.tar.gz\nYou can run it with a 'mvn tomcat:run', and visiting http://localhost:8080/metricstest/monitoring. It's broken with the code you currently have - but this pull-request will fix it.\nThanks for the great project! I'm in the process of migrating a lot more of our stats to this.\n-Shaneal\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/28\n. Man, GitHub's emails have really been confusing me lately. It's hard to tell when someone has submitted an issue or a bugfix. Your commit does a lot of things I don't want to do \u2014 use tabs instead of spaces, reverts some changes made to running health checks, etc. -- but I've extracted it out into ccdb26c1f19ce871e0cd2cbb11644d5d963ec13f.\n. Closed in b8f9356dad3fb39bd8bb90967197c9b611c45a77.\n. I really only update those during a release.\n\n\nCoda Hale\nhttp://codahale.com\nOn Thursday, May 12, 2011 at 9:26 AM, waywardmonkeys wrote: \n\nMight as well hit the README too :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/issues/30#comment_1147612\n. Excellent, thank you.\n. (Sorry I didn't get around to this for like 3 months -- totally didn't remember I had outstanding pull requests until I checked this. I owe you a beer or equivalent.)\n\nI think HistogramMetric is a much better fit for what you're doing. It doesn't allow for a configurable decay period, but I'd be willing to add that if you like.\n. Good catch, thank you.\n. It seems out of scope. I think this is the responsibility of the aggregation tier, not of the Metrics library.\n. I would absolutely add this as an additional module.\n. Closed in glorious fashion via 5bb0225c9a4366c2f278967d2acd779abe90e931.\n. Again, I had either not known or totally forgotten there was code on this issue. If you'd like to send me a pull request, I'll gladly merge it.\n. I explained a potential solution to this here:\njava\nnew TimerListener() {\n    @Override\n    public void onTiming(long elapsedTime, TimeUnit unit) {\n        if (unit.toMilliseconds(elapsedTime) > SLOW_THRESHOLD) {\n            LOG.warn(\"HOLY CRAP\");\n        }\n    }\n}\nHow does that sound?\n. @chids Hmm, interesting.\n. Given that Timer.Context#stop() now returns the timing, I don't think this is worth the overhead managing a concurrent list of listeners would require.\n. Closed by a67b6888359088118cd59aff1b2ca8ce28d36d88.\nThanks!\n. Awesome, thank you.\n. Good catch; thanks for pointing that out. 2.0.0-BETA14-SNAPSHOT has this fix.\n. Ah, good point.\n. If you'd like to re-submit this as a pull request, I'd be open to merging it.\n. Just pushed 2.0.0-BETA14-SNAPSHOT with this fix.\n. With full samples:\njavascript\n\"gc\" : {\n  \"duration\" : {\n    \"ConcurrentMarkSweep\" : {\n      \"type\" : \"timer\",\n      \"duration\" : {\n        \"unit\" : \"milliseconds\",\n        \"min\" : 45.0,\n        \"max\" : 9.223372036854775E12,\n        \"mean\" : -1.2136015546015494E11,\n        \"std_dev\" : 1.0579933319587719E12,\n        \"median\" : 2137.0,\n        \"p75\" : 5442.25,\n        \"p95\" : 7033.649999999998,\n        \"p98\" : 4.242751140829799E12,\n        \"p99\" : 9.223372036854775E12,\n        \"p999\" : 9.223372036854775E12,\n        \"values\" : [ 45.0, 9.223372036854775E12, 286.0, 52.0, 1238.0, 2692.0, 362.0, 250.0, 2609.0, 198.0, 2696.0, 3587.0, 412.0, 3963.0, 457.0, 644.0, 1992.0, 2084.0, 431.0, 2575.0, 162.0, 1992.0, 1589.0, 470.0, 146.0, 470.0, 627.0, 761.0, 812.0, 5216.0, 2174.0, 555.0, 945.0, 761.0, 2516.0, 2100.0, 1383.0, 965.0, 3092.0, 555.0, 694.0, 1383.0, 5416.0, 5416.0, 6039.0, 5508.0, 1620.0, 1314.0, 6039.0, 5569.0, 5437.0, 5444.0, 1501.0, 1501.0, 5437.0, 5283.0, 5283.0, 6186.0, 6186.0, 1536.0, 5976.0, 6066.0, 5976.0, 6359.0, 6066.0, 6359.0, 2490.0, 792.0, 1476.0, 4504.0, 7008.0, 4504.0, 7008.0, 7179.0, 7179.0, 6285.0 ]\n      },\n      \"rate\" : {\n        \"unit\" : \"hours\",\n        \"count\" : 76,\n        \"mean\" : 84.67952757458835,\n        \"m1\" : 10.762514905180675,\n        \"m5\" : 22.411837183464833,\n        \"m15\" : 73.69209583394682\n      }\n    },\n    \"ParNew\" : {\n      \"type\" : \"timer\",\n      \"duration\" : {\n        \"unit\" : \"milliseconds\",\n        \"min\" : 1.0,\n        \"max\" : 239.0,\n        \"mean\" : 41.75,\n        \"std_dev\" : 31.97136397065224,\n        \"median\" : 33.0,\n        \"p75\" : 58.75,\n        \"p95\" : 98.75,\n        \"p98\" : 136.89999999999998,            \"p99\" : 160.14999999999984,            \"p999\" : 239.0,            \"values\" : [ 5.0, 1.0, 5.0, 3.0, 3.0, 16.0, 3.0, 16.0, 17.0, 16.0, 2.0, 14.0, 9.0, 16.0, 6.0, 22.0, 12.0, 15.0, 13.0, 15.0, 17.0, 12.0, 3.0, 12.0, 19.0, 15.0, 18.0, 8.0, 19.0, 15.0, 7.0, 15.0, 18.0, 10.0, 2.0, 21.0, 17.0, 26.0, 3.0, 16.0, 14.0, 17.0, 16.0, 20.0, 14.0, 10.0, 10.0, 16.0, 24.0, 16.0, 18.0, 16.0, 20.0, 27.0, 8.0, 14.0, 17.0, 12.0, 17.0, 15.0, 11.0, 16.0, 9.0, 15.0, 8.0, 21.0, 7.0, 17.0, 16.0, 16.0, 16.0, 3.0, 14.0, 14.0, 16.0, 8.0, 6.0, 8.0, 9.0, 16.0, 7.0, 19.0, 17.0, 7.0, 15.0, 13.0, 14.0, 7.0, 15.0, 7.0, 18.0, 17.0, 16.0, 18.0, 22.0, 21.0, 14.0, 23.0, 24.0, 37.0, 23.0, 14.0, 25.0, 20.0, 136.0, 14.0, 7.0, 56.0, 140.0, 37.0, 29.0, 24.0, 41.0, 21.0, 177.0, 45.0, 43.0, 41.0, 36.0, 41.0, 42.0, 65.0, 43.0, 31.0, 46.0, 62.0, 76.0, 20.0, 77.0, 35.0, 104.0, 56.0, 19.0, 96.0, 93.0, 45.0, 47.0, 32.0, 34.0, 116.0, 54.0, 239.0, 44.0, 23.0, 17.0, 22.0, 43.0, 24.0, 68.0, 117.0, 73.0, 35.0, 48.0, 43.0, 47.0, 51.0, 79.0, 63.0, 33.0, 74.0, 24.0, 19.0, 78.0, 77.0, 93.0, 17.0, 29.0, 56.0, 94.0, 200.0, 115.0, 31.0, 40.0, 20.0, 36.0, 19.0, 18.0, 20.0, 41.0, 56.0, 27.0, 50.0, 52.0, 21.0, 18.0, 14.0, 23.0, 21.0, 51.0, 54.0, 61.0, 51.0, 64.0, 30.0, 28.0, 86.0, 22.0, 144.0, 24.0, 55.0, 19.0, 43.0, 51.0, 22.0, 23.0, 64.0, 29.0, 74.0, 29.0, 29.0, 65.0, 40.0, 51.0, 57.0, 115.0, 11.0, 74.0, 20.0, 45.0, 25.0, 18.0, 36.0, 74.0, 67.0, 23.0, 59.0, 78.0, 30.0, 30.0, 89.0, 34.0, 70.0, 19.0, 67.0, 39.0, 73.0, 56.0, 57.0, 56.0, 14.0, 26.0, 76.0, 25.0, 52.0, 53.0, 64.0, 77.0, 40.0, 8.0, 48.0, 73.0, 39.0, 38.0, 87.0, 59.0, 33.0, 99.0, 61.0, 76.0, 16.0, 137.0, 23.0, 77.0, 57.0, 23.0, 26.0, 39.0, 24.0, 40.0, 27.0, 20.0, 22.0, 43.0, 25.0, 20.0, 75.0, 52.0, 54.0, 20.0, 38.0, 24.0, 25.0, 48.0, 66.0, 72.0, 45.0, 74.0, 22.0, 35.0, 48.0, 63.0, 83.0, 100.0, 81.0, 41.0, 34.0, 53.0, 62.0, 21.0, 29.0, 30.0, 67.0, 61.0, 63.0, 71.0, 141.0, 31.0, 60.0, 19.0, 40.0, 35.0, 104.0, 39.0, 56.0, 25.0, 71.0, 22.0, 70.0, 61.0, 60.0, 52.0, 56.0, 11.0, 19.0, 48.0, 18.0, 35.0, 60.0, 27.0, 25.0, 62.0, 48.0, 51.0, 23.0, 44.0, 54.0, 34.0, 71.0, 22.0, 50.0, 55.0, 70.0, 23.0, 58.0, 83.0,\n58.0, 68.0, 49.0, 71.0, 40.0, 56.0, 54.0, 19.0, 24.0, 72.0, 41.0, 98.0, 89.0, 33.0, 36.0, 34.0, 27.0, 81.0, 55.0, 29.0, 16.0, 77.0, 82.0, 32.0, 61.0, 61.0, 71.\n0, 161.0, 30.0, 16.0, 35.0, 101.0, 37.0, 26.0, 91.0, 15.0, 96.0, 126.0, 79.0, 24.0, 66.0, 26.0, 105.0, 43.0, 18.0, 81.0, 22.0, 72.0, 55.0, 22.0, 56.0, 23.0, 15.\n0, 61.0, 28.0, 54.0, 68.0, 64.0, 34.0 ]\n      },\n      \"rate\" : {\n        \"unit\" : \"hours\",\n        \"count\" : 404,\n        \"mean\" : 450.1377837395417,\n        \"m1\" : 449.44011437375354,\n        \"m5\" : 427.9817140161733,\n        \"m15\" : 448.98132919411\n      }\n    }\n  }\n}\n. The \"minute\" there refers to the exponential decay of the rate, not the time unit of the rate itself.\n. Awesome! Thanks!\n. I just wanted to say -- this is on my mind. It'll probably take a giant refactor to alter various singletons, but that's something about Metrics I've wanted to change anyways. I'm a bit short on personal time, though, so I can't make promises about when I'll get to this. :(\n. I like it! A few rough edges, but I'd definitely accept it.\n. It's nothing specific; more a matter of needing to integrate this style in other parts of Metrics.\nBut yeah, awesome stuff. Send me a pull request when you're done and I'll put it in 2.0.0-BETA15.\n\nCoda Hale\nhttp://codahale.com\nOn Friday, July 29, 2011 at 3:11 PM, tomdz wrote:\n\nGreat, I'll create a pull request later today. Those rough edges you speak of, if you can give me a few suggestions, I can try to work them in, too.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/issues/54#issuecomment-1685757\n. This should be fixed by your big refactoring.\n. The development branch will always point to the version in active development. The master branch has the last released version, and its readme specifies BETA14.\n. For what it's worth, I've been running this code in production for about nine months and haven't seen any appreciable memory leaks in that time. That said, I plan on overhauling this code because getLastGcInfo is wrong enough to make detailed statistics on GC duration, rate, and throughput pretty much unusable. I'll probably just be tracking per-GC run counts and cummulative durations.\n. I ended up rebasing this and doing a few manual fixes, but this is merged as of 3d9d39cdd6e8a78834646d362faedd33969bfac1.\n\nMany, many thanks for this.\n. Yes, I'm sorry -- I'm totally swamped with work stuff, but this is on my to-do list and I haven't forgotten about it.\n. So I'm pretty sure this has diverged to the point where trying to merge this would shred the commit history.\nWould you mind peeling out your dynamic metrics code into another pull request? I will merge with a quickness this time.\n. I can't merge this locally without a grip of conflicts, and I'm really hesitant to see what GitHub will do automatically. I hate to punt on this, but could you isolate the changes you made on a separate branch off of what's currently on development?\n. It might be easier to break this into two pull requests: one for the servlet binding, the other for the dynamic metric names.\n. Sold!\nThanks so much for the effort you've put into this.\n. My plan is to cut one today, yes.\n. Just pushed 2.0.0-BETA15-SNAPSHOT, and I think that's about as far as I'll get today. I'll try to get a release out tomorrow.\n. Awesome, thanks!\n. Looks good, thanks!\n. I'm curious \u2014 why do you want to serialize/deserialize metrics?\n. That seems like a pretty niche concern, to be honest. I get why you want to do that, but I don't see this making sense in the Metrics library.\n. Hmm. It looks like there's an exception thrown while trying to write out the value of the gauge. Jackson considers the field written despite the fact that something went wrong \u2014 perhaps a downstream IO error?\nIt might help to kick out a custom build with some debug logging associated with that exception handling \u2014 without knowing more about what that exception was, it's hard to say how we can handle this better. I haven't seen this in production on our machines, FWIW.\n. Do you still see this in production?\n. God, that's embarrassing. Thank you.\n. No, I'd actually forgotten to push the change to metrics. Fixed by 2a6fa77ca5afc76dfb5b4165e5e440e74d696666.\n. It looks like you're still working on this, but I'm curious \u2014 does this actually have any measurable benefits in terms of GC?\n. Yes, please resubmit, especially since this pull request doesn't contain your second commit.\n. Nice! Thanks for the patch!\n. Good catch. I'd prefer to keep the console reporting localized, but GraphiteReporter obviously needs to be en-us.\nI cherry-picked your GraphiteReporter patch as 9ab62e57ef26a9b62fc8fb60195b359be594784b.\nThanks!\n. Thanks for rebasing it, @neilprosser. I haven't forgotten about this, I just haven't had time to get around to processing it.\n. Yaaaaaay! Thank you!\n. You'll probably need to recompile your code.\n. It looks like there are conflicts with some recent changes -- if you fix those, I'll merge this.\n. I'm pretty much always open to patches, especially as I don't use GraphiteReporter myself.\n. So if this is just for internal tests for Metrics, I'd rather just use simplespec's built-in support for Mockito mocks.\n. The thread leak is fixed in e637dea33d323e7601cedf7f7c8ef7bb9c12e544 and 5f95b44ba2358114e6cf81dd6438ed6544aa4ec8 \u2014 meters had sprouted their own tick threads, which isn't necessary. I'll fix the build later.\n. Word.\n. The .md documents get rendered to HTML, thus the links.\n. I'm going to track this over on #178.\nMetrics 3.0 should have a good solution for this.\n. Sorry, I had no idea there was code on this issue. Yes, by all means.\n. So, a few things:\n- I'd rather keep the listener set in a CopyOnWriteArrayList than in a synchronized set.\n- I'd much, much rather send listeners notifications that metrics were added and removed and let them handle the rest. This simplifies a lot of the state tracking MetricsRegistry is doing in this patch.\n- I don't like AbstractPollingReporter. ConsoleReporter is strictly polling, MetricsServlet is not, JmxReporter is a hybrid, etc. It sugests a structure which doesn't exist.\n. Ah, gotcha -- this allows JmxReporter to skip the polling behavior. I get it now. Sold.\n. Thanks, Collin!\n. Excellent! Thanks!\n. Thanks!\n. You'll need to rebase this on the changes in #97. Specifically, JmxReporter no longer has a tick thread, and polling reporters should all descend from AbstractPollingReporter.\n. Thanks!\n. Hi! This is really good, but I'd much rather keep the two modules separate, if only to make it clearer to people which modules they should be using. (Ganglia is also much like Graphite but has its own module.)\nIf you'd like to add a metrics-opentsdb module I would gladly accept it.\n. I can't merge this, unfortunately -- maybe rebase on development?\n. Honestly, SBT fills up the PermGen even if your app doesn't have threads or state or anything of note.\nBack when I used SBT, I found that adding -Xmx512m -XX:MaxPermSize=256m -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled as JVM options made it work for much longer periods of time before barfing.\n(Also, running the tests in a forked JVM was more or less required, since SBT's default classloader can't find anything anywhere ever.)\nUnless you have some conclusive evidence that it's the thread pools, I'd prefer to leave this alone. Assuming anything about process lifecycles has always been a problem when it comes to making Metrics happy in single-process applications and application servers.\n. Calling Metrics.defaultRegistry().threadPools().shutdownThreadPools() should work. I can add a delegated method for that to MetricsRegistry, but adding shutdown hooks makes me nervous.\n. Gotcha, gotcha. Sorry -- it's late, and I'm not exactly sharp right now. Let me see what I can do.\n. So, according to the Runtime#addShutdownHook(Thread) docs:\n\nOnce the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an IllegalStateException to be thrown.\n\nWhich means unregistering while being called could well be awkward.\n. Sure, but if it's called during a normal shutdown, it'll throw an IllegalStateException.\nAlso, I'd imagine that the big culprit there is actually the JMX beans.\n. I'm just gonna merge this and deal with the repercussions in the morning. Too tired to make sense of the diff.\n. It might also be worthwhile to set fork := true in your .sbt file and see if that helps.\n. smfh\n. I had to do some advanced jiggery-pokery to merge this, but it's in. Thanks!\n. Hmm. How about 501 Not Implemented?\n. I'm OK with making getOrAdd() protected, but the reason for newMeter and newTimer having different logic is that it tries harder to not unnecessarily create duplicate timers or meters. The tick threads keep them around until you stop them, which can lead to memory leaks.\n. It went from creating the metric after checking to creating the metric before checking. I've got one more fix for this and it should be fine.\n. When getOrAdd is called, its metric parameter is already created. So newTimer went from this:\njava\nfinal Metric existingMetric = metrics.get(metricName);\nif (existingMetric == null) {\n    final TimerMetric metric = new TimerMetric(newMeterTickThreadPool(), durationUnit, rateUnit);\n    // etc\n}\nto (effectively) this:\njava\nfinal TimerMetric metric = new TimerMetric(newMeterTickThreadPool(), durationUnit, rateUnit);\nfinal Metric existingMetric = metrics.get(metricName);\nif (existingMetric == null) {\n    // etc.\n}\n. Ah well, so it did.\nsigh\nI really need to stop trying to read diffs on GitHub.\nSorry about that.\n. Glorious. Thank you.\n. Given @chids's massive overhaul of the reporters, this needs some work. If you rebase this and get the tests passing, I'll merge it.\n. This appears to have broken GangliaReporterTest. Please fix.\n. Thanks!\n. This actually ties into #91. What I'd prefer to see is the modification of the existing predicate system to include the idea of metric property names in addition to metric names.\n. Right now a MetricPredicate matches on MetricName instances, but this doesn't allow it to filter, say, everything but the one-minute rate of meters. We should expand MetricPredicate to also be able to match on the actual property name (e.g., oneMinuteRate) in addition to the MetricName.\n. I don't, sorry. This isn't a big issue for my team, so I don't have a lot of extra bandwidth to spend on it. (Naturally, if someone comes up with a nice fix, I'll merge it.)\n. This is covered by #178, broadly speaking, and is on the list for 3.0.0.\n. That sounds like the exact use case for JmxGauge. Let me know how it goes.\n. Awesome! Thank you so much!\n. I've extracted the test fixes into ab9b219b37382878ae8db5bee66f373d743914bc and 6d4ea4eb4692d3a383c4400e9d51a50708d8756e. If you'd like to re-submit your pull request for the JVM metrics (w/o the whitespace changes) I'd be happy to look at it.\n(In general, it's better to submit discrete pull requests. This one would be a lot easier to handle if it had been broken up into three: one for the JVM metrics, one for ConsoleReporter, and one for AbstractPollingReporterTest.)\n. Awesome, thanks!\n. Thanks!\n. Awesome, thanks!\n. Definitely not. Concurrency and reset operations don't play nicely.\n. This fix is in 2.0.0-SNAPSHOT. Would you do me a favor and verify that it works?\n. You can just add the OSS Sonatype snapshots repo to your project:\nxml\n    <repositories>\n        <repository>\n            <id>sonatype-nexus-snapshots</id>\n            <name>Sonatype Nexus Snapshots</name>\n            <url>http://oss.sonatype.org/content/repositories/snapshots</url>\n        </repository>\n    </repositories>\nThen just bump the version number of your Metrics dependencies to 2.0.0-SNAPSHOT.\n. Gotcha. Would you try again? You'll probably need to use mvn -U to make Maven update the snapshots.\n. Glad to hear it works. No worries about the Maven stuff. Hell is other people's build tools. ;)\n. You don't understand my art.\n. At some point, I can see this being useful, yes. The same mechanism might also be useful for rendering metrics, etc.\n. I'm hijacking this issue -- the plan for 3.0 is to separate the rendering of metrics out. This will simplify MetricsServlet as well as allowing for alternative formats.\n. I'm going to be traveling for the next few days, so I won't get around to this until then, but I will get around to this.\nLikewise for #149.\n. As with #149, this introduces a lot of changes late in the release cycle. I'll consider it for 2.1.x.\nThe one thing which worries me is the use of java.util.Timers. I've had more problems than successes with those.\n. So, given that I've had more bad production experiences with Timer than any other class I can think of, I'm going to close this.\nI've been thinking about the broader idea of listeners for metrics, which would allow you to effectively add an arbitrary callback for a given measurement:\njava\nnew TimerListener() {\n    @Override\n    public void onTiming(long elapsedTime, TimeUnit unit) {\n        if (unit.toMilliseconds(elapsedTime) > SLOW_THRESHOLD) {\n            LOG.warn(\"HOLY CRAP\");\n        }\n    }\n}\nIf that appeals, let me know.\n. I'm going to hold off on doing this until 2.0.0 is out. This is a big change, and I'd rather not introduce it so late in the release cycle.\n. Well, kind of. Metrics' current JMX stuff is ad-hoc enough that I'd like to extract it out into something less fragile. That may obviate this pull request.\n. This is definitely going to happen, but the JMX stuff is going to get a total overhaul in 3.0.\nI'll track this on #92.\n. Oh good lord.\n. Thanks!\n. One of the reasons I removed metrics-guava was because I didn't think it added enough value. We use Guava's cache functionality quite a bit, so I'm still interested in a solution, but this isn't it. I've added #167 to track that.\n. Sorry, this is way too big a dependency for something as simple as Graphite.\n. Yeah, I'm totally OK with making GraphiteReporter more extensible.\n. Oh, totally. I've never used the XML config for Ehcache, so I didn't even know about this.\n. Closed by #165.\n. Hmm. Will this affect remote querying? That is, will JMX clients need to do anything differently because of this?\nIf it's backwards compatible, I'll slot this for 2.1.0.\n. @ryantenney, do you think you could do this? I used Spring for about a week back in 2008.\n. @ryantenney I'm comfortable pushing new documentation for the current release as they come in, so whenever you'd like.\n. This should be fixed by #177.\nIf it isn't, comment here and I'll reopen.\n. Actually, that's indicating there's a NoMethodError thrown inside getContextPath. This sounds like you have a Tomcat problem.\n. The correct behavior would be for meter rates to have a unit (y-axis label) of requests/minute for that meter.\n. This should do it: 980c4c6c569ed9b3b618a6af9ef27c3f35126aa8.\n. Don't worry about it.\n. @ryantenney, this is all yours.\n. Actually, considering this a dupe of #162.\n. I'm definitely interested in this, but not until 3.0.\nI want to split Metrics into top-level, stable modules actively supported by someone with commit access to the repo (this will involve giving other people commit access), and \"contrib\" modules which are relatively unsupported or unproven modules.\n. The contrib module is now available, if you'd like to update this.\n. I'm definitely interested in this, but not until 3.0.\nI want to split Metrics into top-level, stable modules actively supported by someone with commit access to the repo (this will involve giving other people commit access), and \"contrib\" modules which are relatively unsupported or unproven modules.\n. The contrib module is now available, if you'd like to update this.\n. Given that you have a workaround, I'm going to go ahead and close this.\nThis should be made easier in 3.0, and I'll be tracking that in #179.\n. Closed in 1f8b7668955909fd541ef66436afa69e637821ea.\n. Dupe of #175.\n. It occurred to me a while ago that a metric could be modeled as a group of measurements, which are named values (e.g. p999=0.442s). This would require an overhaul of how the reporters work.\n. So far I think I'm the only person who wanted this, and I forget why.\n. I like the idea of tags, but at this point I'm firmly of the opinion that it's the reporter's responsibility to care about all that. Pushing the responsibility upstream to the metric names means that library reusability goes out the window (e.g., does InstrumentedHandler from metrics-jetty8 conform to your totally personalized tag folksonomy?).\n. Metrics is nothing like slf4j, though.\nAnd the reporters have the names to work with. You could implement your own tagging system on top of what currently exists. I need to bring back filters for reporters: one of those implementations could match against a common mapping of metric names to tag sets.\n. 3.0 definitely fixes this.\n. Hmm, I can't automatically merge this.\n. The parent of your commit is b17f1483a782192fbd3d50b61187796121d46eac, which is from 4 months ago.\nMetrics doesn't have a development branch any more -- just master.\n. Awesome, thanks.\n. Very cool, thanks.\nI'll have to add a TimeUnit to Clock though.\n. Oh, wait, no I won't. Awesome.\n. Also, InstrumentedHandler is OK. Jetty itself can use System.currentTimeMillis(), so I'd rather keep the clock constant when calculating those.\n. The error statements aren't too troublesome, but that trace definitely needed fixing. Thanks.\n. This broke the tests so I reverted it.\nIn the future, please run the tests with mvn clean test before submitting a pull request.\nAlso, please don't add main methods to classes in place of unit tests.\n. I'd prefer Slf4j over Apache Commons. It's what the rest of Metrics uses.\n. :(\n. This isn't Markdown, it's ReStructured Text.\nAnd the image is fine: http://metrics.codahale.com/getting-started/\n. I totally get why you want this, and I'm happy to provide it in a later version, but I'm not sure MetricsRegistry can withstand another constructor. I think this will make more sense in 3.0, since I'm planning to switch a lot of these accordion constructors over to builders.\nThe current plan is to kick 2.1.0 out the door soon and start work on 3.0, which will involve some big changes. Right before 3.0 ships, I'll release 2.1.1 with a bunch of deprecation warnings to help people migrate.\n. metrics-web is now in the contribs module.\n. This just clears the count (and the mean rate). It doesn't clear the EWMAs, and in order to clear all four atomically, you'll need a lock around clear and mark, which would radically increase the overhead of both meters and timers in concurrent usages.\n. They are time based, but marking the meter marks the EWMA. The EWMA output would literally be unchanged as per this patch.\nPlease spend more time reading the code.\nThe reason meter doesn't have a clear method is the overhead of locking to provide atomicity (or, minus the overhead, the indeterminism of clearing under concurrent operations).\n. Marking an event updates the EWMAs.\njava\n    public void mark(long n) {\n        count.addAndGet(n);\n        m1Rate.update(n);\n        m5Rate.update(n);\n        m15Rate.update(n);\n    }\n. Your patch adds this to Meter:\njava\n@Override\npublic void reset() {\n    count.set(0);\n}\nThis method does not reset the EWMAs. It resets the mean rate, but none of the EWMA rates.\nA #reset() method on Meter must also reset the EWMA rates such that those rates are automatically set to zero. I will not accept any #reset() method which doesn't do that.\nAs I've said, the difficulty in doing that is that you have to coordinate an atomic action across a set of variables. This requires more than a memory fence, it requires a lock. This would have an unacceptable impact on meter and timer performance. This is why, after two years of active development, Meter does not have a #clear() method.\n. That is indeed not OK.\n. Remove the changes to metrics-spring and I'll consider this.\n. This would need to be in the new contribs module instead of the main parent module.\n. Again, line endings.\n. Fixed by #219.\n. Fixed by #202, unless I'm missing something. 2.1.2 has this fix.\n. The difficulty here is that this change will be obviated by future refactorings on this branch. The code you're modifying will not exist in its current form in 3.0.\n. This will need to be rebased now that metrics-spring is in contribs.\n. I'm not sure what you mean by \"environment registry\". What would you put in it? What would you get out of it?\n. It's an interesting idea, but I think it's outside of the scope for Metrics.\n. Closed by #209.\n. I'd definitely accept a pull request for this.\n. #225 should fix this.\n. @mattbishop, I'll take a pull request, but given that I don't use OSGi it's not a priority of mine.\n. Did it get applied to master?\n. Ok, so this is good for 3.0.0, which should be out soon.\n. Probably a week or two.\nIf it's a big deal, I can push a point release.\n. 2.1.4-SNAPSHOT should be available. Please let me know if it works for you.\n. 2.1.4 is on its way to Central.\n. So, it turns out that OSGi bundles the entire package, which means duplicate versions of everything in metrics-core:com.yammer.metrics.reporting in metrics-ganglia, metrics-graphite, and metrics-servlet.\nI've backed out the OSGi support in 2.2.0-SNAPSHOT.\nYou'll have to wait for 3.0 for full OSGi support.\n. I have looked at that. In fact, that's what I shipped in 2.1.4.\nIt will not keep Maven Enforcer happy. I know that OSGi is OK with it, but shipping multiple copies of classes is bad for everyone else (including me).\nThis will have to wait until 3.0, because the only solution which works for everyone is to not split packages across modules.\n. I'm not accepting patches against the 2.x-maintenance branch unless they're serious bug fixes.\n. This will need to be rebased against master, since metrics-guice is now in contribs.\n. Awesome!\n. Meter#tick() is package-private, so you shouldn't be able to call it from a unit test. It's strictly an internal method and isn't part of the public API. Ping me about the unit test \u2014 I'd like to hear more about what you were trying to test and how the API could be more helpful.\n. Pretty sure this would be better fixed by #225.\n. It should be caching the PrintStream for each file. Trying to open the same file twice is exclusively due to the fact that the filenames aren't unique (because they don't incorporate the scope), no?\n. This doesn't take into account when the scope is null.\n. Thanks for the reminder \u2014 I don't get updates when commits get added to pull requests, for whatever reason, so I wasn't aware this had been fixed.\n. This still creates files in ./metrics-spring.\n. This doesn't merge cleanly, but it's also not broadly applicable to most usages of Metrics. Returning a constant value doesn't need much in the way of optimization.\n. I mean, it's optimizing the following code:\njava\nnew Gauge<Long>() {\n    @Override\n    public Long value() {\n        return 33;\n    }\n};\nYou're the first person to want to do this, so unless other people speak up about this I'm not going to add more complexity to Metrics.\n. I know.\nThe gauge is responsible for returning the most recent value. This is not the responsibility of the registry.\n. Ok, I'm not sure what problem you're trying to solve. The issue you're linking to seems unrelated to the code you're posting.\nIf you want a mutable gauge, make a mutable gauge in your own application. I will not accept this patch.\n. Because a gauge returns a value and a counter returns a count.\nYou may want to have these discussions on the mailing list instead of opening tickets.\n. Graphite support is in the contrib module because I don't support it. We don't use it at Yammer, so I don't have strong opinions about what it should do.\n. Awesome, thanks!\n. I've removed metrics-spring from the main Metrics repo. See this mailing list thread for details.\n. I've decided not to accept third-party modules into Metrics any more. Please see this mailing list thread for details.\n. I've decided not to accept third-party modules into Metrics. Please see this mailing list thread for details.\n. I've removed metrics-sigar from the main Metrics repo. See this mailing list thread for details.\n. As I said in #262, I'm currently carving the hell out of things for 3.0, but I'll try to fold this into the pending work for metrics servlet.\n. This is in for 3.0.\n. I've removed metrics-guice from the main Metrics repo. See this mailing list thread for details.\n. I'm not accepting any more modules for Metrics, sorry.\nSee this mailing list thread for details.\n. It does, actually. Creating a new DatagramSocket can throw a SocketException.\n. Fixed in 11603ba088a0f2d2f5cd3930b101b78096bf6e40.\n. That's definitely not the case. Feel free to check the code: https://github.com/codahale/metrics/blob/v2.1.3/metrics-core/src/main/java/com/yammer/metrics/core/Histogram.java.\n. Hmm. That would do it. Thanks for tracking it down. Would you mind opening another issue for that, @smarvik?\n. Indeed, while I'm not accepting third-party modules any more, I encourage you to release this yourself. I'll be adding links in the Metrics documentation to third-party libraries.\n. You'll need to create a MetricsRegistry instance and tie it to the GAE life cycle yourself. The default registry is scoped to the JVM's life cycle, which apparently GAE doesn't like.\n. Not in that regard, no.\n. I'd really rather not. You don't want another Counter implementation, you want a listener for counter actions. I can get behind the latter, but the former is definitely the long way 'round.\n. This PR is definitely dead, but I'll consider the feature for 3.0.\n. Metrics names are just dotted names in 3.0.\n. Really cool functionality, but I've been declining further modules for the main Metrics distribution. I suggest you run this as your own project. I'll be adding a section in the Metrics documentation with links to related libraries, and this should definitely be in it.\n. Right now there isn't one.\n. metrics-scala_2.9.1 is compatible with Scala 2.9.2.\nIf I were to upgrade it to 2.9.2, I would have no backwards compatibility guarantees.\n. You can exclude that dependency. I will not be supporting any other versions of Scala.\n. I'm currently carving the hell out of things for 3.0, but I'll try to fold this into the pending work for metrics servlet.\n. This sounds like something you could do with a reporter implementation.\n. Metrics 3.0 is switching to dotted names.\n. The point of the ThreadLocal was to eliminate thread contention for the cached buffer.\nI'd rather remove the buffer than add thread contention.\n. It wasn't to reduce contention or to cache the results, it was to cache the arrays to reduce GC pressure in extreme circumstances.\nLike I said, I'd rather just remove the array caching entirely than get bogged down in caching jiggery-pokery.\n. Fixed in 11603ba088a0f2d2f5cd3930b101b78096bf6e40.\n. I think #235 would be sufficient. I'd rather not have additional runtime configuration parameters.\n. It's not released yet, and I don't have a timeline for 3.0.0's release. Sorry.\n. Sorry, I don't have a roadmap.\n. While the log message is indeed scary, it's also inaccurate. Tomcat uses heuristics to match situations which look like memory leaks, and this is a false positive. If your application is undeployed, the class loader which retains a reference to ThreadLocalRandom becomes garbage, which means the ThreadLocalRandom class becomes garbage, which means the weak ref in the ThreadLocal points to null and gets removed.\nEven in a worst-case scenario, where Tomcat itself has a reference to ThreadLocalRandom and it never gets collected, it holds two objects and a few doubles. Interestingly enough, if you use Java 7 and ConcurrentSkipListMap, this is exactly what happens.\nSo the short fix for this would be for me to bump Metrics to Java 7. The long fix isn't worth spending time on.\n. Clearing metrics isn't atomic, no. The alternative is to synchronize all of the internal variables for all methods, which would kill performance.\n. This is intentional.\n. This won't be in 2.x, will be in 3.0.\nI don't do timelines, so I don't know when 3.0 will ship. Soon, one hopes.\n. GangliaReporter will be rewritten for 3.0.\n. No.\n. This is fixed on the metrics-3 branch.\n. Scala support is dropped for 3.0.\n. I will not be working on a wrapper, nor do I want to maintain one.\n. So far you're the only person to have asked for this. If it comes up again, I'll look into it.\n. I get these emails. This isn't a priority for me, and the API will be changing radically in 3.0.0.\n. I'll get around to it.\n. I've added these to 3.0.\n. Pretty sure this was fixed in 00886bb99d31a0ce4f5e9bf788d328b192d08783.\n. Why not just use the percentiles?\n. You might want to check out ExponentiallyDecayingSample. Its entire point is to provide responsive measurements of distribution. The sum of the measurements is not responsive for the same reason that the mean is not responsive \u2014 it's measured over the lifetime of the service.\n. See #289 for why I don't want to expose the sum.\n. I understand the problem, but the correct behavior for this is to remain \"stuck\". If there are no additional measurements, the distribution remains as it is.\n. master is on Jersey 1.13, and is compatible with Jersey 1.14.\n. 3.0 will allow you to register histograms created with arbitrary parameters.\n. I'm no longer working on 2.x-maintenance.\n. Absolutely. I like the change, I'm just trying to get 3.0.0 out the door.\n. I'll definitely get this fixed for 3.0.0, but not like this. I'll keep #294 open to remind me.\n. Oh, wow. Good catch.\n. I'm trying to move away from a bunch of statics. This is going the wrong direction.\n. 3.0 will remove all the static builders.\n. See #301.\n. I think this is a job for whatever storage or aggregation service you pipe your metrics into.\n. It's not released yet.\n. Tell me more about your use case. I'm curious how this would help you.\n. I'd recommend against trying to use mean durations in monitoring or alerting. Latency is very rarely normally distributed, making the mean a poor choice for centrality.\nGiven that the whole point of Metrics is to provide measurements of software processes which have high inferential value in terms of decision-making, I'd rather not enable the use of questionable metrics.\n. Like I said, this seems like a niche use case. I'm more tempted to remove public references to sums for Timers and Histograms than I am to further expose them. Sorry.\n. It's basically impossible for me to see what's changed, since your IDE has apparently changed all indentations from 4 spaces to 2. Please fix this.\n. Fixed in 2.2.0-SNAPSHOT.\nIt looks like there's no way to get OSGi to play nicely with split packages, so OSGi support will have to wait until 3.0.\n. That's what they all did. The problem was that maven-bundle-plugin merges the package across all dependencies, so metrics-graphite, -ganglia, and -servlet all included the classes from metrics-core.\nSo yeah, the solution is to not split packages across modules. (Which, admittedly, was a dumb oversight on my part.)\n. Why do you need to customize HealthCheckServlet?\n. This isn't really common enough for me to commit to a public API. Given how simple HealthCheckServlet is, I think you're better off just implementing your own.\n. Well, you're the first person to try to use it via an XML file, so I'm not surprised it doesn't work. It's definitely the lack of a no-arg constructor.\n. It already has a setter for the port. It extends SelectChannelConnector, and thus has all of SelectChannelConnector's methods.\n. This would require a fix for #334.\n. I'm not sure what the alternative is, besides throwing a different exception or allowing metrics of different types to have the same name.\n. That's the same thing as allowing metrics to have the same name. All of the reporters would have to change rather dramatically, most with negative consequences for the aggregation services they report to.\n. I understand. I'm still not going to do it. It would kind of solve your problem at the expense of making a lot of other people's lives harder.\n. For what it's worth, I'm dropping Scala support entirely for 3.0.\nIt's not something we use at Yammer, so this should free y'all up to cross-build to your hearts' desires.\n. All the static methods are going to be removed for this among other reasons.\n. Maven Central.\nhttp://repo1.maven.org/maven2/com/yammer/metrics/\n. The Guice module will be removed in 3.0.\n. I'll accept a pull request once metrics-3 has solidified a bit, but custom banners isn't a particularly compelling feature.\n. Not all metrics are clearable.\n. This will be fixed in 3.0.\n. 3.0 will feature a totally rewritten CSV reporter.\n. Really, this is a problem in GraphiteReporter and Graphite generally: it should be prefixing all metrics, including the JVM-specific ones.\n. This is already done for master (3.0). It can't be done for any 2.x releases.\n. I don't have one.\n. metrics-spring is removed in master. You'll have better luck with https://github.com/ryantenney/metrics-spring.\n. This will be fixed in 3.0.\n. I'm working on 3.0 right now, and a re-usable JSON layer will be a part of it. None of this will merge, though.\n. This pull request won't merge for 3.0, given all its API changes, but I've added LoggerReporter which does basically the same thing.\n. GraphiteReporter doesn't keep a connection open, which means this flag doesn't really exist.\nAlso, I'm not sure if you want your entire system failing health checks because your Graphite server went down.\n. Planning to totally rewrite GraphiteReporter for 3.0.\n. 3.0 gets rid of MetricName entirely, so this won't apply.\n. I know. I'm saying there won't be a 2.2.1 release with this fix in it.\n. 3.0 will have affordances for parallel health checks.\n. Just call MetricsRegistry#shutdown().\n. I'll keep this in mind for Metrics 3.0, which is on the metrics-3 branch and isn't really ready for collaboration yet. Thanks, though.\n. Current work is happening in the metrics-3 branch, where CsvReporter doesn't exist yet. Once that's closer to being ready, I'll merge it into master.\nThe new reporter structure will make this problem very very easy to solve.\n. This affects InstrumentedEhcacheFactory, InstrumentedResourceMethodDispatchAdapter, WebappMetricsFilter, and others.\n. @toelen That's one option, but I'm a little wary of using mutable static collections, since I'm trying to avoid dipping into crazy lifecycle issues (servlet listeners, etc.).\nThe big reason the default registry went away is because of the mess it produces in an application server: every web application thinks it's the only one to use the default registry, which plays merry hell with JMX reporting, etc.\nOne option I've been kicking around has been to use JNDI to publish a registry. That would in theory solve the issue, but JNDI seems like a big bag of snakes.\n. Also, add in rate units and duration units.\n. Depends on #340.\n. So, there's definitely a conceptual problem here: what determines when a batch gauge should be read? A polling reporter can just call a method on the registry before polling, but what about event listeners, like JmxReporter?\nI think MetricSet may be as close to good as we'll get.\n. Yes, @kjax, I get why batch gauges are useful. That's why this ticket is open.\nBut like I said, I haven't come up with a coherent way of providing a read barrier with a single update point across multiple reporter calls and event listeners. I do accept patches, though.\n. @kjax, I've added both CachedGauge and DerivativeGauge to master. I think that's generally useful, and the combination of the two should allow batch gauge behavior: create a CachedGauge which queries the database and returns the aggregate info, then create DerivativeGauge instances to expose various elements of that.\n. Pretty sure this counts as done at this point. I've scanned the docs and can't find any obvious bogies.\n. Fixed in 98240580717a3654db92f806d88e7e6bddb4196b.\n. Except for that fact that counters can be decremented as well as incremented, so sending it with a positive slope would cause rrdtool to treat a decrement as an overflow.\n. This does raise the question, though: should Counter allow decrements? Should a decrementing counter just be a gauge backed by an AtomicLong?\n. Well hell, if you've got it sending data to Ganglia, would you mind making a pull request for whatever changes are required?\n. I didn't mean to be snippy: just that Ganglia's documentation is, uh, not good and stuff like this is usually easier given a tweakable end-to-end system.\nA Meter has a count, a mean rate, and the three EWMA rates. All five measurements are reported in GangliaReporter here:\nhttps://github.com/codahale/metrics/blob/master/metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java#L110-L114\n. @hadrienk, I'm still unsure as to how to proceed here.\n. Excellent, thanks.\n. Once I get it to the point where I think people should start depending on it, I'll cut a release. 3.0.0 final won't happen until after a few betas and RCs, but I don't have a timeline on that.\n. I have no idea what's required to run in GAE. It's not a platform I use or support.\n. Depends on #334.\n. @depsypher No, that's just some old-fashioned version incompatibility.\n. Yes, builders would provide defaults.\nNo, TimeUnit's instance names are all in English.\n. Oh wow, awesome! Two things, though:\n1. I'm not able to merge this automatically. You'll need to rebase it.\n2. The API I had in mind was something like this:\njava\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\n                                                .outputTo(System.err)\n                                                .filter(MetricFilter.ALL)\n                                                .convertRatesTo(TimeUnit.MINUTES)\n                                                .convertDurationsTo(TimeUnit.SECONDS)\n                                                .build();\nreporter.start(1, TimeUnit.SECONDS); // etc\nI like Guava's approach to fluent builders, where the construction of the builder is limited to a static method which has all the required properties as arguments. To my eyes, it's cleaner as well as being an easier API to extend later without breaking things.\nAnd yeah, the constructors should be made private. They're primarily an artifact of me just getting the damn things rewritten.\nSeriously, thank you so much.\n. Hmm. Still can't merge, and it's pulled in a bunch of my commits as well, which is odd.\n. Hey, just to let you know: I had some time today, so I went ahead and added the builders myself. I appreciate all the work you put into this, though, and the fact you responded to my pre-coffee grouchiness on #361 with a lovely pull request still kind of amazes me. It was a concrete reminder to me to a) be less cranky and b) write better tickets so folks like you can just pick them up and knock them off.\nMaintaining an OSS project on my own can be kind of stressful, but it's folks like you that make this worthwhile. Thanks.\n. metrics-spring has been removed from Metrics. You should be using this.\n. See #370. I am the wrong person to contact about this. I do not maintain metrics-spring. I cannot help. Please create an issue on Ryan's project and stop creating issues here.\n. Good catch! Thanks!\n. Worth noting that for anything which doesn't compile under 1.6 which is annotated with @Override, the fix is to remove the annotation, not to remove the method. Otherwise, it'll compile under 1.6 but not 1.7.\n(c.f. 48bad4dfb5ff6fa954fbdbaff98d0ea5bdef0154)\n. Why not just add a listener to do this?\n``` java\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\npublic class ForgettingListener implements MetricRegistryListener {\n    private static class RemovalTask implements Runnable {\n        private final MetricRegistry registry;\n        private final String name;\n    private RemovalTask(MetricRegistry registry, String name) {\n        this.registry = registry;\n        this.name = name;\n    }\n\n    @Override\n    public void run() {\n        registry.remove(name);\n    }\n}\n\nprivate final ScheduledExecutorService executorService;\nprivate final MetricRegistry registry;\nprivate final long lifetime;\nprivate final TimeUnit lifetimeUnit;\n\npublic ForgettingListener(ScheduledExecutorService executorService,\n                          MetricRegistry registry,\n                          long lifetime,\n                          TimeUnit lifetimeUnit) {\n    this.executorService = executorService;\n    this.registry = registry;\n    this.lifetime = lifetime;\n    this.lifetimeUnit = lifetimeUnit;\n}\n\n@Override\npublic void onGaugeAdded(String name, Gauge<?> gauge) {\n    executorService.schedule(new RemovalTask(registry, name), lifetime, lifetimeUnit);\n}\n\n@Override\npublic void onGaugeRemoved(String name) {\n}\n\n@Override\npublic void onCounterAdded(String name, Counter counter) {\n    executorService.schedule(new RemovalTask(registry, name), lifetime, lifetimeUnit);\n}\n\n@Override\npublic void onCounterRemoved(String name) {\n}\n\n@Override\npublic void onHistogramAdded(String name, Histogram histogram) {\n    executorService.schedule(new RemovalTask(registry, name), lifetime, lifetimeUnit);\n}\n\n@Override\npublic void onHistogramRemoved(String name) {\n}\n\n@Override\npublic void onMeterAdded(String name, Meter meter) {\n    executorService.schedule(new RemovalTask(registry, name), lifetime, lifetimeUnit);\n}\n\n@Override\npublic void onMeterRemoved(String name) {\n}\n\n@Override\npublic void onTimerAdded(String name, Timer timer) {\n    executorService.schedule(new RemovalTask(registry, name), lifetime, lifetimeUnit);\n}\n\n@Override\npublic void onTimerRemoved(String name) {\n}\n\n}\n``\n. I'd rather find ways of makingMetricRegistry` extensible without depending so heavily on subclassing.\n. Ok, I hadn't realized you just wanted to prune old metrics. That's a different use case.\nI'd rather not make the MetricBuilder API public. That's really just an optimization. Would it make sense to allow you to specify the ConcurrentMap implementation to use with a registry? That would allow you to build a map which removed unused entries and would keep the surface area of the API lower.\n. That sounds useful, but I've been trying to keep the main project lean (read: only stuff I can afford to support). You should make that your own project and announce it on the mailing list. I'm sure others would be interested.\n. I think we're better off over at #373.\n. Two small problems, but otherwise I'm totally OK with this. Thanks!\n. So, just realized two things:\n1. I forgot MetricFilter needed a Metric, so the entry set would have made more sense.\n2. I just moved all the tests around, which makes this PR not merge.\nRather than make you do this again, I just added 2a7fde3fe317344808f8ba2dc507b102b30f31bb to close this.\nThanks for the patch!\n. You're correct. Fixed in 63f01ba1a033c9173dd76d3e1e40b03fde50f969. Again, thanks!\n. Please only open issues for feature requests or bug reports.\nIf you're having trouble using Metrics, feel free to ask the mailing list for help.\n. Ok, so I really really want this functionality, but you've based your patch on a version of master from last year.\n. Sorry for the extra trouble \u2014\u00a0can you re-do this against the com.codahale.metrics namespace?\n. Ah, I didn't notice this was on the 2.x branch. I'm not accepting new changes for 2.x.\n. I'm not supporting 2.x anymore, no.\n. Because, like most branches, I'd forgotten to delete it.\nIt's now deleted.\n. Dropwizard 0.7.0 will be using Metrics 3, yeah.\n. Besides the one nit I picked, this is an awesome idea. Thanks!\n. No, it just hides it, since it refers to a line which changed in a more recent commit:\n\nGitHub is neat. :)\n. Excellent stuff, thank you!\n. Hmm. I like this.\n. I'd rather use String.format and %n on the constant to produce a consistent, platform-specific set of line endings.\n. The arithmetic mean is a really bad measurement for timers;\u00a0latency is almost always exponentially distributed. Timer and Histogram expose quantiles \u2014 median, 95th percentile, etc. \u2014 which are going to be far more actionable. Chart those instead.\n. 1. Everything on Snapshot is calculated on the values in the Reservoir when the snapshot was taken.\n2. Timer#getCount() will return a count of the number of measurements taken since the process started.\n. Pass it to the timer or histogram via its constructor.\n. Why not just use MetricRegistry#register(String, Metric)?\n. MetricSet extends Metric. It works just fine.\n. I appreciate the work you put into this, but Java serialization is an absolute maintenance nightmare. Aggregation is the responsibility of a separate layer \u2014 not Metrics \u2014\u00a0and whatever reporting needs to be done should make use of Metrics's reporting architecture.\n. This is awesome. I hadn't heard of JMH, and it resolves my long-standing complaint about how hard it is to produce a contended environment in Caliper. That said, I'd rather wait until JMH is available in Maven Central to drop Caliper.\n. I appreciate the input, @ceetav, but I think a basic locking model is the best approach. I'd accept a pull request for a non-blocking implementation, but for now I'd rather favor correctness over performance.\n. Fast is always nice, but broken's never welcome. At some point in the future I may sit down and figure out how to fix the various memory barriers of my old design, but it's not critical.\n. After some thought, wouldn't a post-array-write sequence be sufficient (i.e., just keep filledPosition)?\nSo the writers would have the following steps:\n1. Increment Ci = Ca + 1.\n2. Set V[Ci mod N].\n3. Increment Cb.\nAnd readers would have the following steps:\n1. Copy V[0..Cb].\nThe second sequence is only incremented after the value is added, which solves the phantom read issue.\nDoes that make sense?\n. Woof. I've reverted back to the synchronized version.\nI'd like to wait to see if anyone actually reports performance problems in real-world usage before spending more time on this. Thanks for all your help.\n. No, this is an intentional design choice.\n. Basically just keeping responsibilities separate \u2014\u00a0a metric only has a name when it's in a registry.\nIf I went the extra step, I could extract interfaces for the various metric types and then extend those with named versions and then create delegating implementations of them and have the various factory methods in MetricRegistry return those.\nBut that's a lot of work which would complicate the hell out of the API, all for a feature which few people have asked for.\n. I have basically no idea how OSGi works, so if you'd like to submit a pull request to resolve this I'd be happy to accept it.\n. I appreciate it, but JSONP's a pretty ugly hack.\nWhat's your use case?\n. This is a common request, and one I keep turning down. Resettable metrics mean a whole other layer of mutability which ends up producing a lot of weird edge cases.\n. I'd accept a pull request to add that.\n. You don't actually need to test it using Ganglia: look at the existing unit tests.\n. I'm open to this, but I'd like to hear about use cases before extracting an interface.\n. Interesting. It doesn't look like I can cleanly apply this, though.\n. I mean it doesn't cleanly apply against master:\n\n. You might have had the misfortune to pull for the five or so minutes\nmaven-release had horked up master during the last release, I don't know.\nOn Wed, May 29, 2013 at 3:53 PM, Pablo Fernandez\nnotifications@github.comwrote:\n\nDid something change? I had my remotes screwed up\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/402#issuecomment-18651524\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Awesome, thanks.\n. Security isn't the responsibility of AdminServlet, it's the responsibility of how it's deployed.\nc.f. http://docs.oracle.com/cd/E19798-01/821-1841/bncbk/index.html\nSo you should either add an auth-constraint section to your web.xml or otherwise figure out how to add a similar constraint in your container.\n. If you have a question, ask the mailing list. Don't just open a random issue.\n. Good catch, thanks.\n. Awesome, thanks.\n. Hmm. GitHub can't merge this.\n. Thanks!\n. Hah!\n. In addition, it'd be lovely to format the code similarly to the rest of Metrics: braces on the same lines as the control keyword, etc.\n. I'd rather get the metric from the same MetricRegistry and check its\ncount.\nOn Sun, Jun 2, 2013 at 3:30 PM, Pablo Fernandez notifications@github.comwrote:\n\nThanks for the review! I'll make those changes later today.\nIf I understood correctly you prefer to add getters for the counts (not\nthe counters) instead of marking the fields package private?\nThanks.\nOn Sun, Jun 2, 2013 at 4:02 PM, Coda Hale notifications@github.com\nwrote:\n\nIn addition, it'd be lovely to format the code similarly to the rest of\nMetrics: braces on the same lines as the control keyword, etc.\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/411#issuecomment-18811675\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/411#issuecomment-18815340\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Ok, another set of nits picks and I think we're good.\n. I like the idea of meters for creation and termination and a counter for\nthe current state.\nOn Monday, June 3, 2013, Pablo Fernandez wrote:\n\nAgreed on all of those, so in general you want s/counters/meters/ right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/411#issuecomment-18845441\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Looks good. I'm saving it for 3.1.0, though, so this PR will be open for a bit longer but I haven't forgotten about it.\n. This has not been forgotten, I just haven't had time to do any programming lately.\n. Sure. Go ahead and add the docs to this PR, if you like.\n. Yeah, I don't know what that's about.\nI'm not sure what circumstances would produce an empty set of parameters\nlike that.\nOn Mon, Jun 3, 2013 at 4:50 PM, Pablo Fernandez notifications@github.comwrote:\n\nI've seen this test fail a couple of times, a failure example:\nRunning com.codahale.metrics.ScheduledReporterTest\nTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.189 sec <<< FAILURE!\npollsPeriodically(com.codahale.metrics.ScheduledReporterTest)  Time elapsed: 0.189 sec  <<< FAILURE!\norg.mockito.exceptions.verification.junit.ArgumentsAreDifferent:\nArgument(s) are different! Wanted:\nscheduledReporter.report(\n    {gauge=Mock for Gauge, hashCode: 421134813},\n    {counter=Mock for Counter, hashCode: 2054185226},\n    {histogram=Mock for Histogram, hashCode: 1743984210},\n    {meter=Mock for Meter, hashCode: 138319567},\n    {timer=Mock for Timer, hashCode: 1159656515}\n);\n-> at com.codahale.metrics.ScheduledReporterTest.pollsPeriodically(ScheduledReporterTest.java:56)\nActual invocation has different arguments:\nscheduledReporter.report(\n);\n-> at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:86)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:513)\nat com.codahale.metrics.ScheduledReporterTest.pollsPeriodically(ScheduledReporterTest.java:56)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/413\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Known in that I've seen it before, but let's keep this issue open.\nOn Monday, June 3, 2013, Pablo Fernandez wrote:\n\nIt's a known issue then?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/413#issuecomment-18883148\n.\n\n\nCoda Hale\nhttp://codahale.com\n. So increasing the timeout would probably work?\nOn Mon, Jun 3, 2013 at 8:34 PM, ceetav notifications@github.com wrote:\n\nAlso watched it a few times and found that this message happens due to\noverloaded report() and unkown delay with invocation or registry access\nfor getGauges/getCounters/getHistograms/getMeters/getTimers.\nMockito behaviour is following :\n1. ScheduledReporter has report() and report(gauges,counters, histograms,\nmeters, timers) which are both instrumented and counted by mockito wtih\nspy().\n2. During verification if there is no calls of report(...) with expected\nsignature, mockito tries to check similar oneshttps://github.com/mockito/mockito/blob/master/src/org/mockito/internal/verification/checkers/MissingInvocationChecker.javaand those complains about invocations for no args overloaded version of\nreport() .\n Invocations Result of times verify  3 report(...) + 3 report()\ntooManyActualInvocations  2 report(...) + 3 report() OK  1 report(...) +\n2 report() tooLittleActualInvocations  0 report(...) + 0 report()\nwantedButNotInvoked  0 report(...) + 1 report() argumentsAreDifferent\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/413#issuecomment-18887385\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Ok, hopefully that'll help.\nOn Mon, Jun 3, 2013 at 11:55 PM, ceetav notifications@github.com wrote:\n\nGoing from (period=100; timeout=250) to (period=200; timeout=500) makes it\nsmooth on my local PC.\nGuessing, what the rootcase is, as it also disappears when give different\nnames for report() and report(...)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/413#issuecomment-18892180\n.\n\n\nCoda Hale\nhttp://codahale.com\n. Excellent work, @ceetav. Closed by 5d772a5fe17d9517e73492b5fca640c1c572fb51.\n. Good call. Thanks!\n. You should be subclassing these and passing them your own registries.\n. Could we not convert the line endings?\n. Yeah, good point. I'd skipped this when implementing for simplicity's sake.\n. Makes sense. Do you want to get a PR together to fix this?\n. Whoops! Thanks for the fix.\n. This doesn't pass tests (compilation error), plus I really don't want to depend on sun.* classes unless absolutely necessary.\n. If we really need to depend on those, I'd rather add a metrics-jvm-extra so folks who want metrics provided via public APIs aren't stuck depending on Oracle internals.\n. Thanks! Could you add a test for this?\n. Excellent. Thanks!\n. It's not part of the API I want to support. I'd rather figure out how to support your use case than just make everything public and hope for the best.\n. This isn't something I'd like to support, at least for 3.x.\n. Use MetricRegistry#register.\n. They are grouped: in the metric set. If you want them to have a common\nprefix, use MetricRegistry#register and pass in your prefix. If you don't\ncare about the prefix, use #registerAll.\nOn Fri, Jun 21, 2013 at 1:22 PM, Diwaker Gupta notifications@github.comwrote:\n\nUse MetricRegistry#register.\n@codahale https://github.com/codahale Yes, that's what I ended up\ndoing. But are you opposed to grouping together JVM metrics under a \"jvm\"\nprefix? If so, I'd be curious as to why. Grouping related metrics seems\nlike a good default. Besides, removing the prefix broke a bunch of our\ngraphite dashboards (we expected breakages when upgrading major versions so\nthis isn't a big deal) and will likely impact other Metrics users as well.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/429#issuecomment-19838583\n.\n\n\nCoda Hale\nhttp://codahale.com\n. I'm a little confused about what you're trying to do.\nWhy not just pass the metric instances in?\n. Right, I get that you want to do that. I'm not sure why you want to do that.\n. If I see this pattern more often, I'll re-open this issue.\n. Thanks!\n. Thanks!\n. Sorry about that. Thanks for the error report.\n. Thanks!\n. Looks good, except for two things:\n1. Don't worry about calling super or this for the no-arg constructors.\n2. Metrics uses four spaces for indentation, and final local variables when possible.\n. Looks good, but I can't automatically merge it. You'll need to merge in master (which has my context listener changes) and resolve any conflicts.\n. Awesome, thanks!\n. Excellent find, thank you.\n. I'd rather the default for this not be violating the same-origin policy.\nCan you make this an option?\n. Awesome, thanks!\n. What issue were you seeing?\n. Thanks!\n. As far as I know, the JARs in Maven Central are just JARs. I'm not sure why you're having trouble re-packaging them, but so far you're the only person to bring this up. Can you investigate further?\n. Thanks!\n. I'd prefer not, no.\n. I'd rather not combine metric collection and failure detection, to be honest. Those seem like very separate concerns.\n. Can you add this to metrics-jetty8 as well?\n. The only thing that changed between those two versions is that 3.0.1 defaults to using UTF-8; 3.0.0-RC1 defaults to using the system's default character set.\nIf your Graphite server can't handle UTF-8, you can specify a different character set.\nUnfortunately, Graphite's behavior w.r.t. UTF-8 changes depending on minor releases and configuration, so there isn't a stable client I can write which will reliably work.\n. If you're programmatically creating an appender, you will need to call activateOptions yourself. Log4j normally does for you if you're using the log4j.xml or .properties configurations, which is what 99% of people use.\n. You'll need to declare metricsAppender as either an AppenderSkeleton or (better yet) an InstrumentedAppender, since activateOptions doesn't exist in the Appender interface.\n. I just merged #457, which fixes this.\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. It is not, no.\n. Fixed by #457 instead.\n. It's an internal-only class. I didn't write it; I'm not going to support it. You can either depend on a JSR166y backport or wait until Java 8 is released.\n. Gauge is an interface, so you don't extend it, you implement it.\nAnd no, this wouldn't be accepted even as a pull request. The metric types are fixed and not designed for extension.\n. It's for internal usage only.\nIf Java had the option to make it non-exportable outside of the com.codahale.metrics namespace, I'd do that.\nLikewise, if Mockito had the ability to mock final classes, I'd make classes final which I didn't intend people to extend.\nSorry for the confusion.\n. Yeah, I read that.\nGil's comments boil down to \"you're all doing it wrong and should use my stuff instead\". If you find that convincing, go for it, but it's not an actionable issue here.\n. The metric types are not intended to be extended.\n. Er. Which is it?\n. This should be name(underlying.getClass()).\n. This shouldn't be synchronized, as nothing else in MetricRegistry uses this lock.\n. I think we're probably better off getting an Iterator<String> from metrics.keySet() and using Iterator#remove().\n. I'd really like to wrap this in Collections.unmodifiableMap.\n. Shouldn't this just be implementing the ExecutorService interface and delegating?\n. I've always been a fan of delegate or underlying. :wink: \n. Use MetricRegistry#name instead.\n. I think this should be a meter of executions instead.\n. I really dislike package-visible fields being used in tests.\n. Pretty sure you mean submitted.inc().\n. Make this final and since we know how many tasks we're dealing with, make sure we're creating a list with the right capacity.\n. Make this final.\n. Make this final.\n. I like terminated more than finished.\nAlso, should these be meters?\n. This test needs a tear down method to shut down these threads.\n. These threads need to get shut down.\n. It's probably easier to wrap it in an ExecutorService and then use that to\nshut it down.\nOn Mon, Jun 3, 2013 at 8:03 AM, Pablo Fernandez notifications@github.comwrote:\n\nIn\nmetrics-core/src/test/java/com/codahale/metrics/InstrumentedThreadFactoryTest.java:\n\n\npublic void reportsThreadInformation() throws Exception {\nRunnable fastOne = new FastRunnable();\nRunnable slowOne = new SlowRunnable();\nCounter created = registry.counter(\"factory.created\");\nCounter running = registry.counter(\"factory.running\");\nCounter finished = registry.counter(\"factory.finished\");\n  +\nThread fastThread = instrumentedFactory.newThread(fastOne);\nThread slowThread = instrumentedFactory.newThread(slowOne);\n  +\nassertThat(created.getCount()).isEqualTo(2);\nassertThat(running.getCount()).isEqualTo(0);\nassertThat(finished.getCount()).isEqualTo(0);\n  +\nfastThread.start();\nslowThread.start();\n\n\nIs calling interrupt on them in a tearDown method enough? should I mark\nthem as daemon too?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/411/files#r4501420\n.\n\n\nCoda Hale\nhttp://codahale.com\n. ",
    "pkirsanov": "I probably described it not correctly, result of\ncount / ( Clock.nanoTime - startTime )\nis Long\nso before passing it to perNanosecond and converting to Double it is calculated and result is Long, so, for example:\n5 / ( 1000000 - 0 ) will be 0, but expected\n5.0 / ( 1000000 - 0 ) to be 5.0000000000000004e-06\nagain, maybe 2.8 treats everything within Rate.perNanosecond( *** ) as Double\njust to make sure...\n. great, different in scala 2.7.7, though\nscala> def p(d:Double) = println(d)\np: (Double)Unit\nscala> p(1L/2L)\n0.0\n. ",
    "utsengar": "Fixed, was doing it wrong.\n<dependency>\n    <groupId>com.yammer</groupId>\n    <artifactId>metrics_2.8.1</artifactId>\n    <version>2.0.0-BETA5</version>\n</dependency>\nClosing.\n. ",
    "moonpolysoft": "Put back the original method signatures on Metrics.java to avoid breakage of deployed code.\n. ",
    "jebl01": "Ok, Thank you.\nThis pull request was actually only a preparation for an other planned request. I have added a req/interval counter alongside the others, which will give you a req/sec counter if you use an interval of one sec (req/sec is something we need to feed our \"realtime\" graphing monitors displayed on eight 40\" LCD's).\nI guess this has to be done some other way then, maybe by  scheduling a separate job for this for each meter.\nWe are currently evaluating the Metrics lib in favor to our own (much similar). But to feel confident we need the per sec counter :-)\nGreat work btw!\n/Jesper\nOn 15 apr 2011, at 05:59, codahalereply@reply.github.com wrote:\n\nFixed in 37f88c1bb867e6bc8e971d3107bd4051365c6c9d instead, by removing the second factory method and disallowing arbitrary intervals.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1004979\n. Yes, but it will still be a mean value based on the last 1,5,15 minutes, not an actual snapshot of the latest one second, right!\nThat's why I needed the interval to be more than an implementation detail.\nBut as a said, a second scheduled job with a rate of one second can be used instead.\n\n/Jesper\nOn 15 apr 2011, at 07:49, codahalereply@reply.github.com wrote:\n\nI think you may be misunderstanding what the interval is vs. what the rate unit is.\nThe interval is the interval between ticks for the exponentially weighted moving averages. This is no longer a public value because it's an implementation detail, not a meaningful external value.\nThe rate unit is the unit of time that events are averaged over (for example requests/second). If you want req/sec, create a meter with a rate unit of TimeUnit.SECONDS and mark it each time you process a request. The resulting mean, 1-minute, 5-minute, and 15-minute rates will all be in requests per second.\n\nCoda Hale\nhttp://codahale.com\nOn Thursday, April 14, 2011 at 10:40 PM, jebl01 wrote: \n\nOk, Thank you.\nThis pull request was actually only a preparation for an other planned request. I have added a req/interval counter alongside the others, which will give you a req/sec counter if you use an interval of one sec (req/sec is something we need to feed our \"realtime\" graphing monitors displayed on eight 40\" LCD's).\nI guess this has to be done some other way then, maybe by scheduling a separate job for this for each meter.\nWe are currently evaluating the Metrics lib in favor to our own (much similar). But to feel confident we need the per sec counter :-)\nGreat work btw!\n/Jesper\nOn 15 apr 2011, at 05:59, codahalereply@reply.github.com wrote:\n\nFixed in 37f88c1bb867e6bc8e971d3107bd4051365c6c9d instead, by removing the second factory method and disallowing arbitrary intervals.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1004979\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1005273\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/6#issuecomment-1005288\n. Ok, I will push a commit to fix this in this pr!\n. I'm not sure I understand, could you elaborate on the \"idea of metric property names in addition to metric names\"...\n. \n",
    "waywardmonkeys": "You're welcome! I enabled spell checking in Textmate and it has been the bane of me. I can't help but submit fixes.\n. Embarrassing for me too. How'd I not catch that?\n. Yeah, that bothered me as well.\n. I fixed this in my pull request attached to issue #32.\n. Might as well hit the README too :)\n. I am a bad bad man. :(\n. It looks to me like this thread is gone ...\n. I will do some more testing then. Some early testing showed that the remaining issues I had were things I fixed here, but I grew frustrated after the amount of time I spent with sbt on this.  I'm running with a PermGen of 512M and everything goes to hell after about 2.5 runs of test in a row with classloaders being held around by running threads.\n. You already have a shutdown hook for the JmxReporter. I was changing things so that the shutdown hook could be removed (because that shutdown hook holds a ref to the classloader and is then stored permanently in the runtime and not cleaned up).\nI didn't add any new ones...\n. If this is in the next -BETA18-SNAPSHOT, I'll do some more testing and try to get this killed off ... there should probably be some code shared between this and the MetricsServletContextListener, but I don't use that code so can't test it readily.\nThanks for re-opening and considering. :)\n. Right, but I call Metrics.shutdown() at the end of a test suite, outside of a normal JVM shutdown cycle. (Same time as I then also kill off Akka and other stuff.)\nI have to shutdown all threads running from my tests (and anything hold onto the classloader) before things return back to SBT and everything gets lost forever in the PermGen.\n. Right, but no need to manually shut things down during a normal shutdown. Should I add some documentation or something?\nI used a BETA18-SNAPSHOT and shut the JMX stuff down. That helped. But YourKit still clearly showed the classloader being held around by the threads and the shutdown hook.\n. I thought so too! But I've been clearly told that that doesn't actually fork the TEST, only anything that uses test:run (which running a test, does not).\n. I did some more testing today. This patch does indeed help bring things under control. (Coupled with fixing similar things in other stuff...)\n. ",
    "chids": "Uhm, did you read the diff? ;)\nThis pull request is adding sbt-eclipsify support, it's not baking the Eclipse files into the project - even though I can see that my issue description might have given that impression.\n. Hey @waywardmonkeys and @ryankennedy are you still interested in this and if so what's your opinion about the possible solution?\n. Paging @codahale for an opinion on whether to rebase this proposal against master or let it rot in the dark branch corner.\n. :+1: in general. A reflection: The above API indicates that one TimerListener be bound to one Timer (since there's no metadata about the Timer passed to onTiming), we could also pass the Timer instance along and/or the MetricName. I have no pros/cons atm, just an observation I made.\n. @coda what's your take on the general idea and the latest proposed solution? Thumbs up/down?\n. I started a stub on this but got stuck due to some reporter refactorings that aren't done yet. Hopefully they'll be in BETA19 after which I'll try to finish up and present a possible solution.\n. I took a stab at it by exposing the check status as an attribute and in addition exposing a runCheck() method that returns the result as a string (\"ok\" or the failure message).\nIf you check out this branch you can try it out by running the main method below (or something similar) and connect with jconsole or any other JMX tooling:\njava\npublic static void main(String[] args) throws InterruptedException {\n    HealthCheckRegistry h = new HealthCheckRegistry();\n    MetricsRegistry m = new MetricsRegistry();\n    JmxReporter.startDefault(m, h);\n    CounterMetric counter = m.newCounter(JmxReporter.class, \"hepp\");\n    h.register(new HealthCheck(JmxReporter.class, \"check\") {\n        private boolean ok = false; \n        @Override\n        public Result check() throws Exception {\n            ok = !ok;\n            return ok ? Result.healthy(): Result.unhealthy(\"Gah!\");\n        }});\n    while(true) {\n        counter.inc();\n        Thread.sleep(500);\n    }\n}\nAlso, this probably breaks some of the other modules so try it inside metrics-core\n. $ /usr/sbin/sendmail -t << EOF\n\nto: @codahale \nfrom: @chids\nsubject: Rebase to allow merge?\nEOF\n. Ah, sorry it's been around for a while, I should have cleaned up the history. Thanks.\n. Closing this to see if I can't produce something with a cleaner history.\n. Thanks\n. Yep, but does this patch actually change the behaviour for adding Timer/Meters? I at least thought I only removed duplication (I'm not in front of a computer right now).\n\n/m\u00e5rten.\nOn 17 nov 2011, at 23:57, Coda Halereply@reply.github.com wrote:\n\nI'm OK with making getOrAdd() protected, but the reason for newMeter and newTimer having different logic is that it tries harder to not unnecessarily create duplicate timers or meters. The tick threads keep them around until you stop them, which can lead to memory leaks.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/112#issuecomment-2783345\n. Either I'm way too tired or we're not reading the same diff ;) Since I didn't touch/reorder the line creating instance I fail to see how that could be the case\n\nOn 18 nov 2011, at 00:17, Coda Halereply@reply.github.com wrote:\n\nIt went from creating the metric after checking to creating the metric before checking. I've got one more fix for this and it should be fine.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/112#issuecomment-2783552\n. The check (line 285 to 287 in the diff) is untouched and thus performed before getOrAdd and before creating the metric instance.\n\nI noticed now however that my patch caused the check to be carried out twice. Once in newXYZ (before creating the metric) and once in getOrAdd (when the metric have been created).\nOn 18 nov 2011, at 00:36, Coda Halereply@reply.github.com wrote:\n\nWhen getOrAdd is called, its metric parameter is already created. So newTimer went from this:\njava\nfinal Metric existingMetric = metrics.get(metricName);\nif (existingMetric == null) {\n   final TimerMetric metric = new TimerMetric(newMeterTickThreadPool(), durationUnit, rateUnit);\n   // etc\n}\nto (effectively) this:\njava\nfinal TimerMetric metric = new TimerMetric(newMeterTickThreadPool(), durationUnit, rateUnit);\nfinal Metric existingMetric = metrics.get(metricName);\nif (existingMetric == null) {\n   // etc.\n}\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/112#issuecomment-2783699\n. No worries. You really had me staring down those lines of code trying to figure out what I'd missed :D\n\nOn 18 nov 2011, at 02:07, Coda Halereply@reply.github.com wrote:\n\nAh well, so it did.\nsigh\nI really need to stop trying to read diffs on GitHub.\nSorry about that.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/112#issuecomment-2784481\n. I'm not familiar with the code base enough to tell whether Clock ought to be used in ExponentiallyDecayingSample as well.\n. Found some more, related, stuff to do here. Will re-open from a branch.\n. While contemplating on this (without being able to come up with a solution) I did an attempt to make MetricPredicate implement MetricsProcessor which enables predicates to work with typed metrics and choose a subset of types to filter, see this commit:\nhttps://github.com/chids/metrics/commit/776a09c372ae3af71e315925619db49d5c5c94e2\n\n@coda do you have any more concrete ideas on how to expand predicates to filter on properties?\n. No worries and you probably want to take a closer look at the changes in #149 before merging it.\n/m\u00e5rten.\nOn 27 jan 2012, at 05:58, Coda Halereply@reply.github.com wrote:\n\nI'm going to be traveling for the next few days, so I won't get around to this until then, but I will get around to this.\nLikewise for #149.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/148#issuecomment-3682045\n. Gotcha. Overall I think the implementation is fairly isolated and you have to explicitly call the new Timer.time(Callable<T>, Timeout) to use it.\n\nHowever I dove into java.util.Timer and noticed it starts a thread in its constructor which might not be desirable, but I guess I could make the instantiation of the java.util.Timer lazy in which case any potential problems with this will only bite those that are actually using it - that or replace java.util.Timer with something else completely.\n. Check, but you're fine with the change per se?\n. fyi: @codahale\nI've been playing with this back and forth, finally settled on chids/metrics@2b7e7a2e32c05a4d66c8cacc4be8c12301f848e6 to serve as input in the discussion.\nThe best way to grasp it is probably to have a look at what it did to CsvReporter and its test.\nPersonally I don't like that...\n- ...\"extracting\" a measurement isn't typed (Gauges return anything which turns typing into a generics-shit-show)\n- ...including all measurements (which I consider the default) is inherently the slowest since this is loop based\n. No worries, moved the Tempo-DB reporter here.\n. @wouterdb I don't think will get included, see this email, in which case you're better of hosting it in your own repo and announcing the reporter to the list (I'm certain it'll be of interest to a few people).\n. Makes sense. Do you want me to create a PR against the 5.0-development branch instead?. The Travis build failed  on io.dropwizard.metrics5.jvm.CpuTimeClockTest.cpuTimeClock(CpuTimeClockTest.java:17) for both 4e1e164 and c747ccd due to...\nExpecting:\n  <1.521299482153E12>\nto be close to:\n  <1.521299482361E12>\nby less than <200.0> but difference was <208.0>.\n...so I winged it \ud83d\udc49 57ed131.. Why does VirtualMachineMetrics have to implement Metric?\n. Throwing an exception feels a bit harsh, why not just do nothing instead?\nOr explore the possibility to add MetricsProcessor.processVM to have all processors be able to handle VM metrics?\n. ",
    "smanek": "Ah, sorry about the crappy diff!\nAll nighter, and I wasn't paying attention to my IDE. Next one will be better ;-)\n. sorry - forgot to add a file. I shouldn't be allowed to do pull requests after drinking. I'll repoen properly in a minute. \n. Yep (we're now on beta 18). Still very rare, but consistently 2-3 get logged per day (out of 10s of thousands of times of getting metrics over http per day).\nIf no one else is seeing this you can just close this issue - it doesn't have any real negative impact for us, and the code in Metrics looked fine.\nScreenshot of our internal exception aggregation tool: https://skitch.com/e-smanek/ge6gu/can-not-write-text-value-expecting-field-name-greplin-exception-catcher\n. Cool, thanks!\n. ",
    "abramsm": "Whoops, I should have checked here first but I went ahead and made a GangliaReporter.  The pull request is in the queue...\n. My fault.  I'll rebase and resubmit soon.\nMatt\nOn Nov 10, 2011, at 3:48 PM, Coda Halereply@reply.github.com wrote:\n\nI can't merge this, unfortunately -- maybe rebase on development?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/104#issuecomment-2700897\n. closing this request to replace it with correct version.\n. No problem.  Sorry for the conflicts.\n\nOn Dec 4, 2011, at 4:56 PM, Coda Halereply@reply.github.com wrote:\n\nThanks!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/130#issuecomment-3009243\n. \n",
    "ryankennedy": "Piggybacking on this, it would be nice to have the following:\n1) Dynamic thresholds like: \"exceeds the p99\".\n2) The ability to grab the counters, meters, histograms and timers instrumented within the call stack resulting from the timer block to facilitate in logging the slow request.\n. Guessing you meant @ryantenney. \ud83d\ude04 \n. It might be good to pull either/both this and #854 as Google Cloud Platform supports collectd with Compute Engine, which is relatively easy to get up and running with Dropwizard. I can try to engage some folks at Google if it would be helpful.\n. ",
    "neilprosser": "Not to fling too much at this issue but perhaps a way to potentially turn those metrics with thresholds into healthchecks which can be considered with the others. If it should be a separate issue I'll create one.\n. Thanks for the comment @javasoze. I'd forgotten about this pull request!\nI've updated the pull request to bring it inline with the current development branch.\n@codahale - are you interested in this or should I close it?\n. ",
    "otterley": "Whoops, wrong repo. :)\n. ",
    "tomdz": "Not sure how you do multiple pull requests from the same fork, so I instead added two additional things to the pull request:\n- Changes to allow for dynamic metrics (not associated to a specific class) - this is useful for e.g. metrics for individual sql statements (see https://github.com/ning/jdbi-metrics)\n- Moved the jetty dependency in metrics-servlet into test scope to not leak it into projects that don't use jetty\n. Can't update the commit range in this pull request anymore, so I'm going to close it and create a new one.\n. I'd be happy to help with this. I was thinking that it should be possible to move the static stuff into a few or even one class (e.g. Metrics) to maintain backwards compatibility/the simplicity of the non-guice API, and everything else internally could just be instances talking to instances.\n. I have an initial version of a mostly-no-statics in https://github.com/tomdz/metrics/tree/no-statics. What do you think, makes sense ?\n. Great, I'll create a pull request later today. Those rough edges you speak of, if you can give me a few suggestions, I can try to work them in, too.\n. Sure thing.\n. Will do. I'll loose my commit history but it is not really that interesting anyways :)\n. No, thank you for this awesome library!\nBtw, any chance you could cut a BETA15 with all these changes ? :)\n. Sweet, thx !\n. You seem to bind the same mbean multiple times in the same VM, from what it looks like unit tests ? The mbean server is a VM-level singleton, so any mbeans registered as part of your test will stay around even after the test is done unless they are explicitly de-registered.\nI'm not sure what metrics can do in this case except replace the existing mbean, i.e. catch the {{InstanceAlreadyExistsException}} and de-register the mbean under that name before registering the (new) mbean.\n. ",
    "hgschmie": "Any chance to get this merged? I am using jdbi-metrics (which uses the dynamic code) and it would be great to use an officially released version of metrics with these patches applied.\n. Thanks Coda, no worries. Right now, I am using a homebrew-tagged version, otherwise Maven would complain when we try to tag our stuff.\n. ",
    "adamv": "I'd be in favor of this, as it would be great to be able to change class names without having to put in tickets to ops to change metric names.\n. ",
    "rkrol": "I've just tried Metrics with GraphiteExporter (2.0.0-BETA18 from maven central repository) and get the same problem :\n02/01/2012 05:49:56 :: invalid line received from client 127.0.0.1:53249, ignoring\nThis error message appears for each metrics with a space in its name like :\njvm.memory.memory_pool_usages.CMS Old Gen 0.30 1325512196\njvm.memory.memory_pool_usages.Survivor Space 0.03 1325512196\n...\nI'm not already familiar with Metrics sources but I will try to find some time to send you a fix.\n. ",
    "cburroughs": "I want to calculate latency percentiles by day/user/query-type (say to a public facing website), and then sort,pivot etc them.  10s of thousands of metrics is probably too many (if nothing else it would render jconsole useless), and all requests from the same user are not routed through the same front-tier server anyway.  Instead I'd like to post-process  log files and calculate the metrics then, and that requires ser/deser of the metrics to store then in the log munching system for analysis.\n. If I went with the mixin approach would you accept said mixins in a separate module?\n. Could I get a review?\n. If I resubmitted just the \"Allow JMX to poke at an arbitrary percentile\" part without the \"shove yet more data into reporters and explode ganglia part\", would that be cool?  Or do you want everything to wait on #178?\n. Sanitize eating numbers was from copying an upstream bug: https://github.com/ganglia/monitor-core/commit/18791030943292b4cec1a20e89e80565dad68be3#commitcomment-731415\n. I think there are two similar kinds of control people would like:\n (A) Filter metrics (I want this Counter, but not this Meter)\n (B) Filter what Coda called measurements of metrics (I only want the 95th, but not 75th percentile).\nI agree both would be useful, but I think all we need for (A) most use cases (ie not arbitrarily complicated predicates) could be satisfied by giving Metrics a severity/importance/thing-like-a-log-level.  I think that could be done with less invasive surgery than would be needed for (B).\n. FWIW This is near the top of my 3.0 wishlist. Rational:\n- To filter things in internal applications we currently end names with things like JMX_ONLY and then have a blacklist.  This is ugly and brittle.\n- I'm not sure what the right thing is for other external uses.  Currently for Cassandra by default would emit something around 1.5k metrics/node (https://issues.apache.org/jira/browse/CASSANDRA-4430), which is too much.  A significant chunk of this is due to per connection dynamically named metrics (\"bytes streams between nodes A and B), which is a really cool idea, but not something to keep around for a year.   I'm currently looking at long blacklist in a config file.\n-  ( Less important) I also get several internal requests to be able to control what you call measurements (report the 90th but not 95th percentile or what not).  I think trying to add 99.99th percentile was the genesis of this.\nThere are several (from hacky to possibly over general) options that would get me everything I need:\n- enableInExternalSinks boolean\n- Metric priority/\"log\"-level <-- probably the sweet spot\n- tags!\nif it's helpful I can take a stab at your favourite approach for 3.0.\n. I agree that pushing as much down to the reporter as possible is good, but they need something to work with.  Ridiculous analogy : would the slf4j api be better if it eliminated log levels and make that log4j's problem.\n. Just trying to be explicit, is the problem the warning, or is it actually leaking inside a container?\n. I have not been able to find a link to the survey.  What is the path forward for the removed module, specifically metircs-ganglia?  Is the v2-style ganglia integration acceptable?\n. ",
    "ciamac": "I was taking metrics of events that happen 100K+ times/sec, so any memory allocation that is per event is measurable. It would also be nice to also get rid of the memory allocation in the concurrent skip list used in the biased histogram, but that seemed much harder.\nBTW, I'm not working on this anymore, the checkin is complete. However, I did notice that github seemed to transform it into a large number of commits (when only really a handful of lines are added), so let me know if it would be helpful for me to resubmit the patch.\n\nhttp://moallemi.com/ciamac\nOn Sep 8, 2011, at 7:07 PM, Coda Hale wrote:\n\nIt looks like you're still working on this, but I'm curious \u2014 does this actually have any measurable benefits in terms of GC?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/71#issuecomment-2046168\n. \n",
    "timmolter": "I had this issue too, but a different class. It was a dependency version conflict.\n. ",
    "dinomite": "New pull request: https://github.com/codahale/metrics/pull/82\n. 'ang on a minute\u2014I've got a better idea.\n. I'm actually using it for some tests outside of Metrics...but turns out today I'm going about it in a different fashion.  I think you're right about using Mockito mocks, though; I wouldn't be opposed to deleting this.\n. @codahale Kudos for being all over this like a donkey on waffle\u2014I filed it mostly as a reminder to myself to fix it later!\n. ",
    "ntolia": "Looks like the thread is still there. It has just been moved to AbstractPollingReporter. If you look at the constructor, you will see that it creates a new Executors.newSingleThreadScheduledExecutor().\nOne option would be to move the executor creation to start(). In theory it is a simple change but, in practice, it impacts a lot of the subclasses.\nAlso, one of the other issues I did report (lack of stop()) has been addressed by the introduction of shutdown(). However, I did notice that once a reporter has been shutdown(), it cannot be started back again. I can fix this by recreating the executor service in start().\n. Is there any chance this patch will be accepted? We would appreciate it.\n. We find being able to monitor cache statistics quite useful but don't necessarily need the InstrumentednCache approach implemented in the related pull request. Internally, we have the equivalent of a monitorCache() function that simply constructs a new Gauge around each of the relevant cache statistics. The disadvantage of this is that you cannot time cache.get() invocations but that was acceptable for us.\n. ",
    "collinvandyck": "I noticed some issues after I issued the pull request. Should be all done modifying this pull request.\n. Thanks for the feedback. I'll get you an update in the near future.\n. Made the modifications, except for those about the AbstractPollingReporter - I'm a little confused. \nMetricsServlet doesn't fall into this category or the type hierarchy. When it needs to render its metrics, doesn't it simply retrieve them from the MetricsRegistry on request? JmxReporter used to be polling. This patch is all about removing that behavior so that it doesn't need to poll so that the MBeanServer is notified as metrics are created. That's why I added the intermediary AbstractPollingReporter - I understood the GraphiteReporter, GangliaReporter, and ConsoleReporter to be those which periodically blarted metrics out. \n. ",
    "papaben": "Ok, fair enough. Glad you like it. I'm on to another project, so I can't get to it right away. I'll close this pull request and open the new one when I get back to it.\n. Hi Rrao,\nCool! So, if you're going to use the work we've done, I'd appreciate it if you submitted the pull request through box. If you are going to start from scratch, then don't feel any obligation to go through us.\nThanks,\n- Ben\n. ",
    "rrao-opower": "Hi asheepapart,\n     We (opower inc) use opentsdb as well and would like to use your changes. However, I was thinking furthering that by pushing OpenTSDBReporter into its own module as suggested by Codahale. I was thinking of apply your changes to a freshly forked branch from codahale and then creating a new module on top.  Would that be ok with you ? Do you want me to in turn submit a pull request to box:metrics or would rather I submit to codahale:master directly ? (codahale development doesn't appear to exist at the moment). \n. ",
    "Newtopian": "Sorry about the formatting of the code... I should have been more careful and think of disabling the auto format on save events before I send the changes to you.\n. agreed, I have submitted a new pull request with just the remaining artifact (JVM memory values)  Also took care to follow your code formatting so not to cause spurious diff entries.\nThanks for the advice and sorry for the trouble .^_^'\n. restarted from the current head, cleaned up the whitespace for the JVM update\n. ",
    "oconnor0": "This is in com.yammer.metrics.reporting.MetricsServlet - since I didn't make that clear.\n. ",
    "amir20": "Would this be as simple as adding Resettable interface with this in Meter?\n@Override\n    public void reset() {\n        count.set(0);\n    }\nI would be more than happy to do this and send you a pull request. It is some what messing up our counts. :) \n. Should fix #143. \n. I felt clearing the EWMAs was not needed because their time based anyway, right? \nMy definition for last minutes exponential mean rate was for it to still show a minute ago even if something had been resetted in this time period.  So I felt clearing the EWMAs was not needed as they would exponentially be cleared as time passed. My assumption could be wrong though. \nAgain this is just how I was using Meter. Let me know if my assumption is flawed.\n. Codahale, \nThere is something I am not understanding. I have looked at the code more to completely understand how tick() works. Meter's tick() calls the EWMA tick() methods. Looking at the implementation suggests that this has nothing to do with mark(). If so, EWMA rate should approach near zero because double instantRate = count / interval; will always be zero. \nIs this not correct? If correct, then in time all EWMAs will approach zero as well. \n. Marking Meter calls EWMA.mark() which does \npublic void update(long n) {\n        uncounted.addAndGet(n);\n    }\nwhich then gets used as final long count = uncounted.getAndSet(0);. If uncounted is already 0 then tick() will slowly approach near 0. mark() doesn't have to be called for tick() to be called and therefore it will update rate at every interval. \n. codahale, calm down. I am not saying it shouldn't behave as you say or that you are wrong. \n1. It seems we are discussing  different things. I am saying not setting EWMA to zero is ok because it will become zero with time anyway. I think you were saying that this is not the case. So I am trying to validate this first. Since scheduler calls tick() on every interval and tick() will decay to 0 then I think it would. \n2. Then, if above is true,  I propose that it is ok for them to approach to zero with time. Are you saying this is not OK? If you saying this then I understand. \n. If there was an AtomicDouble implemented then I would say let's use that with compareAndSet(oldRate, newRate) to only update the rate if it has not been changed. So in other words, if rate got reset while doing the calculation, then ignore. \nBut since that doesn't exist, I am out of ideas. We could create our own AtomicDouble with help of Double#doubleToLongBits(double) but I feel that is over complicating the solution. \nIs this something I should to try? If not then, thanks for sharing your ideas so far. \n. ",
    "stampy88": "I could really use this feature also, and be happy to do it as well.\n. ",
    "smougenot": "IMO there is a huge difference between API provides something and coders use it.\nIf for some use cases a user need the reset : just indicate the risks.\nUse case : \n- test cases in a project using Metrics.\n. ",
    "chrbayer84": "Agree with smougenot. I just need this for a test case. Call the method __reset() or hide it in an implementation method so that the user needs to cast to get to it or the like. No one should call this in production.\n. ",
    "aryaKetan": "If I am using a scheduled reporter to flush out metrics to a persistent storage like Opentsdb or graphite, then I need to reset metrics , otherwise my counts will always include historical event-counts. \nHow do I solve for that without reset Metrics ??\n. ",
    "costimuraru": "+1 to what @aryaKetan said\n. Google Guava has the AtomicDouble.\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/util/concurrent/AtomicDouble.html\n. ",
    "ryantenney": "Timer and Meter both use exponentially weighted moving averages and histograms with exponentially decaying reservoirs to create a bias toward more recent data, thereby making it unnecessary to ever reset the metrics.\n\nA histogram with an exponentially decaying reservoir produces quantiles which are representative of (roughly) the last five minutes of data. It does so by using a forward-decaying priority reservoir with an exponential weighting towards newer data.\n. @mohit-gupta For the scenario you describe it sounds like you should be using a timer with a SlidingTimeWindowReservoir.\n. Thank you!\n. @codahale I'd be happy to. Whats your timetable for 2.1.0? I'll aim to get it in before then.\n. @clakech I hadn't considered that use case and I'm afraid it cannot be accomplished with this module. My goal was to allow the use of Metrics annotations in Spring with the least effort (and XML) possible. For greater flexibility, I'd recommend you use AOP directly.\n\nRegarding the documentation, I'll make some time this week to improve it.\n. The problem is actually with the XML namespace beans, as I omitted the schemaLocation for the spring-beans xsd.\nxsi:schemaLocation=\"\n    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.yammer.com/schema/metrics http://www.yammer.com/schema/metrics/metrics.xsd\">\nThe XML in the manual was intended as an example of the XML the should be added to your Spring application's existing applicationContext.xml.  If it is added as a separate file, it will not have any effect.\n. When I wrote this, I actually had ruled out the possibility of this error occurring...  Is healthAsHTML the method that you have annotated with @Timed?  Could you give me some more information about the class that this method belongs to?  It seems to implement an interface, does that interface define the healthAsHTML method?\n. Thanks!  I'll run some tests to see if I can replicate this issue.\n. Good news, I was able to reproduce this problem!  I'll look into whether it is possible to fix this, but in the meantime, you can avoid this issue by annotating the implementation of healthAsHTML in the class HealthCheckImpl, instead of annotating the method in the interface HealthCheck. (see https://gist.github.com/1935505 )\n. Right now, if you're calling GraphiteReporter.enable(long period, TimeUnit unit, String host, int port), it tries to use the default MetricsRegistry, which is not the same as the one created by this module.  The MetricsRegistry created by this module is made available as a candidate for autowiring, so you can create a class like the one below and create it as a Spring bean:\n```\npublic class EnableGraphiteReporter {\n@Autowired\nMetricsRegistry metricsRegistry;\n\n@PostConstruct\npublic void init() {\n    /* pass metricsRegistry into GraphiteReporter.enable(), like so: */\n    GraphiteReporter.enable(metricsRegistry, 1, TimeUnit.MINUTE, \"graphite-server\", 8080);\n}\n\n}\n``\n. I spent some time playing with the Guice module, and it seems that it also does not recognize annotations on interfaces.  I'll put in a patch to prevent the NullPointerExceptions, but I think that the behavior should remain consistent with that of the Guice module.\n. This is currently possible by callingallMetrics()on the registry, which returns aMap`:\n@Test\npublic void measuresGets() throws Exception {\n    cache.get(\"woo\");\n    Timer gets = (Timer) Metrics.defaultRegistry().allMetrics().get(\n            new MetricName(Cache.class, \"get\", \"test-config\")\n    );\n    assertThat(gets.count(), is(1L));\n}\n. Sorry about that, didn't see that issue!\n. Lots of demand for this, will aim to get this in v4.\n. Going to follow the approach outlined in #837\n. @bentatham Sounds good.\n. Yea I debated that too, but since both of the predefined clocks return nanoseconds, so I figured that part of the Clock.tick() contract was that it return ns.\n. Trust me, I would too!  Regrettably, Spring uses JCL/Apache Commons Logging, so I think it makes sense to stick with that.\n. That absolutely makes sense.  If there's anything I can do to help with 3.0, please let me know.\n. Reset is a nonstarter.\n. As long as the metrics-spring jar is on your classpath this shouldn't be an issue. The spring.schemas file (https://github.com/codahale/metrics/blob/master/metrics-spring/src/main/resources/META-INF/spring.schemas) tells spring where to find the xsd.\nIf it is causing problems I imagine we could add the xsd to the metrics docs at http://metrics.codahale.com/schema/metrics/metrics.xsd, since it's doubtful that Yammer would want to add it to their site.\n. Heads up, this pull request contains changes besides the addition of statsd, you need to rebase.\nhttps://github.com/codahale/metrics/pull/230/files\n. At first I had considered creating a schema and bean definition parser for each reporter, but I couldn't bear the thought of it.  There are about 240 lines of code in this commit to create <metrics:graphite-reporter />, which could otherwise be accomplished with a couple lines of Java (which is the approach I've used in my app)\n@Configuration\npublic class GraphiteReporterConfiguration {\n    @Bean\n    public GraphiteReporter createGraphiteReporter() {\n        GraphiteReporter reporter = new GraphiteReporter(\u2026);\n        reporter.start(1, TimeUnit.MINUTES);\n        return reporter;\n    }\n}\nThat having been said, I want XML config for reporters, but only if it is generic (think <metrics:reporter class=\"..GraphiteReporter\" />).  A major change is expected for 3.0 (https://github.com/codahale/metrics/pull/216), which changes reporters to use builders instead of lengthly public constructors or overloaded enable(\u2026) methods.  This should make it easier for us to implement generic reporter xml config.\nAs for the AOP-related classes in this pull request, I think they should be in a different package, maybe ..metrics.spring.aop?  Also I'm moderately concerned about the potential performance impact of calling the metric name factory with every invocation (not that an alternative is forthcoming), and I'm not so sure about the class name ConfigurableMethodInvocationMetricNameFactory!\n. I do like XML config, and I don't typically suggest using Java @Configuration, but I don't think it's possible to create and start a 'push' reporter using XML config alone. You can instantiate a reporter bean, but there's no way to call start(). Since enable is a void method, it is almost certainly impossible to use it as a factory method (it would work if the method returned an instance of the reporter):\n<!-- almost certainly doesn't work -->\n<bean class=\"..GraphiteReporter\" factory-method=\"enable\" c:period=\"1\" c:unit=\"MINUTES\" c:port=\"2003\" c:host=\"\u2026\" />\nThe purpose of these custom elements is to do things that are inconvenient or not otherwise possible with Spring XML. One possibility would be to define short names for known reporters, so for a graphite reporter you could do <metrics:reporter type=\"graphite\" />, but for a custom reporter you could do <metrics:reporter class=\"..CustomReporter\" />.\nIt would be helpful to have the AOP stuff in a separate pull request. Any attempt to address the possible performance issues involves making compromises, so maybe we should leave it as is. Could you also provide example XML config for it?\n. +1\n. I don't believe the 2.x branch is active anymore and I'm reasonably certain this would break binary compatibility, which pretty much rules out a point release and would require it to be released as 2.2\n. @arunh Metrics Guice was forked and I'm sure these guys will be happy to help: https://github.com/palominolabs/metrics-guice\n. This happens if the files META-INF/spring.handlers or META-INF/spring.schemas aren't present in the jar. If you're using the maven-shade-plugin you'll need to add resource transformers to concatenate these files:\nxml\n  <configuration>\n    <transformers>\n      <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n        <resource>META-INF/spring.handlers</resource>\n      </transformer>\n      <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n        <resource>META-INF/spring.schemas</resource>\n      </transformer>\n    </transformers>\n  </configuration>\nSee: http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html#AppendingTransformer\n. Change the line\nhttp://www.springframework.org/schema/context/spring-context-3.1.xsd\nto\nhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\nAs it is that line is causing a parser error so it never gets to the metrics xsd.\n. Hi @ceetav, if you feel like submitting a pull request it would be well received! Thanks!\n. This is great! Thanks so much!\n. This may sound pedantic, but I'm wondering whether this belongs in core. It absolutely looks like a valuable addition, I just want to make sure it goes to the right module.\n. Good enough for me!\n. @ceetav Can you share some information about this issue with me, or put together a pull request?\n. Thanks, I'll take a look at this!\n. The error is package sun.jvmstat.monitor does not exist\n[ERROR] /home/travis/build/codahale/metrics/metrics-jvm/src/main/java/com/codahale/metrics/jvm/jvmstat/providers/JvmStatsProvider.java:[5,27] package sun.jvmstat.monitor does not exist\n. I'm letting feature requests pile up so I can determine whether there is sufficient demand and also so I can decide which ones I ultimately want to include. This one has definitely crossed the threshold for demand and I decided to include it, but I'm waiting on some feedback in #573 to see if it requires any changes.\n. @hancockks The better approach would be to copy JmxReporter into your own codebase and modifying the ObjectName generation. Some variation of this PR will make it into 3.1.\n. Without adding a dependency on Atmosphere, the best I can come up with is verifying that the state.getRequest() returns an object of type Request, which would effectively ignore all AtmosphereRequest objects.\npatch\nindex 56805cd..5d52315 100644\n--- a/metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java\n+++ b/metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedHandler.java\n@@ -150,10 +150,12 @@\n             @Override\n             public void onComplete(AsyncEvent event) throws IOException {\n                 final AsyncContextState state = (AsyncContextState) event.getAsyncContext();\n-                final Request request = (Request) state.getRequest();\n-                updateResponses(request);\n-                if (!state.getHttpChannelState().isDispatched()) {\n-                    activeSuspended.dec();\n+                if (state.getRequest() instanceof Request) {\n+                    final Request request = (Request) state.getRequest();\n+                    updateResponses(request);\n+                    if (!state.getHttpChannelState().isDispatched()) {\n+                        activeSuspended.dec();\n+                    }\n                 }\n             }\n         };\n. That's why we don't use 'average', we use exponentially weighted moving averages and exponentially decaying reservoirs to bias the average toward the more recent values.\nSee http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf (PDF link) and https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n. I'm sorry, I don't understand what this issue is. Please clarify and reopen.\n. Jackson 1 is contained in the package org.codehaus.jackson, and Jackson 2 is contained in package com.fasterxml.jackson, so versions 1.8.3 and 2.2.3 can coexist without conflicts.\n. We'll be sure to upgrade to the latest versions immediately prior to a 3.1.0 release.\n. I'm intrigued, though how are the nonstandard rates extracted from the meter? All the reporters are hardcoded to report 1m, 5m and 15m rates.\n. Something like this will be supported in v4\n. Resolved in #579\n. Closed by e44d1033e5af22c0acc4e463f46d7a459cf4938c\n. Is this issue still occurring?  I haven't heard any other reports of this and have been unable to reproduce.\n. The ScheduledReporter (superclass of the GraphiteReporter) uses a single-threaded scheduled executor, making that impossible. The only way that could be possible is if you're reusing the Graphite instance.\n. Custom metric types are not supported.\n. Modifying the Timer Context to prohibit multiple updates in a thread-safe manner would require synchronization or a volatile field, either of which would dramatically increase the overhead of a call to close/stop. It would be better to refactor your code to avoid duplicate calls.\n. I believe that accessing the healthchecks from Angular is an exceptional case, and that the primary use of this is to quickly determine whether the server is healthy or not based on the response http status code, so removing the 500 would defeat the purpose.\n. I'll leave it to Coda to decide whether to merge this, but I will suggest that you change NotImplementedException to UnsupportedOperationException, as it isn't good to depend on the sun package.\n. The admin servlet isn't intended to be extensible. It is better to create a servlet of your own.\n. Merged #491. Thanks!\n. We'll be sure to upgrade to the latest versions immediately prior to a 3.1.0 release.\n. New metric types were not being considered for the 3.1 release, but since custom metric types seem to be a very popular request, I'm going to try to accommodate that in 4.0. Also, while the concept of 'resetting' a metric is another of the most popular requests, it is in conflict with the project's ethos.\nIn short, while I certainly appreciate @squito's contribution, I don't believe this pull request will be merged.\n. @joschi Done! Any other PRs or issues you'd like to see resolved prior to the release?\n. If I'm not mistaken, this makes it compatible with both Jetty 9.0 and 9.1?\n. Things have been a bit hectic so I hadn't had a chance to review this. Thanks @joschi!\n. This is the patch you're looking for. I expect to release it as 3.1.0 in July.\n. Assuming you're using maven, I'd advise cloning the git repository, mvn install it into your local maven repo and change your project's dependency on all metrics modules to version 3.1.0-SNAPSHOT.\n. Not as far as I can tell.\n. I'd absolutely consider improvements to this. Something like this?\n``` patch\ndiff --git a/metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java b/metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java\nindex 3334594..a5a0f73 100644\n--- a/metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java\n+++ b/metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadStatesGaugeSet.java\n@@ -1,5 +1,6 @@\n package com.codahale.metrics.jvm;\n+import com.codahale.metrics.CachedGauge;\n import com.codahale.metrics.Gauge;\n import com.codahale.metrics.Metric;\n import com.codahale.metrics.MetricSet;\n@@ -11,6 +12,7 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\nimport static com.codahale.metrics.MetricRegistry.name;\n@@ -44,12 +46,19 @@ public class ThreadStatesGaugeSet implements MetricSet {\n     public Map getMetrics() {\n         final Map gauges = new HashMap();\n\nfinal CachedGauge cachedStates = new CachedGauge(1, TimeUnit.MINUTES) {\n@Override\nprotected ThreadInfo[] loadValue() {\nreturn threads.getThreadInfo(threads.getAllThreadIds());\n}\n};\n+\n         for (final Thread.State state : Thread.State.values()) {\n             gauges.put(name(state.toString().toLowerCase(), \"count\"),\n                        new Gauge() {\n                            @Override\n                            public Object getValue() {\nreturn getThreadCount(state);\n\nreturn getThreadCount(cachedStates.getValue(), state);\n                            }\n                        });\n         }\n@@ -78,8 +87,7 @@ public class ThreadStatesGaugeSet implements MetricSet {\n         return Collections.unmodifiableMap(gauges);\n     }\n\n\nprivate int getThreadCount(Thread.State state) {\n\nfinal ThreadInfo[] allThreads = threads.getThreadInfo(threads.getAllThreadIds());\nprivate int getThreadCount(ThreadInfo[] allThreads, Thread.State state) {\n         int count = 0;\n         for (ThreadInfo info : allThreads) {\n             if (info != null && info.getThreadState() == state) {\n```\n\nSort of an abuse of the CachedGauge using it this way, but it works.  Let me know if you had something different in mind or a better approach.\n. Now tracking this in #509\n. It looked good before 6d66d89, but if CachedThreadStatesGaugeSet doesn't override getThreadInfo I'm not seeing how it accesses the cached thread info. (Though the addition of STACK_TRACE_DEPTH = 0 is great)\n. Yea I did, I still really think that the CachedThreadStatesGaugeSet needs to override getThreadInfo from ThreadStatesGaugeSet and call getValue on the CachedGauge... If not, then I just don't see how the cached value gets used.\ndiff\n+  ThreadInfo[] getThreadInfo() {\n+    return threadInfo.getValue();\n+  }\n. I haven't had a chance to take a look, I've been on vacation for the past week so I have a bit of a backlog at the moment.  I'll take a look at it today.\n. I was just taking a look at it!\n. I'd recommend writing a replacement HealthCheckServlet which does what you need.\n. Would it make more sense to simply enable multiple GangliaReporter instances?\n. I didn't have any reason to not include this, but before your explanation I didn't have any reason to include it.  It seemed to me that enabling multiple reporter instances may have been a reasonable alternative.\n. I'm not sure I quite follow. Could you open a pull request with your changes?\n. Tracking in #523\n. Interesting, I hadn't considered the possibility that this issue could result in a memory leak. I'm having trouble determining how memory could be leaking (well, not 'leaking' per se). The issue could be that it is checking whether the new tick is greater than the old tick: https://github.com/dropwizard/metrics/blob/bdf9aed449ead80a5e75e91c501060d996f33ac7/metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowReservoir.java#L73\nIf tick overflows, newTick will be less than oldTick, resulting in tick incrementing by 1 (effectively) forever. trim() removes measurements where the key is less than the current tick minus the window, but if tick increments by 1, and if we assume window is 1 second, converted to nanoseconds and multiplied by the collision buffer, the map of measurements could theoretically reach a size of 256,000,000,000?\nCould someone check that logic?\n. @victor-prp I've just committed a possible fix, as well as your test: d49489663c43aa29593a363a08d2dbb7dd2e3582, however the test now times out, instead of resulting in an assertion error.\n. @martinsmatthews Great test, thanks! I'll get that committed to the branch and merge it in.\n. Modifying MetricRegistryListener in this way would be a breaking change.  I'd be open to any approaches which didn't break the contract.\n. Sorry, this would be a breaking change.\n. Thanks!\n. This is a known issue being tracked in #506. I'm weighing whether to apply this patch to make the module compatible with 9.1 or create a new module for 9.1 on account of the substantial changes which seem to have occurred.\n. It seems to me that status code is mostly an issue if programmatically fetching thread dumps.  Does anyone do that?  If not, I'm content to leave this as a 200, otherwise I'd support changing it to a 500 or 501.\n. I don't use GAE, but I trust you've run this and it works?  My only concern would be that GAE throws the NoClassDefFound exception when the ThreadDumpServlet class is loaded.\n. This isn't guaranteed to fix the issue, I've reopened #515.\n. It is possible that the class is loaded when long ns = System.nanoTime(); ns >= 0 && ns < Long.MAX_VALUE / ((COLLISION_BUFFER - 1) / COLLISION_BUFFER) thus the overflow behavior is entirely unchanged. Also, javadocs advise us that nanoTime may be negative, causing further weirdness, including but possibly not limited to underflow.\n. Having thought through it, the answer, if we're going to do getTick() * COLLISION_BUFFER in SlidingTimeWindowReservoir, is to change all instance of that to (something like) (getTick() % (Long.MAX_VALUE / COLLISION_BUFFER)) * COLLISION_BUFFER.\n. Already in there! https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst\n. @ceetav Nice catch!\n@Arvoreen Thanks for the fix! It has been merged.\n. @novaquark has written an InfluxDB reporter: https://github.com/novaquark/metrics-influxdb\n. Version 4 will have an influxdb reporter, however v4 won't be released for some time.\n. I'm in favor of bringing them back, I just need to find a good place to put them.\n. @joschi I like that idea\n. Thanks @joschi! :+1:\n. This was resolved in #502, but that site is no longer being updated. I hope to have a new site online at http://metrics.dropwizard.io/ at some point in the near future. Thanks for reporting this!\n. @joschi Looks good? I'll close out the other PR and merge this one.\n. Thank you @joschi, @saadmufti, and @cab222!\n. This will be included in 3.1.0, probably in 6-8 weeks.\n. Filed an issue with gmetric4j: ganglia/gmetric4j#9\n. I haven't seen any support for this, so I'm afraid I can't merge it.  User defined metric types should be supported by v4.\n. Thanks!\n. It has been looked at. I'm in favor of this however I do need a chance to review the code further and test it. I do have concerns about extending GraphiteReporter, so perhaps I'll refactor that. (In any event, the fields should be protected, not package-private)\n. Nothing at the moment. It will almost certainly be accepted, but v4 is a ways off and I'm pretty busy at the moment.\n. No, barring a catastrophic bug there will be no further v3 releases. However due to the nature of reporters it is trivial to separate it out into a new project/include it in your own codebase.\n. True. I'll seriously consider a 3.1 release, however it still wouldn't be out for a while.\n. Moving to #639\n. Thanks!\n. This will have to wait for 3.1, which will be released within a couple months. Sorry!\n. This is being tracked in #375 Remove Striped64 and LongAdder when switching to Java 8. Until then this is necessary for performance reasons.\n. @ikedahi Fantastic suggestions, thank you! Working on it right now.\n. I've opened #875 which removes Unsafe in favor of AtomicLongFieldUpdater. Seems there is a ~14% performance hit.\n. So a Snapshot comes from a Reservoir, the most common type of which is ExponentiallyDecayingReservoir, which throws away values all the time. What this means is the sum property you're exposing here will not monotonically increase, thus the use case you provided, feeding the data to an RRD DERIVE value, won't work like you think it will.\nPlease feel free to convince me otherwise.\n. The docs probably won't be rebuilt before the next release, which will be 4.0.0. I'll make a point to update this before that release. Thanks though!\n. Awesome, thanks!\n. I don't think this is a good idea as the InetSocketAddress may have been constructed with an InetAddress instead of a String, in which case a reverse DNS lookup would be triggered. Java 7 adds getHostString, but we can't use that.\nYou said an NPE is thrown? Would this work?:\n``` java\nif (address.getAddress() == null) {\n   throw new UnknownHostException(\u2026);\n}\nsocketFactory.createSocket(address.getAddress(), address.getPort());\n```\n. Thanks!\n. Yea it's just a Travis CI issue. Their build boxes are so far over capacity, this happens all the time.\n. I'm curious whether it is possible that there are multiple instances of ConsoleReporter?\nAlso, those docs were very helpful, thank you.  The example method shutdownAndAwaitTermination provided should more reliably shut down the executor service.\n. Thanks!\n. This looks pretty good, though I'd prefer to put this in the metrics-graphite module with the amqp-client as an optional dependency. With that change I'd be happy to merge this.\n(Also if you could fix some of the whitespace changes which occurred in this commit that would be awesome!)\n. Yes, though it won't be included until version 4, which doesn't have a\nrelease date yet.\nOn Wed, Apr 9, 2014 at 6:18 AM, massimo-parente notifications@github.comwrote:\n\nHi, are you still planning to merge these changes?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/554#issuecomment-39948540\n.\n. Merged in 3b5e4569203086dab88810bab5b9ad8e7c73ef3f\n\nThanks!\n. This is awesome, thanks!\n. Also, master is now 4.0.0-SNAPSHOT, so you can expect this to be included in the next major release.\n. You can already add a prefix to a graphite reporter:\njava\nGraphiteReporter.forRegistry(registry)\n    .prefixedWith(\"prefix\")\n    .build(graphite);\n. This will be supported in v4.\n. Thank you for your work on this. Some version of this will be included in v4, without a doubt. Work won't begin in earnest on v4 for some time, but I'll certainly continue this discussion at that time.\n. I'm confident that this MetricName approach will be the most flexible and user friendly way to implement tags.\n. There's nothing that would prevent us from doing that. This is simply a better API, in my opinion:\njava\nMetricName counterName = new MetricName(\"counter\").tagged(\"tag1\", \"value1\");\nMetricRegistry.counter(counterName)  // counter { tag1=value1 }\nMetricRegistry.counter(counterName.tagged(\"tag2\", \"value2\"));  // counter { tag1=value1, tag2=value2 }\n. Committed to a branch. Thanks @udoprog!\n. My primary concern is that it will be very difficult to find a sufficiently general solution for annotation-based instrumentation.\n. I'm glad you figured this out. I'm sorry I didn't respond, my knowledge of Jetty is slim at best!\n. Thanks!\n. There is an open pull request which would allow you to provide the JmxReporter with a custom ObjectNameFactory (https://github.com/dropwizard/metrics/pull/432). Would that provide the functionality you're looking for?\n. Great! I'd recommend opening a new pull request, then I can compare the two.\n. Interesting point. Would you mind merging this issue into #576?\n. @eric One resolution would be to remove CpuTimeClock. Do you use it? I don't get the impression that it is frequently used.\n. Good call, thanks!\n. Resolved in 3ffa457ca7b233dd02989d0aee340c82f4e0c35a\n. This will be released in 3.1, hopefully this week.\nOn Tuesday, August 12, 2014, Felix M\u00fcller notifications@github.com wrote:\n\nWe're also suffering from this bug.\nMaybe an hotfix release for current Metrics version is appropriate. What\ndo you think?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/579#issuecomment-51937641.\n\n\n// ryan w tenney\n. I wasn't planning on a release any time soon, but I guess that is going to change.\n@joschi If you sign off on this PR I'll merge it. (I haven't worked with Jersey 2)\n. I received your email and I'll add the test. Thanks!\n. I'm assuming you're talking about the filenames created by CsvReporter? Could you use a custom StatementNameStrategy in JDBI to shorten the metric name?\n. Closing due to inactivity, please feel free to reopen.\n. Resolved in 3ffa457ca7b233dd02989d0aee340c82f4e0c35a\n. All my projects at work are configured with -Xdoclint:none, I think if we can get away with just -html we're doing great :)\nThanks!\n. My only issue with this is that the currently supported method of doing this is no more verbose:\n``` java\nclass GaugeFactoryBean {\n@Inject\nMetricRegistry registry;\n\n@Produces\n@Metric(name = \"cache-hits\", absolute = true)\nGauge<Double> cacheHitRatioGauge() {\n    final Meter hits = registry.meter(\"hits\");\n    final Timer calls = registry.timer(\"calls\");\n    return new RatioGauge() {\n        @Override\n        protected Ratio getRatio() {\n            return Ratio.of(hits.getOneMinuteRate(), calls.getOneMinuteRate());\n        }\n    };\n}\n\n}\n``\n. Resolved in c5922341cd779a8299d1c308376999dc7af9da9b\n. I'm not sure I understand the point ofvaluewhere the counter would move by a constant value other than one, andopis problematic because whilemonotonic = truewould be equivalent toop = Op.INC,monotonic = falsewould be equivalent toop = Op.INC_THEN_DECR. What is the use case for having a counter which only decrements? (And even thenvaluewould solve that by allowing the user to setmonotonic = true, value = -1)\n. Putting aside that it is considered bad practice for a constructor to perform meaningful work, I haven't found any way to intercept a constructor through AOP (the only exception might when using compile- or load-time weaving) so the ability of the libraries to use this feature would be extremely limited.\n. I'm sorry, I was looking for that information to support your request but I wasn't able to find it (I only dabble in AOP). I should have asked you for more information before closing the issue. I can absolutely see a use case for Metered, ExceptionMetered and Counted on a constructor, but not Timed, though if we make this change for some we might as well do it for them all.\n. Annotations on constructor allowed in 3791493f87bea0327b2274533d67d0c067e5f2ac\nInherited and Documented annotations added in 3def3c8b4fd3602c960eca7b5c7be36fe196ded2\n. Resolved in 3.0-maintenance branch: cd9e198bf215fb6f80d50dc5e64bb7aa9128bef4 and in master: 4f97d89cb8d6cadd4099ba302b33dea2fb037e4f\n. Thanks!\n. Even UniformReservoir uses sampling. From the Javadocs: \"A random sampling reservoir of a stream oflongs. Uses Vitter's Algorithm R to produce a statistically representative sample.\" and the default constructor: \"Creates a newUniformReservoir` of 1028 elements, which offers a 99.9% confidence level with a 5% margin of error assuming a normal distribution.\".\n. Thanks!\n. @mrmanc I'm sorry I haven't gotten back to you earlier. We have had a number of requests for tapping into metrics as a feature, so it will happen in v4 (it can't go in before v4 due to the API changes necessary). Work hasn't started in earnest on v4, and I wouldn't be able guarantee that your PR would be merged, much less merged soon, but I'd nonetheless encourage you to work on one and submit it.  If nothing else it would influence the direction I take when implementing this feature.\n. Can these methods even throw exceptions?\n. By chance are you able to provide more details?  That strikes me as the real issue.\n. Ah, that's a different problem. You need to catch and handle RuntimeExceptions in getValue.\n. The most correct thing to do is to make sure that the Gauge implementation cannot throw any exceptions.  If Gauge were an abstract class then perhaps I'd create a protected value() method, which would then be called from the public getValue method and wrapped in a try/catch block.  I might also consider wrapping all gauges which are registered with the MetricRegistry with a delegate instance which would capture runtime exceptions.\nThe wrong thing to do is to defer the handling of exceptions to the reporters.  In this project alone there are 6 reporters, each of which would require that patch, and there is an ecosystem of probably 20+ third-party reporters which also would require patching.\nI've opened #642 'Suppress runtime exceptions from Gauge' to track this issue.\n. I think #600 resolves this problem. Can you please verify, and reopen this issue in the event that it was not fixed by that pull request?\n. Thanks!\n. I'd suggest using logrotate, I'd like to keep that sort of functionality out of the CSV reporter.\n. @sfosdal I need to perform a release this week; if you want to see this feature merged before version 4 please fix the failing build asap. Thanks!\n. @tomcashman opened a pull request (#630) which I merged.\n. My apologies, I overlooked that.\n. Would you care to open a pull request?\n. Closed in #639\n. Closed in #639\n. We're migrating from metrics.codahale.com to metrics.dropwizard.io, I haven't yet had a chance to rebuild the site. I'll take care of that soon.\n. Great catch. The issue seems to be that XXX formats the offset as \"-05:00\", while Z formats as \"-0500\", which while still ISO8601 compliant, is not RFC3339 compliant.. That's my goal\u2026 I'm hopeful, though work may get in the way.\n. Is this holding up dropwizard's release?\n. I'm merging PRs today, I'll try to get a release out this week.\n. I appreciate your work on this, however I'm afraid we can't add any new modules at this time. It's already very difficult to maintain a project with 18 different integrations in the main repo.\n. I wasn't able to reproduce this issue. Which version does this occur in and if not the latest, can you see if it occurs in 3.0.2?\n. I'm afraid this isn't a goal of the project. I'd advise copying the CSV reporter and making this change yourself.\n. A pull request would be excellent. I'd prefer to hard code it to 2.8, if someone still needs 2.6 they can use the older version of the module. A release is imminent, so to ensure it makes the cut I'd need the PR within the week.\n. Can you help me understand the purpose of this?\n. Interesting, I hadn't considered the possibility that the graphite reporter was truncating to 2 decimal places... Let me look into this further.\n. I'm working through the very long list of issues and pull requests to generate the release notes for 3.1.0. Expect something in the next few days\u2026\n. I'll see if I can get around to it later this week.\n. I merged the SharedHealthCheckRegistries in c2dd9fe143399ed69f851a7c143c461f64060a9f, but I couldn't accept the JPA database health check.\n. It's an architectural decision. The project doesn't currently include a collection of various healthchecks (only one is included, the ThreadDeadlockHealthCheck), and if we include JPA then a request will come for Mongo and Redis, and then if we're including DB health checks, then why not include non-db health checks, and all of a sudden I have an impossibly large set of health checks to maintain.\n. Thanks!\n. I appreciate your work on this, however I'm afraid we can't take any new modules at this time.  I'd advise splitting this reporter into its own repository, optionally publish it to Maven central, and open a pull request adding a link to your project in the third-party module page: https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst\nWhile pulling up that page, I noticed that there is an existing elasticsearch reporter, which mentions that \"Integration with Kibana would be awesome\", maybe you can assist with that? https://github.com/elasticsearch/elasticsearch-metrics-reporter-java\n. Thanks!\n. Tracking in #608, the site will be updated when 3.1 is released later this week.\nUntil then you can check out the old site at http://metrics.codahale.com/\n. Thanks!\n. Done\n. I was aiming for today, it now looks like it will be mid next week.\n. This will be the new groupId going forward. For the v3.1 release the package names will remain 'com.codahale.metrics', while in the v4 release (not anything to worry about for quite some time) the package names will change to 'io.dropwizard.metrics'.\n. I was on the fence about #585, but I couldn't see any harm to merging it. I guess I was wrong. I'm going to revert the change and wait for v4 to figure out extensibility.\n. Thanks!\n. Thanks!\n. I'm not sure I follow. Could you provide a use case?\n. I understand now. I'm afraid that wouldn't fit in this project, as it doesn't sound like it would be possible to have multiple such timers running concurrently, or possible to aggregate and report that information.  I think using a gauge for that is an excellent approach.\n. Thanks!\n. Are there characters other than ' which need to be sanitized from metric names?\n. I've gone with the following regex: [^a-z0-9!#\\$%&\"'*+-.:;<=>\\?@[]^_`|~]+\nIf there are no objections then I will be releasing 3.1.1 today.\n. So it is. Thanks!\n. Forward slash is legal then?\n. Yep looks like it.\n. Folding in #607, Persistent connections to graphite\n. Folding in #606, Graphite should accept hostname\n. Fixed in cd1699bdf6b1b41c34f0572d3af32db77912c2f6\n. Oh man I can't believe I missed that. facepalm\n. Fixed in e48405a9a93faa82746aa43483a17d12e89a698e and 0eff7b9cc24cde02277d04e639af670019642c53\n. Cherry picked 21687fa in 8ea8321a990d3d1debd427e4346ebccd9fb4daf8 and 7c6a70172f302abbc979394ece8a47693d336f1b due to merge conflicts as I had already moved the class into the proper package.\n. I'd accept the pull request, but I wouldn't be able to release it to maven. It's no longer possible to push a new release to the com.yammer.metrics groupId, and it wouldn't make sense to release it under the new groupId.\n. Without some other change to copy this file back into docs directory this will result in the release notes being absent from the generated docs.\nThe absence of the 3.0.2 release notes was an oversight on my part due to it being the first release of this project for which I was responsible. As for 3.1.0, they are missing due to the sheer number of changes that went into it and my desire to not further delay the release on account of the release notes.\n. Thanks!\n. The group id changed to io.dropwizard.metrics: http://search.maven.org/#search|ga|1|io.dropwizard.metrics\n. I'm afraid that isn't possible.  There have been a great many requests to be able to extend existing metric types or provide new metric types.  I have concerns about it, but we'll have a very thorough discussion in the next year or so as we work towards version 4.\n. I've had a couple requests for this feature, and to be honest I'm not sure I want to include it.\nHowever I am curious why you created ValueFilter to wrap an EnumSet. I'd be inclined to just use an unwrapped EnumSet.\n. There is clearly a lot of demand for this, but it will have to wait for v4.\n. This has become an extremely common request, and I've reopened #178 to track it. This is now on the roadmap for v4 as the proper way to do it will introduce breaking changes. The upshot is that each individual reporter will not need to support sub-metric filtering.\n. Could you please provide more information? I consulted the graphite documentation and I don't see anything about a bulk report over the plaintext protocol.\n. The Graphite TCP sender wraps the socket output stream in a BufferedWriter, so we get this feature for free. https://github.com/dropwizard/metrics/blob/master/metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java#L119\nGraphite UDP however, sends 1 metric per datagram. I'll look into fixing this.\n. Pre 3.1, a new connection was created to graphite per report and the buffered writer was flushed per metric.\n. I'm working on bulk reporting for UDP, should have it finished soon and will include it in 3.1.1.\n. Mistakenly commented on and closed this issue instead of another issue.\n. While I appreciate your attempt to cache object references, I'm afraid this change will result in gauges perpetually returning the values from the time that MemoryUsageGaugeSe#getMetrics is invoked. If you undo the aggressive caching I'll be happy to merge this pull request.\n. Changes like this will have to wait for v4.  I'll keep this open as a reminder to look into it at that time.\n. Branch off 3.1-maintenance and I'd be happy to look at a pull request that adds that support for a 3.2 release.\n. That explains it, I started looking into it and got a bit confused.\n. Thanks!\n. Thanks!\n. Manually merged in 9fa4d88e8c66d9c05e010c00e1f7cde39bf04bb1 and ed968674be749e5c585543a5aabeb183792342db. Thanks!\n. Shouldn't that case be handled by GraphiteReporter catching IOException calling close on the Graphite instance?\n. I have opened pull request #675 with your proposed fix.  Would you mind taking a look?\n. #675 merged\n. @adamdecaf I'm afraid the fix isn't quite that simple, given that commit added new methods to the GraphiteSender interface, I can't remove them.  If you're feeling up to making that change, I'd be happy to accept that PR.\n. Moving to #671\n. This creates an overlap with InstrumentedFilter (from metrics-servlet), and also doesn't make sense with @ExceptionMetered's cause.\n. This may have to wait for v4.\n. ThreadPoolExecutor implements ExecutorService, and we have an InstrumentedExecutorService and InstrumentedScheduledExecutorService.  Will those suffice?\n. Thanks! This may have to wait for v4, as I don't anticipate a 3.2 release.\n. This will be supported by v4, but the API for it will look different from this.\n. That sounds great. Would you be able to submit a pull request? I can't guarantee I'd be able to get around to it before the next point release.\n. Possible workarounds in 00c0af9008e4002c613151d50da4c985619fa84a\n. Since you submitted a pull request I closed this issue.\n. It can't be accepted right now, it will be considered for 3.2 or 4.0\n. I'm afraid I haven't seen any other requests for this functionality, so I'm unable to merge it.  I would strongly recommend you separate this module into its own project, publish it to Maven Central, and add a link to the project in the file third-party.rst.\n. Could you please submit a pull request?\n. Thanks!\n. Thanks!\n. Cherry picked into master: ced884bd26b3d23ad178631271fa4609881c5af3\n. It's under consideration for 3.2/4.0, but that release won't occur for a few months, I'm afraid.\n. Closed as fixed in #669, and 3.1.1 will be out very soon.\n. @jshook I just pushed 3.1.1 to Maven Central, check for it an hour or two. I'm sorry for the delay, a lot of things have been getting in the way.\n. Disabling the logger for this class would be the preferred method to suppress log messages.\n. I'll take this into consideration for v4, though I'm afraid the default method idea is out of the question as we're going to continue to use Java 6 as our compilation target for the foreseeable future.\n. Size isn't reported by other reporters, and I haven't seen any other requests for this functionality, so I'm afraid I'm unable to merge it.\n. You can supply a prefix when you register a MetricSet with a MetricRegistry:\njava\nmetricRegistry.register(\"prefix\", new ThreadStatesGaugeSet());\n. No problem!\n. Just reopened #178. This is on the roadmap for v4 as it will require some refactoring.\n. I like the idea, but I'm afraid we can't add a dependency on Guava. I personally love Guava, but when writing a library I go to extraordinary lengths to avoid using it.\n. I'm afraid I can't provide any insight on why they aren't in the jetty 9 instrumented handler. As far as I can tell there isn't anything preventing them from being added. The code you're looking for is here. I don't know that I'll have time to get around to porting it over. If anyone feels like opening a pull request for this, it would be accepted.\n. The GraphiteReporter isn't deliberately resetting the data. When you create a counter (for example) its value starts at 0, this value is reported to Graphite, which stores it as the current value. The only way around this would be to change the prefix so that Graphite doesn't overwrite the old value.\n. Even using an influxdb reporter, Metrics still isn't designed to support querying values from a reporter and setting the values of metrics.\n. Closing as can't fix.\n. Since the rate unit doesn't change how the meter or timer collects data, only how it is displayed, it was moved from meter to the reporters (see convertRatesTo and convertDurationsTo on most reporters: https://github.com/dropwizard/metrics/blob/master/metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteReporter.java#L79)\n. Preferably the system you are reporting to could be configured to convert time units for specific metrics in the view logic.\n. What dashboard are you using? This isn't alphanumeric, it follows the JSON standard for floating point values: http://jsconsole.com/?parseFloat(%222.7286933704633276E-4%22)\n. I'm afraid I can't be of any help with Logic Monitor, all I can do is assure you this is a standard format for representing floating point values.\n. These do represent the exact value. You can copy the reporter/metrics servlet and modify it if you need a non-standard output.\n. Metrics and reporters are about to be overhauled in v4, and once that is complete it should be possible to override any meter to include arbitrary attributes, and have any reporter report them. Unless I see a lot of demand for this enhancement I can't justify adding it. I'll leave it open to gauge demand for it.\n. @tempredirect I'm afraid I'm not terribly knowledgable about Jetty. I've been hoping that someone who is more knowledgable would come along and sign off on this PR!\n. @jonathanmgrimm have you had a chance to look into this any further? I was going to merge it, but your comment concerns me.\n. Merging to 3.2 in #1074. I like this approach.  I can't merge it immediately as I'm still evaluating what can go into a 3.2 or 4.0 release, but I will get to it.\n. Big problem with this is that we still support Java 6, and getHostString is new in Java 7. The alternative is getHostName, but that attempts a reverse DNS lookup if an IP address was supplied.\n. Is this pull request for master or the 3.1-maintenance branch (github seems to omit that info on mobile). If master then I'm sorry, and you are correct, I'm just still in a 3.1-maintenance mindset.\n. I renamed the master branch to 4.0-development and it looks like all pull requests against master were closed.\n. What a disaster\n. Not soon, it's on deck for v4, which might happen at earliest later this year.  If you apply this to the 3.2-development branch and open a pull request I'd be happy to merge it there as well, that should be out in a couple months, tops!\n. Thanks!\n. We probably won't add official support for InfluxDB unless it were to surpass graphite as the industry standard timeseries database.\n. I intend to include support for customization of metrics, but it's going to be a bigger change than this. As far as specifying size on the reservoir, that's already possible with the public ExponentiallyDecayingReservoir(int size, double alpha) constructor.\n. Only if you create the timer manually: new Timer(new EzponentiallyDecayingReservoir(...)) and then register it with the metric registry.\nV4 will permit you to set a default metric factory which allow you to customize the default behavior.\n. The ContextListeners don't specify execution order, so it must be a tomcat issue.\n. The Metric GangliaReporter doesn't interact with the filesystem at all, so it can't be responsible for that issue.\n. :+1: :+1: :+1: awesome stuff, thanks!\n. Thanks! I'd also be interested in adding the HdrHistogram to this repo, provided it doesn't have any external dependencies.\n. I absolutely agree that this is necessary. I'm marking this as a feature that should be included in v4. Depending on how when that comes out, we will probably have to accommodate everyone still living in the pre-JDK8 stone age.\n. The current version of SlidingTimeWindowReservoir initializes lastTick in that way: https://github.com/dropwizard/metrics/blob/69fc970151f509a0dc6ccf34ef7c7e9beed663aa/metrics-core/src/main/java/com/codahale/metrics/SlidingTimeWindowReservoir.java#L44\nWhich version had this problem?\n. Hi Bryan, I'm sorry to say that we can't accept new modules into this project at this time.  It has become difficult to maintain a large collection of modules, many of which we didn't author.  I'd strongly encourage you to publish this as an independent project, and submit a pull request to https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst with a link to your project.\nAs for changing the visibility on void registerAll(String name, MetricSet metricSet), as MetricSet implements Metric you can pass your MetricSet to <T extends Metric> T register(String name, T metric), which first checks if the metric is a MetricSet and calls registerAll (see: https://github.com/egineering-llc/metrics/blob/69fc970151f509a0dc6ccf34ef7c7e9beed663aa/metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java#L84).  This is a frequent source of confusion, so I have opened issue #734 to improve the documentation.\n. Thanks!\n. Thanks for the patch, but the test duration isn't a concern for me at this time.\n. I'm open to adding a clean up mechanism and ServletContextListener, but ideally we'd make it completely transparent to the user.\n. I just cherry picked this into master. The release milestones are available here, I had targeted 3.1.1 for 4 months ago: https://github.com/dropwizard/metrics/milestones\nIt's currently held up by a fix to the Graphite UDP reporter, I just haven't finished it on account of work.\n. This has become an extremely common request, and I've reopened #178 to track it. This is now on the roadmap for v4 as the proper way to do it will introduce breaking changes.\n. No apology necessary!\n. I have concerns about this breaking the /ping endpoint for existing users, so I'm going to leave it as is.\n. Cool! I was also trying to figure it out and came up empty.\n. I was exploring possibilities for a 'polyfill' where Java 6 users can still use this backport (and Java 7 users can use the LongAdder backport).\nMetrics 4 will require Java 7 at a minimum, so if you were to open this PR against master I'd merge it.\n. Thanks!\n. I would be open to accepting this as a PR, but I'm afraid I won't have any time to do this myself.\n. Agreeing with @marshallpierce on this, it is a separate concept from a timer.\n. Forgive me if I'm mistaken, but won't this simply return the version of the Metrics jar?\n. Since the usefulness of this is predicated on having an uberjar, I can't merge it.  Dropwizard might be open to doing something like this however.\n. I'll take it under consideration.\n. Tracking in #178\n. I'm afraid I don't quite understand the application. Could you please elaborate?\n. Changing the tick interval on a meter doesn't make sense, since the 1, 5 & 15 minute exponentially weighted moving averages expect a 5 second tick.\n. Thanks for bringing this to my attention. A test started failing due to this change, so I made this change and updated the tests. Resolved in 70559816f1fc3a0a0122b5263d5478ff07396991 and dd0fca2f4d89497ee57284410c2db0c72a63296a.\n. I just pushed the 3.1.2 release to Maven Central\n. If I understand @bitkid's last comment, he had multiple versions of metrics on the classpath.\n. Multiple versions of metrics on the classpath.\n. Thanks! Also pulled this into 3.1-maintenance.\n. They don't need to be in the same package unless they're being merged into this project (which we aren't doing anymore, maintenance became very difficult).  I've added them to our list of third party modules: c6a6c0c4422ecb7f72d218e995faddf3f78e4da6\n. Are you sure your graphite instance is listening on UDP port 2003? Netcat defaults to TCP, so that may explain why that works.\n. Ok. I'm going to close this issue, feel free to reopen if that doesn't resolve it.\n. Are you certain the hostname is correct?\n. To my knowledge there is not a metrics module which listens for Hibernate's internal metrics.\n. Sure, I don't see why not. I don't have the time to do it, but if you were to submit a pull request it would be accepted.\n. @geissbock I just merged to master, feel free to make that change.\n. I'm afraid I don't understand the change.\n. Sorry, I saw the other issue and I remember now.\n. Support for customizing meters will make it into v4, but I can't force hourly and daily on our users, as I'm already getting lots of complaints about reporting too many metrics.\n. I'm afraid this won't happen in 3.1, but something like this is planned for either 3.2 or 4.0, which i hope to get out later this year.\n. Nothing at all. In fact, something very similar will ship with v4.\n. Now that 3.2 is happening, I would accept a pull request against the 3.2-development branch which made MetricBuilder public and added meter(String, MetricBuilder<Meter>), timer(String, MetricBuilder<Timer>), histogram(String, MetricBuilder<Histogram>), counter(String, MetricBuilder<Counter>).\n. Or, preferably, instead of making MetricBuilder public, introduces a new single method interface MetricSupplier<T extends Metric>.\n. Tracking in #781\n. If we do this we should also look at the return type for MetricRegistry.remove, currently a boolean.\n. This is intriguing, but I haven't seen any demand for it.  I'll leave the PR open to gauge support.\n. Sorry, didn't mean to close it.\n. I'm interested to hear from others as to whether this is a desired change. Please weigh in!\n. This is a very common source of confusion\u2026 MetricSet implements Metric, so register(String, T extends Metric) can be called with a MetricSet, and it isn't necessary to change the visibility of registerAll(String, MetricSet) in order to access this functionality.\n. I'm afraid I don't follow. Could you supply an example?\n. Correct, I've opened #734 to improve that documentation.\n. Have you experienced a null pointer exception? If so, could you send me the stack trace?\n. No problem!\n. You're right, it does.\n. Probably not\u2026 I'm trying to avoid changing dependency versions in maintenance releases. I'd instead recommend using Maven's Dependency Management to override the versions of these dependencies.\n. Will track in #796\n. Merged, thanks!\n. Which version are you using?\n. In that case I'm afraid I can't be of any help. 4.0.0-SNAPSHOT is far from stable and custom patches void the warranty ;)\n. That having been said, if you can reproduce it with 3.1.2, you have my attention.\n. I was initially looking at the history of that file in the 3.1-maintenance branch, and we hadn't changed anything in ages. I see now that there is a new metric in master. I'll look into whats causing that to fail.  What JVM are you running?\n. Fixed by #799\n. Thanks @ryanrupp!\n. Thanks!\n. I'm going to leave this open and if there proves to be sufficient demand, I'll merge it.\n. Thanks! I've reviewed it, and it is under consideration for the next major version (v4, no eta as of yet).\n. Merged, thanks!\n. I'm open to this, but it's gotta be thread safe.\nHow about:\njava\nthis.rateUnit = (\"events/\" + calculateRateUnit(rateUnit)).intern();\n. Thanks! (Great idea, by the way)\n. Something like this will make it into v4, but it's going to be a much larger change, to allow for reporters to report the values.\n. I have concerns about escaping by default, in the event someone is using a na\u00efve CSV parser. I'm curious whether it might make sense to override the locale to Locale.US or another locale which uses . and not ,, or whether there is a reason Locale.GERMANY is required. The other option of course would be to add escaping as an opt-in feature.\n. Ah ok. I'll keep this open to track the issue, but it'll be low priority if it's not actively causing a problem for you.\n. Are you using MetricsFeature to register it? https://github.com/dropwizard/metrics/blob/master/metrics-jersey2/src/main/java/com/codahale/metrics/jersey2/MetricsFeature.java\n. Reset comes up a lot, and the current policy is that we can't support resets, if for absolutely no other reasons than multiple reporters would end up clobbering each other, and that counters don't necessarily monotonically increase.\n. Thanks, I have been meaning to get around to this!\n. Given the newfound focus in v4 on tagged metrics, I will be accepting new reporters for backends which support tags.\n. @leelasharma merged, thanks!\n. Agreed. I am planning on rewriting this to use the Apache http client. I'll make certain it supports https.\n. This is a known issue, which we are tracking in #515.\n. This is problematic because there can be multiple reporters polling the gauges, each reporting the value since a different reporter polled it. Graphite and other data outputs can compute a derivative which, given a series of cumulative counts and times, will calculate the delta between subsequent data points. See nonNegativeDerivative in the Graphite docs. \n. Thanks!\n. I'd prefer to wrap the call to reportGauge in a try/catch, so that a single gauge throwing an exception doesn't prevent the remaining data from being sent to graphite. However, gauges really shouldn't throw exceptions.\n. You're absolutely right. What's the point of any of the existing meter types if not aggregating locally? This is also beneficial as it will be much easier to implement.\n. I'd like to be able to run tests against Jetty 9.2 and Java 7.  Any idea how we can make that happen?\n. You're not missing anything obvious. I've been working on 4.0 in the branch metric-name, and pushing snapshots from there. 4.0 will use io.dropwizard.metrics as the package name. This will be the final package name change.\n. Thanks!\n. I'm sorry to to say that these features are not on our roadmap.  I appreciate the work you put into this.\n. I see what you mean, but @ryanrupp is correct that this doesn't appear to be a sufficiently common use case as to justify inclusion in the API.\nCould I recommend maintaining both a Timer and a Meter? That way you'll be recording the count and rate of the method invocation, the method's execution time, and the count and rate of the events/objects processed.\n. I'm sold on the random fix, but not on the long overflow. At 1mil event/sec it'd take almost 300,000 years to get there.\n. Cherrypicked 172e44b as 258e80b25473184535df4f0c7ec9a80554b21f6a\n. It appears JMX was due for a total overhaul in #149, but that never happened. I need to get a sense of how many people are actively using JMX, because at this point supporting it would only take time away from the current major goals of the v4 release.\n. Tracking in #832\n. @tguzik It's a good thought, but it generally won't capture most uses of reporters. It's probably only capturing uses from a couple example Dropwizard projects and any third party modules which support reporters.\n. metrics-ganglia is first on the chopping block, due to a transitive dependency on an LGPL-licensed library through gmetric4j. Unless I hear a gigantic outpouring of support, and an offer to refactor it to remove that dependency, I'll be removing it from the v4 branch as soon as next week.\n. @joschi Does Dropwizard not use metrics-jersey anymore?\n. Alright, JMX definitely stays.\n. Hi @sivasamyk! Thanks for working on this! I agree with option #2. If you aren't already I'd love to see JMXReporter and JMXHealthCheckReporter extracted to their own module, metrics-jmx.\n. That's a tough one. Sure why not.\n. ScheduledReporter should already make it difficult/impossible to kill the thread: https://github.com/dropwizard/metrics/blob/master/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java#L111-L120\n. There is a known issue where the Graphite reporter doesn't always reconnect\nafter disconnecting.\nOn Thu, Jul 23, 2015 at 6:41 PM James Ravn notifications@github.com wrote:\n\nI missed that. Then I don't know what was killing our reporter thread, but\nit happened a few times.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/834#issuecomment-124257874.\n. While it certainly gets the job done, I'm not a big fan of that MetricAttributeFilter.  I'd definitely go the route of #837.\n\nSince this specifically references graphite, I'm going to close this and track it in #178.\n. :+1: this is almost exactly (not 100% on MetricAttrbute for the name, but that's less important) what I've been planning for v4.\n. I scanned both of those approaches and I think they're both very promising! Thanks! I'll look at them in greater depth soon.\nI think Metrics 4 will require Java 8, especially considering that it probably won't be out until after Java 9 is released!\nI appreciate your work on this! Let's talk again soon.\n. I keep second guessing the decision to move to Java 8, but let's do it.  We'll still have v3.2 for anyone stuck on Java <=7.\nWith regard to default methods on interfaces, I'd encourage you to not overuse them.  I think that they should be generally avoided unless a) the interface is intended to be used as a lambda function, or b) an existing interface is being expanded and we need to maintain backwards compatibility.\n. It's not the same, we need to reopen this.\nOn Fri, Feb 17, 2017 at 12:58 PM Artem Prigoda notifications@github.com\nwrote:\n\n1048 https://github.com/dropwizard/metrics/pull/1048 has added a\nMetricAtrribute class.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/837#issuecomment-280721383,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAHkb-JI6JR1Nhtb17Zit2DjY18X2oa2ks5rdd-rgaJpZM4Feena\n.\n. Yea, there was a similar issue with metrics-servlet recently. I'll try changing the events and see what happens.\n. Yep. I think that is the correct behavior, and the parser should be made to handle NaN.\n. Does it cause dogStatsD to simply not report that metric, or does it cause the loss of other metrics?\n. I'm going to close this as an issue with the datadog agent.\n. Help me try and understand your use case a bit better. The first thing that comes to mind is that you can set up a reporter for each of the metric registries, instead of merging all the registries and running only one reporter.\n. Your use case makes sense, but I'm going to leave this issue open to see if other people want to see this implemented before I commit to it.\n. @c2nes I like your proposal.\n. I'd suggest that you not try to add in 90th percentile.  It's very likely that v4 will have configurable quantiles, and as a result most of the changes to add this would be overwritten. I'll keep this issue open to make sure we add in 90th percentile after the refactor is completed.\n. Median is 50th percentile.\n. Coda was the author of the majority of the code. He left the project around a year ago. I had noticed some issues were going a long time without resolution, at which point I offered to maintain the project. Currently, I am the main developer. If I hadn't, I believe that other people who wrote modules would have stepped in and maintained it.\n\nHope that helps!\n. I've been thinking and what bothers me about this is that we'd end up with a registry that is inaccessible from getOrCreate.\n. The former. I haven't had time to review the pull request, I'll try to get to it soon.\n. @timezra I greatly appreciate the PR. I just merged #871, which added a collectd reporter, based solely on the fact that it was mergeable as-is. If it missed out on any features that your PR contained, please let me know and I'll be happy to remedy that.\n. I'm not certain about elasticsearch, but I am very interested in a riemann reporter. Just so you know, the library is going to be somewhat rearchitected in the not too distant future, so it probably doesn't make sense to start this work yet.\n. Thanks for the heads up!\n. Thanks!\n. I'd be open to this.\n. Though I would probably want to mark all these classes as @Deprecated.\n. Thanks!\n. Thanks for the heads up! Will be fixed in 3.1.3 and in 4.0.0, whenever they're released.\n. @mtakaki I appreciate the fix, and it will be merged, but not into 3.1. It'd be perfect for 3.2, but I'm trying to focus on v4, and you can expect the fix to be included there.\n. Thanks!\n. I'd be open to considering this as a pull request, but it won't happen otherwise.\n. I'm afraid I can't accept new integrations at this time, as maintaining so many integrations that I don't personally use has become extremely onerous.  I'd encourage you to separate this module into its own project, publish it to Maven Central, and open a pull request to add a link to the project in the file third-party.rst.\n. Added this a while ago, though after the PR was opened: https://github.com/dropwizard/metrics/blob/master/CONTRIBUTING.md#important\nThere's no way I can accept even a fraction of the modules that people have written (see https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst)\n. Oh yea that's already possible, there is no requirement that the reporters exist in this project or even in the same package. Check out any of the reporters listed in third-party.rst (or even metrics-datadog, since I already happened to have this link on my clipboard https://github.com/coursera/metrics-datadog).\n. Thanks!\n. In v4 it will be possible to export raw events, but until then you're limited to reporting on the mean/median/stddev + quantiles for each JVM.\n. Thanks!\n. Looks pretty good, thanks! I definitely agree about excluding commons-logging.\n. Definitely, and don't worry about constructor binary compatibility.\n. Thanks! Sorry I missed your comment the other day.\n. I'm supportive of a collectd reporter. I'll take a look at those two PRs.\n. @ryankennedy I didn't realize, that's good to know, thanks!\n. Thanks!\n. Reservoir Javadocs specify that it is to return the number of values recorded. Absent a compelling reason to remove it I'd like to leave well enough alone.\njava\n    /**\n     * Returns the number of values recorded.\n     *\n     * @return the number of values recorded\n     */\n    int size();\n. I've created PR #876 which selects the best LongAdder implementation\n. Already done in master, will be released in v4. No release date yet.\n. I like it. Can you also remove Closeable, or does that cause problems?\n. Yea, we can live with that. We're working on v4, so breaking changes are welcome.\n. I reverted the change to Timer in metrics-adapter, since that module is around for backwards compatibility with 3.x, and we shouldn't do anything that could break it.  Also I removed the Closeable import from Timer in metrics-core. (see dacbb61d1d421338c3c15822da79640b3936c3db)\n. Can I consider this resolved by your PR?\n. There's a pretty recent snapshot in the Sonatype snapshots repo: https://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/metrics/\n. Thanks! There's just one issue with formatting, if you can fix that I'll merge this.\n. Thanks!\n. Yes that is absolutely correct. The scheduled reporter handles scheduling and retrieving metrics from the MetricRegistry, you just have to override the report method. I'm going to close the issue, but please feel free to ask any additional questions you might have here!\n. Thanks! Will track in #885. It will be a couple days before I have a chance to review it, but I greatly appreciate your giving the httpasyncclient module some well needed TLC.\n. It has been moved to #885, which is still open. Thanks for asking!  This is a desirable feature, however I am hoping to have configurable percentiles as a native feature in Metrics 4 (each metric will define a set of attributes which they export, and the attributes would be configurable globally or per metric), and the reporters will report the attributes defined by the metrics. At least that's the current plan.\n. Thanks!\n. The library is designed for use in large multithreaded applications, thread safety is of paramount importance. As such all classes are thread safe. I don't have the time to mark all classes as such (and I'm not sure I want to clutter the javadocs in that way). I would consider a 1-line addition to the documentation in order to clarify this issue.\n. Resolved by #913\n. What's your use case for this? I generally avoid expanding visibility if not absolutely critical.\n. First class support for custom metrics is one of my priorities for Metrics 4. As you know, as of Metrics 3, custom metric types aren't supported, and understandably you're trying to work around that. I've decided that I don't want to start making changes to things in 3 to allow hacking in custom metric types.\n. There's the metrics-user group, but there hasn't been much in the way of conversation about v4 yet. I do need to start engaging the group on discussions about v4 priorities. https://groups.google.com/forum/#!forum/metrics-user\n. I don't think that change was accidental, as most Jackson classes implement Serializable.  I agree that since we don't support serialization we shouldn't give the impression that we do, but this change is limited to a couple private classes, which implement Serializable whether or not we make this change and which don't hold references to any non-serializable objects. I would agree that these classes are unlikely to be serialized, but this change doesn't hurt and is technically correct.\n. Could you add a test to https://github.com/dropwizard/metrics/blob/master/metrics-servlets/src/test/java/io/dropwizard/metrics/servlets/HealthCheckServletTest.java?\n. Some tests are timing dependent and can fail randomly. Can you rerun the build? If not I'll rerun it tomorrow.\n. @randomstatistic Would you mind submitting a pull request to the master branch as well?\n. Thanks! Yea I think organizing it by category would make it far more useful.\n. Influxdb isn't a first party module until v4, so we'll keep it in here for now.\ncamel-metrics is in the right place, MetricsCatcher isn't, but it would be in a category all its own. It's fine there for now\nThis organization is already far better than what we had, and we can make further improvements in the future.  Thanks for doing this!\n. Thanks!\n. Thanks!\n. I'm afraid the metrics-influxdb module isn't scheduled for release until metrics v4, and I don't know when that will be released. I have several grand ideas for v4 and no time to make them happen.\n. I'm afraid there's no release scheduled for the master branch (v4) at this time.\n. Just restarted it, more than likely transient, this happens fairly frequently.\n. Let's backport this to 3.2 as well.\n. Thanks! I understand and regret the trouble that caused. Unfortunately that was the best available option.\n. Version 4 will be a breaking change, and seeing as metrics has already had 1 package name change I wanted to avoid breaking backwards compatibility again just for some minor bug fixes to v3.\n. @tkp1n Gauge already supports this functionality, though I appreciate your contribution!\n. From my reading of the code, Statistic doesn't enforce that the values are nondecreasing.\nAs Gauge is an interface you can create a Statistic or SettableGauge class which implements it:\njava\npublic class Statistic implements Gauge<Long> {\n    private Long value;\n    public Long getValue() {\n        return value;\n    }\n    public void setValue(Long value) {\n        this.value = value;\n    }\n}\n. Thanks!\n. I think thats a PR-acceptance record for me on this project!\n. Thank you!\n. MBeanServer implements MBeanServerConnection, so that doesn't explain it: https://docs.oracle.com/javase/7/docs/api/javax/management/MBeanServer.html\nMight you have multiple versions of Metrics on the classpath?\n. The socket's output stream is wrapped with a BufferredWriter, so that exception isn't thrown until the call to 'flush()'\n. I added those additional target types somewhat recently in order to support other developers that may wish to implement that functionality (ahem\u2026 @marshallpierce).\nThat having been said, I would like to add support for that to all the first-party modules. It's lower on my list of priorities, but if you submitted a pull request it would be gladly accepted.\n. I certainly will, but I'm very busy right now, I'll get to it soon.\n. @patrox Thank you, and I'm so sorry for the delay getting this merged.\n. I have concerns about this. Will elaborate a little later.\n. @neilcronin apologies, I tried renaming the master branch to 4.0-development and ended up closing all PRs in the process.\n. I'm sorry about that! The past month has been absolutely crazy for me.\nMy primary concern is that this only changes the behavior of the graphite reporter. If we change this for the Graphite reporter, we should really change it for all first-party reporters, and even still we'd be unable add this behavior to third-party reporters.\nThen taking into consideration that v4 will allow metrics to define arbitrary attributes (just as a meter currently defines a 'p999' attribute, a gauge would be able to define a 'foo' attribute), I'm sorry to say it doesn't make sense to add this feature.\n. Sure I'd accept that PR.\n. Tracking in #921 \n. I haven't encountered this exact use case, but perhaps others have. If there's a significant demand for this capability, it can't be accomplished with this or another library, and it makes sense to add to this project I'd be open to it.\n. Yea this looks a lot like #842, I'll track it there. Feel free to register your interest in a comment on that ticket.\n. I appreciate the contribution, but I'm sorry to say this doesn't quite fit with the project's longterm goals. Some variation of it might fit better in v4.\n. I like it, thanks! Can you also submit a PR against master?\n. Build is failing on the @link in the class javadoc comment on CpuProfileServlet\n. I'm aiming to get a 3.2 release out in the not too distant future, but no eta yet.\n. While this does, in a way, remedy the issue you're experiencing, it results in inaccurate data.  The collision buffer exists to allow the SlidingTimeWindowReservoir to record up to 256 values per nanosecond.  Without the collision buffer, subsequent updates in a given nanosecond will result in the tick being incremented:\nupdate 1, ns = 1, lasttick = 0, tick = 1\nupdate 2, ns = 1, lasttick = 1, tick = 2\nupdate 3, ns = 1, lasttick = 2, tick = 3\nupdate 4, ns = 1, lasttick = 3, tick = 4\nupdate 5, ns = 2, lasttick = 4, tick = 5\nIt doesn't take very long before the tick drifts significantly and is no longer representative of the instant of the update. Granted the same could conceivably happen with the collision buffer in place, but that would require 257 updates per nanosecond, not 2.\n. If that's an acceptable loss of precision for you then that's fine, however I'm not prepared to fix this issue by breaking something else.  I have a fix ready in a branch (see https://github.com/dropwizard/metrics/tree/sliding-time-window-overflow), and I'm aiming to release it soon.\n. That's a reasonable. I'll look it over tomorrow.\n. Can you look into the build failure?\n. Okay I'll look into what's failing in that branch.\n. Actually I have a problem with this. I don't mind supporting BigInteger and BigDecimal, but this is the wrong way to implement it. BigDecimal -> long discards the fractional part, and both conversions return only the low order 64-bits. Graphite stores everything as doubles, so I think we ought to be converting both BigInteger and BigDecimal to doubles.\n. Thanks, I'll take a look!\n. I've made a couple comments, but it looks good otherwise.  I'm sorry to bother you with this, but could you reopen this pull request against the new 3.2-development branch?\n. Thank you! I've just created the branch 3.2-development, and it'd be great to see this make it into 3.2 as well.\n. Thanks!\n. Thanks a lot!\n. I like the idea, however this PR introduces new protected methods and changes a private method to protected, which I can't do for a minor release.  I'd consider it for 3.2, however v3.2.0 will more than likely be the final v3 release, and I don't want to expand the scope.\nWould you consider applying this change to the v4.0 branch?  Two notes, 1) it will take a little bit of work to adapt it to that branch, as file and package names have changed, and MetricName was introduced, 2) I want to include a capability in v4 to override how metrics are created, and while this looks like a good first step, the implementation might be wholly unrecognizable by the time v4 is released.\nThanks!\n. The former, rework the patch to v4 as it is currently and then it will evolve along with that release.\nThat's not typically the test I have problems with, but its not surprising as it is time sensitive. I think that if you authenticate with Travis it will allow you to rerun a build without closing/reopening the PR. Also feel free to @ mention me to request that I rerun it.\n. @arnaud-deprez merged, thanks so much!\n. Thanks!\n. Great catch @ryanrupp, thanks!\n. Thanks! I'll get that updated today once things aren't literally on fire at work \ud83d\udd25\n. Thanks! I'll get this deployed later today.\n. This is really great, but could you rebase this branch PR against the 3.2-development branch? The next release of 3.1 will only be bugfixes, no functional changes.\n. I'm afraid this behavior doesn't make sense for gauge. For all other metric types the MetricRegistry is responsible for creating the instance, but gauge is created by the user and supplied to the MetricRegistry. We can't simply assume they will be identical.\n. Strictly speaking it is thread-safe, the issue is that its delivery semantics are at-least-once message delivery. Exactly-once would be possible, but I have concerns about a call to addListener blocking calls to register.\n. An update to the documentation is a good idea, I can see that being an important piece of information to have available when implementing a listener.  I'll look into ways we could support exactly-once delivery with minimal overhead.  Also if you think of something please let me know.\n. Thanks! I've got to take a closer look at this before merging. I'll get to it soon.\n. @phearnot Thanks!\n. You're right, but the 2nd thread will catch that IllegalArgumentException here, retrieve the counter created by the 1st thread, and return it. Because of this and that the Map in use is a ConcurrentHashMap, synchronization is not required.\n. Yes, this will be a key feature of metrics 4. We've already introduced MetricName in the master branch, which takes both a name and a set of tags.  More work is required to adapt the reporters to use the tags.  If you can help with that, let's chat!\n. I've also opened #977 to track the conversion of existing reporters to be tag-aware.\n. There was a small problem with this PR, the busy field was changed from an int to a long. In my first commit (f9b4572) I inadvertently used AtomicLongFieldUpdaters for both fields, but my second commit (d83b989) fixed that.  I've applied those patches in PR #966 which I'll merge just as soon as the builds pass. Thanks!\n. The problem is that reporters follow a pull model, so we can't just convert reporters to accept collections of snapshots.\n. Is it not sufficient to tie the reporter instance to the lifecycle by creating a @PreDestroy method to call close() on the reporter?\n. Now I notice the extra word in my post facepalm\n. Closed by #974\n. Thanks!\n. Are you encountering an issue where the scheduled executor service stops due to uncaught exceptions?\n. @bentatham Thoughts on the change in b77971a?\n. Something weird happened here and this PR was not marked as merged. It was merged though.\n. I'm sorry, I don't understand the question.\n. Glad to hear it!\n. I've been strongly against this for a couple reasons. First, I don't think metrics should throw exceptions, ever. It just isn't safe. Second, this only fixes the GraphiteReporter, and not any of the ~10 other first-party reporters or the ~100 third-party reporters.\nAt the same time, I'm preparing to make support for third party metrics a feature of metrics 4, so I don't know what to do about this.\n. It still needs to be addressed, let use this issue to track it.\n. Not finished yet, tracking in #837. @bentatham is currently working on it.\n. @mwhipple I don't think that had been considered. We could revert this change as it's likely no one is using it yet. Either way we'll be sure to avoid this problem in v4.. Could I just ask that you open a new issue for this?\nOn Mon, Mar 6, 2017 at 10:03 AM Matt Whipple notifications@github.com\nwrote:\n\n@ryantenney https://github.com/ryantenney cool, thanks for the quick\nresponse!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/989#issuecomment-284420812,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAHkbwQNQVTg5BCElN2dxn4_WNJ4IXD-ks5rjCBCgaJpZM4JSLXP\n.\n. Will track in #999 \n. What metrics are available from java.lang?\n. Thanks, I'll take a look!\n. @arteam the problems I see with the feature and implementation are:\n\n\nnot all reporters have been updated to include this field, so we'd be introducing inconsistency in the project\nI haven't seen another request for this feature\nsince the demand is low, I look to whether this can be accomplished with the existing library, and it should be possible to accomplish this with a counter (though admittedly not ideal)\nan extremely common complaint has been that we already expose too many metrics\nfor v4.0 I'm planning to introduce a feature to allow individual metrics to define what properties they export, so meter or timer could be subclassed and this field (or any new field) could be added and reporters would pick it up. This isn't necessary. MetricSet implements Metric, therefore you can pass it to register(String, Metric).. I have an issue with this. The compareAndSet operation is atomic so it shouldn't allow more than one thread into that if block. Granted 'lockForRescale()' does effectively the same thing, however it is a more expensive operation than the compareAndSet.. I'd like to look into this further before we backport it.. While it does seem to correct an issue, I have concerns about it blocking all threads on the rescale once every hour.. Looks good, except that metric types are meter, timer, counter, gauge\u2026. And is there a reason to go with disabledMetricTypes instead of enabledMetricTypes?. @ryanrupp Good point. This would only go to 3.2, for exactly the reasons you mention. Also there will be some inversion of control with regard to reporters in v4 to make this sort of filtering easier to implement.\n\n@arteam Ryan reminded me that we're calling these 'Attributes', can we rename MetricType and disabledMetricTypes to MetricAttribute and disabledMetricAttributes?. This looks great. The only thing I was thinking about was trying to avoid the branch per call by making the JdkDelegate an instance class, creating a new delegate class for our backfill ThreadLocalRandom, and an interface that defines just the current() method. Add a final static field INSTANCE and set it to whichever instance is supported. Then the ThreadLocalRandomProxy.current() method would just call INSTANCE.current().. That's fantastic! Thank you! You've tested this in JDK 6? I'm curious because just by looking at it, I'm not sure whether NoClassDefFound error would be thrown during the instantiation of JdkProvider, or if it would be thrown while calling JdkProvider.current.. Merge away!. You've got the right idea, but what I'd recommend is adding a metrics-java8 module that is compiled using Java 8 (and is ignored if the compiler is <8). Then if someone wants to use the native longadder, they can import that module.\nI went looking for an old branch where I started to do just that, but I can't find it.. @jplock go for it!. Tracking in #1076 . Thanks!. I agree that the groupId change to version 3.1 was unfortunate, however I'm not concerned about this. We created the metrics-adapter module which will wrap metrics 4 and is bytecode compatible with versions 3.1 and 3.2. In addition to practical concerns about ensuring the I'm generally opposed to versioning in the groupId or package name, but if we could go back and do the groupId change over again, perhaps I would have chosen io.dropwizard.metrics3, leaving io.dropwizard.metrics free for version 4.. Ah okay, that didn't occur to me.. I guess we have to.. I like this approach! Makes it possible for the few people that want this feature without adding any cruft.. LGTM. Looks good to me! Thanks!. I don't entirely understand the point of this. In either case we're catching an logging the exception, right?. Thanks for explaining, I missed the RuntimeException!. I think I understand, since we now always close the socket after reporting a batch of metrics, it doesn't make sense to wait for the next connect call to close the DatagramSocket?. Something resembling this is planned for v4. Let me take a look at it\ntomorrow and I'll see if it's a good fit.\nOn Sat, Feb 25, 2017 at 6:11 PM Chris Lohfink notifications@github.com\nwrote:\n\nWhy not just make a custom reporter that pushes the metric to the\nlisteners? Then there wont be any broken apis and no changes needed in\nmetrics core.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/1091#issuecomment-282519451,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAHkbyHprQuERJQcFoiuX8xpvbvSzT7kks5rgLU2gaJpZM4MMJZ7\n.\n. After thinking about it some more, I don't think this is necessary. Anyone that wants to use, say, metrics-httpclient @ 3.1.3 would specify that version, then also specify metrics-core and metrics-adapter @ 4.0.0, then metrics-httpclient would interact with the backwards compatible API exposed by metrics-adapter. Am I wrong?. Didn't mean to close it, sorry!. Ah yea, that would be a problem. Probably wouldn't affect more than a couple people, if that, but the groupId change could be preferable to causing this problem for anyone. Another possibility could be to make one final release of Metrics 3.x using the groupId io.dropwizard.metrics3, for the couple of people that encounter the scenario you've described, they can add a dependency on io.dropwizard.metrics3:metrics-httpclient to project C.. We might as well just revert #972, since toArray still results in copying the backing array.. Thanks!. It appears there are one or more non-breaking spaces in the file:\n[ERROR] /home/travis/build/dropwizard/metrics/metrics-core/src/main/java/com/codahale/metrics/ThreadLocalRandomProxy.java:[38,1] illegal character: '\\u00a0'. Need to pull into 3.2 branch as well.. I would have suggested adding it as part of 3.2 and letting users opt into it, and then replace the other one in 3.3 or 4.. I didn't merge, but only because I didn't want to screw up the release @arteam was planning! Just waiting for him to review and merge!. Thanks!. Hi Kevin,\n\nThanks for reaching out!  We can certainly discuss this as part of Metrics 4.  Let me read the documents you've linked and get back to you within a couple days!\nRyan. I'm afraid this can't go into 3.2, we (mostly) follow semantic versioning, so we can't change the API without going to 3.3 or 4.0.. @ravindra9966 what are you using to scan for the annotations and proxy the controller instance?  That's where the issue would have to be raised.. This implementation is not thread safe.  At an absolutely minimum the reservoir field must be volatile.  I might recommend an alternate approach, which would be to copy and modify UniformReservoir such that the getSnapshot method also resets the count field at the end of the snapshot.\n@Override\n    public Snapshot getSnapshot() {\n        final int s = size();\n        long[] copy = new long[s];\n        for (int i = 0; i < s; i++) {\n            copy[i] = values.get(i);\n        }\n        count.set(0);  // added this line\n        return new UniformSnapshot(copy);\n    }\nThis isn't a perfect solution, as any values written between the beginning and end of the snapshot process may be lost, but that should be a very small window of time and it is already a lossy reservoir.  But it doesn't create any new garbage to be collected, and it doesn't add a new volatile read per value written.. This should be addressed in 4.0-maintenance, 4.1-development, and 5.0-development.. The only module that this would likely be applicable to would be metrics-jersey2, however as a dependency on rxjava isn't desirable, it's out of scope for the project.. Build fails with ScheduledReporter.java:[72,21] call to this must be first statement in constructor, this should fix it:\njava\n    this(registry, name, filter, rateUnit, durationUnit, Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(name + '-' + FACTORY_ID.incrementAndGet())));\n. There are a number of lines like this which haven't changed except for the insertion of some spaces. Could you fix these and make sure that all other method invocations don't contain spaces except after commas?\n. Details should default to null\n. Should be unhealthy for consistency\n. Do we need to use the Builder internally? Can we keep the old constructor for use internally?\n. Maybe details should be 'attributes' or 'properties' instead?  And I think this method should be add(Detail/Attribute/Property) </bikeshedding>\n. The problem I have with it is that it allocates memory that we really don't need to allocate. Yes, it's a small amount of memory (my math says ~104 bytes), but it's also very easy to avoid doing it.\n. Sorry, what I meant was should be unhealthBuilder. But yea that name isn't awesome either. Maybe it's just builder(), the builder defaults to healthy, and calling unhealthy(), healthy(false), or error(Throwable) on the builder sets it to unhealthy.\n. I think we can be pretty sure that we won't add any new fields to Result after this. My concern again is that we're allocating additional memory that will require later garbage collection.\n. I'm actually fine with the method name now.\n. The issue I have with merging this to v4 is that in v4 all of these lines will have been removed. Instead of each reporter being responsible for selecting which values will be reported for a particular metric, the reporter will either be provided with a collection of measurements or will iterate over the measurements provided by a metric. The effort to update all reports with this logic will be wasted.. Agreed, we could do that for 3.2. I think this should be ThreadLocalRandomProxy instead.. Lets rename this to current, just to be consistent.. The address thats referring to is the local variable address, not the shadowed field address. It's confusing. But we never write to the field address if the class was initialized with a hostname, so the hostname will always be re-resolved (at least we will attempt to reresolve it, Java's DNS caching could be screwing that up).. ",
    "himanshug": "@ryantenney : problem with exponentially decaying reservoir is that if no new data comes in, it will keep on giving the same numbers all the times. For example, let say you update a timer with 5 and 7 (then don't put anything at all) , then no matter when you see (even after x hours), timer will still show the average to be 6 which is not representative of last 5 mins by any means.\nso, it works only if data is arriving all the time.\n. also, what will be your suggested workaround if not an implemented solution.\n. ",
    "mohit-gupta": "I'm facing similar issue while migrating from Yammer 2.2.0 to Codahale 3.0.2. In my use case, need to calculate the exacts event-counts and time average in a specific period of time. \nHad been using the reset/clear methods as supported by the earlier version ( yammer ). But the updated library does not support these methods. So, what's the suggested workaround now? Shall I remove and register the metric after every interval?\n. @ryantenney  thanks for the quick reply. Couple of things:\n1. SlidingTimeWindowReservoir higher memory requirements has it keeps all the measurements in the window in-memory which becomes unacceptable at large number of events. Also, just need mean-time  during the period. \n2. Counters also don't have reset operation. \nDoes it makes sense to use AtomicLong for counting and own implementation for mean time ( just need to keep sum and event-count in memory)  and register them in MetricRegistry as Gauge. This way they can be reset after the interval. \nAlso, intrigued to know why the reset operations were supported before but not how. Concurrency issues should have been there before as well. \nThanks in Advance!\n. @codahale @ryantenney  would appreciate any help!\nthnks \n. ",
    "tguzik": "Is the real requirement to reset the registry or just to get the deltas of the values between two points in time?\nIf it is the latter then I guess that the quick'n'dirty solution would be to compare immutable snapshots of the registry from two points in time. While this could work a-ok for simple values (Counters), there would have to be a more elaborate way to handle values based on Reservoir.\n. @victor-prp Please do send that test. Thank you.\n. My guess is that either opening a pull request with the new test or creating a small repo would work best.\n. These are in the Sonatype Snapshots repository: https://oss.sonatype.org/#nexus-search;quick~io.dropwizard.metrics\nIf you are doing normal development then you don't need to download it from Sonatype - just make sure you're doing a reactor build.\n. I guess that a viable alternative would be to publish this healthcheck as a separate package on Central. The downside is that it would have to be maintained separately.\nby the way, i guess it would be nice for the healthcheck message to also print elapsed time it took to execute... and probably the ability to time out after set period of time. Inclusion of a plain, old javax.sql.DataSource healthcheck would be nice too.\n. Related: #481 and #616 \n. IMVHO if these disconnects are caused by something outside of the library, then a custom reporter would be a better fit.\nBy the way, have you been able to determine what was causing these disconnects? I mean, was it the library, OS, network hardware or anything else? Two minutes of a service being dead should not happen in PROD.\n. Not to bash on the idea, but this change introduces thread safety issues: \n- If the Timer is given to multiple threads, random one (well, first one to pause) will explode with IllegalStateException. Timer currently is immutable so the users don't have to care where the instance was created.\n- If the Timer is given to another thread the values in pauseTime and idleTime fields are not guaranteed to be visible - this could be worked around by marking fields as volatile . \n- Methods #pause() and #resume() have subtle data races.\nPerhaps creating a wrapper around Timer (PausableTimer perhaps?) or a child class would solve your issue without breaking backward compatibility?\n. Perhaps it's not much and should be taken with a grain of salt, but the number of usages could be an useful indicator here: \nhttp://mvnrepository.com/artifact/io.dropwizard.metrics\nNote that this only shows public projects that were uploaded to Maven Central. \n. I'm not sold on the weak reference idea honestly. While i don't use them myself, some workflows may be generating the metric names at runtime without storing a hard reference (think generic endpoint metrics for a Jersey/JAX-RS interface), which may lose the data the user cares about when/if garbage collector decides to remove the metric.\nPerhaps it would be better to let the user control this process - let them mark that a certain metric is allowed to be auto-removed if not used for a set period of time? Using your example it would be like using Guava's CacheBuilder#expireAfterAccess(long,TimeUnit) instead of a WeakReference. HTTP 4xx return codes are classified as \"client errors\". Since the problem lies on server side, wouldn't it make more sense to return 501 Not Implemented instead?\n. ",
    "roytruelove": "+1 on this.  Very sad but I can't use this library without the ability to reset.\n. ",
    "wrprice": "+1\n. ",
    "amanhigh": "After reading all responses i see only way to reset is using some or other hack. A Simple Counter which resets after reporting data or fixed time interval becomes difficult to realize.\nOne way is described here.\nhttp://evertrue.github.io/blog/2013/10/14/resettable-counters-with-codahale-metrics/\n. ",
    "jmason": "There's another workaround, BTW.\nIf the desire is to zero Histograms and Timers after each report, this can be accomplished by using the HdrHistogramResetOnSnapshotReservoir from https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir/ ; this is pretty clean.\nAlternatively, if you want to reset counters, another way is to subclass the desired Reporter class, use that subclass in your own app, and add an override processCounter() method which uses:\nlong count = counter.getCount();\n        // report the value in the usual way\n        counter.dec(count);  // reset the counter for the next iteration\n(pretty similar to @amanhigh 's suggestion, but without the creation of a Gauge.)\n. 'There is for example the ScheduledReporter::report method, but then resetting the state of stats at that stage would mess up any other reporters listening on the same MetricRegistry...'\nYeah -- that's a limitation we've chosen to accept in order to be able to do this (we're using a StatsdReporter which delivers to statsd, which requires deltas rather than absolute values).  It would be nice to come up with an approach that didn't bring that limitation.\n. Any chance this could be merged? I'd love to see sampling become feasible with core Metrics, instead of having to create my own entirely separate wrapper class which acts as a sampling facade.\n. There are some known issues with sampling in the Metrics\nExponentiallyDecayingReservoir implementation: this mail goes into some\ndetail.\nhttps://groups.google.com/forum/#!msg/mechanical-sympathy/I4JfZQ1GYi8/ocuzIyC3N9EJ\nOn Wed, Sep 10, 2014 at 9:22 AM, jugglingcats notifications@github.com\nwrote:\n\nWe sometimes see a higher time reported for the same percentile (eg. 99th)\nfor the inner call than in the outer call, for the same metrics dump. This\nseems counter intuitive -- but again is this something to expect due to the\nsampling approach?\nAm hoping to look some more at the pause/resume option shortly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/605#issuecomment-55084817.\n. To clarify, a correct fix would be to keep the (String) host and (int) port around, and only resolving to an InetSocketAddress immediately before connect time.  InetSocketAddress performs DNS resolution only once and therefore will not adapt to the graphite server's DNS record changing or being temporarily unavailable.\n. I think persistent connections should be OK; in all the failure scenarios I can think of where the IP would be re-resolved to a new address, that implies that the old connections will eventually expire due to retransmits of the TCP packets failing to receive an ACK (e.g. http://www.pcvr.nl/tcpip/tcp_time.htm).\n\nIt's pretty much SOP in my experience when performing a server migration to shut down, or at least restart, the carbon-cache/carbon-relay service on the old server, to ensure old connections are \"flushed out\".\n. Newlines for sure; they are used as a line separator in the text protocol: http://graphite.readthedocs.org/en/latest/feeding-carbon.html\nI'd suggest sanitising anything that isn't healthy in a UNIX filename, so any control chars too.\n. +1.  This'd be pretty valuable -- we found the same thing, and filtered out a few attributes server-side to reduce space/load (median, 75th percentile, std dev to be specific).  it'd be neater to avoid sending them in the first place.\n. would moving the \"socket = null\" statement to before the flush() work around it?\n. yeah, that makes sense.\n. Agreed.  The pattern I tend to use for this is an AtomicInteger variable to measure concurrency, recording into a Histogram -- this gives min/max/mean and, importantly, percentiles.\n. Yep, sounds a lot like #178 -- although in this case, it would be a different filter for some Metrics vs others, which is slightly different.\n. btw lemme know if you'd like a pull request for this -- I'm keen to help out, since we have a bunch of related hacks in production I'd like to clean up ;)\n. if a metric-recording event suddenly starts happening more frequently than usual, this risks exceeding the bandwidth available for the listener (or the upstream service ie. statsd).  It may be a good idea to have some way to drop limit-exceeding updates from the stream, and/or support approximation or sampling.\n. :+1: from a random watcher here -- we do this in our wrapper for Timer.Context and it's really nice.\n. Unfortunately, the graphite protocol is one-way -- writes only, with nothing for the client to read, as far as I know.\nBut shouldn't the write() calls at https://github.com/dropwizard/metrics/blob/068821a9798ddf81c4fd457b8fe1df09a0a99e22/metrics-graphite/src/main/java/io/dropwizard/metrics/graphite/Graphite.java#L135 be throwing IOExceptions when the socket is in CLOSE_WAIT?\n. actually, looking at that stack trace and the first comment, it looks like the problem is that it is catching and logging that exception -- but not triggering a reconnect when that occurs.  Is that correct?  Potentially catching a SocketException and closing the socket in send() would be an ok workaround.\n. I think EDR makes a little more sense if you are using a Reporter which doesn't write to a time-series-oriented store -- if you poll a JMX reporter, then seeing a value which represents the past N minutes is valuable.  However if you are reporting to something like Graphite, which has its own concept of a time dimension to every recorded data point, then resetting in line with that cadence makes more sense.. ",
    "jan-molak": "@jmason - thanks for your suggestion, Justin. We're facing the same difficulty with gauges and counters being reported to the db even though their state hasn't been updated (ie. the client reporting them is down).\nI can't see the processCounter() you're referring to in the 3.1.0 code base, could you please point me to the right place?\nThere is for example the ScheduledReporter::report method, but then resetting the state of stats at that stage would mess up any other reporters listening on the same MetricRegistry...\nIt's possible to add a ResettingReporter that would affect the state of the MetricRegistry when it's called, but this would result in similar synchronisation issues as described above. \nIt looks like every reporter is running on a separate thread, and with a separate polling schedule - which gives @codahale more flexibility (you can have as many reporters as you want and don't need to care about their schedule), but takes away the control over the process.\nI think the reason why Etsy's statsd supports resetting metrics upon a flush is that because the way they've implemented it it's the \"MetricRegistry\"that's in control, rather than the reporters. Their equivalent of MetricRegistry sends a flush event to all its listeners, and then resets the metrics.\nThis way you don't have the flexibility of running reporters with different polling intervals*, but you can make sure that if the metric hasn't been updated within a given interval - it wouldn't be (incorrectly) reported to whatever db you're using.\nThinking about it, it seems like it might make sense for something to look after the state of the MetricRegistry and periodically clean up the state of metrics that haven't been updated recently?** Although this would probably result in synchronisation issues anyway.\nAlternatively, each Reporter could receive a snapshot of state of the MetricRegistry with metrics cleaned up according to it's own flush interval. This way in the ScheduledReporter rather than getting the data directly from the MetricRegistry:\njava\n    public void report() {\n        synchronized (this) {\n            report(registry.getGauges(filter),\n                    registry.getCounters(filter),\n                    registry.getHistograms(filter),\n                    registry.getMeters(filter),\n                    registry.getTimers(filter));\n        }\n    }\nwe could obtain a snapshot from somewhere first:\njava\n    public void report() {\n        synchronized (this) {\n            MetricRegistry snapshot = registry.getSnapshotFor(period); \n                  // the snapshot would filter out any stats \n                  // that haven't been updated within the specified period\n                  // This could also be configurable per reporter; as a template method for instance\n            report(snapshot.getGauges(filter),\n                    snapshot.getCounters(filter),\n                    snapshot.getHistograms(filter),\n                    snapshot.getMeters(filter),\n                    snapshot.getTimers(filter));\n        }\n    }\nThoughts? Would that be a sensible approach? Would you consider such pull request, @codahale, @ryantenney \n\n(*) well, you could have, but it would be tricky to implement\n(**) recently as in: take the lowest common denominator of all the reporters' intervals and delete all the metrics that haven't been updated within that period?\n. ",
    "DanielYWoo": "+1\n. ",
    "wyzssw": "I WANT RESET +1\n. TO COUNT DAU\n. ",
    "nailding1": "I ALSO WANT RESET \uff01\uff01\uff01\n. ",
    "mojodna": "...an hour and a half into fighting with Maven, I have to declare failure.  metricsd is configured to build that way and my maven-fu is sufficiently weak that I can't figure out how to include unpublished jars in a package in order to try it out.  Manually setting the CLASSPATH after using system scoped dependencies isn't working for me either.\nI'll take your word that it works (I see what the code does and agree that it ought to), although running the pre-mavenized build in IntelliJ (having seemingly updated the jars that it's using) still results in the old behavior.  It's probably still using remnants of the old SBT build (how I configured IntelliJ to work with Scala in the first place).\nIn any case, thank you.\n. Thanks.\nUsing the snapshot from there, containing (as bundled using mvn package and inspected with jar tvf):\n16216 Tue Jan 31 10:02:00 PST 2012 com/yammer/metrics/reporting/GraphiteReporter.class\n...it exhibits the same problem:\n04/02/2012 22:22:33 :: invalid line received from client 127.0.0.1:59814, ignoring\n04/02/2012 22:22:33 :: jvm.memory.memory_pool_usages.Tenured Gen 0.00 1328422953\n. Worked properly this time.  Thanks for holding my hand through the maven stuff.\n. ",
    "jdmaturen": "<3\n. ",
    "clakech": "+1, please pull request this ;-)\n. I used the annotation with success but I would like to know how to use metrics with spring-aop: How do I definie point-cut to add a Gauge on all find* method of my beans etc...\n. ",
    "kevinclark": "@samperman I'd use this too - if you want to pull it out to another project, I'd consume (and possibly have patches).\n. +1\n@samperman Thanks for doing this, Sam!\n. ",
    "samperman": "Coda,\nIf I created a pull request with just the changes to GraphiteReporter and AbstractPollingReporterTest would that work? I could then create my own pickle reporter locally that Kevin and I could use.\nsam\n. Cool. I'll work on setting that up. I looked for quite a while for a lighter java pickle implementation than all of jython with no luck. If I find something I'll try this again.\nthanks\nsam\n. Hey Kevin\nWith metrics 2.1.0 I was able to write an extension to add pickle support. Its available here if you wanted to try it out.\nhttps://github.com/BrightcoveOS/metrics-graphite-pickle\nthanks\nsam\n. This doesn't change what metrics are graphed... it just changes how they are published to the graphite server. It should reduce the load on busy graphite hosts.\nsam\n. The biggest reason I extended Graphite was to avoid changing GraphiteReporter. I suppose we could create an interface that Graphite and PickledGraphite both implement, that GraphiteReporter could use. Is that the refactor you were considering?\n. Hi, just checking in to see if there was anything else you want me to do on this PR.\n. Part of this pull request was to relax some of the visibility of the metrics internals... so its a little more than trivial to have a separate project (unless I copy and paste the entire Graphite class)\n. FYI, this breaks groovy users of this api.  Code like this appears to always call the Runnable version and doesn't return anything:\ndef result = timer.time {\n  doSomething()\n}\nA workaround is to modify the call to look like this:\ndef result = timer.time ({\n  doSomething()\n} as Callable)\n. ",
    "jtclint": "Would this solve my needing to send multiple data points for different graphs issue?  Or is this for past data?  I am looking to try to make the cost on our high load web servers minimal but still graph as much as possible for the visibility.\n. ",
    "martel": "Actually it's a simple fix. It should be enough to implement another interface - CacheDecoratorFactory. It could probably be  placed on InstrumentedCache itself as this interface adds a single method:\njava\npublic abstract Ehcache createDecoratedEhcache(Ehcache cache, Properties properties);\n. I have created and proposed a solution via pull request. \nHere's the relevant commit: d02a1216b7186990a7ad546e1e3c4ad8d1028f5a\n. Messed up with commits on github :(\n. I'm sorry for the mess in commits (I don't know how it happened). It will create a totally different module, so it should apply cleanly.\n. Okay, I have made some changes and will make another pull. Sorry for the mess :(\n. Sure, I'll get to it as soon as I'll have some spare time (at work or at home). Thanks, Coda. \n. I'm closing this as I'm going to prepare a new pull request on a clean checkout of upstream master.\n. And done - #239\n. Oh, thanks, Ryan! Overlooked that one. It should make things easier in the mean time.\n. I have some tests failing in this module:\n```\nT E S T S\nRunning com.yammer.metrics.sigar.tests.MemoryMetricsTest\nTests run: 7, Failures: 0, Errors: 7, Skipped: 0, Time elapsed: 0.003 sec <<< FAILURE!\nRunning com.yammer.metrics.sigar.tests.UlimitMetricsTest\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.002 sec <<< FAILURE!\nRunning com.yammer.metrics.sigar.tests.CpuMetricsTest\nTests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 0.002 sec <<< FAILURE!\nRunning com.yammer.metrics.sigar.tests.SigarMetricsTest\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.043 sec <<< FAILURE!\nRunning com.yammer.metrics.sigar.tests.FilesystemMetricsTest\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.002 sec <<< FAILURE!\n1 [pool-1-thread-3] DEBUG Sigar  - C:\\Users\\mminicki.m2\\repository\\org\\fusesource\\sigar\\1.6.4\\sigar-1.6.4.jar: Can't load this .dll (machine     code=0xc664) on a AMD 64-bit platform\n```\nThe \"platform\" is Intel Core 2 Quad (Q9550), BTW.\n. Go with the first to stabilize the build at least. It's not good to have different test results on different platforms but at least it will not fail the build where there's no problem. Is it possible to mark them as ignored at runtime?\njava\n @Before\n public void beforeMethod() {\n     org.junit.Assume.assumeTrue(someCondition());\n     // rest of setup.\n }\nAnd if anybody needs the tests to actually run on other platforms they will probably \"fix\" them themselves. \n. Thanks, Chris. Have fun on your holidays.\n. Fine with me, Coda. Thanks for letting me know.\n. @codahale - it's meant for the current 2.0 maintenance branch\n. Version 2.1.3, if that's relevant ;)\n. Thanks, Coda. I'm, glad it's fixed. I have a 404 following this commit url though.\n. ",
    "pron": "@codahale Nope. It's completely backwards compatible (at least for all types Metrics' MBeans methods were returning). See here. (Also, all of the JVM's internal MBeans are MXBeans. MXBeans are actually the \"modern\" and preferred way for writing MBeans).\nHowever, I did notice that the GangliaReporter assumes that gauges return an int type.\n. You can find more detailed information about MXBeans and how they easily allow for composite types here and here.\n. @codahale Sorry to bother, but will this make it into the next version? It's a tiny change.\n. ",
    "sheki": "Adding the xml file in my resources and using the annotations did not work for me. So more documentation would be really helpful. \n. Thanks. Works now.\nMissed the spring bean part. \n. Though I get a null pointer exception in my app now which looks like https://gist.github.com/1934852 \nCan you just have a look at it.Please, pretty please. \n. healthAsHTML is part of an interface.\nHere are my code snippets of HealthCheck inteface and its implementation.\nhttps://gist.github.com/1935181\n. healthAsHTML is part of an interface.\nHere are my code snippets of HealthCheck inteface and its implementation.\nhttps://gist.github.com/1935181\n-Abhishek Kona\nOn Wed, Feb 29, 2012 at 2:34 AM, Ryan W Tenney <\nreply@reply.github.com\n\nwrote:\nWhen I wrote this, I actually had ruled out the possibility of this error\noccurring...  Is healthAsHTML the method that you have annotated with\n@Timed?  Could you give me some more information about the class that this\nmethod belongs to?  It seems to implement an interface, does that interface\ndefine the healthAsHTML method?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/issues/169#issuecomment-4225453\n. Annotating the method in HealthCheckImpl does not time the method and no stats are collected.\nI already had annotated asJSON method in the Impl but no stats are collected for it. \n. Ok my bad. The data is getting collected, it is available as a JMX Bean, but to get the data out on Graphite, do I need to configure something else in the bean?\n\nRight now I am initializing the Graphite Reporter in code and not in XML.\n. Looks like I cannot initialize the graphite reporter in XML, how Do I access the registry defined in XML in Code?\n. Right, this worked for me. but get a lot of Null Pointer errors. The @Timed annotation can be safely used in the higher Layers of Jersey\n. ",
    "AvihayTsayeg": "Sorry you are correct, when using the idea(intelij) it is keeping failing (it seems to be some security issue)\nwhen running directly on tomcat it is working fine.\nBTW\nwhen using idea with servlet-api:2.5 it is woeking fine.\nThx, Avihay\n. ",
    "pdoubleya": "This appears fixed for the \".count\" in Meter, but not for the moving averages? See com.yammer.metrics.reporting.GangliaReporter#processMeter. Why are mean and 1/5/15-minute not using the new unit string?\n. ",
    "eonnen": "If I'm reading the related PR correctly, the desired implementation is not metrics-guava but something else. Can you comment on what that should be so I can implement it?\n. ",
    "epugh": "So I am trying to also instrument a Guava cache, and I'm trying to understand what's available.  Is this just a 1 liner type of code that could be in a readme?  Versus needed some sort of complex jar?\n. ",
    "paulfairless": "Did anybody find an example of how to do this?\n. ",
    "zkendall": "For starters guava's cache keeps track of it's own stats. You can call cache.stats() to get them. Then just map them to the metrics collector of your choice.\n. ",
    "cb372": "Thanks, I'll take a look next week.\n. I've updated my code on a different branch, so I'll open a new pull request.\n. Note that this is kind of related to my report #212\n. By the way, some simple cleaning of the strings before using them in filenames would be wise. The group, scope and name might contain special chars such as \":\" and \"?\", which cannot be used in filenames on some OSes.\nI wonder if there's a handy util in Apache Commons or somewhere that can do this for us?\n. Ooh, sorry! I never tried running the tests on Windows. Thanks for the report.\nIn order to run the tests I download a jar from Maven Central and extract the Sigar native libs from there, but this jar does not contains libs for all platforms.\nThere are two easy ways that I could fix this:\n- add a JUnit rule or something to make sure the tests only run if Sigar can actually load on the given platform\n- manually add the native libs for all platforms to the Git repository (I wanted to avoid doing this if possible)\n. Ok I'll take care of it. Afraid I'm away on holiday right now, so I\nwon't be able to fix this until early next week.\nOn 2 May 2012, at 18:38, \"Micha\u0142 Minicki\"\nreply@reply.github.com\nwrote:\n\nGo with the first to stabilize the build at least. It's not good to have different test results on different platforms but at least it will not fail the build where there's no problem. Is it possible to mark them as ignored at runtime?\njava\n@Before\npublic void beforeMethod() {\n    org.junit.Assume.assumeTrue(someCondition());\n    // rest of setup.\n}\nAnd if anybody needs the tests to actually run on other platforms they will probably \"fix\" them themselves.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/233#issuecomment-5457395\n. OK, to be honest that makes a lot of sense. \n\nHaving to send you a pull request every time I needed to fix my own code was a pretty strange situation for all concerned. And since metrics-sigar depends on metrics-core, rather than \"contrib\"ing anything to it, it shouldn't really have been in /contribs.\nI'll set it up as a standalone project when I get around to it.\n. metrics-sigar is now available here: https://github.com/cb372/metrics-sigar\n. ",
    "bentatham": "Great!  So I'll throw away the PR #836 in favour of this approach?\n. Is this still planned for 4.0.0?  My idea in #837 is targeted for 5.0.0.  Would love to have something in place.  \nI'm happy to attempt a PR, if I have hope it will be looked at for 4.0.0.\n. @ryantenney @arteam Is the metrics-influxdb on master left out of 4.0-development on purpose, or just waiting for someone to copy it over?  If so, I can work on that.... Cool - I learn something new every day - never knew about String.intern().\n. Looks to me like the InfluxDbHttpSender already used org.apache.http.  \nWhy not use influxdb-java though - which is maintained by the influxdb developers themselves?  If it is not efficient enough, perhaps we could contribute back to that project instead.\n. To me, whether the Timer (or any other metric) locally aggregates or streams live should be independent of the interface contract of that metric.  In library code, you just want to \"record\" how long some activity took, etc.  Similar to logging, you don't care what appenders do with the messages in your code - just that you logged something - and the system decides at higher levels what to do with it (write to file, stream to ELK stack, etc).  Same here - you record a time, and if that gets aggregated with meters, etc or the raw value streamed out (assuming little to no performance impact on the calling thread), or both, then that is all good.   It allows us to decide later what to do with the metrics we report when we're actually running the system instead of when we're writing the code.\nI don't think anyone would suggest doing network IO to stream out a metric on the calling thread -- IO should be batched up (I like the way influxdb-java does it).  And there is plenty of overhead in doing the aggregation too (lots of memory, synchronization, etc) that has performance hits too.\nGetting back to the original proposal of this issue by @ryantenney, I like the idea of an MetricEventListener interface.  I would take it one step further, and make the current \"aggregating\" implementations be a listener as well - in other words, the update, tick, mark, etc methods of the metric classes would just notify their listeners and that's it.  Then the user has complete control over what they want - aggregating vs streaming vs whatever else they want to implement.  To give full flexibility, we could provide both synchronous and asynchronous listeners within the metrics framework, so the metric library would take care of the queue/threading for the async case (for listeners that might need a bit more time to run, IO, etc).\nDoing it this way also allows turning off metrics completely, which may be useful in some systems to reduce overhead without having to change library code.  Again, I envision this like a logging api.  Wouldn't it be great if there were some standard \"metrics\" api (like slf4j) that lots of libraries could use, but then you configure in your application what to do with it (or nothing).  All it would take in the metrics library is to turn the existing Metrics classes (the ones with the mark, increment, update, etc methods) into interfaces and turning the \"get\" Metric interface into MetricEventListener's instead of the metrics themselves.\n. I think we agree more than disagree here.  We both want high performance as well as flexibility and abstractions.\nMy proposal is to keep the default behavior as it is, but make the current aggregations it into an observer pattern instead - so for the default case the extra cost is one extra method invocation (or perhaps an iteration over a set of listeners).  And that could likely be removed as well by making the whole listener thing optional to begin with.\nI agree in terms of performance.  I would never suggest doing IO on the calling threads.  And the rate of IO being called would also be configurable (as it is now in the reporters).    For my performance concerns, I think I was looking at the way the Snapshots are calculated on a Reservoir -- a sync block per array element in some cases -- but you're right, the performance of ticking a metric is the key thing to consider here, not the periodic reporting.  My bad.\n\nI would be surprised if users did not unwittingly do that to themselves if we give them the opportunity.\n\nI agree, but at the same time think we need the flexibility anyways.  We can't protect everyone from themselves.  That's why I propose making very explicit listener registrations of synchronous vs asynchronous listeners - with very clear javadocs explaining why and the importance of throughput, not effecting the application threads, etc.  And we could use a high performance queue (like disruptor from log4j2), but only enabled when there are actually some async listeners to worry about. \nIn the end, my needs were driven by just wanting to turn off the percentiles in a Meter, but keep other parts of the statistics.  And it has evolved into thinking about the overall architectural picture.  Overall, I've been very happy with metrics, just would like more flexibility to choose how it works based on specific requirements.\n. Yeah - I thought about doing it that way too, but was discouraged by the long list of per-metric-attribute methods.  I've tried to think of ways around that -- see #837 -- but for now, I'll change mine to do it your way.\nPerhaps I'll copy your MetricAttributeFilter and move it into metric-core so it can be shared amount all reporters, if desired.\n. Great!  I'll get started on something in my fork.  If not MetricAttribute, what name did you have in mind?  MetricValue?  The terminology is certainly overlapping -- these attributes are the metrics in the graphite world, whereas the dropwizard metric is a group of graphite metrics.  Obviously, I'm not suggesting we change the dropwizard definition of metric, but we just need to be clear in the naming and docs to avoid confusion wherever possible.\n. @ryantenney what is the status of java8 on metrics?  Looks like you still support java7, so can't use java8 features.  The reason I ask is due to default methods...without them, I think I'll have to use some abstract classes to provide default impls of these new methods (which I loathe, but don't see a better way).  This is particularly true for all MetricSets and Gauges, which there are many.\nAlso, what is you preferred terms for what I call a MetricAttribute above?  could use MetricField.  I saw reference to a measurement in other issues.  I don't like either of those words since they overlap directly with influxdb terminology, but are not consistent - hence why I used attribute.  But I'll use whatever name the community or maintainers decide, of course.\n. You can see a  first pass of this feature here (without filtering in reporters yet).  I'd like some feedback before continuing, as this is my first contribution to the project - I want to conform to any standards I'm not inferring from existing source (do you have an eclipse formatter, for example?), and it is a fairly large and disruptive.\n. Here is a similar, but different approach that uses more generics to perhaps make it better - but some may find it too complicated.\n. I've been working on this change, and if we do plan to move to Java 8, I'd like to know sooner rather then later, because some of the issues I am trying solve would be dramatically helped by lambdas and default methods.  If not, I'll persevere in Java 7, but if yes, then I'm happy to make the pull requests to enable Java 8, and then some more pull requests to do some cleanup of the existing code to take advantage of the Java 8 features, followed by finishing off this issue as well.\n. What did you have in mind here?  \nLooking at the class members themselves, we could make a different implementation to remove the reference to an empty map of tags in most cases (and use static factory methods instead of the constructors).  That seems small, but I suppose it does add up across 100s of metrics.\nWere there other static method impls you were thinking of improving?\n. (looking at 3.2-development) I see there is a test case UniformSnapshotTest.worksWithOverestimatedCollections.  This seems like a pretty white-box test to ensure that the constructor does not rely on the size() method of the collection at all.  I'm trying to understand where that case happens?  Is it a concurrency issue from the ConcurrentSkipListMap values being passed in from SlidingTimeWindowReservoir?    Looking at the impl of the values collection it gives for toArray, that is not thread-safe either, so I'm not sure what extra value this test provides in the real world.\nLooking at commit history, this was all done as part of a big metrics-core refactor back in 2013, so no guidance given there.\n. Ok with me.  I would have said never copy in the constructor, but at least\nthis makes it explicit.\nOn Tue, Jul 5, 2016, 10:28 PM Ryan Tenney notifications@github.com wrote:\n\n@bentatham https://github.com/bentatham Thoughts on the change in\nb77971a\nhttps://github.com/dropwizard/metrics/commit/b77971a26169b176331fd5f75828849fc365cc73\n?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/978#issuecomment-230656192,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAj7JI_2FJQNIET4P2swfxA1aKz5sOeYks5qSxLWgaJpZM4JFsz1\n.\n. @arteam : ok -- I'll work on that.  What happened to the support for \"tags\" (like was in MetricName, etc), which I assume was designed to handle different data models, like influxdb.  Is that still on the plans on some branch?  Is there a roadmap document somewhere about the different versions?. Also, calling an non-final method (like buildMap) from the constructor is a generally frowned upon practice - jcip, effective java, and many other sources talk about it.  It would be better to pass in a Supplier<Map<String, Metric>> to the constructor.. \n",
    "javasoze": "that's weird. I reset to the lastest of development branch before adding this...\n. ah i see....\nI will send a separate patch then.\n. ",
    "Erkan-Yilmaz": "I see, I just looked at:\nhttps://github.com/codahale/metrics/blob/master/docs/source/getting-started.rst\n. ",
    "mjg123": "Nice one, thanks.\n. ",
    "organicveggie": "Ugh. I hate when things sneak in like that.\nI'll move it to a branch without the metrics-spring modification and resubmit.\n. Bah humbug. Thanks for catching that.\n. dillera: Hrmmm. Maybe I'm missing something, but I feel like they're two different things. Unless I'm misunderstanding things, metricsd is a drop-in replacement for statsd, bucky, etc; it's not a drop-in replacement for coda-hale/metrics. In our case, we're already using coda-hale/metrics in a bunch of webapps and we want to export the metrics data to a statds system. We happen to be using Bucky due to it's collectd integration, instead of metricsd.\nSo, while we could theoretically replace Bucky with metricsd, we still need a way to get the data from coda-hale/metrics. This pull request (once it's properly rebased) extends coda-hale/metrics to push data from metrics over UDP to a statsd recipient.\n. I really managed to screw up my fork, so I'm going to close this pull request, create a new fork and resubmit a clean pull request.\n. I missed a bunch of changes in metrics-core when I recreated this pull request. I have fixed the problems and everything should build correctly with Maven.\n. pcn: Thanks for confirming this. As far as the raw data type, I'm not quite sure I understand the difference between \"raw\" and a normal \"gauge\" metric. Could you explain it a bit more? I think the average type makes more sense to me. Neither are particularly necessary for me because a large portion of our data is coming from codahale/metrics, where we already have weighted moving averages.\nHowever, I have no problem with adding support to the metrics-statsd package to export as raw or average where it makes sense.\n. Ahhhh. That's make a lot of sense. And yes, that would be very useful. I'll probably add the same functionality to Bucky (which is what we're using for statsd).\n. What about using a POSIX timestamp e.g. seconds since Jan 1 1970? Bucky is written in Python, which can handle POSIX timestamps. codahale/metrics is written in Java/Scala and can easily handle POSIX timestamps as well. Not sure about JavaScript.\n. The code for this has moved to a new project: https://github.com/organicveggie/metrics-statsd\n. ",
    "agourlay": "The typo \"The metrics-webapp module\" --> \"The metrics-web module\" is still there.\n. ",
    "jhalterman": "It actually occurs the first time I run that test for some type (such as if I rename T to something else). \nIt looks like JMXReporter.registerBean is called twice for the same objectName. Here are the two call stacks:\n```\nThread [main] (Suspended (breakpoint at line 451 in JmxReporter)) \n    JmxReporter.registerBean(MetricName, JmxReporter$MetricMBean, ObjectName) line: 451 \n    JmxReporter.processTimer(MetricName, Timer, JmxReporter$Context) line: 423\n    JmxReporter.processTimer(MetricName, Timer, Object) line: 1 \n    Timer.processWith(MetricProcessor, MetricName, T) line: 214\n    JmxReporter.onMetricAdded(MetricName, Metric) line: 386 \n    MetricsRegistry.notifyMetricAdded(MetricName, Metric) line: 516 <----\n    MetricsRegistry.getOrAdd(MetricName, T) line: 491 \n    MetricsRegistry.newTimer(MetricName, TimeUnit, TimeUnit) line: 320\n    TimedInterceptor.forMethod(MetricsRegistry, Class<?>, Method) line: 26\n    TimedListener.hear(TypeLiteral, TypeEncounter) line: 27   \nThread [main] (Suspended (breakpoint at line 451 in JmxReporter)) \n    JmxReporter.registerBean(MetricName, JmxReporter$MetricMBean, ObjectName) line: 451 \n    JmxReporter.processTimer(MetricName, Timer, JmxReporter$Context) line: 423\n    JmxReporter.processTimer(MetricName, Timer, Object) line: 1 \n    Timer.processWith(MetricProcessor, MetricName, T) line: 214\n    JmxReporter.onMetricAdded(MetricName, Metric) line: 386 \n    MetricsRegistry.addListener(MetricsRegistryListener) line: 442  <----\n    JmxReporter.start() line: 446 \n    JmxReporterProvider.get() line: 19\n    JmxReporterProvider.get() line: 1 \n```\nIt also occurs during runtime, such as when a db health check is run:\nWARN  [2012-03-24 22:46:55,278] com.yammer.metrics.reporting.JmxReporter: Error processing sql:type=raw,name=___Health_Check____SELECT_1\n! javax.management.InstanceAlreadyExistsException: sql:type=raw,name=___Health_Check____SELECT_1\n!   at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:453)\n!   at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1484)\n!   at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:963)\n!   at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:917)\n!   at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:312)\n!   at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:482)\n!   at com.yammer.metrics.reporting.JmxReporter.registerBean(JmxReporter.java:451)\n!   at com.yammer.metrics.reporting.JmxReporter.processTimer(JmxReporter.java:423)\n!   at com.yammer.metrics.reporting.JmxReporter.processTimer(JmxReporter.java:16)\n!   at com.yammer.metrics.core.Timer.processWith(Timer.java:214)\n!   at com.yammer.metrics.reporting.JmxReporter.onMetricAdded(JmxReporter.java:386)\n!   at com.yammer.metrics.core.MetricsRegistry.notifyMetricAdded(MetricsRegistry.java:516)\n!   at com.yammer.metrics.core.MetricsRegistry.getOrAdd(MetricsRegistry.java:491)\n!   at com.yammer.metrics.core.MetricsRegistry.newTimer(MetricsRegistry.java:320)\n!   at com.yammer.metrics.jdbi.InstrumentedTimingCollector.getTimer(InstrumentedTimingCollector.java:53)\n!   at com.yammer.metrics.jdbi.InstrumentedTimingCollector.collect(InstrumentedTimingCollector.java:48)\n!   at org.skife.jdbi.v2.SQLStatement.internalExecute(SQLStatement.java:1303)\n. #225 is fine as long as the conditional check on newFile.createNewFile() in createStreamForMetric is removed. We shouldn't be throwing an exception just because a metric file already exists.\n. Yep - that's correct.\n. ",
    "diwakergupta": "Any chance of getting a 2.1.x release with this fix? The 3.0.0 ETA is unknown and @Timed annotations are pretty much unusable without this fix.\n. @codahale bump\n. > Use MetricRegistry#register.\n@codahale Yes, that's what I ended up doing. But are you opposed to grouping together JVM metrics under a \"jvm\" prefix? If so, I'd be curious as to why. Grouping related metrics seems like a good default. Besides, removing the prefix broke a bunch of our graphite dashboards (we expected breakages when upgrading major versions so this isn't a big deal) and will likely impact other Metrics users as well.\n. @codahale thoughts?\n. ",
    "erikvanoosten": "I get it. No worries.\nThanks,\n    Erik.\n. That's not nice, I expected better from GitHub's online editor.\n. I'll try again with a complete checkout.\n. This is the retry. I had to ask Github to remove erikvanoosten/metrics-scala from the codahale/metrics network (which removes the fork status). This pull-request was created from another fork.\n. If the maintainers agree, I can create a pull request to throw an exception from HealthCheckRegistry.register.. Thanks for merging so quickly \ud83d\udc4d . ",
    "ezbz": "it works fine from the classpath, if yammer won't add it then it's fine\n. Regarding configuration some users still prefer to use the xml-based configuration (centralized, decoupled from code).\nProviding a custom namespace which requires the user to define class=\"...Reporter\" definition kind of defeats the purposed of a custom namespace IMO (supposed to abstract the implementation details).\nRegarding the AOP classes I can move to a separate commit. There might be a performance impact but that comes with the nature of a generic method interception anyway (I can cache the MetricName creation with a ConcurrentMap implementation so it only gets create once per method name). Is there another alternative in metrics today to wrap third-party code with an AOP interceptor? (this is what we're using it for now).\n. ",
    "alexwinston": "As I mentioned this might not be a good fit but the idea is to expose all of your various configuration settings.  For example you expose your Guice bindings, type listeners, method interceptors, etc.  That way at a glance you can see exactly how your app is configured.  You can also see what databases you are connected to, how your logs are configured, what servlets you have mapped, mail configurations, topic and queue connections, etc. This information can actually change during a failover or disaster scenario and being able to monitor this and see everything at a glance is quite useful.\n. ",
    "jesseeichar": "I have made a pull request:  https://github.com/codahale/metrics/pull/228\n. ",
    "mattbishop": "This needs to be reopened as it is incomplete. The POMs need to have the maven-bundle-plugin turned on, much like the jar plugin. Setting the project packaging to 'bundle' is only half the change. For every POM that has bundle set to project packaging bundle, the following snippet needs to be added as well (except for the ones for ganglia and graphite, they are fine as fragments). \n<plugin>\n            <groupId>org.apache.felix</groupId>\n            <artifactId>maven-bundle-plugin</artifactId>\n            <extensions>true</extensions>\n        </plugin>\n. That's probably best as I can verify that it works in felix. Thanks!\n. It looks like the pull request from 7 months ago did not make it into 2.1.3. (See https://github.com/codahale/metrics/blob/v2.1.3/pom.xml). Any idea why that would be?\n. It appears so. From the history above:\ncodahale merged commit 9630727 into codahale:master from oconnor0:master 7 months ago\nAnd then if you look at https://github.com/codahale/metrics/blob/master/pom.xml you will see the maven-bundle-plugin configured.\n. Can you give me a rough idea about 3.0's timeline? Are you thinking days, weeks, months? I need to decide what to do with a story around metrics in our product and if the timeline is good I can wait, otherwise I have to go another direction.\nThanks!\n. A point release would be good to validate the build gets these headers in actually. \nThanks!\n\nMatt Bishop\nOn 2012-11-10, at 1:45 PM, Coda Hale notifications@github.com wrote:\n\nProbably a week or two.\nIf it's a big deal, I can push a point release.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have verified that 2.1.4-SNAPSHOT has the headers and functions as expected in my OSGi application.\n\nTHanks!\n. Have a look at oconnor's original pull request commit:\nhttps://github.com/codahale/metrics/commit/9d151f64ed3dc58f662e91a7fee4eb1e737076ad\nNow, I don't know if that will keep Maven Enforcer happy or not but OSGi is OK with using the bundle fragment approach.\n. I agree, that is the best solution. OSGi fragments are meant more for configuring things like database drivers and such.\n. The way the Ganglia and Graphite plugins solved this problem OSGi-wise was to mark themselves as fragments that attached to the metrics-core package. Perhaps Servlet could do the same?\nIdeally the different jars wouldn't export the same packages, I agree.\n. ",
    "toelen": "+1 for a point release\n. I just noticed that the Metrics.defaultRegistry() disappeared. This make it rather inconvenient when there is no global lookup method. Creating a registry somewhere and passing this along is quite the hassle.\nA static method like Metrics.getRegistry(\"default\") would work, creating a new registry when is does not exist yet?\n. ",
    "francois": "This is 11 months old. I tried to merge d6da72608223d4db58fd6625e89c2cef13f45934 against 2987c00750240fa0739fbe1451228744fdb03286 and got tons of conflicts. The code base has changed a lot between then and now. I checked the conflicts: some are trivial, others require a bit more thought.\n. I merged with a trivial conflict against master / 2987c00750240fa0739fbe1451228744fdb03286. I do not use JAX-RS so I won't comment on the code itself.\nI would reword the commit message to have clear one-line summary, followed by the enumeration.\n. How would that be done? Is the plan to have multiple branches? Or have two folders, one per version? Are there other best-practices in Scala?\n. This merges cleanly against 2987c00.\n. I think these are two different things. The bugfix should be one pull request while the JsonReport should be a separate one.\n. ",
    "stevenschlansker": "Rebased, this one okay?\n. Seems that 4.0 could be Java 7 at least, Java 6 has already been EOL for almost 2 years...\nBut that still would not allow us to use default methods.\n. If it is really that bad, you could just give the method a different name so it is not an overload.. ",
    "dillera": "Metricsd already uses metrics- we are using it - so do you have a moment to explain what this would add to metrics?\n. So, if you are using this in conjunction with a back-end like Graphite, this information is redundant. You know what is a counter and what is a gauge.\nOf course, if people are using metrics for other systems besides Graphite, I'm sure that this would be useful information. would it be possible to accept a merge that lets you enable or disable these strings for metric names?\n. ",
    "comcastrong": "ok. I also fixed this issue https://github.com/mojodna/metricsd/issues/2 by adding the new ValueGauge class. By the way, what do you mean optimization here? Do you mean most people prefer to use the RatioGauge, PercentGauge?\n. That way cannot get the latest gauge value. Please refer to https://github.com/mojodna/metricsd/issues/2 . In MetricsRegistry,\npublic <T> Gauge<T> newGauge(MetricName metricName,\n                                 Gauge<T> metric) {\n        return getOrAdd(metricName, metric);\n    }\nIt will return the first metric always. The metrics value never get changed.\n. The gauge itself cannot reset the value to a new value if there is way to change the value inside the existing gauge in the registry. That's why I have to add this to the class Metrics\n```\n/\n     * Given a new gauge Long value, registers it under the given metric name.\n     \n     * @param metricName the name of the metric\n     * @param value    the gauge value\n     * @return {@code ValueGauge}\n     /\n    public static ValueGauge newGauge(MetricName metricName,\n                                        Long metricValue) {\n    ValueGauge gauge = (ValueGauge) DEFAULT_REGISTRY.newGauge(metricName, new ValueGauge());\n    gauge.set(metricValue);\n    return gauge;\n}\n\n```\n. It's your decision. The issue I linked to is not related. I miss understood it. The problem I'm trying to solve is that the gauge registered in the MetricsRegistry should be able to change the value from outside. If it use the optimization way you provided to instantiate a new gauge instance by override the value method. The gauge value in the MetricsRegistry never get changed because it always returns the first gauge instance with the first gauge value.\nThanks\nYongjun Rong\n. Another question, we found in metrics, it will attach \".value\" for gauge and \".count\" for counter in the end of the graphite stats scheme name. Like for example, when sending in \"jmx.test\", it will show up as \"jmx.test.count\" in graphite after it pass through the metrics. Can you please explain what the reason you want that extension string to be added?\nThank you.\n. ",
    "jglynn": "This enhancement is relevant to my interests.\n. ",
    "analytically": "+1\n. +1\n. ",
    "pcn": "+1 for what it's worth.  I'd be interested in this.  I'm also interested in being able to use the \"raw\" type with statsd that is https://github.com/etsy/statsd/pull/13 so that we can do our own summarization in the client, then send to statsd to reduce b/w and interrupt overhead.\n. It looks like this won't build via e.g. \"mvn package\".  How are you building this?\n. OK, that's what a friend and I thought last night when we took at look.\nI'll try to get this tested at the office.\n. Confirmed that this builds and seems to pass tests.  Do you have any thoughts on the raw and average data types I'm trying to get merged into statsd in https://github.com/etsy/statsd/pull/84?  Metrics is the use case for us - when data is already summarized by metrics at the source, we'd like to pass the already-summarized data in.  Is this something that you would find useful as well?\n. The main difference in the implementation of raws is that it opens up the option to e.g. pass in values that have their own timestamps.  The guage is updated in place, the raw is a list of values to be plopped directly into graphite.\n. Averages are (currently) less interesting to me but I didn't see a reason to exclude it from the patch I submitted.\nGlad to hear you like the use case, too.  We should talk about representing the timestamp so that bucky and statsd treat the input the same way.\n. That works.  I don't think that graphite covers sub-second timestamps, but the current implementation in statsd would accept that if the backend could use it.  \nCurrently the raw format is:\nPrefix.foo.bar.name stat timestamp|r\nCool!\n. ",
    "skastel": "Pull Request 262 attempts to address this:\nhttps://github.com/codahale/metrics/pull/262\nI'm currently using this change to integrate with Nagios and OpenTSDB.\n. ",
    "davemssavage": "Fair enough, I can see the logic of maintaining only the code that you're interested in. I'll watch to see if anyone else picks up the Guice integration.\n. ",
    "marshallpierce": "If you wish to re-submit the pull request to https://github.com/palominolabs/metrics-guice I'd be happy to take a look at it.\n. I maintain metrics-guice, so not really a direct help to you if you're a spring user, but what do you think about adding the abstraction of a factory that would let you control how a metric is created for a given annotation and method? Then you could inspect the method and look for any annotations you pleased , or do any other logic you wanted to determine what metric customizations you wanted to apply.\n. It depends on jsr305 annotations (@Nonnull and friends) and HdrHistogram itself. It uses SplittableRandom in benchmarks, but those could be subsumed by https://bitbucket.org/marshallpierce/metrics-reservoir-benchmark. It also uses a little bit of lambda syntax, but of course that could be reworked.\n. Could you give my alternate jersey2 integration a try? It should not suffer from this problem. https://bitbucket.org/marshallpierce/jersey2-metrics\n. Seems like this is a separate concept from a Timer, no? It would be nice to have a way to not incur this overhead for users of Timer that don't need this info. It's more analogous to a Counter anyway.\n. This uses EWMA, which is only valid for normally distributed values, AFAIK. I'm not enough of a statistician to know what the Right Answer is given the problem you want to solve, but I think EWMA isn't it.\n. This would be pretty expensive for frequently updated metrics, though (it allocates, for instance). While a useful feature, I'm not sure that it should be part of the typical Meter, etc, types since those are all about local aggregation and occasional publishing of batches of data. Perhaps this is a separate use case that deserves a separate set of types.\n. @pvalsecc EA is quite limited in its applicability in the JVM. I would be cautious (especially in a library like this, not a full service that can more tightly control its runtime environment) of relying on it, even if it turns out to be applicable in some setups.\n. @pvalsecc Not sure if it's intentional but you're coming off as a bit hostile.\nYou've made Timer.update bimorphic, which has a small performance cost, but you've also created the opportunity for people's measurement-gathering code to be arbitrarily slow because it calls all of the listeners inline. Generally it's best to try to separate the \"acquire the measurement\" path (which is presumed to be hot) from the \"do stuff with the measurement\" path to avoid perturbing the system being measured.\n. You're still conflating \"locally aggregate these things\" with \"stream them live to some other thing\". These are two totally separate concepts, and they're now hidden behind what looks like a Timer. \nIf you want to live-stream measurements to some other system, it shouldn't be in the Timer class (or any other existing metrics type).\n. I would not want a library that does this because it would be so unpredictable, but you obviously do and that's fine. However, it's a completely different thing than what Metrics currently does, and it would be pretty unkind to users to radically change the meaning of a well-established class. Doing IO on the calling thread is pretty much what this opens the door to, and I would be surprised if users did not unwittingly do that to themselves if we give them the opportunity. \nIf you want to have a separate set of classes for measurements that happen so infrequently that the performance considerations don't matter, I've got nothing against that, but I would much prefer to consume types that have known performance characteristics. I'm not sure what you're basing your performance numbers on but the current aggregation methods are very cheap indeed. LongAdder can handle hundreds of millions of updates per second for a Counter, and HdrHistogram is down in the several-ns-per-update realm too for Timers. Casually comparing this network IO overhead as if \"that's a problem too\" is, well, apples and oranges\nIf this were anything other than a library used to measure performance that therefore should avoid skewing the measurements itself, I'd be all for listeners and flexibility and abstractions. But, in this case, there is value in guaranteeing the high performance and consistency that we can achieve with local aggregation and occasional snapshots (ideally, deltas but that's another story).\nIt's conceivable that you could build something fast for streaming individual numbers (chronicle queue?), but it's unlikely to fare well against to lock xadd on x86, which is what LongAdder boils down to.\n. In my view, this sounds like you want the syntactic convenience of making one call and have it be both observer-style and plain-old-metrics style. AtomicLong, for instance, is not AtomicLongWithMaybeAnObserverAttached to it, because that conflates concerns -- regardless of the possible syntactic convenience of having one compareAndSwap() call inform some observer when it was called. The same applies here. If you want two different styles of functionality, and you don't want two method calls, then I think they should be wrapped in your own abstraction rather than bundling the functionality you want into the existing system at the cost of cohesion (and performance).\nIf you want one-by-one observer, you want a simple instance of the Observer pattern. RxJava may be suitable for your purposes, for instance. You don't need Metrics for that.\n. I took an approach similar to this for my new relic reporter because New Relic discourages using many custom metrics: https://github.com/palominolabs/metrics-new-relic/blob/master/src/main/java/com/palominolabs/metrics/newrelic/MetricAttributeFilter.java\nIt lets you filter each reported attribute of each metric type (and individual metric).\n. https://bitbucket.org/marshallpierce/jersey2-metrics should measure async responses correctly. I've got a test for it: https://bitbucket.org/marshallpierce/jersey2-metrics/src/326470d2bc4bb8863c535303523816ae897eb81d/jersey2-metrics-core/src/test/java/org/mpierce/jersey2/metrics/FullStackTest.java?at=master&fileviewer=file-view-default#FullStackTest.java-79\nIt should be pretty easy to drop in instead of the stock Jersey integration. Let me know if it's not :)\n. You're correct. Another issue is that it assumes a normal distribution, which for most things is not a good assumption. Latency in computer systems is almost never normal because you're not measuring some natural process (see central limit theorem, etc.). Might I suggest https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir instead -- see the links in its readme for more on why.\n. Hmm, sounds like there are several parts to this: \n- The default reservoir type is not applicable for many use cases\n- People may want to change the default type for their project\n- But if you do change the default type, you'd change it for everybody, including your dependencies -- maybe the ability to change the default should be scoped in some way.\nWhich artifact are you referring to? If you mean the hdrhistogram reservoir, its artifacts are published to jcenter. (It's like Maven Central, but more artifacts, better CDNs, and an easier developer experience for uploading.)\n. Maven central is a subset of jcenter, so that's expected.\n. Unfortunately, counting on method name won't always work like it did in jersey 1. Jersey 2 lets you do more complicated ways of applying logic that don't really have a useful method name, e.g.:\n```\n  final Resource.Builder resourceBuilder = Resource.builder();\n        resourceBuilder.path(\"programmaticResource\");\n    final ResourceMethod.Builder methodBuilder = resourceBuilder.addMethod(\"GET\");\n    // using a lambda makes jersey sad because it can't reflectively access the type\n    //noinspection Convert2Lambda\n    methodBuilder.produces(MediaType.TEXT_PLAIN_TYPE)\n        .handledBy(new Inflector<ContainerRequestContext, Object>() {\n            @Override\n            public Object apply(ContainerRequestContext containerRequestContext) {\n                return \"Such dynamic. Very resource. Wow.\";\n            }\n        });\n\n    final Resource resource = resourceBuilder.build();\n    registerResources(resource);\n\n```\nThat's one of the reasons I started my own jersey2 integration (https://bitbucket.org/marshallpierce/jersey2-metrics).\n. This is one of the options my project has; see https://bitbucket.org/marshallpierce/jersey2-metrics/src/9cf28f8e5292486449a17893915980bdee575f31/jersey2-metrics-core/src/test/java/org/mpierce/jersey2/metrics/RequestPathMetricNamerTest.java?at=master#RequestPathMetricNamerTest.java-75 for instance.\nThere is a performance cost to getting the path components from Jersey; I've been meaning to get around to filing a bug with Jersey to provide a less painfully slow way of assembling the path but haven't done so yet.\n. I take it back: upon more careful benchmarking, it looks like the performance cost of using the request path is pretty negligible. \n. I already have an HdrHistogram-backed reservoir implementation, btw. https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir may do what you need.\n. Ah yes, the pull model is quite problematic... You may find it easier to simply build your own Reporter that stores data and then expose data from there to Zabbix. This would make the allocation less painful, and mean you wouldn't have to change Reservoir semantics to support that. You could just use any old reservoir you like and implement your own custom stuff separately from what Zabbix forces on you.\nAnyway, one of my goals for v4 is a completely zero-allocation reporting pipeline, so let's hope in the future this sort of thing will be easier. :)\n. Yeah, I agree those are real problems -- my thinking is currently that all metrics should have their data extracted as deltas according to some schedule which are then made available to all registered reporters. But, in the meantime, could you not hack together a Reporter that does this under the hood and caches data for a short while so that when Zabbix asks for data X and Y separately, those data points could come from the same underlying set of data?\n. Closeable extends AutoCloseable, not the other way around, because AutoCloseable allows throwing Exception.\nThe Closeable imports can be removed now, right?\n. Why not just move this to an external project with a different lifecycle? It doesn't make sense for metrics to need to release a new version every time AHC changes its API.... Yes, but my point is that as it stands, metrics would need to release if AHC changed its API, which doesn't make a lot of sense. This would also probably make it easier for changes to get merged and shipped.\nI maintain several integrations with metrics that are external projects and it's been quite straightforward to keep up with the (rare) metrics API changes.. I looked up why those Serializer classes are considered to also be java.io.Serializable, and it turns out that Jackson's StdSerializer was made Serializable in this commit with comment \"minor javadoc changes\". This sounds like it was maybe accidental?\nThis makes me think that it may not be intentional to have that class be Serializable, and therefore we shouldn't give the impression in these subclasses that it is actually supported to use built-in serialization on them.\n. I think we should be sure that we actually intend to support serialization if we add code that would give the reader the impression that it is supported.\nI suspect that serializability is not actually particularly useful or relevant for these classes.\n. You may wish to look at https://github.com/palominolabs/metrics-new-relic (disclaimer: I'm the author), which looks like it already does pretty much the same thing, albeit with more configurability.\n. It may well be that closed socket detection is happening wrong, but it sounds like the real problem is Java's weird DNS caching behavior... see http://docs.oracle.com/javase/7/docs/technotes/guides/net/properties.html for relevant system properties, or http://www.rgagnon.com/javadetails/java-0445.html or http://stackoverflow.com/questions/1256556/any-way-to-make-java-honor-the-dns-caching-timeout-ttl for explanation. (from a quick googling)\n. Yeah, I'd try setting the TTL. But that doesn't mean you're wrong about socket detection.\n. If you use my alternate jersey2 integration, it's easy to do that, or any other policy (e.g. \"methods that end in the letter Q\", or whatever you want): https://bitbucket.org/marshallpierce/jersey2-metrics\n. This seems related to the thread \"Non-numeric Gauges?\" on metrics-user. I don't think health checks are a great fit as being part of this library, like the OP said -- what if there was a separate library for health checks and other stuff like this? Operationally useful stuff, sometimes live, sometimes not, and maybe it includes some annotated metric data (or not), but really it's just a way of saying \"expose this simple, structured-ish data in a way that I can easily expose over http or jmx or other things\". Which, I think, is a different role than \"calculate these numeric properties\". \n. If counting resource method invocations is what you're after, https://bitbucket.org/marshallpierce/jersey2-metrics (my alternate jersey2 integration) supports them.\n. It's a standalone project. You can use it as is.\n. I think this only achieves goal 1 (accurate reporting), not goal 2 (resetting). (FWIW I think that metrics should reset on every snapshot and it should be up to upstream things to decide to aggregate if they want.) You'd need to either change the metric internals for Counter, etc, to reset, or use regrettable hacks like the 'reset on snapshot' reservoir variant in https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir.\n. Yeah, the lack of ability to set a default is tricky (I used a separate map in jersey2-metrics https://bitbucket.org/marshallpierce/jersey2-metrics/src/ecfc46d072f905f2b1fa691edd4ad33ef17a4e6e/jersey2-metrics-core/src/main/java/org/mpierce/jersey2/metrics/MetricProvider.java?at=master but that's not exactly elegant). However, I don't think even setting a global default would necessarily be suitable, as I can conceive of legitimate use cases that might want to have different defaults for different sections of a service or things like that. What about a third-party library, for instance, that might use metrics and expect the behavior of a certain reservoir type? Anyway, I'm straying OT so I'll stop there.\nReset-on-snapshot will be problematic if you have more than one reporter, though (unless we also have \"one snapshot feeds every reporter\"-style reporting).\n. I think it's a quite valid problem, but I'm not sure it makes sense to try to tackle inside this library as it feels inherently pretty customized to what you're doing. Would it address your need to simply be able to record histograms on some schedule of your choosing and send them to a system that knows how to manipulate histograms (e.g. https://github.com/Searchlight/khronus)? (Note: I'm biased towards making the hdrhistogram encoded form the de facto wire format for histogram transfer and moving histogram processing to the aggregated store, whether in the metrics library or in other systems.)\n. Quite understandably, you want to include your custom top-k data with the rest of the data being output by Metrics. Right now, the only tool you have to express a complex measurement is as a bunch of Gauges, but since each metric is treated independently, that arrives at the host of issues you've identified above. If we make it easier to participate in the reporting lifecycle without being forced to express anything beyond counters and histograms as Gauges (or aggregations of Gauges), then we avoid the entire problem without having to add all that complexity. \nI think this is an illustrative use case that we can use to think about how to be able to solve this sort of thing more elegantly in v4+. Perhaps the root of this pain is not so much a Gauge issue as it is that Metrics is very all-in-one in the way it handles reporting (and the scheduling of reporting). Right now, a Reporter handles its own periodic execution as well as mapping everything in the MetricRegistry to the impl-specific serialization (usually a wire format over a network socket). This means that there's no way for external code to participate in the communication with, say, Graphite (just an example; nothing here is Graphite specific). \nConsider instead a situation where scheduling, mapping of core metric types to serialized data, and a low level Graphite (or whatever) client were separated out. If scheduling and reporting and the current core types weren't so intertwined, it's not too much of a stretch to invoke the basic Metrics \"write all my core metrics data to Graphite\" logic and then easily follow that with your own top-k data. The whole reason that Gauges exist is a consequence of this problem: there's no tidy way to write your own data to Graphite alongside Metrics data, so you're forced to jam your data into Gauges if you want to participate. Instead of making Gauges more complicated so that it's possible to do more with them, what about making it easy to write your own data from your own measurements? Then you could do whatever analysis you want with whatever consistency model you need.\nGauges are already sort of an awkward thing as it is without worrying about transactional measurements. The only thing a Gauge gets you is that if you can constrict your data down to a Gauge or Gauge then it handles serialization for you because reporters usually do the serialization of that for you. As you've seen, this is very limiting. If we construct ways of grouping Gauges together, it sounds like we're just painfully re-inventing JMX CompositeData, and that wasn't exactly a great success the first time. I'd prefer to leave Gauges just as they are: a simple escape hatch for things just complex enough to not fit into a Counter or Histogram, but no more than that.\nBasically, you're doing your own mapping of your complex data into Gauges and using the default serialization of Gauges. This means you don't have to worry about turning your top-k into Graphite-ese (or Prometheus or...), but instead you have a host of other problems because Gauges are assumed to be independent. If such extension points existed, would it not be preferable to skip the intermediate Gauge representation and instead do whatever histogram snapshot manipulation you pleased and write it out in sync with the rest of the metrics data? A naive implementation would mean you would need to implement different code for each storage provider (Graphite, Prometheus, Datadog, etc), but since it all ends up as (string label, numeric value) anyway I suspect that a low-level intermediate representation could address that.\n. Alas my ability to contribute to v4 is quite time-limited; metrics competes with a lot of other things for my spare time. I've talked with Ryan a little bit about what we can do for v4 (zero-allocation reporting pipeline is high on my list of goals) but so far I haven't had the opportunity to write any substantial amount of code implementing my pipe dreams. So, don't read too much into what I personally want to see in v4, not unless metrics becomes more than a 1% time project for me... :/ I think the goals for v4 are very much up for discussion, so I hope this use case ends up being represented well.\nI agree that an \"slf4j for metrics\" is probably not a good idea, and we should avoid creating situations that pressure people to do that. The more I think about it, the more I like the idea of having a lower-level API for writing metric data to other systems (implemented for Graphite, etc) that is used out of the box for Histogram and Counter, but could easily be used by users in your situation to report on top-k without having to cram their data into Gauges.\n. I'd be interested to hear people's thoughts on some notes on this topic I've been accumulating. To avoid derailing this conversation here, please file your comments as issues on that repo. Thanks, and I look forward to your feedback.. I could expose that functionality on the reservoir, though you'd have to use reflection to get at the reservoir, so I'm not sure that's much of a win. Anyway, I'm curious what your use case is for the CO-corrected record functionality. It's not a common use case but it's certainly a valid one.. If you're on the receiving end of unpredictable traffic, you probably don't have to worry about CO, by the way, but it's hard to say without really digging into your situation. Anyway, that doesn't diminish from the real need to be able to do this. :). Hence the need for the ResetOnSnapshot variant -- a side effect of a larger problem, I think. IMO everything should be reset on a regular cadence, and if you want to accumulate that locally into a \"since the service came up\" view, that's ok! But it shouldn't be the default. \nEDR is the wrong choice almost always because the mathematical approximation it does is (1) only valid for normal distributions, which latency isn't, and (2) tends to mask outliers, which are the actually interesting part for latency.. True, though it's easy enough to build a \"since the system came up\" view on top of a \"reset every x ms\" view by locally buffering -- the other way is not so easy! That's why I'd prefer to have the former way: it's more flexible.. You might be better off building a ScheduledExecutorService that runs on top of WorkManager; that way you wouldn't have to rebuild each reporter.. That would conflate data that is per-sampling-period with data that is over the lifetime of the service. If you want to calculate data over the entire lifetime of the service, that is best done elsewhere (e.g. in a time series database).. this one has a slightly more useful description than the one on line 14, I think, so let's keep this one and ditch that one\n. ",
    "mkwhitacre": "Depending on the deployment model it could cause leaks inside the container.  So if my deployment workflow did not stop the container but instead just redeployed to the existing JVM then over repeated deployments it would cause a leak.\n. I can modify the code a bit to use a normal map and  synchronizing on the current thread instead.  In that case different threads would not be contending.  \nMy impression of the initial pull request https://github.com/ciamac/metrics/commit/a239ec4f97b2a80510f18c21f9b171514a85a5e6 was actually not to avoid the contention but to cache calculations.\n. ",
    "smarvik": "Tested metrics-core 2.1.3 but this is still an issue\n. You're right, the \"last man standing\" seems to be related to another Thread.\nSEVERE: The web application [/mcf] created a ThreadLocal with key of type com.yammer.metrics.stats.ThreadLocalRandom$1 and a value of type com.yammer.metrics.stats.ThreadLocalRandom but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\n. ",
    "coops": "@wouterdb googling \"opentsdb yammer metrics\" led me here. Did you ever release this as a third-party library? I'd like to use it.\n. ",
    "wouterdb": "@coops https://github.com/coops no, it has not been released nor\nmaintained, the version on my github is the last (I switched to JMX myself)\nOn Wed, Nov 6, 2013 at 11:17 PM, cooper bethea notifications@github.comwrote:\n\n@wouterdb https://github.com/wouterdb googling \"opentsdb yammer\nmetrics\" led me here. Did you ever release this as a third-party library?\nI'd like to use it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/249#issuecomment-27919419\n.\n. I need to intercept the 'get' operation, to see if metrics are still live.\n\nI think inheritance is perfect in this case. \n1. An interceptor on 'get' is not commonly needed, so the overhead of an interceptor can be avoided. \n2. get is called often, so an unused interceptor would be expensive\n3. As get is called often,  the additional code should be optimised. As such the loss of modularity (due to single inheritance) is not an issue. \nIn general, I see no reason to discourage inheritance. Making the field private takes away the freedom to extend. Making it protected has no disadvantages. (But I've been wrong before, feel free to enlighten me.)\nHowever, if you feel strongly opposed to extension, I suggest making the class final altogether. This makes it clear, both to user of the metrics API and the JIT. \n. I think that would work.\nOp 8 apr. 2013 18:10 schreef \"Coda Hale\" notifications@github.com het\nvolgende:\n\nOk, I hadn't realized you just wanted to prune old metrics. That's a\ndifferent use case.\nI'd rather not make the MetricBuilder API public. That's really just an\noptimization. Would it make sense to allow you to specify the\nConcurrentMap implementation to use with a registry? That would allow you\nto build a map which removed unused entries and would keep the surface area\nof the API lower.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/373#issuecomment-16060053\n.\n. \n",
    "sps": "@coops check out: https://github.com/sps/metrics-opentsdb \n. I wasn't really paying attention to the fact these pages are built via Jekyll. I'll close and resubmit a proper PR with the source files updated not the jekyll output...\n. ",
    "rameshv1210": "Any chance of improving metrics to use in GAE?\n. ",
    "ingojaeckel": "Do you know how to tie the MetricsRegistry to the GAE life cycle? Can you provide some details on this and/or pointers to documentation on this?\nThanks,\nIngo\n. ",
    "wouter-willems": "Does anybody have a solution to this? I have the same issues.\n. Where can I find metrics 3.0? Via maven I can only find 2.2.\n. When do I call that? I can not get it to work on Google App Engine and documentation on how to fix this is not available. Anybody have a clue?\n. I found the solution.\nSince Metrics 3.0 (which can be obtained with maven in the sonatype repository), this can be fixed by binding your own instance (new MetricsRegistry()) instead of the default registry. If you still struggle, do not hesitate to ask.\n. ",
    "tnm": "PLZ MERGE\n. ",
    "joshdevins": "See: issue #256 with pull request\n. This is true about Graphite. However this PR is independent of Graphite completely. All it adds is the ability to add listeners to state change events on a metric. I would not suggest having a listener send directly into Graphite as this will overload Graphite very quickly. The intention is that you send stats to StatsD or something similar first. For a metrics-statsd implementation that relies on this PR/branch, have a look at: https://github.com/joshdevins/metrics-statsd\n. Note that if you want to just push your metrics into Graphite, use the GraphiteReporter directly: http://metrics.codahale.com/manual/graphite/\n. ",
    "jbuchbinder": "This is a pretty necessary capability for Ganglia support. Any chance of getting this merged in?\n. ",
    "mohanr": "I think that Graphite cannot properly receive and process sub-second timings. I used to write it to a Java ByteBuffer-backed file for speed. This will require bulk access to the metrics after a specified time limit so that graphite can be updated or I have to write each metric immediately to a file. Yammer forum pointed me to this git.\n. I think that Graphite cannot properly receive and process sub-second timings. I used to write it to a Java ByteBuffer-backed file for speed. This will require bulk access to the metrics after a specified time limit so that graphite can be updated or I have to write each metric immediately to a file. Yammer forum pointed me to this git.\n. I think that Graphite cannot properly receive and process sub-second timings. I used to write it to a Java ByteBuffer-backed file for speed. This will require bulk access to the metrics after a specified time limit so that graphite can be updated or I have to write each metric immediately to a file. Yammer forum pointed me to this git.\n. ",
    "josephruscio": "@codahale thanks for the quick response, we'll get this set up as a standalone project. What's the preferred format for sending you links for the upcoming related libraries documentation?\n. ",
    "incubos": "Yes, it is compatible, but it brings Scala 2.9.1 dependency. I suggest publishing new artifact metrics-scala_2.9.2 (scalatest folks do something similar).\n. I agree that Meters shouldn't throw exceptions, but they can and sometimes do (in our use case). Even Timer can do that in case of an unexpected system time change. So it is a defensive measure to recover from erroneous Meter implementations.\nignoresExceptionsFromGauges unit test tests only Gauge, but I can add unit tests for other Meters if you think it is necessary.\n. ",
    "ansgarkonermann": "Hi,\nthis patch would be very helpful for us. Can someone merge this into the main line and carve a a release out of it?\nThanks in advance\nAnsgar\n. ",
    "leifhanack": "+1\n. ",
    "gesellix": "+1\n. ",
    "gseitz": "Yeah, in retrospect I agree that making it just work out of the box is\nbetter.\nOn Wednesday, July 25, 2012, Coda Hale wrote:\n\nI think #235 would be sufficient. I'd rather not have additional runtime\nconfiguration parameters.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/268#issuecomment-7251800\n\n\nGerolf Seitz\ntwitter: @gersei\ncode: github.com/gseitz\nblog: www.gerolfseitz.com\n. ",
    "ryanwalls": "I'm using the 2.2.0 version of this module, but it doesn't have this change.  What version should I use to get this update?\n. If anyone else has this problem, I solved it by creating a custom filter that checks if the status code is 0 and updates it to 200.  Then I just make sure this filter is called after the Metrics filter.  I'm sure there's a more elegant way to solve the problem... but this worked for me.  This requires that you're using the servlet 3.0 api, as HttpServletResponse.getStatus() is not available before 3.0.\n``` java\npublic class UpdateStatusCodeFilter implements Filter {\nprivate static final Logger log = LoggerFactory.getLogger(UpdateStatusCodeFilter.class);\n\n@Override\npublic void init(FilterConfig filterConfig) throws ServletException { }\n\n@Override\npublic void destroy() { }\n\n@Override\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n    try {\n        chain.doFilter(request, response);\n    } finally {\n        int status = ((HttpServletResponse) response).getStatus();\n        if (status == 0) {\n            log.info(\"Setting status to 200\");\n            ((HttpServletResponse) response).setStatus(HttpServletResponse.SC_OK);\n        }\n    }\n}\n\n}\n```\n. ",
    "dwijnand": "I was wondering when the next release with this change will be released.\nIs the 2.x-maintenance branch for bugfixes only, or can I make a pull-request for a back-port of this change for 2.x?\n. What do you think of this pull request Coda?\n. ",
    "marcboscher": "This is similar to #248, and having same issue on my side. Any plans to fix? \n. ",
    "alf": "This is a problem for us. I'm currently forced to disable metrics until it's resolved.\n. ",
    "stephenowens": "Same issue here using 2.1.3, +1 on this issue. \n. Good explanation, thanks for writing it up and closing. \n. ",
    "craigforster": "I disagree that Tomcat's reporting is inaccurate.  I've been tracking down and removing PermGen leaks in our application (a decently-sized Grails 2.2.2 app, deployed on Tomcat7) and Metrics is the last man standing.  My test procedure is to continually deploy and undeploy our application.\nTo identify Metrics as the cause I followed this guide to identify the GC root of Tomcat's Webapp class loader.\n(Apologies for the reverse order of these screenshots).\nHere's what happens to PermGen if I hack ThreadLocalRandom to return a new instance every time .current() is called.  The spikes are app deployments.  You can see PermGen getting filled and then being garbage collected as necessary.\n\nI then restored the base metrics-core library and continued:\n\nYou can see the PermGen is never garbage collected.  The app crashes soon after.\n. ",
    "philgebhardt": "I am able to replicate a similar scenario as described by craigforster.\n. ",
    "sergio-otero": "I agree that it can be a big problem.\nTheadlocals are stored in a static variable in the Thread, so if the application is restarted it's holding a reference to an object, that is holding a reference to it's classloader, that holds reference to all class definitions (i think not objects, only classes). And the thread is can be reused acrooss different applications.\nTomcat has implemented some algorithms that try to detect this situations and clean some of them, but it's not guaranteed and also you should consider that other application servers like Websphere 6.1 don't do that (maybe later releases do).\nhttp://wiki.apache.org/tomcat/MemoryLeakProtection\nhttp://stackoverflow.com/questions/17968803/threadlocal-memory-leak\nI suppose you use the ThreadLocalRandom to avoid contention on a unique Random instance used by several threads. \nA possible workaround would be to publish a function to clean the theadlocal and call it in a requestlistener\n. ",
    "dicarlo2": "Makes sense.\n. ",
    "udgupta": "not related to yammer metrics.\n. ",
    "ram-chidambaram": "Intentional as in \"not open for extension\" ? How do go about creating a single object that includes both Histogram and a Exception Counter ?\nAlso, I would like to use the core objects but not the JMX Reporter as i don't want to use the PlatformMBeanServer...say use the Spring MBeanExporter and target the application server MBeanServer.\n. ",
    "alexrovner": "When is master getting released? Can we add another method to TimerContext in 2.x that retrieves the time elapsed?\n. The health check can act upon last success / failures or X amount of attempted failures in a row. We can let the user of the library decide whether they want to register the health check. I would find it useful to know when the graphite server is not reachable. Note that there might be other reasons why graphite server is not reachable besides server going down.\n. ",
    "patricioe": "Added that one more commit to allow spoofing hostname for real. Sent the same commit in another PR to 2.x branch.\n. Is it already available for the 3.x branch?\n. ",
    "fernandezpablo85": "Is there a wrapper? are you planning to create one? will you consider if somebody else creates one?\n. You may wanna ping @codahale, this PR (and another one with some specs) has been sitting here for 3 months and counting\n. fair enough, now that I have your attention, do you need this extra specs?\nhttps://github.com/codahale/metrics/pull/282\n. BTW they were just 2 stupid patches in a way of saying \"thank you\" for such a wonderful lib. Didn't mean to bug you.\n. What do you mean? it's compiling cleanly\n. Weird, let me check\n. Did something change? I had my remotes screwed up\n. Seems green now.\n. if you're cool with these, I can write additional documentation on the docs module for the site.\n. Thanks for the review! I'll make those changes later today.\nIf I understood correctly you prefer to add getters for the counts (not the counters) instead of marking the fields package private?\nThanks.\nOn Sun, Jun 2, 2013 at 4:02 PM, Coda Hale notifications@github.com\nwrote:\n\nIn addition, it'd be lovely to format the code similarly to the rest of Metrics: braces on the same lines as the control keyword, etc.\nReply to this email directly or view it on GitHub:\nhttps://github.com/codahale/metrics/pull/411#issuecomment-18811675\n. Done.\n\nI Made each of your comments a different commit so it's easier to review (and also because formatting from 2 spaces to 4 makes a big horrible and hard to follow diff).\n. Agreed on all of those, so in general you want s/counters/meters/ right?\n. @twinforces thank you! :smile: \n. Sure dude, no worries. I had my fork installed in prod yesterday and so far it's looking good, I'll update this if I find anything weird\n. Oh, and by the way, I'm fine with writing the docs for it if you want to. Let me know.\n. @codahale what about those docs? are you going to write them yourself? do you need help?\n. @codahale bump?\n. Hey no problem I was just asking if you wanted to write the docs on this\nyourself or would accept a PR.\nOn Fri, Jul 12, 2013 at 2:29 PM, Coda Hale notifications@github.com wrote:\n\nThis has not been forgotten, I just haven't had time to do any programming\nlately.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/411#issuecomment-20891187\n.\n. We should bug @codahale once again :smile: \n. @codahale are you having second thoughts on this patch? anything that needs to be changed?\n. I remember asking about the location of these in the mailing list:\n\nhttps://mail.google.com/mail/u/0/#search/coda/13efb5e72783b7a7\n@codahale said:\n\nI think metrics-core is fine, yeah. It doesn't have any deps outside of stdlib.\n. Thanks!\n. It's a known issue then?\n. @ceetav fantastic discovery, you rock dude.\n. BTW the number six comes from Thread.State.values().size\n. Didn't know about CachedGauge, that makes the port even easier.\n\nIMHO it's better to have a new (sub?)class with the cache behaviour since we only found this to be a problem with unusually high number of threads. The implementation is OK for the \"normal\" scenario (I think Tomcat has a default of ~200 threads)\n. @ryantenney what do you think?\n. It just calls it's parent method:\njava\nCachedThreadStatesGaugeSet.super.getThreadInfo()\nOn line 33\n(I can't use super there because it's being called in the context of the CachedGauge.)\n. @ryantenney did you get a chance to review the patch? Do you want me to change anything else?\n. Indeed. I'll fix this as soon as I get home.\nOn Mon, Jan 13, 2014 at 3:37 PM, Ryan Tenney notifications@github.comwrote:\n\nYea I did, I still really think that the CachedThreadStatesGaugeSet needs\nto override getThreadInfo from ThreadStatesGaugeSet and call getValue on\nthe CachedGauge... If not, then I just don't see how the cached value\ngets used.\n-  ThreadInfo[] getThreadInfo() {+    return threadInfo.getValue();+  }\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/509#issuecomment-32197071\n.\n. @ryantenney done\n. @ryantenney does this look fine or is there something still missing?\n. Awesome! Sorry for bugging\n\nSent from a mobile device.\nOn Jan 27, 2014 2:38 PM, \"Ryan Tenney\" notifications@github.com wrote:\n\nI haven't had a chance to take a look, I've been on vacation for the past\nweek so I have a bit of a backlog at the moment. I'll take a look at it\ntoday.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/509#issuecomment-33397238\n.\n. Woot!\n\nWhile you're on a row, do you mind checking this PR?\nhttps://github.com/codahale/metrics/pull/411\nIt had @codahale 's approval but it didn't get merged and it's been 8 long months now :cry: \n. I guess that would do as a dirty fix but: \n- you would have a ScheduledThreadPoolExecutor per node in your cluster, scheduling the same task at (ideally) the same interval\n- most likely you would end with different values in every gmond instance (hopefully close, but different).\n- creating many reporters with the same values is cumbersome, not DRY and it just makes your code look ugly.\nAlso the patch is tiny, what's the argument against letting this in?\n. Thanks Ryan!\nWhile I have your attention: are you planning to merge my other PR? The\nperformance fix on metrics-jvm to display thread states?\nThanks again.\nSent from a mobile device.\nOn Jan 27, 2014 1:56 PM, \"Ryan Tenney\" notifications@github.com wrote:\n\nMerged #514 https://github.com/codahale/metrics/pull/514.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/514\n.\n. Implementing something like https://jitpack.io would be ideal and hassle-free\n. no worries, im already using it via jitpack.io\n\nOn Fri, Jan 29, 2016, 1:42 PM Ryan Tenney notifications@github.com wrote:\n\nI'm afraid the metrics-influxdb module isn't scheduled for release until\nmetrics v4, and I don't know when that will be released. I have several\ngrand ideas for v4 and no time to make them happen.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/906#issuecomment-176854473.\n. BTW I ended up using https://jitpack.io as a workaround, that way you can \"depend\" on a specific commit and update at will.\n. Is calling interrupt on them in a tearDown method enough? should I mark them as daemon too?\n. \n",
    "velvia": "This would be really nice.  The current \"Instrumented\" trait is rather limited.\n. I'm also experiencing this same error.\n. I can verify that dropping back to 3.0.2 fixes this issue, so the bug appears to be around that isConnected().\n. True, hope to test this out sometime.\nOn Fri, Oct 24, 2014 at 1:51 PM, Juha Syrj\u00e4l\u00e4 notifications@github.com\nwrote:\n\n675 https://github.com/dropwizard/metrics/pull/675 may be related or\nthe same issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/694#issuecomment-60424110.\n\n\nThe fruit of silence is prayer;\nthe fruit of prayer is faith;\nthe fruit of faith is love;\nthe fruit of love is service;\nthe fruit of service is peace.  -- Mother Teresa\n. ",
    "mattnworb": "That works also, but it seemed like exposing the Sum as well would be useful for anyone wanting to observe changes in the sample time in a faster way - I could be wrong but if the sampled events are not occurring fast enough, it might take some time for older samples to fall out of the histogram. If there's a sudden change in the event being observed that makes it take, let's say, an order of magnitude longer to occur - it might take ~1000 samples for the higher-end percentiles to catch up.\n. I was assuming that since the Sum was already tracked, exposing an extra JMX attribute didn't really have any cost.\n. Out of curiousity, do you recall what the exception was that was thrown? \nSince Slf4jReporter.report() just passes each metric to one of the \"log\" methods, it seems pretty surprising than an exception could have been leaked out - I would have through that org.slf4j.Logger.info() or any of the other Logger methods would be guaranteed to not allow an exception to escape.\n. ",
    "jdanbrown": "Ok, I understand the discussion about rates in #289, but I have a Timer that I want to track the sum of for a different reason. The timer is measuring how long it takes to process requests, and I want to measure how much thread time is used vs. available across my request-processing thread pool.\n. ",
    "dbenhur": "Could we get some guidance on how to translate alpha value into an estimate of the time recency the bias targets?\nIn the comment you say \"Uses an exponentially decaying sample of 1028 elements, ... and an alpha factor of 0.015, which heavily biases the sample to the past 5 minutes of measurements\"\nWhat alpha factor should one pick if one wanted a one minute focus? How about a 10 second focus?\n. ",
    "sz-alook": "can I port something similar to the master branch?\n. ",
    "jonasborjesson": "Ok, I see your point but you could apply the same argument to the moving averages for the 1, 5 and 15 min as well, which is why I thought that it would make sense to include it. As it stands now, if I just want to log into a node and check the max rate for some value, I can't without actually having a secondary system. And that secondary system would essentially need to poll the metric frequently enough to be able to accurately calculate this value and if does this anyway, it may just as well calculate the rest of the values.\n. ",
    "fleaflicker": "Sorry, not sure how I missed this earlier but the showJvmMetrics parameter addresses this issue. Metrics 3.0 can be run on AppEngine, and all admin servlet functions other than those related VirtualMachineMetrics work.\nClosing this issue.\n. ",
    "ssevertson": "We use Resmon and Circonus (plus a legacy Cacti installation) to do metrics collection and trending/analysis. We collect time-based metrics from a variety of other sources, and compute the delta over the collection interval, giving us a X per second metric since the last metrics collection. While metrics-core can compute this internally, we generally prefer to rely on our external monitoring to perform such analysis, as it is aware of when the metric was last captured. Through a combination of the total time spent on various metrics, and the count of the metrics occurring, we can also calculate the average time spent per operation since the last collection.\nIn general, we prefer to capture continually incrementing metrics, rather than rely on each tool to produce metrics which represent statistics over time.\n. Our collection interval is 30 seconds, giving us fairly fine resolution on our mean durations: (current_total_time - last_total_time) / (current_count - last_count). \nMetrics is currently exposing other values with are computed either since the beginning of time, or computed over a specific interval. What is the harm in allowing users to make their own computations, based on deltas?\nThe sum is already tracked for timers - is it a big deal to expose the metric for those who would find it useful?\n. Also, a significant number of other software packages/operating systems expose total time as a metric. Java GC time, Tomcat request processing time, OS CPU usage, etc. all are expressed at the lowest levels in terms of summed, continually incrementing metrics. It seems strange that Metrics would buck this common practice, due to concern for potential misuse.\n. ",
    "BGehrels": "Oh, yes, you are right, i was a little bit confused when i just read \"1 commit with 359 additions and 353 deletions\". That explains it.\n. Fixed it\n. Wow, it's been over a year now, i would still love to see this in Metrics :-) Is there anything more i can do?\n. ",
    "gwallet": "Hello,\nFirst of all, congratulations for Yammer Metrics, it's a very useful\nruntime information tool.\nWe use it for multiple WAR files, and we are asked for an health check\nstatus report published by our applications.\nThe reports have to be compatible with those published by other\napplications and used an administrative tool, a bot used by production team\nmaintainers.\nI thought that if we could customize the health check status report, we\ncould continue to use Yammer Metrics.\nI saw that HealthCheckServlet do 100% of the job, except that the rendering\nis hard coded inside the servlet.\nSo I choose to contribute by making simpler to customize the rendering\nprocess of the HealthCheckServlet.\nIf there is other ways used to do the Job, please tell me, I'll appreciate.\nBest regards,\n2012/11/24 Coda Hale notifications@github.com\n\nWhy do you need to customize HealthCheckServlet?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/307#issuecomment-10684428.\n\n\nGuillaume Wallet\n. ",
    "bjoernhaeuser": "Hi Coda,\ndo you think that just adding these constructors will work? If so I am going for a patch.\n. Is there anything I can do to get that into an upcoming release? If so, what should the implementation look like from your point of view?\nThanks\n. I think that registering the Metrics in the setPort method is not the best idea. This code will register the Metrics twice if you use the constructor InstrumentedSelectChannelConnector(registry, port). \nMy current approach is to set the metrics up on some onStart method but this currently does not work.\n. ",
    "stigkj": "Actually, you need more than adding a no-arg constructor, as Maven expects this class to follow the JavaBean conventions. This means you need a setter for the port too.\n. Duh, of course. My bad. So a no-args constructor just needs to set the default Metrics registry, then.\n. ",
    "khamutov": "added patch in pull-request https://github.com/codahale/metrics/pull/323\n. Yes, you are right.\nI checked on jetty 8.1.8.v20121106\nmethod doStart is invoked after setPort\nhttp://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/server/nio/SelectChannelConnector.html#doStart%28%29\n. ",
    "Laures": "you already closed the issue but an easy solution is to add the metrics type to the map key in the registry (which is the workaround i used to solve the problem). It was a lot easier than to define the name for every meter or timer used.\n. what i actualy meant was to add the type to the default name of timers as its allready done for ExceptionMetered metrics.\n. ",
    "nau": "Yes, please. We plan to migrate to Scala 2.10 and metrics-scala is the only dependency left unsupported.\n. ",
    "kaesler": "+1\n. ",
    "masterzen": "+1\n. ",
    "arunh": "Fair enough! :)\n. ",
    "schnitzi": "+1 for me... These quotes seem to be causing me issues trying to access these beans using jmxterm -- it claims the bean name is invalid, even though it autocompletes to it.  At least, I think the quotes are the problem.\n. ",
    "chrisfearless": "+1 for me too. And I posted a pull request that only quotes object names if they contain special characters.\n. ",
    "rhuss": "+1 Please, please do quoting only when necessary. These extra quotes added by ObjectName.quote() are really annoying and ugly. I don't know any container or Java-App where e.g. the domain name is quoted when not necessary. Neither does the  JVM quote their very own MXBeans (it's java.lang:type=Memory not \"java.lang\":type=\"Memory\" provided MXBean and doesn't play well with some tools (including j4psh). At least, please make it configurable (i can try to provide a patch for this).\n. ",
    "mathisdt": "+1 Like rhuss pleaded: Please only add quotes when necessary! Both readablility and compatibility would benefit.\n. ",
    "gjesse": "This should get merged in, otherwise it's pretty much useless for a multi-jvm environment\n. ",
    "carrot-garden": "great! do you mind sharing time frame for 3.0 release?\n. alright then, happy new year! :-)\n. ",
    "rajchemmeri": "Getting below exception on server startup,\nUsing  https://github.com/ryantenney/metrics-spring.\nAdded pom with below plugin : \nhttp://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html#AppendingTransformer\ncontext file :+1: \n\n```\n\n\n\n\n other beans \n\n\n\n```\n\nWARNING: Ignored XML validation warning\norg.xml.sax.SAXParseException: SchemaLocation: schemaLocation value = 'http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/context/spring-context-3.1.xsd  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd  http://www.yammer.com/schema/metrics http://www.yammer.com/schema/metrics/metrics.xsd' must have even number of URI's.\n    at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)\n    at org.apache.xerces.util.ErrorHandlerWrapper.warning(Unknown Source)\n    at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\nan 10, 2013 12:42:15 PM org.springframework.test.context.TestContextManager prepareTestInstance\nSEVERE: Caught exception while allowing TestExecutionListener [org.springframework.test.context.support.DependencyInjectionTestExecutionListener@427be8c2] to prepare test instance [com.MetricsApplicationTest@54ee3aa7]\norg.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 7 in XML document from class path resource [spring-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'metrics:metrics-registry'.\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)\n    at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)\nCaused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'metrics:metrics-registry'.\n    at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)\n    at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)\n    at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\nThanks. Please suggest if any solutions.\n. It worked. Thank you so much.\n. ",
    "emersonf": "If metrics-spring is no longer packaged, shouldn't http://metrics.codahale.com/manual/spring/ be updated?\n. ",
    "lambav": "Hi \nI am also getting \nCaused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'metrics:metrics-registry'.\nat org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)\nat org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)\nat org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)\nI tried the way you suggested above. Could you please help me in it. \nMy spring configuration is.\n\n\nand pom configuration is\n\norg.apache.maven.plugins\nmaven-shade-plugin\n2.0\n\n\npackage\n\nshade\n\n\n\n\nMETA-INF/spring.handlers\n\n\nMETA-INF/spring.schemas\n\n\n\n\n\n\n. ",
    "shadowcole": "it's working change the \nhttp://www.springframework.org/schema/context/spring-context-3.1.xsd\nto\nhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd\nbut  why ? could you tell me  about it . thank you very much. ",
    "dlad": "I currently use the InstrumentedSelectChannelConnector in my jetty.xml as follows:\n<Call name=\"addConnector\">\n    <Arg>\n        <New class=\"com.yammer.metrics.jetty.InstrumentedSelectChannelConnector\">\n            <Arg type=\"int\">\n                <SystemProperty name=\"jetty.port.http\" default=\"8080\" />\n            </Arg>\n            <Set name=\"host\">\n                <SystemProperty name=\"jetty.host\" default=\"0.0.0.0\" />\n            </Set>\n            <Set name=\"maxIdleTime\">300000</Set>\n            <Set name=\"Acceptors\">10</Set>\n            <Set name=\"statsOn\">true</Set>\n            <Set name=\"confidentialPort\">8443</Set>\n            <Set name=\"lowResourcesConnections\">20000</Set>\n            <Set name=\"lowResourcesMaxIdleTime\">5000</Set>\n            <Set name=\"forwarded\">true</Set>\n        </New>\n    </Arg>\n</Call>\n. ",
    "azagniotov": "You are right - these are two different things. \nI will re-issue two pull requests\n. oh no :) no worries!\nThanks for letting me know Coda\nCheers \nDelivered to you from my iDevice\nOn Mar 10, 2013, at 10:45 PM, Coda Hale notifications@github.com wrote:\n\nI'm working on 3.0 right now, and a re-usable JSON layer will be a part of it. None of this will merge, though.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mrmcd": "Added one more commit to report the type value from MetricName as well -- I mistakenly thought this was the same as the class type before. \n. ",
    "jasonberanek": "This pull request isn't for 3.0, but 2.x maintenance. It addressed an issue\nwith 2.x, which does contain MetricName, where CsvReporter fails if\nmultiple metrics have the same name portion of the MetricName.\nAt the time of the pull request, master included MetricName and the fixes\nto make CsvReporter (or similar custom reporters) work.\n On Mar 11, 2013 12:30 AM, \"Coda Hale\" notifications@github.com wrote:\n\n3.0 gets rid of MetricName entirely, so this won't apply.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/329#issuecomment-14698234\n.\n. \n",
    "kjax": "Please consider the case where the expense of collection some data is high but results in multiple values.  For example, running a SQL query is expensive but the SELECT clause can produce multiple values.  This is an example of a batch of gauges.  However such a use case doesn't fit well with JMX.  The best that I can think of is making the first gauge request start the query and cache all of the values.  Subsequent immediate requests would get the cached values until some timeout period.\n. One observation with your CachedGuage is that if one thread is in the middle of reloading the value, then a second thread would just get the old value (or possibly null) without any waiting.  I was thinking about using a Future here but that is far more heavy weight compared with your implementation.  Any thoughts?\nMaybe something like this:\n    private volatile Future value;\n    protected abstract Future loadValue();\n```\n@Override\npublic T getValue() {\n    if (shouldLoad()) {\n        synchronized (this) {\n                 this.value = loadValue();\n        }\n    }\nboolean interrupted = false;\ntry {\n    for (;;) {\n        try {\n            return value.get();\n        } catch (ExecutionException ee) {\n            throw new RuntimeException(ee.getCause());\n        } catch (InterruptedException ie) {\n            interrupted = true;\n        }\n    }\n} finally {\n    if (interrupted)\n        Thread.currentThread().interrupt();\n}\n\n}\n```\n. ",
    "hadrienk": "Hi, \nI think I wasn't clear.\nFor the Counter, the GMetricSlope.BOTH makes sense absolutely. But for the Meter, the counter should be sent as a positive slope since it cannot decrease it. If sent with positive slope, the gmetad will create counter ds and the graph will actually reflect the throughput measured.\nI'm measuring the calls/sec on a telecom system with a Meter, and the graphs ganglia creates out of the counter is as follow:\n\nHadrien\n. Another way to fix this, since the count value might be useful to some people, could be to add the instant value for each tick.\n. Yeah well, I didn't mean to be rude. I could have done whatever changes are required to fix my case, but since I'm willing to share it I want to make sure my analysis is correct. \nThe Meter comment says: \n\nA meter metric which measures mean throughput and one-, five-, and fifteen-minute\n\nBut it returns a counter, not an instant throughput. Is this counter transformed into rate later on or is it the responsibility of the Reporter sub classes?\n. @codahale, I'll submit a patch soon. \n. I have a method that run every x minutes. The method moves around objects and I would like to measure the throughput, but relative to the time it executed. Does that make sense?\n. I will try out using my own Meter objects yes. Thank you.\n. ",
    "idyedov": "it would be nice to have the same functionality for jetty9 InstrumentedHandler\n. not sure if it makes sense to have both prefix & name, but I didn't want to remove it and break old functionality\n. have you looked at ratio gauges?\nhttp://metrics.codahale.com/manual/core/\n. I figured out what the issue was.\nI was wrapping my handler inside of a ContextHandler, which I was wrapping inside of an InstrumentedHandler. This worked fine in jetty8, but does not in jetty9. For jetty9 I had to wrap my handler inside InstrumentedHandler, and wrap that in ContextHandler\n. ",
    "depsypher": "Is this issue related at all to supporting ehcache 2.7.0? Tried using it, but had to go back to v2.6.5 to make metrics happy. Looks like they changed some apis in the latest version.\n. @codahale Darnzo, was afraid of that. No biggie, 2.7 isn't really necessary, just nice to keep things up to date :)\n. ",
    "mveitas": "By adding a builder for each of these Reporters, did you expect to come up with some reasonable defaults for some of the values? In the constructor below, if the values for rateUnit and durationUnit are not provided they will throw a NPE.\njava\npublic ConsoleReporter(MetricRegistry registry,\n                           PrintStream output,\n                           Locale locale,\n                           Clock clock,\n                           TimeZone timeZone,\n                           TimeUnit rateUnit,\n                           TimeUnit durationUnit,\n                           MetricFilter filter) {\n        super(registry, \"console-reporter\", filter);\n        this.output = output;\n        this.locale = locale;\n        this.clock = clock;\n        this.dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT,\n                                                         DateFormat.MEDIUM,\n                                                         locale);\n        dateFormat.setTimeZone(timeZone);\n        this.rateFactor = rateUnit.toSeconds(1);\n        this.rateUnit = calculateRateUnit(rateUnit);\n        this.durationFactor = 1.0 / durationUnit.toNanos(1);\n        this.durationUnit = durationUnit.toString().toLowerCase(Locale.US);\n    }\nExample of what the builder could looking like if someone wasn't careful:\njava\nprivate final ConsoleReporter reporter = new ConsoleReporter.Builder(registry, MetricFilter.ALL, output).\n                                        locale(Locale.US).\n                                        clock(clock).\n                                        timeZone(TimeZone.getTimeZone(\"PST\")).\n                                        build();\n. Also just noticed, should the following be using the supplied locale instead and default to Locale.US?\njava\nthis.durationUnit = durationUnit.toString().toLowerCase(Locale.US);\n. No problem. I'll get this finished up later today. It's a great project and willing to help out wherever possible!\nSent from my iPhone\nOn Mar 29, 2013, at 11:54 AM, Coda Hale notifications@github.com wrote:\n\nOh wow, awesome! Two things, though:\nI'm not able to merge this automatically. You'll need to rebase it.\nThe API I had in mind was something like this:\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\n                                                .outputTo(System.err)\n                                                .filter(MetricFilter.ALL)\n                                                .convertRatesTo(TimeUnit.MINUTES)\n                                                .convertDurationsTo(TimeUnit.SECONDS)\n                                                .build();\nreporter.start(1, TimeUnit.SECONDS); // etc\nI like Guava's approach to fluent builders, where the construction of the builder is limited to a static method which has all the required properties as arguments. To my eyes, it's cleaner as well as being an easier API to extend later without breaking things.\nAnd yeah, the constructors should be made private. They're primarily an artifact of me just getting the damn things rewritten.\nSeriously, thank you so much.\n\u2014\nReply to this email directly or view it on GitHub.\n. It was strange and this could be to my inexperience with Git. If it makes it easier, I'll pull out all my changes and create a new clean new pull request.\n. That is what I was planning... Mailing list was the better option to get a sense of the need.\n\nSent from my iPhone\nOn Apr 6, 2013, at 12:26 PM, Coda Hale notifications@github.com wrote:\n\nThat sounds useful, but I've been trying to keep the main project lean (read: only stuff I can afford to support). You should make that your own project and announce it on the mailing list. I'm sure others would be interested.\n\u2014\nReply to this email directly or view it on GitHub.\n. Something I just realized, I do need to take a look at how this would fit in with Jersey 2.x and it's new event model.\n. I agree that a sufficiently general solution is very difficult to find, but some level of abstraction should be in place provided such things as being able to instrument a method using the delegate pattern as in InstrumentedResourceMethodProvider and the TaskServlet classes. If there are other patterns that start to pop-up, they can be addressed as they come. \n\nThe one thing I'd change about my Gist is to make the abstract class an adapter and provide a default implementation that just returned the underlying object and let subclasses override that behavior if they are interested in the handling the Timed, Metered, or ExceptionMetered annotations.\n. @shreejay Please feel free to open a pull request to get this fixed!. Looks like we crossed paths with #1195 . It probably makes sense to look to create a common configuration file that all of the dropwizard organization projects can use. While it was nice to have the headers and the format right next to each other in the code, there isn't a need to construct the same value over and for each call to report. I agree that they should be listed before the normal imports, that can be tackled in a different PR. This is just setting things up to use the same configuration as the Dropwizard project.\nhttp://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder. ",
    "swenson": "Ah, okay. I'll keep that in mind about @Override. It was in a test, and I\n(naturally) ran the tests after removing the method; everything was fine in\nthis case, but goot to know for the future.\nOn Thu, Apr 4, 2013 at 9:31 AM, Coda Hale notifications@github.com wrote:\n\nWorth noting that for anything which doesn't compile under 1.6 which is\nannotated with @Override, the fix is to remove the annotation, not to\nremove the method. Otherwise, it'll compile under 1.6 but not 1.7.\n(c.f. 48bad4dhttps://github.com/codahale/metrics/commit/48bad4dfb5ff6fa954fbdbaff98d0ea5bdef0154\n)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/372#issuecomment-15908165\n.\n. \n",
    "matlach": "Striped64 also hold a reference to ThreadLocal in its actual form.\nIf you have a look to the latest JDK8 implementation source code this has been removed.\nI'm pretty sure this can lead to the same issue discussed in #742 .\n. ",
    "ikedahi": "I was surprised but I agree.\nIn order to avoid holding a specific class via Striped64, it might be fixed by making ThreadHashCode extend ThreadLocal<int[]> (with int[1]) instead of ThreadLocal<HashCode>, which is just used to hold a mutable hash for each thread.\n. Java 7 will be used for a while, and you replace Unsafe in Striped64 and its internal class Cell with AtomicLongFieldUpdater and AtomicIntegerFieldUpdater, which are API classes in the Java standard library. You can also simply use AtomicLong and AtomicBoolean for Striped64's fields, but in that case LongAdder is also required to change.\n. The reason I'm concerned to fix the issue is, some projects using metrics would make an effort to switch logic by whether Unsafe is available or not, but updating the version of metrics would waste such an effort.\n. That's a subtle performance hit :(\nI'm not sure whether that is worth or not.\n. ",
    "romseygeek": "Will update.  Thanks for the review!\n. Hi Coda, 2a7fde3 doesn't call onMetricRemoved, which I think is a bug?\n. Updated!  Although it appears to have deleted your comment, which is confusing...\n. ",
    "tomakehurst": "Bugger. Every pull request I send you seems to contain a git cock-up. Trying again...\n. I think that's it.\nBuild failed in the jetty9 sub-project when using Java 6. Might be worth putting the language level at 1.7+ in the POM  if that 1.7 API dependency is deliberate/unavoidable?\n. ",
    "jdillon": "The change is probably relevant for master too.  We can not presently consume that as you've removed some of the support (guice) which we need.  \n\"not accepting new changes for 2.x\" does this imply you aren't supporting that tree anymore?  Seems odd since master 3.x isn't even a production release yet (as version 3.0.0-BETA3-SNAPSHOT indicates).\n. why do you have a maintenance branch for something you don't plan to maintain :-P\n. k, I'll look at upgrading to 3.x  DW still using 2.2.0 is that planned to be updated to 3.x too?\n. ",
    "ceetav": "Not sure whether it should not be considered as known issue.\n. Great.  I suppose it should be on the way.\n. @shipilev thank you guys for jmh, it hits the spot.\nHi @ryantenney. The pull request with existing scenarios migrations is here.\n. @codahale, sure. AtomicLongArray usage makes me to consider that there are already quite strict performance expectations for SlidingWindowReservoir.\n. Coda,\nThere is a potential pull request with SlidingWindowReservoir based on unsynchronized updates() over atomic array (from #395) . It's available on https://github.com/ceetav/metrics/commit/da11ce78caa13ed92168bc0a0825d9fb28afbf4b\nhttps://gist.github.com/ceetav/27cdb76c94e4ab23ef3a is benchmarking on my PC, and I think that the difference will begin to be notable only on rates like ~50000, 100000 updates per seconds on production servers, while doubling what kind of job such software will have time to perform if such updates becomes bottleneck, but definitely it is better to measure numbers on some reference platfrom e.g.  aws ec2.\n. Coda, sorry.\nhttps://github.com/codahale/metrics/commit/95c803d2201fa97fb2dad40944fa71baec1048e5 doesn't protect from phantom reads as there is no guaranty of writings order -- so K completed writings doesn't mean that it was done for the first K items . \nExample:\nLet's image that 5 threads called update() the same time. The one of possible states of the measurements is [1, #, 3, #, 5, ~, ~, ~, ~], where:\n- 1, 3, 5 are filled positions\n- ~ is undefined; \n- # is undefined, but already reserved for some update; \nThe corresponding counters for such array:\n- 5 positions was allocated (index = 5)\n- 3 writings already done ( count = 3 )\nIf call getSnapshot()  it result would be [1, #, 3] with happened phantom read.\n. :( \nI had some worrings as there is a strong dependency for thread scheduling to be lucky in finalizing update(), so, I've tried benchmarking on the same 2-core PC as above.\n\nhttps://github.com/codahale/metrics/commit/353ed4b612a734b90b56a7229a2c7ff05bb95ab2 falls down for 4 threads to  ~30 ops per second and more and more on more threads.\nBenchmark                                                   Thr    Cnt  Sec         Mean   Mean error          Var    Units\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     1      4    4      133.609        1.261        0.186  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     2      4    4      364.077        4.719        2.611  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     4      4    4 31617194.985 106454284.042 1328653897239021.800  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     8      4    4 291666447.913 238575681.800 6673258158666749.000  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir    16      4    4 1325674761.373 1221843737.077 175031781440611968.000  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir    32      4    4 6042238227.457 4877736643.032 2789473728434695700.000  nsec/op\n\nI've also tried with the threads getting out the way:\njava\n        while (true) {\n            if (count.compareAndSet(n, n + 1)) {\n                return;\n            }\n            Thread.yield();\n        }\nBenchmark                                                   Thr    Cnt  Sec         Mean   Mean error          Var    Units\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     1      4    4      136.754        4.618        2.500  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     2      4    4      513.907       54.273      345.347  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     4      4    4     5741.054     5336.676  3339082.858  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir     8      4    4    16171.361     9111.648  9733734.180  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir    16      4    4    71374.629    69556.040 567224878.206  nsec/op\nc.c.m.b.g.a.ReservoirBenchmark.timeSlidingWindowReservoir    32      4    4   245442.810   317937.440 11851380020.586  nsec/op\n\nThe numbers above are worse than the earlier ones and probably is not what was expected.\nMy personal feeling for the mentioned solutions is that the synchronized version https://github.com/codahale/metrics/commit/be5931c9da3d7b8868f96fb70ac20b509f4be321 goes quite well, while https://github.com/ceetav/metrics/commit/da11ce78caa13ed92168bc0a0825d9fb28afbf4b probably not provide such speed up to introduce complication. \nPlease let me know if it make sense for pull request of https://github.com/ceetav/metrics/commit/da11ce78caa13ed92168bc0a0825d9fb28afbf4b .\n. @codahale \nI've tried benchmarking on Amazon EC2: c1.medium. The results are here : https://gist.github.com/ceetav/d1f314865daa7dc9e887\nQuite interesting that sync version beats atomic ones on this platform.\n. @anomalizer \nI don't think that snapshot consistency is an expected property for the metrics usage context, especially in the concurrent environment.\nIf not discuss a simple storing scenario (without lock-free or thread local storages)  the snapshoting operation is a balance between:\n- stop-the-world (whole array synchronized copy)\n- increased overhead for  contention + synchronization overhead (per item copy) \n  with intermediate options for chunked copy.\nPersonally I would prefer option N1 (synchronized array copy), even with 1 MB array it should be around 1 ms to copy it.\nDo you consider a pull reqest for later Coda decision?\n. Also watched it a few times and found that this message happens due to overloaded report() and may be an unkown delay with invocation or registry access for getGauges/getCounters/getHistograms/getMeters/getTimers.\nMockito behaviour is following :\n1. ScheduledReporter has report() and report(gauges,counters, histograms, meters, timers) which are both instrumented and counted by mockito wtih spy().\n2. During verification if there is no calls of report(...) with expected signature, mockito tries to check similar ones and those complains about invocations for no args overloaded version of report() . \n| Invocations | Result of times verify |\n| --- | --- |\n| 3 report(...) + 3 report() | tooManyActualInvocations |\n| 2 report(...) + 3 report() | OK |\n| 1 report(...) + 2 report() | tooLittleActualInvocations |\n| 0 report(...) + 0 report() | wantedButNotInvoked |\n| 0 report(...) + 1 report() | argumentsAreDifferent |\n. Going from (period=100; timeout=250) to (period=200; timeout=500) makes it smooth on my local PC.\nGuessing, what the rootcase is, as it also disappears when give different names for report() and report(...)\n. Timing is not the root case, just masked it for me.\n1.  verify(reporter, timeout(500).times(B)) doesn't behave like wait 500ms and then control results.\n   In fact, VerificationWithTimeoutImpl is actively looking and checking every 10ms for the first moment when expected conditions will be met and skipping intermediate failures.\n2. argumentsAreDifferent exception can leak out through (catching MockitoAssertionError) due to wrapping for JUnit.\nThose #413 is a little bit of luck for active verification happened between first call of report() and invocation of report(...) with leaking argumentsAreDifferent. Found similar discussion against 1.9.5: https://code.google.com/p/mockito/issues/detail?id=266\nhttps://github.com/ceetav/metrics/commit/15b164803bc768842972c19143eb0b3a02f17ec5 : with extracting sleep separate I've observed no problems for 500 test repeats.\n. Yeap, it impacts low rates where it behaves like SlidingWindow . E.g. at rate 10 samples/minute the median follows to mode change in time comparable with hour. (tests are https://github.com/ceetav/metrics/commit/20df4193efe9f64d956fa8c798f3443a7acadc02)\n\n\n. Would be pleased to elaborate. At the moment I'm going to play a little bit more with different inputs and analyzers -- with/without sampling, wegiht-(ed/-less) quantiles for better choices understanding. \nAlso, interested how good will be a version with only one change that excludes from snapshot values with priority<1e-4 -- removing all samples which are definitely not within latest 10 min (for alpha=0.015). \n. Hi Ryan\nThis is a proposed change with weightening samples -- it stores weight and uses it during quantiles calculation to make sure that the recent samples has more impact on the result.\nCorresponding image for the low-rate case mentioned above with the applied change is\n -- it is now going within couples of minutes. Probably, it also will be required to revise an exponential weight factor ( DEFAULT_ALPHA ) to keep a balance between short/long time frame,\nPlease let me know if you have any questions or concerns.\nThanks\n. Updated the PR -- Meter changeset and test.\n. @rwmccro Looks like a typo error. What do you think about changing only order of int-casting? \n. yeap, with the rate 1 million samples per second the overflow will happen in ~290000 years away.\n. @Arvoreen \nShould reporting of negative values also work? Looks like currently all negative values will be converted to zero.\n. Could you describe your use case a little bit more? \nIn the general case, getSnapshot() doesn't contain all the data and it will be the sum for some subset of recent values, which probably is not the behaviour you expect.\n. There is a getCount() method in Meter (see https://github.com/dropwizard/metrics/blob/master/metrics-core/src/main/java/com/codahale/metrics/Meter.java#L80 ) . Does it fit?\n. @bartavelle \nI mean if you have a data series like {x1, x2, x3...} than you can have a Meter m and feed it like\nm.mark(x1);\nm.mark(x2);\nand that way m.getCount() will be a sum of x1+x2+...\nIt's definitely has a drawback with potential overflow and questions in place about applicability as not clear what kind of data are measured and what kind of analyse is made on rrd-charts. \n. ",
    "nitsandaniel": "Thanks!\n1. Will median (after creating a snapshot) will give me data since the last snapshot or from the beginning (creating the timer\\histogram).\n2. What about size? I would like to display in the chart how many times the method was called (how many times timer.time() was called) in a timeframe, how can I do this in a chart?\n. As for 1, when creating a snapshot, how can I control which Reservoir will be used?\n. ",
    "richarddbarnett": "Not sure if the \"canonical\" way to do this is to add the MetricSet to a different MetricRegistry instance & then use different prefixes for the Reporters on that registry.  My approach seems to avoid duplication of Reporters.\n. MetricRegistry#register doesn't support a MetricSet parameter.  \nAre you suggesting:\nMetricSet memoryMetricSet = new MemoryUsageGaugeSet();\nfor (Map.Entry<String, Metric> entry : memoryMetricSet.getMetrics().entrySet()) {\n  _metricRegistry.register(name(prefix, entry.getName()), entry.getValue());\n}\n. Ah, I didn't notice that.  Thanks - sorry for the pointless pull request.\n. ",
    "shipilev": "Here you go, jmh artifacts in Maven Central:\n  http://central.maven.org/maven2/org/openjdk/jmh/jmh-core/\n. ",
    "anomalizer": "Wouldn't Arrays.copyOf perform better? For starters, doing so has a better chance of using vectorized instructions to do so.\nMore importantly, it is not obvious how acquiring & releasing the monitor after each element copy guarantees that the snapshot is truly a snapshot i.e. it is possible in theory with the current approach that the snapshotting commences, gets interrupted, a large number of updates happen to the point wherein the array position wraparound happens multiple times, after which the snapshotting resumes.\nI'd start off with the assumption that Arrays.copyOf for long[] is optimized enough that we could stall accepting the updates until the snapshotting is complete\n. @ceetav, I see an earlier comment from @codahale saying that he wants correctness. And yes, the increased possibility for contention at a per item level also remains a concern.\nI want to be sure that there is agreement on the expected behaviour before making a pull request.\n. ",
    "rose-m": "May I ask what led you to this choice? Was it just to keep down the overhead or did you tackle a fundamental problem with this?\n. ",
    "dantran": "it is a simple change by configure sun.misc.* as optional at top level pom under maven-bundle-plugin. here is the git diff ( tested with my production). Makesure to use edit mode to see the actual content\nC:\\Users\\Dan.Tran\\dev\\codahale\\metrics>git diff pom.xml\ndiff --git a/pom.xml b/pom.xml\nindex 6655cb7..9c05362 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -179,6 +179,7 @@\n                         <Import-Package><![CDATA[\n                             javax.servlet*;version=\"[2.5.0,4.0.0)\",\n                             org.slf4j*;version=\"[1.6.0,2.0.0)\",\n+                            sun.misc.*;resolution:=optional,\n                             *\n                         ]]>\n                       </Import-Package>\n. ",
    "alexwen": "This can also be addressed on the karaf side by adding sun.misc to your exported packages in Karaf's config.properties:\n```\nExtra packages appended after standard packages\norg.osgi.framework.system.packages.extra= \\\n   sun.misc\n```\n. ",
    "deverton": "One use case is to be able to build simple HTML dashboard on top of the JSON output from the metrics servlet. This won't work without JSONP support because of CORS. Or possibly changing the MetricsServlet to server up all the needed Access-Control-* headers.\n. ",
    "jimfcarroll": "Ha. I probably would if I had an easy way to test it. I'm using metrics in my own framework (http://dempsy.net) and I noticed the loss of functionality when I upgraded. Unfortunately I personally use Graphite, not Ganglia, so I'd have no way to really work through any issues apart from porting the old code and making sure it compiles.\n. Thanks. I was looking for the time to take this on. I would have gotten to it eventually.\n. ",
    "btatnall": "I have a custom ScheduledReporter that keeps track of prior counts so I know how much the count changes each time report is called. With a countable interface I could have a single storePrior method for Counter, Histogram and Metered. Right now, I'm solving the problem with method overloading for each of the types and long. \nI do see that Gauge is the outleir of the group because you aren't guaranteed to return a long from getValue (eventhough all of my Gauges are longs). Otherwise everything in core would be countable.\n. ",
    "yegor256": "Fair enough, thanks.\n. ",
    "pcsanwald": "I'll have a look and try to figure out what might be going on.\n. I updated my fork from master to take the changes from yesterday, so it should merge correctly now. I'm seeing one of evanj's deltas in my pull request, but it's this commit:\nhttps://github.com/codahale/metrics/commit/33113e55cb500e71ccb89fe7ffc6861da4cbcb14\nI can rebase to try and fix this, let me know if you'd rather I do that, but I think my pull request should merge now.\n. no problem! this was a good experience, I will try to contribute where it makes sense in the future.\n. ",
    "twinforces": "Woot! Very cool. \n. ",
    "mhurne": "This looks quite useful. Is a 3.1.0 release in the works?\n. Some solution to this problem is desirable on my end as well, especially when using https://bitbucket.org/marshallpierce/hdrhistogram-metrics-reservoir\n. ",
    "TomRK1089": "Thanks for the clarification. :+1: \n. ",
    "jlavallee": "Would you be amenable to a pull request for changing the javadoc for MetricsServletContextListener?\n/**\n *\n * ContextListener that instantiates the registries necessary for the\n * AdminServlet to initialize correctly. Should be added to a servlet context,\n * such as in a web.xml, along with a servlet mapping for AdminServlet.\n */\n. ",
    "migue": "I think we really need to depend on those; there is no other alternative to\ngrab this kind of perf monitors.\nIs depending on sun.* classes really a big deal? This packages are found in\nthe OpenJDK too in addition to the Oracle JVM\nNot sure about the compiling problem; everything is working fine for me; I\nwill try to take a look!\nOn 20 June 2013 05:00, Coda Hale notifications@github.com wrote:\n\nIf we really need to depend on those, I'd rather add a metrics-jvm-extraso folks who want metrics provided via public APIs aren't stuck depending\non Oracle internals.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/425#issuecomment-19728309\n.\n\n\nUn saludo,\nMigue\nhttp://migue.github.com\n. ",
    "djsutho": "Added a couple of tests is there anything else you need?\n. ",
    "andlaz": "fair enough, i opened #428 \nthanks!\n. ",
    "davececere": "sorry for the delay of this response.\nI'd like to have the option of not holding on to metrics instances and using the metrics registry as a map of metrics by key.\n. My application starts up with knowledge of all the different metrics that it wants to track, so it creates them in the MetricsRegistry.\nDuring runtime, various parts of my application want to increment their metrics. \nInstead of every component having references to Metrics objects, they all invoke a common domain-specific component with methods like \"observeAction1()\". Our domain-specific component then adjusts the appropriate Metrics object for such an observation via the MetricsRegistry. This facade component is just a design decision to reduce coupling to external libraries.\nI have found our simple wrapper component tracking which metrics are what by storing the metrics in a hash via the key we used to create them during start up. It occurred to me that this might be better handled by your framework.\nif you want to keep this out of Metrics, you can just close this Issue and we can keep it in our domain specific code. not a problem.\n. ",
    "tvleminckx": "I would appreciate this feature to find its way into the metrics library!\nAre there any plans to include these changes?  What is holding this back?\n. test failure that is reported seems unrelated with my changes?\n. see pull request #578 \n. ",
    "hancockks": "I'd like to see this as well.  I'm considering going back to the 2.2 release because I don't have enough control over JMX bean names.\n. @ryantenney, @smartrics You're right...I dislike doing that as it makes for maintenance headaches later on (this is java, right? subclassing?), but going with an older version for a 1-line code change seems a worse choice.\n. ",
    "smartrics": "That's exactly what I have eventually done. Also for the csv reporter to\nlet the files roll\nOn May 22, 2014 4:01 PM, \"Ryan Tenney\" notifications@github.com wrote:\n\n@hancockks https://github.com/hancockks The better approach would be to\ncopy JmxReporter into your own codebase and modifying the ObjectName\ngeneration. Some variation of this PR will make it into 3.1.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/432#issuecomment-43899862\n.\n. \n",
    "slovdahl": "Wouldn't it be better to use ObjectName.getInstance(...) instead of new ObjectName(...)?\n. Thanks for the fast fix. Is a 3.0.1 release far away?\n. This is what AtmosphereRequest looks like: https://github.com/Atmosphere/atmosphere/blob/master/modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java\nJust ask if you need more information or help to debug.\n. Okay, thanks for investigating! That doesn't solve the problem though, only works around it.. What kind of metric will be missed if this fix is applied?\nI guess it's quite hard to fix it on the Atmosphere side too, as Atmosphere supports a lot of servlet containers.\nHowever, this is not a problem for me at the moment, I had to revert to jetty8 because of other reasons. It would still be nice to fix the CCE of course, so maybe your suggested fix is sane after all.\n. When would you be able to issue a new release? That way I wouldn't need to compile and package it myself. ;) Thanks in advance!\n. This is how I did it: https://github.com/slovdahl/metrics/commit/7dbf748a6f4e1d065f4234faaef7add41a926c20\n. Also added it to all reporters: https://github.com/slovdahl/metrics/commit/03e345b4d332976b47376391f6c5b24af1da2e50\n. It doesn't look like it will. And I don't have any power to choose what's merged, I'm just a normal user :)\n. Sounds nice! Any kind of ETA for v4?\n. Awesome, thank you!. ",
    "jhberges": "Ok - mostly fixed by avoiding \"smart\" IDE's..\nThe explisit \"this()\" from the constructor is more of a lesson learned, that people might easily (at a later point in time) add some evil defaulting in default constructors -- and break the non-default ones :-/\nThat said, I guess these components are small enough to handle this by their size and test-coverage alone :-)\nCheers, Jan-Helge\n. I think that went well...\n. ",
    "andreparodi": "Hi Coda,\nI saw you have already made a fix for this so maybe this comes a bit late.\nAnyway the way the problem manifests itself is simply that data does not\nappear in graphite. I couldn't find any errors in graphite logs so it just\nsilently fails.\nThanks for the fix and thanks for a great library.\nAndre\nOn 15 Jul 2013 23:40, \"Coda Hale\" notifications@github.com wrote:\n\nWhat issue were you seeing?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/issues/441#issuecomment-21005912\n.\n. \n",
    "paulmakl": "I am running into a similar problem as Andre. I set up a simple python script to monitor traffic through the port I am trying to send graphite data, and am not seeing anything at all.\n. ",
    "cschuyle": "Thanks for responding so quickly!\nThis was a mistake.  I still don't know the root cause, but it was not the metrics jars after all.  I am still investigating and can followup if I do find the cause.\nSo, this is a non-issue.  Thanks again, and apologies for the false alarm.\n. ",
    "thobbs": "Closing now that pull request #467 has been opened.\n. > I'm intrigued, though how are the nonstandard rates extracted from the meter? All the reporters are hardcoded to report 1m, 5m and 15m rates.\nAs is, you need to manually extract the rates through getRate(interval, intervalUnit).  Complete support throughout the library for configurable rates would require additional work.\n. ",
    "rohan25": "Ignore. This version is flawed - will need a new metric.\n. Done.\n. ",
    "robertkuhar": "OK.  Maybe not through a DELETE request, but you really do need some way to reset the metrics.  Without the ability to reset them on some schedule the Average becomes rather useless to track a change of behavior over time in that the past gets too much 'weight' over the present.  I was surprised not to see some \"reset\" operation when I looked at these kids through JMX.\n. ",
    "bodgit": "That's what I thought so I changed the code to:\nmetricsAppender = new InstrumentedAppender(metricsRegistry);\nmetricsAppender.activateOptions();\nLogManager.getRootLogger().addAppender(metricsAppender);\nI get the compile error:\n[ERROR] .../spindle/elasticsearch/metrics/MetricsService.java:[66,23] cannot find symbol\n[ERROR] symbol  : method activateOptions()\n[ERROR] location: interface org.apache.log4j.Appender\nSorry if this is basic stuff, my Java is rusty verging on non-existent.\n(Ok, changing the metricsAppender variable class from Appender to InstrumentedAppender seems to have fixed this, sorry for the noise)\n. ",
    "stefanbirkner": "The documentation has been extended already: 6edc80579527b4af9fefcf1748cf6d9f243252f3. It would be nice if someone publishes this new page. (I ran into the problem, too. The new page prevents others from having the same trouble.)\n. ",
    "bconneen": "Found the small bug in MetricsModule.java\n@Override\n    public void serialize(Meter meter,\n                          JsonGenerator json,\n                          SerializerProvider provider) throws IOException {\n        json.writeStartObject();\n        json.writeNumberField(\"count\", meter.getCount());\n         //The next two are swapped...\n        json.writeNumberField(\"m15_rate\", meter.getOneMinuteRate() * rateFactor);\n        json.writeNumberField(\"m1_rate\", meter.getFifteenMinuteRate() * rateFactor);\n        json.writeNumberField(\"m5_rate\", meter.getFiveMinuteRate() * rateFactor);\n        json.writeNumberField(\"mean_rate\", meter.getMeanRate() * rateFactor);\n        json.writeStringField(\"units\", rateUnit);\n        json.writeEndObject();\n    }\n}\n. My apologies, first time ever contributing.  Will initiate a new pull request after fixing tests.\n. Thanks Nick.  Slowly learning Git and Github.  I appreciate the advice.\nAgain,  really love Metrics, great library.\nBrian\nBrian\nOn Sat, Aug 17, 2013 at 6:12 AM, Nick Telford notifications@github.comwrote:\n\nFYI: if you make your changes in a branch, push that branch to your fork\non GitHub, then initiate the Pull Request from that branch (rather than\nmaster), you can add additional commits to it, and work on other\nbranches/Pull Requests concurrently.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/codahale/metrics/pull/456#issuecomment-22811565\n.\n. m1_rate and m15_rate were swapped in MetricModule's MeterSerializer.serialize. I made the fix, and updated the test case.\n. \n",
    "gschrader": "I've made this fix here https://github.com/codahale/metrics/pull/464 I wasn't sure how to do the pull request from this issue itself.\n. ok thanks\n. Weird, not sure how I got them to pass locally, sorry I also missed the other merge request, anyway glad this is now fixed.\n. ",
    "jordan-dinwiddy": "Hi,\nI just ran into this issue. Any idea when the next release incorporating the fix will be?\nJordan\n. ",
    "nicktelford": "```\nFailed tests:\nMetricsModuleTest.serializesMeters:114 expected:<...count\":1,\"m15_rate\":[3.0,\"m1_rate\":5].0,\"m5_rate\":4.0,\"me...> but was:<...count\":1,\"m15_rate\":[5.0,\"m1_rate\":3].0,\"m5_rate\":4.0,\"me...>\n```\nLooks like the test needs fixing too.\n. FYI: if you make your changes in a branch, push that branch to your fork on GitHub, then initiate the Pull Request from that branch (rather than master), you can add additional commits to it, and work on other branches/Pull Requests concurrently.\n. My bad, I initially calculated the incorrect value and forgot to update the assertion label when I updated it. Fixed in a485fda6aa2b0e85a448b5277d170269670849cf\n. ",
    "nezhazheng": "\u4f60\u53ef\u771f\u662f2\uff0c\u5728\u8001\u5916\u7684repo\u91cc\u5199\u5c3c\u739b\u4e2d\u6587\u3002\u3002\u3002\n. \u8fd8\u6709\u8fd9\u79cd2B\u95ee\u9898\u5c31\u522b\u95ee\u4e86\uff0c\u5c3c\u739b\u771f\u4e22\u4eba\u3002\n. ",
    "clohfink": "A little hack you can use is specify \"/\"'s in your name the way you want it then register a custom MetadataNamingStrategy ie:\njava\npublic class FolderThingyNamingStrategy extends MetadataNamingStrategy {\n...\n    public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException {\n        ObjectName objectName = super.getObjectName(managedBean, beanKey); \n        ObjectName result;\n        if (beanKey.contains(\"/\")) {\n            String[] parts = beanKey.split(\"/\");\n            StringBuilder sb = new StringBuilder(objectName.getDomain() + \":\");\n            sb.append(\"application=\").append(servletContextName);\n            for (int i = 0; i < parts.length - 1; i++) {\n                sb.append(\",\");\n                sb.append(\"attr\").append(i).append(\"=\");\n                sb.append(parts[i]);\n            }\n            sb.append(\",name=\").append(parts[parts.length - 1]);\n            result = ObjectNameManager.getInstance(sb.toString());\n        } else {\n            result = ObjectNameManager.getInstance(objectName.getDomain() + \":\" + \"application=\"\n                    + servletContextName + \",name=\" + beanKey);\n        }\n        return result;\n    }\n. +1\n. Why not just make a custom reporter that pushes the metric to the listeners? Then there wont be any broken apis and no changes needed in metrics core.. ",
    "joschi": "Also see #493.\n. @ryantenney Any chance that this will make it into the next version of Metrics? It's a non-breaking change (since it's a completely new module) so it should be fine.\n. Thanks for merging, Ryan!\nAs for other PRs to merge before the next release, I think #504 and #544 are good candidates (adding functionality without break compatibility).\n. It should at least compile with Jetty 9.0 and 9.1 but there have been some changes in the HttpChannelState.State (9.0.7.v20131107 vs. 9.1.0.v20131115) which will probably lead to some wrong metrics (e. g. HttpChannelState.State.REDISPATCHED should be accounted  for in Jetty 9.0).\nThe alternative to upgrading metrics-jetty9 is creating a separate module for Jetty 9.1 which is almost identical except for the (transitive) dependencies.\n. Reading issue #521 it probably makes most sense to introduce an additional module metrics-jetty91 for supporting Jetty 9.1, even if that means having to maintain some duplicate code.\n. I've reorganized the PR.\nThe original module metrics-jetty9 (compatible with Jetty 9.0) has been renamed to metrics-jetty9-legacy and the new module is called metrics-jetty9 (compatible with Jetty 9.1 and higher).\n. +1\n. I'll close this issue since most of the work is now done in #532.\n. You could use the GitHub Maven Plugins to upload the generated (aggregated) Maven Site to GitHub Pages when performing a release.\n. The Javadocs for Metrics 3.0.2 are now (temporarily?) available at http://metrics.dropwizard.io/apidocs/\n. @astefanutti Please don't update links yet. I personally would like to have the version somehow included in the URI (e. g. /${metrics.version}/apidocs) but we'll have to discuss that first.\n. The Javadocs for Metrics 2.2.0, 3.0.2, and 3.1.0 are now available on http://metrics.dropwizard.io/\n- https://dropwizard.github.io/metrics/2.2.0/apidocs/ (72717e3bb389c1615d160276dfa9a3a2177f698e)\n- https://dropwizard.github.io/metrics/3.0.2/apidocs/ (1d9945c1a44da22f691e6f56bc981c7743db4387 and c27d055c17f836f4369895084c22f489ead37f04)\n- https://dropwizard.github.io/metrics/3.1.0/apidocs/ (14bac0a165087e9ce8c841b57c8c52c72518e1f3)\nThe Javadocs have been generated with mvn javadoc:aggregate.\n. @saadmufti Thanks for the initial work and the incremental changes during the review!\n@ryantenney I've reviewed the code and it looks good to me.\n. Looks good. Thanks!\n. @ryantenney We could probably just release the Jersey 2.x support on its own, it doesn't have to live in the metrics repository. At least not for technical reasons.\n. @saadmufti It would be best if you rebased your branch (in #532) on the current master branch and applied the changes there. No need to maintain two pull requests for the same changeset.\n. Fixed with commit a361dc6121092e8e9e5b7851001d8c663d00a3e1.\n. Fixed with commit a361dc6121092e8e9e5b7851001d8c663d00a3e1.\n. @ryantenney No, Dropwizard is using metrics-jersey2 since Dropwizard 0.8.0.\n. Just a thought, but responding with HTTP status 404 (Not found) might be more sensible in case the platform doesn't support getting a thread dump.\n- http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html#SC_NOT_FOUND\n. My rationale for suggesting to respond with status 404 (Not Found) is that the client tried to obtain a representation of the thread dump which is simply not available on this platform, without checking its availability first.\n. This change will probably make some users of Jersey 1.x unhappy. Any reason not to keep metrics-jersey as a name?\n. This seems to be a left-over from the old Javadoc (and a copy & paste error).\n. Not sure what caused this, but these .gitignore files shouldn't be part of this PR.\n. It would be nice if there was a small code sample on how to add the ApplicationEventListener to Jersey 2.\n. This variable should be final.\n. I think it would make sense to use ImmutableMap for these \"caches\" and fill them with a ImmutableMap.Builder in onEvent; also see ImmutableCollectionsExplained\nJersey 2.x repackages Google Guava and the immutable collections can be used here. The class in question is available as jersey.repackaged.com.google.common.collect.ImmutableMap.\n. I'm also not quite convinced that caching is really necessary in this place. MetricRegistry already maintains a cache for the metrics itself (MetricRegistry:51).\n. Are there any plans to move the Metrics project to Java 7?\nIf there are, we should bump this to version 2.9 before merging. Otherwise we'll have to stick with Jersey 2.6 which was the last release working with Java 6 (see Migrating from Jersey 2.6 to 2.7).\n. ",
    "elreydetodo": "I'm currently looking to do something similar to this, also incidentally related to Cassandra. What's the likeliness that this patch will get accepted?\nThere's also a related issue that EWMA uses a static 5 second intervals, and if you're dealing with much shorter moving averages, that might be too coarse.\n. ",
    "rene-andersen": "Thanks a lot. When do you expect to put out a new official release of Metrics?\n. ",
    "wendelicious": "Also, we have multiple Registry instances in our application, so for devo the console was dumping nonsense, so I'm synchronizing over the output stream.\n. ",
    "leonfin": "As I remember, the exception happened from one of the Gauges getValue. The report just logs it eventually like so:\n private void logGauge(String name, Gauge gauge) {\n        logger.info(marker, \"type=GAUGE, name={}, value={}\", name, gauge.getValue());\n    }\ngetValue could throw.\n. ",
    "rwmccro": "That also works - an overflow on the long type would probably take so long to happen that it would not really matter.\n. ",
    "nguillaumin": "Hi, sorry for the delay.\nI'm running 3.0.1 with this issue, do you have any reason to believe it would be fixed by a change in 3.0.2?\nI'll try to upgrade and let you know.\n. I upgraded to 3.0.2 but unfortunately that's still happening.\nI agree it's difficult to reproduce, that might happen only under stress as I can't reproduce it either on my local development environment.\n. One thing I noticed by increasing logging is that there are some connection problems to my Graphite server from time to time:\n```\n2014-04-01 15:42:48,285 [metrics-graphite-reporter-thread-1] WARN  graphite.GraphiteReporter  - Unable to report to Graphite\njava.net.ConnectException: Connection refused\n        at java.net.PlainSocketImpl.socketConnect(Native Method)\n        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)\n        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)\n        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n        at java.net.Socket.connect(Socket.java:579)\n        at java.net.Socket.connect(Socket.java:528)\n        at java.net.Socket.(Socket.java:425)\n        at java.net.Socket.(Socket.java:241)\n        at javax.net.DefaultSocketFactory.createSocket(SocketFactory.java:277)\n        at com.codahale.metrics.graphite.Graphite.connect(Graphite.java:71)\n        at com.codahale.metrics.graphite.GraphiteReporter.report(GraphiteReporter.java:153)\n        at com.codahale.metrics.ScheduledReporter.report(ScheduledReporter.java:116)\n        at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:87)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:724)\n```\nMaybe there's an error handling issue here that would corrupt subsequent data submissions?\nLooking at GraphiteReporter.report(), it might be possible that graphite.connect(); blocks while the connection is established. If that takes more than the reporting interval (1mn in my case) then another thread would call report() again, possibly stepping on the toes of the previous one?\n. Thanks for the suggestion, that's a good idea, however I think I already achieved the same effect by looking at the carbon-cache creates.log that shows what Graphite is receiving, and that seem to be corrupted (see the initial description of the bug report)\nI tried it anyway with tcpdump and it seem to confirm that. See for example this batch of metrics that were submitted, they're mostly fine but one of them is corrupted:\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-Java-Encodings._default.total-matching.p98 2.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-Java-Encodings._default.total-matching.p99 2.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-Java-Encodings._default.total-matching.p999 2.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.count 1 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.max 31 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.mean 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.min 31 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.stddev 0.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p50 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p75 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p95 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p98 31.00 1^@^@\u00a0^@Free4\nauto-w0\u00c5O\u00fe^C\u00f8\u00ff\u00ff^P^F>^E<80>\u00fa\u00ff\u00ffernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p99 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.padre-elapsed-time.p999 31.00 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.total-matching.count 1 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.total-matching.max 31 1399380474\nauto-win2012-64bit.modernui.Public.collection.Se2-PublicUI-QueryCompletion._default.total-matching.mean 31.00 1399380474\nA couple of other examples:\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServer-auto-win2012-64bit._default.queries.m5_rate 0.00 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServer-auto-win2012-64bit._default.queries.m15_rate 0.00 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServer-auto-win2012-64bit._default.queries.mean_rate 0.00 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2^@^@\u00d0^@FreerverMeta0\u00c8O\u00fe^C\u00f8\u00ff\u00ff^P\u00a2'^F<80>\u00fa\u00ff\u00ffbit._default.queries.count 2 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServerMeta-auto-win2012-64bit._default.queries.m1_rate 0.00 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServerMeta-auto-win2012-64bit._default.queries.m5_rate 0.00 1399385094\nauto-win2012-64bit.modernui.Public.collection.Se2-MultiServerMeta-auto-win2012-64bit._default.queries.m15_rate 0.00 1399385094\nauto-centos5-64bit.modernui.Admin.collection.Se2-MediatorPushInstantUpdate-auto-centos5-64bit._default.queries.m5_rate 0.00 1399385204\nauto-centos5-64bit.modernui.Admin.collection.Se2-MediatorPushInstantUpdate-auto-centos5-64bit._default.queries.m15_rate 0.00 1399385204\nauto-centos5-64bit.modernt\u00echS\u00a6V^L^@<8a>^\\^@^@<8a>^\\^@^@^@%dNs\u00e4^@^L)^K<94>\u00b2^H^@E^@^\\|Z @^@@^F \u00c5\u00c0\u00a8^Q#\u00c0\u00a8^Q:\u00dc\u00f9^G\u00d3\u00e2\u00d1(n^C\u00df<91>\u00a6<80>^P^@.\u00c0^\\^@^@^A^A^H\n.@\u00efiJ[\u00adcui.Admin.collection.Se2-MediatorPushInstantUpdate-auto-centos5-64bit._default.queries.mean_rate 0.00 1399385204\nauto-centos5-64bit.modernui.Admin.collection.Se2-Meta-Hidden-ManageCollectionOptions._default.queries.count 2 1399385204\nauto-centos5-64bit.modernui.Admin.collection.Se2-Meta-Hidden-ManageCollectionOptions._default.queries.m1_rate 0.00 1399385204\nauto-centos5-64bit.modernui.Admin.collection.Se2-Meta-Hidden-ManageCollectionOptions._default.queries.m5_rate 0.00 1399385204\nauto-centos5-64bit.modernui.Admin.collection.Se2-Meta-Hidden-ManageCollectionOptions._default.queries.m15_rate 0.00 1399385204\n. I'm seeing that on our Graphite test server. Since we've deployed it on production and everything works fine, so it must be something with the test environment. I rebuilt the server on a different hardware and it was fine for a couple of weeks but now I'm seeing corruption again.\nIn any case it doesn't seem to be related to the Metrics library, probably has more to do with the Graphite setup, so I'm happy for this one to be closed.\n. ",
    "holyjak": "@nguillaumin You might want to check the data as they arrive to the server with f.ex. graphite-server$ sudo ngrep -d any port 2003 (provided Carbon runs at 2003; add more filtering to limit it further, f.ex. sudo ngrep -d any <substring expected in the packet> port 2003).\n. ",
    "jfager": "That's surprising given the core doc page (http://metrics.codahale.com/manual/core/) examples of how to create custom Gauge types.  I want to do basically the same thing as the RatioGauge example there but for Metered so that I have the standard 1-,5-, and 15- minute values.  I'm already doing this by just subclassing Meter but as I get more of my system under monitoring they're starting to consume more resources than I'd like.\nIf I actually made a pull request instead of just asking for it, any chance it would get merged?  \nApologies if this has already been hashed to death on a mailing list or something, if the answer is no then I'll shut up.\n. Metered is an interface as well.\nDisappointing, but thanks for a great library.\n. ",
    "alexsuter": "What happens here?\nDropwizard should implement the HTTP Protocol in the correct way.\n. ",
    "marlonbernardes": "You're welcome! I'm glad I could help.\n. ",
    "smojtabai": "why is this not getting merged, this is really useful?\n. thanks for update\n. Thank you, this is very helpful, any thoughts on release timeline?. Amazing, we definitely will. Just chiming in here that I think your interface makes sense and reducing the number of objects to manage is nice +1. . ",
    "felixbarny": "+1\n. This is my static helper class. I got the regex somewhere from the graphite source code.\nYou can use and modify as you like. It's under Apache 2.0 license as its part of the stagemonitor project. \nhttps://github.com/stagemonitor/stagemonitor/blob/master/stagemonitor-core/src/main/java/org/stagemonitor/core/util/GraphiteSanitizer.java\n``` java\npublic final class GraphiteSanitizer {\npublic static final Pattern DISALLOWED_CHARS = Pattern.compile(\"[^a-zA-Z0-9!#\\\\$%&\\\"'\\\\*\\\\+\\\\-:;<=>\\\\?@\\\\[\\\\\\\\\\\\]\\\\^_`\\\\|~]\");\n\nprivate GraphiteSanitizer() {\n}\n\n/**\n * Graphite only supports alphanumeric characters + !#$%&\"'*+-.:;<=>?@[\\]^_`|~ so each metric name segment has to\n * be cleared from other chars.\n * <p/>\n * <pre>\n * metric path/segment delimiter\n *         _|_\n *        |   |\n * metrics.cpu.utilisation  <- metric name\n *    |     |      |\n *    -------------\n *          |\n *  metric name segments\n * </pre>\n *\n * @param metricNameSegment the metric name segment (see diagram above for a explanation of what a metric name segment is)\n * @return the metricNameSegment that contains only characters that graphite can handle\n */\npublic static String sanitizeGraphiteMetricSegment(String metricNameSegment) {\n    return DISALLOWED_CHARS.matcher(metricNameSegment.replace('.', ':').replace(' ', '-').replace('/', '|')).replaceAll(\"_\");\n}\n\n}\n``\n. Graphite only supports alphanumeric characters + !#$%&\"'*+-.:;<=>?@[]^_|~\n. I've found it somewhere in Graphite's source code. Can't remember where though...\n. I think the regex is missing the backslash character (\\\\)\n. No, that's one of the most illegal chars ;)\nBut look at my sanitizeGraphiteMetricSegment method. I'm replacing it separately by | to that URLs don't look like :hankey: . For example GET /index.html -> GET-|index:html as supposed to GETindexhtml or GET--index-html but thats a matter of taste I guess...\n. That feature unfortunately is not documented, but it IS possible.\nSee for example the official example python script: https://github.com/graphite-project/graphite-web/blob/master/examples/example-client.py#L54\n. I see, so sending over TCP has always been in batches? I didn't know that. But I believe pre 3.1 a new connection to Graphite has been established and closed for each individual metric. Am I right? So batching is effectively working since 3.1?\n. Sounds cool. What is it good for?\n. ",
    "mglcel": "Hi ! do you plan to merge this PR or do i have to use my fork only ? Thanks !\n. ",
    "jlw4": "I've implemented the same functionality, although I'm excluding specific values rather than groups. Same idea though, removing unnecessary data from our graphite server.\nhttps://github.com/dropwizard/metrics/pull/659\n. Example Usage:\nString uri = metricsProperties.getGraphiteUri();\n    int port = metricsProperties.getGraphitePort();\n    int reportingPeriod = metricsProperties.getReportingPeriod();\n    Graphite graphite = new Graphite(new InetSocketAddress(uri, port));\n    ValueFilter valueFilter = new ValueFilter()\n            .excludeValue(Value.METER_COUNT)\n            .excludeValue(Value.METER_M5_RATE)\n            .excludeValue(Value.METER_MEAN_RATE)\n            .excludeValue(Value.TIMER_MEAN)\n            .excludeValue(Value.TIMER_MAX)\n            .excludeValue(Value.TIMER_MIN)\n            .excludeValue(Value.TIMER_STDDEV)\n            .excludeValue(Value.TIMER_P50)\n            .excludeValue(Value.TIMER_P98)\n            .excludeValue(Value.TIMER_COUNT)\n            .excludeValue(Value.TIMER_M5_RATE)\n            .excludeValue(Value.TIMER_MEAN_RATE);\n    graphiteReporter = GraphiteReporter.forRegistry(metricRegistry)\n            .prefixedWith(METRICS_PATH)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .filter(MetricFilter.ALL)\n            .valueFilter(valueFilter)\n            .build(graphite);\n    graphiteReporter.start(reportingPeriod, TIME_UNIT);\n. The main idea was following the same pattern as MetricFilter, for consistency with the project. In the MetricValueFilter interface I included the trivial filter 'ALL' similar to the ALL filter in MetricFilter. I was also trying to write it in a way that another reporter could use the MetricValueFilter in a similar way.\nThe need for this feature comes from the way graphite stores data. Each value from a Metric creates a file of fixed size, so a default Timer creates 15 files once it has reported a single value. When the number of Timers, Histograms and Meters is large, this creates a lot of wasted space.\n. ",
    "arteam": "This feature is now implemented as #1048.. I believe this should not be closed, because  @ho3rexqj wanted to create another pull request with a fix for the getTick  method (for the case with the long overflow during the calculation of a new tick).. I guess you meant\u200b to comment on #1077, right? I think it's possible to change the format to be compatible with 1.6, if it doesn't change behaviour for 1.7 and 1.8.. I think it would be correct to change the pattern, because we still want to maintain runtime compatibility with JDK 1.6.. I guess it's now implemented as #1068.. It should be now implemented in the form of #1073.. Implemented as #1048. I think that's a good change for the 4.0 version. We can create an interface inside Timer:\n```java\npublic interface Context extends AutoCloseable {\n    long stop();\n\n    @Override\n    default void close() {\n        stop();\n    }\n\n}\n```\nand a default private implementation:\n```java\nprivate static class DefaultContext implements Context {\n    private final Timer timer;\n    private final Clock clock;\n    private final long startTime;\n\n    private DefaultContext(Timer timer, Clock clock) {\n        this.timer = timer;\n        this.clock = clock;\n        this.startTime = clock.getTick();\n    }\n\n    @Override\n    public long stop() {\n        final long elapsed = clock.getTick() - startTime;\n        timer.update(elapsed, TimeUnit.NANOSECONDS);\n        return elapsed;\n    }\n\n}\n``. Superseded by #1035.. Submitted #1052 to fix this for the 3.1 branch.. I guess it should be fixed by #1052 . Yes. Unfortunately, it's not possible to patch the internalThreadLocalRandom, because the JDK version uses the internal JDK8 API. I couldn't find a version with the fix in the CVS history of JSR-166 compatible with Java 6/Java 7.. Right.. I think this issue is mostly about incompatibilities in the API betweenmetrics-core3.0.* and 3.1.* You need to track down an old version and exclude it.. Hm.., that's strange. The commit that introduced this issue is https://github.com/dropwizard/metrics/commit/0609cc695f486af5482b132ab89aeab392e88f82 and it was merged to 3.1.0. Could you post the whole stack trace?. It seems to me that the error happens during reading a JMX attribute in theJmxAttributeGauge#getValuemethod, not in in theJmxAttributeGauge` constructor. By the way, are you running under Java8 or Java9? I can imagine a JVM with disabled JMX. Can you reproduce the error without YourKit?. Closed via #1023 . The master branch has been removed and 4.0-development is now upstream. I will take a look at the patch and resubmit if it looks good.. It was basically the approach implement for database healthchecks in Dropwizard: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-db/src/main/java/io/dropwizard/db/TimeBoundHealthCheck.java.\nI think it would be nice to have such a class in the core library. On the other hand, Dropwizard since 3.2.0 supports async health checks which could be used to mitigate the issue of expensive health checks.. > It would be great to have both TimeBoundHealthCheck and unbound HealthCheck in metrics-core .\nIs such PR welcome?\nYes, such a PR would be certainly welcome!. Should be fixed by #1033. The 3.2 branch has been updated to Apache HTTP Client 4.5.2.. Should be fixed by #899 . Yes, as soon we sort things out with the changes for 3.1.3 (#1040) I expect a release. I would like to include only #899 to it to minimize an impact of an updating to a maintenance release.. https://github.com/davidB/metrics-influxdb and https://github.com/iZettle/dropwizard-metrics-influxdb are the most up to date InfluxDB reporters for Metrics 3.2. Unfortunately, for the 4.0 version there is no active maintained reporter under the io.dropwizard.metrics package.. We don't support InfluxDB in the core right now, and there is a coupld of 3rd party reporters:\n https://github.com/iZettle/dropwizard-metrics-influxdb\n https://github.com/kickstarter/dropwizard-influxdb-reporter. The obvious downside is that we can't run tests under Java 7, because Jetty 9.3.0 is compiled against Java 8.\n. What do you think about using reflection to access the ConnectionFactory#getProtocols method?\nWe keep Java 7 compile-time dependency, and in the same time comply with Jetty 9.3.* in runtime.\n. Ping. @ryantenney, could you take a look, please?\n. Yes, the patch should be good to merge. Last time I checked, it worked both on Jetty 9.2.* and Jetty 9.3.*.\n. I didn't check against Java 7, but the tests passed on Travis CI. I used reflection precisely for the reason to avoid any Java 8 dependency.\n. I've created #1038 to backport this feature to the 3.2 branch. For the 4.0.0 branch we can actually just avoid reflection and just implement a new method.. The implementation for 4.0.0 is tracked in #1039.. #1048 has added a MetricAtrribute class.. Sorry, I didn't read the issue carefully. Now we can use MetricAttribute across different metrics modules and expose it in the public API.. We went with another approach of reconnecting to a Carbon server on every report. #1047.. That's a good idea. I'm going to rebase this pull request on the 3.2 branch. . On second thought, I think this PR can't be accepted because it changes the public API. The setDefault(name, registry) method is removed and some users can depend on it. Let's split this PR in two parts\n\nfixing race conditions on defaultRegistryName\nadding SharedMetricRegistries. This issue is about the 4.0.0 version which had a lot of incompatible changes and were never released. Do you have issues the 4.0.0-alpha3 version from the central repository? It should be mostly compatible with the 3.2 version, but I will gladly hear about migration issues. . Support for tags is planned for the 5.0 version. Please see the discussion in #1175.. It was fixed in Metric 3.2.0. Now CsvReporter has a CsvFilePrvovider which sanitizes metrics names. You can provide a custom one, if you want. See #882 and #910.. I had a look and this PR looks good to me. I will merge it to the 4.0.0 branch and try to port to the 3.2 manually. The new 4.0.0 will probably created from scratch, anyway. Thank you for your efforts on this issue.. Looks like the user now can disable some metrics (#1048) and format decimal digits (#1073).. Merged as #1036. Thank for your contribution!. Looks like a reasonable improvement for me.. This was contributed to the 3.2.x branch in #947. But we can use the unit tests from your pull requests.\nApplied to the 3.2-development branch as 240fed4. Thank you.. Looks like the documentation is correct. For PingServlet and ThreadDumpServlet the output type is text/plain. For MetricsServlet it's application/json.. I guess it should be fixed by #1074 . I guess #899 should fix that. Now the client opens a new socket every times it sends a new portion of metrics and closes the socket after it's done. The fix was merged to the 3.1 branch.. I will take a look. I moved a bunch of merge requests manually from the 4.0 branch to 3.2, maybe I missed this.. Looks good to me. I like the setter approach.. Thanks for the contribution!. Contributed in #905.. #999 now provides the ability to set the initial delay for ScheduledReporter.. Contributed in #1077 . Addressed by #1049 . Hello @remmeier,\n\nI find all your suggestions very reasonable, would gladly review a pull request in case if you have time to contribute.. Jetty 9.3 should be supported in an upcoming 3.2. The fix is #1038. ba7715a was merged to the master branch (4.x), but it doesn't really help for the users who still use the 3.* version. #1039 updates metrics 4.0.0 to 9.4 without any reflection hacks. . We don't support InfluxDB in the core, despite it was merged to master at some point of time. . A reason for closing described in #988.. Hello @wonook,\nThanks for your pull request! Unfortunately it can't be accepted to upstream, because it changes behaviour of the reporter. The current CSV reporter doesn't have side effects, on the contrary your proposed reporter forces users to call the stop method on it in order to gracefully close opened files. That's not backward compatible and could leak to file descriptor leaks. I think your use case with such a frequent reporting is rather rare, so most of users shouldn't be much affected by opening/closing a file on each report.. Thanks for your contribution, Steven.. I had an impression that the compiler is smart enough to figure out which SAM should applied depending on the argument. For instance, this snippet compiles for me:\njava\nTimer timer = new MetricRegistry().timer(\"test\");\ntimer.time(() -> System.out.println());\ntimer.time(() -> System.currentTimeMillis()); . Hello @tommy-bo, \nThanks for the pull request! That's a very interesting approach for customizing the admin servlet, but I'm a little bit reluctant to merge it. I would prefer to keep the servlet simple rather than provide an ability to customize its output via Java code. There is a big amount of HTML template engines out there which are much better in this job. Advanced users can use those should they need something more complex. Let's put this pull requests on hold.. Thanks for your contribution!. Thanks!. Closed via #999 . Hello @sofax,\nSorry to get back to you late. I like your pull request, could you please rebase it against the 3.2-development branch? Due changes from another pull requests (respectively #1018), it now has merge conflicts and can't be merged. Thank you.. Thank you for your contribution!. @Fuud, thank for the pull request! Sorry to get back to you late, but I think this feature now should be covered by #1023 in a little different manner. Could you please have a look?. Should be fixed by #1033 . Hello Philipp,\nSorry to get to back to you late. Your pull request looks reasonable, but could you say why you don't want to use MetricFilter to specify metrics which should be reported? I guess your use case could be implement as: \n```java\nfinal Set disabledMetricTypes = new HashSet();\ndisabledMetricTypes.add(MetricTypes.M15_RATE);\ndisabledMetricTypes.add(MetricTypes.M5_RATE);\nGraphiteReporter.forRegistry(registry) .filter(new MetricFilter() {\n                    @Override\n                    public boolean matches(String name, Metric metric) {\n                        return !disabledMetricTypes.contains(name);\n                    }\n                })\n``. Got it. My biggest concern for this feature is that we implement it only forGraphiteReporter`, but not for other reporters. On the other hand, judging that every reporter has an own mechanism for sending metrics, it's rather hard to generalize it. I think we can start with Graphite for the time being.. Looks better! Unfortunately, the pull requests still has merging conflicts. I think we could make at least mergeable, so folks who are interested in this feature could build it locally.  . @ryantenney mentioned that we will likely pass on this feature for the 3.2. branch, because it creates a disparity between reporters. But we definitely can consider it for the 4.0. branch, perhaps in a more generic manner.. Superseded by #1048 . @anthonydahanne and @henri-tremblay, \nSorry to for the late response. I think this is a very fine module. The JCache specification has a JSR and supported by many caching libraries, so it makes sense to include and support it as one of the main modules. The implementation is rather concise, and I don't see downsides of merging it. Thank you and Terracotta for contributing it. . Hi @henri-tremblay, I recently merged a bunch of pending pull requests to the 3.2 branch, and last week there were not so much activity on the project, so I think it's time to prepare a release. I will try to reach out to @ryantenney about it this week (he has the deploy rights to the io.dropwizard.metrics namespace in the Maven Central repository) . Thanks for the contribution!. Should be fixed by #1038. Right. Anyway, this change would be incompatible, so let's keep it as it is, unless there a big amount of requests to change it for the 4.0 version. . @vladimir-bukhtoyarov, Thank you very much for your contribution!. I like the pull request and would accept it. I think raw ascending metrics can be quite important for certain monitoring systems and it would be great to expose them for timers. @ryantenney, you had some concerns about this improvement in the origin issue. Would you mind to take a look at this implementation?  . I think it's a worthy feature, especially for time-series databases which use monotonous counters (like Prometheus). I will consider this pull requests for inclusion to Metrics 5.0 (which will be after I release Metrics 4.0(Java 8 cleaned up version of Metrics 3.2).. I'm going to release Metrics 4.0 during the weekend and then take a look at merging #1181 to the 5.0 branch.. It was closed because I renamed the 4.0-development branch to  4.0-maitenance, I will port #1181 to the 5.0.0 branch after #1250 is merged.. Submitted #1254 . Thank you very much for your contribution. Looks like exactly what @ryantenney had in mind.. I think it should be closed via #947. Looks like everything works with the latest Jackson version. Thanks for your contribution!. Fixed  via #1135 . Thank you very much for the fix and very detailed unit test!. The issue as I see it:\n\nThread 1 calls update\nThread 2 calls update\nThread 1 calls rescaleIfNeeded\nThread 2 calls rescaleIfNeeded\nThread 1 reads the CAS and updates it\nThread 1 gets swapped out\nThread 2 reads the updated CAS and exits\nThread 2 obtains a read lock and works with a new weight, but old (not scaled) values\nThread 1 gets swapped in and acquires a write lock, but it's too late\n\nBasically, the CAS only guarantees that nextScaleTime gets updated atomically, but not other reservoir's state. . In case the fix the correct, I would like to cherry-pick this change to the 3.1.3-maintenance branch to provide users who affected by this bug an easy path to upgrade.. I didn't get more reasons opposing this fix, so I'm going to move this bugfix to the 3.1.3 branch. In the worst case, we have a performance regression, in the best we fix a concurrency bug.. After a little bit of thought, I believe I can't merge the pull requests to the 3.2.* branch, because it breaks backward compatibility. Custom MetricFilter implementations will become incompatible after the update to 3.2, because they will be forced to implement a new method. @phauer started to work on the same feature in #1008, which, I believe, is a better way to address the problem. The implementation doesn't use MetricFilter, but rather a set of disabled metric types. I would like to close this pull requests in favour of #1008. Thank you for your time and effort on this pull request.. > so I'd like to hold them intact to represent the authorship correctly.\nSure, you can push your changes as separate commits.. So, we have only pme review point to address. If you contribute a unit test for PickledGraphiteUDP, I will happily merge the pull request.. No rush, thanks for taking your time to contribute!. Oh, I cherry picked this change to jetty-9-legacy module instead jetty-9. Will fix.. Should fixed in #1038 . @jplock, could you take a look?. This looks better for the 4.0 branch, and implements the same feature as #1008. Unfortunately, the implementation has the same problem (it updates only one reporter, but I would like to avoid disparity between reporters). Let me collect my thoughts on how to implement this feature in a more generic manner.. Superseded by #1048. Thanks, ping me when you have more thoughts on the matter.. I think this should be good to merge. Could anybody give a review?. > And is there a reason to go with disabledMetricTypes instead of enabledMetricTypes?\nI don't like the inverted logic too. But I think it makes sense from the the user's perspective. The user reports some metrics to its time-series database and sees that some of them are useless, because he/she doesn't use them. The user wants to disable them. For instance, Timer has 15 metrics, and most of them make sense; it would be strange to ask the user to pass  a 14-sized set of metrics just to disable one. . That's a good suggestion. Renamed MetricType to MetricAttribute.. I fixed the build (it was affected by relevant changes from the 3.1 branch moved to 3.2), now it should be good to merge.. Looks good. We should catch all exceptions, despite it's a rare case when a reporter implementation throws a checked exception.. Thank you for your contribution!. I'm currently merging/reviewing outstanding pull requests and bug fixes from the backlog to the 3.2.x branch. A big part of backlog was processed, but I would like to land #1047 and #1048 to 3.2. and after that make a release. I will discuss it with @ryantenney (he has the deployment rights). Hopefully, we can make a release this week, but I can't promise it.  . If the Cassandra project is depended on it, I think it makes sense to backport the fix to the 3.1. branch as well, so it's easier to upgrade for the Cassandra folks.. Looks like so. @ryantenney told me yesterday he is ready to cut the releases.. Does the Cassandra reporter throw Errors? I thought it's a bad practice to catch them, because you could end up swallowing unrecoverable errors. . There is a PR for GraphiteReporter which provides something like that (#984), I could take a look at it. \nI think it's not a bad idea and could improve reliability and resilience. Doing so, we avoid situations when a failure for a set of metrics prevents the whole MetricsRegistry from reporting (or worse sends bogus data). If we adopt it, it means we will not imply that all metrics implementation don't throw exceptions, but embrace failures and find a means to mitigate from them. That might be not so easy, but it looks like a step in the right direction.. I'm still a lit bit reluctant to change Exception to Throwable. This is an easy fix for the Cassandra issue, but potentially can have a negative impact on other reporters. I still believe that handling Errors is not a right thing to do. Could point me on the place where Cassandra throws an Error?. Ah, I see. Thanks for hunting the issue!. Thank you for the pull request! Unfortunately, it can be accepted because it changes the format of data sent to Graphite. As a user, I would be surprised if after an update to a new version of the metrics library, my charts would start showing numbers like 0.234223345898 instead 0.23 without my intention to change the format.\nHaving said that, I can the value in sending floating point numbers in a more precise format. I think, a better approach would be to mark the format method as protected, so users who want to have a custom format, can override it.. I dug out an old dusty JRE6 build (Travis doesn't support it anymore), and the tests passed locally.. @dropwizard/dropwizard-metrics Could someone please review this?. Yes, I've run the suite in JDK6. If I add a e.printStackTrace() call after in the catch block I get this in the console:\n/home/artem/Downloads/openjdk-1.6.0-b30-linux-amd64-installer/jre/bin/java com.intellij.rt.execution.junit.JUnitStarter\njava.lang.NoClassDefFoundError: java/util/concurrent/ThreadLocalRandom\n    at com.codahale.metrics.ThreadLocalRandomProxy.getThreadLocalProvider(ThreadLocalRandomProxy.java:38)\n    at com.codahale.metrics.ThreadLocalRandomProxy.<clinit>(ThreadLocalRandomProxy.java:35)\n    at com.codahale.metrics.ExponentiallyDecayingReservoir.update(ExponentiallyDecayingReservoir.java:98)\n    at com.codahale.metrics.ExponentiallyDecayingReservoir.update(ExponentiallyDecayingReservoir.java:83)\n    at com.codahale.metrics.ExponentiallyDecayingReservoirTest.quantiliesShouldBeBasedOnWeights(ExponentiallyDecayingReservoirTest.java:160)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:622)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runners.Suite.runChild(Suite.java:127)\n    at org.junit.runners.Suite.runChild(Suite.java:26)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:622)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\nCaused by: java.lang.ClassNotFoundException: java.util.concurrent.ThreadLocalRandom\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:217)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:205)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:323)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:268)\n    ... 40 more\nI suppose the exception is thrown when the JdkProvider class is loaded by the JVM.. I think we could make a release this week. Seems like nothing remains in the queue for 3.1.3.. I believe there is no possibility to provide to the user the ability to override the name(Class<?> klass, String... names) method in MetricRegistry, because it's static.\nRegarding your Grafana issue, is there a possibility to use regular expressions to match metric names? I think a greedy regex like prefix.(.+).m1_rate should be able to match all metrics with dots in the middle. . Thank you for the contribution.. @ryantenney did something similar for the 4.0 branch in #876. This also should fix ThreadLocal leaks in the internal LongAdder implementation (by using the JDK implementation on a modern JRE) as reported in #375.. Bummer. The build can't compiled on Travis on JDK 7, because LongAdder doesn't exist in the JDK.\n@dropwizard/dropwizard-metrics I'm wondering if we can remove it (JDK 6/7 will be still supported in runtime).. Thanks for the feedback! I got your point, but I think it would be better to implement this feature in a maintenance release without additional modules. The internal LongAdder is not only has worse performance, but it's prone to memory leaks (because of its use of thread locals). I think it would be great to provide a release which will just fix the issue without requiring the developer/administrator to enable an additional module (so the metrics jar could be just replaced in an application server).. I've updated the pull request to align the implementation with the ThreadLocal one from #1052 . Yes. Updated the version.. Thank you very much for the very detailed write-up and the overflow test! . Thanks!. I think it's a good idea. I would accept a pull request for the 4.x branch.. Looks good to me. Thanks for the contribution!. I also think this a good idea. Maybe we can switch to the io.dropwizard.metrics4 group.. My biggest concern with the proposed change is that caller must manually manage the GraphiteSender object in the reporter before sending metrics (open a connection, flush the output, close the connection).\nI's not obvious and may lead to a confusion. I think every public method of a reporter should not require the caller to know its internal details.. We actually interested only in the last commits plus some docs update,. It is available in the 3.2 branch. It was originally submitted by a mistake to the 3.1 branch and then reverted. The revert commit shows up on the merge, but if you take a look at the diff, no CPU profiling changes are reverted.. This is the work of @tempredirect in #715 rebased to the 3.2 branch.. @ryantenney @jplock Could you please review?. Thank you for your contribution!. Generally looks good to me. Thanks for your contribution! This could be a very useful feature and using annotations makes it very easy for users to convert a health check to an async health check. My biggest concern is to how correctly shut down a HealthCheckRegistry with async executors. Let me play a little bit with it, maybe I will add a follow-up a PR.. Looks good to me. Thanks for the contribution!. Right. The close method is always invoked, so we can close the socket there instead leaving it open and closing on the next connection.. I guess it depends how you interpret it. I think most of users don't care about the number values in the snapshot, but rather about the number of recorded values. E.g. we know we wrote 10000 events, it doesn't matter much with which approach we calculated percentiles (with a sliding time window or an exponentially-decaying random sampling).. I think that's doable. Should be an easy improvement.. Bummer, I screwed up and this change was not added to 3.2.0. I will mark it for 3.2.1.. Sure, maybe it even makes sense to update 1.1.x to 3.2.0 straight ahead.. Accidentally, I did just that today during releasing 3.2.0 and 3.1.3! See https://github.com/dropwizard/metrics/commit/817782b8a6eed91ff23e15d447dc8ed322c0e393. I've released 3.2.0 and 3.1.3 to the Maven Central today. They should be available in a couple of hours as soon as the Central replica servers will be synchronized with the origin.. Thanks! I already updated the link to the Datadog reporter to the Coursera's fork during the overhaul of reporters in #1089. Now http://metrics.dropwizard.io/3.2.0/manual/third-party.html points out to it. . I've used this to generate docs at http://metrics.dropwizard.io/3.2.0.. I think this makes sense. I fail to see a use case when the user wants to disable reporting of a Counter. It disables the whole metric from being reported and this can be done by MetricFilter. On the other hand, I can see a situation when the users wants to disable the counter attribute from a Meter, but allow Counters to be reported.\n@husseincoder Could you please update the GangliaReporter for consistency as well?. Thanks for your contribution!. Thanks for your hard work on this, looks great!. Thank you!. Based on the work of @mattnelson in #849 . The original idea from @mattnelson in #849. It should not be a problem now, because we don't maintain a persistent TCP connection to Graphite anymore in 3.1.1 and 3.2.0. But the idea is good, I believe the Apache HTTP Client does something similar to detect dead connections in the pool.. No. PickledGraphite is just an implementation of GraphiteSender, which is supplied to a GraphiteReporter. GraphiteReporter invokes the connect method on the sender, sends metrics, flushes them, and then invokes the close method. So a new TCP connection opens every time the reporter is run.. No, it's not the original design. The mechanism was changed in the 3.1.3 and 3.2.0 versions (they were released last week), because many users reported issues with persistent connections; a connection could become broken and there were no reliable way to detect it. The new approach leads to bigger latencies during sending metrics (the 3-way handshake is rather expensive), but on the other hand guards against halted reporters.. I think the Druid database could try to use this approach as well or try to maintain a pool of renewable PickledGraphite instances.. Glad to help.. Thank you. I think the idea to switch to the new namespace is right. Metrics4 will be significantly different from Metrics 3.. I agree with @ryanrupp and will put this pull request on hold, unless we have an evidence the sanitizing is broken.\n\nSide note but I also noticed the TCP based graphite sender wasn't actually updated to use this new sanitizer\n\nThanks! I will submit a PR to address that.. Thanks for clearing this up. I will try to test 3.2.0 with on a real Graphite installation.. I think the best remedy is too fallback to removing whitespaces how we do in the Graphite TCP sender.\nThis should remove the bug and make all senders consistent.. Metrics 3.2.1 has been released with the less aggressive sanitizer.. /cc @husseincoder @ryanrupp @nickbabcock . > I feel like we should keep the ability to create metric names that don't crash graphite or else issues like #637 becomes relevant again. IMO, rollback the behavior but expose GraphiteSanitize#sanitize so that users can create metric names that won't crash graphite.\nUsers can override the sanitize method on graphite senders, so it should be possible to provide a custom sanitization.\n. That's true. I just wanted to rollback to the original behaviour so non-TCP senders are not broken.. Oh, right! Thanks for reporting this. I actually fixed this with #1080, but it was merged only to 3.2.0. I forgot that GraphiteReporter now invokes connect before send. I will release 3.1.4 shortly.. I've released dropwizard-metrics 3.1.4 to the Maven central repository. Should be available in a couple of hours.. Thanks for the bug report! I think we could add a guard condition to the copy loop as an immediate fix for the race condition:\njava\nfor (Long value : values) {\n  if (i >= size) {\n    break;\n  }\n  this.values[i++] = value;\n}\nBut this doesn't fix the root cause. Does this error happen only in the 3.2.0 version? I wonder if #1063 could cause it.. @jplock, @patrox: Please review.. Hello. I guess this depends how you actually report data to CloudWatch. Do you use a third-party reporter, parse a some servlet output or read out a MetricsRegistry manually? I think the best way is write some decorator where you can perform a conversion to the CloudWatch format. For instance, GraphiteReporter converts measurements to 2 digits after the point.  See here.. I believe you use MetricsServlet which outputs metrics in the JSON format via HTTP. The actual JSON conversion is handled by Jackson in MetricsModule. Unfortunately, it can't be customized. The simplest option as I see is too copy-paste MetricsServlet and MetricsModule and make needed adjustments. Another option is too contribute to the original module the ability to configure a threshold for measurements.. Thank you!. Good idea. Regarding issues like that, I've been thinking to start actively develop the 4.0 branch (to move all bugfixes and features from 3.2, remove outdated code, actively target Java8, remove outdated modules). . Thanks!. I'm inclined to merge it and then move everything which will be added to 3.2 by cherry-picking (like #1111). I also don't like that we lose git history, but there is so many merge conflicts because the code was ported back & forth, so it doesn't look really feasible to try.. Interesting question. I think there will be conflicts, unless we don't create a special merge commit. Let me try.. Basically, the biggest problem is the namespace change and the MetricName abstraction. On a related note, I've been thinking recently to start the master branch from 3.2, with the goal keep the namespace and the public API compatible. I fear the Python 2/3 case, if the versions will be drastically incompatible. People just won't upgrade to the new library. I think it would be better to evolve the library in a backwards compatible manner. Just a thought after spending a lot of time merging codebases.. I would like to sit on this issue a little bit. I started experimenting in the https://github.com/dropwizard/metrics/tree/metrics4 branch and would like to see how it goes.. I have decided to proceed with the metrics4 branch as a new master. The current master, unfortunately, is too much diverged from 3.2-development, which is the main metrics version. It makes more sense to start metrics 4 from 3.2-development without big changes like changing package names and major breaking API changes.. It's possible to use the toArray version which is type-safe. I don't think there is much point, though. The array is then transformed to a primitive array and basically it's just a data dump. It would be great to avoid unnecessary copying, but I don't know a simple way to avoid it except changing the format of snapshot's storage from the array to the list.. Thank you!. Thank you. I think it should be the same from the math's point of view, but more precise, because we do only one division, instead of division and multiplying.. Thank you for the contribution!. This looks like an interesting addition, could you explain your use case? Do you have several filters which take a lot of time to process? Or do you want to measure Jersey's overhead along with the method?. I will look at it more one more time tomorrow and if it's OK will make a new 3.2.5 release.. Thank you very much for the contribution! The feature looks very useful and the implementation seems backward compatible and don't create a big performance penalty.. I've decided to go with this change only for 4.0.0 and keep the 3.2 branch only for bugfixes.. #1118 has been merged to 3.2. and will be included in the 4.0 release.. Please reopen if the issue still exists.. That's very strange. My first guess is that calls to GraphiteReporter#report intersect in some way and cause one of them to fail. It would be really great to have a reproducer, but other debug information would be helpful too.. I believe it should be fixed in 3.2.1 and 3.1.4. The Graphite reporter should reconnect to a server any time it sends new data. This is achieved by closing the TCP connection after each sending.. #1036 and #1047. Thank you!. Sorry it took so long to review. Thank you for testing the library under Weblogic! It's great to hear from users from different environments. Regarding the fix, I think a better approach would be to do the same as for LongAdderProxy and call jdkProvider.current(), this should trigger the class loading even in secure environments. We also could catch Throwable instead of NoClassDefFoundError to be more robust and not leave the INSTANCE variable as null. . Great! I will then prepare a pull request for the 3.1 branch and make a release!. Closed via #1136. I have released Metrics 3.1.5. It should be available in the Maven Central repository in a couple of hours.. We probably need to update the page. https://github.com/iZettle/dropwizard-metrics-influxdb and https://github.com/kickstarter/dropwizard-influxdb-reporter are more active and relevant InlfuxDB reporters.. Closed via #1136 . Thanks for the pull request! I will review today.. Thank you very much for the contribution!. If your solution is compatible with Java 6, you can submit a pull request against the 3.2 branch. If it works, I will make another 3.2.* release and just rebase the 4.0 branch against 3.2. 4.0 doesn't contain any new features, just changes of the build and dependencies.. I will review tonight. Thank you!. > OK, so should we replace the existing SlidingTimeWindowReservoir?\nI reviewed and the implementation looks good (or I can't spot obvious concurrency bugs). Let's replace SlidingTimeWindowReservoir and I will merge the pull request!. On second thought, that's probably the best option from the point of reducing the risk of production bugs for users of 3.2. The users who will want to test this reservoir, can test use it in 3.2.3. If everything goes right, then we will make it the default one.. Thank you very much for the contribution!. I thought about making a release on Monday. There is a couple of useful contributions in the 3.2-development branch, which would be nice to release.. Sorry for the delay, I am busy this week. Will try to make code reviews and cut a release this week.. LGTM! Thank you for the contribution! \nI think we could provide a similar method for SharedHealthCheckRegistries too.. LGTM. Thanks for submitting the fix!. Thanks!. Looks like so. I think commit 0609cc695f486af5482b132ab89aeab392e88f82 could be a culprit. It was introduced in metrics 3.0.2. @RosenZhang, please check that your metrics version is equal or higher than it.. Looks good. Thanks for taking the time to make ChunkedAssociativeLongArray better!. I guess the biggest problem that the user must run the library as Java agent which restricts its use for many application.. Could you share your unit test? Do you call the report method on the reporter explicitly?. Thank you!. Yes, I think this is a good idea for the 4.0 version which will target Java 8. I will try to extract a metrics-jmx module.. I don't have any specific date, but I think I could cut a beta release in a couple of weeks, if nothing big comes up. The current code in the 4.0-development branch, you can try it out if you want.. Thank you for pointing this out! I moved it to the metrics-jvm module. Could you please check the new snapshot of 4.0? I spend some time adapting 4.0 for Java 8 and think I can cut an alpha version soon.. Thank you for pointing this out! I've updated the release notes on Github.\nPS. I will push new documentation to http://metrics.dropwizard.io shortly, unfortunately it's a manual process which requires coordination between Sphinx, Maven and git.  . The website has been updated. \n\nhttp://metrics.dropwizard.io/3.2.3/manual/core.html#sliding-time-window-reservoirs\n\nhttp://metrics.dropwizard.io/3.2.3/about/release-notes.html. Sorry, the master branch is not under the active development. Could you resubmit your PR against the 4.0-development branch?. I've been working recently on Metrics 4, you can see the current state in the 4.0-development branch. It targets Java 8, removes JMX from the core, cleaned up internally, but mostly maintain the same public API as 3.2.\n\n\nThe 4.0 version will not have classes:\nLongAdder.java\nLongAdderAdapter.java\nLongAdderProxy.java\nStriped64.java\nThreadLocalRandom.java\nThreadLocalRandomProxy.java\nbecause we will use directly API provided by java.util.concurrent. \n\n\nI believe the MetricAttribute class is part of the public API, because it's used in the configuration of reporters to filter out attributes.\n\n\nSlidingTimeWindowArrayReservoir.java could be hidden, but then it makes sense to hide all Reservoir implementations which are currently 5.\n\n\nI think we could extract required public classes from metrics-core to a metrics-api module to provide a minimal common API other metrics providers. I think the main requirement for us is to maintain the com.codahale.metrics namespace, because many 3rd party metrics instrumentation and reporting libraries depend on it.. The next release will be 4.0.0 and we plan only maintenance releases on 3.2.. I've merged the pull requests against the 4.0-development branch. Thank you!. I will merge the pull requests, because it seems like a right change, but I am bit reluctant to make a new 3.2. release only because of it. Nevertheless, thank you! \n. LGTM. There is a couple of nitpicks, but I can address them separately. Thank you for the contribution!. You're absolutely right! It was a regression introduced in fbb266a3dbc670642f73460c1470a0da16c50e54. Unfortunately, we didn't have a unit test for conversion with a custom rate and this mistake slipped through. Thank you very much for submitting a bugfix and unit test.. No, sounds like a good plan.. Closed via #1170. I think that's a good idea, thanks for suggesting it. I recently started to\nextracting all metrics dependencies in one place in 4.0,  so I think I can\ntake a spin on the BOM artefact as well.\nThat's also a good reminder to upgrade Dropwizard's dependency on metrics.\n. Thank you!. Could you get a thread dump during these 10 seconds? That would point to a thread(s) which block the JVM from shutting down.. I have run your example, and it seems to be an issue with Akka, because Akka threads are actually blocking the JVM.\n```\n2017-08-03 14:08:58\nFull thread dump OpenJDK 64-Bit Server VM (25.131-b11 mixed mode):\n\"cortex-akka.actor.default-dispatcher-5\" #19 prio=5 os_prio=0 tid=0x00007fcba8009000 nid=0x547d waiting on condition [0x00007fcc16e6f000]\n   java.lang.Thread.State: WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <0x000000076ff34e28> (a akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinPool)\n    at akka.dispatch.forkjoin.ForkJoinPool.scan(ForkJoinPool.java:2075)\n    at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n    at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nLocked ownable synchronizers:\n    - None\n\"Thread-0\" #15 prio=5 os_prio=0 tid=0x00007fcba0001000 nid=0x547c waiting on condition [0x00007fcc17170000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <0x0000000770b33920> (a scala.concurrent.impl.Promise$CompletionLatch)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1037)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1328)\n    at scala.concurrent.impl.Promise$DefaultPromise.tryAwait(Promise.scala:212)\n    at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:222)\n    at scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:157)\n    at scala.concurrent.Await$$anonfun$ready$1.apply(package.scala:169)\n    at scala.concurrent.Await$$anonfun$ready$1.apply(package.scala:169)\n    at scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:53)\n    at scala.concurrent.Await$.ready(package.scala:169)\n    at akka.actor.CoordinatedShutdown$$anonfun$initJvmHook$1.apply(CoordinatedShutdown.scala:161)\n    at akka.actor.CoordinatedShutdown$$anon$2.run(CoordinatedShutdown.scala:446)\nLocked ownable synchronizers:\n    - None\n\"SIGTERM handler\" #18 daemon prio=9 os_prio=0 tid=0x00007fcbdc002800 nid=0x547b in Object.wait() [0x00007fcc17271000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on <0x00000007707bb150> (a akka.actor.CoordinatedShutdown$$anon$2)\n    at java.lang.Thread.join(Thread.java:1252)\n    - locked <0x00000007707bb150> (a akka.actor.CoordinatedShutdown$$anon$2)\n    at java.lang.Thread.join(Thread.java:1326)\n    at java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:106)\n    at java.lang.ApplicationShutdownHooks$1.run(ApplicationShutdownHooks.java:46)\n    at java.lang.Shutdown.runHooks(Shutdown.java:123)\n    at java.lang.Shutdown.sequence(Shutdown.java:167)\n    at java.lang.Shutdown.exit(Shutdown.java:212)\n    - locked <0x00000007707bb5d0> (a java.lang.Class for java.lang.Shutdown)\n    at java.lang.Terminator$1.handle(Terminator.java:52)\n    at sun.misc.Signal$1.run(Signal.java:212)\n    at java.lang.Thread.run(Thread.java:748)\nLocked ownable synchronizers:\n    - None\n\"Attach Listener\" #17 daemon prio=9 os_prio=0 tid=0x00007fcbdc001000 nid=0x545f waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"DestroyJavaVM\" #16 prio=5 os_prio=0 tid=0x00007fcc3800c000 nid=0x5427 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\nLocked ownable synchronizers:\n    - None\n\"cortex-akka.actor.default-dispatcher-4\" #14 prio=5 os_prio=0 tid=0x00007fcbb0010000 nid=0x5445 waiting for monitor entry [0x00007fcc17473000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n    at java.lang.Shutdown.exit(Shutdown.java:212)\n    - waiting to lock <0x00000007707bb5d0> (a java.lang.Class for java.lang.Shutdown)\n    at java.lang.Runtime.exit(Runtime.java:109)\n    at java.lang.System.exit(System.java:971)\n    at hotmeatballsoup.Driver$$anonfun$1.apply$mcV$sp(Driver.scala:24)\n    at hotmeatballsoup.Driver$$anonfun$1.apply(Driver.scala:24)\n    at hotmeatballsoup.Driver$$anonfun$1.apply(Driver.scala:24)\n    at akka.actor.ActorSystemImpl$$anon$3.run(ActorSystem.scala:810)\n    at akka.actor.ActorSystemImpl$TerminationCallbacks$$anonfun$addRec$1$1.applyOrElse(ActorSystem.scala:987)\n    at akka.actor.ActorSystemImpl$TerminationCallbacks$$anonfun$addRec$1$1.applyOrElse(ActorSystem.scala:987)\n    at scala.concurrent.Future$$anonfun$andThen$1.apply(Future.scala:436)\n    at scala.concurrent.Future$$anonfun$andThen$1.apply(Future.scala:435)\n    at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:36)\n    at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\n    at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91)\n    at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\n    at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91)\n    at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72)\n    at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90)\n    at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:38)\n    at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:43)\n    at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n    at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n    at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n    at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nLocked ownable synchronizers:\n    - None\n\"cortex-akka.actor.default-dispatcher-3\" #13 prio=5 os_prio=0 tid=0x00007fcc386e8800 nid=0x5444 waiting on condition [0x00007fcc17574000]\n   java.lang.Thread.State: WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <0x000000076ff34e28> (a akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinPool)\n    at akka.dispatch.forkjoin.ForkJoinPool.scan(ForkJoinPool.java:2075)\n    at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n    at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nLocked ownable synchronizers:\n    - None\n\"cortex-akka.actor.default-dispatcher-2\" #12 prio=5 os_prio=0 tid=0x00007fcc386db000 nid=0x5443 waiting on condition [0x00007fcc17675000]\n   java.lang.Thread.State: WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <0x000000076ff34e28> (a akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinPool)\n    at akka.dispatch.forkjoin.ForkJoinPool.scan(ForkJoinPool.java:2075)\n    at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n    at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nLocked ownable synchronizers:\n    - None\n\"cortex-scheduler-1\" #11 prio=5 os_prio=0 tid=0x00007fcc38645800 nid=0x5442 waiting on condition [0x00007fcc17976000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n    at java.lang.Thread.sleep(Native Method)\n    at akka.actor.LightArrayRevolverScheduler.waitNanos(LightArrayRevolverScheduler.scala:85)\n    at akka.actor.LightArrayRevolverScheduler$$anon$4.nextTick(LightArrayRevolverScheduler.scala:265)\n    at akka.actor.LightArrayRevolverScheduler$$anon$4.run(LightArrayRevolverScheduler.scala:235)\n    at java.lang.Thread.run(Thread.java:748)\nLocked ownable synchronizers:\n    - None\n\"metrics-console-reporter-1-thread-1\" #10 daemon prio=5 os_prio=0 tid=0x00007fcc384ee800 nid=0x5441 waiting on condition [0x00007fcc17c77000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    - parking to wait for  <0x000000076e328370> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\n    at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at java.lang.Thread.run(Thread.java:748)\nLocked ownable synchronizers:\n    - None\n```\nI find suspicious that 2 threads are trying to call Shutdown.exit, that could be a potential deadlock.. Closed via #1230 . Thank you for the question and your persistence in adding support for tags! \nMy plan was to release Metrics 4.0 as a cleaned up, Java 8, mostly API compatible version of Metrics 3.2. After that I wanted to proceed with breaking changes like support of tags. I actually very like the idea to add the native support of tags, because I see too how many modern time-series databases are shifting in this direction (and we have questions like #1165). I believe it's a major feature of the new generation of the  Metrics library and I will review/accept merge requests to add it. \nI am afraid the master branch (with support for tags) is actually dead. It has a mix of bug fixes, improvements, new features, breaking changes and so on. It was the reason I started 4.0-development: to make the transition from 3.2 to 4.0 more clear for users and developers (at least the project's SCM history looks clean). \nRegarding the release plan, I've released only 2 alphas for 4.0 to the Maven Central (sorry, even without release notes). I think the best strategy would be to release Metrics 4.0 (I can do that more or less with the current state of the 4.0 branch), continue backward-compatible work there (for example the work on #1161), and then create a branch for Metrics 5.0 (tag support). I will then continue making  maintenance releases for the 3.2 and 4.0 branches. I think the strategy of small releases in different branches is better than making one big release with a lot of changes. \nI've recently been busy with other things, but I will try to get more time to drive this project. So, the next action from my side would be to release 4.0 to the Maven Central and we can focus on adding support for tags for Metrics 5.0. Does this sound good for you?\n  . I will accept a pull request to the 4.0-branch to include a collectd since it was already merged and I can't find a separately maintained alternative.. Yes, I will consider support for tags in 5.0.0. I will need to dig up the original PR with support for tags, which was merged to the master branch, but has never been released.. I believe it's #561. \nUnfortunately, I don't have a timeline for 5.0.0, but right now I have time to work on metrics, so I think you can expect an alpha version in a couple of weeks.  . Okay, I've ported @udoprog's contribution to support of tags on top of the 5.0.0 branch here: https://github.com/dropwizard/metrics/commits/metric-tags. Looks it compiles and the tests are green!\n  . Here is a PR #1250. Thank you for the contribution!. Looks good to me. Thank you for the contribution!. Sorry, I didn't make myself it clear. The pull request  has been merged for the 3.2 branch, but I moved it to the 4.0 branch and the commit actually included in the latest alpha release. The reason for that is the desire to maintain the 3.2 branch only for bugfixes and introduce features and improvements in the 4.0 branch which is compiled again JDK8.. Sorry, but the master branch is not under active development. I'm going to release 4.0-development, and then continue with 5.0 for new features.. Could you please  re-submit your pull requests against the 4.0-development branch? The master branch is not maintained, I need to delete it.. It seems that you could even create against the 3.2-development branch, because the feature doesn't require Java 8.. Having said that, in any case PR will be gladly accepted. Thank you for working on this!. I've decided against adding new features to 3.2 branch. I would to keep only for bugfixes and continue new development in the 4.0 branch.. Thank you for the contribution!. Sorry, I but changed my mind and would like to keep the 3.2 branch only for bugfixes and add new features only in the 4.0 branch. The workload of porting features in both branches is very high, considering they have already  quite diverged. Nevertheless, thank you.. Thank you!. The 3.2. releases are Java6-compatible. 4.0. releases will target Java8.. Yes, Metrics 3.2.3 should be compatible with Java 7.. I commited 21fab9351cacfd8b5f37219885ad3fbc82f732f1, could you try with the latest version of the 4.0-development branch?. Thank you! I will backport it to 3.2.* and will make a new maintenance release.. Thank you!. Thank you! \n\nWhat are your thoughts on introducing something like checkstyle into the project? Starting with some simple rules such as preventing unused imports and such?\n\nI think that's a good idea. We can copy the checkstyle config from the parent Dropwizard project and set up an integration with Code Climate to detect such issues automatically during a pull request.. Thank you both for contributing!. Thank you for the fixing the issue!. Checkstyle has been configured and you can browse issues in CodeClimate or locally with the maven-checkstyle plugin.. Done: https://codeclimate.com/github/dropwizard/metrics. Thank you one more time!. Looks like it works, nice!. Thank you!. Thank you.. LGTM, I think that's justified. I'm still reluctant to make SlidingTimeWindowArrayReservoir as default, though.. Thanks for the pull requests! Unfortunately, I think I will reject it. My motivation:\n\nUsers can use JmxAttributeGauge to registers metrics from JMX. \n\nI think CPU load is not an attribute of the JVM, but rather an attribute of the operation system, so I'm reluctant to include it by default. There's a ton of tool for capturing OS-level metrics and for application-level CPU profiling we provide CpuProfileServlet which provides pprof statistic.. 3.2 branch is only for bugfixes now.. I guess you can't use the AdminServlet with papertrail which is compiled against Java 7. I think the best option for you would be to copy AdminServlet from dropwizard-servelts and manually remove the CpuProfileServlet dependency.. Dropwizard 3.2 should be compatibe with JDK 1.6. Only AdminServlet from dropwizard-servlets is depended on a JDK 1.6 dependency. If you use only metrics-core, you should be fine.. You don't need metrics-servlets and metrics-json if you don't expose your metrics via an HTTP API.\nYou can't use AdminServlet from  metrics-servlets from your app, because it has a Java 1.7 dependency.  If you really need it, I advice to downgrade to the 3.1.5 version which doesn't have a cpu-profile dependency.. metrics-core should be compatible with Java 6 and doesn't have any dependencies. In 3.2.0 a transitive Java 7 dependency to cpu-profiler was added to metrics-servlets, which makes AdminServlet incompatible with Java 6. To solve this you can pull an earlier version of AdminServlet (e.g. 3.1.5) and exclude metrics-code dependency from it.. Hi! Sorry, we don't have a contribution document, but maybe it makes sense to add one. Answering your questions:\n\n\nFor local development your only need Maven. CodeClimate is run only on the server side when submitting a pull request. If you have errors reported by CodeClimate you can verify them locally with the checkstyle plugin by running mvn checkstyle:check\n\n\nYes, we follow the standard GitHub flow: https://guides.github.com/introduction/flow/\n\nWe use checkstyle for detecting code style issues, but generally we stick to the Google Java Style Guide: https://google.github.io/styleguide/javaguide.html . > if I want to propose a new feature/enhancement, do I just submit the PR or should I get approval for it first (here? Google Groups? etc.).\nYou can just submit a PR is the work is done or create a new issue if you have a proposal.. I think the best solution would be to fix the Akka POM somehow. I would like to keep the enforcer plugin running, because it's very valuable to detect dependency conflicts.. Thanks for the pull request. Unfortunately, I can't accept it. I'm trying to keep the core metrics modules focused without adding anything new. I'm not an expert in Scala and Akka and I think maintaining this module here would be a big burden. Maybe you could release it as an independent module?. LGTM. Thanks for the contribution!. Thanks!. Thanks for the fix! It looks good to me. I think we could also add a check to WeightedSnapshot to avoid 0/0 situations which lead to NaN values.. I will cherry-pick the fix to the 3.2 branch.. Thanks for spotting this bug! I agree that an unhandled request should be counted as an error (because there's no handler that handles the request). \n\nI'm still maintaining the 3.2 branch, so the fix is good enough to merge to it. I will also cherry-pick it to the 4.0 branch.. I'm not aware that it's possible with JMX. I think your best bet to report metrics locally and then enabled a JMX agent. There are many 3rd party reporters which supported reading JMX metrics from a JVM instance. . Thanks for bringing this up! I will revert this change, because I would like to see code compiled against 3.x to work with 4.x.. Closed via #1244 . @arkigabor I've released Metrics 4.0.1 to Maven Central, could you please take a look?. @davidkarlsen @arkigabor Sorry, my mistake, I didn't sync the Nexus staging repository with Central.\nI've run it now, and it usually it takes a couple of hours for the Centrals replicas to sync. \n. Yes, this sounds like a good improvement and should prevent incidental overriding of existing health checks.. Documentation is a good place to start: http://metrics.dropwizard.io/4.0.0/manual/core.html. Thank you for the contribution!. Thanks for the very insightful comment!\nI do think it makes sense to change the Maven coordinates and package names for 5.0._. The situation right now is very confusing. Metrics went from com.codahale.metrics to io.dropwizard.metrics Maven coordinates during the _3.0. - 3.1._ transition, but the package name didn't change! For the sake of trying to make _4.0. a drop-in replacement for 3.2._ in Java 8/9, I didn't change the package name. For _5.0. I want to go with new Maven coordinates and package names to clearly mark that Metrics 5.0.* will not be compatible with the previous generation of Metrics.\nI really like RxJava's approach to versioning. I'm thinking adding some information about different Metrics version and their status to README.\n  . Thanks! I need to proofread more what I'm writing :(. Thanks for the observation. I'm wondering if we can add some specific marker for a value (to distinguish between a label and a key-value pair).. Okay, then I'm going to merge this PR.. It seems to me that the latter approach is the way to go.You can just keep Timer.Context instances in an expirable hash map by user ids. When the user has verified its account, you get the corresponding context from the map and call stop on it. Timer.Context is immutable, so it should be safe to share it between threads.. Thank you very much for the contribution!. Thanks!. This makes a lot of sense. It seems extending is the only possible way to customize counter, so users can expect that we provide an type-safe API for dealing with extended counters. This also follows the API guidelines from Effective Java Item 28. Use bounded wildcards to increase API flexibility.. Closed via #1268. Thank you.. In the 5.0 version there will be a new abstraction: MetricName. It will encapsulate the name of a metrics and the maps of tags associated with it. This abstraction will be accessible to reporters, so they can transform tags to the corresponding time-series database format. Users will be able to tag metrics via the MetricName API and register a metrics with based on MetricName. Take a look at MetricRegistry.. I want to merge the module with an adapter for Metrics 4 and after that make an alpha-release.. I've released 5.0.0-rc0: https://github.com/dropwizard/metrics/releases/tag/v5.0.0-rc0\nIt should be available soon in the Maven central repository. Try it out!. I concur. I think providing an API for the specifying the storage format would be the best option. We could extract creating a map to a specific method like Map<MetricName, Metric> newMap(). Users can useLinkedHashMap` to simulate a bounded cache or use expiringmap for a time-based expiration cache.. At a first glance looks great! I'm going to review the PR during the weekend.. I'm wondering if we could get some ideas from https://github.com/brettwooldridge/influx4j for a zero-garbage reporter implementation.. Thanks! I will take another look.. Looks good! Thank you very much for the contribution!. I've released Metrics 5.0-rc1: http://central.maven.org/maven2/io/dropwizard/metrics5/metrics-core/5.0.0-rc1/. Thank you for taking a look at the tags feature and improving it! Backward compatibility is not an issue for the features introduced in the 5.0, because we haven't had a stable release yet. I will review the PR shortly.. LGTM, thanks for the contribution.. Yes, it has been released by mistake. I mentioned it here: https://github.com/dropwizard/metrics/releases/tag/v5.0.0-rc0\nI don't have a specific ETA for 5.0.0, sorry. I think there's still some work for providing better tag support for the Prometheus reporter. After it's merged, I think I can make a release.. 1. Not exactly. A Meter records  rates 1-, 5-, and 15-minute weighted moving averages. Newer data has bigger weight than old, but the old data don't reset between reporting, they just become less significant.\n2. You should use a Counter if you want to see an exact mean value for a time interval. You report the counter value to the database, and ask it to calculate a mean value between two data intervals.\nMeter is useful when you don't want to report data very often or/and you don't care about exact averages, but for trends. For example, if you measure a volatile process, EWMA allows you to smooth out the effect of outliers to an average value.  . Thank you for your interest in Metrics 5.0! The proposed changes sound reasonable and I would gladly review a PR for handling of labels with higher cardinality. I'm not settled on the Metrics tags implementation and I'm completely fine with changes driven by implementations of reporters to tag-based timeseries databases like InfluxDb, Prometheus, and OpenTSDB. The goal of Metrics 5.0 is too close the gap between Java abstraction and such databases.. Hi. The proposal looks good and a PR will be welcomed. We have implemented this ability for GraphiteRepoter and ConsoleReporter, would be nice to have for Slf4jReporter too. The enum is called MetricAttribute and we stick to the name convention disabledMetricAttributes.. Thanks, I will take a look shortly.. Closed via #1275 . Ah, sorry for that. I had presumed we build one message they and log it. I've brought resetting of the builder back and added a unit test for logging several metrics in 010c2dfd8d09911dbfa0e5764577148bdb9b16da. Thank you for spotting the regression!. Thanks.. Thank you for the contribution!. Sure, will do a 4.1.0 release this week.. Hi, you can customize a Reporter and filter out metric attributes. Some reporters support that, for  example:\n GraphiteReporter\n ConsoleReporter. Hi @psyopguy,\n\nLooks like it actually can, but the probability of such an event is very low. Nevertheless, we probably should check the size of the value map before calling firstKey to hold the invariant \"map is not empty\".\nIt is, but I presume the branch \"priority is lower than the first element\" is not executed very often, so it doesn't affect the performance of the method much. In comparison to using locks and the cost of an additional allocation is insignificant. On the other hand, switching to allocating WeightedSample in place should be very simple.. Sounds reasonable, I will happily review a PR for customizing MetricsModule. As a plus, #1240 would be easier to incorporate to the upstream.. LGTM. I'm all in favor of the build portability between different OS. Alas, we don't have a CI server for MacOS machines (only for Linux and Windows).. Thanks for the PR! The biggest setback for turning HealthCheck into an interface from an abstract class was backwards compatibility between Metrics 3.2 and Metrics 4.0. Ideally, users shouldn't rewrite their health checks when upgrading to Metrics 4.0.\n\nNevertheless, it seems reasonable to implement this change in Metrics 5.0 along with other breaking changes.. Yes, please. That would be great!. Thanks for your interest in metrics! You're right, the library doesn't support encryption for Collectd, but I took a look at the encryption part the binary protocol https://collectd.org/wiki/index.php/Binary_protocol, and it seems not terribly complicated to implement. I will take a swing on it next week. . No, that's not needed. Thank you for the pull request, I will review it shortly!. @rahulravindran0108 Thanks for the contribution!. Thanks. Verified signing and encryption locally with https://github.com/collectd/go-collectd. . LGTM, thank you for the contribution!. I think it's gone because SocketConnector was removed from Jetty 9. I will take a look at the metric and the others from the Jetty8 connector. The amount of active connections can be an interesting metrics in conjunction with io.dropwizard.jetty.MutableServletContextHandler.active-requests to detect idle clients.. Hi @fbacchella! May I ask how did you extend Context? The class has a private constructor and isn't designed for extensibility. I think in your case it would be better to add new method pausingContext instead overriding the context method of Timer. You can get access to the clock by overriding the Timer(Reservoir reservoir, Clock clock) constructor and storing Clock as a field in PausingTimer.. Thanks for the report! It's very strange that AES encryption fails because of a wrong key size for public-key cryptography. Could you provide a unit test that fails on JDK Java 1.8.161? We run the tests on Travis CI on Oracle JDK 1.8.0_161 and they seem to pass.. Sure, I it would be nice to have a such unit test! Anybody can then test the Collectd reporter for earlier JDK versions, and maybe submit a fix.. LGTM. Thanks fotr your contribution!. Hi @Mexx77! You can pass a SSLSocketFactory to Graphite and it will force SSL/TLS sockets on the client side. For example,\njava\nGraphite tlsGraphite = new Graphite(\"carbon.hostedgraphite.com\", 20030, SSLSocketFactory.getDefault())\nYou can then use this instance in GraphiteReporter. If the Carbon relay is uses an SSL certificate signed by a CA, that should be enough. In case the certificate is self-signed than you would need to add it a trustore and register it in the JVM via the system property javax.net.ssl.trustStrore.. Thanks!. LGTM. Thanks for the contribution!. Yes, unfortunately it's an ongoing battle to make the tests stable on Travis... I've restarted the build.. LGTM, thanks for contributing!. Please see the disclaimer in README. The 3.1 and 3.2 branches are in maintenance mode, only bugfixes are ported.. I believe all the reporters provided by metrics implement Closeable (directly or via  ScheduledReporter).. 57739fc4b9e703f65e30f4f41230c9224972adb2. You're right. Unfortunately, it was not possible to move JMX to a new module without breaking backwards compatibility. For Solr, I would advice to add metrics-jmx module to the build and change the JMX imports. \nNevertheless, I will try to produce a Metrics4 build with JMX in the core, so users will be able to swap a Metrics3 jar to Metrics4 jar.   . Here's a branch: https://github.com/dropwizard/metrics/commits/4.0-jmx. Thanks, I will probably ignore httpasyncclient tests becase they fail constantly on Travis CI.. Thanks for the contribution!. LGTM. I will add later some tests to for the case described in #1296.. Thanks! This is a very nice PR and I agree that for Timers we should report the sum in a reporter's duration unit. Regarding your questions:\n\n\nI think it makes sense to change getSum of JmxMeterMBean to double, because it will allow to report sums more precise in the reporter's duration unit. It's a new field, so we don't have any requirements to keep compatibility.\n\n\nIn GraphiteReporter we could add a new parameter to the reportMetered method and check whether we shoud convert it:\njava\n private void reportMetered(MetricName name, Metered meter, long timestamp, boolean isSumADuration) throws IOException {\n        sendIfEnabled(COUNT, name, meter.getCount(), timestamp);\n        sendIfEnabled(SUM, name, isSumADuration ? convertDuration(meter.getSum()) : meter.getSum(), timestamp); \n\n\nI would gladly review both changes as separate PRs.. Thanks for the contribution!. LGTM. LGTM. Nice catch! I don't know any specific reason why we don't track idleTime for Callable tasks, I guess it was just an oversight. I would gladly review a PR for adding it.. Can you please specify the version of Metrics that you are using? There have been a few changes in Metrics 3.2 regarding GraphiteReporter. . Got it. You can try to upgrade to 3.2.4, but I think it shouldn't help much. GraphiteReporter is unfortunatelly stateful and can't report metrics from several threads. The report method is usually invoked by a scheduler from the start method, which catches all exceptions, so it usually not an issue.\nNevertheless, I think we can fix it by introducing a synchronized block in the report method of GraphiteReporter. This shouldn't be a big performance hit for a single-threaded reporting, but it will avoid IllegalStateException(\"Already connected\") if the method is invoked from several threads.. @snakeru Please add the constructors and it's good to merge. You can organize your commits either way, Github for some time has been providing an option to do a squash and a fast-forward merge automatically.. I agree, @Deprecated would make sense.. Thank you for the contribution!. LGTM. I believe we use the com.sun.management package only in FileDescriptorRatioGauge, which is part of metrics-jvm, so it should be fine to make it optional. . @vorburger If you want, I can cut a 4.0.3 release with this change.. Thanks for the reminder, I will cut a release today.. LGTM. Thanks for the contribution!. Yes, metrics-ganglia was removed in Metrics 4.0.. We don't support it anymore.. https://github.com/dropwizard/metrics/commit/56791042fa2ab6fc93aa0038fc4bdfd955a34cfe. If my memory servers me right, there were licensing issues with the Ganglia client library which was released under LGPL.. Fixed via #1354 . Hi @SgrAlpha! Thank you for the PR and thanks for pointing out the broken dev branch. I've fixed the build, could you please rebase your PR?. Closed via #1352.. Thank you. LGTM, thanks for contributing.. LGTM, thanks for the contribution!. This looks like a reasonable improvement, thanks for the contributing! It's a bit unfortunate that duration is not final, but I guess it's not very important and can be addressed later if needed.. No problem, I've marked them as false positives.. LGTM! Thanks for the contribution. It would be nice if Result had a Clock, so it would be possible to pin down the current time, but I guess this could be improved later.. I think it's not a huge problem in Dropwizard because it's usually a standalone app. For example Spring-boot pom also pulls a lot of 3rd-party dependencies: https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/pom.xml. That looks much better, thank you!. Can you share the configuration of the underlying logging framework?. I think if you plan to implement this functionality with Java 8 features, it's better to submit this pull request to the master branch (for the version 4.0.0 which supports Java 8). For the 3.2 branch we still need to maintain Java 6.. I think it's better to use import static org.junit.Assert.fail from the consistency point of view, because we already import org.junit.Before and org.junit.Test. I think we could move the cleanup code to the finally block in case we actually* have a failed test case.. I think it's better to move the assertion to the catch block. Doing so we indicate that we expect the client code throws an exception.. Could you please add a unit test for PickledGraphiteUDP?. Could you please elaborate why we need to reset the counter? In PickledGraphite we don't do that.. I think it's better to dereference the channel in a finally block in case the socket failed to close.. Nice. I don't think there is a big improvement in replacing a simple gauge with a mock object. I would avoid mocking unless needed. Could you please revert this change?. I think we could make it an enum and move it to metrics-core. Upsides:\n\nAdditional type-safety;\nWe can use an EnumSet for storing a blacklist of metric types;\nOther reporters could access it if needed.. We could use EnumSet here, if we make MetricTypes as an enum MetricType. If disabledMetricTypes is an EnumSet, we could use EnumSet.noneOf.. Could we avoid creating a copy of metrics? I guess javac doesn't allow to cast SortedMap<MetricName, Gauge> to SortedMap<MetricName, Gauge<?>>, but I would like to avoid creating an additional copy just because of compiler peculiarities.. I think it would be better to change the order of parameters, so initialDelay comes first, to maintain the same order as in the scheduleAtFixedRate method.. I think we could avoid duplication and implement the method as:\n\njava\nsynchronized public void start(long initialDelay, long period, TimeUnit unit) {\n        if (this.scheduledFuture != null) {\n            throw new IllegalArgumentException(\"Reporter already started\");\n        }\n        this.scheduledFuture = executor.scheduleAtFixedRate(new Runnable() {\n           @Override\n           public void run() {\n               try {\n                   report();\n               } catch (RuntimeException ex) {\n                   LOG.error(\"RuntimeException thrown from {}#report. Exception was suppressed.\", ScheduledReporter.this.getClass().getSimpleName(), ex);\n               }\n           }\n       }, initialDelay, period, unit);\n   }\nas then make the start(long period, TimeUnit unit) method to delegate to it as\njava\nstart(period, period, unit). It seems to me as an unrelated change. Could you please revert it?. Could you add a simple unit test to ScheduledReporterTest? A simple test which verifies that the scheduler wakes up with a correct initial delay. Very similar to the pollsPeriodically test.. > Actually, instead of waiting for the reporter to actually do its work, it would be much better to just verify that the method scheduleAtFixedRate() was called with the correct arguments. There is no need to test the executor itself, as that's a collaborator that has already been tested elsewhere.\nAgrred. This would work, too.. > Gnnhhh ... my IDE is configured to replace \".*\" imports with the explicit ones - but I did NOT want to push those changes, as they were not necessary for the fix.\nI think expanding star imports is a good change, we can leave it.. Alternate approach is to switch to Java 7, but that would break Java 6 - compatibility, which I think it's not desirable for a maintenance release .. This is a also a good name.. Done. I think it would better with one condition statement. I also don't think the we need to use isMetricAttributeDisabled method as well.\nif (!getDisabledMetricAttributes().contains(type)) {\n    output.println(status);\n}. Please, don't remove the getDisabledMetricAttributes method. All changes must be backward-compatible.. I don't believe we need to extract the logic of checking of an attribute to a separate method. disabledMetricAttributes can't be null, so we basically have one method which does nothing but delegates a call to the contains method of EnumSet.. Please, don't introduce star imports if they were not present.. I guess we could extract the timezone to a variable, so all tests use the same timezone.. We could extract the locale to a variable, so all tests use the same locale.. Please, don't introduce unrelated changes. Let's focus on ConsoleReporter.. Let's avoid changes in the classes not directly targeted by this pull request.. I think it's not very obvious why we perform this check in the constructor of the snapshot. I understand that the idea to avoid the situation when we have only one element in the sample with a 0 weight (because it provides bogus data), but I believe it should be performed in ExponentiallyDecayingReservoir, where the logic of rescaling resides. What do you think, if we add a guard condition:\njava\nif (scalingFactor == 0) {\n    values.clear();\n} \nin the ExponentiallyDecayingReservoir#rescale method? I think it could be a more clear solution.  . Would not be better to use an ArrayList instead of LinkedList if we care about reducing the amount of GC?. Agreed. I run the benchmak and it seems \u00c0rrayList doesn't provide any advantages. Probably because of removing from the middle of the list during trimming of chunks.. What do you think about simplifying this method to:\njava\nwhile (true) {\n  final SoftReference<Chunk> chunkRef = chunksCache.pollLast();\n  if (chunkRef == null) {\n    return new Chunk(defaultChunkSize);\n  }\n  final Chunk chunk = chunkRef.get();\n  if (chunk != null) {\n    chunk.cursor = 0;\n    chunk.startIndex = 0;\n    chunk.chunkSize = chunk.keys.length;\n    return chunk;\n  }\n}. Please use multi-line comments with an asterix on every line. We are trying to follow the Google Java Style Guide. See section about comments.. I think if you specify a hostname and a port in the constructor, Graphite doesn't cache InetSocketAddress and it will make a DNS lookup everytime the the connect method is invoked.. What do you think about using String.join to avoid repetition? This method uses a StringBuilder under the hood, so it should provide similar performance as concatenation.. Will change!. Because we need to build a ByteBuffer to pass to DatagramChannel , we could create it directly without using DataOutputStream and ByteArrayOutputStream. ByteBuffer also provides methods for adding data of different types to the underlined byte array. Something like:\njava\nByteBuffer buffer = ByteBuffer.allocate(Network.BUFFER_SIZE);\nwriteString(buffer, Network.TYPE_HOST, identifier.host);\n...\nbuffer.flip();\nchannel.send(buffer, address);. If we use ByteBuffer as the builder, we could avoiding creating an intermediate buffer by adding the value directly to the the ByteBuffer. The biggest issue is that it should be done at the end of building (when writing a binary representation of the value) instead of at the start. I think, we could change the signature of the send method by marking value as Number and make an instanceof check before writing the value of the ByteBuffer.\njava\nif (value instanceof Long) {\n   buffer.putLong(value.longValue());\n } else {\n   buffer.order(ByteOrder.LITTLE_ENDIAN).putDouble(value.doubleValue());\n }. I think len could be extracted as constant, so we don't recalculate it at every call.. It would be nice to extract 1 to a constant with a meaningful name. Is it the data type length? . If we use a ByteBuffer this check will become superfluous, because ByteBuffer can't grow and will throw an IllegalArgumentException if metric data exceeds its capacity. The biggest issue is that this exception will propagated instead of logged, but I think it's a good think, because I presume such failures can't be easily fixed.. If we use ByteBuffer as the builder, we can remove this try/catch block, because ByteBuffer doesn't throw an IOException in its API.. nit: Identifier.Builder id is not reassigned and can be declared as final in the all report methods. Not a requirement, it would be nice to do so, because the rest of the codebase follows this style.. I believe this debug log originally was intended for not-numbers instead of numbers. Anyway, I think debug logs should be removed from production code.. I think it's better to log this message as the warn level. A failure to close the socket could be a symptom of a bigger networking issue.. code is written to the message as a byte, so I think it's better to declare it in the enum as byte as well to avoid a narrowing primitive conversion from int to byte in runtime.. I believe the whole thing can be simplified by using the split method of String and the joining collector from the Stream API: Something like that\njava\n        String[] parts = metricName.split(\"\\\\.\");\n        switch (parts.length) {\n            case 1:\n                return builder.plugin(parts[0]).type(parts[0];);\n            case 2:\n                return builder.plugin(parts[0]).type(parts[1]);\n            default:\n                return builder.plugin(parts[0])\n                        .pluginInstance(parts[1])\n                        .type(Arrays.stream(parts)\n                                .skip(2)\n                                .collect(Collectors.joining(\".\")));\n}. Maybe it also make sense to add a case when it's not possible to split the metric name (zero parts) and throw a meaningful exception.. I think the constants could be declared without the hexadecimal representation (it seems to me it doesn't add anything useful).. Instead of using varags, I think it's more reasonable to declare the reserverd chars as constants:\njava\nprivate static final List<Character> INSTANCE_RESERVED = Arrays.asList(SLASH, NULL);\nprivate static final List<Character> NAME_RESERVED = Arrays.asList(DASH, SLASH, NULL);\nAs the advantage, we can reuse the contains method of List instead wring an own over a char array.. AssertJ assertions are more generally used in the project than the JUnit one. We use AssertJ for verifying ValueList, so for the consitency reasons it would be nice to use them in the all assertions.. We can create a Gauge with a lambda expression as (Gauge<Double>) () -> 0.25. Should be more concise and readable.. Instead of implementing Runnable by Receiver, we could pass the action directly to the Thread as a lambda expression.\njava\nreceiverThread = new Thread(() -> {\n            try {\n                receiver.listen();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });. We can avoid creating the QueueDispatcher class and just create a new anonymous Dispatcher class, because it's used only in one place.\n```java\n       new Dispatcher() {\n            @Override\n            public void dispatch(ValueList values) {\n                queue.offer(new ValueList(values));\n            }\n        @Override\n        public void dispatch(Notification notification) {\n            throw new UnsupportedOperationException();\n        }\n    }\n\n. It doesn't seem useful to `join` with the receiver thread. The main thread doesn't expect any results from it. We can just call an `interrupt` to signal the receiver thread to exit if it got stuck listening on the socket.. It seems to me that it would be better to move throwing exception near to the `containsKey` check. It looks more logical (we check that the health check doesn't exist, otherwise throw an exception).java\nif (!healthChecks.containsKey(name)) {\n  ....\n} else {\n  throw new IllegalArgumentException(\"A health check named \" + name + \" already exists\");\n}\n```\nAlso this allows to remove the not null check before invoking the listeners, since the compiler will guarantee that registered will be always not null.\n  . I think it should be enough to have only this constructor implemented in GarbageFreeScheduledReporter. All other constructors can be derived from it. At any case, reporters are built using builders which invoke only the most detailed constructor. Another plus that we can declare registry and mirror as final.. I guess we could be less specific and just to place this annotation over the class.. I don't see much advantage to implement register and unregister methods. registry.removeListener(mirror) and mirror.unregister(registry) looks semantically same to me.. I think it makes to extract all the methods and buffer to a new class like InfluxDbLineBuilder or so. Like\n```java\nclass InfluxDbLineBuilder {\nprivate StringBuilder str = new StringBuilder();\nprivate boolean firstField;\n\nprivate final Set<MetricAttribute> disabledMetricAttributes;\nprivate final MetricName prefix;\nprivate final Map<MetricName, String> encodedNameCache = new WeakHashMap<>();\n\nInfluxDbLineBuffer(Set<MetricAttribute> disabledMetricAttributes, MetricName prefix) {\n    this.disabledMetricAttributes = disabledMetricAttributes;\n    this.prefix = prefix;\n}\n\nInfluxDbLineBuffer writeMeasurement(MetricName name) {\n    str.delete(0, str.length());\n    str.append(encodedNameCache.computeIfAbsent(name, this::writeMeasurementNoCache));\n    str.append(' ');\n    firstField = true;\n    return this;\n}\n\npublic InfluxDbLineBuffer reset() {\n    str.delete(0, str.length());\n    return this;\n}\n\nInfluxDbLineBuffer writeField(MetricAttribute key) {\n    if (!firstField) {\n        str.append(',');\n    }\n    str.append(key.getCode()).append('=');\n    firstField = false;\n    return this;\n}\n\nInfluxDbLineBuffer writeField(String key) {\n    if (!firstField) {\n        str.append(',');\n    }\n    appendName(key, str);\n    str.append('=');\n    firstField = false;\n    return this;\n}\n\nInfluxDbLineBuffer writeFieldValue(double value) {\n    str.append(value);\n    return this;\n}\n\nInfluxDbLineBuffer writeFieldValue(long value) {\n    str.append(value).append('i');\n    return this;\n}\n\nInfluxDbLineBuffer writeFieldValue(String value) {\n    str.append('\"');\n    appendString(value, str);\n    str.append('\"');\n    return this;\n}\n\nInfluxDbLineBuffer writeFieldValue(boolean value) {\n    str.append(value ? 't' : 'f');\n    return this;\n}\n\nInfluxDbLineBuffer writeTimestampMillis(long utcMillis) {\n    str.append(' ').append(utcMillis).append(\"000000\\n\");\n    return this;\n}\n\nboolean hasValues() {\n    return !firstField;\n}\n\nInfluxDbLineBuffer writeFieldIfEnabled(MetricAttribute key, double value) {\n    if (!disabledMetricAttributes.contains(key)) {\n        writeField(key);\n        writeFieldValue(value);\n    }\n    return this;\n}\n\nInfluxDbLineBuffer writeFieldIfEnabled(MetricAttribute key, long value) {\n    if (!disabledMetricAttributes.contains(key)) {\n        writeField(key);\n        writeFieldValue(value);\n    }\n    return this;\n}\n\npublic StringBuilder get() {\n    return str;\n}\n\n. The idea to not mix the logic of the reporter (reading information about gauges, metrics, timers) from the InfluxDb protocol implementation. The reporter should now know about caches and whether we reuse `StringBuilder` or create a new one. I think it would be nice to see building an InfluxDb metric line as a sequence of calls:java\n builder.writeMeasurement(name)\n            .writeFieldIfEnabled(COUNT, meter.getCount())\n            .writeFieldIfEnabled(SUM, meter.getSum())\n            .writeFieldIfEnabled(M1_RATE, convertRate(meter.getOneMinuteRate()))\n            .writeFieldIfEnabled(M5_RATE, convertRate(meter.getFiveMinuteRate()))\n            .writeFieldIfEnabled(M15_RATE, convertRate(meter.getFifteenMinuteRate()))\n            .writeFieldIfEnabled(MEAN_RATE, convertRate(meter.getMeanRate()))\n            .writeTimestampMillis(timestamp)\n. If we cache names of metrics, I think it's better to store them as strings instead of char arrays. Also I don't think it makes much sense to cache a value and at the time write it to the current `StringBuilder`. I would expect that we just read the data from the cache and if the key is not present, we load it: `str.append(encodedNameCache.computeIfAbsent(name, this::toInfluxMetricName))`. I think we could take advantage of the Stream API and use it for building the metric name in a declarative fashion:java\nMetricName prefixedName = MetricName.join(prefix, name);\nreturn prefixedName.getTags()\n          .entrySet()\n          .stream()\n          .sorted(Comparator.comparing(Map.Entry::getKey))\n          .reduce(appendName(prefixedName.getKey(), new StringBuilder()), (sb, e) -> {\n                    sb.append(',');\n                    appendName(e.getKey(), sb);\n                    sb.append('=');\n                    return appendName(e.getValue(), sb);\n          }, (l, r) -> l)\n          .toString();\n. Looks we could just use `str.setLength(0)` to reset the counter in `StringBuilder`.. Looks like that the `len` variable is redundant. We could directly use `field.length` in the loop condition.. I wonder if all these low-level manipulation are worth. Looks like a lot of code instead of:\ndatagramChannel.send(encoder.encode(CharBuffer.wrap(str)), address)\n```\nI know this creates a new byte array every time, but the question is whether it's such a big issue. Or maybe we could build a line as a ByteBuffer right away instead of StringBuilder.. I feel that using a ThreadLocal is a premature optimization. It's not clear for me that it will provide a big performance boost over allocating a new StringBuilder. Also,  using ThreadLocal can cause strange classloader leaks if one fail to clear a reference to it.. count is not used to filtering counters. It's used only to filter the count attribute of histograms, meters, and timers. Users can filter counters by MetricFilter.. It seems to me that  perfomance benefits of not conveting primtives to wrappers are slim to have 4 apennd methods. I think one method accepting an Object should be enough, especially considering that in most cases we use Supplier which forces auto-boxing.. Please don't use star imports, in the codebase we tend to use direct imports.. s/MetricFilter/a set of MetricAttribute. Please replace the star imports with direct imports.. Instead of declaring disabledMetricAttributes as a field, I think we should it make a parameter to the infoReporter and errorReporter methods. Othwerise it's not clear how what's a relationship between it and the actual reporter.. Do we really need conditional checks if we use it only in one place?. It looks like this branch of the execution isn't used at all.. Fair enough. I think a nullable Counter would be a better option. We don't do any transformation with the counter and don't expose it, so the advantages of Optional are not clear. There's another point: I believe the JVM can optimize out null checks if a final field is null, but I'm not so sure about optionals.. If we removed Optional, I believe the private constructor would be unnecessary.. Could you add an integration test to InstrumentedConnectionFactoryTest to verify that the counter gets incremented when a connection opens, and get decremented when the client close it.. Please don't remove Closeable from ScheduledReporter, because the change is binary incompatible. That means we will force all 3rd reporters to upgrade to the latest version of metrics-core. I think it should be fine to just add Closeable to Reporter. It should be backward-compatible because ScheduledReporter and JmxReporter implement it already.. The same comment as for ScheduledReporter. I think objectName = new ObjectName(domain, properties) is small enough to not warrant of of creating a retry variable to control its execution. I think it would be more clear just do use it in every branch.. I think else if would be better here because we don't want to check the other branches as soon as we found that we need to create new object name.. Could you please not reorder the imports? It will make easier to port this change to the 5.0 branch, which has another namespace.. Please don't add unrelated whitespace changes to your PR. This makes porting commits across different versions harder, because it increases the change of a possible merge conflict.. We try to maintain backward compatibility with the previous version of Metrics. Please don't remove the public constructors, otherwise anybody who uses them will be forced to migrate their code to Builder, which should be optional.. This is a good defensive pattern, but across the codebase we don't use it. It's expected that the user will provide a not-null MetricsRegistry. Otherwise, one can ask why do we check the metrics registry for nullability, but not httpClientConnectionOperator or connTTLTimeUnit? I think in the long run a better approach for the project would be to use @Nullable annotations from the checker framework for marking nullable fields and parameters, but that's out of the scope of this PR.. The same comment about whitespacing changes. Also, please take a look at the warnings produced by checkstyle.. To be honest, I don't see much value in declaring the method parameters as final. It's clear from the semantic of Builder that they are not going to change and we don't force final method parameters in the codestyle. I would remove them unless there's a specific reason to keep.. This change doesn't seem to be very useful, at the end we invoke the same constructor anyway.... Could you please write a unit test for Builder? Just with specifying a MetricsRegistry and a name as you described in the issue.. Please add them back. Yes, it's a development branch, but we still don't want to break the compatibility across major updates.. ",
    "benmccann": "Ah, thanks! I did not realize that the list in the getting started guide was only a partial list.\n. ",
    "norbertpotocki": "Updated to RC1. Will update to GA as soon as it is released.\n. Final version of Log4j 2.0 was released. Do you plan on merging this pull request?\n. Hey Coda, Ryan,\nwhen do you plan on merging this PR?\n. ",
    "aniketbhatnagar": "Pull request #504 submitted\n. This is a fix for #504 \n. Sorry about that Ryan. I have fixed the compilation issue. Please review.\n. Ryan, did you get a chance to look at this? Does it look good?\n. ",
    "cemo": "@ryantenney This will be another big step after Jersey 2 support. Any chance to be merged? \n. +1\n. @ryantenney Is there any timeline for Jersey 2 support? This is pretty much blocking Dropwizard. We desperately need a release.\n. @joschi Is this pull request ok for you?\n. Great job @saadmufti & @joschi \n. @ryantenney Is it possible to release a RC at least?\n. @ryantenney release of metrics is pretty much blocking Dropwizard. Is there any expected time for a release? \n. @ryantenney thanks\n. https://github.com/dropwizard/metrics/pull/659 Is this PR you are looking for?\n. Like this: https://github.com/davidB/metrics-influxdb ?\n. see #178\n. @ryantenney I know you are reluctant for new modules but InfluxDb usage is greatly increased. Adding support for InfluxDB would be nice. \n:+1: \n. - metrics-jetty9-legacy\n- metrics-ganglia\n- metrics-jetty8\n- metrics-jersey\n- metrics-log4j\nThese seems a little bid old and not used widely. \n. ",
    "paskos": "I'm using jetty 9.2.0.v20140526 and metrics-jetty9 version 3.0.2\nI get \njava.lang.NoSuchMethodError: org.eclipse.jetty.server.HttpChannelState.isDispatched()Z\n        at com.codahale.metrics.jetty9.InstrumentedHandler$1.onComplete(InstrumentedHandler.java:142)\nDo you have a timeline for the fix or a patch I can implement ?\n. Thanks, any advice on how to mitigate while I wait for july's release ?\n. Sorry I didn't read the code. I'll gasp copy/paste the changes into a class in my project and I'll delete ir in july.\n. ",
    "wendigo": "LGTM. \n. ",
    "omerkudat": "Hi, I've created a pull request #523 for this change, please take a look. In order to minimize changes, I've done my change to Clock.UserTimeClock class. Let me know what you think.\n(PS. This is the first time I'm doing a contribution on GitHub, so I might have made many and various mistakes in my forking, committing, commenting, requesting, etc. Apologies in advance.)\n. I hadn't considered the leak either, but it makes sense when I think back at the issue that I was having. Essentially, I discovered the bug because in my unit tests items I expected to be dropped were not dropped from the measurements. I haven't checked the numbers but I think your logic is sound.\n. I don't know about the leak but this patch does fix the overflow issue. What do you think is missing?\n. I don't quite get the class loading issue. However, the negative nanos shouldn't be a problem as long as the difference is used; values from subsequent invocations will always be larger numbers.\n. ",
    "victor-prp": "Hi guys,\nWe have encountered with cases when SlidingTimeWindowReservoir leaks and holds about 130 MB.\nIt looks like related problem.\nWhen the fix is planned to be releases?\nThx\nVictor\n. I archived to reproduce it in unit test.\nCan send the test if you are interested.\n. How can I send you zip file? \n. Ryan,\nI found your mail and sent you the test directly, hope its OK with you.\n. ",
    "martinsmatthews": "We've seen exactly this in production, using > 3GB memory when we get an overflow (there are lots of metrics in there ;)). \n@ryantenney agree with your logic, I've tested your fix and it looks good to me - test case is here https://gist.github.com/martinsmatthews/c2f87b8ec90652b7e3a1\nLet me know what you think.\n. Cool, we are going to monkey patch this in our production environments, but would be good to get a bona fide release at some point!\n. This will still cause an overflow after ~417 days uptime by my reckoning\n. ",
    "mozotom": "Here's what I've done at my place that fixed it https://github.com/dropwizard/metrics/pull/931\nWe had this problem when physical server uptime was over 417 days - rebooting server, would restart up time for another 417 days, but we wanted a permanent fix, so I created this one.\n. My original solution got shut down, so here's alternative: https://github.com/dropwizard/metrics/pull/932 If you want to keep your service running longer without OOM, consider smaller collisionBitwidth (like 4 instead of default 8 will give you 16 years, not one)\n. @Zvezdochet Your solution is similar to https://github.com/dropwizard/metrics/pull/523 This will save you for 417 days of app up time. If your app happens to be up on 417th day, it will develop memory leak (basically, it will stop clearing values). With over 1,000 servers that hardly ever get restarted this problem has been popping up constantly until I've implemented https://github.com/dropwizard/metrics/pull/931 Now it will take 300 years before problem happens again. If you're worried about loss of precision, it would take 1,000,000 entries per millisecond to corrupt it - with nanosecond precision, reading clock twice in a row will not return the same value, so I think we're safe on that.\n. As long as your app doesn't run for more than 417 days between restarts, you'll be fine\n. Here's what I've done at my place that fixed it https://github.com/dropwizard/metrics/pull/931\nWe had this problem when physical server uptime was over 417 days - rebooting server, would restart up time for another 417 days, but we wanted a permanent fix, so I created this one.\n. Here's what I've done at my place that fixed it https://github.com/dropwizard/metrics/pull/931\nWe had this problem when physical server uptime was over 417 days - rebooting server, would restart up time for another 417 days, but we wanted a permanent fix, so I created this one.\n. Collision will not happen, because we constantly check if \"tick - oldTick > 0\" in line 71. While drift might seem large on nanosecond level, it would take 1,000,000 requests per millisecond to affect it on millisecond level.\n. We've had your fix in live and we just started having OOM when JVM was alive during 417 days of up time on the server. I've added tests to detect that issue. Please run those tests against your code and you'll see where it fails\n. Ryan, how about making buffer size configurable, so users can choose between precision and longer period of time without having to reboot physical node to reset up time?\n. @ryantenney would you consider making the buffer bit width configurable?\n. @ryantenney I'm not sure why this test fails, but it fails the same way without my changes. Those changes should be fully backwards compatible with the same default values, so there should be no impact to existing tests. Once you get this branch build without my changes, it should build with those changes as well. If not, I'll review and fix any issues.\n. This test detects overflow on 417th day of server uptime (we've seen this in live and have heap dumps showing it)\n. since nanoTime can be arbitrary number (even negative per definition), let's test all possible values - this one breaks current solution on sliding-time-window-overflow branch\n. ",
    "andrey-zvez": "Got this problem on one of our servers too. As a quick fix we use Clock  wrapper to make its tick values smaller. It doesn't actually fix the bug, but as our app get restarted much more often than servers it helps live with it. \n. App restart should help and it did. Basically my clock returns ticks since\napp start.\nAnd I.m not telling your fix is bad, it is just more convenient for us to\npass different clock than to use patched lib or reimplement sliding window\nin our code.\nOn Sat, Aug 27, 2016, 10:07 mozotom notifications@github.com wrote:\n\n@Zvezdochet https://github.com/Zvezdochet This will save you for 834\ndays of physical server up time. If your app happens to be up on 834th day,\nit will develop memory leak (basically, it will stop clearing values). It\ndoesn't matter if you restart your app a day before. While most physical\nservers get restarted more often than every 2 years, some might not (like\nin my case). With over 1,000 servers that hardly ever get restarted this\nproblem has been popping up constantly until I've implemented #931\nhttps://github.com/dropwizard/metrics/pull/931 Now it will take 300\nyears before problem happens again. If you're worried about loss of\nprecision, it would take 1,000,000 entries per millisecond to corrupt it -\nwith nanosecond precision, reading clock twice in a row will not return the\nsame value, so I think we're safe on that.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/515#issuecomment-242901211,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABVJlPYJgZLMA4Kn0WGE8GRKhGUgTgP_ks5qj-JBgaJpZM4BaLrA\n.\n. \n",
    "miccab": "Wouldn't be easier to have an alternative Reservoir which drains list of collected metrics only when getSnapshot is called?\nThus:\n- no need to trim while update operation, so less overhead\n- no OMM like in SlidingTimeWindow discussed here (assuming that reporter is enabled)\n- once you tell Reporter to report every X time then for sure, it reports all metrics from last report up to now (easier to interpret)\nThings to note:\n- Of course, prerequisite would be to have at least one reported enabled - otherwise OOM occur. But that is normal case to have such.  Alternatively, there could be some safety net if really needed (max queue size or periodic cleanup).\n- Of course then you cannot have many reporters (as one would cleanup the data for the other): but then one can introduce a composite reporter. which would  be anyway more efficient to call getSnapshot once and reuse it instead of calling it many times.\n- Problem would be with reporters like JMX, which exposes individual attribute of a metric (like p99), and each access goes via getSnapshot method, which would not work with this reservoir.  So well, JMX would not be compatible.\nNot sure if that reservoir was ever considered?\n. ",
    "ho3rexqj": "I'm not sure why this issue was re-opened - the existing fix in commit 2156faf42201eb1ceba664b78088393f5bf26df2 seems adequate.  I'm reasonably certain Java guarantees arithmetic operations on longs will use two's complement arithmetic, and as such it will always be true that (timeOneInNanos*256) - (timeTwoInNanos*256) = (timeOneInNanos - timeTwoInNaos)*256, even when those operations overflow.  If that's not the case would someone mind pointing out what I'm overlooking?  For example, perhaps the Java language specification does not guarantee integer overflow is well-defined here - I couldn't find anything immediately definitive there (signed integer overflow behavior is undefined in C++, for example), but I would be surprised if that was the case.\nThere is a related issue not covered above that has to do with how the reservoir is cleared as part of a trim operation.  The sliding time window clears values from the map before getTick() - window - that works if the getTick is strictly increasing, but not if it's allowed to overflow.  I would expect the existing implementation (that is, v3.1.0 onwards) to leave part of the window at the overflow threshold behind indefinitely.  I've added a pull request with a suitable fix - #1063.\nEdit: The Java language specification (Java 8) seems to provide the necessary overflow guarantees here - see 15.7.1 and 15.18.2 for multiplication and addition, respectively.  Perhaps there's something else I'm missing?. There is still a bug in getTick that would produce behavior described above - the time difference between subsequent ticks may overflow, so that (effectively) (nanoTime() - previousTime)*256 < 0.  However, to produce that behavior Long.MAX_VALUE/256+1 nanoseconds (~417 days) would need to pass between two consecutive calls to getTick - that is, ~417 days would need to pass without a call to update, size, or getSnapshot.  It seems unlikely that was the reason this issue was reopened, or the cause of any of the behaviors described above.\nNever the less, that bug should be addressed as well.  The best way to do that, in my opinion, would be to restrict the next tick selected in getTick() to values between nanoTime()*256 and (nanoTime()+1)*256 (inclusive).  More than 256 updates at the same tick value in getTick (maybe several thousand cores are updating the reservoir concurrently?) would then loop back over that range, rather than adding values to subsequent nanosecond \"blocks\".  The following would produce the desired behavior there:\nprivate long getTick() {\n    for (; ; ) {\n        final long oldTick = lastTick.get();\n        final long tick = clock.getTick() * COLLISION_BUFFER;\n        // ensure the tick is strictly incrementing even if there are duplicate ticks\n        final long newTick = ((tick ^ oldTick) >>> 8) != 0 ? tick : oldTick + 1;\n        if (lastTick.compareAndSet(oldTick, newTick)) {\n            return newTick;\n        }\n    }\n}\nNote that the above implementation allows one tick value to overflow into the next block - the sequence in which clock.getTick() returned 0 would be 0, 1, 2, ..., 255, 256, 0, 1, ... rather than 0, 1, 2, ..., 254, 255, 0, 1, ....  I couldn't find an efficient way to restrict values to the second sequence - branching or additional masking was required.  Maybe someone better at bit-twiddling than I am could find a better way to do that?\nFinally, if the above and the fix proposed in #1063 are adopted, please note that testGetTickOverflow needs to be updated to allow a slightly wider window - the two isLessThanOrEqualTo(window * 256) statements in that method would need to be replaced with isLessThanOrEqualTo((window+1) * 256).. I'm afraid I likely won't be able to submit any new patches for the next couple weeks here (unrelated constraints).  Feel free to add the patch I posted above or something similar to the project yourself, if you get the chance.  Note that COLLISION_BUFFER and the shift width (>>> 8) are coupled (COLLISION_BUFFER = 1 << 8), and the constants should be updated to reflect that.. In both the original and updated implementations, while a thread is performing the rescale operation (within the write lock) all concurrent updates block until the rescale operation is complete.  There are behavioral differences there, however nothing fundamental changes with respect to the impact on other concurrent updates while the rescale operation is ongoing - could you clarify your concern there?\nNote that the race condition the patch fixes allowed updates to sometimes be added to the reservoir outside of the rescale window (that is, without a preceding rescale operation).  The fix merely enforces that requirement; updates outside of the rescale window are forced to wait for the rescale operation to complete before updating the reservoir's state.  There are other implementations that would accomplish that - the write lock barrier is more than is strictly required there:\nOne approach would be to add a second atomic to rescale (or similar) to guard the call to lockForRescale:\nif (rescaleGuard.getAndSet(next) != next) {\n    lockForRescale();\n    try {\n        if (nextScaleTime.compareAndSet(next, now + RESCALE_THRESHOLD)) {\n            // ...\n        }\n    } finally {\n        unlockForRescale();\n    }\n} else {\n    // a spin lock is used in this illustration; ideally something else would be used in practice\n    while (nextScaleTime.get() == next)\n        ; // do nothing\n}\nAlternatively, rather than enforcing the above requirement, it could be relaxed and the reservoir could be refactored accordingly.  For example, a cache could be added to the reservoir to collect updates added in update outside of the rescale window (value/timestamp pairs) - those would then needed to be processed as part of the rescale operation, and possibly as part of getSnapshot (although that could likely be omitted).\nNote, however, both of the above would add significant complexity to the reservoir.  I'm not certain it's at all worthwhile given that the window during which multiple concurrent calls to update will block on lockForRescale should either be small (two concurrent calls to update) or involve three or more competing threads (one thread executing getSnapshot and two or more executing update concurrently).. ",
    "jplock": "Oops, sorry about that.. I believe so, yes. Please see dropwizard/dropwizard#545 for more details.\n. This is nice though.  The plausiblelabs package hasn't been updated in 2 years and needs to be updated to the latest metrics 3.x anyway.\n. There seems to be a weird mix of tabs and spaces in here.  Can this PR be updated to match the existing metrics code styles (4-spaces I believe)?\n. Would you like to contribute a PR to fix it?\n. Seems like a simple enough change.  Any reason not to merge @ryantenney ?\n. @ryantenney if we submitted a similar PR to the 3.1-maintenance branch, would it be possible to create a new metrics release with that change?\n. @arteam is this good to merge now?\n. And Java7?\n. @ryantenney what do you think about getting this into 4.0.0 and possibly 3.2?\n. After upgrading Dropwizard to Metrics 3.2.0 and doing https://github.com/dropwizard/dropwizard/pull/1938, it would have been nice to get this PR into 3.2.0.  Maybe we can merge it into master and cherry-pick it into 3.2-development?. There are a few open pull requests related to this already in #871 and #854 \n. Can you add test for this?\n. This looks good to me\n. Thanks!\n. @patrox this went into master and I don't think was cherry-picked into the 3.1 or 3.2 release branches, so we'd have to wait until 4.0 for this one.. I think I fixed the javadoc issue.  I also submitted #930 against master.\n. Seems like a simple additional to me, thanks!\n. Ahh ok, I reverted the commit, but we'll need another PR to address @ryantenney's comments @nurkiewicz.  Sorry about that.\n. Thanks!\n. Thanks!\n. Travis failed for something unrelated to this PR.  I'm going to merge this in anyway since its just a documentation fix.\n. This is fine, thanks!\n. If you are using dropwizard, you can configure a simple server to host both the admin and normal resources - http://www.dropwizard.io/1.0.5/docs/manual/configuration.html#simple. Looks good to me, want me to merge this in @ryantenney ?. @arteam logback 1.1.10 was merged into dropwizard in https://github.com/dropwizard/dropwizard/pull/1918, do you want to update to that version in metrics too?. LGTM. @arteam should we try updating dropwizard 1.1.x to use metrics 3.1.3 and then update dropwizard master to use metrics 3.2.0?. @arteam agreed, it's been a long time coming and i think getting 3.2.0 into DW 1.1.0 would be great.. The tests passed on travis.. LGTM. we could probably simplify a lot of these and set them to ${project.groupId} to avoid hardcoding them everywhere (same with DW too).. Thanks!. @arteam after merging this into master, will we be able to merge 3.2-development into master or will we still have merge conflicts?  It'd be nice to follow git-flow or another flow that doesn't involve cherry picking to avoid forgetting to merge commits.  Is this ready to merge?. @arteam is this good to merge?. @dennyac 4.0-development is the branch for the next major release.. @arteam do you want these PR's going into the 4.1 branch or master?. @arteam we should probably fix this in dropwizard too. Isn't this always going to be set to debug?\n. nit: can you fix the formatting on this line?\n. should we just use StandardCharsets.UTF_8 here to avoid having to deal with UnsupportedEncodingException?\n. can this be Long[] to avoid the cast below?  Just curious. rawSql.isEmpty() ?. ",
    "earthling": "We could have the MetricRegistryListener.Base class provide a compatibility shim for classes which derive from it. Or we could have a new interface which extends MetricRegistryListener with the new methods (and have the MetricRegistry test if the listener is an instance of the new interface and dispatch the event accordingly... \nIt turns out, I am actually able to satisfy my use case without this change to the interface. If you think it's not worth the trouble, I'd be happy to revert it if it make the other changes more palatable:\n- protected onMetricRemoved and onMetricAdded\n- constructor overload for passing the backing map instead of calling a virtual method from the constructor\n- Jmx object name factory (which I cherry picked from another pull request)\nThanks.\n. This is very interesting - did you know that the previous major version (2.x) had a MetricName? We had used one of its (many) fields to implement this concept of 'tags.' I can tell you that upgrading to the 3.x releases was rather awkward (we ended up encoding the 'tags' directly in the metric name string).\n. Yes, I agree, but the popular 'Graphite' system is highly hierarchical. For this case, we encode the tags as part of the graphite metric name. Your example:\ninterface.traffic {host=example.com, interface=eth0, direction=in}\nWould become something like:\ninterface.traffic.hosts.example_com.interfaces.eth0.directions.in\nWhich is perhaps not ideal, but I think it is manageable. One could imagine a 'metric name formatter' or something of that sort. Do you think it would be valuable to have a means to control the position of the 'tags' when they are rendered into a singular string for system like Graphite?\n. ",
    "nilsga": "How about creating a new interface, and then implement support for it in a new method in the registry?\n\nDen 26. jan. 2014 kl. 20:11 skrev Ryan Tenney notifications@github.com:\nSorry, this would be a breaking change.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "bartprokop": "I've implemented it as 200 as I was interested to look into threads as\nhuman beeing. But I understand the other's position. Probably maintainer\nshall decide.\nOn Feb 7, 2014 2:34 PM, \"Ryan Tenney\" notifications@github.com wrote:\n\nIt seems to me that status code is mostly an issue if programmatically\nfetching thread dumps. Does anyone do that? If not, I'm content to leave\nthis as a 200, otherwise I'd support changing it to a 500 or 501.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/522#issuecomment-34436546\n.\n. Sure, I've made local maven build and included in test version of my app on\nGoogle App Engine, you can check here:\n\nhttp://14.natanedwin.appspot.com/metrics\nBefore applying my patch:\nError for /metrics\njava.lang.NoClassDefFoundError: java.lang.management.ManagementFactory\nis a restricted class. Please see the Google App Engine developer's\nguide for more details.\n    at com.google.apphosting.runtime.security.shared.stub.java.lang.management.ManagementFactory.(ManagementFactory.java)\n    at com.codahale.metrics.servlets.ThreadDumpServlet.init(ThreadDumpServlet.java:26)\n    at com.codahale.metrics.servlets.AdminServlet.init(AdminServlet.java:60)\n    at org.mortbay.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:440)\n    at org.mortbay.jetty.servlet.ServletHolder.getServlet(ServletHolder.java:339)\n    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)\nBTW... I plan to do some more work on metrics/code - counters as they use\ncom.sun.Unsafe, and this is also blacklisted by Google.,,, Same situation,\nNoClassDefFound thrown when classloader is asked to load that class.\nOn Fri, Feb 7, 2014 at 4:53 PM, Ryan Tenney notifications@github.comwrote:\n\nI don't use GAE, but I trust you've run this and it works? My only concern\nwould be that GAE throws the NoClassDefFound exception when the\nThreadDumpServlet class is loaded.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/522#issuecomment-34454866\n.\n\n\nBart Prokop\ntel. +48 509 258 502\nLinkedIn: http://pl.linkedin.com/in/bartprokop\nMy PGP/GPG public key:\nhttp://bart.prokop.name/gpg/gpg-2014-pub-key-prokop-bart.asc, fingerprint:\n85AC B7A4 5E9A 73D4 DDA0  38A7 244E A73A C835 58F3. I'm more than happy to\naccept PGP encrypted e-mails.\nThis e-mail is intended solely for the addressee(s) and contains\nconfidential information. Unauthorized distribution, modification or\ndisclosure of its contents is unlawful. If you have received this e-mail in\nerror, please notify the sender immediately by return e-mail. Please then\ndelete the e-mail from your system and do not copy it or disclose its\ncontents to any person. Email transmission cannot be guaranteed to be\nsecure or error free as information could be intercepted, corrupted, lost,\ndestroyed, arrive late or incomplete, or contain viruses. The sender\ntherefore does not accept liability for any errors or omissions in the\ncontents of this message which arise as a result of email transmission.\nInformation, opinions or conclusions contained in this message that do not\nrelate to the official business of the senders employer or principal will\nbe understood as neither given nor endorsed by it.\n. It would make sense if we do this as: sendError(404, \"Thread dump not\nsupported\"). But, I assume that thread dump is used mainly by developers\nnot monitoring tools so, plain text is better than annoying 404. But if 404\nis \"better taste\" here, I'm fine.\nOn Fri, Feb 7, 2014 at 12:22 AM, Jochen Schalanda\nnotifications@github.comwrote:\n\nIn\nmetrics-servlets/src/main/java/com/codahale/metrics/servlets/ThreadDumpServlet.java:\n\n```\n }\n@Override\n protected void doGet(HttpServletRequest req,\n```\n-                         HttpServletResponse resp) throws ServletException, IOException {\n-            HttpServletResponse resp) throws ServletException, IOException {\n       resp.setStatus(HttpServletResponse.SC_OK);\n\nJust a thought, but responding with HTTP status 404 (Not found) might be\nmore sensible in case the platform doesn't support getting a thread dump.\n-\n   http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html#SC_NOT_FOUND\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/522/files#r9523995\n.\n\n\nBart Prokop\ntel. +48 509 258 502\nLinkedIn: http://pl.linkedin.com/in/bartprokop\nMy PGP/GPG public key:\nhttp://bart.prokop.name/gpg/gpg-2014-pub-key-prokop-bart.asc, fingerprint:\n85AC B7A4 5E9A 73D4 DDA0  38A7 244E A73A C835 58F3. I'm more than happy to\naccept PGP encrypted e-mails.\nThis e-mail is intended solely for the addressee(s) and contains\nconfidential information. Unauthorized distribution, modification or\ndisclosure of its contents is unlawful. If you have received this e-mail in\nerror, please notify the sender immediately by return e-mail. Please then\ndelete the e-mail from your system and do not copy it or disclose its\ncontents to any person. Email transmission cannot be guaranteed to be\nsecure or error free as information could be intercepted, corrupted, lost,\ndestroyed, arrive late or incomplete, or contain viruses. The sender\ntherefore does not accept liability for any errors or omissions in the\ncontents of this message which arise as a result of email transmission.\nInformation, opinions or conclusions contained in this message that do not\nrelate to the official business of the senders employer or principal will\nbe understood as neither given nor endorsed by it.\n. Rather \"not supported\", as it is in fact \"implemented\"\nOn Fri, Feb 7, 2014 at 7:24 AM, Tomasz Guzik notifications@github.comwrote:\n\nIn\nmetrics-servlets/src/main/java/com/codahale/metrics/servlets/ThreadDumpServlet.java:\n\n```\n }\n@Override\n protected void doGet(HttpServletRequest req,\n```\n-                         HttpServletResponse resp) throws ServletException, IOException {\n-            HttpServletResponse resp) throws ServletException, IOException {\n       resp.setStatus(HttpServletResponse.SC_OK);\n\nHTTP 4xx return codes are classified as \"client errors\". Since the problem\nlies on server side, wouldn't it make more sense to return 501 Not\nImplemented instead?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/522/files#r9530890\n.\n\n\nBart Prokop\ntel. +48 509 258 502\nLinkedIn: http://pl.linkedin.com/in/bartprokop\nMy PGP/GPG public key:\nhttp://bart.prokop.name/gpg/gpg-2014-pub-key-prokop-bart.asc, fingerprint:\n85AC B7A4 5E9A 73D4 DDA0  38A7 244E A73A C835 58F3. I'm more than happy to\naccept PGP encrypted e-mails.\nThis e-mail is intended solely for the addressee(s) and contains\nconfidential information. Unauthorized distribution, modification or\ndisclosure of its contents is unlawful. If you have received this e-mail in\nerror, please notify the sender immediately by return e-mail. Please then\ndelete the e-mail from your system and do not copy it or disclose its\ncontents to any person. Email transmission cannot be guaranteed to be\nsecure or error free as information could be intercepted, corrupted, lost,\ndestroyed, arrive late or incomplete, or contain viruses. The sender\ntherefore does not accept liability for any errors or omissions in the\ncontents of this message which arise as a result of email transmission.\nInformation, opinions or conclusions contained in this message that do not\nrelate to the official business of the senders employer or principal will\nbe understood as neither given nor endorsed by it.\n. ",
    "augustocallejas": "@ryantenney - Can you explain your comment to @omerkudat regarding:\nlong ns = System.nanoTime(); ns >= 0 && ns < Long.MAX_VALUE / ((COLLISION_BUFFER - 1) / COLLISION_BUFFER)\nProviding only offsets from an initial value System.nanoTime()obtained when the UserTimeClock class is loaded seems okay, although I do agree that overflow could eventually happen over a long period of time when multiplying by COLLISION_BUFFER.\n. ",
    "bshukhat": "We experience something like connection leakage: elasticsearch reporter opens multiple connections and they eventually overflow the server limits. Is it a known  issue?\n. ",
    "Arvoreen": "Hmm, did I mess that up?  Crap...looking at my patch now, I did mess that up :(\nI can submit and update...\n. Created a new pull request, #550 to solve issue\n. ",
    "michail-nikolaev": "https://github.com/novaquark/metrics-influxdb seems to be unstable, not uses official java API, have major issues with NaN and collection reporting...\n. ",
    "darrenfu": "Will the next version of influxDB support InfluxDB? I saw the influxDB plugin code is already in dropwizard metrics master branch. Is it a stable version?\nhttps://github.com/dropwizard/metrics/tree/master/metrics-influxdb/src/main/java/io/dropwizard/metrics/influxdb\n. Does the third party library above support influxdb v1.3 as well? Looks like it only supports v0.13.. ",
    "timmc": "Apparently \"very, very few people ever looked at them\", but I don't think that's a very good reason to drop them!\nI feel like there's gotta be some site out there that generates and displays javadocs for open source projects.\n. Ah, wonderful! Thank you for making them versioned, too.\n. ",
    "carlosroman": "I'd like to see them as well as find them really useful (for the times that I don't have access to the source or just need to show someone at a high level the api).\n. ",
    "ericacm": "+1\n. Awesome!  Thanks!\n. ",
    "astefanutti": "@joschi are you expecting to have the above URL changed soon or can we update our links to it?\n. @joschi Thanks, I'll wait then. For sure that's a better idea to have the documentation versioned.\n. @saden1, indeed the purpose is to use the @Metric annotation as a qualifier for dependency injection. Considering the CDI specification, that would be logical to be able to use that annotation to annotate:\n- producer methods to register customised metric instances,\n- parameters of bean constructor, initializer method, producer method, disposer method or observer method to inject metric instances from the registry.\n@ryantenney, I agree that this one example is quite verbose, though if one were to used the default convention that is to use the annotated member name relative to the annotated class, that'd be a quite straightforward and compact way of declaring a customised gauge:\n``` java\nclass GaugeFactoryBean {\n@Produces\nGauge<Double> cacheHitRatioGauge(final Meter hits, final Timer calls) {\n    return new RatioGauge() {\n        @Override\n        protected Ratio getRatio() {\n            return Ratio.of(hits.getOneMinuteRate(), calls.getOneMinuteRate());\n        }\n    };\n}\n\n}\n```\nIndeed, with Java 8, that becomes possible to access to parameter names at runtime, thus to implement the default naming convention specified by the Metrics annotation in a consistent manner across fields, methods and parameters.\n. That rocks! That'll push what's possible in term of integration.\n@ryantenney, may I ask if an estimated date is planned in the short term for the first release of Metrics 4.x so that I can depend on SNAPSHOT version (provided it's been deployed to Sonatype Nexus Snapshots) and migrate right now to that new Metric annotation or there is still a long way to go before it's feature complete and released?\n. With Java Interceptors Specification 1.2, that's part of Java EE 7, it is possible to use the @AroundConstruct annotation to declare lifecycle callbacks that get called around  target class constructors.\nI'm already using that mechanism for CDI beans whose methods are annotated with Metrics annotations in Metrics CDI. You can have a look at the MetricsInterceptor class for the implementation details.\nIt could easily be extended to support Metrics annotations on bean constructors as well.\n. It looks like the metrics-jersey2 module has just been created as part of 3.1.0-SNAPSHOT that has yet to be released and deployed in Maven Central.\n. The 3.1.0-SNAPSHOT version is already available in Sonatype Nexus snapshot repository:\n<repositories>\n    <repository>\n        <id>sonatype-nexus-snapshots</id>\n        <url>http://oss.sonatype.org/content/repositories/snapshots</url>\n    </repository>\n</repositories>\nAs far as I know, version 3.1.0 is expected to be released within few weeks though that'd be wise to wait @ryantenney's confirmation.\n. Sure, I'd be OK with that straightforward resolution, though I'd understand from the maintainer standpoint that I'd want to avoid opening too much for incorrect usage to be possible. I'd rather wait for @ryantenney opinion / analysis on this.\n. Hi,\nI maintain the metrics-cdi module where the metric customization concern is implemented using CDI producer methods and the @Produces annotation so that one can write:\n``` java\nclass TimedMethodBean {\n@Produces\n@Metric(name = \"customTimer\")\nTimer Timer = new Timer(new SlidingTimeWindowReservoir(1L, TimeUnit.MINUTES));\n\n@Timed(name = \"customTimer\")\nvoid timedMethod() {\n}\n\n}\n```\nWhen the application starts, the container looks up for producer methods whose return type is a subtype of Metric, calls these producer methods and register the returned Metric instances into the Metrics registry.\nThis mechanism is more generic than the @Timed use case and can be used to register custom gauges, e.g.:\n``` java\nclass CacheHitRatioBean {\n@Inject\nprivate Meter hits;\n\n@Timed(name = \"calls\")\npublic void cachedMethod() {\n    if (hit)\n        hits.mark();\n}\n\n@Produces\n@Metric(name = \"cache-hits\")\nprivate Gauge<Double> cacheHitRatioGauge(Meter hits, Timer calls) {\n    return () -> calls.getOneMinuteRate() != 0 ?\n                 hits.getOneMinuteRate() / calls.getOneMinuteRate() :\n                 Double.NaN;\n}\n\n}\n```\nThat being said, as the reservoir customization for timers is a recurring use case, that would probably make sense to have a more straightforward way of doing it.\n. ",
    "saadmufti": "Oops, didn't notice another pull request already adds Jersey 2.x support. Anyway now you have a choice :-)\n. FWIW in mine I scan the annotations only once at application startup.\n. I have rebased my changes against the latest master, and applied the code review changes suggested by @joschi . @cab222 can you please close the other pull request?\nCheers.\n. Ok, sounds reasonable,  I'll do that. @cab222 I hope you're OK with that.\nOn May 27, 2014 9:14 AM, \"Jochen Schalanda\" notifications@github.com\nwrote:\n\n@saadmufti It would be best if you rebased your branch (in #532) on the\ncurrent master branch and applied the changes there. No need to maintain\ntwo pull requests for the same changeset.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have updated my original pull request with the changes suggested here by @joschi , and rebased it against the latest master. @cab222 you can close this one.\n\nCheers.\n. Same issue appears to be in the master branch also.\n. Instead of resetting, you could use the built in sliding time window reservoir, but keep in mind it is not memory bounded so if your event rate is high it will run into trouble, plus it is the slowest one. There is also just sliding window reservoir which represent the last 'n' events.\nAlso keep in mind that from the default built in exponentially decaying reservoir, you get pretty nice behavior in that it roughly represents the last five minutes, the all the quantiles it gives you plus the min and max are from a sample, so it may not be the real min or max if there are very few outliers. Good behavior of this reservoir depends on assumptions about the underlying distributions of the values. Also, it relies on getting traffic to get updated, so if there is a lull in traffic, it will happily report very old (and incorrect) values.\nHope this helps.\n. Well for one thing ExponentiallyDecayingReservoir by design represent roughly the last five minutes (though it depends on active traffic to keep updating the metric). Doesn't HdrHistogram represent the lifetime of the metric? Having the metric quantiles represent just the most recent 'n' minutes would seem to be useful.. Valid point, after reading around the net on this I agree with you, exponentially decaying makes too many assumptions. From something I read a couple of years ago, I belive BDFL Coda was against reset functionality, can't recall why.. usually the port on which you report metrics into the Graphite server is different from the web UI port of 80. You have to check your graphite server to see which port it is exposing for publishing metrics to.. This might help : http://graphite.readthedocs.io/en/latest/feeding-carbon.html. Sorry for the late response. I was just trying to follow the naming scheme for the metrics-jetty8 and metrics-jetty9 modules, but if you think people will object to this renaming, we can leave the original one as metrics-jersey and the new one be metrics-jersey2.\nCheers.\n. Yes, cut and paste error. As this is now Carlo's PR, maybe he should fix it? Or I'd be happy to in my own PR if required.\n. I was just following the pattern from the original Jersey module, which uses Fest assertions. The assertions are simple enough that standard JUnit assertions would work just as well. If I recall correctly, recently there was some discussion in the dropwizard project on replacing fest with AssertJ (if I recall the name correctly). If there are strong feeling about this, I could go in and change it to standard JUnit assertions on both the original and new Jersey2 modules.\n. I'd be happy to make the changes you suggest (this one and below). The question is, since @cab222 repackaged my PR into a couple of his own changes, should the changes be made in my PR or his repackaged one?\n. The caching is to avoid looking up the resource method and scanning its annotations on every Jersey event. Not to avoid looking up the corresponding metric. I have looked in Jersey code before, but by no means an expert, so it is possible even that is not the most important saving but seemed prudent at the time. \nAgain, I don't know at this point if I should apply your code review comments to my own PR or let @cab222  apply them to this one.\nCheers.\n. ",
    "tongguop": "Sorry for asking: when will it be available?\n. Saw the source has 3.1.0-SNAPSHOT version. Is there a repository that I can get this version? I am working on a project that needs jersey2 functionalities, it will be very helpful that I can use the snapshot version for the development and change it to the production version once you release 3.1.0.\nThanks\nFrom: Ryan Tenney notifications@github.com<mailto:notifications@github.com>\nReply-To: dropwizard/metrics reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Monday, June 2, 2014 at 1:53 PM\nTo: dropwizard/metrics metrics@noreply.github.com<mailto:metrics@noreply.github.com>\nCc: \"Pang, Tongguo\" Tongguo.Pang@yeslifecyclemarketing.com<mailto:Tongguo.Pang@yeslifecyclemarketing.com>\nSubject: Re: [metrics] Migrate Metrics to Jersey2 (#532)\nThis will be included in 3.1.0, probably in 6-8 weeks.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/532#issuecomment-44869640.\n. ",
    "zapodot": "@tongguop The SNAPSHOT version is available in Sonatype's snapshot repo. Ref.: https://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/metrics/metrics-core/\nNote the change of groupId to io.dropwizard.metrics (from com.codahale.metrics)\n. ",
    "gdubicki": "@julio-lopez : what does \"two times\" improvement practically mean? You use metrics in your app asynchronously anyway..\n. ",
    "julio-lopez": "@grzegorz-dubicki \nYes, metrics are asynchronously added and updated otherwise.  However, with a sufficiently large number of metrics, the app runs into a situation where:\n- Low throughput is observed.  Sending the metrics to graphite takes a long time and does not complete in the reporting interval;\n- The foreground work in the application is adversely affected because the reporting task takes a significant amount of CPU cycles (primarily due to the synchronous nature of flush).\nAvoiding the frequent flushes improves overall throughput, but more important is the fact that it significantly reduces the CPU consumption and thus direct interference with the foreground work in the application, which ultimately limits scalability.\n. ",
    "Iker-Jimenez": "This is very useful for us too. Any chance getting this merged or at least looked at?\n. ",
    "jspiewak": "This won't make it into a 3.x release?\n. I think @samperman hoped that he could move away from that with 3.x\n. ",
    "xmeng1": "+1. ",
    "bartavelle": "The use case is to expose the actual sum of all data, so that it could be stored as a standard DERIVE value in a RRD. It is in theory possible to recompute it with mean * count, but it will get less and less precise as times goes on, and would be a PITA to integrate with our metrics collection system ...\n. @ceetav : getCount is useful, but we do need some kind of getSum() too ...\n@ryantenney : you are right, this patch will not help ...\n. Ah I see, it might be possible. Overflow and such isn't too bad, as the RRD layer should take care of this. I'll try to see into this, thanks !\n. ",
    "mkows": "Good point. Totally agree. I changed the code to reflect your suggestions. Now it works as expected.\n. It is not always the case though. Even when you look at getting statred docs in section JMX reporter there is a screenshot http://metrics.codahale.com/getting-started/#reporting-via-jmx that shows that some names are within quotes (first two) and the remaining are not.\nLooking futher it looks like it is more a feature than a bug.\nAt first name is attempted to be created without quotes. It uses javax.management.ObjectName(String domain, String key, String value) to create name object. This guys however throws MalformedObjectNameException when:\n- domain, key, or value contains an illegal character, or \n- value does not follow the rules for quoting.\n  In metrics library this exception is then caught and then name is wrapped within quotes. So it is feature :)\nHope it helps.\n. Chris, just out of curiosity, can you write what was the exact problem in your case?\n. ",
    "garyp": "I just looked at a heap dump I had captured the last time I ran into this issue and there was only one ConsoleReporter instance.\n. ",
    "massimo-parente": "Thank you for your suggestions. I have moved the code to metrics-graphite module, made the dependency optional and reformatted the code. Hopefully this will fix the whitespace issue.\n. Hi, are you still planning to merge these changes?\n. That's great, thanks.\nOn 9 April 2014 13:16, Ryan Tenney notifications@github.com wrote:\n\nYes, though it won't be included until version 4, which doesn't have a\nrelease date yet.\nOn Wed, Apr 9, 2014 at 6:18 AM, massimo-parente notifications@github.comwrote:\n\nHi, are you still planning to merge these changes?\n\nReply to this email directly or view it on GitHub<\nhttps://github.com/dropwizard/metrics/pull/554#issuecomment-39948540>\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/554#issuecomment-39956746\n.\n. Hi Ryan, please ignore my pull request.  My mistake, I've had this fix in mind for a while but I forgot that I already fixed this long ago! I just didn't noticed that the null check had been moved in isConnected() method.\n\nSorry for my wrong pull request\n. ",
    "fzakaria": "Yes caught if after and deleted NY fork.\nMy bad!\nOn 3 Apr 2014 06:32, \"Ryan Tenney\" notifications@github.com wrote:\n\nYou can already add a prefix to a graphite reporter:\nGraphiteReporter.forRegistry(registry)\n    .prefixedWith(\"prefix\")\n    .build(graphite);\n\nReply to this email directly or view it on GitHubhttps://github.com/dropwizard/metrics/pull/557#issuecomment-39450858\n.\n. is there a way to re-do the travis ? I ran mvn verify locally with JDK8 and it passes.\nPerhaps it was transient.\n. @ryantenney  thanks.\n\nIs it transient locally as well? I can see if i can reproduce & file issue\n. sweet first contribution to metrics.\nLong time user/fan.\nps: The recent artifact groupid change without changing the actual package names caused us a lot of headache at work due to our large codebase since there were some API compatibility - but love the lib.\n. Yea no worries - testament to how good the library is the willingness to continue using it even with these minor hiccups.\nCurious: Why weren't the package names changed with the groupId / artifactId (same time) ?\nThere might be some other factors that are clearly unknown to me, but definitely interesting to hear.\n. ",
    "zhaoyao": "+1 looking forward to this feature\nCurrently, I have no idea how to change the Reservoir implementation in Timer when using InstrumentedHttpClient\n. ",
    "chrishuttonch": "Ah fantastic. I have found the problem. Could you add this to the documentation just in case others trip up over it?\nThanks.\n. Sure. I was calling .start() on the JMXReporter before registering the counters with the metricRegistry\n. ",
    "vchekan": "I do not understand the explanation. How come forgetting to register before .start() can cause double quotes?\n. ",
    "udoprog": "I checked the latest build failures in Travis, and the following two builds blew up because of this;\nhttps://travis-ci.org/dropwizard/metrics/builds/19452995\nhttps://travis-ci.org/dropwizard/metrics/builds/19209249\n. @earthling: had no idea, that is interesting. Looking back, it was even named the same.\nThe major distinction I can see is like you stated the grand number of fields vs Map.\nFor my users it will be very important to have the ability to specify arbitrary tags that can correctly be propagated to the backend so that their meaning can carry through the entire application stack without additional translation steps.\nWhen considering the case of thousands of hosts with hundreds of roles with hundreds of timeseries, treating them as a hierarchy becomes problematic.\n. Here is another initiative to start thinking in terms of tags;\nhttp://metrics20.org/\n. @ryantenney Wow, must admit I was not expecting this. kudos for looking at it again!\nAt my company we've implemented something similar (but we went with the name MetricId), what we ended up doing was replace MetricRegistry and start from scratch. We'll be releasing the library pretty soon.\nThese are a few things we've learned along the way;\n- Most of the existing MetricSet's did not structure the things that we wanted them to, so we started from scratch and re-implemented the ones we wanted with tags in mind. Strong conventions are a must (e.g. every metric must have a distinct key and a unit tag that makes sense).\n- Immutability of MetricId is really neat, but expensive, copying the underlying Map degrades performance in the scenarios where you want to have a dynamic field and lots of measurements. We had to implement a MetricIdCache<K, MetricId> to cope with this.\n- It is very beneficial for MetricName and MetricRegistry to be interfaces that are distributred separately from the core, it makes it easier for frameworks to integrate with metrics. It also makes it easier to version everything (new packages when breaking backwards compatibility) and providing shims for frameworks which are slow adopters.\n@salilsurendran\nReplacing the identifier of a time series with a concrete type has a few benefits.\nRefactoring probably does not have to happen again. E.g. the behavior of a MetricName and its underlying implementation can change freely without having to modify signatures and method invocations all over the place.\nConcretely about what you suggest, if you encapsulate the tags of a metric in the API, every method that interacts with metrics would have to support the new way of doing things, and in order to make use of it, all these 50 files would have to be modified at one point or another.\nString's are in my opinion poor metric identifiers, they require encoding to encapsulate non-trivial information (like tags). And they have very strong pre-defined behaviour that can not (should not) be extended or modified (final). Two things i'd want for a metric identifier in a framework.\n\nI hope any of this will be useful, I'd be thrilled to help out on this if possible.\n. It's back!\nGetting this would permit us to port all additions we've done in https://github.com/spotify/semantic-metrics (ffwd reporters) and only use upstream libraries. That would be perfect!\nA word of caution: it currently seems like both 4.x and 5.x will be using the same packages. This really need to change since the metrics libraries are deeply embedded as a dependency in many projects. I've opened #1248 and I hope you'll be able to take it into consideration!. I currently believe that there's nothing you can do with free-floating labels, that you can't do with key-value pairs better.\nFor example, good, bad are labels, they could instead be status: good, and status: bad. The latter communicates what is good or bad (the status). Without this information the data is free-floating and prone to conflicts. Less descriptive.\nI don't think free-floating labels are well supported in TSDBs (Prometheus, infuxdb, Heroic), or UIs (mainly Grafana). But this I'm less sure about now. Datadog might have supported them at some point.\n@qualidafial Do you have an example of a label and TSDB combo where this is useful?. ",
    "StevenLeRoux": "Hi, \nI intended to start this discussion by creating a TimeSeries Format Specification.\nYou can find it here : https://github.com/StevenLeRoux/TimeSeries_Format_Specification \nI welcome every comment and I encourage the patch from @udoprog since it's a more powerful way to manipulate series since you can discover them from tags instead of having to know the structure of a MetricName if you don't use tags.\n. I think it's valuable for large deployment when you have indexed tags so that you can discover and fetch your metrics from this index instead of proceed to a full scan of your entries or your tree.\n. ",
    "salilsurendran": "In this particular PR the name has been replaced with a class MetricName. Instead of this wouldn't it be simpler to have tags supplied when one creates a counter, gauge or timer etc via the MetricsRegistry.counter, .gauge() etc. \n. Could you please let me know why a MetricName would be friendly way to implement tags? Suppose if I create a counter like this:\nMetricRegistry.counter(\"name\", Map);\ncounter.increment();\nAre there any underlying functionality that would prevent an approach I mentioned above?\n. But doing this results in 50 file changes in your PR. Whereas if you go with what I suggest you will only have to change the MetricRegistory methods to accept tags. I was wondering if there is a reason related to functionality that requires the use of MetricName?\n. ",
    "davidkarlsen": "Really looking forward to this - what is the timeframe for a v4 release?\n. +1\n. Also - what do you think about excluding commons-logging from the http client, and use jcl-over-slf4j instead as slf4j seems to be the logging framework in use?\n. Ping - any thoughts on this?\n. OK - then I'll fix that - what about splitting the auth string into username and password properties?\n. Fixed - can you pull this and I'll fix the spring-metrics as well?\n. @ryantenney Maybe this can be pulled now and I can then fix spring-metrics after this as well?\n. @arteam\nI see there is a github release: https://github.com/dropwizard/metrics/releases/tag/v4.0.1 - but nothing on central? http://repo1.maven.org/maven2/io/dropwizard/metrics/metrics-bom/. ",
    "srini156": "+1.\n. Raised a PR for the same https://github.com/dropwizard/metrics/pull/722\n. It seems there is lot of diff due to code formatting. Please let me know what code formatting is being used. I will apply to the current diff.\n. @ryantenney Any updates on this PR?\n. Thanks @ryantenney  :)\n. @ryantenney  - Any updates on when this feature will be released? \n. ",
    "mh2753": "There is a getMetrics(Class klass, MetricFilter filter) method, just that its private. getCounters, getGauges etc. use this method for filtering. Not sure why this method is marked as private though. \n. ",
    "adenysenko": "+1\n. ",
    "vionita": "Yes, it does provide what I need. I also did an implementation that is very much alike. Just some small differences. Is it possible to contribute to that pull request?\n. ",
    "ganeshs": "+1\n. ",
    "eric": "I was intending to use it. There are times where the actual CPU time spent is more important than wall-clock time.\n. I've run into this as well and would love for a way to override it on a whole registry level as well (change the default builder for timer for that instance of the registry).\n. ",
    "zb0th": "Thanks! Looking forward to the next release :)\n. ",
    "obfischer": "Same here. \n. I overlooked that this has been realised already for the Ganglia and Graphite Reporter.\n. ",
    "fmueller": "We're also suffering from this bug.\nMaybe an hotfix release for current Metrics version is appropriate. What do you think?\n. ",
    "saden1": "+1\n. I believe what is being talked about here is the use of @Metric as a qualifier annotation for the purpose of assisted injection. I am currently writing an HK2 based metrics module and the ability to use @Metric in method and constructor parameters would be of tremendous use.\n. mistaken pull request\n. Looking at \"com.codahale.metrics.Counter\" class I see that it provides 5 operations...increment by 1, decrement 1, increment by n. decrement by n, and count. My understanding is that these annotations are suppose to allow you to transparently perform similar operation using the likes of AOP.\n``` java\npublic class AccountService  {\n//intercepted method, increment counter everytime a user is added\n  @Counted(name=\"users\", op = Op.INCR)\n  public void createUser(...) {}\n//intercepted method, decrement counter everytime a user is deleted\n  @Counted(name=\"users\", op = Op.DECR)\n  public void deleteUser(...) {}\n}\n```\nWith respect to why anyone would want to incr/decr by a value other than one I can't really say but the Counter class has the functionality to allow people to do that. Maybe they are working with fixed batches of data and they know ahead of time? Or perhaps this feature is not useful in the context Counted annotation. Or maybe Counted could support the definition of an expression that allows one to dynamically determine where the count value comes from (i.e. @Counted (op=INCR, exp=\"#{request.batch.size}\")\n. Thinking about the issue some more I think it might be better to just let the implementor of the annotation interpret the value instead of forcing the user to specify op enum. \n``` java\npublic @interface Counted {\nString name() default \"\";\n\nboolean absolute() default false;\n\nlong value() default 1L;\n\n}\n```\n``` java\n  //increment by 1\n @Counted(name=\"users\")\n//decrement by 1\n @Counted(name=\"users\", value=-1)\n//increment by 10\n @Counted(name=\"users\", value=10)\n//decrement by by 1\n @Counted(name=\"users\", value=-10)\n```\n. While I agree that one should never do work in constructors it is valid to intercept and track calls to constructors. AOP Alliance support constructor interception and I would like to make use of that feature to meter/count object instantiation as well as track the amount of time spend creating short lived prototype objects.\nhttp://aopalliance.sourceforge.net/doc/org/aopalliance/intercept/ConstructorInterceptor.html\n. I do agree that timed usecase for constructors is kinda odd. I could see someone wanting to profile object instantiation over time.\nAs an implementer its really about makinging sure executable members (methods and constructors) can be intercepted and metrics applied to them.\n. I would also like to add that it would be a good idea to annotate the annotation classes with @Inherited and @Documented.\n. Awesome!\n. ",
    "ryanrupp": "This changed between Metrics 2.2 and 3.0, the mean became part of the Snapshot which means it's derived from a sampling of values vs over the lifetime of the metric so it will be dependent on the reservoir used for the timer. I'm not sure why that was originally changed, just commenting that this behavior existed at one point (sum was also retained but guessing for most they don't use this attribute).\n. MemoryPoolMXBean.getCollectionUsage() can return null for some of the memory pools that are not garbage collected, in Java 7 this would be Code Cache, in Java 8 there's also Meta Space and Compressed Class Space (replacing PermGen). This was introduced recently in 2c47f8530f2aeb3828e7e37702d5ead2162b5d0a so only affects master/4.0.0-SNAPSHOT, can probably just null check it before registering the metric to see if it's supported by the given pool.\n. MetricSet.getMetrics() will only be called once when registering the metrics via the MetricRegistry so this may be the expected behavior, see here - https://github.com/dropwizard/metrics/blob/master/metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java#L385 - so if the MetricRegistry is told to register a MetricSet (via MetricRegistry.register) it checks if it's a MetricSet and if so just calls getMetrics() once on it to get the set of metrics and registers each one. After that getMetrics() on your registry set will probably never be called again (unless your own code is doing something), instead you'll just have all your gauges invoked directly e.g. if reporting or accessing the gauges via JMX.\nDo you see the metrics being registered via JMX?\n. Fixes #797\n. I'm guessing this is just a rare use case so not sure it makes sense on the standard API, maybe better fit for a custom utility method that just calls update N amount of times. Are you looking to only update the meter though but not the histogram N amount of times? The percentiles would be off then because the duration would only be counted once but maybe that's what you're looking for, what is your use case? \n. You can view the tags in github, so 3.1.2 is here - https://github.com/dropwizard/metrics/tree/v3.1.2 and can download the source as a zip.\n. On master, the class is MetricName which has the concept of tags for dimensions, see here - then the MetricRegistry uses MetricNames instead of Strings for the keys, for instance here - you can still pass in just a String based name but the underlying Map is MetricName ---> Metric here\n. I don't use Graphite but would you want to fall back to Number.doubleValue() as a catch all, keeps the precision then on the example you had with AtomicDouble with the downsides though that it would represent things like AtomicLong (or other custom integral types) as a double and also precision issues above 2^53. Looks like the format truncates down to 2 digits though anyway I guess so not sure how much it matters.\nAnyway, if Number falls back to longValue() you can drop the else ifs for all the integral types (byte, short etc.) since they all subclass Number.\n. You could do this possibly with a Gauge but you would have to implement all the logic e.g. when the gauge gets called it sorts the timers (or snapshots) you're interested in and then shows the top 3-4 by name. You can use a cached gauge (in metrics core) if computing this is a heavier task.\nPersonally though I would leave this to an external timeseries database (graphite, influxdb, opentsdb, prometheus etc.) that you would just report each timers percentiles to every X minute(s) and do the visualization/aggregation inside of that tool. Of course that approach is a bit heavy handed but having an external tool for this type of aggregation/visualization is nice to have if you can allow it!\n. Can you post the output of the console reporter for the meter where this is happening (or any/all meters). Also to clarify you're actively marking the meter? The rates will decay to 0 if there's no markings occurring however the count is a sum over the lifetime.\n. My initial guess is because your reporter is setup to report rates as milliseconds the rate is going to be some small decimal given your test where it's only marking once every second, so it's truncating this in the console reporter because it's only reporting up to two decimal places (although I'm surprised this would be happening in the JMX reporter, it should be able to show doubles with deeper precision). Try changing the reported rate unit to minutes or seconds (the default is seconds) with the ConsoleReporter.Builder.convertRatesTo(TimeUnit.MINUTES)\n. Did you try a different reporting rate unit though? Note this is different than how frequently the reporting reports the values, I mean on the meter it says RateUnit is \"events/millisecond\" which is too granular and may be truncating the precision of some decimal e.g. 0.0000001 events/millisecond. \nWherever you have the ConsoleReporter built on the Builder use the method convertRatesTo and specify TimeUnit.MINUTES, right now you must be setting it to TimeUnit.MILLISECONDS.\nThe value you're seeing in the debugger when you call meter.getOneMinuteRate() is the rate per second* - but because you have the reporters setup to display the rate in milliseconds, it takes that number and multiplies it by the milliseconds conversion factor to report it in events/millisecond.\n. All metrics are thread safe, for Counter the library is using a backport of Java 8's LongAdder so it should be thread safe at least short of a bug. I did diff LongAdder from Java 8 vs Metrics and it's different but I would explore first if there's anyway your code paths could result in the counters not both being incremented.\n. I think you're looking for the metrics-jvm jar - http://metrics.dropwizard.io/3.1.0/manual/jvm/ - it looks like current versions of Cassandra already may be registering this module (look for metrics under jvm.*) - references to registering these in Cassandra source at least here - but looks like this was a recent change commit here\nSo, not sure how you'd add that in Cassandra 2.2 but that's the metrics module I think you're looking for.\n. Looks like maybe those JVM metrics got lost when Cassandra upgraded from Metrics 2.x to 3.x - the related Jira here\n. It should be coming from the static import, see here\n. As an alternative you can use removeMatching and have MetricFilter that matches on the prefix that you used for the MetricSet name (could get false positives if you register other metric sets or unrelated metrics under the same name prefix though).\n. I don't use Graphite but from what I remember about it, it uses a dot delimited naming convention (instead of tags like some newer systems) so I thought usually you want to have your metrics stored in some convention like:\n<host>.<metric_name>\nOr could be anything really to get the uniqueness that is desired. The Graphite Reporter allows you to prefix the name that is generated in the builder here. Maybe I'm understanding the problem incorrectly though because wouldn't you need this for any metric (not just the Jetty ones)? Or potentially there's times when you don't want to always prefix the host in the reported metrics? Suppose it depends how aggregations work in Graphite/what you want to achieve e.g. thread pool is definitely a metric that's unique to the application where as things like timings maybe you want to aggregate across the cluster, although I thought Graphite supported something like wildcard aggregations e.g. *.mytiming.avg\n. It looks like the Jetty metrics support a prefix in the constructor here  - so you could use that to prefix with the hostname. I don't think everyone will want that behavior so instead can use the \nAs for prefixing all the metrics being reported from Dropwizard metrics to graphite I suppose this depends on your use case but in tagged based systems this is nice so you can answer aggregate questions like \"what is the average time for this request across all nodes in the cluster\" (single timeseries line graph) but also at the node level \"what is the average time by node\" (produces a time series line per node). With Graphite it looks like you can do this with wildcard queries although I can't speak to its performance/if it's a best practice.\n. Is this only for the 3.2 branch or would it go into master/4.0 too? See the conversation in https://github.com/dropwizard/metrics/issues/837 and https://github.com/dropwizard/metrics/issues/178 - the idea that each \"Metric\" has a set of \"Attributes\" (name/value) off it. I'm not sure on the status of those but maybe instead of a MetricType enum, allow filtering by String based \"attribute names\" and just provide a helper class with the list of standard/known attribute names that currently exist (what is present in the MetricType enum currently). For 3.2 the enum makes sense as there's a fixed number of attributes, for 4.0 if https://github.com/dropwizard/metrics/issues/837 becomes a thing then this would just want to be changed to a String (suppose there'd be so many other breaking changes that it could just be worried about at that point). Anyway, thought of it when I saw the comment about \"metric types\".. So \"min\" is actually the min value for the Snapshot which is a sampling of values, see Snapshot here and then the particular sampling/snapshot used for Timers (at least by default) is the ExponentiallyDecayingReservoir here. So it's the min of the snapshot rather than an absolute min so it could go up overtime as the sample set changes. There are some different sampling patterns that can be used if you look for the different Snapshot implementations.. I'm not sure if there's documentation on this but for Metrics 3.x where the metric name is just a dot delimited string by default the JMX view won't have any hierarchy represented in the ObjectName (flat list domain + name). However, the ObjectNameFactory is pluggable on the JmxReporter here so you could add a custom object name factory that splits up the name and tries to introduce a hierarchy based on that using just autogenerated keys somewhat like you have there e.g.:\n\"my.metric.name\" --> \"L1=my,L2=metric,L3=name\"\nI'm not sure how this will end up working in Metrics 4.x but the naming pattern has a name + key/value pairs (tags) - can see this on master.. Yeah I think technically the key/value pairs in the ObjectName by the JMX spec say they're unordered it's just tools like VisualVM/JConsole respect their order to build out a hierarchy view. Also some other quirks like if you have a key called \"type\" VisualVM MBean view will always put that at the top of the hierarchy, guessing you just auto generated the \"key\" names though like the L1,L2 etc. example. The downside of this is while you get a nice hierarchy view in these tools your consuming client will need to know the naming scheme you used e.g. take the metric \"name\" and inject the \"L{n}\" key for each key/value in the hierarchy. Personally I've found JMX nice for realtime/casual browsing but preferred the pushed base reporting (Graphite, console etc.) for collecting the metrics externally. JMX is nice though in that it's a standard so a decent amount of tools will support it.. Replacing dots with a dash does seem like a bug here as Graphite uses dot delimited naming sequence for path segments (and changing these to slashes would break wildcard queries and such that are across the path segment, see render API note about wildcards/path segments here.\nI'm not sure which Graphite sender you're using but it looks like the sanitize method is protected so you can override it in the meantime if you're configuring the reporter directly.\nSide note but I also noticed the TCP based graphite sender wasn't actually updated to use this new sanitizer, see here. Going back to the change I think it came up because of other characters like apostrophes mentioned here - https://github.com/dropwizard/metrics/issues/637 - but yeah I don't think periods should be replaced.\n. Also the value gets sanitized the same way so I'm guessing that creates a problem for decimals here for instance :). @arteam to clarify my comment I think the present behavior released in 3.2 has a bug so this PR may be valid (or at least some sort of changes so dots in metric names do not get replaced with slashes). Specifically, this test case here is invalid. It should leave the periods alone e.g.:\nsoftly.assertThat(GraphiteSanitize.sanitize(\"Foo.bar.baz\", '-')).isEqualTo(\"Foo.bar.baz\"); \nI haven't tested this locally but the values (in addition to names) are getting sanitized too so:\n12.34 --> 12-34\nwhich would be bad. Basically dots/periods should be left alone as they're expected to be used in a metric name (in both metric conventions and graphite conventions). The only time it would make sense to sanitize a period would be if it was within one of the \"components\" of a metric name e.g.:\n// Generates a String foo.bar.baz\n// Debatable if it's really foo.bar-baz in Graphite land\nMetricRegistry.name(\"foo\", \"bar.baz\");\nHowever with the 3.x API in Metrics that cannot be detected (since a String is just being produced).\n. Can you clarify if you're using the metrics-spring library? I'm guessing you are based on the use of ReponseEntity/RequestParam - this main metrics repository only has interceptors for Jersey. As for the repeatable annotation, that isn't supported as Metrics 3.x is Java 6 based and repeatable annotations were introduced in Java 8.\nAs for making this work by separating the exception throwing into seperate methods this will most likely not work for Spring Metrics as Spring AoP will not be able to intercept method calls you're making from within the the class itself (see disclaimer in Spring Metrics readme \"A Note on the Limitations of Spring AOP\" - it mentions only public/externally called methods can be intercepted although I think in some cases protected methods can be intercepted too see here). Technically, you can use AspectJ with Spring to intercept private methods although not sure that works with metrics-spring. As a hack you could delegate the actual throwing of the exception to another class and mark those methods but would be pretty hacky.\nShort term I think you would just have to do the meter marking programmatically. Longer term maybe support for repeatable annotations for ExceptionMetered can be added (and the intercepting libraries updated to support this) in metrics 4 (which uses Java 8).\n. That works! I wasn't sure if you needed the exception counts to be sliced by the controller that caused them or not.. Not out of the box no but you can use the metrics as primitives to build out what you want e.g. create a new BatchTimer class (which encompasses a Metrics Timer and Meter) that allows you to do a start/stop call where you pass in the count.. I think you're referring to tags e.g.:\ncount;method=foo_bar_baz,some_other_tag=tag_value\nThis naming style is used in relatively newer timeseries databases such as InfluxDB, OpenTSDB and I think Prometheus (not that familiar with it). Metrics in its current state follows just String based naming or dot delimited similar to what is used in older timeseries database such as Graphite. On master tags were actually introduced via a MetricName here although I'm not sure this is going into 4.0 anymore (it would massively break the API at least). Related pull request https://github.com/dropwizard/metrics/pull/561 with more context.. See documentation here - by default rates are in seconds and durations are in nanoseconds. However, most of the reporters (the scheduled ones at least) allow you to convert these to whatever you want for reporting purposes e.g. maybe you want milliseconds for durations and minutes for rates. For instance see the graphite reporter configuration here which then leverages the base class ScheduledReporter that provides the logic for converting the values here.\nSide note but looking at the code I realized if for some reason you wanted to report rates in milliseconds this wouldn't work correctly (doubt anyone does this but for the conversion code to work the base unit needs to be the lowest possible unit, generally works because nanoseconds for duration is the lowest and for rate it would probably never make sense to report at a unit smaller than seconds).. Alternatively or additionally, double quote values that can potentially contain a comma. Can be fancy and just check the decimal formatter output on startup to see if it's going to generate comma producing values e.g. US locale wouldn't need double quote ever.. ",
    "amangup": "I can understand that for reservoirs other than Uniform Reservoir you would want to use the samples to make sure you use the mean for the same period as other metrics. But for Uniform Reservoir, calculation of exact mean should be done.\n. I know that Uniform Reservoir uses sampling. What it also says that the sampling is done for memory and speed reasons and the goal is to provide metrics as if all the data was present and weighted uniformly. For mean, this is achievable without sampling and without incurring any memory or speed cost.\n. ",
    "mrmanc": "I have just posted regarding a related proposed contribution on the Metrics User Google group, which would allow you to hook into the unaggregated metrics. https://groups.google.com/forum/#!topic/metrics-user/9KUEYJmMGRI\n. @JensRantil I think the forum is the recommended place for discussion\u2014I\u2019m not sure if people generally read / use the issues on here. I\u2019m guessing you would be interested in having a StatsD reporter? Or would you prefer to use Logstash?\n. @ryantenney Hi Ryan. Apologies for the mention but I\u2019m not sure if I should go ahead with this change having had no feed back on our forum post. If we went ahead with a PR for this change do you think it would get merged (bearing in mind the proposed change to the Metric interface)?\n. Thanks\u2014I thought so. Sounds very achievable with the plan we\u2019ve made.\n. @ryantenney Hi Ryan\u2026 no need to apologise! Really pleased to hear that it\u2019s definitely going to be in v4. We may well implement it ourselves for now then. I\u2019m not concerned about the PR getting merged, so long as we can be confident that the functionality will be in master at some point. But if we implement it we will certainly submit a PR in case it is useful :+1: \n. Wow, what are the chances! Good work\u2026\u00a0I guess it wasted a few hours of your time too\u2026 \ud83d\ude06 Also, great to see a new release out. It\u2019s inspired me to finally submit a PR!. Thanks for the comments!\nI have gone back and forth on the design of this change, trading off complexity in the design versus breaking existing code and felt that actually submitting something might lead to some good suggestions.\n\nAll third-party implementations of histograms, timers and counters will be broken by this change.\n\nI\u2019m not sure that third party implementations histograms, timers and counters would be broken unless you\u2019re referring to the change to MetricSupplier?\n\nAll client code which instantiates any metric directly through constructor will be broken.\n\nWhat do you think about retaining the previous constructors in a deprecated form? That way no client code would break, but measurements would be lost for code which wasn\u2019t updated.\n\nThe metric name must not be a private field of metric itself, because one metric can be added to multiple registers, and same metric can has different names in different registers.\n\nThat\u2019s interesting\u2014I wondered if there was an explicit design decision behind the name not existing on the metrics themselves and hadn\u2019t considered that. Our more complicated design for this change gets around having to add the name to the metrics by holding it on an intermediate object which acts as a listener on the metric. It\u2019s a layer of complication I wanted to avoid but could reintroduce to resolve that problem.\n\nAlso the problem of listeners can be easy solved by using decorator pattern, without adding unnecessary complicity to the core of library.\n\nAre you suggesting decorating the registry rather than changing any classes in the library itself? Following that approach, I could not see a way to obtain measurements emitted by third party client code. I believe a change to each implementation of Metric would still be required, although I believe that can be done without breaking any public API.. @clohfink \n\nWhy not just make a custom reporter that pushes the metric to the listeners? Then there wont be any broken apis and no changes needed in metrics core.\n\nUsing a reporter would send an aggregate of the measurements. This change is intended to make it possible to perform aggregation elsewhere so that it\u2019s not a double aggregation. For example, if we wanted the 99th percentile of a timer, we can either take an average of the 99th percentile across each node as sent by a reporter, or we can take the 99th percentile across all of the values. These can have significantly different results when measurements are not evenly balanced across nodes.\n@ryantenney I totally missed that you had since opened #822 until a few minutes ago. I hadn\u2019t seen any activity around this so thought I\u2019d contribute my thoughts. Thanks for the confirmation that it\u2019s still planned for v4.. @vladimir-bukhtoyarov \n\nThere are many open-source projects like Cassandra or Rabbitmq Java Driver uses Dropwizzard/Metrics for monitoring and makes own implementation of timers or histograms.\n\u2026\nAs result, there is only one way to provide own implementation would be subclassing already existed class from core. But subclass must call constructor of superclass and if already used constructor changes its signature then subclass will be broken.\n\nYep, I see that now, thanks for clarifying. Extracting interfaces from each of these implementations would also break downstream implementations but would be easier to resolve. Could you point me at those implementations you mentioned as I was unable to find them? The implementations I did find appeared to exist to alter the aggregation mechanism or to hook into the measurements. The latter case should be satisfied by providing a mechanism to hook into measurements.\nI think the first case highlights a problem with the current design. The identity of the metrics and mechanism to report a measurement is too closely coupled to the metrics aggregation. That reminds me of a comment made by @bentatham in #822 about making the current aggregations observers themselves.\nMetrics has become somewhat a de-facto standard around recording metrics, and I think that has been positive, encouraging more third party instrumentation of code with correct semantics around the type of events. I think I would love to see more separation between the interface (to register, retrieve and measure against metrics) and the rest of the functionality. This would allow people to make things \u2018metrics-compatible\u2019 without making any assumptions about what happens downstream.\n\nSo each client which uses this kind of third-party libraries will decline migration to new version of metrics-core until thirdparty library will be compatible with new versions of metrics-core, and this creates the risks of community splitting.\n\nSince 4.0 is going to be a breaking change as it is then third party library updates seem like they are going to be necessary anyway.\n\nThis solution help to preserve backward compatibility, but introduces the point of inconsistency. Your request is heavy concentrated on flow when MetricRegistry creates the new Metric instance, but there is another flow when Metric firstly instantiated in client code through constructor and then added to registry, and that is why specifying listeners at construction time is undesirable, because code which creates new metric potentially is very far from MetricsRegistry and knows nothing about listeners which can be applied on metric.\n\nAgreed. How would you feel about making the implementations mutable by adding an addMeasurementListener() method instead? Mutability is something I try to avoid.. ",
    "JensRantil": "@mrmanc I'm glad to hear someone else has an interest in this. It's also unfortunate that I haven't received a single response on this proposal.\n. > I\u2019m guessing you would be interested in having a StatsD reporter? Or would you prefer to use Logstash?\n@mrmanc Sorry for late answer -- I'd prefer to have a StatsD reporter.\n. I believe the default should be to sanitize. There are few worse things than missing a metric when debugging.\nOn Fri, Dec 19, 2014 at 5:46 AM, Tyler Tolley notifications@github.com\nwrote:\n\nSo do people think it would be better to remove the offending metrics or sanitize the names? Should we support both with an option to determine which? If so, what should the default be?\nReply to this email directly or view it on GitHub:\nhttps://github.com/dropwizard/metrics/issues/637#issuecomment-67598087\n. FYI, I just ran into a bug(?) triggered in Graphite when a metric had a parenthesis in it. Filename was /whisper_root/package/path(something)/1_mean.wsp. And I was plotting aliasByNode(package.*.1_mean, 1). We are now internally stripping all parenthesis.\n. @felixbarny Thanks! Do you have a reference for this list? As stated in the initial description, ' is broke my Graphite.\n. \n",
    "dagi": "Yes, they can. It has happened to me. A metric was throwing an exception.\n. There were mine metrics. Take a look on the following metric used for monitoring MongoDB collection's statistics.\n```\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport com.codahale.metrics.Gauge;\nimport com.mongodb.CommandResult;\nimport com.mongodb.DBCollection;\nclass MongoGauge implements Gauge {\n    private final MongoTemplate mongoTemplate;\n    private final String collectionName;\n    private final String statsAttribute;\nMongoGauge(MongoTemplate mongoTemplate, String collectionName, String statsAttribute) {\n    super();\n    this.mongoTemplate = mongoTemplate;\n    this.collectionName = collectionName;\n    this.statsAttribute = statsAttribute;\n}\n\n@Override\npublic Object getValue() {\n    DBCollection collection  = mongoTemplate.getCollection(collectionName);\n    CommandResult stats = collection.getStats();\n    return stats.get(statsAttribute);\n}\n\n}\n```\nThis metric expects MongoDB is running. For sure this is a bug in the metric's code, but such a bug would lead to breaking the scheduler thread. I think the framework should be immune against such kind of programmer's errors because they will happen for sure.\n. Ryan, a problem that the patch solves is when a metric author doesn't handle (for any reason) runtime exceptions which might occur. In such situation the scheduler's thread would be silently ended and graphite integration wouldn't work.  Once again, i think is better prevent such situation and catch + log uncaught metric exceptions at GraphiteReporter.\n. ",
    "blezek": "Don't merge, the tests need to be refactored... Sorry...\n-dan\n. @ryantenney, Ahh!  I have 3.0.1 for some reason.  I'll upgrade to the latest.\nThanks!\n. P.S.  the older version of Metrics came from Dropwizard 0.7.0. \n. ",
    "wimdeblauwe": "Bummer. Would have loved to see this supported as well. Our application is installed on customer servers (Which can be Windows or Linux by the way) so asking them to configure logrotate is a bit too much for this.\n. The drawback with using US locale is that Excel will not parse the CSV file correctly if your computer uses a Locale where , is used as a decimal point. You have to be careful to set the good options each time you import the CSV. I would also not escape by default, just in case comma is used as decimal point.\n. No, this is different. Any preference on how the sanitation should be done?\n. Great! Formatting should be ok now.\n. ",
    "sfosdal": "Yes.  Sorry about that.  I've fixed and will be issuing a new pull request.\n. I've been meaning to fix it up. I'll take care of it in the next few days\nOn Aug 6, 2014 11:22 AM, \"milletron\" notifications@github.com wrote:\n\nRan across this pull request looking for how to do exactly this --\ninforming me it's not supported at the moment. Would love to see this fixed\nup and merged for the next release! Just cheering it on.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/604#issuecomment-51359367.\n. OK I have until midnight tonight?\n\n-Steve\n\nSteve Fosdal | steve@fosdal.net | +1 608 347 0014\nOn Mon, Aug 25, 2014 at 3:10 PM, Ryan Tenney notifications@github.com\nwrote:\n\n@sfosdal https://github.com/sfosdal I need to perform a release this\nweek; if you want to see this feature merged before version 4 please fix\nthe failing build asap. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/604#issuecomment-53321233.\n. I am redoing this now.\n. I have issued another pull request for this feature (#635)\n. Yes.  Sorry about that.  I've fixed an issued a new pull request.\n\n\nSteve Fosdal | steve@fosdal.net | +1 608 347 0014\nOn Sun, Jun 22, 2014 at 5:35 PM, Justin Plock notifications@github.com\nwrote:\n\nIn metrics-core/src/main/java/com/codahale/metrics/Slf4jReporter.java:\n\n\nloggerHelper = new TraceLoggerHelper(logger);\nbreak;\ncase DEBUG:\nloggerHelper = new DebugLoggerHelper(logger);\nbreak;\ncase INFO:\nloggerHelper = new InfoLoggerHelper(logger);\nbreak;\ncase WARN:\nloggerHelper = new WarnLoggerHelper(logger);\nbreak;\ncase ERROR:\nloggerHelper = new ErrorLoggerHelper(logger);\nbreak;\n}\nloggerHelper = new DebugLoggerHelper(logger);\n\n\nIsn't this always going to be set to debug?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/603/files#r14057109.\n. \n",
    "milletron": "Ran across this pull request looking for how to do exactly this -- informing me it's not supported at the moment.  Would love to see this fixed up and merged for the next release!  Just cheering it on.\n. ",
    "jugglingcats": "Related, and more of a concrete feature request, it would be nice to be able to 'pause' the outer timer while the inner call is happening. We call out to a 3rd party and our SLA doesn't cover those calls, but we want to report and alert when our part of the process is outside our SLA. Perhaps methods like Timer.Context.pause() and Timer.Context.resume().\nAm learning some more looking at the code. I think it would be pretty easy to write a customer timer context that supports this feature. I also think SlidingTimeWindowReservoir would produce clearer metrics for us but note the performance penalty in using it.\n. We sometimes see a higher time reported for the same percentile (eg. 99th) for the inner call than in the outer call, for the same metrics dump. This seems counter intuitive -- but again is this something to expect due to the sampling approach?\nAm hoping to look some more at the pause/resume option shortly.\n. Thanks, my head hurts now but I understand the limitations better ;-)\n. ",
    "technocoreai": "This just adds a convenience constructor that immediately creates an InetSocketAddress instance and doesn't address any issues I've described, so please reopen the issue.\n. Right, but this issue is still unresolved. I can't reopen it on my own, should I submit a copy instead?\n. I'm not sure actually. We shutdown graphite on the old hosts when we have to migrate between servers, so persistent connections wouldn't be a problem for our deployment (they'd just reconnect to the new host after a few seconds), however it might affect someone else.\n. ",
    "tomcashman": "If we resolve at connect time should the persistent connection for #607 be optional?\n. I was using Eclipse's default formatter, fixed now.\nAlso it's strange the Travis CI is failing as the build passes on my machine. This is possibly a timing issue with the integration tests. Let me see if I can resolve this.\n. I fixed the build issue on Travis by changing the integration tests to use the Elasticsearch integration test classes (I was previously unaware of these) and added timeouts to the search queries.\nhttp://www.elasticsearch.org/guide/en/elasticsearch/reference/current/integration-tests.html\n. Should I squash everything into a single commit?\n. ",
    "dostiharise": "I think changing the link from: http://metrics.dropwizard.io/, to: http://metrics.codahale.com/ will solve the problem.\n. Oh, I thought it was the other way. Thanks for confirming.\n. Do yo guys need help? I can spare little of my time. \nLet me know!\n. ",
    "tomfitzhenry": "Workaround for clients: have two instances of HealthCheckRegistry:\n- one for quick tests, served at /healthcheck/quick\n- one for slow tests, served at /healthcheck/slow\n. Two years to the day... freaky.\n. For users that are happy to cede control over the execution of the health check run() methods, perhaps HealthCheckRegister#registerAsync(HealthCheck, int refreshFrequency, TimeUnit refreshFrequencyUnit, int int staleAge, TimeUnit staleAgeUnit) could be added, which managed an internal ScheduledExecutorService\n. ",
    "stockmaj": "The change for this introduced a dependency on JRE 1.7 (XXX in the date format string).  Nothing in the documentation says JRE 1.7 is required, is there any reason this can't be changed back to Z for backwards compatibility?. I can't tell from your answer if it's OK to change it or not. If 3.2 intentionally requires 1.7, I think it should say that in the Release Notes.  If not, this needs to be changed, one way or another.. @arteam When I looked at the history it looked like it came in on #609, but I do see it on #1077 also.  I don't use github a lot.  The reason I'm just asking and not submitting a pull is that I would have to do the pull from home, not from work.  If I'm going to do that, I'd like to work out the details ahead.. ",
    "arkigabor": "Sorry about this. This was an oversight from my side, it was meant to be Java 6 compatible.. Will there be another 3.2 release this could fit into?\nI'm thinking about looking into JMX health check as well ( #832 ) and this could be useful there too.. Yeah, I meant 3.x just for some reason wrote 3.2 instead. Rephrasing the question: do you plan any other minor releases before 4.0 or that is the only branch for feature PRs?. @davidkarlsen \nI'm still waiting for 4.0.1 making it to central too, although I think it can take up to a day for releases to appear there.. 4.0.1 is available in Central and this issue has been resolved. Thanks for the quick fix.. ",
    "vagupta": "Is there any timeframe for when the snapshot will be deployed? I appreciate your response, by the way!\n. ",
    "clamothe": "Is this ready?\n. ",
    "joe-devries-sp": "Have you seen this project?  https://github.com/plausiblelabs/metrics-cloudwatch\n. Related: https://github.com/dropwizard/metrics/issues/272 https://github.com/dropwizard/metrics/issues/248\n. ",
    "eshioji": "Oops, nope didn't see it. Sigh.\n. I can see the plausiblelabs one is more complete though. For example it adds proper \"Unit\" to the metrics where mine doesn't, and it reduces the number of metrics that is sent in order to save costs whereas mine just sends all of them etc. I could look at adding plausiblelabs code/feature.\n. Huh I don't know why I didn't find it. I think it's definitely worth adding one of the implementations to the main repo given how popular AWS and CloudWatch is.\n. ",
    "uriahcarpenter": "When I needed CloudWatch reporting I used this repo https://github.com/blacklocus/metrics-cloudwatch\nI haven't had any issues with it in production for several months, and it supports a CloudWatch Dimensions naming convention.\n. ",
    "jack-kerouac": "Sure. Keep up the good work on this project.\n. ",
    "schauder": "I'd consider doing a pull request ... would you prefer a hard code variant, where one has to use the matching ehcache version, possibly with different metrics-ehcache artefacts. \nOr something that in configurable/autodetects the ehcache version in use? \n. ",
    "nakedpony": "I just want to be able to send numbers with more than two digits after floating point. Basically more precise numbers.\n. up :)\n. ",
    "Turbo87": "same issue for the 3.1.0 release too... \n. @ryantenney please have a look at #653, which is hopefully a step to make this happen less often\n. @ryantenney any news on this issue?!\n. @dropwizard @ryantenney is this ever going to get fixed?!\n. @ryantenney it seems that you may have missed the include directive in the docs folder. the generated docs will stay exactly the same as before.\n(see https://github.com/dropwizard/metrics/pull/653/files#diff-ecd70c403940202d2ab0fdb0450d6986R1)\n. ",
    "mcgois": "Hi. Why haven't you accepted the JPA health check? Have I implemented it wrong or is a architectural decision. Thanks.\n. Ok. Thanks anyway....\n. ",
    "volker": "You are welcome. Thank you for your work on metrics!\n. ",
    "jgangemi": "awesome! is there a rough eta on when 3.1.0 will be released?\n. also - is the snapshot in some other repo then nexus b/c it fails to download and when i browse the repo via the web, i don't even see the 'metrics' directory under 'com/codahale'.\n. ahh - that's the problem, this is what i currently have as a dependency:\n<dependency>\n      <groupId>com.codahale.metrics</groupId>\n      <artifactId>metrics-core</artifactId>\n      <version>3.0.2</version>\n    </dependency>\ni was unaware the group id changed.\nthanks!!\np.s. will io.dropwizard.metrics be the package id going forward for releases as well or does it switch back to com.codahale.metrics?\n. why not just remove the 'final' modifier? if someone overrides the implementation and causes things to break, it's on them for doing something stupid.\n. no - i get that - @ryantenney should have final say.\ni've just been having a lot of conversations w/ ppl over this topic as of late and the general consensus has been it's better to leave 'final' off if there is no interface that can be mocked and just add some javadoc as to why it is that way and if someone shoots themselves in the foot, shame on them for not following directions.\n. basically i want to time how long something is taking and see how much elapsed time has passed when the metric is logged/viewed in jmx, etc.\nthis new metric would record 'System.currentTimeMillis()' when 'start' is called and each time the metric is reported, it would just report 'System.currentTimeMillis() - start', reporting how much time has currently passed. when 'stop/close' is called, the metric would capture 'System.currentTimeMillis()' again and any future reporting of that metric would just report 'end - start'\nthe current Timer implementation doesn't work for me in this case b/c no time is reported until 'stop/close' is called on the Timer context, there is no way to see how much time has passed until the job has completed.\ni imagine i could accomplish this on my own via a Gauge implementation, but am asking for it in this manner b/c others may find this useful as well.\nthat help?\n. would you accept a gauge implementation of this to the project as a pull request? i don't need it to be specifically based on a timer implementation, i was just using that as a reference point.\nasking b/c i could use something like this in multiple unrelated projects which means cut and paste otherwise i guess i could make a separate 'metrics-extra' package and just maintain it there.\n. this is fixed in 3.1.0, see: https://github.com/dropwizard/metrics/pull/432\n. thank you for that clarification!\n. :+1: for continued jmx support.\nit's used heavily at the day job and i find it extremely useful for random side projects.\n. +1 for this in some form\n. any eta on when this will be available in a release?\n. +1 for this or something like it. i would find this useful as well.\n. may i ask why the cpu profiling support change got reverted? i was looking forward to using that.. thanks for the clarification!!. ",
    "martin-g": "the package id is: io.dropwizard.metrics\nbut it is not allowed to deploy snapshots to Maven central.\nI guess it is deployed to Sonatype OSS snapshots.\n. https://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/metrics/\n. whitespace police\n. ",
    "thattolleyguy": "Is there any status on the desired requirements of this issue? I'd love to help out, I'm just not sure what steps to take.\n. So do people think it would be better to remove the offending metrics or sanitize the names? Should we support both with an option to determine which? If so, what should the default be?\n. How is this different than a counter besides that it's non decreasing?\n. ",
    "nickbabcock": "With #936 merged, should this be closed?\n. Why the trailing . at the end of the regex, which makes it different than the regex in https://github.com/dropwizard/metrics/issues/637#issuecomment-63964756? Your solution won't change foo@bar.com (the period is significant to graphite!). Dropping the period from the regex will change the previous example to foo@bar-com\n. With #936 merged, should this be closed?\n. Does longPeriodsOfInactivityShouldNotCorruptSamplingState test not cover this concern? \n. Yup, it was reverted because it broke everything \ud83d\ude04 \nThings may be different now, and it may now be possible to sanitize individual portions of a metric name -- but I haven't checked.. (Original feature implementer here): Oof, that does seem like a pretty bad bug!\nMy intent was for the sanitize feature to be used on individual parts of a named metric. Akin to:\njava\nMetricRegistry.name(\"A\", \"B\", sanitize(\"St. Foo's of Bar\"))\nThis is especially important with IPs/hosts:\njava\nMetricRegistry.name(\"A\", \"B\", sanitize(\"127.0.0.1\"))\nOne would expect: \"A.B.127-0-0-1\"\nEDIT: Maybe bring back the whitespace remover from here and allow user to GraphiteSanitize#sanitize for individual metric names.\nEDIT: This looks to affect all graphite metrics except those transmitted over TCP. I feel like we should keep the ability to create metric names that don't crash graphite or else issues like #637 becomes relevant again. IMO, rollback the behavior but expose GraphiteSanitize#sanitize so that users can create metric names that won't crash graphite.. But the issue is that the Graphite senders do not see the individual named parts of a metric, only the whole name, so the problem remains. Ideally one would sanitize the individual parts like I showed in #1098. I thought it would be convenient to have the code in the base metric library because anyone who is using graphite and may have metrics remotely based on user input should be sanitizing them.. Yeah and that was the right decision. I'll kick around a PR for users to opt into an individual name graphite sanitizer \ud83d\ude04 . ",
    "dprime": "Aha, cheers!\n. ",
    "tkowalcz": "Hi,\nthis is something we ran into recently. I see that you do not want to handle exceptions from metric classes, but currently this exception will not be reported anywhere and GraphiteReporter will silently stop sending metrics.\nAre you going to merge this change or at least log the exception?\n. ",
    "dbaggott": "@tkowalcz (and future readers), it's worth noting that the unpleasant \"all reporters silently die in the face of any runtime exception\" bug present in version 3.0.2 has been addressed in version 3.1.0 and onward.\nScheduledReporter.start() now correctly handles any exception that bubbles up to it: the exception will be logged and subsequent reporting events are not suppressed.\nSo, as the code currently stands, a RuntimeException from a custom Gauge (or any other Metric) will break reporting for that cycle but reporting will continue to be attempted on the regular schedule.  More importantly, a clear error will be logged which should help people understand what's going on quickly.  Thank you to whoever made that change!\nIf the Metric runtime exception is intermittent, you'll still get data for reporting cycles where the exception doesn't happen.\nAll of that being said, @ryantenney, I love the Metrics library but I have to say there's really not a lot of great choices for developers in this scenario and I think there's a pretty reasonable case to be made that the library should support handling RuntimeExceptions from Metrics.  Consider this interface:\njava\npublic interface Gauge<T> extends Metric {\n    T getValue();\n}\nFor example, let's say it's a Gauge<Integer> that reports on the number of \"some undesirable event\" and your code encounters an exception, what's the correct return value?\nYou definitely don't want to return 0 and risk falsely representing that there are no such events.  Nor do you want to return some \"magic\" number like Integer.MAX_VALUE as its misleading and, in that example, blows out the y-axis on any downstream graphs.  A \"magic\" number like -1 is a little better but it's still problematic since it can appear awfully close to 0 on a graph.  In short, in order to not obscure downstream graphs by blowing out the axis, your \"magic\" number would have to be tuned to the range of the actual data!  It just not a workable solution.\nAs the Metrics library code currently stands, returning null is the only thing to do if you don't want to create a magic error value for your Gauge.  Like I said, not a lot of good choices here!  The worst of it is that you're forced to rely on undocumented behavior of the Metrics library that it handles nulls (the GraphiteReporter does and Dropwizard's /metrics do but I have no idea how other reporters behave).  It's just not a great situation to have to report an exceptional condition with a null nor is it, in my opinion, reasonable or desirable to actually require all consumers of the data to do null checks.\nHonestly, throwing a  RuntimeException from the Gauge strikes me as the \"right\" thing to do as (given the API) this level of the code isn't actually equipped to know how to handle the exceptional condition.\nFinally, I'll add that the serializer that renders Gauges for Dropwizard's /metrics API explicitly handles RuntimeExceptions.\nThoughts?\n. ",
    "JakePi3": "I'm seeing some flakiness with the code in question.  Getting an exception deep within the Jackson serialization to JSON and it's not bubbling up at all.  The thread is dying silently.  I'm using 3.1.2.\nTwo things to think about:\nExecutorService returns a Future which captures the exception and does not actually bubble up until .get() is called on the Future - at which point it throws an ExecutionException.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html#get()\n~~Assuming ScheduledExecutorService functions in the same way.~~\nEdit: The future returned from ScheduledExecutorService only throws an exception if the job is cancelled.\nSecondly, it may not be enough to capture RuntimeException. This is one of those rare cases where you want to catch on Throwable.  Otherwise any Error thrown will kill the thread silently.\nAfter a bit more investigation, I found the underlying problem: a mismatch in versions for jackson-core and jackson-databind.  The exception thrown (not a RuntimeException?) is not caught and the thread dies silently.\n. ",
    "mcucchiara": "Unfortunately we're using 2.2.0 and, at this stage, migrating to 3.x is not an easy option for us.\nWould it be ok applying the same change to 2.2.x and release a patched version?\nPlease let me know, happy to submit a PR\n. ",
    "noslowerdna": "@mcucchiara For 2.2.x we simply forked the filter class into our code with the bug fix, configuring our service to use that copy instead. Link to sample code.\n. ",
    "srvaroa": "@ryankennedy @jplock I rebased this, let me know if it needs any changes.\n. Oops sorry, naughty autocomplete! :)\n. Thx for taking a look @jplock, done.\n. ",
    "sergeyevstifeev": "Sounds fair to have it separate to not overcomplicate the library.\nWe have not figured out what is causing this as this server is managed by a different team. The guess is that it's caused by small accessibility outages for some parts of the network when reconfiguration is done. Not ideal, yes.\n. ",
    "cgoudie": "Ah! Thanks @ryantenney! I missed that detail.\n. ",
    "Jukkorsis": "+1\n. I originally considered creating a new Timer-like class that captured concurrence metrics, either like the Histogram or using a Histogram. Then users could use the simple/current Timer or a new advanced Timer. However I turn away from that idea for a few reasons:\n1. I could not come up with a simple name for such a class\n2. I did not think the library in general needed a Timer class and an \"AdvanceTimer\" class\n3. A lot of what a Histogram offers I did not really need\nSo I decided that simple was better and my solution does not add much overhead.\nI did consider not having the \"max concurrent\" metric, as I can get that information from Graphite the metrics repository I use. So I would consider removing \"max concurrent\" to reduce the \"overhead\" if that was a issue.\n. ",
    "trangn": "+1. This a useful feature. One might consider combining the list of filters into a single list (List) to the constructor of GraphiteReporter but would require some refactoring to bring MetricFilter and MetricValueFilter under the same interface hierarchy.\n. ",
    "plainswept": "+1\n. ",
    "mmyo": "+1\n. ",
    "williamstw": "At risk of stating the obvious, this would be incredibly useful for all reporters (e.g. Ganglia) as well.\n. ",
    "pparth": "+1\n. Anything new on that?\n. +1. Dimensions would be a very useful addition especially when using metrics for operational insight.\n. ",
    "osigida": "Hi Ryan,\nPlease take a look if it is fine now.\n. @daluu, if health-check fails, the app should not be used, as it could not serve response properly.\nexample: connection to db, if it does not work, then it has no sense to try to use the app, it is broken.\nSo if you have multiple health-checks in the app and some of them fails but some not and it is still has some sense to call the app, then I think you have overloaded micro-services and it should be split into smaller services. \nOr health-check was implemented wrongly and it is not really critical and should be excluded from health-check cycle.\n. @ryantenney I was trying to hack and manage some tests, but the way how the code is organised it is impossible... havy refactoring for health-check servlet is required.\n. @ingwarsw maybe if you can come up with any kind of unit test? \nwe miserably failed to find any way to unit-test this feature.\n. @ingwarsw, right \nthere are 2 ways to query it \n/healthcheck to query all registered health checks or\n/healthcheck/name_of_healthcheck to query one of them, example: /healthcheck/deadlocks\n. the PR is recreated on top of 3.2-development branch \nsee https://github.com/dropwizard/metrics/pull/940\n. I guess CORS headers should be managed differently, something like described here\nhttp://jitterted.co.technology/tidbits/2014/04/04/handling-cors-in-dropwizard-and-jetty/. @karlr42 good to know that it worked for you! \nI'm not sure why it was introduced... as main idea is to remove such a functionality form general endpoints (like metrics, swagger, etc) and handle it on the application level, where you can manage it based on your specific requirements. . @steve-oakey a stack trace would help... . see http://metrics.dropwizard.io/3.2.2/manual/third-party.html\nmetrics-influxdb provides a reporter which announces measurements to InfluxDB . yep, please have a look again\n. ",
    "manikantag": "+100 for additional data.\nIn our case, we've multiple AD servers, which user can configure. So, our ADHealthCheckService will return single Result object, but with all AD server's status.\nWe can't extend as the Result class constructor is private and I've written my own equivalent classes for HealthCheck. Basically, I m not able to use the metric's HealthCheck classes. \n. By making Result constructor public, doors will be open for extensions.\n. Thanks. When can we expect v4?\n. ",
    "tomaszalusky": "My +1 for extending Result. It would be handy for reporting more data or producing precise hints.\nFor instance: monitoring free space on drive, Result could report (1) how much free space is actually available, (2) how much space is enough to release to make probe healthy.\n. ",
    "JonMR": "I'd also like to see this happen.  I'd be open to creating a PR as well.\nIn our case, the two states of healthy and unhealthy aren't enough.  For us, unhealthy means drop the service from the pool.  I'd like a third state that indicates there's an issue but the service is still able to handle traffic.\nSpecific example: We have a pool of memcache servers that the service talks to.  If it loses connectivity with one of those servers, it's not a big deal, but something to be alerted and investigated.\nWe could write a parser for the output, but I'd rather not have to do that for each case.\n. ",
    "marcvanandel": "+1 yes, please! It would be great if we can add addition (JSON) serializable objects to the Result to expose extra details. This would especially be great for a single check on multiple objects.\n. ",
    "arnaud-deprez": "+1 too ! :-)\n. I think it would be possible to allow custom details by adding a Map as spring-boot-actuator does without breaking the API.\nLike that, we wouldn't be forced to wait for version 4.0.0.\nWhat do you think ?\n. Okay, I'll take a look asap. Keep in touch.\nSo 3.2 is in master ?\n. So if I get it right, master is for 4.0.0.\nI suppose I need to base my code on 3.1-maintenance and make a pull request on a new branch. Correct ?\n. I've made a couple of comments too where I need your suggestion/decision for changes you request. Please keep me in touch, I'm open for each changes.\nI'll rebase my changes to 3.2 and make a new pull-request.\nRegards\n. I propose to continue the discussion here: #943 \n. @ryantenney I propose to continue the discussion here.\n. @ryantenney here is the new commit with your requested changes.\nRgds\n. I think so but still waiting for that and the upcoming release\n. Thank you, you're welcome !\n. Not sure what is the goal to have null in default ? \nIf you take a look in the HealthCheckModule, I only serialize details when it's not empty.\nBut if you insist, I can put it to null by default\n. I can do that for unhealthy but not for healthy as it has already a method call healthy(). But I agree, I'm not a big fan of this method name so I'm open to suggestion\n. The idea was to use the same Builder everywhere but and have only one single constructor which takes the builder as parameter. I think it give us more scalability and a better encapsulation. For example if we would like to add a new specific field, we can do it and add a default value in the builder. So if you don't use it, it will have the default value without the need to change this code.\n. I use the same name as spring does in its module spring-actuator, I'm not closed to it. What do you prefer: details ? attributes ? properties ? Then I can adapt the method to be add* instead of with*\n. Yeah I see your point but my goal here was to avoid NPE exception for the end user. I'll change that too.\n. That's definitely a better idea ! I propose to use builder and then an healthy(), unhealthy() and unhealthy(Throwable error) in the builder. Like that the api avoid you to have an healthy builder with an exception.\n. Ok fine, I'll change it.\n. ok :)\n. ",
    "zaphinath": "+1\n. ",
    "dhay": "Our use case is this:  We use the health check framework to inform our on-call alerting.  As is, we basically have two states: UP or DOWN.  We wanted a third state, WARN, to indicate a problem with our application, but not worthy of waking someone up in the middle of the night.\nSo being able to have additional HealthCheck result types would be very helpful.\n. ",
    "cdeszaq": "This looks like changes for this was merged into 3.2.0 in https://github.com/dropwizard/metrics/pull/943, so is this issue complete?. ",
    "qinfchen": "Oops, this issue should be filed against dropwizard/dropwizard, not dropwizard/metrics\n. ",
    "v-garki": "It is calling close, but inside close a flush is called first which throws an exception due to the socket. This prevents closing the socket.\n. That could work too although I'm thinking of something different:\ntry {\n    if (writer != null) {\n        writer.close();\n    }\n} catch (IOException e) {\n    if (socket != null) {\n        socket.close();\n    }\n} finally {\n    writer = null;\n    socket = null;\n}\nClosing the writer is flushing data and closing all wrapped resources including the Socket. If this is successful there is nothing else to do. If this fails we can try to close the socket itself. Assigning the null values in a finally ensures we can start clean in the next round.\n. Indeed, this is the same issue we experienced and reported in #669. Until 3.1.1 is released a possible workaround is to use a modified Graphite class which contains the fix like we did.\n. ",
    "adamdecaf": "For what it's worth we're running into issues with keeping connections open. Mainly that we're having to mess around with timeouts to keep idle connections open (and running out of connections available). So we've forked this and reverted the changes to keep connections open and are testing them internally. \nThat being said there's been an issue about this open for some time now and our PR with the reverts. Would those PR's be accepted if we can show that persistent connections to graphite aren't really needed for most use cases?\n. Would a patch be accepted that copied over the updated improvements from some of the updated source?  http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/ThreadLocalRandom.java?view=markup\n. Hey all, just wanted to say we've forked this repo and back ported the fix (diff) (it wont work on java6) from @DustinChaloupka (#757) over under banno/metrics. \n. @philippe-tr The fix was already committed to dropwizard/master. So everyone is free to cherry-pick that off. The rest of the changes were just to get the versions correct when packaging the jar. \n. @philippe-tr yea, I didn't want to deal with that, and we have an internal repository we use. \n. We're still running our fork of this library. Has there been much development on this project? \n. We're still on the fork I've mentioned previously on this. . @arteam That's fantastic news! I assume there be a 3.1.x release to look forward to then? . ",
    "theigl": "I just ran into this as well and also solved it by creating my own naming strategy.. ",
    "OrangeDog": "Is fixed in 3.2.. ",
    "solidjb": "If the idea seems viable, I or one of my co-workers would be happy to flesh this out and contribute it.\n. ",
    "ollis": "Hi, Jetty now (9.4.8.v20171121) only supports a wrapper around ThreadPoolExecutor, ExecutorSizedThreadPool. ExecutorThreadPool that wraps an ExecutorService is deprecated. So it would be great if metrics could provide an instrumented ThreadPoolExecutor. ",
    "pkwarren": "Sent PR #682.\n. ",
    "ghost": "I have the patch ready. I will submit the patch soon.\n. Hey Ryan,\nI have submitted a pull request. I think spark uses coda hale library for monitoring. We use spark but right now we don't have a way to send metrics over socket. Can i know the reason why you closed this issue ?\n. Oh, ok. \n. Can somebody take a look please?\n. When will be 3.2 or 4.0 release coming up ? I was wondering if the code was reviewed/merged into codahale, then a release is made, I can easily change Apache Spark pom.xml to point to the new version and get the changes in.\n. I have something on Apache Spark side too, which depends on this feature in codahale. \n. Using dropwizard 3.1.0(core) with Jdk7 and jboss8. Observing threadlocal related memory issues....any fix to overcome this?\n. How to use Java7's ThreadLocalRandom to avoid Thread local related issues? \n. Thanks. Since, it is manual, I thought there might be another way/version which I can use. Will check this. Another query, As you were mentioning in previous post, Do we need explicit cleanup of threadlocals in filters/listener to overcome this issue completely?\n. +1. Is this issue still active? I'm currently facing the same issue. Or maybe, if you could provide a way of extending CsvReporter so I can override sanitize() myself?. Perfect! Thank you. :-). ",
    "RichMacDonald": "Agreed. Or simply create a Context interface. A trivial change that goes a long way and avoids the hacking some of us currently do. For example:\nUsing the Timer.Context causes garbage collected instances. Unacceptable in tight loops. If we had a public interface, we could use a pool.. ",
    "aldenquimby": "What is the status of this pull request? I would like to expose health checks via JMX and this PR seems like the first step towards that.\n. ",
    "jsyrjala": "Related code is below. Seems that close() on socket fails, and then the reconnect logic doesn't notice that reconnection should be made.\nGraphiteReporter.java:\n``` java\n    @Override\n    public void report(SortedMap gauges,\n                       SortedMap counters,\n                       SortedMap histograms,\n                       SortedMap meters,\n                       SortedMap timers) {\n        final long timestamp = clock.getTime() / 1000;\n    // oh it'd be lovely to use Java 7 here\n    try {\n        if (!graphite.isConnected()) {\n              graphite.connect();\n        }\n\n        for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n            reportGauge(entry.getKey(), entry.getValue(), timestamp);\n        }\n\n        for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n            reportCounter(entry.getKey(), entry.getValue(), timestamp);\n        }\n\n        for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n            reportHistogram(entry.getKey(), entry.getValue(), timestamp);\n        }\n\n        for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n            reportMetered(entry.getKey(), entry.getValue(), timestamp);\n        }\n\n        for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n            reportTimer(entry.getKey(), entry.getValue(), timestamp);\n        }\n\n        graphite.flush();\n    } catch (IOException e) {\n        LOGGER.warn(\"Unable to report to Graphite\", graphite, e);\n        try {\n            graphite.close();\n        } catch (IOException e1) {\n            LOGGER.warn(\"Error closing Graphite\", graphite, e);\n        }\n    }\n}\n\n``\n```\n. #675 and #669 may be related or the same issue.\n. ",
    "posto": "@ryantenney, any plans to release 3.1.1 ? I'd love to upgrade from 3.0 to 3.1, without the risk of loosing metric data :)\n. ",
    "mfoo": "+1 on a release of this fix. Is there any ETA?\nIn the meantime, is it feasible to roll back to 3.0.2 as suggested by @velvia without losing important changes? I don't see a changelog anywhere.\n. ",
    "jwhitlark": "+1 on 3.1.1 release.  Any timeline?  This is causing us issues in production...\n. ",
    "AlexeyZalivko": "+1. When it will be fixed??? Guys do this simple fix - make us happier\n. ",
    "jshook": "@ryantenney \nCan you clarify what 'very soon' means, from \"Closed as fixed in #669, and 3.1.1 will be out very soon.\"\n. @ryantenney Can you re-open this issue? As it is, I can not add dependencies to this project/version from mine. It is just broken for graphite use. 3.1.1 has not seen the light of day, and 4.0 may not be here for awhile yet.\n. ",
    "twillouer": "any idea if this can interess you ?\n. ",
    "McPringle": "Meanwhile Java 7 is EOL since more than a year, so focusing on Java 8 and using default methods in interfaces should be the preferred way (in my opinion).\n. I would not recommend returning a 503 if you are not 100% sure that the check is not failed because of an internal server error. But you could simply extend the servlet and overwrite the doGet method:\npublic class MyHealthCheckServlet extends HealthCheckServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doGet(req, resp);\n        if (resp.getStatus() == HttpServletResponse.SC_INTERNAL_SERVER_ERROR) {\n            resp.setStatus(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n        }\n    }\n}\n. ",
    "taer": "Used wrong account\n. Didn't realize this would merge other changes into one Pull Request. I can split these two up if you'd like\n. Closing this. Submitting JMX change against master\n. Build fail seems to be transient. Only 1 of the 2 failed\n. ",
    "john-f-xoom": "Whoops, I apologize for the noise.  Thank you for the help!\n. ",
    "rafal-glowinski": "Hi Marshall,\nThanks for the time you have taken to post about this feature request. \nThe way I think it should be done is to have the Reservoir definition as close to the @Timed annotation as only possible. So when someone reads the code it is obvious how given metric is going to be gathered.\nI have received one email from Ryan and he said he was going to think about putting all these extra properties directly in the @Timed annotation. Maybe he would think of something I haven't thought about yet.\nYour idea - with the extra factory - would be good as well, assuming we would like to externalize such properties like time window size / unit. Putting these properties directly on @Timed would obviously require them to be compile time constants...\nHave you - guys behind entire metrics project - though about such customization before?\nCheers!\n. ",
    "pszymczyk": "Ok, I will try to develop it without additional dependencies,\n. I prepared some very simple solution based on LinkedList, what do you think about it?\n. ",
    "TheTweak": "Ok, I would port this part and open PR, thanks!\n. @ryantenney could you check PR please?\n. ",
    "zayim": "I am aware of that, but my use case (and I believe there are others which would find this use case useful) is that it should not start at 0, but at current value, if metrics already exists. If I have some counter and I restart my application (which means GraphiteReporter will stop and start again after restarting), I am losing previous counter value. I would like to have counter that does not depend on restarting application. However, this would be only useful in some cases, so I think it would be OK to choose whether counter would start at 0, or at its current value, when you 'create' it.\nIf you do not think it is worth implementing that, it is OK, it is just my opinion that this feature would be useful in many cases.\nThanks for response.\n. ",
    "xnejp03": "Yeah, something like this would be useful. We lose counters on the app redeploy, which can happen pretty often in a CI work flow. Keeping it on the current value would be really nice.\n. ",
    "saveveltri": "I agree with @xnejp03 and @zayim  . It would be nice to have \"stateful\" counters, not only for GraphiteReporter but also for CsvReporter for instance\n. ",
    "stevehu": "This issue has been opened for a while and it is still not resolved for it is not easy. I have similar requirement to reset counter during server startup so that my counter won't be lost during server start/stop. My understanding is graphite is a socket you can write into and you cannot query against it. In order to get the current counter, you have to query the influxdb (assuming your are using it) to get the current counter. I am wondering if someone has done something similar or I will start to explore it.\n. ",
    "jelgh": "@ryantenney Alright, makes sense. \nBut is it possible to set different rate units for different Meters and Timers for the same Reporter? Or are you supposed to create multiple Reporters, one for each rate unit (which means that I need multiple MetricRegistrys, one for each rate unit)? \n. A friendly ping @ryantenney \nHow do I do to set per-metric specific rate units?\n. ",
    "areddy7021": "Hi @jelgh and @ryantenney , i am facing the issue with the rate counts showing exponential values and my dashboard is getting broken while displaying metrics since it is accepting only integer not alpha numeric ..my rate count shows like this : \n\"m15_rate\" : 4.940272981828092E-9,\n      \"m1_rate\" : 3.825709570901439E-96,\n      \"m5_rate\" : 3.6172986715354425E-21,\n      \"mean_rate\" : 2.7286933704633276E-4,\nAny suggestions ..how can i parse the above string ?\nThanks,\nAkhil.\n. I am using Logic Monitor widgets..how can i pass on to that with this parsing value ?\n. There is no way of doing any customization on these values to represent the exact value ? I have seen this code is embedded in metrics servlet and some thing i can not handle that part. and the interesting thing i found is probably LM is parsing the value but value seems to be very close to zero so thats the reason the graph it self is not spiking and always its giving zero.\n. thank you @ryantenney ..so you mean writing my custom reporter and metrics servlet and using that. i got it.\n. @ryantenney : i have another scenario where i am really having hard time to figure out the best solution : I am monitoring one of the  nosql data stores by inserting and querying some of the requests to the cassandra ring. i have to show the inconsistencies occured and errors occured while doing that ..so the issue is the count keeps on going high in the widget where jmx property of count is really keeping that value even if one inconsistency occurs : for example : at some point of time there is one inconcistency and later the other inconsitency came up and now the value through jmx mbean count is 2 since the graph in LM always goes on to increase mode rather than spiking. so that means i have to reset the value to zero immediately after the inconsistency happened...instead i should not keep on adding to the inconsistent mbean value.so whenever the inconsistency occurs ..it should spike other than it should default to zero or any min value. for this type of change where do i really need to reset the mbean count for every event which i trigger ?\n. ",
    "netalpha": "@slovdahl  Yes, I like your code. For my case, I want to know what the elapsed time to process the requests per second. The raw codes only tell you the statistical time to process all the requests.\n. ",
    "mchaabouni": "@slovdahl is this going to be merged with master and pushed to Maven Central?\n. ",
    "pstibrany": "I would also be interested in this. The reason is that I'm exporting metrics to Prometheus, and I'd like to export timers as \"summary\". For summary, Prometheus expects \"sum\", \"count\" and quantile values (see http://prometheus.io/docs/instrumenting/exposition_formats/). Timer already gives me count and percentiles, but not total sum.\n. ",
    "hashbrowncipher": "@slovdahl, I have taken the liberty of PRing your changes in #1022, and wanted to make extra certain you were notified.. ",
    "mevdschee": "I would (also) love to see a sum of all the values.. next to the count.. . We also require the sum of the duration to be exposed. Let me explain our use case: We are using DropWizard Metrics exposed by FastJMX, loaded via CollectD, stored into InfluxDB, graphed by Grafana. This setup is working wonders for us as it allows to graph the usage of API calls. \nTime series databases execute the derivative function over monotonous increasing counters. \"Count\" is such a value and it is useful to us as it allows us to see what calls are often executed. \"Sum\" is another value that would allow to see how much time was spent executing the specific function, which is (even more) important for performance analysis. We can already look at the gauge values of mean and 95th that are very important to us when deep diving into the performance of a specific API call. \nFor the overview of most impacting calls we do need the \"Sum\" though as InfluxDB cannot multiply the Mean with the Count as they are reported as separate values in a time series database (which has no full SQL capability).\nIt would be great if you could merge this PR (I can add the sum to other reporters if that is keeping you from merging).. @qualidafial maybe mevdschee/tqdev-metrics works for you? I wrote it with this different strategy/approach towards metrics in mind. Maybe you like it. I would love to hear your feedback!. >192 year of accumulated latency then overflow will happen\nI'm not sure I see the issue. You need to run with many cores on a very popular task to have this duration exceed 192 years. And even if this happens, would it cause a problem? When using monotonous increasing counters you will miss just a single measurement.. >the results is totally unpredictable when overflow happen.\nTrue, but can't we still say we miss one measurement on average per 192 year of duration data?. ",
    "tempredirect": "Any chance somebody can have a quick look at this please?\n. Have rebased this request against master.\n. Hi, anybody fancy having a look at this??\n. Great work, thank you for doing this.. ",
    "uwemaurer": "I can confirm that InstrumentedHandler is currently not working with async servlets and this change fixes it.\nI suggest to merge this fix.\nThis will also solve #914 \n. ",
    "jonathanmgrimm": "Can also confirm this fixes the same problem as others are seeing. EDIT - this definitely causes a reasonable number to be reported but I'm not sure if it is the right one.  The metric reported does not seem to be the same as that coming from the Jetty request log.  In my environment, over an hour window the average response latency from the Jetty request log is 287 ms, but the metric reported with this fix is more like 140ms.\n. ",
    "mziemba": "I have the same issue, are there any plans on merging this PR?\n. I have the same issue using Spring Boot 1.3.5.RELEASE with Jetty 9.2.16.v20160414 and Metrics 3.1.2.\nA sample application that illustrates the issue can be found here\n. ",
    "dankraw": "I've realized that the issue is not related to UDP protocol. I will close this PR, exclude UDP client changes and create a new PR.\n. Any updates on a possible merge? :)\n. Thanks for the reply. I'll try to find some Java6-compatible solution.\n. Ryan, are you sure the Java6 support requirement is still valid? \nI've just noticed core's:\nhttps://github.com/dropwizard/metrics/blob/master/metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java#L5\nusing Java 7's java.util.concurrent.ThreadLocalRandom;\n. This PR is for master. :)\n. @danielcompton done, thanks :)\n. ",
    "danielcompton": "@dankraw would you be able to rebase this so it could be merged?\n. Was this merged anywhere @ryantenney? Why was it closed?\n. ",
    "skamille": "+1 lgtm\n. +1 lgtm\n. I am slightly confused as to why we aren't using standard  junit assertions where we can... \n. ",
    "chrishantha": "Please avoid using tabs. Use 4 spaces for indentation\n. ",
    "jdubois": "Great job!\n. ",
    "JulienChampseix": "yes :+1: \n. ",
    "raskasa": "Now that the metrics-influxdb module has been added, will the third-party implementation be removed from the third-party listing?\nSEE: http://metrics.dropwizard.io/3.1.0/manual/third-party/\n. Also, are you interested in organizing this list?  For example, alphabetically or into categories (i.e. reporters, API wrappers for other languages, etc.).\n. 1. Should we remove metrics-influxdb now that there is a first-class module available?\n2. There are currently two histogram entries - which one should be deleted?\n3. Are camel-metrics and MetricsCatcher under the correct sections?\n4. In general, is this organization good enough?  (i.e. better section names wanted, entries under the incorrect section, etc.)\n. Fixed.\n. ",
    "rzukow": "Is it possible to specify size of reservoir when creating MetricRegistry?\nI think the problem here is that the only constructor used by MetricRegistry is the default one, and it doesn't really matter that there is ExponentiallyDecayingReservoir(int size, double alpha) constructor.\n. Ok, should be enough for  now. Thanks.\n. IMO while would be better here\n. wrong error message\n. ",
    "vitan": "BTW, my server is ubuntu 14.\n. ",
    "jebuselwyn": "+1 for this feature. Would be good to allow overriding the defaults at a registry level.\n. ",
    "krishnagopal-jobs": "I want a way to change the registry settings or implement a new way to change the new MetricsRegistry\n. ",
    "Grundlefleck": "Hi, \nI just came across this issue (happened to try 3.2.2 and 4.0.2) and it has not been addressed by #936. At first glance it looks like extending the disallowed characters, from only '-' to also exclude apostrophes would have avoided the issue. \nHow this manifested for me is that from the metrics-jvm module, using Java 9, the MemoryUsageGaugeSet emits metrics prefixed with: \n - jvm.memory.pools.CodeHeap-'non-nmethods'.\n - jvm.memory.pools.CodeHeap-'non-profiled-nmethods'.\n - jvm.memory.pools.CodeHeap-'profiled-nmethods'.\nI have a workaround for this particular issue[0] but a generic replacement of any invalid characters would have been great.\nIs there any chance of getting this PR revived, or should I submit something similar based off more recent code?\n\n[0] these are the only offending metrics I've noticed out of the modules we use, and I have chosen to drop the metrics like so:\nregistry.register(\"jvm.memory\", new MemoryUsageGaugeSet(\n  ManagementFactory.getMemoryMXBean(),\n  ManagementFactory.getMemoryPoolMXBeans().stream().filter(bean -> !bean.getName().contains(\"'\")).collect(toList())));\n. ",
    "maxmil": "Referencing the same issue https://github.com/dropwizard/metrics/issues/1322. Referencing the same issue https://github.com/dropwizard/metrics/pull/731. On closer inspection it looks like this was already done here https://github.com/dropwizard/metrics/issues/637 and rolled back here https://github.com/dropwizard/metrics/pull/1099.\nI'm happy with leaving only basic sanitation, we can make a fix for our environment and in newer versions of graphite (we are still on 0.9.10) I don't think it is a problem.\nHowever I'm not sure why the MemoryUsageGaugeSet needs to reimplement it's own sanitizer. It looks like it doesn't need to if metric names are sanitized in the GraphiteSenders.\nhttps://github.com/dropwizard/metrics/blob/3748f09b249f47a24ef868595fed4556ec5e92b1/metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java#L139. ",
    "bvarner": "Thanks, i missed the instanceof. :-)\n\nOn Jan 8, 2015, at 6:50 PM, Ryan Tenney notifications@github.com wrote:\nHi Bryan, I'm sorry to say that we can't accept new modules into this project at this time. It has become difficult to maintain a large collection of modules, many of which we didn't author. I'd strongly encourage you to publish this as an independent project, and submit a pull request to https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst https://github.com/dropwizard/metrics/blob/master/docs/source/manual/third-party.rst with a link to your project.\nAs for changing the visibility on void registerAll(String name, MetricSet metricSet), as MetricSet implements Metric you can pass your MetricSet to  T register(String name, T metric), which first checks if the metric is a MetricSet and calls registerAll (see: https://github.com/egineering-llc/metrics/blob/69fc970151f509a0dc6ccf34ef7c7e9beed663aa/metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java#L84 https://github.com/egineering-llc/metrics/blob/69fc970151f509a0dc6ccf34ef7c7e9beed663aa/metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java#L84). This is a frequent source of confusion, so I have opened issue #734 https://github.com/dropwizard/metrics/issues/734 to improve the documentation.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/dropwizard/metrics/pull/733#issuecomment-69271708.\n. \n",
    "DonSantuzzi": "Any update here? We are facing the same issue. Would be nice to support custom timestamps.\n. ",
    "ihr": "Indeed, this functionality would be much appreciated. We have similar case.. ",
    "jnehlmeier": "I have also observed that this ThreadLocal classloader leak occurs on other persistent app server threads like Jetty's Scanner Thread. During deployment it probably touches every class once which initializes the static ThreadLocal field in ThreadLocalRandom. So without any request the deployed app can not be garbage collected anymore.\nTo fix all possible leaks metrics would need to:\n- Make initialization of the ThreadLocal in ThreadLocalRandom lazy so that it won't be triggered during deployment / class loading.\n- Either provide a servlet filter that can call a cleanup method to remove the ThreadLocalRandom from the current request thread or a ServletContextListener that does cleanup for all threads once the app is undeployed. However if more than one app is deployed at the same time then the ServletContextListener solution might clean threads that are currently handling requests for other apps. So I guess a servlet filter would be preferable.\nAlternatively for Java7+ users it might be possible to provide a separate metrics-core library that uses java.util.concurrent.ThreadLocalRandom of Java7+. In that case the classloader leak would be gone as ThreadLocalRandom would be loaded by the system classloader. \nHowever you might still have a slightly memory leak because continuous deployment of apps would cause new ThreadLocal instances to be stored in a thread's ThreadLocalMap. But maybe these ThreadLocal instances get cleaned up over time by the code provided in ThreadLocalMap.\n. @nani83 checkout the 3.1 branch, delete ThreadLocalRandom from Metrics and fix imports so it uses the Java7 version.\n. ",
    "DustinChaloupka": "Where does this issue currently stand?  Curious about if someone is working on it or not.\n. So was doing some digging around to see if I could get something to work, but it looks like what the Java 7 of ThreadLocalRandom is using for its seeding (declared fields in class Thread namely threadLocalRandomSeed and threadLocalRandomProbe) are not a part of Thread in Java 6.  So unless someone else has other ideas on patching that over, I'm not sure we can. =\\\n. ",
    "philippe-tr": "What is the status of this issue? We're having the same problem I think. When we issue the command catalina.sh stop we get the following error messages in catalina.out.\nSEVERE [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [/capdServices] created a ThreadLocal with key of type [com.codahale.metrics.Striped64.ThreadHashCode] (value [com.codahale.metrics.Striped64$ThreadHashCode@xyz]) and a value of type [com.codahale.metrics.Striped64.HashCode] (value [com.codahale.metrics.Striped64$HashCode@xyz]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\nSEVERE [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [/capdServices] created a ThreadLocal with key of type [com.codahale.metrics.ThreadLocalRandom$1] (value [com.codahale.metrics.ThreadLocalRandom$1@xyz]) and a value of type [com.codahale.metrics.ThreadLocalRandom] (value [com.codahale.metrics.ThreadLocalRandom@xyz]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\n. @adamdecaf , will you issue a pull request to @ryantenney ? Is there any plan for the code to come back into this repo?\n. Ok. Too bad it did not make it to a release packaged on maven central. I can make my own in-house release for now I suppose.\n. @horn-rimmed-glasses No I did not work through this yet. \n. ",
    "horn-rimmed-glasses": "@philippe-tr Did this resolve your issue? I am experiencing the same first error message as you, even with the cherry-pick on top of 3.1.0.\nSEVERE [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [/capdServices] created a ThreadLocal with key of type [com.codahale.metrics.Striped64.ThreadHashCode] (value [com.codahale.metrics.Striped64$ThreadHashCode@xyz]) and a value of type [com.codahale.metrics.Striped64.HashCode] (value [com.codahale.metrics.Striped64$HashCode@xyz]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\nAny idea of how to resolve?\n. ",
    "static-max": "Any news on this?\n. ",
    "coolfeature": "+1\n. ",
    "vazzick": "Is this still leaking in 3.1.2?\n. ",
    "tadgh": "I still have this issue on latest. . ",
    "fjamal21": "any update on this? when can we expect a fix for this?\n. I also need this feature. Do we have any plan for this?. ",
    "gymaganis": "+1. ",
    "fbarbat": "Just in case it is useful for somebody, this problem is still happening in 3.2.2 on Java 6. If I am correct, this is because #1052 fixes the problem for JDK7 and above. Another argument for convincing management to invest time in updating Java.... ",
    "codesinthedark": "I had similar problem and I implemented a different ThreadLocal class that will enable class loaders to be GC-ed on redeploy. It is different than other similar attempts (like VicariousThreadLocal and other classes) because it is completely non-blocking (even for setting values, not only for getting).. ",
    "rossabaker": "The spirit of the reverted commit could be preserved by passing the start time to a listener created on each suspended request.  Since this handler is already coupled to Jetty, I don't see the point, and it's a little bit lighter weight with the shared listener.\n. ",
    "m8r-ubnc5g": "+1\n. ",
    "anudeepti2004": "I am working on a project which requires me to persist the metrics and then deserialize it when the project is restarted. Serialization works fine and I can see the contents of the file but when I try to deserialize the MetricsRegistry object it throws an exception. So I just wanted to know if there are any updates on this?. ",
    "OlaviSau": "By the way check out HttpContext for automatic paths\nhttp://docs.oracle.com/javase/7/docs/api/javax/xml/ws/spi/http/HttpContext.html\n. ",
    "mtakaki": "I submitted a pull request suggesting a fix for this issue, keeping the same behavior (using the class name and method) but using the child class name instead of the parent: https://github.com/dropwizard/metrics/pull/861\n. @tostrowski, feel free to copy my fix while it's not accepted (or rejected) on the pull request: https://github.com/dropwizard/metrics/pull/861\nIt fixes the issue and works as you would expect: each child resource gets its own entry in the timers group. It also fixes the issue for @ExceptionMetered, that will be under the meters group.\nTo add it to your project, just copy the file com.codahale.metrics.jersey2.InstrumentedResourceMethodApplicationListener under your project. The class loader will put your classes before the metrics one and it will work. That's what I'm doing right now, as I can't afford to wait for this to be pulled.\n. @gnmerritt I'm glad that it helped you!\n. I haven't heard anything regarding my proposed fix for this issue, @rferreira. My suggestion at https://github.com/dropwizard/metrics/issues/746 is still valid. You can import this fix into your project at any time. To make it easier, just add this file: https://raw.githubusercontent.com/mtakaki/metrics/mtakaki_746_fix_inherited_timed_annotation/metrics-jersey2/src/main/java/com/codahale/metrics/jersey2/InstrumentedResourceMethodApplicationListener.java\n. @edwardsb which version of dropwizard are you using? I noticed it didn't work as soon as I migrated from 0.8.x to 0.9.x. So I had to do some changes to it: https://gist.github.com/mtakaki/746dba30edfefc0ffbd5\nTo be honest, I completely gave up about having my fix merged. So this has been my current approach to get around this issue.\n. @edwardsb I'll take a look tonight. So you have two resources, a parent and a child, and both are being used as resources? I'll try this later today, but I don't see why it would not work. And yes, you need to register all the concrete resource classes. \n@ryantenney sorry, I didn't know you were too busy to look at my PR. Thanks for working on the version 4 :) Really appreciate the good work you're doing with the metrics project. \n. @edwardsb not at all. Feel free to message me on twitter.\n. ",
    "tostrowski": "+1, since this bit us as well.\n. ",
    "rferreira": "+1 on this bug\n. hey folks what's the good word on this PR? \n. ",
    "gnmerritt": "Thanks @mtakaki - this fixes the issue for Dropwizard 0.9.1 as well\n. ",
    "matlockx": "@ryantenney do you want that in the current master too?\nBTW, when is the next 3.1 maintenance release planned?  Can it be looked up somewhere? \nThx\n. K. Thanks for the info.\nGreetz\nOn Feb 13, 2015 4:36 PM, \"Ryan Tenney\" notifications@github.com wrote:\n\nI just cherry picked this into master. The release milestones are\navailable here, I had targeted 3.1.1 for 4 months ago:\nhttps://github.com/dropwizard/metrics/milestones\nIt's currently held up by a fix to the Graphite UDP reporter, I just\nhaven't finished it on account of work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/749#issuecomment-74271941.\n. \n",
    "shadow000fire": "Sorry, I didn't notice that when I searched the existing issues.\n. ",
    "kmandeville": "I figured it out finally myself. Sorry to bother you. I had to add a cache manager configuration to my @Configuration class and in it, I had to loop through all caches and call replaceCacheWithDecoratedCache method. \n. Yeah sorry to have logged an issue. Spring is great, but having everything\njust automatically configured for you sometimes makes it pretty tricky when\nyou need to do something a little non standard.\nSince this is probably a common scenario of using ehCache, you might want\nto add some documentation for how to instrument ehCache when using it with\nSpring and Hibernate.\nOn Fri, Feb 20, 2015 at 2:09 PM, Ryan Tenney notifications@github.com\nwrote:\n\nCool! I was also trying to figure it out and came up empty.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/753#issuecomment-75300147.\n. \n",
    "ptahchiev": "I believe these events can be used: CacheEntryCreatedListener, CacheEntryUpdatedListener, CacheEntryRemovedListener, CacheEntryExpiredListener\n. ",
    "henri-tremblay": "Probably closed by #1010. Hi. I know the contributors of this project are probably overloaded but I would like a head's up.\nI want to know if you are ok for adding a jcache module? When this PR can then be processed if a different matter.\n. Awesome. Thanks. Hi. When do you think the next release will be performed?. It is putting jcache at the right place. All modules are in alphabetical order\n. ",
    "shtratos": "Common pattern with Dropwizard services is to merge all jars in one \u00fcber-jar via maven-shade plugin. In that case the endpoint will return version of that jar. \n. ",
    "AndrewNorman": "That is pretty much the approach that I have taken. But it would be nice to have this as a configuration option for unhealthy check.\nThe server should return a 500 if there is an internal server error and this should not affect that at all.\n. ",
    "daluu": "I came across this as well today. In a way, it makes sense, but also is a bit confusing, but partly due to the limitations of the HTTP status code specs I think.\nIf one implements multiple healthchecks in a single health check (web) endpoint, if any one health check fails, you get an HTTP 500. This makes sense when one is being strict about health checks, but if one's criteria is more lax (say if less than X healthchecks fail it's ok, or if certain ones fail, it's ok), then this becomes a false alarm.\nIn any case the end result for detailed check is to check the response message/content rather than the status code for details on what failed exactly.\nWhat makes this also interesting is that because the content is just JSON text for both pass/fail, to a user using a web browser to hit the endpoint, they have no idea about the HTTP 500 or other status code since it all looks the same (as a 200 ok) unlike the common response pages/output one gets on a 5xx or 4xx error. You only notice this peculiar behavior when using a specific web/REST client (curl -I url, wget, any REST client app/lib)\nHow do (most) people use the healthcheck web endpoint specifically? This could warrant some discussion on how it should behave, if HTTP 500 isn't the best behavior.\nDue to the nature of the healthcheck behavior in the web endpoint, it might be good to mention or refer to the blurb in http://metrics.dropwizard.io/3.1.0/manual/servlets in http://metrics.dropwizard.io/3.1.0/manual/healthchecks.\nP.S. to add some context for my use case, what I built is not a \"server\" per se, where we check the health of said server hence a 500 would make sense. Rather I have a simulation client/tool that performs various actions, which also generates metrics for those actions. It just so happens this client tool exposes a web endpoint and offers a healthcheck (web) endpoint that reports on health of certain interactions between the local client and the environment/server in the cloud. Therefore, a 500 error would be a misrepresentation that the tool or the web endpoint portion has gone bad when it's not. Unfortunately, looking over the current HTTP status codes, I didn't find an obvious better replacement. The healthcheck is more about a status check/report on the interaction of client & server and thus environment overall. Only if all healthchecks fail or certain critical ones fail does it deem a complete failure. To make things simple for me, I had all the healthchecks managed by one healthcheck registry and thus one web endpoint for it.\n. @dantheman46, have you tried the suggested workaround from @McPringle? And can you elaborate on your comment? Are you in a situation as I am with implementing multiple health checks in one endpoint where it's ok for certain health checks to fail?\n@osigida, what you mention is logical. However, I'm not building a microservice, rather it's a tool to help test microservices. In a perfect world, the microservice monitoring would be enough that we don't need to monitor with separate tooling, but alas, not there yet. The health check for this tool in a way could be similar to a test tool/framework test result output, which ideally would also be an overall fail if any one test fails, but due to what we are able to effectively inject in the system (it's not 100% deterministic to produce the same results all the time), the health check is thus not perfect. You could say I should remove the flaky checks but I find it may be useful for monitoring (as stats). Also, I have metrics endpoint for the tool as well, for which the health checks are all based on. But the health check endpoint makes it easier for new users or a novice to glance over than to view the list of metrics and manually do correlation on them (as the healthcheck does that for you). You could say I have an unconventional use case of the metrics/healthcheck library, but then again no one said this library is \"only\" for microservices, if I'm not mistaken.\n. ",
    "dantheman46": "I think that If one implements multiple healthchecks in a single health check (web) endpoint and one of these checks returns false whole health check should return false - HTTP 500 - not 200\nDo you plan to implement this feature?\nMany software validate health using http status codes.\nIn this case this library is useless\nWe need this feature and we would like to know if we have to find another solution or wait for this feature\nMany\n. ",
    "adrianmkng": "Any plans to release this fix to maven central? We're experiencing the problem as well.\n. ",
    "bitkid": "ok .. my bad. had both in the class path\n. ",
    "amitranjan-fk": "@bitkid what was the issue ?\n. ",
    "sisingh": "What was the reason buddy ?\n. @bitkid : what was the reason. I am also facing the same issue.\n. Sure just wanted to know where to put exclusion in maven.\nOn Jan 18, 2016 22:24, \"Ryan Tenney\" notifications@github.com wrote:\n\nIf I understand @bitkid https://github.com/bitkid's last comment, he\nhad multiple versions of metrics on the classpath.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/769#issuecomment-172586329.\n. \n",
    "bradfordcp": "What is the resolution to this?\n. I was looking for a way to fix the issue. For anyone else having this problem the following command will help you track down where the extra inclusion is:\nmvn dependency:tree -Ddetail=true\nFrom there you can look at excluding the appropriate version from the dependency including the old version\nxml\n<exclusions>\n    <exclusion>\n      <groupId>com.codahale.metrics</groupId>\n      <artifactId>metrics-core</artifactId>\n    </exclusion>\n</exclusions>\nThanks for your help @ryantenney .\n. ",
    "mithunkhatri": "I faced the same issue. I excluded below jar and fixed.\n<exclusion>\n<groupId>io.dropwizard.metrics</groupId>\n<artifactId>metrics-core</artifactId>\n</exclusion>\n. ",
    "ferdi1809": "Thanks mithunkhatri . Excluding the io.dropwizard.metrics core metrics solved my issue.. ",
    "fommil": "What to do when you actually need to use metrics-core?. nope, I only have 3.2.5 on my classpath. I checked several times. I'm seeing this exception on startup in YourKit's exception tracker.. sure... I'll grab it from Yourkit next time I'm doing a perf test.. this is in yourkit csv format...\n\"Reverse Call Tree\",\"Count\",\"Level\"\n\"java.net.URLClassLoader.findClass(String) URLClassLoader.java:381\",\"8892\",\"1\"\n\"sun.reflect.misc.MethodUtil.findClass(String) MethodUtil.java:343\",\"12\",\"1\"\n\"com.yourkit.runtime.TelemetryThread.run() TelemetryThread.java:529\",\"11\",\"2\"\n\"com.codahale.metrics.JmxAttributeGauge.getValue() JmxAttributeGauge.java:44\",\"1\",\"2\"\n\"io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String, Gauge) DropwizardExports.java:47\",\"\",\"3\"\n\"io.prometheus.client.dropwizard.DropwizardExports.collect() DropwizardExports.java:133\",\"\",\"4\"\n\"io.prometheus.client.CollectorRegistry$MetricFamilySamplesEnumeration.findNextElement() CollectorRegistry.java:180\",\"\",\"5\"\n\"io.prometheus.client.CollectorRegistry$MetricFamilySamplesEnumeration.nextElement() CollectorRegistry.java:213\",\"\",\"6\"\n\"io.prometheus.client.CollectorRegistry$MetricFamilySamplesEnumeration.nextElement() CollectorRegistry.java:134\",\"\",\"7\"\n\"java.util.Collections.list(Enumeration) Collections.java:5240\",\"\",\"8\"\n\"elided.push(CollectorRegistry) NamespacedGraphite.scala:29\",\"\",\"9\"\n\"io.prometheus.client.bridge.Graphite$PushThread.run() Graphite.java:101\",\"\",\"10\". ah, now that's certainly possible. Sorry for the noise!. ",
    "schlosna": "Thanks for the quick review and merge @ryantenney!\n. ",
    "derekbassett": "Be Happy!\nI will tell you we currently have a metrics-kafka version just like yours, including adding the IP address as  into the JSON as well.  This would be awesome to include into the main product.\nI noticed the packages are not the correct.  They are io.github.hengyunabc and not the base package for metrics.\nAlso  I noticed you use com.alibaba.fastjson.JSONObject rather then the metrics-json, not sure if that is an issue or not but I would think maintaining formats as close as possible would be good.  The adding of the IP address is a hard requirement for us so I would think we should adjust metrics-json if we could.\nI was also curious about why you created an Executor thread inside the reporter, as most reporters I've seen just use the reporter thread.\nI would also be happy to add these reporters into metrics-spring project.\n. metrics-zabbix seems to rely on io.github.hengyunabc.zabbix.sender.DataObject, io.github.hengyunabc.zabbix.sender.SenderResult, io.github.hengyunabc.zabbix.sender.ZabbixSender please include those into the metrics-zabbix repo unless those are already published in a separate product.\n. Would be interesting to find out what an actual committer says.\n. @mlaflamm That makes perfect sense.  I will look into the issue with SocketTimeoutException.\nI originally wrote it using the FutureCallback, and moved it to using the Request/Response because I believe it captured a more accurate time.  Also the active count only increments/decrements when the request is \"active.\"  This is only between when the request is generated but before request is completed, and when the response is received until the response is completed.\n. ",
    "hengyunabc": "I found that some other reporters use their own package name.\nhttps://github.com/elastic/elasticsearch-metrics-reporter-java\npackage name is \"org.elasticsearch.metrics\".\nI don not know metrics-json before, so I use my favorite fastjson.\nKafka Producer.send may block, so I think that use a executor is better.\n. zabbix-api and zabbix-sender are separate libraries.\n@derekbassett \n. When I write my own reporter, I found thad I have to catch Throwable in report method, or the reporter may halt in some case. \nSo I think that catch Throwable in ScheduledReporter will be better.\njava\n//ScheduledReporter.java\n    /**\n     * Called periodically by the polling thread. Subclasses should report all the given metrics.\n     *\n     * @param gauges     all of the gauges in the registry\n     * @param counters   all of the counters in the registry\n     * @param histograms all of the histograms in the registry\n     * @param meters     all of the meters in the registry\n     * @param timers     all of the timers in the registry\n     */\n    public abstract void report(SortedMap<MetricName, Gauge> gauges,\n                                SortedMap<MetricName, Counter> counters,\n                                SortedMap<MetricName, Histogram> histograms,\n                                SortedMap<MetricName, Meter> meters,\n                                SortedMap<MetricName, Timer> timers);\n. ",
    "jeunito": "@ryantenney thanks. I will revert back to you on this today. \n. We do have carbon relay in front of our graphite. The former doesn't listen on UDP port 2003. Will set it up to do so and see what happens.\n. ",
    "ShishirKumar27": "Thanks. After correcting host/port able to view nameOfCounter in graphite and able to configure few metrics for hibernate active/max connections.\nOne more help I need. Can we view hibernate query time on graphite which gets written in console as \nINFO  [2015-03-30 15:37:26,462] org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: Session Metrics {\n    89309 nanoseconds spent acquiring 1 JDBC connections;\n    0 nanoseconds spent releasing 0 JDBC connections;\n    61978 nanoseconds spent preparing 1 JDBC statements;\n    85075 nanoseconds spent executing 1 JDBC statements;\n    0 nanoseconds spent executing 0 JDBC batches;\n    0 nanoseconds spent performing 0 L2C puts;\n    0 nanoseconds spent performing 0 L2C hits;\n    0 nanoseconds spent performing 0 L2C misses;\n    184392 nanoseconds spent executing 1 flushes (flushing a total of 1 entities and 0 collections);\n    11934 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)\n. ",
    "ymagesh": "@ShishirKumar27 \nI am also facing same connection timeout problem. Below is my config. Pls let me know if any other thing i have to use or is it could be any firewall problem. let me know how you have solved. \ngraphite.config.params.hostname=carbon.hostedgraphite.com\ngraphite.config.params.port=2003\n. ",
    "geissbock": "@ryantenney As the Slf4jReporter is about to be touched anyway, I would like to ask if there are any objections against switching all these logXYZ() methods from private to protected?\nThe current versions of SLF4J apparently don't allow to format the parameters (e.g. doubles) but instead stick to a default format, which sometimes causes troubles when processing the logged data. In the concrete example, some doubles are logged as something like 0.00123 and then suddenly switching to something like 9.905307477103993E-6. This mixture of formats makes it harder (though of course not impossible) to parse the log messages, and I would simply like to be able to extend the Slf4jReporter and add my own implementations of logXYZ() if necessary.\nIf this is acceptable, I would add this change to the ones made by @nithril \n. ",
    "nithril": "Thanks!\n. ",
    "zdanek": "My client will kill me ;)\nWhen will v4 be available?\n. ",
    "mlaflamm": "I ran into the same issue while trying to instrument my async clients. I was about to modify the instrumentation code myself while I noticed this pull request and I decided to give it a try. It works and I like the addition of the active counter. Unfortunately the current implementation is not robust enough. I got a negative active count after receiving many SocketTimeoutException.\nI think that wrapping the FutureCallback passed to CloseableHttpAsyncClient.execute() could simplify the code and make it more robust. In the callback wrapper constructor, increment the active counter and create the timer context. Decrement the active counter and stop the timer context when FutureCallback.completed() or FutureCallback.failed() are invoked.\nDoes this make sense or I am missing something important?\n. ",
    "ibuenros": "Is there a reason we can't do the private -> protected change. It is very easy, and should not affect anything.\n. ",
    "wayerr": "What prevents to do like below patch for com.codahale.metrics.MetricRegistry:\n``` diff\n--- HEAD\n+++ Modified In Working Tree\n@@ -50,22 +50,34 @@\n private final ConcurrentMap<String, Metric> metrics;\n private final List<MetricRegistryListener> listeners;\n\n\nprivate final MetricBuilder timeBuider;\nprivate final MetricBuilder meterBuider;\nprivate final MetricBuilder histogramBuider;\n\nprivate final MetricBuilder counterBuider;\n/*\n  * Creates a new {@link MetricRegistry}.\n  /\n public MetricRegistry() {\n-        this(new ConcurrentHashMap());\n+        this(new ConcurrentHashMap(), new Configuration());\n }\n\n\npublic MetricRegistry(Configuration configuration) {\n\nthis(new ConcurrentHashMap(), configuration);\n}\n+\n     /**\nCreates a {@link MetricRegistry} with a custom {@link ConcurrentMap} implementation for use\ninside the registry. Call as the super-constructor to create a {@link MetricRegistry} with\nspace- or time-bounded metric lifecycles, for example.\n  */\n\n\nprotected MetricRegistry(ConcurrentMap metricsMap) {\nprotected MetricRegistry(ConcurrentMap metricsMap, Configuration configuration) {\n         this.metrics = metricsMap;\n         this.listeners = new CopyOnWriteArrayList();\nthis.timeBuider = configuration.timeBuider == null? MetricBuilder.TIMERS : configuration.timeBuider;\nthis.meterBuider = configuration.meterBuider == null? MetricBuilder.METERS : configuration.meterBuider;\nthis.histogramBuider = configuration.histogramBuider == null? MetricBuilder.HISTOGRAMS : configuration.histogramBuider;\n\nthis.counterBuider = configuration.counterBuider == null? MetricBuilder.COUNTERS : configuration.counterBuider;\n     }\n/*\n@@ -110,7 +122,7 @@\n  * @return a new or pre-existing {@link Counter}\n  /\n public Counter counter(String name) {\n-        return getOrAdd(name, MetricBuilder.COUNTERS);\n+        return getOrAdd(name, this.counterBuider);\n }\n/*\n@@ -121,7 +133,7 @@\n  * @return a new or pre-existing {@link Histogram}\n  /\n public Histogram histogram(String name) {\n-        return getOrAdd(name, MetricBuilder.HISTOGRAMS);\n+        return getOrAdd(name, this.histogramBuider);\n }\n/*\n@@ -132,7 +144,7 @@\n  * @return a new or pre-existing {@link Meter}\n  /\n public Meter meter(String name) {\n-        return getOrAdd(name, MetricBuilder.METERS);\n+        return getOrAdd(name, this.meterBuider);\n }\n/*\n@@ -143,7 +155,7 @@\n  * @return a new or pre-existing {@link Timer}\n  /\n public Timer timer(String name) {\n-        return getOrAdd(name, MetricBuilder.TIMERS);\n+        return getOrAdd(name, this.timeBuider);\n }\n/\n@@ -312,7 +324,7 @@\n         return (T) metric;\n     } else if (metric == null) {\n         try {\n-                return register(name, builder.newMetric());\n+                return register(name, builder.newMetric(new MetricBuilderConfig(name)));\n         } catch (IllegalArgumentException e) {\n             final Metric added = metrics.get(name);\n             if (builder.isInstance(added)) {\n@@ -397,10 +409,10 @@\n /\n  * A quick and easy way of capturing the notion of default metrics.\n  */\n-    private interface MetricBuilder {\n+    public interface MetricBuilder {\n     MetricBuilder COUNTERS = new MetricBuilder() {\n         @Override\n-            public Counter newMetric() {\n+            public Counter newMetric(MetricBuilderConfig config) {\n             return new Counter();\n         }\n\n\n@@ -412,7 +424,7 @@\n     MetricBuilder<Histogram> HISTOGRAMS = new MetricBuilder<Histogram>() {\n         @Override\n\n\npublic Histogram newMetric() {\npublic Histogram newMetric(MetricBuilderConfig config) {\n                 return new Histogram(new ExponentiallyDecayingReservoir());\n             }\n\n@@ -424,7 +436,7 @@\n     MetricBuilder<Meter> METERS = new MetricBuilder<Meter>() {\n         @Override\n\n\npublic Meter newMetric() {\npublic Meter newMetric(MetricBuilderConfig config) {\n                 return new Meter();\n             }\n\n@@ -436,7 +448,7 @@\n     MetricBuilder<Timer> TIMERS = new MetricBuilder<Timer>() {\n         @Override\n\n\npublic Timer newMetric() {\npublic Timer newMetric(MetricBuilderConfig config) {\n                 return new Timer();\n             }\n\n@@ -446,8 +458,64 @@\n             }\n         };\n\nT newMetric();\nT newMetric(MetricBuilderConfig config); boolean isInstance(Metric metric);\n\n}\n+  \n+    /\n+     * In future we can add some fields here, for example we can rewrite it to use with MetricName class\n+     /\n+    public static class MetricBuilderConfig {\n+        private final String name;\n+      \n+        MetricBuilderConfig(String name) {\n+            this.name = name;\n }\n+      \n+        public String getName() {\n+            return name;\n+        }\n+    }\n+  \n+    public static final class Configuration {\n+        private MetricBuilder timeBuider;\n+        private MetricBuilder meterBuider;\n+        private MetricBuilder histogramBuider;\n+        private MetricBuilder counterBuider;\n+\n+        public MetricBuilder getTimeBuider() {\n+            return timeBuider;\n+        }\n+\n+        public void setTimeBuider(MetricBuilder timeBuider) {\n+            this.timeBuider = timeBuider;\n+        }\n+\n+        public MetricBuilder getMeterBuider() {\n+            return meterBuider;\n+        }\n+\n+        public void setMeterBuider(MetricBuilder meterBuider) {\n+            this.meterBuider = meterBuider;\n+        }\n+\n+        public MetricBuilder getHistogramBuider() {\n+            return histogramBuider;\n+        }\n+\n+        public void setHistogramBuider(MetricBuilder histogramBuider) {\n+            this.histogramBuider = histogramBuider;\n+        }\n+\n+        public MetricBuilder getCounterBuider() {\n+            return counterBuider;\n+        }\n+\n+        public void setCounterBuider(MetricBuilder counterBuider) {\n+            this.counterBuider = counterBuider;\n+        }\n+      \n+      \n+    }\n+}\n\n\n```\nIt allow us to use custom factories, allow use MetricName in future and also allow use external config for metrics.\n. When is planning to release v4? And where i can checkout sources for this new version? I need this feature in near future, otherwise  i will need to use ugly workarounds in production :(\n. ",
    "interair": "wayerr +1\n. ",
    "djgeary": "Another vote for this issue. \nWe are currently using MetricsRegistry.histogram(String name) to dynamically create histograms with a name determined by data at runtime.\nHowever we need to change from the default reservoir implementation. To do this we effectively need to copy the logic in the private getOrAdd method into our code to be able to override the Histogram creation and inject a different reservoir.\nIn our case making the getOrAdd and MetricBuilder public would simplify this and allow us just to call getOrAdd with a custom MetricBuilder.\n. ",
    "mzalimeni": "+1 to @djgeary's specific issue and his suggestion to make getOrAdd and MetricBuilder public.\nIs there a downside to doing this immediately in a point release, prior to 3.2/4? This seems low risk/effort and high reward for those of us looking forward to the next version but needing an interim solution to things like alternate reservoirs.\nHappy to open a pull request if you're willing.\n. Thanks for the quick reply! And good point, sorry for the misnomer. I've updated the title.\nI think I understand the concern about blocking register with addListener, since you have no guarantees about the behavior of the listener, but in our case (and I'd guess many cases), synchronization there would be tolerable. I think I can find a workaround in our case, but a feature supporting exactly-once notification in some way might be useful.\nAt any rate, it might be helpful to update the method documentation to call out the existing behavior explicitly.\n. ",
    "harelba": "+1 here as well to publicizing getOrAdd and MetricBuilder. Specific use case is to actually use a different reserviour for timers and histograms, but already encountered other use cases.\n. Hi, Thanks Ryan for the reply.\nCould we do something like one composite reporter which pulls the entire data, and then provides it to the various reporters? This might introduce a change in the reporter interface, but if i'm not missing something, then it shouldn't change the semantics, right?\nIf you agree, then I'd be glad to have a go at such a change and see if it leads to a good place.\n. I completely agree. We've been very heavy users of the great codahale metrics in my last company (5M metrics per minute, 200 dashboards), and the fact that all counters required derivatives (non negative ones), and histograms were very hard to reason about because it wasn't clear about what time interval there refer to, has shown us that reset-on-snapshot would have been much better. Frankly, I would even prefer solving the reset-on-snapshot issue than the multiple reporters accuracy.\nbtw, when there's \"holes in the data\" due to network issues, or machines restarting, then reset-on-snapshot prevents major correctness issues (doing a \"derivative\" on data with holes skews the data and creates a lot of correctness issues).\noh, and another thing - We've been trying to use the HdrHistogram reserviour, but the current way that metrics registry is written doesn't provide us with the capability to add it as a \"natural\" new type of metric (or override all histograms/timers) - We actually need to create our own metric registry for supporting that out of the box (since getOrAdd and \"metrics\" fields inside MetricRegistry are not protected).\nHarel\n. ",
    "nerdynick": "This resolves #781\n. Sounds good, It was just a usefully metric we wrote and figured we'd publish it in case anyone else wanted it.\nWe found having a rate vs actually counts for a very high volume counter allowed us to truly see what the real load was. As from tick to tick the counter would look very sporadic. In our case this was Jetty's connection pool on a high transnational server.\n. Digging deeper into the code it appears what I'm looking for already exists but is marked private \"private void registerAll(String prefix, MetricSet metrics)\" but digging deeper it appears it is exposed publicly with \"public  T register(String name, T metric)\" its just not made as clear that MetricSet is a Metric and will be treated differently with register(). Not sure if just adding to the javadoc for register, adding to the website docs, or just making registerAll public is the best approach to improving clarity and documentation on what actions can be done with a MetricRegistry. \n. Currently this is 4.0.0-SNAPSHOT with a collection of custom patches. \n. I can see what I can do with testing 3.1.2. However I don't have hopes of it being fine as comparing metrics-jvm between the two branches (4.0 & 3.1). The code is the same and it appears that 3.1 introduced the new memory metrics of tracking for tracking more values for each of the MemoryPoolMXBean. In this case the \"init\" metric for every MemoryPoolMXBean throws the null pointer.  Which makes me wounder if this is a Jave 8 vs 7 issue and init was removed. \nThe patches we have are against metrics-core and metrics-healthchecks. So they shouldn't be affecting metrics-jvm. They have actually all been submitted for inclusion upstream as well.\n. We are currently running a pretty up to date version of 8.\n. I'll merge this into my fork, test it out, and report back.\n. Didn't think of that but I'll be sure to add that.\n. Just submitted the pull request for all this. It adds two modules, metrics-adaptor & metrics-adaptor-healthchecks, for their respective core modules. \nThis should handle most of the common cases for metrics and healthchecks. The only stuff I didn't touch was Listeners and Reservoirs. For which should be pretty easy to add if needed.\nI have tested this against HikariCP for the most part and everything appears to be working as expected. If I run across any issues I'll add the fixes to the same branch if this hasn't been merged upstream, else I'll open a new issue and pull request.\n. ",
    "saumitrabhave": "+1\nMy Rationale Behind It:\nWe separate out JAX-RS annotations on public interfaces and share with service consumers to generate Proxy Classes See This. \nThe Metrics annotations on the other side are completely server Implementation detail and need not be shared publicly.\nWith this change merged, we can put all metrics annotations on Server Impl and share All JAX-RS Annotations publicly sticking to section 3.6 of JSR-339.\n. Is this still under consideration? . Is it moved? fixed? rejected?. ",
    "seizmo": "Ah, I see. Thanks for the quick reply!\n. ",
    "lidel": "I strongly agree. \nExecution of HealthCheck#check() method should always be wrapped in a timeout.\nThings break and without timeout you won't ever know it.\nActually,  PR https://github.com/dropwizard/metrics/pull/330  introduced custom implementation of HealthCheckRegistry that had this very feature:\nhttps://github.com/dropwizard/metrics/blob/121c2e78036176ecb9e805ac011a6c757cd83adc/metrics-core/src/main/java/com/yammer/metrics/core/ParallelHealthCheckRegistry.java#L47\nI  inspected  metrics-code-3.2.2 and metrics-healthchecks-3.2.2 and I don't see this class anymore.\nThe default implementation of com.codahale.metrics.health.HealthCheckRegistry#runHealthChecks will block forever:\nhttps://github.com/dropwizard/metrics/blob/66b29bec376047b5dbe462c2ee89116b3d98c9e3/metrics-healthchecks/src/main/java/com/codahale/metrics/health/HealthCheckRegistry.java#L229\nI see two ways to time-box execution of check():\n- create customized  HealthCheckRegistry (or copy one from PR #330)\n- execute runHealthCheckscustom with  ExecutorService that is cabable of cancelling jobs after a timeout\nQuick PoC for first approach:\n```java\n    private static abstract class HealthCheckWithTimeout extends HealthCheck {\n    private final long timeout;\n    private final TimeUnit timeoutUnit;\n    private final ExecutorService executor;\n\n    public HealthCheckWithTimeout(long timeout, TimeUnit timeoutUnit) {\n        this.timeout = timeout;\n        this.timeoutUnit = timeoutUnit;\n        this.executor = Executors.newFixedThreadPool(1));\n    }\n\n    protected final Result check() throws Exception {\n        Future<Result> healthCheck = executor.submit(this::checkWithTimeout);\n        try {\n            return healthCheck.get(timeout, timeoutUnit);\n        } finally {\n            healthCheck.cancel(true);\n        }\n    }\n\n    protected abstract Result checkWithTimeout() throws Exception;\n}\n\n```\nUsage: \njava\n                new HealthCheckWithTimeout(5, TimeUnit.SECONDS) {\n                    @Override\n                    protected Result checkWithTimeout() throws Exception {\n                        // check code\n                    }\n                }\n. It would be great to have both TimeBoundHealthCheck and unbound HealthCheck in metrics-core .\nIs such PR welcome? (Disclaimer: I no longer work on this, so it is up for grabs!)\nAs for mitigating the problem with async checks:  I would be careful with that. \nMy understanding is that @Async checks are not time-bound right now, which makes them very, very dangerous. When something goes wrong async check can hang forever and not only waste resources but give false sense of safety: due to async nature reading it will return previous (usually healthy) result.. ",
    "tbrizard": "That was the piece I was missing (i.e. gauge instances are registered and then called directly).  Thanks Ryan!! \n. ",
    "mattnelson": "+1\nThis is something that I was sorely missing when attempting to uplift to 3.x. I have quite a few instrumented libraries that I do not have the option of injecting the default registry without considerable refactoring.\n. @ryantenney It looks like there is going to be a 3.2 release to coincide with dropwizard 0.9. Do you think this feature could be added to the 3.2 milestone?\nhttps://github.com/dropwizard/dropwizard/pull/1137#issuecomment-115736554\n. Will rebase on master to fix build failure once #850 is merged.\n. Going through some of my old pulls and noticed this was still open. Is there anything else blocking this from being merged?\n. I hadn't considered how this impacted getOrCreate. Staying on the current magic string implementation seems like the cleanest option. Sticking with the string option, there are a few things that need to be addressed/documented. The remove and clear methods are potentially destructive. A caller who holds on to the default registry could be left holding onto a different instance of the default.\n. Should there be another method for instances when you already have the MetricRegistry? I am using Dropwizard where a metrics registry is created by the framework and I would like to make that instance the default.\nAs proposed:\njava\nSharedMetricRegistries.add(\"default\", bootstrap.getMetricRegistry());\nSharedMetricRegistries.setDefault(\"default\");\nWith the overloaded setDefault method.\njava\nSharedMetricRegistries.setDefault(\"default\", bootstrap.getMetricRegistry());\n. ",
    "ARentz07": "I've added the unit tests for this. Any chance it can get reviewed/merged?\n. Just had to do this today, and found it pretty easy to install gperftools on the Mac, just following their readme. Maybe just link to it somewhere? https://github.com/gperftools/gperftools. Probably so, will add that...\n. Added the new method + tests.\n. \"memorizes\"\n. Nvm, that's correct\n. ",
    "arosenf": "Locale.GERMANY is not required in my case, but since CsvReporter offers locale support I expected it to \"just work\", which was not the case. The example in the user manual sets a locale, that's why I gave it a try.\n. ",
    "ardias": "No i wasn't. I'll checkl it out. thanks\n. hi,\nproblem is that i'm not really using Jersey,  TomEE uses Apache Cxf for JAX-RS and so it's me being stupid trying to use metrics-jersey2. I want to add some metrics to my JAX-RS service and it's not been particularly easy, since i'm also in a JEE environment. \nI tried using metrics-cdi so that i could use annotations, but it only works with CDI 1.2 and TomEE seems to be using only CDI 1.1\nI really didn't want to populate my methods with direct calls to the metrics 'objects' and registry.\n. ",
    "remen": "Personally, I would love to have a way for meters/timers to show the rate averaged over the time period since the last time it was reported.\nI.e., sending metrics to graphite once every 10s, I would like to publish average rate over the previous 10s. Currently, as far as I've understood from the source, that would require a custom reporter. A nicer option, imo, would be a way to have a configurable rolling window average within the meter.\n. ",
    "mnuessler": "You're welcome! :+1:\n. @leelasharma FYI\n. In general HTTPS support makes perfect sense, but InfluxDB 0.9 does currently not support HTTPS. There is an open ticket and it looks like it will be included in the next minor release (0.9.2).\nFor the rewrite it could make sense to have a look at the official InfluxDB Java client too. Seems that they are close to releasing a new version that supports the new InfluxDB 0.9 API.\n. ",
    "calumlean": "Hello all,\nWe've had a problem with 3.1.1 though an Amazon ELB.\nThe symptom is that once the JVM starts, we get a few metrics delivered, but then no more.\ntcpdump shows the metrics being sent to the ELB, but they never arrive on the carbon boxes.\nThe metrics host shows a connection in CLOSE_WAIT that never appears to close.\ntcp        1   0 ::ffff:10.124.x.x:33377   ::ffff:10.124.y.y:2003   CLOSE_WAIT  495        336560     24092/java\nGoing directly to the carbon host (not through the ELB) worked fine.\nWe've rolled back to com.codahale.metrics/metrics-logback 3.0.2 which fixes this problem.\n. ",
    "jsravn": "We're having similar problems after upgrading to 3.1.2 to get #675 and the dns caching fix.\nEven worse, it appears to kill the scheduled graphite reporter task. OS reports socket as CLOSE_WAIT. My guess is the reporter tries to reuse that socket and gets an unexpected exception that causes the scheduled task to no longer run.\nAs an aside, GraphiteReporter#report should be catching unexpected exceptions and logging them. If something unexpected occurs, the way the code is now, it silently stops scheduling future tasks with no logging.\n. I missed that. Then I don't know what was killing our reporter thread, but it happened a few times.\nedit: Ah I see, I think we were using 3.0 which doesn't have the try/catch. Still, it's probably better to catch at Throwable so it doesn't silently die on a system error, don't you think? Even if it just logs it and rethrows.\n. ",
    "graph1zzlle": "Same behaviour here\n. ",
    "leelasharma": "@ryantenney That's great to know. This metrics-influxdb module also supports tags.\n. @ryantenney @cemo  Actually no real reason, thanks for pointing out. I just submitted a pull request to use the same jackson libraries as the project.\n. ",
    "jhorwit2": "I'd suggest also looking at line protocol versus json as it's the preferred method and not deprecated like JSON is. With line protocol there are some performance notes to remember, like sorting tags & escaping certain chars.\n. ",
    "mnp": "So what's the status on this feature? Is anyone working on it?. Okay thanks for the update!. ",
    "gburton1": "I know what you mean about multiple reporters. That's why I designed it to harvest non-accumulating values in a scheduled background thread, rather than by reporters. In this way, it works with any number of reporters, and the unit tests validate this behavior.\nGood point about the Graphite function. I know that we can apply several nested functions (including derivative) to calculate GC throughput from the raw metrics, but we prefer to store the pre-computed value of this important summary metric for the sake of simplicity in our operations (people can see it without figuring out how to slice and dice the raw data from various garbage collectors). It's also nice to have all the other garbage collector metrics in a format that avoids additional calculations on the Graphite side. \nWe have been using this for a while at Orbitz, and I thought it might be useful to the broader community as well.\n. ",
    "dcoraboeuf": "Hi, do you know when the release of Metrics with support for InfluxDB is due? And in the meantime, which 3rd party library would you recommend to have an InfluxDB reporter?\nThanks,\nDamien.\n. ",
    "nsauro": "+1\n. ",
    "BorisNaguet": "+1\nThat could be a good start:\nhttps://github.com/sps/metrics-opentsdb\n?\nI haven't had time to test it yet...\n. ",
    "aditanase": "@ryantenney @BorisNaguet We're using the sps/metrics-opentsdb reporter with metrics3. It does not seem to be maintained anymore but I just sent in a PR to make it compatible with metrics5.\nhttps://github.com/sps/metrics-opentsdb/pull/21\nIf you're cool with us using it as a base I'm open to polish it up with the hope that it will end up in this repo as an official opentsdb reporter.\nCC-ing @sps.. ",
    "pvalsecc": "Example of use case:\nIntegration with statsd.\nThe current implementation doesn't send timer events right away but, collects them for a given period then sends 10 messages to statsd (max, mean, min, stddev, ...). This is not very well integrated with my other statsd metric coming from other softwares.\nHaving such feature would allow a better statsd integration.\n. Proposal here:\nhttps://github.com/pvalsecc/metrics/tree/streaming\n. @marshallpierce: saying something is expensive without actually trying can be surprisingly wrong in computer science. For example, your statement \"it allocates\" is invalid in the context of performance. Since java 1.7 (available but disabled in java 1.6), the JIT is doing escape analysis and uses the stack or even the registers for storing temporary objects. Therefore, nowadays, allocation doesn't necessarily mean bad perfs.\n@jmason: this is more a problem of the \"plugin\" using the event system to send them to another service. For example statsd uses UDP. If you put the socket in asynchronous, the OS or the network is going to drop some stats for you if it becomes too busy. But since UDP doesn't have any congestion control, unlike TCP, you may put your network to its knees. But still, IMHO, it's not the business of the event system within Metrics.\n. @marshallpierce, OK. Look at my proposal and point me to the places it adds significant performance problems for users not using the StreamingMetricRegistry but only the MetricRegistry.\n. @marshallpierce, hostility not intended. Sorry if I made you feel that and thanks for telling.\nMy usage of Metrics is maybe atypical, but I measure stuff in the range of 20ms. So, a bimorphic call is totally negligible compared to that. And it's as well very negligible compared to all the locking happening in the Reservoir used by the timer.\nNow about the decoupling. IMHO this would be overkill and counter productive for a few reasons:\n- You would have to use some queue which as some performance cost (contention and memory allocation on the heap because of the escape).\n- Handling stuff in another thread is quite costly as well (context switches, harder strain on the caches).\n- The libs that sends those events to other system most likely already have this decoupling (the statsd one I use has it).\n- I'm a big fan of the KISS principle.\n- you can always document in the event handler that processing in there must be extremely short.\nI can understand that if you send events every 10ns, those streaming events are a no go. But for people like me (around 20 events per seconds) it would be a nice feature.\nAnother solution would be to merge the small changes I did in the com.codahale.metrics package and move the com.codahale.metrics.streaming package to a plugin. That way if the user doesn't want streaming events, he doesn't load the streaming plugin JAR and the JIT will be able to inline Timer.update (for example) as before. Zero impact for \"nanoseconds\" people and \"milliseconds\" people would be able to stream events like happy campers.\n. ",
    "vladimir-bukhtoyarov": "@pvalsecc similar to this https://github.com/dropwizard/metrics/pull/1091 your solution missed register method which allow to add to MetricRegistry already instantiated metric, and this introduces following inconsistency:\n- Metric which instantiated outside registry will not produce events.\n- Metric which created by first registry but also registered in second registry will notify listeners only from first registry.. What is mean \"recorded\"? If I call instance of ExponentiallyDecayingReservoir(configured with size 1028) by 1000000 times, what is correctly value of size should be 1028 or 1000000?\n. In my implementation HdrReservoir,  I decided to disallow user to call this method, because nobody knows what is it and how it should work, and why this method is a part of public API.\n. Thanks Marshall, \nI sow your library, moreover I start my project from it. But your solution does not cover several corner cases which may be not interested for guys which use \"push\" as way to dilevery metrics to monitoring database. But my company uses Zabbix as monitoring system and \"pull\" delivery model. When I say \"pull\" I mean that monitoring system ask applications about their metrics. I understand that \"pull\" is bad way and modern databases like influxdb and graphite uses \"push\" model when application writes metrics to monitoring database, but I can not to do something with this, so Zabbix Java Proxy is used to collecting metrics. And your solution absolutely unsuitable for using with the Zabbix Java Proxy because:\n1. HdrHistogramResetOnSnapshotReservoir can not be used in case when more than one parameter of histogram should be saved in monitoring database. For example I want to store in Zabbix 95percentile and 99percentile. Zabbix proxy ask JVM via JMX about 95pecentile, snapshot taken in this point and histogram cleared, then proxy ask 99percentile via JMX but histogram already cleared in previous step, so 99percentile is wrong.\n2. Snapshot produces amount garbage which equals to histogram size, because you copy histogram each time when snapshot taken. But if I already know list of percentiles which I want to persist in monitoring database then I can copy only several bytes from source histogram and avoid full coping.\nI do not want to say that your library is bad, it is just not suitable for my use cases. Because of this I decide to create own solution. Additionally I covered many another problems which not so critical but nice to have to be fixed.\nAnd current issue #874 is only one problem which I have with my library. I do not understand why  \"size\" method is part of public API, there are no reasons to place it to Reservoir interface. I sow that you had similar problem with understanding of this method when create comment to your code\njava\n@Override\n    public int size() {\n        // This appears to be infrequently called, so not keeping a separate counter just for this.\n        return getSnapshot().size();\n    }\n. @marshallpierce \nSorry for trouble. When you say \"reporting pipeline\" do you mean some new concept which will be introduced to metrics-core v4 at the library level as first class citizen? Currently the lack of mediator between primary metrics and reporters leads to fundamental problem to show each measure to reporter once and only once, and in same time do not miss measures in case of many reporter. Of course this sort of problem is not actual for built-in to metrics-core reservoir implementations because all of its have a sampling nature and has no goals to achieve at most once delivery semantic, but sampling this is a very big problem by itself which leads to reporting obsolete measures at low event rate and potentially loses min and max measures at high event rate.\n. And another possible solution which does not lead to modification of MetricRegistry.\n- Introducing reporting transaction/session concept(instead of GaugeGroup from first message in thread) The each  reporters should do one reporting cycle in the scope of one transaction. To achive this it is need to add only 3 lines of code to basic class ScheduledReporter\njava\npublic abstract class ScheduledReporter implements Closeable, Reporter { \n...\n public void report() {\n        synchronized (this) {\n            ReportingSessionThreadLocalStorage.beginThreadLocalSession();\n            try {\n                report(registry.getGauges(filter),\n                    registry.getCounters(filter),\n                    registry.getHistograms(filter),\n                    registry.getMeters(filter),\n                    registry.getTimers(filter));\n            } finally {\n                ReportingSessionThreadLocalStorage.closeThreadLocalSession();\n            }\n        }\n    }\n...\n}\nAnd class reporting session can look like this:\n```\npublic class ReportingSessionThreadLocalStorage {\nprivate static ThreadLocal<ReportingSession> session = new ThreadLocal();\n\npublic static void beginThreadLocalSession() {\n      session.set(new ReportingSession());\n}\n\npublic static void closeThreadLocalSession() {\n      session.remove();\n}\n\npublic static Optional<ReportingSession> getCurrentThreadLocalSession() {\n     return Optional.ofNullable(session.get());\n}\n\n}\n```\n``` java\npublic class ReportingSession {\nprivate final Map attributes = new HashMap();\npublic Object getAttribute(Object key) {\n         return attributes.get(key);\n    }\npublic void setAttribute(Object key, Object value) {\n        attributes.put(key, value);\n   }\n}\n```\nSo, logically coupled Gauges can share common snapshot via setAttribute/getAttribute. Multiple open session can exists in same time in case of many reporters and this is not a problem because sessions are isolated from each other via ThreadLocal.\nI can implement this kind of fix in 15-30 minutes. And it looks better then solution from first post, because ReportingSession concept does not have risks to broke the backward compatibility.\n. Thanks a lot for explanation your plans for next major version. I glad to hear about v4.0. What is the progress of v4? Is it in the development phase? Did you published proposals to any public area? Anyway, please keep my use case in mind, you are exactly understand my needs. I think ability to expose the complex metrics via v.4,  should be the one of its readiness criterion.\nI am agree with you that exposing top-k(or another complex structure) as bunch of gauges is trick, but there is no other possibility to do it in 3.x version. Reusing of exporters is not a main my goal, it is not a big deal for me to copy&past few lines of code for several reporters, or just do monkey patching of existing reporters and keep it in private repository. What I really want to avoid that is re-inventing analog of \"slf4j\"  for metrics. If I will need to distinguish my metrics implementations from Dropwizard metrics, then soon I will begin to build an abstraction layer - \"smf4j\" simple monitoring facade for java :):):) But I really do not want to do it.\nI am sorry, I could be think a little bit more prior to open this issue. Today I found the solution how to solve atomicity problem without modification of basic classes. I will do it in similar way as described in second post in this topic, but point of extension will be the executor which used by ScheduledReporter. I will just wrap around the Runnable which reporter schedules to executor. The ScheduledReporter has constuctor which accepts executor as parameter. Of course, all existing reporter-builder do not accept executor as configurable parameter, but I think that it is mistake at the library level(at least for JEE environment). But this is another story is not related to current topic. I will prepare pull request for builders in few days in scope of another issue, maybe similar issue already opened, I'll try to find prior to create new.\n. In conclusion: I agree that would be better to leave v.3.0 as is. So, I close this issue in hope of v.4 will solve problem descibed in this issue.\n. I have started to work on this issue. I hope that task will be accomplished in one or two days, before \"4.0\" branch achieve \"beta\" status.. @svendiedrichsen What I need to do with current request? Should I rebase it to another branch?\n. @randomstatistic please look to the rolling-metrics library. It seems to me that HdrHistogram integrated to Metrics Core as first class citizen in scope of this library.. > This lends strength to the \"it should be in core\" argument, I'd think.\nIf everything will be in the core, then core will be too big, or totally unusable. It is better to follow Open/Closed principle and provide ability for external developers(like me or Marshall) to extend library by custom implementations.. I, too, was very surprised when I saw the method to decrement for counter.. Which reporter do You use to export metrics to StatsD? If it is source open? I can look to it and point to problem. IMHO, proper handling of counters should be done on reporter side. Of course you can use ResetOnSnapshotCounter from rolling-metrics, but I argue that fix on reporter side will be proper solution, just remember previous observed value from counter and report delta from current value of counter.. As I found from source code ReadyTalk/metrics-statsd, ReadyTalk/metrics-statsd send everything as gauge. The Gauge type in StatsD type-system means that nothing will be aggregated, in other words StatsD will just exactly resent to Graphite the data what provided without doing any useful work. So, first of all, I want to ask question, why you are not using Graphite Reporter built-in to Dropwizzard/Metrics?\nSecondly, looks like your problem can be solved at presentation layer without modification of anything in your pipeline. You just need to configure presentation tool (which you use to visualization of graphs) to draw  delta between values instead of presentation values as is. For example, in my company we are using Zabbix instead of Graphite and we report Counter as is, but graphs tuned to present values as deltas.. 1. Metrics core is general solution which is used including high-load applications. For example in my case, there are several applications which perform updating of metrics about 10000 times per second. Storing original timestamp is possible only for little loaded applications, because it require to store each source event independently from each other, and this leads to risk of OutOfMemoryError. To avoid OutOfMemoryError implementation need to store events outside its memory on the disk or network storage and this is risk to overload application(or network at whole) by IO. Please read metrics-thoughts\n to get deeper understanding.\nSo, as mentioned MetricsCore as general solution can not store timestamp of each event, it just sends single timestamp for batch of metrics. If You still need in this functionality then just implement own Timer, I hope you will understand all risk at moment of implementation.\n\nI am not so familar with Graphite(because I use Zabbix). But I believe that modern monitoring database must provide solution to aggregate counters. Read aggregation rules for Carbon. I did quick reading of this stackoverflow topic and I am sure that Carbon already provide functionality for counter aggregation.\n\n. Yes, Cassandra throws exception on snapshot extraction time, and it does it by design(not because of bug). Currently I am trying to promote this request which solves this issue CASSANDRA-13223. I hope I will achieve success after fixes for mentioned notes.\nI want to raise following thought: it is better to surround by try/catch the code places like this, because if any histogram throws exception then we have no reports at all. Missing of reports can lead to epic fail when something going wrong and you are unable to know how much wrong. I think that MetricsServlet should act in similar way and surrounds by try/catch each particular metric. And that why I do not use any built-in Dropwizard reporter, because I do not want to come in situation when reports are missed because of tricky bugs(like this #1104) or absurd design solution(like Cassandra).\n. I see following problems with this PR:\n- All third-party implementations of histograms, timers and counters will be broken by this change.\n- All client code which instantiates any metric directly through constructor will be broken.\n- The metric name must not be a private field of metric itself, because one metric can be added to multiple registers, and same metric can has different names in different registers.\nAlso the problem of listeners can be easy solved by using decorator pattern, without adding unnecessary complicity to the core of library.. @mrmanc,\n\nI\u2019m not sure that third party implementations histograms, timers and counters would be broken unless you\u2019re referring to the change to MetricSupplier?\n\nThere are many open-source projects like Cassandra or Rabbitmq Java Driver uses Dropwizzard/Metrics for monitoring and makes own implementation of timers or histograms. In general Metrics Core is well extensible, but absence of interfaces(only Gauge has interface) for metrics is worst drawback for extensibility. As result, there is only one way to provide own implementation would be subclassing already existed class from core. But subclass must call constructor of superclass and if already used constructor changes its signature then subclass will be broken. So each client which uses this kind of third-party libraries will decline migration to new version of metrics-core until thirdparty library will be compatible with new versions of metrics-core, and this creates the risks of community splitting.\n\nWhat do you think about retaining the previous constructors in a deprecated form? That way no client code would break, but measurements would be lost for code which wasn\u2019t updated.\n\nThis solution help to preserve backward compatibility, but introduces the point of inconsistency. Your request is heavy concentrated on flow when MetricRegistry creates the new Metric instance, but there is another flow when Metric firstly instantiated in client code through constructor and then added to registry, and that is why specifying listeners at construction time is undesirable, because code which creates new metric potentially is very far from MetricsRegistry and knows nothing about listeners which can be applied on metric.\n. > How would you feel about making the implementations mutable by adding an addMeasurementListener() method instead?\n@mrmanc I think it would be better to not change existing Metric implementations and MetricRegistry. You can easy achieve your goals by extending registry and metrics, else there is no clean and effective way to keep API and documentation in consistency.. @storozhukBM reporting of rates, does not depend from type of reservoir, timer configured with SlidingTimeWindowReservoir will report absolutely same rates as timer configured with ExponentiallyDecayingReservoir.. @behrangsa  Why do you interest only for rates and do not interest for latency distribution(histogram) of last n-minute events? I ask, because I am creator of rolling-metrics extension for Dropwizzards/Metrics, and request for rates without percentiles looks very strange for me, could you describe your use case s little bit?. General comment:\nChunkedAssociativeLongArray has only one properly synchronized method - put. The rest of methods: traverse, values, out, trim, clear and others are not properly synchronized, because do access to mutable fields of class Chunk without any synchronization.. Hi Bogdan,\nYou wrote that ChunkedAssociativeLongArray are designed to operate without additional synchronization. But after detailed look, I did not find any design solution in this class, which help to eliminate negative effect of evil dataraces which presented in ChunkedAssociativeLongArray multiple times. Nothing to prevent to concurrent mutation of same chunk, and concurrent reading and writing of same chunk, so I continue to blame ChunkedAssociativeLongArray as not properly synchronized code which eventually will crash monitoring. Just run following benchmark to observe how dataraces are evil:\n```java\npackage com.codahale.metrics.benchmarks;\nimport com.codahale.metrics.SlidingTimeWindowArrayReservoir;\nimport com.codahale.metrics.Snapshot;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.profile.GCProfiler;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\nimport org.openjdk.jmh.runner.options.TimeValue;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;\n@State(Scope.Benchmark)\npublic class SlidingTimeWindowReservoirsDataRaceBenchmark {\nprivate final SlidingTimeWindowArrayReservoir reservoir = new SlidingTimeWindowArrayReservoir(200, TimeUnit.NANOSECONDS);\nprivate AtomicLong sequence = new AtomicLong(1);\n\n@Benchmark\n@Group(\"contention\")\n@GroupThreads(2)\npublic void update() {\n    reservoir.update(sequence.incrementAndGet());\n}\n\n@Benchmark\n@Group(\"contention\")\n@GroupThreads(1)\npublic int getSize() {\n    int size = reservoir.size();\n    if (size < 0) {\n        throw new IllegalStateException(\"size must not be negative\");\n    }\n    return size;\n}\n\n@Benchmark\n@Group(\"contention\")\n@GroupThreads(1)\npublic Snapshot getSnapshot() {\n    Snapshot snapshot = reservoir.getSnapshot();\n    if (snapshot.size() != 0 && snapshot.getMin() == 0) {\n        throw new IllegalStateException(\"Zero was never recorded and should not present in snapshot\");\n    }\n    return snapshot;\n}\n\npublic static void main(String[] args) throws RunnerException {\n    Options opt = new OptionsBuilder()\n        .include(\".*\" + SlidingTimeWindowReservoirsDataRaceBenchmark.class.getSimpleName() + \".*\")\n        .threads(4)\n        .warmupIterations(10)\n        .measurementIterations(10)\n        .addProfiler(GCProfiler.class)\n        .measurementTime(TimeValue.seconds(10))\n        .timeUnit(TimeUnit.MICROSECONDS)\n        .mode(Mode.AverageTime)\n        .forks(1)\n        .build();\n\n    new Runner(opt).run();\n}\n\n}\n```\nBenchmark crashes in few milliseconds.\n```bash\nVM invoker: C:\\Program Files\\Java\\jdk1.8.0_101\\jre\\bin\\java.exe\nVM options: -Didea.launcher.port=7534 -Didea.launcher.bin.path=D:\\dev\\bin\\gui-tools\\IDEA\\IntelliJ IDEA 2016.3\\bin -Dfile.encoding=UTF-8\nWarmup: 10 iterations, 1 s each\nMeasurement: 10 iterations, 10 s each\nThreads: 4 threads, will synchronize iterations\nBenchmark mode: Average time, time/op\nBenchmark: com.codahale.metrics.benchmarks.SlidingTimeWindowReservoirsDataRaceBenchmark.contention\nRun progress: 0,00% complete, ETA 00:01:50\nFork: 1 of 1\nWarmup Iteration   1: 0,619 \u00b1(99.9%) 1,188 us/op\nWarmup Iteration   2: \njava.lang.NegativeArraySizeException\n    at com.codahale.metrics.ChunkedAssociativeLongArray.values(ChunkedAssociativeLongArray.java:76)\n    at com.codahale.metrics.SlidingTimeWindowArrayReservoir.getSnapshot(SlidingTimeWindowArrayReservoir.java:73)\n    at com.codahale.metrics.benchmarks.SlidingTimeWindowReservoirsDataRaceBenchmark.getSnapshot(SlidingTimeWindowReservoirsDataRaceBenchmark.java:47)\n    at com.codahale.metrics.benchmarks.generated.SlidingTimeWindowReservoirsDataRaceBenchmark_contention.getSnapshot_avgt_jmhStub(SlidingTimeWindowReservoirsDataRaceBenchmark_contention.java:371)\n    at com.codahale.metrics.benchmarks.generated.SlidingTimeWindowReservoirsDataRaceBenchmark_contention.contention_AverageTime(SlidingTimeWindowReservoirsDataRaceBenchmark_contention.java:282)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.openjdk.jmh.runner.LoopBenchmarkHandler$BenchmarkTask.call(LoopBenchmarkHandler.java:210)\n    at org.openjdk.jmh.runner.LoopBenchmarkHandler$BenchmarkTask.call(LoopBenchmarkHandler.java:192)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nRun complete. Total time: 00:00:02\n```\nAccording to jsstress - it is addional tool which can be helpful sometimes, but primary tool of any java programmer who creates concurrent code should be his brain and formal loggic described in JMM specification. If jcstress does not show errors, but code is not well formed synchronized according to JMM rules, that final decision about code correctnes should be taken according to JMM, violations of formal rules are quit enough to blame any code.\nAnd general note about dataraces:\nIn very few very limited cases, dataraces are acceptable, for example hashcode method of java.lang.String, But each place where datarace exists, should be well documented by tons of comments which describe why each particular datarace does not damage your code, especially in opensource, else nobody can mantain library in future.\nSorry if I'm not polite.. Now, It looks correct!. @arteam please take a look to this request.. @gboismal yes, you are right. CancellationException should be catched as well. \nIt was my mistake. As explicitly documented in javadocs for ScheduledExecutorService#scheduleAtFixedRate\n\nReturns:\na ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation\n\nAs dirty workaround you can catch this exception inside your code, and remove this workaround when fix will be released. . I`ll prepare fix for 3.2 and 4.0 branches. \nThe escalation reason is using mock instead of real executor service in ScheduledReporterTest line 35. I am going to replace mock by real executor for several test methods of ScheduledReporterTest, does anybody has objections?. Here bugfix https://github.com/dropwizard/metrics/pull/1170. All subclasses of ScheduledReporter use daemon threads by default. As you know daemon thread does not prevent JVM from shutdown, so ConsoleReporter can not be a reason of your problem.. Long datatype is not enough long to store sum in common case. For example when using the Long  for timer you are able to store only 192 year of accumulated latency then overflow will happen. > When using monotonous increasing counters you will miss just a single measurement.\nKeep in mind that you are unable to achive even monotonous increasing semantic on arithmetic overflow when using LongAdder. Because LongAdder splits it state to many chunks, and arithmetic overflow can happen in one chunk, simultneously on many chunks, in sum, and due to dynamic chunk count inside LongAdder the results is totally unpredictable when overflow happen.. > @vladimir-bukhtoyarov any suggestions for suitable sum storage type?\nI argue that this kind of functionality is not needed at core level. The problem can be easy solved by decorators. Anyone who firstly wants to have sum, secondly understands the risks related to overflow, can easily decorate any timer or histogram and implement sum reporting as separated gauge.\nOf course it is possible to replace LongAdder by DoubleAdder to pospone the overflow, but accuracy of sum will be significantly decreased.. Hello joschi ,\nIf you need detailed control for retention time you can use:\n- Built-in to core SlidingTimeWindowReservoir, but be careful if your event rate is high.\n- Third-party reservoir from Rolling-Metrics, which has stable memory footprint independent of event rate.. There is no simple answer, you need to make decision by yourself. \nRolling-Metrics advantages:\n- Garbage-free\n- Lock-free\n- Predictable and fixed memory footprint\n- Never loses min and max\nRolling-Metrics disvantages:\n- In comparision with ExponentialDecayingReservoir the average is not weighted.\n- Built-in SlidingTimeWindowReservoir has better accuracy because it stores each event independently, when Rolling-Metrics does not store events independently from each other, instead it relies on approximation algorithms implemented in HdrHistogram.. 1. Be sure that T1 and T2 use same time units.\n2. Does frequncy of events reported to T2 equal to frequency of events reported to T1?. @zharvey-welltok first of all - in-memory collection will not work for:\n- Cluster of servers, if welcome mail sent from one server and confirmation procedure happen on another.\n- Even in case of one server, in-memory collection does not survive the restart of server.\nYou already have a database, just store the time of welcome email within user record, and re-use it inside confirmation procedure:\n```java\n    @PutMapping\n    @ResponseBody\n    void onNewUserSignUp(@RequestBody NewUserSignUp newUserSignUp) {\n        // blah-blah\n   // remember timestamp of welcome email\n   user.setWelcomEmailTimestamp(System.currentTimeMillis());\n\n    // Create a User record in the DB, mark it as \"unverified\" so they can't log in yet.\n\n    // Send the user an email with a link they have to click to \"verify\" themselves.\n}\n\n@GetMapping('/{userId}')\n    @ResponseBody\n    void onClickVerifyLinkFromEmail(@RequestParam String verificationToken) {\n        User user = lookupFromVerificationToken(verificationToken);\n     long confirmationTimeMillis = System.currentTimeMillis() - user.getWelcomeEmailTimestamp();\n    Timer timer = metricRegistry.timer('new.user.signup');\n    timer.update(confirmationTimeMillis, TimeUnit.MILLISECONDS);\n\n    user.verified = true\n    // Save modified user back to DB\n}\n\n. @zharvey-welltok you need not to use TimerContext when usingupdatedirectly.. As you can see [source code](https://github.com/dropwizard/metrics/blob/4.1-development/metrics-core/src/main/java/com/codahale/metrics/Timer.java#L18), Context does not overridefinalize, and  [context initialization](https://github.com/dropwizard/metrics/blob/4.1-development/metrics-core/src/main/java/com/codahale/metrics/Timer.java#L111) does not register any reference, so you should not worry about GC. Just interact with context directly and avoid to use it insidetrystatement if you want to ignore exceptional cases.. exactly. Previous implementation was able to handle nanotime overflow without loosing anything.. Reading mutable fields without synchronization.trimandput``` do mutation of:\n- cursor \n- startIndex\n- tailChunk\nSo result can be totaly wrong, even negative.. ",
    "drallgood": "Just found this while trying to figure out why my app was failing when I tired to use Jetty 9.3.\nAny news when this will be merged?\n. ",
    "shivamsharma": "Ohh ... I didn't know it. But I think it is quite important feature. It can be use for many things.\n. ",
    "CodingFabian": "thanks, totally reasonable.\n. on this high level both sound kind of like the same for me. The second one sounds a bit more decoupled.\n. It still is a cood idea to reuse the comparator instance, but it shouldn't box the value\ncomparingLong() might also work. ",
    "bripkens": "Same here! Having health checks available via JMX would enable us to easily extend our monitoring.\n. Woah, this is great to hear @sivasamyk. Thank you very much! :)\n. ",
    "ariens": "+1 for continued JMX support--came here specifically looking for health check support.\n. ",
    "gdubya": "+1. We also use JMX for monitoring, and health check support would be very useful.\n. ",
    "sivasamyk": "I am trying to fix this issue. There are two options\n1. Extend current JMXReporter with a new static forRegistry method with HealthCheckRegistry argument  and a new builder\n2. A new HeathCheckJMXReporter class which will handle health check reporting.\nI prefer option 1. Let me know your comments.\n. On exploring further I see that I cannot implement option#1 since health check is a different module. I am going ahead with option#2.\n. sure, let me try it\n. Also moving JmxAttributeGauge class from metrics-core to metrics-jmx module. Any comments?\n. ",
    "robertjchristian": "Hi All,\nJust checking in to see what the current status of \"JMX support for HealthChecks\" is.\nI have a use case - use the Healthcheck module to expose a GREEN/RED/YELLOW-like status in JMX, with ability to manual re-run Health Checks from JMX console.  Keeping in mind that it can be expensive to run these tests, especially on a production system under load.\nI'm considering using a Cache Gauge to work around the existing limitations.  This was suggested in a google groups thread that I'm now unable to find...\nAny and all advice greatly appreciated.\nThanks,\nRob\n. I found the post by Zachary St Lawrence:\nhttps://groups.google.com/forum/#!msg/metrics-user/-w4vMI_hKdE/UTXtdnzc7CcJ\nI was just hacking around this very problem this week so I have a pretty good idea what is going on here.  \nThe JMX Reporter has to register mbeans for each value to report.  The central problem here is Healthchecks do not have a value.  Instead you need to execute a healthcheck, get a Result, and then publish the result.  One reason no one has coded this up is in many cases these checks are non-trivial and not something you want to run too frequently.  \nIn the end it boils down to : \nMetrics are a snapshot which can be published trivially.\nHealthchecks are a test to execute with an undefined performance impact.\nOnce I understood the problem better I decided I did not want to publish my own healthchecks this way.  i chose instead to use a Console or Slf4jReporter (I wrote my own) because that also let me track healthcheck status over time.  Where JMX only gives you that if you have something attached and recording state when the problem occurs.  It is not as useful for debugging after the problem has occurred.\nIf you still wish to publish healthcheck but want to limit the published rate to reasonable frequency one workaround is to create a CachingGauge at the same time you create the healthcheck and use it execute the healthcheck and publish the state at a predetermined rate so that it can be viewed along side other metrics.  It isn't ideal but it is less work than adding HealthCheckRegistry Listeners, adding a new mbean for each healthcheck and dealing with possible performance issue of running checks frequently.\n. ",
    "vladhid": "What are the odds that JMX will see the 4.0 version? JMX reporting was found to be the most suitable in the situation with many little services for monitoring with Zabbix.\n. ",
    "sjoerdtalsma": "Any news on this?\nOr are we forced to use a different InstrumentedExecutorService for each call that we want to have timed?\n. ",
    "edwkar": "+1. Are there any updates on this? :-)\n. ",
    "suspended": "why did you tag my username?\n. ",
    "aphalke": "Any update on this? @marshallpierce its not working for me :( event type that I am getting is         RESOURCE_METHOD_FINISHED, and its checked as Type.Finished. ",
    "dk14": "Is there any protection from metrics registry overflow in case if a lot of metrics with same name (and tag name), but always different tag value was submitted?\nBasically I had to do it for my project, because there were some cases where people were submitting requestId as a tagName (and guess how many metricNames were stuck in MetricsRegistry assuming that requestId is unique), so I gave them a value-count-limit per metric+tagName (and used CAS-based ring to allow more-or-less fare tag-value distribution and quick rolling of such values - but now I realized that best way is to remove ignore broken tagName). Even assuming that it's not a good idea to submit things like that, the true is that it's hard to trace such kind of mistake, besides they can be a real time-bomb for a project.\n. ",
    "mcpate": "Looks like this is happening when InstrumentedHandler::doStart is called.  A Ratio object is returned that can have a value of \"NaN\".  I'm not sure if this should be checked/updated when the metrics are queried or if it would be better to return \"NaN\" and have the parsers (in my case dogStatsD) handle the \"NaN\" value?\n. Yeah, it causes dogStatsD to write an error:\ndd.dogstatsd[15]: ERROR (dogstatsd.py:308): Error receiving datagram\nTraceback (most recent call last):\n  File \"/opt/datadog-agent/agent/dogstatsd.py\", line 296, in start\n    aggregator_submit(message)\n  File \"/opt/datadog-agent/agent/aggregator.py\", line 599, in submit_packets\n    parsed_packets = self.parse_metric_packet(packet)\n  File \"/opt/datadog-agent/agent/aggregator.py\", line 474, in parse_metric_packet\n    raise Exception('Metric value must be a number: %s, %s' % (name, raw_value))\nException: Metric value must be a number: cns.io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-5m, ?\nIn looking at the dogstatsd.py script it is basically trying to cast the \"value\" to a numeric type.\n. ",
    "wicknicks": "That's a good point. \nOur parent project has an HTTP endpoint which shows the current status of all metrics. Behind-the-scenes, it is a custom made reporter, which \"prints\" numbers in <html>.  Also, we have custom reporters which send the numbers over to TSDB. Having a single-point-of-contact reporter is beneficial than having many of them running in the background. Each time I add new a library/registry, I would have to update the reporter logic to write the <html>. If we can create hierarchies, then all it would take is one line of code:\nparent.register('prefix-for-all-metrics',  childRegistry)\nAnd all the reporters which work on the parent registry will automatically pick up the new registry.\nEDIT: grammar\n. @ryantenney: any thoughts on this?\n. Thanks very much, @ryantenney. BTW, I'll be happy to help you implement this.\n. Really like the bind and unbind APIs proposed by @c2nes. \n. ",
    "c2nes": "I think this is already kind of supported. MetricRegistry implements MetricSet which means register will accept it and simply add all the metrics from the \"child\" to the \"parent\". However this only copies the metrics registered with the child at the time register is called on the parent. Any metrics registered with the child after this point will be unknown to the parent.\nWe use Dropwizard Metrics pretty extensively where I work and we've patched over this using a MetricRegistryListener which actively propagates metrics additional/removal from the child to the parent.\nWe've found this parent/child registry pattern useful for a couple reasons,\n1. Namespacing. We can create a child registry under a prefix so we don't have to specify the prefix in each place we create/register a particular metric (a la top-of-class Logger declaration). We only need to specify the prefix once, when we create the child registry.\n2. Incorporating external components. We have libraries which expose internal metrics through a MetricRegistry created by the library. By having the library manage its own registry we don't need to be concerned with piping a client-provided MetricRegistry + prefix through the library code.\nIn both of these cases we could create a reporter per registry, but we find this is more cumbersome for us. Some of our MetricRegistries are created during runtime rather than bootstrap time. Its simpler for us to attach/detach these to a parent registry than to dynamically stop/start new reporters. We also commonly have multiple reporters (JMX and Graphite typically) so in these cases we would need to start/stop a new reporter of each variety for each registry created. Lastly, it is nice that with the Graphite reporter and a single registry that we only need to establish a single connection per reporting interval instead of one per registry.\nI think a couple additional MetricRegistry methods could be useful for these purposes,\n- MetricRegistry usingNamespace(String name) - This would return a view of the registry within a namespace. All register/add/get methods would implicitly use the namespace when delegating to the source registry.\n- void bind(String name, MetricRegistry child) - This would attach the child registry to the parent. All existing metrics would be added with name used as a prefix (this much is the same as register). Additionally all future modifications to the child will be reflected in the parent in the same manner.\n- void unbind(String name, MetricRegistry child) - Undoes a previous bind call.\nThoughts?\n. ",
    "randomstatistic": "For the record, I'm particularly interested in the idea of namespaced registries, and the usingNamespace method sounds like exactly what I want.\n. +1\nI spent some time digging through the code in order to satisfy myself that my highly multi-threaded usage based on SharedMetricsRegistries would work out ok.\n. Hm, apparently my change to the documentation caused the ExponentiallyDecayingReservoirTest to fail, and only on Java7. That... seems unlikely.\nAre the tests flaky on Travis/3.1-maintenance?\n. My phone and I can't find how to trigger that without pushing a commit. I can do that, but not until, well, probably tomorrow. \n. Happy to help. \nSix minutes. That must be some kind of PR-acceptance record for me. :)\n. Looks like something similar was discussed in Issue #842.\n. I have the feeling the case is uncommon due to ignorance, rather than desire. Any histogram intended to track latency might benefit. My use case is simply that I have services that take traffic, and I want to be able to notice if there are latency issues. \nPredicting the rate could be interesting, but I think the primary thing would be to catch issues where the service stops responding, for example due to GC pauses.\n. Well, traffic is predictable enough, but does change sometimes. By \"tricky\", I was mostly griping about rate changes driving a code change. Anyone considered tying this to a Meter?\nMore generally, my immediate intent with this issue was mostly just to discuss why HdrHistogram isn't the default reservoir for Metrics-Histograms. Are there cases where the current ExponentiallyDecayingReservoir is a better choice? Is it more about code compatibility? Performance? Simplicity?\n. I gather it was related to doing the right thing around concurrency. Coincidentally, I also filed Issue #1021 on that subject.. @vladimir-bukhtoyarov Thanks for the pointer, interesting.\nSo now I'm aware of two distinct hdrhistogram-as-a-metrics-reservoir implementations. This lends strength to the \"it should be in core\" argument, I'd think.\n@saadmufti has a good point though, about metrics lifetimes and reporting. I agree that HDR doesn't feel right unless you're doing resetOnSnapshot, which classic metrics types don't assume.. ",
    "veigap": "I also consider this really useful, it would be useful to have a tree of registries each one mapped to predefined prefix.\n. ",
    "henryptung": "@c2nes Makes sense, and agreed that this is useful. Would like to add though that I think usingNamespace and bind/unbind are redundant here; we should probably only use one or the other. Of these two, I think I like the latter slightly more, for a few reasons:\n- If I understand correctly, the usingNamespace API implies the creation of a filtered view; there is still only one true MetricRegistry, but the view filters to metrics matching namespace (removing the namespace as it returns) and will also add metrics under the same namespace in the true MetricRegistry. This is reasonable, but would not allow incorporation of a pre-created child MetricRegistry instance, the way bind/unbind instance does (i.e. I would need to inject my namespaced/filtered MetricRegistry view into the child, which may/may not be possible).\n- bind/unbind is explicit about lifecycle, and allows clean detachment of child registries and metrics from the parent at will. No concerns about leaked Metrics hanging around before/after, etc.\n- Reporters are clearly separated between parent and child, and semantics are \"obvious\" (at least to me, at the moment).\nFor the most part, if I understand correctly, usingNamespace could be approximated by creating a child registry, binding it with the appropriate namespace, and returning that.\nAs a side benefit, the separation of bind from registerAll also highlights the stateful vs. non-stateful nature of the two methods. As a tradeoff, it does seem like a bind/unbind API would have to be careful to avoid name collisions between parent and child registries (or else :fire:).\n. ",
    "laurentvaills": "Hi.\nWe're also interested by this feature. \nWith my colleague @violette we ended with a sub class of MetricRegistry that subscribes a listener to a parent MetricRegistry.  Then the parent is notified when a metric is added or removed.\nHere is how we plan to use it : \njava\nHierarchicalMetricRegistry rootRegistry = new HierarchicalMetricRegistry();\nHierarchicalMetricRegistry childFoo = rootRegistry.child(\"foo\");\nHierarchicalMetricRegistry childFooBar = childFoo.child(\"bar\");\nHere is the class : \n```java\npublic class HierarchicalMetricRegistry extends MetricRegistry {\npublic HierarchicalMetricRegistry() {\n}\n\npublic HierarchicalMetricRegistry(String prefix, MetricRegistry parent) {\n    addListener(new ForwardingMetricRegistryListener(prefix, parent));\n}\n\npublic HierarchicalMetricRegistry child(String prefix) {\n    return new HierarchicalMetricRegistry(prefix, this);\n}\n\nprivate static class ForwardingMetricRegistryListener implements MetricRegistryListener {\n    private final MetricRegistry metricRegistry;\n    private final String prefix;\n\n    /**\n     * Creates a new {@link ForwardingMetricRegistryListener}.\n     *\n     * @param prefix\n     *     The prefix to link to, not {@code null}.\n     * @param metricRegistry\n     *     The parent {@link MetricRegistry}, not {@code null}.\n     */\n    public ForwardingMetricRegistryListener(final String prefix, final MetricRegistry metricRegistry) {\n        this.prefix = checkNotNull(prefix);\n        this.metricRegistry = checkNotNull(metricRegistry);\n    }\n\n    /**\n     * Returns the fully qualified name of the object.\n     *\n     * @param name\n     *     The name of the gauge, of the counter, etc.\n     * @return The complete name of the Metric, such as 'foo.bar.quix'.\n     */\n    private String fullyQualifiedName(String name) {\n        return prefix + \".\" + name;\n    }\n\n    @Override\n    public void onGaugeAdded(String name, Gauge<?> gauge) {\n        metricRegistry.register(fullyQualifiedName(name), gauge);\n    }\n\n    @Override\n    public void onGaugeRemoved(String name) {\n        metricRegistry.remove(fullyQualifiedName(name));\n    }\n\n    @Override\n    public void onCounterAdded(String name, Counter counter) {\n        metricRegistry.register(fullyQualifiedName(name), counter);\n    }\n\n    @Override\n    public void onCounterRemoved(String name) {\n        metricRegistry.remove(fullyQualifiedName(name));\n    }\n\n    @Override\n    public void onHistogramAdded(String name, Histogram histogram) {\n        metricRegistry.register(fullyQualifiedName(name), histogram);\n    }\n\n    @Override\n    public void onHistogramRemoved(String name) {\n        metricRegistry.remove(fullyQualifiedName(name));\n    }\n\n    @Override\n    public void onMeterAdded(String name, Meter meter) {\n        metricRegistry.register(fullyQualifiedName(name), meter);\n    }\n\n    @Override\n    public void onMeterRemoved(String name) {\n        metricRegistry.remove(fullyQualifiedName(name));\n    }\n\n    @Override\n    public void onTimerAdded(String name, Timer timer) {\n        metricRegistry.register(fullyQualifiedName(name), timer);\n    }\n\n    @Override\n    public void onTimerRemoved(String name) {\n        metricRegistry.remove(fullyQualifiedName(name));\n    }\n}\n\n}\n```. ",
    "karlthepagan": "I'm interested in this feature. I would like to create a MetricSet where the members are dynamically discovered.\nMy use case is a count of active members in a table: SELECT key, COUNT(id) FROM table GROUP BY key;\nI would like to avoid the complication of re-discovering new keys between deploys.. ",
    "mkumargithub": "thanks a lot for prompt response, sorry by mistake i had asked this question.\n. is there any way to get code for 3.1.2 version?\n. ",
    "lazyval": "\nwe have the situation that in some places, we might not have graphite available at all. so i would like to be able to tell the graphite reporter to stop reconnecting.\n\nIf it is not available at all, why bother with disabling reconnection (and making one connection attempt) -- pick no-op reporter instead (or, do not start it)\n. ",
    "rmalchow": "Because it is the same war file. I could build a configuration with a\nswitch on top ... But why not build the switch into the reporter?\nAlternatively, i could try to add a setting for a pause ... The situation\nis now that reporting every 10 seconds causes a lot of log file pollution,\neven if graphite just disappears for a while. So instead of completely\nstopping to reconnect, there could be a setting that says \"try again in N\nseconds\" ~ would you find that more useful?\nOn Aug 6, 2015 12:21 AM, \"Kostya Golikov\" notifications@github.com wrote:\n\nwe have the situation that in some places, we might not have graphite\navailable at all. so i would like to be able to tell the graphite reporter\nto stop reconnecting.\nIf it is not available at all, why bother with disabling reconnection (and\nmaking one connection attempt) -- pick no-op reporter instead\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropwizard/metrics/pull/845#issuecomment-128056820.\n. \n",
    "jillesvangurp": "We use Java 8 and it would be nice if HealthCheck was a functional interface instead of an abstract class. That way we could use lambda functions to quickly create health checks without a lot of boiler plate for the inner class. \nThe execute method in the class could move elsewhere probably. Unfortunately it is public and non-final, which suggest that somebody might be overriding this. Or if you want to keep the abstract class, it could be renamed to AbstractHealthCheck and implement a new HealthCheck interface. This would be a backwards incompatible change. Alternatively, the interface could have a different name. \nAnother interface that would be nice is something similar to the MetricSet interface to indicate that a class provides a HealthCheck. I actually created one for our spring setup along with a spring context listener that registers all health checks.\n``` java\npublic interface HealthCheckProvider {\n    HealthCheck healthCheck();\n}\npublic class HealthCheckContextListener implements ApplicationListener {\n    private static final Logger LOG = LoggerFactory.getLogger(HealthCheckContextListener.class);\nprivate final HealthCheckRegistry healthCheckRegistry;\n\npublic HealthCheckContextListener(HealthCheckRegistry healthCheckRegistry) {\n    this.healthCheckRegistry = healthCheckRegistry;\n}\n\n@Override\npublic void onApplicationEvent(ContextRefreshedEvent event) {\n    // register health checks provided by other beans\n    Map<String, HealthCheckProvider> healthCheckProvidingBeans = event.getApplicationContext().getBeansOfType(HealthCheckProvider.class);\n    for(Entry<String, HealthCheckProvider> e: healthCheckProvidingBeans.entrySet()) {\n        LOG.info(\"health check \" + e.getKey() + \" \" + e.getValue().getClass().getName());\n        HealthCheck check = e.getValue().healthCheck();\n        healthCheckRegistry.register(e.getKey(), check);\n    }\n    // register any health check beans registered directly\n    Map<String, HealthCheck> healthCheckBeans = event.getApplicationContext().getBeansOfType(HealthCheck.class);\n    for(Entry<String, HealthCheck> e: healthCheckBeans.entrySet()) {\n        LOG.info(\"health check \" + e.getKey() + \" \" + e.getValue().getClass().getName());\n        HealthCheck check = e.getValue();\n        healthCheckRegistry.register(e.getKey(), check);\n    }\n}\n\n}\n```\n. ",
    "yeputons": "After further investigation I found that that I'm wrong here and everything was working as I wanted, it's the source data which had problems.\n. ",
    "jmkgreen": "This fits our observations of inaccuracies. In our case most of the \"traffic\" we are measuring occurs within a limited time window each day, probably quite a common pattern.\nThe customisation by using a separate histogram implementation may be a workaround however there are now a number of libraries making use of Dropwizard Metrics under the hood (Apache Camel in our case) and thus the indirection makes such adjustments heavy work if not impossible. There also does not seem to be an up-to-date artefact within Maven Central :(\n. I think changing the default type within a project would be a step too far and may cause more confusion particularly for dependencies as you suggest.\n\nWhich artifact are you referring to?\n\nSee http://search.maven.org/#search%7Cga%7C1%7Chdrhistogram - I have not attempted to set Maven to use both Central and jcenter since I've never had the need nor do I immediately have the time to look at it.\n. ",
    "timezra": "Just out of curiosity, was this closed because there is a separate pull request open for it or because the request for feature has been rejected? Thanks, -Tim\n. Thanks, Ryan. I find riemann integration more interesting as well and am glad you picked that one :-) Just out of curiosity, is the rearchitecture planned for the next release and when are you targeting the next release?\n. ",
    "dernasherbrezon": "Haha. Looks like we both implemented collectd support: \n. https://github.com/dropwizard/metrics/pull/871\n. ",
    "vincentbernat": "Is there any reason that both this PR and #871 are not moving forward anymore?\n. ",
    "jonnywray": "Just an FYI in case you're not aware, but the Riemann Java client already includes a metrics reporter. I'm using it very successfully. \n. ",
    "pcornelissen": "I just stumbled on the deprecated classes.\nI don't understand why you don't also add a hint what to use instead?\nHaving a deprecated  annotation on a class without pointing out the replacement means that the given feature will soon no longer be available, which isn't the case here because they more or less just moved to a different package, right?. It's not really a migration issue, it's an annoyance ;-)\nDeprecating stuff is good and should be done more often, but as I said,\nthen you should have a link in the sourcecode/javadoc to the replacements\nor maybe an explanation why this will go away (and when if already decided)\n2017-09-28 12:17 GMT+02:00 Artem Prigoda notifications@github.com:\n\nThis issue is about the 4.0.0 version which had a lot of incompatible\nchanges and were never released. Do you have issues the 4.0.0-alpha3\nversion from the central repository? It should be mostly compatible with\nthe 3.2 version, but I will gladly hear about migration issues.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/857#issuecomment-332793239,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABH3YOXArvDvgB-Io1GIQIcayMOoBeqCks5sm3JUgaJpZM4Fp4L-\n.\n\n\n-- \nMit freundlichen Gr\u00fc\u00dfen,\n  Patrick Corneli\u00dfen\n  http://www.pcornelissen.de\n  http://www.orchit.de\n. ",
    "vrcar": "Ok, I miss that... Then use the http verb + path instead of class name + method name? I can try to arrange it if it's the right approach.\n. ",
    "edwardsb": "@mtakaki I did as you suggested, and got\njava.lang.NoSuchMethodException: Could not find a suitable constructor in com.mywebservice.InstrumentedResourceMethodApplicationListener class.\n. I am using 0.9.x.\nI copied your gist in and its no longer throwing the suitable constructor error.\nThough I am now getting null pointers on exception metered methods of sub-resources. For some reason my top level resources that have @Timed, @Metered, and @ExeptionMetered are getting registered on startup, but sub-resource still don't look like they are in the maps of timers, meters, and exception meters.\nUltimately this line is called:\n                        final ExceptionMeterMetric metric = this.exceptionMeters.get(chooseName(annotation.name(), annotation.absolute(), handlerClass, definitionMethod));\nand since there is nothing in the map with that key, metric is null and then we call a method on it.\nDo you register your sub-resources with the Jersey environment? I tried that too and it wasn't working.\n. @mtakaki Yes here is a gist of what I am working with: https://gist.github.com/edwardsb/0a8d232c66bf54f0b75a\nThanks for the help. Do you mind if I message you on twitter?\n. ",
    "leeavital": "This is something we would find useful as well. I'd be glad to help in any way :)\n. ",
    "rkalicinski": "Is it possible to merge those commits?\n. ",
    "selotape": "Hey @arteam , I notice you added this feature to the 4.1.0 milestone.\nDoes that mean this feature is in the works? or is it still up for grabs?. ",
    "rodionos": "We were actually planning to provide corporate support behind this code, minimizing the maintainers' time. It would be really useful if you had a note in project documentation saying that master is closed to any integrations outside of maintainers' scope. At least we would have reached out to you before writing code and then seeing it dumped.\n. Makes sense, too bad we missed it. Have you thought about abstracting reporter code under a 'universal' driver/reporter so that concrete implementations can be plugged in simply by specifying class name, not unlike logger class in logback/log4j configuration?\n. Ok, thanks for the info.\n. ",
    "zhaohangbo": "It's a good idea. I am also interested in creating collectd reporter\n. ",
    "sirlordt": "Excelent idea... please implement this.\n. ",
    "jiming": "hi Ryantenney,\nAny plan for v4 release? Or could you please tell me which class is the one you done in master? Eagerly to see the feature!\nThanks a lot and have a nice day!\nJiming\n. Dear Ryantenney,\nThanks for your quick and detailed reply:)\nAre you going to support aggregate the report for same metric name? Such as I would like to query the report for metric \"accessApi\" with follow condition:\n1. accessApi: get total access count\n2. accessApi(status=success): get total access count which were success\n3. accessApi(status=failed): get total access count which were failed\n4. accessApi(status=failed,source=web): get total access count which were failed and source is web\nAnd one more important question, any plan for release date?\nHave a nice day!\nJiming\n. ",
    "gracew": "+1, this feature would be very useful for my work! do you have an estimated release date?. ",
    "kilotaras": "AutoCloseable doesn't extend Closeable (no idea why though). Removing it would be a breaking change.\nhttps://docs.oracle.com/javase/7/docs/api/java/lang/AutoCloseable.html\n. Here you go.\n. ",
    "juretta": "There is a race condition in the current approach. \nMaterialising the future and calling the callback methods is not an atomic operation. See org.apache.http.concurrent.BasicFuture so the timer is being stopped with a potential delay (i.e. the future is already \"done\" but the timer hasn't stopped yet).\norg.apache.http.concurrent.BasicFuture does the right thing as you don't want to call out to foreign code from within a synchronised block. \nI don't think it's necessarily a problem (worst case is that the timer slightly overreports) but wanted to point it out.\n. Anything I can do to help getting this merged?\n. Just checking in after another 2 months. Is there anything I can do/help with to get this over the finish line?\nThanks!\n. I don't have any opinion on whether this should be a separate library or not. \nBut this is not a change due to any API changes in AHC. This is simply a bug in the the InstrumentedNHttpClientBuilder based on (I'm assuming) a misunderstanding on what's going on here. This change could have been in any bugfix/patch release as far as I'm concerned.. This seems to be slated for 4.0.0? As it stands metrics are broken for the async http client. Can this be merged and release in a 3.x release as it really is a bugfix?. Thanks @arteam ! \nI think https://github.com/juretta/metrics/commits/fix-metrics-httpasyncclient-timing-3.1-maintenance-with-local-server might be helpful. That's where I started before I changed it to target the then current master branch.\n. I think this should be re-opened. Request execution timing for the httpasyncclient is essentially broken.. I think my point is that this is a bug in the library as the request execution measurement is simply wrong. As a consumer of the library I'd expect the issues to reflect the state of the library instead of splitting issue tracking and open PRs. But that's just me maybe \u00af_(\u30c4)_/\u00af. ",
    "robinst": "Any updates? The current implementation of metrics for the async client is non-functional.\nThe PR's changes to the production code is fairly small, most of the changes are tests that ensure the behavior works now.. ",
    "devenv": "Configurable number of the decimal digits sent would be nice too :/\n. ",
    "vjkoskela": "I completely agree. We are writing an interop layer between our library and Codahale metrics. Code already using Codahale metrics will be able to output data through our library. We need to create an instance of Timer.Context in order to satisfy the contract of Codahale's Timer in our library where we subclass Timer. Internally, this is being used in an extension of DropWizard to get it to interoperate with existing metrics infrastructure. Happy to discuss this further if you would like more details.\n. @ryantenney any further thoughts on this?\n. Fair enough. Is there a mailing list or issue I can subscribe to for updates about the release of version 4?\n. ",
    "AhmedDaraz": "Ok, So what do you see with this pull request ?\n. Thanks Ryan\n. ",
    "amirkibbar": "Hi,\nYou\u2019re right it\u2019s basically the same thing. Looks like I should\u2019ve googled more before writing my own, would\u2019ve saved me the trouble\u2026\nThanks,\nAmir\n. ",
    "ingwarsw": "Our company also would benefit from such feature..\nAny help needed to make it possible?\n. Will try.. \nDo i read correctly that url for test should be in format heatlh/nameOfHealthCheck ?\n. @ryantenney Will it be possible to add it after adding tests and other required stuff or its not desired feature at all?\n. Tests was actually easy :)\nI refactored it a bit.. but I dont want to create other PR.\nHere it is..\nhttps://github.com/dropwizard/metrics/compare/master...ingwarsw:individual-healthchecks?expand=1\n. Actually that method throws NoSuchElementException when check is not found.\nYou should create method that would check if that check exists and only then call method.\nIf check is not existing you should return empty map so responses (all/one) would be consistent.\n. ",
    "akobiakov": ":+1: \n. ",
    "kleewho": ":+1:\n. ",
    "chernetsov": "Why is this still not merged?\n. ",
    "patrox": "@jplock, @ryantenney - can you please share an estimate when this can be merged and released ?\nAs we have to maintain a separate fork of dropwizard-metrics with the above fix,\nwhich is a bit painful.\nI can rebase it - as it seems that it got a bit outdated since it has been published,\nbut we would like to have it merged - as it seems that not only we are affected.\n. thanks @ryantenney - I'll post a PR today.\n. @ryantenney a little bit later than originally planned, but here it is: https://github.com/dropwizard/metrics/pull/920\nCould you please have a look, whenever you'll have time ?\n. @ryantenney I was wondering if you could have a look at this PR and let me know if you have any comments (positive or negative) ?\n. @ryantenney Just reminding you about this PR, would really love to get some feedback from you,\nso we don't need to keep a separate fork with the change.\n. Hi @ryantenney @arteam,\nI'm wondering, if the changes from this PR were released as part of some of the latest releases ?\nCause I checked, and I couldn't find them :( Can you please check ?. thanks @jplock & @arteam, I appreciate your prompt responses. @arteam, @jplock Sorry, I was away for few days, enjoying some short vacations and St. Patrick's day.\nThanks for pulling it in !. ",
    "clenart": "would love to see this make it in - it's awkward to mix xml based logger config + InstrumentedAppender\n. ",
    "swehner": "Hey,\nSorry for the delay - I've added a testcase for this and rebased the branch on top of the master.\nCheers\n. ",
    "brewkode": "Guys - just wanted to see if there's any plan to do a release of metrics-core. I've been playing with the tag support functionality and we like it. I wanted to know if there's a release scheduled for it?\n. ",
    "Fuud": "any updates on this?\n. @arteam It is not same thing. 3rd party libraries still will use default counters and histograms. But this PR will change all implementations to specific one.. ",
    "tkp1n": "With a Gauge you provide a callback which is evaluated when the gauge is measured.\nI'd like to be able to explicitly set the value (like a Counter#inc()). To have a metric for values which I receive from an external source and which are unfortunately nondecreasing.\n. ",
    "oliverlockwood": "@ryankennedy thanks for the pointer; I thought I'd looked for that possibility but obviously missed it.  It may well be a classpath issue - I'll look into that now.\n. Confirmed.  The joys of trying to upgrade from 0.7.1 to 0.9.2!  Thanks for your time, I'll close this issue now.\n. ",
    "bwhaley": "Note that PR #899 may fix this as well, though it seems inefficient to close & reopen a socket for every report.\n. I'm no stranger to Java DNS caching issues, that could very well be at fault here. Are you suggesting I should set networkaddress.cache.ttl to match the ELB's TTL (which is 60s)?\n. Will try to pass -Dsun.net.inetaddr.ttl=60 to the app's startup options.\n. Can confirm the socket is not closing, so no new connection and hence no DNS lookup, though that setting is possibly also needed. Here's how I tested - \ncollectd & java clients <=> ELB <=> 2xCarbon-relay\nWhen an ELB's connections to its listeners are reset, it also closes connections to its clients. So I can induce a CLOSE_WAIT by restarting the carbon-relay processes. \nFirst, collectd and java both in CLOSE_WAIT following the carbon-relay restart:\n$ sudo netstat -pan | grep 2003  | awk '{print $6,$7}'\nCLOSE_WAIT 8077/collectd\nCLOSE_WAIT 1227/java\nAfter some time, collectd kills the CLOSE_WAIT, does a DNS lookup (witnessed via sudo tcpdump -vvv -s 0 -l -n port 53) and has a new connection. Java remains in CLOSE_WAIT and has a bad time.\n$ sudo netstat -pan | grep 2003  | awk '{print $6,$7}'\nCLOSE_WAIT 1227/java\nESTABLISHED 8077/collectd\nFun fact, I debugged the same problem in collectd/collectd#1104.\n. +1 to closing the socket in send() \nStill, java.net.Socket isConnected() only confirms the socket has been connected at some point. It is not a connection test, which is what report() is looking for before it starts writing (here). Seems like Graphite isConnected() should determine what the state of the connection is, not only the socket. \n. This one cropped up again recently when the ELB IP addresses rotated. I observer the metrics reporter holding on to the CLOSE_WAIT socket indefinitely. So though Miguel's analysis seems correct and the socket should be null (e.g. via Graphite close()), it is in fact still in CLOSE_WAIT and the reporter continues to send data over the dead socket. \n$ sudo netstat -anp | grep 2003\ntcp        0      0 www:45896         yyy:2003           ESTABLISHED 4566/collectd\ntcp        1      0 xxx:45759           zzz:2003           CLOSE_WAIT  4411/java\n$ sudo tcpdump src port 45759 and dst port 2003\n[Lots of traffic from java over the CLOSE_WAIT socket]\n. ",
    "timothyshelton": "Yes, correct, the reconnect is not being triggered.\n. ",
    "miguelnmiranda": "You shouldn't need to close the socket on send(). Event if Graphite isConnected() is unreliable and it causes a failure on either Graphite flush() or Graphite send() it will result in Graphite close() to be called (assuming IOException is thrown). You lose the current tick, but next time the scheduler comes around Graphite socket will be null and it will try to reconnect.\nSo the current behavior is already to reconnect when SocketException is caught although not immediately.\nIf something other than a IOException or RuntimeException is thrown the scheduler will stop without logging that it did. On the current HEAD of master the catch on GraphiteReporter report() was changed to Throwable forcing a Graphite close() no matter what.\n. ",
    "yogeshnath": "Was there any solution to this? We are running into the same issue and decided to go with static IP on the relay as oppose to going through the ILB.\n. ",
    "rahuljain1804": "Hi @ryantenney, I am using metrics-core 3.1.0 for jmx reporting but unable to see @Timed working at resource level. Can you tell me which version supports @Timed at resource level?\n. ",
    "neilcronin": "Yup, I agree that formatting code could be simplified, I did that in the latest commit.  Also you are right that truncation happens anyway, so this is not introducing any new loss of precision. \n. Hi @jplock, any chance of getting this merged?  We've been running with our fork in production for almost 6 months without any issue, and I'd love to move to a standard 4.0 jar.  \nThanks!\n-neil\n. Hi @ryantenney, what are your concerns?  \nthanks! \n-neil\n. Hi @ryantenney Can you explain why you closed this without any comment?  The PR fixes a couple obvious issues.\n. @ryantenney LOL.  no worries.  still waiting on your concerns, though.\n. The other reporters that I've used deal with these types fine, it's only the graphite reporter that silently does nothing with certain number types.  \nIf adding Map as a reportable type is redundant with a different feature v4, that's fine, I understand that.  \nBut the v4 branch of Graphite reporter still silently does nothing if you pass in a high level Number type.  That's the bug I was fixing.  Graphite reporter should have a fallback for Numbers, and it shouldn't silently not do anything with types it doesn't understand.\n. This is the portion that I believe is still a bug and is relevant to v4:\nhttps://github.com/dropwizard/metrics/pull/921/files#diff-72486b088eeb4b470f31907cdcd0a916R310\n. --> https://github.com/dropwizard/metrics/pull/986\n. @efindley I had a similar issue and created a PR https://github.com/dropwizard/metrics/pull/921  If that ever gets merged, it should be simple to add Boolean to the mix.\n. Thank you.  Can you point me to the docs for the v4 feature of adding arbitrary dimensions to gauges?  I don't see that feature in the v4 code, but I may have missed it.  TIA!\n-neil\n. ",
    "sigram": "Recent versions of Apache Solr use metrics for exposing all sorts of metadata (paths, selected config strings, Java properties) as well as using a custom gauge impl. for exposing dynamic map-like data (eg. system properties, cache entries etc) where it wouldn't make sense to register them as individual metrics due to their dynamic nature and the inability to monitor changes (eg. someone adding or deleting a sysprop).\nWe found it quite useful to expose this data alongside regular metrics, so that it can be accessed and reported using the same API.. What was the reason for this change? The commit above doesn't mention anything specific.. ",
    "caraboides": "Thats ok for me.\n. ",
    "ArturGajowy": "FYI this change has been reverted by #1099, sadly without referencing this PR. ",
    "jbolla": "Sure, I'm willing to apply it on the v4.0 branch. I want to make sure of what you're saying with \"the implementation might be wholly unrecognizable by the time v4 is released\", though. Are you suggesting reworking it and applying it to v4.0 as v4.0 currently stands but that the implementation may be drastically changed as v4.0 evolves? Or are you saying that I should wait because if I build it for the current state of v4.0 then before the pull goes through the organization is likely to change significantly enough to require a second rewrite?\nAlso a note on why I closed and reopened since in retrospect it might have looked like I was pinging you. I think there may be some flakiness on the ScheduledReporterTest. I had consistent success locally before I put in the pull request, but on Travis it sometimes succeeds and sometimes fails. The first pull request resulted in a failure (https://travis-ci.org/dropwizard/metrics/jobs/123204697). Closing and reopening triggered Travis to run it again (https://travis-ci.org/dropwizard/metrics/builds/124043581).\n. ",
    "colmg": "very useful, as allows tagging of a health check. Is this ready for merge ?\n. ",
    "klobusnikpeter": "Thanks @ryantenney. Any idea about when it will be deployed?\n. ",
    "paphillon": "Can anyone help me with this? Any pointers? Anything I missed?\n. Hi Thanks for the reply! The console reporter is configured to report every 500 millisecond and meter mark rate is at 1000 millisecond. As seen from the o/p the rates are always 0.00 and this is true for JMX as well as graphite reporters\nMeter meter = registry.meter(name(\"meter\", \"rate\", \"test\"));\n            while (true) {\n                meter.mark();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                }\n            }\nConsole O/P\n```\n-- Meters ----------------------------------------------------------------------\nmeter.rate.test\n             count = 37\n         mean rate = 0.00 events/millisecond\n     1-minute rate = 0.00 events/millisecond\n     5-minute rate = 0.00 events/millisecond\n    15-minute rate = 0.00 events/millisecond\n-- Meters ----------------------------------------------------------------------\nmeter.rate.test\n             count = 38\n         mean rate = 0.00 events/millisecond\n     1-minute rate = 0.00 events/millisecond\n     5-minute rate = 0.00 events/millisecond\n    15-minute rate = 0.00 events/millisecond\n```\n. I tried the following reporting rates, but it's still 0.00. \n15, 30 Seconds\n1 - Minute\n\nit is strange, since I can see those values, when I step into during debug or just by using println with meter.getOneMinuteRate();\n. Ah got you, will try it right away! Thanks\n. Yes! That was it! Thanks a lot! I remember changing the mark rate, but I think that was too granular too. The JMX console that I am using is jvisualvm with JConsole MBean plugin which has similar precision settings as console / graphite reporters. \n. ",
    "phearnot": "@ryantenney, sure. See #961.\n. ",
    "m-ramanna": "Thanks @marshallpierce .  Are you able to contribute back to the project\n. ",
    "tobilarscheid": "Hi, facing the same issue, I think this is really something dropwizard should support OOB.. Thanks for your detailed feedback! I am glad to see that this is worked on.\nDo you guys see no way of introducing that into 4.0 backwards compatible, for example by using a configuration switch to stay with the old behaviour? And where is the introduction of this feature tracked? The PR you referenced is closed!. ",
    "souravmitra": "@ryantenney : Thanks for your comments.\nSo we in our app have a single MetricRegistry.\nNow we have func A() that registers our gauge with this registry.\nSince func A() is called by an external framework and on different threads, eg: Apache Storm, we start to get exceptions when their is a race between threads, and both end up trying to add the same gauge with the same name to the registry.\nIn meter() and timer(), the same happens but we have a getOrAdd() there, so that even though two threads attempt addition with the same name, an exception is thrown, but is caught, and the existing metric returned.\nDo you think its ours is a valid use case? \n. @ryantenney Hello, any thoughts?\n. ",
    "remmeier": "regarding PRs I'm currently look more into things like Hibernate metrics, generic UIs, https://github.com/dropwizard/metrics/issues/976 and tracing integration (such as zipkin) if there is a need for that, otherwise I put that on a private repo.\n. I can do a pr if the ticket sound reasonable :-)\n. in the meantime I started working a bit in another direction based on jsonapi resp. the katharsis java implementation (http://jsonapi.org/format/). It provides a bit a richer api with meta-data, sorting, filtering, etc. Potentially I can put that somewhere at some point.. ",
    "riccardoref": "Thank you for the reply. I will make the fix #966 then. And use the 3.2 version as soon as you merge the branch with the fix. Thanks again!\n. ",
    "rehevkor5": "I just ran into this too, when adding a HdrHistogramResetOnSnapshotReservoir to a Dropwizard app which uses a java agent to gather JMX metrics and send them to a server. Here are some more factors to consider about eg. https://github.com/dropwizard/metrics/blob/4.0-development/metrics-jmx/src/main/java/com/codahale/metrics/jmx/JmxReporter.java#L251\n\nCreating multiple snapshots is more costly, for Histograms it's about 10x the cost\nIf using a reporter such as com.codahale.metrics.JmxReporter, the various values retrieved from a single Histogram are not self-consistent, since each value comes from a different snapshot (even if you're not doing reset-on-snapshot)\n\nTo solve this, I'll probably omit these metrics from the JMX reporting, and use something like https://github.com/ReadyTalk/metrics-statsd/blob/master/metrics3-statsd/src/main/java/com/readytalk/metrics/StatsDReporter.java to send them directly to the server.. ",
    "svendiedrichsen": "I don't think it is sufficient to tie the reporter to the lifecycle of the @PreDestroy method because thus the ExecutorService as a resource cannot be managed by the container. You could make use of the administration and monitoring features of the container if you used the injected ExecutorService and allow for runtime parameter changes. Furhtermore you are not allowed to call close() on the ExecutorService because it is managed by the container.\nI suggest you take a look at changes #1018 from @vladimir-bukhtoyarov. They are pretty simple and straight forward.\n. I would like to vote for this to go into the next release. Helps saving resources a lot in the specified environments.\n. I have no saying on wether this change gets pulled. I just happen to like it and support it.\n. ",
    "storozhukBM": "@bentatham if you're using SlidingTimeWindowReservoir try new drop-in replacement called SlidingTimeWindowArrayReservoir it should make snapshots a lot faster due to vectorized System.arraycopy usage.. Hi @behrangsa,\nI think you can use com.codahale.metrics.SlidingTimeWindowReservoir for such purposes.\nBut in this case should manually create Timer and/or Histogram with specified reservoir and then register it.. Closed by accident, sorry.\ncc: @arteam . \ud83d\udc4d I'm almost finished with it. Will make PR next week.\nHere is small sneak peek of profiling results on the same load pattern:\n. Merged. Closing issue.. Hi @vladimir-bukhtoyarov,\nThank you for review. I understand all concerns that you have but that is only after first look. \nAll operations in ChunkedAssociativeLongArray are designed to opreate without additional synchronization and recover from possible partial reads.\nThere is JCStress tests created to reproduce this concurrent writes and reads and prove that SlidingTimeWindowArrayReservoir behaves consistently.\nSo if you will be able to reproduce any situation that leads to data loss or run time errors it would be really helpfull, but I can assure you that I've done my best to prevent any such case.\nAs for long overflows:\nYes that is definitelly disadvantage of ChunkedAssociativeLongArray structure because we can't resort all values inside to recover from overflow, so we basically should clear all values from reservoir. But I have a compromise solution where we can delay such overflow by 416 days from reservoir creation.\nI changed comparisonResultsTest to reproduce overflow situation and then made overflow delay change to fix this test.. Hi Vladimir,\nThank you one more time for review and exhaustive comment. \nI must admin that it was stupid to try to hack the system \ud83d\ude36.\nMy latest PR makes everything simple and straightforward.\nOf course this change brings some different numbers but they are still impressive and GC pauses are even lower (ReentrantLock creates synchronization helper objects).\nIn ReservoirBenchmark: updates are 2.7x faster and 80x less time spent in GC.\nIn SlidingTimeWindowReservoirsBenchmark: updates are 2.4x faster, reads - 5.6x faster, 57x less time spent in GC.. OK, so should we replace the existing SlidingTimeWindowReservoir?. > I reviewed and the implementation looks good (or I can't spot obvious concurrency bugs). \nDon't worry, everything should be OK now. \ud83d\ude04 . \ud83c\udf89 \nThank you too, guys. Do you have any plans for release date?. Maybe we can add my answer as code comment for this line just to make collection choice clear for other contributors.. Hi @arteam,\nIt would be nice if you have a chance to look at this PR before release.. Here is great illustration of chunks reuse \ud83d\ude04 . link. Hi @ryantenney, thank you for merge.\n\ud83c\udf89 . Hi @arteam,\nThank you for review. All comments fixed.. Thank you @arteam.. @vladimir-bukhtoyarov any suggestions for suitable sum storage type?. > I argue that this kind of functionality is not needed at core level. \nOK, now it's clear. \nPersonally I'm totally agree with your thoughts. Core library is actually flexible enough and you can easily extend Histogram class within your project to add required functionality.. Also, what do you think about replacing of SlidingTimeWindowReservoir by this SlidingTimeWindowArrayReservoir in 4.0 branch?. @joschi @LukaszP1 \nWe  have drastically improved version of SlidingTimeWindowReservoir called SlidingTimeWindowArrayReservoir it is available from version 3.2.3\nIts memory allocation is still dependent from event rate but actual footprint is so small that it shouldn't be a problem unless you want to update it more than 50K times per second.\nTake a look at hint from documentation.. I think it can be possible due to ExponentiallyDecayingReservoir (default Histogram implementation) random nature. As @vladimir-bukhtoyarov mentioned we need to now the updates frequency of T1 and T2 and what percentiles you're rendering here. It will help to clear this situation.. LinkedList here has relatively small size \ncountOfStoredMeasurements / DEFAULT_CHUNK_SIZE.\nAnd we are heavily really on LinkedList implementation because:\n1. Now we deleting chunks from both sides of the list  in\ntrim(long startKey, long endKey) \n2. Deleting from and inserting chunks into the middle in \nclear(long startKey, long endKey)\nAnd LinkedList give us O(1) complexity for all this operations and that is not the case with ArrayList.. ",
    "vbauer": "Any about this PR?... We'd like to have async-feature too. ",
    "tommy-bo": "@remmeier I made a PR for customizing AdminServlet in case you find it usable: #991 \n. ",
    "sfitts": "An example where this comes into play is the use of Dropwizard metrics by the Vertx framework -- see https://github.com/vert-x3/vertx-dropwizard-metrics/issues/39\n. ",
    "acidlychee": "@ryantenney  sorry , my english is poor.. I hava found the solution in spring boot issue.\nhttps://github.com/spring-projects/spring-boot/issues/3687\n. ",
    "voyageth": "I agree your comment. Metrics generate logic should not throw exceptions. But Cassandra has that issue( https://issues.apache.org/jira/browse/CASSANDRA-11117 ) currently. I wish Cassandra solve that problem asap. \nI respect your view, So i close this issue. Thanks for reply.\n. ",
    "mwhipple": "I may be missing something (and I'm definitely late) but this seems like a potentially bad design change.  Now #time accepts 2 possible SAM argument types which will complicate implicit coercion of lambdas or similar first class functions.. @ryantenney cool, thanks for the quick response!. Ok, thanks for the additional info...it looks like this may just be a Groovy issue.\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.2.1\n```\nIf the target type's function type has a void return, then the lambda body is either a statement expression (\u00a714.8) or a void-compatible block (\u00a715.27.2).\nIf the target type's function type has a (non-void) return type, then the lambda body is either an expression or a value-compatible block (\u00a715.27.2).\n```\nSorry for the half-baked concern. ",
    "davidmankin": "Hello @arteam,\nI understand why you put this PR on hold, but I'm at a loss for how to do something more complex.  The AdminServlet offers no customizability or pluggability for providing any form of templates or content beyond the fixed template.  I can't easily replace it wholesale because it is the code that handles the delegation to the other metrics servlets, and it is instantiated by dropwizard in code that cannot be easily customized.   \nAre you aware of any examples or recommendations on how to integrate the various admin servlets with a home page provided by the application, hopefully including adding additional admin servlets too?\nIf it's as hard as it seems to be, then some refactoring in this servlets package seems wise even if it's not this PR.. ",
    "sofax": "I added the suggested fix to the fork \nhttps://github.com/sofax/metrics\n. This is the pull request for it:\nhttps://github.com/dropwizard/metrics/pull/999\n. Sorry, already working on it - it got pushed too soon.. Agreed. :). Again, agreed. \nThe lines\nif (this.scheduledFuture != null) {\n            throw new IllegalArgumentException(\"Reporter already started\");\n        }\nare new, but they do look reasonable to me.. Will do. All those tests are a little bit unreliable though, as the executor services rely on the system time instead of using a dedicated (mockable) clock.. Actually, instead of waiting for the reporter to actually do its work, it would be much better to just verify that the method scheduleAtFixedRate() was called with the correct arguments. There is no need to test the executor itself, as that's a collaborator that has already been tested elsewhere.. Also, the tests are not isolated. The collaborators (mocks) should be initialized per test method, not per class.. Gnnhhh ... my IDE is configured to replace \".*\" imports with the explicit ones - but I did NOT want to push those changes, as they were not necessary for the fix. . This change has been reverted.. Test cases have been added.. ",
    "orshemesh": "Thanks,\nYou're right , I'm using Cassandra 2.2.7 and only in Cassandra 2.2.8 these metrics will be available.\n. ",
    "daniilguit": "This is exactly what I wanted. \n. ",
    "phauer": "HI Artem,\nthanks for your feedback. Does this work for you? It doesn't work for me, because name doesn't contain the metric type. The values look like this:\nheap.committed\nheap.used\nclasses\nhttpsessions.max\nsystemload.average\nmem.free\nprocessors\ngc.ps_marksweep.count\nthreads.peak\nmem\nnonheap.used\nheap\nI'm using Metrics in conjunction with Spring Boot Actuator. Maybe this is the reason.. Good points. I changed the code according to your feedback. Are you okay with my changes?. ",
    "jhaber": "I think this issue is more about how you actually generate that histogram. For things like # of busy connections in a pool, # of active HTTP requests, etc. it is natural to represent them with a gauge but the resulting data isn't particularly useful. A histogram populated by polling these values at a fixed interval provides much more insightful data, but I don't see an easy way to achieve this with the existing API. I guess you could make a second metrics registry specifically for these types of gauges and register a reporter that runs at the desired interval to poll all the gauges and update the histograms in the main metrics registry, but it seems like it could be a lot easier if it was a first-class feature. We've already added this functionality to our fork though, so I'm happy to close this issue if you don't think it's a use-case you want to handle.. Should I send a separate PR to 4.1-development branch? Also, not sure if it's too late for 5.0 but it could be nice to have InstrumentedConnectionFactory accept a MetricRegistry that way any future refactorings don't keep changing the constructor signature. Sure thing. counterMaybe.ifPresent(Counter::inc); is quite satisfying compared to null-checks, but I'll update. ",
    "cowwoc": "I'm also interested in this feature.. ",
    "reftel": "Thanks for the attention and feedback! I've updated according to your comments.. Sure! I'm working on some services related to handling of case folders for the Norwegian Tax Authority. This involves some rather complex data structures that can contain highly sensitive information in several places.\nOne of the cases where filter metrics is valuable is in an application that handles modification requests for cases. If we get a simple operation (e.g. adding a comment) on a complicated case, a filter we have for preprocessing the case to find all information that may be relevant for an authorisation decision so that we in a later stage can make an informed decision, can easily take more time than the operation itself. We also have other filters that make HTTP calls to a third-party service, so including or not including the request filter stage in the metric for the endpoint makes a big difference - our consumers care about the response time for the request as a whole, and monitoring just the time spent by the request method isn't enough.. Was that explanation enough? Is there anything else that we can do to progress on this feature?. ",
    "husseincoder": "I think that's intended to use P50 instead of median to have it as a sequence P50, P75, ..... I think its possible .. we use graphana and graphite as backend .. and most of our queries contain regex ... @arteam I've changed it too with a small unit test edit .. unless you want me to extract it in a separate unit test?. @arteam Thanks for the code review .. I've changed these stuff and gonna push them soon. If we are going to leave the sanitization happening in metrics .. so I think it should be fare to allow developers pass the ACC characters in the GraphiteReporter .. Users don't have to change their WORKING dashboards when they upgrade to a newer version .. all the changes should cope with previous versions and allow ways to control the logic being done.. @arteam I'm not sure if we really need the sanitize functionality .. that means we need users of our library to override the sanitize method to remove special characters they have declared? may be I'm missing something .. would you please clarify the main purpose of having it .. also graphite works fine with at least the characters I put in this PR .. please let me know :). Closing this one then ;). Awesome .. thanks alot for acting so fast on this :) . I think its much better to use a ConcurrentHashMap here in order to make sure that its thread safe?\n. String.format is much better than ugly concatenations\n. Isn't this more like an error than a warning?\n. I think you can implement an observer design pattern here and when the metric is removed from the registery then you can close the printwriter associated to it?\n. Done. ",
    "mkotelba": "Regarding grouping Metrics in general, perhaps MetricSet could be enhanced to (optionally) be retained + used for grouping after being passed into MetricRegistry.register instead of being immediately discarded?\nAlso, perhaps MetricSet could (again, optionally) provide a name prefix for those of it's Metrics that don't specify an absolute name?\n. ",
    "rompic": "stumpled upon https://github.com/christiangalsterer/httpbeat \n. https://github.com/graylog-labs/metrics-gelf/commits/master could be an Alternative for a similar use case using gelf. ",
    "rohansuri": "Hi @randomstatistic, I was wondering of this solution too.\nIf to reset the metrics upon any time a reporter reports (assume a single reporter only for now), simply remove the metric from the registry as well (that is, inside the report(..) method of a reporter).\nAnd then anyone asking for the same metric using the name would get a new metric and hence in a way we successfully reset the metric.\nBut the danger is as you said:\n\"Anything that already had a reference to the old Metric would still have it\"\nwhich seems likely right? and hence causing the reporter to miss the updates?\nsince someone could be updating a metric which actually doesn't exist in the reporter now.. ",
    "okutane": "Nice! Too bad no one is gonna merge this. :(. ",
    "qualidafial": "Just to provide additional context:\nAt my work we are using Datadog to aggregate metrics from Dropwizard across a fleet of hosts in several environments. Datadog supports metrics with key/value tagging.\nThe aggregate metrics like p99, mean, etc are only valid within the originating process. Once you start to aggregate metrics across processes, hosts, datacenters, regions, etc, you must have the total time to get an accurate global picture. Otherwise you're e.g. taking averages of averages, and nothing is accurate.\nThis gets even worse when you add tags into the picture. To publish metrics to Datadog from Dropwizard metrics, we encode our metric names with tags like so: rest[resource:accounts,method:post,status_code:201]. The more tags you use, and the more distinct values your tags can have, the more your metrics get broken up into different buckets, and the value of aggregates like p99 in smaller individual buckets is limited.\nAs an example of how this can bite you: we time database requests, and use tags to distinguish the database engine, schema, operation, and status (success or failure) of the request. Yesterday, the response time graph inexplicably jumped from 2ms average to 300ms, with no explanation. Hours of digging revealed that the server was fine, but that a single timeout to the database created a distinct bucket for that one error on a single server. Thus our average of averages got bumped by a single outlier.\nHad the total time metric been available to us, we could have simply divided the total time by the count to get the global mean.. It's a Festivus miracle!. @arteam Any news? I see you closed #1181, is this now supported in the 5.0 branch?. Looking at the MetricName class: not all tags out there are key/value pairs. Some are just labels--they are either present or not.\nDatadog recognizes either of these concepts as \"tags\", which are all just strings, but it recognizes those formatted as \"key:value\" and lets you search on them and see comparative metrics for different values.. Possibly tags could be key/value, and labels could be plain Strings?. I think you've convinced me.\nI've also realized that MetricName could always get a new labels property in the future if needed, so there's no risk to leaving it out now.. ",
    "homiak": "\n\n\n\n\n\n\nI don't use Graphite but from what I remember about it, it uses a dot\ndelimited naming convention (instead of tags like some newer systems) so I\nthought usually you want to have your metrics stored in some convention\nlike:\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nExactly! The metrics reported under\n\"org.eclipse.jetty.util.thread.QueuedThreadPool.ThreadPool\". So when\nmetrics comes from different hosts to the same carbon server, it gets\noverridden.\nI suggest modifying this\nhttps://github.com/dropwizard/metrics/blob/3.2-development/metrics-jetty9/src/main/java/com/codahale/metrics/jetty9/InstrumentedQueuedThreadPool.java\nTo add the hostname\nsomething like this:\nprivate static String hostName;\nstatic {\n    try {\n        hostName =\nInetAddress.getLocalHost().getCanonicalHostName().replaceAll(\"[^a-zA-Z0-9-]\",\n\"-\");\n    } catch (UnknownHostException e) {\n        LOG.error(\"can not get local host name \", e);\n    } finally {\n        if (hostName == null) {\n            hostName = \"localhost\";\n        }\n    }\n}\n@Override\nprotected void doStart() throws Exception {\n    super.doStart();\n    metricRegistry.register(name(TimingReports.getHostName(),\nQueuedThreadPool.class.getCanonicalName(), getName(), \"utilization\"),\nnew RatioGauge() {\n        @Override\n        protected Ratio getRatio() {\n            return Ratio.of(getThreads() - getIdleThreads(), getThreads());\n        }\n    });\n    metricRegistry.register(name(TimingReports.getHostName(),\nQueuedThreadPool.class.getCanonicalName(), getName(),\n\"utilization-max\"), new RatioGauge() {\n        @Override\n        protected Ratio getRatio() {\n            return Ratio.of(getThreads() - getIdleThreads(), getMaxThreads());\n        }\n    });\n    metricRegistry.register(name(TimingReports.getHostName(),\nQueuedThreadPool.class.getCanonicalName(), getName(), \"size\"), new\nGauge() {\n        @Override\n        public Integer getValue() {\n            return getThreads();\n        }\n    });\n    metricRegistry.register(name(TimingReports.getHostName(),\nQueuedThreadPool.class.getCanonicalName(), getName(), \"jobs\"), new\nGauge() {\n        @Override\n        public Integer getValue() {\n            // This assumes the QueuedThreadPool is using a\nBlockingArrayQueue or\n            // ArrayBlockingQueue for its queue, and is therefore a\nconstant-time operation.\n            return getQueue().size();\n        }\n    });\n}\nI hope that make it clear.\nYou are right that it is possible to define a different graphite prefix for\neach host, but I think that is not what it should be used for. I think\ngraphite prefix should be application based, not the host based. Since we\nare running the same app on multiple hosts that would not be a preferred\nsolution.\nThanks for your help.\nRegards\nPeter\nOn 1 December 2016 at 17:59, ryanrupp notifications@github.com wrote:\n\nI don't use Graphite but from what I remember about it, it uses a dot\ndelimited naming convention (instead of tags like some newer systems) so I\nthought usually you want to have your metrics stored in some convention\nlike:\n.\nOr could be anything really to get the uniqueness that is desired. The\nGraphite Reporter allows you to prefix the name that is generated in the\nbuilder here\nhttps://github.com/dropwizard/metrics/blob/3.2-development/metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteReporter.java#L70.\nMaybe I'm understanding the problem incorrectly though because wouldn't you\nneed this for any metric (not just the Jetty ones)? Or potentially there's\ntimes when you don't want to always prefix the host in the reported\nmetrics? Suppose it depends how aggregations work in Graphite/what you want\nto achieve e.g. thread pool is definitely a metric that's unique to the\napplication where as things like timings maybe you want to aggregate across\nthe cluster, although I thought Graphite supported something like wildcard\naggregations e.g. *.mytiming.avg\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/1025#issuecomment-264229397,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADfBm-ScogtaVFayrzWNbHphEx-K7KYsks5rDvzggaJpZM4LBVb9\n.\n. \n",
    "dimovelev": "that is a good idea - I will look into that. In the mean time I have refactored the graphite reporter on my end so that the two main aspects are placed in separate classes - mapping metrics to graphite format (the report methods) and the actual scheduling. This way I can reuse the report stuff in multiple contexts (using JEE timer service, using JMX timer service, ...).. ",
    "jensraaby": "I should have based off master branch! See https://github.com/dropwizard/metrics/pull/1029. ",
    "IstvanM": "I would agree on fixing this issue, especially as the other reservoirs have this capability of cleaning up by time.. Created Pull request for this:\nhttps://github.com/dropwizard/metrics/pull/1135. Thank you! Let me know if you need anything to be changed .. Should be done, can you check please?. Hi thanks, yes I will look into that today. I agree here it isn't the best to solve this problem.. ",
    "mayooran99": "@saadmufti  It was the port! Thank you very much! Really appreciate that!. @PatrickOsborne Why would we have to wrap the queue? we can still have a counter inside the queue and let it inc and dec? Why is a wrapper needed for the queue?. @PatrickOsborne  Oh you mean add a counter to the queue itself. Apologies. I was thinking of having a counter in the class where the values are being added to the queue and retrieved to process. Your explanation makes sense. Thanks mate. Still the explanation given on the documentation page doesn't have to say any of this though. . ",
    "raghavan20": "@ryantenney I would like to register all metrics in the metricset at one go but if I use register, I would have to iterate all metrics in MetricSet or is there another way? can you please give an example?. okay i got what you meant\nmetricRegistry.register(\"jvm\", new MemoryUsageGaugeSet());\n        metricRegistry.register(\"jvm\", new GarbageCollectorMetricSet());\nit works. thanks. ",
    "ahadadi": "@arteam, I think your comment:\n\"Thread 2 obtains a read lock and works with a new weight, but old (not scaled) values\"\nis incorrect.\nThe weight becomes new when startTime gets updated, but it gets updated only under the write lock by thread 1.\nI still think this is a good change, as it simplifies reasoning about the code.. ",
    "michaelsembwever": "\nAnd submit this Java 8 version as a separate PR to master\n\ndone in https://github.com/dropwizard/metrics/pull/1041. The code commits are from @philwill-nap, someone i do not know, so I'd like to hold them intact to represent the authorship correctly.\nI will add an additional commit addressing the comments and referencing this PR. . >  If you contribute a unit test for PickledGraphiteUDP \u2026\nwill do, but will need to come back to it soon, being holiday season n all :-). I can update all the reporters, or at least take a stab at doing do, but let me know first the precedence between this and https://github.com/dropwizard/metrics/pull/1008. The default method in the MetricFilter interface requires Java8.\nFor a fork that provides this functionality this is the simplest solution.\nIf the pull request would otherwise be accepted I can backport the code to Java6.. I'll be able to code it against Java 6 if there's otherwise no objection to the PR conceptually.\n(And submit this Java 8 version as a separate PR to master).. > I'll be able to code it against Java 6 if there's otherwise no objection to the PR conceptually.\nDone.. ",
    "iksaif": "FYI: pickle is usually less performant that lines (uses more CPU) and will produce bigger datagrams that are more likely to be silently dropped (because UDP). Thanks for merging. Any idea when 3.2.0 will be released ?. Great thanks, I'll ask for a version bump in Cassandra once it's released. Looks like #1047 and #1048 got merged, I guess the release is getting closer ?. Looks like this wasn't enough :/ We should replace Exception by Throwable. @arteam the thing is that currently the silentely ignore Throwables and Errors subclasses. IMOH it's better to log something.. That's the thing: I don't know since the reporter just silently gets un-scheduled forever. I'll try a patched version catching everything to see if I can find out.. Ok I can confirm that fixes the issue because there are a lot of cases where an AssertionError (Error, not Exception) is being throwned, for example:\n{code}\n/var/log/cassandra/system.log.18.zip:ERROR [metrics-graphite-reporter-1-thread-1] 2017-05-02 15:17:47,178 ScheduledReporter.java:176 - Exception thrown from GraphiteReporter#report. Exception was suppressed.\n/var/log/cassandra/system.log.18.zip:java.lang.AssertionError: null\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.io.util.Memory.size(Memory.java:376) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.utils.obs.OffHeapBitSet.serializedSize(OffHeapBitSet.java:131) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.utils.BloomFilterSerializer.serializedSize(BloomFilterSerializer.java:65) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.utils.BloomFilter.serializedSize(BloomFilter.java:64) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterSerializedSize(SSTableReader.java:1295) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.metrics.TableMetrics$29.getValue(TableMetrics.java:601) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.metrics.TableMetrics$29.getValue(TableMetrics.java:596) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.metrics.TableMetrics$35.getValue(TableMetrics.java:742) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n/var/log/cassandra/system.log.18.zip:   at org.apache.cassandra.metrics.TableMetrics$35.getValue(TableMetrics.java:736) ~[apache-cassandra-3.10-criteo1.jar:3.10-criteo1]\n{code}\nI've sent https://github.com/dropwizard/metrics/pull/1128. LGTM. cc: @arteam . ",
    "marsmining": "Thanks for this work! Any idea when this will land in a release?. ",
    "PatrickOsborne": "Let's say that a system uses a Java queue which already has a size method.\nAn implementer has two paths to expose the queue size as a metric:\n1) wrap the queue and have the wrapper update a counter when objects are\nqueued or deqeued, or\n2) implement a gauge that calls the size method of the queue periodically.\nThe second approach is vastly simpler to implement.\nSo in my mind, use a counter where possible in an application and use a\ngauge when necessary to integrate with some existing construct in an\napplication.\n-- Patrick\nOn Jan 15, 2017 7:27 AM, \"Vladimir Bukhtoyarov\" notifications@github.com\nwrote:\nI, too, was very surprised when I saw the method to decrement for counter.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/1043#issuecomment-272698503,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAhiCYR03sUsdCFcPE0iUpt-yUPKr8cRks5rSizkgaJpZM4Lj7Pi\n.\n. How would you add a counter to a class that is part of the JDK?  I would do\nit by extending the queue or creating a new object which wraps the queue\nand presents its own API.  I'd like to hear how you would approach that\nproblem\nOn Sun, Jan 15, 2017 at 5:52 PM, Mayooran Macilamany \nnotifications@github.com wrote:\n\n@PatrickOsborne https://github.com/PatrickOsborne Why would we have to\nwrap the queue? we can still have a counter inside the queue and let it inc\nand dec? Why is a wrapper needed for the queue?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/1043#issuecomment-272751780,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAhiCXOfIAmo7yj4faF49EM2TkSDfYbRks5rSr9pgaJpZM4Lj7Pi\n.\n. \n",
    "pilhuhn": "A decreasing counter could be used when you start with e.g. 1000 credits and decrease by 1 for each call to a certain api.. +1 on hiding the Reservoir implementations. ",
    "myanything": "@vladimir-bukhtoyarov thank you for replying. The lib I used is the ReadyTalk one, which just directly emit what the counter value is.. Thank you for reading that code, @vladimir-bukhtoyarov! I missed that they report everything as gauge. But then how do you guys handle Timer? The Metrics library only have aggregated data, but no original time metrics? then how the graphite should interpret them?\nFor counter, I will take a deeper look into your suggestion. But one of my concerns is that the counters could come from a fleet of servers, will the graphite handle it correctly, even with the delta solution you mentioned?. @vladimir-bukhtoyarov thank you for share the  metrics-thoughts link, that is pretty helpful.. ",
    "maxcellent": "I agree calculated metrics like mean should come from sampled dataset. But, min and max are different. They are single data point, which won't grow even after a billion timer events. \nAny reason why we are not keeping them as absolute value?. ",
    "bobwenx": "When is this fix release into maven repository?. ",
    "fabienbancharel": "Ryan, as you wondered : \"I'm not sure whether NoClassDefFound error would be thrown during the instantiation of JdkProvider, or if it would be thrown while calling  JdkProvider.current\", in fact, testing 3.1.4, on Weblogic 10.3 and Oracle JDK 6, the exception is thrown only when JdkProvider.current is called, not when JdkProvider constructor is called, so 3.1.4 is KO. Curiously, on Tomcat 7 and the same Oracle JDK 6, the exception is thrown when the JdkProvider constructor is called.\nI made a pull request for my tested workaround (#1129).. I used the Github online editor, and copy / pasting in Notepad++, I don't see any special character.\nI will try a full clone on my laptop.\nEdit : Travis is ok now. Using the online editor maybe not a good idea.. I made a PR for 3.2-development branch : https://github.com/dropwizard/metrics/pull/1131. I had not looked at LongAdderProxy (since no problem with it), but yes, it would be consistent to use the same code. So, will you fix ThreadLocalRandom (at least in 3.1-maintenance), or do you expect me to commit it ? Thanks.. OK, 3.1.5 is validated on Weblogic 10.3. Thanks !. ",
    "StephenGoodall": "@arteam Thanks for the reply, I'm not sure if you can use regex when defining the metric in grafana when using a Graphite data source.\nI'll have a look into that and perhaps ask on the grafana github page.\nThanks. @mixalturek We are using a Graphite Reporter with Pickled Graphite:\ncom.codahale.metrics.graphite.GraphiteReporter\ncom.codahale.metrics.graphite.PickledGraphite\nIt's been a while since I looked at this so the above might not be what you meant! We've been getting round this by just having multiple lines with lots of ....* in the middle of them....not ideal but we can at least see the metrics this way :). ",
    "mixalturek": "What reporter do you use? For example JmxReporter.Builder has method createsObjectNamesWith(ObjectNameFactory onFactory) that allows you to modify the metric names according to logic defined in your code.. ",
    "rconn01": "I didn't realize the metric-adapter module existsed. Looking at this however it looks like it only provides binary compatibility for most of metrics-core ,but it doesn't provided compatibility for the other modules. How do you envision a project to make the upgrade to 4.x when some of its dependencies still make use of some of the 3.x modules that are packaged under com.codahale.*. So something like the http-client module for example. So is the consensus the groupId should change. If so what should it change to.\nio.dropwizard.metrics4 or are there other ideas. Yes it is true that it is being logged in both cases. In the existing case however a runtime exception is thrown, which will not be handled anywhere and bubble up all the way to the calling code preventing the metric from being added to the metric registry. Adding throws MalformedObjectNameException also prevents other implementations from needing to do the catch and logging logic since it's already being done in the JMXReporter. @ryantenney @jplock what else needs to happen to get this merged?. @ryantenney I have added a MetricNameFormatter that calls MetricName.toString(). @ryantenney any additional comments or thoughts here?. I see what you are saying. I think that mostly makes sense. I think there is still a potential for collision on larger projects that depend on other libraries that might be out of their control. This is a made up situation so might not be unrealistic but lets say...\n\n\nProject A is an opensource project that uses metrics-httpclient of 3.x to instrument their http calls (say a lib to interact with a rest api)\n\n\nProject B is a newer opensource lib that is instrumenting its calls using metrics-httpclient of 4.x\n\nProject C makes use of both of these libraries, but only one of the versions will exist in the classpath. \n\nProject C will get a classNotFound for the metrics-httpclient classes in one of the branches\n\n\nProject C has no easy way to make both libraries work without forking and changing the code of one of the libs\n. Agree that would work as well, users would just need to know that is available and that they need to make those changes. I think the groupId would be a little more seamless to end users, but I also agree the number in the groupId seems strange. I'll lean on you guys with how you want to proceed . @ryantenney looking at the adapter module I see a few issues that could cause problems for users.\n\ncom.codahale.metrics.MetricRegistry is missing the default constructor that it previously had.\naddListener method calls were not implemented on com.codahale.metrics.MetricRegistry\ncom.codahale.metrics.SharedMetricRegistries is missing\nInstrumentedExecutorService is missing\nInstrumentedScheduledExecutorService is missing\nInstrumentedThreadFactory is missing \nJmxAttributeGauge is missing\nJvmAttributeGaugeSet is missing\nAll the Metric implementations (meters,counters,etc) are missing matching constructors to what they previously had. \n\nThere may be a few others that I have not run across yet.\nWhat would be the idea to support all these use case that could break for users. Would we make all the required changes in the adapter package to account for full backwards compatibility?\nPersonally I do kind of like the idea of having the adapter package, this way there is still only one registry in your application and you don't have to manage a 3.x and a 4.x registry. Which would then require having multiple reporters, one for each registry version. With the adapter the 3.x registry is simply adapted to the 4.x version and it all \"becomes\" one registry. I'm just curious if we think will truly be able to provide full backwards compatibility everywhere for users to keep a painless upgrade path . >It makes more sense to start metrics 4 from 3.2-development without big changes like changing package names and major breaking API changes.\nOut of curiousity what are the goals for metrics 4.x then? It seems the big driver would be to allow for breaking changes to be introduced. If there are no breaking changes being added what would be the motivation to move to a new 4.x version?\nIs there still a goal to have the MetricName introduced in this new version. I feel like that was the biggest benefit of the 4.x branch. With many data stores supporting tagging it seems that this metric library should support that ability as well. I would really hate to see that feature disappear.\n\nI fear the Python 2/3 case\n\nI agree that is definitely a concern but I'm not sure it's exactly the same here. If the two versions live under different coordinates and packages (like they currently do) both versions of the library can co-exist in an application, so users don't have to pick one or the other like they do with python2/3. Ideally we would add enough features to the newer 4.x version that would make users want to switch. The nice part being that they don't have to switch everything only newer development that they are working on. \nThis (changing package) seems to be a path that many libraries take for upgrading. For example the apache http-client. Thanks for the explanation @arteam and at a high level I think this makes sense. Curious on your thoughts around timelines. Sounds like metrics 4.0 is almost ready to release within the next few weeks, at which point we can start building out 5.0. What's the idea on timelines for getting a 5.0 release. Is it going to be a long running branch where you plan on adding many breaking features or do you plan on following the strategy of making many small releases on the 5.0 branch as well? \nAlso more than happy to help get tag support into an official release of metrics, I think it will be a huge benefit for many users and help open up newer use cases for users. . This is great news. Once #1250 is merged I also have a few reporters that I can contribute back that are making use of the tags. \n  . Agree that coordinates and package names should be changed with the move to 5.0. Linking previous discussions around this from when 4.0 was going to be the version that introduced breaking changes with tags https://github.com/dropwizard/metrics/pull/1097 . ",
    "tnn": "Hi @arteam, we just observed this on 3.2.3, 3.2.6 and 4.0.2:\njetty_active_requests -4.0\njetty_active_suspended -5.0\nWe have verified this on multiple systems. The service were this is observed, uses the following setup:\njetty: 9.4.8.v20171121\njersey: 2.25.1\nJava: 9.0.0 and 9.0.4.\nWe are using Jersey/JAX-RS AsyncResponse. We have inspected the heap and thread - and found no evidence that the AsyncResponse has not properly been resumed. We have verified both running as -jar and jmod.\nIt appears that a request is immediately completed (buffered by Jersey), but still a AsyncResponse, the if (state.isSuspended()) branch in InstrumentedHandler is never hit, because while the request has state (HttpChanelState):\n_state = {org.eclipse.jetty.server.HttpChannelState$State@7071} \"DISPATCHED\"\n_async = {org.eclipse.jetty.server.HttpChannelState$Async@7072} \"COMPLETE\"\n_asyncRead = {org.eclipse.jetty.server.HttpChannelState$AsyncRead@7073} \"IDLE\"\nThe state while incrementing (line 224, if (state.isInitial()) {):\n_state = {org.eclipse.jetty.server.HttpChannelState$State@7071} \"DISPATCHED\"\n_async = {org.eclipse.jetty.server.HttpChannelState$Async@7229} \"NOT_ASYNC\"\n_asyncRead = {org.eclipse.jetty.server.HttpChannelState$AsyncRead@7073} \"IDLE\"\nSo it appears that the activeSuspended.dec(); on line 232 needs to take into account if the request is async, is completed and that the async state has gone from NOT_ASYNC to COMPLETE.\nPlease let us know, if we can help in anyway.\nCross posted as an issue: https://github.com/dropwizard/metrics/issues/1324.. @arteam Any update on this?. ",
    "mebigfatguy": "ah nice, thanks. got it working altho ObjectName is pretty janky taking a Hashtable as properties. You basically have to derive from it, and override entrySet to produce one that sorts the items the way you want the hierarchy. But it works. thanks!. ",
    "kristoheero": "OK! We are then not the most. :-) But, can you add an extra method to com.codahale.metrics.JmxReporter$JmxHistogram class for asking metric.getSnapshot().size()?. Thanks! . ",
    "erebe": "By the way do you plan to release the 3.2 on maven soon ?\nI am interested by some changes of the 3.2 but would like to avoid to build and deploy it internally if I can wait for your release of the 3.2 to appear.. What can I say if not thanks :+1: . ",
    "sata": "@jplock Does the tests work for you?\nI get \n\nExpecting empty but was:<[\"db\"]>\n        at com.codahale.metrics.health.SharedMetricRegistriesTest.clearsRegistries(SharedMetricRegistriesTest.java:52)\n\nCheers.. @arteam PickledGraphite maintains a persistent socket in 3.2 development branch? . @arteam Is that the intended design? Because that's not how Druid graphite extension is doing which is using this library[1] from what I can understand. Nor does it seem to be with given these two tickets #669  #694. Am I missing something here?\n[1] https://github.com/druid-io/druid/blob/master/extensions-contrib/graphite-emitter/src/main/java/io/druid/emitter/graphite/GraphiteEmitter.java. Thanks! I'll keep it in mind when discussing it with Druid guys. I wasn't planning on creating a PR to dropwizard but rather our own forked version of it but thanks for commenting!. ",
    "cbring": "Thanks for the speedy fix!. ",
    "markus-s24": "I took a look in our Sentry and the oldest problem of this kind happens directly after the update of metrics from 3.1.2 to 3.2.0.\nI took a short look at #1063 but found no reason, why it can cause this problem, because it just shortens the measurements map. But maybe I am wrong.. ",
    "kamalvpm777": "I forgot to mention that we use Telegraf to pull the HTTP JSON metrics and write it to cloudwatch.\nIn our case telegraf not able to convert the measurements , which is the bug confirmed by telegraf. So here is what recommened by telegraf team as a quick workaround. So looking for some guidance on what needs to be implemented on server to adjust the values to 0  before they enter in telegraf?\nRecommendations from Telegraf:\n\"Update the server that your httpjson input uses as its source to adjust the values before they enter telegraf. We will try to get a fix done for this before the next release\"\n[[inputs.httpjson]]\nservers = [\n\"http://localhost:2960/metrics\"\n]\n. ",
    "dpursehouse": "@jplock @arteam done in PR #1109 \n. That was quick.  Thanks!\n. Ping @arteam -- any chance to merge this?. @arteam thanks for merging.  Can you confirm which method you used to merge the PR?  Was it the rebase method?\nThe reason I ask is because I noticed that the commit author got changed to the personal email address that I use on github, rather than my corporate one that I actually used to do the commit.  I'm wondering if Github did that automatically.\n. @arteam sorry, never mind, I've reproduced this behaviour on a test project.  It seems Github changes the author when merging with the \"squash and merge\" option.. @arteam any change to merge this?  since I opened this PR there is an even newer version of error-prone-core available.. OK. Done in #1187 . @arteam yes, with the latest version of 4.0-development the test passes.  Thanks.. @mveitas yes, looks like it, although mine also fixes some other things.. @arteam I have a couple more commits fixing error-prone warnings; I'll push them as a separate PR after this one is completed.\n. Ping @arteam . Ping @arteam any chance to merge this?. Hi @arteam any chance to merge this?. @jplock I've been pushing these upgrades for the stable branch since I was asked to do so in #1158\n. Shouldn't static imports typically be listed before the normal imports?. Specify the version?. s/hold/held/. ",
    "karlr42": "Apologies, this does work just fine- I didn't realise we had already declared another listener in our project, and that in fact we do have an web.xml, where that listener class was registered. So I added my getAllowedOrigin implementation to that instead and it worked fine. Mea cupla. Thanks.\nFor posterity if anyone finds this through search, this is how we got the Access-Control-Allow-Origin header set : \n````\npublic class MetricsServletContextListener extends MetricsServlet.ContextListener {\n@Override\nprotected MetricRegistry getMetricRegistry() {\n    return MetricsService.getInstance().getMetricRegistry();\n}\n\n@Override\nprotected String getAllowedOrigin() {\n    return \"*\";\n}\n\n}\n\n\ncom.mycompany.metrics.MetricsServletContextListener\n\n````\n. Actually, maybe this doesn't work- it adds the header to the GET, which is fine, but not to the OPTIONS request that Chrome makes in preflight, so the request still fails. Any thoughts?\nSeems to me MetricsServlet should override HttpServlet.doOptions and add appropriate headers for CORS preflight. I could write a PR?. I know you will want me to write a test, I'm just working on that now.. I will try that(although I'm not sure how), but then what was the point of adding the ability to set Access-Control-Allow-Origin at the MetricsServlet level in #440 in the first place?. OK, so for my specific use case, using Tomcat, I actually was able to solve this by editing my web.xml\n<filter>\n    <filter-name>MetricsCorsFilter</filter-name>\n    <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>\n    <init-param>\n        <param-name>cors.allowed.origins</param-name>\n        <param-value>*</param-value>\n    </init-param>\n  </filter>\n  <filter-mapping>\n    <filter-name>MetricsCorsFilter</filter-name>\n    <url-pattern>/metrics/*</url-pattern>\n  </filter-mapping>\nSo, using my application's server to handle CORS, like described in your link. This seems to work fine, it sets the appropriate headers on my OPTIONS requests. So I suppose this PR might not be needed.\nBut I still have the question, what is the point of setting Access-Control-Allow-Origin on the MetricsServlet directly? It doesn't seem like it would actually work because it doesn't support the OPTIONS method. It seems the correct way to do this is to set it up on Jetty/Tomcat/whatever, instead of the servlet, so maybe it makes sense to just remove this option entirely.\n. ",
    "steve-oakey": "I'm on an air-gapped network so here is a paraphrased stack trace. Not sure how much help this will be.\njava.lang.IllegalStateException: Already connected\n  at PickledGraphite.connect(PickledGraphite:173)\n  at GraphiteReporter.report(GraphiteReporter:240)\n  at ScheduledReporter.report(ScheduledReporter:251)\n  at ScheduledReporter$1.run(ScheduledReporter:174)\n  at java.util.concurrent.Executors$RunnableAdapter.call(Executors:511)\n  at java.util.concurrent ....\n  at java.util.concurrent ....\nI'm using the default Executor so it is a single thread scheduled executor.. ",
    "mazorigal": "Hi,\n@arteam \nI recently migrated also to 3.2.2 and having similar issue:\n23:03:05.438 ERROR c.codahale.metrics.ScheduledReporter  - Exception thrown from GraphiteReporter#report. Exception was suppressed.\njava.lang.IllegalStateException: Already connected\n    at com.codahale.metrics.graphite.Graphite.connect(Graphite.java:111)\n    at com.codahale.metrics.graphite.GraphiteReporter.report(GraphiteReporter.java:240)\n    at com.codahale.metrics.ScheduledReporter.report(ScheduledReporter.java:251)\n    at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:174)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\ncould it related somehow to that:\nhttps://github.com/dropwizard/metrics/issues/1100 ?. ",
    "elloooooo": "Thank you for your reply. Could you show me the PR?. It sovles my problem. I encounter this problem in the graphite-emitter extension base on this project for Druid. It used some method in PickledGraphite.class but not the GraphiteReporter directly. So I will fix the bug in graphite-emitter as the way you do in GraphiteReporter.\nThank you. . ",
    "behrangsa": "@vladimir-bukhtoyarov I think my requirements got lost in translation. \nWhat I need is to ensure that a given activity has occurred at least once in the past n-minutes, similar to a heartbeat. \nAnything beyond that (e.g. how many times did the even occur in the past event) is nice to have but not a requirement for my particular case.\n\nI think your library's ResetPeriodicallyCounter.java is just what I need.. ",
    "emste": "To give another idea and/or help for someone who wants to work around this: If you are using spring boot actuator, their dropwizard wrapper does support updating a gauge: DropwizardMetricServices.java#L202\nIf you are not using the spring boot framework, you can still take a look at the implementation: There is a custom SimpleGauge class that implements dropwizards Gauge interface and provides a method to directly set the current Gauge value.. ",
    "longtimeago": "As far as I understand, single Gauge is mapped to a single MBean (with default attribute name Value).\nBut what I would like to have is a way to map a Gauge to mbean attribute, so I would have several attributes in the same mbean. @DmitriyO hey :) Nah, we've stopped using jmx as a transport for metrics in favor of https://github.com/prometheus/client_java.\nJMX appears to be not suitable when using container orchestrator solutions like Kube. ",
    "DmitriyO": "Hi @longtimeago , have you resolved this somehow?. @arteam Have a couple of minutes? \ud83d\ude04 . ",
    "rony13": "thanks , BTW,  in my project, i may need to record thousands of different keys, if i use metrics, i need to create as much Metric Object as keys. While by useing statsd, i only need to Initialize a StatsDCLient.. ",
    "ellisjoe": "In library code I'd like to avoid using exceptions for control flow. Currently I have to write something like:\nprivate static MetricRegistry getMetricRegistry() {\n        try {\n            return SharedMetricRegistries.getDefault();\n        } catch (IllegalStateException e) {\n            return new MetricRegistry();\n        }\n    }\nIdeally this method would return an Optional and I could then simplify the above to SharedMetricRegistries.getDefault().orElseGet(MetricRegistry::new), but it looks like metrics still supports Java 7.. ",
    "georgespalding": "This issue burned me when debugging HealthChecks.\nF.x doing LOG.debug(\"What is happening {}\", healthcheck)\nCauses the NPE to happen when enabling debug logging.. ",
    "ChetWang": "java.lang.NoSuchMethodError: com.codahale.metrics.JmxAttributeGauge.\nI think it may have some metrics jars confiliction. ",
    "aljohnso": "appears to have been a permissions issue . In documentation it is stated:\n\"An optional filter init-param name-prefix can be specified to override the base name of the metrics associated with the filter mapping. This can be helpful if you need to instrument multiple url patterns and give each a unique name.\"\n<filter>\n    <filter-name>instrumentedFilter</filter-name>\n    <filter-class>com.codahale.metrics.servlet.InstrumentedFilter</filter-class>\n    <init-param>\n        <param-name>name-prefix</param-name>\n        <param-value>authentication</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>instrumentedFilter</filter-name>\n    <url-pattern>/auth/*</url-pattern>\n</filter-mapping>\nhowever from reading the source code for the servlet package it does not appear to implement this . thanks so much was going crazy looking for this. ",
    "dougbacelar": "Can you clarify if you're using the metrics-spring library?\nYes, I am using the following library: https://github.com/ryantenney/metrics-spring\nAs a hack you could delegate the actual throwing of the exception to another class\nI did something similar to get around this. I created an exception handler class for the application, which is responsible for intercepting all exceptions and handling them accordingly. \nI have one public method for each exception in the handler class, so I could annotate those with @Metered. Now all exceptions are being recorded!\nThank you so much for your detailed response, I now understand the problem much better.. I won't need that for the time being. In the future I intend to create different exceptions for each controller so that won't be a problem :)\nThank you so much for your help!. @ravi-ojha \nI use an ExceptionHandler class to handle the exceptions (not throw them). \nI throw the exceptions inside my services and the ExceptionHandler catches those exceptions.\nIf you can use that approach, you can simply annotate the methods in the ExceptionHandler class with the @Metered annotation to gather metrics from different exceptions.\nI created this repository as an example of the above. I hope this helps you  \ud83d\ude04 . ",
    "ravi-ojha": "@dougbacelar Were you successfully able to track multiple exceptions separately? I'm trying to solve the exact same problem. I created a public class called ExceptionHandler which contains public static methods to throw the exception. I have annotated those methods with @ExceptionMetered and then call them as ExceptionHandler.throwResourceNotFoundException() from the API method, however, I don't see the data logged by ConsoleReporter. Am I missing anything? \nWould be very helpful if you shared a gist of the exception handler class. \nPS: A Python guy moving to Java stack, please excuse any stupidity :). Thank you @dougbacelar! The demo repo is very helpful. ^_^ . I was able to get the second approach to work! I had to kinda connect (bind/inject/register) the CustomClass with the resource API class. Closing the thread.. ",
    "ViToni": "Sounds great! \nDo you have a planned timeline for 4.0?. The changes for 4.0 look great. It seems though one class slipped through:\nClock has class CpuTimeClock which uses JMX to get its information. \n . I am looking forward to test the alpha version. \nRegarding compact2, it looks good:\n/z/git/metrics/metrics-core/target (4.0-development)\n$ jdeps.exe -P metrics-core-4.0.0-SNAPSHOT.jar\nmetrics-core-4.0.0-SNAPSHOT.jar -> not found\nmetrics-core-4.0.0-SNAPSHOT.jar -> C:\\Program Files\\Java\\jdk1.8.0_131\\jre\\lib\\rt.jar (compact1)\n   com.codahale.metrics (metrics-core-4.0.0-SNAPSHOT.jar)\n      -> java.io                                            compact1\n      -> java.lang                                          compact1\n      -> java.lang.invoke                                   compact1\n      -> java.lang.ref                                      compact1\n      -> java.nio.charset                                   compact1\n      -> java.text                                          compact1\n      -> java.util                                          compact1\n      -> java.util.concurrent                               compact1\n      -> java.util.concurrent.atomic                        compact1\n      -> java.util.concurrent.locks                         compact1\n      -> java.util.function                                 compact1\n      -> org.slf4j                                          not found\n\n. ",
    "kushal256": "OK will make my own, but think it would be great to see this built into the Timer class.\nThanks.. ",
    "leizhiyuan": "@StuAtGit  It seems 3.2.3 don't exsit.\nbut 3.2.2 can be visited\nhttp://metrics.dropwizard.io/3.2.2/apidocs/. ",
    "kwsutter": "Sounds good, Ryan!  Thanks.  FYI, I am out starting Friday for a week.  If\nI don't respond in a timely fashion, please reach out to either Heiko Rupp\nor Don Bourne.\nOn Wed, Jul 12, 2017 at 2:46 PM, Ryan Tenney notifications@github.com\nwrote:\n\nHi Kevin,\nThanks for reaching out! We can certainly discuss this as part of Metrics\n4. Let me read the documents you've linked and get back to you within a\ncouple days!\nRyan\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/1161#issuecomment-314876410,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHXkL_XEbkYpjIh0v3DtOKL0m41RUDIkks5sNSKAgaJpZM4OVpMT\n.\n. \n",
    "donbourne": "Following up on what Kevin said when he started this thread, we've recently put out the first release of MicroProfile Metrics at  https://github.com/eclipse/microprofile-metrics/releases/tag/1.0 .  \nWe started from the Dropwizard Metrics com.codahale.metrics and com.codahale.metrics.annotation packages.  DWM was a great base API for us to work from as it contained all the key metric types and concepts necessary to get people able to be productive quickly.  \nWe very much appreciate the thought and work that has gone into DWM and look forward to discussing with you further on how we might collaborate in the future.. ",
    "trshiv": "My use-case is as follows:\nI'm measuring latencies of my system over 1-minute intervals, saving the snapshot of the histogram at the end of every minute and creating a new histogram for the next interval. I also need \"aggregated\" latency percentiles over larger time periods of 1-hour, 1-day and 1 week. To compute this, I need to merge histograms so that the percentiles can be computed correctly from the merged histogram.. ",
    "estekhin": "Seems related to #1005 which was fixed in  3.1.3, but I am getting a lot of timer.mean=NaN with 3.2.3 version.. ",
    "altery": "Forgot to mention it: The problem occurs with 3.2.3.. ",
    "philmtd": "Looks to me like #1135 let this issue appear.\nI added #1230 to fix this.. Cool, thanks!. ",
    "lnorregaard": "Hi \nWhat about the pull request that was submitted to master about collectd could that be included in the 4.0 branch as well?. ",
    "g-fresh": "Created a pull request (#1231) for the metrics-collectd module, which was originally added by @dernasherbrezon.. Hi @arteam ,\nthanks a lot for your feedback.\nI'll try to address the items as soon as possible.\n. Code Climate complains about a test exceeding a total line/method count limit. \nDo I have to split the tests into multiple files?\nThe Travis CI build with openjdk11 failed for a reason which is, I believe, not related to my changes.\nKind regards. ",
    "maciejp": "Hi,\nNow that 4.0.0 is released what are the plans regarding support for tags? I have a use case for which tags are the only solution so if there's a way for me to help with introducing them just let me know.. I guess it might be this one https://github.com/dropwizard/metrics/pull/839 . \nAny timeframe on 5.0.0 release? . ",
    "jared2501": "Hey guys this looks great and things are merged! Any estimates when 5.0.0 will be available on maven?. Ah nevermind, I see the package has moved to: https://mvnrepository.com/artifact/io.dropwizard.metrics5/metrics-core. ",
    "db-vmw": "Glad to see 5.0 in maven repo. Any example code highlighting usage of tags in metric name?. ",
    "DanyalBurke": "Given it's a floating point issue, I felt the right place to fix it would be at the place where the bug gets introduced. I attempted a fix in InstrumentedHandler so that it will treat the response rate as 0 when it is sufficiently decayed. Opinions on whether or not this is the right fix are appreciated? If I don't hear anything I'll submit a pull request on Friday. ",
    "keze": "Why isn't this pull request in 3.2.5 release?. ",
    "dennyac": "Hi @arteam, my PR is based on the master branch. I noticed that most of the PRs are based on 3.2-development and 4.0-development branch. If required, I can create PRs for those branches as well.\nI hope others have come across this use case and find this helpful.  . Thanks @jplock . I'll create another PR based on the 4.0-development branch then.. Thanks @arteam , I'll work on PRs for both 3.2-development and 4.0-development. Hi @arteam , are there any timelines on when metrics 4.0 will be included in dropwizard? \nI totally understand the reasoning behind only having bug fixes for 3.2 and new features in 4.0. But it would be really helpful to have this feature included in the metrics-jersey2 module. . Hi @arteam @jplock , just created the ResponseMetered annotation for 4.0-development.. Hi @arteam @jplock , just created the ResponseMetered annotation for 3.2-development. \nThis is still a work in progress. I noticed there are two modules for jersey in 3.2-development - metrics-jersey and metrics-jersey2. I'll have to work on adding the annotation for metrics-jersey as well.. I've added the ResponseMetered annotation to the metrics-jersey module as well. If you have any suggestions/feedback, I'll incorporate them as well. Thanks!. You don't require context.stop() in the finally block, since you are using try-with-resources. It will be closed automatically. Please read up on try-with-resource and the AutoCloseable interface. ",
    "shashank-devisetty": "So,\n<dependency>\n      <groupId>com.palominolabs.metrics</groupId>\n      <artifactId>metrics-guice</artifactId>\n      <version>3.2.2</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.dropwizard.metrics</groupId>\n      <artifactId>metrics-servlets</artifactId>\n      <version>3.2.3</version>\n      <scope>compile</scope>\n    </dependency>\nthis is fine for Java 7 right. ",
    "Bhavanish1": "We are trying to migrate from codahale to dropwizard metrics. We tried with the latest dropwizard jar. \nHowever its not compatible with IBM JDK 1.6. \nThis is one of the issues seen and we could face more with other scenarios\nWill you be able to provide us the dropwizard metrics jars which are compatible with IBM JDK 1.6.. We are using metrics-core, metrics-json, metrics-jvm, metrics-servlets. \nAre you saying we can use all above with JDK1.6  for Dropwizard 3.2?\nCan't we use Dropwizard 3.2.3?\nThis is the main reason for upgrade: Dropwizard has a jvm monitoring component that looks at GC and we want to utilise it for monitoring\n. ",
    "ngreddyravi": "Metrics-servlets-3.2.3 is having one transitive dependency for profiler-1.0.2 which is causing the issue related to JDK1.6 compatibility. Above trace provided is related to this.\nEven if we exclude this jar, we are not sure what other underlying dependencies may discover at a later point. \nWe are not using AdminServlet. However, we are using MetricsServlet due to which we cannot ignore the metrics-servlet dependency.\nWe don't see any details around these jars compatibility with JDK1.6 as part of release notes. Is this made available as part of any documentation on what supports JDK1.6 and what not?\n. ",
    "bitbythecron": "Thanks @arteam ! Final question (should have asked it originally): if I want to propose a new feature/enhancement, do I just submit the PR or should I get approval for it first (here? Google Groups? etc.). Thanks again!. Looking at the Maven Enforcer plugin docs a little closer (I'm not all that familiar w/ Maven) I was able to get my build succeeding via:\nmvn clean install -Denforcer.fail=false\n\nWould this be an acceptable workaround for the community?. Ah forgot one very important item, adding Akka as a dependency causes the Maven Enforcer plugin (DependencyConvergence rule) to fail. I offered several workarounds in #1217 and am happy to take the charge on any of them or any others this community would consider.. Thanks @arteam I appreciate the feedback and no worries at all. Tell you what, at some point soon I'll publish my new Akka reporter as its own tiny project and I'll send you the links so you know where to look if you ever change you mind ;-)\nCheers!. ",
    "LukaszP1": "Hello Vladimir,\n In this case third-party reservoir you mentioned is better than default one?\nOr even more (according to Rolling-Metrics description) it is better in most of the cases?\n@joschi Thank you for moving my issue.. ",
    "chyangzhang": "@vladimir-bukhtoyarov \n1. The display time units are both milliseconds\n2. You are right actually, T1's frequency is less than T2's\nThat makes sense then. @storozhukBM \nThanks for your replay, I'm rendering the max of the t1 and t2 here. I think @vladimir-bukhtoyarov 's question explained the situation here. ",
    "swallez": "Awesome! Thanks @arteam!. ",
    "srijiths": "Thank you Arterm,\nI was checking whether is there a way to avoid those JMX agents.  The\nnumber of  JMX agents are proportional to the number of applications that\nreports metrics.\nIn my case what i was thinking, i have a kafka cluster with JMX enabled on\na port.  And i have number of kafka connectors enabled with dropwizard\nmetrics. Instead of using separate agents per application, would be great\nif we can centralize JMX reporting.\nJust checking the feasibility. Thank you\nOn 24-Dec-2017 1:50 am, \"Artem Prigoda\" notifications@github.com wrote:\n\nI'm not aware of that possible with JMX. I think your best bet to report\nmetrics locally and then enabled a JMX agent. There are many 3rd party\nreporters which supported reading JMX metrics from a JVM instance.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/dropwizard/metrics/issues/1235#issuecomment-353746060,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA_3L3ywh1PHiZC2bd82Jrq-K51hq7naks5tDWCNgaJpZM4RJZUp\n.\n. \n",
    "morpheus9999": "Doesn't make any sense... . ",
    "zharvey-welltok": "Thanks @arteam -- wouldn't you be worried about hogging memory though? Say I have a huge promotional event that drives 10,000+ users to my app...I'd have a Timer.Context for each of them, memory would explode, no?!. Thanks @vladimir-bukhtoyarov makes perfect sense. Just one quick question though: do I need to call timer.stop() after timer.update to stop the timer from counting any further? Thanks again!. ",
    "pulquero": "How about the other metric types?. Looks good, but how about the other metric types?. ",
    "mbrannstrom": "The memory turnover caused by calling MetricRegistry#getGauges(MetricFilter) etc (copying maps) from ScheduledReporter have now been eliminated by the class GarbageFreeScheduledReporter.\nThe assumption is that metrics are reported more often than they are added/removed.\nAdded in commit 71a4321.. Apart from the comment on InfluxDbUdpSender#encode, I can fix the code according to your comments. They all sound reasonable.\nRegarding https://github.com/brettwooldridge/influx4j, I don't see how it is GC free nor proper. Maybe I've misunderstood something. For example, see line 324 in Point.java  for serialization. String#getBytes() at line 326 creates a new array and String#getBytes(int, int, byte[], int) at line 341 is deprecated (does not properly encode chars). Likely the author has only tested one code path, that happens to be garbage free (but uses deprecated methods).. @arteam I hope you're satisfied with the changes :-). @arteam, version 5.0.0 of dropwizard metrics is already on Maven central. Is that a mistake?\nFor example, io.dropwizard.metrics5:metrics-core:5.0.0 is on maven central (01-Feb-2018)\nBTW, when is metrics 5.0.0 planned to be released?. Here is another take on the prometheus style tags, see poc here: https://github.com/dropwizard/metrics/compare/5.0-development...mbrannstrom:5.0-prometheus-tags\nThis one avoids the inheritance of all metrics classes from TaggedMetric. Instead the builder class called NamedMetric achieves pretty much the same thing. See the NamedMetricTest for intended usage. Also, I think having key-value-pairs in the tag method is more readable e.g. tag(\"method\", \"get\", \"path\", \"/foo\") or tag(\"method\", \"get\").tag(\"path\", \"/foo\") rather than just tag(\"get\", \"/foo\").\nIf MetricName (and thus NamedMetric) methods resolve and tagged were renamed to name and tag respectively, the usage would perhaps be even nicer.\nThe method counter2 should have a better name... perhaps the original counter (et al) methods should be replaced altogether? I.e. old counter(\"foo\") becomes counter(\"foo\").get(). In latency sensitive applications, low memory turnover is important. Including a 3rd party library that creates lots of garbage is often not acceptable, since it affects the GC pauses of the entire application.\nIt would be nice to be able to use (parts of) the metrics library in such an applications. Especially, since collecting metrics is (also) important in latency and performance critical applications.\nSee for example, the garbage free implementation of log4j2. Their TextEncoderHelper has more code... as a comparison. I tried to keep this method simple.. ",
    "JeremyColton": "\n\nThanks so much.\n\n\n'Volatile process' meaning it's unknown how often it executes?\n\n\nMy use-case is to record every time a specific event occurs (eg page view) and to see the sum of the views per time interval (not the mean).  This allows me to see how many page views happened in the last hour, day, week etc. (NB I'm sending my metrics to DataDog if this helps...). ",
    "davbo": "I've made a proof-of-concept here: https://github.com/dropwizard/metrics/compare/5.0-development...davbo:follow-prometheus-pattern-for-tags\nThe changes are mostly lifted from https://github.com/prometheus/client_java but include adding a requests-counter metric to the InstrumentedHandler for Jetty, hopefully this gives is a good idea of how the interface might look if taken any further. \nNo idea how this fits with the MetricRegistry or MetricSet's in metrics-core. Interested to hear your thoughts on what would be needed to progress beyond a proof-of-concept.. ",
    "fabienrenaud": "I submitted a PR. Let me know of any feedback.. You introduced a defect with https://github.com/dropwizard/metrics/commit/4384903a1f170a6be83e571afa6a203ad9a83218\nThe StringBuilder is reused across calls to the log* methods, so setLength(0) is required. This helps reducing the frequency of buffer resize/copy and generates less garbage (which is good since we want logging to be as cheap as possible).\nThere is no test in Slf4jReporterTest verifying logging multiple metrics in a row outputs the expected result.. @arteam Could you please release this change? It's been 8 months.... fixed.. fixed. fixed GraphiteReporter as well.. removed ThreadLocal. StringBuilder has to be a local variable to the report method since there is no guarantee the method won't be executed in parallel.. removed if.. I think they are worth keeping:\n - they are very simple methods, easy to read, understand, change. no hidden code complexity here.\n - convertDuration and convertRate return double so only having an append(...,Object) could cause extra auto-boxing\n - the JVM can likely optimize primitive -> box(primitive) -> primitive call chains\n - and yes, StringBuilder.append(long) is slightly more efficient than StringBuilder.append(Object) called with a Long (unless the JVM un-erases types for some core classes? -- Hotspot JVM does some surprising optimizations some times :) ). \nI can remove them if you feel strongly about it but now that the code is there, I think it's worth keeping.. fixed.. the idea was to be consistent with how tests were written.\nremoved.. this is no longer necessary since attribute filtering doesn't apply to counters. renamed durationSupplier here since this isn't a duration.. ditto. I like to use this pattern to override default values passed to the constructor of the main unit tested component. I think in the context of unit tests it makes sense since there is only 1 class that is supposed to be tested. In the context of Slf4jReporter, it should be clear that the only way of testing Slf4jReporter is to use its builder and that its builder takes an optional Set<MetricAttribute> disabledMetricAttributes.\nThis pattern becomes particularly handy when there might be more than 1 default value to overwrite for some tests. The alternatives would be to either invoke the full builder with all the proper default values set but this leads to code duplication; or to add more arguments to the infoReporter and errorReporter factory methods to overwrite the default value but this doesn't scale well when more than a couple of variables needs their default values overwritten and the factory method may end up having as many parameters as the builder...\nI'll add a comment clarifying this is used to build the reporter in each test and can be overridden. I will also move at the top of the infoReporter and errorReporter methods to hep identify the relationship.. ",
    "regispl": "@arteam Out of curiosity - is there any specific reason why it's not possible in other reporters, e.g. JMX one? Just a missing feature or is there a potential issue that I'm not aware of? :-). ",
    "vdoleans01": "Hi.\nI use your library in my project and it work well the majority of time but unfortunatly we have time to time the java.util.NoSuchElementException : at java.util.concurrent.ConcurrentSkipListMap.firstKey(ConcurrentSkipListMap.java:2053)\nwould it be possible to reconsider the priority of the fix ?\nThanks. ",
    "genuss": "Take a look at this project https://github.com/vladimir-bukhtoyarov/rolling-metrics\nIt has everything you need.\nIf you don't want to depend on one more library, you can use nonNegativeDerivative function from graphite.. ",
    "rahulravindran0108": "@arteam any thoughts on this ?. @arteam I've opened a PR for this. Do take a look at it.. @arteam did you want me to add this into #1240 or incorporate that on this PR ?. ",
    "devonsong": "Hi, thank you for taking this up. The required client side config which works for us is something like this:\nLoadPlugin network\n<Plugin network>\n    <Server \"10.0.0.1\" \"25826\">\n        SecurityLevel Encrypt\n        Username \"user\"\n        Password \"pass\"\n    </Server>\n</Plugin>\nThanks!. ",
    "jeffzoch": "I am having the same issue, @ExceptionMetered does not work when the exception is thrown from within an observable.. ",
    "fbacchella": "The code for PausingContext is provided. But since metrics 4, Context is an Interface, so why do you talk about private method ?\nIndeed, I can write a new method pausedTime(), that's better and simpler.\nBut having to override Timer(Reservoir reservoir, Clock clock) is not very efficient to me. Why the clock attribute needs to be private ? . Ok I understand the problem with my PausingContext and the Interface/Class discution. It's because of ff4573de3681920029935d1155613b641fa8d199. I wrote it for Metrics 4.0. Is my custom timer doomed ? But there is no equivalent for MetricRegistry.timer(String name) that create the metric if needed ; MetricRegistry.register(String name, T metric) will fail if the name is not define.\n. ",
    "Narimm": "I will take a look sure\n. So I have verified this is not an issue as long as you build against a JDK  > 1.8.161 ...do you still want to put in a unit test .\n. It does mean metrics using a collectd ssl connection may fail on Java 1.8.152 or less. The alternative is opening the\nregistery.registerAll(String prefix,MetricSet set) to be public rather than private. ",
    "RishiPrakash": "I would like to work on this issue.. ",
    "decbis": "The failed test in Travis is not related to my change that failed before, i.e. https://travis-ci.org/dropwizard/metrics/builds/369903978?utm_source=github_status&utm_medium=notification. Am guessing it's flaky?. @arteam Any particular objections to me (back)porting onto the 3.1 and/or 3.2 branches?. ",
    "tjcelaya": "I guess I should've provided a code sample, but what I'm specifically asking about is whether or not #1307 would be a useful patch. It seems cumbersome to have all reporters implement both interfaces but force the user to choose between the types when referring to a generic reporter.\nIf the PR seems silly then feel free to disregard the change.. Pushed a fix for the codeclimate issue. There seems to be an unrelated test feailure in metrics-httpasyncclient though, not sure what to do about that.. I hadn't considered that removing the interface would cause problems but it makes sense. Updatd the PR to address the issue.\nAlso, the same metrics-httpasyncclient error seems to have occurred again.. ",
    "rsouhrain": "Hi @arteam, when would 4.0-jmx be released?\nThanks. ",
    "michaelpj": "Thanks for the quick review! I've put up the suggested follow-up PRs.. Updated.. FWIW I do find the JMX reporting useful for ad-hoc inspection of a running process, so I think it's worth keeping in working condition, even if it's not the primary interface.. We still need to see which of the three things we need to quote - it might not be all of them.. Sure.. Argh, sorry, I thought I got rid of that and then my IDE put it back in :). ",
    "lumeche": "This may relates to https://github.com/dropwizard/metrics/issues/1122\n. I observed in 3.1.15. ",
    "snakeru": "I pushed out some updates, not all of your comments are addressed (please see my comments above).\nStanding by for your feedback.\nAlso, a quick question - once we settle up on some version - do you want me to squash commits or do you prefer to have the complete history with all the small changes?. Ah, @arteam, I thought that this was just added, but now looking at the file history I see that it spans back at least to 2014 and probably more. Adding the constructors back.\nStill - should I may be add @Deprecated to them at least?. Done. ok, will undo. Arteam, my understanding was that this was just added to the development branch and did not yet made it to any stable release. In this case it is probably ok to make backwards-incompatible changes? Or do you still think that I should add these constructors back?. ok, will remove the check.. The whitespacing was changed by the IntelliJ (which, I think, is a good thing, as long as all users have consistently configured autoformatters). But I'll undo it, no problem.. There are two notes from my side here:\n1) I think these improve readability a bit, though I might be mistaken\n2) TBH, this is an autogenerated code. I first did it with lombok and then delombokize the code to get the template out.\nAgain - since this is your repo, not mine, will remove \"final\", no problem.. If we go for the builder pattern, we should discourage usage of the constructor. Ideally - make it private, which consequently makes this change mandatory. So even if we end up not making the constructor private - this would still be a good change as we showcase, how the library is to be used.\nPerformance-wise this is not a big deal, as setting up metrics usually happens only once per binary execution.. Sure.. ",
    "vorburger": "@arteam it would be very cool and much appreciated if you could cut a 4.0.3 release - we would test and use it!. ",
    "splatch": "@arteam, @vorburger any plans to cut 4.0.3 any time soon? ;-) I've just hit this one.. @arteam thank you very much for cutting release :hand:!. ",
    "andrewsensus": "@arteam I think this makes it a little clearer that JmxReporter isn't in com.codahale.metrics.* anymore. I took a guess on which branch to commit to, and I'm not setup to build the documentation to verify the changes look like I expect them to.. ",
    "henrik242": "@arteam: The removal isn't mentioned in the 4.x release notes: https://metrics.dropwizard.io/4.0.0/about/release-notes.html\nAlso ganglia is in https://metrics.dropwizard.io/4.0.5/manual/ganglia.html  (but that 4.0.5 URL seems wrong somehow, since https://metrics.dropwizard.io/4.0.5/about/release-notes.html only mention 3.x and older). ",
    "zd-project": "What do you mean by avoid using it? Do you mean not to declare it as a resource in try block? \nI think I can do something like so right?\ntiming = timer.time();\ntry {\n     // something...\n     timing.stop();\n} catch(exception e) {\n     LOG.warn(...);\n}. Thanks. ",
    "scottjohnson": "We are experiencing this same issue, while using Spring Webflux/Reactor to handle asynchronous requests.\nFor requests that get suspended as part of handling the request, the active-suspended metric is reported correctly.\nHowever for requests that complete immediately (without getting suspended as part of handling the request), the active-suspended metric is decremented in  InstrumentedHandler#onComplete without having first been incremented in the #handle method's if (state.isSuspended()) { condition. This causes the metric to have a monotonically growing negative value as an increasing number of requests are handled by the server.\nOur set up is:\nMetrics: 4.0.3\nJetty: 9.4.12.v20180830\nSpring Webflux: 5.1.2\nReactor-core: 3.2.2\nJava: 8, 9, 10\nAs stated by @tnn, is appears that the activeSuspended.dec() in #onComplete needs to take in to account whether the request was first suspended before trying to decrement this metric.. ",
    "thiyagu06": "@arteam can you please look at this? Also which branch you want me to raise PR? The UT failure are not because the change I made. . ",
    "facboy": "I think the general approach for BOMs seems to be that they should only manage the versions of a project's own artifacts, not the versions of its transitive dependencies.. ",
    "SgrAlpha": "I think your dev branch is broken, I can reproduce the test failure even without my change.. @arteam I just synced the latest changes, PR build looks good now.. ",
    "Sharpie": "Interested in this as well. The sum component added to timers in #1254 would be very helpful.. ",
    "pe-st": "I tried to reduce the codeclimate issues a bit. There are some issues left, but I'm not sure that it makes sense to address them, I would mark them as false positives (i.e. the legibility of the code could suffer by further refactorings) or legacy (i.e. they were in the code before my pull request).\nIf you find my PR useful, I can also update the documentation (docs/source/manual/core.rst). The current travis build with Java 11.0.2 fails due to a problem with javadoc:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.0.1:jar (attach-javadocs) on project metrics-annotation: MavenReportException: Error while generating Javadoc: \n[ERROR] Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.\n[ERROR] \n[ERROR] Command line was: /home/travis/openjdk11/bin/javadoc @options @packages\nThis problem seems to be a problem with JDK or the maven-javadoc-plugin and was already reported elsewhere without known workaround, e.g.\n\nhttps://github.com/oracle/opengrok/issues/2629\nhttps://bugs.openjdk.java.net/browse/JDK-8212233\nhttps://issues.apache.org/jira/browse/MJAVADOC-555. \n",
    "wudan3551": "i have same demands, and i think a pluggable Meter is better!. ",
    "sleberknight": "I looked at the 3 failed code climate issues. The first one which increased the LOC in the test from 25 to 27...I could certainly collapse a few lines in the isEqualTo concatenated string but I don't think that makes the code better, and possibly less readable.\n\"Fixing\" the other two issues by extracting the similar couple of lines in those tests also doesn't seem like it would make the code more readable, but it would be easy enough to extract a separate method.. @arteam I took an initial stab at adding a Clock to Result. See:\nhttps://github.com/sleberknight/metrics/commit/38f4ae2adce456d2736890b317f5e8ed3cef9825\nWithout modifying the existing Resultfactory methods like healthy, unhealthy, etc. I was able to add a usingClock method to HealthCheck.ResultBuilder which lets you customize the Clock when using a builder. This let me update the HealthCheckTest and HealthCheckServletTest to include the actual timestamp in the test assertions.\nThe Result static factory methods will still use the default clock (Clock.defaultClock()). I could not immediately think of a non-invasive way (i.e. not significantly changing the public API) to add the Clock when using those factory methods.\nIf you think this change makes sense I can submit directly as a PR or first create an issue and then a PR. Let me know if you think these changes make sense.. I went ahead and created a PR https://github.com/dropwizard/metrics/pull/1372 for your consideration. It would solve issue https://github.com/dropwizard/metrics/issues/1371 which I also created.. ",
    "abennet": "It's not very straightforward to expose in entirety. The slf4j logger I am using is a custom slf4j adapter (extends MarkerIgnoringBase implements LocationAwareLogger) to an extension of a java.util logger.\nIs there a more advisable way to configure a java.util logger for metric registry reporting?\nThank you.. ",
    "dependabot[bot]": "OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version.\nIf you change your mind, just re-open this PR and I'll resolve any conflicts on it.. Superseded by #1411.. ",
    "oobles": "I was able to copy the JmxReporter and hack a JmxLongGauge that returns long instead of Object.  Works, but doesn't feel like the best solution.  Will do for now.\n@Override\n        public void onGaugeAdded(String name, Gauge<?> gauge) {\n            try {\n                if (filter.matches(name, gauge)) {\n                    final ObjectName objectName = createName(\"gauges\", name);\n                    Object object = gauge.getValue();\n                    if (object instanceof Long) {\n                        registerMBean(new JmxLongGauge(gauge, objectName), objectName);\n                    } else {\n                        registerMBean(new JmxGauge(gauge, objectName), objectName);\n                    }\n                }\n            } catch (InstanceAlreadyExistsException e) {\n                LOGGER.debug(\"Unable to register gauge\", e);\n            } catch (JMException e) {\n                LOGGER.warn(\"Unable to register gauge\", e);\n            }\n        }. ",
    "dhatanian": "Looking at the build failures:\n Travis build seems to be broken on 4.1-development. It does not seem related to this PR\n Codeclimate complains about duplication, however I believe I'm following the general style of unit tests in this project. I can refactor and deduplicate more if needed, but it will come at the cost of readability for the unit tests.\n. ",
    "kim": "sorry, but this can't actually work: the equals condition is always true. this line should be changed to:\njava\n.addInt(hostName.equals(getDefaultHostLabel()) ? 0 : 1)\n. well, subclassing is fine, but as far as I can see, the call chain is sendToGanglia, private void sendMetricData, protected void sendMetricData. the private one sets the first argument to getHostLabel(), so the condition is always true, unless I'm missing something. or are you saying that I should override protected void sendMetricData in my subclass as well?\n. ",
    "stewartoallen": "If you subclass and override getHostLabel(), it works as expected.  Subclassing is the only way to do this as the class is written, so the original commit is correct.\nOn Aug 28, 2012, at 8:02 PM, Kim Altintop wrote:\n\nIn metrics-ganglia/src/main/java/com/yammer/metrics/ganglia/GangliaReporter.java:\n\n.addString(metricName)// metric name\n-                .addInt(0)// spoof = True\n-                .addInt(hostName.equals(getHostLabel()) ? 0 : 1)// spoof = True/1\n  sorry, but this can't actually work: the equals condition is always true. this line should be changed to:\n\n.addInt(hostName.equals(getDefaultHostLabel()) ? 0 : 1)\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mathijs81": "Fixed.\n. ",
    "aronatkins": "Update this.failures.\n. The default Graphite client doesn't log anything itself. It simply counts failures and re-throws.\n. ",
    "mwuertinger": "We should either add a flag to support HTTPS or we should offer a constructor allowing to pass in the full URL.\n. ",
    "wonook": "CsvReporter extends a ScheduledReporter class, which as we can see on this line, only uses a SingleThreadScheduledExecutor, so to me it doesn't seem like an issue. If you still think this could be an issue, please let me know! \ud83d\ude04 \n. Hmm it was like this even before I put my hands onto it, but I agree that t's more like an error. \n. Sounds decent\n. I am not sure if it is ensured that each metric is removed on the Reporter side. \n. ",
    "anthonydahanne": "hehe, not sure what this commit is bringing :-)\n. ah ! ok then ! good catch\n. ",
    "alexmnyc": "@arteam It looks like connect() will re-use the old address if it is not cleared - https://github.com/alexmnyc/metrics/blob/16679f3e5fddcfc79bbe51bfab0ca8ab9c377088/metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java#L114 no?. ok, yep. it was the shadowing that I did not see, thanks. Closing. ",
    "rajcspsg": "@dennyac at some point context needs to stopped for timer. \nSo I think it should be in either catch block or finally, right?. Thanks @dennyac. I have updated the PR. Could you please check now?. "
}